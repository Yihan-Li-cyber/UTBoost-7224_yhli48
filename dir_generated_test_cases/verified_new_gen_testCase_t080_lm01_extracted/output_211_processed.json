{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..3b0373a 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -128,12 +128,41 @@ def test_arith_oper():\n     with pytest.raises(ModelDefinitionError, match=r\"Unsupported operands for arithmetic operator: .*\"):\n         _arith_oper(sh1, map1)\n \n+from astropy.modeling import models as m\n+from astropy.modeling.separable import separability_matrix\n \n @pytest.mark.parametrize(('compound_model', 'result'), compound_models.values())\n def test_separable(compound_model, result):\n     assert_allclose(is_separable(compound_model), result[0])\n     assert_allclose(separability_matrix(compound_model), result[1])\n \n+def test_nested_compound_models_separability():\n+    cm = m.Linear1D(10) & m.Linear1D(5)\n+    expected_cm = np.array([\n+        [True, False],\n+        [False, True]\n+    ])\n+    assert_allclose(separability_matrix(cm), expected_cm)\n+\n+    nested_cm = m.Pix2Sky_TAN() & cm\n+    expected_nested_cm = np.array([\n+        [True, True, False, False],\n+        [True, True, False, False],\n+        [False, False, True, False],\n+        [False, False, False, True]\n+    ])\n+    assert_allclose(separability_matrix(nested_cm), expected_nested_cm)\n+\n+    # Additional complex nested models if desired\n+    complex_nested_cm = m.Pix2Sky_TAN() & (m.Linear1D(5) & m.Linear1D(10))\n+    expected_complex_nested_cm = np.array([\n+        [True, True, False, False],\n+        [True, True, False, False],\n+        [False, False, True, False],\n+        [False, False, False, True]\n+    ])\n+    assert_allclose(separability_matrix(complex_nested_cm), expected_complex_nested_cm)\n+\n \n def test_custom_model_separable():\n     @custom_model\n",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "diff --git a/astropy/io/fits/tests/test_connect.py b/astropy/io/fits/tests/test_connect.py\nindex 00deafe..1c91e21 100644\n--- a/astropy/io/fits/tests/test_connect.py\n+++ b/astropy/io/fits/tests/test_connect.py\n@@ -1,3 +1,4 @@\n+\n import gc\n import warnings\n \n@@ -7,7 +8,9 @@ from numpy.testing import assert_allclose, assert_array_equal\n \n from astropy import units as u\n from astropy.io import fits\n-from astropy.io.fits import BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu\n+from astropy.io.fits import BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu, connect\n+from astropy.io.registry import identify_format\n+from astropy.table import Table\n from astropy.io.fits.column import (\n     _fortran_to_python_format,\n     _parse_tdisp_format,\n",
  "astropy__astropy-14508": "",
  "astropy__astropy-14539": "diff --git a/astropy/io/fits/tests/test_diff.py b/astropy/io/fits/tests/test_diff.py\nindex 9bf4897..5613034 100644\n--- a/astropy/io/fits/tests/test_diff.py\n+++ b/astropy/io/fits/tests/test_diff.py\n@@ -601,7 +601,20 @@ class TestDiff(FitsTestCase):\n         assert \"13 different table data element(s) found (65.00% different)\" in report\n         assert report.count(\"more indices\") == 1\n \n-    def test_identical_files_basic(self):\n+    def test_vla_identical_files(self):\n+        \"\"\"\n+        Test that FITSDiff correctly identifies identical files\n+        when VLAs (variable-length arrays) are present.\n+        \"\"\"\n+\n+        col = Column('a', format='QD', array=[[0], [0, 0]])\n+        hdu = BinTableHDU.from_columns([col])\n+        with fits.open(hdu.writeto('diffbug.fits', overwrite=True)) as hdul:\n+            diff = FITSDiff('diffbug.fits', 'diffbug.fits')\n+            assert diff.identical\n+            assert diff.diff_total == 0\n+            report = diff.report()\n+            assert \"different table data element(s) found\" not in report\n         \"\"\"Test identicality of two simple, extensionless files.\"\"\"\n \n         a = np.arange(100).reshape(10, 10)\n",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..6ce8b7f 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -88,6 +88,22 @@ def test_inherit_docstrings():\n         # TODO: Maybe if __doc__ is None this test should be skipped instead?\n         assert Subclass.__call__.__doc__ == \"FOO\"\n \n+def test_inherit_docstrings_with_properties():\n+    class Base(metaclass=misc.InheritDocstrings):\n+        @property\n+        def bar(self):\n+            \"\"\"BAR\"\"\"\n+            return 42\n+\n+    class Subclass(Base):\n+        @property\n+        def bar(self):\n+            return 42\n+\n+    if Base.bar.__doc__ is not None:\n+        # Ensure that the docstring is inherited from the Base class\n+        assert Subclass.bar.__doc__ == \"BAR\"\n+\n \n def test_set_locale():\n     # First, test if the required locales are available\n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..132577e 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -168,8 +168,22 @@ def test_multiple_solidus():\n     assert 'm/s/kg' in str(warning_lines[0].message)\n     assert 'discouraged' in str(warning_lines[0].message)\n \n-    with pytest.raises(ValueError):\n-        u.Unit(\"m/s/kg\", format=\"vounit\")\n+import pytest\n+import astropy.units as u\n+\n+def test_unit_equality_with_none():\n+    # Test that UnrecognizedUnit does not raise TypeError when compared with None\n+    unit = u.Unit('asdf', parse_strict='silent')\n+    assert unit != None, \"UnrecognizedUnit should not be equal to None\"\n+    assert unit == u.Unit('asdf', parse_strict='silent'), \"Unit should be equal to itself\"\n+    assert unit != u.m, \"UnrecognizedUnit should not be equal to a recognized unit\"\n+    assert None != unit, \"None should not be equal to UnrecognizedUnit\"\n+    assert unit not in (None, u.m), \"UnrecognizedUnit should not be in a tuple containing None or recognized units\"\n+\n+def test_invalid_type_comparison():\n+    unit = u.Unit('asdf', parse_strict='silent')\n+    assert unit != 5, \"UnrecognizedUnit should not be equal to an integer\"\n+    assert unit != \"random string\", \"UnrecognizedUnit should not be equal to a random string\"\n \n \n def test_unknown_unit3():\n",
  "astropy__astropy-7671": "diff --git a/astropy/utils/tests/test_introspection.py b/astropy/utils/tests/test_introspection.py\nindex 852d721..7ac5271 100644\n--- a/astropy/utils/tests/test_introspection.py\n+++ b/astropy/utils/tests/test_introspection.py\n@@ -69,7 +69,16 @@ def test_minversion():\n     test_module.__version__ = '0.12.2'\n     good_versions = ['0.12', '0.12.1', '0.12.0.dev']\n     bad_versions = ['1', '1.2rc1']\n+    # Adding test for the specific issue regarding LooseVersion and version strings like '1.14dev'\n+    additional_good_versions = ['1.14dev', '1.14.0.dev0']\n+    additional_bad_versions = ['1.14.3', '2.0']\n+    for version in additional_good_versions:\n+        assert minversion(test_module, version)\n+    for version in additional_bad_versions:\n+        assert not minversion(test_module, version)\n+\n+    # Original tests\n     for version in good_versions:\n         assert minversion(test_module, version)\n     for version in bad_versions:\n-        assert not minversion(test_module, version)\n+        assert not minversion(test_module, version)\n",
  "astropy__astropy-8707": "",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..3bc3791 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -143,6 +143,39 @@ class TestQuantityCreation:\n         q3 = u.Quantity(a3, u.yr)\n         assert q3.dtype == a3.dtype\n         # items stored as objects by numpy should be converted to float\n+\n+        # Test preservation of float16, float32, and other float types\n+        a3_16 = np.array([1., 2.], dtype=np.float16)\n+        q3_16 = u.Quantity(a3_16, u.yr)\n+        assert q3_16.dtype == a3_16.dtype\n+\n+        a3_32 = np.array([1., 2.], dtype=np.float32)\n+        q3_32 = u.Quantity(a3_32, u.yr)\n+        assert q3_32.dtype == a3_32.dtype\n+\n+        a3_64 = np.array([1., 2.], dtype=np.float64)\n+        q3_64 = u.Quantity(a3_64, u.yr)\n+        assert q3_64.dtype == a3_64.dtype\n+\n+        # Test using numpy scalar types as quantities\n+        q_float16 = np.float16(1) * u.km\n+        assert q_float16.dtype == np.dtype('float16')\n+\n+        q_float32 = np.float32(1) * u.km\n+        assert q_float32.dtype == np.dtype('float32')\n+\n+        q_float64 = np.float64(1) * u.km\n+        assert q_float64.dtype == np.dtype('float64')\n+\n+        q_float128 = np.float128(1) * u.km\n+        assert q_float128.dtype == np.dtype('float128')\n+\n+        # Test using Python float types\n+        q_float = np.float(1) * u.km\n+        assert q_float.dtype == np.dtype('float64')\n+\n+        q_float_ = np.float_(1) * u.km\n+        assert q_float_.dtype == np.dtype('float64')\n         # by default\n         q4 = u.Quantity(decimal.Decimal('10.25'), u.m)\n         assert q4.dtype == float\n",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..8ca2b39 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -218,7 +218,14 @@ TEST_DATA = [\n     (URLValidator(EXTENDED_SCHEMES), 'git+ssh://git@github.com/example/hg-git.git', None),\n \n     (URLValidator(EXTENDED_SCHEMES), 'git://-invalid.com', ValidationError),\n-    # Trailing newlines not accepted\n+    # Test invalid URLs with unencoded characters in the username and password\n+    (URLValidator(), 'http://foo@bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo/bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar@baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar/baz@example.com', ValidationError),\n+    (URLValidator(), 'http://invalid-.com/?m=foo@example.com', ValidationError),\n+    (URLValidator(), \"http://-.~_!$&'()*+,;=%40:80%2f@example.com\", ValidationError),\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n     # Trailing junk does not take forever to reject\n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..ebee587 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -8,6 +9,7 @@ from django.db.models import (\n     Avg, Count, DecimalField, DurationField, F, FloatField, Func, IntegerField,\n     Max, Min, Sum, Value,\n )\n+from django.db.models.expressions import Case, When\n from django.test import TestCase\n from django.test.utils import Approximate, CaptureQueriesContext\n from django.utils import timezone\n@@ -389,7 +391,26 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n-    def test_count_star(self):\n+    def test_count_distinct_expression(self):\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=300, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n+\n+    def test_count_distinct_expression_multiple_conditions(self):\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(\n+                When(pages__gt=300, then='rating'),\n+                When(pages__lt=150, then='rating')\n+            ), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 5)\n+\n+    def test_count_distinct_expression_no_condition(self):\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=0, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n         sql = ctx.captured_queries[0]['sql']\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..e47e3b9 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1090,6 +1090,13 @@ class OverrideSettingsTests(SimpleTestCase):\n         base_url attribute of django.core.files.storage.default_storage.\n         \"\"\"\n         self.assertEqual(default_storage.base_location, '')\n+\n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        Ensure that the default FILE_UPLOAD_PERMISSIONS is 0o644 when not set.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n \n",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..88ddea4 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,5 +1,7 @@\n+\n import os\n import signal\n+import subprocess\n from unittest import mock\n \n from django.db.backends.postgresql.client import DatabaseClient\n@@ -29,7 +31,36 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             DatabaseClient.runshell_db(dbinfo)\n         return self.subprocess_args, self.pgpass\n \n-    def test_basic(self):\n+    def test_pgpassword_set(self):\n+        def _mock_subprocess_run(*args, env=None, **kwargs):\n+            self.pgpassword_env = env.get('PGPASSWORD')\n+            return subprocess.CompletedProcess(args, 0)\n+\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            dbinfo = {\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'password': 'somepassword',\n+                'host': 'somehost',\n+                'port': '444',\n+            }\n+            DatabaseClient.runshell_db(dbinfo)\n+            self.assertEqual(self.pgpassword_env, 'somepassword')\n+\n+    def test_pgpassword_not_set_without_password(self):\n+        def _mock_subprocess_run(*args, env=None, **kwargs):\n+            self.pgpassword_env = env.get('PGPASSWORD')\n+            return subprocess.CompletedProcess(args, 0)\n+\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            dbinfo = {\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+            }\n+            DatabaseClient.runshell_db(dbinfo)\n+            self.assertIsNone(self.pgpassword_env)\n         self.assertEqual(\n             self._run_it({\n                 'database': 'dbname',\n@@ -113,4 +144,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..651df89 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -5,6 +5,8 @@ from django.contrib.contenttypes.models import ContentType\n from django.core.management import call_command\n from django.db import migrations, models\n from django.test import TransactionTestCase, override_settings\n+from django.contrib.contenttypes.models import ContentType\n+from django.db import connections, transaction, IntegrityError\n \n \n @override_settings(\n@@ -46,8 +48,28 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n-\n-    def test_missing_content_type_rename_ignore(self):\n+    \n+    def test_existing_content_type_rename_other_database(self):\n+        class TestRouter:\n+            def db_for_write(self, model, **hints):\n+                return 'default'\n+        \n+        with override_settings(DATABASE_ROUTERS=[TestRouter()]):\n+            # Create content type in the 'other' database\n+            ContentType.objects.using('other').create(app_label='contenttypes_tests', model='foo')\n+            other_content_types = ContentType.objects.using('other').filter(app_label='contenttypes_tests')\n+            \n+            # Run migration on the 'other' database\n+            call_command('migrate', 'contenttypes_tests', database='other', interactive=False, verbosity=0)\n+            \n+            # Verify rename on 'other' database\n+            self.assertFalse(other_content_types.filter(model='foo').exists())\n+            self.assertTrue(other_content_types.filter(model='renamedfoo').exists())\n+            \n+            # Reverse migration\n+            call_command('migrate', 'contenttypes_tests', 'zero', database='other', interactive=False, verbosity=0)\n+            self.assertTrue(other_content_types.filter(model='foo').exists())\n+            self.assertFalse(other_content_types.filter(model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', database='default', interactive=False, verbosity=0,)\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n@@ -63,4 +85,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "diff --git a/tests/generic_inline_admin/tests.py b/tests/generic_inline_admin/tests.py\nindex 9dd9fd9..1a54d4d 100644\n--- a/tests/generic_inline_admin/tests.py\n+++ b/tests/generic_inline_admin/tests.py\n@@ -425,7 +425,32 @@ class GenericInlineModelAdminTest(SimpleTestCase):\n             inlines = [\n                 AlternateInline, MediaInline\n             ]\n+\n+            def get_inlines(self, request, obj=None):\n+                if hasattr(request, 'name'):\n+                    if request.name == 'alternate':\n+                        return [self.inlines[0]]\n+                    elif request.name == 'media':\n+                        return [self.inlines[1]]\n+                return []\n+\n         ma = EpisodeAdmin(Episode, self.site)\n-        inlines = ma.get_inline_instances(request)\n-        for (formset, inline), other_inline in zip(ma.get_formsets_with_inlines(request), inlines):\n-            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+        self.assertEqual(ma.get_inlines(request, None), [])\n+        self.assertEqual(ma.get_inline_instances(request), [])\n+        for name, inline_class in (('alternate', AlternateInline), ('media', MediaInline)):\n+            request.name = name\n+            self.assertEqual(ma.get_inlines(request, None), [inline_class])\n+            self.assertEqual(type(ma.get_inline_instances(request)[0]), inline_class)\n+\n+        # New test case to ensure the hook works with a model instance\n+        episode_instance = Episode()\n+        self.assertEqual(ma.get_inlines(request, episode_instance), [])\n+        request.name = 'alternate'\n+        self.assertEqual(ma.get_inlines(request, episode_instance), [AlternateInline])\n+        request.name = 'media'\n+        self.assertEqual(ma.get_inlines(request, episode_instance), [MediaInline])\n+\n+        # Test case for a request without 'name' attribute\n+        del request.name\n+        self.assertEqual(ma.get_inlines(request, None), [])\n+        self.assertEqual(ma.get_inline_instances(request), [])\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..28ea99f 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -237,8 +237,25 @@ class UsernameValidatorsTests(SimpleTestCase):\n         invalid_usernames = [\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n-            \"en\\u2013dash\",\n+            \"en\\u2013dash\", \"trailingnewline\\n\",\n+            \"trailingnewline\\n\",\n         ]\n+\n+    def test_unicode_validator_trailing_newline(self):\n+        invalid_usernames = [\"username\\n\", \"user\\nname\\n\"]\n+        v = validators.UnicodeUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+\n+    def test_ascii_validator_trailing_newline(self):\n+        invalid_usernames = [\"username\\n\", \"user\\nname\\n\"]\n+        v = validators.ASCIIUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n             with self.subTest(valid=valid):\n@@ -258,4 +275,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..a02e887 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -5,6 +5,8 @@ from django.template import Context\n from django.template.engine import Engine\n from django.test import SimpleTestCase, override_settings\n \n+import os\n+from django.template import TemplateDoesNotExist\n from .utils import ROOT, TEMPLATE_DIR\n \n OTHER_DIR = os.path.join(ROOT, 'other_templates')\n@@ -15,7 +17,19 @@ class RenderToStringTest(SimpleTestCase):\n     def setUp(self):\n         self.engine = Engine(dirs=[TEMPLATE_DIR])\n \n-    def test_basic_context(self):\n+    def test_autoescape_off(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:<script>\\n',\n+        )\n+\n+    def test_autoescape_on(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n         self.assertEqual(\n             self.engine.render_to_string('test_context.html', {'obj': 'test'}),\n             'obj:test\\n',\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..6d8b079 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -413,6 +413,10 @@ class HttpResponseTests(unittest.TestCase):\n         self.assertEqual(list(i), [b'abc'])\n         self.assertEqual(list(i), [])\n \n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview test'))\n+        self.assertEqual(r.content, b'memoryview test')\n+\n     def test_lazy_content(self):\n         r = HttpResponse(lazystr('helloworld'))\n         self.assertEqual(r.content, b'helloworld')\n",
  "django__django-11141": "",
  "django__django-11149": "",
  "django__django-11163": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex b25d077..10ffd48 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2900,7 +2900,31 @@ class StrictAssignmentTests(SimpleTestCase):\n \n \n class ModelToDictTests(TestCase):\n-    def test_many_to_many(self):\n+    def test_empty_fields_list(self):\n+        \"\"\"Test that model_to_dict returns an empty dict when fields=[] is passed.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(model_to_dict(bw, fields=[]), {})\n+    \n+    def test_specified_fields(self):\n+        \"\"\"Test that only specified fields are returned by model_to_dict.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(sorted(model_to_dict(bw, fields=['id', 'name'])), ['id', 'name'])\n+\n+    def test_empty_exclude_list(self):\n+        \"\"\"Test that model_to_dict returns all fields when exclude=[] is passed.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(\n+            sorted(model_to_dict(bw, exclude=[])), \n+            ['id', 'name', 'score', 'writer_ptr']\n+        )\n+    \n+    def test_exclude_fields(self):\n+        \"\"\"Test that specified fields are excluded by model_to_dict.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(\n+            sorted(model_to_dict(bw, exclude=['id', 'name'])), \n+            ['score', 'writer_ptr']\n+        )\n         \"\"\"Data for a ManyToManyField is a list rather than a lazy QuerySet.\"\"\"\n         blue = Colour.objects.create(name='blue')\n         red = Colour.objects.create(name='red')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..91f2878 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,9 +1,11 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n+from django.db.models.deletion import Collector\n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n     M2MTo, MRNull, Parent, R, RChild, S, T, User, create_a, get_default_r,\n@@ -464,7 +466,30 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n-    def test_fast_delete_qs(self):\n+    def test_fast_delete_instance_set_pk_none(self):\n+        u = User.objects.create()\n+        # User can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n+    def test_delete_instance_with_no_dependencies(self):\n+        # Ensure that deleting an instance with no dependencies sets its pk to None.\n+        a = Avatar.objects.create(desc='test')\n+        self.assertIsNotNone(a.pk)\n+        a.delete()\n+        self.assertIsNone(a.pk)\n+\n+    def test_delete_instance_with_dependencies(self):\n+        # Ensure that deleting an instance with dependencies behaves as expected (pk not set to None).\n+        a = Avatar.objects.create(desc='test')\n+        user = User.objects.create(avatar=a)\n+        self.assertIsNotNone(user.pk)\n+        user.delete()\n+        # Even if there are dependencies, the issue does not concern this behavior,\n+        # so we ensure that the behavior does not set pk to None.\n+        self.assertIsNotNone(user.pk)\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n         self.assertNumQueries(1, User.objects.filter(pk=u1.pk).delete)\n",
  "django__django-11206": "",
  "django__django-11211": "diff --git a/tests/prefetch_related/models.py b/tests/prefetch_related/models.py\nindex 3ce4b3f..96d1ea3 100644\n--- a/tests/prefetch_related/models.py\n+++ b/tests/prefetch_related/models.py\n@@ -1,3 +1,18 @@\n+\n+import uuid\n+\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=50)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n+\n import uuid\n \n from django.contrib.contenttypes.fields import (\n",
  "django__django-11239": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex b843072..adbd5c1 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -81,7 +81,30 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n-    def test_sigint_handler(self):\n+    def test_ssl_certificate(self):\n+        self.assertEqual(\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+                'sslmode': 'verify-ca',\n+                'sslrootcert': 'root.crt',\n+                'sslcert': 'client.crt',\n+                'sslkey': 'client.key',\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                None,\n+            )\n+        )\n+        self.assertIn('PGSSLMODE', self.pg_env)\n+        self.assertEqual(self.pg_env['PGSSLMODE'], 'verify-ca')\n+        self.assertIn('PGSSLROOTCERT', self.pg_env)\n+        self.assertEqual(self.pg_env['PGSSLROOTCERT'], 'root.crt')\n+        self.assertIn('PGSSLCERT', self.pg_env)\n+        self.assertEqual(self.pg_env['PGSSLCERT'], 'client.crt')\n+        self.assertIn('PGSSLKEY', self.pg_env)\n+        self.assertEqual(self.pg_env['PGSSLKEY'], 'client.key')\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n         def _mock_subprocess_run(*args, **kwargs):\n             handler = signal.getsignal(signal.SIGINT)\n",
  "django__django-11265": "diff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py\nindex a587c22..a6b46a2 100644\n--- a/tests/filtered_relation/tests.py\n+++ b/tests/filtered_relation/tests.py\n@@ -98,7 +98,13 @@ class FilteredRelationTests(TestCase):\n             [self.author1]\n         )\n \n-    def test_with_join_and_complex_condition(self):\n+    def test_with_exclude(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2],\n+        )\n         self.assertSequenceEqual(\n             Author.objects.annotate(\n                 book_alice=FilteredRelation(\n",
  "django__django-11276": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 4051a05..77f23b1 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -28,7 +28,29 @@ class TestUtilsHtml(SimpleTestCase):\n             ('>', '&gt;'),\n             ('\"', '&quot;'),\n             (\"'\", '&#39;'),\n+            (\"'\", '&#x27;'),  # Original behavior\n         )\n+        # New test case to check against the stdlib html.escape() behavior\n+        new_items = (\n+            (\"'\", '&#39;'),  # New behavior with stdlib html.escape\n+        )\n+\n+        # Existing tests for original behavior\n+        for value, output in items:\n+            with self.subTest(value=value, output=output):\n+                for pattern in patterns:\n+                    with self.subTest(value=value, output=output, pattern=pattern):\n+                        self.check_output(escape, pattern % value, pattern % output)\n+                        self.check_output(escape, lazystr(pattern % value), pattern % output)\n+\n+        # New tests for the updated behavior\n+        for value, expected_output in new_items:\n+            with self.subTest(value=value, expected_output=expected_output):\n+                for pattern in patterns:\n+                    with self.subTest(value=value, expected_output=expected_output, pattern=pattern):\n+                        actual_output = html.escape(pattern % value, quote=True)\n+                        self.check_output(escape, pattern % value, actual_output)\n+                        self.check_output(escape, lazystr(pattern % value), actual_output)\n         # Substitution patterns for testing the above items.\n         patterns = (\"%s\", \"asdf%sfdsa\", \"%s1\", \"1%sb\")\n         for value, output in items:\n",
  "django__django-11292": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex b016284..2201536 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -243,6 +243,28 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertNoOutput(err)\n         self.assertEqual(out.strip(), '/PREFIX/some/url/')\n \n+    def test_skip_checks(self):\n+        \"\"\"\n+        Test the --skip-checks option to ensure system checks are skipped.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            'STATICFILES_DIRS': '\"foo\"',\n+        })\n+        out, err = self.run_manage(['set_option', '--skip-checks', '--set', 'foo'])\n+        self.assertNoOutput(err)\n+        self.assertEqual(out.strip(), 'Set foo')\n+\n+    def test_no_skip_checks(self):\n+        \"\"\"\n+        Test the absence of --skip-checks to ensure system checks are performed.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            'STATICFILES_DIRS': '\"foo\"',\n+        })\n+        out, err = self.run_manage(['set_option', '--set', 'foo'])\n+        self.assertIn('staticfiles.E001', err)\n+        self.assertNotEqual(out.strip(), 'Set foo')\n+\n     def test_disallowed_abbreviated_options(self):\n         \"\"\"\n         To avoid conflicts with custom options, commands don't allow\n",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..d4f4a69 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,5 +1,7 @@\n+\n from django.test import SimpleTestCase\n-from django.urls.resolvers import RegexPattern, RoutePattern\n+from django.urls.resolvers import RegexPattern, RoutePattern, get_resolver\n+from django.test.utils import override_settings\n from django.utils.translation import gettext_lazy as _\n \n \n@@ -9,7 +11,29 @@ class RegexPatternTests(SimpleTestCase):\n         self.assertEqual(str(RegexPattern(_('^translated/$'))), '^translated/$')\n \n \n-class RoutePatternTests(SimpleTestCase):\n+class ResolverCacheTests(SimpleTestCase):\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_default__root_urlconf(self):\n+        # Resolver for a default URLconf (passing no argument) and for the\n+        # settings.ROOT_URLCONF is the same cached object.\n+        self.assertIs(get_resolver(), get_resolver('urlpatterns.path_urls'))\n+        self.assertIsNot(get_resolver(), get_resolver('urlpatterns.path_dynamic_urls'))\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_multiple_resolvers_before_and_after_request(self):\n+        # Simulate a call to get_resolver before a request is handled\n+        resolver_before = get_resolver()\n+\n+        # Simulate a request being handled which sets the ROOT_URLCONF\n+        from django.urls.base import set_urlconf\n+        set_urlconf('urlpatterns.path_urls')\n+\n+        # Call get_resolver after a request is handled\n+        resolver_after = get_resolver()\n+\n+        # Ensure that the resolver objects are the same, thus avoiding multiple _populate calls\n+        self.assertIs(resolver_before, resolver_after)\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\nindex b010b42..b69a060 100644\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -226,6 +226,16 @@ class BaseModelBackendTest:\n         authenticate(username='no_such_user', password='test')\n         self.assertEqual(CountingMD5PasswordHasher.calls, 1)\n \n+from django.test import TestCase, override_settings\n+from django.contrib.auth import authenticate, get_user_model\n+\n+class CountingMD5PasswordHasher:\n+    calls = 0\n+\n+    @staticmethod\n+    def set_password(password):\n+        CountingMD5PasswordHasher.calls += 1\n+\n \n class ModelBackendTest(BaseModelBackendTest, TestCase):\n     \"\"\"\n@@ -242,7 +252,18 @@ class ModelBackendTest(BaseModelBackendTest, TestCase):\n             password='test',\n         )\n \n-    def test_authenticate_inactive(self):\n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authentication_without_credentials(self):\n+        CountingMD5PasswordHasher.calls = 0\n+        for credentials in (\n+            {},\n+            {'username': getattr(self.user, self.UserModel.USERNAME_FIELD)},\n+            {'password': 'test'},\n+        ):\n+            with self.subTest(credentials=credentials):\n+                with self.assertNumQueries(0):\n+                    authenticate(**credentials)\n+                self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n         \"\"\"\n         An inactive user can't authenticate.\n         \"\"\"\n",
  "django__django-11490": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex e627a0d..1eca087 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -124,7 +124,19 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.union(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n-    def test_union_with_two_annotated_values_list(self):\n+    def test_union_with_values_list_single_column(self):\n+        ReservedName.objects.create(name='a', order=2)\n+        qs1 = ReservedName.objects.all()\n+        # Test the fix by checking a single column values_list\n+        reserved_order = qs1.union(qs1).values_list('order', flat=True).get()\n+        self.assertEqual(reserved_order, 2)\n+\n+    def test_union_with_values_list_different_columns(self):\n+        ReservedName.objects.create(name='a', order=2)\n+        qs1 = ReservedName.objects.all()\n+        # Test the fix by selecting different columns\n+        reserved_name = qs1.union(qs1).values_list('order', 'name').get()\n+        self.assertEqual(reserved_name, (2, 'a'))\n         qs1 = Number.objects.filter(num=1).annotate(\n             count=Value(0, IntegerField()),\n         ).values_list('num', 'count')\n",
  "django__django-11532": "diff --git a/tests/mail/tests.py b/tests/mail/tests.py\nindex a6f0e17..1e2d477 100644\n--- a/tests/mail/tests.py\n+++ b/tests/mail/tests.py\n@@ -11,6 +11,7 @@ from email import charset, message_from_binary_file, message_from_bytes\n from email.header import Header\n from email.mime.text import MIMEText\n from email.utils import parseaddr\n+from unittest import mock\n from io import StringIO\n from smtplib import SMTP, SMTPAuthenticationError, SMTPException\n from ssl import SSLError\n@@ -365,7 +366,21 @@ class MailTests(HeadersCheckMixin, SimpleTestCase):\n         self.assertEqual(msg.body, '')\n         self.assertEqual(msg.message().get_payload(), '')\n \n-    def test_encoding(self):\n+    @mock.patch(\"django.core.mail.utils.DNS_NAME.get_fqdn\", return_value=\"\u6f22\u5b57\")\n+    def test_non_ascii_dns_with_iso_encoding(self, mocked_getfqdn):\n+        delattr(mail.DNS_NAME, '_fqdn')\n+        email = EmailMessage('subject', 'content', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        message = email.message()\n+        self.assertIn('@xn--p8s937b>', message['Message-ID'])\n+\n+    @mock.patch(\"django.core.mail.utils.DNS_NAME.get_fqdn\", return_value=\"\u6b63\u5b97\")\n+    def test_unicode_hostname_to_punycode(self, mocked_getfqdn):\n+        delattr(mail.DNS_NAME, '_fqdn')\n+        email = EmailMessage('subject', 'content', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        message = email.message()\n+        self.assertIn('@xn--fiq228c>', message['Message-ID'])\n         \"\"\"\n         Regression for #12791 - Encode body correctly with other encodings\n         than utf-8\n",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..034a7a0 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,13 +1,17 @@\n+\n from django import forms\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n-from django.db.models import F\n+from django.db.models import F, Field, Model\n from django.db.models.functions import Upper\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n \n+from django.core.checks import checks, Error\n+from django.db import models\n+from position.fields import PositionField\n from .models import (\n     Band, Song, User, ValidationTestInlineModel, ValidationTestModel,\n )\n",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..b93a695 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -9,7 +9,8 @@ from django.db.models.functions import Upper\n from django.test import TestCase\n from django.utils.deprecation import RemovedInDjango31Warning\n \n-from .models import Article, Author, OrderedByFArticle, Reference\n+from .models import Article, Author, ChildArticle, OrderedByFArticle, Reference\n+from datetime import datetime\n \n \n class OrderingTests(TestCase):\n",
  "django__django-11603": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 2b8f813..82f8e38 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -391,7 +391,23 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n-    def test_count_star(self):\n+    def test_distinct_on_avg_sum(self):\n+        # Test Avg with distinct\n+        books_avg = Book.objects.aggregate(ratings_avg=Avg('rating', distinct=True))\n+        self.assertEqual(books_avg['ratings_avg'], 4.125)\n+\n+        # Test Sum with distinct\n+        books_sum = Book.objects.aggregate(ratings_sum=Sum('rating', distinct=True))\n+        self.assertEqual(books_sum['ratings_sum'], 16.5)\n+        \n+    def test_distinct_on_min_max(self):\n+        # Test Min with distinct (should behave same as without distinct)\n+        books_min = Book.objects.aggregate(ratings_min=Min('rating', distinct=True))\n+        self.assertEqual(books_min['ratings_min'], Book.objects.aggregate(ratings_min=Min('rating'))['ratings_min'])\n+\n+        # Test Max with distinct (should behave same as without distinct)\n+        books_max = Book.objects.aggregate(ratings_max=Max('rating', distinct=True))\n+        self.assertEqual(books_max['ratings_max'], Book.objects.aggregate(ratings_max=Max('rating'))['ratings_max'])\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n         sql = ctx.captured_queries[0]['sql']\n",
  "django__django-11740": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a98fff5..6236be8 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -718,7 +718,29 @@ class AutodetectorTests(TestCase):\n         self.assertOperationTypes(changes, 'testapp', 0, [\"RemoveField\"])\n         self.assertOperationAttributes(changes, \"testapp\", 0, 0, name=\"name\")\n \n-    def test_alter_field(self):\n+    def test_alter_uuid_field_to_fk(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey and ensure it creates dependencies.\n+        \"\"\"\n+        app1_initial = ModelState(\"testapp1\", \"App1\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+            (\"another_app\", models.UUIDField(null=True, blank=True)),\n+        ])\n+        app2_initial = ModelState(\"testapp2\", \"App2\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+        ])\n+        app1_altered = ModelState(\"testapp1\", \"App1\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+            (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+\n+        changes = self.get_changes([app1_initial, app2_initial], [app1_altered, app2_initial])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n         \"\"\"Tests autodetection of new fields.\"\"\"\n         changes = self.get_changes([self.author_name], [self.author_name_longer])\n         # Right number/type of migrations?\n@@ -2399,4 +2421,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-11749": "",
  "django__django-11790": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 440150b..4c4e3cc 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -437,7 +437,22 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         self.assertEqual(form.fields['username'].max_length, 254)\n         self.assertEqual(form.errors, {})\n \n-    def test_username_field_label(self):\n+    def test_username_field_maxlength_attribute_255(self):\n+        data = {\n+            'username': 'a' * 255,\n+            'password': 'password123',\n+        }\n+        form = AuthenticationForm(None, data)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 255)\n+\n+    @override_settings(AUTH_USER_MODEL='auth_tests.IntegerUsernameUser')\n+    def test_username_field_maxlength_attribute_254(self):\n+        data = {\n+            'username': 'a' * 254,\n+            'password': 'password123',\n+        }\n+        form = AuthenticationForm(None, data)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 254)\n \n         class CustomAuthenticationForm(AuthenticationForm):\n             username = CharField(label=\"Name\", max_length=75)\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..5fa6e3f 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -306,6 +306,29 @@ class WriterTests(SimpleTestCase):\n             \"default=migrations.test_writer.IntEnum(1))\"\n         )\n \n+    def test_serialize_translated_enum(self):\n+        from enum import Enum\n+        from django.utils.translation import gettext_lazy as _\n+\n+        class TranslatedEnum(Enum):\n+            GOOD = _('good')\n+            BAD = _('bad')\n+\n+        # Create a field with the enum as the default value\n+        field = models.CharField(default=TranslatedEnum.GOOD, choices=[(tag.name, tag.value) for tag in TranslatedEnum])\n+        \n+        # Serialize the field\n+        string = MigrationWriter.serialize(field)[0]\n+        \n+        # Assert that the serialized default is using the enum name, not the translated value\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('GOOD', 'good'), \"\n+            \"('BAD', 'bad')], \"\n+            \"default=migrations.test_writer.TranslatedEnum['GOOD'])\"\n+        )\n+        \n     def test_serialize_choices(self):\n         class TextChoices(models.TextChoices):\n             A = 'A', 'A value'\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..9d673c9 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,6 @@\n+\n import unittest\n-from datetime import datetime\n+from datetime import datetime, timedelta\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -316,9 +317,32 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_rfc850(self):\n-        parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n-        self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        # Test scenarios\n+        utcnow_2023 = datetime(2023, 1, 1)\n+        utcnow_1970 = datetime(1970, 1, 1)\n+\n+        tests = (\n+            # Before current year, expecting future year\n+            (utcnow_2023, 'Sunday, 31-Dec-69 08:49:37 GMT', datetime(2069, 12, 31, 8, 49, 37)),\n+            (utcnow_2023, 'Monday, 01-Jan-50 08:49:37 GMT', datetime(2050, 1, 1, 8, 49, 37)),\n+            # After current year, expecting past year\n+            (utcnow_2023, 'Tuesday, 01-Jan-70 08:49:37 GMT', datetime(1970, 1, 1, 8, 49, 37)),\n+            (utcnow_2023, 'Thursday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+            # Edge case for 50 years difference\n+            (utcnow_1970, 'Thursday, 31-Dec-19 08:49:37 GMT', datetime(2019, 12, 31, 8, 49, 37)),\n+            (utcnow_1970, 'Monday, 01-Jan-20 08:49:37 GMT', datetime(1920, 1, 1, 8, 49, 37)),\n+        )\n+\n+        for utcnow, rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = utcnow\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n \n     def test_parsing_asctime(self):\n         parsed = parse_http_date('Sun Nov  6 08:49:37 1994')\n",
  "django__django-11880": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 95afc0d..d8b18d5 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3672,7 +3672,40 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n             '<input type=\"hidden\" name=\"data\" id=\"id_data\"></td></tr>'\n         )\n \n-    def test_field_named_data(self):\n+    def test_field_deep_copy_error_messages_modification(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.', 'custom_error': 'A specific error.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+\n+        # Modify error_messages in the copied field\n+        field_copy.error_messages['invalid'] = 'Modified error message.'\n+        field_copy.error_messages['custom_error'] = 'Another custom error.'\n+\n+        # Ensure original field's error_messages are unchanged\n+        self.assertEqual(field.error_messages['invalid'], 'Form custom error message.')\n+        self.assertEqual(field.error_messages['custom_error'], 'A specific error.')\n+\n+    def test_field_deep_copy_error_messages_nested_dict(self):\n+        class CustomCharFieldWithNestedErrors(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {\n+                    'invalid': 'Form custom error message.',\n+                    'nested': {'key1': 'value1', 'key2': 'value2'}\n+                }\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharFieldWithNestedErrors()\n+        field_copy = copy.deepcopy(field)\n+\n+        # Modify nested dictionary in the copied field\n+        field_copy.error_messages['nested']['key1'] = 'new_value1'\n+\n+        # Ensure original field's nested dictionary is unchanged\n+        self.assertEqual(field.error_messages['nested']['key1'], 'value1')\n         class DataForm(Form):\n             data = CharField(max_length=10)\n \n@@ -3686,6 +3719,10 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertIsInstance(p.files, MultiValueDict)\n \n \n+import copy\n+from django.forms import CharField, Form\n+from django.test import SimpleTestCase\n+\n class CustomRenderer(DjangoTemplates):\n     pass\n \n",
  "django__django-11951": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex f2f6bbd..81c92c4 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -1,5 +1,7 @@\n+\n from operator import attrgetter\n \n+from math import ceil\n from django.db import IntegrityError, NotSupportedError, connection\n from django.db.models import FileField, Value\n from django.db.models.functions import Lower\n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..f61dc63 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -121,7 +121,22 @@ class ChoicesTests(SimpleTestCase):\n         self.assertIn('FR', YearInSchool)\n         self.assertNotIn('XX', YearInSchool)\n \n-    def test_textchoices_blank_value(self):\n+    def test_textchoices_type_and_value(self):\n+        class MyChoice(models.TextChoices):\n+            FIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n+            SECOND_CHOICE = \"second\", _(\"The second choice, it is\")\n+\n+        class MyObject(models.Model):\n+            my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+        \n+        my_object = MyObject(my_str_value=MyChoice.FIRST_CHOICE)\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(my_object.my_str_value, \"first\")\n+\n+        my_object.save()\n+        retrieved_object = MyObject.objects.get(pk=my_object.pk)\n+        self.assertIsInstance(retrieved_object.my_str_value, str)\n+        self.assertEqual(retrieved_object.my_str_value, \"first\")\n         class BlankStr(models.TextChoices):\n             EMPTY = '', '(Empty)'\n             ONE = 'ONE', 'One'\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..4c385e6 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -149,6 +149,18 @@ class ChoicesTests(SimpleTestCase):\n \n \n class GetFieldDisplayTests(SimpleTestCase):\n+    def test_override_get_FIELD_display(self):\n+        \"\"\"\n+        Test if get_FIELD_display can be overridden.\n+        \"\"\"\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n \n     def test_choices_and_field_display(self):\n         \"\"\"\n",
  "django__django-12039": "diff --git a/tests/indexes/tests.py b/tests/indexes/tests.py\nindex 700f574..b1e30cd 100644\n--- a/tests/indexes/tests.py\n+++ b/tests/indexes/tests.py\n@@ -9,12 +9,16 @@ from django.db.models.query_utils import Q\n from django.test import (\n     TestCase, TransactionTestCase, skipIfDBFeature, skipUnlessDBFeature,\n )\n+from django.db import connection\n+from django.db.models import Index\n from django.test.utils import override_settings\n from django.utils import timezone\n \n from .models import (\n     Article, ArticleTranslation, IndexedArticle2, IndexTogetherSingleList,\n )\n+from django.db import connection\n+from django.db.models import Index\n \n \n class SchemaIndexesTests(TestCase):\n@@ -75,6 +79,45 @@ class SchemaIndexesTests(TestCase):\n         index_sql = connection.schema_editor()._model_indexes_sql(IndexTogetherSingleList)\n         self.assertEqual(len(index_sql), 1)\n \n+    def test_columns_list_sql(self):\n+        index = Index(fields=['headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_descending_columns_list_sql(self):\n+        index = Index(fields=['-headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s DESC)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_ops_class_columns_lists_sql(self):\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_ops_class_descending_columns_list_sql(self):\n+        index = Index(\n+            fields=['-headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops DESC)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n \n @skipIf(connection.vendor == 'postgresql', 'opclasses are PostgreSQL only')\n class SchemaIndexesNotPostgreSQLTests(TransactionTestCase):\n",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..8d7c6fe 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n@@ -7,6 +8,7 @@ from django.db.models.fields.related_lookups import RelatedIsNull\n from django.db.models.functions import Lower\n from django.db.models.lookups import Exact, GreaterThan, IsNull, LessThan\n from django.db.models.sql.query import Query\n+from django.db.models import Q  # Ensure Q is imported\n from django.db.models.sql.where import OR\n from django.test import SimpleTestCase\n from django.test.utils import register_lookup\n@@ -107,7 +109,23 @@ class TestQuery(SimpleTestCase):\n         self.assertIsInstance(b_isnull.lhs, SimpleCol)\n         self.assertEqual(b_isnull.lhs.target, ObjectC._meta.get_field('objectb'))\n \n-    def test_clone_select_related(self):\n+    def test_exact_lookup_with_list(self):\n+        # Test to ensure that Exact lookup with a list works correctly.\n+        query = Query(Item)\n+        where = query.build_where(Q(name=['a', 'b']))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        # Since the value is passed as a list in Q, it should remain a list in the lookup.\n+        self.assertEqual(name_exact.rhs, ['a', 'b'])\n+\n+    def test_exact_lookup_with_tuple(self):\n+        # Test to ensure that Exact lookup with a tuple works correctly.\n+        query = Query(Item)\n+        where = query.build_where(Q(name=('a', 'b')))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        # Since the value is passed as a tuple in Q, it should remain a tuple in the lookup.\n+        self.assertEqual(name_exact.rhs, ('a', 'b'))\n         query = Query(Item)\n         query.add_select_related(['creator'])\n         clone = query.clone()\n",
  "django__django-12125": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex e62f7b0..c056510 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -746,4 +746,38 @@ class WriterTests(SimpleTestCase):\n \n     def test_register_non_serializer(self):\n         with self.assertRaisesMessage(ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n+\n+    def test_serialize_inner_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class ModelWithInnerField(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = ModelWithInnerField._meta.get_field('field')\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+\n+        expected_serialized_field = (\n+            \"tests.migrations.test_writer.Outer.Inner(max_length=20)\",\n+            {\"import tests.migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual((serialized_field, imports), expected_serialized_field)\n+\n+    def test_serialize_inner_enum_class(self):\n+        class ModelWithInnerEnum(models.Model):\n+            @enum.unique\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+            state = EnumField(enum=State)\n+\n+        field = ModelWithInnerEnum._meta.get_field('state')\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+\n+        expected_serialized_field = (\n+            \"enumfields.fields.EnumField(enum=tests.migrations.test_writer.ModelWithInnerEnum.State)\",\n+            {\"import tests.migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual((serialized_field, imports), expected_serialized_field)\n",
  "django__django-12143": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 2d13234..fd243cd 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -831,18 +831,45 @@ class ChangeListTests(TestCase):\n             'form-0-load': '10',\n             '_save': 'Save',\n         }\n+    def test_get_list_editable_queryset_with_regex_chars_in_prefix(self):\n+        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n+        Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n+        data = {\n+            'form$-TOTAL_FORMS': '2',\n+            'form$-INITIAL_FORMS': '2',\n+            'form$-MIN_NUM_FORMS': '0',\n+            'form$-MAX_NUM_FORMS': '1000',\n+            'form$-0-uuid': str(a.pk),\n+            'form$-0-load': '10',\n+            '_save': 'Save',\n+        }\n         superuser = self._create_superuser('superuser')\n         self.client.force_login(superuser)\n         changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n         m = SwallowAdmin(Swallow, custom_site)\n         request = self.factory.post(changelist_url, data=data)\n-        queryset = m._get_list_editable_queryset(request, prefix='form')\n+        queryset = m._get_list_editable_queryset(request, prefix='form$')\n         self.assertEqual(queryset.count(), 1)\n-        data['form-0-uuid'] = 'INVALD_PRIMARY_KEY'\n-        # The unfiltered queryset is returned if there's invalid data.\n+        \n+    def test_get_list_editable_queryset_with_complex_regex_chars_in_prefix(self):\n+        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n+        Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n+        data = {\n+            'form.*?-TOTAL_FORMS': '2',\n+            'form.*?-INITIAL_FORMS': '2',\n+            'form.*?-MIN_NUM_FORMS': '0',\n+            'form.*?-MAX_NUM_FORMS': '1000',\n+            'form.*?-0-uuid': str(a.pk),\n+            'form.*?-0-load': '10',\n+            '_save': 'Save',\n+        }\n+        superuser = self._create_superuser('superuser')\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n         request = self.factory.post(changelist_url, data=data)\n-        queryset = m._get_list_editable_queryset(request, prefix='form')\n-        self.assertEqual(queryset.count(), 2)\n+        queryset = m._get_list_editable_queryset(request, prefix='form.*?')\n+        self.assertEqual(queryset.count(), 1)\n \n     def test_changelist_view_list_editable_changed_objects_uses_filter(self):\n         \"\"\"list_editable edits use a filtered queryset to limit memory usage.\"\"\"\n",
  "django__django-12155": "",
  "django__django-12193": "diff --git a/tests/postgres_tests/test_array.py b/tests/postgres_tests/test_array.py\nindex 6228cbc..dce8500 100644\n--- a/tests/postgres_tests/test_array.py\n+++ b/tests/postgres_tests/test_array.py\n@@ -1112,6 +1112,21 @@ class TestSplitFormWidget(PostgreSQLWidgetTestCase):\n             \"\"\"\n         )\n \n+    def test_splitarrayfield_booleanfield_with_preexisting_data(self):\n+        # Verify that each checkbox reflects the correct value from the data list\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('name', [True, False, True])\n+        self.assertEqual(\n+            [subwidget['attrs'].get('checked', False) for subwidget in context['widget']['subwidgets']],\n+            [True, False, True]\n+        )\n+\n+        context = widget.get_context('name', [False, True, False])\n+        self.assertEqual(\n+            [subwidget['attrs'].get('checked', False) for subwidget in context['widget']['subwidgets']],\n+            [False, True, False]\n+        )\n+\n     def test_render_attrs(self):\n         self.check_html(\n             SplitArrayWidget(forms.TextInput(), size=2),\n",
  "django__django-12209": "diff --git a/tests/serializers/models/data.py b/tests/serializers/models/data.py\nindex 946715d..9ac69bb 100644\n--- a/tests/serializers/models/data.py\n+++ b/tests/serializers/models/data.py\n@@ -246,8 +246,10 @@ class SlugPKData(models.Model):\n class SmallPKData(models.Model):\n     data = models.SmallIntegerField(primary_key=True)\n \n-# class TextPKData(models.Model):\n-#     data = models.TextField(primary_key=True)\n+import uuid\n+\n+class UUIDDefaultData(models.Model):\n+    data = models.UUIDField(primary_key=True, default=uuid.uuid4)\n \n # class TimePKData(models.Model):\n #    data = models.TimeField(primary_key=True)\n",
  "django__django-12262": "diff --git a/tests/template_tests/test_custom.py b/tests/template_tests/test_custom.py\nindex 8a8c535..ae74ce0 100644\n--- a/tests/template_tests/test_custom.py\n+++ b/tests/template_tests/test_custom.py\n@@ -77,8 +77,35 @@ class SimpleTagTests(TagTestCase):\n                 'simple_only_unlimited_args - Expected result: 37, 42, 56, 89'),\n             ('{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 56 eggs=\"scrambled\" four=1|add:3 %}',\n                 'simple_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4'),\n+            ('{% load inclusion %}{% inclusion_keyword_only_default kwarg=37 %}', 'inclusion_keyword_only_default - Expected result: 37\\n'),\n+            ('{% load custom %}{% hello greeting=\"hi\" %}', 'hello - Expected result: hi world'),\n+            ('{% load custom %}{% hi greeting=\"hi\" %}', 'hi - Expected result: hi world'),    \n         ]\n \n+        # Test for keyword-only arguments with defaults in simple_tag\n+        t = self.engine.from_string('{% load custom %}{% simple_keyword_only_default kwarg=37 %}')\n+        self.assertEqual(t.render(c), 'simple_keyword_only_default - Expected result: 37')\n+\n+        # Test for error when providing multiple values for the same keyword in simple_tag\n+        with self.assertRaisesMessage(TemplateSyntaxError, \"'simple_keyword_only_default' received multiple values for keyword argument 'kwarg'\"):\n+            self.engine.from_string('{% load custom %}{% simple_keyword_only_default kwarg=42 kwarg=37 %}')\n+\n+        # Test for keyword-only arguments without defaults in simple_tag\n+        t = self.engine.from_string('{% load custom %}{% simple_keyword_only_param kwarg=37 %}')\n+        self.assertEqual(t.render(c), 'simple_keyword_only_param - Expected result: 37')\n+\n+        # Test for error when a keyword argument is not provided in simple_tag\n+        with self.assertRaisesMessage(TemplateSyntaxError, \"'simple_keyword_only_param' did not receive value(s) for the argument(s): 'kwarg'\"):\n+            self.engine.from_string('{% load custom %}{% simple_keyword_only_param %}')\n+\n+        # Test for keyword-only arguments with defaults in inclusion_tag\n+        t = self.engine.from_string('{% load inclusion %}{% inclusion_keyword_only_default kwarg=37 %}')\n+        self.assertEqual(t.render(c), 'inclusion_keyword_only_default - Expected result: 37\\n')\n+\n+        # Test for error when providing multiple values for the same keyword in inclusion_tag\n+        with self.assertRaisesMessage(TemplateSyntaxError, \"'inclusion_keyword_only_default' received multiple values for keyword argument 'kwarg'\"):\n+            self.engine.from_string('{% load inclusion %}{% inclusion_keyword_only_default kwarg=37 kwarg=42 %}')\n+\n         for entry in templates:\n             t = self.engine.from_string(entry[0])\n             self.assertEqual(t.render(c), entry[1])\n@@ -101,8 +128,35 @@ class SimpleTagTests(TagTestCase):\n                 '{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 eggs=\"scrambled\" 56 four=1|add:3 %}'),\n             (\"'simple_unlimited_args_kwargs' received multiple values for keyword argument 'eggs'\",\n                 '{% load custom %}{% simple_unlimited_args_kwargs 37 eggs=\"scrambled\" eggs=\"scrambled\" %}'),\n+            ('{% load inclusion %}{% inclusion_keyword_only_default kwarg=37 %}', 'inclusion_keyword_only_default - Expected result: 37\\n'),\n+            ('{% load custom %}{% hello greeting=\"hi\" %}', 'hello - Expected result: hi world'),\n+            ('{% load custom %}{% hi greeting=\"hi\" %}', 'hi - Expected result: hi world'),    \n         ]\n \n+        # Test for keyword-only arguments with defaults in simple_tag\n+        t = self.engine.from_string('{% load custom %}{% simple_keyword_only_default kwarg=37 %}')\n+        self.assertEqual(t.render(c), 'simple_keyword_only_default - Expected result: 37')\n+\n+        # Test for error when providing multiple values for the same keyword in simple_tag\n+        with self.assertRaisesMessage(TemplateSyntaxError, \"'simple_keyword_only_default' received multiple values for keyword argument 'kwarg'\"):\n+            self.engine.from_string('{% load custom %}{% simple_keyword_only_default kwarg=42 kwarg=37 %}')\n+\n+        # Test for keyword-only arguments without defaults in simple_tag\n+        t = self.engine.from_string('{% load custom %}{% simple_keyword_only_param kwarg=37 %}')\n+        self.assertEqual(t.render(c), 'simple_keyword_only_param - Expected result: 37')\n+\n+        # Test for error when a keyword argument is not provided in simple_tag\n+        with self.assertRaisesMessage(TemplateSyntaxError, \"'simple_keyword_only_param' did not receive value(s) for the argument(s): 'kwarg'\"):\n+            self.engine.from_string('{% load custom %}{% simple_keyword_only_param %}')\n+\n+        # Test for keyword-only arguments with defaults in inclusion_tag\n+        t = self.engine.from_string('{% load inclusion %}{% inclusion_keyword_only_default kwarg=37 %}')\n+        self.assertEqual(t.render(c), 'inclusion_keyword_only_default - Expected result: 37\\n')\n+\n+        # Test for error when providing multiple values for the same keyword in inclusion_tag\n+        with self.assertRaisesMessage(TemplateSyntaxError, \"'inclusion_keyword_only_default' received multiple values for keyword argument 'kwarg'\"):\n+            self.engine.from_string('{% load inclusion %}{% inclusion_keyword_only_default kwarg=37 kwarg=42 %}')\n+\n         for entry in errors:\n             with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n                 self.engine.from_string(entry[1])\n@@ -190,8 +244,35 @@ class InclusionTagTests(TagTestCase):\n                 'inclusion_only_unlimited_args - Expected result: 37, 42, 56, 89\\n'),\n             ('{% load inclusion %}{% inclusion_unlimited_args_kwargs 37 40|add:2 56 eggs=\"scrambled\" four=1|add:3 %}',\n                 'inclusion_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4\\n'),\n+            ('{% load inclusion %}{% inclusion_keyword_only_default kwarg=37 %}', 'inclusion_keyword_only_default - Expected result: 37\\n'),\n+            ('{% load custom %}{% hello greeting=\"hi\" %}', 'hello - Expected result: hi world'),\n+            ('{% load custom %}{% hi greeting=\"hi\" %}', 'hi - Expected result: hi world'),    \n         ]\n \n+        # Test for keyword-only arguments with defaults in simple_tag\n+        t = self.engine.from_string('{% load custom %}{% simple_keyword_only_default kwarg=37 %}')\n+        self.assertEqual(t.render(c), 'simple_keyword_only_default - Expected result: 37')\n+\n+        # Test for error when providing multiple values for the same keyword in simple_tag\n+        with self.assertRaisesMessage(TemplateSyntaxError, \"'simple_keyword_only_default' received multiple values for keyword argument 'kwarg'\"):\n+            self.engine.from_string('{% load custom %}{% simple_keyword_only_default kwarg=42 kwarg=37 %}')\n+\n+        # Test for keyword-only arguments without defaults in simple_tag\n+        t = self.engine.from_string('{% load custom %}{% simple_keyword_only_param kwarg=37 %}')\n+        self.assertEqual(t.render(c), 'simple_keyword_only_param - Expected result: 37')\n+\n+        # Test for error when a keyword argument is not provided in simple_tag\n+        with self.assertRaisesMessage(TemplateSyntaxError, \"'simple_keyword_only_param' did not receive value(s) for the argument(s): 'kwarg'\"):\n+            self.engine.from_string('{% load custom %}{% simple_keyword_only_param %}')\n+\n+        # Test for keyword-only arguments with defaults in inclusion_tag\n+        t = self.engine.from_string('{% load inclusion %}{% inclusion_keyword_only_default kwarg=37 %}')\n+        self.assertEqual(t.render(c), 'inclusion_keyword_only_default - Expected result: 37\\n')\n+\n+        # Test for error when providing multiple values for the same keyword in inclusion_tag\n+        with self.assertRaisesMessage(TemplateSyntaxError, \"'inclusion_keyword_only_default' received multiple values for keyword argument 'kwarg'\"):\n+            self.engine.from_string('{% load inclusion %}{% inclusion_keyword_only_default kwarg=37 kwarg=42 %}')\n+\n         for entry in templates:\n             t = self.engine.from_string(entry[0])\n             self.assertEqual(t.render(c), entry[1])\n",
  "django__django-12276": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 61f7a13..d285e12 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import copy\n import datetime\n import json\n@@ -2411,7 +2412,33 @@ Password: <input type=\"password\" name=\"password\" required>\n <option value=\"true\" selected>Yes</option>\n <option value=\"false\">No</option>\n </select>\"\"\")\n-        p = Person({'name': 'Joe', 'is_cool': 'false'}, auto_id=False)\n+from django.forms.widgets import FileInput\n+...\n+class FileInputTests(SimpleTestCase):\n+    def test_filefield_with_fileinput_required(self):\n+        class FileForm(Form):\n+            file1 = FileField(widget=FileInput)\n+\n+        f = FileForm(auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n+        )\n+        # A required file field with initial data doesn't contain the required\n+        # HTML attribute. The file input is left blank by the user to keep the\n+        # existing, initial value.\n+        f = FileForm(initial={'file1': 'resume.txt'}, auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n+        )\n+\n+    def test_use_required_attribute(self):\n+        widget = FileInput()\n+        # False when initial data exists. The file input is left blank by the\n+        # user to keep the existing, initial value.\n+        self.assertIs(widget.use_required_attribute(None), True)\n+        self.assertIs(widget.use_required_attribute('resume.txt'), False)\n         self.assertHTMLEqual(str(p['is_cool']), \"\"\"<select name=\"is_cool\">\n <option value=\"unknown\">Unknown</option>\n <option value=\"true\">Yes</option>\n",
  "django__django-12304": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 6cabf01..63e6a57 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import decimal\n import ipaddress\n@@ -6,6 +7,7 @@ import uuid\n from django.db import models\n from django.test import SimpleTestCase\n from django.utils.functional import Promise\n+from django.template import Context, Template\n from django.utils.translation import gettext_lazy as _\n \n \n@@ -137,7 +139,22 @@ class ChoicesTests(SimpleTestCase):\n                 # A string is not permitted as the second argument to int().\n                 ONE = 1, 'X', 'Invalid'\n \n-        msg = \"duplicate values found in <enum 'Fruit'>: PINEAPPLE -> APPLE\"\n+    def test_enums_in_templates(self):\n+        template = Template('{% if student.year_in_school == YearInSchool.FRESHMAN %}Freshman{% endif %}')\n+        context = Context({'YearInSchool': YearInSchool, 'student': {'year_in_school': 'FR'}})\n+        output = template.render(context)\n+        self.assertEqual(output, 'Freshman')\n+\n+        template = Template(\n+            '{{ student.year_in_school_label }}|{{ YearInSchool.JUNIOR.label }}'\n+        )\n+        context = Context({\n+            'YearInSchool': YearInSchool,\n+            'student': {'year_in_school_label': YearInSchool.JUNIOR.label}\n+        })\n+        output = template.render(context)\n+        # Verify that labels are correctly rendered in the template\n+        self.assertEqual(output, 'Junior|Junior')\n         with self.assertRaisesMessage(ValueError, msg):\n             class Fruit(models.IntegerChoices):\n                 APPLE = 1, 'Apple'\n",
  "django__django-12308": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex acbcf33..4d6d7db 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -176,7 +176,22 @@ class UtilsTests(SimpleTestCase):\n         display_value = display_for_field(None, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, self.empty_value)\n \n-    def test_number_formats_display_for_field(self):\n+    def test_jsonfield_display_for_field_readonly(self):\n+        \"\"\"\n+        Test that JSONField values are correctly displayed as JSON strings\n+        when they are readonly in the admin.\n+        \"\"\"\n+        tests = [\n+            ({'key': 'value'}, '{\"key\": \"value\"}'),\n+            ([1, 2, 3], '[1, 2, 3]'),\n+            (\"string\", '\"string\"'),\n+            (123, '123'),\n+            ({('tuple_key',): 'value'}, \"{('tuple_key',): 'value'}\"),  # Invalid JSON, ensure it is still handled\n+        ]\n+        for value, expected_display in tests:\n+            with self.subTest(value=value):\n+                display_value = display_for_field(value, models.JSONField(), self.empty_value)\n+                self.assertEqual(display_value, expected_display)\n         display_value = display_for_field(12345.6789, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, '12345.6789')\n \n",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..930ce0b 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1014,8 +1014,26 @@ class OtherModelTests(SimpleTestCase):\n \n             class ParkingLot(Place):\n                 parent = models.OneToOneField(Place, models.CASCADE)\n+    def test_onetoone_multiple_references_order(self):\n+        \"\"\"\n+        Test if the order of OneToOneField declarations affects the parent_link behavior.\n+        \"\"\"\n+        class Document(models.Model):\n+            pass\n+\n+        class Picking(Document):\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+\n+        # The model should be correctly configured without errors.\n+        self.assertEqual(Picking.check(), [])\n+\n+        class PickingReversed(Document):\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n \n-    def test_m2m_table_name_clash(self):\n+        # Again, should be correctly configured without errors.\n+        self.assertEqual(PickingReversed.check(), [])\n         class Foo(models.Model):\n             bar = models.ManyToManyField('Bar', db_table='myapp_bar')\n \n",
  "django__django-12419": "diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py\nindex 7af62eb..794b626 100644\n--- a/tests/middleware/test_security.py\n+++ b/tests/middleware/test_security.py\n@@ -231,6 +231,13 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         \"\"\"\n         self.assertNotIn('Referrer-Policy', self.process_response())\n \n+    @override_settings(SECURE_REFERRER_POLICY='same-origin')\n+    def test_secure_referrer_policy_default(self):\n+        \"\"\"\n+        Ensures that with the default SECURE_REFERRER_POLICY, the Referrer-Policy header is set to \"same-origin\".\n+        \"\"\"\n+        self.assertEqual(self.process_response()['Referrer-Policy'], 'same-origin')\n+\n     def test_referrer_policy_on(self):\n         \"\"\"\n         With SECURE_REFERRER_POLICY set to a valid value, the middleware adds a\n@@ -254,4 +261,4 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         present in the response.\n         \"\"\"\n         response = self.process_response(headers={'Referrer-Policy': 'unsafe-url'})\n-        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n",
  "django__django-12663": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 872551b..6880315 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -13,10 +13,16 @@ from django.db.models import (\n     Func, IntegerField, Max, Min, Model, OrderBy, OuterRef, Q, StdDev,\n     Subquery, Sum, TimeField, UUIDField, Value, Variance, When,\n )\n+from django.contrib.auth.models import User\n+from django.utils.functional import SimpleLazyObject\n+from .models import Manager\n from django.db.models.expressions import Col, Combinable, Random, RawSQL, Ref\n from django.db.models.functions import (\n     Coalesce, Concat, Left, Length, Lower, Substr, Upper,\n )\n+from django.contrib.auth.models import User\n+from django.utils.functional import SimpleLazyObject\n+from .models import Manager\n from django.db.models.sql import constants\n from django.db.models.sql.datastructures import Join\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n@@ -26,6 +32,9 @@ from .models import (\n     UUID, UUIDPK, Company, Employee, Experiment, Number, RemoteEmployee,\n     Result, SimulationRun, Time,\n )\n+from django.contrib.auth.models import User\n+from django.utils.functional import SimpleLazyObject\n+from .models import Manager\n \n \n class BasicExpressionsTests(TestCase):\n",
  "django__django-12708": "",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..f4e6ac3 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -14,7 +14,7 @@ from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.auth.models import User\n from django.core.files.storage import default_storage\n from django.core.files.uploadedfile import SimpleUploadedFile\n-from django.db.models import CharField, DateField, DateTimeField, UUIDField\n+from django.db.models import CharField, DateField, DateTimeField, UUIDField, ManyToManyField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..e0c0318 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,7 +172,33 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)\n+\n+        # New Test Case: Verify execute_sql_flush without 'using' argument\n+        def test_execute_sql_flush_simplified_signature(self):\n+            # Assuming the models Author and Book are already defined and imported\n+            # Prepare the database state\n+            Author.objects.create(name='Test Author')\n+            Book.objects.create(author=Author.objects.first())\n+\n+            # Verify initial state\n+            self.assertTrue(Author.objects.exists())\n+            self.assertTrue(Book.objects.exists())\n+\n+            # Obtain SQL flush list\n+            sql_list = connection.ops.sql_flush(\n+                no_style(),\n+                [Author._meta.db_table, Book._meta.db_table],\n+                reset_sequences=True,\n+                allow_cascade=True,\n+            )\n+\n+            # Call the method without the 'using' argument\n+            connection.ops.execute_sql_flush(sql_list)\n+\n+            # Verify the flush operation\n+            self.assertFalse(Author.objects.exists())\n+            self.assertFalse(Book.objects.exists())\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n@@ -181,4 +207,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 17e707b..66b2d11 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2444,6 +2444,30 @@ class AutodetectorTests(TestCase):\n         self.assertNumberMigrations(changes, 'testapp', 1)\n         self.assertOperationTypes(changes, 'testapp', 0, [\"AddField\", \"AddField\"])\n         self.assertOperationAttributes(changes, 'testapp', 0, 0)\n+    def test_add_model_with_field_removed_from_base_model(self):\n+        \"\"\"\n+        Removing a base field takes place before adding a new inherited model\n+        that has a field with the same name.\n+        \"\"\"\n+        before = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('title', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        after = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+            ]),\n+            ModelState('app', 'book', [\n+                ('title', models.CharField(max_length=200)),\n+            ], bases=('app.readable',)),\n+        ]\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'app', 1)\n+        self.assertOperationTypes(changes, 'app', 0, ['RemoveField', 'CreateModel'])\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='title', model_name='readable')\n+        self.assertOperationAttributes(changes, 'app', 0, 1, name='book')\n \n     def test_mti_inheritance_model_removal(self):\n         Animal = ModelState('app', 'Animal', [\n@@ -2453,4 +2477,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..9880993 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -9,6 +9,8 @@ from django.db.models import Exists, Max, OuterRef\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n from django.utils.deprecation import RemovedInDjango40Warning\n+from django.db import models\n+from django.test.utils import isolate_apps\n \n from .models import (\n     Article, Author, Freebie, Game, IsNullWithNoneAsRHS, Player, Season, Tag,\n@@ -189,7 +191,47 @@ class LookupTests(TestCase):\n             }\n         )\n \n-    def test_in_bulk_non_unique_field(self):\n+    def test_in_bulk_meta_constraint(self):\n+        # Create Season instances with unique years\n+        season_2011 = Season.objects.create(year=2011)\n+        season_2012 = Season.objects.create(year=2012)\n+        Season.objects.create(year=2013)\n+        \n+        # Verify in_bulk works with a field that has a UniqueConstraint\n+        self.assertEqual(\n+            Season.objects.in_bulk(\n+                [season_2011.year, season_2012.year],\n+                field_name='year',\n+            ),\n+            {season_2011.year: season_2011, season_2012.year: season_2012},\n+        )\n+\n+    @isolate_apps('lookup')\n+    def test_in_bulk_non_unique_meta_constraint(self):\n+        class Model(models.Model):\n+            ean = models.CharField(max_length=100)\n+            brand = models.CharField(max_length=100)\n+            name = models.CharField(max_length=80)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=['ean'],\n+                        name='partial_ean_unique',\n+                        condition=models.Q(is_active=True)\n+                    ),\n+                    models.UniqueConstraint(\n+                        fields=['brand', 'name'],\n+                        name='together_brand_name_unique',\n+                    ),\n+                ]\n+\n+        # Test in_bulk with non-unique fields and expect ValueError\n+        msg = \"in_bulk()'s field_name must be a unique field but '%s' isn't.\"\n+        for field_name in ['brand', 'ean']:\n+            with self.subTest(field_name=field_name):\n+                with self.assertRaisesMessage(ValueError, msg % field_name):\n+                    Model.objects.in_bulk(field_name=field_name)\n         msg = \"in_bulk()'s field_name must be a unique field but 'author' isn't.\"\n         with self.assertRaisesMessage(ValueError, msg):\n             Article.objects.in_bulk([self.au1], field_name='author')\n",
  "django__django-12858": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 3b6974f..5a7fcc7 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -905,7 +905,35 @@ class OtherModelTests(SimpleTestCase):\n \n         self.assertEqual(Child.check(), [])\n \n-    def test_ordering_pointing_to_foreignkey_field(self):\n+    def test_ordering_with_complex_lookup(self):\n+        class Supply(models.Model):\n+            pass\n+\n+        class Product(models.Model):\n+            parent = models.ForeignKey('self', models.CASCADE, null=True)\n+\n+        class Stock(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('supply__product__parent__isnull',)\n+\n+        self.assertEqual(Stock.check(), [])\n+\n+    def test_ordering_with_reverse_complex_lookup(self):\n+        class Supply(models.Model):\n+            pass\n+\n+        class Product(models.Model):\n+            parent = models.ForeignKey('self', models.CASCADE, null=True)\n+\n+        class Stock(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('-supply__product__parent__isnull',)\n+\n+        self.assertEqual(Stock.check(), [])\n         class Parent(models.Model):\n             pass\n \n",
  "django__django-13012": "",
  "django__django-13028": "diff --git a/tests/queries/models.py b/tests/queries/models.py\nindex a43cfb4..14e1162 100644\n--- a/tests/queries/models.py\n+++ b/tests/queries/models.py\n@@ -59,6 +59,40 @@ class Annotation(models.Model):\n         return self.name\n \n \n+from django.db import models, NotSupportedError\n+from django.utils.translation import gettext_lazy as _\n+\n+class ProductMetaDataType(models.Model):\n+    label = models.CharField(max_length=255, unique=True, blank=False, null=False)\n+    filterable = models.BooleanField(default=False, verbose_name=_(\"filterable\"))\n+\n+    class Meta:\n+        app_label = \"adminpricing\"\n+        verbose_name = _(\"product meta data type\")\n+        verbose_name_plural = _(\"product meta data types\")\n+\n+    def __str__(self):\n+        return self.label\n+\n+class ProductMetaData(models.Model):\n+    id = models.BigAutoField(primary_key=True)\n+    product = models.ForeignKey(\n+        'Produit', null=False, blank=False, on_delete=models.CASCADE\n+    )\n+    value = models.TextField(null=False, blank=False)\n+    marketplace = models.ForeignKey(\n+        'Plateforme', null=False, blank=False, on_delete=models.CASCADE\n+    )\n+    date_created = models.DateTimeField(null=True, default=timezone.now)\n+    metadata_type = models.ForeignKey(\n+        ProductMetaDataType, null=False, blank=False, on_delete=models.CASCADE\n+    )\n+\n+    class Meta:\n+        app_label = \"adminpricing\"\n+        verbose_name = _(\"product meta data\")\n+        verbose_name_plural = _(\"product meta datas\")\n+\n class DateTimePK(models.Model):\n     date = models.DateTimeField(primary_key=True, auto_now_add=True)\n \n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..2d317f7 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -342,6 +342,44 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n+    def test_self_referential_foreign_key_ordering(self):\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\")\n+        \n+        article_1 = Article.objects.create(author=author_1, headline=\"Article 1\", pub_date=\"2023-01-01\")\n+        article_2 = Article.objects.create(author=author_2, headline=\"Article 2\", pub_date=\"2023-01-02\")\n+\n+        # Assign self-referential foreign key\n+        author_1.editor = author_2\n+        author_1.save()\n+        author_2.editor = author_1\n+        author_2.save()\n+\n+        # Test the self-referential foreign key ordering\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline')\n+        )\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline')\n+        )\n+\n+        # Test with a workaround using annotation\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).annotate(editor_id=F('author__editor_id')).order_by('editor_id'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline')\n+        )\n+\n+        # Test order_by with inverted sort\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__editor_id'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline')\n+        )\n \n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n",
  "django__django-13089": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex e11856f..d7f4051 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -618,6 +618,36 @@ class BaseCacheTests:\n     def test_cull(self):\n         self._perform_cull_test('cull', 50, 29)\n \n+    def test_cull_no_keys_returned(self):\n+        \"\"\"\n+        Test the culling mechanism when the culling SQL does not return any keys.\n+        It should not raise 'NoneType' object is not subscriptable.\n+        \"\"\"\n+        try:\n+            cull_cache = caches['cull']\n+        except InvalidCacheBackendError:\n+            self.skipTest(\"Culling isn't implemented.\")\n+\n+        # Force _cull to try and delete when no keys are returned.\n+        connection = connections[cull_cache.cache._db]\n+        table = connection.ops.quote_name(cull_cache.cache._table)\n+\n+        with connection.cursor() as cursor:\n+            # Clear the cache table to simulate no keys.\n+            cursor.execute('DELETE FROM %s' % table)\n+\n+            # Manually set _max_entries to something very low to force a cull.\n+            old_max_entries = cull_cache._max_entries\n+            cull_cache._max_entries = 1\n+\n+            try:\n+                # Attempt to set a key, which will trigger the cull.\n+                cull_cache.set('test_key', 'test_value', 1000)\n+                # Ensure that the key is set successfully without errors.\n+                self.assertTrue(cull_cache.has_key('test_key'))\n+            finally:\n+                cull_cache._max_entries = old_max_entries\n+\n     def test_zero_cull(self):\n         self._perform_cull_test('zero_cull', 50, 19)\n \n",
  "django__django-13109": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex d60d822..e2f1068 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -1645,6 +1645,51 @@ class ModelFormBasicTests(TestCase):\n         obj.full_clean()\n \n \n+class ForeignKeyValidationTests(TestCase):\n+    def setUp(self):\n+        # Create archived and active writers\n+        self.archived_writer = Writer.objects.create(name='Archived Writer', archived=True)\n+        self.active_writer = Writer.objects.create(name='Active Writer', archived=False)\n+\n+        # Create form class for testing\n+        class ArticleForm(forms.ModelForm):\n+            class Meta:\n+                model = Article\n+                fields = '__all__'\n+\n+            def __init__(self, *args, **kwargs):\n+                super().__init__(*args, **kwargs)\n+                # Allow all writers, including archived ones\n+                self.fields['writer'].queryset = Writer._base_manager.all()\n+\n+        self.ArticleForm = ArticleForm\n+\n+    def test_form_validates_with_archived_writer(self):\n+        form_data = {\n+            'title': 'Test Article',\n+            'writer': self.archived_writer.pk,\n+        }\n+        form = self.ArticleForm(data=form_data)\n+        self.assertTrue(form.is_valid(), form.errors.as_text())\n+\n+    def test_form_does_not_validate_with_default_manager(self):\n+        class DefaultManagerArticleForm(forms.ModelForm):\n+            class Meta:\n+                model = Article\n+                fields = '__all__'\n+\n+        form_data = {\n+            'title': 'Test Article',\n+            'writer': self.archived_writer.pk,\n+        }\n+        form = DefaultManagerArticleForm(data=form_data)\n+        self.assertFalse(form.is_valid())\n+        self.assertIn('writer', form.errors)\n+        self.assertEqual(\n+            form.errors['writer'],\n+            ['Select a valid choice. That choice is not one of the available choices.']\n+        )\n+\n class ModelMultipleChoiceFieldTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-13112": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 081eff8..d24e877 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -864,6 +864,29 @@ class StateTests(SimpleTestCase):\n             \"The field migrations.Magazine_authors.author was declared with a lazy reference \"\n             \"to 'migrations.author', but app 'migrations' doesn't provide model 'author'.\"\n         )\n+\n+    def test_mixed_case_foreign_key(self):\n+        \"\"\"\n+        Test ForeignKey with mixed-case app name to ensure it resolves correctly.\n+        \"\"\"\n+        new_apps = Apps()\n+\n+        class Category(models.Model):\n+            class Meta:\n+                app_label = 'DJ_RegLogin'\n+                apps = new_apps\n+\n+        class Content(models.Model):\n+            category = models.ForeignKey(Category, models.CASCADE)\n+\n+            class Meta:\n+                app_label = 'DJ_RegLogin'\n+                apps = new_apps\n+\n+        project_state = ProjectState()\n+        project_state.add_model(ModelState.from_model(Category))\n+        project_state.add_model(ModelState.from_model(Content))\n+        self.assertEqual(len(project_state.apps.get_models()), 2)\n         with self.assertRaisesMessage(ValueError, msg):\n             project_state.apps\n \n",
  "django__django-13121": "",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..221f021 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1507,6 +1507,11 @@ class FTimeDeltaTests(TestCase):\n         less_than_5_days = {e.name for e in queryset.filter(completion_duration__lt=datetime.timedelta(days=5))}\n         self.assertEqual(less_than_5_days, {'e0', 'e1', 'e2'})\n \n+        # New test case to verify subtraction works without ExpressionWrapper.\n+        queryset = Experiment.objects.annotate(delta=F('end') - F('start'))\n+        for obj in queryset:\n+            self.assertEqual(obj.delta, obj.end - obj.start)\n+\n         queryset = Experiment.objects.annotate(difference=ExpressionWrapper(\n             F('completed') - Value(None, output_field=DateField()),\n             output_field=DurationField(),\n@@ -1595,6 +1600,11 @@ class FTimeDeltaTests(TestCase):\n         ]\n         self.assertEqual(over_estimate, ['e4'])\n \n+        # New test case to verify subtraction works without ExpressionWrapper.\n+        queryset = Experiment.objects.annotate(delta=F('end') - F('start'))\n+        for obj in queryset:\n+            self.assertEqual(obj.delta, obj.end - obj.start)\n+\n         queryset = Experiment.objects.annotate(difference=ExpressionWrapper(\n             F('start') - Value(None, output_field=DateTimeField()),\n             output_field=DurationField(),\n",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..167d852 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -45,6 +45,13 @@ class QuerySetSetOperationTests(TestCase):\n         qs2 = Number.objects.filter(num__lte=4)\n         self.assertNumbersEqual(qs1.difference(qs2), [5], ordered=False)\n \n+    def test_union_none(self):\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        qs3 = qs1.union(qs2)\n+        self.assertSequenceEqual(qs3.none(), [])\n+        self.assertNumbersEqual(qs3, [0, 1, 8, 9], ordered=False)\n+\n     def test_union_distinct(self):\n         qs1 = Number.objects.all()\n         qs2 = Number.objects.all()\n",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..1ae188e 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -323,6 +323,24 @@ class SessionTestsMixin:\n             {'a test key': 'a test value'},\n         )\n \n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    @override_settings(DEFAULT_HASHING_ALGORITHM='sha1')\n+    def test_default_hashing_algorithm_legacy_encode_decode(self):\n+        # Verify if encoding and then decoding with sha1 produces the original data\n+        data = {'key1': 'value1', 'key2': 'value2'}\n+        encoded = self.session.encode(data)\n+        decoded = self.session._legacy_decode(encoded)\n+        self.assertEqual(decoded, data)\n+\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    @override_settings(DEFAULT_HASHING_ALGORITHM='sha256')\n+    def test_non_sha1_hashing_algorithm(self):\n+        # Verify behavior with a non-sha1 algorithm\n+        data = {'key1': 'value1', 'key2': 'value2'}\n+        encoded = self.session.encode(data)\n+        decoded = self.session.decode(encoded)\n+        self.assertEqual(decoded, data)\n+\n     def test_decode_failure_logged_to_security(self):\n         bad_encode = base64.b64encode(b'flaskdj:alkdjf').decode('ascii')\n         with self.assertLogs('django.security.SuspiciousSession', 'WARNING') as cm:\n",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..63531f2 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -10,7 +10,7 @@ from django.urls import resolve\n from django.utils.deprecation import RemovedInDjango40Warning\n from django.views.generic import RedirectView, TemplateView, View\n \n-from . import views\n+from .models import Artist\n \n \n class SimpleView(View):\n@@ -580,6 +580,45 @@ class DeprecationTests(SimpleTestCase):\n         self.assertEqual(response.context['foo'], 'bar')\n         self.assertIsInstance(response.context['view'], View)\n \n+class SimpleLazyObjectTests(TestCase):\n+    rf = RequestFactory()\n+\n+    def test_simple_lazy_object_in_context(self):\n+        \"\"\"\n+        Test that SimpleLazyObject in kwargs is resolved correctly\n+        in get_context_data.\n+        \"\"\"\n+        class OfferView(TemplateView):\n+            template_name = 'generic_views/about.html'\n+\n+            def get_context_data(self, **kwargs):\n+                offer_slug = kwargs.get(\"offer_slug\", \"\")\n+                offer = get_object_or_404(Artist, name=str(offer_slug))\n+                return {\"offer\": offer, \"offer_slug\": offer_slug}\n+\n+        artist = Artist.objects.create(name='Picasso')\n+        response = OfferView.as_view()(self.rf.get('/offers/picasso/'), offer_slug=artist.name)\n+        self.assertEqual(response.context_data['offer'], artist)\n+        self.assertEqual(response.context_data['offer_slug'], artist.name)\n+\n+    def test_without_explicit_str_conversion(self):\n+        \"\"\"\n+        Test without explicit str conversion to check if the issue\n+        is reproduced.\n+        \"\"\"\n+        class OfferView(TemplateView):\n+            template_name = 'generic_views/about.html'\n+\n+            def get_context_data(self, **kwargs):\n+                offer_slug = kwargs.get(\"offer_slug\", \"\")\n+                offer = get_object_or_404(Artist, name=offer_slug)\n+                return {\"offer\": offer, \"offer_slug\": offer_slug}\n+\n+        artist = Artist.objects.create(name='Van Gogh')\n+        with self.assertRaises(TypeError):\n+            # This should raise a TypeError due to SimpleLazyObject not being resolved\n+            OfferView.as_view()(self.rf.get('/offers/van-gogh/'), offer_slug=artist.name)\n+\n     @ignore_warnings(category=RemovedInDjango40Warning)\n     def test_extra_template_params(self):\n         \"\"\"A template view can be customized to return extra context.\"\"\"\n@@ -590,6 +629,45 @@ class DeprecationTests(SimpleTestCase):\n         self.assertEqual(response.context['key'], 'value')\n         self.assertIsInstance(response.context['view'], View)\n \n+class SimpleLazyObjectTests(TestCase):\n+    rf = RequestFactory()\n+\n+    def test_simple_lazy_object_in_context(self):\n+        \"\"\"\n+        Test that SimpleLazyObject in kwargs is resolved correctly\n+        in get_context_data.\n+        \"\"\"\n+        class OfferView(TemplateView):\n+            template_name = 'generic_views/about.html'\n+\n+            def get_context_data(self, **kwargs):\n+                offer_slug = kwargs.get(\"offer_slug\", \"\")\n+                offer = get_object_or_404(Artist, name=str(offer_slug))\n+                return {\"offer\": offer, \"offer_slug\": offer_slug}\n+\n+        artist = Artist.objects.create(name='Picasso')\n+        response = OfferView.as_view()(self.rf.get('/offers/picasso/'), offer_slug=artist.name)\n+        self.assertEqual(response.context_data['offer'], artist)\n+        self.assertEqual(response.context_data['offer_slug'], artist.name)\n+\n+    def test_without_explicit_str_conversion(self):\n+        \"\"\"\n+        Test without explicit str conversion to check if the issue\n+        is reproduced.\n+        \"\"\"\n+        class OfferView(TemplateView):\n+            template_name = 'generic_views/about.html'\n+\n+            def get_context_data(self, **kwargs):\n+                offer_slug = kwargs.get(\"offer_slug\", \"\")\n+                offer = get_object_or_404(Artist, name=offer_slug)\n+                return {\"offer\": offer, \"offer_slug\": offer_slug}\n+\n+        artist = Artist.objects.create(name='Van Gogh')\n+        with self.assertRaises(TypeError):\n+            # This should raise a TypeError due to SimpleLazyObject not being resolved\n+            OfferView.as_view()(self.rf.get('/offers/van-gogh/'), offer_slug=artist.name)\n+\n     def test_template_params_warning(self):\n         response = self.client.get('/template/custom/bar1/bar2/')\n         self.assertEqual(response.status_code, 200)\n@@ -602,4 +680,43 @@ class DeprecationTests(SimpleTestCase):\n         with self.assertRaisesMessage(RemovedInDjango40Warning, msg % 'foo2'):\n             str(response.context['foo2'])\n         self.assertEqual(response.context['key'], 'value')\n-        self.assertIsInstance(response.context['view'], View)\n+        self.assertIsInstance(response.context['view'], View)\n+\n+class SimpleLazyObjectTests(TestCase):\n+    rf = RequestFactory()\n+\n+    def test_simple_lazy_object_in_context(self):\n+        \"\"\"\n+        Test that SimpleLazyObject in kwargs is resolved correctly\n+        in get_context_data.\n+        \"\"\"\n+        class OfferView(TemplateView):\n+            template_name = 'generic_views/about.html'\n+\n+            def get_context_data(self, **kwargs):\n+                offer_slug = kwargs.get(\"offer_slug\", \"\")\n+                offer = get_object_or_404(Artist, name=str(offer_slug))\n+                return {\"offer\": offer, \"offer_slug\": offer_slug}\n+\n+        artist = Artist.objects.create(name='Picasso')\n+        response = OfferView.as_view()(self.rf.get('/offers/picasso/'), offer_slug=artist.name)\n+        self.assertEqual(response.context_data['offer'], artist)\n+        self.assertEqual(response.context_data['offer_slug'], artist.name)\n+\n+    def test_without_explicit_str_conversion(self):\n+        \"\"\"\n+        Test without explicit str conversion to check if the issue\n+        is reproduced.\n+        \"\"\"\n+        class OfferView(TemplateView):\n+            template_name = 'generic_views/about.html'\n+\n+            def get_context_data(self, **kwargs):\n+                offer_slug = kwargs.get(\"offer_slug\", \"\")\n+                offer = get_object_or_404(Artist, name=offer_slug)\n+                return {\"offer\": offer, \"offer_slug\": offer_slug}\n+\n+        artist = Artist.objects.create(name='Van Gogh')\n+        with self.assertRaises(TypeError):\n+            # This should raise a TypeError due to SimpleLazyObject not being resolved\n+            OfferView.as_view()(self.rf.get('/offers/van-gogh/'), offer_slug=artist.name)\n",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..2019d48 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -16,6 +16,7 @@ from django.forms.models import (\n )\n from django.template import Context, Template\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n+from django.test.utils import isolate_apps\n \n from .models import (\n     Article, ArticleStatus, Author, Author1, Award, BetterWriter, BigInt, Book,\n@@ -2819,7 +2820,68 @@ class LimitChoicesToTests(TestCase):\n         fields = fields_for_model(StumpJoke, ['has_fooled_today'])\n         self.assertSequenceEqual(fields['has_fooled_today'].queryset, [self.threepwood])\n \n-    def test_callable_called_each_time_form_is_instantiated(self):\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        # Creating Character instances\n+        marley = Character.objects.create(username='Marley', last_action='2023-10-01')\n+        threepwood = Character.objects.create(username='Threepwood', last_action='2023-10-02')\n+\n+        # Creating StumpJoke instances with relationships\n+        joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=marley)\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=marley)\n+\n+        joke1.has_fooled_today.add(marley, threepwood)\n+        joke2.has_fooled_today.add(marley)\n+        joke3.has_fooled_today.add(marley, threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [marley, threepwood],\n+        )\n         field = StumpJokeForm.base_fields['most_recently_fooled']\n         with mock.patch.object(field, 'limit_choices_to') as today_callable_dict:\n             StumpJokeForm()\n",
  "django__django-13343": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex a5ab3a0..4bcafd9 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -29,7 +29,7 @@ from django.test.utils import requires_tz_support\n from django.urls import NoReverseMatch, reverse_lazy\n from django.utils import timezone\n \n-from .models import Storage, temp_storage, temp_storage_location\n+from .models import Storage, callable_storage, temp_storage, temp_storage_location\n \n FILE_SUFFIX_REGEX = '[A-Za-z0-9]{7}'\n \n@@ -906,6 +906,24 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         obj = FileField(storage=GetStorage)\n         self.assertIsInstance(obj.storage, BaseStorage)\n \n+    def test_deconstruction_with_callable_storage(self):\n+        \"\"\"\n+        Deconstructing a FileField with callable storage should give the original callable.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field('storage_callable').deconstruct()\n+        storage = kwargs['storage']\n+        self.assertIs(storage, callable_storage)\n+\n+    def test_deconstruction_with_non_callable_storage(self):\n+        \"\"\"\n+        Deconstructing a FileField with non-callable storage should inline the storage.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field('storage_non_callable').deconstruct()\n+        storage = kwargs['storage']\n+        self.assertIsInstance(storage, BaseStorage)\n+\n     def test_callable_storage_file_field_in_model(self):\n         obj = Storage()\n         self.assertEqual(obj.storage_callable.storage, temp_storage)\n",
  "django__django-13346": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex b918d5c..7562610 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -632,7 +632,21 @@ class TestQuerying(TestCase):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='ar').exists(), False)\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='bar').exists(), True)\n \n-    def test_key_icontains(self):\n+    def test_key_in_jsonfield(self):\n+        \"\"\"\n+        Test JSONField __in lookup behavior to ensure it behaves correctly.\n+        \"\"\"\n+        tests = [\n+            ('value__key__in', [0], list(NullableJSONModel.objects.filter(value__key=0))),\n+            ('value__key__in', [1, 2], list(NullableJSONModel.objects.filter(value__key__in=[1, 2]))),\n+            ('value__key__in', [], []),\n+        ]\n+        for lookup, value, expected in tests:\n+            with self.subTest(lookup=lookup, value=value):\n+                self.assertSequenceEqual(\n+                    NullableJSONModel.objects.filter(**{lookup: value}),\n+                    expected\n+                )\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__icontains='Ar').exists(), True)\n \n     def test_key_startswith(self):\n",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..30a42e4 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -19,6 +19,9 @@ from django.test import (\n )\n from django.utils import timezone\n \n+import pytz\n+from datetime import datetime\n+from django.db.models import Count\n from ..models import Author, DTModel, Fan\n \n \n@@ -1110,8 +1113,47 @@ class DateFunctionWithTimeZoneTests(DateFunctionTests):\n             ).order_by('start_datetime').get()\n             self.assertEqual(model.day_melb, 16)\n             self.assertEqual(model.day_utc, 15)\n+    def test_truncdate_with_tzinfo(self):\n+        melb = pytz.timezone('Australia/Melbourne')\n+        pacific = pytz.timezone('US/Pacific')\n+        utc = pytz.UTC\n+\n+        start_datetime = datetime(2023, 1, 1, 12, 0, 0, 0)\n+        start_datetime = timezone.make_aware(start_datetime, utc)\n+\n+        self.create_model(start_datetime, start_datetime)\n+\n+        model = DTModel.objects.annotate(\n+            melb_date=TruncDate('start_datetime', tzinfo=melb),\n+            pacific_date=TruncDate('start_datetime', tzinfo=pacific),\n+        ).get()\n+\n+        melb_start_datetime = start_datetime.astimezone(melb)\n+        pacific_start_datetime = start_datetime.astimezone(pacific)\n+\n+        self.assertEqual(model.melb_date, melb_start_datetime.date())\n+        self.assertEqual(model.pacific_date, pacific_start_datetime.date())\n+\n+    def test_trunctime_with_tzinfo(self):\n+        melb = pytz.timezone('Australia/Melbourne')\n+        pacific = pytz.timezone('US/Pacific')\n+        utc = pytz.UTC\n+\n+        start_datetime = datetime(2023, 1, 1, 12, 0, 0, 0)\n+        start_datetime = timezone.make_aware(start_datetime, utc)\n+\n+        self.create_model(start_datetime, start_datetime)\n+\n+        model = DTModel.objects.annotate(\n+            melb_time=TruncTime('start_datetime', tzinfo=melb),\n+            pacific_time=TruncTime('start_datetime', tzinfo=pacific),\n+        ).get()\n+\n+        melb_start_datetime = start_datetime.astimezone(melb)\n+        pacific_start_datetime = start_datetime.astimezone(pacific)\n \n-    def test_trunc_timezone_applied_before_truncation(self):\n+        self.assertEqual(model.melb_time, melb_start_datetime.time())\n+        self.assertEqual(model.pacific_time, pacific_start_datetime.time())\n         start_datetime = datetime(2016, 1, 1, 1, 30, 50, 321)\n         end_datetime = datetime(2016, 6, 15, 14, 10, 50, 123)\n         start_datetime = timezone.make_aware(start_datetime, is_dst=False)\n",
  "django__django-13401": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e39d03e..1736dcf 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -93,9 +93,49 @@ class BasicFieldTests(SimpleTestCase):\n     def test_field_instance_is_picklable(self):\n         \"\"\"Field instances can be pickled.\"\"\"\n         field = models.Field(max_length=100, default='a string')\n-        # Must be picklable with this cached property populated (#28188).\n-        field._get_default\n-        pickle.dumps(field)\n+import pickle\n+from django.test import TestCase\n+from django.db import models\n+\n+class AbstractFieldEqualityTests(TestCase):\n+\n+    def test_abstract_inherited_fields_comparison(self):\n+        \"\"\"Test that fields from different models are not equal, even if inherited from the same abstract model.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        # Abstract model field should not be equal to the inherited fields\n+        self.assertNotEqual(abstract_model_field, inherit1_model_field)\n+        self.assertNotEqual(abstract_model_field, inherit2_model_field)\n+        # Fields from different inherited models should not be equal\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+\n+        # Test __lt__ method to ensure consistent ordering\n+        self.assertLess(abstract_model_field, inherit1_model_field)\n+        self.assertLess(abstract_model_field, inherit2_model_field)\n+        self.assertLess(inherit1_model_field, inherit2_model_field)\n+\n+        # Test the hash values are not equal\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit1_model_field))\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit2_model_field))\n+        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n+\n+        # Additional checks for set behavior\n+        fields_set = {inherit1_model_field, inherit2_model_field}\n+        self.assertEqual(len(fields_set), 2)\n \n     def test_deconstruct_nested_field(self):\n         \"\"\"deconstruct() uses __qualname__ for nested class support.\"\"\"\n",
  "django__django-13410": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 1285e22..4de4b6f 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -1,3 +1,4 @@\n+\n import errno\n import gzip\n import os\n@@ -8,7 +9,7 @@ from io import BytesIO, StringIO, TextIOWrapper\n from pathlib import Path\n from unittest import mock\n \n-from django.core.files import File\n+from django.core.files import File, locks\n from django.core.files.base import ContentFile\n from django.core.files.move import file_move_safe\n from django.core.files.temp import NamedTemporaryFile\n@@ -178,7 +179,35 @@ class NoNameFileTestCase(unittest.TestCase):\n     def test_noname_file_default_name(self):\n         self.assertIsNone(File(BytesIO(b'A file with no name')).name)\n \n-    def test_noname_file_get_size(self):\n+class FileLockTestCase(unittest.TestCase):\n+    def test_exclusive_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'w') as f:\n+            f.write(\"Test content\")\n+        \n+        # Test exclusive lock\n+        with open(file_path) as f1, open(file_path) as f2:\n+            self.assertIs(locks.lock(f1, locks.LOCK_EX), True)\n+            self.assertIs(locks.lock(f2, locks.LOCK_EX | locks.LOCK_NB), False)\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), False)\n+            self.assertIs(locks.unlock(f1), True)\n+\n+    def test_shared_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        \n+        # Test shared lock\n+        with open(file_path) as f1, open(file_path) as f2:\n+            self.assertIs(locks.lock(f1, locks.LOCK_SH), True)\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), True)\n+            self.assertIs(locks.unlock(f1), True)\n+            self.assertIs(locks.unlock(f2), True)\n+\n+    def test_unlock_without_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        \n+        # Test unlocking a file that was never locked\n+        with open(file_path) as f:\n+            self.assertIs(locks.unlock(f), True)\n         self.assertEqual(File(BytesIO(b'A file with no name')).size, 19)\n \n \n",
  "django__django-13417": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 8130de5..857b240 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2076,6 +2076,27 @@ class QuerysetOrderedTests(unittest.TestCase):\n     def test_empty_queryset(self):\n         self.assertIs(Annotation.objects.none().ordered, True)\n \n+    def test_annotated_default_ordering(self):\n+        qs = Annotation.objects.annotate(num_notes=Count('notes'))\n+        self.assertIs(qs.ordered, False)\n+        self.assertIs(qs.order_by('num_notes').ordered, True)\n+\n+    def test_annotated_values_default_ordering(self):\n+        qs = Annotation.objects.values('name').annotate(num_notes=Count('notes'))\n+        self.assertIs(qs.ordered, False)\n+        self.assertIs(qs.order_by('name').ordered, True)\n+\n+    def test_group_by_without_order_by(self):\n+        # This tests if the QuerySet.ordered is False for a GROUP BY query without explicit ordering\n+        qs = Annotation.objects.annotate(num_notes=Count('notes')).values('name')\n+        self.assertFalse(qs.ordered)\n+\n+    def test_group_by_with_meta_ordering(self):\n+        # Assuming Meta.ordering exists on the Annotation model\n+        qs = Annotation.objects.annotate(num_notes=Count('notes'))\n+        self.assertFalse(qs.ordered)\n+        self.assertTrue(qs.order_by('name').ordered)\n+\n     def test_order_by_extra(self):\n         self.assertIs(Annotation.objects.all().extra(order_by=['id']).ordered, True)\n \n",
  "django__django-13516": "",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..25c932b 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,11 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n+from .models.with_custom_email_field import CustomEmailField\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..2d6504b 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,9 +1,11 @@\n+\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n from django.contrib.auth.models import AbstractBaseUser\n from django.core import checks\n from django.db import models\n+from django.db.models import Q, UniqueConstraint\n from django.test import (\n     SimpleTestCase, override_settings, override_system_checks,\n )\n@@ -138,7 +140,54 @@ class ModelsPermissionsChecksTests(SimpleTestCase):\n             ),\n         ])\n \n-    def test_non_clashing_custom_permissions(self):\n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserUniqueConstraint')\n+    def test_username_unique_with_partial_constraint(self):\n+        \"\"\"\n+        Check that a partial unique constraint with a condition still generates a warning\n+        if it does not globally enforce uniqueness of USERNAME_FIELD.\n+        \"\"\"\n+        class CustomUserUniqueConstraint(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(\n+                        fields=['username'],\n+                        name='unique_username_partially',\n+                        condition=Q(is_active=True),  # Simulate a partial unique constraint\n+                    ),\n+                ]\n+\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [\n+            checks.Warning(\n+                \"'CustomUserUniqueConstraint.username' is named as the 'USERNAME_FIELD', but it is not unique.\",\n+                hint='Ensure that your authentication backend(s) can handle non-unique usernames.',\n+                obj=CustomUserUniqueConstraint,\n+                id='auth.W004',\n+            ),\n+        ])\n+\n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserNonUniqueWithBackend')\n+    def test_username_non_unique_with_custom_backend(self):\n+        \"\"\"\n+        Verify that no error is raised when a non-unique username is used with a custom backend.\n+        \"\"\"\n+        class CustomUserNonUniqueWithBackend(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+        with self.settings(AUTHENTICATION_BACKENDS=['my.custom.backend']):\n+            errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+            self.assertEqual(errors, [\n+                checks.Warning(\n+                    \"'CustomUserNonUniqueWithBackend.username' is named as the 'USERNAME_FIELD', but it is not unique.\",\n+                    hint='Ensure that your authentication backend(s) can handle non-unique usernames.',\n+                    obj=CustomUserNonUniqueWithBackend,\n+                    id='auth.W004',\n+                ),\n+            ])\n         class Checked(models.Model):\n             class Meta:\n                 permissions = [\n",
  "django__django-13569": "",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..903df70 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -7,6 +8,7 @@ from decimal import Decimal\n from unittest import mock\n \n from django.core.exceptions import FieldError\n+from collections import namedtuple\n from django.db import DatabaseError, NotSupportedError, connection\n from django.db.models import (\n     AutoField, Avg, BinaryField, BooleanField, Case, CharField, Count,\n@@ -815,7 +817,27 @@ class IterableLookupInnerExpressionsTests(TestCase):\n         Company.objects.create(name='5060 Ltd', num_employees=50, num_chairs=60, ceo=ceo)\n         Company.objects.create(name='99300 Ltd', num_employees=99, num_chairs=300, ceo=ceo)\n \n-    def test_in_lookup_allows_F_expressions_and_expressions_for_integers(self):\n+    def test_range_lookup_namedtuple(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertQuerysetEqual(qs, ['<Company: 99300 Ltd>'], ordered=False)\n+\n+    def test_range_lookup_unnamed_tuple(self):\n+        # Ensure that unnamed tuples work as expected as well\n+        qs = Company.objects.filter(\n+            num_employees__range=(51, 100),\n+        )\n+        self.assertQuerysetEqual(qs, ['<Company: 99300 Ltd>'], ordered=False)\n+\n+    def test_range_lookup_namedtuple_single_value_error(self):\n+        # Ensure that namedtuples with a single value raise an error\n+        SingleValueRange = namedtuple('SingleValueRange', ['minimum'])\n+        with self.assertRaises(TypeError):\n+            Company.objects.filter(\n+                num_employees__range=SingleValueRange(minimum=51),\n+            )\n         # __in lookups can use F() expressions for integers.\n         queryset = Company.objects.filter(num_employees__in=([F('num_chairs') - 10]))\n         self.assertQuerysetEqual(queryset, ['<Company: 5060 Ltd>'], ordered=False)\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..84fadce 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -30,6 +30,7 @@ from django.db import ConnectionHandler, connection\n from django.db.migrations.recorder import MigrationRecorder\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n+    captured_stderr, captured_stdout\n )\n \n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n",
  "django__django-13670": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 6f0b13f..20ff159 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -1,3 +1,4 @@\n+\n from datetime import date, datetime\n \n from django.test import SimpleTestCase, override_settings\n@@ -116,7 +117,22 @@ class DateFormatTests(SimpleTestCase):\n         the_future = datetime(2100, 10, 25, 0, 00)\n         self.assertEqual(dateformat.format(the_future, r'Y'), '2100')\n \n-    def test_day_of_year_leap(self):\n+    def test_year_before_1000(self):\n+        tests = [\n+            (476, '76'),\n+            (42, '42'),\n+            (4, '04'),\n+            (999, '99'),\n+            (123, '23'),\n+            (1, '01'),\n+            (0, '00'),  # Test with year 0\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n         self.assertEqual(dateformat.format(datetime(2000, 12, 31), 'z'), '366')\n \n     def test_timezones(self):\n@@ -164,4 +180,4 @@ class DateFormatTests(SimpleTestCase):\n             self.assertEqual(\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+            )\n",
  "django__django-13741": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex ca66cd5..68bc1e0 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1024,6 +1024,10 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n         field = ReadOnlyPasswordHashField()\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n \n+    def test_readonly_password_hash_field_disabled(self):\n+        field = ReadOnlyPasswordHashField()\n+        self.assertIs(field.disabled, True)\n+\n \n class AdminPasswordChangeFormTest(TestDataMixin, TestCase):\n \n",
  "django__django-13786": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3782589..3fdf796 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -119,6 +119,61 @@ class OptimizerTests(SimpleTestCase):\n             ]\n         )\n \n+    def test_create_model_and_remove_model_options(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'verbose_name': 'My Model'},\n+                ),\n+                migrations.AlterModelOptions('MyModel', options={}),\n+            ],\n+            [migrations.CreateModel('MyModel', fields=[])],\n+        )\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={\n+                        'verbose_name': 'My Model',\n+                        'verbose_name_plural': 'My Model plural',\n+                    },\n+                ),\n+                migrations.AlterModelOptions(\n+                    'MyModel',\n+                    options={'verbose_name': 'My Model'},\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'verbose_name': 'My Model'},\n+                ),\n+            ],\n+        )\n+\n+    def test_create_model_and_modify_options(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'verbose_name': 'My Model'},\n+                ),\n+                migrations.AlterModelOptions('MyModel', options={'verbose_name': 'Your Model'}),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'verbose_name': 'Your Model'},\n+                ),\n+            ],\n+        )\n+\n     def _test_create_alter_foo_delete_model(self, alter_foo):\n         \"\"\"\n         CreateModel, AlterModelTable, AlterUniqueTogether/AlterIndexTogether/\n@@ -134,6 +189,61 @@ class OptimizerTests(SimpleTestCase):\n             [],\n         )\n \n+    def test_create_model_and_remove_model_options(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'verbose_name': 'My Model'},\n+                ),\n+                migrations.AlterModelOptions('MyModel', options={}),\n+            ],\n+            [migrations.CreateModel('MyModel', fields=[])],\n+        )\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={\n+                        'verbose_name': 'My Model',\n+                        'verbose_name_plural': 'My Model plural',\n+                    },\n+                ),\n+                migrations.AlterModelOptions(\n+                    'MyModel',\n+                    options={'verbose_name': 'My Model'},\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'verbose_name': 'My Model'},\n+                ),\n+            ],\n+        )\n+\n+    def test_create_model_and_modify_options(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'verbose_name': 'My Model'},\n+                ),\n+                migrations.AlterModelOptions('MyModel', options={'verbose_name': 'Your Model'}),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'verbose_name': 'Your Model'},\n+                ),\n+            ],\n+        )\n+\n     def test_create_alter_unique_delete_model(self):\n         self._test_create_alter_foo_delete_model(migrations.AlterUniqueTogether(\"Foo\", [[\"a\", \"b\"]]))\n \n",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..3ffd214 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,8 +1,10 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n from django.test import SimpleTestCase\n \n+from django.utils.translation import gettext_lazy, lazy\n from ..utils import setup\n \n \n@@ -46,6 +48,35 @@ class AddTests(SimpleTestCase):\n         output = self.engine.render_to_string('add07', {'d': date(2000, 1, 1), 't': timedelta(10)})\n         self.assertEqual(output, 'Jan. 11, 2000')\n \n+    @setup({'add08': '{{ s1|add:lazy_s2 }}'})\n+    def test_add08(self):\n+        output = self.engine.render_to_string(\n+            'add08',\n+            {'s1': 'string', 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    @setup({'add09': '{{ lazy_s1|add:lazy_s2 }}'})\n+    def test_add09(self):\n+        output = self.engine.render_to_string(\n+            'add09',\n+            {'lazy_s1': gettext_lazy('string'), 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    @setup({'add10': '{{ lazy_s1|add:s2 }}'})\n+    def test_add10(self):\n+        output = self.engine.render_to_string(\n+            'add10',\n+            {'lazy_s1': gettext_lazy('lazy'), 's2': 'string'},\n+        )\n+        self.assertEqual(output, 'lazystring')\n+\n+    def test_lazy_add(self):\n+        lazy_4 = lazy(lambda: 4, int)\n+        lazy_5 = lazy(lambda: 5, int)\n+        self.assertEqual(lazy_4() + lazy_5(), 9)\n+\n \n class FunctionTests(SimpleTestCase):\n \n",
  "django__django-13807": "diff --git a/tests/backends/tests.py b/tests/backends/tests.py\nindex 0aee2b6..27cebb9 100644\n--- a/tests/backends/tests.py\n+++ b/tests/backends/tests.py\n@@ -18,6 +18,7 @@ from django.test import (\n     skipUnlessDBFeature,\n )\n \n+from django.db import IntegrityError, connection, transaction\n from .models import (\n     Article, Object, ObjectReference, Person, Post, RawData, Reporter,\n     ReporterProxy, SchoolClass, Square,\n",
  "django__django-13809": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex d88ea78..91efb61 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1314,7 +1314,28 @@ class ManageRunserver(SimpleTestCase):\n         self.assertIn('unapplied migration(s)', self.output.getvalue())\n \n \n-class ManageRunserverMigrationWarning(TestCase):\n+class ManageRunserverSkipChecks(TestCase):\n+\n+    def setUp(self):\n+        self.output = StringIO()\n+\n+    @mock.patch('django.core.management.commands.runserver.RunserverCommand.check')\n+    def test_runserver_with_skip_checks(self, mocked_check):\n+        # Run the server with --skip-checks\n+        call_command('runserver', use_reloader=False, skip_checks=True, stdout=self.output)\n+        # Ensure system checks were not performed\n+        self.assertNotIn('Performing system checks...', self.output.getvalue())\n+        mocked_check.assert_not_called()\n+\n+        # Reset output\n+        self.output.truncate(0)\n+        self.output.seek(0)\n+\n+        # Run the server without --skip-checks\n+        call_command('runserver', use_reloader=False, skip_checks=False, stdout=self.output)\n+        # Ensure system checks were performed\n+        self.assertIn('Performing system checks...', self.output.getvalue())\n+        mocked_check.assert_called()\n \n     def setUp(self):\n         self.stdout = StringIO()\n",
  "django__django-13810": "diff --git a/tests/middleware_exceptions/tests.py b/tests/middleware_exceptions/tests.py\nindex bb82f7d..c1278ac 100644\n--- a/tests/middleware_exceptions/tests.py\n+++ b/tests/middleware_exceptions/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.conf import settings\n from django.core.exceptions import MiddlewareNotUsed\n from django.http import HttpResponse\n@@ -187,6 +188,26 @@ class MiddlewareNotUsedTests(SimpleTestCase):\n     ROOT_URLCONF='middleware_exceptions.urls',\n )\n class MiddlewareSyncAsyncTests(SimpleTestCase):\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    async def test_dummy_middleware_async(self):\n+        # This test checks if MiddlewareNotUsed exception correctly skips\n+        # dummy middleware and properly handles the next middleware.\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.tests.MyMiddleware adapted.\"\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.DummyMiddleware'\"\n+        )\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.PaymentMiddleware',\n     ])\n@@ -194,6 +215,26 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n         response = self.client.get('/middleware_exceptions/view/')\n         self.assertEqual(response.status_code, 402)\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    async def test_dummy_middleware_async(self):\n+        # This test checks if MiddlewareNotUsed exception correctly skips\n+        # dummy middleware and properly handles the next middleware.\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.tests.MyMiddleware adapted.\"\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.DummyMiddleware'\"\n+        )\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.DecoratedPaymentMiddleware',\n     ])\n@@ -201,6 +242,26 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n         response = self.client.get('/middleware_exceptions/view/')\n         self.assertEqual(response.status_code, 402)\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    async def test_dummy_middleware_async(self):\n+        # This test checks if MiddlewareNotUsed exception correctly skips\n+        # dummy middleware and properly handles the next middleware.\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.tests.MyMiddleware adapted.\"\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.DummyMiddleware'\"\n+        )\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.async_payment_middleware',\n     ])\n@@ -215,6 +276,26 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n             \"adapted.\",\n         )\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    async def test_dummy_middleware_async(self):\n+        # This test checks if MiddlewareNotUsed exception correctly skips\n+        # dummy middleware and properly handles the next middleware.\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.tests.MyMiddleware adapted.\"\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.DummyMiddleware'\"\n+        )\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.NotSyncOrAsyncMiddleware',\n     ])\n@@ -227,6 +308,26 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n         with self.assertRaisesMessage(RuntimeError, msg):\n             self.client.get('/middleware_exceptions/view/')\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    async def test_dummy_middleware_async(self):\n+        # This test checks if MiddlewareNotUsed exception correctly skips\n+        # dummy middleware and properly handles the next middleware.\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.tests.MyMiddleware adapted.\"\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.DummyMiddleware'\"\n+        )\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.PaymentMiddleware',\n     ])\n@@ -240,6 +341,26 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n             \"middleware_exceptions.middleware.PaymentMiddleware adapted.\",\n         )\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    async def test_dummy_middleware_async(self):\n+        # This test checks if MiddlewareNotUsed exception correctly skips\n+        # dummy middleware and properly handles the next middleware.\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.tests.MyMiddleware adapted.\"\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.DummyMiddleware'\"\n+        )\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.async_payment_middleware',\n     ])\n@@ -266,6 +387,26 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             self.client.get('/middleware_exceptions/template_response/')\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    async def test_dummy_middleware_async(self):\n+        # This test checks if MiddlewareNotUsed exception correctly skips\n+        # dummy middleware and properly handles the next middleware.\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.tests.MyMiddleware adapted.\"\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.DummyMiddleware'\"\n+        )\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n     ])\n@@ -274,6 +415,26 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n         self.assertEqual(response.content, b'OK')\n         self.assertEqual(response.status_code, 200)\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    async def test_dummy_middleware_async(self):\n+        # This test checks if MiddlewareNotUsed exception correctly skips\n+        # dummy middleware and properly handles the next middleware.\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.tests.MyMiddleware adapted.\"\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.DummyMiddleware'\"\n+        )\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n     ])\n@@ -285,6 +446,26 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n \n @override_settings(ROOT_URLCONF='middleware_exceptions.urls')\n class AsyncMiddlewareTests(SimpleTestCase):\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    async def test_dummy_middleware_async(self):\n+        # This test checks if MiddlewareNotUsed exception correctly skips\n+        # dummy middleware and properly handles the next middleware.\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.tests.MyMiddleware adapted.\"\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.DummyMiddleware'\"\n+        )\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.AsyncTemplateResponseMiddleware',\n     ])\n",
  "django__django-13820": "",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..9161a1e 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -15,6 +15,7 @@ from django.test import (\n     TestCase, TransactionTestCase, override_settings, skipIfDBFeature,\n )\n from django.test.utils import isolate_apps\n+from unittest import mock\n \n from ..models import Author, Item, Object, Square\n \n@@ -36,7 +37,13 @@ class Tests(TestCase):\n                 self.assertRaisesMessage(ImproperlyConfigured, msg):\n             check_sqlite_version()\n \n-    def test_aggregation(self):\n+    def test_check_sqlite_version_new(self):\n+        # This test is based on the original patch provided to check for SQLite < 3.9.0\n+        msg = 'SQLite 3.9.0 or later is required (found 3.8.11.1).'\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 8, 11, 1)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.8.11.1'), \\\n+                self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            check_sqlite_version()\n         \"\"\"Raise NotSupportedError when aggregating on date/time fields.\"\"\"\n         for aggregate in (Sum, Avg, Variance, StdDev):\n             with self.assertRaises(NotSupportedError):\n",
  "django__django-13837": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 10ffa22..6b99b9b 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -158,7 +158,14 @@ class TestIterModulesAndFiles(SimpleTestCase):\n \n class TestChildArguments(SimpleTestCase):\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        # Test for a package other than Django\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n+        )\n     def test_run_as_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n@@ -173,7 +180,14 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-Werror', __file__, 'runserver']\n         )\n \n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        # Test for a package other than Django\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n+        )\n     def test_exe_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             exe_path = Path(tmpdir) / 'django-admin.exe'\n",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..b29af68 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -297,8 +297,20 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['INVALID CHOICE'], f.clean, '4')\n-\n-        # ModelMultipleChoiceField\n+        \n+        # Test for ModelChoiceField value placeholder\n+        def test_modelchoicefield_value_placeholder(self):\n+            f = ModelChoiceField(\n+                queryset=ChoiceModel.objects.all(),\n+                error_messages={\n+                    'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+                },\n+            )\n+            self.assertFormErrors(\n+                ['\"invalid\" is not one of the available choices.'],\n+                f.clean,\n+                'invalid',\n+            )\n         e = {\n             'required': 'REQUIRED',\n             'invalid_choice': '%(value)s IS INVALID CHOICE',\n@@ -307,4 +319,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/tests.py b/tests/many_to_one/tests.py\nindex 8af1b8e..6144d4d 100644\n--- a/tests/many_to_one/tests.py\n+++ b/tests/many_to_one/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n from copy import deepcopy\n \n@@ -549,7 +550,27 @@ class ManyToOneTests(TestCase):\n         self.assertEqual(child.parent, parent)\n         self.assertEqual(child.parent_id, parent.name)\n \n-    def test_fk_to_bigautofield(self):\n+    def test_save_fk_after_parent_with_non_numeric_pk_set_on_child_empty_pk(self):\n+        with transaction.atomic():\n+            parent = ParentStringPrimaryKey()\n+            child = ChildStringPrimaryKeyParent()\n+            child.parent = parent\n+            child.parent.name = \"jeff\"\n+            parent.save()\n+            child.save()\n+            child.refresh_from_db()\n+            self.assertEqual(child.parent, parent)\n+            self.assertEqual(child.parent_id, parent.name)\n+\n+    def test_save_fk_after_parent_with_non_numeric_pk_set_on_child_predefined_pk(self):\n+        with transaction.atomic():\n+            parent = ParentStringPrimaryKey(name=\"jeff\")\n+            child = ChildStringPrimaryKeyParent(parent=parent)\n+            parent.save()\n+            child.save()\n+            child.refresh_from_db()\n+            self.assertEqual(child.parent, parent)\n+            self.assertEqual(child.parent_id, parent.name)\n         ch = City.objects.create(name='Chicago')\n         District.objects.create(city=ch, name='Far South')\n         District.objects.create(city=ch, name='North')\n",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..02e5838 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,7 +1,10 @@\n+\n from django.db import IntegrityError, transaction\n from django.test import TestCase, skipIfDBFeature\n \n-from .models import Bar, Business, Employee, Foo\n+from .models import Bar, Business, Employee, Foo, CustomAutoFieldModel\n+from .fields import MyWrapper\n+from django.test import skipUnlessDBFeature\n \n \n class BasicCustomPKTests(TestCase):\n@@ -220,7 +223,23 @@ class CustomPKTests(TestCase):\n         self.assertEqual(f, new_foo),\n         self.assertEqual(f.bar, new_bar)\n \n-    # SQLite lets objects be saved with an empty primary key, even though an\n+\n+class TestMyAutoField(TestCase):\n+    def test_auto_field_subclass_create(self):\n+        \"\"\"\n+        Test that MyAutoField uses from_db_value on object creation.\n+        \"\"\"\n+        obj = CustomAutoFieldModel.objects.create()\n+        self.assertIsInstance(obj.id, MyWrapper)\n+\n+    @skipUnlessDBFeature('can_return_rows_from_bulk_insert')\n+    def test_auto_field_subclass_bulk_create(self):\n+        \"\"\"\n+        Test that MyAutoField uses from_db_value on bulk_create.\n+        \"\"\"\n+        obj = CustomAutoFieldModel()\n+        CustomAutoFieldModel.objects.bulk_create([obj])\n+        self.assertIsInstance(obj.id, MyWrapper)\n     # integer is expected. So we can't check for an error being raised in that\n     # case for SQLite. Remove it from the suite for this next bit.\n     @skipIfDBFeature('supports_unspecified_pk')\n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..df99de6 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -816,8 +816,28 @@ class BasicExpressionsTests(TestCase):\n             [self.example_inc.ceo, self.max],\n         )\n \n+class TestQExistsCommutativity(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.company_ceo = Employee.objects.create(firstname='Alice', lastname='CEO', salary=100)\n+        cls.company_poc = Employee.objects.create(firstname='Bob', lastname='POC', salary=50)\n+        cls.other_employee = Employee.objects.create(firstname='Charlie', lastname='Employee', salary=20)\n+\n+        cls.example_co = Company.objects.create(name='Example Co', ceo=cls.company_ceo, point_of_contact=cls.company_poc)\n+\n+    def test_and_commutativity(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+\n+        # Testing Exists(...) & Q() \n+        result1 = Employee.objects.filter(Exists(is_ceo) & Q(salary__gte=30))\n+        result2 = Employee.objects.filter(Q(salary__gte=30) & Exists(is_ceo))\n+        self.assertCountEqual(result1, result2)\n \n-class IterableLookupInnerExpressionsTests(TestCase):\n+        # Testing Exists(...) | Q() \n+        result3 = Employee.objects.filter(Exists(is_poc) | Q(salary__lt=15))\n+        result4 = Employee.objects.filter(Q(salary__lt=15) | Exists(is_poc))\n+        self.assertCountEqual(result3, result4)\n     @classmethod\n     def setUpTestData(cls):\n         ceo = Employee.objects.create(firstname='Just', lastname='Doit', salary=30)\n",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..0f92861 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -205,6 +205,31 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yields_in_post_process(self):\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_args = {\n+            'interactive': False,\n+            'clear': False,\n+            'dry_run': False,\n+            'post_process': True,\n+            'use_default_ignore_patterns': True,\n+            'ignore_patterns': [],\n+        }\n+        collectstatic_cmd.set_options(**collectstatic_args)\n+        stats = collectstatic_cmd.collect()\n+        \n+        # Ensure no file is yielded more than once\n+        post_processed_files = stats['post_processed']\n+        self.assertCountEqual(post_processed_files, set(post_processed_files))\n+        \n+        # Check that the number of files post-processed matches the expected number\n+        expected_post_processed_files = {\n+            os.path.join('cached', 'css', 'window.css'),\n+            os.path.join('test', 'nonascii.css'),\n+            # Add any other expected post-processed files here\n+        }\n+        self.assertEqual(set(post_processed_files), expected_post_processed_files)\n+\n     def test_css_import_case_insensitive(self):\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n         self.assertEqual(relpath, \"cached/styles_insensitive.3fa427592a53.css\")\n@@ -214,6 +239,31 @@ class TestHashedFiles:\n             self.assertIn(b\"other.d41d8cd98f00.css\", content)\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yields_in_post_process(self):\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_args = {\n+            'interactive': False,\n+            'clear': False,\n+            'dry_run': False,\n+            'post_process': True,\n+            'use_default_ignore_patterns': True,\n+            'ignore_patterns': [],\n+        }\n+        collectstatic_cmd.set_options(**collectstatic_args)\n+        stats = collectstatic_cmd.collect()\n+        \n+        # Ensure no file is yielded more than once\n+        post_processed_files = stats['post_processed']\n+        self.assertCountEqual(post_processed_files, set(post_processed_files))\n+        \n+        # Check that the number of files post-processed matches the expected number\n+        expected_post_processed_files = {\n+            os.path.join('cached', 'css', 'window.css'),\n+            os.path.join('test', 'nonascii.css'),\n+            # Add any other expected post-processed files here\n+        }\n+        self.assertEqual(set(post_processed_files), expected_post_processed_files)\n+\n     @override_settings(\n         STATICFILES_DIRS=[os.path.join(TEST_ROOT, 'project', 'faulty')],\n         STATICFILES_FINDERS=['django.contrib.staticfiles.finders.FileSystemFinder'],\n",
  "django__django-14089": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 7fb3d83..0f6aeb8 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n@@ -5,6 +6,7 @@ Tests for stuff in django.utils.datastructures.\n import copy\n import pickle\n \n+import collections.abc\n from django.test import SimpleTestCase\n from django.utils.datastructures import (\n     CaseInsensitiveMapping, DictWrapper, ImmutableList, MultiValueDict,\n@@ -18,7 +20,35 @@ class OrderedSetTests(SimpleTestCase):\n         s = OrderedSet([1, 2, 3])\n         self.assertEqual(list(s.dict.keys()), [1, 2, 3])\n \n-    def test_remove(self):\n+    def test_reversed(self):\n+        s = reversed(OrderedSet([1, 2, 3]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [3, 2, 1])\n+\n+    def test_reversed_empty(self):\n+        # Test reversing an empty OrderedSet\n+        s = reversed(OrderedSet())\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [])\n+\n+    def test_reversed_single_element(self):\n+        # Test reversing an OrderedSet with a single element\n+        s = reversed(OrderedSet([42]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [42])\n+\n+    def test_reversed_multiple_data_types(self):\n+        # Test reversing an OrderedSet with different data types\n+        s = reversed(OrderedSet(['a', 1, (2, 3), 4.5]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [4.5, (2, 3), 1, 'a'])\n+\n+    def test_reversed_maintains_order(self):\n+        # Test if reversing twice gives the original order\n+        elements = [1, 'b', 3.14, (4, 5)]\n+        s = OrderedSet(elements)\n+        reversed_twice = list(reversed(list(reversed(s))))\n+        self.assertEqual(reversed_twice, elements)\n         s = OrderedSet()\n         self.assertEqual(len(s), 0)\n         s.add(1)\n",
  "django__django-14122": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 83089d9..6ebb195 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n from operator import attrgetter\n \n@@ -320,7 +321,31 @@ class OrderingTests(TestCase):\n             [a.pk for a in Author.objects.order_by('-pk')],\n         )\n \n-    def test_order_by_fk_attname(self):\n+    def test_default_ordering_does_not_affect_group_by(self):\n+        \"\"\"\n+        Test that Meta.ordering fields are not included in the GROUP BY clause.\n+        This ensures that default ordering does not affect aggregation.\n+        \"\"\"\n+        Article.objects.exclude(headline='Article 4').update(author=self.author_1)\n+        Article.objects.filter(headline='Article 4').update(author=self.author_2)\n+        articles = Article.objects.values('author').annotate(count=Count('author'))\n+        self.assertCountEqual(articles, [\n+            {'author': self.author_1.pk, 'count': 3},\n+            {'author': self.author_2.pk, 'count': 1},\n+        ])\n+\n+    def test_ordering_and_group_by_interaction(self):\n+        \"\"\"\n+        Ensures that ordering specified in Meta does not interfere with group by.\n+        \"\"\"\n+        Article.objects.exclude(headline='Article 4').update(author=self.author_1)\n+        Article.objects.filter(headline='Article 4').update(author=self.author_2)\n+        # Verify aggregation without default ordering interference\n+        articles = Article.objects.values('author').annotate(total_count=Count('id')).order_by('author')\n+        self.assertCountEqual(articles, [\n+            {'author': self.author_1.pk, 'total_count': 3},\n+            {'author': self.author_2.pk, 'total_count': 1},\n+        ])\n         \"\"\"\n         ordering by a foreign key by its attribute name prevents the query\n         from inheriting its related model ordering option (#19195).\n@@ -483,4 +508,4 @@ class OrderingTests(TestCase):\n         )\n         ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n         articles = ChildArticle.objects.order_by('article_ptr')\n-        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n",
  "django__django-14140": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex 7e095fe..acaceb4 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,4 +1,6 @@\n-from django.db.models import F, Q\n+\n+from django.db.models import Exists, F, OuterRef, Q\n+from .models import Tag, Group, Event\n from django.test import SimpleTestCase\n \n \n@@ -42,6 +44,14 @@ class QTests(SimpleTestCase):\n         self.assertEqual(args, ())\n         self.assertEqual(kwargs, {'price__gt': F('discounted_price')})\n \n+    def test_deconstruct_exists(self):\n+        tagged = Tag.objects.filter(category=OuterRef('pk'))\n+        q = Q(Exists(tagged))\n+        path, args, kwargs = q.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Q')\n+        self.assertEqual(args, (Exists(tagged),))\n+        self.assertEqual(kwargs, {})\n+        \n     def test_deconstruct_negated(self):\n         q = ~Q(price__gt=F('discounted_price'))\n         path, args, kwargs = q.deconstruct()\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..aa2ffa1 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,7 +1,9 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n+from django.db import models\n \n \n @isolate_apps('model_options')\n@@ -66,7 +68,27 @@ class TestDefaultPK(SimpleTestCase):\n             class Model(models.Model):\n                 pass\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -82,7 +104,27 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14311": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex b7e6f92..b5e3c2e 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -165,17 +165,49 @@ class TestIterModulesAndFiles(SimpleTestCase):\n \n class TestChildArguments(SimpleTestCase):\n     @mock.patch.dict(sys.modules, {'__main__': django.__main__})\n-    @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main_module.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_with_dotted_module(self):\n+        with mock.patch('django.utils.autoreload.__main__.__spec__') as mock_spec:\n+            mock_spec.parent = 'utils_tests.test_module.main_module'\n+            self.assertEqual(\n+                autoreload.get_child_arguments(),\n+                [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+            )\n     def test_run_as_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n             [sys.executable, '-m', 'django', 'runserver']\n         )\n \n-    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n     @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main_module.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_with_dotted_module(self):\n+        with mock.patch('django.utils.autoreload.__main__.__spec__') as mock_spec:\n+            mock_spec.parent = 'utils_tests.test_module.main_module'\n+            self.assertEqual(\n+                autoreload.get_child_arguments(),\n+                [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+            )\n     def test_run_as_non_django_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n@@ -191,6 +223,22 @@ class TestChildArguments(SimpleTestCase):\n         )\n \n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main_module.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_with_dotted_module(self):\n+        with mock.patch('django.utils.autoreload.__main__.__spec__') as mock_spec:\n+            mock_spec.parent = 'utils_tests.test_module.main_module'\n+            self.assertEqual(\n+                autoreload.get_child_arguments(),\n+                [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+            )\n     def test_exe_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             exe_path = Path(tmpdir) / 'django-admin.exe'\n@@ -202,6 +250,22 @@ class TestChildArguments(SimpleTestCase):\n                 )\n \n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main_module.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_with_dotted_module(self):\n+        with mock.patch('django.utils.autoreload.__main__.__spec__') as mock_spec:\n+            mock_spec.parent = 'utils_tests.test_module.main_module'\n+            self.assertEqual(\n+                autoreload.get_child_arguments(),\n+                [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+            )\n     def test_entrypoint_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             script_path = Path(tmpdir) / 'django-admin-script.py'\n",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..9efa2ab 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -223,6 +223,13 @@ TEST_DATA = [\n     (URLValidator(EXTENDED_SCHEMES), 'git+ssh://git@github.com/example/hg-git.git', None),\n \n     (URLValidator(EXTENDED_SCHEMES), 'git://-invalid.com', ValidationError),\n+    # Newlines and tabs are not accepted.\n+    (URLValidator(), 'http://www.djangoproject.com/\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://www.django\\rproject.com/', ValidationError),\n+    (URLValidator(), 'http://[::\\rffff:192.9.5.5]', ValidationError),\n+    (URLValidator(), 'http://\\twww.djangoproject.com/', ValidationError),\n+    (URLValidator(), 'http://\\t[::ffff:192.9.5.5]', ValidationError),\n     (URLValidator(), None, ValidationError),\n     (URLValidator(), 56, ValidationError),\n     (URLValidator(), 'no_scheme', ValidationError),\n",
  "django__django-14351": "diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\nindex 79963c3..a5448a1 100644\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -1526,7 +1526,31 @@ class AggregationTests(TestCase):\n         DistinctAggregate('foo', distinct=True)\n \n \n+from django.db.models import Count, Q\n+from django.test import TestCase\n+from .models import Author, Book, PropertyGroup, ManagementAgent\n+\n class JoinPromotionTests(TestCase):\n+    def test_subquery_in_or_condition(self):\n+        # Assume PropertyGroup and ManagementAgent are models available for testing\n+        management_agent = ManagementAgent.objects.create(name=\"Agent 1\")\n+        property_group_1 = PropertyGroup.objects.create(name=\"Group 1\", management_agent=management_agent)\n+        property_group_2 = PropertyGroup.objects.create(name=\"Group 2\", management_agent=management_agent)\n+        property_groups = PropertyGroup.objects.filter(management_agent=management_agent)\n+\n+        # Annotate and filter with the problematic Q object logic\n+        queryset = ManagementAgent.objects.annotate(\n+            Count(\"property_groups\")\n+        ).filter(\n+            Q(property_groups__in=property_groups) | Q(property_groups__count=0)\n+        ).distinct()\n+\n+        # Verify that the queryset does not raise a ProgrammingError\n+        self.assertIsNotNone(queryset)\n+\n+        # Verify that the queryset returns the expected results\n+        expected_agents = [management_agent]\n+        self.assertEqual(list(queryset), expected_agents)\n     def test_ticket_21150(self):\n         b = Bravo.objects.create()\n         c = Charlie.objects.create(bravo=b)\n",
  "django__django-14373": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 2f7c68b..0ff9eea 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -179,7 +179,11 @@ class DateFormatTests(SimpleTestCase):\n                     expected_date,\n                 )\n \n-    def test_twelve_hour_format(self):\n+    def test_Y_format_year_before_1000(self):\n+        self.assertEqual(dateformat.format(datetime(1, 1, 1), 'Y'), '0001')\n+        self.assertEqual(dateformat.format(datetime(999, 1, 1), 'Y'), '0999')\n+        self.assertEqual(dateformat.format(datetime(1000, 1, 1), 'Y'), '1000')\n+        self.assertEqual(dateformat.format(datetime(2023, 1, 1), 'Y'), '2023')\n         tests = [\n             (0, '12'),\n             (1, '1'),\n",
  "django__django-14376": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\nindex 643c2b6..0f62c90 100644\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -38,7 +38,62 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n-    def test_options_override_settings_proper_values(self):\n+    def test_deprecated_and_preferred_keys(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+\n+        # Test with both deprecated ('db', 'passwd') and preferred ('database', 'password') keys\n+        for keys in [('database', 'password'), ('db', 'passwd')]:\n+            with self.subTest(keys=keys):\n+                database, password = keys\n+                expected_args = [\n+                    'mysql',\n+                    '--user=optionuser',\n+                    '--host=optionhost',\n+                    '--port=%s' % options_port,\n+                    'optiondbname',\n+                ]\n+                expected_env = {'MYSQL_PWD': 'optionpassword'}\n+                self.assertEqual(\n+                    self.settings_to_cmd_args_env({\n+                        'NAME': 'settingdbname',\n+                        'USER': 'settinguser',\n+                        'PASSWORD': 'settingpassword',\n+                        'HOST': 'settinghost',\n+                        'PORT': settings_port,\n+                        'OPTIONS': {\n+                            database: 'optiondbname',\n+                            'user': 'optionuser',\n+                            password: 'optionpassword',\n+                            'host': 'optionhost',\n+                            'port': options_port,\n+                        },\n+                    }),\n+                    (expected_args, expected_env),\n+                )\n+\n+    def test_options_non_deprecated_keys_preferred(self):\n+        expected_args = [\n+            'mysql',\n+            '--user=someuser',\n+            '--host=somehost',\n+            '--port=444',\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'db': 'deprecatedoptiondbname',\n+                    'password': 'optionpassword',\n+                    'passwd': 'deprecatedoptionpassword',\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n         settings_port = 444\n         options_port = 555\n         self.assertNotEqual(settings_port, options_port, 'test pre-req')\n",
  "django__django-14434": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex 39c82bf..bfb0339 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -2194,6 +2194,28 @@ class SchemaTests(TransactionTestCase):\n         ]\n         self.assertEqual(len(other_constraints), 1)\n         # Drop the unique constraint\n+\n+    def test_constraint_with_table_instance(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        # Create a constraint using a Table instance incorrectly\n+        table_instance = Author._meta.db_table\n+        with self.assertRaises(TypeError):\n+            constraint = UniqueConstraint(fields=[table_instance], name='invalid_constraint')\n+        # Ensure that the constraint creation fails\n+\n+    def test_correct_constraint_creation(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        # Create a valid constraint\n+        constraint = UniqueConstraint(fields=['name'], name='valid_name_uq')\n+        with connection.schema_editor() as editor:\n+            editor.add_constraint(Author, constraint)\n+            sql = constraint.create_sql(Author, editor)\n+        table = Author._meta.db_table\n+        self.assertIs(sql.references_table(table), True)\n+        self.assertIs(sql.references_column(table, 'name'), True)\n+        # Ensure the constraint is properly referenced\n         with connection.schema_editor() as editor:\n             AuthorWithUniqueNameAndBirthday._meta.constraints = []\n             editor.remove_constraint(AuthorWithUniqueNameAndBirthday, constraint)\n",
  "django__django-14493": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 17aecdd..fb2cc40 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -463,6 +463,19 @@ class TestCollectionNoneHashStorage(CollectionTestCase):\n         self.assertEqual(relpath, 'cached/styles.css')\n \n \n+\n+class NoPostProcessReplacedPathStorage(ManifestStaticFilesStorage):\n+    max_post_process_passes = 0\n+\n+@override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.NoPostProcessReplacedPathStorage')\n+class TestCollectionNoPostProcessReplacedPaths(CollectionTestCase):\n+    run_collectstatic_in_setUp = False\n+\n+    def test_collectstatic_no_post_process_replaced_paths(self):\n+        stdout = StringIO()\n+        self.run_collectstatic(verbosity=1, stdout=stdout)\n+        self.assertIn('post-processed', stdout.getvalue())\n+\n @override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.SimpleStorage')\n class TestCollectionSimpleStorage(CollectionTestCase):\n     hashed_file_path = hashed_file_path\n",
  "django__django-14500": "",
  "django__django-14539": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 23a1e0a..c426535 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -255,6 +255,18 @@ class TestUtilsHtml(SimpleTestCase):\n                 'Search for <a href=\"http://google.com/?q=\">google.com/?q=</a>!'\n             ),\n             ('foo@example.com', '<a href=\"mailto:foo@example.com\">foo@example.com</a>'),\n+            (\n+                'Search for google.com/?q=1&lt! and see.',\n+                'Search for <a href=\"http://google.com/?q=1%3C\">google.com/?q=1&lt</a>! and see.'\n+            ),\n+            (\n+                'Check this example.com/path/?name=John&amp;age=30.',\n+                'Check this <a href=\"http://example.com/path/?name=John&amp;age=30\">example.com/path/?name=John&amp;age=30</a>.'\n+            ),\n+            (\n+                'Visit https://secure-site.com/?param=value&gt;!',\n+                'Visit <a href=\"https://secure-site.com/?param=value%3E\">https://secure-site.com/?param=value&gt;</a>!'\n+            ),\n         )\n         for value, output in tests:\n             with self.subTest(value=value):\n",
  "django__django-14559": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex b579834..9414104 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -115,7 +115,37 @@ class BulkUpdateTests(TestCase):\n \n     pk_fields_error = 'bulk_update() cannot be used with primary key fields.'\n \n-    def test_update_primary_key(self):\n+    def test_bulk_update_return_value_empty(self):\n+        \"\"\"\n+        Test that bulk_update() returns 0 when no objects are updated.\n+        \"\"\"\n+        rows_updated = Note.objects.bulk_update([], ['note'])\n+        self.assertEqual(rows_updated, 0)\n+\n+    def test_bulk_update_return_value_large_batch(self):\n+        \"\"\"\n+        Test that bulk_update() returns the correct number of rows updated for a large batch.\n+        \"\"\"\n+        Note.objects.bulk_create([\n+            Note(note=str(i), misc=str(i))\n+            for i in range(0, 2000)\n+        ])\n+        notes = list(Note.objects.all())\n+        for note in notes:\n+            note.note = 'updated-note'\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 2000)\n+\n+    def test_bulk_update_return_value_with_duplicates(self):\n+        \"\"\"\n+        Test that bulk_update() correctly counts rows updated even with duplicates.\n+        \"\"\"\n+        note = Note.objects.create(note='test-note', misc='test')\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'])\n+        self.assertEqual(rows_updated, 1)\n+        # Duplicates in different batches.\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'], batch_size=1)\n+        self.assertEqual(rows_updated, 2)\n         with self.assertRaisesMessage(ValueError, self.pk_fields_error):\n             Note.objects.bulk_update([], ['id'])\n \n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..aeef4d3 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -315,8 +315,28 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertTrue(formset.is_valid())\n         self.assertEqual([form.cleaned_data for form in formset.forms], [{'votes': 100, 'choice': 'Calexico'}, {}, {}])\n-\n-    def test_formset_validate_max_flag(self):\n+    \n+    def test_formset_nonform_error_class(self):\n+        \"\"\"\n+        Test that nonform errors in formset have the 'nonform' CSS class.\n+        \"\"\"\n+        data = {\n+            'choices-TOTAL_FORMS': '3',\n+            'choices-INITIAL_FORMS': '0',\n+            'choices-MIN_NUM_FORMS': '0',\n+            'choices-MAX_NUM_FORMS': '0',\n+            'choices-0-choice': 'Drink A',\n+            'choices-1-choice': 'Drink A',  # repeated choice to trigger an error\n+            'choices-2-choice': 'Drink B',\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=3, validate_max=True)\n+        formset = ChoiceFormSet(data, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        non_form_errors = formset.non_form_errors()\n+        self.assertEqual(\n+            str(non_form_errors),\n+            '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>'\n+        )\n         \"\"\"\n         If validate_max is set and max_num is less than TOTAL_FORMS in the\n         data, a ValidationError is raised. MAX_NUM_FORMS in the data is\n",
  "django__django-14631": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex a48e4b6..7bf05f7 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -2129,7 +2129,38 @@ Password: <input type=\"password\" name=\"password\" required></li>\n         form = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n         self.assertEqual(form.changed_data, [])\n \n-    def test_help_text(self):\n+    def test_clean_fields_access_via_boundfield(self):\n+        \"\"\"\n+        Test that _clean_fields accesses values via BoundField.\n+        \"\"\"\n+        now = datetime.datetime(2006, 10, 25, 14, 30, 45)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now, disabled=False)\n+\n+        form = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n+        form.full_clean()  # This should trigger _clean_fields\n+        bf = form['dt']\n+        # Check that the initial value accessed via BoundField is consistent\n+        self.assertEqual(form.cleaned_data['dt'], bf.initial)\n+\n+    def test_changed_data_access_via_boundfield(self):\n+        \"\"\"\n+        Test that changed_data accesses values via BoundField and correctly identifies changes.\n+        \"\"\"\n+        now = datetime.datetime(2006, 10, 25, 14, 30, 45)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now, disabled=False)\n+\n+        form = DateTimeForm({'dt': '2006-10-25 14:30:46'})\n+        # This should flag as changed since the input timestamp is 1 second apart from the initial\n+        self.assertEqual(form.changed_data, ['dt'])\n+\n+        # Reset form with same initial value\n+        form_same = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n+        # This should not flag as changed\n+        self.assertEqual(form_same.changed_data, [])\n         # You can specify descriptive text for a field by using the 'help_text' argument)\n         class UserRegistration(Form):\n             username = CharField(max_length=10, help_text='e.g., user@example.com')\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..4ee0cc9 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -10,8 +10,35 @@ from .models import (\n     Relationship, SymmetricalFriendship,\n )\n \n+from django.db import models\n+from django.core.checks import Error\n \n class M2mThroughTests(TestCase):\n+    def test_through_fields_list_is_hashable(self):\n+        class Parent(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class ProxyParent(Parent):\n+            class Meta:\n+                proxy = True\n+\n+        class Child(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE)\n+            many_to_many_field = models.ManyToManyField(\n+                to=Parent,\n+                through=\"ManyToManyModel\",\n+                through_fields=['child', 'parent'],\n+                related_name=\"something\"\n+            )\n+\n+        class ManyToManyModel(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')\n+            child = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')\n+            second_child = models.ForeignKey(Child, on_delete=models.CASCADE, null=True, default=None)\n+\n+        # Check for errors in the model setup, should be no errors\n+        errors = Child.check()\n+        self.assertEqual(errors, [])\n     @classmethod\n     def setUpTestData(cls):\n         cls.bob = Person.objects.create(name='Bob')\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..4550e68 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,3 +1,4 @@\n+\n import json\n from contextlib import contextmanager\n \n@@ -8,7 +9,9 @@ from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n from django.core.exceptions import PermissionDenied\n from django.http import Http404\n-from django.test import RequestFactory, override_settings\n+from django.test import RequestFactory, override_settings, TestCase\n+from .models import Question  # Assuming there's a Question model in your test app\n+import datetime\n from django.urls import reverse, reverse_lazy\n \n from .admin import AnswerAdmin, QuestionAdmin\n",
  "django__django-14765": "",
  "django__django-14771": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 1875424..d95fae0 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -166,6 +166,15 @@ class TestIterModulesAndFiles(SimpleTestCase):\n                 )\n \n \n+import sys\n+from unittest import mock\n+import django\n+import tempfile\n+from django.utils import autoreload\n+from pathlib import Path\n+import types\n+from subprocess import CompletedProcess\n+\n class TestChildArguments(SimpleTestCase):\n     @mock.patch.dict(sys.modules, {'__main__': django.__main__})\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n@@ -195,7 +204,16 @@ class TestChildArguments(SimpleTestCase):\n         )\n \n     @mock.patch('__main__.__spec__', None)\n+    @mock.patch('sys._xoptions', {'utf8': True})\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions_utf8(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', __file__, 'runserver']\n+        )\n+\n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n         self.assertEqual(\n@@ -235,8 +253,17 @@ class TestChildArguments(SimpleTestCase):\n         with self.assertRaisesMessage(RuntimeError, msg):\n             autoreload.get_child_arguments()\n \n+    @mock.patch('sys._xoptions', {'utf8': True})\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_xoptions_utf8(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', __file__, 'runserver']\n+        )\n+\n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n+    @mock.patch('sys.warnoptions', [])\n     def test_module_no_spec(self):\n         module = types.ModuleType('test_module')\n         del module.__spec__\n",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..39ab109 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -199,6 +199,29 @@ class MethodDecoratorTests(SimpleTestCase):\n     \"\"\"\n     Tests for method_decorator\n     \"\"\"\n+    def test_wrapper_assignments(self):\n+        \"\"\"Test that @method_decorator preserves wrapper assignments.\"\"\"\n+        func_name = None\n+        func_module = None\n+\n+        def decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_name, func_module\n+                func_name = getattr(func, '__name__', None)\n+                func_module = getattr(func, '__module__', None)\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(decorator)\n+            def method(self):\n+                return 'tests'\n+\n+        Test().method()\n+        self.assertEqual(func_name, 'method')\n+        self.assertIsNotNone(func_module)\n+\n     def test_preserve_signature(self):\n         class Test:\n             @simple_dec_m\n",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..21badc3 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5131,8 +5131,19 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         )\n         # Related ForeignKey object not registered in admin.\n         self.assertContains(response, '<div class=\"readonly\">Chapter 1</div>', html=True)\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        \"\"\"\n+        Test that the readonly ForeignKey link defaults to /admin/ for the default admin site.\n+        This is a verification for the existing functionality.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('admin')\n \n-    def test_readonly_manytomany_backwards_ref(self):\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test that the readonly ForeignKey link uses the correct custom admin site name.\n+        This tests the issue described in the ticket to ensure the fix works.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('custom-admin')\n         \"\"\"\n         Regression test for #16433 - backwards references for related objects\n         broke if the related field is read-only due to the help_text attribute\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..350b8cc 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,10 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n+import json\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..3142d35 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -792,8 +792,39 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Pony.objects.count(), 2)\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n+    def test_rename_model_with_db_table_noop_foreign_key(self):\n+        app_label = 'test_rmwdbtn_fk'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Horse', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        Horse = project_state.apps.get_model(app_label, \"Horse\")\n+        Rider = project_state.apps.get_model(app_label, \"Rider\")\n+        horse = Horse.objects.create()\n+        rider = Rider.objects.create()\n+        horse.rider = rider\n+        horse.save()\n+        \n+        # Clone the state and perform the rename\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        # Ensure no queries occur during forward/backward operations\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n \n-    def test_rename_m2m_target_model(self):\n+        # Verify foreign key relation remains intact\n+        self.assertEqual(Horse.objects.get(pk=horse.pk).rider, rider)\n         app_label = \"test_rename_m2m_target_model\"\n         project_state = self.apply_operations(app_label, ProjectState(), operations=[\n             migrations.CreateModel(\"Rider\", fields=[\n",
  "django__django-15022": "",
  "django__django-15037": "",
  "django__django-15103": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex b862331..d98a2d4 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -152,6 +152,24 @@ class TestUtilsHtml(SimpleTestCase):\n                 self.check_output(escapejs, lazystr(value), output)\n \n     def test_json_script(self):\n+        # Test json_script without element_id.\n+        obj = {'key': 'value'}\n+        expected_output = '<script type=\"application/json\">{\"key\": \"value\"}</script>'\n+        self.assertHTMLEqual(json_script(obj), expected_output)\n+\n+        # Test json_script with empty dictionary without element_id.\n+        expected_output_empty = '<script type=\"application/json\">{}</script>'\n+        self.assertHTMLEqual(json_script({}), expected_output_empty)\n+\n+        # Test json_script with a string without element_id.\n+        string_input = \"Hello\"\n+        expected_output_string = '<script type=\"application/json\">\"Hello\"</script>'\n+        self.assertHTMLEqual(json_script(string_input), expected_output_string)\n+\n+        # Test json_script with special characters.\n+        special_chars_input = \"<script>alert('hello')</script>\"\n+        expected_output_special_chars = '<script type=\"application/json\">\"\\\\u003Cscript\\\\u003Ealert(\\'hello\\')\\\\u003C/script\\\\u003E\"</script>'\n+        self.assertHTMLEqual(json_script(special_chars_input), expected_output_special_chars)\n         tests = (\n             # \"<\", \">\" and \"&\" are quoted inside JSON strings\n             (('&<>', '<script id=\"test_id\" type=\"application/json\">\"\\\\u0026\\\\u003C\\\\u003E\"</script>')),\n@@ -276,4 +294,4 @@ class TestUtilsHtml(SimpleTestCase):\n         )\n         for value in tests:\n             with self.subTest(value=value):\n-                self.assertEqual(urlize(value), value)\n+                self.assertEqual(urlize(value), value)\n",
  "django__django-15104": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 04452fa..fd47e81 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2834,6 +2834,35 @@ class AutodetectorTests(TestCase):\n                     expected_number,\n                 )\n \n+from django.db import models\n+from django.db.migrations.state import ModelState, ProjectState\n+from django.test import TestCase\n+from django.db.migrations.autodetector import MigrationAutodetector\n+\n+class CustomFKFieldTestCase(TestCase):\n+    def test_custom_fk_field_hardcoded_reference(self):\n+        class HardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.HardcodedModel'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']\n+                return name, path, args, kwargs\n+\n+        before = ProjectState()\n+        before.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after = ProjectState()\n+        after.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after.add_model(ModelState('testapp', 'TestModel', [\n+            ('custom', HardcodedForeignKey(on_delete=models.CASCADE)),\n+        ]))\n+\n+        autodetector = MigrationAutodetector(before, after)\n+        changes = autodetector._detect_changes()\n+        self.assertIn('testapp', changes)\n+        self.assertEqual(len(changes['testapp']), 1)\n \n class MigrationSuggestNameTests(SimpleTestCase):\n     def test_no_operations(self):\n",
  "django__django-15127": "diff --git a/tests/messages_tests/base.py b/tests/messages_tests/base.py\nindex 85a7769..aaa45a6 100644\n--- a/tests/messages_tests/base.py\n+++ b/tests/messages_tests/base.py\n@@ -1,3 +1,4 @@\n+\n from django.contrib.messages import constants, get_level, set_level, utils\n from django.contrib.messages.api import MessageFailure\n from django.contrib.messages.constants import DEFAULT_LEVELS\n@@ -361,6 +362,37 @@ class BaseTests:\n         tags = [msg.tags for msg in storage]\n         self.assertEqual(tags, ['info', '', 'extra-tag debug', 'warning', 'error', 'success', 'info'])\n \n+    def test_non_overridden_level_tag(self):\n+        storage = self.get_storage()\n+        storage.level = 0\n+        add_level_messages(storage)\n+        self.assertIn('info', [msg.level_tag for msg in storage])\n+\n+    @override_settings_tags(MESSAGE_TAGS={\n+        constants.INFO: 'info',\n+        constants.DEBUG: 'dbg',\n+        constants.WARNING: 'warn',\n+    })\n+    def test_override_and_revert(self):\n+        storage = self.get_storage()\n+        storage.level = 0\n+        add_level_messages(storage)\n+        tags = [msg.level_tag for msg in storage]\n+        self.assertEqual(tags, ['info', 'dbg', 'warn', 'bad', 'success'])\n+\n+        # Ensure LEVEL_TAGS reverted after test\n+        self.assertEqual(base.LEVEL_TAGS[constants.INFO], 'info')\n+\n+    @override_settings_tags(MESSAGE_TAGS={constants.DEBUG: 'dbg'})\n+    @override_settings_tags(MESSAGE_TAGS={constants.WARNING: 'warn'})\n+    def test_multiple_override_settings(self):\n+        storage = self.get_storage()\n+        storage.level = 0\n+        add_level_messages(storage)\n+        tags = [msg.level_tag for msg in storage]\n+        self.assertEqual(tags, ['info', 'dbg', 'warn', 'bad', 'success'])\n+        self.assertEqual(tags, ['info', '', 'extra-tag debug', 'warning', 'error', 'success', 'info'])\n+\n     def test_level_tag(self):\n         storage = self.get_storage()\n         storage.level = 0\n",
  "django__django-15128": "diff --git a/tests/queries/models.py b/tests/queries/models.py\nindex a7bb7e8..1d879fa 100644\n--- a/tests/queries/models.py\n+++ b/tests/queries/models.py\n@@ -613,11 +613,11 @@ class OrderItem(models.Model):\n \n \n class BaseUser(models.Model):\n-    pass\n+    annotation = models.ForeignKey('Annotation', models.CASCADE, null=True, blank=True)\n \n \n class Task(models.Model):\n-    title = models.CharField(max_length=10)\n+    note = models.ForeignKey('Note', on_delete=models.CASCADE, null=True, blank=True)\n     owner = models.ForeignKey(BaseUser, models.CASCADE, related_name='owner')\n     creator = models.ForeignKey(BaseUser, models.CASCADE, related_name='creator')\n \n",
  "django__django-15161": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 5fdccc5..36043c6 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1775,7 +1775,20 @@ class ValueTests(TestCase):\n         self.assertEqual(len(kwargs), 1)\n         self.assertEqual(kwargs['output_field'].deconstruct(), CharField().deconstruct())\n \n-    def test_repr(self):\n+    def test_deconstruct_simplified_path(self):\n+        # Test that F() deconstructs to 'django.db.models.F'\n+        f_expr = F('test_field')\n+        path, args, kwargs = f_expr.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, ('test_field',))\n+        self.assertEqual(kwargs, {})\n+\n+        # Test that Value() deconstructs to 'django.db.models.Value'\n+        value_expr = Value('test_value')\n+        path, args, kwargs = value_expr.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Value')\n+        self.assertEqual(args, ('test_value',))\n+        self.assertEqual(kwargs, {})\n         tests = [\n             (None, 'Value(None)'),\n             ('str', \"Value('str')\"),\n",
  "django__django-15268": "",
  "django__django-15277": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 11f86ed..c702fd1 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1847,12 +1847,25 @@ class ValueTests(TestCase):\n                 expr = Value(value)\n                 self.assertIsInstance(expr.output_field, output_field_type)\n \n-    def test_resolve_output_field_failure(self):\n+    def test_output_field_validators_not_added_when_max_length_none(self):\n+        \"\"\"\n+        Test that CharField validators are not added when max_length is None.\n+        \"\"\"\n+        # Testing with a string value\n+        value = 'test'\n+        field = Value(value)._resolve_output_field()\n+        self.assertIsInstance(field, fields.CharField)\n+        # Check that no MaxLengthValidator is added\n+        max_length_validators = [v for v in field.validators if isinstance(v, validators.MaxLengthValidator)]\n+        self.assertEqual(len(max_length_validators), 0)\n         msg = 'Cannot resolve expression type, unknown output_field'\n         with self.assertRaisesMessage(FieldError, msg):\n             Value(object()).output_field\n \n \n+from django.core import validators\n+from django.db.models import fields\n+\n class ExistsTests(TestCase):\n     def test_optimizations(self):\n         with CaptureQueriesContext(connection) as context:\n",
  "django__django-15278": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex dd02aee..4775482 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -624,7 +624,25 @@ class SchemaTests(TransactionTestCase):\n         # Make sure the values were transformed correctly\n         self.assertEqual(Author.objects.extra(where=[\"thing = 1\"]).count(), 2)\n \n-    def test_add_field_binary(self):\n+    def test_add_field_o2o_nullable(self):\n+        \"\"\"\n+        Test adding a nullable OneToOneField to ensure SQLite handles it without crashing.\n+        \"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        \n+        # Define new nullable OneToOneField\n+        new_field = OneToOneField(Note, on_delete=CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+        \n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n+        \n+        columns = self.column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        # Check that the field is nullable\n+        self.assertTrue(columns['note_id'][1][6])\n         \"\"\"\n         Tests binary fields get a sane default (#22851)\n         \"\"\"\n",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..a07c8f5 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -19,6 +19,16 @@ class Nested:\n \n class BasicFieldTests(SimpleTestCase):\n \n+    def test_hash_immutability(self):\n+        \"\"\"Test that hash of a field remains immutable even after assignment to a model.\"\"\"\n+        field = models.CharField(max_length=200)\n+        initial_hash = hash(field)\n+\n+        class MyModel(models.Model):\n+            title = field\n+\n+        self.assertEqual(initial_hash, hash(field))\n+\n     def test_show_hidden_initial(self):\n         \"\"\"\n         Fields with choices respect show_hidden_initial as a kwarg to\n",
  "django__django-15368": "",
  "django__django-15380": "",
  "django__django-15382": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex bd890ac..80e785b 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1906,6 +1906,33 @@ class ExistsTests(TestCase):\n         self.assertNotIn('ORDER BY', captured_sql)\n \n \n+from django.db import models\n+from django.test import TestCase\n+from django.db.models import Exists, Q\n+\n+class FilterExistsSubqueryTests(TestCase):\n+    def test_negated_empty_exists_removes_where(self):\n+        manager = Manager.objects.create(name='test')\n+        qs = Manager.objects.filter(~Exists(Manager.objects.none()), name='test')\n+        self.assertSequenceEqual(qs, [manager])\n+\n+    def test_exists_with_non_empty_queryset(self):\n+        manager = Manager.objects.create(name='test')\n+        another_manager = Manager.objects.create(name='another')\n+        qs = Manager.objects.filter(Exists(Manager.objects.filter(pk=manager.pk)))\n+        self.assertSequenceEqual(qs, [manager])\n+\n+    def test_exists_with_empty_queryset(self):\n+        manager = Manager.objects.create(name='test')\n+        qs = Manager.objects.filter(Exists(Manager.objects.none()))\n+        self.assertSequenceEqual(qs, [])\n+\n+    def test_negated_exists_with_specific_model(self):\n+        manager = Manager.objects.create(name='test')\n+        another_manager = Manager.objects.create(name='another')\n+        qs = Manager.objects.filter(~Exists(Manager.objects.filter(pk=another_manager.pk)), pk=manager.pk)\n+        self.assertSequenceEqual(qs, [manager])\n+\n class FieldTransformTests(TestCase):\n \n     @classmethod\n",
  "django__django-15467": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex f5af59b..5c21e60 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -25,6 +25,12 @@ from django.db.models import (\n     UUIDField,\n )\n from django.test import SimpleTestCase, TestCase, override_settings\n+from django.contrib.admin import ModelAdmin\n+from django.contrib.admin.sites import site\n+from django.db.models import ForeignKey, CASCADE\n+from django.utils.translation import gettext_lazy as _\n+\n+from .models import Inventory\n from django.urls import reverse\n from django.utils import translation\n \n@@ -132,6 +138,18 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n             raw_id_fields=[\"main_band\"],\n         )\n \n+    def test_radio_fields_foreignkey_custom_empty_label(self):\n+        class MyModelAdmin(ModelAdmin):\n+            radio_fields = {\"parent\": admin.VERTICAL}\n+            def formfield_for_foreignkey(self, db_field, *args, **kwargs):\n+                if db_field.name == 'parent':\n+                    kwargs['empty_label'] = \"Custom empty label\"\n+                return super().formfield_for_foreignkey(db_field, *args, **kwargs)\n+\n+        ma = MyModelAdmin(Inventory, site)\n+        ff = ma.formfield_for_dbfield(Inventory._meta.get_field(\"parent\"), request=None)\n+        self.assertEqual(ff.empty_label, \"Custom empty label\")\n+\n     def test_radio_fields_ForeignKey(self):\n         ff = self.assertFormfield(\n             Event,\n",
  "django__django-15499": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 5df1b06..b24a36d 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -122,11 +122,101 @@ class OptimizerTests(SimpleTestCase):\n                     name=\"Foo\", options={\"verbose_name_plural\": \"Foozes\"}\n                 ),\n             ],\n+            # Test case to verify CreateModel + AlterModelManagers optimization\n+            [\n+                # Original operations: CreateModel followed by AlterModelManagers\n+                migrations.CreateModel(\"ExampleModel\", fields=[]),\n+                migrations.AlterModelManagers(\n+                    name=\"ExampleModel\",\n+                    managers=[\n+                        (\"default_manager\", models.Manager()),\n+                        (\"another_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                # Optimized operation: Single CreateModel with managers\n+                migrations.CreateModel(\n+                    \"ExampleModel\",\n+                    fields=[],\n+                    managers=[\n+                        (\"default_manager\", models.Manager()),\n+                        (\"another_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n+    def test_create_model_and_alter_managers_combination(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Bar\", fields=[]),\n+                migrations.AlterModelManagers(\n+                    name=\"Bar\",\n+                    managers=[\n+                        (\"custom_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    managers=[\n+                        (\"custom_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n             [\n                 migrations.CreateModel(\n                     \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n                 ),\n             ],\n+            # Test case to verify CreateModel + AlterModelManagers optimization\n+            [\n+                # Original operations: CreateModel followed by AlterModelManagers\n+                migrations.CreateModel(\"ExampleModel\", fields=[]),\n+                migrations.AlterModelManagers(\n+                    name=\"ExampleModel\",\n+                    managers=[\n+                        (\"default_manager\", models.Manager()),\n+                        (\"another_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                # Optimized operation: Single CreateModel with managers\n+                migrations.CreateModel(\n+                    \"ExampleModel\",\n+                    fields=[],\n+                    managers=[\n+                        (\"default_manager\", models.Manager()),\n+                        (\"another_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n+    def test_create_model_and_alter_managers_combination(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Bar\", fields=[]),\n+                migrations.AlterModelManagers(\n+                    name=\"Bar\",\n+                    managers=[\n+                        (\"custom_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    managers=[\n+                        (\"custom_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n         )\n \n     def test_create_model_and_remove_model_options(self):\n",
  "django__django-15525": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 3640e99..59f8094 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -791,6 +791,51 @@ class NaturalKeyFixtureTests(TestCase):\n         )\n \n \n+class NaturalKeyFixtureOnOtherDatabaseTests(TestCase):\n+    databases = {\"other\"}\n+\n+    def test_natural_key_dependencies(self):\n+        \"\"\"\n+        Natural keys with foreign keys in dependencies work in a multiple\n+        database setup.\n+        \"\"\"\n+        management.call_command(\n+            \"loaddata\",\n+            \"nk_with_foreign_key.json\",\n+            database=\"other\",\n+            verbosity=0,\n+        )\n+        obj = NaturalKeyWithFKDependency.objects.using(\"other\").get()\n+        self.assertEqual(obj.name, \"The Lord of the Rings\")\n+        self.assertEqual(obj.author.name, \"J.R.R. Tolkien\")\n+\n+    def test_load_data_on_default_database(self):\n+        \"\"\"\n+        Ensure that data loading works on the default database.\n+        \"\"\"\n+        management.call_command(\n+            \"loaddata\",\n+            \"nk_with_foreign_key.json\",\n+            database=\"default\",\n+            verbosity=0,\n+        )\n+        obj = NaturalKeyWithFKDependency.objects.get()\n+        self.assertEqual(obj.name, \"The Lord of the Rings\")\n+        self.assertEqual(obj.author.name, \"J.R.R. Tolkien\")\n+\n+    def test_missing_author_in_other_database(self):\n+        \"\"\"\n+        Ensure that loading data fails with a DoesNotExist error if the author\n+        is not present in the target database.\n+        \"\"\"\n+        with self.assertRaises(NaturalKeyWithFKDependency.DoesNotExist):\n+            management.call_command(\n+                \"loaddata\",\n+                \"nk_with_foreign_key.json\",\n+                database=\"other\",\n+                verbosity=0,\n+            )\n+\n class M2MNaturalKeyFixtureTests(TestCase):\n     \"\"\"Tests for ticket #14426.\"\"\"\n \n",
  "django__django-15561": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex b8137da..145b003 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -3960,8 +3960,19 @@ class SchemaTests(TransactionTestCase):\n             editor.alter_field(Book, old_field, new_field, strict=True)\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             editor.alter_field(Book, new_field, old_field, strict=True)\n-\n-    def test_add_textfield_unhashable_default(self):\n+    \n+    def test_alter_field_choices_noop_different_field_type(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Book)\n+        old_field = Book._meta.get_field(\"title\")\n+        new_field = TextField(\n+            choices=((\"Fiction\", \"Fiction\"), (\"Non-Fiction\", \"Non-Fiction\")),\n+        )\n+        new_field.set_attributes_from_name(\"title\")\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Book, old_field, new_field, strict=True)\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Book, new_field, old_field, strict=True)\n         # Create the table\n         with connection.schema_editor() as editor:\n             editor.create_model(Author)\n",
  "django__django-15569": "",
  "django__django-15572": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 188dca4..7a5b1b0 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -76,7 +76,39 @@ class TemplateReloadTests(SimpleTestCase):\n             },\n         )\n \n-    @mock.patch(\"django.template.loaders.base.Loader.reset\")\n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"DIRS\": [\"\"],\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            }\n+        ]\n+    )\n+    def test_template_dirs_ignore_empty_path(self):\n+        self.assertEqual(autoreload.get_template_directories(), set())\n+\n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"DIRS\": [\"/valid/path\", \"\"],\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            }\n+        ]\n+    )\n+    def test_template_dirs_ignore_empty_path_with_valid_dirs(self):\n+        expected_dirs = {Path(\"/valid/path\")}\n+        self.assertEqual(autoreload.get_template_directories(), expected_dirs)\n+\n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"DIRS\": [SafeString(\"\")],\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            }\n+        ]\n+    )\n+    def test_template_dirs_ignore_safe_string_empty_path(self):\n+        self.assertEqual(autoreload.get_template_directories(), set())\n     def test_reset_all_loaders(self, mock_reset):\n         autoreload.reset_loaders()\n         self.assertEqual(mock_reset.call_count, 2)\n",
  "django__django-15731": "diff --git a/tests/basic/tests.py b/tests/basic/tests.py\nindex 902f114..156e4f5 100644\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -1,3 +1,4 @@\n+\n import threading\n from datetime import datetime, timedelta\n from unittest import mock\n@@ -736,8 +737,36 @@ class ManagerTest(SimpleTestCase):\n             sorted(self.QUERYSET_PROXY_METHODS),\n         )\n \n+class ManagerMethodSignatureTests(TestCase):\n+    def test_manager_method_signature_bulk_create(self):\n+        from django.db import models\n+\n+        class Article(models.Model):\n+            title = models.CharField(max_length=100)\n+\n+        expected_signature = \"(objs, batch_size=None, ignore_conflicts=False, update_conflicts=False, update_fields=None, unique_fields=None)\"\n+        actual_signature = str(inspect.signature(Article.objects.bulk_create))\n+        self.assertEqual(actual_signature, expected_signature)\n+\n+    def test_manager_method_signature_get(self):\n+        from django.db import models\n+\n+        class Article(models.Model):\n+            title = models.CharField(max_length=100)\n+\n+        expected_signature = \"(args, **kwargs)\"\n+        actual_signature = str(inspect.signature(Article.objects.get))\n+        self.assertEqual(actual_signature, expected_signature)\n+\n+    def test_manager_method_signature_count(self):\n+        from django.db import models\n+\n+        class Article(models.Model):\n+            title = models.CharField(max_length=100)\n \n-class SelectOnSaveTests(TestCase):\n+        expected_signature = \"()\"\n+        actual_signature = str(inspect.signature(Article.objects.count))\n+        self.assertEqual(actual_signature, expected_signature)\n     def test_select_on_save(self):\n         a1 = Article.objects.create(pub_date=datetime.now())\n         with self.assertNumQueries(1):\n",
  "django__django-15741": "diff --git a/tests/i18n/tests.py b/tests/i18n/tests.py\nindex 1f80a63..ca45cb5 100644\n--- a/tests/i18n/tests.py\n+++ b/tests/i18n/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import decimal\n import gettext as gettext_module\n@@ -9,6 +10,8 @@ from contextlib import contextmanager\n from importlib import import_module\n from pathlib import Path\n from unittest import mock\n+from django.utils.translation import gettext_lazy\n+from django.utils.formats import get_format\n \n from asgiref.local import Local\n \n@@ -1514,6 +1517,20 @@ class FormattingTests(SimpleTestCase):\n             list(iter_format_modules(\"en-gb\")), [en_gb_format_mod, en_format_mod]\n         )\n \n+    def test_get_format_with_lazy_string(self):\n+        \"\"\"\n+        Test get_format with a lazy string to ensure no TypeError is raised.\n+        \"\"\"\n+        lazy_format_name = gettext_lazy(\"DATE_FORMAT\")\n+        self.assertEqual(get_format(lazy_format_name), \"N j, Y\")\n+\n+    def test_get_format_with_lazy_string_decimal(self):\n+        \"\"\"\n+        Test get_format with a lazy string for decimal separator.\n+        \"\"\"\n+        lazy_format_name = gettext_lazy(\"DECIMAL_SEPARATOR\")\n+        self.assertEqual(get_format(lazy_format_name, lang='en'), \".\")\n+\n     def test_get_format_modules_lang(self):\n         with translation.override(\"de\", deactivate=True):\n             self.assertEqual(\".\", get_format(\"DECIMAL_SEPARATOR\", lang=\"en\"))\n@@ -1525,6 +1542,20 @@ class FormattingTests(SimpleTestCase):\n         context = Context(\n             {\"int\": 1455, \"float\": 3.14, \"date\": datetime.date(2016, 12, 31)}\n         )\n+\n+    def test_get_format_with_lazy_string(self):\n+        \"\"\"\n+        Test get_format with a lazy string to ensure no TypeError is raised.\n+        \"\"\"\n+        lazy_format_name = gettext_lazy(\"DATE_FORMAT\")\n+        self.assertEqual(get_format(lazy_format_name), \"N j, Y\")\n+\n+    def test_get_format_with_lazy_string_decimal(self):\n+        \"\"\"\n+        Test get_format with a lazy string for decimal separator.\n+        \"\"\"\n+        lazy_format_name = gettext_lazy(\"DECIMAL_SEPARATOR\")\n+        self.assertEqual(get_format(lazy_format_name, lang='en'), \".\")\n         template1 = Template(\n             \"{% load l10n %}{% localize %}\"\n             \"{{ int }}/{{ float }}/{{ date }}{% endlocalize %}; \"\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..a93cf73 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -398,6 +398,33 @@ class ProxyModelTests(TestCase):\n     def test_eq(self):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n+    def test_select_related_only_on_proxy_model(self):\n+        # Set up the models as described in the issue\n+        class CustomModel(models.Model):\n+            name = models.CharField(max_length=16)\n+\n+        class ProxyCustomModel(CustomModel):\n+            class Meta:\n+                proxy = True\n+\n+        class AnotherModel(models.Model):\n+            custom = models.ForeignKey(\n+                ProxyCustomModel,\n+                on_delete=models.SET_NULL,\n+                null=True,\n+                blank=True,\n+            )\n+\n+        # Create test data\n+        custom_model_instance = ProxyCustomModel.objects.create(name=\"Test Name\")\n+        AnotherModel.objects.create(custom=custom_model_instance)\n+\n+        # Test the query that was causing the issue\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        objs = list(qs)\n+        self.assertEqual(len(objs), 1)\n+        self.assertEqual(objs[0].custom.name, \"Test Name\")\n+\n \n @override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n class ProxyModelAdminTests(TestCase):\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..0fb89cc 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -151,12 +151,40 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ),\n         )\n \n+    def test_dbshell_parameters_order(self):\n+        # Test to ensure that additional parameters are passed before the dbname\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n+        )\n+\n+    def test_dbshell_no_parameters(self):\n+        # Test to ensure dbname is correctly passed without additional parameters\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, []),\n+            ([\"psql\", \"dbname\"], None),\n+        )\n+\n     def test_parameters(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n+    def test_dbshell_parameters_order(self):\n+        # Test to ensure that additional parameters are passed before the dbname\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n+        )\n+\n+    def test_dbshell_no_parameters(self):\n+        # Test to ensure dbname is correctly passed without additional parameters\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, []),\n+            ([\"psql\", \"dbname\"], None),\n+        )\n+\n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n",
  "django__django-15863": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 08f08e1..7c24b45 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -74,6 +74,28 @@ class FunctionTests(SimpleTestCase):\n         self.assertEqual(floatformat(1.5e-15, -20), \"0.00000000000000150000\")\n         self.assertEqual(floatformat(1.00000000000000015, 16), \"1.0000000000000002\")\n \n+    def test_decimal_precision(self):\n+        # Test case to ensure Decimal precision is maintained\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.12345678901234567890\"), 20),\n+            \"42.12345678901234567890\"\n+        )\n+\n+        self.assertEqual(\n+            floatformat(Decimal(\"123456.123456789012345678901\"), 21),\n+            \"123456.123456789012345678901\"\n+        )\n+\n+        self.assertEqual(\n+            floatformat(Decimal(\"0.000000000000000000123456789\"), 27),\n+            \"0.000000000000000000123456789\"\n+        )\n+\n+        self.assertEqual(\n+            floatformat(Decimal(\"-42.12345678901234567890\"), 20),\n+            \"-42.12345678901234567890\"\n+        )\n+\n     def test_force_grouping(self):\n         with translation.override(\"en\"):\n             self.assertEqual(floatformat(10000, \"g\"), \"10,000\")\n",
  "django__django-15930": "diff --git a/tests/expressions_case/tests.py b/tests/expressions_case/tests.py\nindex 696f4d0..c272846 100644\n--- a/tests/expressions_case/tests.py\n+++ b/tests/expressions_case/tests.py\n@@ -405,6 +405,42 @@ class CaseExpressionTests(TestCase):\n             [1, 4, 3, 3, 3, 2, 2],\n         )\n \n+    def test_annotate_with_full_when(self):\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+            )\n+        )\n+        # Verify all objects are annotated as \"selected\"\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n+\n+    def test_annotate_with_full_when_integer_field(self):\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(integer__in=[]), then=Value(\"positive\")),\n+                default=Value(\"non-positive\"),\n+            )\n+        )\n+        # Verify all objects are annotated as \"positive\"\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        self.assertTrue(all(obj.selected == \"positive\" for obj in objects))\n+\n+    def test_annotate_with_negated_empty_q(self):\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]) & Q(integer__gt=0), then=Value(\"positive\")),\n+                default=Value(\"non-positive\"),\n+            )\n+        )\n+        # Verify all objects with integer > 0 are annotated as \"positive\"\n+        self.assertTrue(all(\n+            (obj.integer > 0 and obj.selected == \"positive\") or\n+            (obj.integer <= 0 and obj.selected == \"non-positive\")\n+            for obj in objects\n+        ))\n+\n     def test_annotate_with_empty_when(self):\n         objects = CaseTestModel.objects.annotate(\n             selected=Case(\n@@ -412,6 +448,42 @@ class CaseExpressionTests(TestCase):\n                 default=Value(\"not selected\"),\n             )\n         )\n+\n+    def test_annotate_with_full_when(self):\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+            )\n+        )\n+        # Verify all objects are annotated as \"selected\"\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n+\n+    def test_annotate_with_full_when_integer_field(self):\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(integer__in=[]), then=Value(\"positive\")),\n+                default=Value(\"non-positive\"),\n+            )\n+        )\n+        # Verify all objects are annotated as \"positive\"\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        self.assertTrue(all(obj.selected == \"positive\" for obj in objects))\n+\n+    def test_annotate_with_negated_empty_q(self):\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]) & Q(integer__gt=0), then=Value(\"positive\")),\n+                default=Value(\"non-positive\"),\n+            )\n+        )\n+        # Verify all objects with integer > 0 are annotated as \"positive\"\n+        self.assertTrue(all(\n+            (obj.integer > 0 and obj.selected == \"positive\") or\n+            (obj.integer <= 0 and obj.selected == \"non-positive\")\n+            for obj in objects\n+        ))\n         self.assertEqual(len(objects), CaseTestModel.objects.count())\n         self.assertTrue(all(obj.selected == \"not selected\" for obj in objects))\n \n",
  "django__django-15987": "",
  "django__django-16032": "",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..c6202be 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2416,7 +2416,7 @@ class CombinedExpressionTests(SimpleTestCase):\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV, Combinable.MOD]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..f0b559c 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib import admin\n@@ -21,7 +22,10 @@ from django.db.models import F, Field, IntegerField\n from django.db.models.functions import Upper\n from django.db.models.lookups import Contains, Exact\n from django.template import Context, Template, TemplateSyntaxError\n-from django.test import TestCase, override_settings\n+from unittest import mock\n+from django.db import DatabaseError\n+from django.test import TestCase, override_settings, skipUnlessDBFeature\n+from django.urls import reverse\n from django.test.client import RequestFactory\n from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup\n from django.urls import reverse\n",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..cf88ca3 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2400,6 +2400,30 @@ class MakeMigrationsTests(MigrationTestBase):\n         ):\n             call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n \n+    def test_makemigrations_check_dry_run(self):\n+        \"\"\"\n+        makemigrations --check --dry-run should exit with a non-zero status\n+        when there are changes to an app requiring migrations, and no files\n+        should be written.\n+        \"\"\"\n+        with self.temporary_migration_module() as tmpdir:\n+            with self.assertRaises(SystemExit):\n+                call_command(\"makemigrations\", \"--check\", \"--dry-run\", \"migrations\", verbosity=0)\n+            self.assertFalse(os.path.exists(tmpdir))\n+\n+    def test_makemigrations_check_no_changes(self):\n+        \"\"\"\n+        makemigrations --check should exit with a zero status when there are\n+        no changes to an app requiring migrations.\n+        \"\"\"\n+        with self.temporary_migration_module(\n+            module=\"migrations.test_migrations_no_changes\"\n+        ):\n+            try:\n+                call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+            except SystemExit as e:\n+                self.fail(f\"makemigrations --check exited with a non-zero status: {e}\")\n+\n     def test_makemigrations_migration_path_output(self):\n         \"\"\"\n         makemigrations should print the relative paths to the migrations unless\n",
  "django__django-16136": "diff --git a/tests/async/tests.py b/tests/async/tests.py\nindex 72e103e..5d8de09 100644\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -1,3 +1,4 @@\n+\n import asyncio\n import os\n from unittest import mock\n@@ -6,7 +7,9 @@ from asgiref.sync import async_to_sync\n \n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n-from django.http import HttpResponse\n+from django.http import HttpResponse, HttpResponseNotAllowed\n+import asyncio\n+from django.test import RequestFactory\n from django.test import SimpleTestCase\n from django.utils.asyncio import async_unsafe\n from django.views.generic.base import View\n@@ -119,7 +122,24 @@ class ViewTests(SimpleTestCase):\n \n                 self.assertIsInstance(response, HttpResponse)\n \n-    def test_base_view_class_is_sync(self):\n+    def test_http_method_not_allowed_for_async_post(self):\n+        \"\"\"\n+        Test that HttpResponseNotAllowed is correctly returned and used\n+        in a synchronous context when an async view has no matching method.\n+        \"\"\"\n+        class AsyncPostOnlyView(View):\n+            async def post(self, request):\n+                return HttpResponse(\"ok\")\n+\n+        view = AsyncPostOnlyView.as_view()\n+        request_factory = RequestFactory()\n+        request = request_factory.get('/demo')\n+\n+        # Call the view with a GET request, which should not be allowed\n+        response = async_to_sync(view)(request)\n+\n+        # Ensure the response is an HttpResponseNotAllowed\n+        self.assertIsInstance(response, HttpResponseNotAllowed)\n         \"\"\"\n         View and by extension any subclasses that don't define handlers are\n         sync.\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..eb84820 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,5 +1,8 @@\n+\n import datetime\n import re\n+import urllib.parse\n+from django.urls import reverse\n from unittest import mock\n \n from django.contrib.auth.forms import (\n@@ -881,8 +884,25 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         form = UserChangeForm(instance=user, data=post_data)\n \n         self.assertTrue(form.is_valid())\n-        # original hashed password contains $\n-        self.assertIn(\"$\", form.cleaned_data[\"password\"])\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n \n     def test_bug_19349_bound_password_field(self):\n         user = User.objects.get(username=\"testclient\")\n",
  "django__django-16145": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex 04d2f0e..495b633 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1600,6 +1600,13 @@ class ManageRunserver(SimpleTestCase):\n             \"2001:0db8:1234:5678::9\", \"7000\", ipv6=True, raw_ipv6=True\n         )\n \n+    def test_runner_zero_ip_with_default_port(self):\n+        call_command(self.cmd, addrport=\"0\", use_reloader=False, skip_checks=True, stdout=self.output)\n+        self.assertIn(\n+            \"Starting development server at http://0.0.0.0:8000/\",\n+            self.output.getvalue(),\n+        )\n+\n     def test_runner_hostname(self):\n         call_command(self.cmd, addrport=\"localhost:8000\")\n         self.assertServerSettings(\"localhost\", \"8000\")\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..5ac3789 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -507,8 +507,45 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n+    def test_non_callable_lastmod_no_items(self):\n+        # Check sitemap where lastmod is not callable and items list is empty\n+        class NonCallableLastmodNoItemsSitemap(Sitemap):\n+            location = \"/location/\"\n+            lastmod = None  # Non-callable attribute\n \n-# RemovedInDjango50Warning\n+            def items(self):\n+                return []\n+\n+        sitemap_registry = {\"non-callable-lastmod\": NonCallableLastmodNoItemsSitemap}\n+        index_response = self.client.get(\"/non-callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", index_response)\n+        expected_content_index = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/simple/sitemap-non-callable-lastmod.xml</loc></sitemap>\n+        </sitemapindex>\n+        \"\"\"\n+        self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n+\n+    def test_callable_lastmod_none_items(self):\n+        # Test sitemap where items() returns None\n+        class CallableLastmodNoneItemsSitemap(Sitemap):\n+            location = \"/location/\"\n+\n+            def items(self):\n+                return None  # Return None as items\n+\n+            def lastmod(self, obj):\n+                return datetime.now()\n+\n+        sitemap_registry = {\"callable-lastmod-none\": CallableLastmodNoneItemsSitemap}\n+        index_response = self.client.get(\"/callable-lastmod-none/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", index_response)\n+        expected_content_index = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/simple/sitemap-callable-lastmod-none.xml</loc></sitemap>\n+        </sitemapindex>\n+        \"\"\"\n+        self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n class DeprecatedTests(SitemapTestsBase):\n     @override_settings(\n         TEMPLATES=[\n",
  "django__django-16315": "diff --git a/tests/bulk_create/models.py b/tests/bulk_create/models.py\nindex c5f5c07..2b5dcf9 100644\n--- a/tests/bulk_create/models.py\n+++ b/tests/bulk_create/models.py\n@@ -59,6 +59,11 @@ class Pizzeria(Restaurant):\n     pass\n \n \n+class FieldsWithDbColumns(models.Model):\n+    rank = models.IntegerField(unique=True, db_column=\"rAnK\")\n+    name = models.CharField(max_length=15, null=True, db_column=\"oTheRNaMe\")\n+\n+\n class State(models.Model):\n     two_letter_code = models.CharField(max_length=2, primary_key=True)\n \n@@ -79,6 +84,11 @@ class NoFields(models.Model):\n     pass\n \n \n+class FieldsWithDbColumns(models.Model):\n+    rank = models.IntegerField(unique=True, db_column=\"rAnK\")\n+    name = models.CharField(max_length=15, null=True, db_column=\"oTheRNaMe\")\n+\n+\n class SmallAutoFieldModel(models.Model):\n     id = models.SmallAutoField(primary_key=True)\n \n",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..0f65349 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,62 @@\n+\n+class CustomUserCreationFormTest(TestCase):\n+    def test_custom_form_saves_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization = Organization.objects.create(name=\"organization 1\")\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertTrue(form.is_valid())\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization])\n+\n+    def test_custom_form_saves_multiple_many_to_many_fields(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization1 = Organization.objects.create(name=\"organization 1\")\n+        organization2 = Organization.objects.create(name=\"organization 2\")\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization1.pk), str(organization2.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertTrue(form.is_valid())\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(\n+            user.orgs.all().order_by('name'), \n+            [organization1, organization2]\n+        )\n+\n+    def test_custom_form_invalid_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [\"nonexistent_org\"],  # Invalid pk\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertFalse(form.is_valid())\n+\n import datetime\n import re\n import urllib.parse\n@@ -34,6 +93,7 @@ from .models.custom_user import (\n     ExtensionUser,\n )\n from .models.with_custom_email_field import CustomEmailField\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n from .models.with_integer_username import IntegerUsernameUser\n from .settings import AUTH_TEMPLATES\n \n",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..85454d3 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.test import TestCase\n@@ -160,7 +161,29 @@ class TimesinceTests(TestCase):\n         self.assertEqual(timesince(t + self.oneday, now), \"0\\xa0minutes\")\n         self.assertEqual(timeuntil(t - self.oneday, now), \"0\\xa0minutes\")\n \n-    def test_naive_datetime_with_tzinfo_attribute(self):\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_long_interval_with_tz(self):\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=31)\n+        d_aware = timezone.make_aware(d, timezone.get_default_timezone())\n+        self.assertEqual(timesince(d_aware), \"1\\xa0month\")\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_longer_interval_with_tz(self):\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=62)\n+        d_aware = timezone.make_aware(d, timezone.get_default_timezone())\n+        self.assertEqual(timesince(d_aware), \"2\\xa0months\")\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_past_date_with_timezone_aware_and_naive(self):\n+        now = timezone.now()\n+        d_aware = timezone.make_aware(self.t, timezone.get_default_timezone())\n+        with self.assertRaises(TypeError):\n+            timesince(self.t, d_aware)\n         class naive(datetime.tzinfo):\n             def utcoffset(self, dt):\n                 return None\n",
  "django__django-16454": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 8d0729b..797518d 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -475,7 +475,41 @@ class UtilsTests(SimpleTestCase):\n         with self.assertRaisesMessage(CommandError, msg):\n             popen_wrapper([\"a_42_command_that_doesnt_exist_42\"])\n \n-    def test_get_random_secret_key(self):\n+    def test_subparser_missing_argument(self):\n+        class CommandWithSubparser(BaseCommand):\n+            def add_arguments(self, parser):\n+                subparsers = parser.add_subparsers(required=True)\n+                create = subparsers.add_parser(\"create\")\n+                create.add_argument(\"name\")\n+\n+            def handle(self, *args, **options):\n+                pass\n+\n+        command_instance = CommandWithSubparser()\n+        parser = CommandParser(prog='manage.py')\n+        command_instance.add_arguments(parser)\n+\n+        with self.assertRaises(CommandError) as cm:\n+            parser.parse_args(['create'])\n+        self.assertIn(\"manage.py create: error: the following arguments are required: name\", str(cm.exception))\n+\n+    def test_subparser_invalid_argument(self):\n+        class CommandWithSubparser(BaseCommand):\n+            def add_arguments(self, parser):\n+                subparsers = parser.add_subparsers(required=True)\n+                create = subparsers.add_parser(\"create\")\n+                create.add_argument(\"age\", type=int)\n+\n+            def handle(self, *args, **options):\n+                pass\n+\n+        command_instance = CommandWithSubparser()\n+        parser = CommandParser(prog='manage.py')\n+        command_instance.add_arguments(parser)\n+\n+        with self.assertRaises(CommandError) as cm:\n+            parser.parse_args(['create', 'not_an_int'])\n+        self.assertIn(\"manage.py create: error: argument age: invalid int value: 'not_an_int'\", str(cm.exception))\n         key = get_random_secret_key()\n         self.assertEqual(len(key), 50)\n         for char in key:\n",
  "django__django-16485": "",
  "django__django-16493": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex 20567e7..04c88bc 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -1018,6 +1018,16 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         storage = kwargs[\"storage\"]\n         self.assertIs(storage, callable_storage)\n \n+    def test_deconstruction_callable_returning_default_storage(self):\n+        \"\"\"\n+        A callable that returns default_storage should be included in the\n+        kwargs during deconstruction.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"storage_callable_default\").deconstruct()\n+        storage = kwargs[\"storage\"]\n+        self.assertIs(storage, callable_default_storage)\n+\n \n # Tests for a race condition on file saving (#4948).\n # This is written in such a way that it'll always pass on platforms\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..68f7c02 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n@@ -6,6 +7,8 @@ from django.contrib.admin.templatetags.admin_modify import submit_row\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n from django.urls import reverse\n \n from .admin import ArticleAdmin, site\n@@ -54,7 +57,41 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n                     template_context[\"show_save_and_add_another\"], expected_flag\n                 )\n \n-    def test_override_change_form_template_tags(self):\n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        \"\"\"\n+        Test that 'show_save_as_new' is False when user lacks add permission,\n+        and True when user has both add and change permissions.\n+        \"\"\"\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n         \"\"\"\n         admin_modify template tags follow the standard search pattern\n         admin/app_label/model/template.html.\n",
  "django__django-16560": "",
  "django__django-16569": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 55da562..b27efa5 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1476,6 +1476,19 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertNotIn(\"DELETE\", formset.forms[1].fields)\n \n         formset = ChoiceFormFormset(initial=[{\"choice\": \"Zero\", \"votes\": \"1\"}])\n+\n+        # New test case to verify the issue with add_fields when index is None\n+        class MyForm(forms.Form):\n+            my_field = forms.CharField()\n+\n+        MyFormSet = forms.formset_factory(\n+            form=MyForm,\n+            can_delete=True,\n+            can_delete_extra=False,\n+        )\n+        \n+        formset = MyFormSet(initial=None)\n+        self.assertNotIn(\"DELETE\", formset.empty_form.fields)\n         self.assertEqual(len(formset), 3)\n         self.assertIn(\"DELETE\", formset.forms[0].fields)\n         self.assertNotIn(\"DELETE\", formset.forms[1].fields)\n",
  "django__django-16595": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3979e76..fafb037 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -43,6 +43,55 @@ class OptimizerTests(SimpleTestCase):\n     def assertDoesNotOptimize(self, operations, **kwargs):\n         self.assertOptimizesTo(operations, operations, **kwargs)\n \n+    def test_alter_alter_field(self):\n+        # Original test case from the patch\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AlterField(\"Foo\", \"name\", models.IntegerField()),\n+                migrations.AlterField(\"Foo\", \"name\", models.IntegerField(help_text=\"help\")),\n+            ],\n+            [\n+                migrations.AlterField(\"Foo\", \"name\", models.IntegerField(help_text=\"help\")),\n+            ],\n+        )\n+\n+    def test_reduce_multiple_alterfields(self):\n+        # New test case to check multiple AlterFields collapsing\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AlterField(\"Foo\", \"name\", models.IntegerField()),\n+                migrations.AlterField(\"Foo\", \"name\", models.IntegerField(help_text=\"help\")),\n+                migrations.AlterField(\"Foo\", \"name\", models.IntegerField(help_text=\"help\", default=0)),\n+            ],\n+            [\n+                migrations.AlterField(\"Foo\", \"name\", models.IntegerField(help_text=\"help\", default=0)),\n+            ],\n+        )\n+\n+    def test_alterfield_does_not_reduce_different_fields(self):\n+        # Test case where AlterFields have different fields and should not reduce\n+        self.assertDoesNotOptimize(\n+            [\n+                migrations.AlterField(\"Foo\", \"name\", models.IntegerField()),\n+                migrations.AlterField(\"Foo\", \"name\", models.CharField(max_length=255)),\n+            ]\n+        )\n+\n+    def test_alterfield_with_non_elidable_migration(self):\n+        # Test case where AlterFields are separated by a non-elidable migration\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AlterField(\"Foo\", \"name\", models.IntegerField()),\n+                migrations.RunPython(noop),  # Simulate non-elidable migration\n+                migrations.AlterField(\"Foo\", \"name\", models.IntegerField(help_text=\"help\")),\n+            ],\n+            [\n+                migrations.AlterField(\"Foo\", \"name\", models.IntegerField()),\n+                migrations.RunPython(noop),\n+                migrations.AlterField(\"Foo\", \"name\", models.IntegerField(help_text=\"help\")),\n+            ],\n+        )\n+\n     def test_none_app_label(self):\n         optimizer = MigrationOptimizer()\n         with self.assertRaisesMessage(TypeError, \"app_label must be a str\"):\n",
  "django__django-16612": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 9120571..fe4229e 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -8481,8 +8481,8 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             fetch_redirect_response=False,\n         )\n \n-    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME=\"/prefix/\")\n-    def test_missing_slash_append_slash_true_force_script_name(self):\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_string(self):\n         superuser = User.objects.create_user(\n             username=\"staff\",\n             password=\"secret\",\n@@ -8491,10 +8491,63 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         )\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin:admin_views_article_changelist\")\n-        response = self.client.get(known_url[:-1])\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n         self.assertRedirects(\n             response,\n-            \"/prefix\" + known_url,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article\"\n+            \"%3Fid%3D1\",\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_without_final_catch_all_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin10:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n             status_code=301,\n             fetch_redirect_response=False,\n         )\n",
  "django__django-16642": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 499356e..87d2352 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -256,6 +256,10 @@ class FileResponseTests(SimpleTestCase):\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n         )\n+        test_tuples += (\n+            (\".tar.br\", \"application/x-brotli\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n+        )\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n                 with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n",
  "django__django-16661": "diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py\nindex 8cb88da..b6ad869 100644\n--- a/tests/modeladmin/tests.py\n+++ b/tests/modeladmin/tests.py\n@@ -154,6 +154,29 @@ class ModelAdminTests(TestCase):\n             ma.lookup_allowed(\"employee__department__code\", \"test_value\"), True\n         )\n \n+    @isolate_apps('modeladmin')\n+    def test_lookup_allowed_foreign_primary_additional(self):\n+        class Country(models.Model):\n+            name = models.CharField(max_length=256)\n+        class Place(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+        class Restaurant(models.Model):\n+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)\n+        class Waiter(models.Model):\n+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n+        class WaiterAdmin(ModelAdmin):\n+            list_filter = [\n+                'restaurant__place__country',\n+                'restaurant__place__country__name',\n+            ]\n+        ma = WaiterAdmin(Waiter, self.site)\n+        # Test with another lookup variation\n+        self.assertIs(ma.lookup_allowed('restaurant__place__country__name__iexact', 'test_value'), True)\n+        # Test with a non-existent field lookup to ensure it's disallowed\n+        self.assertIs(ma.lookup_allowed('restaurant__place__country__nonexistent', 'test_value'), False)\n+        # Test without specifying a value\n+        self.assertIs(ma.lookup_allowed('restaurant__place__country', None), True)\n+\n     def test_field_arguments(self):\n         # If fields is specified, fieldsets_add and fieldsets_change should\n         # just stick the fields into a formsets structure and return it.\n",
  "django__django-16662": "",
  "django__django-16801": "diff --git a/tests/model_fields/test_imagefield.py b/tests/model_fields/test_imagefield.py\nindex 9bf7f7d..fc7015a 100644\n--- a/tests/model_fields/test_imagefield.py\n+++ b/tests/model_fields/test_imagefield.py\n@@ -337,6 +337,21 @@ class ImageFieldOneDimensionTests(ImageFieldTwoDimensionsTests):\n \n     PersonModel = PersonWithHeight\n \n+    def test_post_init_not_connected(self):\n+        person_model_id = id(self.PersonModel)\n+        self.assertNotIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id), *_ in signals.post_init.receivers],\n+        )\n+\n+    @skipIf(Image is None, \"Pillow is required to test ImageField\")\n+    def test_post_init_connected_with_dimensions(self):\n+        person_with_dimensions_id = id(PersonWithHeight)\n+        self.assertIn(\n+            person_with_dimensions_id,\n+            [sender_id for (_, sender_id), *_ in signals.post_init.receivers],\n+        )\n+\n \n @skipIf(Image is None, \"Pillow is required to test ImageField\")\n class ImageFieldDimensionsFirstTests(ImageFieldTwoDimensionsTests):\n",
  "django__django-16819": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex ac93153..22b82f2 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -1157,4 +1157,41 @@ class OptimizerTests(SimpleTestCase):\n                     \"Pony\", new_name=\"new_name\", old_fields=(\"weight\", \"pink\")\n                 ),\n             ]\n-        )\n+        )\n+\n+        # Additional Test Cases for AddIndex/RemoveIndex Optimization\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(fields=[\"speed\"], name=\"idx_pony_speed\"),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_speed\"),\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(fields=[\"speed\"], name=\"idx_pony_speed\"),\n+                ),\n+            ],\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(fields=[\"speed\"], name=\"idx_pony_speed\"),\n+                ),\n+            ],\n+        )\n+\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(fields=[\"height\"], name=\"idx_pony_height\"),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_height\"),\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(fields=[\"height\", \"age\"], name=\"idx_pony_height_age\"),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_height_age\"),\n+            ],\n+            [],\n+        )\n",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..b79d98f 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -798,7 +798,7 @@ class SystemChecksTestCase(SimpleTestCase):\n         errors = SongAdmin(Song, AdminSite()).check()\n         expected = [\n             checks.Error(\n-                \"The value of 'readonly_fields[1]' is not a callable, an attribute \"\n+                \"The value of 'readonly_fields[1]' refers to 'nonexistent', which is not a callable, an attribute \"\n                 \"of 'SongAdmin', or an attribute of 'admin_checks.Song'.\",\n                 obj=SongAdmin,\n                 id=\"admin.E035\",\n@@ -814,7 +814,7 @@ class SystemChecksTestCase(SimpleTestCase):\n         errors = CityInline(State, AdminSite()).check()\n         expected = [\n             checks.Error(\n-                \"The value of 'readonly_fields[0]' is not a callable, an attribute \"\n+                \"The value of 'readonly_fields[0]' refers to 'i_dont_exist', which is not a callable, an attribute \"\n                 \"of 'CityInline', or an attribute of 'admin_checks.City'.\",\n                 obj=CityInline,\n                 id=\"admin.E035\",\n",
  "django__django-16901": "",
  "django__django-17029": "diff --git a/tests/apps/tests.py b/tests/apps/tests.py\nindex f7c2c67..4753b0c 100644\n--- a/tests/apps/tests.py\n+++ b/tests/apps/tests.py\n@@ -32,7 +32,26 @@ SOME_INSTALLED_APPS_NAMES = [\n HERE = os.path.dirname(__file__)\n \n \n+from django.apps import apps\n+from django.test import SimpleTestCase, override_settings\n+\n class AppsTests(SimpleTestCase):\n+    @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n+    def test_clear_cache(self):\n+        \"\"\"\n+        Test that apps.clear_cache() also clears the cache of\n+        get_swappable_settings_name.\n+        \"\"\"\n+        # Pretend to set cache by calling the function\n+        self.assertIsNone(apps.get_swappable_settings_name(\"admin.LogEntry\"))\n+        apps.get_models()\n+\n+        # Clear caches\n+        apps.clear_cache()\n+\n+        # Assert that caches are cleared\n+        self.assertEqual(apps.get_swappable_settings_name.cache_info().currsize, 0)\n+        self.assertEqual(apps.get_models.cache_info().currsize, 0)\n     def test_singleton_main(self):\n         \"\"\"\n         Only one main registry can exist.\n",
  "django__django-17084": "",
  "django__django-17087": "",
  "django__django-7530": "",
  "django__django-9296": "diff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\nindex b9b5fbc..706cc58 100644\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -294,6 +294,39 @@ class PaginationTests(SimpleTestCase):\n         and object_list is empty.\n         \"\"\"\n         paginator = Paginator([], 2, allow_empty_first_page=False)\n+\n+    def test_paginator_iteration(self):\n+        # Original test case to verify that iteration over Paginator yields expected pages\n+        paginator = Paginator([1, 2, 3], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2], [3]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+\n+    def test_paginator_iteration_full(self):\n+        # Additional test to check the full iteration process without manual next calls\n+        paginator = Paginator([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)\n+        expected_pages = [\n+            [1, 2, 3],\n+            [4, 5, 6],\n+            [7, 8, 9]\n+        ]\n+        for page, expected in zip(paginator, expected_pages):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(page))\n+    \n+    def test_paginator_iteration_empty(self):\n+        # Additional test case for empty Paginator\n+        paginator = Paginator([], 3)\n+        pages = list(paginator)\n+        self.assertEqual(pages, [])\n+\n+    def test_paginator_iteration_single_page(self):\n+        # Additional test case for Paginator with all items fitting in a single page\n+        paginator = Paginator([1, 2], 2)\n+        pages = list(paginator)\n+        expected_pages = [[1, 2]]\n+        self.assertEqual([list(page) for page in pages], expected_pages)\n         with self.assertRaises(EmptyPage):\n             paginator.get_page(1)\n \n",
  "matplotlib__matplotlib-13989": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5483eef..c9cf37f 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6359,8 +6359,33 @@ def test_hist_auto_bins():\n \n def test_hist_nan_data():\n     fig, (ax1, ax2) = plt.subplots(2)\n+import numpy as np\n+import matplotlib.pyplot as plt\n \n-    data = [1, 2, 3]\n+def test_hist_range_and_density():\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_and_density_large_data():\n+    # Test with larger data\n+    _, bins, _ = plt.hist(np.random.rand(1000), \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_and_density_different_range():\n+    # Test with different range\n+    _, bins, _ = plt.hist(np.random.rand(1000), \"auto\", range=(0.2, 0.8), density=True)\n+    assert bins[0] == 0.2\n+    assert bins[-1] == 0.8\n+\n+def test_hist_range_and_density_with_weights():\n+    # Test with weights\n+    data = np.random.rand(1000)\n+    weights = np.random.rand(1000)\n+    _, bins, _ = plt.hist(data, \"auto\", range=(0, 1), density=True, weights=weights)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n     nan_data = data + [np.nan]\n \n     bins, edges, _ = ax1.hist(data)\n@@ -6368,4 +6393,4 @@ def test_hist_nan_data():\n         nanbins, nanedges, _ = ax2.hist(nan_data)\n \n     assert np.allclose(bins, nanbins)\n-    assert np.allclose(edges, nanedges)\n+    assert np.allclose(edges, nanedges)\n",
  "matplotlib__matplotlib-14623": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c9ad946..bd17028 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -918,7 +918,33 @@ def test_hexbin_log():\n     plt.colorbar(h)\n \n \n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n def test_inverted_limits():\n+    # Test inverting a log-scale axis using its limits\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(10, 1)\n+    assert ax.get_ylim() == (10, 1)\n+    plt.close()\n+\n+    # Additional test: Check x-axis inversion for log scale\n+    fig, ax = plt.subplots()\n+    ax.set_xscale(\"log\")\n+    ax.set_xlim(10, 1)\n+    assert ax.get_xlim() == (10, 1)\n+    plt.close()\n+\n+    # Test inverting both x and y axes with log scale\n+    fig, ax = plt.subplots()\n+    ax.set_xscale(\"log\")\n+    ax.set_yscale(\"log\")\n+    ax.set_xlim(10, 1)\n+    ax.set_ylim(100, 10)\n+    assert ax.get_xlim() == (10, 1)\n+    assert ax.get_ylim() == (100, 10)\n+    plt.close()\n     # Test gh:1553\n     # Calling invert_xaxis prior to plotting should not disable autoscaling\n     # while still maintaining the inverted direction\n",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..7e08238 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6960,8 +6960,34 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[3].hist(np.arange(10), color=color.reshape((1, -1)))\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n+from matplotlib.testing.decorators import check_figures_equal\n \n-def test_shared_axes_retick():\n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear_keeps_ticks_hidden(fig_test, fig_ref):\n+    import numpy as np\n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    # Reference figure (what should happen without calling clear)\n+    axs_ref = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_ref.flat:\n+        ax.plot(x, y)\n+    \n+    # Test figure (what should happen with calling clear)\n+    axs_test = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_test.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n+\n+    # Ensure all shared axis properties are maintained\n+    for ax in axs_test.flat:\n+        # The ticks and labels should match the reference axes\n+        assert np.array_equal(ax.get_xticks(), axs_ref.flat[0].get_xticks())\n+        assert np.array_equal(ax.get_yticks(), axs_ref.flat[0].get_yticks())\n+        assert np.array_equal([label.get_text() for label in ax.get_xticklabels()],\n+                              [label.get_text() for label in axs_ref.flat[0].get_xticklabels()])\n+        assert np.array_equal([label.get_text() for label in ax.get_yticklabels()],\n+                              [label.get_text() for label in axs_ref.flat[0].get_yticklabels()])\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n \n     for ax in axs.flat:\n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "",
  "matplotlib__matplotlib-22865": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex 2c28713..0fc88da 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -919,6 +919,35 @@ def test_proportional_colorbars():\n             fig.colorbar(CS3, spacing=spacings[j], ax=axs[i, j])\n \n \n+import numpy as np\n+import matplotlib.pyplot as plt\n+import matplotlib.colors as mcolors\n+from matplotlib.colorbar import Colorbar\n+import pytest\n+\n+@pytest.mark.parametrize(\"extend, coloroffset, res\", [\n+    ('both', 1, [np.array([[0., 0.], [0., 1.]]),\n+                 np.array([[1., 0.], [1., 1.]]),\n+                 np.array([[2., 0.], [2., 1.]])]),\n+    ('min', 0, [np.array([[0., 0.], [0., 1.]]),\n+                np.array([[1., 0.], [1., 1.]])]),\n+    ('max', 0, [np.array([[1., 0.], [1., 1.]]),\n+                np.array([[2., 0.], [2., 1.]])]),\n+    ('neither', -1, [np.array([[1., 0.], [1., 1.]])])\n+])\n+def test_colorbar_extend_drawedges(extend, coloroffset, res):\n+    cmap = plt.get_cmap(\"viridis\")\n+    bounds = np.arange(3)\n+    nb_colors = len(bounds) + coloroffset\n+    colors = cmap(np.linspace(100, 255, nb_colors).astype(int))\n+    cmap, norm = mcolors.from_levels_and_colors(bounds, colors, extend=extend)\n+\n+    plt.figure(figsize=(5, 1))\n+    ax = plt.subplot(111)\n+    cbar = Colorbar(ax, cmap=cmap, norm=norm, orientation='horizontal',\n+                    drawedges=True)\n+    assert np.all(np.equal(cbar.dividers.get_segments(), res))\n+\n def test_negative_boundarynorm():\n     fig, ax = plt.subplots(figsize=(1, 3))\n     cmap = plt.get_cmap(\"viridis\")\n",
  "matplotlib__matplotlib-23299": "",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..78e4be7 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -15,13 +15,25 @@ from matplotlib.patches import Circle\n \n import matplotlib.pyplot as plt\n import numpy as np\n+from matplotlib.testing.decorators import check_figures_equal\n \n \n mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n \n-def test_aspect_equal_error():\n+@check_figures_equal(extensions=[\"png\"])\n+def test_3d_axes_set_visible_false(fig_test, fig_ref):\n+    ax1 = fig_test.add_subplot(121, projection='3d')\n+    ax2 = fig_ref.add_subplot(121, projection='3d')\n+    ax1.scatter([1], [1], [1])\n+    ax2.scatter([1], [1], [1])\n+    ax1.set_visible(False)\n+\n+    ax3 = fig_test.add_subplot(122, projection='3d')\n+    ax4 = fig_ref.add_subplot(122, projection='3d')\n+    ax3.scatter([1], [1], [1], c='r')\n+    ax4.scatter([1], [1], [1], c='r')\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n     with pytest.raises(NotImplementedError):\n",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..c93a301 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -156,8 +156,31 @@ def test_negative_rect():\n     neg_vertices = Rectangle((0, 0), -3, -2).get_verts()[:-1]\n     assert_array_equal(np.roll(neg_vertices, 2, 0), pos_vertices)\n \n+from matplotlib.patches import Rectangle\n+import matplotlib.pyplot as plt\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=['png'])\n+def test_dash_offset_patch_draw_complex(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n \n-@image_comparison(['clip_to_bbox'])\n+    loc = (0.2, 0.2)\n+    width, height = (0.5, 0.5)\n+    \n+    # Reference rectangles\n+    rect_ref1 = Rectangle(loc, width, height, linewidth=2, edgecolor='g', linestyle=(5, [5, 10]))\n+    rect_ref2 = Rectangle((0.8, 0.2), width, height, linewidth=2, edgecolor='m', linestyle=(10, [5, 10]))\n+    \n+    ax_ref.add_patch(rect_ref1)\n+    ax_ref.add_patch(rect_ref2)\n+\n+    # Test rectangles\n+    rect_test1 = Rectangle(loc, width, height, linewidth=2, edgecolor='g', linestyle=(5, [5, 10]))\n+    rect_test2 = Rectangle((0.8, 0.2), width, height, linewidth=2, edgecolor='m', linestyle=(10, [5, 10]))\n+    \n+    ax_test.add_patch(rect_test1)\n+    ax_test.add_patch(rect_test2)\n def test_clip_to_bbox():\n     fig, ax = plt.subplots()\n     ax.set_xlim([-18, 20])\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..56a6844 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2866,8 +2866,31 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n+def test_stackplot_color_cycler():\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    from matplotlib.patches import Rectangle\n \n-@image_comparison(['stackplot_test_baseline'], remove_text=True)\n+    # Create some arbitrary data\n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    fig, ax = plt.subplots()\n+\n+    # Plot using color aliases\n+    ax.plot([1, 3], [1, 3], color='C0')\n+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))\n+\n+    # Test stackplot with 'C' color aliases\n+    ax.stackplot([1, 2, 3], my_data, colors=['C2', 'C3', 'C4'])\n+\n+    # Retrieve colors to ensure that the cycle has not been altered incorrectly\n+    lines = ax.get_lines()\n+    patches = ax.patches\n+\n+    assert lines[0].get_color() == 'C0'\n+    assert patches[0].get_facecolor()[:3] == plt.cm.tab10(1, bytes=True)[:3]  # Verify C1 color\n+    assert patches[1].get_facecolor()[:3] == plt.cm.tab10(2, bytes=True)[:3]  # Verify C2 color\n+    assert patches[2].get_facecolor()[:3] == plt.cm.tab10(3, bytes=True)[:3]  # Verify C3 color\n+    assert patches[3].get_facecolor()[:3] == plt.cm.tab10(4, bytes=True)[:3]  # Verify C4 color\n def test_stackplot_baseline():\n     np.random.seed(0)\n \n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 45f9c04..ebc9359 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -13,7 +13,7 @@ from matplotlib.backend_bases import MouseButton, MouseEvent\n \n from matplotlib.offsetbox import (\n     AnchoredOffsetbox, AnnotationBbox, AnchoredText, DrawingArea, OffsetBox,\n-    OffsetImage, TextArea, _get_packed_offsets)\n+    OffsetImage, TextArea, _get_packed_offsets, HPacker, DrawingArea)\n \n \n @image_comparison(['offsetbox_clipping'], remove_text=True)\n",
  "matplotlib__matplotlib-24627": "",
  "matplotlib__matplotlib-24637": "",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..02f2442 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -30,7 +30,18 @@ def test_create_lookup_table(N, result):\n     assert_array_almost_equal(mcolors._create_lookup_table(N, data), result)\n \n \n-def test_resampled():\n+import numpy as np\n+import pytest\n+from numpy.testing import assert_array_equal\n+import matplotlib as mpl\n+\n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.float16, float])\n+def test_index_dtype_no_deprecation_warnings(dtype):\n+    cm = mpl.colormaps[\"viridis\"]\n+    with pytest.warns(None) as record:\n+        cm(dtype(0))\n+    # Ensure no deprecation warnings are raised\n+    assert not any(item.category is DeprecationWarning for item in record)\n     \"\"\"\n     GitHub issue #6025 pointed to incorrect ListedColormap.resampled;\n     here we test the method for LinearSegmentedColormap as well.\n",
  "matplotlib__matplotlib-25122": "",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..b337f80 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,6 +7801,30 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+def test_xaxis_offsetText_color():\n+    plt.rcParams['xtick.labelcolor'] = 'blue'\n+    ax = plt.axes()\n+    assert ax.xaxis.offsetText.get_color() == 'blue'\n+\n+    plt.rcParams['xtick.color'] = 'yellow'\n+    plt.rcParams['xtick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    assert ax.xaxis.offsetText.get_color() == 'yellow'\n+\n+\n+def test_yaxis_offsetText_color():\n+    plt.rcParams['ytick.labelcolor'] = 'green'\n+    ax = plt.axes()\n+    assert ax.yaxis.offsetText.get_color() == 'green'\n+\n+    plt.rcParams['ytick.color'] = 'red'\n+    plt.rcParams['ytick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    assert ax.yaxis.offsetText.get_color() == 'red'\n+\n+import matplotlib.pyplot as plt\n+import pytest\n+\n def test_ytickcolor_is_not_yticklabelcolor():\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..acaf6f7 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -89,8 +90,32 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import pickletools\n \n @mpl.style.context(\"default\")\n+def test_pickle_figure_with_draggable_legend():\n+    fig, ax = plt.subplots()\n+    \n+    time = [0, 1, 2, 3, 4]\n+    speed = [40, 43, 45, 47, 48]\n+    ax.plot(time, speed, label=\"speed\")\n+\n+    # Create a draggable legend\n+    leg = ax.legend()\n+    leg.set_draggable(True)\n+\n+    # Attempt to pickle the figure\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+\n+    # Check that the canvas is not being pickled\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+\n+    # Load the figure back\n+    loaded_fig = pickle.loads(pkl)\n+    loaded_fig.canvas.draw()  # Ensure the loaded figure can be drawn\n+\n+    plt.close(fig)\n+    plt.close(loaded_fig)\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..3fafed6 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -43,6 +43,34 @@ def test_simple():\n     ax.set_yscale('log')\n     pickle.dump(fig, BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n+def test_pickle_figure_with_aligned_labels():\n+    import matplotlib.pyplot as plt\n+    import pickle\n+    from io import BytesIO\n+\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()\n+\n+    # Test if pickling is successful\n+    pkl = BytesIO()\n+    try:\n+        pickle.dump(fig, pkl, pickle.HIGHEST_PROTOCOL)\n+        successful_pickle = True\n+    except TypeError:\n+        successful_pickle = False\n+\n+    assert successful_pickle, \"Failed to pickle figure with aligned labels\"\n+\n \n def _generate_complete_test_figure(fig_ref):\n     fig_ref.set_size_inches((10, 6))\n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..d34e3e3 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -991,8 +991,74 @@ def test_hexbin_linear():\n     ax.hexbin(x, y, gridsize=(10, 5), marginals=True,\n               reduce_C_function=np.sum)\n \n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_behavior_upon_C_parameter(fig_test, fig_ref):\n+    # see: gh:12926\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n \n-def test_hexbin_log_clim():\n+    # without C parameter\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # with C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=C,\n+        reduce_C_function=np.sum,\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n+\n+def test_hexbin_mincnt_with_zero(fig_ref):\n+    # Additional test case to verify behavior when mincnt is set to zero\n+    datapoints = [\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    fig, ax = plt.subplots()\n+\n+    # with C parameter and mincnt=0\n+    ax.hexbin(\n+        X, Y,\n+        C=C,\n+        reduce_C_function=np.sum,\n+        mincnt=0,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax.set_facecolor(\"green\")\n+    # Expect gridpoints with at least one datum to be shown\n     x, y = np.arange(200).reshape((2, 100))\n     fig, ax = plt.subplots()\n     h = ax.hexbin(x, y, bins='log', vmin=2, vmax=100)\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex 700190c..e6c3de6 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -88,6 +88,26 @@ def test_contour_no_valid_levels():\n     # no warning if z is uniform.\n     ax.contour(np.ones((9, 9)))\n \n+from matplotlib.testing.decorators import check_figures_equal\n+from matplotlib import pyplot as plt\n+import numpy as np\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths(fig_test, fig_ref):\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # Create initial contour sets\n+    cs_test = ax_test.contour([[0, 1], [1, 2]], levels=[0.5, 1.5])\n+    cs_ref = ax_ref.contour([[1, 0], [2, 1]], levels=[0.5, 1.5])\n+\n+    # Set paths on the test contour set to match the reference\n+    cs_test.set_paths(cs_ref.get_paths())\n+\n+    # Verify that the paths have been set correctly\n+    assert len(cs_test.collections) == len(cs_ref.collections)\n+    for col_test, col_ref in zip(cs_test.collections, cs_ref.collections):\n+        assert col_test.get_paths() == col_ref.get_paths()\n \n def test_contour_Nlevels():\n     # A scalar levels arg or kwarg should trigger auto level generation.\n",
  "mwaskom__seaborn-3069": "",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..8e0b5cc 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -244,6 +244,9 @@ def test_default_static_max_age(app):\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n \n+import flask\n+import pytest\n+\n def test_templates_list(test_apps):\n     from blueprintapp import app\n \n@@ -269,6 +272,18 @@ def test_dotted_names_from_app(app, client):\n \n     app.register_blueprint(test)\n \n+\n+def test_blueprint_with_non_empty_name(app, client):\n+    # This should not raise an error\n+    bp = flask.Blueprint(\"valid_name\", __name__)\n+    assert bp.name == \"valid_name\"\n+\n+\n+def test_whitespace_name_not_allowed(app, client):\n+    # Blueprint with only whitespace in the name should raise ValueError\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"   \", __name__)\n+\n     rv = client.get(\"/\")\n     assert rv.data == b\"/test/\"\n \n",
  "psf__requests-1142": "",
  "psf__requests-1724": "",
  "psf__requests-1766": "diff --git a/requests/auth.py b/requests/auth.py\nindex ff8249e..7411bbf 100644\n--- a/requests/auth.py\n+++ b/requests/auth.py\n@@ -147,6 +147,14 @@ class HTTPDigestAuth(AuthBase):\n             base += ', qop=auth, nc=%s, cnonce=\"%s\"' % (ncvalue, cnonce)\n \n         return 'Digest %s' % (base)\n+    \n+    def _test_imports(self):\n+        import requests\n+        from requests.auth import HTTPDigestAuth\n+        from requests.utils import urlparse\n+        import hashlib\n+        import os\n+        import time\n \n     def handle_401(self, r, **kwargs):\n         \"\"\"Takes the given response and tries digest-auth, if needed.\"\"\"\n",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..a2e7199 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,6 +81,8 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://*example.com'),\n+            (InvalidURL, 'http://.example.com'),\n         ))\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..0ddf6d0 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2308,8 +2308,25 @@ class TestAsCompatibleData:\n         orig = Variable(dims=(\"x\"), data=array, attrs={\"foo\": \"bar\"})\n         assert isinstance(orig._data, CustomIndexable)\n \n+def test_variable_setitem_with_values_property():\n+    import numpy as np\n+    from xarray import Variable\n \n-def test_raise_no_warning_for_nan_in_binary_ops():\n+    # Type with data stored in values attribute\n+    class HasValues:\n+        def __init__(self, value):\n+            self.values = value\n+\n+    # Create a Variable with object dtype\n+    var = Variable((\"x\",), np.empty(1, dtype=object))\n+\n+    # Assign an instance of HasValues to the Variable\n+    obj = HasValues(5)\n+    var[0] = obj\n+\n+    # Ensure that the object itself, not its `values` attribute, is stored\n+    assert isinstance(var.values[0], HasValues)\n+    assert var.values[0].values == 5\n     with pytest.warns(None) as record:\n         Variable(\"x\", [1, 2, np.NaN]) > 0\n     assert len(record) == 0\n",
  "pydata__xarray-3095": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex 274cb25..aece041 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -3480,7 +3480,19 @@ class TestDataArray:\n \n         assert_identical(da['a'], expected_orig)\n \n-    def test_real_and_imag(self):\n+    @pytest.mark.parametrize('deep', [True, False])\n+    def test_copy_unicode_index(self, deep):\n+        # Test the behavior of DataArray.copy with unicode index\n+        da = xr.DataArray(\n+            np.array(['baz']),\n+            dims='x',\n+            coords={'x': np.array(['foo'], dtype='<U3'), 'y': ('x', ['bar'])}\n+        )\n+        da_copied = da.copy(deep=deep)\n+        assert da_copied.indexes['x'].dtype == '<U3'\n+        assert da_copied.indexes['y'].dtype == '<U3'\n+        assert type(da_copied.indexes['x']) == type(da.indexes['x'])\n+        assert type(da_copied.indexes['y']) == type(da.indexes['y'])\n         array = DataArray(1 + 2j)\n         assert_identical(array.real, DataArray(1))\n         assert_identical(array.imag, DataArray(2))\n",
  "pydata__xarray-3151": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 026dec9..7c60f20 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -574,7 +574,45 @@ class TestCombineAuto:\n         def test_empty_input(self):\n             assert_identical(Dataset(), combine_by_coords([]))\n \n-    def test_infer_order_from_coords(self):\n+    def test_combine_by_coords_non_monotonic_identical_coords(self):\n+        # Test combining datasets with identical, non-monotonic coordinates.\n+        # This should not raise an error as the issue described.\n+\n+        ycoord = ['a', 'c', 'b']\n+\n+        ds1 = Dataset(\n+            data_vars=dict(\n+                data=(['x', 'y'], np.random.rand(3, 3))\n+            ),\n+            coords=dict(\n+                x=[1, 2, 3],\n+                y=ycoord\n+            )\n+        )\n+\n+        ds2 = Dataset(\n+            data_vars=dict(\n+                data=(['x', 'y'], np.random.rand(4, 3))\n+            ),\n+            coords=dict(\n+                x=[4, 5, 6, 7],\n+                y=ycoord\n+            )\n+        )\n+\n+        # Expected combined dataset\n+        expected = Dataset(\n+            data_vars=dict(\n+                data=(['x', 'y'], np.concatenate([ds1.data.values, ds2.data.values], axis=0))\n+            ),\n+            coords=dict(\n+                x=[1, 2, 3, 4, 5, 6, 7],\n+                y=ycoord\n+            )\n+        )\n+\n+        actual = combine_by_coords([ds1, ds2])\n+        assert_identical(expected, actual)\n         data = create_test_data()\n         objs = [data.isel(dim2=slice(4, 9)), data.isel(dim2=slice(4))]\n         actual = combine_by_coords(objs)\n",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..bfb6fbe 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2309,6 +2309,25 @@ class TestDataArray:\n                     self.dv.values, np.array(q) * 100, axis=axis\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n+    def test_quantile_keep_attrs(self):\n+        import xarray as xr\n+        import numpy as np\n+        from collections import OrderedDict\n+        \n+        # Create a DataArray with attributes\n+        da = xr.DataArray([0, 0], dims=\"x\", attrs={'units': 'K'})\n+        \n+        # Compute the quantile and keep attributes\n+        out = da.quantile(0.9, dim='x', keep_attrs=True)\n+        \n+        # Check if the attributes are retained\n+        assert out.attrs == {'units': 'K'}\n+        \n+        # Compute the quantile without keeping attributes\n+        out_no_attrs = da.quantile(0.9, dim='x', keep_attrs=False)\n+        \n+        # Check if the attributes are not retained\n+        assert out_no_attrs.attrs == OrderedDict()\n \n     def test_reduce_keep_attrs(self):\n         # Test dropped attrs\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..baae31a 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import pytest\n \n@@ -159,6 +160,33 @@ class TestMergeMethod:\n         with raises_regex(ValueError, \"should be coordinates or not\"):\n             data.merge(data.reset_coords())\n \n+    def test_merge_dataarray(self):\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+\n+        # Test merging Dataset with DataArray using ds.merge method\n+        result = ds.merge(da)\n+        expected = xr.merge([ds, da])\n+        assert_identical(result, expected)\n+\n+        # Test the merge when DataArray has different dimensions\n+        da_with_dim = xr.DataArray(data=[1, 2, 3], dims=\"x\", name=\"b\")\n+        ds_with_dim = xr.Dataset({\"a\": (\"x\", [0, 0, 0])})\n+        result_with_dim = ds_with_dim.merge(da_with_dim)\n+        expected_with_dim = xr.merge([ds_with_dim, da_with_dim])\n+        assert_identical(result_with_dim, expected_with_dim)\n+\n+        # Test the merge when DataArray has overlapping variable name\n+        da_overlap = xr.DataArray(data=99, name=\"a\")\n+        with pytest.raises(xr.MergeError):\n+            ds.merge(da_overlap)\n+\n+        # Test the merge when DataArray has coordinates\n+        da_with_coords = xr.DataArray(data=1, name=\"b\", coords={\"c\": 42})\n+        result_with_coords = ds.merge(da_with_coords)\n+        expected_with_coords = xr.merge([ds, da_with_coords])\n+        assert_identical(result_with_coords, expected_with_coords)\n+\n     def test_merge_broadcast_equals(self):\n         ds1 = xr.Dataset({\"x\": 0})\n         ds2 = xr.Dataset({\"x\": (\"y\", [0, 0])})\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "diff --git a/xarray/tests/test_duck_array_ops.py b/xarray/tests/test_duck_array_ops.py\nindex 0c63f0f..2e9dd0b 100644\n--- a/xarray/tests/test_duck_array_ops.py\n+++ b/xarray/tests/test_duck_array_ops.py\n@@ -582,6 +582,26 @@ def test_dask_gradient(axis, edge_order):\n @pytest.mark.parametrize(\"dask\", [False, True])\n @pytest.mark.parametrize(\"func\", [\"sum\", \"prod\"])\n @pytest.mark.parametrize(\"aggdim\", [None, \"x\"])\n+@pytest.mark.parametrize(\"dtype\", [float, int, np.float32, np.bool_])\n+@pytest.mark.parametrize(\"dask\", [False, True])\n+@pytest.mark.parametrize(\"func\", [\"sum\", \"prod\"])\n+def test_min_count_multiple_dims(dtype, dask, func):\n+    if dask and not has_dask:\n+        pytest.skip(\"requires dask\")\n+\n+    min_count = 3\n+    da = construct_dataarray(3, dtype, contains_nan=True, dask=dask)\n+    actual = getattr(da, func)(dim=[\"x\", \"y\", \"z\"], skipna=True, min_count=min_count)\n+    expected = getattr(da, func)(dim=..., skipna=True, min_count=min_count)\n+    assert_allclose(actual, expected)\n+    assert_dask_array(actual, dask)\n+\n+import numpy as np\n+import pytest\n+from xarray import Dataset\n+from xarray.tests import assert_allclose, assert_dask_array\n+from . import construct_dataarray, has_dask\n+\n def test_min_count(dim_num, dtype, dask, func, aggdim):\n     if dask and not has_dask:\n         pytest.skip(\"requires dask\")\n",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..133fd30 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -109,7 +109,28 @@ class TestMergeFunction:\n             expected.attrs = expected_attrs\n             assert actual.identical(expected)\n \n-    def test_merge_dicts_simple(self):\n+    def test_merge_attrs_override_copy(self):\n+        ds1 = xr.Dataset(attrs={\"x\": 0})\n+        ds2 = xr.Dataset(attrs={\"x\": 1})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"x\"] = 2\n+        assert ds1.attrs[\"x\"] == 0\n+        assert ds2.attrs[\"x\"] == 1\n+        assert ds3.attrs[\"x\"] == 2\n+\n+    def test_merge_attrs_override_no_side_effects(self):\n+        # Further test to ensure no side effects on source datasets\n+        ds1 = xr.Dataset(attrs={\"key1\": \"value1\"})\n+        ds2 = xr.Dataset(attrs={\"key2\": \"value2\"})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"key1\"] = \"new_value1\"\n+        ds3.attrs[\"key2\"] = \"new_value2\"\n+        assert ds1.attrs[\"key1\"] == \"value1\"\n+        assert \"key2\" not in ds1.attrs\n+        assert ds2.attrs[\"key2\"] == \"value2\"\n+        assert \"key1\" not in ds2.attrs\n+        assert ds3.attrs[\"key1\"] == \"new_value1\"\n+        assert ds3.attrs[\"key2\"] == \"new_value2\"\n         actual = xr.merge([{\"foo\": 0}, {\"bar\": \"one\"}, {\"baz\": 3.5}])\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n         assert actual.identical(expected)\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..45efcad 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1915,6 +1915,11 @@ def test_dot_align_coords(use_dask) -> None:\n         xr.testing.assert_allclose(expected, actual)\n \n \n+import pytest\n+import xarray as xr\n+import numpy as np\n+from xarray.testing import assert_identical\n+\n def test_where() -> None:\n     cond = xr.DataArray([True, False], dims=\"x\")\n     actual = xr.where(cond, 1, 0)\n@@ -1922,6 +1927,20 @@ def test_where() -> None:\n     assert_identical(expected, actual)\n \n \n+def test_where_attrs() -> None:\n+    # Test if attributes are preserved when keep_attrs=True\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    actual = xr.where(cond, x, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected, actual)\n+    \n+    # Test if attributes are not preserved when keep_attrs=False\n+    actual_no_attrs = xr.where(cond, x, y, keep_attrs=False)\n+    expected_no_attrs = xr.DataArray([1, 0], dims=\"x\", attrs={})\n+    assert_identical(expected_no_attrs, actual_no_attrs)\n+\n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n def test_polyval(use_dask, use_datetime) -> None:\n",
  "pydata__xarray-4695": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex 3a4b8ad..f48aedf 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -1164,11 +1164,38 @@ class TestDataArray:\n         assert np.allclose(da[dict(x=ind)].values, 0)\n         assert_identical(da[\"x\"], get_data()[\"x\"])\n         assert_identical(da[\"non-dim\"], get_data()[\"non-dim\"])\n+    \n+    def test_loc_dim_name_collision_with_sel_params(self):\n+        da = DataArray(\n+            [[0, 0], [1, 1]],\n+            dims=[\"dim1\", \"method\"],\n+            coords={\"dim1\": [\"x\", \"y\"], \"method\": [\"a\", \"b\"]},\n+        )\n+        np.testing.assert_array_equal(\n+            da.loc[dict(dim1=[\"x\", \"y\"], method=[\"a\"])], [[0], [1]]\n+        )\n+\n+    def test_loc_with_reserved_names(self):\n+        reserved_names = [\"method\", \"class\", \"for\", \"while\"]\n+        for name in reserved_names:\n+            da = DataArray(\n+                [[0, 0], [1, 1]],\n+                dims=[\"dim1\", name],\n+                coords={\"dim1\": [\"x\", \"y\"], name: [\"a\", \"b\"]},\n+            )\n+            result = da.loc[dict(dim1=\"x\", **{name: \"a\"})]\n+            expected = DataArray(0, coords={\"dim1\": \"x\", name: \"a\"})\n+            assert_identical(result, expected)\n \n-    def test_loc_single_boolean(self):\n-        data = DataArray([0, 1], coords=[[True, False]])\n-        assert data.loc[True] == 0\n-        assert data.loc[False] == 1\n+    def test_loc_standard_functionality(self):\n+        da = DataArray(\n+            np.arange(6).reshape(2, 3),\n+            dims=[\"x\", \"y\"],\n+            coords={\"x\": [\"a\", \"b\"], \"y\": [0, 1, 2]},\n+        )\n+        result = da.loc[dict(x=\"a\", y=0)]\n+        expected = DataArray(0, coords={\"x\": \"a\", \"y\": 0})\n+        assert_identical(result, expected)\n \n     def test_selection_multiindex(self):\n         mindex = pd.MultiIndex.from_product(\n",
  "pydata__xarray-4966": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex 2dbb0b4..d434699 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -2,6 +2,8 @@ from contextlib import suppress\n \n import numpy as np\n import pandas as pd\n+import numpy as np\n+\n import pytest\n \n import xarray as xr\n@@ -13,8 +15,31 @@ from . import assert_allclose, assert_equal, assert_identical, requires_dask\n with suppress(ImportError):\n     import dask.array as da\n \n-\n-def test_CFMaskCoder_decode():\n+@pytest.mark.parametrize(\"bits\", [1, 2, 4, 8])\n+def test_decode_unsigned_from_signed(bits):\n+    unsigned_dtype = np.dtype(f\"u{bits}\")\n+    signed_dtype = np.dtype(f\"i{bits}\")\n+    original_values = np.array([np.iinfo(unsigned_dtype).max], dtype=unsigned_dtype)\n+    encoded = xr.Variable(\n+        (\"x\",), original_values.astype(signed_dtype), attrs={\"_Unsigned\": \"true\"}\n+    )\n+    coder = variables.UnsignedIntegerCoder()\n+    decoded = coder.decode(encoded)\n+    assert decoded.dtype == unsigned_dtype\n+    assert np.array_equal(decoded.values, original_values)\n+\n+@pytest.mark.parametrize(\"bits\", [1, 2, 4, 8])\n+def test_decode_signed_from_unsigned(bits):\n+    unsigned_dtype = np.dtype(f\"u{bits}\")\n+    signed_dtype = np.dtype(f\"i{bits}\")\n+    original_values = np.array([-1], dtype=signed_dtype)\n+    encoded = xr.Variable(\n+        (\"x\",), original_values.astype(unsigned_dtype), attrs={\"_Unsigned\": \"false\"}\n+    )\n+    coder = variables.UnsignedIntegerCoder()\n+    decoded = coder.decode(encoded)\n+    assert decoded.dtype == signed_dtype\n+    assert np.array_equal(decoded.values, original_values)\n     original = xr.Variable((\"x\",), [0, -1, 1], {\"_FillValue\": -1})\n     expected = xr.Variable((\"x\",), [0, np.nan, 1])\n     coder = variables.CFMaskCoder()\n",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..6bd4214 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1913,6 +1913,14 @@ def test_dot_align_coords(use_dask) -> None:\n         xr.testing.assert_allclose(expected, actual)\n \n \n+def test_where_scalar_with_keep_attrs() -> None:\n+    # Issue test: ensure keep_attrs can handle scalar values\n+    cond = xr.DataArray([True, False, True], dims=\"x\")\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\")\n+    assert_identical(expected, actual)\n+\n+\n def test_where() -> None:\n     cond = xr.DataArray([True, False], dims=\"x\")\n     actual = xr.where(cond, 1, 0)\n",
  "pydata__xarray-6599": "",
  "pydata__xarray-6721": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex cab9007..b14c9d8 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -221,7 +221,23 @@ class InaccessibleVariableDataStore(backends.InMemoryDataStore):\n \n \n class TestDataset:\n-    def test_repr(self) -> None:\n+    @requires_dask\n+    def test_chunks_does_not_load_data(self) -> None:\n+        # regression test for issue with accessing chunks\n+        url = \"https://ncsa.osn.xsede.org/Pangeo/pangeo-forge/swot_adac/FESOM/surf/fma.zarr\"\n+        ds = xr.open_dataset(url, engine='zarr')\n+        \n+        # Ensure that accessing chunks does not load data into memory\n+        with pytest.raises(UnexpectedDataAccess):\n+            for var in ds.variables.values():\n+                if hasattr(var.data, \"chunks\"):\n+                    var.values  # Accessing values should raise UnexpectedDataAccess\n+\n+        # Access the chunks attribute and check that it does not raise\n+        chunks = ds.chunks\n+        assert isinstance(chunks, dict)\n+        for dim, chunk_sizes in chunks.items():\n+            assert isinstance(chunk_sizes, tuple)\n         data = create_test_data(seed=123)\n         data.attrs[\"foo\"] = \"bar\"\n         # need to insert str dtype at runtime to handle different endianness\n",
  "pydata__xarray-6744": "diff --git a/xarray/tests/test_rolling.py b/xarray/tests/test_rolling.py\nindex 0a9ef75..89d7458 100644\n--- a/xarray/tests/test_rolling.py\n+++ b/xarray/tests/test_rolling.py\n@@ -24,8 +24,26 @@ pytestmark = [\n     pytest.mark.filterwarnings(\"error:All-NaN (slice|axis) encountered\"),\n ]\n \n+from xarray import DataArray\n+import numpy as np\n \n class TestDataArrayRolling:\n+    def test_rolling_iter_manual_center(self) -> None:\n+        # DataArray to test with\n+        my_data = DataArray(np.arange(1, 10), dims=\"x\")\n+\n+        # Expected result when using center=True\n+        expected_result = np.array([np.nan, 2., 3., 4., 5., 6., 7., 8., np.nan])\n+\n+        # Perform rolling operation with center=True\n+        my_data_rolling = my_data.rolling(x=3, center=True)\n+        result = [window.mean().values.item() for label, window in my_data_rolling]\n+\n+        # Convert to numpy array for comparison\n+        result_array = np.array(result)\n+\n+        # Assert that the result is as expected\n+        np.testing.assert_array_equal(result_array, expected_result)\n     @pytest.mark.parametrize(\"da\", (1, 2), indirect=True)\n     def test_rolling_iter(self, da) -> None:\n         rolling_obj = da.rolling(time=7)\n",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "diff --git a/xarray/tests/test_indexes.py b/xarray/tests/test_indexes.py\nindex fa8bd84..601f935 100644\n--- a/xarray/tests/test_indexes.py\n+++ b/xarray/tests/test_indexes.py\n@@ -688,6 +688,22 @@ def test_safe_cast_to_index_cftimeindex():\n         assert isinstance(actual, type(expected))\n \n \n+import pytest\n+import xarray as xr\n+import numpy as np\n+\n+@pytest.mark.parametrize(\"dtype\", [\"int32\", \"float32\"])\n+def test_restore_dtype_on_multiindexes(dtype: str) -> None:\n+    foo = xr.Dataset(coords={\"bar\": (\"bar\", np.array([0, 1], dtype=dtype))})\n+    foo = foo.stack(baz=(\"bar\",))\n+    assert str(foo[\"bar\"].values.dtype) == dtype\n+\n+def test_stack_preserve_int32_dtype():\n+    ds = xr.Dataset(coords={'a': np.array([0], dtype='int32')})\n+    stacked_ds = ds.stack(b=('a',))\n+    assert ds['a'].values.dtype == stacked_ds['a'].values.dtype, \\\n+        \"Expected dtype to remain 'int32', but it was changed to '{}'\".format(stacked_ds['a'].values.dtype)\n+\n # Test that datetime.datetime objects are never used in a CFTimeIndex\n @requires_cftime\n def test_safe_cast_to_index_datetime_datetime():\n@@ -696,4 +712,4 @@ def test_safe_cast_to_index_datetime_datetime():\n     expected = pd.Index(dates)\n     actual = safe_cast_to_index(np.array(dates))\n     assert_array_equal(expected, actual)\n-    assert isinstance(actual, pd.Index)\n+    assert isinstance(actual, pd.Index)\n",
  "pylint-dev__pylint-4970": "",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..bee1249 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -93,10 +93,27 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     output = capsys.readouterr()\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n+from pylint import Run\n+import pytest\n+from pytest import CaptureFixture\n+\n+EMPTY_MODULE = \"test_module.py\"  # Assuming this is a valid path for testing purposes\n+\n+def test_short_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the -v flag.\"\"\"\n+    Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n+def test_long_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the --verbose flag.\"\"\"\n+    Run([str(EMPTY_MODULE), \"--verbose\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n \n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..a55242e 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,25 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_paths_with_recursive(self):\n+        \"\"\"Test that ignore-paths is respected when using --recursive=y.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^ignored_subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7277": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9f95f7b..8852b75 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -765,7 +765,37 @@ a.py:1:4: E0001: Parsing failed: 'invalid syntax (<unknown>, line 1)' (syntax-er\n                 modify_sys_path()\n             assert sys.path == paths[1:]\n \n-            paths = [cwd, \"/custom_pythonpath\", *default_paths]\n+            paths = [\"/do_not_remove\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths\n+\n+            paths = [\"\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:]\n+\n+            paths = [\".\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:]\n+\n+            paths = [cwd, *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:]\n+\n+            paths = [cwd, cwd, *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:]\n+\n+            paths = [\"/do_not_remove\", *default_paths]\n             sys.path = copy(paths)\n             with _test_environ_pythonpath(\"/custom_pythonpath\"):\n                 modify_sys_path()\n",
  "pytest-dev__pytest-10051": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex 26c4c15..c27c83e 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -160,7 +160,22 @@ def logging_during_setup_and_teardown(caplog):\n     assert [x.message for x in caplog.get_records(\"teardown\")] == [\"a_teardown_log\"]\n \n \n-def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardown):\n+def test_consistency_between_get_records_and_records(caplog):\n+    def verify_consistency():\n+        assert caplog.get_records(\"call\") == caplog.records\n+\n+    verify_consistency()\n+    logging.warning(\"initial log message\")\n+    verify_consistency()\n+    caplog.clear()\n+    verify_consistency()  # Should not fail now\n+\n+    logging.info(\"new log message\")\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"new log message\"]\n+\n+    caplog.clear()\n+    assert caplog.get_records(\"call\") == []\n+    assert caplog.records == []\n     assert not caplog.records\n     assert not caplog.get_records(\"call\")\n     logger.info(\"a_call_log\")\n",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 561df7f..796e291 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -1273,6 +1273,33 @@ def test_pdb_teardown_skipped(\n     result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n     assert tracked == []\n \n+def test_pdb_teardown_skipped_for_classes_with_unittest_skip(pytester: Pytester, monkeypatch: MonkeyPatch) -> None:\n+    \"\"\"Ensure setUp and tearDown are not called for skipped classes with --pdb.\"\"\"\n+    tracked: List[str] = []\n+    monkeypatch.setattr(pytest, \"track_pdb_teardown_skipped\", tracked, raising=False)\n+    \n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+        import pytest\n+\n+        @unittest.skip(\"class skipped\")\n+        class SkippedTestCase(unittest.TestCase):\n+\n+            def setUp(self):\n+                pytest.track_pdb_teardown_skipped.append(\"setUp:\" + self.id())\n+\n+            def tearDown(self):\n+                pytest.track_pdb_teardown_skipped.append(\"tearDown:\" + self.id())\n+\n+            def test_one(self):\n+                pass\n+        \"\"\"\n+    )\n+    result = pytester.runpytest_inprocess(\"--pdb\")\n+    result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n+    assert tracked == []\n+\n \n def test_async_support(pytester: Pytester) -> None:\n     pytest.importorskip(\"unittest.async_case\")\n",
  "pytest-dev__pytest-5262": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 1f092b0..d052735 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -1049,6 +1049,19 @@ class TestFDCapture(object):\n             assert s == \"but now yes\\n\"\n             cap.suspend()\n             cap.done()\n+\n+    def test_encodedfile_mode_without_binary(self):\n+        import _pytest.capture\n+\n+        buffer = io.StringIO()\n+        encoded_file = _pytest.capture.EncodedFile(buffer, encoding='utf-8')\n+        \n+        # Ensure that 'b' is not in the mode. There's no explicit 'mode' attribute\n+        # in EncodedFile, but we simulate this test by checking the behavior.\n+        try:\n+            encoded_file.write(b'bytes data')\n+        except TypeError as e:\n+            assert str(e) == \"write() argument must be str, not bytes\"\n             pytest.raises(AttributeError, cap.suspend)\n \n \n",
  "pytest-dev__pytest-5631": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex e422b03..187af99 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -7,6 +7,8 @@ import py\n \n import pytest\n from _pytest.main import _in_venv\n+import numpy as np\n+from unittest.mock import patch\n from _pytest.main import ExitCode\n from _pytest.main import Session\n \n@@ -100,8 +102,48 @@ class TestCollector:\n         result = testdir.runpytest()\n         result.stdout.fnmatch_lines([\"collected 0 items\", \"*no tests ran in*\"])\n \n+    def test_mock_sentinel_check_with_numpy_array(self, testdir):\n+        \"\"\"Ensure that numpy arrays can be used with the mock.patch without causing collection errors.\"\"\"\n+        \n+        testdir.makepyfile(\n+            \"\"\"\n+            import numpy as np\n+            from unittest.mock import patch\n+            import some_module\n+\n+            class TestNumpyPatch:\n+                @patch(\"some_module.GLOBAL_VARIABLE\", new=np.array([1, 2, 3]))\n+                def test_array_patch(self):\n+                    assert True  # Dummy assertion\n+            \"\"\"\n+        )\n+        result = testdir.runpytest()\n+        result.assert_outcomes(passed=1)\n \n-class TestCollectFS:\n+    def test_mock_sentinel_check_with_numpy_like(self, testdir):\n+        \"\"\"Ensure function handles numpy-like custom objects correctly.\"\"\"\n+        \n+        testdir.makepyfile(\n+            \"\"\"\n+            class NumpyLike:\n+                def __init__(self, value):\n+                    self.value = value\n+                def __eq__(self, other):\n+                    raise ValueError(\"like numpy, cannot compare against others for truth\")\n+            \n+            import numpy as np\n+            from unittest.mock import patch\n+\n+            FOO = NumpyLike(10)\n+\n+            class TestNumpyLikePatch:\n+                @patch(\"dummy.FOO\", new=NumpyLike(50))\n+                def test_numpylike_patch(self):\n+                    assert True  # Dummy assertion\n+            \"\"\"\n+        )\n+        result = testdir.runpytest()\n+        result.assert_outcomes(passed=1)\n     def test_ignored_certain_directories(self, testdir):\n         tmpdir = testdir.tmpdir\n         tmpdir.ensure(\"build\", \"test_notfound.py\")\n",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..feef296 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -116,10 +116,21 @@ class TestPaste(object):\n             monkeypatch.setattr(urllib, \"urlopen\", mocked)\n         else:\n             import urllib.request\n-\n             monkeypatch.setattr(urllib.request, \"urlopen\", mocked)\n         return calls\n \n+    def test_create_new_paste_with_text_lexer(self, pastebin, mocked_urlopen):\n+        # Test case to verify that changing lexer to 'text' resolves the HTTP error\n+        result = pastebin.create_new_paste(b\"full-paste-contents\")\n+        assert result == \"https://bpaste.net/show/3c0c6750bd\"\n+        assert len(mocked_urlopen) == 1\n+        url, data = mocked_urlopen[0]\n+        assert type(data) is bytes\n+        assert url == \"https://bpaste.net\"\n+        assert \"lexer=text\" in data.decode()\n+        assert \"code=full-paste-contents\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n+\n     def test_create_new_paste(self, pastebin, mocked_urlopen):\n         result = pastebin.create_new_paste(b\"full-paste-contents\")\n         assert result == \"https://bpaste.net/show/3c0c6750bd\"\n@@ -130,4 +141,4 @@ class TestPaste(object):\n         assert url == \"https://bpaste.net\"\n         assert \"lexer=%s\" % lexer in data.decode()\n         assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n",
  "pytest-dev__pytest-6202": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex fb6b260..fabf7cf 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -673,6 +673,22 @@ class Test_genitems:\n                 pass\n         \"\"\"\n         )\n+    \n+    def test_parametrize_square_bracket_issue(self, testdir):\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+\n+            @pytest.mark.parametrize(\"arg\", [\".[\"])\n+            def test_special_case(arg):\n+                pass\n+            \"\"\"\n+        )\n+        items, reprec = testdir.inline_genitems(p)\n+        assert len(items) == 1\n+        assert items[0].name == \"test_special_case[.[]\"\n+        # Verify that getmodpath correctly retains the [.[\n+        assert items[0].getmodpath() == \"test_special_case[.[]\"\n         p.copy(p.dirpath(p.purebasename + \"2\" + \".py\"))\n         items, reprec = testdir.inline_genitems(p.dirpath())\n         assert len(items) == 4\n@@ -696,6 +712,22 @@ class Test_genitems:\n                 pass\n         \"\"\"\n         )\n+    \n+    def test_parametrize_square_bracket_issue(self, testdir):\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+\n+            @pytest.mark.parametrize(\"arg\", [\".[\"])\n+            def test_special_case(arg):\n+                pass\n+            \"\"\"\n+        )\n+        items, reprec = testdir.inline_genitems(p)\n+        assert len(items) == 1\n+        assert items[0].name == \"test_special_case[.[]\"\n+        # Verify that getmodpath correctly retains the [.[\n+        assert items[0].getmodpath() == \"test_special_case[.[]\"\n         items, reprec = testdir.inline_genitems(p)\n         assert len(items) == 3\n         assert items[0].name == \"testone\"\n",
  "pytest-dev__pytest-7205": "diff --git a/testing/test_setuponly.py b/testing/test_setuponly.py\nindex 8211d39..5b4bdd4 100644\n--- a/testing/test_setuponly.py\n+++ b/testing/test_setuponly.py\n@@ -1,3 +1,4 @@\n+\n import pytest\n from _pytest.config import ExitCode\n \n@@ -201,7 +202,23 @@ def test_show_fixtures_with_parameter_ids_function(testdir, mode):\n     result.stdout.fnmatch_lines([\"*SETUP    F foobar?FOO?\", \"*SETUP    F foobar?BAR?\"])\n \n \n-def test_dynamic_fixture_request(testdir):\n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue: BytesWarning when using --setup-show with bytes parameter\n+    import sys  # Ensure sys is imported for subprocess call\n+    \n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n+\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n     p = testdir.makepyfile(\n         \"\"\"\n         import pytest\n",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..c2acd9f 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,7 +1,9 @@\n+\n import sys\n \n import pytest\n from _pytest.runner import runtestprotocol\n+from _pytest.pytester import Testdir\n from _pytest.skipping import evaluate_skip_marks\n from _pytest.skipping import evaluate_xfail_marks\n from _pytest.skipping import pytest_runtest_setup\n@@ -171,7 +173,30 @@ class TestXFail:\n         assert callreport.skipped\n         assert callreport.wasxfail == \"\"\n \n-    def test_xfail_xpassed(self, testdir):\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n         item = testdir.getitem(\n             \"\"\"\n             import pytest\n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..6739332 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -513,6 +513,12 @@ class TestCaptureFixture:\n             \"\"\"\n         )\n         reprec.assertoutcome(passed=1)\n+    \n+    @pytest.mark.parametrize(\"nl\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_cafd_preserves_newlines(self, capfd, nl):\n+        print(\"test\", end=nl)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(nl)\n \n     def test_capfdbinary(self, testdir):\n         reprec = testdir.inline_runsource(\n",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..0f0f9e0 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import pytest\n@@ -49,6 +50,28 @@ def test_change_level_undo(testdir):\n     result.stdout.fnmatch_lines([\"*log from test1*\", \"*2 failed in *\"])\n     result.stdout.no_fnmatch_line(\"*log from test2*\")\n \n+def test_handler_level_restoration(testdir):\n+    \"\"\"Ensure that `caplog.set_level` properly restores the handler level after a test.\"\"\"\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test1(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(logging.WARNING)\n+            assert caplog.handler.level == 30\n+\n+        def test2(caplog):\n+            assert caplog.handler.level == 0\n+\n+        def test3(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(logging.ERROR)\n+            assert caplog.handler.level == 40\n+        \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=3)\n \n def test_with_statement(caplog):\n     with caplog.at_level(logging.INFO):\n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..c3740a8 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,3 +1,4 @@\n+\n import os\n import pprint\n import sys\n@@ -9,7 +10,7 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n-from _pytest.pytester import Testdir\n+from _pytest.pytester import Testdir, Pytester\n \n \n class TestCollector:\n",
  "pytest-dev__pytest-8399": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 2c720b0..a3fde6b 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -301,8 +301,31 @@ def test_setup_setUpClass(pytester: Pytester) -> None:\n     reprec = pytester.inline_run(testpath)\n     reprec.assertoutcome(passed=3)\n \n+import pytest\n+from _pytest.pytester import Pytester\n+\n+def test_unittest_setUpClass_fixture_visibility(pytester: Pytester) -> None:\n+    test_code = '''\n+        import unittest\n+\n+        class SampleTestCase(unittest.TestCase):\n+            @classmethod\n+            def setUpClass(cls):\n+                pass\n+            def test_sample(self):\n+                pass\n+    '''\n+    test_file = pytester.makepyfile(test_code)\n \n-def test_setup_class(pytester: Pytester) -> None:\n+    # Run pytest with --fixtures and check that setUpClass fixture is not listed\n+    result = pytester.runpytest(\"--fixtures\")\n+    assert result.ret == 0\n+    result.stdout.no_fnmatch_line(\"*unittest_setUpClass_fixture_SampleTestCase*\")\n+\n+    # Run pytest with --fixtures -v and check that setUpClass fixture is listed\n+    result = pytester.runpytest(\"--fixtures\", \"-v\")\n+    assert result.ret == 0\n+    result.stdout.fnmatch_line(\"*unittest_setUpClass_fixture_SampleTestCase*\")\n     testpath = pytester.makepyfile(\n         \"\"\"\n         import unittest\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..c8cab72 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -574,6 +574,34 @@ def test_class_weights_cv():\n     assert_array_equal(reg.predict([[-.2, 2]]), np.array([-1]))\n \n \n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    rng = np.random.RandomState(42)\n+\n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-.8, -1.0],\n+                  [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+\n+    n_samples = x.shape[0]\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+    # with len(y.shape) == 1\n+    n_targets = 1\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_alphas)\n+\n+    # with len(y.shape) == 2\n+    y = np.array([[1, 1, 1, -1, -1],\n+                  [1, -1, 1, -1, 1],\n+                  [-1, -1, 1, -1, -1]]).transpose()\n+    n_targets = y.shape[1]\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n+\n+\n def test_ridgecv_store_cv_values():\n     # Test _RidgeCV's store_cv_values attribute.\n     rng = rng = np.random.RandomState(42)\n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..2e71952 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -184,7 +184,17 @@ def test_int_overflow_mutual_info_score():\n     assert_all_finite(mutual_info_score(x.ravel(), y.ravel()))\n \n \n-def test_entropy():\n+from sklearn.metrics.cluster import fowlkes_mallows_score\n+from sklearn.utils.testing import assert_all_finite\n+\n+def test_fowlkes_mallows_score_overflow():\n+    # Test for overflow in fowlkes_mallows_score when pk and qk are large\n+    labels_true = [0] * 10**6 + [1] * 10**6\n+    labels_pred = [0] * 5 * 10**5 + [1] * 5 * 10**5 + [0] * 5 * 10**5 + [1] * 5 * 10**5\n+\n+    score = fowlkes_mallows_score(labels_true, labels_pred)\n+    assert_all_finite(score)\n+    assert score >= 0.0 and score <= 1.0\n     ent = entropy([0, 0, 42.])\n     assert_almost_equal(ent, 0.6365141, 5)\n     assert_almost_equal(entropy([]), 1)\n",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..2d1dacc 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -558,8 +558,30 @@ def test_feature_names():\n     for idx, name in enumerate(feature_names):\n         assert_equal(idx, cv.vocabulary_.get(name))\n \n-\n-def test_vectorizer_max_features():\n+def test_countvectorizer_with_custom_vocabulary():\n+    # Custom vocabulary provided\n+    vocab = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    cv = CountVectorizer(vocabulary=vocab)\n+    \n+    # Ensure vocabulary_ is not set until transform is called\n+    assert_false(hasattr(cv, \"vocabulary_\"))\n+    \n+    # get_feature_names should not raise NotFittedError\n+    feature_names = cv.get_feature_names()\n+    assert_array_equal(vocab, feature_names)\n+    \n+    # Ensure transform works without fitting\n+    corpus = [\n+        'This is the first document.',\n+        'This is the second second document.',\n+        'And the third one.',\n+        'Is this the first document?',\n+    ]\n+    X = cv.transform(corpus)\n+    assert_equal(X.shape, (4, 9))\n+    \n+    # After transform, vocabulary_ should be set\n+    assert_true(hasattr(cv, \"vocabulary_\"))\n     vec_factories = (\n         CountVectorizer,\n         TfidfVectorizer,\n",
  "scikit-learn__scikit-learn-11310": "diff --git a/sklearn/model_selection/tests/test_search.py b/sklearn/model_selection/tests/test_search.py\nindex 0b1d5f9..c92d353 100644\n--- a/sklearn/model_selection/tests/test_search.py\n+++ b/sklearn/model_selection/tests/test_search.py\n@@ -1149,7 +1149,8 @@ def test_search_cv_results_none_param():\n                            [0, None])\n \n \n-@ignore_warnings()\n+from sklearn.utils.testing import assert_true, assert_greater_equal\n+from time import time\n def test_search_cv_timing():\n     svc = LinearSVC(random_state=0)\n \n",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..22c0904 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -30,6 +30,9 @@ from sklearn.linear_model.logistic import (\n     _logistic_loss_and_grad, _logistic_grad_hess,\n     _multinomial_grad_hess, _logistic_loss,\n )\n+from sklearn.metrics.scorer import get_scorer\n+from sklearn.linear_model import _log_reg_scoring_path\n+from sklearn.utils._testing import assert_array_almost_equal\n \n X = [[-1, 0], [0, 1], [1, 1]]\n X_sp = sp.csr_matrix(X)\n@@ -491,8 +494,32 @@ def test_logistic_cv():\n     scores = np.asarray(list(lr_cv.scores_.values()))\n     assert_array_equal(scores.shape, (1, 3, 1))\n \n-\n-def test_multinomial_logistic_regression_string_inputs():\n+@pytest.mark.parametrize('scoring, multiclass_agg_list',\n+                         [('accuracy', ['']),\n+                          ('precision', ['_macro', '_weighted']),\n+                          ('f1', ['_macro', '_weighted']),\n+                          ('neg_log_loss', ['']),\n+                          ('recall', ['_macro', '_weighted'])])\n+def test_logistic_cv_multinomial_score(scoring, multiclass_agg_list):\n+    # test that LogisticRegressionCV uses the right score to compute its\n+    # cross-validation scores when using a multinomial scoring\n+    # see https://github.com/scikit-learn/scikit-learn/issues/8720\n+    X, y = make_classification(n_samples=100, random_state=0, n_classes=3,\n+                               n_informative=6)\n+    train, test = np.arange(80), np.arange(80, 100)\n+    lr = LogisticRegression(C=1., solver='lbfgs', multi_class='multinomial')\n+    # we use lbfgs to support multinomial\n+    params = lr.get_params()\n+    # we store the params to set them further in _log_reg_scoring_path\n+    for key in ['C', 'n_jobs', 'warm_start']:\n+        del params[key]\n+    lr.fit(X[train], y[train])\n+    for averaging in multiclass_agg_list:\n+        scorer = get_scorer(scoring + averaging)\n+        assert_array_almost_equal(\n+            _log_reg_scoring_path(X, y, train, test, Cs=[1.],\n+                                  scoring=scorer, **params)[2][0],\n+            scorer(lr, X[test], y[test]))\n     # Test with string labels for LogisticRegression(CV)\n     n_samples, n_features, n_classes = 50, 5, 3\n     X_ref, y = make_classification(n_samples=n_samples, n_features=n_features,\n",
  "scikit-learn__scikit-learn-12585": "diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 4752f9c..47109b8 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -167,7 +167,16 @@ def test_clone_sparse_matrices():\n         assert_array_equal(clf.empty.toarray(), clf_cloned.empty.toarray())\n \n \n-def test_repr():\n+from sklearn.base import clone\n+from sklearn.preprocessing import StandardScaler\n+\n+def test_clone_estimator_types():\n+    # Check that clone works for parameters that are types rather than instances\n+    scaler = StandardScaler(with_mean=StandardScaler)\n+    cloned_scaler = clone(scaler)\n+\n+    # Ensure that the cloned object has the same class type parameter\n+    assert scaler.with_mean is cloned_scaler.with_mean\n     # Smoke test the repr of the base estimator.\n     my_estimator = MyEstimator()\n     repr(my_estimator)\n",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..1636782 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -5,6 +5,34 @@ from distutils.version import LooseVersion\n import numpy as np\n from scipy import linalg\n \n+@pytest.mark.parametrize('init_copy_X, fit_copy_X, expected_copy_X', [\n+    (True, None, True),\n+    (False, None, False),\n+    (True, True, True),\n+    (True, False, False),\n+    (False, True, True),\n+    (False, False, False),\n+])\n+def test_lasso_lars_ic_copyX_default_behavior(init_copy_X, fit_copy_X, expected_copy_X):\n+    \"\"\"\n+    Test that the LassoLarsIC uses the correct copy_X value\n+    depending on whether it is set during initialization or fit.\n+    \"\"\"\n+    lasso_lars = LassoLarsIC(copy_X=init_copy_X, precompute=False)\n+    rng = np.random.RandomState(0)\n+    X = rng.normal(0, 1, (100, 5))\n+    X_copy = X.copy()\n+    y = X[:, 2]\n+    \n+    # Call fit with the fit_copy_X parameter\n+    if fit_copy_X is not None:\n+        lasso_lars.fit(X, y, copy_X=fit_copy_X)\n+    else:\n+        lasso_lars.fit(X, y)\n+\n+    # Check if X was copied based on expected_copy_X\n+    assert expected_copy_X == np.array_equal(X, X_copy)\n+\n import pytest\n \n from sklearn.model_selection import train_test_split\n@@ -18,7 +46,8 @@ from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import TempMemmap\n from sklearn.exceptions import ConvergenceWarning\n from sklearn import linear_model, datasets\n-from sklearn.linear_model.least_angle import _lars_path_residues\n+from sklearn.linear_model.least_angle import _lars_path_residues, LassoLarsIC\n+import numpy as np\n \n diabetes = datasets.load_diabetes()\n X, y = diabetes.data, diabetes.target\n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..9a6063b 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -494,6 +494,36 @@ def test_shuffle_stratifiedkfold():\n     check_cv_coverage(kf0, X_40, y, groups=None, expected_n_splits=5)\n \n \n+def test_stratifiedkfold_shuffling_behavior():\n+    # This test checks the shuffling behavior of StratifiedKFold to ensure that\n+    # when shuffling is enabled, the same samples across splits appear in different\n+    # orders, verifying that the shuffling within each class is happening.\n+    \n+    # Create a dataset with an equal number of samples per class\n+    X = np.arange(20)\n+    y = np.array([0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3])\n+    \n+    # Perform StratifiedKFold with shuffle=True and different random states\n+    kf1 = StratifiedKFold(n_splits=5, shuffle=True, random_state=0)\n+    kf2 = StratifiedKFold(n_splits=5, shuffle=True, random_state=1)\n+    \n+    # Collect test indices for each fold\n+    test_indices_kf1 = [test_idx for _, test_idx in kf1.split(X, y)]\n+    test_indices_kf2 = [test_idx for _, test_idx in kf2.split(X, y)]\n+    \n+    # Assert that the test indices are different across different random states\n+    # This ensures that shuffling is occurring and affects the sample order\n+    assert test_indices_kf1 != test_indices_kf2\n+\n+    # Repeat the test for another set of random states and verify again\n+    kf3 = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n+    test_indices_kf3 = [test_idx for _, test_idx in kf3.split(X, y)]\n+    \n+    # Assert indices lists from different random states are not equal\n+    assert test_indices_kf1 != test_indices_kf3\n+    assert test_indices_kf2 != test_indices_kf3\n+\n+\n def test_kfold_can_detect_dependent_samples_on_digits():  # see #2372\n     # The digits samples are dependent: they are apparently grouped by authors\n     # although we don't have any information on the groups segment locations\n",
  "scikit-learn__scikit-learn-13135": "diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py\nindex a18a1c5..561f34e 100644\n--- a/sklearn/preprocessing/tests/test_discretization.py\n+++ b/sklearn/preprocessing/tests/test_discretization.py\n@@ -203,6 +203,20 @@ def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n     assert_array_equal(expected_3bins, Xt.ravel())\n \n \n+@pytest.mark.parametrize(\n+    'strategy, expected_2bins, expected_3bins, expected_5bins',\n+    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2], [0, 0, 1, 1, 4, 4]),\n+     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2], [0, 0, 1, 2, 3, 4]),\n+     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2], [0, 1, 2, 3, 4, 4])])\n+def test_nonuniform_strategies_with_five_bins(strategy, expected_2bins, expected_3bins, expected_5bins):\n+    X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n+\n+    # with 5 bins\n+    est = KBinsDiscretizer(n_bins=5, strategy=strategy, encode='ordinal')\n+    Xt = est.fit_transform(X)\n+    assert_array_equal(expected_5bins, Xt.ravel())\n+\n+\n @pytest.mark.parametrize('strategy', ['uniform', 'kmeans', 'quantile'])\n @pytest.mark.parametrize('encode', ['ordinal', 'onehot', 'onehot-dense'])\n def test_inverse_transform(strategy, encode):\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..49a888e 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -591,11 +591,13 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n                             max_iter=max_iter, tol=tol)\n \n         # check if fit_predict(X) is equivalent to fit(X).predict(X)\n-        f = copy.deepcopy(g)\n-        Y_pred1 = f.fit(X).predict(X)\n-        Y_pred2 = g.fit_predict(X)\n-        assert_array_equal(Y_pred1, Y_pred2)\n-        assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n \n \n def test_gaussian_mixture_fit():\n",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\nindex 318940e..b9be1e1 100644\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -1057,8 +1057,30 @@ def test_pipeline_memory():\n     finally:\n         shutil.rmtree(cachedir)\n \n-\n-def test_make_pipeline_memory():\n+def test_pipeline_len():\n+    from sklearn import svm\n+    from sklearn.datasets import make_classification\n+    from sklearn.feature_selection import SelectKBest, f_regression\n+    from sklearn.pipeline import Pipeline\n+    \n+    # Generate some data\n+    X, y = make_classification(n_informative=5, n_redundant=0, random_state=42)\n+    \n+    # Create a pipeline\n+    anova_filter = SelectKBest(f_regression, k=5)\n+    clf = svm.SVC(kernel='linear')\n+    pipe = Pipeline([('anova', anova_filter), ('svc', clf)])\n+    \n+    # Test the length of the pipeline\n+    assert len(pipe) == 2\n+\n+    # Test for empty pipeline\n+    empty_pipe = Pipeline([])\n+    assert len(empty_pipe) == 0\n+\n+    # Test for pipeline with one step\n+    single_step_pipe = Pipeline([('anova', anova_filter)])\n+    assert len(single_step_pipe) == 1\n     cachedir = mkdtemp()\n     if LooseVersion(joblib_version) < LooseVersion('0.12'):\n         # Deal with change of API in joblib\n@@ -1070,4 +1092,4 @@ def test_make_pipeline_memory():\n     pipeline = make_pipeline(DummyTransf(), SVC())\n     assert pipeline.memory is None\n \n-    shutil.rmtree(cachedir)\n+    shutil.rmtree(cachedir)\n",
  "scikit-learn__scikit-learn-13496": "",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..268f134 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -504,6 +504,25 @@ def test_transform():\n     assert_array_almost_equal(eclf1.transform(X),\n                               eclf2.transform(X))\n     assert_array_almost_equal(\n-            eclf3.transform(X).swapaxes(0, 1).reshape((4, 6)),\n-            eclf2.transform(X)\n-    )\n+        eclf3.transform(X).swapaxes(0, 1).reshape((4, 6)),\n+        eclf2.transform(X)\n+    )\n+\n+\n+@pytest.mark.filterwarnings('ignore: Default solver will be changed')  # 0.22\n+@pytest.mark.filterwarnings('ignore: Default multi_class will')  # 0.22\n+@pytest.mark.parametrize(\n+    \"X, y, voter\",\n+    [(load_iris(return_X_y=True)[0], load_iris(return_X_y=True)[1], VotingClassifier(\n+        [('lr', LogisticRegression()), ('rf', RandomForestClassifier(n_estimators=5))])),\n+     (np.random.random((100, 5)), np.random.random(100), VotingRegressor(\n+         [('lr', LinearRegression()), ('rf', RandomForestRegressor(n_estimators=5))]))]\n+)\n+def test_none_estimator_with_weights(X, y, voter):\n+    # Check that an estimator can be set to None and passing some weight\n+    # Regression test for https://github.com/scikit-learn/scikit-learn/issues/13777\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    voter.set_params(lr=None)\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    y_pred = voter.predict(X)\n+    assert y_pred.shape == y.shape\n",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..d9de725 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -328,7 +328,36 @@ def test_export_text_errors():\n                          export_text, clf, spacing=0)\n \n \n-def test_export_text():\n+def test_export_text_with_single_feature():\n+    # Test with DecisionTreeClassifier and a single feature\n+    X_single_feat = [[-2], [-1], [0], [1], [2]]\n+    y_single_feat = [-1, -1, 0, 1, 1]\n+    clf_single_feat = DecisionTreeClassifier(max_depth=2, random_state=0)\n+    clf_single_feat.fit(X_single_feat, y_single_feat)\n+\n+    expected_report = dedent(\"\"\"\n+    |--- sepal_length <= 0.00\n+    |   |--- class: -1\n+    |--- sepal_length >  0.00\n+    |   |--- class: 1\n+    \"\"\").lstrip()\n+\n+    assert export_text(clf_single_feat, feature_names=['sepal_length']) == expected_report\n+\n+    # Test with DecisionTreeRegressor and a single feature\n+    X_single_reg = [[-2], [-1], [0], [1], [2]]\n+    y_single_reg = [-1.0, -1.0, 0.0, 1.0, 1.0]\n+    reg_single_feat = DecisionTreeRegressor(max_depth=2, random_state=0)\n+    reg_single_feat.fit(X_single_reg, y_single_reg)\n+\n+    expected_report_reg = dedent(\"\"\"\n+    |--- sepal_length <= 0.0\n+    |   |--- value: -1.0\n+    |--- sepal_length >  0.0\n+    |   |--- value: 1.0\n+    \"\"\").lstrip()\n+\n+    assert export_text(reg_single_feat, feature_names=['sepal_length'], decimals=1) == expected_report_reg\n     clf = DecisionTreeClassifier(max_depth=2, random_state=0)\n     clf.fit(X, y)\n \n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..f90211c 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1532,6 +1532,33 @@ def test_LogisticRegressionCV_GridSearchCV_elastic_net_ovr():\n     assert (lrcv.predict(X_test) == gs.predict(X_test)).mean() >= .8\n \n \n+@pytest.mark.parametrize('penalty', ('l2', 'elasticnet'))\n+@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial', 'auto'))\n+def test_LogisticRegressionCV_no_refit_different_penalties(penalty, multi_class):\n+    # Test LogisticRegressionCV with different penalties and no refit\n+\n+    n_classes = 3\n+    n_features = 20\n+    X, y = make_classification(n_samples=200, n_classes=n_classes,\n+                               n_informative=n_classes, n_features=n_features,\n+                               random_state=0)\n+\n+    Cs = np.logspace(-4, 4, 3)\n+    if penalty == 'elasticnet':\n+        l1_ratios = np.linspace(0, 1, 2)\n+    else:\n+        l1_ratios = None\n+\n+    lrcv = LogisticRegressionCV(penalty=penalty, Cs=Cs, solver='saga',\n+                                l1_ratios=l1_ratios, random_state=0,\n+                                multi_class=multi_class, refit=False)\n+    lrcv.fit(X, y)\n+    assert lrcv.C_.shape == (n_classes,)\n+    if penalty == 'elasticnet':\n+        assert lrcv.l1_ratio_.shape == (n_classes,)\n+    assert lrcv.coef_.shape == (n_classes, n_features)\n+\n+\n @pytest.mark.parametrize('multi_class', ('ovr', 'multinomial'))\n def test_LogisticRegressionCV_no_refit(multi_class):\n     # Test LogisticRegressionCV attribute shapes when refit is False\n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/tests/test_show_versions.py b/sklearn/utils/tests/test_show_versions.py\nindex fa39255..8fe1f55 100644\n--- a/sklearn/utils/tests/test_show_versions.py\n+++ b/sklearn/utils/tests/test_show_versions.py\n@@ -23,6 +23,7 @@ def test_get_deps_info():\n     assert 'Cython' in deps_info\n     assert 'pandas' in deps_info\n     assert 'matplotlib' in deps_info\n+    assert 'joblib' in deps_info  # Ensure joblib is included in dependencies\n \n \n def test_show_versions_with_blas(capsys):\n@@ -30,4 +31,5 @@ def test_show_versions_with_blas(capsys):\n     out, err = capsys.readouterr()\n     assert 'python' in out\n     assert 'numpy' in out\n-    assert 'BLAS' in out\n+    assert 'BLAS' in out\n+    assert 'joblib' in out  # Verify joblib appears in the output of show_versions\n",
  "scikit-learn__scikit-learn-14496": "diff --git a/sklearn/cluster/tests/test_optics.py b/sklearn/cluster/tests/test_optics.py\nindex 6c9dac3..f10971d 100644\n--- a/sklearn/cluster/tests/test_optics.py\n+++ b/sklearn/cluster/tests/test_optics.py\n@@ -77,8 +77,29 @@ def test_the_extract_xi_labels(ordering, clusters, expected):\n \n     assert_array_equal(labels, expected)\n \n-\n-def test_extract_xi():\n+from sklearn.cluster import OPTICS\n+from sklearn.utils import shuffle\n+import numpy as np\n+from numpy.testing import assert_array_equal\n+\n+def test_float_min_samples():\n+    # Test OPTICS with min_samples as a float\n+    rng = np.random.RandomState(42)\n+    X = rng.rand(100, 2)\n+    \n+    # Expected behavior: min_samples = max(2, 0.1 * 100) = 10\n+    clust = OPTICS(min_samples=0.1).fit(X)\n+    assert clust.min_samples == 10\n+\n+    # Additional edge case: min_samples slightly greater than 0.02 but less than 0.03\n+    clust = OPTICS(min_samples=0.025).fit(X)\n+    assert clust.min_samples == 3\n+\n+    # Check if OPTICS with very small min_samples float defaults to min 2\n+    clust = OPTICS(min_samples=0.01).fit(X)\n+    assert clust.min_samples == 2\n+\n+    print(\"All float min_samples tests passed.\")\n     # small and easy test (no clusters around other clusters)\n     # but with a clear noise data.\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-14710": "diff --git a/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py b/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\nindex 7e8bccd..c6f0d4c 100644\n--- a/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\n+++ b/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\n@@ -414,4 +414,43 @@ def test_infinite_values_missing_values():\n                                                learning_rate=1, max_depth=2)\n \n     assert stump_clf.fit(X, y_isinf).score(X, y_isinf) == 1\n-    assert stump_clf.fit(X, y_isnan).score(X, y_isnan) == 1\n+    assert stump_clf.fit(X, y_isnan).score(X, y_isnan) == 1\n+\n+@pytest.mark.parametrize(\"scoring\", [None, 'accuracy', 'f1', 'roc_auc'])\n+def test_string_target_early_stopping(scoring):\n+    # Regression test for handling string targets with early stopping\n+    rng = np.random.RandomState(42)\n+    X = rng.randn(100, 10)\n+    y = np.array(['x'] * 50 + ['y'] * 50, dtype=object)\n+    gbrt = HistGradientBoostingClassifier(n_iter_no_change=10, scoring=scoring)\n+    gbrt.fit(X, y)\n+    assert hasattr(gbrt, 'train_score_')\n+\n+def test_string_target_multiclass_early_stopping():\n+    # Test the classifier with multi-class string targets\n+    rng = np.random.RandomState(42)\n+    X = rng.randn(150, 10)\n+    y = np.array(['class1'] * 50 + ['class2'] * 50 + ['class3'] * 50, dtype=object)\n+    gbrt = HistGradientBoostingClassifier(n_iter_no_change=10)\n+    gbrt.fit(X, y)\n+    assert hasattr(gbrt, 'train_score_')\n+\n+def test_early_stopping_with_validation_set():\n+    # Check early stopping with explicit validation set\n+    rng = np.random.RandomState(42)\n+    X = rng.randn(100, 10)\n+    y = np.array(['x'] * 50 + ['y'] * 50, dtype=object)\n+    X_train, X_val = X[:80], X[80:]\n+    y_train, y_val = y[:80], y[80:]\n+    gbrt = HistGradientBoostingClassifier(n_iter_no_change=5, validation_fraction=None)\n+    gbrt.fit(X_train, y_train, X_val, y_val)\n+    assert hasattr(gbrt, 'validation_score_')\n+\n+def test_large_input_dataset_with_early_stopping():\n+    # Test with a larger dataset\n+    rng = np.random.RandomState(42)\n+    X = rng.randn(1000, 20)\n+    y = np.array(['a'] * 500 + ['b'] * 500, dtype=object)\n+    gbrt = HistGradientBoostingClassifier(n_iter_no_change=10)\n+    gbrt.fit(X, y)\n+    assert len(gbrt.train_score_) > 0\n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..37d1bd9 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,6 +680,21 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n+from scipy import sparse\n+from sklearn import svm\n+\n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for ZeroDivisionError when support_vectors_ is empty\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..1e86c56 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -97,8 +97,31 @@ def test_strip_accents():\n     expected = 'this is a test'\n     assert strip_accents_unicode(a) == expected\n \n+def test_strip_accents_nfkd():\n+    # Test case for strings that are already in NFKD form\n+    # LATIN SMALL LETTER N WITH TILDE (\u00f1) vs. LATIN SMALL LETTER N followed by COMBINING TILDE (n\u0303)\n+    s1 = chr(241)  # \u00f1\n+    s2 = chr(110) + chr(771)  # n\u0303\n+\n+    # Expected outcome is to strip to 'n'\n+    expected = 'n'\n+    assert strip_accents_unicode(s1) == expected, f\"Expected {expected}, got {strip_accents_unicode(s1)}\"\n+    assert strip_accents_unicode(s2) == expected, f\"Expected {expected}, got {strip_accents_unicode(s2)}\"\n+\n+    # Test with multiple combining marks\n+    a = \"o\\u0308\\u0304\"  # o with diaeresis and macron\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Combining marks by themselves\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"  # grave, acute, circumflex, tilde\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n \n-def test_to_ascii():\n+    # Multiple different letters with accents\n+    a = \"a\\u0300e\\u0301i\\u0302o\\u0303u\\u0304\"\n+    expected = \"aeiou\"\n+    assert strip_accents_unicode(a) == expected\n     # check some classical latin accentuated symbols\n     a = '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb'\n     expected = 'aaaaaaceeee'\n",
  "scikit-learn__scikit-learn-25102": "diff --git a/sklearn/feature_selection/tests/test_base.py b/sklearn/feature_selection/tests/test_base.py\nindex bf2d07e..819c439 100644\n--- a/sklearn/feature_selection/tests/test_base.py\n+++ b/sklearn/feature_selection/tests/test_base.py\n@@ -108,9 +108,44 @@ def test_inverse_transform_sparse():\n     with pytest.raises(ValueError):\n         sel.inverse_transform(np.array([[1], [2]]))\n \n+def test_preserve_dtypes_in_transformers():\n+    \"\"\"Check that transformers preserve input DataFrame dtypes in the output.\"\"\"\n+\n+    pd = pytest.importorskip(\"pandas\")\n+    np = pytest.importorskip(\"numpy\")\n+\n+    X = pd.DataFrame(\n+        {\n+            \"int_col\": pd.Series([1, 2, 3], dtype=np.int32),\n+            \"float_col\": pd.Series([1.0, 2.5, 3.5], dtype=np.float64),\n+            \"cat_col\": pd.Series([\"x\", \"y\", \"z\"], dtype=\"category\"),\n+        }\n+    )\n+\n+    # Pretend transformer that selects every other feature\n+    class StepSelector:\n+        def __init__(self, step=2):\n+            self.step = step\n+\n+        def fit(self, X, y=None):\n+            return self\n+\n+        def transform(self, X):\n+            return X.iloc[:, ::self.step]\n+\n+        def set_output(self, transform=\"pandas\"):\n+            # Only a dummy placeholder for the purpose of this test\n+            return self\n+\n+    sel = StepSelector(step=2).set_output(transform=\"pandas\")\n+    sel.fit(X)\n+\n+    output = sel.transform(X)\n+    assert output.dtypes[\"int_col\"] == X.dtypes[\"int_col\"]\n+    assert output.dtypes[\"cat_col\"] == X.dtypes[\"cat_col\"]\n \n def test_get_support():\n     sel = StepSelector()\n     sel.fit(X, y)\n     assert_array_equal(support, sel.get_support())\n-    assert_array_equal(support_inds, sel.get_support(indices=True))\n+    assert_array_equal(support_inds, sel.get_support(indices=True))\n",
  "scikit-learn__scikit-learn-25232": "diff --git a/sklearn/impute/tests/test_impute.py b/sklearn/impute/tests/test_impute.py\nindex ee482a8..3a449d0 100644\n--- a/sklearn/impute/tests/test_impute.py\n+++ b/sklearn/impute/tests/test_impute.py\n@@ -1511,7 +1511,11 @@ def test_most_frequent(expected, array, dtype, extra_value, n_repeat):\n )\n def test_iterative_imputer_keep_empty_features(initial_strategy):\n     \"\"\"Check the behaviour of the iterative imputer with different initial strategy\n-    and keeping empty features (i.e. features containing only missing values).\n+import numpy as np\n+import pytest\n+from numpy.testing import assert_array_equal\n+from sklearn.experimental import enable_iterative_imputer  # noqa\n+from sklearn.impute import IterativeImputer\n     \"\"\"\n     X = np.array([[1, np.nan, 2], [3, np.nan, np.nan]])\n \n",
  "scikit-learn__scikit-learn-25931": "",
  "scikit-learn__scikit-learn-25973": "",
  "scikit-learn__scikit-learn-26323": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex b52e888..2896d9f 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -20,6 +20,10 @@ from sklearn.compose import (\n     make_column_selector,\n )\n from sklearn.exceptions import NotFittedError\n+import pytest\n+import pandas as pd\n+import numpy as np\n+from sklearn.feature_selection import VarianceThreshold\n from sklearn.preprocessing import FunctionTransformer\n from sklearn.preprocessing import StandardScaler, Normalizer, OneHotEncoder\n \n",
  "scikit-learn__scikit-learn-9288": "diff --git a/sklearn/cluster/tests/test_k_means.py b/sklearn/cluster/tests/test_k_means.py\nindex abeeff0..d1e8e12 100644\n--- a/sklearn/cluster/tests/test_k_means.py\n+++ b/sklearn/cluster/tests/test_k_means.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for K-means\"\"\"\n import sys\n \n@@ -13,6 +14,9 @@ from sklearn.utils.testing import assert_almost_equal\n from sklearn.utils.testing import assert_raises\n from sklearn.utils.testing import assert_raises_regex\n from sklearn.utils.testing import assert_warns\n+from sklearn.cluster import KMeans\n+import numpy as np\n+from sklearn.utils._testing import assert_array_equal\n from sklearn.utils.testing import assert_warns_message\n from sklearn.utils.testing import if_safe_multiprocessing_with_blas\n from sklearn.utils.testing import assert_raise_message\n",
  "sphinx-doc__sphinx-10323": "diff --git a/tests/test_directive_code.py b/tests/test_directive_code.py\nindex 949c70e..6856fb9 100644\n--- a/tests/test_directive_code.py\n+++ b/tests/test_directive_code.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the code-block directive.\"\"\"\n \n import os\n@@ -250,9 +251,32 @@ def test_LiteralIncludeReader_dedent(literal_inc_path):\n                        \"    pass\\n\"\n                        \"\\n\")\n \n+@pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n+def test_LiteralIncludeReader_dedent_and_append_and_prepend(literal_inc_path):\n+    # dedent: 2\n+    options = {'lines': '9-11', 'dedent': 2, 'prepend': 'class Foo:', 'append': '# comment'}\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    assert content == (\"class Foo:\\n\"\n+                       \"  def baz():\\n\"\n+                       \"      pass\\n\"\n+                       \"\\n\"\n+                       \"# comment\\n\")\n \n @pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n-def test_LiteralIncludeReader_tabwidth(testroot):\n+def test_LiteralIncludeReader_prepend_indentation(literal_inc_path):\n+    # Test to verify prepend indentation\n+    options = {'lines': '19-25', 'dedent': 0, 'prepend': '      <plugin>'}\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    assert content == (\"      <plugin>\\n\"\n+                       \"        <groupId>com.github.ekryd.sortpom</groupId>\\n\"\n+                       \"        <artifactId>sortpom-maven-plugin</artifactId>\\n\"\n+                       \"        <version>2.15.0</version>\\n\"\n+                       \"        <configuration>\\n\"\n+                       \"          <verifyFailOn>strict</verifyFailOn>\\n\"\n+                       \"        </configuration>\\n\"\n+                       \"      </plugin>\\n\")\n     # tab-width: 4\n     options = {'tab-width': 4, 'pyobject': 'Qux'}\n     reader = LiteralIncludeReader(testroot / 'target.py', options, DUMMY_CONFIG)\n",
  "sphinx-doc__sphinx-10449": "",
  "sphinx-doc__sphinx-10466": "",
  "sphinx-doc__sphinx-10673": "",
  "sphinx-doc__sphinx-7440": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 975a00f..b8f7b59 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -148,7 +148,37 @@ def test_glossary(app):\n     assert (\"term4\", \"term4\", \"term\", \"index\", \"term-term4\", -1) in objects\n \n \n-def test_glossary_warning(app, status, warning):\n+def test_case_insensitive_glossary_terms(app):\n+    # Test to ensure terms with different cases are recognized as distinct terms\n+    text = (\".. glossary::\\n\"\n+            \"\\n\"\n+            \"   MySQL\\n\"\n+            \"       A popular open-source database.\\n\"\n+            \"\\n\"\n+            \"   mysql\\n\"\n+            \"       A command-line tool for interacting with MySQL databases.\\n\")\n+\n+    # parse the glossary\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (\n+        [glossary, definition_list, ([definition_list_item, ([term, (\"MySQL\", index)],\n+                                                             definition)],\n+                                     [definition_list_item, ([term, (\"mysql\", index)],\n+                                                             definition)])],\n+    ))\n+    assert_node(doctree[0][0][0][0][1],\n+                entries=[(\"single\", \"MySQL\", \"term-MySQL\", \"main\", None)])\n+    assert_node(doctree[0][0][0][1][1],\n+                [definition, nodes.paragraph, \"A popular open-source database.\"])\n+    assert_node(doctree[0][0][1][0][1],\n+                entries=[(\"single\", \"mysql\", \"term-mysql\", \"main\", None)])\n+    assert_node(doctree[0][0][1][1],\n+                [definition, nodes.paragraph, \"A command-line tool for interacting with MySQL databases.\"])\n+\n+    # check the index\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert (\"MySQL\", \"MySQL\", \"term\", \"index\", \"term-MySQL\", -1) in objects\n+    assert (\"mysql\", \"mysql\", \"term\", \"index\", \"term-mysql\", -1) in objects\n     # empty line between terms\n     text = (\".. glossary::\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-7757": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex b3053d1..f5c7807 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -331,6 +331,21 @@ def test_signature_from_str_kwonly_args():\n     assert sig.parameters['b'].kind == Parameter.KEYWORD_ONLY\n     assert sig.parameters['b'].default == Parameter.empty\n \n+def test_signature_from_str_positional_only_with_defaults():\n+    sig = inspect.signature_from_str('(a, b=0, /, c=1)')\n+    assert list(sig.parameters.keys()) == ['a', 'b', 'c']\n+    assert sig.parameters['a'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['a'].default == Parameter.empty\n+    assert sig.parameters['b'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['b'].default == '0'\n+    assert sig.parameters['c'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['c'].default == '1'\n+    assert list(sig.parameters.keys()) == ['a', 'b']\n+    assert sig.parameters['a'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['a'].default == Parameter.empty\n+    assert sig.parameters['b'].kind == Parameter.KEYWORD_ONLY\n+    assert sig.parameters['b'].default == Parameter.empty\n+\n \n @pytest.mark.skipif(sys.version_info < (3, 8),\n                     reason='python-3.8 or above is required')\n",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..36784c5 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -52,7 +53,24 @@ def test_MockObject():\n     assert isinstance(obj.other_method(), SubClass)\n \n \n-def test_mock():\n+def test_generic_typed_classes():\n+    from typing import Generic, TypeVar\n+\n+    T = TypeVar('T')\n+\n+    class SubClass(Generic[T], mock.SomeClass):\n+        \"\"\"docstring of SubClass\"\"\"\n+\n+    obj = SubClass()\n+    assert SubClass.__doc__ == \"docstring of SubClass\"\n+    assert isinstance(obj, SubClass)\n+\n+    class SubClass2(mock.SomeClass[T]):\n+        \"\"\"docstring of SubClass2\"\"\"\n+\n+    obj2 = SubClass2()\n+    assert SubClass2.__doc__ == \"docstring of SubClass2\"\n+    assert isinstance(obj2, SubClass2)\n     modname = 'sphinx.unknown'\n     submodule = modname + '.submodule'\n     assert modname not in sys.modules\n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex 464108d..247dcb8 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -1272,6 +1272,22 @@ def test_automethod_for_decorated(app):\n         '',\n     ]\n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_autoinit_decorated(app):\n+    options = {\"members\": None,\n+               \"undoc-members\": None}\n+    actual = do_autodoc(app, 'class', 'target.decorator.SampleClassWithDecoratedInit', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: SampleClassWithDecoratedInit',\n+        '   :module: target.decorator',\n+        '',\n+        '   .. py:method:: __init__(self)',\n+        '      :module: target.decorator',\n+        '',\n+        '      docstring for the decorated __init__',\n+        '',\n+    ]\n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_abstractmethods(app):\n",
  "sphinx-doc__sphinx-7985": "",
  "sphinx-doc__sphinx-8035": "diff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex ad1d950..fd70b67 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_private_members\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -13,7 +14,29 @@ import pytest\n from test_ext_autodoc import do_autodoc\n \n \n+from sphinx.testing.util import SphinxTestApp\n+\n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_specific_private_members(app: SphinxTestApp):\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None, \"private-members\": \"_private_method,_another_private\"}\n+    actual = do_autodoc(app, 'module', 'target.private_class', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private_class',\n+        '',\n+        '',\n+        '.. py:method:: PrivateClass._private_method()',\n+        '   :module: target.private_class',\n+        '',\n+        '   _private_method is a docstring.',\n+        '',\n+        '.. py:method:: PrivateClass._another_private()',\n+        '   :module: target.private_class',\n+        '',\n+        '   _another_private is a docstring.',\n+        '',\n+    ]\n def test_private_field(app):\n     app.config.autoclass_content = 'class'\n     options = {\"members\": None}\n",
  "sphinx-doc__sphinx-8120": "diff --git a/tests/test_intl.py b/tests/test_intl.py\nindex 58339b1..4f06f07 100644\n--- a/tests/test_intl.py\n+++ b/tests/test_intl.py\n@@ -1281,11 +1281,83 @@ def test_image_glob_intl_using_figure_language_filename(app):\n                 candidates={'application/pdf': 'subdir/svgimg.pdf',\n                             'image/svg+xml': 'subdir/svgimg.svg'})\n \n+\n+from babel.messages.catalog import Catalog\n+from sphinx import locale\n+import pytest\n+from sphinx.util.osutil import relpath\n+from babel.messages import pofile, mofile\n+\n+@pytest.mark.sphinx('html', testroot='basic', confoverrides={'language': 'da'})\n+def test_custom_translation_da(make_app, app_params, sphinx_test_tempdir):\n+    try:\n+        # clear translators cache\n+        locale.translators.clear()\n+\n+        # prepare message catalog (.po)\n+        locale_dir = sphinx_test_tempdir / 'basic' / 'locale' / 'da' / 'LC_MESSAGES'\n+        locale_dir.makedirs()\n+        with (locale_dir / 'sphinx.po').open('wb') as f:\n+            catalog = Catalog()\n+            catalog.add('Fig. %s', 'Foobar %s')\n+            catalog.add('Listing %s', 'Whatever %s')\n+            pofile.write_po(f, catalog)\n+\n+        # construct application and convert po file to .mo\n+        args, kwargs = app_params\n+        app = make_app(*args, **kwargs)\n+        assert (locale_dir / 'sphinx.mo').exists()\n+        assert app.translator.gettext('Fig. %s') == 'Foobar %s'\n+        assert app.translator.gettext('Listing %s') == 'Whatever %s'\n+\n+        app.build()\n+        content = (app.outdir / 'index.html').read_text()\n+        assert 'Foobar 1' in content\n+        assert 'Whatever 1' in content\n+    finally:\n+        locale.translators.clear()\n+\n     assert isinstance(doctree[0][3], nodes.figure)\n     assert_node(doctree[0][3][0], nodes.image, uri='subdir/svgimg.*',\n                 candidates={'application/pdf': 'subdir/svgimg.pdf',\n                             'image/svg+xml': 'subdir/svgimg.svg'})\n \n \n+from babel.messages.catalog import Catalog\n+from sphinx import locale\n+import pytest\n+from sphinx.util.osutil import relpath\n+from babel.messages import pofile, mofile\n+\n+@pytest.mark.sphinx('html', testroot='basic', confoverrides={'language': 'da'})\n+def test_custom_translation_da(make_app, app_params, sphinx_test_tempdir):\n+    try:\n+        # clear translators cache\n+        locale.translators.clear()\n+\n+        # prepare message catalog (.po)\n+        locale_dir = sphinx_test_tempdir / 'basic' / 'locale' / 'da' / 'LC_MESSAGES'\n+        locale_dir.makedirs()\n+        with (locale_dir / 'sphinx.po').open('wb') as f:\n+            catalog = Catalog()\n+            catalog.add('Fig. %s', 'Foobar %s')\n+            catalog.add('Listing %s', 'Whatever %s')\n+            pofile.write_po(f, catalog)\n+\n+        # construct application and convert po file to .mo\n+        args, kwargs = app_params\n+        app = make_app(*args, **kwargs)\n+        assert (locale_dir / 'sphinx.mo').exists()\n+        assert app.translator.gettext('Fig. %s') == 'Foobar %s'\n+        assert app.translator.gettext('Listing %s') == 'Whatever %s'\n+\n+        app.build()\n+        content = (app.outdir / 'index.html').read_text()\n+        assert 'Foobar 1' in content\n+        assert 'Whatever 1' in content\n+    finally:\n+        locale.translators.clear()\n+\n+\n def getwarning(warnings):\n-    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n+    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n",
  "sphinx-doc__sphinx-8269": "",
  "sphinx-doc__sphinx-8459": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex d1881df..cd71ed9 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_configs\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -8,6 +9,49 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+@pytest.mark.skipif(sys.version_info < (3, 7), reason='python 3.7+ is required.')\n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    srcdir='autodoc_typehints_description_and_type_aliases',\n+                    confoverrides={\n+                        'autodoc_typehints': 'description',\n+                        'autodoc_type_aliases': {'JSONObject': 'types.JSONObject'}\n+                    })\n+def test_autodoc_typehints_with_aliases(app):\n+    (app.srcdir / 'types.py').write_text('''\n+from typing import Any, Dict\n+\n+JSONObject = Dict[str, Any]\n+\n+def sphinx_doc(data: JSONObject) -> JSONObject:\n+    \"\"\"Does it work.\n+\n+    Args:\n+        data: Does it args.\n+\n+    Returns:\n+        Does it work in return.\n+    \"\"\"\n+    return {}\n+''')\n+    (app.srcdir / 'conf.py').write_text('''\n+autodoc_typehints = 'description'\n+autodoc_type_aliases = {\n+    'JSONObject': 'types.JSONObject',\n+}\n+''')\n+    (app.srcdir / 'index.rst').write_text('''\n+.. automodule:: types\n+    :members:\n+''')\n+    app.build()\n+    output = (app.outdir / 'index.txt').read_text()\n+    assert 'data (types.JSONObject)' in output\n+    assert 'Return type: types.JSONObject' in output\n+\n+import pytest\n+import sys\n+from sphinx.testing.fixtures import test_params\n+\n import platform\n import sys\n \n",
  "sphinx-doc__sphinx-8475": "",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..3a0ba3d 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -29,8 +29,17 @@ try:\n except ImportError:\n     pyximport = None\n \n-\n-def do_autodoc(app, objtype, name, options=None):\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_autodoc_with_empty_all(app):\n+    options = {'members': True}\n+    actual_output = do_autodoc(app, 'module', 'target.example', options)\n+    assert list(actual_output) == [\n+        '',\n+        '.. py:module:: target.example',\n+        '',\n+        'docstring of example module.',\n+        '',\n+    ]\n     if options is None:\n         options = {}\n     app.env.temp_data.setdefault('docname', 'index')  # set dummy docname\n",
  "sphinx-doc__sphinx-8721": "diff --git a/tests/test_ext_viewcode.py b/tests/test_ext_viewcode.py\nindex d4fba47..4d0c683 100644\n--- a/tests/test_ext_viewcode.py\n+++ b/tests/test_ext_viewcode.py\n@@ -49,6 +49,27 @@ def test_viewcode(app, status, warning):\n             '<span>    &quot;&quot;&quot;</span></div>\\n') in result\n \n \n+import pytest\n+from sphinx.testing.util import SphinxTestApp\n+from pathlib import Path\n+\n+# Test case to verify that viewcode does not generate module pages for epub by default\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode')\n+def test_viewcode_epub_disabled(app: SphinxTestApp, status, warning):\n+    app.builder.build_all()\n+    \n+    # Check that the module page does not exist\n+    assert not (Path(app.outdir) / '_modules/spam/mod1.xhtml').exists()\n+\n+# Test case to confirm that viewcode generates module pages when enabled for epub\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode',\n+                    confoverrides={'viewcode_enable_epub': True})\n+def test_viewcode_epub_enabled(app: SphinxTestApp, status, warning):\n+    app.builder.build_all()\n+    \n+    # Check that the module page exists\n+    assert (Path(app.outdir) / '_modules/spam/mod1.xhtml').exists()\n+\n @pytest.mark.sphinx(testroot='ext-viewcode', tags=['test_linkcode'])\n def test_linkcode(app, status, warning):\n     app.builder.build(['objects'])\n",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex 3c31d3d..7c03d3d 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -515,8 +515,16 @@ def test_dict_customtype():\n     # Type is unsortable, just check that it does not crash\n     assert \"<CustomType(2)>: 2\" in description\n \n+def test_object_description_enum_rendering():\n+    import enum\n \n-def test_getslots():\n+    class MyEnum(enum.Enum):\n+        ValueA = 10\n+        ValueB = 20\n+\n+    # Test if the object_description of an Enum value is correct\n+    assert inspect.object_description(MyEnum.ValueA) == \"MyEnum.ValueA\"\n+    assert inspect.object_description(MyEnum.ValueB) == \"MyEnum.ValueB\"\n     class Foo:\n         pass\n \n",
  "sphinx-doc__sphinx-9320": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\nindex ff8df08..65c3a26 100644\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -10,6 +10,7 @@\n \n import time\n from io import StringIO\n+import sys\n \n import pytest\n \n@@ -241,7 +242,42 @@ def test_default_filename(tempdir):\n     exec(conffile.read_text(), ns)\n \n \n-def test_extensions(tempdir):\n+def test_exits_when_existing_confpy(monkeypatch):\n+    # The code detects existing conf.py with path.isfile()\n+    # so we mock it as True with pytest's monkeypatch\n+\n+    def mock_isfile(path):\n+        return True\n+\n+    monkeypatch.setattr(path, 'isfile', mock_isfile)\n+\n+    qs.term_input = mock_input({\n+        'Please enter a new root path (or just Enter to exit)': ''\n+    })\n+    d = {}\n+    with pytest.raises(SystemExit):\n+        qs.ask_user(d)\n+\n+def test_exits_gracefully_with_existing_confpy_and_empty_input(monkeypatch):\n+    \"\"\"Test that sphinx-quickstart exits gracefully when Enter is pressed with an existing conf.py.\"\"\"\n+    def mock_isfile(path):\n+        return True\n+\n+    monkeypatch.setattr(path, 'isfile', mock_isfile)\n+\n+    def mock_input(prompt):\n+        if 'Please enter a new root path' in prompt:\n+            return ''\n+        return ''\n+\n+    monkeypatch.setattr('builtins.input', mock_input)\n+\n+    with pytest.raises(SystemExit) as excinfo:\n+        d = {}\n+        qs.ask_user(d)\n+\n+    assert excinfo.type == SystemExit\n+    assert excinfo.value.code == 1\n     qs.main(['-q', '-p', 'project_name', '-a', 'author',\n              '--extensions', 'foo,bar,baz', tempdir])\n \n",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..285ce81 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -54,6 +54,7 @@ from sphinx.pycode import ast\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n     (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n+    (\"(1,)\", \"(1,)\"),                             # Tuple (single element)\n     (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n",
  "sphinx-doc__sphinx-9591": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 29731ea..3aa856e 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -847,7 +847,37 @@ def test_pyproperty(app):\n     assert domain.objects['Class.prop2'] == ('index', 'Class.prop2', 'property', False)\n \n \n-def test_pydecorator_signature(app):\n+def test_pyproperty_cross_reference(app):\n+    text = (\".. py:class:: Point\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: x\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: y\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \".. py:class:: Square\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\"\n+            \"\\n\"\n+            \".. py:class:: Rectangle\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\")\n+    \n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n+\n+    # Check if the property type annotation for `end` in both `Square` and `Rectangle` is correctly cross-referenced\n+    assert_node(doctree[1][1][2], ([desc_signature, ([desc_annotation, \"property \"],\n+                                                     [desc_name, \"end\"],\n+                                                     [pending_xref, \": Point\"])],\n+                                   [desc_content, ()]))\n+    assert_node(doctree[3][1][2], ([desc_signature, ([desc_annotation, \"property \"],\n+                                                     [desc_name, \"end\"],\n+                                                     [pending_xref, \": Point\"])],\n+                                   [desc_content, ()]))\n     text = \".. py:decorator:: deco\"\n     domain = app.env.get_domain('py')\n     doctree = restructuredtext.parse(app, text)\n",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..e8c08be 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -756,7 +756,7 @@ def test_pymethod_options(app):\n \n     # :property:\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])  # Fixed\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
  "sphinx-doc__sphinx-9711": "",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..fe7c5a7 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -236,6 +236,37 @@ def test_Point2D():\n     assert p2.distance(p3) == sqrt(17)/2\n \n \n+def test_issue_distance_calculation():\n+    # Test case to validate the fix for the distance calculation issue.\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point2D(2, 0)\n+    assert p1.distance(p2) == sqrt(5)\n+\n+    # Additional test cases for robustness\n+    # Testing when both points are 3D\n+    p3 = Point3D(2, 0, 0)\n+    assert p1.distance(p3) == sqrt(5)\n+\n+    # Testing when both points are 2D should be unchanged\n+    p4 = Point2D(3, 4)\n+    p5 = Point2D(0, 0)\n+    assert p4.distance(p5) == 5\n+\n+    # Testing when one point has more dimensions than the other\n+    assert Point2D(1, 2).distance(Point3D(1, 2, 3)) == 3\n+\n+    # Testing when both points are the same in 3D\n+    assert Point3D(0, 0, 0).distance(Point3D(0, 0, 0)) == 0\n+\n+    # Testing with symbolic expressions\n+    from sympy.abc import x, y, z\n+    p6 = Point3D(x, y, z)\n+    p7 = Point2D(0, 0)\n+    assert p6.distance(p7) == sqrt(x**2 + y**2 + z**2)\n+\n+from sympy.geometry import Point, Point2D, Point3D\n+from sympy import sqrt\n+\n def test_issue_9214():\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..48201f5 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -741,6 +741,27 @@ def test_special_printers():\n     assert isinstance(func1(), mpi)\n     assert isinstance(func2(), mpi)\n \n+from sympy.utilities.lambdify import implemented_function\n+from sympy import Float\n+\n+def test_issue_evalf_recursive_implementation():\n+    # Test the resolution of evalf not calling _imp_ recursively\n+    f = implemented_function('f', lambda x: x ** 2)\n+    g = implemented_function('g', lambda x: 2 * x)\n+    \n+    # Test that f(g(x)) evaluates correctly\n+    assert f(g(2)).evalf() == Float(16), \"f(g(2)) should evaluate to 16\"\n+    \n+    # Testing another scenario with nested functions\n+    h = implemented_function('h', lambda x: x + 1)\n+    assert h(f(g(2))).evalf() == Float(17), \"h(f(g(2))) should evaluate to 17\"\n+    \n+    # Testing deeper nesting\n+    assert f(f(g(2))).evalf() == Float(256), \"f(f(g(2))) should evaluate to 256\"\n+    \n+    # Ensure original test is still covered\n+    assert f(f(2)).evalf() == Float(16), \"f(f(2)) should evaluate to 16\"\n+\n def test_true_false():\n     # We want exact is comparison here, not just ==\n     assert lambdify([], true)() is True\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..3b5d63d 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,8 +83,11 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n-\n-def test_Identity_doit():\n+    # Test the sum of all elements of Identity(n)\n+    # The sum should be equal to n, since there are n ones on the diagonal.\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit().subs(n, 3) == 3\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit().subs(n, 5) == 5\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit().subs(n, 10) == 10\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..3a3cec8 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -330,6 +330,15 @@ def test_args():\n     assert p._array_form == [3, 2, 0, 1, 5, 4]\n     p = Permutation((0, 3, 1, 2))\n     assert p._cyclic_form is None\n+\n+    # New test cases for non-disjoint cycles\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])  # Identity permutation\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([0, 2, 1])  # Non-disjoint cycles applied in order\n+    assert Permutation([[1, 2], [0, 1]]) == Permutation([1, 0, 2])  # Different order\n+    assert Permutation([[0, 2], [1, 2]]) == Permutation([1, 2, 0])  # More complex case\n+    assert Permutation([[0, 1], [1, 0]]) == Permutation([0, 1])  # Two cycles cancel out\n+\n+    # Ensure existing functionality is unaffected\n     assert p._array_form == [0, 3, 1, 2]\n     assert Permutation([0]) == Permutation((0, ))\n     assert Permutation([[0], [1]]) == Permutation(((0, ), (1, ))) == \\\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..c80181e 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -498,6 +498,15 @@ def test_len():\n \n def test_sparse_zeros_sparse_eye():\n     assert SparseMatrix.eye(3) == eye(3, cls=SparseMatrix)\n+\n+def test_sparse_hstack_vstack_issue():\n+    # Test horizontal stacking of zero-row SparseMatrices\n+    sparse_matrices_0_row = [SparseMatrix.zeros(0, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*sparse_matrices_0_row).shape == (0, 6)\n+\n+    # Test vertical stacking of zero-column SparseMatrices\n+    sparse_matrices_0_col = [SparseMatrix.zeros(n, 0) for n in range(4)]\n+    assert SparseMatrix.vstack(*sparse_matrices_0_col).shape == (6, 0)\n     assert len(SparseMatrix.eye(3)._smat) == 3\n     assert SparseMatrix.zeros(3) == zeros(3, cls=SparseMatrix)\n     assert len(SparseMatrix.zeros(3)._smat) == 0\n",
  "sympy__sympy-13372": "diff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\nindex e95146a..37d3ea8 100644\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -170,8 +170,17 @@ def test_evalf_ramanujan():\n \n # Input that for various reasons have failed at some point\n \n+from sympy import Mul, Max, Symbol, sin, exp, Rational, I, pi, oo, E, S, cos, nfloat, floor, log, factorial, ceiling\n+from sympy.core.numbers import NaN\n+from sympy.core.evalf import NS\n \n-def test_evalf_bugs():\n+x = Symbol('x')\n+y = Symbol('y')\n+n = Symbol('n')\n+\n+def test_mul_max_evalf_order():\n+    # Test the specific order that caused an UnboundLocalError\n+    assert NS(Mul(Max(0, y), x, evaluate=False).evalf()) == 'x*Max(0, y)'\n     assert NS(sin(1) + exp(-10**10), 10) == NS(sin(1), 10)\n     assert NS(exp(10**10) + sin(1), 10) == NS(exp(10**10), 10)\n     assert NS('log(1+1/10**50)', 20) == '1.0000000000000000000e-50'\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..2a1b491 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -272,8 +272,28 @@ def test_coth():\n \n     assert coth(k*pi*I) == -cot(k*pi)*I\n \n-\n-def test_coth_series():\n+def test_coth_subs_issue():\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+\n+    # Test for specific integer values that were causing issues\n+    assert e.subs(x, 2).is_real == False  # Ensure it does not raise an error\n+    assert e.subs(x, 3).is_real == False\n+    assert e.subs(x, 5).is_real == False\n+    assert e.subs(x, 6).is_real == False\n+    assert e.subs(x, 8).is_real == False\n+    assert e.subs(x, 9).is_real == False\n+    assert e.subs(x, 11).is_real == False\n+    assert e.subs(x, 12).is_real == False\n+    assert e.subs(x, 13).is_real == False\n+    assert e.subs(x, 15).is_real == False\n+    assert e.subs(x, 18).is_real == False\n+\n+    # Check other values for robustness\n+    assert e.subs(x, pi).is_real == False\n+    assert e.subs(x, 0).is_real == False\n+    assert e.subs(x, -1).is_real == False\n+    assert e.subs(x, 1).is_real == False\n     x = Symbol('x')\n     assert coth(x).series(x, 0, 8) == \\\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..7acdc13 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -165,6 +165,31 @@ def test_difference():\n     assert -1 in S.Reals - S.Naturals\n \n \n+from sympy import Symbol, FiniteSet, Interval, Complement\n+\n+def test_issue_12712():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    # Test case directly from the issue\n+    assert Complement(FiniteSet(x, y, 2), Interval(-10, 10)) == Complement(FiniteSet(x, y), Interval(-10, 10))\n+\n+    # Additional test cases\n+    # Case where one symbol and one number is within the interval\n+    assert Complement(FiniteSet(x, 5, 15), Interval(-10, 10)) == FiniteSet(x, 15)\n+\n+    # Case where all elements are symbols\n+    z = Symbol('z')\n+    assert Complement(FiniteSet(x, y, z), Interval(-10, 10)) == FiniteSet(x, y, z)\n+\n+    # Case where all elements are numbers\n+    assert Complement(FiniteSet(1, 2, 3), Interval(0, 2)) == FiniteSet(1, 3)\n+\n+    # Case with empty FiniteSet\n+    assert Complement(FiniteSet(), Interval(-10, 10)) == FiniteSet()\n+\n+    # Case with empty Interval\n+    assert Complement(FiniteSet(x, 5), Interval(10, 20)) == FiniteSet(x, 5)\n+\n def test_Complement():\n     assert Complement(Interval(1, 3), Interval(1, 2)) == Interval(2, 3, True)\n     assert Complement(FiniteSet(1, 3, 4), FiniteSet(3, 4)) == FiniteSet(1)\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..605a5bb 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,51 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643():\n+    from sympy import eye, ones, Matrix\n+    M = eye(6)\n+    V = 2 * ones(6, 2)\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    result = M.col_insert(3, V)\n+    assert result == expected\n+\n+    # Additional test cases to cover edge cases\n+    # Inserting at the beginning\n+    M = eye(3)\n+    V = Matrix([[1, 2, 3]])\n+    expected = Matrix([\n+        [1, 1, 0, 0],\n+        [2, 0, 1, 0],\n+        [3, 0, 0, 1]\n+    ])\n+    result = M.col_insert(0, V.T)\n+    assert result == expected\n+\n+    # Inserting at the end\n+    expected = Matrix([\n+        [1, 0, 0, 1],\n+        [0, 1, 0, 2],\n+        [0, 0, 1, 3]\n+    ])\n+    result = M.col_insert(3, V.T)\n+    assert result == expected\n+\n+    # Inserting a single column\n+    V = Matrix([4, 5, 6])\n+    expected = Matrix([\n+        [1, 0, 4, 0],\n+        [0, 1, 5, 0],\n+        [0, 0, 6, 1]\n+    ])\n+    result = M.col_insert(2, V)\n+    assert result == expected\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..bb308e9 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -665,8 +665,15 @@ def test_Poly_sub():\n def test_Poly_mul():\n     assert Poly(0, x).mul(Poly(0, x)) == Poly(0, x)\n     assert Poly(0, x) * Poly(0, x) == Poly(0, x)\n-\n-    assert Poly(2, x).mul(Poly(4, x)) == Poly(8, x)\n+from sympy import Poly, Symbol, S\n+\n+def test_issue_13079():\n+    x = Symbol('x')\n+    assert Poly(x)*x == Poly(x**2, x, domain='ZZ')\n+    assert x*Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert -2*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2)*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert Poly(x)*S(-2) == Poly(-2*x, x, domain='ZZ')\n     assert Poly(2, x, y) * Poly(4, x) == Poly(8, x, y)\n     assert Poly(4, x).mul(Poly(2, x, y)) == Poly(8, x, y)\n     assert Poly(4, x, y) * Poly(2, x, y) == Poly(8, x, y)\n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..d7ba46c 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -54,6 +54,27 @@ def test_printmethod():\n             return \"foo\"\n     assert latex(R(x)) == \"foo\"\n \n+def test_latex_mul_symbol_custom():\n+    # Original test cases\n+    assert latex(3*x**2*y, mul_symbol='\\\\,') == r\"3\\,x^{2}\\,y\"\n+    assert latex(1.5*3**x, mul_symbol='\\\\,') == r\"1.5 \\cdot 3^{x}\"\n+\n+    # Additional test cases\n+    # Testing with no multiplication symbol (i.e., default space)\n+    assert latex(3*x**2*y, mul_symbol=None) == r\"3 x^{2} y\"\n+\n+    # Testing with a custom string as the multiplication symbol\n+    assert latex(x*y*z, mul_symbol='*') == r\"x*y*z\"\n+\n+    # Testing with non-standard LaTeX commands\n+    assert latex(x*y*z, mul_symbol=r'\\otimes') == r\"x \\otimes y \\otimes z\"\n+\n+    # Testing with the thin space specifically\n+    assert latex(x*y**2*z, mul_symbol='\\\\,') == r\"x\\,y^{2}\\,z\"\n+\n+    # Testing integrals to ensure existing behavior is not broken\n+    assert latex(Integral(2*x**2*y, x)) == r\"\\int 2 x^{2} y\\, dx\"\n+\n \n def test_latex_basic():\n     assert latex(1 + x) == \"x + 1\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..b402770 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -403,7 +403,23 @@ def test_determinant():\n     assert M.det(method=\"berkowitz\") == z**2 - x*y\n \n \n-def test_det_LU_decomposition():\n+def test_issue_13835_determinant_with_symbolic_entries():\n+    from sympy import Matrix, symbols\n+\n+    a = symbols('a')\n+    M = lambda n: Matrix([[i + a*j for i in range(n)] for j in range(n)])\n+\n+    # Test cases from the issue description\n+    assert M(1).det() == 0\n+    assert M(2).det() == -a\n+    # Verify for size 3 - pre-evaluation form to match the issue description\n+    expr_3 = 2*a*(a + 2) + 2*a*(2*a + 1) - 3*a*(2*a + 2)\n+    assert M(3).det() == expr_3\n+    assert M(4).det() == 0\n+    # For size 5 and above, ensure no NaN or exceptions, and verify results\n+    assert M(5).det() == 0\n+    assert M(6).det() == 0\n+    assert M(7).det() == 0\n \n     for M in [Matrix(), Matrix([[1]])]:\n         assert M.det(method=\"lu\") == 1\n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..3a94e9a 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -710,6 +710,62 @@ def test_issue_10003():\n     assert P(G < -1) == S.Zero\n \n def test_precomputed_cdf():\n+    # Test for Arcsin distribution\n+    a, b = 0, 3\n+    X = Arcsin('x', a, b)\n+    assert cdf(X)(1).simplify() == 2*asin(sqrt(1/3))/pi\n+\n+    # Test for Dagum distribution\n+    p, a, b = S(1)/3, S(1)/5, 2\n+    X = Dagum('x', p, a, b)\n+    assert cdf(X)(3).simplify() == S(1)/(1 + (3/2)**(-S(1)/5))**S(1)/3\n+\n+    # Test for Erlang distribution\n+    X = Erlang('x', 1, 1)\n+    assert cdf(X)(1) == 1 - exp(-1)\n+\n+    # Test for Frechet distribution\n+    a, m, s = S(4)/3, 1, 2\n+    X = Frechet('x', a, m, s)\n+    assert cdf(X)(3).simplify() == exp(-(1)**(-S(4)/3))\n+\n+    # Test for Gamma distribution\n+    X = Gamma('x', 0.1, 2)\n+    assert cdf(X)(3).simplify() == lowergamma(S(0.1), S(1.5))/gamma(S(0.1))\n+\n+    # Test for Inverse Gamma distribution\n+    a, b = S(5)/7, 2\n+    X = GammaInverse('x', a, b)\n+    assert cdf(X)(3).simplify() == uppergamma(S(5)/7, 2/3)/gamma(S(5)/7)\n+\n+    # Test for Kumaraswamy distribution\n+    a, b = S(1)/123, 5\n+    X = Kumaraswamy('x', a, b)\n+    assert cdf(X)(S(1)/3).simplify() == S(1) - S(1 - S(1)/3)**5\n+\n+    # Test for Laplace distribution\n+    mu, b = 2, 3\n+    X = Laplace('x', mu, b)\n+    assert cdf(X)(5).simplify() == S(1)/2 + S(1)/2 - S(1)/2*exp(S(-1))\n+\n+    # Test for Logistic distribution\n+    mu, s = 1, 0.1\n+    X = Logistic('x', mu, s)\n+    assert cdf(X)(2).simplify() == 1/(1 + exp(S(-10)))\n+\n+    # Test for Nakagami distribution\n+    mu, omega = S(7)/3, 1\n+    X = Nakagami('x', mu, omega)\n+    assert cdf(X)(2).simplify() == lowergamma(mu, S(14)/3)/gamma(mu)\n+\n+    # Test for Student's T distribution\n+    nu = 10\n+    X = StudentT('x', nu)\n+    assert cdf(X)(2).simplify() == S(1)/2 + S(2)*beta_fn(nu/2, S(1)/2)*hyper((S(1)/2, nu/2 + S(1)/2), (S(3)/2,), -S(4)/10)/(sqrt(pi)*sqrt(nu)*gamma(nu/2))\n+\n+    # Test for UniformSum distribution\n+    X = UniformSum('x', 5)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x, a=0, b=0, c=1, d=0)\n     x = symbols(\"x\", real=True, finite=True)\n     mu = symbols(\"mu\", real=True, finite=True)\n     sigma, xm, alpha = symbols(\"sigma xm alpha\", positive=True, finite=True)\n",
  "sympy__sympy-13974": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bd3e825..4a4459c 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -38,6 +38,32 @@ def test_tensor_product_expand():\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n \n+def test_issue_tensor_product_powers():\n+    A, B, C, D = symbols('A,B,C,D', commutative=False)\n+    a = Symbol('a', commutative=False)\n+\n+    # Test powers of TensorProduct, check if tensor_product_simp simplifies them\n+    t1 = TP(1, 1) * TP(1, 1)\n+    assert tensor_product_simp(t1) == TP(1**2, 1**2)  # Should simplify like this\n+    assert t1.expand(tensorproduct=True) == TP(1**2, 1**2)\n+\n+    t2 = TP(1, Pauli(3)) * TP(1, Pauli(3))\n+    assert tensor_product_simp(t2) == TP(1**2, Pauli(3)**2)  # Should simplify like this\n+    assert t2.expand(tensorproduct=True) == TP(1**2, Pauli(3)**2)\n+\n+    # Test substitution based simplification\n+    assert tensor_product_simp(TP(1, 1)*TP(1, a)).subs(a, 1) == TP(1, 1)\n+    assert tensor_product_simp(TP(1, Pauli(3))*TP(1, a)).subs(a, Pauli(3)) == TP(1, Pauli(3))\n+\n+    # Original test cases from the issue\n+    assert tensor_product_simp(TP(A, B)**2) == TP(A**2, B**2)\n+    assert tensor_product_simp(TP(A, B)**3) == TP(A**3, B**3)\n+    assert tensor_product_simp(TP(A, B)-TP(C, D)**2) == TP(A, B) - TP(C**2, D**2)\n+\n+from sympy import symbols, Symbol\n+from sympy.physics.quantum import TensorProduct as TP, tensor_product_simp\n+from sympy.physics.paulialgebra import Pauli\n+\n def test_tensor_product_commutator():\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n         TP(A*B, C) - TP(B*A, C)\n",
  "sympy__sympy-14531": "",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..fad9277 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -4,6 +4,14 @@ from sympy.abc import x, y, z\n from sympy.utilities.pytest import raises\n \n \n+from sympy.physics.vector import ReferenceFrame, Vector\n+\n+# Test for the issue\n+def test_vector_addition_with_zero():\n+    N = ReferenceFrame('N')\n+    assert (N.x + 0) == N.x\n+    assert sum([N.x, (0 * N.x)]) == N.x\n+\n Vector.simp = True\n A = ReferenceFrame('A')\n \n",
  "sympy__sympy-14976": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..8767a5a 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1,3 +1,4 @@\n+\n from distutils.version import LooseVersion as V\n from itertools import product\n import math\n@@ -5,6 +6,9 @@ import inspect\n \n import mpmath\n from sympy.utilities.pytest import XFAIL, raises\n+import mpmath\n+import inspect\n+from sympy import rf\n from sympy import (\n     symbols, lambdify, sqrt, sin, cos, tan, pi, acos, acosh, Rational,\n     Float, Matrix, Lambda, Piecewise, exp, Integral, oo, I, Abs, Function,\n@@ -133,7 +137,17 @@ def test_math_lambda():\n            # if this succeeds, it can't be a python math function\n \n \n-@conserve_mpmath_dps\n+def test_rational_handling_in_mpmath_lambdify():\n+    x = symbols('x')\n+    eqn = Eq(rf(18, x), 77 + Rational(1, 3))\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    source = inspect.getsource(f)\n+    assert 'mpmath.mpf(232)/mpmath.mpf(3)' in source\n+\n+    x0 = nsolve(eqn, Float('1.5', 64), prec=64)\n+    result = rf(18, x0).evalf(64)\n+    expected = 77 + Rational(1, 3)\n+    assert abs(result - expected.evalf(64)) < 1e-59\n def test_mpmath_lambda():\n     mpmath.mp.dps = 50\n     sin02 = mpmath.mpf(\"0.19866933079506121545941262711838975037020672954020\")\n@@ -144,7 +158,17 @@ def test_mpmath_lambda():\n            # if this succeeds, it can't be a mpmath function\n \n \n-@conserve_mpmath_dps\n+def test_rational_handling_in_mpmath_lambdify():\n+    x = symbols('x')\n+    eqn = Eq(rf(18, x), 77 + Rational(1, 3))\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    source = inspect.getsource(f)\n+    assert 'mpmath.mpf(232)/mpmath.mpf(3)' in source\n+\n+    x0 = nsolve(eqn, Float('1.5', 64), prec=64)\n+    result = rf(18, x0).evalf(64)\n+    expected = 77 + Rational(1, 3)\n+    assert abs(result - expected.evalf(64)) < 1e-59\n def test_number_precision():\n     mpmath.mp.dps = 50\n     sin02 = mpmath.mpf(\"0.19866933079506121545941262711838975037020672954020\")\n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..e803f93 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -73,6 +74,19 @@ def test_ndim_array_initiation():\n \n     from sympy.abc import x\n     rank_zero_array = ImmutableDenseNDimArray(x)\n+    assert len(rank_zero_array) == 1  # Test case to verify the fix: rank-0 arrays should return 1\n+    assert rank_zero_array.shape == ()\n+    assert rank_zero_array.rank() == 0\n+    assert rank_zero_array[()] == x\n+    raises(ValueError, lambda: rank_zero_array[0])\n+\n+    # Additional test case for a rank-0 array with a numeric scalar\n+    numeric_rank_zero_array = ImmutableDenseNDimArray(42)\n+    assert len(numeric_rank_zero_array) == 1  # Test case to verify the fix\n+    assert numeric_rank_zero_array.shape == ()\n+    assert numeric_rank_zero_array.rank() == 0\n+    assert numeric_rank_zero_array[()] == 42\n+    raises(ValueError, lambda: numeric_rank_zero_array[0])\n     assert len(rank_zero_array) == 0\n     assert rank_zero_array.shape == ()\n     assert rank_zero_array.rank() == 0\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..7eaf694 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n",
  "sympy__sympy-15349": "diff --git a/sympy/algebras/tests/test_quaternion.py b/sympy/algebras/tests/test_quaternion.py\nindex c486cc1..43a40f1 100644\n--- a/sympy/algebras/tests/test_quaternion.py\n+++ b/sympy/algebras/tests/test_quaternion.py\n@@ -112,6 +112,42 @@ def test_quaternion_conversions():\n                                                [sin(theta),  cos(theta), 0],\n                                                [0,           0,          1]])\n \n+def test_quaternion_to_rotation_matrix():\n+    \"\"\"\n+    Test Quaternion.to_rotation_matrix() for various cases to ensure correct output.\n+    \"\"\"\n+\n+    from sympy import symbols, cos, sin, trigsimp, Matrix\n+    from sympy.algebras.quaternion import Quaternion\n+\n+    # Test case from the issue\n+    x = symbols('x')\n+    q = Quaternion(cos(x/2), sin(x/2), 0, 0)\n+    expected_matrix = Matrix([\n+        [1,      0,      0],\n+        [0, cos(x), -sin(x)],\n+        [0, sin(x),  cos(x)]\n+    ])\n+    assert trigsimp(q.to_rotation_matrix()) == expected_matrix\n+\n+    # Additional test case with different quaternion\n+    q2 = Quaternion(cos(x/2), 0, sin(x/2), 0)\n+    expected_matrix2 = Matrix([\n+        [ cos(x), 0, sin(x)],\n+        [      0, 1,      0],\n+        [-sin(x), 0, cos(x)]\n+    ])\n+    assert trigsimp(q2.to_rotation_matrix()) == expected_matrix2\n+\n+    # Another test case with a unit quaternion (should be the identity matrix)\n+    q3 = Quaternion(1, 0, 0, 0)  # Represents no rotation\n+    expected_identity_matrix = Matrix([\n+        [1, 0, 0],\n+        [0, 1, 0],\n+        [0, 0, 1]\n+    ])\n+    assert q3.to_rotation_matrix() == expected_identity_matrix\n+\n     assert q2.to_axis_angle() == ((0, 0, sin(theta/2)/Abs(sin(theta/2))),\n                                    2*acos(cos(theta/2)))\n \n@@ -119,4 +155,4 @@ def test_quaternion_conversions():\n                [cos(theta), -sin(theta), 0, sin(theta) - cos(theta) + 1],\n                [sin(theta),  cos(theta), 0, -sin(theta) - cos(theta) + 1],\n                [0,           0,          1,  0],\n-               [0,           0,          0,  1]])\n+               [0,           0,          0,  1]])\n",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..9b1c3a4 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1625,7 +1625,25 @@ def test_Mod():\n     assert (3*i*x) % (2*i*y) == i*Mod(3*x, 2*y)\n     assert Mod(4*i, 4) == 0\n \n-    # issue 8677\n+    # Additional test cases for issue 15493\n+    i, j = symbols('i j', integer=True, positive=True)\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+    assert Mod(6*i, 2) == 0\n+    assert Mod(9*i, 2) == Mod(i, 2)\n+    assert Mod(12*i, 4) == 0\n+    assert Mod(15*i, 5) == 0\n+    assert Mod(10*i + 5, 5) == 0\n+    assert Mod(10*i + 3, 5) == 3\n+\n+    # Edge cases where i is zero\n+    assert Mod(3*0, 2) == 0\n+    assert Mod(0, 2) == 0\n+\n+    # Symbolic expressions\n+    expr = 3*i + 5*j\n+    assert Mod(expr, 2) == Mod(i + j, 2)\n+    expr = 6*i + 4*j + 2\n+    assert Mod(expr, 4) == 2\n     n = Symbol('n', integer=True, positive=True)\n     assert factorial(n) % n == 0\n     assert factorial(n + 2) % n == 0\n",
  "sympy__sympy-15809": "diff --git a/sympy/functions/elementary/tests/test_miscellaneous.py b/sympy/functions/elementary/tests/test_miscellaneous.py\nindex 821fd0c..050d25b 100644\n--- a/sympy/functions/elementary/tests/test_miscellaneous.py\n+++ b/sympy/functions/elementary/tests/test_miscellaneous.py\n@@ -85,7 +85,7 @@ def test_Min():\n     assert Min(p, p_).func is Min\n \n     # lists\n-    raises(ValueError, lambda: Min())\n+    assert Min() == S.Infinity\n     assert Min(x, y) == Min(y, x)\n     assert Min(x, y, z) == Min(z, y, x)\n     assert Min(x, Min(y, z)) == Min(z, y, x)\n@@ -156,7 +156,7 @@ def test_Max():\n \n     # lists\n \n-    raises(ValueError, lambda: Max())\n+    assert Max() == S.NegativeInfinity\n     assert Max(x, y) == Max(y, x)\n     assert Max(x, y, z) == Max(z, y, x)\n     assert Max(x, Max(y, z)) == Max(z, y, x)\n",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..572f816 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1986,11 +1986,35 @@ def test_Add_is_zero():\n     x, y = symbols('x y', zero=True)\n     assert (x + y).is_zero\n \n+def test_issue_15873():\n+    from sympy import I, simplify\n \n-def test_issue_14392():\n+    # Original test case from the issue\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None\n+\n+    # Additional test cases\n+    f = (3 + 4*I) - (3 + 4*I)\n+    assert f.is_zero is True  # This should correctly identify zero\n+\n+    g = (2 - 2*I) + (-2 + 2*I)\n+    assert g.is_zero is True  # Adding should result in zero\n+\n+    h = (2 + 2*I) - (2 + 2*I)\n+    assert h.is_zero is True  # Subtraction leads to zero\n+\n+    i = (2 + 2*I) * 0\n+    assert i.is_zero is True  # Multiplying by zero\n+\n+    j = (2 + 3*I)**2 - (4 + 9*I + 12*I)\n+    assert simplify(j).is_zero is True  # Simplification should reveal zero\n+\n+    # Expression that should not be zero\n+    k = 1 + I\n+    assert k.is_zero is False\n     assert (sin(zoo)**2).as_real_imag() == (nan, nan)\n \n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..5127987 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -477,8 +477,31 @@ def test_logcombine_complex_coeff():\n     assert logcombine(i + 2*log(x), force=True) == \\\n         i + log(x**2)\n \n-\n-def test_issue_5950():\n+from sympy import Symbol, posify\n+\n+def test_issue_16438():\n+    # Original test for issue 16438\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0 == {'positive': True, 'zero': False, 'imaginary': False,\n+                               'nonpositive': False, 'commutative': True, 'hermitian': True,\n+                               'real': True, 'nonzero': True, 'nonnegative': True, 'negative': False,\n+                               'complex': True, 'finite': True, 'infinite': False}\n+                               \n+def test_posify_preserve_more_assumptions():\n+    # Additional tests to verify that other assumptions are preserved\n+    assumptions = {\n+        'integer': True,\n+        'rational': True,\n+        'prime': False,\n+        'even': True,\n+        'odd': False\n+    }\n+    \n+    for assumption, value in assumptions.items():\n+        s = Symbol('s', **{assumption: value})\n+        eq, _ = posify(s)\n+        assert eq._assumptions[assumption] == value\n     x, y = symbols(\"x,y\", positive=True)\n     assert logcombine(log(3) - log(2)) == log(Rational(3,2), evaluate=False)\n     assert logcombine(log(x) - log(y)) == log(x/y)\n",
  "sympy__sympy-16766": "",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py\nindex 23fddca..72a7056 100644\n--- a/sympy/utilities/tests/test_autowrap.py\n+++ b/sympy/utilities/tests/test_autowrap.py\n@@ -30,8 +30,17 @@ def get_string(dump_fn, routines, prefix=\"file\", **kwargs):\n     output.close()\n     return source\n \n+def test_cython_unused_array():\n+    from sympy.utilities.autowrap import autowrap\n+    from sympy import MatrixSymbol\n+    import numpy as np\n \n-def test_cython_wrapper_scalar_function():\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0\n+    f = autowrap(expr, args=(x,), backend='cython')\n+\n+    result = f(np.array([[1.0], [2.0]]))\n+    assert result == 1.0, f\"Expected 1.0 but got {result}\"\n     x, y, z = symbols('x,y,z')\n     expr = (x + y)*z\n     routine = make_routine(\"test\", expr)\n",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..31b3a68 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -248,6 +248,11 @@ def test_encode_morse():\n     assert encode_morse(' ', sep='``') == '````'\n     assert encode_morse('!@#$%^&*()_+') == '-.-.--|.--.-.|...-..-|-.--.|-.--.-|..--.-|.-.-.'\n \n+def test_encode_morse_extended():\n+    # We rely on the encode_morse function to encode morse for numbers\n+    assert encode_morse('1') == '.----'\n+    assert encode_morse('10') == '.----|-----'\n+    assert encode_morse('01') == '-----|.----'\n \n def test_decode_morse():\n     assert decode_morse('-.-|.|-.--') == 'KEY'\n",
  "sympy__sympy-17139": "",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..b47aad9 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,4 +1,5 @@\n-from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n+\n+from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos, I\n from sympy.simplify.sqrtdenest import _subsets as subsets\n from sympy.utilities.pytest import slow\n \n@@ -176,6 +177,24 @@ def test_subsets():\n         [1, 1, 0, 1], [0, 0, 1, 1], [1, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]]\n \n \n+def test_issue_12420():\n+    I = S.ImaginaryUnit\n+    assert _sqrt_match(4 + I) == []\n+    expr1 = (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2\n+    assert sqrtdenest(expr1) == expr1  # Expression cannot be denested, should return unchanged\n+    e = 3 - sqrt(2)*sqrt(4 + I) + 3*I\n+    assert sqrtdenest(e) == e  # Another expression that should return unchanged\n+\n+    # Additional cases\n+    expr2 = sqrt(1 + sqrt(2) + sqrt(2)*sqrt(3) + 2*sqrt(1+sqrt(5)))\n+    assert sqrtdenest(expr2) == expr2  # Should return unchanged as it cannot be denested further\n+\n+    expr3 = sqrt(5 + sqrt(6 + sqrt(7 + I)))\n+    assert sqrtdenest(expr3) == expr3  # Complex expression, should return unchanged\n+\n+    expr4 = sqrtdenest((2 + sqrt(3))*sqrt(2 + sqrt(3)))\n+    assert expr4 == sqrt(2 + sqrt(3)) * sqrt(2 + sqrt(3))  # Denested form should simplify back to original\n+\n def test_issue_5653():\n     assert sqrtdenest(\n         sqrt(2 + sqrt(2 + sqrt(2)))) == sqrt(2 + sqrt(2 + sqrt(2)))\n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..9da6933 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n@@ -103,6 +104,20 @@ def test_point():\n         Point(a.n(2), b.n(2), evaluate=False)\n     raises(ValueError, lambda: Point(1, 2) + 1)\n \n+    # Test multiplication of Point by sympy number (issue verification)\n+    from sympy import sympify\n+\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+\n+    # This should work without any exception\n+    result1 = point1 + point2 * sympify(2.0)\n+    assert result1 == Point(2, 2), \"Multiplication of Point and number failed (direct order)\"\n+\n+    # This should also work without any exception\n+    result2 = point1 + sympify(2.0) * point2\n+    assert result2 == Point(2, 2), \"Multiplication of number and Point failed (reverse order)\"\n+\n     # test transformations\n     p = Point(1, 0)\n     assert p.rotate(pi/2) == Point(0, 1)\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..e6e72b0 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -553,8 +553,13 @@ def test_diophantine():\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n     assert diophantine((y**2-x), t) == set([(t**2, -t)])\n \n-\n-def test_general_pythagorean():\n+def test_issue_18186():\n+    from sympy import symbols\n+    x, y = symbols('x y')\n+    expected_solutions = set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    # Testing both orderings of the symbols\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True) == expected_solutions\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True) == expected_solutions\n     from sympy.abc import a, b, c, d, e\n \n     assert check_solutions(a**2 + b**2 + c**2 - d**2)\n",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..7f202e6 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -675,6 +675,12 @@ def test_latex_derivatives():\n def test_latex_subs():\n     assert latex(Subs(x*y, (\n         x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n+    assert latex(3*Subs(-x+y, (x,), (1,))) == r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+    # Additional test cases for various scenarios\n+    assert latex(Subs(x+y, (x,), (1,))) == r'\\left. \\left(x + y\\right) \\right|_{\\substack{ x=1 }}'\n+    assert latex(2*Subs(x**2 + y**2, (x, y), (1, 2))) == r'2 \\left. \\left(x^{2} + y^{2}\\right) \\right|_{\\substack{ x=1\\\\ y=2 }}'\n+    assert latex(Subs(x*y + z, (x, y), (1, 2))) == r'\\left. \\left(x y + z\\right) \\right|_{\\substack{ x=1\\\\ y=2 }}'\n+    assert latex(Subs(x + y + z, (x, y, z), (1, 2, 3))) == r'\\left. \\left(x + y + z\\right) \\right|_{\\substack{ x=1\\\\ y=2\\\\ z=3 }}'\n \n \n def test_latex_integrals():\n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..2a8f518 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -514,7 +514,26 @@ def test_kernS():\n     assert one != 1 and one.expand() == 1\n \n \n-def test_issue_6540_6552():\n+def test_issue_kernS_unbound_error():\n+    # Test case from the issue description\n+    assert kernS(\"(2*x)/(x-1)\") == 2*x/(x-1)\n+\n+    # Additional test cases to verify fix\n+    assert kernS(\"(x**2 - x)/(x - 1)\") == (x**2 - x)/(x - 1)\n+    assert kernS(\"sin(x) / x\") == sin(x) / x\n+\n+    # Test with more complex expression\n+    assert kernS(\"((x + 1)*(x - 1))/(x**2 - 1)\") == ((x + 1)*(x - 1))/(x**2 - 1)\n+\n+    # Test with different operations\n+    assert kernS(\"-3*(x + y)\") == -3*(x + y)\n+    assert kernS(\"-(x - 1)*(x + 1)\") == -(x - 1)*(x + 1)\n+\n+    # Ensure no unbound local error for negative exponentials\n+    assert kernS(\"E**-x\") == exp(-x)\n+\n+    # Ensure symbols are parsed correctly\n+    assert kernS(\"Symbol('a')\") == Symbol('a')\n     assert S('[[1/3,2], (2/5,)]') == [[Rational(1, 3), 2], (Rational(2, 5),)]\n     assert S('[[2/6,2], (2/4,)]') == [[Rational(1, 3), 2], (S.Half,)]\n     assert S('[[[2*(1)]]]') == [[[2]]]\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_operator.py b/sympy/physics/quantum/tests/test_operator.py\nindex 799aaae..ebcf00d 100644\n--- a/sympy/physics/quantum/tests/test_operator.py\n+++ b/sympy/physics/quantum/tests/test_operator.py\n@@ -1,5 +1,7 @@\n+\n from sympy import (Derivative, diff, Function, Integer, Mul, pi, sin, Symbol,\n                    symbols)\n+from sympy.physics.quantum import IdentityOperator\n from sympy.physics.quantum.qexpr import QExpr\n from sympy.physics.quantum.dagger import Dagger\n from sympy.physics.quantum.hilbert import HilbertSpace\n@@ -84,7 +86,18 @@ def test_unitary():\n     assert Dagger(U).is_commutative is False\n \n \n-def test_identity():\n+def test_dagger_identity_operator():\n+    O = Operator('O')\n+    I = IdentityOperator()\n+    D = Dagger(O)\n+\n+    # Verify the simplification of Dagger(O) * IdentityOperator\n+    assert D * I == D\n+    assert I * D == D\n+\n+    # Verify that the original behavior is unaffected\n+    assert O * I == O\n+    assert I * O == O\n     I = IdentityOperator()\n     O = Operator('O')\n     x = Symbol(\"x\")\n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..8cc26b9 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -905,8 +905,54 @@ def test_sylow_subgroup():\n     assert G.order() % S.order() == 0\n     assert G.order()/S.order() % 2 > 0\n \n+def test_sylow_subgroup_issue_fix():\n+    from sympy.combinatorics import DihedralGroup\n \n-@slow\n+    # The original test patch cases\n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n+    # Additional cases to verify the fix\n+    # Testing for a larger group\n+    G = DihedralGroup(100)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 8\n+\n+    # Testing for a different prime\n+    G = DihedralGroup(45)\n+    S = G.sylow_subgroup(p=3)\n+    assert S.order() == 9\n+\n+    # Testing edge case - smaller group\n+    G = DihedralGroup(6)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 2\n+\n+    G = DihedralGroup(8)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n+    # Testing for a non-power of prime group\n+    G = DihedralGroup(30)\n+    S = G.sylow_subgroup(p=3)\n+    assert S.order() == 3\n+\n+    # Ensure no IndexError for various configurations\n+    primes = [2, 3, 5]\n+    sizes = [20, 30, 40, 50]\n+    for size in sizes:\n+        G = DihedralGroup(size)\n+        for p in primes:\n+            try:\n+                S = G.sylow_subgroup(p)\n+                assert G.order() % S.order() == 0\n+            except IndexError:\n+                assert False, f\"IndexError for DihedralGroup({size}), p={p}\"\n def test_presentation():\n     def _test(P):\n         G = P.presentation()\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..f08ebd8 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -513,8 +513,38 @@ def test_partitions():\n             i += 1\n         assert i == RGS_enum(n)\n \n-\n-def test_binary_partitions():\n+def test_partitions_reusing_output():\n+    # Check if partitions() reuses dictionaries by comparing identities\n+    results_6_k2 = list(partitions(6, k=2))\n+    results_6_k2_copy = [p.copy() for p in partitions(6, k=2)]\n+    \n+    # Assert that the original and copied partitions are equivalent\n+    assert results_6_k2 == results_6_k2_copy\n+    \n+    # Check that each element in the result list is a distinct object\n+    for i in range(len(results_6_k2)):\n+        for j in range(i + 1, len(results_6_k2)):\n+            assert results_6_k2[i] is not results_6_k2[j]\n+    \n+    # Test for k=3\n+    results_6_k3 = list(partitions(6, k=3))\n+    results_6_k3_copy = [p.copy() for p in partitions(6, k=3)]\n+    \n+    assert results_6_k3 == results_6_k3_copy\n+    \n+    for i in range(len(results_6_k3)):\n+        for j in range(i + 1, len(results_6_k3)):\n+            assert results_6_k3[i] is not results_6_k3[j]\n+\n+    # Test for a specific edge case\n+    results_8_k4_m3 = list(partitions(8, k=4, m=3))\n+    results_8_k4_m3_copy = [p.copy() for p in partitions(8, k=4, m=3)]\n+    \n+    assert results_8_k4_m3 == results_8_k4_m3_copy\n+    \n+    for i in range(len(results_8_k4_m3)):\n+        for j in range(i + 1, len(results_8_k4_m3)):\n+            assert results_8_k4_m3[i] is not results_8_k4_m3[j]\n     assert [i[:] for i in binary_partitions(10)] == [[8, 2], [8, 1, 1],\n         [4, 4, 2], [4, 4, 1, 1], [4, 2, 2, 2], [4, 2, 2, 1, 1],\n         [4, 2, 1, 1, 1, 1], [4, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2],\n",
  "sympy__sympy-20801": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e1c7e2..0b683a7 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -583,8 +583,13 @@ def test_Float():\n         assert Float(i) is a\n \n \n-\n-@conserve_mpmath_dps\n+def test_zero_not_false():\n+    # Ensure S(0.0) and S.false do not equate to True in either comparison direction\n+    # https://github.com/sympy/sympy/issues/20796\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n def test_float_mpf():\n     import mpmath\n     mpmath.mp.dps = 100\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..02fefd3 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,9 +1,10 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n-    Lambda, atan2, cse, cot, tan, S, Tuple, Basic, Dict,\n+    Lambda, atan2, cse, cot, tan, S, Tuple, Basic, Dict, sinh,\n     Piecewise, oo, Mul, factor, nsimplify, zoo, Subs, RootOf,\n-    AccumBounds, Matrix, zeros, ZeroMatrix)\n+    AccumBounds, Matrix, zeros, ZeroMatrix, Piecewise, clear_cache)\n from sympy.core.basic import _aresame\n from sympy.testing.pytest import XFAIL\n from sympy.abc import a, x, y, z, t\n@@ -20,7 +21,29 @@ def test_subs():\n     assert e == Rational(6)\n \n \n-def test_subs_Matrix():\n+def test_subs_issue_21373():\n+    # Test for issue 21373 - Unexpected PolynomialError with subs and specific expressions\n+    x_r, y_r, z_r = symbols('x_r y_r z_r', real=True)\n+\n+    # Expression setup\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+\n+    # Perform the substitution and check for errors\n+    expr.subs({1: 1.0})\n+\n+    # Additional checks\n+    clear_cache()\n+    assert expr.subs({1: Float('1.0')}) == exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+\n+    # Check variations without the cache clearing\n+    expr_2 = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) * z_r))\n+    expr_2.subs({1: 1.0})\n+\n+    expr_3 = sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r)\n+    expr_3.subs({1: 1.0})\n+\n+    expr_4 = exp(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r)\n+    expr_4.subs({1: 1.0})\n     z = zeros(2)\n     z1 = ZeroMatrix(2, 2)\n     assert (x*y).subs({x:z, y:0}) in [z, z1]\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..d9f4361 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -51,6 +51,20 @@ def test_monomials():\n             {S.One, x, y, x**2, x**3, y**2, y**3, x*y, x*y**2, y*x**2}\n \n     i, j, k = symbols('i j k', commutative=False)\n+\n+    # Test for the issue with itermonomials using min_degrees argument\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    # Example from the issue: should generate all monomials of total degree exactly 3\n+    assert set(itermonomials([x1, x2, x3], 3, 3)) == {\n+        x1**3, x2**3, x3**3, x1**2*x2, x1**2*x3, x1*x2**2, x1*x3**2,\n+        x2**2*x3, x2*x3**2, x1*x2*x3\n+    }\n+    # Additional case to check all monomials with total degree exactly 2\n+    assert set(itermonomials([x1, x2, x3], 3, 2)) == {\n+        x1**2, x2**2, x3**2, x1*x2, x1*x3, x2*x3, x1*x2*x3,\n+        x1**3, x2**3, x3**3, x1**2*x2, x1**2*x3, x1*x2**2,\n+        x1*x3**2, x2**2*x3, x2*x3**2\n+    }\n     assert set(itermonomials([i, j, k], 0)) == {S.One}\n     assert set(itermonomials([i, j, k], 1)) == {S.One, i, j, k}\n     assert set(itermonomials([i, j, k], 2)) == \\\n@@ -132,6 +146,20 @@ def test_monomials():\n             {S.One, y**2, x*y**2, x, x*y, x**2, x**2*y**2, y, x**2*y}\n \n     i, j, k = symbols('i j k', commutative=False)\n+\n+    # Test for the issue with itermonomials using min_degrees argument\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    # Example from the issue: should generate all monomials of total degree exactly 3\n+    assert set(itermonomials([x1, x2, x3], 3, 3)) == {\n+        x1**3, x2**3, x3**3, x1**2*x2, x1**2*x3, x1*x2**2, x1*x3**2,\n+        x2**2*x3, x2*x3**2, x1*x2*x3\n+    }\n+    # Additional case to check all monomials with total degree exactly 2\n+    assert set(itermonomials([x1, x2, x3], 3, 2)) == {\n+        x1**2, x2**2, x3**2, x1*x2, x1*x3, x2*x3, x1*x2*x3,\n+        x1**3, x2**3, x3**3, x1**2*x2, x1**2*x3, x1*x2**2,\n+        x1*x3**2, x2**2*x3, x2*x3**2\n+    }\n     assert set(itermonomials([i, j, k], [0, 0, 0])) == {S.One}\n     assert set(itermonomials([i, j, k], [0, 0, 1])) == {1, k}\n     assert set(itermonomials([i, j, k], [0, 1, 0])) == {1, j}\n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..0eea800 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -267,6 +267,7 @@ def test_String():\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n+    assert st.func(*st.args) == st  # Testing argument invariance expr.func(*expr.args) == expr\n \n \n     class Signifier(String):\n@@ -279,10 +280,17 @@ def test_String():\n     assert str(s) == 'foo'\n     assert repr(s) == \"String('foo')\"\n \n-def test_Comment():\n+def test_QuotedString():\n+    qs = QuotedString(\"quoted\")\n+    assert qs.is_Atom\n+    assert qs == QuotedString(\"quoted\")\n+    assert str(qs) == \"\\\"quoted\\\"\"\n+    assert repr(qs) == \"QuotedString('quoted')\"\n+    assert qs.func(*qs.args) == qs  # Testing argument invariance\n     c = Comment('foobar')\n     assert c.text == 'foobar'\n     assert str(c) == 'foobar'\n+    assert c.func(*c.args) == c  # Testing argument invariance\n \n def test_Node():\n     n = Node()\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..713d5ea 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -9,6 +10,7 @@ from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n+from sympy.core.parameters import evaluate\n from sympy.testing.pytest import raises, warns\n \n \n@@ -440,6 +442,19 @@ def test_unit():\n     assert Point(1, 1).unit == Point(sqrt(2)/2, sqrt(2)/2)\n \n \n+def test_issue_22684():\n+    # Used to give an error\n+    with evaluate(False):\n+        _ = Point2D(1, 2)  # Should not raise an error\n+\n+    # Check behavior without evaluate(False)\n+    _ = Point2D(1, 2)  # Should not raise an error\n+\n+    # Check behavior with complex numbers, expecting a ValueError\n+    with raises(ValueError):\n+        with evaluate(False):\n+            _ = Point2D(1, 2 + 3*I)\n+\n def test_dot():\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..e94369d 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n@@ -29,6 +30,14 @@ def test_PythonCodePrinter():\n \n     assert not prntr.module_imports\n \n+    # Test for Min and Max functions\n+    assert prntr.doprint(Min(x, y)) == \"min(x, y)\"\n+    assert prntr.doprint(Max(x, y)) == \"max(x, y)\"\n+    assert prntr.doprint(Min(x, y, z)) == \"min(x, y, z)\"\n+    assert prntr.doprint(Max(x, y, z)) == \"max(x, y, z)\"\n+    assert prntr.doprint(Min(x, 2, -y)) == \"min(x, 2, -y)\"\n+    assert prntr.doprint(Max(x, 2, -y)) == \"max(x, 2, -y)\"\n+\n     assert prntr.doprint(x**y) == 'x**y'\n     assert prntr.doprint(Mod(x, 2)) == 'x % 2'\n     assert prntr.doprint(-Mod(x, y)) == '-(x % y)'\n@@ -37,6 +46,14 @@ def test_PythonCodePrinter():\n     assert prntr.doprint(Or(x, y)) == 'x or y'\n     assert not prntr.module_imports\n \n+    # Test for Min and Max functions\n+    assert prntr.doprint(Min(x, y)) == \"min(x, y)\"\n+    assert prntr.doprint(Max(x, y)) == \"max(x, y)\"\n+    assert prntr.doprint(Min(x, y, z)) == \"min(x, y, z)\"\n+    assert prntr.doprint(Max(x, y, z)) == \"max(x, y, z)\"\n+    assert prntr.doprint(Min(x, 2, -y)) == \"min(x, 2, -y)\"\n+    assert prntr.doprint(Max(x, 2, -y)) == \"max(x, 2, -y)\"\n+\n     assert prntr.doprint(pi) == 'math.pi'\n     assert prntr.module_imports == {'math': {'pi'}}\n \n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..978144b 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,10 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+from sympy import lambdify, Tuple\n+from sympy.testing.pytest import raises\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n@@ -1182,7 +1186,30 @@ def test_lambdify_inspect():\n     assert 'x**2' in inspect.getsource(f)\n \n \n-def test_issue_14941():\n+def test_single_element_tuple():\n+    # Test single-element tuple with lambdify\n+    f_single = lambdify([], (1,))\n+    assert f_single() == (1,)\n+    \n+    # Use inspect to verify the generated source code\n+    source_code = inspect.getsource(f_single)\n+    assert 'return (1,)' in source_code\n+\n+    # Test with a different single-element\n+    f_single_different = lambdify([], (42,))\n+    assert f_single_different() == (42,)\n+    \n+    # Verify use of Tuple from sympy\n+    f_sympy_tuple = lambdify([], Tuple(1))\n+    assert f_sympy_tuple() == Tuple(1)\n+    \n+    # Use inspect to verify the generated source code for sympy Tuple\n+    source_code_sympy = inspect.getsource(f_sympy_tuple)\n+    assert 'return (1,)' in source_code_sympy\n+\n+    # Edge case: Ensure str casting doesn't affect tuple generation\n+    f_str = lambdify([], ('string',))\n+    assert f_str() == ('string',)\n     x, y = Dummy(), Dummy()\n \n     # test dict\n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..709adb8 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,12 +1,35 @@\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n from sympy.core.sympify import sympify  # can't import as S yet\n+from sympy.core.function import Function, UndefinedFunction\n from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n \n from sympy.testing.pytest import raises\n from sympy.core.symbol import disambiguate\n \n+def test_symbol_with_extra_parentheses():\n+    # The original test scenario\n+    q, u = symbols(('q:2', 'u:2'), cls=Function)\n+    assert type(q[0]) is UndefinedFunction\n+\n+    # Additional scenarios to ensure comprehensive testing\n+    # Test with a single tuple\n+    r, = symbols(('r:1',), cls=Function)\n+    assert type(r[0]) is UndefinedFunction\n+\n+    # Test with more symbols in the tuple\n+    x, y, z = symbols(('x:3', 'y:2', 'z:1'), cls=Function)\n+    assert type(x[0]) is UndefinedFunction\n+    assert type(y[0]) is UndefinedFunction\n+    assert type(z[0]) is UndefinedFunction\n+\n+    # Test with a different class\n+    a, b = symbols(('a:2', 'b:2'), cls=Symbol)\n+    assert type(a[0]) is Symbol\n+    assert type(b[0]) is Symbol\n+\n def test_Str():\n     a1 = Str('a')\n     a2 = Str('a')\n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..8c214f0 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -261,6 +261,43 @@ def test_kahane_simplify1():\n     r = kahane_simplify(t)\n     assert r.equals(-2*G(sigma)*G(rho)*G(nu))\n \n+def test_kahane_leading_gamma_matrix_bug():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n+\n+    # Test case from the issue description\n+    t = G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma)), f\"Expected 4*G(rho)*G(sigma), got {r}\"\n+\n+    t = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma)), f\"Expected 4*G(rho)*G(sigma), got {r}\"\n+\n+    # Additional test cases to ensure robustness\n+    # Check for triple contraction\n+    t = G(mu)*G(nu)*G(-nu)*G(-mu)*G(rho)\n+    r = kahane_simplify(t)\n+    assert r.equals(-4*G(rho)), f\"Expected -4*G(rho), got {r}\"\n+\n+    # Check for no contractions\n+    t = G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(G(rho)*G(sigma)), f\"Expected G(rho)*G(sigma), got {r}\"\n+\n+    # Check for a single contraction in the middle\n+    t = G(rho)*G(mu)*G(-mu)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma)), f\"Expected 4*G(rho)*G(sigma), got {r}\"\n+\n+    # Check leading and trailing contractions\n+    t = G(mu)*G(-mu)*G(rho)*G(sigma)*G(nu)*G(-nu)\n+    r = kahane_simplify(t)\n+    assert r.equals(16*G(rho)*G(sigma)), f\"Expected 16*G(rho)*G(sigma), got {r}\"\n+\n+    # Check contraction with multiple free indices\n+    t = G(rho)*G(mu)*G(-mu)*G(sigma)*G(nu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma)*G(nu)), f\"Expected 4*G(rho)*G(sigma)*G(nu), got {r}\"\n \n def test_gamma_matrix_class():\n     i, j, k = tensor_indices('i,j,k', LorentzIndex)\n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..c2c2f66 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -46,6 +46,24 @@ def test_as_set():\n     raises(NotImplementedError, lambda:\n            Contains(x, FiniteSet(y)).as_set())\n \n+def test_contains_as_set():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    z = Symbol('z')\n+\n+    # Test with FiniteSet\n+    raises(NotImplementedError, lambda: Contains(x, FiniteSet(y)).as_set())\n+\n+    # Test with Integers\n+    raises(NotImplementedError, lambda: Contains(x, S.Integers).as_set())\n+\n+    # Test with Reals\n+    raises(NotImplementedError, lambda: Contains(x, S.Reals).as_set())\n+\n+    # Test with a custom set\n+    custom_set = Interval(0, 1)  # Example of another set type\n+    raises(NotImplementedError, lambda: Contains(x, custom_set).as_set())\n+\n def test_type_error():\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..7bfba07 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -548,6 +548,31 @@ def test_prefixed_property():\n     assert not second.is_prefixed\n     assert not volt.is_prefixed\n     assert not ohm.is_prefixed\n+\n+\n+def test_issue_24062():\n+    from sympy import exp\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units import Quantity\n+    from sympy.physics.units.systems.si import SI\n+    from sympy.physics.units.dimensions import Dimension\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n     assert centimeter.is_prefixed\n     assert kilometer.is_prefixed\n     assert kilogram.is_prefixed\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..efdc14b 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -562,6 +562,52 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n+def test_issue_24211():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+    from sympy.physics.units.systems.si import SI\n+\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1*T1 + V1\n+    # This should not raise ValueError\n+    SI._collect_factor_and_dimension(expr)\n+\n+def test_issue_24211_with_different_factors():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+    from sympy.physics.units.systems.si import SI\n+\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 2 * meter / second)\n+\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, -9.8 * meter / second**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 5 * second)\n+\n+    expr1 = A1*T1 + V1\n+    # This should not raise ValueError\n+    SI._collect_factor_and_dimension(expr1)\n+\n+    # Additional case: Check the correct calculation of scale factor and dimension\n+    factor, dim = SI._collect_factor_and_dimension(expr1)\n+    assert factor == -9.8 * 5 + 2\n+    assert SI.get_dimension_system().equivalent(dim, velocity)\n+\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..c880367 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,3 +1,4 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n@@ -57,7 +58,24 @@ def test_homomorphism():\n     assert T.codomain == D\n     assert T(a*b) == p\n \n-def test_isomorphisms():\n+def test_issue_check_homomorphism_with_permutation_groups():\n+    from sympy.combinatorics.named_groups import DihedralGroup\n+\n+    # Test the direct application of the issue example\n+    D3 = DihedralGroup(3)\n+    T = homomorphism(D3, D3, D3.generators, D3.generators)\n+    assert T.is_isomorphism()\n+\n+    # Test with an inverted generator scenario\n+    a = Permutation(1,2,3,4)\n+    b = Permutation(1,3)\n+    G = PermutationGroup([a, b])\n+    h = homomorphism(G, G, [a, b], [a**-1, b**-1])\n+    assert not h.is_isomorphism()\n+\n+    # Additional test for ensuring coverage when no inverses are used\n+    h2 = homomorphism(G, G, [a, b], [a, b])\n+    assert h2.is_isomorphism()\n \n     F, a, b = free_group(\"a, b\")\n     E, c, d = free_group(\"c, d\")\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..00e2ac1 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -249,7 +249,11 @@ def test_PolyElement_copy():\n     g[(1, 1, 1)] = 7\n     assert f != g\n \n+from sympy import symbols, ring, ZZ\n+from sympy.testing.pytest import raises\n+\n def test_PolyElement_as_expr():\n+    # Original test checking same symbols\n     R, x, y, z = ring(\"x,y,z\", ZZ)\n     f = 3*x**2*y - x*y*z + 7*z**3 + 1\n \n@@ -267,7 +271,21 @@ def test_PolyElement_as_expr():\n \n     raises(ValueError, lambda: f.as_expr(X))\n \n-    R, = ring(\"\", ZZ)\n+    \n+    # Test with different symbols and ensure correct substitution\n+    U, V, W = symbols(\"u,v,w\")\n+    g = 3*U**2*V - U*V*W + 7*W**3 + 1\n+    assert f.as_expr(U, V, W) == g\n+\n+    # Test with fewer symbols than generators\n+    raises(ValueError, lambda: f.as_expr(U, V))\n+\n+    # Test with more symbols than generators\n+    A, B, C, D = symbols(\"a,b,c,d\")\n+    raises(ValueError, lambda: f.as_expr(A, B, C, D))\n+\n+    # Test with no symbols (should default to ring symbols)\n+    assert f.as_expr() == g.subs({U: X, V: Y, W: Z})\n     assert R(3).as_expr() == 3\n \n def test_PolyElement_from_expr():\n",
  "sympy__sympy-24661": "diff --git a/sympy/parsing/tests/test_sympy_parser.py b/sympy/parsing/tests/test_sympy_parser.py\nindex 3723931..c990e70 100644\n--- a/sympy/parsing/tests/test_sympy_parser.py\n+++ b/sympy/parsing/tests/test_sympy_parser.py\n@@ -274,13 +274,33 @@ def test_convert_equals_signs():\n         transformations=transformations) == Eq(Eq(2*y, x), False)\n \n \n+from sympy.parsing.sympy_parser import parse_expr\n+\n def test_parse_function_issue_3539():\n     x = Symbol('x')\n     f = Function('f')\n     assert parse_expr('f(x)') == f(x)\n \n \n-def test_split_symbols_numeric():\n+def test_parse_expr_evaluate_false_for_relationals():\n+    inputs = {\n+        \"1 < 2\": Lt(1, 2, evaluate=False),\n+        \"1 <= 2\": Le(1, 2, evaluate=False),\n+        \"1 > 2\": Gt(1, 2, evaluate=False),\n+        \"1 >= 2\": Ge(1, 2, evaluate=False),\n+        \"1 != 2\": Ne(1, 2, evaluate=False),\n+        \"1 == 2\": Eq(1, 2, evaluate=False),\n+        # Test with variables and more complex expressions\n+        \"x < y\": Lt(Symbol('x'), Symbol('y'), evaluate=False),\n+        \"x <= 1 + y\": Le(Symbol('x'), 1 + Symbol('y'), evaluate=False),\n+        \"3*x > 2*y\": Gt(3*Symbol('x'), 2*Symbol('y'), evaluate=False),\n+        \"x + y >= z\": Ge(Symbol('x') + Symbol('y'), Symbol('z'), evaluate=False),\n+        \"x != y + 1\": Ne(Symbol('x'), Symbol('y') + 1, evaluate=False),\n+        \"2*x == 4\": Eq(2*Symbol('x'), 4, evaluate=False)\n+    }\n+    \n+    for text, result in inputs.items():\n+        assert parse_expr(text, evaluate=False) == result\n     transformations = (\n         standard_transformations +\n         (implicit_multiplication_application,))\n",
  "astropy__astropy-14369": "diff --git a/astropy/units/tests/test_format.py b/astropy/units/tests/test_format.py\nindex 062b5f4..e95ec3d 100644\n--- a/astropy/units/tests/test_format.py\n+++ b/astropy/units/tests/test_format.py\n@@ -35,6 +35,9 @@ from astropy.units.utils import is_effectively_unity\n         ([\"mag(ct/s)\"], u.MagUnit(u.ct / u.s)),\n         ([\"dex\"], u.dex),\n         ([\"dex(cm s**-2)\", \"dex(cm/s2)\"], u.DexUnit(u.cm / u.s**2)),\n+        # Testing composite unit parsing for CDS format\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.J / (u.m * u.s * u.kpc**2))),\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.J / (u.s * u.kpc**2))),\n     ],\n )\n def test_unit_grammar(strings, unit):\n",
  "astropy__astropy-14598": "",
  "django__django-11299": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex b3dc643..60650a3 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1889,6 +1889,14 @@ class OperationTests(OperationTestBase):\n         from_state = to_state\n         to_state = from_state.clone()\n         operation.state_forwards(app_label, to_state)\n+        # Additional test case for the CheckConstraint with OR operator\n+        TestConstraint = to_state.apps.get_model('app', 'TestConstraint')\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, from_state, to_state)\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            TestConstraint.objects.create(field_1=None, flag=True)\n+        TestConstraint.objects.create(field_1=1, flag=True)\n+        TestConstraint.objects.create(field_1=None, flag=False)\n         Author = to_state.apps.get_model(app_label, 'Author')\n         with connection.schema_editor() as editor:\n             operation.database_forwards(app_label, editor, from_state, to_state)\n",
  "django__django-11477": "diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex e4898b6..328fa0a 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -163,6 +163,47 @@ class URLTranslationTests(URLTestCaseBase):\n             self.assertEqual(translate_url('/nl/gebruikers/', 'en'), '/en/users/')\n             self.assertEqual(translation.get_language(), 'nl')\n \n+    def test_translate_url_with_optional_parameters(self):\n+        with translation.override('en'):\n+            # Test URL with optional parameter present\n+            self.assertEqual(\n+                translate_url('/en/with-arguments/regular-argument/optional.html', 'nl'),\n+                '/nl/with-arguments/regular-argument/optional.html'\n+            )\n+            # Test URL with optional parameter missing\n+            self.assertEqual(\n+                translate_url('/en/with-arguments/regular-argument/', 'nl'),\n+                '/nl/with-arguments/regular-argument/'\n+            )\n+            # Test regex optional path with both arguments\n+            self.assertEqual(\n+                translate_url('/en/regex_optional/1/2/', 'nl'),\n+                '/nl/regex_optional/1/2/'\n+            )\n+            # Test regex optional path with missing optional argument\n+            self.assertEqual(\n+                translate_url('/en/regex_optional/1/', 'nl'),\n+                '/nl/regex_optional/1/'\n+            )\n+        \n+        with translation.override('nl'):\n+            # Reverse tests from Dutch back to English\n+            self.assertEqual(\n+                translate_url('/nl/with-arguments/regular-argument/optional.html', 'en'),\n+                '/en/with-arguments/regular-argument/optional.html'\n+            )\n+            self.assertEqual(\n+                translate_url('/nl/with-arguments/regular-argument/', 'en'),\n+                '/en/with-arguments/regular-argument/'\n+            )\n+            self.assertEqual(\n+                translate_url('/nl/regex_optional/1/2/', 'en'),\n+                '/en/regex_optional/1/2/'\n+            )\n+            self.assertEqual(\n+                translate_url('/nl/regex_optional/1/', 'en'),\n+                '/en/regex_optional/1/'\n+            )\n \n class URLNamespaceTests(URLTestCaseBase):\n     \"\"\"\n",
  "django__django-12273": "",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..9e4c2fa 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -602,10 +602,20 @@ class DeletionTests(TestCase):\n                     ctx.captured_queries[0]['sql'],\n                 )\n                 signal.disconnect(receiver, sender=Referrer)\n-\n+from django.test import TestCase\n+from django.contrib.auth.models import User\n \n class FastDeleteTests(TestCase):\n \n+    def test_fast_delete_all(self):\n+        # Create multiple User instances to test deletion\n+        User.objects.bulk_create([User(username=f\"user{i}\") for i in range(5)])\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        # Ensure no subqueries are used when performing a full delete.\n+        self.assertNotIn('SELECT', sql)\n+\n     def test_fast_delete_fk(self):\n         u = User.objects.create(\n             avatar=Avatar.objects.create()\n@@ -702,4 +712,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..eb1e25a 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from decimal import Decimal\n \n@@ -24,8 +25,23 @@ class DecimalFieldTests(TestCase):\n         msg = '\u201cabc\u201d value must be a decimal number.'\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n-\n-    def test_default(self):\n+    \n+    def test_invalid_value(self):\n+        field = models.DecimalField(max_digits=4, decimal_places=2)\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        tests = [\n+            {},\n+            [],\n+            set(),\n+            object(),\n+            complex(),\n+            'non-numeric string',\n+            b'non-numeric byte-string',\n+        ]\n+        for value in tests:\n+            with self.subTest(value=value):\n+                with self.assertRaisesMessage(ValidationError, msg % (value,)):\n+                    field.clean(value, None)\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n \n",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..fb17b4b 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n \n@@ -38,7 +39,23 @@ class PickleabilityTestCase(TestCase):\n     def test_filter_reverse_fk(self):\n         self.assert_pickles(Group.objects.filter(event=1))\n \n-    def test_doesnotexist_exception(self):\n+    def test_annotation_values(self):\n+        qs = Happening.objects.values('name').annotate(latest_time=models.Max('when'))\n+        reloaded = Happening.objects.all()\n+        reloaded.query = pickle.loads(pickle.dumps(qs.query))\n+        self.assertEqual(reloaded.get(), {'name': 'test', 'latest_time': self.happening.when})\n+\n+    def test_annotation_values_list(self):\n+        tests = [\n+            Happening.objects.values_list('name'),\n+            Happening.objects.values_list('name', flat=True),\n+            Happening.objects.values_list('name', named=True),\n+        ]\n+        for qs in tests:\n+            with self.subTest(qs._iterable_class.__name__):\n+                reloaded = Happening.objects.all()\n+                reloaded.query = pickle.loads(pickle.dumps(qs.query))\n+                self.assertEqual(reloaded.get(), {'name': 'test'})\n         # Ticket #17776\n         original = Event.DoesNotExist(\"Doesn't exist\")\n         unpickled = pickle.loads(pickle.dumps(original))\n",
  "django__django-13449": "diff --git a/tests/expressions_window/tests.py b/tests/expressions_window/tests.py\nindex fb67168..ca53a50 100644\n--- a/tests/expressions_window/tests.py\n+++ b/tests/expressions_window/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n from unittest import mock, skipIf\n \n@@ -11,6 +12,7 @@ from django.db.models.functions import (\n     CumeDist, DenseRank, ExtractYear, FirstValue, Lag, LastValue, Lead,\n     NthValue, Ntile, PercentRank, Rank, RowNumber, Upper,\n )\n+from decimal import Decimal\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n \n from .models import Employee\n",
  "django__django-13512": "diff --git a/tests/forms_tests/field_tests/test_jsonfield.py b/tests/forms_tests/field_tests/test_jsonfield.py\nindex e31bff4..7bc63a0 100644\n--- a/tests/forms_tests/field_tests/test_jsonfield.py\n+++ b/tests/forms_tests/field_tests/test_jsonfield.py\n@@ -25,6 +25,16 @@ class JSONFieldTest(SimpleTestCase):\n             field.clean('{some badly formed: json}')\n \n     def test_prepare_value(self):\n+        field = JSONField()\n+        # Adding test for Unicode characters\n+        self.assertEqual(field.prepare_value({'a': '\u4f60\u597d \u4e16\u754c'}), '{\"a\": \"\u4f60\u597d \u4e16\u754c\"}')\n+        self.assertEqual(field.prepare_value('\u4f60\u597d\uff0c\u4e16\u754c'), '\"\u4f60\u597d\uff0c\u4e16\u754c\"')\n+        self.assertEqual(field.prepare_value({'a': '\ud83d\ude00\ud83d\udc31'}), '{\"a\": \"\ud83d\ude00\ud83d\udc31\"}')\n+        # Test with a list containing Unicode strings\n+        self.assertEqual(\n+            field.prepare_value([\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]),\n+            '[\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]',\n+        )\n         field = JSONField()\n         self.assertEqual(field.prepare_value({'a': 'b'}), '{\"a\": \"b\"}')\n         self.assertEqual(field.prepare_value(None), 'null')\n",
  "django__django-14404": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 8fb91af..f812ea7 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -6602,6 +6602,38 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         response = self.client.get(known_url[:-1])\n         self.assertRedirects(response, known_url, status_code=301, target_status_code=403)\n \n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/foobar/')\n+    def test_missing_slash_with_different_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/foobar' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=False, FORCE_SCRIPT_NAME='/different/')\n+    def test_no_append_slash_with_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        # With APPEND_SLASH=False, the request should return a 404, ignoring FORCE_SCRIPT_NAME\n+        self.assertEqual(response.status_code, 404)\n+\n     @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n         user = User.objects.create_user(\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..a78519a 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -691,7 +691,37 @@ class WriterTests(SimpleTestCase):\n         result = self.safe_exec(output)\n         self.assertIn(\"Migration\", result)\n \n-    def test_migration_path(self):\n+    def test_serialize_model_with_custom_field_and_mixin(self):\n+        \"\"\"\n+        Test if a migration for a model with a custom field and mixin\n+        correctly imports 'models'.\n+        \"\"\"\n+        class MyField(models.TextField):\n+            pass\n+\n+        class MyMixin:\n+            pass\n+\n+        class MyModel(MyMixin, models.Model):\n+            name = MyField(primary_key=True)\n+\n+        migration = type(\"Migration\", (migrations.Migration,), {\n+            \"operations\": [\n+                migrations.CreateModel(\n+                    name=\"MyModel\",\n+                    fields=[('name', MyField(primary_key=True, serialize=False))],\n+                    options={'abstract': False},\n+                    bases=(MyMixin, models.Model),\n+                ),\n+            ],\n+            \"dependencies\": [],\n+        })\n+\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        self.assertIn(\"from django.db import models\", output)\n+        self.assertIn(\"class Migration(migrations.Migration):\", output)\n+        self.assertIn(\"bases=(MyMixin, models.Model)\", output)\n         test_apps = [\n             'migrations.migrations_test_apps.normal',\n             'migrations.migrations_test_apps.with_package_model',\n",
  "django__django-15375": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1d4ef56..afb5b0e 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1629,8 +1629,17 @@ class AggregateTestCase(TestCase):\n             value=Sum('price', filter=Q(rating__lt=3.0), default=Avg('pages') / 10.0),\n         )\n         self.assertAlmostEqual(result['value'], Decimal('61.72'), places=2)\n-\n-    def test_exists_none_with_aggregate(self):\n+    def test_aggregation_default_after_annotation(self):\n+        result = Book.objects.annotate(\n+            idx=F('id'),\n+        ).aggregate(value=Sum('id', default=0))\n+        self.assertEqual(result['value'], 4560)\n+\n+    def test_aggregation_default_not_in_aggregate(self):\n+        result = Book.objects.annotate(\n+            idx=F('id'),\n+        ).aggregate(value=Sum('id'))\n+        self.assertEqual(result['value'], 4560)\n         qs = Book.objects.all().annotate(\n             count=Count('id'),\n             exists=Exists(Author.objects.none()),\n@@ -1642,4 +1651,4 @@ class AggregateTestCase(TestCase):\n             count=Count('id'),\n             exists=Exists(Author.objects.extra(where=['1=0'])),\n         )\n-        self.assertEqual(len(qs), 6)\n+        self.assertEqual(len(qs), 6)\n",
  "django__django-15695": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 99db46a..43e1410 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -2988,7 +2988,31 @@ class OperationTests(OperationTestBase):\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             operation.database_backwards(app_label, editor, new_state, project_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n-        # Deconstruction.\n+        # Additional test: Rename unnamed index and test rollback and reapply.\n+        # Assume we have a model with a unique_together that generates an unnamed index.\n+        unnamed_index_state = project_state.clone()\n+        unnamed_operation = RenameIndex(\n+            \"Pony\", \"unnamed_idx\", \"new_unnamed_test_idx\"\n+        )\n+        unnamed_operation.state_forwards(app_label, unnamed_index_state)\n+        \n+        # Apply renaming for unnamed index.\n+        with connection.schema_editor() as editor:\n+            unnamed_operation.database_forwards(app_label, editor, project_state, unnamed_index_state)\n+        self.assertIndexNameExists(table_name, \"new_unnamed_test_idx\")\n+        \n+        # Apply backward to restore the old auto-generated name.\n+        with connection.schema_editor() as editor:\n+            unnamed_operation.database_backwards(app_label, editor, unnamed_index_state, project_state)\n+        self.assertIndexNameDoesNotExist(table_name, \"new_unnamed_test_idx\")\n+        # Ensure the old auto-generated name exists again.\n+        self.assertIndexNameExists(table_name, \"unnamed_idx\")\n+        \n+        # Re-apply renaming for unnamed index.\n+        with connection.schema_editor() as editor:\n+            unnamed_operation.database_forwards(app_label, editor, project_state, unnamed_index_state)\n+        self.assertIndexNameExists(table_name, \"new_unnamed_test_idx\")\n+        # End of additional test.\n         definition = operation.deconstruct()\n         self.assertEqual(definition[0], \"RenameIndex\")\n         self.assertEqual(definition[1], [])\n",
  "django__django-15732": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 42e02c2..b3efa83 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -595,6 +595,63 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n         )\n \n \n+from django.test import skipUnlessDBFeature\n+from django.db import connection\n+from django.db import migrations, models\n+from django.db.migrations.state import ProjectState\n+from django.test import TestCase\n+\n+class TestDropUniqueTogetherConstraint(TestCase):\n+    @skipUnlessDBFeature(\"supports_rename_index\")\n+    def test_remove_unique_together_with_index(self):\n+        app_label = \"test_rutwi\"\n+        project_state = self.apply_operations(\n+            app_label,\n+            ProjectState(),\n+            operations=[\n+                migrations.CreateModel(\n+                    \"Pony\",\n+                    fields=[\n+                        (\"id\", models.AutoField(primary_key=True)),\n+                        (\"tag\", models.CharField(max_length=30)),\n+                    ],\n+                    options={\"unique_together\": {(\"tag\",)}},\n+                ),\n+            ],\n+        )\n+        table_name = f\"{app_label}_pony\"\n+        unique_together_constraint_name = f\"{table_name}_tag_uniq\"\n+\n+        self.assertConstraintExists(table_name, unique_together_constraint_name, value=False)\n+\n+        new_state = project_state.clone()\n+        operation = migrations.AlterUniqueTogether(\"Pony\", set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        \n+        self.assertConstraintNotExists(table_name, unique_together_constraint_name)\n+        \n+    def apply_operations(self, app_label, project_state, operations):\n+        for operation in operations:\n+            operation.state_forwards(app_label, project_state)\n+        return project_state\n+\n+    def assertConstraintExists(self, table_name, constraint_name, value=True):\n+        with connection.cursor() as cursor:\n+            cursor.execute(\n+                \"SELECT 1 FROM information_schema.table_constraints WHERE table_name=%s AND constraint_name=%s\",\n+                [table_name, constraint_name],\n+            )\n+            exists = cursor.fetchone() is not None\n+            if value:\n+                assert exists, f\"Constraint {constraint_name} does not exist on table {table_name}\"\n+            else:\n+                assert not exists, f\"Constraint {constraint_name} exists on table {table_name}\"\n+\n+    def assertConstraintNotExists(self, table_name, constraint_name):\n+        self.assertConstraintExists(table_name, constraint_name, value=False)\n+\n class AlterUniqueTogether(AlterTogetherOptionOperation):\n     \"\"\"\n     Change the value of unique_together to the target one.\n",
  "django__django-15916": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex cc5e08c..1c72c8d 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -3496,6 +3496,55 @@ class FormFieldCallbackTests(SimpleTestCase):\n                 type(NewForm.base_fields[name].widget),\n             )\n \n+    def test_formfield_callback_in_modelform_factory(self):\n+        \"\"\"\n+        Test that formfield_callback from Meta is used in form created by modelform_factory.\n+        \"\"\"\n+        def callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea)\n+\n+        class MyModel(models.Model):\n+            active = models.BooleanField()\n+            name = models.CharField(max_length=64, blank=True, null=True)\n+\n+        class MyModelForm(forms.ModelForm):\n+            class Meta:\n+                model = MyModel\n+                fields = ['active', 'name']\n+                formfield_callback = callback\n+\n+        FactoryForm = modelform_factory(MyModel, form=MyModelForm)\n+        my_factory_form = FactoryForm()\n+\n+        for name, field in my_factory_form.fields.items():\n+            self.assertEqual(type(field.widget), forms.Textarea)\n+\n+    def test_formfield_callback_override(self):\n+        \"\"\"\n+        Test that providing a formfield_callback to modelform_factory overrides the Meta formfield_callback.\n+        \"\"\"\n+        def meta_callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea)\n+\n+        def factory_callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.HiddenInput)\n+\n+        class MyModel(models.Model):\n+            active = models.BooleanField()\n+            name = models.CharField(max_length=64, blank=True, null=True)\n+\n+        class MyModelForm(forms.ModelForm):\n+            class Meta:\n+                model = MyModel\n+                fields = ['active', 'name']\n+                formfield_callback = meta_callback\n+\n+        FactoryForm = modelform_factory(MyModel, form=MyModelForm, formfield_callback=factory_callback)\n+        my_factory_form = FactoryForm()\n+\n+        for name, field in my_factory_form.fields.items():\n+            self.assertEqual(type(field.widget), forms.HiddenInput)\n+\n \n class LocalizedModelFormTest(TestCase):\n     def test_model_form_applies_localize_to_some_fields(self):\n",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..f6f726c 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -5,7 +5,9 @@ import re\n \n from django.core import serializers\n from django.core.serializers.base import DeserializationError\n-from django.core.serializers.json import DjangoJSONEncoder\n+from django.core import serializers\n+from django.db import models\n+from django.core.exceptions import FieldError\n from django.db import models\n from django.test import SimpleTestCase, TestCase, TransactionTestCase\n from django.test.utils import isolate_apps\n@@ -258,7 +260,35 @@ class JsonSerializerTestCase(SerializersTestBase, TestCase):\n             for obj in serializers.deserialize(\"json\", test_string, ignore=False):\n                 obj.save()\n \n-    def test_helpful_error_message_for_many2many_not_iterable(self):\n+    def test_m2m_serialization_with_custom_manager_select_related(self):\n+        class TestTagMaster(models.Model):\n+            name = models.CharField(max_length=120)\n+\n+        class TestTagManager(models.Manager):\n+            def get_queryset(self):\n+                return super().get_queryset().select_related(\"master\")\n+\n+        class TestTag(models.Model):\n+            name = models.CharField(max_length=120)\n+            master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)\n+            objects = TestTagManager()\n+\n+        class Test(models.Model):\n+            name = models.CharField(max_length=120)\n+            tags = models.ManyToManyField(TestTag, blank=True)\n+\n+        # Creating test data\n+        tag_master = TestTagMaster.objects.create(name=\"master\")\n+        tag = TestTag.objects.create(name=\"tag\", master=tag_master)\n+        test = Test.objects.create(name=\"test\")\n+        test.tags.add(tag)\n+\n+        # Serialize and ensure no FieldError is raised.\n+        try:\n+            serialized_data = serializers.serialize(\"json\", [test])\n+            self.assertTrue(serialized_data)  # Check that data is serialized without errors\n+        except FieldError:\n+            self.fail(\"Serialization raised FieldError unexpectedly.\")\n         \"\"\"\n         Not iterable many-to-many field value throws a helpful error message.\n         \"\"\"\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 53fdd55..e002254 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -206,8 +206,18 @@ def test_inset_and_secondary():\n def test_cmap(cmap):\n     pickle.dumps(cmap)\n \n+import matplotlib.figure as mfigure\n+import pickle\n \n-def test_unpickle_canvas():\n+def test_unpickle_dpi_stability():\n+    # Create a figure with a specific DPI\n+    initial_dpi = 100\n+    fig = mfigure.Figure(dpi=initial_dpi)\n+    \n+    # Pickle and unpickle the figure multiple times\n+    for _ in range(10):\n+        fig = pickle.loads(pickle.dumps(fig))\n+        assert fig.dpi == initial_dpi, f\"Unexpected DPI value: {fig.dpi}\"\n     fig = mfigure.Figure()\n     assert fig.canvas is not None\n     out = BytesIO()\n",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 87375f2..2dcd420 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6596,6 +6596,14 @@ def test_integrate(dask):\n     assert_equal(actual, ds.integrate(\"y\")[\"var\"])\n     assert_equal(ds[\"var\"].integrate(\"y\"), ds.integrate(\"y\")[\"var\"])\n \n+    # Test integration using coord keyword for DataArray\n+    actual = da.integrate(coord=\"y\")\n+    assert_equal(actual, ds.integrate(\"y\")[\"var\"])\n+\n+    # Test integration with deprecated dim keyword raises FutureWarning\n+    with pytest.warns(FutureWarning, match=\"dim\"):\n+        da.integrate(dim=\"y\")\n+\n     # along x and y\n     actual = da.integrate((\"y\", \"x\"))\n     assert actual.ndim == 0\n",
  "pydata__xarray-4094": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex a2826fa..396f23b 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -3045,7 +3045,13 @@ class TestDataset:\n         d0 = D.isel(x=0)\n         assert_identical(d0, x0)\n \n-    def test_to_stacked_array_to_unstacked_dataset_different_dimension(self):\n+    def test_to_stacked_array_to_unstacked_dataset_single_dim(self):\n+        # single dimension: regression test for GH4049\n+        arr = xr.DataArray(np.arange(3), coords=[(\"x\", [0, 1, 2])])\n+        data = xr.Dataset({\"a\": arr, \"b\": arr})\n+        stacked = data.to_stacked_array(\"y\", sample_dims=[\"x\"])\n+        unstacked = stacked.to_unstacked_dataset(\"y\")\n+        assert_identical(unstacked, data)\n         # test when variables have different dimensionality\n         a, b = create_test_stacked_array()\n         sample_dims = [\"x\"]\n",
  "pylint-dev__pylint-8898": "",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..3bfd2d6 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1156,6 +1156,9 @@ def test_summary_list_after_errors(testdir):\n     )\n \n \n+import pytest\n+from _pytest.main import ExitCode\n+\n def test_importorskip():\n     with pytest.raises(\n         pytest.skip.Exception,\n@@ -1184,4 +1187,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "diff --git a/testing/test_mark_expression.py b/testing/test_mark_expression.py\nindex 10b71e9..1488730 100644\n--- a/testing/test_mark_expression.py\n+++ b/testing/test_mark_expression.py\n@@ -139,6 +139,20 @@ def test_valid_idents(ident: str) -> None:\n     assert evaluate(ident, {ident: True}.__getitem__)\n \n \n+@pytest.mark.parametrize(\n+    \"ident\",\n+    (\n+        \"None\",\n+        \"True\",\n+        \"False\",\n+    ),\n+)\n+def test_compile_expressions(ident: str) -> None:\n+    try:\n+        Expression.compile(ident)\n+    except AssertionError as e:\n+        assert \"!_PyUnicode_EqualToASCIIString\" in str(e), f\"Unexpected error message: {e}\"\n+\n @pytest.mark.parametrize(\n     \"ident\",\n     (\n",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..06315ef 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,32 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+def test_feature_union_with_pandas_output():\n+    \"\"\"Test for FeatureUnion with custom transformer and pandas output.\"\"\"\n+    import pandas as pd\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn.pipeline import FeatureUnion, make_union\n+    from sklearn import set_config\n+    from numpy.testing import assert_array_equal\n+\n+    # Define the data and transformer\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y: pd.Series | None = None, **kwargs):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y: pd.Series | None = None) -> pd.DataFrame:\n+            return X[\"value\"].groupby(X[\"date\"]).sum().reset_index(drop=True)\n+\n+    # Testing with pandas output\n+    set_config(transform_output=\"pandas\")\n+    union = make_union(MyTransformer())\n+    result = union.fit_transform(data)\n+\n+    expected = pd.Series([240] * 4)\n+    assert_array_equal(result.iloc[:, 0], expected)\n",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex f07be18..bb933a0 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -12,8 +12,28 @@ import pytest\n \n from sphinx import addnodes\n \n+import pytest\n+\n+from sphinx import addnodes\n \n @pytest.mark.sphinx('dummy', testroot='ext-autodoc')\n+def test_autodoc_typehints_none(app, status, warning):\n+    # Configure Sphinx application to use 'description' mode\n+    app.config.autodoc_typehints = 'description'\n+    app.build()\n+    \n+    content = app.env.get_doctree('index')\n+    # Check if 'None' type hint links to the correct None documentation\n+    assert any('reference external' in node.astext() and 'None' in node.astext() for node in content.traverse(addnodes.pending_xref))\n+\n+    # Configure Sphinx application to use 'signature' mode\n+    app.config.autodoc_typehints = 'signature'\n+    app.build()\n+\n+    content = app.env.get_doctree('index')\n+    # Check if 'None' type hint is present but not linked\n+    assert any('None' in node.astext() for node in content.traverse(addnodes.desc_signature))\n+    assert not any('reference external' in node.astext() and 'None' in node.astext() for node in content.traverse(addnodes.pending_xref))\n def test_autodoc(app, status, warning):\n     app.builder.build_all()\n \n@@ -30,4 +50,4 @@ def test_autodoc(app, status, warning):\n my_name\n \n alias of bug2437.autodoc_dummy_foo.Foo\"\"\"\n-    assert warning.getvalue() == ''\n+    assert warning.getvalue() == ''\n",
  "sphinx-doc__sphinx-8056": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 1d6a8cf..f6b859d 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1317,7 +1317,33 @@ class NumpyDocstringTest(BaseDocstringTest):\n             expected = dedent(expected)\n             self.assertEqual(expected, actual)\n \n-    def test_parameters_with_class_reference(self):\n+    def test_optional_multiple_parameters(self):\n+        # Test case for parameters with optional attributes\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+\n+        # Expected output when napoleon_use_param=False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Expected output when napoleon_use_param=True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: :class:`array_like`, *optional*\n+\"\"\"\n+        self.assertEqual(expected, actual)\n         docstring = \"\"\"\\\n Parameters\n ----------\n",
  "sphinx-doc__sphinx-8551": "",
  "sphinx-doc__sphinx-8593": "",
  "sphinx-doc__sphinx-9230": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex e86a758..5b22f9b 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -984,6 +984,48 @@ def test_info_field_list(app):\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n \n+\n+def test_dict_str_str_param_rendering(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:class:: Class\\n\"\n+            \"\\n\"\n+            \"   :param dict(str, str) opc_meta: (optional)\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+    \n+    assert_node(doctree, (nodes.target,\n+                          addnodes.index,\n+                          addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                                    [desc_addname, \"example.\"],\n+                                                    [desc_name, \"Class\"])],\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree[3][1][0][0],\n+                ([nodes.field_name, \"Parameters\"],\n+                 [nodes.field_body, nodes.bullet_list, ([nodes.list_item, nodes.paragraph])]))\n+\n+    # :param dict(str, str) opc_meta:\n+    assert_node(doctree[3][1][0][0][1][0][0][0],\n+                ([addnodes.literal_strong, \"opc_meta\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"dict\"],\n+                 [addnodes.literal_emphasis, \"(\"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \", \"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \")\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"(optional)\"))\n+    assert_node(doctree[3][1][0][0][1][0][0][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"dict\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+\n def test_info_field_list_var(app):\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-9258": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a7d51b6..b18cf32 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -1008,8 +1008,79 @@ def test_info_field_list(app):\n                 refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n+def test_info_field_list_piped_type_with_list(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:class:: Class\\n\"\n+            \"\\n\"\n+            \"   :param items: a list of items\\n\"\n+            \"   :type items: List[int] | None\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree, \n+                (nodes.target,\n+                 addnodes.index,\n+                 addnodes.index,\n+                 [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                           [desc_addname, \"example.\"],\n+                                           [desc_name, \"Class\"])],\n+                         [desc_content, nodes.field_list, nodes.field, (nodes.field_name,\n+                                                                        nodes.field_body)])]))\n+    assert_node(doctree[3][1][0][0][1],\n+                ([nodes.paragraph, ([addnodes.literal_strong, \"items\"],\n+                                    \" (\",\n+                                    [pending_xref, addnodes.literal_emphasis, \"List\"],\n+                                    [addnodes.literal_emphasis, \"[int]\"],\n+                                    [addnodes.literal_emphasis, \" | \"],\n+                                    [pending_xref, addnodes.literal_emphasis, \"None\"],\n+                                    \")\",\n+                                    \" -- \",\n+                                    \"a list of items\")]))\n+    assert_node(doctree[3][1][0][0][1][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"List\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][5], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"None\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+\n+def test_info_field_list_piped_type_complex(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:function:: complex_func\\n\"\n+            \"\\n\"\n+            \"   :param data: a complex data type\\n\"\n+            \"   :type data: Dict[str, Union[int, float]] | List[Dict[str, Any]]\\n\")\n+    doctree = restructuredtext.parse(app, text)\n \n-def test_info_field_list_var(app):\n+    assert_node(doctree,\n+                (nodes.target,\n+                 addnodes.index,\n+                 addnodes.index,\n+                 [desc, ([desc_signature, ([desc_annotation, \"function \"],\n+                                           [desc_addname, \"example.\"],\n+                                           [desc_name, \"complex_func\"])],\n+                         [desc_content, nodes.field_list, nodes.field, (nodes.field_name,\n+                                                                        nodes.field_body)])]))\n+    assert_node(doctree[3][1][0][0][1],\n+                ([nodes.paragraph, ([addnodes.literal_strong, \"data\"],\n+                                    \" (\",\n+                                    [pending_xref, addnodes.literal_emphasis, \"Dict\"],\n+                                    [addnodes.literal_emphasis, \"[str, \"],\n+                                    [pending_xref, addnodes.literal_emphasis, \"Union\"],\n+                                    \"[int, float]]\",\n+                                    [addnodes.literal_emphasis, \" | \"],\n+                                    [pending_xref, addnodes.literal_emphasis, \"List\"],\n+                                    \"[Dict[str, Any]]\",\n+                                    \")\",\n+                                    \" -- \",\n+                                    \"a complex data type\")]))\n+    assert_node(doctree[3][1][0][0][1][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"Dict\",\n+                **{\"py:module\": \"example\", \"py:function\": \"complex_func\"})\n+    assert_node(doctree[3][1][0][0][1][0][5], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"Union\",\n+                **{\"py:module\": \"example\", \"py:function\": \"complex_func\"})\n+    assert_node(doctree[3][1][0][0][1][0][8], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"List\",\n+                **{\"py:module\": \"example\", \"py:function\": \"complex_func\"})\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n             \"   :var int attr: blah blah\\n\")\n",
  "sphinx-doc__sphinx-9673": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex aa0401e..9fa79a7 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -828,6 +828,17 @@ def test_autodoc_typehints_description(app):\n     # Overloads still get displayed in the signature\n     assert ('target.overload.sum(x: int, y: int = 0) -> int\\n'\n             'target.overload.sum(x: float, y: float = 0.0) -> float\\n'\n+            'target.typehints.decr(a, b=1) -> int\\n'\n+            '\\n'\n+            '   Parameters:\\n'\n+            '      **a** -- First parameter.\\n'\n+            '      **b** -- Second parameter.\\n'\n+            '\\n'\n+            '   Returns:\\n'\n+            '      decremented number\\n'\n+            '\\n'\n+            '   Return type:\\n'\n+            '      int\\n'\n             'target.overload.sum(x: str, y: str = None) -> str\\n'\n             '\\n'\n             '   docstring\\n'\n",
  "sympy__sympy-18211": "diff --git a/sympy/solvers/tests/test_solveset.py b/sympy/solvers/tests/test_solveset.py\nindex 7bd9e29..d9733e9 100644\n--- a/sympy/solvers/tests/test_solveset.py\n+++ b/sympy/solvers/tests/test_solveset.py\n@@ -1040,6 +1040,28 @@ def test__solveset_multi():\n             [Interval(0, pi), Interval(-1, 1)]) == FiniteSet((0, 1), (pi, -1))\n     assert _solveset_multi([r*cos(theta)-1, r*sin(theta)], [r, theta],\n             [Interval(0, 1), Interval(0, pi)]) == FiniteSet((1, 0))\n+\n+def test_issue_18188():\n+    from sympy import Eq, cos, sin, Symbol, Reals\n+    from sympy.sets.conditionset import ConditionSet\n+\n+    n = Symbol('n', real=True)\n+    # Test the original issue case\n+    result1 = Eq(n*cos(n) - 3*sin(n), 0)\n+    assert result1.as_set() == ConditionSet(n, Eq(n*cos(n) - 3*sin(n), 0), Reals)\n+\n+    # Additional test cases to verify the fix\n+    x = Symbol('x', real=True)\n+    result2 = Eq(x**2 + sqrt(x*2) + sin(x), 0)\n+    assert result2.as_set() == ConditionSet(x, Eq(sqrt(2)*sqrt(x) + x**2 + sin(x), 0), Reals)\n+\n+    # Another equation that is not easily solvable\n+    result3 = Eq(log(x) + x*sin(x), 0)\n+    assert result3.as_set() == ConditionSet(x, Eq(log(x) + x*sin(x), 0), Reals)\n+\n+    # Test using a trigonometric identity that is always true\n+    result4 = Eq(sin(x)**2 + cos(x)**2, 1)\n+    assert result4.as_set() == Reals\n     #assert _solveset_multi([r*cos(theta)-r, r*sin(theta)], [r, theta],\n     #        [Interval(0, 1), Interval(0, pi)]) == ?\n     assert _solveset_multi([r*cos(theta)-r, r*sin(theta)], [r, theta],\n",
  "sympy__sympy-18698": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 38de6f6..a6c3f3b 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3265,6 +3265,10 @@ def test_noncommutative():\n     assert cancel(e*foo(c)) == c*foo(c)\n \n \n+from sympy import symbols, sqf_list\n+\n+x, y = symbols('x y')\n+\n def test_to_rational_coeffs():\n     assert to_rational_coeffs(\n         Poly(x**3 + y*x**2 + sqrt(y), x, domain='EX')) is None\n@@ -3330,6 +3334,31 @@ def test_issue_17988():\n     M = Matrix([[poly(x + 1), poly(x + 1)]])\n     assert p * M == M * p == Matrix([[poly(x**2 - 1), poly(x**2 - 1)]])\n \n-def test_issue_18205():\n+def test_issue_8695():\n+    # Test for the original issue example\n+    p1 = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3\n+    result1 = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\n+    assert sqf_list(p1) == result1\n+\n+    # Additional test cases\n+    # Simple polynomial where no factorization is needed\n+    p2 = (x - 1)**2 * (x - 2)**2\n+    result2 = (1, [(x - 1, 2), (x - 2, 2)])\n+    assert sqf_list(p2) == result2\n+    \n+    # Polynomial with simple roots\n+    p3 = x**3 - 3*x**2 + 3*x - 1\n+    result3 = (1, [(x - 1, 3)])\n+    assert sqf_list(p3) == result3\n+\n+    # Test with a polynomial having factors with different multiplicities\n+    p4 = (x**2 + 2*x + 1)**2 * (x - 3)**3\n+    result4 = (1, [(x + 1, 2), (x - 3, 3)])\n+    assert sqf_list(p4) == result4\n+\n+    # Test with a polynomial having a factor with multiplicity 1\n+    p5 = (x - 2) * (x - 1)**2\n+    result5 = (1, [(x - 2, 1), (x - 1, 2)])\n+    assert sqf_list(p5) == result5\n     assert cancel((2 + I)*(3 - I)) == 7 + I\n     assert cancel((2 + I)*(2 - I)) == 5\n",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..46b42eb 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3241,8 +3241,14 @@ def test_keep_coeff():\n     assert _keep_coeff(x, 1/x) == 1\n     assert _keep_coeff(x + 1, S(2)) == u\n \n-\n-def test_poly_matching_consistency():\n+from sympy import symbols, expand, I\n+from sympy.polys.polytools import factor\n+\n+def test_issue_18895():\n+    x, y = symbols('x y')\n+    z = expand((x-1)*(y-1))\n+    assert factor(z) == (x - 1)*(y - 1)\n+    assert factor(z, extension=[I]) == (x - 1)*(y - 1)\n     # Test for this issue:\n     # https://github.com/sympy/sympy/issues/5514\n     assert I * Poly(x, x) == Poly(I*x, x)\n",
  "sympy__sympy-20590": "",
  "sympy__sympy-24562": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 13e3235..9251e3f 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -370,6 +370,16 @@ def test_Rational_new():\n     assert n.p == -2\n \n \n+from sympy import Rational, S\n+\n+def test_issue_rational_string_float():\n+    # Test cases for issue with string vs float inputs in Rational\n+    assert Rational('0.5', '100') == Rational(1, 200)  # this should be true\n+    assert Rational(0.5, 100) == Rational(1, 200)  # this is already true\n+    assert Rational('1.5', '3') == Rational(1, 2)  # additional verification\n+    assert Rational('1.5', 3) == Rational(1, 2) \n+    assert Rational(1.5, '3') == Rational(1, 2)\n+\n def test_Number_new():\n     \"\"\"\"\n     Test for Number constructor\n",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..d4ac5af 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,7 +3202,35 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n-    def test_boundfield_widget_type(self):\n+    def test_boundfield_subwidget_id_for_label_custom_id(self):\n+        \"\"\"\n+        Test that BoundWidget.id_for_label uses the custom ID set by ChoiceWidget.options.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'custom_id_%s'}),\n+            )\n+\n+        form = SomeForm()\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_id_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_id_1')\n+\n+    def test_boundfield_subwidget_id_for_label_auto_id(self):\n+        \"\"\"\n+        Test that BoundWidget.id_for_label uses auto_id format when provided.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+\n+        form = SomeForm(auto_id='prefix_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'prefix_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'prefix_field_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "matplotlib__matplotlib-20676": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex b009975..4fa4056 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -301,6 +301,38 @@ def test_tool_line_handle():\n \n     assert tool_line_handle.positions == positions\n \n+import matplotlib.pyplot as plt\n+import matplotlib.widgets as widgets\n+from matplotlib.testing.widgets import do_event\n+import pytest\n+\n+@pytest.mark.parametrize('direction', (\"horizontal\", \"vertical\"))\n+def test_span_selector_bound(direction):\n+    fig, ax = plt.subplots(1, 1)\n+    ax.plot([10, 20], [10, 30])\n+    ax.figure.canvas.draw()\n+    x_bound = ax.get_xbound()\n+    y_bound = ax.get_ybound()\n+\n+    tool = widgets.SpanSelector(ax, print, direction, interactive=True)\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    bound = x_bound if direction == 'horizontal' else y_bound\n+    assert tool._edge_handles.positions == list(bound)\n+\n+    press_data = [10.5, 11.5]\n+    move_data = [11, 13]  # Updating selector is done in onmove\n+    release_data = move_data\n+    do_event(tool, 'press', xdata=press_data[0], ydata=press_data[1], button=1)\n+    do_event(tool, 'onmove', xdata=move_data[0], ydata=move_data[1], button=1)\n+\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    index = 0 if direction == 'horizontal' else 1\n+    handle_positions = [press_data[index], release_data[index]]\n+    assert tool._edge_handles.positions == handle_positions\n \n def check_lasso_selector(**kwargs):\n     ax = get_ax()\n",
  "scikit-learn__scikit-learn-12682": "",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..ca19685 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -148,6 +148,36 @@ def test_multi_target_sample_weights():\n     assert_almost_equal(rgr.predict(X_test), rgr_w.predict(X_test))\n \n \n+import pytest\n+import numpy as np\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+from sklearn.model_selection import cross_val_predict\n+from sklearn.utils._testing import assert_array_almost_equal\n+\n+def test_cross_val_predict_predict_proba_multioutput():\n+    # Generate a multilabel classification dataset\n+    X, Y = make_multilabel_classification(n_samples=100, n_features=20, n_classes=3, n_labels=2, random_state=42)\n+\n+    # Create a MultiOutputClassifier with LinearDiscriminantAnalysis\n+    mo_clf = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+\n+    # Prediction with cross_val_predict using predict method (should work)\n+    pred = cross_val_predict(mo_clf, X, Y, cv=3)\n+    assert pred.shape == Y.shape\n+\n+    # Prediction with cross_val_predict using predict_proba method (should not raise AttributeError)\n+    pred_proba = cross_val_predict(mo_clf, X, Y, cv=3, method='predict_proba')\n+    \n+    # Verify that probabilities are produced for each class in each output\n+    assert len(pred_proba) == Y.shape[1]\n+    for output_idx in range(Y.shape[1]):\n+        # Check probabilities for each output\n+        assert pred_proba[output_idx].shape == (X.shape[0], len(np.unique(Y[:, output_idx])))\n+        # Ensure the probabilities sum to 1\n+        assert_array_almost_equal(pred_proba[output_idx].sum(axis=1), np.ones(X.shape[0]))\n+\n # Import the data\n iris = datasets.load_iris()\n # create a multiple targets by randomized shuffling and concatenating y.\n",
  "sphinx-doc__sphinx-9658": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 072cdc7..faa58f8 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -170,6 +170,22 @@ def test_restify_broken_type_hints():\n     assert restify(BrokenType) == ':py:class:`tests.test_util_typing.BrokenType`'\n \n \n+def test_restify_mocked_inheritance():\n+    with mock(['torch.nn']):\n+        import torch.nn as nn\n+        class MockModule(nn.Module):\n+            pass\n+        assert restify(MockModule) == ':py:class:`torch.nn.Module`'\n+\n+\n+def test_stringify_mocked_inheritance():\n+    with mock(['torch.nn']):\n+        import torch.nn as nn\n+        class MockModule(nn.Module):\n+            pass\n+        assert stringify(MockModule) == 'torch.nn.Module'\n+\n+\n def test_stringify():\n     assert stringify(int) == \"int\"\n     assert stringify(str) == \"str\"\n",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..d349455 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -354,7 +354,27 @@ def test_issue_9983():\n     assert p.is_convergent() is S.false\n     assert product(1 + 1/n**(S(2)/3), (n, 1, oo)) == p.doit()\n \n+def test_issue_13546():\n+    from sympy import Symbol, S, Product\n+    n = Symbol('n')\n+    k = Symbol('k')\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 2).doit() == S(15)/2  # Original test case\n+\n+    # Additional test cases\n+    assert p.subs(n, 3).doit() == S(315)/32  # Example for n = 3\n+    assert p.subs(n, 1).doit() == S(3/2)    # Example for n = 1\n+    assert p.subs(n, 0).doit() == S(1)      # Example for n = 0 (edge case)\n+\n+    # Check with simplification and symbolic evaluation\n+    from sympy import simplify\n+    ps = simplify(p)\n+    assert ps.subs(n, 2) == S(15)/2  # Check simplification gives correct result\n+\n+    # Further symbolic checks (symbolic n)\n+    # These checks depend on the corrected formula for the product\n+    # (using q-Pochhammer or equivalent method)\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}