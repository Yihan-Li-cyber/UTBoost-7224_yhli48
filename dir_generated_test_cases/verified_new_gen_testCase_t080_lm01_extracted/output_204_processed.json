{
  "astropy__astropy-12907": "",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "",
  "astropy__astropy-14508": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex 6bdf92c..0382240 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -125,6 +125,42 @@ class TestHeaderFunctions(FitsTestCase):\n         \"\"\"Test Card constructor with long integer value\"\"\"\n \n         c = fits.Card(\"long_int\", -467374636747637647347374734737437)\n+\n+    def test_floating_point_string_representation_card(self):\n+        \"\"\"\"\n+        Ensures Card formats float values with the correct precision, avoiding\n+        comment truncation\n+\n+        Regression test for https://github.com/astropy/astropy/issues/14507\n+        \"\"\"\n+        k = \"HIERARCH ABC DEF GH IJKLMN\"\n+        com = \"[m] abcdef ghijklm nopqrstu vw xyzab\"\n+        \n+        # Test with value 0.009125\n+        c = fits.Card(k, 0.009125, com)\n+        expected_str = f\"{k} = 0.009125 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Test with value 8.95\n+        c = fits.Card(k, 8.95, com)\n+        expected_str = f\"{k} = 8.95 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Test with value -99.9\n+        c = fits.Card(k, -99.9, com)\n+        expected_str = f\"{k} = -99.9 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Additional test cases to ensure broader coverage\n+        # Test with a value that has more decimal places but should not be expanded\n+        c = fits.Card(k, 1.234567890123456, com)\n+        expected_str = f\"{k} = 1.234567890123456 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Test with a very small float value\n+        c = fits.Card(k, 1.23e-10, com)\n+        expected_str = f\"{k} = 1.23E-10 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n         assert str(c) == _pad(\"LONG_INT= -467374636747637647347374734737437\")\n \n     def test_floating_point_value_card(self):\n",
  "astropy__astropy-14539": "diff --git a/astropy/io/fits/tests/test_diff.py b/astropy/io/fits/tests/test_diff.py\nindex 9bf4897..ac951e9 100644\n--- a/astropy/io/fits/tests/test_diff.py\n+++ b/astropy/io/fits/tests/test_diff.py\n@@ -601,7 +601,16 @@ class TestDiff(FitsTestCase):\n         assert \"13 different table data element(s) found (65.00% different)\" in report\n         assert report.count(\"more indices\") == 1\n \n-    def test_identical_files_basic(self):\n+    def test_fitsdiff_identical_vla(self):\n+        \"\"\"Test that FITSDiff does not report differences for identical files with VLA column.\"\"\"\n+        # Create a FITS file with a variable-length array (VLA) column\n+        col = fits.Column('a', format='QD', array=[[0], [0, 0]])\n+        hdu = fits.BinTableHDU.from_columns([col])\n+        hdu.writeto('test_vla_identical.fits', overwrite=True)\n+\n+        # Use FITSDiff to compare the file to itself\n+        diff = fits.FITSDiff('test_vla_identical.fits', 'test_vla_identical.fits')\n+        assert diff.identical, \"FITSDiff reported differences for identical files with VLA column\"\n         \"\"\"Test identicality of two simple, extensionless files.\"\"\"\n \n         a = np.arange(100).reshape(10, 10)\n",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..edd8860 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -79,15 +79,27 @@ def test_inherit_docstrings():\n         def __call__(self, *args):\n             \"FOO\"\n             pass\n+        \n+        @property\n+        def prop(self):\n+            \"PROP\"\n+            return None\n \n     class Subclass(Base):\n         def __call__(self, *args):\n             pass\n+        \n+        @property\n+        def prop(self):\n+            return \"Subclass property\"\n \n     if Base.__call__.__doc__ is not None:\n         # TODO: Maybe if __doc__ is None this test should be skipped instead?\n         assert Subclass.__call__.__doc__ == \"FOO\"\n \n+    if Base.prop.__doc__ is not None:\n+        assert Subclass.prop.__doc__ == \"PROP\"\n+\n \n def test_set_locale():\n     # First, test if the required locales are available\n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..ad82578 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -197,6 +197,19 @@ def test_unknown_unit3():\n     with pytest.raises(TypeError):\n         unit5 = u.Unit(None)\n \n+    # Test comparisons with None\n+    unit = u.Unit(\"asdf\", parse_strict='silent')\n+    assert unit == unit  # Reflexive property\n+    assert unit != None  # Should be False, not TypeError\n+    assert None != unit  # Should be True, not TypeError\n+    assert not (unit == None)  # Explicitly check it evaluates to False\n+    assert unit is not None  # Check is not None for good measure\n+    \n+    # Check UnrecognizedUnit with other types\n+    assert unit != \"different_type\"\n+    assert unit != 1\n+    assert unit != object()\n+\n \n @raises(TypeError)\n def test_invalid_scale():\n",
  "astropy__astropy-7671": "diff --git a/astropy/utils/tests/test_introspection.py b/astropy/utils/tests/test_introspection.py\nindex 852d721..1ef6c3f 100644\n--- a/astropy/utils/tests/test_introspection.py\n+++ b/astropy/utils/tests/test_introspection.py\n@@ -69,7 +69,16 @@ def test_minversion():\n     test_module.__version__ = '0.12.2'\n     good_versions = ['0.12', '0.12.1', '0.12.0.dev']\n     bad_versions = ['1', '1.2rc1']\n+    # Original test cases\n     for version in good_versions:\n         assert minversion(test_module, version)\n+    \n+    # Additional test cases for issue #7647\n+    test_module.__version__ = '1.14.3'\n+    edge_case_versions = ['1.14dev', '1.14.2', '1.14.3']\n+    for version in edge_case_versions:\n+        assert minversion(test_module, version) == (version != '1.14dev')\n+\n+    # Continue with existing bad versions test\n     for version in bad_versions:\n-        assert not minversion(test_module, version)\n+        assert not minversion(test_module, version)\n",
  "astropy__astropy-8707": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex a2103c6..2351e01 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -79,7 +79,37 @@ class TestHeaderFunctions(FitsTestCase):\n         assert header['B'] == 'B'\n         assert header.comments['B'] == 'C'\n \n-    def test_card_constructor_default_args(self):\n+    def test_card_from_bytes_empty(self):\n+        \"\"\"\n+        Test loading a Card from an empty `bytes` object.\n+        \"\"\"\n+        c = fits.Card.fromstring(b\"\")\n+        assert c.keyword == ''\n+        assert c.value == ''\n+        assert str(c) == _pad(\"\")\n+\n+    def test_card_from_bytes_with_non_ascii(self):\n+        \"\"\"\n+        Test loading a Card from a `bytes` object with non-ASCII characters.\n+        This should raise an exception as non-ASCII is not supported.\n+        \"\"\"\n+        with pytest.raises(UnicodeDecodeError):\n+            fits.Card.fromstring(b\"ABC     = '\\xff\\xff\\xff'\")\n+\n+    def test_header_fromstring_bytes_empty(self):\n+        \"\"\"\n+        Test reading a Header from an empty `bytes` object.\n+        \"\"\"\n+        pri_hdr_from_bytes = fits.Header.fromstring(b\"\")\n+        assert len(pri_hdr_from_bytes) == 0\n+\n+    def test_header_fromstring_bytes_with_non_ascii(self):\n+        \"\"\"\n+        Test reading a Header from a `bytes` object with non-ASCII characters.\n+        This should raise an exception as non-ASCII is not supported.\n+        \"\"\"\n+        with pytest.raises(UnicodeDecodeError):\n+            fits.Header.fromstring(b\"SIMPLE  = T / \\xff\\xff\\xff\")\n         \"\"\"Test Card constructor with default argument values.\"\"\"\n \n         c = fits.Card()\n",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..6ef9538 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -150,7 +150,24 @@ class TestQuantityCreation:\n         q5 = u.Quantity(decimal.Decimal('10.25'), u.m, dtype=object)\n         assert q5.dtype == object\n \n-    def test_copy(self):\n+    def test_preserve_float16(self):\n+        \"\"\"Test that np.float16 types are preserved in Quantity creation.\"\"\"\n+        a3_16 = np.array([1., 2.], dtype=np.float16)\n+        q3_16 = u.Quantity(a3_16, u.yr)\n+        assert q3_16.dtype == a3_16.dtype\n+\n+        # Check scalar float16\n+        q_scalar_16 = u.Quantity(np.float16(1.5), u.km)\n+        assert q_scalar_16.dtype == np.dtype(np.float16)\n+\n+        # Ensure compatibility with float32 and float64 for completeness\n+        a3_32 = np.array([1., 2.], dtype=np.float32)\n+        q3_32 = u.Quantity(a3_32, u.yr)\n+        assert q3_32.dtype == a3_32.dtype\n+\n+        a3_64 = np.array([1., 2.], dtype=np.float64)\n+        q3_64 = u.Quantity(a3_64, u.yr)\n+        assert q3_64.dtype == a3_64.dtype\n \n         # By default, a new quantity is constructed, but not if copy=False\n \n",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..0dd15f4 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -218,6 +218,14 @@ TEST_DATA = [\n     (URLValidator(EXTENDED_SCHEMES), 'git+ssh://git@github.com/example/hg-git.git', None),\n \n     (URLValidator(EXTENDED_SCHEMES), 'git://-invalid.com', ValidationError),\n+    # Test cases for URLs with invalid characters in username or password\n+    (URLValidator(), 'http://foo@bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo/bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar@baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar/baz@example.com', ValidationError),\n+    (URLValidator(), 'http://invalid-.com/?m=foo@example.com', ValidationError),\n+    (URLValidator(), \"http://-.~_!$&'()*+,;=%40:80%2f@example.com\", ValidationError),\n     # Trailing newlines not accepted\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..a2068be 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -12,6 +13,7 @@ from django.test import TestCase\n from django.test.utils import Approximate, CaptureQueriesContext\n from django.utils import timezone\n \n+from django.db.models.expressions import Case, When\n from .models import Author, Book, Publisher, Store\n \n \n@@ -389,6 +391,33 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n+    def test_count_distinct_expression(self):\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=300, then='rating')), distinct=True),\n+        )\n+        # Assert that the count of distinct ratings where pages > 300 is as expected\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n+\n+    def test_count_distinct_expression_multiple_conditions(self):\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(\n+                Case(\n+                    When(pages__gt=300, then='rating'),\n+                    When(price__lt=20, then='rating')\n+                ),\n+                distinct=True\n+            ),\n+        )\n+        # Assert that the count of distinct ratings where pages > 300 or price < 20 is as expected\n+        self.assertEqual(aggs['distinct_ratings'], 5)\n+\n+    def test_count_distinct_expression_no_match(self):\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__lt=0, then='rating')), distinct=True),\n+        )\n+        # Assert that the count of distinct ratings where pages < 0 is 0, as no books should match this condition\n+        self.assertEqual(aggs['distinct_ratings'], 0)\n+\n     def test_count_star(self):\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..07f4c6b 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1100,6 +1100,32 @@ class OverrideSettingsTests(SimpleTestCase):\n         django.core.files.storage.default_storage.\n         \"\"\"\n         self.assertIsNone(default_storage.file_permissions_mode)\n+\n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        Default FILE_UPLOAD_PERMISSIONS should be 0o644 unless set otherwise.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n+\n+    def test_file_upload_permissions_effective(self):\n+        \"\"\"\n+        Check if default permissions are applied to a newly saved file.\n+        \"\"\"\n+        test_storage = FileSystemStorage(location=MEDIA_ROOT)\n+        file_name = 'testfile.txt'\n+        content = b'This is a test file content.'\n+\n+        # Create and save a new file\n+        test_storage.save(file_name, ContentFile(content))\n+\n+        # Check the file permissions\n+        saved_file_path = test_storage.path(file_name)\n+        file_permissions = os.stat(saved_file_path).st_mode & 0o777\n+        self.assertEqual(file_permissions, 0o644)\n+\n+        # Cleanup\n+        os.remove(saved_file_path)\n         with self.settings(FILE_UPLOAD_PERMISSIONS=0o777):\n             self.assertEqual(default_storage.file_permissions_mode, 0o777)\n \n",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..d0048b5 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,5 +1,7 @@\n+\n import os\n import signal\n+import subprocess\n from unittest import mock\n \n from django.db.backends.postgresql.client import DatabaseClient\n@@ -29,7 +31,26 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             DatabaseClient.runshell_db(dbinfo)\n         return self.subprocess_args, self.pgpass\n \n-    def test_basic(self):\n+    def test_pgpassword_with_subprocess_run(self):\n+        def _mock_subprocess_run(*args, **kwargs):\n+            env = kwargs.get('env', os.environ)\n+            self.pgpassword = env.get('PGPASSWORD', None)\n+            return subprocess.CompletedProcess(args, 0)\n+\n+        dbinfo = {\n+            'database': 'dbname',\n+            'user': 'someuser',\n+            'password': 'somepassword',\n+            'host': 'somehost',\n+            'port': '444',\n+        }\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            self.subprocess_args, self.pgpassword = DatabaseClient.runshell_db(dbinfo)\n+        \n+        self.assertEqual(\n+            self.pgpassword,\n+            'somepassword'\n+        )\n         self.assertEqual(\n             self._run_it({\n                 'database': 'dbname',\n@@ -113,4 +134,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "",
  "django__django-11095": "diff --git a/tests/generic_inline_admin/tests.py b/tests/generic_inline_admin/tests.py\nindex 9dd9fd9..913d7eb 100644\n--- a/tests/generic_inline_admin/tests.py\n+++ b/tests/generic_inline_admin/tests.py\n@@ -428,4 +428,39 @@ class GenericInlineModelAdminTest(SimpleTestCase):\n         ma = EpisodeAdmin(Episode, self.site)\n         inlines = ma.get_inline_instances(request)\n         for (formset, inline), other_inline in zip(ma.get_formsets_with_inlines(request), inlines):\n-            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+\n+    def test_get_inlines_with_request_attribute(self):\n+        class MediaInline(GenericTabularInline):\n+            model = Media\n+\n+        class AlternateInline(GenericTabularInline):\n+            model = Media\n+\n+        class EpisodeAdmin(admin.ModelAdmin):\n+            inlines = (AlternateInline, MediaInline)\n+\n+            def get_inlines(self, request, obj=None):\n+                if hasattr(request, 'name'):\n+                    if request.name == 'alternate':\n+                        return self.inlines[:1]\n+                    elif request.name == 'media':\n+                        return self.inlines[1:2]\n+                return []\n+\n+        ma = EpisodeAdmin(Episode, self.site)\n+        request = Mock()  # Mocking request object\n+\n+        # Test with no 'name' attribute\n+        self.assertEqual(ma.get_inlines(request, None), [])\n+        self.assertEqual(ma.get_inline_instances(request), [])\n+\n+        # Test with 'name' as 'alternate'\n+        request.name = 'alternate'\n+        self.assertEqual(ma.get_inlines(request, None), (AlternateInline,))\n+        self.assertEqual(type(ma.get_inline_instances(request)[0]), AlternateInline)\n+\n+        # Test with 'name' as 'media'\n+        request.name = 'media'\n+        self.assertEqual(ma.get_inlines(request, None), (MediaInline,))\n+        self.assertEqual(type(ma.get_inline_instances(request)[0]), MediaInline)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..5c32f6c 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -233,6 +233,13 @@ class NumericPasswordValidatorTest(SimpleTestCase):\n \n class UsernameValidatorsTests(SimpleTestCase):\n     def test_unicode_validator(self):\n+        # Test Unicode validator with usernames containing trailing newlines\n+        invalid_usernames_newline = ['username\\n', 'user\\nname\\n', 'unicode\\u00A9\\n']\n+        v_newline = validators.UnicodeUsernameValidator()\n+        for invalid in invalid_usernames_newline:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v_newline(invalid)\n         valid_usernames = ['joe', 'Ren\u00e9', '\u1d2e\u1d35\u1d33\u1d2e\u1d35\u1d3f\u1d30', '\u0623\u062d\u0645\u062f']\n         invalid_usernames = [\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n@@ -249,6 +256,13 @@ class UsernameValidatorsTests(SimpleTestCase):\n                     v(invalid)\n \n     def test_ascii_validator(self):\n+        # Test ASCII validator with usernames containing trailing newlines\n+        invalid_usernames_newline = ['username\\n', 'user\\nname\\n']\n+        v_newline = validators.ASCIIUsernameValidator()\n+        for invalid in invalid_usernames_newline:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v_newline(invalid)\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n         invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n         v = validators.ASCIIUsernameValidator()\n@@ -258,4 +272,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..c2772cd 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -21,8 +21,34 @@ class RenderToStringTest(SimpleTestCase):\n             'obj:test\\n',\n         )\n \n+    def test_autoescape_on(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n+\n+    def test_autoescape_off_with_multiple_templates(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        self.assertEqual(\n+            engine.render_to_string(['nonexistent_template.html', 'test_context.html'], {'obj': '<b>bold</b>'}),\n+            'obj:<b>bold</b>\\n',\n+        )\n \n-class GetDefaultTests(SimpleTestCase):\n+    def test_autoescape_on_with_multiple_templates(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string(['nonexistent_template.html', 'test_context.html'], {'obj': '<b>bold</b>'}),\n+            'obj:&lt;b&gt;bold&lt;/b&gt;\\n',\n+        )\n+\n+    def test_autoescape_off_with_context_instance(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        context_instance = Context({'obj': '<i>italic</i>'})\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', context_instance),\n+            'obj:<i>italic</i>\\n',\n+        )\n \n     @override_settings(TEMPLATES=[])\n     def test_no_engines_configured(self):\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..7ac7f45 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -413,6 +413,10 @@ class HttpResponseTests(unittest.TestCase):\n         self.assertEqual(list(i), [b'abc'])\n         self.assertEqual(list(i), [])\n \n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'My Content'))\n+        self.assertEqual(r.content, b'My Content')\n+        \n     def test_lazy_content(self):\n         r = HttpResponse(lazystr('helloworld'))\n         self.assertEqual(r.content, b'helloworld')\n",
  "django__django-11141": "",
  "django__django-11149": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 296cfba..1e0432f 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -773,36 +773,27 @@ class TestInlinePermissions(TestCase):\n         )\n         self.assertContains(response, 'id=\"id_inner2_set-0-DELETE\"')\n \n-    def test_inline_change_fk_all_perms(self):\n-        permission = Permission.objects.get(codename='add_inner2', content_type=self.inner_ct)\n-        self.user.user_permissions.add(permission)\n-        permission = Permission.objects.get(codename='change_inner2', content_type=self.inner_ct)\n-        self.user.user_permissions.add(permission)\n-        permission = Permission.objects.get(codename='delete_inner2', content_type=self.inner_ct)\n+    def test_inline_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n         self.user.user_permissions.add(permission)\n-        response = self.client.get(self.holder_change_url)\n-        # All perms on inner2s, so we can add/change/delete\n-        self.assertContains(response, '<h2>Inner2s</h2>', count=2)\n-        # One form for existing instance only, three for new\n-        self.assertContains(\n-            response,\n-            '<input type=\"hidden\" id=\"id_inner2_set-TOTAL_FORMS\" value=\"4\" name=\"inner2_set-TOTAL_FORMS\">',\n-            html=True\n-        )\n+        response = self.client.get(self.author_change_url)\n+        # View-only permission for books, so the inline should be read-only\n+        self.assertContains(response, '<h2>Author-book relationships</h2>', html=True)\n         self.assertContains(\n             response,\n-            '<input type=\"hidden\" id=\"id_inner2_set-0-id\" value=\"%i\" name=\"inner2_set-0-id\">' % self.inner2.id,\n+            '<input type=\"hidden\" id=\"id_Author_books-TOTAL_FORMS\" value=\"1\" name=\"Author_books-TOTAL_FORMS\">',\n             html=True\n         )\n-        self.assertContains(response, 'id=\"id_inner2_set-0-DELETE\"')\n-        # TabularInline\n-        self.assertContains(response, '<th class=\"column-dummy required\">Dummy</th>', html=True)\n-        self.assertContains(\n-            response,\n-            '<input type=\"number\" name=\"inner2_set-2-0-dummy\" value=\"%s\" '\n-            'class=\"vIntegerField\" id=\"id_inner2_set-2-0-dummy\">' % self.inner2.dummy,\n-            html=True,\n-        )\n+        self.assertContains(response, '<p>The inline Book</p>', html=True)\n+        self.assertNotContains(response, 'id=\"id_Author_books-0-DELETE\"')\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n+\n+    def test_inline_m2m_no_permissions(self):\n+        response = self.client.get(self.author_change_url)\n+        # No permissions on books, the inline should not appear\n+        self.assertNotContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n+        self.assertNotContains(response, 'id=\"id_Author_books-TOTAL_FORMS\"')\n \n \n @override_settings(ROOT_URLCONF='admin_inlines.urls')\n",
  "django__django-11163": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex b25d077..3f552e2 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2900,6 +2900,11 @@ class StrictAssignmentTests(SimpleTestCase):\n \n \n class ModelToDictTests(TestCase):\n+    def test_model_to_dict_with_empty_fields_list(self):\n+        \"\"\"model_to_dict should return an empty dict when fields=[] is passed.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(model_to_dict(bw, fields=[]), {})\n+\n     def test_many_to_many(self):\n         \"\"\"Data for a ManyToManyField is a list rather than a lazy QuerySet.\"\"\"\n         blue = Colour.objects.create(name='blue')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..ca6e5a3 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,6 +1,8 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n+from django.db.models.deletion import Collector\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..e4215d1 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -95,6 +95,13 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+            # Test case for extremely small numbers with decimal_pos specified\n+            ('1e-199', 2, '0.00'),\n+            ('1e-200', 2, '0.00'),\n+            ('1e-201', 2, '0.00'),\n+            ('1e-250', 2, '0.00'),\n+            ('1e-300', 2, '0.00'),\n+            ('1e-400', 2, '0.00'),\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-11211": "diff --git a/tests/prefetch_related/models.py b/tests/prefetch_related/models.py\nindex 3ce4b3f..283a793 100644\n--- a/tests/prefetch_related/models.py\n+++ b/tests/prefetch_related/models.py\n@@ -1,3 +1,4 @@\n+\n import uuid\n \n from django.contrib.contenttypes.fields import (\n@@ -192,6 +193,15 @@ class Comment(models.Model):\n     object_pk = models.TextField()\n     content_object = GenericForeignKey(ct_field=\"content_type\", fk_field=\"object_pk\")\n \n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=20)\n+    \n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(ContentType, models.CASCADE, db_index=True)\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n+\n     class Meta:\n         ordering = ['id']\n \n",
  "django__django-11239": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex b843072..52743d0 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -81,6 +81,28 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n+    def test_ssl_certificate(self):\n+        self.assertEqual(\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+                'sslmode': 'verify-ca',\n+                'sslrootcert': 'root.crt',\n+                'sslcert': 'client.crt',\n+                'sslkey': 'client.key',\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                {\n+                    'PGSSLCERT': 'client.crt',\n+                    'PGSSLKEY': 'client.key',\n+                    'PGSSLMODE': 'verify-ca',\n+                    'PGSSLROOTCERT': 'root.crt',\n+                }\n+            )\n+        )\n+\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n         def _mock_subprocess_run(*args, **kwargs):\n",
  "django__django-11265": "diff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py\nindex a587c22..2156dac 100644\n--- a/tests/filtered_relation/tests.py\n+++ b/tests/filtered_relation/tests.py\n@@ -82,6 +82,27 @@ class FilteredRelationTests(TestCase):\n                     (self.book4, self.author1),\n                 ], lambda x: (x, x.author_join))\n \n+    def test_with_exclude(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2],\n+        )\n+\n+    def test_with_exclude_and_multiple_conditions(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_filtered=FilteredRelation(\n+                    'book', condition=Q(\n+                        Q(book__title__iexact='poem by alice') | \n+                        Q(book__state=Book.RENTED)\n+                    ),\n+                ),\n+            ).exclude(book_filtered__isnull=False),\n+            [self.author2],  \n+        )\n+\n     def test_without_join(self):\n         self.assertSequenceEqual(\n             Author.objects.annotate(\n",
  "django__django-11276": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 4051a05..360abd8 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -28,6 +28,7 @@ class TestUtilsHtml(SimpleTestCase):\n             ('>', '&gt;'),\n             ('\"', '&quot;'),\n             (\"'\", '&#39;'),\n+            (\"'\", '&#x27;'),\n         )\n         # Substitution patterns for testing the above items.\n         patterns = (\"%s\", \"asdf%sfdsa\", \"%s1\", \"1%sb\")\n",
  "django__django-11292": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex b016284..56bb64b 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -243,7 +243,26 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertNoOutput(err)\n         self.assertEqual(out.strip(), '/PREFIX/some/url/')\n \n-    def test_disallowed_abbreviated_options(self):\n+    def test_skip_checks(self):\n+        \"\"\"\n+        Test that the --skip-checks option allows management commands to bypass system checks.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            'STATICFILES_DIRS': '\"foo\"',  # This would normally trigger a check error.\n+        })\n+        out, err = self.run_manage(['set_option', '--skip-checks', '--set', 'foo'])\n+        self.assertNoOutput(err)\n+        self.assertEqual(out.strip(), 'Set foo')\n+\n+    def test_without_skip_checks(self):\n+        \"\"\"\n+        Test that without the --skip-checks option, the command raises an error due to system checks.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            'STATICFILES_DIRS': '\"foo\"',  # This should trigger a check error.\n+        })\n+        with self.assertRaises(CommandError):\n+            self.run_manage(['set_option', '--set', 'foo'])\n         \"\"\"\n         To avoid conflicts with custom options, commands don't allow\n         abbreviated forms of the --setting and --pythonpath options.\n",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..03d91f8 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,5 +1,7 @@\n+\n from django.test import SimpleTestCase\n-from django.urls.resolvers import RegexPattern, RoutePattern\n+from django.test.utils import override_settings\n+from django.urls.resolvers import RegexPattern, RoutePattern, get_resolver\n from django.utils.translation import gettext_lazy as _\n \n \n@@ -12,4 +14,4 @@ class RegexPatternTests(SimpleTestCase):\n class RoutePatternTests(SimpleTestCase):\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\nindex b010b42..4cc3d25 100644\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -261,8 +261,48 @@ class ModelBackendTest(BaseModelBackendTest, TestCase):\n         )\n         self.assertEqual(authenticate(username='test', password='test'), user)\n \n+import unittest\n+from django.test import TestCase, override_settings\n+from django.contrib.auth import authenticate, get_user_model\n+from auth_tests.test_auth_backends import CountingMD5PasswordHasher\n \n-@override_settings(AUTH_USER_MODEL='auth_tests.ExtensionUser')\n+User = get_user_model()\n+\n+class ModelBackendNoUsernameOrPasswordTest(TestCase):\n+    \"\"\"\n+    Test the authenticate function's behavior when username or password is None.\n+    \"\"\"\n+\n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authenticate_no_username_no_password(self):\n+        \"\"\"\n+        Test with both username and password as None. No database queries or password hash calculations\n+        should occur.\n+        \"\"\"\n+        CountingMD5PasswordHasher.calls = 0\n+        with self.assertNumQueries(0):\n+            self.assertIsNone(authenticate(username=None, password=None))\n+        self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n+\n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authenticate_no_username(self):\n+        \"\"\"\n+        Test with username as None. No database queries or password hash calculations should occur.\n+        \"\"\"\n+        CountingMD5PasswordHasher.calls = 0\n+        with self.assertNumQueries(0):\n+            self.assertIsNone(authenticate(username=None, password='test'))\n+        self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n+\n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authenticate_no_password(self):\n+        \"\"\"\n+        Test with password as None. No database queries or password hash calculations should occur.\n+        \"\"\"\n+        CountingMD5PasswordHasher.calls = 0\n+        with self.assertNumQueries(0):\n+            self.assertIsNone(authenticate(username='test', password=None))\n+        self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n class ExtensionUserModelBackendTest(BaseModelBackendTest, TestCase):\n     \"\"\"\n     Tests for the ModelBackend using the custom ExtensionUser model.\n",
  "django__django-11490": "",
  "django__django-11532": "diff --git a/tests/mail/tests.py b/tests/mail/tests.py\nindex a6f0e17..5139042 100644\n--- a/tests/mail/tests.py\n+++ b/tests/mail/tests.py\n@@ -10,6 +10,7 @@ import threading\n from email import charset, message_from_binary_file, message_from_bytes\n from email.header import Header\n from email.mime.text import MIMEText\n+from unittest import mock\n from email.utils import parseaddr\n from io import StringIO\n from smtplib import SMTP, SMTPAuthenticationError, SMTPException\n@@ -365,7 +366,27 @@ class MailTests(HeadersCheckMixin, SimpleTestCase):\n         self.assertEqual(msg.body, '')\n         self.assertEqual(msg.message().get_payload(), '')\n \n-    def test_encoding(self):\n+    @mock.patch('socket.getfqdn', return_value='\u6f22\u5b57')\n+    def test_non_ascii_dns_non_unicode_email(self, mocked_getfqdn):\n+        \"\"\"\n+        Test if non-ASCII DNS names are correctly encoded to punycode when email encoding is non-unicode.\n+        \"\"\"\n+        from django.core.mail.message import DNS_NAME\n+        delattr(DNS_NAME, '_fqdn')\n+        email = EmailMessage('subject', 'content', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        self.assertIn('@xn--p8s937b', email.message()['Message-ID'])\n+\n+    @mock.patch('socket.getfqdn', return_value='\u6b63\u5b97')\n+    def test_another_non_ascii_dns(self, mocked_getfqdn):\n+        \"\"\"\n+        Additional test for another non-ASCII DNS name.\n+        \"\"\"\n+        from django.core.mail.message import DNS_NAME\n+        delattr(DNS_NAME, '_fqdn')\n+        email = EmailMessage('subject', 'content', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        self.assertIn('@xn--fiqs8s', email.message()['Message-ID'])\n         \"\"\"\n         Regression for #12791 - Encode body correctly with other encodings\n         than utf-8\n",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..134e9f5 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,9 +1,51 @@\n+\n+class PositionField(Field):\n+    \"\"\"Custom field accessible only via instance.\"\"\"\n+    def contribute_to_class(self, cls, name):\n+        super().contribute_to_class(cls, name)\n+        setattr(cls, self.name, self)\n+\n+    def __get__(self, instance, owner):\n+        if instance is None:\n+            raise AttributeError()\n+\n+class TestModel(Model):\n+    number = models.IntegerField(default=0)\n+    order = PositionField()\n+\n+class ValidFieldAccessibleViaInstanceTest(CheckTestCase):\n+    def test_valid_field_accessible_via_instance(self):\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('order',)\n+        self.assertIsValid(TestModelAdmin, TestModel)\n+\n+    def test_invalid_field_not_in_list_display(self):\n+        class TestModelAdmin(ModelAdmin):\n+            list_display_links = ('order',)\n+        self.assertIsInvalid(\n+            TestModelAdmin, TestModel, (\n+                \"The value of 'list_display_links[0]' refers to \"\n+                \"'order', which is not defined in 'list_display'.\"\n+            ), 'admin.E111'\n+        )\n+        \n+    def test_field_does_not_exist(self):\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('non_existent_field',)\n+        self.assertIsInvalid(\n+            TestModelAdmin, TestModel, (\n+                \"The value of 'list_display[0]' refers to 'non_existent_field', \"\n+                \"which is not a callable, an attribute of 'TestModelAdmin', or an \"\n+                \"attribute or method on 'app_label.TestModel'.\"\n+            ), 'admin.E108'\n+        )\n+\n from django import forms\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n-from django.db.models import F\n+from django.db.models import F, Field, Model\n from django.db.models.functions import Upper\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..1e0188b 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -1,6 +1,7 @@\n from datetime import datetime\n from operator import attrgetter\n \n+from datetime import datetime\n from django.core.exceptions import FieldError\n from django.db.models import (\n     CharField, Count, DateTimeField, F, Max, OuterRef, Subquery, Value,\n@@ -462,7 +463,49 @@ class OrderingTests(TestCase):\n             attrgetter('headline')\n         )\n \n-    def test_deprecated_values_annotate(self):\n+    def test_order_by_expression_with_multi_table_inheritance(self):\n+        # Setup child articles with specific order.\n+        ca1 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_2,\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca3 = ChildArticle.objects.create(\n+            headline='h3',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n+\n+        # Order by the parent class primary key (article_ptr).\n+        articles = ChildArticle.objects.order_by('article_ptr')\n+\n+        # Verify the ordering is as expected.\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+\n+    def test_order_by_expression_on_proxy_model(self):\n+        # Setup articles with authors.\n+        article1 = OrderedByFArticle.objects.create(\n+            headline=\"Proxy Article 1\",\n+            pub_date=datetime(2005, 7, 26),\n+            author=self.author_1,\n+        )\n+        article2 = OrderedByFArticle.objects.create(\n+            headline=\"Proxy Article 2\",\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_2,\n+        )\n+\n+        # Order by default ordering defined in the proxy model which uses F expression.\n+        articles = OrderedByFArticle.objects.all()\n+\n+        # Verify the ordering respects the F expression ordering.\n+        self.assertSequenceEqual(articles, [article1, article2])\n         msg = (\n             \"Article QuerySet won't use Meta.ordering in Django 3.1. Add \"\n             \".order_by('-pub_date', 'headline', OrderBy(F(author__name), \"\n",
  "django__django-11603": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 2b8f813..3cdf25d 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -391,7 +391,13 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n-    def test_count_star(self):\n+    def test_avg_distinct(self):\n+        books = Book.objects.aggregate(avg_rating=Avg('rating', distinct=True))\n+        self.assertEqual(books['avg_rating'], 4.125)  # Assuming 4.125 is the expected distinct average rating\n+\n+    def test_sum_distinct(self):\n+        books = Book.objects.aggregate(sum_rating=Sum('rating', distinct=True))\n+        self.assertEqual(books['sum_rating'], 16.5)  # Assuming 16.5 is the expected distinct sum rating\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n         sql = ctx.captured_queries[0]['sql']\n",
  "django__django-11740": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a98fff5..2c9e476 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -45,22 +45,137 @@ class AutodetectorTests(TestCase):\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200)),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     author_name_null = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200, null=True)),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     author_name_longer = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=400)),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     author_name_renamed = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"names\", models.CharField(max_length=200)),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     author_name_default = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200, default='Ada Lovelace')),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     author_name_check_constraint = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200)),\n@@ -73,70 +188,415 @@ class AutodetectorTests(TestCase):\n         (\"date_time_of_birth\", models.DateTimeField(auto_now=True)),\n         (\"time_of_birth\", models.TimeField(auto_now=True)),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     author_dates_of_birth_auto_now_add = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"date_of_birth\", models.DateField(auto_now_add=True)),\n         (\"date_time_of_birth\", models.DateTimeField(auto_now_add=True)),\n         (\"time_of_birth\", models.TimeField(auto_now_add=True)),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     author_name_deconstructible_1 = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200, default=DeconstructibleObject())),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     author_name_deconstructible_2 = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200, default=DeconstructibleObject())),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     author_name_deconstructible_3 = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200, default=models.IntegerField())),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     author_name_deconstructible_4 = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200, default=models.IntegerField())),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     author_name_deconstructible_list_1 = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200, default=[DeconstructibleObject(), 123])),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     author_name_deconstructible_list_2 = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200, default=[DeconstructibleObject(), 123])),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     author_name_deconstructible_list_3 = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200, default=[DeconstructibleObject(), 999])),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     author_name_deconstructible_tuple_1 = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200, default=(DeconstructibleObject(), 123))),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     author_name_deconstructible_tuple_2 = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200, default=(DeconstructibleObject(), 123))),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     author_name_deconstructible_tuple_3 = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200, default=(DeconstructibleObject(), 999))),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     author_name_deconstructible_dict_1 = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200, default={\n             'item': DeconstructibleObject(), 'otheritem': 123\n         })),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     author_name_deconstructible_dict_2 = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200, default={\n             'item': DeconstructibleObject(), 'otheritem': 123\n         })),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     author_name_deconstructible_dict_3 = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200, default={\n             'item': DeconstructibleObject(), 'otheritem': 999\n         })),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     author_name_nested_deconstructible_1 = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200, default=DeconstructibleObject(\n@@ -146,6 +606,29 @@ class AutodetectorTests(TestCase):\n             b=DeconstructibleObject(B=DeconstructibleObject('c')),\n         ))),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     author_name_nested_deconstructible_2 = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200, default=DeconstructibleObject(\n@@ -155,6 +638,29 @@ class AutodetectorTests(TestCase):\n             b=DeconstructibleObject(B=DeconstructibleObject('c')),\n         ))),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     author_name_nested_deconstructible_changed_arg = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200, default=DeconstructibleObject(\n@@ -164,6 +670,29 @@ class AutodetectorTests(TestCase):\n             b=DeconstructibleObject(B=DeconstructibleObject('c')),\n         ))),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     author_name_nested_deconstructible_extra_arg = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200, default=DeconstructibleObject(\n@@ -174,6 +703,29 @@ class AutodetectorTests(TestCase):\n             b=DeconstructibleObject(B=DeconstructibleObject('c')),\n         ))),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     author_name_nested_deconstructible_changed_kwarg = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200, default=DeconstructibleObject(\n@@ -183,6 +735,29 @@ class AutodetectorTests(TestCase):\n             b=DeconstructibleObject(B=DeconstructibleObject('c-changed')),\n         ))),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     author_name_nested_deconstructible_extra_kwarg = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200, default=DeconstructibleObject(\n@@ -193,22 +768,114 @@ class AutodetectorTests(TestCase):\n             c=None,\n         ))),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     author_custom_pk = ModelState(\"testapp\", \"Author\", [(\"pk_field\", models.IntegerField(primary_key=True))])\n     author_with_biography_non_blank = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField()),\n         (\"biography\", models.TextField()),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     author_with_biography_blank = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(blank=True)),\n         (\"biography\", models.TextField(blank=True)),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     author_with_book = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200)),\n         (\"book\", models.ForeignKey(\"otherapp.Book\", models.CASCADE)),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     author_with_book_order_wrt = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200)),\n@@ -219,26 +886,141 @@ class AutodetectorTests(TestCase):\n         (\"name\", models.CharField(max_length=200)),\n         (\"book\", models.ForeignKey(\"otherapp.Book\", models.CASCADE)),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     author_with_publisher_string = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200)),\n         (\"publisher_name\", models.CharField(max_length=200)),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     author_with_publisher = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200)),\n         (\"publisher\", models.ForeignKey(\"testapp.Publisher\", models.CASCADE)),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     author_with_user = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200)),\n         (\"user\", models.ForeignKey(\"auth.User\", models.CASCADE)),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     author_with_custom_user = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200)),\n         (\"user\", models.ForeignKey(\"thirdapp.CustomUser\", models.CASCADE)),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     author_proxy = ModelState(\"testapp\", \"AuthorProxy\", [], {\"proxy\": True}, (\"testapp.author\",))\n     author_proxy_options = ModelState(\"testapp\", \"AuthorProxy\", [], {\n         \"proxy\": True,\n@@ -254,26 +1036,164 @@ class AutodetectorTests(TestCase):\n     author_unmanaged_custom_pk = ModelState(\"testapp\", \"Author\", [\n         (\"pk_field\", models.IntegerField(primary_key=True)),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     author_with_m2m = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"publishers\", models.ManyToManyField(\"testapp.Publisher\")),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     author_with_m2m_blank = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"publishers\", models.ManyToManyField(\"testapp.Publisher\", blank=True)),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     author_with_m2m_through = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"publishers\", models.ManyToManyField(\"testapp.Publisher\", through=\"testapp.Contract\")),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     author_with_renamed_m2m_through = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"publishers\", models.ManyToManyField(\"testapp.Publisher\", through=\"testapp.Deal\")),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     author_with_former_m2m = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"publishers\", models.CharField(max_length=100)),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     author_with_options = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n     ], {\n@@ -297,33 +1217,194 @@ class AutodetectorTests(TestCase):\n         (\"author\", models.ForeignKey(\"testapp.Author\", models.CASCADE)),\n         (\"publisher\", models.ForeignKey(\"testapp.Publisher\", models.CASCADE)),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     contract_renamed = ModelState(\"testapp\", \"Deal\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"author\", models.ForeignKey(\"testapp.Author\", models.CASCADE)),\n         (\"publisher\", models.ForeignKey(\"testapp.Publisher\", models.CASCADE)),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     publisher = ModelState(\"testapp\", \"Publisher\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=100)),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     publisher_with_author = ModelState(\"testapp\", \"Publisher\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"author\", models.ForeignKey(\"testapp.Author\", models.CASCADE)),\n         (\"name\", models.CharField(max_length=100)),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     publisher_with_aardvark_author = ModelState(\"testapp\", \"Publisher\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"author\", models.ForeignKey(\"testapp.Aardvark\", models.CASCADE)),\n         (\"name\", models.CharField(max_length=100)),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     publisher_with_book = ModelState(\"testapp\", \"Publisher\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"author\", models.ForeignKey(\"otherapp.Book\", models.CASCADE)),\n         (\"name\", models.CharField(max_length=100)),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     other_pony = ModelState(\"otherapp\", \"Pony\", [\n         (\"id\", models.AutoField(primary_key=True)),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     other_pony_food = ModelState(\"otherapp\", \"Pony\", [\n         (\"id\", models.AutoField(primary_key=True)),\n     ], managers=[\n@@ -331,6 +1412,29 @@ class AutodetectorTests(TestCase):\n         ('food_mgr', FoodManager('a', 'b')),\n         ('food_mgr_kwargs', FoodManager('x', 'y', 3, 4)),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     other_stable = ModelState(\"otherapp\", \"Stable\", [(\"id\", models.AutoField(primary_key=True))])\n     third_thing = ModelState(\"thirdapp\", \"Thing\", [(\"id\", models.AutoField(primary_key=True))])\n     book = ModelState(\"otherapp\", \"Book\", [\n@@ -338,44 +1442,251 @@ class AutodetectorTests(TestCase):\n         (\"author\", models.ForeignKey(\"testapp.Author\", models.CASCADE)),\n         (\"title\", models.CharField(max_length=200)),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     book_proxy_fk = ModelState(\"otherapp\", \"Book\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"author\", models.ForeignKey(\"thirdapp.AuthorProxy\", models.CASCADE)),\n         (\"title\", models.CharField(max_length=200)),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     book_proxy_proxy_fk = ModelState(\"otherapp\", \"Book\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"author\", models.ForeignKey(\"testapp.AAuthorProxyProxy\", models.CASCADE)),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     book_migrations_fk = ModelState(\"otherapp\", \"Book\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"author\", models.ForeignKey(\"migrations.UnmigratedModel\", models.CASCADE)),\n         (\"title\", models.CharField(max_length=200)),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     book_with_no_author = ModelState(\"otherapp\", \"Book\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"title\", models.CharField(max_length=200)),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     book_with_author_renamed = ModelState(\"otherapp\", \"Book\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"author\", models.ForeignKey(\"testapp.Writer\", models.CASCADE)),\n         (\"title\", models.CharField(max_length=200)),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     book_with_field_and_author_renamed = ModelState(\"otherapp\", \"Book\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"writer\", models.ForeignKey(\"testapp.Writer\", models.CASCADE)),\n         (\"title\", models.CharField(max_length=200)),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     book_with_multiple_authors = ModelState(\"otherapp\", \"Book\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"authors\", models.ManyToManyField(\"testapp.Author\")),\n         (\"title\", models.CharField(max_length=200)),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     book_with_multiple_authors_through_attribution = ModelState(\"otherapp\", \"Book\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"authors\", models.ManyToManyField(\"testapp.Author\", through=\"otherapp.Attribution\")),\n         (\"title\", models.CharField(max_length=200)),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     book_indexes = ModelState(\"otherapp\", \"Book\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"author\", models.ForeignKey(\"testapp.Author\", models.CASCADE)),\n@@ -429,10 +1740,56 @@ class AutodetectorTests(TestCase):\n         (\"author\", models.ForeignKey(\"testapp.Author\", models.CASCADE)),\n         (\"book\", models.ForeignKey(\"otherapp.Book\", models.CASCADE)),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     edition = ModelState(\"thirdapp\", \"Edition\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"book\", models.ForeignKey(\"otherapp.Book\", models.CASCADE)),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     custom_user = ModelState(\"thirdapp\", \"CustomUser\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"username\", models.CharField(max_length=255)),\n@@ -441,12 +1798,58 @@ class AutodetectorTests(TestCase):\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"username\", models.CharField(max_length=255)),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     aardvark = ModelState(\"thirdapp\", \"Aardvark\", [(\"id\", models.AutoField(primary_key=True))])\n     aardvark_testapp = ModelState(\"testapp\", \"Aardvark\", [(\"id\", models.AutoField(primary_key=True))])\n     aardvark_based_on_author = ModelState(\"testapp\", \"Aardvark\", [], bases=(\"testapp.Author\",))\n     aardvark_pk_fk_author = ModelState(\"testapp\", \"Aardvark\", [\n         (\"id\", models.OneToOneField(\"testapp.Author\", models.CASCADE, primary_key=True)),\n     ])\n+    \n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test altering a UUIDField to a ForeignKey creates the necessary migration dependency.\n+        \"\"\"\n+        before = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.UUIDField(null=True, blank=True)),\n+        ])\n+        after = ModelState('testapp1', 'App1', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+            ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState('testapp2', 'App2', [\n+            ('id', models.UUIDField(primary_key=True, unique=True, default=models.UUIDField, editable=False)),\n+            ('text', models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, app2], [after, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n     knight = ModelState(\"eggs\", \"Knight\", [(\"id\", models.AutoField(primary_key=True))])\n     rabbit = ModelState(\"eggs\", \"Rabbit\", [\n         (\"id\", models.AutoField(primary_key=True)),\n@@ -2399,4 +3802,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-11749": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex a0e1530..255e240 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -219,11 +219,67 @@ class CommandTests(SimpleTestCase):\n         management.call_command('subparser', 'foo', 12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n \n+    def test_mutually_exclusive_group_required_options_with_kwargs(self):\n+        out = StringIO()\n+        # Test when passing the 'foo_id' argument as a keyword argument\n+        management.call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+        \n+        # Test when passing the 'foo_name' argument as a keyword argument\n+        out = StringIO()\n+        management.call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+\n+        # Test for error when neither argument is provided\n+        out = StringIO()\n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            management.call_command('mutually_exclusive_required', stdout=out)\n+\n+    def test_mutually_exclusive_group_required_options_with_args(self):\n+        out = StringIO()\n+        # Test when calling with '--foo-id' as an argument\n+        management.call_command('mutually_exclusive_required', '--foo-id=1', stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+\n+        # Test when calling with '--foo-name' as an argument\n+        out = StringIO()\n+        management.call_command('mutually_exclusive_required', '--foo-name=foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+\n     def test_subparser_dest_args(self):\n         out = StringIO()\n         management.call_command('subparser_dest', 'foo', bar=12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n \n+    def test_mutually_exclusive_group_required_options_with_kwargs(self):\n+        out = StringIO()\n+        # Test when passing the 'foo_id' argument as a keyword argument\n+        management.call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+        \n+        # Test when passing the 'foo_name' argument as a keyword argument\n+        out = StringIO()\n+        management.call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+\n+        # Test for error when neither argument is provided\n+        out = StringIO()\n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            management.call_command('mutually_exclusive_required', stdout=out)\n+\n+    def test_mutually_exclusive_group_required_options_with_args(self):\n+        out = StringIO()\n+        # Test when calling with '--foo-id' as an argument\n+        management.call_command('mutually_exclusive_required', '--foo-id=1', stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+\n+        # Test when calling with '--foo-name' as an argument\n+        out = StringIO()\n+        management.call_command('mutually_exclusive_required', '--foo-name=foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+\n     def test_subparser_dest_required_args(self):\n         out = StringIO()\n         management.call_command('subparser_required', 'foo_1', 'foo_2', bar=12, stdout=out)\n",
  "django__django-11790": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 440150b..bec7bb2 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -437,7 +437,26 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         self.assertEqual(form.fields['username'].max_length, 254)\n         self.assertEqual(form.errors, {})\n \n-    def test_username_field_label(self):\n+    def test_username_field_max_length_is_set_in_html(self):\n+        # Test for a user model with max_length 255\n+        data = {\n+            'username': 'u' * 255,\n+            'password': 'pwd',\n+        }\n+        CustomEmailField.objects.create_user(**data)\n+        form = AuthenticationForm(None, data)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 255)\n+\n+    @override_settings(AUTH_USER_MODEL='auth_tests.IntegerUsernameUser')\n+    def test_username_field_default_max_length_is_set_in_html(self):\n+        # Test for a default max_length of 254\n+        data = {\n+            'username': '0123456',\n+            'password': 'password',\n+        }\n+        IntegerUsernameUser.objects.create_user(**data)\n+        form = AuthenticationForm(None, data)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 254)\n \n         class CustomAuthenticationForm(AuthenticationForm):\n             username = CharField(label=\"Name\", max_length=75)\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..5efb4f3 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -306,6 +306,28 @@ class WriterTests(SimpleTestCase):\n             \"default=migrations.test_writer.IntEnum(1))\"\n         )\n \n+    def test_serialize_translated_enum(self):\n+        class TextTranslatedEnum(enum.Enum):\n+            A = _('a-value')\n+            B = _('b-value')\n+\n+        # Test serialization of the enum member using its name\n+        self.assertSerializedResultEqual(\n+            TextTranslatedEnum.A,\n+            (\"migrations.test_writer.TextTranslatedEnum['A']\", {'import migrations.test_writer'})\n+        )\n+\n+        # Test CharField default value serialization\n+        field = models.CharField(default=TextTranslatedEnum.A, choices=[(m.name, m.value) for m in TextTranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('A', migrations.test_writer.TextTranslatedEnum['A']), \"\n+            \"('B', migrations.test_writer.TextTranslatedEnum['B'])], \"\n+            \"default=migrations.test_writer.TextTranslatedEnum['A'])\"\n+        )\n+\n     def test_serialize_choices(self):\n         class TextChoices(models.TextChoices):\n             A = 'A', 'A value'\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..e7f14db 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,7 @@\n+\n import unittest\n-from datetime import datetime\n+from datetime import datetime, timezone\n+from unittest import mock\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -316,6 +318,30 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_with_mocked_datetime(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        # These test cases follow the logic expected after the bug fix.\n+        utcnow_1 = datetime(2019, 11, 6, 8, 49, 37, tzinfo=timezone.utc)\n+        utcnow_2 = datetime(2020, 11, 6, 8, 49, 37, tzinfo=timezone.utc)\n+        utcnow_3 = datetime(2048, 11, 6, 8, 49, 37, tzinfo=timezone.utc)\n+        tests = (\n+            (utcnow_1, 'Tuesday, 31-Dec-69 08:49:37 GMT', datetime(1969, 12, 31, 8, 49, 37)),\n+            (utcnow_1, 'Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),\n+            (utcnow_1, 'Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37)),\n+            (utcnow_2, 'Wednesday, 31-Dec-70 08:49:37 GMT', datetime(1970, 12, 31, 8, 49, 37)),\n+            (utcnow_2, 'Friday, 31-Dec-71 08:49:37 GMT', datetime(1971, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+        )\n+        for utcnow, rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = utcnow\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n+\n     def test_parsing_rfc850(self):\n         parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n",
  "django__django-11880": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 95afc0d..0105c25 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3672,7 +3672,37 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n             '<input type=\"hidden\" name=\"data\" id=\"id_data\"></td></tr>'\n         )\n \n-    def test_field_named_data(self):\n+    import copy\n+    from django.forms import CharField, Form\n+    from django.test import SimpleTestCase\n+    \n+    class FormFieldDeepCopyTests(SimpleTestCase):\n+    \n+        def test_field_deep_copy_error_messages(self):\n+            class CustomCharField(CharField):\n+                def __init__(self, **kwargs):\n+                    kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                    super().__init__(**kwargs)\n+    \n+            field = CustomCharField()\n+            field_copy = copy.deepcopy(field)\n+            self.assertIsInstance(field_copy, CustomCharField)\n+            self.assertIsNot(field_copy.error_messages, field.error_messages)\n+        \n+        def test_modify_deep_copied_error_messages(self):\n+            class CustomCharField(CharField):\n+                def __init__(self, **kwargs):\n+                    kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                    super().__init__(**kwargs)\n+    \n+            field = CustomCharField()\n+            field_copy = copy.deepcopy(field)\n+            # Modify the error_messages of the copied field\n+            field_copy.error_messages['invalid'] = 'Modified error message.'\n+    \n+            # Original field's error_messages should not be affected\n+            self.assertEqual(field.error_messages['invalid'], 'Form custom error message.')\n+            self.assertEqual(field_copy.error_messages['invalid'], 'Modified error message.')\n         class DataForm(Form):\n             data = CharField(max_length=10)\n \n",
  "django__django-11951": "",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..c46f4d8 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -32,6 +32,46 @@ class Vehicle(models.IntegerChoices):\n     __empty__ = _('(Unknown)')\n \n \n+from django.db import models\n+from django.test import TestCase\n+\n+class MyChoice(models.TextChoices):\n+    FIRST_CHOICE = \"first\", \"The first choice, it is\"\n+    SECOND_CHOICE = \"second\", \"The second choice, it is\"\n+\n+class MyObject(models.Model):\n+    my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n+class EnumFieldTests(TestCase):\n+    def setUp(self):\n+        self.my_object = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n+\n+    def test_created_object_str_field(self):\n+        \"\"\"\n+        Test that the __str__ of a newly created object with a TextChoices\n+        field returns the correct string value.\n+        \"\"\"\n+        my_object = self.my_object\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(str(my_object.my_str_value), \"first\")\n+\n+    def test_retrieved_object_str_field(self):\n+        \"\"\"\n+        Test that the __str__ of a retrieved object with a TextChoices\n+        field returns the correct string value.\n+        \"\"\"\n+        my_object = MyObject.objects.get(pk=self.my_object.pk)\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(str(my_object.my_str_value), \"first\")\n+\n+    def test_enum_str_function(self):\n+        \"\"\"\n+        Test that the str function on enum choices returns the expected value.\n+        \"\"\"\n+        for choice in MyChoice:\n+            with self.subTest(choice=choice):\n+                self.assertEqual(str(choice), choice.value)\n+\n class Gender(models.TextChoices):\n     MALE = 'M'\n     FEMALE = 'F'\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..5ad6898 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -150,7 +150,15 @@ class ChoicesTests(SimpleTestCase):\n \n class GetFieldDisplayTests(SimpleTestCase):\n \n-    def test_choices_and_field_display(self):\n+    def test_overriding_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n         \"\"\"\n         get_choices() interacts with get_FIELD_display() to return the expected\n         values.\n",
  "django__django-12039": "diff --git a/tests/indexes/tests.py b/tests/indexes/tests.py\nindex 700f574..9ee4144 100644\n--- a/tests/indexes/tests.py\n+++ b/tests/indexes/tests.py\n@@ -9,12 +9,16 @@ from django.db.models.query_utils import Q\n from django.test import (\n     TestCase, TransactionTestCase, skipIfDBFeature, skipUnlessDBFeature,\n )\n+from django.db import connection\n+from django.db.models import Index\n from django.test.utils import override_settings\n from django.utils import timezone\n \n from .models import (\n     Article, ArticleTranslation, IndexedArticle2, IndexTogetherSingleList,\n )\n+from django.db import connection\n+from django.db.models import Index\n \n \n class SchemaIndexesTests(TestCase):\n@@ -22,7 +26,67 @@ class SchemaIndexesTests(TestCase):\n     Test index handling by the db.backends.schema infrastructure.\n     \"\"\"\n \n-    def test_index_name_hash(self):\n+    def test_columns_list_sql(self):\n+        index = Index(fields=['headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_descending_columns_list_sql(self):\n+        index = Index(fields=['-headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s DESC)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_ops_class_columns_lists_sql(self):\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_ops_class_descending_columns_list_sql(self):\n+        index = Index(\n+            fields=['-headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops DESC)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_columns_list_with_multiple_fields_sql(self):\n+        # Test for multiple fields without opclasses and descending order\n+        index = Index(fields=['headline', '-pub_date'], name='whitespace_idx_multi')\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s, %s DESC)' % (editor.quote_name('headline'), editor.quote_name('pub_date')),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_ops_classes_with_multiple_fields_sql(self):\n+        # Test for multiple fields with opclasses and correct whitespace\n+        index = Index(\n+            fields=['headline', 'pub_date'],\n+            name='whitespace_idx_multi_ops',\n+            opclasses=['text_pattern_ops', 'int_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops, %s int_ops)' % (editor.quote_name('headline'), editor.quote_name('pub_date')),\n+                str(index.create_sql(Article, editor)),\n+            )\n         \"\"\"\n         Index names should be deterministic.\n         \"\"\"\n",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..897818c 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n@@ -7,6 +8,9 @@ from django.db.models.fields.related_lookups import RelatedIsNull\n from django.db.models.functions import Lower\n from django.db.models.lookups import Exact, GreaterThan, IsNull, LessThan\n from django.db.models.sql.query import Query\n+from django.db.models import Q\n+from django.db.models.lookups import Exact\n+from .models import Item\n from django.db.models.sql.where import OR\n from django.test import SimpleTestCase\n from django.test.utils import register_lookup\n@@ -102,7 +106,12 @@ class TestQuery(SimpleTestCase):\n         self.assertIsInstance(a_isnull, RelatedIsNull)\n         self.assertIsInstance(a_isnull.lhs, SimpleCol)\n         self.assertEqual(a_isnull.lhs.target, ObjectC._meta.get_field('objecta'))\n-        b_isnull = where.children[1]\n+    def test_iterable_lookup_value(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=['a', 'b']))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ['a', 'b'])\n         self.assertIsInstance(b_isnull, RelatedIsNull)\n         self.assertIsInstance(b_isnull.lhs, SimpleCol)\n         self.assertEqual(b_isnull.lhs.target, ObjectC._meta.get_field('objectb'))\n",
  "django__django-12125": "",
  "django__django-12143": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 2d13234..df7ea98 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -838,10 +838,96 @@ class ChangeListTests(TestCase):\n         request = self.factory.post(changelist_url, data=data)\n         queryset = m._get_list_editable_queryset(request, prefix='form')\n         self.assertEqual(queryset.count(), 1)\n+        \n+    def test_get_list_editable_queryset_with_special_regex_chars_in_prefix(self):\n+        \"\"\"Test if special regex characters in formset prefix are handled correctly.\"\"\"\n+        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n+        Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n+        data = {\n+            'form$-TOTAL_FORMS': '2',\n+            'form$-INITIAL_FORMS': '2',\n+            'form$-MIN_NUM_FORMS': '0',\n+            'form$-MAX_NUM_FORMS': '1000',\n+            'form$-0-uuid': str(a.pk),\n+            'form$-0-load': '10',\n+            '_save': 'Save',\n+        }\n+        superuser = self._create_superuser('superuser')\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form$')\n+        self.assertEqual(queryset.count(), 1)\n+\n+    def test_get_list_editable_queryset_with_multiple_special_chars_in_prefix(self):\n+        \"\"\"Test formset prefix with multiple special regex characters.\"\"\"\n+        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n+        Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n+        data = {\n+            'form*?.+-TOTAL_FORMS': '2',\n+            'form*?.+-INITIAL_FORMS': '2',\n+            'form*?.+-MIN_NUM_FORMS': '0',\n+            'form*?.+-MAX_NUM_FORMS': '1000',\n+            'form*?.+-0-uuid': str(a.pk),\n+            'form*?.+-0-load': '10',\n+            '_save': 'Save',\n+        }\n+        superuser = self._create_superuser('superuser')\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form*?.+')\n+        self.assertEqual(queryset.count(), 1)\n+        self.assertEqual(queryset.count(), 1)\n         data['form-0-uuid'] = 'INVALD_PRIMARY_KEY'\n         # The unfiltered queryset is returned if there's invalid data.\n         request = self.factory.post(changelist_url, data=data)\n         queryset = m._get_list_editable_queryset(request, prefix='form')\n+        self.assertEqual(queryset.count(), 1)\n+        \n+    def test_get_list_editable_queryset_with_special_regex_chars_in_prefix(self):\n+        \"\"\"Test if special regex characters in formset prefix are handled correctly.\"\"\"\n+        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n+        Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n+        data = {\n+            'form$-TOTAL_FORMS': '2',\n+            'form$-INITIAL_FORMS': '2',\n+            'form$-MIN_NUM_FORMS': '0',\n+            'form$-MAX_NUM_FORMS': '1000',\n+            'form$-0-uuid': str(a.pk),\n+            'form$-0-load': '10',\n+            '_save': 'Save',\n+        }\n+        superuser = self._create_superuser('superuser')\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form$')\n+        self.assertEqual(queryset.count(), 1)\n+\n+    def test_get_list_editable_queryset_with_multiple_special_chars_in_prefix(self):\n+        \"\"\"Test formset prefix with multiple special regex characters.\"\"\"\n+        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n+        Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n+        data = {\n+            'form*?.+-TOTAL_FORMS': '2',\n+            'form*?.+-INITIAL_FORMS': '2',\n+            'form*?.+-MIN_NUM_FORMS': '0',\n+            'form*?.+-MAX_NUM_FORMS': '1000',\n+            'form*?.+-0-uuid': str(a.pk),\n+            'form*?.+-0-load': '10',\n+            '_save': 'Save',\n+        }\n+        superuser = self._create_superuser('superuser')\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form*?.+')\n+        self.assertEqual(queryset.count(), 1)\n         self.assertEqual(queryset.count(), 2)\n \n     def test_changelist_view_list_editable_changed_objects_uses_filter(self):\n",
  "django__django-12155": "diff --git a/tests/admin_docs/test_utils.py b/tests/admin_docs/test_utils.py\nindex 6cae16b..495f3e3 100644\n--- a/tests/admin_docs/test_utils.py\n+++ b/tests/admin_docs/test_utils.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n \n from django.contrib.admindocs.utils import (\n@@ -95,6 +96,33 @@ class TestUtils(AdminDocsSimpleTestCase):\n         output = parse_rst(header, 'header')\n         self.assertIn('<h3>Header</h3>', output)\n \n+    def test_trim_docstring_with_content_first_line(self):\n+        \"\"\"\n+        Verify that trim_docstring correctly handles a docstring\n+        where the first line contains content.\n+        \"\"\"\n+        docstring = \"\"\"First line with content.\n+        \n+        Second line indented.\n+            Third line more indented.\n+        \"\"\"\n+        expected_trimmed = \"First line with content.\\n\\nSecond line indented.\\n    Third line more indented.\"\n+        self.assertEqual(trim_docstring(docstring), expected_trimmed)\n+\n+    def test_trim_docstring_with_empty_first_line(self):\n+        \"\"\"\n+        Verify that trim_docstring handles a docstring\n+        with an empty first line.\n+        \"\"\"\n+        docstring = \"\"\"\n+        First indented line.\n+        \n+        Second line with more indentation.\n+            Third line even more indented.\n+        \"\"\"\n+        expected_trimmed = \"First indented line.\\n\\nSecond line with more indentation.\\n    Third line even more indented.\"\n+        self.assertEqual(trim_docstring(docstring), expected_trimmed)\n+\n     def test_parse_rst(self):\n         \"\"\"\n         parse_rst() should use `cmsreference` as the default role.\n",
  "django__django-12193": "diff --git a/tests/postgres_tests/test_array.py b/tests/postgres_tests/test_array.py\nindex 6228cbc..9acbfac 100644\n--- a/tests/postgres_tests/test_array.py\n+++ b/tests/postgres_tests/test_array.py\n@@ -1103,7 +1103,29 @@ class TestSplitFormWidget(PostgreSQLWidgetTestCase):\n             }\n         )\n \n-    def test_render(self):\n+    def test_split_array_field_boolean_initial_data(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('name', [False, True, False])\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{}, {'checked': True}, {}]\n+        )\n+\n+    def test_split_array_field_boolean_all_true(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('name', [True, True, True])\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{'checked': True}, {'checked': True}, {'checked': True}]\n+        )\n+\n+    def test_split_array_field_boolean_all_false(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('name', [False, False, False])\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{}, {}, {}]\n+        )\n         self.check_html(\n             SplitArrayWidget(forms.TextInput(), size=2), 'array', None,\n             \"\"\"\n",
  "django__django-12209": "",
  "django__django-12262": "",
  "django__django-12276": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 61f7a13..60694b1 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import copy\n import datetime\n import json\n@@ -2478,7 +2479,22 @@ Password: <input type=\"password\" name=\"password\" required>\n             '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n         )\n \n-    def test_filefield_initial_callable(self):\n+    def test_filefield_with_initial_data_not_required(self):\n+        # Test to ensure FileInput doesn't render `required` when initial data is set.\n+        class FileFormWithInitial(Form):\n+            file1 = FileField(initial='resume.txt')\n+\n+        # Form instance with initial data\n+        form = FileFormWithInitial(auto_id=False)\n+        self.assertHTMLEqual(\n+            form.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n+        )\n+\n+        # Ensure `use_required_attribute` behaves as expected with initial data\n+        widget = form.fields['file1'].widget\n+        self.assertIs(widget.use_required_attribute(None), True)\n+        self.assertIs(widget.use_required_attribute('resume.txt'), False)\n         class FileForm(forms.Form):\n             file1 = forms.FileField(initial=lambda: 'resume.txt')\n \n",
  "django__django-12304": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 6cabf01..e42d43d 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import decimal\n import ipaddress\n@@ -6,6 +7,7 @@ import uuid\n from django.db import models\n from django.test import SimpleTestCase\n from django.utils.functional import Promise\n+from django.template import Context, Template\n from django.utils.translation import gettext_lazy as _\n \n \n@@ -137,7 +139,24 @@ class ChoicesTests(SimpleTestCase):\n                 # A string is not permitted as the second argument to int().\n                 ONE = 1, 'X', 'Invalid'\n \n-        msg = \"duplicate values found in <enum 'Fruit'>: PINEAPPLE -> APPLE\"\n+    def test_templates_with_integer_choices(self):\n+        template = Template('{{ Suit.DIAMOND.label }}|{{ Suit.DIAMOND.value }}')\n+        output = template.render(Context({'Suit': Suit}))\n+        self.assertEqual(output, 'Diamond|1')\n+\n+    def test_templates_with_enum_comparison(self):\n+        class YearInSchool(models.TextChoices):\n+            FRESHMAN = 'FR', 'Freshman'\n+            SOPHOMORE = 'SO', 'Sophomore'\n+            JUNIOR = 'JR', 'Junior'\n+            SENIOR = 'SR', 'Senior'\n+            do_not_call_in_templates = True\n+\n+        student = {'year_in_school': YearInSchool.FRESHMAN}\n+        template = Template('{% if student.year_in_school == YearInSchool.FRESHMAN %}Match{% else %}No Match{% endif %}')\n+        context = Context({'student': student, 'YearInSchool': YearInSchool})\n+        output = template.render(context)\n+        self.assertEqual(output, 'Match')\n         with self.assertRaisesMessage(ValueError, msg):\n             class Fruit(models.IntegerChoices):\n                 APPLE = 1, 'Apple'\n",
  "django__django-12308": "",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..bae0df2 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1015,7 +1015,36 @@ class OtherModelTests(SimpleTestCase):\n             class ParkingLot(Place):\n                 parent = models.OneToOneField(Place, models.CASCADE)\n \n-    def test_m2m_table_name_clash(self):\n+    def test_onetoone_field_order_with_parent_link(self):\n+        class Document(models.Model):\n+            pass\n+\n+        # Test case where the parent link is defined first, which caused the issue initially.\n+        class Picking(Document):\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+\n+        # This should not raise an error since the parent_link is correctly set\n+        self.assertEqual(Picking.check(), [])\n+\n+        # Test case where the parent link is defined second, which previously worked.\n+        class PickingAlternative(Document):\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+\n+        # This should also pass without errors\n+        self.assertEqual(PickingAlternative.check(), [])\n+\n+    def test_missing_parent_link_order_issue(self):\n+        msg = 'Add parent_link=True to invalid_models_tests.Picking.origin.'\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            class Document(models.Model):\n+                pass\n+\n+            # Deliberately placing origin first without parent_link to simulate the error\n+            class Picking(Document):\n+                origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+                document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n         class Foo(models.Model):\n             bar = models.ManyToManyField('Bar', db_table='myapp_bar')\n \n",
  "django__django-12419": "diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py\nindex 7af62eb..0bd29a6 100644\n--- a/tests/middleware/test_security.py\n+++ b/tests/middleware/test_security.py\n@@ -231,7 +231,12 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         \"\"\"\n         self.assertNotIn('Referrer-Policy', self.process_response())\n \n-    def test_referrer_policy_on(self):\n+    @override_settings()\n+    def test_referrer_policy_default_same_origin(self):\n+        \"\"\"\n+        By default, when SECURE_REFERRER_POLICY is not set, it should default to \"same-origin\".\n+        \"\"\"\n+        self.assertEqual(self.process_response()['Referrer-Policy'], 'same-origin')\n         \"\"\"\n         With SECURE_REFERRER_POLICY set to a valid value, the middleware adds a\n         \"Referrer-Policy\" header to the response.\n@@ -254,4 +259,4 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         present in the response.\n         \"\"\"\n         response = self.process_response(headers={'Referrer-Policy': 'unsafe-url'})\n-        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n",
  "django__django-12663": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 872551b..4de6b5a 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -13,10 +13,12 @@ from django.db.models import (\n     Func, IntegerField, Max, Min, Model, OrderBy, OuterRef, Q, StdDev,\n     Subquery, Sum, TimeField, UUIDField, Value, Variance, When,\n )\n+from django.utils.functional import SimpleLazyObject\n from django.db.models.expressions import Col, Combinable, Random, RawSQL, Ref\n from django.db.models.functions import (\n     Coalesce, Concat, Left, Length, Lower, Substr, Upper,\n )\n+from django.utils.functional import SimpleLazyObject\n from django.db.models.sql import constants\n from django.db.models.sql.datastructures import Join\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n@@ -26,6 +28,7 @@ from .models import (\n     UUID, UUIDPK, Company, Employee, Experiment, Number, RemoteEmployee,\n     Result, SimulationRun, Time,\n )\n+from django.utils.functional import SimpleLazyObject\n \n \n class BasicExpressionsTests(TestCase):\n",
  "django__django-12708": "",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..8e62e02 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -14,7 +14,9 @@ from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.auth.models import User\n from django.core.files.storage import default_storage\n from django.core.files.uploadedfile import SimpleUploadedFile\n-from django.db.models import CharField, DateField, DateTimeField, UUIDField\n+from django.db.models import CharField, DateField, DateTimeField, ManyToManyField, UUIDField\n+from django import forms\n+from django.contrib import admin\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..b0ffe95 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,7 +172,7 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n@@ -181,4 +181,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..7c7aefc 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -9,6 +9,8 @@ from django.db.models import Exists, Max, OuterRef\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n from django.utils.deprecation import RemovedInDjango40Warning\n+from django.db import models\n+from django.test.utils import isolate_apps\n \n from .models import (\n     Article, Author, Freebie, Game, IsNullWithNoneAsRHS, Player, Season, Tag,\n",
  "django__django-12858": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 3b6974f..309c5b6 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -883,6 +883,22 @@ class OtherModelTests(SimpleTestCase):\n             )\n         ])\n \n+    def test_ordering_across_related_fields_with_isnull(self):\n+        class Supply(models.Model):\n+            product = models.ForeignKey('Product', models.CASCADE)\n+\n+        class Product(models.Model):\n+            parent = models.ForeignKey('self', models.CASCADE, null=True)\n+\n+        class Stock(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('supply__product__parent__isnull',)\n+\n+        # Ensure the model check does not raise the error for isnull lookup in ordering\n+        self.assertEqual(Stock.check(), [])\n+\n     def test_ordering_allows_registered_lookups(self):\n         class Model(models.Model):\n             test = models.CharField(max_length=100)\n",
  "django__django-13012": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 87c0945..111ba4e 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1821,10 +1821,26 @@ class CombinableTests(SimpleTestCase):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             Combinable() | Combinable()\n \n-    def test_reversed_and(self):\n-        with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n-            object() & Combinable()\n-\n-    def test_reversed_or(self):\n-        with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n-            object() | Combinable()\n+class ExpressionWrapperTests(SimpleTestCase):\n+\n+    def test_empty_group_by(self):\n+        expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [])\n+\n+    def test_non_empty_group_by(self):\n+        expr = ExpressionWrapper(Lower(Value('f')), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [expr.expression])\n+\n+    def test_constant_expression_not_in_group_by(self):\n+        # This test ensures that a constant ExpressionWrapper is not incorrectly added to the GROUP BY clause.\n+        expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+        query = Model.objects.annotate(expr_res=expr).values('expr_res', 'column_a').annotate(sum=Sum('column_b')).query\n+        # Check that the constant 3 is not in the group by clause\n+        self.assertNotIn('3', str(query.group_by))\n+\n+    def test_non_constant_expression_in_group_by(self):\n+        # This test ensures that non-constant expressions are correctly handled.\n+        expr = ExpressionWrapper(Lower(Value('f')), output_field=IntegerField())\n+        query = Model.objects.annotate(expr_res=expr).values('expr_res', 'column_a').annotate(sum=Sum('column_b')).query\n+        # Check that the expression is in the group by clause\n+        self.assertIn(str(expr.expression), str(query.group_by))\n",
  "django__django-13028": "",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..f54b0be 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,6 +343,32 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_order_by_self_referential_fk(self):\n+        # Set up initial data\n+        author_1 = Author.objects.create()\n+        author_2 = Author.objects.create()\n+\n+        article_1 = Article.objects.create(headline=\"Article 1\", author=author_1)\n+        article_2 = Article.objects.create(headline=\"Article 2\", author=author_2)\n+\n+        author_1.editor = author_2  # Self-referential foreign key assignment\n+        author_1.save()\n+        author_2.editor = author_1  # Self-referential foreign key assignment\n+        author_2.save()\n+\n+        # Test ordering by self-referential foreign key\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline')\n+        )\n+\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline')\n+        )\n+\n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n@@ -353,6 +379,32 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n+\n+    def test_order_by_self_referential_fk(self):\n+        # Set up initial data\n+        author_1 = Author.objects.create()\n+        author_2 = Author.objects.create()\n+\n+        article_1 = Article.objects.create(headline=\"Article 1\", author=author_1)\n+        article_2 = Article.objects.create(headline=\"Article 2\", author=author_2)\n+\n+        author_1.editor = author_2  # Self-referential foreign key assignment\n+        author_1.save()\n+        author_2.editor = author_1  # Self-referential foreign key assignment\n+        author_2.save()\n+\n+        # Test ordering by self-referential foreign key\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline')\n+        )\n+\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline')\n+        )\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline').asc()), [\n                 \"Article 1\",\n",
  "django__django-13089": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex e11856f..71f747b 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -615,7 +615,22 @@ class BaseCacheTests:\n                 count += 1\n         self.assertEqual(count, final_count)\n \n-    def test_cull(self):\n+    def test_cull_none_type_handling(self):\n+        \"\"\"Test that _cull handles NoneType properly when the store is empty or no suitable record is found.\"\"\"\n+        try:\n+            cull_cache = caches['cull']\n+        except InvalidCacheBackendError:\n+            self.skipTest(\"Culling isn't implemented.\")\n+\n+        # Mock the database cursor to simulate the case where fetchone() returns None\n+        with patch('django.core.cache.backends.db.cache.cull') as mock_cull:\n+            mock_cull.return_value = None\n+            # Forcing cull operation\n+            with connection.cursor() as cursor:\n+                now = datetime.now()\n+                cull_cache._cull(using=cull_cache.db, cursor=cursor, now=now)\n+                # Ensure no exceptions are raised\n+                self.assertTrue(True, \"Culling operation handled NoneType without exception.\")\n         self._perform_cull_test('cull', 50, 29)\n \n     def test_zero_cull(self):\n",
  "django__django-13109": "diff --git a/tests/model_forms/models.py b/tests/model_forms/models.py\nindex ff8ad74..94af9b6 100644\n--- a/tests/model_forms/models.py\n+++ b/tests/model_forms/models.py\n@@ -28,8 +28,24 @@ class Category(models.Model):\n         return self.__str__()\n \n \n+class WriterManager(models.Manager):\n+    def get_queryset(self):\n+        return super().get_queryset().filter(archived=False)\n+\n class Writer(models.Model):\n     name = models.CharField(max_length=50, help_text='Use both first and last names.')\n+    archived = models.BooleanField(default=False, editable=False)\n+    objects = WriterManager()\n+\n+    class Meta:\n+        ordering = ('name',)\n+\n+    def __str__(self):\n+        return self.name\n+\n+class FavoriteArticle(models.Model):\n+    article = models.ForeignKey('Article', on_delete=models.CASCADE)\n+    name = models.CharField(max_length=50, help_text='Use both first and last names.')\n \n     class Meta:\n         ordering = ('name',)\n",
  "django__django-13112": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 081eff8..fe090de 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -867,7 +867,28 @@ class StateTests(SimpleTestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             project_state.apps\n \n-    def test_real_apps(self):\n+    def test_mixed_case_foreign_key(self):\n+        \"\"\"\n+        Test that a ForeignKey with a mixed-case app label does not cause issues.\n+        \"\"\"\n+        new_apps = Apps()\n+\n+        class Category(models.Model):\n+            class Meta:\n+                app_label = 'MiXedCaseApp'\n+                apps = new_apps\n+\n+        class Content(models.Model):\n+            category = models.ForeignKey(Category, models.CASCADE)\n+\n+            class Meta:\n+                app_label = 'MiXedCaseApp'\n+                apps = new_apps\n+\n+        project_state = ProjectState()\n+        project_state.add_model(ModelState.from_model(Category))\n+        project_state.add_model(ModelState.from_model(Content))\n+        self.assertEqual(len(project_state.apps.get_models()), 2)\n         \"\"\"\n         Including real apps can resolve dangling FK errors.\n         This test relies on the fact that contenttypes is always loaded.\n",
  "django__django-13121": "",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..e78c87a 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1627,7 +1627,15 @@ class FTimeDeltaTests(TestCase):\n         for e in qs:\n             self.assertEqual(e.delta, delta)\n \n-    def test_duration_with_datetime(self):\n+    @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_without_expression_wrapper(self):\n+        # Test the F('end') - F('start') directly without ExpressionWrapper\n+        experiments = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for experiment in experiments:\n+            calculated_delta = experiment.end - experiment.start\n+            self.assertEqual(experiment.delta, calculated_delta)\n         # Exclude e1 which has very high precision so we can test this on all\n         # backends regardless of whether or not it supports\n         # microsecond_precision.\n",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..4cea4ba 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,5 +1,7 @@\n import operator\n \n+import operator\n+\n from django.db import DatabaseError, NotSupportedError, connection\n from django.db.models import Exists, F, IntegerField, OuterRef, Value\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n@@ -45,7 +47,12 @@ class QuerySetSetOperationTests(TestCase):\n         qs2 = Number.objects.filter(num__lte=4)\n         self.assertNumbersEqual(qs1.difference(qs2), [5], ordered=False)\n \n-    def test_union_distinct(self):\n+    def test_union_none(self):\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        qs3 = qs1.union(qs2)\n+        self.assertSequenceEqual(qs3.none(), [])\n+        self.assertNumbersEqual(qs3, [0, 1, 8, 9], ordered=False)\n         qs1 = Number.objects.all()\n         qs2 = Number.objects.all()\n         self.assertEqual(len(list(qs1.union(qs2, all=True))), 20)\n",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..ce471aa 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -33,7 +33,7 @@ from django.http import HttpResponse\n from django.test import (\n     RequestFactory, TestCase, ignore_warnings, override_settings,\n )\n-from django.utils import timezone\n+from django.utils.deprecation import RemovedInDjango40Warning\n \n from .models import SessionStore as CustomDatabaseSession\n \n@@ -312,6 +312,13 @@ class SessionTestsMixin:\n         self.assertEqual(self.session.decode(encoded), data)\n \n     @override_settings(SECRET_KEY='django_tests_secret_key')\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_default_hashing_algorithm_legacy_decode(self):\n+        with self.settings(DEFAULT_HASHING_ALGORITHM='sha1'):\n+            data = {'a test key': 'a test value'}\n+            encoded = self.session.encode(data)\n+            self.assertEqual(self.session._legacy_decode(encoded), data)\n+\n     def test_decode_legacy(self):\n         # RemovedInDjango40Warning: pre-Django 3.1 sessions will be invalid.\n         legacy_encoded = (\n",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..e8493e3 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -9,6 +9,9 @@ from django.test.utils import require_jinja2\n from django.urls import resolve\n from django.utils.deprecation import RemovedInDjango40Warning\n from django.views.generic import RedirectView, TemplateView, View\n+from django.shortcuts import get_object_or_404\n+from django.utils.functional import SimpleLazyObject\n+from .models import Account  # Assuming Account model is defined for testing\n \n from . import views\n \n",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..aadd462 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -15,6 +15,7 @@ from django.forms.models import (\n     modelform_factory,\n )\n from django.template import Context, Template\n+from django.test.utils import isolate_apps\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n \n from .models import (\n@@ -2819,6 +2820,44 @@ class LimitChoicesToTests(TestCase):\n         fields = fields_for_model(StumpJoke, ['has_fooled_today'])\n         self.assertSequenceEqual(fields['has_fooled_today'].queryset, [self.threepwood])\n \n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates_with_varied_states(self):\n+        # Setup characters and jokes\n+        marley = Character.objects.create(username='Marley', last_action='2023-01-01')\n+        threepwood = Character.objects.create(username='Threepwood', last_action='2023-01-02')\n+\n+        joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=marley)\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=marley)\n+\n+        joke1.has_fooled_today.add(marley, threepwood)\n+        joke2.has_fooled_today.add(marley)\n+        joke3.has_fooled_today.add(marley, threepwood)\n+\n+        # Define CharacterDetails within the isolated app context\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+        \n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [marley, threepwood],\n+        )\n+\n     def test_callable_called_each_time_form_is_instantiated(self):\n         field = StumpJokeForm.base_fields['most_recently_fooled']\n         with mock.patch.object(field, 'limit_choices_to') as today_callable_dict:\n",
  "django__django-13343": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex a5ab3a0..6239ddc 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -29,7 +29,7 @@ from django.test.utils import requires_tz_support\n from django.urls import NoReverseMatch, reverse_lazy\n from django.utils import timezone\n \n-from .models import Storage, temp_storage, temp_storage_location\n+from .models import Storage, callable_storage, temp_storage, temp_storage_location\n \n FILE_SUFFIX_REGEX = '[A-Za-z0-9]{7}'\n \n@@ -68,6 +68,27 @@ class GetStorageClassTests(SimpleTestCase):\n \n class FileSystemStorageTests(unittest.TestCase):\n \n+    def test_filefield_with_callable_storage_deconstruction(self):\n+        \"\"\"\n+        A FileField with a callable storage should deconstruct to the callable itself.\n+        \"\"\"\n+        obj = Storage()\n+        field = obj._meta.get_field('storage_callable')\n+        _, _, kwargs = field.deconstruct()\n+        storage = kwargs['storage']\n+        self.assertIs(storage, callable_storage)\n+\n+    def test_filefield_with_callable_storage_does_not_evaluate(self):\n+        \"\"\"\n+        Ensure the deconstruction of FileField with callable storage doesn't evaluate it.\n+        \"\"\"\n+        def dummy_storage():\n+            raise RuntimeError(\"This should not be evaluated during deconstruction\")\n+\n+        field = FileField(storage=dummy_storage)\n+        _, _, kwargs = field.deconstruct()\n+        self.assertIs(kwargs['storage'], dummy_storage)\n+\n     def test_deconstruction(self):\n         path, args, kwargs = temp_storage.deconstruct()\n         self.assertEqual(path, \"django.core.files.storage.FileSystemStorage\")\n",
  "django__django-13346": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex b918d5c..0ec507a 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -623,6 +623,19 @@ class TestQuerying(TestCase):\n                     expected,\n                 )\n \n+    def test_key_in_lookup(self):\n+        # These test cases are designed to verify the issue from the report\n+        tests = [\n+            ({'value__key__in': [0]}, []),  # expecting an empty result\n+            ({'value__key': 0}, self.objs[3:5]),  # expecting some results\n+        ]\n+        for filter_kwargs, expected in tests:\n+            with self.subTest(filter_kwargs=filter_kwargs):\n+                self.assertSequenceEqual(\n+                    NullableJSONModel.objects.filter(**filter_kwargs),\n+                    expected\n+                )\n+\n     def test_key_iexact(self):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__iexact='BaR').exists(), True)\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__iexact='\"BaR\"').exists(), False)\n",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..80eb4c4 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -19,6 +19,8 @@ from django.test import (\n )\n from django.utils import timezone\n \n+import pytz\n+from datetime import datetime\n from ..models import Author, DTModel, Fan\n \n \n@@ -1133,7 +1135,43 @@ class DateFunctionWithTimeZoneTests(DateFunctionTests):\n         self.assertEqual(model.melb_year.year, 2016)\n         self.assertEqual(model.pacific_year.year, 2015)\n \n-    def test_trunc_ambiguous_and_invalid_times(self):\n+    def test_truncdate_with_tzinfo(self):\n+        start_datetime = datetime(2023, 3, 25, 23, 55)\n+        start_datetime = timezone.make_aware(start_datetime, timezone.utc)\n+        self.create_model(start_datetime)\n+\n+        ny = pytz.timezone('America/New_York')\n+        london = pytz.timezone('Europe/London')\n+\n+        model = DTModel.objects.annotate(\n+            ny_date=TruncDate('start_datetime', tzinfo=ny),\n+            london_date=TruncDate('start_datetime', tzinfo=london),\n+        ).get()\n+\n+        ny_start_datetime = start_datetime.astimezone(ny)\n+        london_start_datetime = start_datetime.astimezone(london)\n+\n+        self.assertEqual(model.ny_date, ny_start_datetime.date())\n+        self.assertEqual(model.london_date, london_start_datetime.date())\n+\n+    def test_trunctime_with_tzinfo(self):\n+        start_datetime = datetime(2023, 3, 25, 23, 55)\n+        start_datetime = timezone.make_aware(start_datetime, timezone.utc)\n+        self.create_model(start_datetime)\n+\n+        tokyo = pytz.timezone('Asia/Tokyo')\n+        sydney = pytz.timezone('Australia/Sydney')\n+\n+        model = DTModel.objects.annotate(\n+            tokyo_time=TruncTime('start_datetime', tzinfo=tokyo),\n+            sydney_time=TruncTime('start_datetime', tzinfo=sydney),\n+        ).get()\n+\n+        tokyo_start_datetime = start_datetime.astimezone(tokyo)\n+        sydney_start_datetime = start_datetime.astimezone(sydney)\n+\n+        self.assertEqual(model.tokyo_time, tokyo_start_datetime.time())\n+        self.assertEqual(model.sydney_time, sydney_start_datetime.time())\n         sao = pytz.timezone('America/Sao_Paulo')\n         utc = pytz.timezone('UTC')\n         start_datetime = utc.localize(datetime(2016, 10, 16, 13))\n",
  "django__django-13401": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e39d03e..d0bd18f 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -103,7 +103,40 @@ class BasicFieldTests(SimpleTestCase):\n         self.assertEqual(path, 'model_fields.tests.Nested.Field')\n \n \n-class ChoicesTests(SimpleTestCase):\n+from django.test import SimpleTestCase\n+from django.db import models\n+\n+class FieldComparisonTests(SimpleTestCase):\n+\n+    def test_abstract_inherited_fields(self):\n+        \"\"\"Field instances from abstract models are not equal.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        self.assertNotEqual(abstract_model_field, inherit1_model_field)\n+        self.assertNotEqual(abstract_model_field, inherit2_model_field)\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+\n+        self.assertLess(abstract_model_field, inherit1_model_field)\n+        self.assertLess(abstract_model_field, inherit2_model_field)\n+        self.assertLess(inherit1_model_field, inherit2_model_field)\n+\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit1_model_field))\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit2_model_field))\n+        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n \n     @classmethod\n     def setUpClass(cls):\n",
  "django__django-13410": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 1285e22..c3006b1 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -1,3 +1,4 @@\n+\n import errno\n import gzip\n import os\n@@ -6,7 +7,8 @@ import tempfile\n import unittest\n from io import BytesIO, StringIO, TextIOWrapper\n from pathlib import Path\n-from unittest import mock\n+from pathlib import Path\n+from django.core.files import locks\n \n from django.core.files import File\n from django.core.files.base import ContentFile\n",
  "django__django-13417": "",
  "django__django-13516": "",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..3a38f62 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,10 +1,11 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n-from django.test.utils import ignore_warnings\n+from .with_custom_email_field import CustomEmailField\n from django.utils.deprecation import RemovedInDjango40Warning\n \n \n@@ -37,7 +38,26 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n-    def test_timeout(self):\n+    def test_token_with_different_email(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                self.assertIs(p0.check_token(user, tk1), False)\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n         # the value of 'now'.\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..1f84867 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,7 +1,9 @@\n+\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n from django.contrib.auth.models import AbstractBaseUser\n+from django.db.models import Q, UniqueConstraint\n from django.core import checks\n from django.db import models\n from django.test import (\n@@ -138,6 +140,20 @@ class ModelsPermissionsChecksTests(SimpleTestCase):\n             ),\n         ])\n \n+    @override_settings(AUTH_USER_MODEL='auth_tests.UserWithUniqueConstraint')\n+    def test_username_with_full_unique_constraint(self):\n+        class UserWithUniqueConstraint(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(fields=['username'], name='username_unique_constraint'),\n+                ]\n+\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [])\n+\n     def test_non_clashing_custom_permissions(self):\n         class Checked(models.Model):\n             class Meta:\n",
  "django__django-13569": "",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..f5d5fc0 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -6,6 +7,7 @@ from copy import deepcopy\n from decimal import Decimal\n from unittest import mock\n \n+from collections import namedtuple\n from django.core.exceptions import FieldError\n from django.db import DatabaseError, NotSupportedError, connection\n from django.db.models import (\n@@ -815,6 +817,34 @@ class IterableLookupInnerExpressionsTests(TestCase):\n         Company.objects.create(name='5060 Ltd', num_employees=50, num_chairs=60, ceo=ceo)\n         Company.objects.create(name='99300 Ltd', num_employees=99, num_chairs=300, ceo=ceo)\n \n+    def test_range_lookup_namedtuple(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertQuerysetEqual(qs, ['<Company: 99300 Ltd>'], ordered=False)\n+\n+    def test_range_lookup_namedtuple_different_names(self):\n+        CustomRange = namedtuple('CustomRange', ['start', 'end'])\n+        qs = Company.objects.filter(\n+            num_employees__range=CustomRange(start=50, end=100),\n+        )\n+        self.assertQuerysetEqual(\n+            qs,\n+            [\n+                '<Company: 5020 Ltd>', '<Company: 5040 Ltd>', '<Company: 5050 Ltd>',\n+                '<Company: 5060 Ltd>', '<Company: 99300 Ltd>',\n+            ],\n+            ordered=False\n+        )\n+\n+    def test_range_lookup_namedtuple_empty_range(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=100, maximum=200),\n+        )\n+        self.assertQuerysetEqual(qs, [])\n+\n     def test_in_lookup_allows_F_expressions_and_expressions_for_integers(self):\n         # __in lookups can use F() expressions for integers.\n         queryset = Company.objects.filter(num_employees__in=([F('num_chairs') - 10]))\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..21e1096 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -23,6 +23,7 @@ from django.core.management.commands.loaddata import Command as LoaddataCommand\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n )\n+from django.core.management import execute_from_command_line\n from django.core.management.commands.testserver import (\n     Command as TestserverCommand,\n )\n@@ -32,6 +33,8 @@ from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n \n+from django.test.utils import captured_stderr, captured_stdout\n+\n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n \n SYSTEM_CHECK_MSG = 'System check identified no issues'\n@@ -1867,7 +1870,41 @@ class ArgumentOrder(AdminScriptTestCase):\n         )\n \n \n-@override_settings(ROOT_URLCONF='admin_scripts.urls')\n+class ExecuteFromCommandLine(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_with_main(self):\n+        \"\"\"\n+        Program name should be 'python -m django' if sys.argv[0] is '__main__.py'.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['__main__.py'] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: python -m django shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_custom_prog_name(self):\n+        \"\"\"\n+        Custom program name should be used if provided in argv argument.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        custom_prog_name = 'custom-admin'\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line([custom_prog_name] + args)\n+        self.assertIn(f'usage: {custom_prog_name} shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n class StartProject(LiveServerTestCase, AdminScriptTestCase):\n \n     available_apps = [\n",
  "django__django-13670": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 6f0b13f..f9d96b3 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -1,3 +1,4 @@\n+\n from datetime import date, datetime\n \n from django.test import SimpleTestCase, override_settings\n@@ -18,8 +19,22 @@ class DateFormatTests(SimpleTestCase):\n \n     def tearDown(self):\n         translation.activate(self._orig_lang)\n-\n-    def test_date(self):\n+    def test_year_before_1000(self):\n+        tests = [\n+            (476, '76'),\n+            (42, '42'),\n+            (4, '04'),\n+            (9, '09'),   # Additional test case\n+            (99, '99'),  # Additional test case\n+            (999, '99'), # Additional test case\n+            (1000, '00'),# Additional test case for boundary\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n         d = date(2009, 5, 16)\n         self.assertEqual(date.fromtimestamp(int(format(d, 'U'))), d)\n \n@@ -164,4 +179,4 @@ class DateFormatTests(SimpleTestCase):\n             self.assertEqual(\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+            )\n",
  "django__django-13741": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex ca66cd5..8fa6abb 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1020,6 +1020,10 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n+    def test_readonly_field_disabled(self):\n+        field = ReadOnlyPasswordHashField()\n+        self.assertIs(field.disabled, True)\n+\n     def test_readonly_field_has_changed(self):\n         field = ReadOnlyPasswordHashField()\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n",
  "django__django-13786": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3782589..c95ac3e 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -116,7 +116,47 @@ class OptimizerTests(SimpleTestCase):\n             ],\n             [\n                 migrations.CreateModel('Foo', fields=[], options={'verbose_name_plural': 'Foozes'}),\n-            ]\n+            ],\n+        )\n+\n+    def test_create_model_with_altered_and_removed_options(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'SampleModel',\n+                    fields=[],\n+                    options={'verbose_name': 'Sample Model', 'ordering': ['name']},\n+                ),\n+                migrations.AlterModelOptions('SampleModel', options={}),\n+            ],\n+            [\n+                migrations.CreateModel('SampleModel', fields=[]),\n+            ],\n+        )\n+\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'SampleModel',\n+                    fields=[],\n+                    options={\n+                        'verbose_name': 'Sample Model',\n+                        'ordering': ['name'],\n+                        'permissions': [('can_edit', 'Can edit')],\n+                    },\n+                ),\n+                migrations.AlterModelOptions(\n+                    'SampleModel',\n+                    options={'verbose_name': 'Sample Model'},\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    'SampleModel',\n+                    fields=[],\n+                    options={'verbose_name': 'Sample Model'},\n+                ),\n+            ],\n         )\n \n     def _test_create_alter_foo_delete_model(self, alter_foo):\n",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..00b2caf 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,6 +1,8 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n+from django.utils.translation import gettext_lazy\n from django.test import SimpleTestCase\n \n from ..utils import setup\n",
  "django__django-13807": "diff --git a/tests/backends/tests.py b/tests/backends/tests.py\nindex 0aee2b6..5a825b6 100644\n--- a/tests/backends/tests.py\n+++ b/tests/backends/tests.py\n@@ -11,7 +11,27 @@ from django.db import (\n )\n from django.db.backends.base.base import BaseDatabaseWrapper\n from django.db.backends.signals import connection_created\n-from django.db.backends.utils import CursorWrapper\n+class SQLKeywordsModelTest(TransactionTestCase):\n+    \n+    available_apps = ['backends']\n+\n+    def setUp(self):\n+        self.reporter = Reporter.objects.create(first_name='John', last_name='Doe', email='john@example.com')\n+\n+    def test_check_constraints_sql_keywords(self):\n+        with transaction.atomic():\n+            obj = SQLKeywordsModel.objects.create(reporter=self.reporter)\n+            obj.refresh_from_db()\n+            obj.reporter_id = 30\n+            with connection.constraint_checks_disabled():\n+                obj.save()\n+                with self.assertRaises(IntegrityError):\n+                    connection.check_constraints(table_names=['order'])\n+            transaction.set_rollback(True)\n+\n+from django.db import connection, IntegrityError, transaction\n+from django.db import models\n+from itertools import chain\n from django.db.models.sql.constants import CURSOR\n from django.test import (\n     TestCase, TransactionTestCase, override_settings, skipIfDBFeature,\n",
  "django__django-13809": "diff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py\nindex 85f7e9c..3019dff 100644\n--- a/django/core/management/commands/runserver.py\n+++ b/django/core/management/commands/runserver.py\n@@ -39,18 +39,34 @@ class Command(BaseCommand):\n             'addrport', nargs='?',\n             help='Optional port number, or ipaddr:port'\n         )\n+        parser.add_argument(\n+            '--skip-checks', action='store_true', dest='skip_checks',\n+            help='Skip system checks.',\n+        )\n         parser.add_argument(\n             '--ipv6', '-6', action='store_true', dest='use_ipv6',\n             help='Tells Django to use an IPv6 address.',\n         )\n+        parser.add_argument(\n+            '--skip-checks', action='store_true', dest='skip_checks',\n+            help='Skip system checks.',\n+        )\n         parser.add_argument(\n             '--nothreading', action='store_false', dest='use_threading',\n             help='Tells Django to NOT use threading.',\n         )\n+        parser.add_argument(\n+            '--skip-checks', action='store_true', dest='skip_checks',\n+            help='Skip system checks.',\n+        )\n         parser.add_argument(\n             '--noreload', action='store_false', dest='use_reloader',\n             help='Tells Django to NOT use the auto-reloader.',\n         )\n+        parser.add_argument(\n+            '--skip-checks', action='store_true', dest='skip_checks',\n+            help='Skip system checks.',\n+        )\n \n     def execute(self, *args, **options):\n         if options['no_color']:\n",
  "django__django-13810": "",
  "django__django-13820": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex 594c01e..f9ecc4d 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -1,6 +1,8 @@\n+\n import compileall\n import os\n \n+from importlib import import_module\n from django.db import connection, connections\n from django.db.migrations.exceptions import (\n     AmbiguityError, InconsistentMigrationHistory, NodeNotFoundError,\n@@ -512,6 +514,53 @@ class LoaderTests(TestCase):\n         migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n         self.assertEqual(migrations, [])\n \n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations'})\n+    def test_loading_regular_package_without_file(self):\n+        \"\"\"\n+        Test that MigrationLoader can load migrations from a regular package\n+        without a __file__ attribute in a frozen environment.\n+        \"\"\"\n+        test_module = import_module('migrations.test_migrations')\n+        loader = MigrationLoader(connection)\n+        module_file = test_module.__file__\n+        module_origin = test_module.__spec__.origin\n+        module_has_location = test_module.__spec__.has_location\n+        try:\n+            # Simulate a frozen environment by removing __file__ and origin.\n+            del test_module.__file__\n+            test_module.__spec__.origin = None\n+            test_module.__spec__.has_location = False\n+            loader.load_disk()\n+            migrations = [\n+                name\n+                for app, name in loader.disk_migrations\n+                if app == 'migrations'\n+            ]\n+            self.assertCountEqual(migrations, ['0001_initial', '0002_second'])\n+        finally:\n+            # Restore the original module attributes.\n+            test_module.__file__ = module_file\n+            test_module.__spec__.origin = module_origin\n+            test_module.__spec__.has_location = module_has_location\n+\n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_namespace_package'})\n+    def test_loading_namespace_package_with_nonlist_path(self):\n+        \"\"\"\n+        Test that namespace packages with non-list __path__ attributes are handled correctly.\n+        \"\"\"\n+        loader = MigrationLoader(connection)\n+        test_module = import_module('migrations.test_migrations_namespace_package')\n+        original_path = test_module.__path__\n+        try:\n+            # Simulate a non-list __path__ scenario.\n+            test_module.__path__ = 'non-list-path'\n+            loader.load_disk()\n+            migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n+            self.assertEqual(migrations, [])\n+        finally:\n+            # Restore the original module __path__.\n+            test_module.__path__ = original_path\n+\n \n class PycLoaderTests(MigrationTestBase):\n \n",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..f692275 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -10,7 +10,8 @@ from unittest import mock\n from django.core.exceptions import ImproperlyConfigured\n from django.db import NotSupportedError, connection, transaction\n from django.db.models import Aggregate, Avg, CharField, StdDev, Sum, Variance\n-from django.db.utils import ConnectionHandler\n+from django.db.utils import ConnectionHandler, ImproperlyConfigured\n+import mock\n from django.test import (\n     TestCase, TransactionTestCase, override_settings, skipIfDBFeature,\n )\n",
  "django__django-13837": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 10ffa22..d675c4f 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -155,8 +155,33 @@ class TestIterModulesAndFiles(SimpleTestCase):\n                     frozenset(),\n                 )\n \n+from django.utils import autoreload\n+from unittest import mock\n+import sys\n+import os\n+from pathlib import Path\n+\n+from .test_module import __main__ as test_main\n \n class TestChildArguments(SimpleTestCase):\n+\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver']\n+        )\n+\n+    @mock.patch('sys.argv', ['-m', 'some_package', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_other_package(self):\n+        with mock.patch('sys.modules.__main__.__spec__') as mock_spec:\n+            mock_spec.parent = 'some_package'\n+            self.assertEqual(\n+                autoreload.get_child_arguments(),\n+                [sys.executable, '-m', 'some_package', 'runserver']\n+            )\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n     def test_run_as_module(self):\n",
  "django__django-13925": "diff --git a/tests/check_framework/test_model_checks.py b/tests/check_framework/test_model_checks.py\nindex 6424d89..dfed7e0 100644\n--- a/tests/check_framework/test_model_checks.py\n+++ b/tests/check_framework/test_model_checks.py\n@@ -395,6 +395,24 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_inherited_explicit_pk_with_parent_link(self):\n+        class Entity(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class User(Entity):\n+            pass\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n+    def test_inherited_explicit_pk_without_parent_link(self):\n+        class Entity(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class User(Entity):\n+            id = models.AutoField(primary_key=True)\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.BigAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -414,4 +432,4 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             class Meta:\n                 app_label = 'check_framework.apps.CheckPKConfig'\n \n-        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n+        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n",
  "django__django-13933": "",
  "django__django-13964": "diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py\nindex 1078928..957e609 100644\n--- a/tests/many_to_one/models.py\n+++ b/tests/many_to_one/models.py\n@@ -63,6 +63,12 @@ class Third(models.Model):\n     third = models.ForeignKey('self', models.SET_NULL, null=True, related_name='child_set')\n \n \n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n+\n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n+\n class Parent(models.Model):\n     name = models.CharField(max_length=20, unique=True)\n     bestchild = models.ForeignKey('Child', models.SET_NULL, null=True, related_name='favored_by')\n",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..31c0a20 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,5 +1,8 @@\n+\n from django.db import IntegrityError, transaction\n-from django.test import TestCase, skipIfDBFeature\n+from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from .fields import MyWrapper\n+from .models import CustomAutoFieldModel\n \n from .models import Bar, Business, Employee, Foo\n \n@@ -223,7 +226,21 @@ class CustomPKTests(TestCase):\n     # SQLite lets objects be saved with an empty primary key, even though an\n     # integer is expected. So we can't check for an error being raised in that\n     # case for SQLite. Remove it from the suite for this next bit.\n-    @skipIfDBFeature('supports_unspecified_pk')\n+    def test_auto_field_subclass_create(self):\n+        \"\"\"\n+        Test that MyAutoField's from_db_value is called on object creation.\n+        \"\"\"\n+        obj = CustomAutoFieldModel.objects.create()\n+        self.assertIsInstance(obj.id, MyWrapper)\n+\n+    @skipUnlessDBFeature('can_return_rows_from_bulk_insert')\n+    def test_auto_field_subclass_bulk_create(self):\n+        \"\"\"\n+        Test that MyAutoField's from_db_value is called on bulk creation.\n+        \"\"\"\n+        obj = CustomAutoFieldModel()\n+        CustomAutoFieldModel.objects.bulk_create([obj])\n+        self.assertIsInstance(obj.id, MyWrapper)\n     def test_required_pk(self):\n         # The primary key must be specified, so an error is raised if you\n         # try to create an object without it.\n",
  "django__django-14017": "",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..e794e41 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -205,6 +205,23 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yields_in_post_process(self):\n+        collectstatic_cmd = CollectstaticCommand()\n+        stats = collectstatic_cmd.collect()\n+\n+        # Ensure no file is yielded twice\n+        self.assertCountEqual(stats['post_processed'], set(stats['post_processed']))\n+\n+        # Test specific file to ensure it's not post-processed multiple times\n+        filename = os.path.join('admin', 'css', 'base.css')\n+        occurrences = [file for file in stats['post_processed'] if file == filename]\n+        self.assertEqual(len(occurrences), 1)\n+\n+        # Test another file\n+        dashboard_filename = os.path.join('admin', 'css', 'dashboard.css')\n+        occurrences_dashboard = [file for file in stats['post_processed'] if file == dashboard_filename]\n+        self.assertEqual(len(occurrences_dashboard), 1)\n+\n     def test_css_import_case_insensitive(self):\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n         self.assertEqual(relpath, \"cached/styles_insensitive.3fa427592a53.css\")\n@@ -214,6 +231,23 @@ class TestHashedFiles:\n             self.assertIn(b\"other.d41d8cd98f00.css\", content)\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yields_in_post_process(self):\n+        collectstatic_cmd = CollectstaticCommand()\n+        stats = collectstatic_cmd.collect()\n+\n+        # Ensure no file is yielded twice\n+        self.assertCountEqual(stats['post_processed'], set(stats['post_processed']))\n+\n+        # Test specific file to ensure it's not post-processed multiple times\n+        filename = os.path.join('admin', 'css', 'base.css')\n+        occurrences = [file for file in stats['post_processed'] if file == filename]\n+        self.assertEqual(len(occurrences), 1)\n+\n+        # Test another file\n+        dashboard_filename = os.path.join('admin', 'css', 'dashboard.css')\n+        occurrences_dashboard = [file for file in stats['post_processed'] if file == dashboard_filename]\n+        self.assertEqual(len(occurrences_dashboard), 1)\n+\n     @override_settings(\n         STATICFILES_DIRS=[os.path.join(TEST_ROOT, 'project', 'faulty')],\n         STATICFILES_FINDERS=['django.contrib.staticfiles.finders.FileSystemFinder'],\n",
  "django__django-14089": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 7fb3d83..4204cca 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n@@ -10,6 +11,7 @@ from django.utils.datastructures import (\n     CaseInsensitiveMapping, DictWrapper, ImmutableList, MultiValueDict,\n     MultiValueDictKeyError, OrderedSet,\n )\n+import collections.abc\n \n \n class OrderedSetTests(SimpleTestCase):\n@@ -18,7 +20,20 @@ class OrderedSetTests(SimpleTestCase):\n         s = OrderedSet([1, 2, 3])\n         self.assertEqual(list(s.dict.keys()), [1, 2, 3])\n \n-    def test_remove(self):\n+    def test_reversed(self):\n+        s = reversed(OrderedSet([1, 2, 3]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [3, 2, 1])\n+\n+    def test_reversed_empty(self):\n+        s = reversed(OrderedSet([]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [])\n+\n+    def test_reversed_large_set(self):\n+        elements = list(range(1000))\n+        s = reversed(OrderedSet(elements))\n+        self.assertEqual(list(s), list(reversed(elements)))\n         s = OrderedSet()\n         self.assertEqual(len(s), 0)\n         s.add(1)\n",
  "django__django-14122": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex b2ec8af..f7e9cd5 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -1326,6 +1327,31 @@ class AggregateTestCase(TestCase):\n         ).values_list('publisher_count', flat=True)\n         self.assertSequenceEqual(books_breakdown, [1] * 6)\n \n+    def test_meta_ordering_not_in_group_by(self):\n+        \"\"\"\n+        Ensure Meta.ordering fields are not included in GROUP BY clause.\n+        \"\"\"\n+        # Setup test data\n+        author1 = Author.objects.create(name='Author 1')\n+        author2 = Author.objects.create(name='Author 2')\n+        book1 = Book.objects.create(\n+            isbn='1234567890', name='Test Book 1', pages=100, rating=4.0,\n+            price=Decimal('10.00'), contact=author1, publisher=self.p1,\n+            pubdate=datetime.date(2023, 1, 1)\n+        )\n+        book2 = Book.objects.create(\n+            isbn='0987654321', name='Test Book 2', pages=200, rating=5.0,\n+            price=Decimal('20.00'), contact=author2, publisher=self.p1,\n+            pubdate=datetime.date(2023, 1, 2)\n+        )\n+        # Meta.ordering is set to ['-rating'] in Book model for testing purposes\n+        books = Book.objects.values('publisher').annotate(total_price=Sum('price'))\n+        self.assertCountEqual(\n+            books, [\n+                {'publisher': self.p1.pk, 'total_price': Decimal('30.00')},\n+            ]\n+        )\n+\n     def test_aggregation_random_ordering(self):\n         \"\"\"Random() is not included in the GROUP BY when used for ordering.\"\"\"\n         authors = Author.objects.annotate(contact_count=Count('book')).order_by('?')\n@@ -1339,4 +1365,4 @@ class AggregateTestCase(TestCase):\n             ('Wesley J. Chun', 1),\n             ('Stuart Russell', 1),\n             ('Peter Norvig', 2),\n-        ], lambda a: (a.name, a.contact_count), ordered=False)\n+        ], lambda a: (a.name, a.contact_count), ordered=False)\n",
  "django__django-14140": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex c3db825..0e94333 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -824,6 +824,13 @@ class BasicExpressionsTests(TestCase):\n             [self.example_inc.ceo, self.max],\n         )\n \n+    def test_deconstruct_boolean_expression_with_exists(self):\n+        tagged = Tag.objects.filter(category=OuterRef('pk'))\n+        q = Q(Exists(tagged))\n+        _, args, kwargs = q.deconstruct()\n+        self.assertEqual(args, (Exists(tagged),))\n+        self.assertEqual(kwargs, {})\n+\n     def test_boolean_expression_combined_with_empty_Q(self):\n         is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n         self.gmbh.point_of_contact = self.max\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..c4b2bf1 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,3 +1,4 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n@@ -67,6 +68,26 @@ class TestDefaultPK(SimpleTestCase):\n                 pass\n \n     @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -83,6 +104,26 @@ class TestDefaultPK(SimpleTestCase):\n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n     @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14311": "",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..750ad6c 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -218,6 +218,14 @@ TEST_DATA = [\n \n     (MinLengthValidator(10), '', ValidationError),\n \n+    # Newlines and tabs are not accepted and should raise ValidationError\n+    (URLValidator(), 'http://www.djangoproject.com/\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://www.django\\rproject.com/', ValidationError),\n+    (URLValidator(), 'http://[::\\rffff:192.9.5.5]', ValidationError),\n+    (URLValidator(), 'http://\\twww.djangoproject.com/', ValidationError),\n+    (URLValidator(), 'http://\\t[::ffff:192.9.5.5]', ValidationError),\n+\n     (URLValidator(EXTENDED_SCHEMES), 'file://localhost/path', None),\n     (URLValidator(EXTENDED_SCHEMES), 'git://example.com/', None),\n     (URLValidator(EXTENDED_SCHEMES), 'git+ssh://git@github.com/example/hg-git.git', None),\n",
  "django__django-14351": "diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\nindex 79963c3..09b99ab 100644\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -1526,6 +1526,41 @@ class AggregationTests(TestCase):\n         DistinctAggregate('foo', distinct=True)\n \n \n+class PropertyGroupSubqueryTests(TestCase):\n+    def setUp(self):\n+        # Set up initial data with PropertyGroup, Manager, and Agent models\n+        self.manager = Manager.objects.create(name=\"Manager1\")\n+        self.agent = Agent.objects.create(name=\"Agent1\", manager=self.manager)\n+        self.property_group1 = PropertyGroup.objects.create(name=\"Group1\")\n+        self.property_group2 = PropertyGroup.objects.create(name=\"Group2\")\n+\n+        # Associate agent with property groups\n+        self.agent.property_groups.add(self.property_group1, self.property_group2)\n+\n+    def test_q_object_or_subquery(self):\n+        property_groups = PropertyGroup.objects.filter(agent=self.agent)\n+        queryset = self.agent.annotate(Count(\"property_groups\"))\n+\n+        # This should not raise a ProgrammingError\n+        result = queryset.filter(\n+            Q(property_groups__in=property_groups) | Q(property_groups__count=0)\n+        ).distinct()\n+\n+        # Check the result\n+        self.assertTrue(result.exists())\n+\n+    def test_q_object_or_with_values_list(self):\n+        property_groups_ids = PropertyGroup.objects.filter(agent=self.agent).values_list(\"id\", flat=True)\n+        queryset = self.agent.annotate(Count(\"property_groups\"))\n+\n+        # This should work correctly without raising a ProgrammingError\n+        result = queryset.filter(\n+            Q(property_groups__id__in=property_groups_ids) | Q(property_groups__count=0)\n+        ).distinct()\n+\n+        # Check the result\n+        self.assertTrue(result.exists())\n+\n class JoinPromotionTests(TestCase):\n     def test_ticket_21150(self):\n         b = Bravo.objects.create()\n",
  "django__django-14373": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 2f7c68b..7c50013 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -179,7 +179,9 @@ class DateFormatTests(SimpleTestCase):\n                     expected_date,\n                 )\n \n-    def test_twelve_hour_format(self):\n+    def test_y_format_year_before_1000(self):\n+        self.assertEqual(dateformat.format(datetime(1, 1, 1), 'Y'), '0001')\n+        self.assertEqual(dateformat.format(datetime(999, 1, 1), 'Y'), '0999')\n         tests = [\n             (0, '12'),\n             (1, '1'),\n",
  "django__django-14376": "",
  "django__django-14434": "",
  "django__django-14493": "diff --git a/tests/staticfiles_tests/storage.py b/tests/staticfiles_tests/storage.py\nindex dc966a1..f983ef1 100644\n--- a/tests/staticfiles_tests/storage.py\n+++ b/tests/staticfiles_tests/storage.py\n@@ -94,6 +94,10 @@ class ExtraPatternsStorage(ManifestStaticFilesStorage):\n     )\n \n \n+class NoPostProcessReplacedPathStorage(ManifestStaticFilesStorage):\n+    max_post_process_passes = 0\n+\n+\n class NoneHashStorage(ManifestStaticFilesStorage):\n     def file_hash(self, name, content=None):\n-        return None\n+        return None\n",
  "django__django-14500": "diff --git a/tests/migrations/test_executor.py b/tests/migrations/test_executor.py\nindex d884fe4..6159f89 100644\n--- a/tests/migrations/test_executor.py\n+++ b/tests/migrations/test_executor.py\n@@ -640,21 +640,38 @@ class ExecutorTests(MigrationTestBase):\n         \"\"\"\n         recorder = MigrationRecorder(connection)\n         # Record all replaced migrations as applied\n-        recorder.record_applied(\"migrations\", \"0001_initial\")\n-        recorder.record_applied(\"migrations\", \"0002_second\")\n+class MigrationSquashTests(TestCase):\n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_squashed'})\n+    def test_migrate_marks_squashed_and_replacements_unapplied(self):\n+        \"\"\"Test that when a squashed migration is unapplied, its replacements are also marked as unapplied.\"\"\"\n         executor = MigrationExecutor(connection)\n-        executor.migrate([(\"migrations\", \"0001_squashed_0002\")])\n-\n-        # Because 0001 and 0002 are both applied, even though this migrate run\n-        # didn't apply anything new, their squashed replacement should be\n-        # marked as applied.\n-        self.assertIn(\n-            (\"migrations\", \"0001_squashed_0002\"),\n-            recorder.applied_migrations(),\n-        )\n-\n-    # When the feature is False, the operation and the record won't be\n-    # performed in a transaction and the test will systematically pass.\n+        executor.migrate([('migrations', '0001_squashed_0002')])\n+        try:\n+            # Assert that the squashed migration is applied\n+            self.assertIn(\n+                ('migrations', '0001_squashed_0002'),\n+                executor.recorder.applied_migrations(),\n+            )\n+            # Unapply the migration\n+            executor.migrate([('migrations', None)])\n+            \n+            # Assert that both the squashed migration and the replacements are unapplied\n+            self.assertNotIn(\n+                ('migrations', '0001_squashed_0002'),\n+                executor.recorder.applied_migrations(),\n+            )\n+            self.assertNotIn(\n+                ('migrations', '0001_initial'),\n+                executor.recorder.applied_migrations(),\n+            )\n+            self.assertNotIn(\n+                ('migrations', '0002_second'),\n+                executor.recorder.applied_migrations(),\n+            )\n+        finally:\n+            # Clean up to restore state for other tests\n+            executor.loader.build_graph()\n+            executor.migrate([('migrations', None)])\n     @skipUnlessDBFeature('can_rollback_ddl')\n     def test_migrations_applied_and_recorded_atomically(self):\n         \"\"\"Migrations are applied and recorded atomically.\"\"\"\n",
  "django__django-14539": "",
  "django__django-14559": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex b579834..47889d7 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -115,7 +115,33 @@ class BulkUpdateTests(TestCase):\n \n     pk_fields_error = 'bulk_update() cannot be used with primary key fields.'\n \n-    def test_update_primary_key(self):\n+from .models import Note, CustomPk, Valid, Detail, Paragraph, Member\n+\n+class BulkUpdateTests(TestCase):\n+    def test_bulk_update_returns_row_count(self):\n+        # Test with no updates\n+        rows_updated = Note.objects.bulk_update([], ['note'])\n+        self.assertEqual(rows_updated, 0)\n+\n+        # Create notes and test bulk update\n+        Note.objects.bulk_create([\n+            Note(note=str(i), misc=str(i))\n+            for i in range(0, 2000)\n+        ])\n+        notes = list(Note.objects.all())\n+        for note in notes:\n+            note.note = \"updated-note\"\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 2000)\n+\n+    def test_bulk_update_with_duplicates(self):\n+        note = Note.objects.create(note='test-note', misc='test')\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'])\n+        self.assertEqual(rows_updated, 1)\n+\n+        # Duplicates in different batches\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'], batch_size=1)\n+        self.assertEqual(rows_updated, 2)\n         with self.assertRaisesMessage(ValueError, self.pk_fields_error):\n             Note.objects.bulk_update([], ['id'])\n \n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..32db667 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -984,6 +984,41 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n \n+    def test_non_form_errors_css_class(self):\n+        \"\"\"\n+        Test that non-form errors use the 'nonform' CSS class.\n+        \"\"\"\n+        # Test case for exceeding max number of forms\n+        data_exceed_max = {\n+            'choices-TOTAL_FORMS': '3',  # the number of forms rendered\n+            'choices-INITIAL_FORMS': '0',  # the number of forms with initial data\n+            'choices-MIN_NUM_FORMS': '0',  # min number of forms\n+            'choices-MAX_NUM_FORMS': '0',  # max number of forms\n+            'choices-0-choice': 'Coffee',\n+            'choices-0-votes': '10',\n+            'choices-1-choice': 'Tea',\n+            'choices-1-votes': '20',\n+            'choices-2-choice': 'Juice',\n+            'choices-2-votes': '30',\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=1, max_num=2, validate_max=True)\n+        formset = ChoiceFormSet(data_exceed_max, auto_id=False, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        self.assertEqual(str(formset.non_form_errors()), '<ul class=\"errorlist nonform\"><li>Please submit at most 2 forms.</li></ul>')\n+\n+        # Test case for submitting duplicate drinks\n+        data_duplicate_drinks = {\n+            'drinks-TOTAL_FORMS': '2',\n+            'drinks-INITIAL_FORMS': '0',\n+            'drinks-MIN_NUM_FORMS': '0',\n+            'drinks-MAX_NUM_FORMS': '0',\n+            'drinks-0-name': 'Gin and Tonic',\n+            'drinks-1-name': 'Gin and Tonic',\n+        }\n+        formset = FavoriteDrinksFormSet(data_duplicate_drinks, prefix='drinks')\n+        self.assertFalse(formset.is_valid())\n+        self.assertEqual(str(formset.non_form_errors()), '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>')\n+\n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n         ChoiceFormset = formset_factory(Choice, extra=3)\n",
  "django__django-14631": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex a48e4b6..6dab8a0 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -2129,7 +2129,44 @@ Password: <input type=\"password\" name=\"password\" required></li>\n         form = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n         self.assertEqual(form.changed_data, [])\n \n-    def test_help_text(self):\n+    def test_datetime_boundfield_initial_value(self):\n+        \"\"\"\n+        Test that the initial value accessed via the BoundField matches\n+        the value used in form cleaning for a disabled field with callable initial.\n+        \"\"\"\n+        now = datetime.datetime(2006, 10, 25, 14, 30, 45)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now, disabled=True)\n+\n+        form = DateTimeForm({})\n+        cleaned_value = form.cleaned_data['dt']\n+        bf_initial_value = form['dt'].initial\n+        self.assertEqual(cleaned_value, bf_initial_value)\n+\n+    def test_changed_data_with_disabled_field(self):\n+        \"\"\"\n+        Test that changed_data accounts for initial value accessed via BoundField.\n+        \"\"\"\n+        now = datetime.datetime(2006, 10, 25, 14, 30, 45)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now, disabled=True)\n+\n+        form = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n+        self.assertEqual(form.changed_data, [])\n+\n+    def test_changed_data_method_on_boundfield(self):\n+        \"\"\"\n+        Verify that the did_change() method on BoundField is used in changed_data.\n+        \"\"\"\n+        now = datetime.datetime(2006, 10, 25, 14, 30, 45)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now, disabled=False)\n+\n+        form = DateTimeForm({'dt': '2006-10-25 14:30:46'})\n+        self.assertIn('dt', form.changed_data)\n         # You can specify descriptive text for a field by using the 'help_text' argument)\n         class UserRegistration(Form):\n             username = CharField(max_length=10, help_text='e.g., user@example.com')\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..525faec 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -10,8 +10,46 @@ from .models import (\n     Relationship, SymmetricalFriendship,\n )\n \n+from django.db.models.fields.reverse_related import ManyToManyRel\n+from django.core.exceptions import ValidationError\n \n class M2mThroughTests(TestCase):\n+\n+    def test_many_to_many_rel_through_fields_hashable(self):\n+        \"\"\"\n+        Test to ensure that the through_fields of a ManyToManyRel are hashable.\n+        This checks whether the make_hashable function is correctly applied.\n+        \"\"\"\n+        many_to_many_rel = ManyToManyRel(\n+            field=None,\n+            to=Person,\n+            through=Invitation,\n+            through_fields=['event', 'invitee'],\n+            related_name=\"events_invited\",\n+        )\n+        try:\n+            hash(many_to_many_rel)\n+        except TypeError as e:\n+            self.fail(f\"ManyToManyRel through_fields should be hashable, but got TypeError: {e}\")\n+\n+    def test_proxy_model_m2m_with_through_fields(self):\n+        \"\"\"\n+        Test to ensure that proxy models work correctly with ManyToManyFields that have through_fields.\n+        \"\"\"\n+        try:\n+            class ProxyPerson(Person):\n+                class Meta:\n+                    proxy = True\n+\n+            class ProxyEvent(Event):\n+                class Meta:\n+                    proxy = True\n+\n+            invitation = Invitation.objects.create(event=Event.objects.create(name=\"Conference\"), invitee=Person.objects.create(name=\"Alice\"))\n+            self.assertEqual(invitation.event.name, \"Conference\")\n+            self.assertEqual(invitation.invitee.name, \"Alice\")\n+        except ValidationError as ve:\n+            self.fail(f\"Creation of Invitation with proxy models failed with ValidationError: {ve}\")\n     @classmethod\n     def setUpTestData(cls):\n         cls.bob = Person.objects.create(name='Bob')\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..03d7b2f 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,3 +1,4 @@\n+\n import json\n from contextlib import contextmanager\n \n@@ -6,12 +7,14 @@ from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.admin.views.autocomplete import AutocompleteJsonView\n from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n+import datetime\n from django.core.exceptions import PermissionDenied\n from django.http import Http404\n from django.test import RequestFactory, override_settings\n from django.urls import reverse, reverse_lazy\n \n from .admin import AnswerAdmin, QuestionAdmin\n+from .models import Question  # Assuming the Question model is defined in models\n from .models import (\n     Answer, Author, Authorship, Bonus, Book, Employee, Manager, Parent,\n     PKChild, Question, Toy, WorkHour,\n",
  "django__django-14765": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 11009e5..069967a 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -924,7 +924,33 @@ class StateTests(SimpleTestCase):\n             1,\n         )\n \n-    def test_ignore_order_wrt(self):\n+    def test_real_apps_is_set(self):\n+        \"\"\"\n+        Test that ProjectState raises an assertion error if real_apps is not a set.\n+        \"\"\"\n+        with self.assertRaises(AssertionError):\n+            ProjectState(real_apps=['contenttypes'])\n+\n+    def test_real_apps_as_none(self):\n+        \"\"\"\n+        Test that ProjectState initializes with an empty set if real_apps is None.\n+        \"\"\"\n+        state = ProjectState(real_apps=None)\n+        self.assertEqual(state.real_apps, set())\n+\n+    def test_real_apps_as_empty_set(self):\n+        \"\"\"\n+        Test that ProjectState initializes correctly with an empty set for real_apps.\n+        \"\"\"\n+        state = ProjectState(real_apps=set())\n+        self.assertEqual(state.real_apps, set())\n+\n+    def test_real_apps_as_non_empty_set(self):\n+        \"\"\"\n+        Test that ProjectState initializes correctly with a non-empty set for real_apps.\n+        \"\"\"\n+        state = ProjectState(real_apps={'contenttypes'})\n+        self.assertEqual(state.real_apps, {'contenttypes'})\n         \"\"\"\n         Makes sure ProjectState doesn't include OrderWrt fields when\n         making from existing models.\n",
  "django__django-14771": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 1875424..9c1513c 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -166,7 +166,37 @@ class TestIterModulesAndFiles(SimpleTestCase):\n                 )\n \n \n+import sys\n+from unittest import mock\n+from django.utils import autoreload\n+\n class TestChildArguments(SimpleTestCase):\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n+    def test_xoptions_utf8_and_custom(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver']\n+        )\n+\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    @mock.patch('sys._xoptions', {'utf8': True})\n+    def test_xoptions_utf8_only(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', __file__, 'runserver']\n+        )\n+\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    @mock.patch('sys._xoptions', {})\n+    def test_xoptions_none(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, __file__, 'runserver']\n+        )\n     @mock.patch.dict(sys.modules, {'__main__': django.__main__})\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n",
  "django__django-14787": "",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..4c56af9 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5131,8 +5131,53 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         )\n         # Related ForeignKey object not registered in admin.\n         self.assertContains(response, '<div class=\"readonly\">Chapter 1</div>', html=True)\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        \"\"\"\n+        Test that the readonly ForeignKey field in the default admin site\n+        generates the correct URL.\n+        \"\"\"\n+        chapter = Chapter.objects.create(\n+            title='Chapter 1',\n+            content='content',\n+            book=Book.objects.create(name='Book 1')\n+        )\n+        language = Language.objects.create(iso='en', name='English')\n+        chapter.language = language\n+        chapter.save()\n \n-    def test_readonly_manytomany_backwards_ref(self):\n+        response = self.client.get(reverse('admin:admin_views_chapter_change', args=(chapter.pk,)))\n+        language_url = reverse('admin:admin_views_language_change', args=(quote(language.pk),))\n+        self.assertContains(\n+            response,\n+            '<div class=\"readonly\"><a href=\"%s\">en</a></div>' % language_url,\n+            html=True,\n+        )\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test that the readonly ForeignKey field in a custom admin site\n+        generates the correct URL using the custom admin namespace.\n+        \"\"\"\n+        # Register models in the custom admin site if not already done\n+        site2.register(Chapter)\n+        site2.register(Language)\n+\n+        chapter = Chapter.objects.create(\n+            title='Chapter 1',\n+            content='content',\n+            book=Book.objects.create(name='Book 1')\n+        )\n+        language = Language.objects.create(iso='fr', name='French')\n+        chapter.language = language\n+        chapter.save()\n+\n+        response = self.client.get(reverse('namespaced_admin:admin_views_chapter_change', args=(chapter.pk,)))\n+        language_url = reverse('namespaced_admin:admin_views_language_change', args=(quote(language.pk),))\n+        self.assertContains(\n+            response,\n+            '<div class=\"readonly\"><a href=\"%s\">fr</a></div>' % language_url,\n+            html=True,\n+        )\n         \"\"\"\n         Regression test for #16433 - backwards references for related objects\n         broke if the related field is read-only due to the help_text attribute\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..350b8cc 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,10 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n+import json\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..7e1e646 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -793,6 +793,48 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n \n+    def test_rename_model_with_db_table_noop_postgres(self):\n+        \"\"\"Test that RenameModel with db_table is a no-op on PostgreSQL.\"\"\"\n+        app_label = \"test_rename_model_postgres_noop\"\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel(\"Rider\", fields=[\n+                (\"id\", models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel(\"Pony\", fields=[\n+                (\"id\", models.AutoField(primary_key=True)),\n+                (\"rider\", models.ForeignKey(\"%s.Rider\" % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel(\"Rider\", \"Runner\")\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            # Assert that no database queries are executed\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+\n+    def test_rename_model_with_db_table_noop_sqlite(self):\n+        \"\"\"Test that RenameModel with db_table is a no-op on SQLite.\"\"\"\n+        app_label = \"test_rename_model_sqlite_noop\"\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel(\"Rider\", fields=[\n+                (\"id\", models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel(\"Pony\", fields=[\n+                (\"id\", models.AutoField(primary_key=True)),\n+                (\"rider\", models.ForeignKey(\"%s.Rider\" % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel(\"Rider\", \"Runner\")\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            # Assert that no database queries are executed\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+\n     def test_rename_m2m_target_model(self):\n         app_label = \"test_rename_m2m_target_model\"\n         project_state = self.apply_operations(app_label, ProjectState(), operations=[\n",
  "django__django-15022": "",
  "django__django-15037": "diff --git a/tests/inspectdb/tests.py b/tests/inspectdb/tests.py\nindex 19402bb..293a8e9 100644\n--- a/tests/inspectdb/tests.py\n+++ b/tests/inspectdb/tests.py\n@@ -203,8 +203,20 @@ class InspectDBTestCase(TestCase):\n             'people_unique = models.OneToOneField(InspectdbPeople, models.DO_NOTHING)',\n             output,\n         )\n+    def test_foreign_key_to_specific_field(self):\n+        \"\"\"Test foreign key to a specific field handling in inspectdb.\"\"\"\n+        from django.core.management import call_command\n+        from io import StringIO\n \n-    def test_digits_column_name_introspection(self):\n+        out = StringIO()\n+        call_command('inspectdb', 'inspectdb_bar', stdout=out)\n+        output = out.getvalue()\n+\n+        # Ensure the foreign key is to foo(other_id) instead of just foo\n+        self.assertIn(\n+            \"other_id = models.ForeignKey('InspectdbFoo', models.DO_NOTHING, to_field='other_id')\",\n+            output,\n+        )\n         \"\"\"Introspection of column names consist/start with digits (#16536/#17676)\"\"\"\n         char_field_type = connection.features.introspected_field_types['CharField']\n         out = StringIO()\n",
  "django__django-15103": "diff --git a/tests/template_tests/filter_tests/test_json_script.py b/tests/template_tests/filter_tests/test_json_script.py\nindex 607e24c..8284508 100644\n--- a/tests/template_tests/filter_tests/test_json_script.py\n+++ b/tests/template_tests/filter_tests/test_json_script.py\n@@ -1,5 +1,7 @@\n+\n from django.test import SimpleTestCase\n \n+from django.utils.html import json_script\n from ..utils import setup\n \n \n@@ -16,4 +18,4 @@ class JsonScriptTests(SimpleTestCase):\n             '<script id=\"test_id\" type=\"application/json\">'\n             '{\"a\": \"testing\\\\r\\\\njson \\'string\\\\\" \\\\u003Cb\\\\u003Eescaping\\\\u003C/b\\\\u003E\"}'\n             '</script>'\n-        )\n+        )\n",
  "django__django-15104": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 04452fa..1136503 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2835,6 +2835,56 @@ class AutodetectorTests(TestCase):\n                 )\n \n \n+from django.db import models\n+from django.db.migrations.state import ModelState\n+from django.test import TestCase\n+\n+class CustomFKField(models.ForeignKey):\n+    def __init__(self, *args, **kwargs):\n+        kwargs['to'] = 'testapp.HardcodedModel'\n+        super().__init__(*args, **kwargs)\n+\n+    def deconstruct(self):\n+        name, path, args, kwargs = super().deconstruct()\n+        del kwargs['to']\n+        return name, path, args, kwargs\n+\n+class TestMigrationAutodetector(TestCase):\n+    def test_add_custom_fk_with_hardcoded_to(self):\n+        class HardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.Author'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']\n+                return name, path, args, kwargs\n+\n+        book_hardcoded_fk_to = ModelState('testapp', 'Book', [\n+            ('author', HardcodedForeignKey(on_delete=models.CASCADE)),\n+        ])\n+        changes = self.get_changes(\n+            [self.author_empty],\n+            [self.author_empty, book_hardcoded_fk_to],\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='Book')\n+\n+    def test_autodetector_with_custom_fk(self):\n+        before = ProjectState()\n+        before.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after = ProjectState()\n+        after.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after.add_model(ModelState('testapp', 'TestModel', [('custom', CustomFKField(on_delete=models.CASCADE))]))\n+        \n+        autodetector = MigrationAutodetector(before, after)\n+        changes = autodetector._detect_changes()\n+        self.assertEqual(len(changes['testapp']), 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='TestModel')\n+\n class MigrationSuggestNameTests(SimpleTestCase):\n     def test_no_operations(self):\n         class Migration(migrations.Migration):\n",
  "django__django-15127": "",
  "django__django-15128": "",
  "django__django-15161": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 5fdccc5..47a120a 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1755,6 +1755,42 @@ class ValueTests(TestCase):\n         Time.objects.update(time=Value(datetime.time(1), output_field=TimeField()))\n         self.assertEqual(Time.objects.get().time, datetime.time(1))\n \n+    def test_deconstruct_F(self):\n+        f = F('field_name')\n+        path, args, kwargs = f.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, ('field_name',))\n+        self.assertEqual(kwargs, {})\n+\n+    def test_deconstruct_F_with_orderby(self):\n+        f = F('field_name').desc()\n+        path, args, kwargs = f.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, ('field_name',))\n+        self.assertEqual(kwargs, {})\n+\n+    def test_deconstruct_F_in_expression_wrapper(self):\n+        ew = ExpressionWrapper(F('field_name'), output_field=IntegerField())\n+        path, args, kwargs = ew.deconstruct()\n+        self.assertEqual(path, 'django.db.models.ExpressionWrapper')\n+        self.assertEqual(args, (F('field_name'),))\n+        self.assertEqual(len(kwargs), 1)\n+        self.assertEqual(kwargs['output_field'].deconstruct(), IntegerField().deconstruct())\n+\n+    def test_deconstruct_F_in_func(self):\n+        func = Func(F('field_name'), function='LOWER')\n+        path, args, kwargs = func.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Func')\n+        self.assertEqual(args, (F('field_name'),))\n+        self.assertEqual(kwargs, {'function': 'LOWER'})\n+\n+    def test_deconstruct_F_in_case(self):\n+        case = Case(When(name='test', then=F('field_name')), default=Value('default'))\n+        path, args, kwargs = case.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Case')\n+        self.assertEqual(args, (When(name='test', then=F('field_name')),))\n+        self.assertEqual(kwargs['default'].deconstruct(), Value('default').deconstruct())\n+\n     def test_update_UUIDField_using_Value(self):\n         UUID.objects.create()\n         UUID.objects.update(uuid=Value(uuid.UUID('12345678901234567890123456789012'), output_field=UUIDField()))\n",
  "django__django-15268": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a6c0858..4583740 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1762,7 +1762,28 @@ class AutodetectorTests(TestCase):\n             index_together={('title', 'newfield2')},\n         )\n \n-    def test_proxy(self):\n+    def test_optimize_alter_foo_together(self):\n+        \"\"\"\n+        Test that redundant AlterFooTogether operations are optimized.\n+        \"\"\"\n+        changes = self.get_changes(\n+            [self.author_empty, self.book_foo_together],\n+            [self.author_empty, self.book_foo_together_optimized]\n+        )\n+        # Expect only one migration with two operations (optimized)\n+        self.assertNumberMigrations(changes, \"otherapp\", 1)\n+        self.assertOperationTypes(changes, 'otherapp', 0, [\n+            'AlterUniqueTogether',\n+            'AlterIndexTogether',\n+        ])\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 0, name='book',\n+            unique_together={('title', 'author')},\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 1, name='book',\n+            index_together={('title', 'author')},\n+        )\n         \"\"\"The autodetector correctly deals with proxy models.\"\"\"\n         # First, we test adding a proxy model\n         changes = self.get_changes([self.author_empty], [self.author_empty, self.author_proxy])\n",
  "django__django-15277": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 11f86ed..f315b4c 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1847,6 +1847,37 @@ class ValueTests(TestCase):\n                 expr = Value(value)\n                 self.assertIsInstance(expr.output_field, output_field_type)\n \n+    def test_output_field_does_not_create_broken_validators(self):\n+        \"\"\"\n+        Verify that the output field for a given Value doesn't create \n+        broken validators when max_length is not set.\n+        \"\"\"\n+        value_types = [\n+            'str',\n+            True,\n+            42,\n+            3.14,\n+            datetime.date(2019, 5, 15),\n+            datetime.datetime(2019, 5, 15),\n+            datetime.time(3, 16),\n+            datetime.timedelta(1),\n+            Decimal('3.14'),\n+            b'',\n+            uuid.uuid4(),\n+        ]\n+        for value in value_types:\n+            with self.subTest(type=type(value)):\n+                field = Value(value)._resolve_output_field()\n+                field.clean(value, model_instance=None)\n+\n+    def test_charfield_no_max_length_validator(self):\n+        \"\"\"\n+        Test that CharField does not have a MaxLengthValidator when \n+        max_length is None.\n+        \"\"\"\n+        char_field = fields.CharField(max_length=None)\n+        self.assertFalse(any(isinstance(v, validators.MaxLengthValidator) for v in char_field.validators))\n+\n     def test_resolve_output_field_failure(self):\n         msg = 'Cannot resolve expression type, unknown output_field'\n         with self.assertRaisesMessage(FieldError, msg):\n",
  "django__django-15278": "",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..d20c2a9 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -74,7 +74,58 @@ class BasicFieldTests(SimpleTestCase):\n         form_field = field.formfield(disabled=True)\n         self.assertIs(form_field.disabled, True)\n \n-    def test_field_str(self):\n+    def test_hash_immutability(self):\n+        field = models.IntegerField()\n+        field_hash = hash(field)\n+\n+        class MyModel(models.Model):\n+            rank = field\n+\n+        self.assertEqual(field_hash, hash(field))\n+\n+    def test_hash_multiple_fields(self):\n+        field1 = models.CharField(max_length=200)\n+        field2 = models.IntegerField()\n+        field1_hash = hash(field1)\n+        field2_hash = hash(field2)\n+        \n+        class MyModel(models.Model):\n+            char_field = field1\n+            int_field = field2\n+\n+        self.assertEqual(field1_hash, hash(field1))\n+        self.assertEqual(field2_hash, hash(field2))\n+\n+    def test_hash_unassigned_field(self):\n+        field = models.CharField(max_length=100)\n+        field_hash = hash(field)\n+        self.assertEqual(field_hash, hash(field))\n+\n+    def test_hash_of_copied_field(self):\n+        import copy\n+        field = models.CharField(max_length=200)\n+        copied_field = copy.copy(field)\n+        field_hash = hash(field)\n+        copied_field_hash = hash(copied_field)\n+        \n+        class MyModel(models.Model):\n+            title = field\n+        \n+        self.assertEqual(field_hash, hash(field))\n+        self.assertEqual(copied_field_hash, hash(copied_field))\n+\n+    def test_hash_of_deepcopied_field(self):\n+        import copy\n+        field = models.CharField(max_length=200)\n+        deepcopied_field = copy.deepcopy(field)\n+        field_hash = hash(field)\n+        deepcopied_field_hash = hash(deepcopied_field)\n+        \n+        class MyModel(models.Model):\n+            title = field\n+        \n+        self.assertEqual(field_hash, hash(field))\n+        self.assertEqual(deepcopied_field_hash, hash(deepcopied_field))\n         f = models.Field()\n         self.assertEqual(str(f), '<django.db.models.fields.Field>')\n         f = Foo._meta.get_field('a')\n",
  "django__django-15368": "",
  "django__django-15380": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex e2de333..095502f 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1049,6 +1049,27 @@ class AutodetectorTests(TestCase):\n             new_name='renamed_foo',\n         )\n \n+    def test_rename_model_and_field(self):\n+        \"\"\"Test renaming a model and a field simultaneously.\"\"\"\n+        changes = self.get_changes(\n+            [self.author_name],\n+            [\n+                ModelState('testapp', 'RenamedAuthor', [\n+                    ('id', models.AutoField(primary_key=True)),\n+                    ('renamed_name', models.CharField(max_length=200)),\n+                ]),\n+            ],\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel', 'RenameField'])\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 0, old_name='Author', new_name='RenamedAuthor',\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 1, old_name='name', new_name='renamed_name',\n+        )\n+\n     def test_rename_model(self):\n         \"\"\"Tests autodetection of renamed models.\"\"\"\n         changes = self.get_changes(\n",
  "django__django-15382": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex bd890ac..bab420c 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1906,7 +1906,23 @@ class ExistsTests(TestCase):\n         self.assertNotIn('ORDER BY', captured_sql)\n \n \n-class FieldTransformTests(TestCase):\n+from django.test import TestCase\n+from django.db.models import Exists, Q\n+from .models import MyModel, Manager\n+\n+class NegatedEmptyExistsTests(TestCase):\n+    \n+    def test_negated_empty_exists_does_not_remove_where(self):\n+        # Create a manager object to perform the query on\n+        manager = Manager.objects.create(name='test_manager')\n+        # Perform the query with a negated Exists containing an empty queryset\n+        qs = Manager.objects.filter(\n+            ~Exists(Manager.objects.none()) & Q(pk=manager.pk)\n+        )\n+        # Assert that the query returns the manager object\n+        self.assertSequenceEqual(qs, [manager])\n+        # Additionally, print the SQL to check that WHERE clause is present\n+        print(qs.query)\n \n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-15467": "",
  "django__django-15499": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 5df1b06..5452a1f 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -129,6 +129,65 @@ class OptimizerTests(SimpleTestCase):\n             ],\n         )\n \n+    def test_create_model_no_alter_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Bar\", fields=[]),\n+                migrations.AlterModelManagers(name=\"Bar\", managers=[]),\n+            ],\n+            [\n+                migrations.CreateModel(\"Bar\", fields=[]),\n+            ],\n+        )\n+\n+    def test_create_alter_multiple_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Baz\", fields=[]),\n+                migrations.AlterModelManagers(\n+                    name=\"Baz\",\n+                    managers=[(\"objects\", models.Manager())],\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Baz\",\n+                    managers=[(\"things\", models.Manager())],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\",\n+                    fields=[],\n+                    managers=[\n+                        (\"objects\", models.Manager()),\n+                        (\"things\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n+    def test_create_model_with_options_and_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Qux\",\n+                    fields=[],\n+                    options={\"verbose_name\": \"Qux Model\"},\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Qux\",\n+                    managers=[(\"objects\", models.Manager())],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Qux\",\n+                    fields=[],\n+                    options={\"verbose_name\": \"Qux Model\"},\n+                    managers=[(\"objects\", models.Manager())],\n+                ),\n+            ],\n+        )\n+\n     def test_create_model_and_remove_model_options(self):\n         self.assertOptimizesTo(\n             [\n",
  "django__django-15525": "",
  "django__django-15561": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex b8137da..bab332c 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -3961,7 +3961,42 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             editor.alter_field(Book, new_field, old_field, strict=True)\n \n-    def test_add_textfield_unhashable_default(self):\n+    def test_alter_field_choices_noop_integer_field(self):\n+        # Create the table\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        # Existing field\n+        old_field = Author._meta.get_field(\"age\")\n+        # New field with choices added\n+        new_field = IntegerField(\n+            choices=((1, \"One\"), (2, \"Two\"), (3, \"Three\")),\n+        )\n+        new_field.set_attributes_from_name(\"age\")\n+        \n+        # Test alter_field with no SQL operations expected\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, new_field, old_field, strict=True)\n+\n+    def test_alter_field_with_different_choices(self):\n+        # Create the table\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        # Existing field\n+        old_field = Author._meta.get_field(\"name\")\n+        # New field with different choices\n+        new_field = CharField(\n+            choices=((\"Alice\", \"Alice\"), (\"Bob\", \"Bob\")),\n+            max_length=255,\n+        )\n+        new_field.set_attributes_from_name(\"name\")\n+        \n+        # Test alter_field with no SQL operations expected\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, new_field, old_field, strict=True)\n         # Create the table\n         with connection.schema_editor() as editor:\n             editor.create_model(Author)\n",
  "django__django-15569": "diff --git a/tests/custom_lookups/tests.py b/tests/custom_lookups/tests.py\nindex 74c331a..926e92d 100644\n--- a/tests/custom_lookups/tests.py\n+++ b/tests/custom_lookups/tests.py\n@@ -312,7 +312,17 @@ class LookupTests(TestCase):\n         with register_lookup(models.Field, Exactly):\n             self.assertIsNone(field.get_lookup(\"exactly\"))\n \n-    def test_lookups_caching(self):\n+    def test_lookup_unregister_clears_cache(self):\n+        field = Article._meta.get_field(\"author\")\n+        \n+        # Register a lookup and verify it's cached\n+        with register_lookup(models.ForeignObject, Exactly):\n+            self.assertIn(\"exactly\", field.get_lookups())\n+        \n+        # Unregister the lookup and ensure the cache is cleared\n+        models.ForeignObject._unregister_lookup(Exactly)\n+        field.get_lookups.cache_clear()\n+        self.assertNotIn(\"exactly\", field.get_lookups())\n         field = Article._meta.get_field(\"author\")\n \n         # clear and re-cache\n",
  "django__django-15572": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 188dca4..1eec6c6 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -76,7 +76,51 @@ class TemplateReloadTests(SimpleTestCase):\n             },\n         )\n \n-    @mock.patch(\"django.template.loaders.base.Loader.reset\")\n+    from pathlib import Path\n+    from django.test import override_settings\n+    import django.utils.autoreload as autoreload\n+\n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"DIRS\": [\"\"],\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            }\n+        ]\n+    )\n+    def test_template_dirs_ignore_empty_path(self):\n+        # Test to ensure empty strings in DIRS are ignored\n+        self.assertEqual(autoreload.get_template_directories(), set())\n+\n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"DIRS\": [\"\", \"/absolute/path/to/templates\"],\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            }\n+        ]\n+    )\n+    def test_template_dirs_with_and_without_empty_path(self):\n+        # Test to ensure empty strings in DIRS are ignored and valid directories are included\n+        self.assertEqual(\n+            autoreload.get_template_directories(),\n+            {Path(\"/absolute/path/to/templates\")}\n+        )\n+\n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"DIRS\": [\"/another/absolute/path\", \"\"],\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            }\n+        ]\n+    )\n+    def test_template_dirs_with_empty_path_last(self):\n+        # Test to ensure empty strings in DIRS at the end are ignored\n+        self.assertEqual(\n+            autoreload.get_template_directories(),\n+            {Path(\"/another/absolute/path\")}\n+        )\n     def test_reset_all_loaders(self, mock_reset):\n         autoreload.reset_loaders()\n         self.assertEqual(mock_reset.call_count, 2)\n",
  "django__django-15731": "diff --git a/tests/basic/tests.py b/tests/basic/tests.py\nindex 902f114..1e8f016 100644\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -1,3 +1,4 @@\n+\n import threading\n from datetime import datetime, timedelta\n from unittest import mock\n@@ -6,6 +7,7 @@ from django.core.exceptions import MultipleObjectsReturned, ObjectDoesNotExist\n from django.db import DEFAULT_DB_ALIAS, DatabaseError, connections, models\n from django.db.models.manager import BaseManager\n from django.db.models.query import MAX_GET_RESULTS, EmptyQuerySet\n+import inspect\n from django.test import (\n     SimpleTestCase,\n     TestCase,\n@@ -724,7 +726,21 @@ class ManagerTest(SimpleTestCase):\n \n     def test_manager_methods(self):\n         \"\"\"\n-        This test ensures that the correct set of methods from `QuerySet`\n+    def test_manager_method_signature(self):\n+        # Test the signature of bulk_create method on Manager\n+        self.assertEqual(\n+            str(inspect.signature(Person.objects.bulk_create)),\n+            \"(objs, batch_size=None, ignore_conflicts=False, update_conflicts=False, update_fields=None, unique_fields=None)\",\n+        )\n+        \n+        # Test additional manager method signatures if necessary\n+        # Example: testing the signature of another method, e.g., filter\n+        self.assertEqual(\n+            str(inspect.signature(Person.objects.filter)),\n+            \"(*args, **kwargs)\",\n+        )\n+        \n+        # This test ensures that the correct set of methods from `QuerySet`\n         are copied onto `Manager`.\n \n         It's particularly useful to prevent accidentally leaking new methods\n",
  "django__django-15741": "diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex c6dbc53..c3334e4 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -1,6 +1,9 @@\n+\n from datetime import datetime, time\n \n from django.template.defaultfilters import date\n+from django.utils.formats import get_format\n+from django.utils.translation import gettext_lazy as _\n from django.test import SimpleTestCase\n from django.utils import timezone, translation\n \n@@ -77,7 +80,14 @@ class FunctionTests(SimpleTestCase):\n     def test_date(self):\n         self.assertEqual(date(datetime(2005, 12, 29), \"d F Y\"), \"29 December 2005\")\n \n-    def test_no_args(self):\n+    def test_get_format_lazy_parameter(self):\n+        # Testing with a lazy translation string for a format key\n+        self.assertEqual(get_format(_(\"DATE_FORMAT\")), \"N j, Y\")\n+\n+    def test_date_lazy_string(self):\n+        # Testing the date filter with a lazy translation string\n+        output = self.engine.render_to_string(\"datelazy\", {\"t\": time(0, 0)})\n+        self.assertEqual(output, \"00:00\")\n         self.assertEqual(date(\"\"), \"\")\n         self.assertEqual(date(None), \"\")\n \n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..7a99b70 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -398,6 +398,20 @@ class ProxyModelTests(TestCase):\n     def test_eq(self):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n+    def test_only_with_select_related_on_proxy(self):\n+        # Create instances for testing\n+        custom_model = CustomModel.objects.create(name=\"Proxy Test\")\n+        another_model = AnotherModel.objects.create(custom=custom_model)\n+\n+        # Use select_related and only on a proxy model\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+\n+        # Fetch the object and verify its attributes\n+        fetched_obj = qs.get(id=another_model.id)\n+        self.assertEqual(fetched_obj.custom.name, \"Proxy Test\")\n+\n+        # Ensure the fetched object is the same as created\n+        self.assertEqual(fetched_obj, another_model)\n \n @override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n class ProxyModelAdminTests(TestCase):\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..31ebd06 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -151,12 +151,24 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ),\n         )\n \n+    def test_parameters_before_dbname(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n+        )\n+\n     def test_parameters(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n+    def test_parameters_before_dbname(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n+        )\n+\n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n",
  "django__django-15863": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 08f08e1..32302a0 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -74,7 +74,39 @@ class FunctionTests(SimpleTestCase):\n         self.assertEqual(floatformat(1.5e-15, -20), \"0.00000000000000150000\")\n         self.assertEqual(floatformat(1.00000000000000015, 16), \"1.0000000000000002\")\n \n-    def test_force_grouping(self):\n+    def test_decimal_precision(self):\n+        # Original test patch verifying the fix\n+        self.assertEqual(\n+            floatformat(Decimal(\"123456.123456789012345678901\"), 21),\n+            \"123456.123456789012345678901\",\n+        )\n+\n+        # Additional test cases to further test Decimal precision\n+        # Case with more decimal places\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.12345678901234567890123456789\"), 30),\n+            \"42.123456789012345678901234567890\"\n+        )\n+        # Case with fewer decimal places\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.1234567890\"), 10),\n+            \"42.1234567890\"\n+        )\n+        # Case with negative precision argument\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.9876543210\"), -2),\n+            \"43.00\"\n+        )\n+        # Case with rounding needed\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.9876543210\"), 2),\n+            \"42.99\"\n+        )\n+        # Edge case with zero value\n+        self.assertEqual(\n+            floatformat(Decimal(\"0.0000000000000000000000001\"), 25),\n+            \"0.0000000000000000000000001\"\n+        )\n         with translation.override(\"en\"):\n             self.assertEqual(floatformat(10000, \"g\"), \"10,000\")\n             self.assertEqual(floatformat(66666.666, \"1g\"), \"66,666.7\")\n",
  "django__django-15930": "",
  "django__django-15987": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 5ac9ab9..a8bc300 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n # Unittests for fixtures.\n import json\n import os\n@@ -6,6 +7,9 @@ from io import StringIO\n from pathlib import Path\n \n from django.core import management, serializers\n+from django.core.management import call_command\n+from django.test import override_settings\n+from django.core.exceptions import ImproperlyConfigured\n from django.core.exceptions import ImproperlyConfigured\n from django.core.serializers.base import DeserializationError\n from django.db import IntegrityError, transaction\n@@ -556,7 +560,18 @@ class TestFixtures(TestCase):\n             management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n \n     @override_settings(FIXTURE_DIRS=[os.path.join(_cur_dir, \"fixtures\")])\n-    def test_fixture_dirs_with_default_fixture_path(self):\n+    @override_settings(FIXTURE_DIRS=[Path(_cur_dir) / \"fixtures\"])\n+    def test_fixture_dirs_with_default_fixture_path_as_path_instance(self):\n+        \"\"\"\n+        settings.FIXTURE_DIRS should not allow duplicate paths when using Path instances.\n+        \"\"\"\n+        msg = (\n+            \"'%s' is a default fixture directory for the '%s' app \"\n+            \"and cannot be listed in settings.FIXTURE_DIRS.\"\n+            % (os.path.join(_cur_dir, \"fixtures\"), \"fixtures_regress\")\n+        )\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n         \"\"\"\n         settings.FIXTURE_DIRS cannot contain a default fixtures directory\n         for application (app/fixtures) in order to avoid repeated fixture loading.\n",
  "django__django-16032": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex bcf8df9..29638e8 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -989,6 +989,30 @@ class NonAggregateAnnotationTestCase(TestCase):\n             publisher_books_qs, [{\"name\": \"Sams\"}, {\"name\": \"Morgan Kaufmann\"}]\n         )\n \n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        self.assertCountEqual(\n+            publisher_books_qs,\n+            [\n+                {'name': 'Apress'},\n+                {'name': 'Sams'},\n+                {'name': 'Prentice Hall'},\n+                {'name': 'Morgan Kaufmann'}\n+            ]\n+        )\n+\n     def test_annotation_exists_aggregate_values_chaining(self):\n         qs = (\n             Book.objects.values(\"publisher\")\n",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..c6202be 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2416,7 +2416,7 @@ class CombinedExpressionTests(SimpleTestCase):\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV, Combinable.MOD]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..f0b559c 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib import admin\n@@ -21,7 +22,10 @@ from django.db.models import F, Field, IntegerField\n from django.db.models.functions import Upper\n from django.db.models.lookups import Contains, Exact\n from django.template import Context, Template, TemplateSyntaxError\n-from django.test import TestCase, override_settings\n+from unittest import mock\n+from django.db import DatabaseError\n+from django.test import TestCase, override_settings, skipUnlessDBFeature\n+from django.urls import reverse\n from django.test.client import RequestFactory\n from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup\n from django.urls import reverse\n",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..c6b169a 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2400,7 +2400,27 @@ class MakeMigrationsTests(MigrationTestBase):\n         ):\n             call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n \n-    def test_makemigrations_migration_path_output(self):\n+    def test_makemigrations_check_no_changes(self):\n+        \"\"\"\n+        makemigrations --check should exit with a zero status when\n+        there are no changes to an app requiring migrations.\n+        \"\"\"\n+        with self.temporary_migration_module(\n+            module=\"migrations.test_migrations_no_changes\"\n+        ):\n+            with self.assertRaises(SystemExit) as cm:\n+                call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+            self.assertEqual(cm.exception.code, 0)\n+\n+    def test_makemigrations_check_dry_run(self):\n+        \"\"\"\n+        makemigrations --check --dry-run should exit with a non-zero status\n+        when there are changes to an app requiring migrations.\n+        \"\"\"\n+        with self.temporary_migration_module():\n+            with self.assertRaises(SystemExit) as cm:\n+                call_command(\"makemigrations\", \"--check\", \"--dry-run\", \"migrations\", verbosity=0)\n+            self.assertNotEqual(cm.exception.code, 0)\n         \"\"\"\n         makemigrations should print the relative paths to the migrations unless\n         they are outside of the current tree, in which case the absolute path\n",
  "django__django-16136": "diff --git a/tests/async/tests.py b/tests/async/tests.py\nindex 72e103e..91a1377 100644\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -1,3 +1,4 @@\n+\n import asyncio\n import os\n from unittest import mock\n@@ -6,7 +7,9 @@ from asgiref.sync import async_to_sync\n \n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n-from django.http import HttpResponse\n+from django.http import HttpResponse, HttpResponseNotAllowed\n+from django.test import RequestFactory\n+import asyncio\n from django.test import SimpleTestCase\n from django.utils.asyncio import async_unsafe\n from django.views.generic.base import View\n@@ -106,7 +109,38 @@ class ViewTests(SimpleTestCase):\n             (SyncView, False),\n             (AsyncView, True),\n         ]\n+class MethodNotAllowedTest(SimpleTestCase):\n+\n+    def test_http_method_not_allowed_responds_correctly(self):\n+        \"\"\"\n+        Test that HttpResponseNotAllowed is correctly returned and handled\n+        in both sync and async views.\n+        \"\"\"\n+        class SyncView(View):\n+            def post(self, request):\n+                return HttpResponse(\"ok\")\n+\n+        class AsyncView(View):\n+            async def post(self, request):\n+                return HttpResponse(\"ok\")\n+\n+        request_factory = RequestFactory()\n+        tests = [\n+            (SyncView, False),\n+            (AsyncView, True),\n+        ]\n         for view_cls, is_coroutine in tests:\n+            with self.subTest(view_cls=view_cls, is_coroutine=is_coroutine):\n+                instance = view_cls()\n+                response = instance.http_method_not_allowed(request_factory.post(\"/\"))\n+                self.assertIs(\n+                    asyncio.iscoroutine(response),\n+                    is_coroutine,\n+                )\n+                if is_coroutine:\n+                    response = asyncio.run(response)\n+\n+                self.assertIsInstance(response, HttpResponseNotAllowed)\n             with self.subTest(view_cls=view_cls, is_coroutine=is_coroutine):\n                 instance = view_cls()\n                 response = instance.options(None)\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..b4601ba 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -24,6 +25,8 @@ from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n+import urllib.parse\n+from django.urls import reverse\n from django.utils.translation import gettext as _\n \n from .models.custom_user import (\n@@ -892,7 +895,45 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n-    def test_custom_form(self):\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_with_pk_access(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via pk.\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.pk,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n         class CustomUserChangeForm(UserChangeForm):\n             class Meta(UserChangeForm.Meta):\n                 model = ExtensionUser\n",
  "django__django-16145": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex 04d2f0e..7ac64d7 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1600,6 +1600,38 @@ class ManageRunserver(SimpleTestCase):\n             \"2001:0db8:1234:5678::9\", \"7000\", ipv6=True, raw_ipv6=True\n         )\n \n+    @mock.patch(\"django.core.management.commands.runserver.run\")\n+    @mock.patch(\"django.core.management.base.BaseCommand.check_migrations\")\n+    def test_runserver_zero_ip_address(self, *mocked_objects):\n+        \"\"\"Test that 'runserver 0:8000' results in the correct server address output.\"\"\"\n+        call_command(\n+            \"runserver\",\n+            addrport=\"0:8000\",\n+            use_reloader=False,\n+            skip_checks=True,\n+            stdout=self.output,\n+        )\n+        self.assertIn(\n+            \"Starting development server at http://0.0.0.0:8000/\",\n+            self.output.getvalue(),\n+        )\n+\n+    @mock.patch(\"django.core.management.commands.runserver.run\")\n+    @mock.patch(\"django.core.management.base.BaseCommand.check_migrations\")\n+    def test_runserver_full_ip_address(self, *mocked_objects):\n+        \"\"\"Test that 'runserver 0.0.0.0:8000' results in the correct server address output.\"\"\"\n+        call_command(\n+            \"runserver\",\n+            addrport=\"0.0.0.0:8000\",\n+            use_reloader=False,\n+            skip_checks=True,\n+            stdout=self.output,\n+        )\n+        self.assertIn(\n+            \"Starting development server at http://0.0.0.0:8000/\",\n+            self.output.getvalue(),\n+        )\n+\n     def test_runner_hostname(self):\n         call_command(self.cmd, addrport=\"localhost:8000\")\n         self.assertServerSettings(\"localhost\", \"8000\")\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..cd1a476 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -508,7 +508,53 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n \n-# RemovedInDjango50Warning\n+from django.test import override_settings\n+from django.contrib.sitemaps import Sitemap\n+from django.urls import path\n+from django.utils.datetime_safe import datetime\n+\n+class CallableLastmodNoItemsSitemapTest(SitemapTestsBase):\n+    def test_callable_sitemod_no_items_with_callable_lastmod(self):\n+        index_response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", index_response)\n+        expected_content_index = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\n+        </sitemapindex>\n+        \"\"\"\n+        self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n+\n+    def test_callable_sitemod_with_items(self):\n+        index_response = self.client.get(\"/callable-lastmod-items/index.xml\")\n+        self.assertIn(\"Last-Modified\", index_response)\n+        expected_content_index = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\n+        </sitemapindex>\n+        \"\"\"\n+        self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n+\n+class CallableLastmodNoItemsSitemap(Sitemap):\n+    location = \"/location/\"\n+\n+    def items(self):\n+        return []\n+\n+    def lastmod(self, obj):\n+        return obj.lastmod\n+\n+callable_lastmod_no_items_sitemap = {\n+    \"callable-lastmod\": CallableLastmodNoItemsSitemap,\n+}\n+\n+urlpatterns += [\n+    path(\n+        \"callable-lastmod-no-items/index.xml\",\n+        views.index,\n+        {\"sitemaps\": callable_lastmod_no_items_sitemap},\n+    ),\n+]\n+\n class DeprecatedTests(SitemapTestsBase):\n     @override_settings(\n         TEMPLATES=[\n",
  "django__django-16315": "diff --git a/tests/bulk_create/models.py b/tests/bulk_create/models.py\nindex c5f5c07..7e99864 100644\n--- a/tests/bulk_create/models.py\n+++ b/tests/bulk_create/models.py\n@@ -59,6 +59,10 @@ class Pizzeria(Restaurant):\n     pass\n \n \n+class FieldsWithDbColumns(models.Model):\n+    rank = models.IntegerField(unique=True, db_column=\"rAnK\")\n+    name = models.CharField(max_length=15, null=True, db_column=\"oTheRNaMe\")\n+\n class State(models.Model):\n     two_letter_code = models.CharField(max_length=2, primary_key=True)\n \n",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..b0d3582 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n import urllib.parse\n@@ -34,6 +35,7 @@ from .models.custom_user import (\n     ExtensionUser,\n )\n from .models.with_custom_email_field import CustomEmailField\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n from .models.with_integer_username import IntegerUsernameUser\n from .settings import AUTH_TEMPLATES\n \n@@ -252,7 +254,61 @@ class UserCreationFormTest(TestDataMixin, TestCase):\n         form = CustomUserCreationForm(data)\n         self.assertTrue(form.is_valid())\n \n-    def test_password_whitespace_not_stripped(self):\n+    def test_custom_form_saves_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization = Organization.objects.create(name=\"organization 1\")\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization])\n+        \n+    def test_multiple_organizations_saved(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        org1 = Organization.objects.create(name=\"organization 1\")\n+        org2 = Organization.objects.create(name=\"organization 2\")\n+\n+        data = {\n+            \"username\": \"testclient2@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(org1.pk), str(org2.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [org1, org2])\n+\n+    def test_no_organization_selected(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        data = {\n+            \"username\": \"testclient3@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [])\n         data = {\n             \"username\": \"testuser\",\n             \"password1\": \"   testpassword   \",\n",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..d6cbfb8 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.test import TestCase\n@@ -236,7 +237,33 @@ class TimesinceTests(TestCase):\n             with self.subTest():\n                 self.assertEqual(timesince(t, value), expected)\n \n-    def test_depth_invalid(self):\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_long_interval_with_tz(self):\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=31)\n+        self.assertEqual(timesince(d), \"1\\xa0month\")\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_long_interval_with_tz_specific(self):\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=365)\n+        self.assertEqual(timesince(d), \"1\\xa0year\")\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_long_interval_with_tz_and_hours(self):\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=31, hours=5)\n+        self.assertEqual(timesince(d), \"1\\xa0month\")\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_long_interval_with_tz_and_minutes(self):\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=31, minutes=10)\n+        self.assertEqual(timesince(d), \"1\\xa0month\")\n         msg = \"depth must be greater than 0.\"\n         with self.assertRaisesMessage(ValueError, msg):\n             timesince(self.t, self.t, depth=0)\n",
  "django__django-16454": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 8d0729b..0a9d487 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -470,6 +470,22 @@ class CommandRunTests(AdminScriptTestCase):\n \n \n class UtilsTests(SimpleTestCase):\n+    def test_subparser_missing_argument(self):\n+        \"\"\"\n+        Test that a missing argument in a subparser returns a formatted error.\n+        \"\"\"\n+        # Prepare the settings for the test\n+        self.write_settings(\"settings.py\", apps=[\"user_commands\"])\n+        \n+        # Run the management command with a missing argument in the subparser\n+        out, err = self.run_manage([\"subparser\", \"foo\"])  # Missing 'bar' argument\n+        \n+        # Verify that the output is empty and error output is as expected\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertEqual(len(err_lines), 2)\n+        self.assertIn(\"manage.py subparser foo: error: the following arguments are required: bar\", err_lines[1])\n+\n     def test_no_existent_external_program(self):\n         msg = \"Error executing a_42_command_that_doesnt_exist_42\"\n         with self.assertRaisesMessage(CommandError, msg):\n",
  "django__django-16485": "",
  "django__django-16493": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex 20567e7..dfdb8a6 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -1018,6 +1018,30 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         storage = kwargs[\"storage\"]\n         self.assertIs(storage, callable_storage)\n \n+    def test_deconstruction_storage_callable_default(self):\n+        \"\"\"\n+        A callable that returns default_storage is not omitted when\n+        deconstructing.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"storage_callable_default\").deconstruct()\n+        self.assertIs(kwargs[\"storage\"], callable_default_storage)\n+\n+    def test_deconstruction_random_storage_callable(self):\n+        \"\"\"\n+        A callable that randomly returns default_storage or another storage\n+        should always have its callable preserved for deconstruction.\n+        \"\"\"\n+        from .models import get_storage\n+\n+        for _ in range(10):  # Run multiple times to check randomness\n+            class RandomStorageModel(models.Model):\n+                random_storage_file = models.FileField(storage=get_storage)\n+\n+            obj = RandomStorageModel()\n+            *_, kwargs = obj._meta.get_field(\"random_storage_file\").deconstruct()\n+            self.assertIs(kwargs[\"storage\"], get_storage)\n+\n \n # Tests for a race condition on file saving (#4948).\n # This is written in such a way that it'll always pass on platforms\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..2ef40b3 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n@@ -9,7 +10,9 @@ from django.test import RequestFactory, TestCase\n from django.urls import reverse\n \n from .admin import ArticleAdmin, site\n+from django.contrib.auth import get_permission_codename\n from .models import Article, Question\n+from .tests import get_perm\n from .tests import AdminViewBasicTestCase\n \n \n@@ -54,6 +57,38 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n                     template_context[\"show_save_and_add_another\"], expected_flag\n                 )\n \n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n+\n     def test_override_change_form_template_tags(self):\n         \"\"\"\n         admin_modify template tags follow the standard search pattern\n",
  "django__django-16560": "diff --git a/tests/constraints/tests.py b/tests/constraints/tests.py\nindex 13854a9..8f3203c 100644\n--- a/tests/constraints/tests.py\n+++ b/tests/constraints/tests.py\n@@ -67,7 +67,41 @@ class BaseConstraintTests(SimpleTestCase):\n         )\n         self.assertEqual(c.get_violation_error_message(), \"custom base_name message\")\n \n-    def test_custom_violation_error_message_clone(self):\n+    def test_custom_violation_code_message(self):\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price\",\n+            violation_error_code=\"custom_code\",\n+        )\n+        invalid_product = Product(price=10, discounted_price=42)\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(Product, invalid_product)\n+        self.assertEqual(cm.exception.code, \"custom_code\")\n+\n+    def test_unique_constraint_custom_violation_code(self):\n+        constraint = models.UniqueConstraint(\n+            fields=[\"name\"],\n+            name=\"unique_name\",\n+            violation_error_code=\"unique_violation\",\n+        )\n+        product1 = Product.objects.create(name=\"duplicate\")\n+        product2 = Product(name=\"duplicate\")\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(Product, product2)\n+        self.assertEqual(cm.exception.code, \"unique_violation\")\n+\n+    def test_exclusion_constraint_custom_violation_code(self):\n+        constraint = models.ExclusionConstraint(\n+            name=\"exclude_overlapping\",\n+            expressions=[(F(\"datespan\"), RangeOperators.OVERLAPS)],\n+            violation_error_code=\"overlap_violation\",\n+        )\n+        range_obj1 = RangesModel.objects.create(datespan=(10, 20))\n+        range_obj2 = RangesModel(datespan=(15, 25))\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(RangesModel, range_obj2)\n+        self.assertEqual(cm.exception.code, \"overlap_violation\")\n         constraint = BaseConstraint(\n             name=\"base_name\",\n             violation_error_message=\"custom %(name)s message\",\n",
  "django__django-16569": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 55da562..5dee59a 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1471,6 +1471,18 @@ class FormsFormsetTestCase(SimpleTestCase):\n             extra=2,\n         )\n         formset = ChoiceFormFormset()\n+\n+    def test_empty_form_does_not_include_delete_when_index_none(self):\n+        class MyForm(forms.Form):\n+            my_field = forms.CharField()\n+\n+        MyFormSet = forms.formset_factory(\n+            form=MyForm,\n+            can_delete=True,\n+            can_delete_extra=False,\n+        )\n+        my_formset = MyFormSet(initial=None)\n+        self.assertNotIn(\"DELETE\", my_formset.empty_form.fields)\n         self.assertEqual(len(formset), 2)\n         self.assertNotIn(\"DELETE\", formset.forms[0].fields)\n         self.assertNotIn(\"DELETE\", formset.forms[1].fields)\n",
  "django__django-16595": "",
  "django__django-16612": "",
  "django__django-16642": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 499356e..6f5095a 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -256,6 +256,16 @@ class FileResponseTests(SimpleTestCase):\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n         )\n+        test_issue_tuples = (\n+            (\".html.br\", \"application/x-brotli\"),\n+            (\".html.Z\", \"application/x-compress\"),\n+        )\n+        for extension, expected_mimetype in test_issue_tuples:\n+            with self.subTest(ext=extension):\n+                with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n+                    response = FileResponse(tmp)\n+                self.assertEqual(response.headers[\"Content-Type\"], expected_mimetype)\n+                self.assertFalse(response.has_header(\"Content-Encoding\"))\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n                 with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n",
  "django__django-16661": "diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py\nindex 8cb88da..bc0283e 100644\n--- a/tests/modeladmin/tests.py\n+++ b/tests/modeladmin/tests.py\n@@ -154,6 +154,35 @@ class ModelAdminTests(TestCase):\n             ma.lookup_allowed(\"employee__department__code\", \"test_value\"), True\n         )\n \n+    @isolate_apps(\"modeladmin\")\n+    def test_lookup_allowed_foreign_primary(self):\n+        class Country(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class Place(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+\n+        class Restaurant(models.Model):\n+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)\n+\n+        class Waiter(models.Model):\n+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n+\n+        class WaiterAdmin(ModelAdmin):\n+            list_filter = [\n+                \"restaurant__place__country\",\n+                \"restaurant__place__country__name\",\n+            ]\n+\n+        ma = WaiterAdmin(Waiter, self.site)\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country\", \"1\"), True)\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__id__exact\", \"1\"), True\n+        )\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__name\", \"test_value\"), True\n+        )\n+\n     def test_field_arguments(self):\n         # If fields is specified, fieldsets_add and fieldsets_change should\n         # just stick the fields into a formsets structure and return it.\n",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..ecea047 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -922,7 +922,36 @@ class WriterTests(SimpleTestCase):\n             output,\n         )\n \n-    def test_migration_file_header_comments(self):\n+    def test_sorted_imports_full(self):\n+        \"\"\"\n+        Test that import statements are fully sorted according to the issue description.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield1\",\n+                        models.FloatField(default=time.time),\n+                    ),\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield2\",\n+                        models.DateTimeField(\n+                            default=datetime.datetime(\n+                                2012, 1, 1, 1, 1, tzinfo=datetime.timezone.utc\n+                            ),\n+                        ),\n+                    ),\n+                ],\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        expected_imports = \"import datetime\\nimport time\\nfrom django.db import migrations, models\\n\"\n+        self.assertIn(expected_imports, output)\n         \"\"\"\n         Test comments at top of file.\n         \"\"\"\n",
  "django__django-16801": "diff --git a/tests/model_fields/test_imagefield.py b/tests/model_fields/test_imagefield.py\nindex 9bf7f7d..fc6dd36 100644\n--- a/tests/model_fields/test_imagefield.py\n+++ b/tests/model_fields/test_imagefield.py\n@@ -338,6 +338,39 @@ class ImageFieldOneDimensionTests(ImageFieldTwoDimensionsTests):\n     PersonModel = PersonWithHeight\n \n \n+@skipIf(Image is None, \"Pillow is required to test ImageField\")\n+class ImageFieldSignalTests(TestCase):\n+    \"\"\"\n+    Tests to ensure that ImageField does not connect post_init signal unnecessarily.\n+    \"\"\"\n+\n+    def setUp(self):\n+        # Assuming PersonWithoutDimensions does not have width_field or height_field.\n+        self.PersonModelWithoutDimensions = PersonWithoutDimensions\n+\n+    def test_post_init_not_connected_no_dimensions(self):\n+        \"\"\"\n+        Test that the post_init signal is not connected for models with ImageField\n+        but without width_field and height_field.\n+        \"\"\"\n+        person_model_id = id(self.PersonModelWithoutDimensions)\n+        self.assertNotIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id), *_ in signals.post_init.receivers],\n+        )\n+\n+    def test_post_init_connected_with_dimensions(self):\n+        \"\"\"\n+        Test that the post_init signal is connected for models with ImageField\n+        having width_field and/or height_field.\n+        \"\"\"\n+        person_model_id = id(self.PersonModel)\n+        self.assertIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id), *_ in signals.post_init.receivers],\n+        )\n+\n+\n @skipIf(Image is None, \"Pillow is required to test ImageField\")\n class ImageFieldDimensionsFirstTests(ImageFieldTwoDimensionsTests):\n     \"\"\"\n",
  "django__django-16819": "",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..9673358 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -790,8 +790,21 @@ class SystemChecksTestCase(SimpleTestCase):\n \n         errors = SongAdmin(Song, AdminSite()).check()\n         self.assertEqual(errors, [])\n+    def test_readonly_fields_error_message_includes_field_name(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            readonly_fields = [\"nonexistent\"]\n \n-    def test_nonexistent_field(self):\n+        errors = SongAdmin(Song, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' refers to 'nonexistent', \"\n+                \"which is not a callable, an attribute of 'SongAdmin', or an \"\n+                \"attribute of 'admin_checks.Song'.\",\n+                obj=SongAdmin,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n         class SongAdmin(admin.ModelAdmin):\n             readonly_fields = (\"title\", \"nonexistent\")\n \n",
  "django__django-16901": "",
  "django__django-17029": "diff --git a/tests/apps/tests.py b/tests/apps/tests.py\nindex f7c2c67..0f1710c 100644\n--- a/tests/apps/tests.py\n+++ b/tests/apps/tests.py\n@@ -24,6 +24,10 @@ SOME_INSTALLED_APPS = [\n     \"django.contrib.staticfiles\",\n ]\n \n+from django.test import override_settings, SimpleTestCase\n+from django.apps import apps\n+from django.apps.registry import Apps\n+\n SOME_INSTALLED_APPS_NAMES = [\n     \"django.contrib.admin\",\n     \"django.contrib.auth\",\n@@ -139,6 +143,20 @@ class AppsTests(SimpleTestCase):\n         self.assertIsInstance(config, TwoConfig)\n \n     @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n+    def test_clear_cache(self):\n+        \"\"\"\n+        Test that clear_cache clears the cache of get_swappable_settings_name.\n+        \"\"\"\n+        # Set cache by calling get_swappable_settings_name\n+        self.assertIsNone(apps.get_swappable_settings_name(\"admin.LogEntry\"))\n+        apps.get_models()\n+        \n+        # Clear cache\n+        apps.clear_cache()\n+        \n+        # Check if caches are cleared\n+        self.assertEqual(apps.get_swappable_settings_name.cache_info().currsize, 0)\n+        self.assertEqual(apps.get_models.cache_info().currsize, 0)\n     def test_get_app_configs(self):\n         \"\"\"\n         Tests apps.get_app_configs().\n@@ -149,6 +167,20 @@ class AppsTests(SimpleTestCase):\n         )\n \n     @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n+    def test_clear_cache(self):\n+        \"\"\"\n+        Test that clear_cache clears the cache of get_swappable_settings_name.\n+        \"\"\"\n+        # Set cache by calling get_swappable_settings_name\n+        self.assertIsNone(apps.get_swappable_settings_name(\"admin.LogEntry\"))\n+        apps.get_models()\n+        \n+        # Clear cache\n+        apps.clear_cache()\n+        \n+        # Check if caches are cleared\n+        self.assertEqual(apps.get_swappable_settings_name.cache_info().currsize, 0)\n+        self.assertEqual(apps.get_models.cache_info().currsize, 0)\n     def test_get_app_config(self):\n         \"\"\"\n         Tests apps.get_app_config().\n@@ -167,6 +199,20 @@ class AppsTests(SimpleTestCase):\n             apps.get_app_config(\"django.contrib.auth\")\n \n     @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n+    def test_clear_cache(self):\n+        \"\"\"\n+        Test that clear_cache clears the cache of get_swappable_settings_name.\n+        \"\"\"\n+        # Set cache by calling get_swappable_settings_name\n+        self.assertIsNone(apps.get_swappable_settings_name(\"admin.LogEntry\"))\n+        apps.get_models()\n+        \n+        # Clear cache\n+        apps.clear_cache()\n+        \n+        # Check if caches are cleared\n+        self.assertEqual(apps.get_swappable_settings_name.cache_info().currsize, 0)\n+        self.assertEqual(apps.get_models.cache_info().currsize, 0)\n     def test_is_installed(self):\n         \"\"\"\n         Tests apps.is_installed().\n@@ -177,6 +223,20 @@ class AppsTests(SimpleTestCase):\n         self.assertIs(apps.is_installed(\"django.contrib.admindocs\"), False)\n \n     @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n+    def test_clear_cache(self):\n+        \"\"\"\n+        Test that clear_cache clears the cache of get_swappable_settings_name.\n+        \"\"\"\n+        # Set cache by calling get_swappable_settings_name\n+        self.assertIsNone(apps.get_swappable_settings_name(\"admin.LogEntry\"))\n+        apps.get_models()\n+        \n+        # Clear cache\n+        apps.clear_cache()\n+        \n+        # Check if caches are cleared\n+        self.assertEqual(apps.get_swappable_settings_name.cache_info().currsize, 0)\n+        self.assertEqual(apps.get_models.cache_info().currsize, 0)\n     def test_get_model(self):\n         \"\"\"\n         Tests apps.get_model().\n",
  "django__django-17084": "",
  "django__django-17087": "",
  "django__django-7530": "",
  "django__django-9296": "diff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\nindex b9b5fbc..f22cc73 100644\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -298,6 +298,40 @@ class PaginationTests(SimpleTestCase):\n             paginator.get_page(1)\n \n \n+from django.core.paginator import Paginator, EmptyPage\n+from django.test import TestCase\n+\n+class PaginatorTests(TestCase):\n+    def test_paginator_iteration(self):\n+        paginator = Paginator([1, 2, 3], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2], [3]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+\n+    def test_empty_list(self):\n+        paginator = Paginator([], 2)\n+        page_iterator = iter(paginator)\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_single_page(self):\n+        paginator = Paginator([1, 2], 2)\n+        page_iterator = iter(paginator)\n+        with self.subTest(page=1):\n+            self.assertEqual([1, 2], list(next(page_iterator)))\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_exact_multiple_of_page_size(self):\n+        paginator = Paginator([1, 2, 3, 4], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2], [3, 4]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n class ModelPaginationTests(TestCase):\n     \"\"\"\n     Test pagination with Django model instances\n",
  "matplotlib__matplotlib-13989": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5483eef..731d7ad 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6359,8 +6359,31 @@ def test_hist_auto_bins():\n \n def test_hist_nan_data():\n     fig, (ax1, ax2) = plt.subplots(2)\n+import numpy as np\n+import matplotlib.pyplot as plt\n \n-    data = [1, 2, 3]\n+def test_hist_range_and_density():\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_density_multiple_bins():\n+    # Test with multiple bins\n+    _, bins, _ = plt.hist(np.random.rand(100), bins=5, range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_density_non_default_range():\n+    # Test with a non-default range\n+    _, bins, _ = plt.hist(np.random.rand(100), bins=5, range=(0.2, 0.8), density=True)\n+    assert bins[0] == 0.2\n+    assert bins[-1] == 0.8\n+\n+def test_hist_range_no_density():\n+    # Test without density to ensure the original behavior is preserved\n+    _, bins, _ = plt.hist(np.random.rand(100), bins=5, range=(0, 1), density=False)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n     nan_data = data + [np.nan]\n \n     bins, edges, _ = ax1.hist(data)\n@@ -6368,4 +6391,4 @@ def test_hist_nan_data():\n         nanbins, nanedges, _ = ax2.hist(nan_data)\n \n     assert np.allclose(bins, nanbins)\n-    assert np.allclose(edges, nanedges)\n+    assert np.allclose(edges, nanedges)\n",
  "matplotlib__matplotlib-14623": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c9ad946..054404b 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -930,6 +930,23 @@ def test_inverted_limits():\n     assert ax.get_ylim() == (-3, 5)\n     plt.close()\n \n+def test_invert_log_scale_axis():\n+    # Test inverting a log scale axis using its limits\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(10, 1)\n+    assert ax.get_ylim() == (10, 1)\n+\n+def test_invert_log_scale_axis_with_plot():\n+    # Test inverting a log scale axis after a plot\n+    y = np.linspace(1000e2, 1, 100)\n+    x = np.exp(-np.linspace(0, 1, y.size))\n+    fig, ax = plt.subplots()\n+    ax.plot(x, y)\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(y.max(), y.min())\n+    assert ax.get_ylim() == (y.max(), y.min())\n+\n     fig, ax = plt.subplots()\n     ax.invert_yaxis()\n     ax.plot([-5, -3, 2, 4], [1, 2, -3, 5])\n@@ -938,6 +955,23 @@ def test_inverted_limits():\n     assert ax.get_ylim() == (5, -3)\n     plt.close()\n \n+def test_invert_log_scale_axis():\n+    # Test inverting a log scale axis using its limits\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(10, 1)\n+    assert ax.get_ylim() == (10, 1)\n+\n+def test_invert_log_scale_axis_with_plot():\n+    # Test inverting a log scale axis after a plot\n+    y = np.linspace(1000e2, 1, 100)\n+    x = np.exp(-np.linspace(0, 1, y.size))\n+    fig, ax = plt.subplots()\n+    ax.plot(x, y)\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(y.max(), y.min())\n+    assert ax.get_ylim() == (y.max(), y.min())\n+\n \n @image_comparison(baseline_images=['nonfinite_limits'])\n def test_nonfinite_limits():\n",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..f64cbe1 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6960,8 +6960,51 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[3].hist(np.arange(10), color=color.reshape((1, -1)))\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n+from matplotlib.testing.decorators import check_figures_equal\n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear(fig_test, fig_ref):\n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    axs = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs.flat:\n+        ax.plot(x, y)\n+\n+    axs = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n \n-def test_shared_axes_retick():\n+def test_shared_axes_clear_ticks():\n+    fig, axs = plt.subplots(2, 2, sharex=True, sharey=True)\n+    \n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+    \n+    for ax in axs.flat:\n+        ax.plot(x, y)\n+    \n+    for ax in axs.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n+        \n+    # Assert that the shared x-axis labels (except the bottom row) are hidden\n+    assert not axs[0, 0].get_xticklabels()[0].get_visible()\n+    assert not axs[0, 1].get_xticklabels()[0].get_visible()\n+    \n+    # Assert that the shared y-axis labels (except the left column) are hidden\n+    assert not axs[0, 1].get_yticklabels()[0].get_visible()\n+    assert not axs[1, 1].get_yticklabels()[0].get_visible()\n+    \n+    # Check that axes ticks are still synchronized\n+    axs[0, 0].set_xlim(0, 5)\n+    axs[0, 0].set_ylim(-1, 1)\n+    for ax in axs.flat:\n+        assert ax.get_xlim() == axs[0, 0].get_xlim()\n+        assert ax.get_ylim() == axs[0, 0].get_ylim()\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n \n     for ax in axs.flat:\n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "diff --git a/lib/matplotlib/tests/test_category.py b/lib/matplotlib/tests/test_category.py\nindex 40c4dcf..fd5f5e4 100644\n--- a/lib/matplotlib/tests/test_category.py\n+++ b/lib/matplotlib/tests/test_category.py\n@@ -307,8 +307,28 @@ def test_overriding_units_in_plot(fig_test, fig_ref):\n         assert y_units is ax.yaxis.units\n \n \n-def test_hist():\n+def test_no_deprecation_on_empty_data():\n+    \"\"\"\n+    Test to ensure no deprecation warning is emitted for empty data on\n+    axes with category units. See #22640.\n+    \"\"\"\n+    f, ax = plt.subplots()\n+    ax.xaxis.update_units([\"a\", \"b\"])\n+    with pytest.warns(None) as record:\n+        ax.plot([], [])\n+    # Check that no warnings were raised\n+    assert len(record) == 0\n+\n+def test_axis_convert_units_with_non_empty_data():\n+    \"\"\"\n+    Test to ensure Axis.convert_units works with non-empty categorical data.\n+    \"\"\"\n+    f, ax = plt.subplots()\n+    ax.xaxis.update_units([\"a\", \"b\"])\n+    converted_data = ax.convert_xunits([\"a\", \"b\"])\n+    expected_converted_data = np.array([0, 1], dtype=float)\n+    np.testing.assert_array_equal(converted_data, expected_converted_data)\n     fig, ax = plt.subplots()\n     n, bins, patches = ax.hist(['a', 'b', 'a', 'c', 'ff'])\n     assert n.shape == (10,)\n-    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n+    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n",
  "matplotlib__matplotlib-22865": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex 2c28713..fe009f3 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -919,6 +919,46 @@ def test_proportional_colorbars():\n             fig.colorbar(CS3, spacing=spacings[j], ax=axs[i, j])\n \n \n+import numpy as np\n+import matplotlib.pyplot as plt\n+import matplotlib.colors as mcolors\n+from matplotlib.colorbar import Colorbar\n+\n+import pytest\n+\n+@pytest.mark.parametrize(\"extend, expected_segments\", [\n+    ('both', [\n+        np.array([[0., 0.], [0., 1.]]),  # First edge\n+        np.array([[1., 0.], [1., 1.]]),  # Middle edge\n+        np.array([[2., 0.], [2., 1.]])   # Last edge\n+    ]),\n+    ('min', [\n+        np.array([[0., 0.], [0., 1.]]),  # First edge (only extend min)\n+        np.array([[1., 0.], [1., 1.]])   # Middle edge\n+    ]),\n+    ('max', [\n+        np.array([[1., 0.], [1., 1.]]),  # Middle edge\n+        np.array([[2., 0.], [2., 1.]])   # Last edge (only extend max)\n+    ]),\n+    ('neither', [\n+        np.array([[1., 0.], [1., 1.]])   # Middle edge only\n+    ])\n+])\n+def test_colorbar_extend_drawedges(extend, expected_segments):\n+    cmap = plt.get_cmap(\"viridis\")\n+    bounds = np.arange(3)\n+    nb_colors = len(bounds) + 1\n+    colors = cmap(np.linspace(0, 1, nb_colors))\n+    cmap, norm = mcolors.from_levels_and_colors(bounds, colors, extend=extend)\n+\n+    fig, ax = plt.subplots(figsize=(5, 1))\n+    cbar = Colorbar(ax, cmap=cmap, norm=norm, orientation='horizontal', drawedges=True)\n+    segments = cbar.dividers.get_segments()\n+    \n+    assert len(segments) == len(expected_segments), \"Unexpected number of edges\"\n+    for seg, expected in zip(segments, expected_segments):\n+        np.testing.assert_array_almost_equal(seg, expected)\n+\n def test_negative_boundarynorm():\n     fig, ax = plt.subplots(figsize=(1, 3))\n     cmap = plt.get_cmap(\"viridis\")\n",
  "matplotlib__matplotlib-23299": "",
  "matplotlib__matplotlib-23314": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 0e7274f..7d136d1 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -36,6 +36,7 @@ import matplotlib.transforms as mtransforms\n import mpl_toolkits.axisartist as AA\n from numpy.testing import (\n     assert_allclose, assert_array_equal, assert_array_almost_equal)\n+from mpl_toolkits.mplot3d import Axes3D  # Import necessary for 3D plotting\n from matplotlib.testing.decorators import (\n     image_comparison, check_figures_equal, remove_ticks_and_titles)\n \n@@ -45,7 +46,13 @@ from matplotlib.testing.decorators import (\n #       the tests with multiple threads.\n \n \n-def test_get_labels():\n+@check_figures_equal(extensions=[\"png\"])\n+def test_set_visible_3d(fig_test, fig_ref):\n+    ax1 = fig_test.add_subplot(111, projection='3d')\n+    ax1.scatter([1, 2], [1, 2], [1, 2], color='blue')\n+    ax1.set_visible(False)\n+    # The reference figure will not have the subplot\n+    fig_ref.text(0.5, 0.5, 'No 3D subplot visible', ha='center')\n     fig, ax = plt.subplots()\n     ax.set_xlabel('x label')\n     ax.set_ylabel('y label')\n",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..97acda4 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -149,6 +149,43 @@ def test_rotate_rect_draw(fig_test, fig_ref):\n     assert rect_test.get_angle() == angle\n \n \n+import matplotlib.pyplot as plt\n+import matplotlib.patches as patches\n+import pytest\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=['png'])\n+def test_dash_offset_rectangle(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n+\n+    # Reference plot with expected dash offset\n+    ax_ref.plot([0, 1], [0, 1], linestyle=(0, (10, 10)), color='r')\n+    ax_ref.plot([0, 1], [0.1, 1.1], linestyle=(10, (10, 10)), color='b')\n+    \n+    # Test plot with Rectangle patch, expecting similar offset behavior\n+    rect1 = patches.Rectangle((0.5, 0.5), 0.4, 0.4, linewidth=2, edgecolor='r', linestyle=(0, (10, 10)))\n+    rect2 = patches.Rectangle((0.5, 0.6), 0.4, 0.4, linewidth=2, edgecolor='b', linestyle=(10, (10, 10)))\n+\n+    ax_test.add_patch(rect1)\n+    ax_test.add_patch(rect2)\n+\n+@check_figures_equal(extensions=['png'])\n+def test_dash_offset_ellipse(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n+\n+    # Reference plot with expected dash offset\n+    ax_ref.plot([0, 1], [0, 1], linestyle=(0, (5, 5)), color='g')\n+    ax_ref.plot([0, 1], [-0.1, 0.9], linestyle=(5, (5, 5)), color='m')\n+\n+    # Test plot with Ellipse patch, expecting similar offset behavior\n+    ellipse1 = patches.Ellipse((0.5, 0.5), 0.4, 0.2, linewidth=2, edgecolor='g', linestyle=(0, (5, 5)))\n+    ellipse2 = patches.Ellipse((0.5, 0.4), 0.4, 0.2, linewidth=2, edgecolor='m', linestyle=(5, (5, 5)))\n+\n+    ax_test.add_patch(ellipse1)\n+    ax_test.add_patch(ellipse2)\n+\n def test_negative_rect():\n     # These two rectangles have the same vertices, but starting from a\n     # different point.  (We also drop the last vertex, which is a duplicate.)\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..e450ff1 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2866,8 +2866,27 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+from matplotlib.patches import Rectangle\n+\n+def test_stackplot_color_cycler():\n+    # Arrange\n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    fig, ax = plt.subplots()\n \n-@image_comparison(['stackplot_test_baseline'], remove_text=True)\n+    # Act\n+    ax.plot([1, 3], [1, 3], color='C0')\n+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))\n+    \n+    # Assert stackplot does not raise a ValueError with CN colors\n+    try:\n+        ax.stackplot([1, 2, 3], my_data, colors=['C2', 'C3', 'C4'])\n+        plt.close(fig)\n+        print(\"Test Passed: stackplot with CN colors did not raise an error.\")\n+    except ValueError as e:\n+        plt.close(fig)\n+        assert False, f\"stackplot raised a ValueError: {e}\"\n def test_stackplot_baseline():\n     np.random.seed(0)\n \n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 45f9c04..0f68b2d 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -13,7 +13,7 @@ from matplotlib.backend_bases import MouseButton, MouseEvent\n \n from matplotlib.offsetbox import (\n     AnchoredOffsetbox, AnnotationBbox, AnchoredText, DrawingArea, OffsetBox,\n-    OffsetImage, TextArea, _get_packed_offsets)\n+    OffsetImage, TextArea, _get_packed_offsets, HPacker, VPacker)\n \n \n @image_comparison(['offsetbox_clipping'], remove_text=True)\n@@ -327,6 +327,25 @@ def test_zorder():\n     assert OffsetBox(zorder=42).zorder == 42\n \n \n+@pytest.mark.parametrize(\"align, expected_yoffsets\", [\n+    (\"bottom\", [0, 0]),\n+    (\"top\", [10, 0]),\n+])\n+def test_hpacker_alignment(align, expected_yoffsets):\n+    fig = plt.figure(dpi=72)\n+    da1 = DrawingArea(10, 20)\n+    da2 = DrawingArea(10, 30)\n+    \n+    hpacker = HPacker(children=[da1, da2], pad=0, sep=0, align=align)\n+    renderer = fig.canvas.get_renderer()\n+    \n+    _, _, _, _, offset_pairs = hpacker.get_extent_offsets(renderer)\n+    \n+    _, y_offsets = zip(*offset_pairs)\n+    \n+    assert_allclose(y_offsets, expected_yoffsets)\n+\n+\n def test_arrowprops_copied():\n     da = DrawingArea(20, 20, 0, 0, clip=True)\n     arrowprops = {\"arrowstyle\": \"->\", \"relpos\": (.3, .7)}\n",
  "matplotlib__matplotlib-24627": "",
  "matplotlib__matplotlib-24637": "diff --git a/lib/matplotlib/tests/test_backend_svg.py b/lib/matplotlib/tests/test_backend_svg.py\nindex 8817464..656c25e 100644\n--- a/lib/matplotlib/tests/test_backend_svg.py\n+++ b/lib/matplotlib/tests/test_backend_svg.py\n@@ -576,7 +576,95 @@ def test_svg_font_string(font_str, include_generic):\n         rest = rest + [generic]\n     plt.rcParams[f\"font.{generic}\"] = rest\n     plt.rcParams[\"font.size\"] = size\n-    plt.rcParams[\"svg.fonttype\"] = \"none\"\n+from matplotlib.offsetbox import (OffsetImage, AnnotationBbox)\n+import matplotlib.pyplot as plt\n+import numpy as np\n+from io import BytesIO\n+\n+def test_annotationbbox_gid():\n+    # Test that object gid appears in the AnnotationBbox in output svg.\n+    fig = plt.figure()\n+    ax = fig.add_subplot()\n+    arr_img = np.ones((32, 32))\n+    xy = (0.3, 0.55)\n+\n+    imagebox = OffsetImage(arr_img, zoom=0.1)\n+    imagebox.image.axes = ax\n+\n+    ab = AnnotationBbox(imagebox, xy,\n+                        xybox=(120., -80.),\n+                        xycoords='data',\n+                        boxcoords=\"offset points\",\n+                        pad=0.5,\n+                        arrowprops=dict(\n+                            arrowstyle=\"->\",\n+                            connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                        )\n+    ab.set_gid(\"a test for issue 20044\")\n+    ax.add_artist(ab)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n+\n+    expected = '<g id=\"a test for issue 20044\">'\n+    assert expected in buf\n+\n+def test_annotationbbox_no_arrowprops_gid():\n+    # Test AnnotationBbox gid without arrowprops.\n+    fig = plt.figure()\n+    ax = fig.add_subplot()\n+    arr_img = np.ones((32, 32))\n+    xy = (0.5, 0.5)\n+\n+    imagebox = OffsetImage(arr_img, zoom=0.2)\n+    imagebox.image.axes = ax\n+\n+    ab = AnnotationBbox(imagebox, xy,\n+                        xybox=(150., -100.),\n+                        xycoords='data',\n+                        boxcoords=\"offset points\",\n+                        pad=0.1)\n+    ab.set_gid(\"test_no_arrowprops\")\n+    ax.add_artist(ab)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n+\n+    expected = '<g id=\"test_no_arrowprops\">'\n+    assert expected in buf\n+\n+def test_annotationbbox_multiple_instances_gid():\n+    # Test multiple AnnotationBbox instances with different gids.\n+    fig, ax = plt.subplots()\n+    arr_img = np.ones((32, 32))\n+\n+    for i in range(3):\n+        xy = (0.2 * (i+1), 0.5)\n+        imagebox = OffsetImage(arr_img, zoom=0.1)\n+        imagebox.image.axes = ax\n+\n+        ab = AnnotationBbox(imagebox, xy,\n+                            xybox=(100 * (i+1), -50 * (i+1)),\n+                            xycoords='data',\n+                            boxcoords=\"offset points\",\n+                            pad=0.5,\n+                            arrowprops=dict(\n+                                arrowstyle=\"->\",\n+                                connectionstyle=\"angle,angleA=0,angleB=90,rad=3\"\n+                            )\n+                            )\n+        ab.set_gid(f\"test_multiple_{i}\")\n+        ax.add_artist(ab)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n+\n+    for i in range(3):\n+        expected = f'<g id=\"test_multiple_{i}\">'\n+        assert expected in buf\n \n     fig, ax = plt.subplots()\n     if generic == \"sans-serif\":\n",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..91267da 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -20,6 +20,11 @@ import matplotlib.scale as mscale\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n \n \n+import numpy as np\n+import matplotlib.pyplot as plt\n+import pytest\n+from numpy.testing import assert_array_equal\n+\n @pytest.mark.parametrize('N, result', [\n     (5, [1, .6, .2, .1, 0]),\n     (2, [1, 0]),\n@@ -30,7 +35,19 @@ def test_create_lookup_table(N, result):\n     assert_array_almost_equal(mcolors._create_lookup_table(N, data), result)\n \n \n-def test_resampled():\n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.float16, float])\n+def test_index_dtype(dtype):\n+    # We use subtraction in the indexing, so need to verify that uint8 works\n+    cm = plt.get_cmap(\"viridis\")\n+    assert_array_equal(cm(dtype(0)), cm(0))\n+\n+def test_no_deprecation_warnings():\n+    # Test to ensure no deprecation warnings are issued for the stated problem\n+    # in the issue with NumPy 1.24.\n+    with pytest.warns(None) as record:\n+        plt.get_cmap()(np.empty((0,), dtype=np.uint8))\n+    # Ensure no warnings were emitted\n+    assert len(record) == 0\n     \"\"\"\n     GitHub issue #6025 pointed to incorrect ListedColormap.resampled;\n     here we test the method for LinearSegmentedColormap as well.\n",
  "matplotlib__matplotlib-25122": "diff --git a/lib/matplotlib/tests/test_mlab.py b/lib/matplotlib/tests/test_mlab.py\nindex 51d0c35..b9ab217 100644\n--- a/lib/matplotlib/tests/test_mlab.py\n+++ b/lib/matplotlib/tests/test_mlab.py\n@@ -581,6 +581,30 @@ class TestSpectral:\n         with pytest.raises(AssertionError):\n             assert_allclose(spec_b, spec_c, atol=1e-08)\n \n+    def test_psd_window_flattop(self):\n+        # Test to ensure flattop window correction is correct\n+        NFFT_density = 512\n+        ydata = np.random.randn(NFFT_density * 10)\n+        window = signal.windows.flattop(NFFT_density)\n+        spec, fsp = mlab.psd(x=ydata,\n+                             NFFT=NFFT_density,\n+                             Fs=self.Fs,\n+                             noverlap=0,\n+                             sides='onesided',\n+                             window=window,\n+                             scale_by_freq=True)\n+        \n+        spec_corrected, fsp_corrected = mlab.psd(x=ydata,\n+                                  NFFT=NFFT_density,\n+                                  Fs=self.Fs,\n+                                  noverlap=0,\n+                                  sides='onesided',\n+                                  window=window,\n+                                  scale_by_freq=False)\n+        spec_corrected *= self.Fs * (window**2).sum()\n+        \n+        assert_allclose(spec * (window.sum()**2), spec_corrected, atol=1e-08)\n+\n     def test_psd_window_hanning(self):\n         if self.NFFT_density is None:\n             return\n",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..2cb39b1 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,6 +7801,37 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+def test_xaxis_offsetText_color():\n+    plt.rcParams['xtick.labelcolor'] = 'blue'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.xaxis.offsetText.get_color() == 'blue'\n+\n+    plt.rcParams['xtick.color'] = 'yellow'\n+    plt.rcParams['xtick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.xaxis.offsetText.get_color() == 'yellow'\n+\n+\n+def test_yaxis_offsetText_color():\n+    plt.rcParams['ytick.labelcolor'] = 'green'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.yaxis.offsetText.get_color() == 'green'\n+\n+    plt.rcParams['ytick.color'] = 'red'\n+    plt.rcParams['ytick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.yaxis.offsetText.get_color() == 'red'\n+\n+import matplotlib.pyplot as plt\n+import pytest\n+import matplotlib as mpl\n+from matplotlib import font_manager as mfont_manager\n+import numpy as np\n+\n def test_ytickcolor_is_not_yticklabelcolor():\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n",
  "matplotlib__matplotlib-25311": "",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..bf9faf3 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -90,7 +90,30 @@ def _generate_complete_test_figure(fig_ref):\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n \n-@mpl.style.context(\"default\")\n+import matplotlib.pyplot as plt\n+import pickle\n+from io import BytesIO\n+\n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+    fig.align_labels()\n+    # Test that the figure can be pickled without error\n+    try:\n+        pickle.dumps(fig)\n+        pickling_successful = True\n+    except TypeError as e:\n+        pickling_successful = False\n+        print(\"Pickling error:\", e)\n+    assert pickling_successful, \"Figure with aligned labels could not be pickled successfully.\"\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..4513b11 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -991,8 +991,45 @@ def test_hexbin_linear():\n     ax.hexbin(x, y, gridsize=(10, 5), marginals=True,\n               reduce_C_function=np.sum)\n \n+from matplotlib.testing.decorators import check_figures_equal\n \n-def test_hexbin_log_clim():\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_behavior_upon_C_parameter(fig_test, fig_ref):\n+    # see: gh:12926\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # without C parameter\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # with C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=[1] * len(X),\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n     x, y = np.arange(200).reshape((2, 100))\n     fig, ax = plt.subplots()\n     h = ax.hexbin(x, y, bins='log', vmin=2, vmax=100)\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex 700190c..f639efc 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -89,6 +89,10 @@ def test_contour_no_valid_levels():\n     ax.contour(np.ones((9, 9)))\n \n \n+from matplotlib.testing.decorators import check_figures_equal, image_comparison\n+import matplotlib.pyplot as plt\n+import numpy as np\n+\n def test_contour_Nlevels():\n     # A scalar levels arg or kwarg should trigger auto level generation.\n     # https://github.com/matplotlib/matplotlib/issues/11913\n",
  "mwaskom__seaborn-3069": "diff --git a/tests/_core/test_plot.py b/tests/_core/test_plot.py\nindex 3d202bc..4752e3e 100644\n--- a/tests/_core/test_plot.py\n+++ b/tests/_core/test_plot.py\n@@ -646,6 +646,9 @@ class TestScaling:\n             p.plot()\n \n \n+import matplotlib as mpl\n+import pytest\n+\n class TestPlotting:\n \n     def test_matplotlib_object_creation(self):\n@@ -661,7 +664,29 @@ class TestPlotting:\n         Plot().plot()\n         assert m.n_splits == 0\n \n-    def test_single_split_single_layer(self, long_df):\n+    def test_nominal_x_axis_grid_and_limits(self):\n+        p = Plot(x=[\"a\", \"b\", \"c\"], y=[1, 2, 3])\n+        ax = p.plot()._figure.axes[0]\n+        assert ax.get_xlim() == (-0.5, 2.5), \"X-axis limits are not adjusted correctly for nominal scale.\"\n+        assert not any(line.get_visible() for line in ax.xaxis.get_gridlines()), \"Gridlines should not be visible on nominal x-axis.\"\n+\n+    def test_nominal_y_axis_grid_and_limits(self):\n+        p = Plot(x=[1, 2, 3], y=[\"a\", \"b\", \"c\"])\n+        ax = p.plot()._figure.axes[0]\n+        assert ax.get_ylim() == (2.5, -0.5), \"Y-axis limits are not inverted correctly for nominal scale.\"\n+        assert not any(line.get_visible() for line in ax.yaxis.get_gridlines()), \"Gridlines should not be visible on nominal y-axis.\"\n+\n+    def test_nominal_x_axis_with_custom_limits(self):\n+        p = Plot(x=[\"a\", \"b\", \"c\"], y=[1, 2, 3])\n+        lim = (-1, 2.1)\n+        ax = p.limit(x=lim).plot()._figure.axes[0]\n+        assert ax.get_xlim() == lim, \"Custom limits should override nominal scale limits for x-axis.\"\n+\n+    def test_nominal_y_axis_with_custom_limits(self):\n+        p = Plot(x=[1, 2, 3], y=[\"a\", \"b\", \"c\"])\n+        lim = (-1, 2.1)\n+        ax = p.limit(y=lim).plot()._figure.axes[0]\n+        assert ax.get_ylim() == lim, \"Custom limits should override nominal scale limits for y-axis.\"\n \n         m = MockMark()\n         p = Plot(long_df, x=\"f\", y=\"z\").add(m).plot()\n",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..de99063 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -244,7 +244,9 @@ def test_default_static_max_age(app):\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n \n-def test_templates_list(test_apps):\n+def test_empty_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"\", __name__)\n     from blueprintapp import app\n \n     templates = sorted(app.jinja_env.list_templates())\n",
  "psf__requests-1142": "",
  "psf__requests-1724": "",
  "psf__requests-1766": "",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..a2e7199 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,6 +81,8 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://*example.com'),\n+            (InvalidURL, 'http://.example.com'),\n         ))\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..05e2cb4 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2308,8 +2308,26 @@ class TestAsCompatibleData:\n         orig = Variable(dims=(\"x\"), data=array, attrs={\"foo\": \"bar\"})\n         assert isinstance(orig._data, CustomIndexable)\n \n-\n-def test_raise_no_warning_for_nan_in_binary_ops():\n+import numpy as np\n+import pytest\n+from xarray import Variable\n+\n+def test_no_coercion_for_objects_with_values_property():\n+    class HasValues:\n+        def __init__(self, value):\n+            self.values = value\n+\n+    good_indexed = Variable(dims=(\"x\",), data=[None])\n+    bad_indexed = Variable(dims=(\"x\",), data=[None])\n+    \n+    # Expected behavior: The object itself should be stored, not its `values` attribute.\n+    good_indexed[0] = set()\n+    assert isinstance(good_indexed[0].item(), set), \"Expected a set object stored in the Variable.\"\n+\n+    obj_with_values = HasValues(5)\n+    bad_indexed[0] = obj_with_values\n+    assert isinstance(bad_indexed[0].item(), HasValues), \"Expected a HasValues object stored in the Variable.\"\n+    assert bad_indexed[0].item().values == 5, \"The values attribute should remain unchanged.\"\n     with pytest.warns(None) as record:\n         Variable(\"x\", [1, 2, np.NaN]) > 0\n     assert len(record) == 0\n",
  "pydata__xarray-3095": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex 9329f73..0158ffc 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -492,7 +492,12 @@ class VariableSubclassobjects:\n                         source_ndarray(w.values))\n         assert_identical(v, copy(v))\n \n-    def test_copy_index(self):\n+    @pytest.mark.parametrize('deep', [True, False])\n+    def test_deep_copy_unicode_index(self, deep):\n+        unicode_array = self.cls('x', np.array(['foo', 'bar'], dtype='<U3'))\n+        copied_array = unicode_array.copy(deep=deep)\n+        assert copied_array.dtype.kind == unicode_array.dtype.kind\n+        assert_identical(unicode_array, copied_array)\n         midx = pd.MultiIndex.from_product([['a', 'b'], [1, 2], [-1, -2]],\n                                           names=('one', 'two', 'three'))\n         v = self.cls('x', midx)\n",
  "pydata__xarray-3151": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 026dec9..b8dc8a0 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -571,6 +571,31 @@ class TestCombineAuto:\n         with raises_regex(ValueError, 'Every dimension needs a coordinate'):\n             combine_by_coords(objs)\n \n+    def test_combine_non_monotonic_identical_coords(self):\n+        # Test non-monotonic identical coordinates do not raise ValueError\n+        ycoord = ['a', 'c', 'b']\n+        data1 = np.random.rand(3, 3)\n+        data2 = np.random.rand(4, 3)\n+\n+        ds1 = Dataset(\n+            data_vars=dict(data=(['x', 'y'], data1)),\n+            coords=dict(x=[1, 2, 3], y=ycoord)\n+        )\n+\n+        ds2 = Dataset(\n+            data_vars=dict(data=(['x', 'y'], data2)),\n+            coords=dict(x=[4, 5, 6, 7], y=ycoord)\n+        )\n+\n+        expected_data = np.concatenate([data1, data2], axis=0)\n+        expected = Dataset(\n+            data_vars=dict(data=(['x', 'y'], expected_data)),\n+            coords=dict(x=[1, 2, 3, 4, 5, 6, 7], y=ycoord)\n+        )\n+\n+        actual = combine_by_coords((ds1, ds2))\n+        assert_identical(expected, actual)\n+\n         def test_empty_input(self):\n             assert_identical(Dataset(), combine_by_coords([]))\n \n",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..c792d69 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2309,6 +2309,17 @@ class TestDataArray:\n                     self.dv.values, np.array(q) * 100, axis=axis\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n+    \n+    def test_quantile_keep_attrs(self):\n+        da = xr.DataArray([0, 0], dims=\"x\", attrs={'units': 'K'})\n+        \n+        # Test when keep_attrs=True\n+        result_with_attrs = da.quantile(0.9, dim='x', keep_attrs=True)\n+        assert result_with_attrs.attrs == {'units': 'K'}\n+        \n+        # Test when keep_attrs=False (default behavior)\n+        result_without_attrs = da.quantile(0.9, dim='x', keep_attrs=False)\n+        assert result_without_attrs.attrs == {}\n \n     def test_reduce_keep_attrs(self):\n         # Test dropped attrs\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..acb88ad 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,8 +1,10 @@\n+\n import numpy as np\n import pytest\n \n import xarray as xr\n from xarray.core import dtypes, merge\n+from xarray.testing import assert_identical\n \n from . import raises_regex\n from .test_dataset import create_test_data\n@@ -159,6 +161,13 @@ class TestMergeMethod:\n         with raises_regex(ValueError, \"should be coordinates or not\"):\n             data.merge(data.reset_coords())\n \n+    def test_merge_dataarray(self):\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+\n+        # Test the merge operation using the Dataset's merge method\n+        assert_identical(ds.merge(da), xr.merge([ds, da]))\n+\n     def test_merge_broadcast_equals(self):\n         ds1 = xr.Dataset({\"x\": 0})\n         ds2 = xr.Dataset({\"x\": (\"y\", [0, 0])})\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..91ef786 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -109,7 +109,21 @@ class TestMergeFunction:\n             expected.attrs = expected_attrs\n             assert actual.identical(expected)\n \n-    def test_merge_dicts_simple(self):\n+    def test_merge_attrs_override_copy(self):\n+        ds1 = xr.Dataset(attrs={\"x\": 0})\n+        ds2 = xr.Dataset(attrs={\"x\": 1})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"x\"] = 2\n+        assert ds1.attrs[\"x\"] == 0\n+        assert ds3.attrs[\"x\"] == 2\n+\n+    def test_merge_attrs_override_independence(self):\n+        ds1 = xr.Dataset(attrs={\"a\": \"original\"})\n+        ds2 = xr.Dataset(attrs={\"a\": \"different\"})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"a\"] = \"changed\"\n+        assert ds1.attrs[\"a\"] == \"original\"  # Ensure ds1 is unaffected\n+        assert ds3.attrs[\"a\"] == \"changed\"   # Ensure ds3 has updated attribute\n         actual = xr.merge([{\"foo\": 0}, {\"bar\": \"one\"}, {\"baz\": 3.5}])\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n         assert actual.identical(expected)\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..1e6e36f 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1921,6 +1921,27 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n+def test_where_attrs() -> None:\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    actual = xr.where(cond, x, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected, actual)\n+\n+def test_where_dtype_preservation() -> None:\n+    data = xr.DataArray(np.ones([10, 10], dtype=np.int8))\n+    result = xr.where(data == 1, 5, 0)\n+    assert result.dtype == np.int8, f\"Expected dtype np.int8, but got {result.dtype}\"\n+\n+    data_float = xr.DataArray(np.ones([10, 10], dtype=np.float32))\n+    result_float = xr.where(data_float == 1, 5.0, 0.0)\n+    assert result_float.dtype == np.float32, f\"Expected dtype np.float32, but got {result_float.dtype}\"\n+    cond = xr.DataArray([True, False], dims=\"x\")\n+    actual = xr.where(cond, 1, 0)\n+    expected = xr.DataArray([1, 0], dims=\"x\")\n+    assert_identical(expected, actual)\n+\n \n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n",
  "pydata__xarray-4695": "",
  "pydata__xarray-4966": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex 2dbb0b4..f8b0221 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -9,6 +9,9 @@ from xarray.coding import variables\n from xarray.conventions import decode_cf_variable, encode_cf_variable\n \n from . import assert_allclose, assert_equal, assert_identical, requires_dask\n+import numpy as np\n+import xarray as xr\n+from xarray.coding import variables\n \n with suppress(ImportError):\n     import dask.array as da\n",
  "pydata__xarray-6461": "",
  "pydata__xarray-6599": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f1ec005..153717e 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -2000,6 +2000,29 @@ def test_where_attrs() -> None:\n             xr.Dataset({\"a\": (\"x\", [1, 2, 3]), \"b\": (\"y\", [3, 4, 5])}),\n             id=\"dataset-dataset\",\n         ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array([1000, 2000, 3000], dtype=\"timedelta64[ns]\"), dims=\"x\"\n+            ),\n+            xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n+            xr.DataArray([1000.0, 2000.0, 3000.0], dims=\"x\"),\n+            id=\"timedelta\",\n+        ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array([0, 10, 20, 30, 40, 50], dtype=\"timedelta64[s]\"), dims=\"x\"\n+            ),\n+            xr.DataArray(\n+                [2.33333335e-43, -1.15316667e-30, 5.83965193e-06, 4.44739216e06],\n+                dims=\"degree\",\n+                coords={\"degree\": [4, 3, 1, 0]}\n+            ),\n+            xr.DataArray(\n+                [4.44739216e06, 4.50553725588366e06, 4.56317492026797e06, 4.62029831815291e06, 4.67690067053846e06, 4.73297525442459e06],\n+                dims=\"x\"\n+            ),\n+            id=\"timedelta-complex\",\n+        ),\n         pytest.param(\n             xr.DataArray(pd.date_range(\"1970-01-01\", freq=\"s\", periods=3), dims=\"x\"),\n             xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n@@ -2010,6 +2033,29 @@ def test_where_attrs() -> None:\n             ),\n             id=\"datetime\",\n         ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array([1000, 2000, 3000], dtype=\"timedelta64[ns]\"), dims=\"x\"\n+            ),\n+            xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n+            xr.DataArray([1000.0, 2000.0, 3000.0], dims=\"x\"),\n+            id=\"timedelta\",\n+        ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array([0, 10, 20, 30, 40, 50], dtype=\"timedelta64[s]\"), dims=\"x\"\n+            ),\n+            xr.DataArray(\n+                [2.33333335e-43, -1.15316667e-30, 5.83965193e-06, 4.44739216e06],\n+                dims=\"degree\",\n+                coords={\"degree\": [4, 3, 1, 0]}\n+            ),\n+            xr.DataArray(\n+                [4.44739216e06, 4.50553725588366e06, 4.56317492026797e06, 4.62029831815291e06, 4.67690067053846e06, 4.73297525442459e06],\n+                dims=\"x\"\n+            ),\n+            id=\"timedelta-complex\",\n+        ),\n     ],\n )\n def test_polyval(\n",
  "pydata__xarray-6721": "",
  "pydata__xarray-6744": "diff --git a/xarray/tests/test_rolling.py b/xarray/tests/test_rolling.py\nindex 0a9ef75..110303f 100644\n--- a/xarray/tests/test_rolling.py\n+++ b/xarray/tests/test_rolling.py\n@@ -49,7 +49,29 @@ class TestDataArrayRolling:\n                     expected.values[expected.values.nonzero()],\n                 )\n \n-    @pytest.mark.parametrize(\"da\", (1,), indirect=True)\n+    @pytest.mark.parametrize(\"da\", (1, 2), indirect=True)\n+    @pytest.mark.parametrize(\"center\", [True, False])\n+    @pytest.mark.parametrize(\"size\", [1, 2, 3, 7])\n+    def test_rolling_iter_center_kwarg(self, da, center, size) -> None:\n+        rolling_obj = da.rolling(time=size, center=center)\n+        rolling_obj_mean = rolling_obj.mean()\n+\n+        assert len(rolling_obj.window_labels) == len(da[\"time\"])\n+        assert_identical(rolling_obj.window_labels, da[\"time\"])\n+\n+        for i, (label, window_da) in enumerate(rolling_obj):\n+            assert label == da[\"time\"].isel(time=i)\n+\n+            actual = rolling_obj_mean.isel(time=i)\n+            expected = window_da.mean(\"time\")\n+\n+            # Check if the values are centered as expected\n+            np.testing.assert_array_equal(actual.isnull(), expected.isnull())\n+            if (~actual.isnull()).sum() > 0:\n+                np.testing.assert_allclose(\n+                    actual.values[actual.values.nonzero()],\n+                    expected.values[expected.values.nonzero()],\n+                )\n     def test_rolling_repr(self, da) -> None:\n         rolling_obj = da.rolling(time=7)\n         assert repr(rolling_obj) == \"DataArrayRolling [time->7]\"\n",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "diff --git a/xarray/tests/test_indexes.py b/xarray/tests/test_indexes.py\nindex fa8bd84..d564891 100644\n--- a/xarray/tests/test_indexes.py\n+++ b/xarray/tests/test_indexes.py\n@@ -688,12 +688,27 @@ def test_safe_cast_to_index_cftimeindex():\n         assert isinstance(actual, type(expected))\n \n \n-# Test that datetime.datetime objects are never used in a CFTimeIndex\n-@requires_cftime\n-def test_safe_cast_to_index_datetime_datetime():\n-    dates = [datetime(1, 1, day) for day in range(1, 20)]\n+import pytest\n+import xarray as xr\n+import numpy as np\n \n-    expected = pd.Index(dates)\n-    actual = safe_cast_to_index(np.array(dates))\n-    assert_array_equal(expected, actual)\n-    assert isinstance(actual, pd.Index)\n+@pytest.mark.parametrize(\"dtype\", [\"int32\", \"float32\"])\n+def test_restore_dtype_on_multiindexes(dtype: str) -> None:\n+    foo = xr.Dataset(coords={\"bar\": (\"bar\", np.array([0, 1], dtype=dtype))})\n+    foo = foo.stack(baz=(\"bar\",))\n+    assert str(foo[\"bar\"].values.dtype) == dtype\n+\n+def test_stack_int32_no_cast_to_int64() -> None:\n+    ds = xr.Dataset(coords={'a': np.array([0], dtype='i4')})\n+    stacked_ds = ds.stack(b=('a',))\n+    assert ds['a'].values.dtype == stacked_ds['a'].values.dtype\n+\n+def test_stack_float32_no_cast() -> None:\n+    ds = xr.Dataset(coords={'a': np.array([0.0], dtype='f4')})\n+    stacked_ds = ds.stack(b=('a',))\n+    assert ds['a'].values.dtype == stacked_ds['a'].values.dtype\n+\n+def test_stack_string_dtype_unchanged() -> None:\n+    ds = xr.Dataset(coords={'a': np.array(['x'], dtype='U1')})\n+    stacked_ds = ds.stack(b=('a',))\n+    assert ds['a'].values.dtype == stacked_ds['a'].values.dtype\n",
  "pylint-dev__pylint-4970": "diff --git a/tests/checkers/unittest_similar.py b/tests/checkers/unittest_similar.py\nindex 97cd4d0..08ba5d7 100644\n--- a/tests/checkers/unittest_similar.py\n+++ b/tests/checkers/unittest_similar.py\n@@ -495,10 +495,24 @@ def test_get_map_data() -> None:\n         data.extend(sim.get_map_data())\n \n     assert len(expected_linelists) == len(data)\n+\n+def test_duplicate_code_detection_disabled() -> None:\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        similar.Run([\"--duplicates=0\", SIMILAR1, SIMILAR2])\n+    assert ex.value.code == 0\n+    assert output.getvalue() == \"\"\n+\n+def test_duplicate_code_detection_enabled() -> None:\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        similar.Run([\"--duplicates=5\", SIMILAR1, SIMILAR2])\n+    assert ex.value.code == 0\n+    assert \"Duplicate code found\" in output.getvalue()\n     for source_fname, expected_lines, lineset_obj in zip(\n         source_streams, expected_linelists, data\n     ):\n         assert source_fname == lineset_obj.name\n         # There doesn't seem to be a faster way of doing this, yet.\n         lines = (linespec.text for linespec in lineset_obj.stripped_lines)\n-        assert tuple(expected_lines) == tuple(lines)\n+        assert tuple(expected_lines) == tuple(lines)\n",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..651e7cd 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -94,9 +94,26 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+from pytest import CaptureFixture\n+from pylint.lint import Run\n+from pylint.testutils import EMPTY_MODULE\n+import pytest\n+\n+def test_short_verbose_no_argument(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that the short '-v' option does not expect an argument.\"\"\"\n+    Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n+def test_long_verbose_no_argument(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that the long '--verbose' option does not expect an argument.\"\"\"\n+    Run([str(EMPTY_MODULE), \"--verbose\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "",
  "pylint-dev__pylint-7277": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9f95f7b..7be7795 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -767,6 +767,34 @@ a.py:1:4: E0001: Parsing failed: 'invalid syntax (<unknown>, line 1)' (syntax-er\n \n             paths = [cwd, \"/custom_pythonpath\", *default_paths]\n             sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths\n+\n+            # Additional test cases\n+            paths = [\"\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:]\n+\n+            paths = [\".\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:]\n+\n+            paths = [os.getcwd(), *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:]\n+\n+            paths = [\"/do_not_remove\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths\n             with _test_environ_pythonpath(\"/custom_pythonpath\"):\n                 modify_sys_path()\n             assert sys.path == paths[1:]\n",
  "pytest-dev__pytest-10051": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex 26c4c15..0b25384 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -160,6 +160,8 @@ def logging_during_setup_and_teardown(caplog):\n     assert [x.message for x in caplog.get_records(\"teardown\")] == [\"a_teardown_log\"]\n \n \n+import logging\n+\n def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardown):\n     assert not caplog.records\n     assert not caplog.get_records(\"call\")\n@@ -172,7 +174,21 @@ def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardow\n     assert set(caplog._item.stash[caplog_records_key]) == {\"setup\", \"call\"}\n \n \n-def test_ini_controls_global_log_level(pytester: Pytester) -> None:\n+def test_caplog_clear_syncs_records(caplog):\n+    # Initial log message to set state\n+    logging.info(\"initial log\")\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"initial log\"]\n+    assert caplog.records == caplog.get_records(\"call\")\n+\n+    # Clear caplog and verify both get_records and records are cleared\n+    caplog.clear()\n+    assert caplog.get_records(\"call\") == []\n+    assert caplog.records == []\n+\n+    # Log after clearing and verify both are updated\n+    logging.info(\"log after clear\")\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"log after clear\"]\n+    assert caplog.records == caplog.get_records(\"call\")\n     pytester.makepyfile(\n         \"\"\"\n         import pytest\n",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 561df7f..9c13a56 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -1273,6 +1273,59 @@ def test_pdb_teardown_skipped(\n     result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n     assert tracked == []\n \n+def test_pdb_teardown_skipped_with_skipIf(pytester: Pytester, monkeypatch: MonkeyPatch) -> None:\n+    \"\"\"Test that tearDown is not called for classes skipped with unittest.skipIf.\"\"\"\n+    tracked: List[str] = []\n+    monkeypatch.setattr(pytest, \"track_pdb_teardown_skipped\", tracked, raising=False)\n+\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+        import pytest\n+\n+        @unittest.skipIf(True, \"skipped due to condition\")\n+        class MyTestCase(unittest.TestCase):\n+\n+            def setUp(self):\n+                pytest.track_pdb_teardown_skipped.append(\"setUp:\" + self.id())\n+\n+            def tearDown(self):\n+                pytest.track_pdb_teardown_skipped.append(\"tearDown:\" + self.id())\n+\n+            def test_1(self):\n+                pass\n+    \"\"\"\n+    )\n+    result = pytester.runpytest_inprocess(\"--pdb\")\n+    result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n+    assert tracked == []\n+\n+def test_pdb_teardown_skipped_with_skipUnless(pytester: Pytester, monkeypatch: MonkeyPatch) -> None:\n+    \"\"\"Test that tearDown is not called for classes skipped with unittest.skipUnless.\"\"\"\n+    tracked: List[str] = []\n+    monkeypatch.setattr(pytest, \"track_pdb_teardown_skipped\", tracked, raising=False)\n+\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+        import pytest\n+\n+        @unittest.skipUnless(False, \"skipped due to condition\")\n+        class MyTestCase(unittest.TestCase):\n+\n+            def setUp(self):\n+                pytest.track_pdb_teardown_skipped.append(\"setUp:\" + self.id())\n+\n+            def tearDown(self):\n+                pytest.track_pdb_teardown_skipped.append(\"tearDown:\" + self.id())\n+\n+            def test_1(self):\n+                pass\n+    \"\"\"\n+    )\n+    result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n+    assert tracked == []\n+\n \n def test_async_support(pytester: Pytester) -> None:\n     pytest.importorskip(\"unittest.async_case\")\n",
  "pytest-dev__pytest-5262": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 1f092b0..78d3e13 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -1051,6 +1051,31 @@ class TestFDCapture(object):\n             cap.done()\n             pytest.raises(AttributeError, cap.suspend)\n \n+def test_encoded_file_mode():\n+    from _pytest.capture import EncodedFile\n+    import io\n+    buffer = io.StringIO()\n+    encoded_file = EncodedFile(buffer, 'utf-8')\n+    assert 'b' not in encoded_file.buffer.mode\n+\n+def test_encoded_file_write_str():\n+    from _pytest.capture import EncodedFile\n+    import io\n+    buffer = io.StringIO()\n+    encoded_file = EncodedFile(buffer, 'utf-8')\n+    test_string = \"Hello, pytest!\"\n+    encoded_file.write(test_string)\n+    assert buffer.getvalue() == test_string\n+\n+def test_encoded_file_write_bytes_raises():\n+    from _pytest.capture import EncodedFile\n+    import io\n+    buffer = io.StringIO()\n+    encoded_file = EncodedFile(buffer, 'utf-8')\n+    test_bytes = b\"Hello, pytest!\"\n+    import pytest\n+    with pytest.raises(TypeError):\n+        encoded_file.write(test_bytes)\n \n @contextlib.contextmanager\n def saved_fd(fd):\n",
  "pytest-dev__pytest-5631": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 8c1c2d7..5cf1309 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -1,6 +1,9 @@\n+\n import gc\n \n+import numpy as np\n import pytest\n+from unittest.mock import patch\n from _pytest.main import ExitCode\n \n \n@@ -20,7 +23,21 @@ def test_simple_unittest(testdir):\n     assert reprec.matchreport(\"test_failing\").failed\n \n \n-def test_runTest_method(testdir):\n+def test_mock_patch_with_numpy_array(testdir):\n+    testdir.makepyfile(\n+        \"\"\"\n+        from unittest.mock import patch\n+        import numpy as np\n+        \n+        class NumpyMockTest:\n+            @patch('dummy.FOO', new=np.array([1, 2, 3]))\n+            def test_array_patch(self):\n+                assert isinstance(dummy.FOO, np.ndarray)\n+                assert (dummy.FOO == np.array([1, 2, 3])).all()\n+        \"\"\"\n+    )\n+    result = testdir.inline_run()\n+    assert result.matchreport(\"test_array_patch\").passed\n     testdir.makepyfile(\n         \"\"\"\n         import unittest\n",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..dbb2515 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -116,18 +116,36 @@ class TestPaste(object):\n             monkeypatch.setattr(urllib, \"urlopen\", mocked)\n         else:\n             import urllib.request\n+import pytest\n+import sys\n+from unittest.mock import Mock\n+\n+@pytest.fixture\n+def pastebin():\n+    import _pytest.pastebin\n+    return _pytest.pastebin\n+\n+@pytest.fixture\n+def mocked_urlopen(monkeypatch):\n+    calls = []\n+\n+    def mocked(url, data=None, *args, **kwargs):\n+        calls.append((url, data))\n+        response = Mock()\n+        response.read.return_value = b'<a href=\"/raw/3c0c6750bd\">raw link</a>'\n+        return response\n \n-            monkeypatch.setattr(urllib.request, \"urlopen\", mocked)\n-        return calls\n+    monkeypatch.setattr(urllib.request, \"urlopen\", mocked)\n+    return calls\n \n-    def test_create_new_paste(self, pastebin, mocked_urlopen):\n-        result = pastebin.create_new_paste(b\"full-paste-contents\")\n+    def test_create_new_paste_with_text_lexer(self, pastebin, mocked_urlopen):\n+        # Test to ensure the lexer is set to 'text'\n+        result = pastebin.create_new_paste(b\"example-contents\")\n         assert result == \"https://bpaste.net/show/3c0c6750bd\"\n         assert len(mocked_urlopen) == 1\n         url, data = mocked_urlopen[0]\n         assert type(data) is bytes\n-        lexer = \"python3\" if sys.version_info[0] >= 3 else \"python\"\n         assert url == \"https://bpaste.net\"\n-        assert \"lexer=%s\" % lexer in data.decode()\n-        assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"lexer=text\" in data.decode()\n+        assert \"code=example-contents\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n",
  "pytest-dev__pytest-6202": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex fb6b260..7ab7102 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -682,7 +682,22 @@ class Test_genitems:\n                     assert hash(i) != hash(j)\n                     assert i != j\n \n-    def test_example_items1(self, testdir):\n+    def test_bug_replacement_in_headline(self, testdir):\n+        # Create a test file that will cause the issue if it's not fixed\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+\n+            @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+            def test_boo(arg0):\n+                pass\n+        \"\"\"\n+        )\n+        items, reprec = testdir.inline_genitems(p)\n+        assert len(items) == 1\n+        assert items[0].name == \"test_boo[.[]\"\n+        # Verify that getmodpath does not alter the string incorrectly\n+        assert items[0].getmodpath() == \"test_boo[.[]\"\n         p = testdir.makepyfile(\n             \"\"\"\n             def testone():\n",
  "pytest-dev__pytest-7205": "",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..994c326 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,7 +1,9 @@\n+\n import sys\n \n import pytest\n from _pytest.runner import runtestprotocol\n+from _pytest.pytester import Testdir\n from _pytest.skipping import evaluate_skip_marks\n from _pytest.skipping import evaluate_xfail_marks\n from _pytest.skipping import pytest_runtest_setup\n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..bf9137f 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -513,8 +513,12 @@ class TestCaptureFixture:\n             \"\"\"\n         )\n         reprec.assertoutcome(passed=1)\n-\n-    def test_capfdbinary(self, testdir):\n+    \n+    @pytest.mark.parametrize(\"nl\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_cafd_preserves_newlines(self, capfd, nl):\n+        print(\"test\", end=nl)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(nl)\n         reprec = testdir.inline_runsource(\n             \"\"\"\\\n             def test_hello(capfdbinary):\n",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..501b4e1 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import pytest\n@@ -50,7 +51,54 @@ def test_change_level_undo(testdir):\n     result.stdout.no_fnmatch_line(\"*log from test2*\")\n \n \n-def test_with_statement(caplog):\n+def test_change_level_undos_handler_level(testdir):\n+    \"\"\"Ensure that 'set_level' is undone after the end of the test (handler).\"\"\"\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test1(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(41)\n+            assert caplog.handler.level == 41\n+\n+        def test2(caplog):\n+            assert caplog.handler.level == 0\n+\n+        def test3(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(43)\n+            assert caplog.handler.level == 43\n+        \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=3)\n+\n+def test_change_level_reset_loggers(testdir):\n+    \"\"\"Ensure that 'set_level' is undone after the end of the test (logger levels).\"\"\"\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test1(caplog):\n+            logger = logging.getLogger('testlogger')\n+            assert logger.level == logging.NOTSET\n+            caplog.set_level(logging.INFO, 'testlogger')\n+            assert logger.level == logging.INFO\n+\n+        def test2(caplog):\n+            logger = logging.getLogger('testlogger')\n+            assert logger.level == logging.NOTSET\n+\n+        def test3(caplog):\n+            logger = logging.getLogger('testlogger')\n+            assert logger.level == logging.NOTSET\n+            caplog.set_level(logging.WARNING, 'testlogger')\n+            assert logger.level == logging.WARNING\n+        \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=3)\n     with caplog.at_level(logging.INFO):\n         logger.debug(\"handler DEBUG level\")\n         logger.info(\"handler INFO level\")\n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..023e89d 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,4 +1,38 @@\n+\n import os\n+def test_collect_symlink_dir(pytester: Pytester) -> None:\n+    \"\"\"A symlinked directory is collected.\"\"\"\n+    # Create a directory with a test file\n+    dir = pytester.mkdir(\"dir\")\n+    dir.joinpath(\"test_it.py\").write_text(\"def test_it(): pass\", \"utf-8\")\n+    # Create a symlink to the directory\n+    pytester.path.joinpath(\"symlink_dir\").symlink_to(dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+def test_symlink_nested_dir(pytester: Pytester) -> None:\n+    \"\"\"A symlinked nested directory is collected.\"\"\"\n+    # Create a nested directory structure\n+    root_dir = pytester.mkdir(\"root_dir\")\n+    nested_dir = root_dir / \"nested\"\n+    nested_dir.mkdir()\n+    nested_dir.joinpath(\"test_nested.py\").write_text(\"def test_nested(): pass\", \"utf-8\")\n+    # Create a symlink to the nested directory\n+    pytester.path.joinpath(\"symlink_nested\").symlink_to(nested_dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=1)\n+\n+@pytest.mark.skipif(sys.platform == \"win32\", reason=\"Symbolic links require admin privileges on Windows\")\n+def test_symlink_cross_platform(pytester: Pytester) -> None:\n+    \"\"\"Test symlink behavior across different platforms.\"\"\"\n+    # Create a directory with a test file\n+    dir = pytester.mkdir(\"platform_dir\")\n+    dir.joinpath(\"test_platform.py\").write_text(\"def test_platform(): pass\", \"utf-8\")\n+    # Create a symlink to the directory\n+    pytester.path.joinpath(\"symlink_platform\").symlink_to(dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n import pprint\n import sys\n import textwrap\n@@ -9,7 +43,9 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n-from _pytest.pytester import Testdir\n+from _pytest.pytester import Testdir, Pytester\n+import pytest\n+from pathlib import Path\n \n \n class TestCollector:\n",
  "pytest-dev__pytest-8399": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 2c720b0..1660db4 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -301,8 +301,30 @@ def test_setup_setUpClass(pytester: Pytester) -> None:\n     reprec = pytester.inline_run(testpath)\n     reprec.assertoutcome(passed=3)\n \n+def test_unittest_setUpClass_fixture_visibility(pytester: Pytester) -> None:\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+        class MyTestCase(unittest.TestCase):\n+            @classmethod\n+            def setUpClass(cls):\n+                pass\n+            def test_func1(self):\n+                pass\n+            @classmethod\n+            def tearDownClass(cls):\n+                pass\n+        \"\"\"\n+    )\n+    # Run pytest with --fixtures to check if the fixture is not visible\n+    result = pytester.runpytest(\"--fixtures\")\n+    assert result.ret == 0\n+    result.stdout.no_fnmatch_line(\"*unittest_setUpClass_fixture_MyTestCase*\")\n \n-def test_setup_class(pytester: Pytester) -> None:\n+    # Run pytest with --fixtures -v to check if the fixture is visible\n+    result = pytester.runpytest(\"--fixtures\", \"-v\")\n+    assert result.ret == 0\n+    result.stdout.fnmatch_lines([\"*unittest_setUpClass_fixture_MyTestCase*\"])\n     testpath = pytester.makepyfile(\n         \"\"\"\n         import unittest\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..644252d 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -573,8 +573,30 @@ def test_class_weights_cv():\n \n     assert_array_equal(reg.predict([[-.2, 2]]), np.array([-1]))\n \n+from sklearn.linear_model import RidgeClassifierCV\n+from numpy.testing import assert_array_equal\n \n-def test_ridgecv_store_cv_values():\n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    rng = np.random.RandomState(42)\n+\n+    n_samples = 8\n+    n_features = 5\n+    x = rng.randn(n_samples, n_features)\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    rc = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+    # with len(y.shape) == 1\n+    y = np.array([1, -1, 1, -1, 1, -1, 1, -1])\n+    rc.fit(x, y)\n+    assert rc.cv_values_.shape == (n_samples, n_alphas)\n+\n+    # with len(y.shape) == 2\n+    y = np.vstack([y, -y]).T\n+    rc.fit(x, y)\n+    assert rc.cv_values_.shape == (n_samples, 2, n_alphas)\n     # Test _RidgeCV's store_cv_values attribute.\n     rng = rng = np.random.RandomState(42)\n \n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..8f1a779 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -184,7 +184,19 @@ def test_int_overflow_mutual_info_score():\n     assert_all_finite(mutual_info_score(x.ravel(), y.ravel()))\n \n \n-def test_entropy():\n+from sklearn.metrics.cluster import fowlkes_mallows_score\n+from sklearn.utils._testing import assert_all_finite\n+import numpy as np\n+\n+def test_fowlkes_mallows_score_overflow():\n+    # Create two large arrays that would cause the overflow issue\n+    labels_true = np.array([0] * (2**16 + 1) + [1] * (2**16 + 1))\n+    labels_pred = np.array([1] * (2**16 + 1) + [0] * (2**16 + 1))\n+\n+    # The calculation should not result in RuntimeWarning or NaN\n+    score = fowlkes_mallows_score(labels_true, labels_pred)\n+    assert not np.isnan(score), \"Score should not be NaN\"\n+    assert_all_finite(score)\n     ent = entropy([0, 0, 42.])\n     assert_almost_equal(ent, 0.6365141, 5)\n     assert_almost_equal(entropy([]), 1)\n",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..60ce00e 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -538,8 +538,31 @@ def test_hashing_vectorizer():\n     for i in range(X.shape[0]):\n         assert_almost_equal(np.linalg.norm(X[0].data, 1), 1.0)\n \n+from sklearn.feature_extraction.text import CountVectorizer\n+from sklearn.utils._testing import assert_array_equal, assert_raises, assert_equal\n+\n+def test_countvectorizer_custom_vocabulary_no_fitting():\n+    # Custom vocabulary provided; the vectorizer should not raise NotFittedError\n+    vocab = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    \n+    cv = CountVectorizer(vocabulary=vocab)\n+    \n+    # Check that get_feature_names works without fitting\n+    feature_names = cv.get_feature_names()\n+    assert_array_equal(vocab, feature_names)\n+    \n+    # Check that transform works without fitting\n+    corpus = [\n+        'This is the first document.',\n+        'This is the second second document.',\n+        'And the third one.',\n+        'Is this the first document?',\n+    ]\n+    X = cv.transform(corpus)\n+    assert_equal(X.shape, (4, 9))\n \n-def test_feature_names():\n+    # Check that vocabulary_ is initialized after transform\n+    assert_equal(cv.vocabulary_, {word: i for i, word in enumerate(vocab)})\n     cv = CountVectorizer(max_df=0.5)\n \n     # test for Value error on unfitted/empty vocabulary\n",
  "scikit-learn__scikit-learn-11310": "diff --git a/sklearn/model_selection/tests/test_search.py b/sklearn/model_selection/tests/test_search.py\nindex 0b1d5f9..b254509 100644\n--- a/sklearn/model_selection/tests/test_search.py\n+++ b/sklearn/model_selection/tests/test_search.py\n@@ -1150,7 +1150,20 @@ def test_search_cv_results_none_param():\n \n \n @ignore_warnings()\n-def test_search_cv_timing():\n+def test_search_cv_refit_time():\n+    # Test if refit_time_ is present and non-negative\n+    svc = LinearSVC(random_state=0)\n+\n+    X, y = sklearn.datasets.load_iris(return_X_y=True)\n+\n+    gs = GridSearchCV(svc, {'C': [0.1, 1, 10]}, cv=2, error_score=0)\n+    rs = RandomizedSearchCV(svc, {'C': [0.1, 1, 10]}, cv=2, error_score=0, n_iter=2)\n+\n+    for search in (gs, rs):\n+        search.fit(X, y)\n+        assert_true(hasattr(search, \"refit_time_\"))\n+        assert_true(isinstance(search.refit_time_, float))\n+        assert_greater_equal(search.refit_time_, 0)\n     svc = LinearSVC(random_state=0)\n \n     X = [[1, ], [2, ], [3, ], [4, ]]\n",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..037f171 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -21,6 +21,11 @@ from sklearn.utils.testing import assert_true\n from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import ignore_warnings\n from sklearn.utils.testing import assert_warns_message\n+from sklearn.metrics import log_loss\n+from sklearn.preprocessing import LabelBinarizer\n+from sklearn.metrics.scorer import get_scorer\n+from sklearn.linear_model import _logistic\n+from numpy.testing import assert_almost_equal\n \n from sklearn.exceptions import ConvergenceWarning\n from sklearn.exceptions import ChangedBehaviorWarning\n@@ -492,7 +497,48 @@ def test_logistic_cv():\n     assert_array_equal(scores.shape, (1, 3, 1))\n \n \n-def test_multinomial_logistic_regression_string_inputs():\n+@pytest.mark.parametrize('scoring, multiclass_agg_list',\n+                         [('accuracy', ['']),\n+                          ('precision', ['_macro', '_weighted']),\n+                          ('f1', ['_macro', '_weighted']),\n+                          ('neg_log_loss', ['']),\n+                          ('recall', ['_macro', '_weighted'])])\n+def test_logistic_cv_multinomial_score(scoring, multiclass_agg_list):\n+    # test that LogisticRegressionCV uses the right score to compute its\n+    # cross-validation scores when using a multinomial scoring\n+    X, y = make_classification(n_samples=100, random_state=0, n_classes=3,\n+                               n_informative=6)\n+    train, test = np.arange(80), np.arange(80, 100)\n+    lr = LogisticRegression(C=1., solver='lbfgs', multi_class='multinomial')\n+    params = lr.get_params()\n+    for key in ['C', 'n_jobs', 'warm_start']:\n+        del params[key]\n+    lr.fit(X[train], y[train])\n+    for averaging in multiclass_agg_list:\n+        scorer = get_scorer(scoring + averaging)\n+        assert_array_almost_equal(\n+            _logistic._log_reg_scoring_path(X, y, train, test, Cs=[1.],\n+                                            scoring=scorer, **params)[2][0],\n+            scorer(lr, X[test], y[test]))\n+\n+def test_logistic_cv_multinomial_predict_proba():\n+    # Test the probabilities predicted by LogisticRegressionCV with multi_class='multinomial'\n+    # Ensures it uses the softmax function.\n+    X, y = make_classification(n_samples=100, random_state=0, n_classes=3, n_informative=6)\n+    lr_cv = LogisticRegressionCV(multi_class='multinomial', solver='lbfgs', cv=3)\n+    lr_cv.fit(X, y)\n+    proba = lr_cv.predict_proba(X)\n+    # Check if probabilities sum to 1\n+    assert_almost_equal(proba.sum(axis=1), np.ones(proba.shape[0]))\n+\n+    # Binary label binarizer\n+    lb = LabelBinarizer()\n+    lb.fit(y)\n+    y_bin = lb.transform(y)\n+\n+    # Check if neg_log_loss is correctly calculated using softmax\n+    score = log_loss(y_bin, proba)\n+    assert_almost_equal(score, lr_cv.scores_[1].mean(axis=0)[0])\n     # Test with string labels for LogisticRegression(CV)\n     n_samples, n_features, n_classes = 50, 5, 3\n     X_ref, y = make_classification(n_samples=n_samples, n_features=n_features,\n",
  "scikit-learn__scikit-learn-12585": "",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..62d2e3a 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -5,6 +5,24 @@ from distutils.version import LooseVersion\n import numpy as np\n from scipy import linalg\n \n+@pytest.mark.parametrize('init_copy_X, fit_copy_X', [(True, None), (False, None), (True, True), (False, True), (True, False), (False, False)])\n+def test_lasso_lars_ic_copyX_combined_behaviour(init_copy_X, fit_copy_X):\n+    \"\"\"Test that LassoLarsIC respects the copy_X parameter from init and fit methods appropriately.\"\"\"\n+    lasso_lars = LassoLarsIC(copy_X=init_copy_X, precompute=False)\n+    rng = np.random.RandomState(0)\n+    X = rng.normal(0, 1, (100, 5))\n+    X_copy = X.copy()\n+    y = X[:, 2]\n+    \n+    if fit_copy_X is None:\n+        lasso_lars.fit(X, y)\n+        expected = init_copy_X\n+    else:\n+        lasso_lars.fit(X, y, copy_X=fit_copy_X)\n+        expected = fit_copy_X\n+    \n+    assert expected == np.array_equal(X, X_copy)\n+\n import pytest\n \n from sklearn.model_selection import train_test_split\n@@ -18,7 +36,8 @@ from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import TempMemmap\n from sklearn.exceptions import ConvergenceWarning\n from sklearn import linear_model, datasets\n-from sklearn.linear_model.least_angle import _lars_path_residues\n+from sklearn.linear_model.least_angle import _lars_path_residues, LassoLarsIC\n+import numpy as np\n \n diabetes = datasets.load_diabetes()\n X, y = diabetes.data, diabetes.target\n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..db5de49 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -493,6 +493,33 @@ def test_shuffle_stratifiedkfold():\n         assert_not_equal(set(test0), set(test1))\n     check_cv_coverage(kf0, X_40, y, groups=None, expected_n_splits=5)\n \n+    # Additional Test: Check if shuffling results in different test sets for different random states\n+    X = np.arange(20)\n+    y = [0] * 10 + [1] * 10  # 10 samples per class\n+    skf1 = StratifiedKFold(10, shuffle=True, random_state=42)\n+    skf2 = StratifiedKFold(10, shuffle=True, random_state=43)\n+    test_sets1 = [test for _, test in skf1.split(X, y)]\n+    test_sets2 = [test for _, test in skf2.split(X, y)]\n+    assert test_sets1 != test_sets2, \"Test sets should differ with different random states\"\n+\n+    # Additional Test: Ensure that shuffling happens within each class\n+    skf_shuffle = StratifiedKFold(10, shuffle=True, random_state=42)\n+    test_sets_shuffle = [test for _, test in skf_shuffle.split(X, y)]\n+    for i in range(10):  # Check each fold\n+        fold_indices = test_sets_shuffle[i]\n+        class_0_indices = [index for index in fold_indices if y[index] == 0]\n+        class_1_indices = [index for index in fold_indices if y[index] == 1]\n+        # Ensure that the fold contains shuffled indices within each class\n+        assert len(set(class_0_indices)) == len(class_0_indices), \"Class 0 indices should be unique in each fold\"\n+        assert len(set(class_1_indices)) == len(class_1_indices), \"Class 1 indices should be unique in each fold\"\n+\n+    # Additional Test: Check same random state results in identical splits\n+    skf_same1 = StratifiedKFold(10, shuffle=True, random_state=42)\n+    skf_same2 = StratifiedKFold(10, shuffle=True, random_state=42)\n+    test_sets_same1 = [test for _, test in skf_same1.split(X, y)]\n+    test_sets_same2 = [test for _, test in skf_same2.split(X, y)]\n+    assert test_sets_same1 == test_sets_same2, \"Test sets should be identical for the same random state\"\n+\n \n def test_kfold_can_detect_dependent_samples_on_digits():  # see #2372\n     # The digits samples are dependent: they are apparently grouped by authors\n",
  "scikit-learn__scikit-learn-13135": "diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py\nindex a18a1c5..3c614c2 100644\n--- a/sklearn/preprocessing/tests/test_discretization.py\n+++ b/sklearn/preprocessing/tests/test_discretization.py\n@@ -203,6 +203,27 @@ def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n     assert_array_equal(expected_3bins, Xt.ravel())\n \n \n+@pytest.mark.parametrize(\n+    'strategy, expected_2bins, expected_3bins, expected_5bins',\n+    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2], [0, 0, 1, 1, 4, 4]),\n+     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2], [0, 0, 1, 2, 3, 4]),\n+     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2], [0, 1, 2, 3, 4, 4])])\n+def test_nonuniform_strategies_extended(strategy, expected_2bins, expected_3bins, expected_5bins):\n+    X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n+\n+    # with 5 bins\n+    est = KBinsDiscretizer(n_bins=5, strategy=strategy, encode='ordinal')\n+    Xt = est.fit_transform(X)\n+    assert_array_equal(expected_5bins, Xt.ravel())\n+\n+def test_kmeans_sorted_bins():\n+    # Test for issue where kmeans strategy results in unsorted bin edges\n+    X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n+    est = KBinsDiscretizer(n_bins=5, strategy='kmeans', encode='ordinal')\n+    est.fit(X)\n+    for bin_edges in est.bin_edges_:\n+        assert np.all(np.diff(bin_edges) >= 0), \"Bin edges are not sorted\"\n+\n @pytest.mark.parametrize('strategy', ['uniform', 'kmeans', 'quantile'])\n @pytest.mark.parametrize('encode', ['ordinal', 'onehot', 'onehot-dense'])\n def test_inverse_transform(strategy, encode):\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..9a81aa6 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -598,6 +598,15 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n \n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n+\n+\n def test_gaussian_mixture_fit():\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..3359a65 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,8 +1,70 @@\n+\n \"\"\"\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n+\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n \n # Authors: Nicolas Goix <nicolas.goix@telecom-paristech.fr>\n+\n+def test_iforest_warm_start():\n+    \"\"\"Test iterative addition of iTrees to an iForest \"\"\"\n+    \n+    rng = check_random_state(0)\n+    X = rng.randn(20, 2)\n+    \n+    # fit first 10 trees\n+    clf = IsolationForest(n_estimators=10, max_samples=20,\n+                          random_state=rng, warm_start=True)\n+    clf.fit(X)\n+    # remember the 1st tree\n+    tree_1 = clf.estimators_[0]\n+    # fit another 10 trees\n+    clf.set_params(n_estimators=20)\n+    clf.fit(X)\n+    # expecting 20 fitted trees and no overwritten trees\n+    assert len(clf.estimators_) == 20\n+    assert clf.estimators_[0] is tree_1\n+\n+def test_iforest_warm_start_incremental():\n+    \"\"\"Test incremental fitting with warm_start and new data\"\"\"\n+    \n+    rng = check_random_state(1)\n+    X1 = rng.randn(20, 2)\n+    X2 = rng.randn(20, 2)\n+    \n+    # fit first 10 trees on X1\n+    clf = IsolationForest(n_estimators=10, max_samples=20,\n+                          random_state=rng, warm_start=True)\n+    clf.fit(X1)\n+    # remember the 1st tree\n+    tree_1 = clf.estimators_[0]\n+    # fit another 10 trees on X2\n+    clf.set_params(n_estimators=20)\n+    clf.fit(X2)\n+    # expecting 20 fitted trees and no overwritten trees\n+    assert len(clf.estimators_) == 20\n+    assert clf.estimators_[0] is tree_1\n+\n+def test_iforest_no_warm_start():\n+    \"\"\"Test Isolation Forest without warm_start\"\"\"\n+    \n+    rng = check_random_state(2)\n+    X = rng.randn(20, 2)\n+    \n+    # fit first 10 trees\n+    clf = IsolationForest(n_estimators=10, max_samples=20,\n+                          random_state=rng, warm_start=False)\n+    clf.fit(X)\n+    # remember the first set of trees\n+    first_trees = clf.estimators_.copy()\n+    # fit another 10 trees\n+    clf.set_params(n_estimators=20)\n+    clf.fit(X)\n+    # expecting 20 new fitted trees, not extending the previous ones\n+    assert len(clf.estimators_) == 20\n+    assert clf.estimators_[:10] != first_trees\n #          Alexandre Gramfort <alexandre.gramfort@telecom-paristech.fr>\n # License: BSD 3 clause\n \n",
  "scikit-learn__scikit-learn-13779": "",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..0d6ef51 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -396,8 +396,26 @@ def test_export_text():\n     assert export_text(reg, decimals=1) == expected_report\n     assert export_text(reg, decimals=1, show_weights=True) == expected_report\n \n+def test_export_text_single_feature():\n+    # Test export_text with a tree having a single feature\n+    X, y = load_iris(return_X_y=True)\n+    X = X[:, 0].reshape(-1, 1)  # Use only one feature\n \n-def test_plot_tree_entropy(pyplot):\n+    tree = DecisionTreeClassifier()\n+    tree.fit(X, y)\n+\n+    # Generate the expected report\n+    expected_report = dedent(\"\"\"\n+    |--- sepal_length <= 5.45\n+    |   |--- class: 1\n+    |--- sepal_length >  5.45\n+    |   |--- class: 2\n+    \"\"\").strip()\n+\n+    # Verify that export_text produces the correct output\n+    tree_text = export_text(tree, feature_names=['sepal_length'])\n+    assert tree_text.startswith(\"|---\")  # Ensure it doesn't raise an IndexError\n+    # Note: We can't assert the full report due to potential variations in decision thresholds.\n     # mostly smoke tests\n     # Check correctness of export_graphviz for criterion = entropy\n     clf = DecisionTreeClassifier(max_depth=3,\n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..f8f5b9b 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1532,25 +1532,31 @@ def test_LogisticRegressionCV_GridSearchCV_elastic_net_ovr():\n     assert (lrcv.predict(X_test) == gs.predict(X_test)).mean() >= .8\n \n \n-@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial'))\n-def test_LogisticRegressionCV_no_refit(multi_class):\n-    # Test LogisticRegressionCV attribute shapes when refit is False\n+@pytest.mark.parametrize('penalty', ('l2', 'elasticnet'))\n+@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial', 'auto'))\n+def test_LogisticRegressionCV_no_refit(penalty, multi_class):\n+    # Added test to ensure no IndexError with refit=False\n \n+    n_samples = 100\n+    n_features = 10\n     n_classes = 3\n-    n_features = 20\n-    X, y = make_classification(n_samples=200, n_classes=n_classes,\n+    X, y = make_classification(n_samples=n_samples, n_classes=n_classes,\n                                n_informative=n_classes, n_features=n_features,\n                                random_state=0)\n \n     Cs = np.logspace(-4, 4, 3)\n-    l1_ratios = np.linspace(0, 1, 2)\n+    if penalty == 'elasticnet':\n+        l1_ratios = np.linspace(0, 1, 2)\n+    else:\n+        l1_ratios = None\n \n-    lrcv = LogisticRegressionCV(penalty='elasticnet', Cs=Cs, solver='saga',\n+    lrcv = LogisticRegressionCV(penalty=penalty, Cs=Cs, solver='saga',\n                                 l1_ratios=l1_ratios, random_state=0,\n                                 multi_class=multi_class, refit=False)\n     lrcv.fit(X, y)\n     assert lrcv.C_.shape == (n_classes,)\n-    assert lrcv.l1_ratio_.shape == (n_classes,)\n+    if penalty == 'elasticnet':\n+        assert lrcv.l1_ratio_.shape == (n_classes,)\n     assert lrcv.coef_.shape == (n_classes, n_features)\n \n \n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/tests/test_show_versions.py b/sklearn/utils/tests/test_show_versions.py\nindex fa39255..3f24458 100644\n--- a/sklearn/utils/tests/test_show_versions.py\n+++ b/sklearn/utils/tests/test_show_versions.py\n@@ -12,6 +12,9 @@ def test_get_sys_info():\n     assert 'machine' in sys_info\n \n \n+import pytest\n+from sklearn.utils._show_versions import _get_deps_info, show_versions\n+\n def test_get_deps_info():\n     deps_info = _get_deps_info()\n \n@@ -23,6 +26,17 @@ def test_get_deps_info():\n     assert 'Cython' in deps_info\n     assert 'pandas' in deps_info\n     assert 'matplotlib' in deps_info\n+    assert 'joblib' in deps_info  # Verify joblib is in the dependencies\n+    deps_info = _get_deps_info()\n+\n+    assert 'pip' in deps_info\n+    assert 'setuptools' in deps_info\n+    assert 'sklearn' in deps_info\n+    assert 'numpy' in deps_info\n+    assert 'scipy' in deps_info\n+    assert 'Cython' in deps_info\n+    assert 'pandas' in deps_info\n+    assert 'matplotlib' in deps_info\n \n \n def test_show_versions_with_blas(capsys):\n@@ -30,4 +44,14 @@ def test_show_versions_with_blas(capsys):\n     out, err = capsys.readouterr()\n     assert 'python' in out\n     assert 'numpy' in out\n-    assert 'BLAS' in out\n+    assert 'BLAS' in out\n+\n+def test_show_versions_includes_joblib(capsys):\n+    show_versions()\n+    out, err = capsys.readouterr()\n+    assert 'joblib' in out  # Verify joblib is in the output\n+    show_versions()\n+    out, err = capsys.readouterr()\n+    assert 'python' in out\n+    assert 'numpy' in out\n+    assert 'BLAS' in out\n",
  "scikit-learn__scikit-learn-14496": "diff --git a/sklearn/cluster/tests/test_optics.py b/sklearn/cluster/tests/test_optics.py\nindex 6c9dac3..acdafb4 100644\n--- a/sklearn/cluster/tests/test_optics.py\n+++ b/sklearn/cluster/tests/test_optics.py\n@@ -77,8 +77,33 @@ def test_the_extract_xi_labels(ordering, clusters, expected):\n \n     assert_array_equal(labels, expected)\n \n+from sklearn.cluster import OPTICS\n+import numpy as np\n+from sklearn.utils import shuffle\n+from sklearn.utils._testing import assert_array_equal\n+\n+def test_optics_float_min_samples():\n+    # Test using `min_samples` as a float\n+    rng = np.random.RandomState(42)\n+    n_points_per_cluster = 5\n+\n+    C1 = [-5, -2] + .8 * rng.randn(n_points_per_cluster, 2)\n+    C2 = [4, -1] + .1 * rng.randn(n_points_per_cluster, 2)\n+    C3 = [1, -2] + .2 * rng.randn(n_points_per_cluster, 2)\n+    C4 = [-2, 3] + .3 * rng.randn(n_points_per_cluster, 2)\n+    C5 = [3, -2] + .6 * rng.randn(n_points_per_cluster, 2)\n+    C6 = [5, 6] + .2 * rng.randn(n_points_per_cluster, 2)\n+\n+    X = np.vstack((C1, C2, C3, C4, C5, C6))\n+    expected_labels = np.r_[[0] * 5, [1] * 5, [2] * 5, [3] * 5, [2] * 5, [4] * 5]\n+    X, expected_labels = shuffle(X, expected_labels, random_state=rng)\n \n-def test_extract_xi():\n+    clust = OPTICS(min_samples=0.1, min_cluster_size=0.08,\n+                   max_eps=20, cluster_method='xi',\n+                   xi=0.4).fit(X)\n+                   \n+    # Check if the labels match the expected labels\n+    assert_array_equal(clust.labels_, expected_labels)\n     # small and easy test (no clusters around other clusters)\n     # but with a clear noise data.\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-14710": "",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..1011f89 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,7 +680,24 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n-def test_sparse_precomputed():\n+from sklearn import svm\n+from scipy import sparse\n+import numpy as np\n+\n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for the fixed issue\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear', C=316.227766017, max_iter=15000, tol=0.001)\n+    model.fit(X_train, y_train)\n+    \n+    # Assertions to check that support vectors are empty and no errors occur\n+    assert model.support_.size == 0, \"Expected no support vectors.\"\n+    assert model.support_vectors_.shape[0] == 0, \"Expected support_vectors_ to be empty.\"\n+    assert model.dual_coef_.shape[1] == 0, \"Expected dual_coef_ to have zero columns.\"\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n     try:\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..2d83a33 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -97,6 +97,40 @@ def test_strip_accents():\n     expected = 'this is a test'\n     assert strip_accents_unicode(a) == expected\n \n+def test_strip_accents():\n+    # check some classical latin accentuated symbols\n+    a = '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb'\n+    expected = 'aaaaaaceeee'\n+    assert strip_accents_unicode(a) == expected\n+\n+    a = '\u00ec\u00ed\u00ee\u00ef\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f9\u00fa\u00fb\u00fc\u00fd'\n+    expected = 'iiiinooooouuuuy'\n+    assert strip_accents_unicode(a) == expected\n+\n+    # check some arabic\n+    a = '\\u0625'  # alef with a hamza below: \u0625\n+    expected = '\\u0627'  # simple alef: \u0627\n+    assert strip_accents_unicode(a) == expected\n+\n+    # mix letters accentuated and not\n+    a = \"this is \u00e0 test\"\n+    expected = 'this is a test'\n+    assert strip_accents_unicode(a) == expected\n+\n+    # strings that are already decomposed (NFKD form)\n+    a = \"n\\u0303\"  # n with combining tilde\n+    expected = \"n\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # multiple combining characters\n+    a = \"o\\u0308\\u0304\"  # o with diaeresis and macron\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # combining marks by themselves\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"  # combining grave, acute, circumflex, tilde\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n \n def test_to_ascii():\n     # check some classical latin accentuated symbols\n",
  "scikit-learn__scikit-learn-25102": "",
  "scikit-learn__scikit-learn-25232": "",
  "scikit-learn__scikit-learn-25931": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3714d1a..8192a03 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -330,12 +330,39 @@ def test_iforest_with_n_jobs_does_not_segfault():\n def test_base_estimator_property_deprecated():\n     X = np.array([[1, 2], [3, 4]])\n     y = np.array([1, 0])\n-    model = IsolationForest()\n-    model.fit(X, y)\n+import pytest\n+import numpy as np\n+import pandas as pd\n+from sklearn.ensemble import IsolationForest\n+import warnings\n+\n+def test_iforest_preserve_feature_names():\n+    \"\"\"Check that feature names are preserved when contamination is not \"auto\".\n+\n+    Feature names are required for consistency checks during scoring.\n+\n+    Non-regression test for Issue #25844\n+    \"\"\"\n+    rng = np.random.RandomState(0)\n+\n+    X = pd.DataFrame(data=rng.randn(4, 1), columns=[\"a\"])\n+    model = IsolationForest(random_state=0, contamination=0.05)\n+\n+    with warnings.catch_warnings():\n+        warnings.simplefilter(\"error\", UserWarning)\n+        model.fit(X)\n+        \n+    # Additional assertions to verify that no warnings are raised\n+    assert hasattr(model, \"estimators_\"), \"Model should have been fitted with estimators\"\n+    assert model.offset_ is not None, \"Offset should be set when contamination is not 'auto'\"\n+\n+    # Test prediction to ensure consistency\n+    predictions = model.predict(X)\n+    assert len(predictions) == len(X), \"Number of predictions should match the number of input samples\"\n \n     warn_msg = (\n         \"Attribute `base_estimator_` was deprecated in version 1.2 and \"\n         \"will be removed in 1.4. Use `estimator_` instead.\"\n     )\n     with pytest.warns(FutureWarning, match=warn_msg):\n-        model.base_estimator_\n+        model.base_estimator_\n",
  "scikit-learn__scikit-learn-25973": "diff --git a/sklearn/feature_selection/tests/test_sequential.py b/sklearn/feature_selection/tests/test_sequential.py\nindex 42e1fbb..f3240fd 100644\n--- a/sklearn/feature_selection/tests/test_sequential.py\n+++ b/sklearn/feature_selection/tests/test_sequential.py\n@@ -313,4 +313,26 @@ def test_backward_neg_tol():\n     new_score = lr.fit(Xr, y).score(Xr, y)\n \n     assert 0 < sfs.get_support().sum() < X.shape[1]\n-    assert new_score < initial_score\n+    assert new_score < initial_score\n+\n+\n+def test_sequential_feature_selector_with_iterable_splits():\n+    \"\"\"Test SequentialFeatureSelector with an iterable of splits.\"\"\"\n+    from sklearn.datasets import make_classification\n+    from sklearn.neighbors import KNeighborsClassifier\n+    from sklearn.model_selection import LeaveOneGroupOut\n+    from sklearn.feature_selection import SequentialFeatureSelector\n+    import numpy as np\n+\n+    X, y = make_classification(random_state=0)\n+\n+    groups = np.zeros_like(y, dtype=int)\n+    groups[y.size // 2 :] = 1\n+\n+    cv = LeaveOneGroupOut()\n+    splits = cv.split(X, y, groups=groups)\n+\n+    knc = KNeighborsClassifier(n_neighbors=5)\n+\n+    sfs = SequentialFeatureSelector(knc, n_features_to_select=5, cv=splits)\n+    sfs.fit(X, y)\n",
  "scikit-learn__scikit-learn-26323": "",
  "scikit-learn__scikit-learn-9288": "diff --git a/sklearn/cluster/tests/test_k_means.py b/sklearn/cluster/tests/test_k_means.py\nindex abeeff0..cfda22b 100644\n--- a/sklearn/cluster/tests/test_k_means.py\n+++ b/sklearn/cluster/tests/test_k_means.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for K-means\"\"\"\n import sys\n \n@@ -944,6 +945,26 @@ def test_k_means_empty_cluster_relocated():\n     assert len(set(km.labels_)) == 2\n     assert_allclose(km.cluster_centers_, [[-1], [1]])\n \n+def test_result_of_kmeans_equal_in_diff_n_jobs():\n+    # PR 9288\n+    rnd = np.random.RandomState(0)\n+    X = rnd.normal(size=(50, 10))\n+\n+    # Check labels are equal\n+    result_1 = KMeans(n_clusters=3, random_state=0, n_jobs=1).fit(X).labels_\n+    result_2 = KMeans(n_clusters=3, random_state=0, n_jobs=2).fit(X).labels_\n+    assert_array_equal(result_1, result_2)\n+\n+    # Check inertia is equal\n+    inertia_1 = KMeans(n_clusters=3, random_state=0, n_jobs=1).fit(X).inertia_\n+    inertia_2 = KMeans(n_clusters=3, random_state=0, n_jobs=2).fit(X).inertia_\n+    assert_almost_equal(inertia_1, inertia_2)\n+\n+    # Check across a range of n_jobs\n+    for n_jobs in [1, 2, 3, 4]:\n+        kmeans = KMeans(n_clusters=3, random_state=0, n_jobs=n_jobs)\n+        kmeans.fit(X)\n+        assert_almost_equal(inertia_1, kmeans.inertia_)\n \n def test_minibatch_kmeans_partial_fit_int_data():\n     # Issue GH #14314\n",
  "sphinx-doc__sphinx-10323": "",
  "sphinx-doc__sphinx-10449": "",
  "sphinx-doc__sphinx-10466": "diff --git a/tests/test_build_gettext.py b/tests/test_build_gettext.py\nindex a6fc946..ad8b103 100644\n--- a/tests/test_build_gettext.py\n+++ b/tests/test_build_gettext.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the build process with gettext builder with the test root.\"\"\"\n \n import gettext\n@@ -9,6 +10,7 @@ from subprocess import PIPE, CalledProcessError\n import pytest\n \n from sphinx.util.osutil import cd\n+from sphinx.builders.gettext import Catalog, MsgOrigin\n \n \n @pytest.mark.sphinx('gettext', srcdir='root-gettext')\n",
  "sphinx-doc__sphinx-10673": "diff --git a/tests/test_environment_toctree.py b/tests/test_environment_toctree.py\nindex d3bf6a2..0d681b9 100644\n--- a/tests/test_environment_toctree.py\n+++ b/tests/test_environment_toctree.py\n@@ -336,13 +336,41 @@ def test_get_toctree_for_includehidden(app):\n                 ([list_item, compact_paragraph, reference, \"quux\"],\n                  [list_item, compact_paragraph, reference, \"foo.1\"],\n                  [list_item, compact_paragraph, reference, \"foo.2\"]))\n+import pytest\n+from sphinx.testing.util import SphinxTestApp\n+from sphinx import addnodes\n+from sphinx.testing.util import assert_node\n \n+@pytest.mark.sphinx('html', testroot='toctree-index')\n+def test_toctree_with_indices(app: SphinxTestApp):\n+    app.build()\n+    toctree = app.env.tocs['index']\n+    assert_node(toctree,\n+                [addnodes.toctree, \n+                 ('genindex', 'modindex', 'search')],\n+                caption=\"Indices and tables\",\n+                glob=False, hidden=False,\n+                titlesonly=False, maxdepth=-1, numbered=0)\n     assert_node(toctree[1][0][0][0], reference, refuri=\"foo\", secnumber=[1])\n     assert_node(toctree[1][0][1][0][0][0], reference, refuri=\"quux\", secnumber=[1, 1])\n     assert_node(toctree[1][0][1][1][0][0], reference, refuri=\"foo#foo-1\", secnumber=[1, 2])\n     assert_node(toctree[1][0][1][2][0][0], reference, refuri=\"foo#foo-2\", secnumber=[1, 3])\n     assert_node(toctree[1][1][0][0], reference, refuri=\"bar\", secnumber=[2])\n     assert_node(toctree[1][2][0][0], reference, refuri=\"http://sphinx-doc.org/\")\n+import pytest\n+from sphinx.testing.util import SphinxTestApp\n+from sphinx import addnodes\n+from sphinx.testing.util import assert_node\n \n+@pytest.mark.sphinx('html', testroot='toctree-index')\n+def test_toctree_with_indices(app: SphinxTestApp):\n+    app.build()\n+    toctree = app.env.tocs['index']\n+    assert_node(toctree,\n+                [addnodes.toctree, \n+                 ('genindex', 'modindex', 'search')],\n+                caption=\"Indices and tables\",\n+                glob=False, hidden=False,\n+                titlesonly=False, maxdepth=-1, numbered=0)\n     assert_node(toctree[2],\n-                [bullet_list, list_item, compact_paragraph, reference, \"baz\"])\n+                [bullet_list, list_item, compact_paragraph, reference, \"baz\"])\n",
  "sphinx-doc__sphinx-7440": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 975a00f..638c014 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -147,6 +147,39 @@ def test_glossary(app):\n     assert (\"term3\", \"term3\", \"term\", \"index\", \"term-term3\", -1) in objects\n     assert (\"term4\", \"term4\", \"term\", \"index\", \"term-term4\", -1) in objects\n \n+def test_glossary_case_sensitivity(app):\n+    text = (\".. glossary::\\n\"\n+            \"\\n\"\n+            \"   MySQL\\n\"\n+            \"       description for MySQL\\n\"\n+            \"\\n\"\n+            \"   mysql\\n\"\n+            \"       description for mysql\\n\")\n+\n+    # doctree\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (\n+        [glossary, definition_list, ([definition_list_item, ([term, (\"MySQL\",\n+                                                                     index)],\n+                                                             definition)],\n+                                     [definition_list_item, ([term, (\"mysql\",\n+                                                                     index)],\n+                                                             definition)])],\n+    ))\n+    assert_node(doctree[0][0][0][0][1],\n+                entries=[(\"single\", \"MySQL\", \"term-MySQL\", \"main\", None)])\n+    assert_node(doctree[0][0][0][1][1],\n+                entries=[(\"single\", \"mysql\", \"term-mysql\", \"main\", None)])\n+    assert_node(doctree[0][0][0][0][2],\n+                [definition, nodes.paragraph, \"description for MySQL\"])\n+    assert_node(doctree[0][0][1][0][2],\n+                [definition, nodes.paragraph, \"description for mysql\"])\n+\n+    # index\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert (\"MySQL\", \"MySQL\", \"term\", \"index\", \"term-MySQL\", -1) in objects\n+    assert (\"mysql\", \"mysql\", \"term\", \"index\", \"term-mysql\", -1) in objects\n+\n \n def test_glossary_warning(app, status, warning):\n     # empty line between terms\n",
  "sphinx-doc__sphinx-7757": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex b3053d1..edebeff 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -331,6 +331,23 @@ def test_signature_from_str_kwonly_args():\n     assert sig.parameters['b'].kind == Parameter.KEYWORD_ONLY\n     assert sig.parameters['b'].default == Parameter.empty\n \n+@pytest.mark.skipif(sys.version_info < (3, 8),\n+                    reason='python-3.8 or above is required')\n+def test_signature_with_positional_only_and_defaults():\n+    sig = inspect.signature_from_str('(a, b=0, /, c=1)')\n+    assert list(sig.parameters.keys()) == ['a', 'b', 'c']\n+    assert sig.parameters['a'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['a'].default == Parameter.empty\n+    assert sig.parameters['b'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['b'].default == '0'\n+    assert sig.parameters['c'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['c'].default == '1'\n+    assert list(sig.parameters.keys()) == ['a', 'b']\n+    assert sig.parameters['a'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['a'].default == Parameter.empty\n+    assert sig.parameters['b'].kind == Parameter.KEYWORD_ONLY\n+    assert sig.parameters['b'].default == Parameter.empty\n+\n \n @pytest.mark.skipif(sys.version_info < (3, 8),\n                     reason='python-3.8 or above is required')\n",
  "sphinx-doc__sphinx-7889": "",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_napoleon.py b/tests/test_ext_napoleon.py\nindex 0676869..d2bfcba 100644\n--- a/tests/test_ext_napoleon.py\n+++ b/tests/test_ext_napoleon.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_napoleon\n     ~~~~~~~~~~~~~\n@@ -14,6 +15,7 @@ from collections import namedtuple\n from unittest import TestCase, mock\n \n from sphinx.application import Sphinx\n+from sphinx.testing.util import simple_decorator\n from sphinx.ext.napoleon import _process_docstring, _skip_member, Config, setup\n \n \n@@ -165,11 +167,33 @@ class SkipMemberTest(TestCase):\n                         SampleClass.__special_doc__, False,\n                         'napoleon_include_special_with_doc')\n \n+    def test_decorated_init_with_doc(self):\n+        class SampleClassWithDecoratedInit:\n+            @simple_decorator\n+            def __init__(self):\n+                \"\"\"SampleClassWithDecoratedInit.__init__.DOCSTRING\"\"\"\n+                pass\n+\n+        self.assertSkip('class', '__init__',\n+                        SampleClassWithDecoratedInit.__init__, False,\n+                        'napoleon_include_init_with_doc')\n+\n     def test_class_special_undoc(self):\n         self.assertSkip('class', '__special_undoc__',\n                         SampleClass.__special_undoc__, True,\n                         'napoleon_include_special_with_doc')\n \n+    def test_decorated_init_with_doc(self):\n+        class SampleClassWithDecoratedInit:\n+            @simple_decorator\n+            def __init__(self):\n+                \"\"\"SampleClassWithDecoratedInit.__init__.DOCSTRING\"\"\"\n+                pass\n+\n+        self.assertSkip('class', '__init__',\n+                        SampleClassWithDecoratedInit.__init__, False,\n+                        'napoleon_include_init_with_doc')\n+\n     def test_exception_private_doc(self):\n         self.assertSkip('exception', '_private_doc',\n                         SampleError._private_doc, False,\n@@ -185,6 +209,17 @@ class SkipMemberTest(TestCase):\n                         SampleError.__special_doc__, False,\n                         'napoleon_include_special_with_doc')\n \n+    def test_decorated_init_with_doc(self):\n+        class SampleClassWithDecoratedInit:\n+            @simple_decorator\n+            def __init__(self):\n+                \"\"\"SampleClassWithDecoratedInit.__init__.DOCSTRING\"\"\"\n+                pass\n+\n+        self.assertSkip('class', '__init__',\n+                        SampleClassWithDecoratedInit.__init__, False,\n+                        'napoleon_include_init_with_doc')\n+\n     def test_exception_special_undoc(self):\n         self.assertSkip('exception', '__special_undoc__',\n                         SampleError.__special_undoc__, True,\n",
  "sphinx-doc__sphinx-7985": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 5b1b2ed..4102d8e 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -13,8 +13,37 @@ import re\n from unittest import mock\n import pytest\n \n-\n @pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n+def test_local_links(app, status, warning):\n+    app.builder.build_all()\n+\n+    assert (app.outdir / 'output.txt').exists()\n+    content = (app.outdir / 'output.txt').read_text()\n+\n+    # Check for valid local file\n+    assert \"ok        conf.py\" in content\n+\n+    # Check for invalid local file\n+    assert \"broken    path/to/notfound\" in content\n+    \n+    # Ensure the total number of lines in output matches expectation\n+    assert len(content.splitlines()) == 7\n+\n+    # Additional check in JSON output\n+    assert (app.outdir / 'output.json').exists()\n+    content_json = (app.outdir / 'output.json').read_text()\n+    rows = [json.loads(x) for x in content_json.splitlines()]\n+    \n+    # Verify the JSON entry for the invalid local link\n+    rowsby = {row[\"uri\"]: row for row in rows}\n+    assert rowsby[\"path/to/notfound\"] == {\n+        'filename': 'index.rst',\n+        'lineno': 3,\n+        'status': 'broken',\n+        'code': 0,\n+        'uri': 'path/to/notfound',\n+        'info': ''\n+    }\n def test_defaults(app, status, warning):\n     app.builder.build_all()\n \n@@ -32,8 +61,37 @@ def test_defaults(app, status, warning):\n     assert \"Not Found for url: https://www.google.com/image2.png\" in content\n     assert len(content.splitlines()) == 5\n \n-\n @pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n+def test_local_links(app, status, warning):\n+    app.builder.build_all()\n+\n+    assert (app.outdir / 'output.txt').exists()\n+    content = (app.outdir / 'output.txt').read_text()\n+\n+    # Check for valid local file\n+    assert \"ok        conf.py\" in content\n+\n+    # Check for invalid local file\n+    assert \"broken    path/to/notfound\" in content\n+    \n+    # Ensure the total number of lines in output matches expectation\n+    assert len(content.splitlines()) == 7\n+\n+    # Additional check in JSON output\n+    assert (app.outdir / 'output.json').exists()\n+    content_json = (app.outdir / 'output.json').read_text()\n+    rows = [json.loads(x) for x in content_json.splitlines()]\n+    \n+    # Verify the JSON entry for the invalid local link\n+    rowsby = {row[\"uri\"]: row for row in rows}\n+    assert rowsby[\"path/to/notfound\"] == {\n+        'filename': 'index.rst',\n+        'lineno': 3,\n+        'status': 'broken',\n+        'code': 0,\n+        'uri': 'path/to/notfound',\n+        'info': ''\n+    }\n def test_defaults_json(app, status, warning):\n     app.builder.build_all()\n \n",
  "sphinx-doc__sphinx-8035": "diff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex ad1d950..029eab4 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_private_members\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -12,10 +13,42 @@ import pytest\n \n from test_ext_autodoc import do_autodoc\n \n+import pytest\n+from test_ext_autodoc import do_autodoc\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_specific_private_members(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None, \"private-members\": \"_private_function1,_private_function3\"}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        '',\n+        '.. py:function:: _private_function1(name)',\n+        '   :module: target.private',\n+        '',\n+        '   _private_function1 is a docstring.',\n+        '',\n+        '',\n+        '.. py:function:: _private_function3(name)',\n+        '   :module: target.private',\n+        '',\n+        '   _private_function3 is a docstring.',\n+        '',\n+    ]\n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n-def test_private_field(app):\n+def test_no_private_members(app):\n     app.config.autoclass_content = 'class'\n+    options = {\"members\": None, \"private-members\": \"\"}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+    ]\n     options = {\"members\": None}\n     actual = do_autodoc(app, 'module', 'target.private', options)\n     assert list(actual) == [\n",
  "sphinx-doc__sphinx-8120": "diff --git a/tests/test_intl.py b/tests/test_intl.py\nindex 58339b1..9884b6f 100644\n--- a/tests/test_intl.py\n+++ b/tests/test_intl.py\n@@ -1282,10 +1282,39 @@ def test_image_glob_intl_using_figure_language_filename(app):\n                             'image/svg+xml': 'subdir/svgimg.svg'})\n \n     assert isinstance(doctree[0][3], nodes.figure)\n+\n+@pytest.mark.sphinx('html', testroot='basic', confoverrides={'language': 'da'})\n+def test_danish_custom_translation(make_app, app_params, sphinx_test_tempdir):\n+    try:\n+        # clear translators cache\n+        locale.translators.clear()\n+\n+        # prepare message catalog (.po)\n+        locale_dir = sphinx_test_tempdir / 'basic' / 'locales' / 'da' / 'LC_MESSAGES'\n+        locale_dir.makedirs()\n+        with (locale_dir / 'sphinx.po').open('wb') as f:\n+            catalog = Catalog()\n+            catalog.add('Fig. %s', 'Foobar %s')\n+            catalog.add('Listing %s', 'Whatever %s')\n+            pofile.write_po(f, catalog)\n+\n+        # construct application and convert po file to .mo\n+        args, kwargs = app_params\n+        app = make_app(*args, **kwargs)\n+        assert (locale_dir / 'sphinx.mo').exists()\n+        assert app.translator.gettext('Fig. %s') == 'Foobar %s'\n+        assert app.translator.gettext('Listing %s') == 'Whatever %s'\n+\n+        app.build()\n+        content = (app.outdir / 'index.html').read_text()\n+        assert 'Foobar 1' in content\n+        assert 'Whatever 1' in content\n+    finally:\n+        locale.translators.clear()\n     assert_node(doctree[0][3][0], nodes.image, uri='subdir/svgimg.*',\n                 candidates={'application/pdf': 'subdir/svgimg.pdf',\n                             'image/svg+xml': 'subdir/svgimg.svg'})\n \n \n def getwarning(warnings):\n-    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n+    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n",
  "sphinx-doc__sphinx-8269": "",
  "sphinx-doc__sphinx-8459": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex d1881df..ca9fef3 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_configs\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -8,6 +9,60 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+import os\n+import sys\n+import pytest\n+from sphinx.testing.util import SphinxTestApp, path\n+\n+@pytest.mark.sphinx('text', testroot='ext-autodoc')\n+def test_autodoc_type_aliases_with_description(app: SphinxTestApp, status, warning):\n+    # Write the types.py file\n+    types_py = app.srcdir / 'types.py'\n+    types_py.write_text(\n+        \"from __future__ import annotations\\n\"\n+        \"from typing import Any, Dict\\n\"\n+        \"\\n\"\n+        \"JSONObject = Dict[str, Any]\\n\"\n+        \"\\n\"\n+        \"def sphinx_doc(data: JSONObject) -> JSONObject:\\n\"\n+        '    \"\"\"Does it work.\\n\"\\n'\n+        \"    Args:\\n\"\n+        \"        data: Does it args.\\n\"\n+        \"\\n\"\n+        \"    Returns:\\n\"\n+        \"        Does it work in return.\\n\"\n+        '    \"\"\"\\n'\n+        \"    return {}\\n\"\n+    )\n+\n+    # Write the conf.py file\n+    conf_py = app.srcdir / 'conf.py'\n+    conf_py.write_text(\n+        \"autodoc_typehints = 'description'\\n\"\n+        \"autodoc_type_aliases = {\\n\"\n+        \"    'JSONObject': 'types.JSONObject',\\n\"\n+        \"}\\n\"\n+    )\n+\n+    # Write the index.rst file\n+    index_rst = app.srcdir / 'index.rst'\n+    index_rst.write_text(\n+        \".. automodule:: types\\n\"\n+        \"   :members:\\n\"\n+    )\n+    \n+    # Build the Sphinx documentation\n+    app.build()\n+\n+    # Read and check the output\n+    output = (app.outdir / 'index.txt').read_text()\n+    assert 'types.sphinx_doc(data)' in output\n+    assert 'Parameters' in output\n+    assert 'data (types.JSONObject) -- Does it args.' in output\n+    assert 'Returns' in output\n+    assert 'Return type' in output\n+    assert 'types.JSONObject' in output\n+\n import platform\n import sys\n \n",
  "sphinx-doc__sphinx-8475": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 41632e7..a917518 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -372,6 +372,31 @@ def test_connect_to_selfsigned_nonexistent_cert_file(app):\n     with https_server(OKHandler):\n         app.builder.build_all()\n \n+import json\n+import pytest\n+import http.server\n+from sphinx.testing.util import SphinxTestApp\n+from sphinx.testing.fixtures import app\n+from sphinx.util.websupport import http_server\n+from requests.exceptions import TooManyRedirects\n+from sphinx.builders.linkcheck import LinkCheckBuilder\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_TooManyRedirects_on_HEAD(app: SphinxTestApp):\n+    class InfiniteRedirectOnHeadHandler(http.server.BaseHTTPRequestHandler):\n+        def do_HEAD(self):\n+            self.send_response(302, \"Found\")\n+            self.send_header(\"Location\", \"http://localhost:7777/\")\n+            self.end_headers()\n+\n+        def do_GET(self):\n+            self.send_response(200, \"OK\")\n+            self.end_headers()\n+            self.wfile.write(b\"ok\\n\")\n+\n+    with http_server(InfiniteRedirectOnHeadHandler):\n+        app.builder.build_all()\n+\n     with open(app.outdir / 'output.json') as fp:\n         content = json.load(fp)\n     assert content == {\n@@ -381,4 +406,4 @@ def test_connect_to_selfsigned_nonexistent_cert_file(app):\n         \"lineno\": 1,\n         \"uri\": \"https://localhost:7777/\",\n         \"info\": \"Could not find a suitable TLS CA certificate bundle, invalid path: does/not/exist\",\n-    }\n+    }\n",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8721": "",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex 3c31d3d..053bdc3 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -515,8 +515,15 @@ def test_dict_customtype():\n     # Type is unsortable, just check that it does not crash\n     assert \"<CustomType(2)>: 2\" in description\n \n+def test_object_description_enum():\n+    import enum\n \n-def test_getslots():\n+    class MyEnum(enum.Enum):\n+        ValueA = 10\n+        ValueB = 20\n+\n+    # Check if the Enum member is described correctly without its value\n+    assert inspect.object_description(MyEnum.ValueA) == \"MyEnum.ValueA\"\n     class Foo:\n         pass\n \n",
  "sphinx-doc__sphinx-9320": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\nindex ff8df08..a04bfe4 100644\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -9,6 +9,7 @@\n \"\"\"\n \n import time\n+import sys\n from io import StringIO\n \n import pytest\n@@ -19,8 +20,21 @@ from sphinx.util.console import coloron, nocolor\n \n warnfile = StringIO()\n \n+def test_exit_on_enter_with_existing_confpy(monkeypatch):\n+    \"\"\"\n+    Test that sphinx-quickstart exits when Enter is pressed and conf.py exists.\n+    \"\"\"\n+    def mock_isfile(path):\n+        return True\n \n-def setup_module():\n+    def mock_input(prompt):\n+        return \"\"\n+\n+    monkeypatch.setattr(path, 'isfile', mock_isfile)\n+    monkeypatch.setattr('builtins.input', mock_input)\n+\n+    with pytest.raises(SystemExit):\n+        qs.ask_user({})\n     nocolor()\n \n \n",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..285ce81 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -54,6 +54,7 @@ from sphinx.pycode import ast\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n     (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n+    (\"(1,)\", \"(1,)\"),                             # Tuple (single element)\n     (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n",
  "sphinx-doc__sphinx-9591": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 29731ea..48cf706 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -847,7 +847,38 @@ def test_pyproperty(app):\n     assert domain.objects['Class.prop2'] == ('index', 'Class.prop2', 'property', False)\n \n \n-def test_pydecorator_signature(app):\n+def test_pyproperty_type_annotation(app):\n+    text = (\".. py:class:: Square\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: start\\n\"\n+            \"      :type: Point\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: width\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: height\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\"\n+            \"\\n\")\n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                                    [desc_name, \"Square\"])],\n+                                  [desc_content, (addnodes.index,\n+                                                  desc,\n+                                                  addnodes.index,\n+                                                  desc,\n+                                                  addnodes.index,\n+                                                  desc)])]))\n+    assert_node(doctree[1][1][3], ([desc_signature, ([desc_annotation, \"property \"],\n+                                                     [desc_name, \"end\"],\n+                                                     [desc_annotation, \": \", (pending_xref, \"Point\")])],\n+                                   [desc_content, ()]))\n+    assert 'Square.end' in domain.objects\n+    assert domain.objects['Square.end'] == ('index', 'Square.end', 'property', False)\n     text = \".. py:decorator:: deco\"\n     domain = app.env.get_domain('py')\n     doctree = restructuredtext.parse(app, text)\n",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..c636965 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -756,7 +756,7 @@ def test_pymethod_options(app):\n \n     # :property:\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
  "sphinx-doc__sphinx-9711": "",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..8474899 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -236,6 +236,35 @@ def test_Point2D():\n     assert p2.distance(p3) == sqrt(17)/2\n \n \n+from sympy import sqrt\n+from sympy.geometry import Point, Point2D, Point3D\n+\n+def test_issue_11617():\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point2D(2, 0)\n+    assert p1.distance(p2) == sqrt(5)\n+\n+def test_distance_different_dimensions():\n+    # 3D to 2D\n+    p1 = Point3D(3, 4, 5)\n+    p2 = Point2D(6, 8)\n+    assert p1.distance(p2) == sqrt((3-6)**2 + (4-8)**2 + 5**2)\n+\n+    # 2D to 3D\n+    p1 = Point2D(6, 8)\n+    p2 = Point3D(3, 4, 5)\n+    assert p1.distance(p2) == sqrt((6-3)**2 + (8-4)**2 + 5**2)\n+\n+    # 3D to 3D\n+    p1 = Point3D(1, 2, 3)\n+    p2 = Point3D(4, 6, 8)\n+    assert p1.distance(p2) == sqrt((1-4)**2 + (2-6)**2 + (3-8)**2)\n+\n+    # 2D to 2D\n+    p1 = Point2D(0, 0)\n+    p2 = Point2D(3, 4)\n+    assert p1.distance(p2) == 5\n+\n def test_issue_9214():\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..41a0a55 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -741,7 +741,17 @@ def test_special_printers():\n     assert isinstance(func1(), mpi)\n     assert isinstance(func2(), mpi)\n \n-def test_true_false():\n+from sympy.utilities.lambdify import implemented_function\n+from sympy import Float\n+\n+def test_issue_12092():\n+    f = implemented_function('f', lambda x: x**2)\n+    assert f(f(2)).evalf() == Float(16)\n+\n+def test_evalf_recursive():\n+    f = implemented_function('f', lambda x: x ** 2)\n+    g = implemented_function('g', lambda x: 2 * x)\n+    assert f(g(2)).evalf() == Float(16)  # f(g(2)) should evaluate to f(4) = 16\n     # We want exact is comparison here, not just ==\n     assert lambdify([], true)() is True\n     assert lambdify([], false)() is False\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..851a36a 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -72,7 +72,23 @@ def test_ZeroMatrix_doit():\n     assert isinstance(Znn.doit().rows, Mul)\n \n \n+from sympy import symbols, Identity, Sum\n+\n def test_Identity():\n+    # Define symbols for matrix dimensions\n+    n = symbols('n', integer=True, positive=True)\n+    \n+    # Create an Identity matrix of size n\n+    In = Identity(n)\n+\n+    # Verify that the sum of all elements in the Identity matrix is n\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n+\n+    # Additional tests with specific sizes for verification\n+    In3 = Identity(3)\n+    assert In3[0, 0] == 1\n+    assert In3[0, 1] == 0\n+    assert sum(In3[i, j] for i in range(3) for j in range(3)) == 3\n     A = MatrixSymbol('A', n, m)\n     In = Identity(n)\n     Im = Identity(m)\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..ab3dcd9 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -354,6 +354,15 @@ def test_args():\n     # but this is ok because cycles imply that only those listed moved\n     assert Permutation(4, 5) == Permutation([0, 1, 2, 3, 5, 4])\n \n+    # New test cases for non-disjoint cycles\n+    # Test that non-disjoint cycles construct the identity permutation\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+    assert Permutation([[0, 1], [1, 0]]) == Permutation([0, 1])\n+    assert Permutation([[0, 1], [1, 0], [0, 1]]) == Permutation([0, 1])\n+    assert Permutation([[1, 2], [2, 1]]) == Permutation([0, 1, 2])\n+    assert Permutation([[0, 1, 2], [2, 0, 1]]) == Permutation([0, 1, 2])\n+    assert Permutation([[0, 1, 2], [0, 1], [1, 2]]) == Permutation([0, 2, 1])\n+\n \n def test_Cycle():\n     assert str(Cycle()) == '()'\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..e944d7e 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -500,6 +500,20 @@ def test_sparse_zeros_sparse_eye():\n     assert SparseMatrix.eye(3) == eye(3, cls=SparseMatrix)\n     assert len(SparseMatrix.eye(3)._smat) == 3\n     assert SparseMatrix.zeros(3) == zeros(3, cls=SparseMatrix)\n+\n+    # Test for issue with hstack and vstack for zero-dimension matrices\n+    sparse_matrices_hstack = [SparseMatrix.zeros(0, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*sparse_matrices_hstack).shape == (0, 6)\n+\n+    sparse_matrices_vstack = [SparseMatrix.zeros(n, 0) for n in range(4)]\n+    assert SparseMatrix.vstack(*sparse_matrices_vstack).shape == (6, 0)\n+\n+    # Additional test cases with 1-row matrices to ensure consistency\n+    sparse_matrices_hstack_1row = [SparseMatrix.zeros(1, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*sparse_matrices_hstack_1row).shape == (1, 6)\n+\n+    sparse_matrices_vstack_1row = [SparseMatrix.zeros(n, 1) for n in range(4)]\n+    assert SparseMatrix.vstack(*sparse_matrices_vstack_1row).shape == (6, 1)\n     assert len(SparseMatrix.zeros(3)._smat) == 0\n \n \n",
  "sympy__sympy-13372": "diff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\nindex e95146a..dd49f85 100644\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -170,6 +170,17 @@ def test_evalf_ramanujan():\n \n # Input that for various reasons have failed at some point\n \n+from sympy import Mul, Max, NS, Symbol\n+\n+def test_evalf_mul_max_issue():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    # Original test for issue 13076\n+    assert NS(Mul(Max(0, y), x, evaluate=False).evalf()) == 'x*Max(0, y)'\n+    # Additional permutations and checks\n+    assert NS(Mul(x, Max(0, y), evaluate=False).evalf()) == 'x*Max(0, y)'\n+    assert NS(Mul(Max(0, y), Max(0, x), evaluate=False).evalf()) == 'Max(0, x)*Max(0, y)'\n+    assert NS(Mul(Max(x, y), x, evaluate=False).evalf()) == 'x*Max(x, y)'\n \n def test_evalf_bugs():\n     assert NS(sin(1) + exp(-10**10), 10) == NS(sin(1), 10)\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..a3d9a62 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -203,8 +203,20 @@ def test_tanh():\n \n     assert tanh(k*pi*I/2) == tan(k*pi/2)*I\n \n-\n-def test_tanh_series():\n+def test_coth_log_tan_subs():\n+    from sympy import coth, log, tan\n+    \n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+\n+    # Testing substitution for integral values that used to cause errors\n+    for val in [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]:\n+        try:\n+            result = e.subs(x, val)\n+            # Print or assert result if needed. Here we assume it should not raise an error.\n+            print(f\"coth(log(tan({val}))) =\", result)\n+        except Exception as ex:\n+            print(f\"Error for x = {val}: {ex}\")\n     x = Symbol('x')\n     assert tanh(x).series(x, 0, 10) == \\\n         x - x**3/3 + 2*x**5/15 - 17*x**7/315 + 62*x**9/2835 + O(x**10)\n",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..77c9588 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -164,8 +164,19 @@ def test_difference():\n \n     assert -1 in S.Reals - S.Naturals\n \n+from sympy import Symbol, FiniteSet, Interval, Complement\n+\n+x = Symbol('x')\n+y = Symbol('y')\n \n def test_Complement():\n+    # Test case for issue 12712\n+    assert Complement(FiniteSet(x, y, 2), Interval(-10, 10)) == Complement(FiniteSet(x, y), Interval(-10, 10))\n+    \n+    # Additional test cases\n+    assert Complement(FiniteSet(x, 2, 3), Interval(0, 5)) == Complement(FiniteSet(x), Interval(0, 5))\n+    assert Complement(FiniteSet(1, x, y, 3), Interval(0, 2)) == Complement(FiniteSet(x, y, 3), Interval(0, 2))\n+    assert Complement(FiniteSet(2, 3, x, y), Interval(2, 3)) == Complement(FiniteSet(x, y), Interval(2, 3))\n     assert Complement(Interval(1, 3), Interval(1, 2)) == Interval(2, 3, True)\n     assert Complement(FiniteSet(1, 3, 4), FiniteSet(3, 4)) == FiniteSet(1)\n     assert Complement(Union(Interval(0, 2),\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..d5b0e07 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,63 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643():\n+    from sympy import Matrix, eye, ones\n+\n+    # Original issue test case\n+    M = eye(6)\n+    V = 2 * ones(6, 2)\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert M.col_insert(3, V) == expected\n+\n+    # Test inserting column at the beginning\n+    M = eye(3)\n+    V = ones(3, 1) * 3\n+    expected = Matrix([\n+        [3, 1, 0, 0],\n+        [3, 0, 1, 0],\n+        [3, 0, 0, 1]\n+    ])\n+    assert M.col_insert(0, V) == expected\n+\n+    # Test inserting column at the end\n+    M = eye(3)\n+    expected = Matrix([\n+        [1, 0, 0, 3],\n+        [0, 1, 0, 3],\n+        [0, 0, 1, 3]\n+    ])\n+    assert M.col_insert(3, V) == expected\n+\n+    # Test inserting multiple columns\n+    M = Matrix([[1, 2], [3, 4]])\n+    V = Matrix([[5, 6], [7, 8]])\n+    expected = Matrix([\n+        [1, 5, 6, 2],\n+        [3, 7, 8, 4]\n+    ])\n+    assert M.col_insert(1, V) == expected\n+\n+    # Edge case: inserting into an empty matrix\n+    M = Matrix(0, 0, [])\n+    V = Matrix([[]])\n+    assert M.col_insert(0, V) == Matrix(0, 0, [])\n+\n+    # Edge case: inserting empty matrix\n+    M = Matrix([[1, 2], [3, 4]])\n+    V = Matrix(2, 0, [])\n+    expected = Matrix([\n+        [1, 2],\n+        [3, 4]\n+    ])\n+    assert M.col_insert(1, V) == expected\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..133fc97 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -677,8 +677,13 @@ def test_Poly_mul():\n     assert Poly(x, x) * 2 == Poly(2*x, x)\n     assert 2 * Poly(x, x) == Poly(2*x, x)\n \n-\n-def test_Poly_sqr():\n+def test_issue_13079():\n+    # These assertions test the fix for issue #13079\n+    assert Poly(x)*x == Poly(x**2, x, domain='ZZ')  # Multiplying Poly by a symbol\n+    assert x*Poly(x) == Poly(x**2, x, domain='ZZ')  # Multiplying a symbol by Poly\n+    assert -2*Poly(x) == Poly(-2*x, x, domain='ZZ')  # Multiplying a negative integer by Poly\n+    assert S(-2)*Poly(x) == Poly(-2*x, x, domain='ZZ')  # Multiplying a negative SymPy integer by Poly\n+    assert Poly(x)*S(-2) == Poly(-2*x, x, domain='ZZ')  # Multiplying Poly by a negative SymPy integer\n     assert Poly(x*y, x, y).sqr() == Poly(x**2*y**2, x, y)\n \n \n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..7191a32 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -54,8 +54,22 @@ def test_printmethod():\n             return \"foo\"\n     assert latex(R(x)) == \"foo\"\n \n-\n-def test_latex_basic():\n+from sympy import symbols, Integral\n+from sympy.printing.latex import latex\n+\n+x, y = symbols('x y')\n+\n+def test_mul_symbol_arbitrary():\n+    # Original Test Cases\n+    assert latex(3*x**2*y, mul_symbol='\\\\\\\\,') == r\"3\\\\,x^{2}\\\\,y\"\n+    assert latex(1.5*3**x, mul_symbol='\\\\\\\\,') == r\"1.5 \\cdot 3^{x}\"\n+    \n+    # New Test Cases\n+    assert latex(x*y, mul_symbol='\\\\\\\\,') == r\"x\\\\,y\"\n+    assert latex(x*y, mul_symbol='*') == r\"x*y\"  # Custom symbol '*'\n+    assert latex(x*y, mul_symbol='custom') == r\"x \\cdot y\"  # Invalid symbol should default to '\\cdot'\n+    assert latex(2*x**2*y, mul_symbol='\\\\\\\\,') == r\"2\\\\,x^{2}\\\\,y\"\n+    assert latex(Integral(x*y, x), mul_symbol='\\\\\\\\,') == r\"\\int x\\\\,y\\\\,dx\"\n     assert latex(1 + x) == \"x + 1\"\n     assert latex(x**2) == \"x^{2}\"\n     assert latex(x**(1 + x)) == \"x^{x + 1}\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..8968d1a 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -307,8 +307,14 @@ def test_tolist():\n     m = Matrix(lst)\n     assert m.tolist() == lst\n \n-\n-def test_as_mutable():\n+def test_issue_13835():\n+    from sympy import Matrix, symbols\n+\n+    a = symbols('a')\n+    M = lambda n: Matrix([[i + a*j for i in range(n)] for j in range(n)])\n+    assert M(5).det() == 0, \"Determinant of M(5) should be 0\"\n+    assert M(6).det() == 0, \"Determinant of M(6) should be 0\"\n+    assert M(7).det() == 0, \"Determinant of M(7) should be 0\"\n     assert zeros(0, 3).as_mutable() == zeros(0, 3)\n     assert zeros(0, 3).as_immutable() == ImmutableMatrix(zeros(0, 3))\n     assert zeros(3, 0).as_immutable() == ImmutableMatrix(zeros(3, 0))\n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..6a64bb1 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -709,7 +709,20 @@ def test_issue_10003():\n     assert P(X < -1) == S.Zero\n     assert P(G < -1) == S.Zero\n \n-def test_precomputed_cdf():\n+def test_issue_precompute_cdf():\n+    x = symbols(\"x\", real=True)\n+    assert cdf(Arcsin(\"x\", 0, 3))(1).simplify() == 2*asin(sqrt(1/3))/pi\n+    assert cdf(Dagum(\"x\", S(1)/3, S(1)/5, 2))(3).simplify() == ((1 + (3/2)**(S(1)/3))**(-S(1)/5))\n+    assert cdf(Erlang(\"x\", 1, 1))(1).simplify() == 1 - exp(-1)\n+    assert cdf(Frechet(\"x\", S(4)/3, 1, 2))(3).simplify() == exp(-1)\n+    assert cdf(Gamma(\"x\", 0.1, 2))(3).simplify() == lowergamma(S(0.1), 1.5)/gamma(S(0.1))\n+    assert cdf(GammaInverse(\"x\", S(5)/7, 2))(3).simplify() == uppergamma(S(5)/7, 2/3)/gamma(S(5)/7)\n+    assert cdf(Kumaraswamy(\"x\", S(1)/123, 5))(S(1)/3).simplify() == 1 - (1 - (S(1)/3)**(S(1)/123))**5\n+    assert cdf(Laplace(\"x\", 2, 3))(5).simplify() == 1 - exp(-1)\n+    assert cdf(Logistic(\"x\", 1, 0.1))(2).simplify() == 1/(1 + exp(-10))\n+    assert cdf(Nakagami(\"x\", S(7)/3, 1))(2).simplify() == lowergamma(S(7)/3, (7/3)*2**2)/gamma(S(7)/3)\n+    assert cdf(StudentT(\"x\", 10))(2).simplify() != None  # Check that it doesn't hang\n+    assert cdf(UniformSum(\"x\", 5))(2).simplify() != None # Check that it doesn't hang\n     x = symbols(\"x\", real=True, finite=True)\n     mu = symbols(\"mu\", real=True, finite=True)\n     sigma, xm, alpha = symbols(\"sigma xm alpha\", positive=True, finite=True)\n",
  "sympy__sympy-13974": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bd3e825..fa94d3d 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -46,6 +46,20 @@ def test_tensor_product_commutator():\n \n \n def test_tensor_product_simp():\n+    assert tensor_product_simp(TP(A, B)**2) == TP(A**2, B**2)\n+    assert tensor_product_simp(TP(A, B)**3) == TP(A**3, B**3)\n+    assert tensor_product_simp(x * TP(A, B)**2) == x * TP(A**2, B**2)\n+    assert tensor_product_simp(x * (TP(A, B)**2) * TP(C, D)) == x * TP(A**2 * C, B**2 * D)\n+\n+    # Additional tests for issue verification\n+    assert tensor_product_simp(TP(1, 1) * TP(1, 1)) == TP(1, 1)\n+    assert tensor_product_simp(TP(1, Pauli(3)) * TP(1, Pauli(3))) == TP(1, Pauli(3)**2)\n+    assert tensor_product_simp(TP(1, 1) * TP(1, a)).subs(a, 1) == TP(1, 1)\n+    assert tensor_product_simp(TP(1, Pauli(3)) * TP(1, a)).subs(a, Pauli(3)) == TP(1, Pauli(3)**2)\n+\n+    # Ensure compatibility with expand method\n+    assert TP(1, 1).expand(tensorproduct=True) == TP(1, 1)\n+    assert TP(1, Pauli(3)).expand(tensorproduct=True) == TP(1, Pauli(3))\n     assert tensor_product_simp(TP(A, B)*TP(B, C)) == TP(A*B, B*C)\n \n \n",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_python.py b/sympy/printing/tests/test_python.py\nindex 73fc070..4fb7b85 100644\n--- a/sympy/printing/tests/test_python.py\n+++ b/sympy/printing/tests/test_python.py\n@@ -79,7 +79,19 @@ def test_python_keyword_function_name_escaping():\n         5*Function(\"for\")(8)) == \"for_ = Function('for')\\ne = 5*for_(8)\"\n \n \n-def test_python_relational():\n+from sympy import Symbol, Eq, Ne\n+from sympy.printing import python\n+\n+def test_sympy_issue():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    # Test case to verify the proper definition of symbols for equations\n+    assert python(Eq(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = Eq(x, y)\"\n+    # Test case to verify symbol evaluation in inequalities with expression\n+    assert python(Ne(x/(y + 1), y**2)) in [\n+        \"x = Symbol('x')\\ny = Symbol('y')\\ne = Ne(x/(1 + y), y**2)\",\n+        \"x = Symbol('x')\\ny = Symbol('y')\\ne = Ne(x/(y + 1), y**2)\"\n+    ]\n     assert python(Eq(x, y)) == \"e = Eq(x, y)\"\n     assert python(Ge(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x >= y\"\n     assert python(Le(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x <= y\"\n",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..0f5bdd5 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -4,6 +4,23 @@ from sympy.abc import x, y, z\n from sympy.utilities.pytest import raises\n \n \n+def test_vector_add_zero():\n+    N = ReferenceFrame('N')\n+    assert N.x + 0 == N.x\n+    assert 0 + N.x == N.x\n+    assert sum([N.x, 0 * N.x]) == N.x\n+    assert sum([0 * N.x, N.x]) == N.x\n+\n+def test_vector_addition_with_scalars():\n+    N = ReferenceFrame('N')\n+    assert N.x * 1 + 2 == N.x + 2\n+    assert 2 + N.x * 1 == 2 + N.x\n+    assert N.x * 0 + 0 == 0\n+    assert 0 + N.x * 0 == 0\n+\n+from sympy import symbols\n+from sympy.physics.vector import ReferenceFrame, Vector\n+\n Vector.simp = True\n A = ReferenceFrame('A')\n \n",
  "sympy__sympy-14976": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..6716d23 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1,3 +1,4 @@\n+\n from distutils.version import LooseVersion as V\n from itertools import product\n import math\n@@ -134,6 +135,16 @@ def test_math_lambda():\n \n \n @conserve_mpmath_dps\n+def test_mpmath_rational_handling():\n+    from sympy import rf\n+    mpmath.mp.dps = 50\n+    x = symbols('x')\n+    eqn = Eq(rf(18, x), 77 + Rational(1, 3))\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    x0 = mpmath.findroot(f, 1.5, solver='newton', tol=mpmath.mpf('1e-49'))\n+    result = mpmath.rf(mpmath.mpf(18), x0)\n+    expected = mpmath.mpf(77) + mpmath.mpf(1)/mpmath.mpf(3)\n+    assert abs(result - expected) < mpmath.mpf('1e-49')\n def test_mpmath_lambda():\n     mpmath.mp.dps = 50\n     sin02 = mpmath.mpf(\"0.19866933079506121545941262711838975037020672954020\")\n@@ -145,6 +156,16 @@ def test_mpmath_lambda():\n \n \n @conserve_mpmath_dps\n+def test_mpmath_rational_handling():\n+    from sympy import rf\n+    mpmath.mp.dps = 50\n+    x = symbols('x')\n+    eqn = Eq(rf(18, x), 77 + Rational(1, 3))\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    x0 = mpmath.findroot(f, 1.5, solver='newton', tol=mpmath.mpf('1e-49'))\n+    result = mpmath.rf(mpmath.mpf(18), x0)\n+    expected = mpmath.mpf(77) + mpmath.mpf(1)/mpmath.mpf(3)\n+    assert abs(result - expected) < mpmath.mpf('1e-49')\n def test_number_precision():\n     mpmath.mp.dps = 50\n     sin02 = mpmath.mpf(\"0.19866933079506121545941262711838975037020672954020\")\n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..e4ae744 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -79,6 +80,13 @@ def test_ndim_array_initiation():\n     assert rank_zero_array[()] == x\n     raises(ValueError, lambda: rank_zero_array[0])\n \n+    # Additional test case for rank-0 array length verification\n+    scalar_array = ImmutableDenseNDimArray(42)  # A rank-0 array\n+    assert len(scalar_array) == 1  # Expected length for rank-0 array is 1\n+    assert scalar_array.shape == ()\n+    assert scalar_array.rank() == 0\n+    assert scalar_array[()] == 42\n+\n \n def test_reshape():\n     array = ImmutableDenseNDimArray(range(50), 50)\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..4a1fdb8 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n@@ -23,8 +24,14 @@ def test_Rational():\n     assert mcode(x + Rational(3, 7)) == \"x + 3/7\"\n     assert mcode(Rational(3, 7)*x) == \"(3/7)*x\"\n \n-\n-def test_Function():\n+def test_Max_Min():\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"\n+    assert mcode(Max(x, y, 2)) == \"Max[x, y, 2]\"\n+    assert mcode(Max(2, 3)) == \"Max[2, 3]\"\n+    assert mcode(Max(x, y)) == \"Max[x, y]\"\n+    # Verify the existing test for multiple arguments in Max and Min\n+    assert mcode(Max(x, y, z) * Min(y, z)) == \"Max[x, y, z]*Min[y, z]\"\n     assert mcode(f(x, y, z)) == \"f[x, y, z]\"\n     assert mcode(sin(x) ** cos(x)) == \"Sin[x]^Cos[x]\"\n     assert mcode(conjugate(x)) == \"Conjugate[x]\"\n",
  "sympy__sympy-15349": "diff --git a/sympy/algebras/tests/test_quaternion.py b/sympy/algebras/tests/test_quaternion.py\nindex c486cc1..0d44b35 100644\n--- a/sympy/algebras/tests/test_quaternion.py\n+++ b/sympy/algebras/tests/test_quaternion.py\n@@ -112,6 +112,33 @@ def test_quaternion_conversions():\n                                                [sin(theta),  cos(theta), 0],\n                                                [0,           0,          1]])\n \n+def test_quaternion_to_rotation_matrix_sign():\n+    \"\"\" Test for the sign correctness in Quaternion.to_rotation_matrix() \"\"\"\n+    from sympy import symbols, cos, sin, trigsimp\n+    from sympy.algebras.quaternion import Quaternion\n+\n+    x = symbols('x')\n+    # Quaternion representing a rotation around the x-axis\n+    q_x = Quaternion(cos(x/2), sin(x/2), 0, 0)\n+    assert trigsimp(q_x.to_rotation_matrix()) == Matrix([\n+        [1,      0,       0],\n+        [0, cos(x), -sin(x)],\n+        [0, sin(x),  cos(x)]])\n+\n+    # Quaternion representing a rotation around the y-axis\n+    q_y = Quaternion(cos(x/2), 0, sin(x/2), 0)\n+    assert trigsimp(q_y.to_rotation_matrix()) == Matrix([\n+        [ cos(x), 0, sin(x)],\n+        [      0, 1,      0],\n+        [-sin(x), 0, cos(x)]])\n+\n+    # Quaternion representing a rotation around the z-axis\n+    q_z = Quaternion(cos(x/2), 0, 0, sin(x/2))\n+    assert trigsimp(q_z.to_rotation_matrix()) == Matrix([\n+        [cos(x), -sin(x), 0],\n+        [sin(x),  cos(x), 0],\n+        [     0,       0, 1]])\n+\n     assert q2.to_axis_angle() == ((0, 0, sin(theta/2)/Abs(sin(theta/2))),\n                                    2*acos(cos(theta/2)))\n \n@@ -119,4 +146,4 @@ def test_quaternion_conversions():\n                [cos(theta), -sin(theta), 0, sin(theta) - cos(theta) + 1],\n                [sin(theta),  cos(theta), 0, -sin(theta) - cos(theta) + 1],\n                [0,           0,          1,  0],\n-               [0,           0,          0,  1]])\n+               [0,           0,          0,  1]])\n",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..a392a13 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1625,7 +1625,18 @@ def test_Mod():\n     assert (3*i*x) % (2*i*y) == i*Mod(3*x, 2*y)\n     assert Mod(4*i, 4) == 0\n \n-    # issue 8677\n+    # issue 15493\n+    i, j = symbols('i j', integer=True, positive=True)\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+    assert Mod(8*i/j, 4) == 4*Mod(2*i/j, 1)\n+    assert Mod(8*i, 4) == 0\n+\n+    # additional cases for issue 15493\n+    assert Mod(6*i, 3) == 0  # reduction to zero\n+    assert Mod(9*i, 6) == 3*Mod(i, 2)  # reduction with common factors\n+    assert Mod(15*i, 5) == 0  # exact division\n+    assert Mod(-3*i, 2) == -Mod(i, 2)  # negative factor handling\n+    assert Mod(0, 2) == 0  # edge case with zero\n     n = Symbol('n', integer=True, positive=True)\n     assert factorial(n) % n == 0\n     assert factorial(n + 2) % n == 0\n",
  "sympy__sympy-15809": "diff --git a/sympy/functions/elementary/tests/test_miscellaneous.py b/sympy/functions/elementary/tests/test_miscellaneous.py\nindex 821fd0c..050d25b 100644\n--- a/sympy/functions/elementary/tests/test_miscellaneous.py\n+++ b/sympy/functions/elementary/tests/test_miscellaneous.py\n@@ -85,7 +85,7 @@ def test_Min():\n     assert Min(p, p_).func is Min\n \n     # lists\n-    raises(ValueError, lambda: Min())\n+    assert Min() == S.Infinity\n     assert Min(x, y) == Min(y, x)\n     assert Min(x, y, z) == Min(z, y, x)\n     assert Min(x, Min(y, z)) == Min(z, y, x)\n@@ -156,7 +156,7 @@ def test_Max():\n \n     # lists\n \n-    raises(ValueError, lambda: Max())\n+    assert Max() == S.NegativeInfinity\n     assert Max(x, y) == Max(y, x)\n     assert Max(x, y, z) == Max(z, y, x)\n     assert Max(x, Max(y, z)) == Max(z, y, x)\n",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..d8968a7 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1986,11 +1986,29 @@ def test_Add_is_zero():\n     x, y = symbols('x y', zero=True)\n     assert (x + y).is_zero\n \n+def test_issue_15873():\n+    from sympy import I, simplify, symbols\n \n-def test_issue_14392():\n+    # Original test case from the issue\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None\n+\n+    # Simplified expression should evaluate to zero\n+    assert simplify(e).is_zero is True\n+\n+    # Additional test cases for complex numbers\n+    a, b = symbols('a b', zero=True)\n+    expr = a + I*b\n+    assert expr.is_zero is None\n+\n+    expr = I*(1 + I) - 1 - I\n+    assert expr.is_zero is None\n+\n+    expr = simplify(I*(1 + I) - 1 - I)\n+    assert expr.is_zero is True\n     assert (sin(zoo)**2).as_real_imag() == (nan, nan)\n \n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..f96b334 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -477,8 +477,36 @@ def test_logcombine_complex_coeff():\n     assert logcombine(i + 2*log(x), force=True) == \\\n         i + log(x**2)\n \n-\n-def test_issue_5950():\n+def test_issue_16438_finite():\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0['finite'] == True\n+    assert eq.assumptions0['infinite'] == False\n+\n+def test_posify_integer_assumption():\n+    k = Symbol('k', integer=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0['integer'] == True\n+\n+def test_posify_rational_assumption():\n+    k = Symbol('k', rational=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0['rational'] == True\n+\n+def test_posify_prime_assumption():\n+    k = Symbol('k', prime=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0['prime'] == True\n+\n+def test_posify_even_assumption():\n+    k = Symbol('k', even=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0['even'] == True\n+\n+def test_posify_odd_assumption():\n+    k = Symbol('k', odd=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0['odd'] == True\n     x, y = symbols(\"x,y\", positive=True)\n     assert logcombine(log(3) - log(2)) == log(Rational(3,2), evaluate=False)\n     assert logcombine(log(x) - log(y)) == log(x/y)\n",
  "sympy__sympy-16766": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 51a287f..058abad 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,8 +1,10 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n \n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n+from sympy.tensor import IndexedBase\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational\n from sympy.core.numbers import pi\n from sympy.functions import acos, Piecewise, sign\n@@ -21,6 +23,13 @@ def test_PythonCodePrinter():\n     assert not prntr.module_imports\n     assert prntr.doprint(x**y) == 'x**y'\n     assert prntr.doprint(Mod(x, 2)) == 'x % 2'\n+    \n+    # Test for IndexedBase\n+    p = IndexedBase(\"p\")\n+    assert prntr.doprint(p[0]) == 'p[0]'\n+    assert prntr.doprint(p[x]) == 'p[x]'\n+    assert prntr.doprint(p[x, y]) == 'p[x, y]'\n+    assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n     assert prntr.doprint(And(x, y)) == 'x and y'\n     assert prntr.doprint(Or(x, y)) == 'x or y'\n     assert not prntr.module_imports\n",
  "sympy__sympy-16792": "",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..d160aae 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -237,8 +237,16 @@ def test_decipher_kid_rsa():\n     assert decipher_kid_rsa(3, (8, 3)) == 1\n     assert decipher_kid_rsa(2, (7, 4)) == 1\n \n+from sympy.crypto.crypto import encode_morse\n \n def test_encode_morse():\n+    # Include original test cases for '12345' and '67890'\n+    assert encode_morse('12345') == '.----|..---|...--|....-|.....'\n+    assert encode_morse('67890') == '-....|--...|---..|----.|-----'\n+    \n+    # Additional test cases to ensure the fix is correct\n+    assert encode_morse('1') == '.----'\n+    assert encode_morse('0123456789') == '-----|.----|..---|...--|....-|.....|-....|--...|---..|----.'\n     assert encode_morse('ABC') == '.-|-...|-.-.'\n     assert encode_morse('SMS ') == '...|--|...||'\n     assert encode_morse('SMS\\n') == '...|--|...||'\n",
  "sympy__sympy-17139": "",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..b87ae5c 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,6 +1,9 @@\n+\n from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n from sympy.simplify.sqrtdenest import _subsets as subsets\n from sympy.utilities.pytest import slow\n+from sympy.simplify.sqrtdenest import _sqrt_match\n+from sympy.core.expr import unchanged\n \n r2, r3, r5, r6, r7, r10, r15, r29 = [sqrt(x) for x in [2, 3, 5, 6, 7, 10,\n                                           15, 29]]\n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..e2c3285 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n@@ -91,6 +92,21 @@ def test_point():\n     assert (-p3).__rsub__(p4) == p3.midpoint(p4).scale(2, 2)\n \n     assert p4 * 5 == Point(5, 5)\n+    # Test multiplication of Point with a number in both orders\n+    assert 2.0 * p4 == Point(2, 2)\n+    assert p4 * 2.0 == Point(2, 2)\n+    assert sympy.sympify(2.0) * p4 == Point(2, 2)\n+    assert p4 * sympy.sympify(2.0) == Point(2, 2)\n+\n+    # Verify commutative property for multiplication with Point2D\n+    point1 = Point2D(0, 0)\n+    point2 = Point2D(1, 1)\n+    assert point1 + point2 * sympy.sympify(2.0) == Point2D(2, 2)\n+    assert point1 + sympy.sympify(2.0) * point2 == Point2D(2, 2)\n+\n+    # Verify that original test cases are not affected\n+    assert 5 * p4 == Point(5, 5)\n+    assert 5 * p4 == Point2D(5, 5)\n     assert p4 / 5 == Point(0.2, 0.2)\n \n     raises(ValueError, lambda: Point(0, 0) + 10)\n",
  "sympy__sympy-18189": "",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..39ec17c 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -676,6 +676,15 @@ def test_latex_subs():\n     assert latex(Subs(x*y, (\n         x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n \n+    # Test case for checking the fix of incorrect parenthesizing of Subs\n+    from sympy.abc import x, y  # Ensure necessary imports are included\n+    assert latex(3*Subs(-x+y, (x,), (1,))) == r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+\n+    # Additional test cases for thorough testing\n+    assert latex(Subs(2*x + y, (x,), (1,))) == r'\\left. \\left(2 x + y\\right) \\right|_{\\substack{ x=1 }}'\n+    assert latex(Subs((x+y)*(x-y), (x,), (2,))) == r'\\left. \\left(x + y\\right) \\left(x - y\\right) \\right|_{\\substack{ x=2 }}'\n+    assert latex(5*Subs(x**2 + y, (y,), (3,))) == r'5 \\left. \\left(x^{2} + y\\right) \\right|_{\\substack{ y=3 }}'\n+\n \n def test_latex_integrals():\n     assert latex(Integral(log(x), x)) == r\"\\int \\log{\\left(x \\right)}\\, dx\"\n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..af7a8e2 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -476,6 +476,10 @@ def test_issue_4988_builtins():\n     assert exp2 == C  # Make sure it did not get mixed up with sympy.C\n \n \n+from sympy.core.sympify import kernS\n+from sympy.abc import x, y\n+from sympy import Interval, Add, Mul, Rational, S, Symbol, exp, sin, cos\n+\n def test_geometry():\n     p = sympify(Point(0, 1))\n     assert p == Point(0, 1) and isinstance(p, Point)\n@@ -513,8 +517,18 @@ def test_kernS():\n     one = kernS('x - (x - 1)')\n     assert one != 1 and one.expand() == 1\n \n-\n-def test_issue_6540_6552():\n+def test_kernS_unboundlocalerror():\n+    # Test to ensure no UnboundLocalError due to 'kern' referenced before assignment\n+    assert kernS(\"(2*x)/(x-1)\") == 2*x/(x-1)  # Original test case from the patch\n+    assert kernS(\"(a*b)/(b-c)\") == Symbol('a')*Symbol('b')/(Symbol('b')-Symbol('c'))\n+    assert kernS(\"sin(x) + cos(y)\") == sin(x) + cos(y)\n+    assert kernS(\"x**2 + 2*x + 1\") == x**2 + 2*x + 1\n+    # Test more complex expression\n+    assert kernS(\"2*(x+y)*(x-y)\") == 2*(x+y)*(x-y)\n+    # Test for simple numbers\n+    assert kernS(\"42\") == 42\n+    # Test for expressions involving floats\n+    assert kernS(\"3.5*x\") == 3.5*x\n     assert S('[[1/3,2], (2/5,)]') == [[Rational(1, 3), 2], (Rational(2, 5),)]\n     assert S('[[2/6,2], (2/4,)]') == [[Rational(1, 3), 2], (S.Half,)]\n     assert S('[[[2*(1)]]]') == [[[2]]]\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_operator.py b/sympy/physics/quantum/tests/test_operator.py\nindex 799aaae..aa2c83e 100644\n--- a/sympy/physics/quantum/tests/test_operator.py\n+++ b/sympy/physics/quantum/tests/test_operator.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Derivative, diff, Function, Integer, Mul, pi, sin, Symbol,\n                    symbols)\n from sympy.physics.quantum.qexpr import QExpr\n@@ -7,6 +8,7 @@ from sympy.physics.quantum.operator import (Operator, UnitaryOperator,\n                                             HermitianOperator, OuterProduct,\n                                             DifferentialOperator,\n                                             IdentityOperator)\n+from sympy.physics.quantum import IdentityOperator\n from sympy.physics.quantum.state import Ket, Bra, Wavefunction\n from sympy.physics.quantum.qapply import qapply\n from sympy.physics.quantum.represent import represent\n@@ -83,8 +85,12 @@ def test_unitary():\n     assert U.is_commutative is False\n     assert Dagger(U).is_commutative is False\n \n+def test_dagger_identity_simplification():\n+    O = Operator('O')\n+    I = IdentityOperator()\n \n-def test_identity():\n+    assert Dagger(O) * I == Dagger(O)\n+    assert I * Dagger(O) == Dagger(O)\n     I = IdentityOperator()\n     O = Operator('O')\n     x = Symbol(\"x\")\n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..7ec6a9d 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -905,9 +905,14 @@ def test_sylow_subgroup():\n     assert G.order() % S.order() == 0\n     assert G.order()/S.order() % 2 > 0\n \n-\n-@slow\n-def test_presentation():\n+    # Additional test cases for specific reported issues\n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4  # Expected order of a 2-Sylow subgroup of DihedralGroup(18)\n+\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4  # Expected order of a 2-Sylow subgroup of DihedralGroup(50)\n     def _test(P):\n         G = P.presentation()\n         return G.order() == P.order()\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..3dba316 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -513,8 +513,19 @@ def test_partitions():\n             i += 1\n         assert i == RGS_enum(n)\n \n-\n-def test_binary_partitions():\n+def test_partitions_unique_dicts():\n+    partitions_list = list(partitions(6, k=2))\n+    # Check if all dictionaries in the list are unique objects\n+    assert all(p is not q for i, p in enumerate(partitions_list) for q in partitions_list[i + 1:])\n+\n+    partitions_list = list(partitions(8, k=4, m=3))\n+    # Check if all dictionaries in the list are unique objects\n+    assert all(p is not q for i, p in enumerate(partitions_list) for q in partitions_list[i + 1:])\n+\n+    # Test when size=True\n+    partitions_list = [(M, p) for M, p in partitions(6, k=2, size=True)]\n+    # Check if all partitions in the size=True list are unique objects\n+    assert all(p is not q for i, (_, p) in enumerate(partitions_list) for _, q in partitions_list[i + 1:])\n     assert [i[:] for i in binary_partitions(10)] == [[8, 2], [8, 1, 1],\n         [4, 4, 2], [4, 4, 1, 1], [4, 2, 2, 2], [4, 2, 2, 1, 1],\n         [4, 2, 1, 1, 1, 1], [4, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2],\n",
  "sympy__sympy-20801": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e1c7e2..e7d4910 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -571,8 +571,18 @@ def test_Float():\n     raises(ValueError, lambda: Float(\"1.23\", dps=\"\", precision=10))\n     raises(ValueError, lambda: Float(\"1.23\", dps=3, precision=\"\"))\n     raises(ValueError, lambda: Float(\"1.23\", dps=\"\", precision=\"\"))\n-\n-    # from NumberSymbol\n+def test_zero_not_false():\n+    # https://github.com/sympy/sympy/issues/20796\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n+\n+    # Additional assertions to verify != behavior\n+    assert (S(0.0) != S.false) is True\n+    assert (S.false != S(0.0)) is True\n+    assert (S(0) != S.false) is True\n+    assert (S.false != S(0)) is True\n     assert same_and_same_prec(Float(pi, 32), pi.evalf(32))\n     assert same_and_same_prec(Float(Catalan), Catalan.evalf())\n \n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..d039f0d 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -7,6 +8,8 @@ from sympy import (\n from sympy.core.basic import _aresame\n from sympy.testing.pytest import XFAIL\n from sympy.abc import a, x, y, z, t\n+from sympy.functions.elementary.trigonometric import sinh\n+from sympy.functions.elementary.piecewise import Piecewise\n \n def test_subs():\n     n3 = Rational(3)\n@@ -19,6 +22,23 @@ def test_subs():\n     e = e.subs(x, n3)\n     assert e == Rational(6)\n \n+    # Test for issue with PolynomialError during subs\n+    def test_issue_21373_subs_error():\n+        x_r, y_r = symbols('x_r y_r', real=True)\n+        expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+        # Run expr.subs({1: 1.0}) and ensure no error is raised\n+        try:\n+            expr.subs({1: 1.0})\n+            error_raised = False\n+        except PolynomialError:\n+            error_raised = True\n+        \n+        assert not error_raised, \"Expected no PolynomialError, but it was raised\"\n+\n+        # Verify that expr.subs({1: 1.0}) gives the expected result (though result verification is not the primary goal here)\n+        result = expr.subs({1: 1.0})\n+        assert result == exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+\n \n def test_subs_Matrix():\n     z = zeros(2)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..06139b9 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -14,6 +14,7 @@ from sympy.polys.polyerrors import ExactQuotientFailed\n from sympy.abc import a, b, c, x, y, z\n from sympy.core import S, symbols\n from sympy.testing.pytest import raises\n+from sympy.polys.monomials import itermonomials\n \n \n def test_monomials():\n@@ -78,7 +79,30 @@ def test_monomials():\n                             x * i * j, x * j * i\n             }\n \n-    # degree_list tests\n+    # Testing issue with min_degrees argument in itermonomials\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    \n+    # Test for the specific case mentioned in the issue\n+    monomials = set(itermonomials([x1, x2, x3], 3, min_degrees=3))\n+    expected_monomials = {x1**3, x2**3, x3**3, x1**2*x2, x1*x2**2, x1**2*x3, x1*x3**2, x2**2*x3, x2*x3**2, \n+                          x1*x2*x3}\n+    assert monomials == expected_monomials, f\"Expected {expected_monomials}, but got {monomials}\"\n+\n+    # Additional tests covering various cases\n+    # Case where max_degrees > min_degrees\n+    monomials = set(itermonomials([x1, x2], 4, min_degrees=2))\n+    expected_monomials = {x1**2, x1*x2, x2**2, x1**3, x1**2*x2, x1*x2**2, x2**3, x1**4, x1**3*x2, x1**2*x2**2, \n+                          x1*x2**3, x2**4}\n+    assert monomials == expected_monomials, f\"Expected {expected_monomials}, but got {monomials}\"\n+\n+    # Case with different min and max degrees\n+    monomials = set(itermonomials([x1, x2, x3], 5, min_degrees=3))\n+    expected_monomials = {x1**3, x2**3, x3**3, x1**2*x2, x1*x2**2, x1**2*x3, x1*x3**2, x2**2*x3, x2*x3**2, \n+                          x1*x2*x3, x1**4, x1**3*x2, x1**3*x3, x1**2*x2**2, x1**2*x3**2, x1*x2**3, \n+                          x1*x3**3, x2**4, x2**3*x3, x2**2*x3**2, x2*x3**3, x3**4, x1**5, x2**5, x3**5, \n+                          x1**4*x2, x1**4*x3, x1**3*x2**2, x1**3*x3**2, x1**2*x2**3, x1**2*x3**3, \n+                          x1*x2**4, x1*x3**4, x2**4*x3, x2**3*x3**2, x2**2*x3**3, x2*x3**4}\n+    assert monomials == expected_monomials, f\"Expected {expected_monomials}, but got {monomials}\"\n     assert set(itermonomials([], [])) == {S.One}\n \n     raises(ValueError, lambda: set(itermonomials([], [0])))\n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..b73b1a1 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -267,6 +267,7 @@ def test_String():\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n+    assert st.func(*st.args) == st  # Test for argument invariance\n \n \n     class Signifier(String):\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..4619d33 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -9,6 +10,7 @@ from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n+from sympy.core.parameters import evaluate\n from sympy.testing.pytest import raises, warns\n \n \n@@ -440,7 +442,23 @@ def test_unit():\n     assert Point(1, 1).unit == Point(sqrt(2)/2, sqrt(2)/2)\n \n \n-def test_dot():\n+def test_issue_22684():\n+    # Test for the original issue: Ensure that Point can be created with evaluation turned off\n+    with evaluate(False):\n+        p = Point(1, 2)\n+        assert p == Point2D(1, 2)\n+    # Test that Point creation does not raise an error without using evaluate(False)\n+    p = Point2D(1, 2)\n+    assert p == Point2D(1, 2)\n+\n+    # Test that using Point2D with evaluate=False works directly\n+    p = Point2D(1, 2, evaluate=False)\n+    assert p == Point2D(1, 2)\n+\n+    # Additional test: Ensure imaginary coordinates raise an error regardless of evaluate state\n+    raises(ValueError, lambda: Point2D(1, 2*I))\n+    with evaluate(False):\n+        raises(ValueError, lambda: Point2D(1, 2*I))\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n \n",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..1b50947 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n@@ -33,6 +34,13 @@ def test_PythonCodePrinter():\n     assert prntr.doprint(Mod(x, 2)) == 'x % 2'\n     assert prntr.doprint(-Mod(x, y)) == '-(x % y)'\n     assert prntr.doprint(Mod(-x, y)) == '(-x) % y'\n+    assert prntr.doprint(Min(x, y)) == \"min(x, y)\"\n+    assert prntr.doprint(Max(x, y)) == \"max(x, y)\"\n+    # Additional test cases for multiple arguments and symbolic/numeric mix\n+    assert prntr.doprint(Min(x, y, 3)) == \"min(x, y, 3)\"\n+    assert prntr.doprint(Max(x, 2, z)) == \"max(x, 2, z)\"\n+    assert prntr.doprint(Min(1, 2, 3)) == \"min(1, 2, 3)\"\n+    assert prntr.doprint(Max(x, y, z)) == \"max(x, y, z)\"\n     assert prntr.doprint(And(x, y)) == 'x and y'\n     assert prntr.doprint(Or(x, y)) == 'x or y'\n     assert not prntr.module_imports\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..eebebba 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1181,8 +1181,24 @@ def test_lambdify_inspect():\n     # details\n     assert 'x**2' in inspect.getsource(f)\n \n-\n-def test_issue_14941():\n+def test_python_code_printer_tuple_single_element():\n+    import inspect\n+    from sympy import lambdify\n+\n+    # Test case for a tuple with a single element\n+    f = lambdify([], (1,))\n+    source_code = inspect.getsource(f)\n+    assert 'return (1,)' in source_code\n+\n+    # Test case for a tuple with two elements\n+    f = lambdify([], (1, 2))\n+    source_code = inspect.getsource(f)\n+    assert 'return (1, 2)' in source_code\n+\n+    # Test case for a tuple with three elements\n+    f = lambdify([], (1, 2, 3))\n+    source_code = inspect.getsource(f)\n+    assert 'return (1, 2, 3)' in source_code\n     x, y = Dummy(), Dummy()\n \n     # test dict\n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..c15d22c 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,7 +1,34 @@\n+\n+def test_symbols_with_function_class():\n+    # Test using symbols with cls=Function and extra parentheses\n+    q, u = symbols(('q:2', 'u:2'), cls=Function)\n+    assert type(q[0]) == UndefinedFunction\n+    assert type(u[1]) == UndefinedFunction\n+\n+    # Ensure the length and structure is as expected\n+    assert len(q) == 2\n+    assert len(u) == 2\n+\n+    # Test without extra parentheses, should still be Function\n+    v, w = symbols('v:2, w:2', cls=Function)\n+    assert type(v[0]) == UndefinedFunction\n+    assert type(w[1]) == UndefinedFunction\n+\n+    # Test with other types and dimensions\n+    a, b = symbols((('a:3',),), cls=Function)\n+    assert type(a[0]) == UndefinedFunction\n+    assert len(a) == 3\n+    assert type(b) == tuple  # Ensure b is an empty tuple\n+\n+    # Verify that no Symbols are created accidentally\n+    s = symbols('s', cls=Function)\n+    assert isinstance(s, UndefinedFunction)\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n from sympy.core.sympify import sympify  # can't import as S yet\n+from sympy.core.function import Function, UndefinedFunction\n from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n \n from sympy.testing.pytest import raises\n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..2953d2e 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -182,6 +182,34 @@ def execute_gamma_simplify_tests_for_function(tfunc, D):\n     st = tfunc(t)\n     assert _is_tensor_eq(st, t)\n \n+def test_kahane_leading_gamma_matrix_bug():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n+    \n+    # Original failing test cases\n+    t = G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    t = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+    \n+    # Additional test cases to ensure leading terms are not reversed\n+    t = G(mu)*G(nu)*G(-nu)*G(-mu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(16*G(rho)*G(sigma))\n+\n+    t = G(rho)*G(sigma)*G(mu)*G(nu)*G(-nu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(16*G(rho)*G(sigma))\n+    \n+    t = G(mu)*G(nu)*G(rho)*G(-rho)*G(-nu)*G(-mu)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(8*G(sigma))\n+\n+    t = G(sigma)*G(mu)*G(nu)*G(rho)*G(-rho)*G(-nu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(8*G(sigma))\n \n def test_kahane_algorithm():\n     # Wrap this function to convert to and from TIDS:\n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..858d180 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -30,6 +30,10 @@ def test_issue_10326():\n     assert Contains(-oo, Interval(-oo, oo)) == False\n \n \n+from sympy import S, Symbol, Piecewise\n+from sympy.sets import Contains, FiniteSet\n+from sympy.testing.pytest import raises\n+\n def test_binary_symbols():\n     x = Symbol('x')\n     y = Symbol('y')\n@@ -45,7 +49,17 @@ def test_as_set():\n     # containment in a Set -- rewriting as a Set is not yet implemented\n     raises(NotImplementedError, lambda:\n            Contains(x, FiniteSet(y)).as_set())\n+    raises(NotImplementedError, lambda:\n+           Contains(x, S.Integers).as_set())\n+    raises(NotImplementedError, lambda:\n+           Contains(x, S.Reals).as_set())\n+\n+def test_piecewise_contains():\n+    x = Symbol('x')\n+    # Verify that Contains when used in Piecewise raises an error.\n+    raises(AttributeError, lambda:\n+           Piecewise((6, Contains(x, S.Reals)), (7, True)))\n \n def test_type_error():\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..1d87204 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -541,7 +541,28 @@ def test_issue_20288():\n     assert SI._collect_factor_and_dimension(expr) == (1 + E, Dimension(1))\n \n \n-def test_prefixed_property():\n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units.systems.si import SI\n+    from sympy import exp\n+    from sympy.physics.units import Quantity\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n     assert not day.is_prefixed\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..60a8365 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -548,7 +548,27 @@ def test_issue_24062():\n     R = Quantity('R')\n     C = Quantity('C')\n     T = Quantity('T')\n-    SI.set_quantity_dimension(R, impedance)\n+from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+from sympy.physics.units.systems.si import SI\n+\n+def test_issue_24211():\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+    \n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+    \n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1 * T1 + V1\n+    # Check that this does not raise a ValueError\n+    factor, dim = SI._collect_factor_and_dimension(expr)\n+    assert dim == SI.get_dimension_system().get_dimension(velocity)\n+    assert factor == 1 * meter / second + 1 * meter / second\n     SI.set_quantity_dimension(C, capacitance)\n     SI.set_quantity_dimension(T, time)\n     R.set_global_relative_scale_factor(1, ohm)\n",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..5476c2d 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,3 +1,4 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n@@ -51,6 +52,18 @@ def test_homomorphism():\n     assert not T.is_isomorphism()\n     assert T.invert(p**3) == p**3\n \n+    # Test case for the issue with inverted generators\n+    D3 = DihedralGroup(3)\n+    T = homomorphism(D3, D3, D3.generators, D3.generators)\n+    assert T.is_isomorphism()\n+\n+    # Additional test to further verify the fix\n+    a = Permutation(0, 1, 2)\n+    b = Permutation(0, 1)\n+    G = PermutationGroup([a, b])\n+    assert homomorphism(G, G, [a, b], [a, b]).is_isomorphism()\n+    assert homomorphism(G, G, [a, b], [b, a]).is_isomorphism()\n+\n     T2 = homomorphism(F, P, [F.generators[0]], P.generators)\n     T = T.compose(T2)\n     assert T.domain == F\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..8865bd9 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -267,6 +267,26 @@ def test_PolyElement_as_expr():\n \n     raises(ValueError, lambda: f.as_expr(X))\n \n+    # New test cases for as_expr with different symbols\n+    R, a, b, c = ring(\"a,b,c\", ZZ)\n+    f = 2*a**2 + 3*b + c\n+\n+    P, Q, R = symbols(\"p,q,r\")\n+    h = 2*P**2 + 3*Q + R\n+\n+    assert f.as_expr(P, Q, R) == h\n+\n+    # Test for more symbols than necessary\n+    S = symbols(\"s\")\n+    raises(ValueError, lambda: f.as_expr(P, Q, R, S))\n+\n+    # Test for no symbols provided, should use default symbols\n+    assert f.as_expr() == f.as_expr(*R.symbols)\n+\n+    # Test edge case of no generators\n+    R, = ring(\"\", ZZ)\n+    assert R(5).as_expr() == 5\n+\n     R, = ring(\"\", ZZ)\n     assert R(3).as_expr() == 3\n \n",
  "sympy__sympy-24661": "diff --git a/sympy/parsing/tests/test_sympy_parser.py b/sympy/parsing/tests/test_sympy_parser.py\nindex 3723931..696c9e3 100644\n--- a/sympy/parsing/tests/test_sympy_parser.py\n+++ b/sympy/parsing/tests/test_sympy_parser.py\n@@ -266,8 +266,23 @@ def test_match_parentheses_implicit_multiplication():\n def test_convert_equals_signs():\n     transformations = standard_transformations + \\\n                         (convert_equals_signs, )\n-    x = Symbol('x')\n-    y = Symbol('y')\n+def test_issue_24288():\n+    inputs = {\n+        \"1 < 2\": Lt(1, 2, evaluate=False),\n+        \"1 <= 2\": Le(1, 2, evaluate=False),\n+        \"1 > 2\": Gt(1, 2, evaluate=False),\n+        \"1 >= 2\": Ge(1, 2, evaluate=False),\n+        \"1 != 2\": Ne(1, 2, evaluate=False),\n+        \"1 == 2\": Eq(1, 2, evaluate=False),\n+        \"x < y\": Lt(Symbol('x'), Symbol('y'), evaluate=False),\n+        \"x <= y\": Le(Symbol('x'), Symbol('y'), evaluate=False),\n+        \"x > y\": Gt(Symbol('x'), Symbol('y'), evaluate=False),\n+        \"x >= y\": Ge(Symbol('x'), Symbol('y'), evaluate=False),\n+        \"x != y\": Ne(Symbol('x'), Symbol('y'), evaluate=False),\n+        \"x == y\": Eq(Symbol('x'), Symbol('y'), evaluate=False),\n+    }\n+    for text, result in inputs.items():\n+        assert parse_expr(text, evaluate=False) == result\n     assert parse_expr(\"1*2=x\", transformations=transformations) == Eq(2, x)\n     assert parse_expr(\"y = x\", transformations=transformations) == Eq(y, x)\n     assert parse_expr(\"(2*y = x) = False\",\n",
  "astropy__astropy-14369": "diff --git a/astropy/units/tests/test_format.py b/astropy/units/tests/test_format.py\nindex 062b5f4..73ada9b 100644\n--- a/astropy/units/tests/test_format.py\n+++ b/astropy/units/tests/test_format.py\n@@ -35,6 +35,11 @@ from astropy.units.utils import is_effectively_unity\n         ([\"mag(ct/s)\"], u.MagUnit(u.ct / u.s)),\n         ([\"dex\"], u.dex),\n         ([\"dex(cm s**-2)\", \"dex(cm/s2)\"], u.DexUnit(u.cm / u.s**2)),\n+        # Test cases for MRT composite units parsing issue\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.W / (u.m * u.kpc**2))),\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.J / (u.s * u.kpc**2))),\n+        ([\"km/s/Mpc\"], u.km / u.s / u.Mpc),\n+        ([\"km/(s.Mpc)\"], u.km / u.s / u.Mpc),\n     ],\n )\n def test_unit_grammar(strings, unit):\n@@ -68,6 +73,11 @@ def test_unit_grammar_fail(string):\n         ([\"2.54cm\"], u.Unit(u.cm * 2.54)),\n         ([\"20%\"], 0.20 * u.dimensionless_unscaled),\n         ([\"10+9\"], 1.0e9 * u.dimensionless_unscaled),\n+        # Additional composite unit test cases\n+        ([\"1.5\u00d710+11/m\"], u.Unit(1.5e11 / u.m)),\n+        ([\"/s\"], u.s**-1),\n+        ([\"km/s.Mpc-1\"], u.km / (u.s * u.Mpc)),\n+        ([\"/s.Mpc\"], 1 / (u.s * u.Mpc)),\n         ([\"2x10-9\"], 2.0e-9 * u.dimensionless_unscaled),\n         ([\"---\"], u.dimensionless_unscaled),\n         ([\"ma\"], u.ma),\n",
  "astropy__astropy-14598": "",
  "django__django-11299": "",
  "django__django-11477": "diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex e4898b6..d0990dc 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -163,6 +163,28 @@ class URLTranslationTests(URLTestCaseBase):\n             self.assertEqual(translate_url('/nl/gebruikers/', 'en'), '/en/users/')\n             self.assertEqual(translation.get_language(), 'nl')\n \n+    def test_translate_url_with_optional_named_groups(self):\n+        # Test URLs with optional named groups, ensuring they translate correctly\n+        with translation.override('en'):\n+            # The optional 'optional' group is missing here\n+            self.assertEqual(translate_url('/en/with-arguments/regular-argument/', 'nl'), '/nl/with-arguments/regular-argument/')\n+            # The optional 'optional' group is present\n+            self.assertEqual(translate_url('/en/with-arguments/regular-argument/optional.html', 'nl'), '/nl/with-arguments/regular-argument/optional.html')\n+\n+    def test_re_path_with_optional_parameters(self):\n+        # Test re_path with optional parameters\n+        for url, kwargs in (\n+            ('/regex_optional/1/2/', {'arg1': '1', 'arg2': '2'}),\n+            ('/regex_optional/1/', {'arg1': '1'}),\n+        ):\n+            with self.subTest(url=url):\n+                match = resolve(url)\n+                self.assertEqual(match.url_name, 'regex_optional')\n+                self.assertEqual(match.kwargs, kwargs)\n+                self.assertEqual(\n+                    match.route,\n+                    r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?',\n+                )\n \n class URLNamespaceTests(URLTestCaseBase):\n     \"\"\"\n",
  "django__django-12273": "diff --git a/tests/model_inheritance_regress/tests.py b/tests/model_inheritance_regress/tests.py\nindex d79faca..0f2e390 100644\n--- a/tests/model_inheritance_regress/tests.py\n+++ b/tests/model_inheritance_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Regression tests for Model inheritance behavior.\n \"\"\"\n@@ -8,7 +9,9 @@ from unittest import expectedFailure\n from django import forms\n from django.test import TestCase\n \n+from django.db import models\n from .models import (\n+    Item, Derived, # Import the models needed for the new test cases\n     ArticleWithAuthor, BachelorParty, BirthdayParty, BusStation, Child,\n     DerivedM, InternalCertificationAudit, ItalianRestaurant, M2MChild,\n     MessyBachelorParty, ParkingLot, ParkingLot3, ParkingLot4A, ParkingLot4B,\n@@ -17,7 +20,33 @@ from .models import (\n )\n \n \n-class ModelInheritanceTest(TestCase):\n+class SaveTestCase(TestCase):\n+    def setUp(self):\n+        self.derived = Derived.objects.create(f=True)  # create the first object\n+        item = Item.objects.get(pk=self.derived.pk)\n+        obj1 = item.derived\n+        obj1.reset()\n+        obj1.save()  # the first object is overwritten\n+\n+    def test_f_true(self):\n+        obj = Item.objects.get(pk=self.derived.pk)\n+        self.assertTrue(obj.f)\n+\n+    def test_reset_creates_new_instance(self):\n+        # Ensure a new instance is created when resetting the primary key.\n+        original_count = Derived.objects.count()\n+        derived_instance = Derived.objects.create(f=True)\n+        derived_instance.reset()\n+        derived_instance.save()\n+        new_count = Derived.objects.count()\n+        self.assertEqual(new_count, original_count + 1)\n+\n+    def test_reset_fields(self):\n+        # Ensure fields are reset properly\n+        derived_instance = Derived.objects.create(f=True)\n+        derived_instance.reset()\n+        self.assertIsNone(derived_instance.pk)\n+        self.assertFalse(derived_instance.f)\n     def test_model_inheritance(self):\n         # Regression for #7350, #7202\n         # When you create a Parent object with a specific reference to an\n",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..52f5ee9 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -604,8 +604,27 @@ class DeletionTests(TestCase):\n                 signal.disconnect(receiver, sender=Referrer)\n \n \n+from django.test import TestCase, override_settings\n+from myapp.models import User, Avatar, Origin, Referrer, Child, Parent, M2MTo, M2MFrom\n+from django.db import connection\n+from django.db.models.signals import signal\n+\n class FastDeleteTests(TestCase):\n \n+    def test_fast_delete_all(self):\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        # No subqueries should be used when performing a full delete.\n+        self.assertNotIn('SELECT', sql)\n+\n+    def test_fast_delete_all_with_subquery(self):\n+        # This test ensures that the deletion doesn't use a subquery.\n+        with self.assertNumQueries(1) as ctx:\n+            Avatar.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        self.assertNotIn('SELECT', sql)\n+\n     def test_fast_delete_fk(self):\n         u = User.objects.create(\n             avatar=Avatar.objects.create()\n@@ -702,4 +721,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..d507884 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from decimal import Decimal\n \n@@ -25,7 +26,26 @@ class DecimalFieldTests(TestCase):\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n \n-    def test_default(self):\n+    def test_invalid_value(self):\n+        field = models.DecimalField(max_digits=4, decimal_places=2)\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        tests = [\n+            (),\n+            [],\n+            {},\n+            set(),\n+            object(),\n+            complex(),\n+            'non-numeric string',\n+            b'non-numeric byte-string',\n+            True,\n+            False,\n+            None,\n+        ]\n+        for value in tests:\n+            with self.subTest(value=value):\n+                with self.assertRaisesMessage(ValidationError, msg % (value,)):\n+                    field.clean(value, None)\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n \n",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..43dad55 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n \n@@ -5,7 +6,7 @@ import django\n from django.db import models\n from django.test import TestCase\n \n-from .models import Container, Event, Group, Happening, M2MModel, MyEvent\n+from .models import Container, Event, Group, Happening, M2MModel, MyEvent, Toy\n \n \n class PickleabilityTestCase(TestCase):\n@@ -260,7 +261,37 @@ class PickleabilityTestCase(TestCase):\n         self.assert_pickles(event.edition_set.order_by('event'))\n \n \n-class InLookupTests(TestCase):\n+class ToyPicklingTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        Toy.objects.create(name='foo', price=10, material='wood')\n+        Toy.objects.create(name='bar', price=20, material='plastic')\n+        Toy.objects.create(name='baz', price=100, material='wood')\n+\n+    def test_pickle_values_queryset(self):\n+        prices = Toy.objects.values('material').annotate(total_price=models.Sum('price'))\n+        self.assertEqual(type(prices[0]), dict)\n+        reloaded_prices = Toy.objects.all()\n+        reloaded_prices.query = pickle.loads(pickle.dumps(prices.query))\n+        # After unpickling, the type should remain 'dict'\n+        self.assertEqual(type(reloaded_prices[0]), dict)\n+        # Check if the queryset returns expected results\n+        expected_results = [\n+            {'material': 'wood', 'total_price': 110},\n+            {'material': 'plastic', 'total_price': 20},\n+        ]\n+        self.assertEqual(list(reloaded_prices), expected_results)\n+\n+    def test_pickle_values_list_queryset(self):\n+        prices_list = Toy.objects.values_list('material', flat=True).annotate(total_price=models.Sum('price'))\n+        self.assertEqual(type(prices_list[0]), str)\n+        reloaded_prices_list = Toy.objects.all()\n+        reloaded_prices_list.query = pickle.loads(pickle.dumps(prices_list.query))\n+        # After unpickling, the type should remain 'str' for each entry\n+        self.assertEqual(type(reloaded_prices_list[0]), str)\n+        # Check if the queryset returns expected results\n+        expected_results_list = ['wood', 'plastic']\n+        self.assertEqual(list(reloaded_prices_list), expected_results_list)\n \n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-13449": "diff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\nindex 3f59cdf..d9c7568 100644\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -11,4 +11,5 @@ class Employee(models.Model):\n     department = models.CharField(max_length=40, blank=False, null=False)\n     hire_date = models.DateField(blank=False, null=False)\n     age = models.IntegerField(blank=False, null=False)\n-    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\n",
  "django__django-13512": "diff --git a/tests/forms_tests/field_tests/test_jsonfield.py b/tests/forms_tests/field_tests/test_jsonfield.py\nindex e31bff4..ea94212 100644\n--- a/tests/forms_tests/field_tests/test_jsonfield.py\n+++ b/tests/forms_tests/field_tests/test_jsonfield.py\n@@ -24,6 +24,15 @@ class JSONFieldTest(SimpleTestCase):\n         with self.assertRaisesMessage(ValidationError, 'Enter a valid JSON.'):\n             field.clean('{some badly formed: json}')\n \n+    def test_unicode_handling(self):\n+        field = JSONField()\n+        # Test with Chinese characters\n+        self.assertEqual(field.prepare_value({'a': '\u4e2d\u56fd'}), '{\"a\": \"\u4e2d\u56fd\"}')\n+        # Test with emojis\n+        self.assertEqual(field.prepare_value({'emoji': '\ud83d\ude00\ud83d\udc31'}), '{\"emoji\": \"\ud83d\ude00\ud83d\udc31\"}')\n+        # Test with a combination of different Unicode characters\n+        self.assertEqual(field.prepare_value(['\u4f60\u597d\uff0c\u4e16\u754c', 'ja\u017a\u0144']), '[\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]')\n+\n     def test_prepare_value(self):\n         field = JSONField()\n         self.assertEqual(field.prepare_value({'a': 'b'}), '{\"a\": \"b\"}')\n",
  "django__django-14404": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 8fb91af..c84470a 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -6602,7 +6602,36 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         response = self.client.get(known_url[:-1])\n         self.assertRedirects(response, known_url, status_code=301, target_status_code=403)\n \n-    @override_settings(APPEND_SLASH=True)\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/prefix/')\n+    def test_missing_slash_with_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=False, FORCE_SCRIPT_NAME='/prefix/')\n+    def test_no_append_slash_with_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertEqual(response.status_code, 404)\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n         user = User.objects.create_user(\n             username='user',\n@@ -6628,7 +6657,36 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         response = self.client.get(known_url[:-1])\n         self.assertEqual(response.status_code, 404)\n \n-    @override_settings(APPEND_SLASH=True)\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/prefix/')\n+    def test_missing_slash_with_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=False, FORCE_SCRIPT_NAME='/prefix/')\n+    def test_no_append_slash_with_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertEqual(response.status_code, 404)\n     def test_single_model_no_append_slash(self):\n         superuser = User.objects.create_user(\n             username='staff',\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..51d7583 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -690,8 +690,34 @@ class WriterTests(SimpleTestCase):\n         # Just make sure it runs for now, and that things look alright.\n         result = self.safe_exec(output)\n         self.assertIn(\"Migration\", result)\n+    def test_serialize_mixin_and_abstract_model(self):\n+        \"\"\"\n+        Test serialization of a model that uses a mixin and an abstract base model.\n+        This should ensure that 'models' is correctly imported in the migration file.\n+        \"\"\"\n+        fields = {\n+            'name': models.TextField(primary_key=True)\n+        }\n+\n+        class MyBaseModel(models.Model):\n+            class Meta:\n+                abstract = True\n+\n+        class MyMixin:\n+            pass\n \n-    def test_migration_path(self):\n+        migration = type(\"Migration\", (migrations.Migration,), {\n+            \"operations\": [\n+                migrations.CreateModel(\"MyModel\", tuple(fields.items()), bases=(MyMixin, MyBaseModel)),\n+            ],\n+            \"dependencies\": [],\n+        })\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        # Check that 'models' is imported\n+        self.assertIn(\"from django.db import models\", output)\n+        # Ensure 'MyMixin' and 'MyBaseModel' are correctly serialized\n+        self.assertIn(\"(MyMixin, models.Model)\", output)\n         test_apps = [\n             'migrations.migrations_test_apps.normal',\n             'migrations.migrations_test_apps.with_package_model',\n",
  "django__django-15375": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1d4ef56..f5ed796 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1630,6 +1630,21 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertAlmostEqual(result['value'], Decimal('61.72'), places=2)\n \n+    def test_aggregation_default_after_annotation_with_sum(self):\n+        # Test using Sum with a default value after annotate. This should not crash.\n+        result = Book.objects.annotate(idx=F('id')).aggregate(total=Sum('id', default=0))\n+        self.assertEqual(result['total'], Book.objects.aggregate(Sum('id'))['id__sum'])\n+\n+    def test_aggregation_default_after_annotation_with_average(self):\n+        # Test using Avg with a default value after annotate.\n+        result = Book.objects.annotate(idx=F('id')).aggregate(average=Avg('rating', default=0))\n+        self.assertAlmostEqual(result['average'], Book.objects.aggregate(Avg('rating'))['rating__avg'], places=6)\n+\n+    def test_aggregation_default_after_annotation_with_count(self):\n+        # Test using Count with a default value after annotate.\n+        result = Book.objects.annotate(idx=F('id')).aggregate(count=Count('id', default=0))\n+        self.assertEqual(result['count'], Book.objects.aggregate(Count('id'))['id__count'])\n+\n     def test_exists_none_with_aggregate(self):\n         qs = Book.objects.all().annotate(\n             count=Count('id'),\n@@ -1642,4 +1657,4 @@ class AggregateTestCase(TestCase):\n             count=Count('id'),\n             exists=Exists(Author.objects.extra(where=['1=0'])),\n         )\n-        self.assertEqual(len(qs), 6)\n+        self.assertEqual(len(qs), 6)\n",
  "django__django-15695": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 99db46a..8a3be1c 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -2984,7 +2984,14 @@ class OperationTests(OperationTestBase):\n         with connection.schema_editor() as editor:\n             operation.database_forwards(app_label, editor, project_state, new_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n-        # Reverse is a no-op.\n+        # Reverse operation should restore the old auto-generated name.\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        # The index should revert to its old name.\n+        # Assuming `old_pony_test_idx` is the old auto-generated name.\n+        self.assertIndexNameExists(table_name, \"old_pony_test_idx\")\n+\n+        # Re-apply renaming.\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             operation.database_backwards(app_label, editor, new_state, project_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n",
  "django__django-15732": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 42e02c2..e4da3c0 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -595,6 +595,99 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n         )\n \n \n+from django.db import connection\n+from django.db.migrations.state import ProjectState\n+from django.db import migrations, models\n+from django.test import TestCase\n+from django.test.utils import skipUnlessDBFeature\n+\n+class TestRemoveUniqueTogether(TestCase):\n+\n+    @skipUnlessDBFeature(\"allows_multiple_constraints_on_same_fields\")\n+    def test_remove_unique_together_on_pk_field(self):\n+        app_label = \"test_rutopkf\"\n+        project_state = self.apply_operations(\n+            app_label,\n+            ProjectState(),\n+            operations=[\n+                migrations.CreateModel(\n+                    \"Pony\",\n+                    fields=[(\"id\", models.AutoField(primary_key=True))],\n+                    options={\"unique_together\": {(\"id\",)}},\n+                ),\n+            ],\n+        )\n+        table_name = f\"{app_label}_pony\"\n+        pk_constraint_name = f\"{table_name}_pkey\"\n+        unique_together_constraint_name = f\"{table_name}_id_fb61f881_uniq\"\n+        self.assertConstraintExists(table_name, pk_constraint_name, value=False)\n+        self.assertConstraintExists(\n+            table_name, unique_together_constraint_name, value=False\n+        )\n+\n+        new_state = project_state.clone()\n+        operation = migrations.AlterUniqueTogether(\"Pony\", set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertConstraintExists(table_name, pk_constraint_name, value=False)\n+        self.assertConstraintNotExists(table_name, unique_together_constraint_name)\n+\n+    @skipUnlessDBFeature(\"allows_multiple_constraints_on_same_fields\")\n+    def test_remove_unique_together_on_unique_field(self):\n+        app_label = \"test_rutouf\"\n+        project_state = self.apply_operations(\n+            app_label,\n+            ProjectState(),\n+            operations=[\n+                migrations.CreateModel(\n+                    \"Pony\",\n+                    fields=[\n+                        (\"id\", models.AutoField(primary_key=True)),\n+                        (\"name\", models.CharField(max_length=30, unique=True)),\n+                    ],\n+                    options={\"unique_together\": {(\"name\",)}},\n+                ),\n+            ],\n+        )\n+        table_name = f\"{app_label}_pony\"\n+        unique_constraint_name = f\"{table_name}_name_key\"\n+        unique_together_constraint_name = f\"{table_name}_name_694f3b9f_uniq\"\n+        self.assertConstraintExists(table_name, unique_constraint_name, value=False)\n+        self.assertConstraintExists(\n+            table_name, unique_together_constraint_name, value=False\n+        )\n+\n+        new_state = project_state.clone()\n+        operation = migrations.AlterUniqueTogether(\"Pony\", set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertConstraintExists(table_name, unique_constraint_name, value=False)\n+        self.assertConstraintNotExists(table_name, unique_together_constraint_name)\n+\n+    def assertConstraintExists(self, table_name, constraint_name, value=True):\n+        with connection.cursor() as cursor:\n+            cursor.execute(\n+                \"SELECT COUNT(*) FROM information_schema.table_constraints \"\n+                \"WHERE table_name=%s AND constraint_name=%s\",\n+                [table_name, constraint_name],\n+            )\n+            if value:\n+                self.assertEqual(cursor.fetchone()[0], 1)\n+            else:\n+                self.assertEqual(cursor.fetchone()[0], 0)\n+\n+    def assertConstraintNotExists(self, table_name, constraint_name):\n+        self.assertConstraintExists(table_name, constraint_name, value=False)\n+\n+    def apply_operations(self, app_label, project_state, operations):\n+        with connection.schema_editor() as editor:\n+            for operation in operations:\n+                operation.state_forwards(app_label, project_state)\n+                operation.database_forwards(app_label, editor, project_state, project_state)\n+        return project_state\n+\n class AlterUniqueTogether(AlterTogetherOptionOperation):\n     \"\"\"\n     Change the value of unique_together to the target one.\n",
  "django__django-15916": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex cc5e08c..c5a9db3 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -3497,6 +3497,48 @@ class FormFieldCallbackTests(SimpleTestCase):\n             )\n \n \n+class MetaFormFieldCallbackTest(TestCase):\n+    def test_meta_formfield_callback(self):\n+        def custom_callback(db_field, **kwargs):\n+            formfield = db_field.formfield(**kwargs)\n+            formfield.widget = forms.TextInput(attrs={'class': 'custom'})\n+            return formfield\n+\n+        class TestModel(models.Model):\n+            field = models.CharField(max_length=100)\n+\n+        class BaseForm(forms.ModelForm):\n+            class Meta:\n+                model = TestModel\n+                fields = '__all__'\n+                formfield_callback = custom_callback\n+\n+        NewForm = modelform_factory(model=TestModel, form=BaseForm)\n+\n+        for name, field in NewForm.base_fields.items():\n+            self.assertIsInstance(field.widget, forms.TextInput)\n+            self.assertEqual(field.widget.attrs.get('class'), 'custom')\n+\n+    def test_formfield_callback_inheritance(self):\n+        def custom_callback(db_field, **kwargs):\n+            formfield = db_field.formfield(**kwargs)\n+            formfield.widget = forms.TextInput(attrs={'class': 'custom-inherited'})\n+            return formfield\n+\n+        class ParentForm(forms.ModelForm):\n+            class Meta:\n+                model = TestModel\n+                fields = '__all__'\n+                formfield_callback = custom_callback\n+\n+        class ChildForm(ParentForm):\n+            pass\n+\n+        child_form_instance = ChildForm()\n+        for name, field in child_form_instance.fields.items():\n+            self.assertIsInstance(field.widget, forms.TextInput)\n+            self.assertEqual(field.widget.attrs.get('class'), 'custom-inherited')\n+\n class LocalizedModelFormTest(TestCase):\n     def test_model_form_applies_localize_to_some_fields(self):\n         class PartiallyLocalizedTripleForm(forms.ModelForm):\n",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..95c519c 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -5,7 +5,8 @@ import re\n \n from django.core import serializers\n from django.core.serializers.base import DeserializationError\n-from django.core.serializers.json import DjangoJSONEncoder\n+from django.core.serializers import serialize\n+from django.db import models\n from django.db import models\n from django.test import SimpleTestCase, TestCase, TransactionTestCase\n from django.test.utils import isolate_apps\n@@ -15,7 +16,34 @@ from .models import Score\n from .tests import SerializersTestBase, SerializersTransactionTestBase\n \n \n+class TestTagMaster(models.Model):\n+    name = models.CharField(max_length=120)\n+\n+class TestTagManager(models.Manager):\n+    def get_queryset(self):\n+        return super().get_queryset().select_related(\"master\")\n+\n+class TestTag(models.Model):\n+    name = models.CharField(max_length=120)\n+    master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)\n+    objects = TestTagManager()\n+\n+class Test(models.Model):\n+    name = models.CharField(max_length=120)\n+    tags = models.ManyToManyField(TestTag, blank=True)\n+\n class JsonSerializerTestCase(SerializersTestBase, TestCase):\n+    def test_m2m_custom_manager_serialization(self):\n+        tag_master = TestTagMaster.objects.create(name=\"master\")\n+        tag = TestTag.objects.create(name=\"tag\", master=tag_master)\n+        test = Test.objects.create(name=\"test\")\n+        test.tags.add(tag)\n+        \n+        # Test serialization\n+        json_data = serializers.serialize(\"json\", [test])\n+        self.assertIn('\"model\": \"serializers.test\"', json_data)\n+        self.assertIn('\"fields\": {\"name\": \"test\", \"tags\": [', json_data)\n+        self.assertIn('\"name\": \"tag\"', json_data)\n     serializer_name = \"json\"\n     pkless_str = \"\"\"[\n     {\n",
  "matplotlib__matplotlib-23476": "",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 87375f2..54f5949 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6587,6 +6587,11 @@ def test_integrate(dask):\n \n     # along y\n     actual = da.integrate(\"y\")\n+    assert_allclose(actual, da.integrate(coord=\"y\"))  # Test if coord argument works\n+\n+    # Test if using dim raises a warning\n+    with pytest.warns(FutureWarning):\n+        da.integrate(dim=\"y\")\n     expected_y = xr.DataArray(\n         np.trapz(da, da[\"y\"], axis=1),\n         dims=[\"x\"],\n",
  "pydata__xarray-4094": "",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..f19e5c2 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -130,8 +130,32 @@ def test_regex_error(capsys: CaptureFixture) -> None:\n     )\n     assert assertString in output.err\n \n+import re\n+from typing import Any\n+from pylint.lint import Run\n+\n+CSV_REGEX_COMMA_CASES = [\n+    (\"foo\", [\"foo\"]),\n+    (\"foo,bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar{1,3}\", [\"foo\", \"bar{1,3}\"]),\n+    (\"(foo{1,3})\", [\"(foo{1,3})\"]),  # Test case for the initial issue with commas in regex\n+]\n+\n+@pytest.mark.parametrize(\"in_string,expected\", CSV_REGEX_COMMA_CASES)\n+def test_csv_regex_comma_in_quantifier(in_string: str, expected: list[str]) -> None:\n+    \"\"\"Check that we correctly parse a comma-separated regex when there are one\n+    or more commas within quantifier expressions.\"\"\"\n+    \n+    def _template_run(in_string: str) -> list[re.Pattern[Any]]:\n+        r = Run(\n+            [str(EMPTY_MODULE), rf\"--bad-names-rgxs={in_string}\"],\n+            exit=False,\n+        )\n+        bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs\n+        return bad_names_rgxs\n \n-def test_csv_regex_error(capsys: CaptureFixture) -> None:\n+    assert _template_run(in_string) == [re.compile(regex) for regex in expected]\n     \"\"\"Check that we correctly error when an option is passed and one\n     of its comma-separated regular expressions values is an invalid regular expression.\n     \"\"\"\n",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..3bfd2d6 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1156,6 +1156,9 @@ def test_summary_list_after_errors(testdir):\n     )\n \n \n+import pytest\n+from _pytest.main import ExitCode\n+\n def test_importorskip():\n     with pytest.raises(\n         pytest.skip.Exception,\n@@ -1184,4 +1187,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "diff --git a/testing/test_mark_expression.py b/testing/test_mark_expression.py\nindex 10b71e9..8e4a80f 100644\n--- a/testing/test_mark_expression.py\n+++ b/testing/test_mark_expression.py\n@@ -133,6 +133,9 @@ def test_syntax_errors(expr: str, column: int, message: str) -> None:\n         \"if\",\n         \"else\",\n         \"while\",\n+        \"None\",\n+        \"True\",\n+        \"False\",\n     ),\n )\n def test_valid_idents(ident: str) -> None:\n",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..f576a4e 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,38 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+\n+def test_feature_union_with_pandas_output_and_custom_transformer():\n+    \"\"\"Test FeatureUnion with custom transformer and pandas output.\"\"\"\n+    import pandas as pd\n+    from sklearn.pipeline import FeatureUnion\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn import set_config\n+    \n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y: pd.Series | None = None, **kwargs):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y: pd.Series | None = None) -> pd.DataFrame:\n+            return pd.DataFrame(X[\"value\"].groupby(X[\"date\"]).sum())\n+\n+    # Set pandas output\n+    set_config(transform_output=\"pandas\")\n+    union = FeatureUnion([(\"my_transformer\", MyTransformer())])\n+    \n+    result = union.fit_transform(data)\n+\n+    # The result should be a pandas DataFrame\n+    assert isinstance(result, pd.DataFrame), \"The output should be a DataFrame\"\n+    # Check if the transformation was applied correctly\n+    expected_result = pd.DataFrame({'value': [240] * 4}, index=pd.Index(\n+        [pd.Timestamp(\"2020-01-01\"), pd.Timestamp(\"2020-01-02\"),\n+         pd.Timestamp(\"2020-01-03\"), pd.Timestamp(\"2020-01-04\")],\n+        name=\"date\"))\n+    pd.testing.assert_frame_equal(result, expected_result)\n",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex f07be18..74655ed 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -11,6 +11,11 @@\n import pytest\n \n from sphinx import addnodes\n+from sphinx.util.docutils import SphinxDirective\n+from sphinx.testing.util import assert_node\n+from sphinx.addnodes import pending_xref\n+from sphinx.testing.fixtures import test_params, make_app\n+from sphinx.ext.autodoc import mock\n \n \n @pytest.mark.sphinx('dummy', testroot='ext-autodoc')\n@@ -30,4 +35,21 @@ def test_autodoc(app, status, warning):\n my_name\n \n alias of bug2437.autodoc_dummy_foo.Foo\"\"\"\n-    assert warning.getvalue() == ''\n+    assert warning.getvalue() == ''\n+\n+@pytest.mark.sphinx('html', testroot='autodoc_typehints_none')\n+def test_autodoc_typehints(app, status, warning):\n+    app.builder.build_all()\n+    content = (app.outdir / 'index.html').read_text()\n+\n+    # Verify the 'description' mode outputs None as a link\n+    app.config.autodoc_typehints = 'description'\n+    app.builder.build_all()\n+    content = (app.outdir / 'index.html').read_text()\n+    assert '<a class=\"reference external\" href=\"https://docs.python.org/3/library/constants.html#None\" title=\"(in Python v3.8)\">None</a>' in content\n+\n+    # Verify the 'signature' mode does not output None as a link\n+    app.config.autodoc_typehints = 'signature'\n+    app.builder.build_all()\n+    content = (app.outdir / 'index.html').read_text()\n+    assert '<a class=\"reference external\" href=\"https://docs.python.org/3/library/constants.html#None\" title=\"(in Python v3.8)\">None</a>' not in content\n",
  "sphinx-doc__sphinx-8056": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 1d6a8cf..cd950c0 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1332,6 +1332,26 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n \"\"\"\n         self.assertEqual(expected, actual)\n \n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_rendering(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like\n+            Input arrays, description of `x1`, `x2`.\n+        x3, x4 : array_like, optional\n+            Additional input arrays, description of `x3`, `x4`.\n+        \"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :Parameters: * **x1, x2** (:class:`array_like`) -- Input arrays, description of `x1`, `x2`.\n+                     * **x3, x4** (:class:`array_like`, *optional*) -- Additional input arrays, description of `x3`, `x4`.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n         config = Config(napoleon_use_param=True)\n         actual = str(NumpyDocstring(docstring, config))\n         expected = \"\"\"\\\n@@ -1355,6 +1375,26 @@ param1 : MyClass instance\n \"\"\"\n         self.assertEqual(expected, actual)\n \n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_rendering(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like\n+            Input arrays, description of `x1`, `x2`.\n+        x3, x4 : array_like, optional\n+            Additional input arrays, description of `x3`, `x4`.\n+        \"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :Parameters: * **x1, x2** (:class:`array_like`) -- Input arrays, description of `x1`, `x2`.\n+                     * **x3, x4** (:class:`array_like`, *optional*) -- Additional input arrays, description of `x3`, `x4`.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n         config = Config(napoleon_use_param=True)\n         actual = str(NumpyDocstring(dedent(docstring), config))\n         expected = \"\"\"\\\n@@ -1923,6 +1963,26 @@ definition_after_normal_text : int\n                                          first line\n :type definition_after_normal_text: :class:`int`\n \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_rendering(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like\n+            Input arrays, description of `x1`, `x2`.\n+        x3, x4 : array_like, optional\n+            Additional input arrays, description of `x3`, `x4`.\n+        \"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :Parameters: * **x1, x2** (:class:`array_like`) -- Input arrays, description of `x1`, `x2`.\n+                     * **x3, x4** (:class:`array_like`, *optional*) -- Additional input arrays, description of `x3`, `x4`.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n         config = Config(napoleon_use_param=True)\n         actual = str(NumpyDocstring(docstring, config))\n         self.assertEqual(expected, actual)\n",
  "sphinx-doc__sphinx-8551": "",
  "sphinx-doc__sphinx-8593": "diff --git a/tests/roots/test-ext-autodoc/target/private.py b/tests/roots/test-ext-autodoc/target/private.py\nindex 677b469..3a14b98 100644\n--- a/tests/roots/test-ext-autodoc/target/private.py\n+++ b/tests/roots/test-ext-autodoc/target/private.py\n@@ -1,3 +1,6 @@\n+\n+PUBLIC_CONSTANT = None  #: :meta public:\n+\n def private_function(name):\n     \"\"\"private_function is a docstring().\n \n@@ -8,4 +11,4 @@ def _public_function(name):\n     \"\"\"public_function is a docstring().\n \n     :meta public:\n-    \"\"\"\n+    \"\"\"\n",
  "sphinx-doc__sphinx-9230": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex e86a758..c1d711d 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -983,6 +983,35 @@ def test_info_field_list(app):\n                 refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n+    # New test for :param dict(str, str) opc_meta:\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:class:: Class\\n\"\n+            \"\\n\"\n+            \"   :param dict(str, str) opc_meta: (optional)\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+    \n+    assert_node(doctree[3][1][0][0][1][0][0][0],\n+                ([addnodes.literal_strong, \"opc_meta\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"dict\"],\n+                 [addnodes.literal_emphasis, \"(\"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \", \"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \")\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"(optional)\"))\n+    assert_node(doctree[3][1][0][0][1][0][0][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"dict\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+\n \n def test_info_field_list_var(app):\n     text = (\".. py:class:: Class\\n\"\n",
  "sphinx-doc__sphinx-9258": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a7d51b6..d6b15f4 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -1008,18 +1008,48 @@ def test_info_field_list(app):\n                 refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n-\n-def test_info_field_list_var(app):\n-    text = (\".. py:class:: Class\\n\"\n+def test_info_field_list_piped_type_with_more_types(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:class:: Class\\n\"\n             \"\\n\"\n-            \"   :var int attr: blah blah\\n\")\n+            \"   :param value: blah blah\\n\"\n+            \"   :type value: bytes | str | list | dict\\n\")\n     doctree = restructuredtext.parse(app, text)\n \n-    assert_node(doctree, (addnodes.index,\n-                          [desc, (desc_signature,\n-                                  [desc_content, nodes.field_list, nodes.field])]))\n-    assert_node(doctree[1][1][0][0], ([nodes.field_name, \"Variables\"],\n-                                      [nodes.field_body, nodes.paragraph]))\n+    assert_node(doctree, \n+                (nodes.target,\n+                 addnodes.index,\n+                 addnodes.index,\n+                 [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                           [desc_addname, \"example.\"],\n+                                           [desc_name, \"Class\"])],\n+                         [desc_content, nodes.field_list, nodes.field, (nodes.field_name,\n+                                                                        nodes.field_body)])]))\n+    assert_node(doctree[3][1][0][0][1],\n+                ([nodes.paragraph, ([addnodes.literal_strong, \"value\"],\n+                                    \" (\",\n+                                    [pending_xref, addnodes.literal_emphasis, \"bytes\"],\n+                                    [addnodes.literal_emphasis, \" | \"],\n+                                    [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                                    [addnodes.literal_emphasis, \" | \"],\n+                                    [pending_xref, addnodes.literal_emphasis, \"list\"],\n+                                    [addnodes.literal_emphasis, \" | \"],\n+                                    [pending_xref, addnodes.literal_emphasis, \"dict\"],\n+                                    \")\",\n+                                    \" -- \",\n+                                    \"blah blah\")],))\n+    assert_node(doctree[3][1][0][0][1][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"bytes\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"list\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][8], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"dict\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n     # :var int attr:\n     assert_node(doctree[1][1][0][0][1][0],\n",
  "sphinx-doc__sphinx-9673": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex aa0401e..31d3498 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -830,6 +830,12 @@ def test_autodoc_typehints_description(app):\n             'target.overload.sum(x: float, y: float = 0.0) -> float\\n'\n             'target.overload.sum(x: str, y: str = None) -> str\\n'\n             '\\n'\n+            '   Returns:\\n'\n+            '      Resulting sum\\n'\n+            '\\n'\n+            '   Return type:\\n'\n+            '      str\\n'\n+            '\\n'\n             '   docstring\\n'\n             in context)\n \n",
  "sympy__sympy-18211": "diff --git a/sympy/solvers/tests/test_solveset.py b/sympy/solvers/tests/test_solveset.py\nindex 7bd9e29..7b41790 100644\n--- a/sympy/solvers/tests/test_solveset.py\n+++ b/sympy/solvers/tests/test_solveset.py\n@@ -1047,8 +1047,18 @@ def test__solveset_multi():\n             ImageSet(Lambda(((r,),), (r, 0)), ImageSet(Lambda(r, (r,)), Interval(0, 1))),\n             ImageSet(Lambda(((theta,),), (0, theta)), ImageSet(Lambda(theta, (theta,)), Interval(0, pi))))\n \n+from sympy import Eq, symbols, cos, sin, solveset, Reals\n+from sympy.sets.conditionset import ConditionSet\n+\n+def test_issue_18188():\n+    x = symbols('x')\n+    # Test case for the specific equation mentioned in the issue\n+    result1 = Eq(x*cos(x) - 3*sin(x), 0)\n+    assert solveset(result1, x, domain=Reals) == ConditionSet(x, Eq(x*cos(x) - 3*sin(x), 0), Reals)\n \n-def test_conditionset():\n+    # Additional test case to ensure general behavior\n+    result2 = Eq(x**2 + sqrt(x*2) + sin(x), 0)\n+    assert solveset(result2, x, domain=Reals) == ConditionSet(x, Eq(sqrt(2)*sqrt(x) + x**2 + sin(x), 0), Reals)\n     assert solveset(Eq(sin(x)**2 + cos(x)**2, 1), x, domain=S.Reals) == \\\n         ConditionSet(x, True, S.Reals)\n \n",
  "sympy__sympy-18698": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 38de6f6..69f959c 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3330,6 +3330,21 @@ def test_issue_17988():\n     M = Matrix([[poly(x + 1), poly(x + 1)]])\n     assert p * M == M * p == Matrix([[poly(x**2 - 1), poly(x**2 - 1)]])\n \n+def test_issue_8695():\n+    x = symbols('x')\n+    p = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3\n+    expected_result = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\n+    assert sqf_list(p) == expected_result\n+\n+    # Additional test cases to ensure the issue is thoroughly tested\n+    p2 = (x**3 - 6*x**2 + 11*x - 6) * (x - 1)**2\n+    expected_result2 = (1, [(x - 1, 3), (x**2 - 5*x + 6, 1)])\n+    assert sqf_list(p2) == expected_result2\n+\n+    p3 = x**5 - 2*x**4 - 2*x**3 + 4*x**2 + x - 2\n+    expected_result3 = (1, [(x - 2, 1), (x**2 - 1, 2)])\n+    assert sqf_list(p3) == expected_result3\n+\n def test_issue_18205():\n     assert cancel((2 + I)*(3 - I)) == 7 + I\n     assert cancel((2 + I)*(2 - I)) == 5\n",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..2c31ddc 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3255,7 +3255,10 @@ def test_issue_5786():\n         (x - I*y)*(z - I*t)), extension=[I])) == -I*t*x - t*y + x*z - I*y*z\n \n \n-def test_noncommutative():\n+def test_issue_18895_factor_with_extension():\n+    # Test case for issue #18895 to verify factor behavior with extension\n+    z = expand((x - 1)*(y - 1))\n+    assert factor(z, extension=[I]) == (x - 1)*(y - 1)\n     class foo(Expr):\n         is_commutative=False\n     e = x/(x + x*y)\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..829987c 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"This tests sympy/core/basic.py with (ideally) no reference to subclasses\n of Basic or Atom.\"\"\"\n \n@@ -11,7 +12,7 @@ from sympy.core.sympify import SympifyError\n from sympy.core.function import Function, Lambda\n from sympy.core.compatibility import default_sort_key\n \n-from sympy import sin, Q, cos, gamma, Tuple, Integral, Sum\n+from sympy import sin, Q, cos, gamma, Tuple, Integral, Sum, Symbol\n from sympy.functions.elementary.exponential import exp\n from sympy.testing.pytest import raises\n from sympy.core import I, pi\n",
  "sympy__sympy-24562": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 13e3235..29a5b91 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -369,6 +369,46 @@ def test_Rational_new():\n     assert n.q == 4\n     assert n.p == -2\n \n+def test_issue_24543():\n+    import sympy\n+    Rational = sympy.Rational\n+\n+    # Existing test cases\n+    for p in ('1.5', 1.5, 2):\n+        for q in ('1.5', 1.5, 2):\n+            assert Rational(p, q).as_numer_denom() == Rational('%s/%s'%(p,q)).as_numer_denom()\n+    \n+    assert Rational('0.5', '100') == Rational(1, 200)\n+\n+    # New test cases\n+    # Testing with different forms of 0.5 as strings\n+    assert Rational('0.5', '100') == Rational(1, 200)\n+    assert Rational('5e-1', '100') == Rational(1, 200)\n+    \n+    # Testing with negative values\n+    assert Rational('-0.5', '100') == Rational(-1, 200)\n+    assert Rational('0.5', '-100') == Rational(-1, 200)\n+    assert Rational('-0.5', '-100') == Rational(1, 200)\n+\n+    # Edge cases\n+    assert Rational('0', '1') == Rational(0, 1)\n+    assert Rational('1', '1') == Rational(1, 1)\n+    assert Rational('100', '0.5') == Rational(200, 1)\n+    \n+    # Test with invalid inputs to ensure exceptions\n+    try:\n+        Rational('invalid', '100')\n+    except ValueError:\n+        pass\n+    else:\n+        assert False, \"Expected ValueError\"\n+\n+    try:\n+        Rational('0.5', 'invalid')\n+    except ValueError:\n+        pass\n+    else:\n+        assert False, \"Expected ValueError\"\n \n def test_Number_new():\n     \"\"\"\"\n",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..28b63e7 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,7 +3202,21 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n-    def test_boundfield_widget_type(self):\n+    def test_boundwidget_id_for_label_uses_choicewidget_options_id(self):\n+        \"\"\"\n+        Ensure that BoundWidget.id_for_label uses the ID set by ChoiceWidget.options.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('1', 'Option 1'), ('2', 'Option 2')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'custom_%s'}),\n+            )\n+\n+        form = SomeForm(auto_id='prefix_%s')\n+        subwidgets = form['field'].subwidgets\n+        # Assuming each subwidget gets its own ID through ChoiceWidget.options\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_field_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "matplotlib__matplotlib-20676": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex b009975..376c002 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -302,6 +302,61 @@ def test_tool_line_handle():\n     assert tool_line_handle.positions == positions\n \n \n+import pytest\n+from matplotlib import widgets\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@pytest.mark.parametrize('direction', (\"horizontal\", \"vertical\"))\n+def test_span_selector_bound(direction):\n+    fig, ax = plt.subplots(1, 1)\n+    ax.plot([10, 20], [10, 30])\n+    ax.figure.canvas.draw()\n+    x_bound = ax.get_xbound()\n+    y_bound = ax.get_ybound()\n+    \n+    tool = widgets.SpanSelector(ax, print, direction, interactive=True)\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    bound = x_bound if direction == 'horizontal' else y_bound\n+    assert tool._edge_handles.positions == list(bound)\n+\n+    press_data = [10.5, 11.5]\n+    move_data = [11, 13]  # Updating selector is done in onmove\n+    release_data = move_data\n+    do_event(tool, 'press', xdata=press_data[0], ydata=press_data[1], button=1)\n+    do_event(tool, 'onmove', xdata=move_data[0], ydata=move_data[1], button=1)\n+\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    index = 0 if direction == 'horizontal' else 1\n+    handle_positions = [press_data[index], release_data[index]]\n+    assert tool._edge_handles.positions == handle_positions\n+\n+def test_span_selector_no_zero_inclusion():\n+    fig, ax = plt.subplots()\n+    ax.plot([10, 20], [10, 20])\n+    x_bound = ax.get_xbound()\n+    y_bound = ax.get_ybound()\n+\n+    def onselect(vmin, vmax):\n+        pass\n+\n+    ss = widgets.SpanSelector(ax, onselect, \"horizontal\", interactive=True)\n+    fig.canvas.draw()\n+\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    ss.extents = (12, 18)\n+    fig.canvas.draw()\n+\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    assert not (ax.get_xbound()[0] == 0 or ax.get_ybound()[0] == 0)\n+\n def check_lasso_selector(**kwargs):\n     ax = get_ax()\n \n",
  "scikit-learn__scikit-learn-12682": "diff --git a/sklearn/decomposition/tests/test_dict_learning.py b/sklearn/decomposition/tests/test_dict_learning.py\nindex 35a43f8..673f9bf 100644\n--- a/sklearn/decomposition/tests/test_dict_learning.py\n+++ b/sklearn/decomposition/tests/test_dict_learning.py\n@@ -50,6 +50,57 @@ def test_dict_learning_shapes():\n     assert_equal(dico.components_.shape, (n_components, n_features))\n     assert_equal(dico.transform(X).shape, (X.shape[0], n_components))\n \n+import pytest\n+import numpy as np\n+from sklearn.decomposition import SparseCoder\n+from sklearn.exceptions import ConvergenceWarning\n+\n+def test_sparse_coder_custom_max_iter():\n+    def ricker_function(resolution, center, width):\n+        \"\"\"Discrete sub-sampled Ricker (Mexican hat) wavelet\"\"\"\n+        x = np.linspace(0, resolution - 1, resolution)\n+        x = ((2 / (np.sqrt(3 * width) * np.pi ** .25))\n+             * (1 - (x - center) ** 2 / width ** 2)\n+             * np.exp(-(x - center) ** 2 / (2 * width ** 2)))\n+        return x\n+\n+    def ricker_matrix(width, resolution, n_components):\n+        \"\"\"Dictionary of Ricker (Mexican hat) wavelets\"\"\"\n+        centers = np.linspace(0, resolution - 1, n_components)\n+        D = np.empty((n_components, resolution))\n+        for i, center in enumerate(centers):\n+            D[i] = ricker_function(resolution, center, width)\n+        D /= np.sqrt(np.sum(D ** 2, axis=1))[:, np.newaxis]\n+        return D\n+\n+    transform_algorithm = 'lasso_cd'\n+    resolution = 1024\n+    subsampling = 3  # subsampling factor\n+    n_components = resolution // subsampling\n+\n+    # Compute a wavelet dictionary\n+    D_multi = np.r_[tuple(ricker_matrix(width=w, resolution=resolution,\n+                              n_components=n_components // 5)\n+                          for w in (10, 50, 100, 500, 1000))]\n+\n+    X = np.linspace(0, resolution - 1, resolution)\n+    first_quarter = X < resolution / 4\n+    X[first_quarter] = 3.\n+    X[np.logical_not(first_quarter)] = -1.\n+    X = X.reshape(1, -1)\n+\n+    # Check that the underlying model does not converge with a low max_iter\n+    with pytest.warns(ConvergenceWarning):\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=1)\n+        model.fit_transform(X)\n+\n+    # Check that the underlying model converges without warnings with a higher max_iter\n+    with pytest.warns(None) as record:\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=2000)\n+        model.fit_transform(X)\n+    assert not record.list\n \n def test_dict_learning_overcomplete():\n     n_components = 12\n",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..263ea09 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -147,8 +147,33 @@ def test_multi_target_sample_weights():\n     X_test = [[1.5, 2.5, 3.5], [3.5, 4.5, 5.5]]\n     assert_almost_equal(rgr.predict(X_test), rgr_w.predict(X_test))\n \n-\n-# Import the data\n+import pytest\n+import numpy as np\n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+from sklearn.model_selection import cross_val_predict\n+from sklearn.utils.validation import check_is_fitted\n+\n+def test_cross_val_predict_with_multioutputclassifier_predict_proba():\n+    X, Y = make_multilabel_classification()\n+    mo_clf = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+    \n+    # Test that cross_val_predict works without error using the method 'predict_proba'\n+    predictions_proba = cross_val_predict(mo_clf, X, Y, cv=5, method='predict_proba')\n+    \n+    # We expect a list of arrays (one for each output)\n+    assert isinstance(predictions_proba, list)\n+    assert len(predictions_proba) == Y.shape[1]  # number of outputs\n+\n+    # Check that each element in the list is of the correct shape\n+    for i, proba in enumerate(predictions_proba):\n+        assert proba.shape == (X.shape[0], len(np.unique(Y[:, i])))\n+\n+    # Additional check to ensure that each of the individual classifiers is fitted\n+    mo_clf.fit(X, Y)\n+    for estimator in mo_clf.estimators_:\n+        check_is_fitted(estimator)\n iris = datasets.load_iris()\n # create a multiple targets by randomized shuffling and concatenating y.\n X = iris.data\n",
  "sphinx-doc__sphinx-9658": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 072cdc7..13a96b8 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -158,7 +158,49 @@ def test_restify_pep_585():\n                                                    \"[:py:class:`int`, ...]]\")\n \n \n+from sphinx.util.typing import restify, stringify\n+from sphinx.ext.autodoc import mock\n+import pytest\n+\n @pytest.mark.skipif(sys.version_info < (3, 10), reason='python 3.10+ is required.')\n+\n+def test_restify_mock_inherited_class():\n+    with mock(['unknown.mocked']):\n+        import unknown.mocked\n+        class InheritedClass(unknown.mocked.BaseClass):\n+            pass\n+\n+        assert restify(InheritedClass) == ':py:class:`unknown.mocked.InheritedClass`'\n+        assert restify(InheritedClass.__bases__[0]) == ':py:class:`unknown.mocked.BaseClass`'\n+\n+def test_restify_known_inherited_class():\n+    class KnownBaseClass:\n+        pass\n+\n+    class KnownInheritedClass(KnownBaseClass):\n+        pass\n+\n+    assert restify(KnownInheritedClass) == ':py:class:`tests.test_util_typing.KnownInheritedClass`'\n+    assert restify(KnownInheritedClass.__bases__[0]) == ':py:class:`tests.test_util_typing.KnownBaseClass`'\n+\n+def test_stringify_mock_inherited_class():\n+    with mock(['unknown.mocked']):\n+        import unknown.mocked\n+        class InheritedClass(unknown.mocked.BaseClass):\n+            pass\n+\n+        assert stringify(InheritedClass) == 'unknown.mocked.InheritedClass'\n+        assert stringify(InheritedClass.__bases__[0]) == 'unknown.mocked.BaseClass'\n+\n+def test_stringify_known_inherited_class():\n+    class KnownBaseClass:\n+        pass\n+\n+    class KnownInheritedClass(KnownBaseClass):\n+        pass\n+\n+    assert stringify(KnownInheritedClass) == 'tests.test_util_typing.KnownInheritedClass'\n+    assert stringify(KnownInheritedClass.__bases__[0]) == 'tests.test_util_typing.KnownBaseClass'\n def test_restify_type_union_operator():\n     assert restify(int | None) == \":py:class:`int` | :py:obj:`None`\"  # type: ignore\n     assert restify(int | str) == \":py:class:`int` | :py:class:`str`\"  # type: ignore\n",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..a2deb0a 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -347,6 +347,17 @@ def test_reverse_order():\n     assert Product(x*y, (x, a, b), (y, 2, 5)).reverse_order(y, x) == \\\n            Product(x*y, (x, b + 1, a - 1), (y, 6, 1))\n \n+def test_issue_13546():\n+    from sympy import Product, Symbol, S\n+    from sympy.abc import n, k\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 2).doit() == S(15)/2\n+\n+    # Additional test cases for other values of n\n+    assert p.subs(n, 1).doit() == S(2)\n+    assert p.subs(n, 3).doit() == S(105)/8\n+    assert p.subs(n, 4).doit() == S(1155)/16\n+\n \n def test_issue_9983():\n     n = Symbol('n', integer=True, positive=True)\n@@ -357,4 +368,4 @@ def test_issue_9983():\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}