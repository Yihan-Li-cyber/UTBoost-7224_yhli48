{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..68d2389 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -55,6 +55,16 @@ compound_models = {\n             )\n }\n \n+def test_nested_compound_model_separability():\n+    # Test case based on the issue description\n+    cm = m.Linear1D(10) & m.Linear1D(5)\n+    result = separability_matrix(m.Pix2Sky_TAN() & cm)\n+    expected_result = np.array([[ True,  True, False, False],\n+                                [ True,  True, False, False],\n+                                [False, False,  True,  True],\n+                                [False, False,  True,  True]])\n+    assert_allclose(result, expected_result)\n+\n \n def test_coord_matrix():\n     c = _coord_matrix(p2, 'left', 2)\n",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "",
  "astropy__astropy-14508": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex 6bdf92c..b2237c2 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -125,6 +125,54 @@ class TestHeaderFunctions(FitsTestCase):\n         \"\"\"Test Card constructor with long integer value\"\"\"\n \n         c = fits.Card(\"long_int\", -467374636747637647347374734737437)\n+\n+    def test_floating_point_string_representation_card(self):\n+        \"\"\"\n+        Ensures Card formats float values with the correct precision, avoiding\n+        comment truncation\n+\n+        Regression test for https://github.com/astropy/astropy/issues/14507\n+        \"\"\"\n+        k = \"HIERARCH ABC DEF GH IJKLMN\"\n+        com = \"[m] abcdef ghijklm nopqrstu vw xyzab\"\n+        c = fits.Card(k, 0.009125, com)\n+        expected_str = f\"{k} = 0.009125 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, 8.95, com)\n+        expected_str = f\"{k} = 8.95 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, -99.9, com)\n+        expected_str = f\"{k} = -99.9 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+    def test_floating_point_precision_edge_cases(self):\n+        \"\"\"\n+        Test edge cases for float representation where precision might get affected\n+        \"\"\"\n+        k = \"HIERARCH TEST EDGE CASE\"\n+        com = \"Testing edge cases for float representation\"\n+\n+        # Test near-zero positive float\n+        c = fits.Card(k, 1e-10, com)\n+        expected_str = f\"{k} = 1.0E-10 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Test near-zero negative float\n+        c = fits.Card(k, -1e-10, com)\n+        expected_str = f\"{k} = -1.0E-10 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Test large float\n+        c = fits.Card(k, 1.234567890123456e+25, com)\n+        expected_str = f\"{k} = 1.234567890123456E+25 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Test small float with high precision\n+        c = fits.Card(k, 0.000000000123456789, com)\n+        expected_str = f\"{k} = 1.23456789E-10 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n         assert str(c) == _pad(\"LONG_INT= -467374636747637647347374734737437\")\n \n     def test_floating_point_value_card(self):\n",
  "astropy__astropy-14539": "diff --git a/astropy/io/fits/tests/test_diff.py b/astropy/io/fits/tests/test_diff.py\nindex 9bf4897..e5cd966 100644\n--- a/astropy/io/fits/tests/test_diff.py\n+++ b/astropy/io/fits/tests/test_diff.py\n@@ -601,6 +601,19 @@ class TestDiff(FitsTestCase):\n         assert \"13 different table data element(s) found (65.00% different)\" in report\n         assert report.count(\"more indices\") == 1\n \n+    def test_vla_identical_file(self):\n+        \"\"\"\n+        Test to ensure that FITSDiff does not report differences when comparing a file to itself,\n+        even with variable-length arrays (VLAs).\n+        \"\"\"\n+        col = Column('a', format='QD', array=[[0], [0, 0]])\n+        hdu = BinTableHDU.from_columns([col])\n+        hdu.writeto('diffbug.fits', overwrite=True)\n+\n+        diff = FITSDiff('diffbug.fits', 'diffbug.fits')\n+        assert diff.identical\n+        assert diff.diff_total == 0\n+\n     def test_identical_files_basic(self):\n         \"\"\"Test identicality of two simple, extensionless files.\"\"\"\n \n",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..b29f109 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -88,8 +88,20 @@ def test_inherit_docstrings():\n         # TODO: Maybe if __doc__ is None this test should be skipped instead?\n         assert Subclass.__call__.__doc__ == \"FOO\"\n \n+def test_inherit_docstrings_with_properties():\n+    class Base(metaclass=misc.InheritDocstrings):\n+        @property\n+        def bar(self):\n+            \"BAR\"\n+            return None\n+\n+    class Subclass(Base):\n+        @property\n+        def bar(self):\n+            return 42\n \n-def test_set_locale():\n+    if Base.bar.__doc__ is not None:\n+        assert Subclass.bar.__doc__ == \"BAR\"\n     # First, test if the required locales are available\n     current = locale.setlocale(locale.LC_ALL)\n     try:\n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..3402085 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -197,6 +197,12 @@ def test_unknown_unit3():\n     with pytest.raises(TypeError):\n         unit5 = u.Unit(None)\n \n+def test_unrecognized_unit_equality_with_none():\n+    unit = u.Unit('asdf', parse_strict='silent')\n+    assert unit != None  # noqa: E711\n+    assert not (unit == None)  # noqa: E711\n+    assert unit not in (None, u.m)\n+\n \n @raises(TypeError)\n def test_invalid_scale():\n",
  "astropy__astropy-7671": "diff --git a/astropy/utils/tests/test_introspection.py b/astropy/utils/tests/test_introspection.py\nindex 852d721..b93c25c 100644\n--- a/astropy/utils/tests/test_introspection.py\n+++ b/astropy/utils/tests/test_introspection.py\n@@ -68,8 +68,12 @@ def test_minversion():\n     test_module = ModuleType(str(\"test_module\"))\n     test_module.__version__ = '0.12.2'\n     good_versions = ['0.12', '0.12.1', '0.12.0.dev']\n-    bad_versions = ['1', '1.2rc1']\n-    for version in good_versions:\n+    bad_versions = ['1', '1.2rc1', '1.14dev']\n+    # Additional tests for LooseVersion issue\n+    additional_good_versions = ['1.14', '1.14.0']\n+    additional_bad_versions = ['1.14.3']\n+\n+    for version in good_versions + additional_good_versions:\n         assert minversion(test_module, version)\n-    for version in bad_versions:\n-        assert not minversion(test_module, version)\n+    for version in bad_versions + additional_bad_versions:\n+        assert not minversion(test_module, version)\n",
  "astropy__astropy-8707": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex a2103c6..d782e6e 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -79,6 +79,26 @@ class TestHeaderFunctions(FitsTestCase):\n         assert header['B'] == 'B'\n         assert header.comments['B'] == 'C'\n \n+    def test_card_from_bytes(self):\n+        \"\"\"\n+        Test loading a Card from a `bytes` object (assuming latin-1 encoding).\n+        \"\"\"\n+        c = fits.Card.fromstring(b\"ABC     = 'abc'\")\n+        assert c.keyword == 'ABC'\n+        assert c.value == 'abc'\n+\n+    def test_header_fromstring_bytes(self):\n+        \"\"\"\n+        Test reading a Header from a `bytes` string.\n+        \"\"\"\n+        with open(self.data('test0.fits'), 'rb') as fobj:\n+            pri_hdr_from_bytes = fits.Header.fromstring(fobj.read())\n+\n+        pri_hdr = fits.getheader(self.data('test0.fits'))\n+        assert pri_hdr['NAXIS'] == pri_hdr_from_bytes['NAXIS']\n+        assert pri_hdr == pri_hdr_from_bytes\n+        assert pri_hdr.tostring() == pri_hdr_from_bytes.tostring()\n+\n     def test_card_constructor_default_args(self):\n         \"\"\"Test Card constructor with default argument values.\"\"\"\n \n",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..906fa1e 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -142,7 +142,15 @@ class TestQuantityCreation:\n         a3 = np.array([1., 2.], dtype=np.float32)\n         q3 = u.Quantity(a3, u.yr)\n         assert q3.dtype == a3.dtype\n-        # items stored as objects by numpy should be converted to float\n+        \n+        # Testing for np.float16\n+        a3_16 = np.array([1., 2.], dtype=np.float16)\n+        q3_16 = u.Quantity(a3_16, u.yr)\n+        assert q3_16.dtype == a3_16.dtype, f\"Expected float16, got {q3_16.dtype}\"\n+\n+        # Test that mixing float16 and a unit retains float16 dtype\n+        q3_16_single = np.float16(1) * u.km\n+        assert q3_16_single.dtype == np.dtype('float16'), f\"Expected float16, got {q3_16_single.dtype}\"\n         # by default\n         q4 = u.Quantity(decimal.Decimal('10.25'), u.m)\n         assert q4.dtype == float\n",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..941f524 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -218,6 +218,17 @@ TEST_DATA = [\n     (URLValidator(EXTENDED_SCHEMES), 'git+ssh://git@github.com/example/hg-git.git', None),\n \n     (URLValidator(EXTENDED_SCHEMES), 'git://-invalid.com', ValidationError),\n+\n+    # Add test cases for invalid URLs with unencoded characters in username and password\n+    (URLValidator(), 'http://foo@bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar@baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar/baz@example.com', ValidationError),\n+    (URLValidator(), 'http://invalid-.com/?m=foo@example.com', ValidationError),\n+    (URLValidator(), \"http://-.~_!$&'()*+,;=%40:80%2f@example.com\", ValidationError),\n+    # Valid URL as control case\n+    (URLValidator(), 'http://foo%40bar@example.com', None),\n+    (URLValidator(), 'http://foo%3Abar@example.com', None),\n     # Trailing newlines not accepted\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..9a0ec3d 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -10,6 +11,7 @@ from django.db.models import (\n )\n from django.test import TestCase\n from django.test.utils import Approximate, CaptureQueriesContext\n+from django.db.models.expressions import Case, When\n from django.utils import timezone\n \n from .models import Author, Book, Publisher, Store\n@@ -389,7 +391,31 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n-    def test_count_star(self):\n+    def test_count_distinct_expression_with_case(self):\n+        # Test with a Case condition and distinct=True\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(\n+                Case(When(pages__gt=300, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n+        \n+    def test_count_distinct_expression_without_case(self):\n+        # Test without the Case condition to compare results\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count('rating', distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n+\n+    def test_count_distinct_expression_multiple_conditions(self):\n+        # Test with multiple conditions in Case\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(\n+                Case(\n+                    When(pages__gt=100, then='rating'),\n+                    When(price__gt=20, then='rating')\n+                ), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 5)\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n         sql = ctx.captured_queries[0]['sql']\n",
  "django__django-10914": "",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..4a39d0e 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,6 +1,8 @@\n+\n import os\n import signal\n from unittest import mock\n+import subprocess\n \n from django.db.backends.postgresql.client import DatabaseClient\n from django.test import SimpleTestCase\n@@ -101,7 +103,21 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n-    def test_sigint_handler(self):\n+    def test_pgpassword_usage(self):\n+        \"\"\"Test that PGPASSWORD is set correctly when password is provided.\"\"\"\n+        def _mock_subprocess_run(*args, env=None, **kwargs):\n+            self.assertIn('PGPASSWORD', env)\n+            self.assertEqual(env['PGPASSWORD'], 'somepassword')\n+            return subprocess.CompletedProcess(args, 0)\n+\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'password': 'somepassword',\n+                'host': 'somehost',\n+                'port': '444',\n+            })\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n         def _mock_subprocess_call(*args):\n             handler = signal.getsignal(signal.SIGINT)\n@@ -113,4 +129,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..9568a7b 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -3,6 +3,8 @@ from django.conf import settings\n from django.contrib.contenttypes import management as contenttypes_management\n from django.contrib.contenttypes.models import ContentType\n from django.core.management import call_command\n+from django.contrib.contenttypes.models import ContentType\n+from django.apps import apps\n from django.db import migrations, models\n from django.test import TransactionTestCase, override_settings\n \n@@ -55,6 +57,29 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n \n+    @override_settings(DATABASE_ROUTERS=['contenttypes_tests.tests.DynamicRouter'])\n+    def test_content_type_rename_with_dynamic_db_router(self):\n+        class DynamicRouter:\n+            def db_for_write(self, model, **hints):\n+                return 'other'\n+\n+        # Create initial ContentType in the 'other' database\n+        ContentType.objects.using('other').create(app_label='contenttypes_tests', model='foo')\n+\n+        # Perform the migration on the 'other' database\n+        call_command('migrate', 'contenttypes_tests', database='other', interactive=False, verbosity=0)\n+\n+        # Check that the rename was successful in the 'other' database\n+        self.assertFalse(ContentType.objects.using('other').filter(app_label='contenttypes_tests', model='foo').exists())\n+        self.assertTrue(ContentType.objects.using('other').filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+\n+        # Rollback the migration\n+        call_command('migrate', 'contenttypes_tests', 'zero', database='other', interactive=False, verbosity=0)\n+\n+        # Verify rollback was successful\n+        self.assertTrue(ContentType.objects.using('other').filter(app_label='contenttypes_tests', model='foo').exists())\n+        self.assertFalse(ContentType.objects.using('other').filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+\n     def test_content_type_rename_conflict(self):\n         ContentType.objects.create(app_label='contenttypes_tests', model='foo')\n         ContentType.objects.create(app_label='contenttypes_tests', model='renamedfoo')\n@@ -63,4 +88,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "diff --git a/tests/generic_inline_admin/tests.py b/tests/generic_inline_admin/tests.py\nindex 9dd9fd9..0f7cdd5 100644\n--- a/tests/generic_inline_admin/tests.py\n+++ b/tests/generic_inline_admin/tests.py\n@@ -428,4 +428,44 @@ class GenericInlineModelAdminTest(SimpleTestCase):\n         ma = EpisodeAdmin(Episode, self.site)\n         inlines = ma.get_inline_instances(request)\n         for (formset, inline), other_inline in zip(ma.get_formsets_with_inlines(request), inlines):\n-            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+\n+    def test_get_inlines(self):\n+        class MediaInline(GenericTabularInline):\n+            model = Media\n+\n+        class AlternateInline(GenericTabularInline):\n+            model = Media\n+\n+        class EpisodeAdmin(admin.ModelAdmin):\n+            inlines = (AlternateInline, MediaInline)\n+\n+            def get_inlines(self, request, obj=None):\n+                if hasattr(request, 'name'):\n+                    if request.name == 'alternate':\n+                        return self.inlines[:1]\n+                    elif request.name == 'media':\n+                        return self.inlines[1:2]\n+                return []\n+\n+        ma = EpisodeAdmin(Episode, self.site)\n+        request = type('Request', (object,), {})()  # Mock request object\n+\n+        # Test with no name attribute\n+        self.assertEqual(ma.get_inlines(request, None), [])\n+        self.assertEqual(ma.get_inline_instances(request), [])\n+\n+        # Test for 'alternate' name\n+        request.name = 'alternate'\n+        self.assertEqual(ma.get_inlines(request, None), (AlternateInline,))\n+        self.assertEqual(type(ma.get_inline_instances(request)[0]), AlternateInline)\n+\n+        # Test for 'media' name\n+        request.name = 'media'\n+        self.assertEqual(ma.get_inlines(request, None), (MediaInline,))\n+        self.assertEqual(type(ma.get_inline_instances(request)[0]), MediaInline)\n+\n+        # Test with a name that doesn't match any condition\n+        request.name = 'unknown'\n+        self.assertEqual(ma.get_inlines(request, None), [])\n+        self.assertEqual(ma.get_inline_instances(request), [])\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..0aefcdd 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -248,7 +248,31 @@ class UsernameValidatorsTests(SimpleTestCase):\n                 with self.assertRaises(ValidationError):\n                     v(invalid)\n \n-    def test_ascii_validator(self):\n+    def test_trailing_newline_in_unicode_validator(self):\n+        invalid_usernames = [\n+            \"validname\\n\",\n+            \"12345\\n\",\n+            \"@username\\n\",\n+            \"name.with.dot.\\n\"\n+        ]\n+        v = validators.UnicodeUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+\n+    def test_trailing_newline_in_ascii_validator(self):\n+        invalid_usernames = [\n+            \"validname\\n\",\n+            \"ValidName123\\n\",\n+            \"name.with.dot.\\n\",\n+            \"name-with-dash-\\n\"\n+        ]\n+        v = validators.ASCIIUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n         invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n         v = validators.ASCIIUsernameValidator()\n@@ -258,4 +282,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..4831ea1 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -10,6 +10,8 @@ from .utils import ROOT, TEMPLATE_DIR\n OTHER_DIR = os.path.join(ROOT, 'other_templates')\n \n \n+from django.utils.html import escape\n+\n class RenderToStringTest(SimpleTestCase):\n \n     def setUp(self):\n@@ -21,6 +23,13 @@ class RenderToStringTest(SimpleTestCase):\n             'obj:test\\n',\n         )\n \n+    def test_autoescape_on(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:%s\\n' % escape('<script>'),\n+        )\n+\n \n class GetDefaultTests(SimpleTestCase):\n \n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..110e06e 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -413,6 +413,10 @@ class HttpResponseTests(unittest.TestCase):\n         self.assertEqual(list(i), [b'abc'])\n         self.assertEqual(list(i), [])\n \n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n     def test_lazy_content(self):\n         r = HttpResponse(lazystr('helloworld'))\n         self.assertEqual(r.content, b'helloworld')\n",
  "django__django-11141": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex b5a87e7..3582fb0 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -508,8 +508,26 @@ class LoaderTests(TestCase):\n         migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n         self.assertEqual(migrations, ['0001_initial'])\n \n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_namespace_package'})\n+    def test_loading_namespace_package(self):\n+        \"\"\"Migration directories without an __init__.py file are loaded.\"\"\"\n+        migration_loader = MigrationLoader(connection)\n+        self.assertEqual(\n+            migration_loader.graph.forwards_plan(('migrations', '0001_initial')),\n+            [('migrations', '0001_initial')],\n+        )\n \n-class PycLoaderTests(MigrationTestBase):\n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.empty_namespace_package'})\n+    def test_loading_empty_namespace_package(self):\n+        \"\"\"Test that an empty namespace package (without migrations) doesn't break the loader.\"\"\"\n+        migration_loader = MigrationLoader(connection)\n+        self.assertNotIn('migrations', migration_loader.disk_migrations)\n+\n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.namespace_package_with_subdirs'})\n+    def test_loading_namespace_package_with_subdirectories(self):\n+        \"\"\"Test loading of namespace package where migrations are in subdirectories.\"\"\"\n+        migration_loader = MigrationLoader(connection)\n+        self.assertIn('0001_initial', [name for app, name in migration_loader.disk_migrations if app == 'migrations'])\n \n     def test_valid(self):\n         \"\"\"\n",
  "django__django-11149": "",
  "django__django-11163": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex b25d077..b8ebcf8 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2900,6 +2900,11 @@ class StrictAssignmentTests(SimpleTestCase):\n \n \n class ModelToDictTests(TestCase):\n+    def test_empty_fields_list(self):\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        # Test that model_to_dict with fields=[] returns an empty dict\n+        self.assertEqual(model_to_dict(bw, fields=[]), {})\n+\n     def test_many_to_many(self):\n         \"\"\"Data for a ManyToManyField is a list rather than a lazy QuerySet.\"\"\"\n         blue = Colour.objects.create(name='blue')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..f8a13b1 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,3 +1,5 @@\n+\n+from django.db.models.deletion import Collector\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n@@ -464,7 +466,43 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n-    def test_fast_delete_qs(self):\n+    def test_fast_delete_instance_set_pk_none(self):\n+        u = User.objects.create()\n+        # User can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n+    def test_delete_instance_with_dependencies_does_not_set_pk_none(self):\n+        a = Avatar.objects.create(desc='a')\n+        u = User.objects.create(avatar=a)\n+        # Deleting a User with an Avatar dependency.\n+        u.delete()\n+        self.assertIsNotNone(u.pk)\n+\n+    def test_delete_instance_without_dependencies_sets_pk_none(self):\n+        u = User.objects.create()\n+        # Deleting a User without dependencies.\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n+    def test_delete_multiple_instances(self):\n+        u1 = User.objects.create()\n+        u2 = User.objects.create()\n+        u1.delete()\n+        u2.delete()\n+        self.assertIsNone(u1.pk)\n+        self.assertIsNone(u2.pk)\n+\n+    def test_delete_and_recreate_instance(self):\n+        u = User.objects.create()\n+        u_id = u.pk\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+        # Recreate with the same ID should not be possible\n+        u_recreated = User.objects.create(id=u_id)\n+        self.assertNotEqual(u.pk, u_recreated.pk)\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n         self.assertNumQueries(1, User.objects.filter(pk=u1.pk).delete)\n",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..c4444ab 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -95,6 +95,13 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+            # Test case for very small numbers with decimal_pos resulting in zero value\n+            ('1e-199', 2, '0.00'),\n+            ('1e-200', 2, '0.00'),\n+            ('1e-201', 2, '0.00'),\n+            ('1e-199', 10, '0.0000000000'),\n+            ('1e-200', 10, '0.0000000000'),\n+            ('1e-201', 10, '0.0000000000'),\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-11211": "diff --git a/tests/prefetch_related/tests.py b/tests/prefetch_related/tests.py\nindex 1dc206f..e9fcc0f 100644\n--- a/tests/prefetch_related/tests.py\n+++ b/tests/prefetch_related/tests.py\n@@ -1,3 +1,5 @@\n+\n+import uuid\n from django.contrib.contenttypes.models import ContentType\n from django.core.exceptions import ObjectDoesNotExist\n from django.db import connection\n@@ -885,7 +887,28 @@ class GenericRelationTests(TestCase):\n             qs = Comment.objects.prefetch_related('content_object')\n             [c.content_object for c in qs]\n \n-    def test_traverse_GFK(self):\n+    def test_prefetch_GFK_uuid_pk(self):\n+        # Create a model with UUID as primary key\n+        class Foo(models.Model):\n+            id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+        \n+        # Create a model with GFK to Foo\n+        class Bar(models.Model):\n+            foo_content_type = models.ForeignKey(ContentType, related_name='actor', on_delete=models.CASCADE, db_index=True)\n+            foo_object_id = models.CharField(max_length=255, db_index=True)\n+            foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n+\n+        # Create a Foo instance\n+        foo_instance = Foo.objects.create()\n+        \n+        # Create a Bar instance related to Foo using GFK\n+        bar_instance = Bar.objects.create(foo_content_type=ContentType.objects.get_for_model(Foo), foo_object_id=foo_instance.id)\n+        \n+        # Attempt to prefetch related 'foo'\n+        qs = Bar.objects.prefetch_related('foo')\n+        \n+        # Verify that the prefetch works and returns the correct related Foo instance\n+        self.assertEqual([b.foo for b in qs], [foo_instance])\n         \"\"\"\n         A 'content_object' can be traversed with prefetch_related() and\n         get to related objects on the other side (assuming it is suitably\n",
  "django__django-11239": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex b843072..1c73b9d 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,4 +1,6 @@\n import os\n+import os\n+\n import signal\n import subprocess\n from unittest import mock\n",
  "django__django-11265": "diff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py\nindex a587c22..cf75bb3 100644\n--- a/tests/filtered_relation/tests.py\n+++ b/tests/filtered_relation/tests.py\n@@ -90,7 +90,32 @@ class FilteredRelationTests(TestCase):\n             [self.author1, self.author2]\n         )\n \n-    def test_with_join(self):\n+    def test_with_exclude(self):\n+        # This test should check that excluding an annotated FilteredRelation works correctly.\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2],\n+        )\n+\n+    def test_exclude_all(self):\n+        # Test excluding all, expecting an empty result set.\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=True),\n+            [],\n+        )\n+\n+    def test_exclude_no_match(self):\n+        # Test excluding with a condition that doesn't match any, expecting all authors.\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='nonexistent title')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author1, self.author2],\n+        )\n         self.assertSequenceEqual(\n             Author.objects.annotate(\n                 book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n",
  "django__django-11276": "",
  "django__django-11292": "",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..36c3073 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,5 +1,7 @@\n+\n from django.test import SimpleTestCase\n-from django.urls.resolvers import RegexPattern, RoutePattern\n+from django.urls.resolvers import RegexPattern, RoutePattern, get_resolver\n+from django.test.utils import override_settings\n from django.utils.translation import gettext_lazy as _\n \n \n@@ -9,7 +11,39 @@ class RegexPatternTests(SimpleTestCase):\n         self.assertEqual(str(RegexPattern(_('^translated/$'))), '^translated/$')\n \n \n+class ResolverCacheTests(SimpleTestCase):\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_default_root_urlconf(self):\n+        # resolver for a default URLconf (passing no argument) and for the\n+        # settings.ROOT_URLCONF is the same cached object.\n+        self.assertIs(get_resolver(), get_resolver('urlpatterns.path_urls'))\n+        self.assertIsNot(get_resolver(), get_resolver('urlpatterns.path_dynamic_urls'))\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_different_urlconf(self):\n+        # Test that calling get_resolver with different URLconfs results in different resolver objects.\n+        resolver1 = get_resolver('urlpatterns.path_urls')\n+        resolver2 = get_resolver('urlpatterns.path_dynamic_urls')\n+        self.assertIsNot(resolver1, resolver2)\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_called_before_and_after_request(self):\n+        # Simulate a situation where get_resolver is called both before and after request handling.\n+        # Before request handling, it will be called with None.\n+        resolver_before = get_resolver()\n+        self.assertIs(resolver_before, get_resolver('urlpatterns.path_urls'))\n+\n+        # Simulate request handling by setting the urlconf.\n+        from django.urls import set_urlconf\n+        set_urlconf('urlpatterns.path_urls')\n+\n+        # After request handling, it should be called with settings.ROOT_URLCONF.\n+        resolver_after = get_resolver()\n+        self.assertIs(resolver_after, get_resolver('urlpatterns.path_urls'))\n+        self.assertIs(resolver_before, resolver_after)\n+\n+\n class RoutePatternTests(SimpleTestCase):\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\nindex b010b42..e1c42fd 100644\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -250,8 +250,35 @@ class ModelBackendTest(BaseModelBackendTest, TestCase):\n         self.user.is_active = False\n         self.user.save()\n         self.assertIsNone(authenticate(**self.user_credentials))\n+    \n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authenticate_with_none_username_and_password(self):\n+        \"\"\"\n+        Test that authenticate() does not make a database query when both\n+        username and password are None.\n+        \"\"\"\n+        CountingMD5PasswordHasher.calls = 0\n+        with self.assertNumQueries(0):\n+            authenticate(username=None, password=None)\n+        self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n \n-    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserWithoutIsActiveField')\n+    def test_authenticate_with_none_username(self):\n+        \"\"\"\n+        Test that authenticate() does not make a database query when username is None.\n+        \"\"\"\n+        CountingMD5PasswordHasher.calls = 0\n+        with self.assertNumQueries(0):\n+            authenticate(username=None, password='some_password')\n+        self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n+\n+    def test_authenticate_with_none_password(self):\n+        \"\"\"\n+        Test that authenticate() does not make a database query when password is None.\n+        \"\"\"\n+        CountingMD5PasswordHasher.calls = 0\n+        with self.assertNumQueries(0):\n+            authenticate(username='some_user', password=None)\n+        self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n     def test_authenticate_user_without_is_active_field(self):\n         \"\"\"\n         A custom user without an `is_active` field is allowed to authenticate.\n",
  "django__django-11490": "",
  "django__django-11532": "diff --git a/tests/mail/tests.py b/tests/mail/tests.py\nindex a6f0e17..d59d66b 100644\n--- a/tests/mail/tests.py\n+++ b/tests/mail/tests.py\n@@ -11,6 +11,7 @@ from email import charset, message_from_binary_file, message_from_bytes\n from email.header import Header\n from email.mime.text import MIMEText\n from email.utils import parseaddr\n+from unittest import mock\n from io import StringIO\n from smtplib import SMTP, SMTPAuthenticationError, SMTPException\n from ssl import SSLError\n@@ -363,6 +364,24 @@ class MailTests(HeadersCheckMixin, SimpleTestCase):\n     def test_none_body(self):\n         msg = EmailMessage('subject', None, 'from@example.com', ['to@example.com'])\n         self.assertEqual(msg.body, '')\n+\n+    @mock.patch('django.core.mail.message.DNS_NAME', '\u6f22\u5b57')\n+    def test_non_ascii_dns_non_unicode_email(self):\n+        delattr(mail.message.DNS_NAME, '_fqdn')\n+        email = EmailMessage('Subject', 'content', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        message = email.message()\n+        # Verify that the Message-ID contains the punycode representation of the non-ASCII domain\n+        self.assertIn('@xn--p8s937b>', message['Message-ID'])\n+\n+    @mock.patch('django.core.mail.message.DNS_NAME', '\u6b63\u5b97')\n+    def test_non_ascii_dns_unicode_email(self):\n+        delattr(mail.message.DNS_NAME, '_fqdn')\n+        email = EmailMessage('Subject', 'content', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'utf-8'\n+        message = email.message()\n+        # Verify that the Message-ID handles unicode encoding correctly\n+        self.assertIn('@xn--fiq228c>', message['Message-ID'])\n         self.assertEqual(msg.message().get_payload(), '')\n \n     def test_encoding(self):\n",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..62950b7 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,9 +1,68 @@\n+\n+class ListDisplayFieldAccessTests(CheckTestCase):\n+\n+    def test_valid_field_accessible_via_instance(self):\n+        class PositionField(Field):\n+            \"\"\"Custom field accessible only via instance.\"\"\"\n+            def contribute_to_class(self, cls, name):\n+                super().contribute_to_class(cls, name)\n+                setattr(cls, self.name, self)\n+\n+            def __get__(self, instance, owner):\n+                if instance is None:\n+                    raise AttributeError()\n+\n+        class TestModel(Model):\n+            field = PositionField()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('field',)\n+\n+        self.assertIsValid(TestModelAdmin, TestModel)\n+\n+    def test_invalid_field_not_in_model(self):\n+        class TestModel(Model):\n+            number = Field()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('non_existent_field',)\n+\n+        self.assertIsInvalid(\n+            TestModelAdmin, TestModel,\n+            \"The value of 'list_display[0]' refers to 'non_existent_field', which is not a callable, \"\n+            \"an attribute of 'TestModelAdmin', or an attribute or method on '' (the model).\",\n+            'admin.E108'\n+        )\n+\n+    def test_method_in_list_display(self):\n+        class TestModel(Model):\n+            field = Field()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            def custom_method(self):\n+                pass\n+            list_display = ('custom_method',)\n+\n+        self.assertIsValid(TestModelAdmin, TestModel)\n+\n+    def test_callable_in_list_display(self):\n+        class TestModel(Model):\n+            field = Field()\n+\n+        def custom_callable(obj):\n+            return \"output\"\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = (custom_callable,)\n+\n+        self.assertIsValid(TestModelAdmin, TestModel)\n+\n from django import forms\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n-from django.db.models import F\n+from django.db.models import F, Field, Model\n from django.db.models.functions import Upper\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..1017b82 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -9,7 +9,7 @@ from django.db.models.functions import Upper\n from django.test import TestCase\n from django.utils.deprecation import RemovedInDjango31Warning\n \n-from .models import Article, Author, OrderedByFArticle, Reference\n+from .models import Article, Author, ChildArticle, OrderedByFArticle, Reference\n \n \n class OrderingTests(TestCase):\n@@ -462,6 +462,54 @@ class OrderingTests(TestCase):\n             attrgetter('headline')\n         )\n \n+    def test_order_by_parent_model_with_meta_ordering_expression(self):\n+        \"\"\"\n+        Test ordering of ChildArticle instances using Meta.ordering expressions\n+        from the parent model.\n+        \"\"\"\n+        ca1 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_2,\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca3 = ChildArticle.objects.create(\n+            headline='h3',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n+        \n+        # Test ordering by parent model field using default ordering expression\n+        articles = ChildArticle.objects.order_by('article_ptr')\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+        \n+    def test_ordering_with_different_expressions(self):\n+        \"\"\"\n+        Test if different expressions in Meta.ordering are handled correctly.\n+        \"\"\"\n+        # Set up more complex ordering expressions\n+        a5 = ChildArticle.objects.create(\n+            headline='h5',\n+            pub_date=datetime(2005, 7, 29),\n+            author=self.author_2,\n+        )\n+        a6 = ChildArticle.objects.create(\n+            headline='h6',\n+            pub_date=datetime(2005, 7, 25),\n+            author=self.author_1,\n+        )\n+\n+        articles = ChildArticle.objects.order_by(\n+            F('pub_date').desc(nulls_last=True), \n+            F('author').asc(nulls_first=True)\n+        )\n+        self.assertSequenceEqual(articles, [a5, ca4, ca1, ca2, ca3, a6])\n+\n     def test_deprecated_values_annotate(self):\n         msg = (\n             \"Article QuerySet won't use Meta.ordering in Django 3.1. Add \"\n@@ -469,5 +517,53 @@ class OrderingTests(TestCase):\n             \"descending=False), OrderBy(F(second_author__name), \"\n             \"descending=False)) to retain the current query.\"\n         )\n+\n+    def test_order_by_parent_model_with_meta_ordering_expression(self):\n+        \"\"\"\n+        Test ordering of ChildArticle instances using Meta.ordering expressions\n+        from the parent model.\n+        \"\"\"\n+        ca1 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_2,\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca3 = ChildArticle.objects.create(\n+            headline='h3',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n+        \n+        # Test ordering by parent model field using default ordering expression\n+        articles = ChildArticle.objects.order_by('article_ptr')\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+        \n+    def test_ordering_with_different_expressions(self):\n+        \"\"\"\n+        Test if different expressions in Meta.ordering are handled correctly.\n+        \"\"\"\n+        # Set up more complex ordering expressions\n+        a5 = ChildArticle.objects.create(\n+            headline='h5',\n+            pub_date=datetime(2005, 7, 29),\n+            author=self.author_2,\n+        )\n+        a6 = ChildArticle.objects.create(\n+            headline='h6',\n+            pub_date=datetime(2005, 7, 25),\n+            author=self.author_1,\n+        )\n+\n+        articles = ChildArticle.objects.order_by(\n+            F('pub_date').desc(nulls_last=True), \n+            F('author').asc(nulls_first=True)\n+        )\n+        self.assertSequenceEqual(articles, [a5, ca4, ca1, ca2, ca3, a6])\n         with self.assertRaisesMessage(RemovedInDjango31Warning, msg):\n             list(Article.objects.values('author').annotate(Count('headline')))\n",
  "django__django-11603": "",
  "django__django-11740": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a98fff5..783ebdd 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -718,7 +718,29 @@ class AutodetectorTests(TestCase):\n         self.assertOperationTypes(changes, 'testapp', 0, [\"RemoveField\"])\n         self.assertOperationAttributes(changes, \"testapp\", 0, 0, name=\"name\")\n \n-    def test_alter_field(self):\n+    def test_alter_field_to_fk_dependency(self):\n+        \"\"\"\n+        Test changing a UUIDField to a ForeignKey and ensure dependencies are created.\n+        \"\"\"\n+        app1_initial = ModelState(\"testapp1\", \"App1\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+            (\"another_app\", models.UUIDField(null=True, blank=True))\n+        ])\n+        app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+            (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL))\n+        ])\n+        app2 = ModelState(\"testapp2\", \"App2\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([app1_initial, app2], [app1_with_fk, app2])\n+        # Right number/type of migrations?\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, [\"AlterField\"])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n         \"\"\"Tests autodetection of new fields.\"\"\"\n         changes = self.get_changes([self.author_name], [self.author_name_longer])\n         # Right number/type of migrations?\n@@ -2399,4 +2421,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-11749": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex a0e1530..929c25b 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -219,11 +219,55 @@ class CommandTests(SimpleTestCase):\n         management.call_command('subparser', 'foo', 12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n \n+    def test_mutually_exclusive_group_required_options_with_kwargs(self):\n+        \"\"\"Test call_command with kwargs for mutually exclusive required group.\"\"\"\n+        from django.core.management import call_command\n+        from django.core.management import CommandError\n+        from io import StringIO\n+\n+        # Test calling with 'foo_id' via kwargs\n+        out = StringIO()\n+        call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+\n+        # Test calling with 'foo_name' via kwargs\n+        out = StringIO()\n+        call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+\n+        # Test calling with neither 'foo_id' nor 'foo_name' which should raise a CommandError\n+        out = StringIO()\n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            call_command('mutually_exclusive_required', stdout=out)\n+\n     def test_subparser_dest_args(self):\n         out = StringIO()\n         management.call_command('subparser_dest', 'foo', bar=12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n \n+    def test_mutually_exclusive_group_required_options_with_kwargs(self):\n+        \"\"\"Test call_command with kwargs for mutually exclusive required group.\"\"\"\n+        from django.core.management import call_command\n+        from django.core.management import CommandError\n+        from io import StringIO\n+\n+        # Test calling with 'foo_id' via kwargs\n+        out = StringIO()\n+        call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+\n+        # Test calling with 'foo_name' via kwargs\n+        out = StringIO()\n+        call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+\n+        # Test calling with neither 'foo_id' nor 'foo_name' which should raise a CommandError\n+        out = StringIO()\n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            call_command('mutually_exclusive_required', stdout=out)\n+\n     def test_subparser_dest_required_args(self):\n         out = StringIO()\n         management.call_command('subparser_required', 'foo_1', 'foo_2', bar=12, stdout=out)\n",
  "django__django-11790": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 440150b..30e808f 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -437,7 +437,29 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         self.assertEqual(form.fields['username'].max_length, 254)\n         self.assertEqual(form.errors, {})\n \n-    def test_username_field_label(self):\n+    def test_username_field_max_length_html_attribute_matches_user_model(self):\n+        # Test when max_length is set to 255\n+        self.assertEqual(CustomEmailField._meta.get_field('username').max_length, 255)\n+        data = {\n+            'username': 'u' * 255,\n+            'password': 'pwd',\n+            'email': 'test@example.com',\n+        }\n+        CustomEmailField.objects.create_user(**data)\n+        form = AuthenticationForm(None, data)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 255)\n+\n+    @override_settings(AUTH_USER_MODEL='auth_tests.IntegerUsernameUser')\n+    def test_username_field_max_length_html_attribute_defaults_to_254(self):\n+        # Test default max_length when not set in the model\n+        self.assertIsNone(IntegerUsernameUser._meta.get_field('username').max_length)\n+        data = {\n+            'username': '0123456',\n+            'password': 'password',\n+        }\n+        IntegerUsernameUser.objects.create_user(**data)\n+        form = AuthenticationForm(None, data)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 254)\n \n         class CustomAuthenticationForm(AuthenticationForm):\n             username = CharField(label=\"Name\", max_length=75)\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..3de5e5d 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -253,6 +253,31 @@ class WriterTests(SimpleTestCase):\n         self.assertEqual(self.serialize_round_trip(lazy_pattern), pattern)\n \n     def test_serialize_enums(self):\n+        # This test case verifies serialization using Enum name, not value.\n+        class TextTranslatedEnum(enum.Enum):\n+            A = _('a-value')\n+            B = _('value-b')\n+\n+        # Check that serialization uses Enum name, not the translated value.\n+        self.assertSerializedResultEqual(\n+            TextTranslatedEnum.A,\n+            (\"migrations.test_writer.TextTranslatedEnum['A']\", {'import migrations.test_writer'})\n+        )\n+        self.assertSerializedResultEqual(\n+            TextTranslatedEnum.B,\n+            (\"migrations.test_writer.TextTranslatedEnum['B']\", {'import migrations.test_writer'})\n+        )\n+\n+        # Create a CharField using this Enum with translation\n+        field = models.CharField(default=TextTranslatedEnum.A, choices=[(m.value, m.name) for m in TextTranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('a-value', migrations.test_writer.TextTranslatedEnum['A']), \"\n+            \"('value-b', migrations.test_writer.TextTranslatedEnum['B'])], \"\n+            \"default=migrations.test_writer.TextTranslatedEnum['A'])\"\n+        )\n         class TextEnum(enum.Enum):\n             A = 'a-value'\n             B = 'value-b'\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..1bba72e 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,7 @@\n+\n import unittest\n from datetime import datetime\n+from unittest import mock\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -320,7 +322,31 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_asctime(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_with_mocked_datetime(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        # Create different current times for testing\n+        utcnow_1 = datetime(2019, 11, 6, 8, 49, 37)\n+        utcnow_2 = datetime(2020, 11, 6, 8, 49, 37)\n+        utcnow_3 = datetime(2048, 11, 6, 8, 49, 37)\n+        \n+        tests = [\n+            (utcnow_1, 'Tuesday, 31-Dec-69 08:49:37 GMT', datetime(1969, 12, 31, 8, 49, 37)),\n+            (utcnow_1, 'Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),\n+            (utcnow_1, 'Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37)),\n+            (utcnow_2, 'Wednesday, 31-Dec-70 08:49:37 GMT', datetime(1970, 12, 31, 8, 49, 37)),\n+            (utcnow_2, 'Friday, 31-Dec-71 08:49:37 GMT', datetime(1971, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+        ]\n+\n+        for utcnow, rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = utcnow\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n         parsed = parse_http_date('Sun Nov  6 08:49:37 1994')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n",
  "django__django-11880": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 95afc0d..b5cc24f 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3672,7 +3672,53 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n             '<input type=\"hidden\" name=\"data\" id=\"id_data\"></td></tr>'\n         )\n \n-    def test_field_named_data(self):\n+import copy\n+from django.forms import CharField, Form\n+\n+class DeepCopyErrorMessagesTest(SimpleTestCase):\n+    def test_field_deep_copy_error_messages(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        self.assertIsInstance(field_copy, CustomCharField)\n+        self.assertIsNot(field_copy.error_messages, field.error_messages)\n+\n+    def test_deepcopy_does_not_affect_original_field(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        field_copy.error_messages['invalid'] = 'New error message.'\n+\n+        self.assertEqual(field.error_messages['invalid'], 'Form custom error message.')\n+        self.assertEqual(field_copy.error_messages['invalid'], 'New error message.')\n+\n+    def test_deepcopy_multiple_fields(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field1 = CustomCharField()\n+        field2 = CustomCharField()\n+\n+        field_copy1 = copy.deepcopy(field1)\n+        field_copy2 = copy.deepcopy(field2)\n+\n+        field_copy1.error_messages['invalid'] = 'Different error message for field1.'\n+        field_copy2.error_messages['invalid'] = 'Different error message for field2.'\n+\n+        self.assertEqual(field1.error_messages['invalid'], 'Form custom error message.')\n+        self.assertEqual(field2.error_messages['invalid'], 'Form custom error message.')\n+        self.assertEqual(field_copy1.error_messages['invalid'], 'Different error message for field1.')\n+        self.assertEqual(field_copy2.error_messages['invalid'], 'Different error message for field2.')\n         class DataForm(Form):\n             data = CharField(max_length=10)\n \n",
  "django__django-11951": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex f2f6bbd..f6a2792 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -1,3 +1,5 @@\n+\n+from math import ceil\n from operator import attrgetter\n \n from django.db import IntegrityError, NotSupportedError, connection\n",
  "django__django-11964": "diff --git a/tests/model_fields/test_charfield.py b/tests/model_fields/test_charfield.py\nindex c6162e5..149ab05 100644\n--- a/tests/model_fields/test_charfield.py\n+++ b/tests/model_fields/test_charfield.py\n@@ -1,10 +1,28 @@\n+\n from unittest import skipIf\n \n from django.core.exceptions import ValidationError\n from django.db import connection, models\n from django.test import SimpleTestCase, TestCase\n \n-from .models import Post\n+from .models import Post, MyObject, MyChoice\n+\n+\n+class MyChoiceTests(TestCase):\n+\n+    def setUp(self):\n+        self.obj = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n+\n+    def test_created_object_enum_value(self):\n+        # Ensure that the stored value is of type str, not an enum\n+        self.assertIsInstance(self.obj.my_str_value, str)\n+        self.assertEqual(self.obj.my_str_value, MyChoice.FIRST_CHOICE)\n+\n+    def test_retrieved_object_enum_value(self):\n+        # Retrieve the object from the database and check the value type\n+        retrieved_obj = MyObject.objects.get(pk=self.obj.pk)\n+        self.assertIsInstance(retrieved_obj.my_str_value, str)\n+        self.assertEqual(retrieved_obj.my_str_value, MyChoice.FIRST_CHOICE)\n \n \n class TestCharField(TestCase):\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..23c8c88 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -148,6 +148,19 @@ class ChoicesTests(SimpleTestCase):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n \n+class FooBarModelTests(TestCase):\n+\n+    def test_overriding_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+\n+\n class GetFieldDisplayTests(SimpleTestCase):\n \n     def test_choices_and_field_display(self):\n",
  "django__django-12039": "diff --git a/tests/indexes/tests.py b/tests/indexes/tests.py\nindex 700f574..c6b83b3 100644\n--- a/tests/indexes/tests.py\n+++ b/tests/indexes/tests.py\n@@ -9,12 +9,16 @@ from django.db.models.query_utils import Q\n from django.test import (\n     TestCase, TransactionTestCase, skipIfDBFeature, skipUnlessDBFeature,\n )\n+from django.db.models import Index\n+from django.db import connection\n from django.test.utils import override_settings\n from django.utils import timezone\n \n from .models import (\n     Article, ArticleTranslation, IndexedArticle2, IndexTogetherSingleList,\n )\n+from django.db.models import Index\n+from django.db import connection\n \n \n class SchemaIndexesTests(TestCase):\n@@ -75,8 +79,45 @@ class SchemaIndexesTests(TestCase):\n         index_sql = connection.schema_editor()._model_indexes_sql(IndexTogetherSingleList)\n         self.assertEqual(len(index_sql), 1)\n \n+    def test_columns_list_sql(self):\n+        index = Index(fields=['headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n \n-@skipIf(connection.vendor == 'postgresql', 'opclasses are PostgreSQL only')\n+    def test_descending_columns_list_sql(self):\n+        index = Index(fields=['-headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s DESC)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_ops_class_columns_lists_sql(self):\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_ops_class_descending_columns_list_sql(self):\n+        index = Index(\n+            fields=['-headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops DESC)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n class SchemaIndexesNotPostgreSQLTests(TransactionTestCase):\n     available_apps = ['indexes']\n \n",
  "django__django-12050": "",
  "django__django-12125": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex e62f7b0..90b502f 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -561,7 +561,20 @@ class WriterTests(SimpleTestCase):\n         self.assertSerializedEqual(FoodManager('a', 'b'))\n         self.assertSerializedEqual(FoodManager('x', 'y', c=3, d=4))\n \n-    def test_serialize_frozensets(self):\n+    def test_serialize_inner_class(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class ModelWithInnerField(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        # Create a MigrationWriter instance to serialize the field\n+        field = ModelWithInnerField._meta.get_field('field')\n+        string = MigrationWriter.serialize(field)[0]\n+\n+        # Check that the serialized path is correct\n+        self.assertIn(\"Outer.Inner\", string)\n         self.assertSerializedEqual(frozenset())\n         self.assertSerializedEqual(frozenset(\"let it go\"))\n \n@@ -746,4 +759,4 @@ class WriterTests(SimpleTestCase):\n \n     def test_register_non_serializer(self):\n         with self.assertRaisesMessage(ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "django__django-12143": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 2d13234..2bb3688 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -831,10 +831,34 @@ class ChangeListTests(TestCase):\n             'form-0-load': '10',\n             '_save': 'Save',\n         }\n+    def test_get_list_editable_queryset_with_various_special_chars_in_prefix(self):\n+        \"\"\"Test list_editable with form prefixes containing special regex characters.\"\"\"\n+        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n+        Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n+        \n+        special_char_prefixes = ['form$', 'form^', 'form*', 'form+', 'form?', 'form|']\n+        \n         superuser = self._create_superuser('superuser')\n         self.client.force_login(superuser)\n         changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n         m = SwallowAdmin(Swallow, custom_site)\n+\n+        for prefix in special_char_prefixes:\n+            data = {\n+                f'{prefix}-TOTAL_FORMS': '2',\n+                f'{prefix}-INITIAL_FORMS': '2',\n+                f'{prefix}-MIN_NUM_FORMS': '0',\n+                f'{prefix}-MAX_NUM_FORMS': '1000',\n+                f'{prefix}-0-uuid': str(a.pk),\n+                f'{prefix}-0-load': '10',\n+                '_save': 'Save',\n+            }\n+            request = self.factory.post(changelist_url, data=data)\n+            queryset = m._get_list_editable_queryset(request, prefix=prefix)\n+            self.assertEqual(queryset.count(), 1)\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n         request = self.factory.post(changelist_url, data=data)\n         queryset = m._get_list_editable_queryset(request, prefix='form')\n         self.assertEqual(queryset.count(), 1)\n",
  "django__django-12155": "",
  "django__django-12193": "diff --git a/tests/postgres_tests/test_array.py b/tests/postgres_tests/test_array.py\nindex 6228cbc..08273e4 100644\n--- a/tests/postgres_tests/test_array.py\n+++ b/tests/postgres_tests/test_array.py\n@@ -1103,6 +1103,30 @@ class TestSplitFormWidget(PostgreSQLWidgetTestCase):\n             }\n         )\n \n+    def test_split_array_widget_checkbox_preserves_checked_state(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=4)\n+        context = widget.get_context('name', [True, False, True, False])\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{'checked': True}, {}, {'checked': True}, {}]\n+        )\n+\n+    def test_split_array_widget_checkbox_handles_all_false(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('name', [False, False, False])\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{}, {}, {}]\n+        )\n+\n+    def test_split_array_widget_checkbox_handles_all_true(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('name', [True, True, True])\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{'checked': True}, {'checked': True}, {'checked': True}]\n+        )\n+\n     def test_render(self):\n         self.check_html(\n             SplitArrayWidget(forms.TextInput(), size=2), 'array', None,\n",
  "django__django-12209": "diff --git a/tests/serializers/models/data.py b/tests/serializers/models/data.py\nindex 946715d..58b1e2f 100644\n--- a/tests/serializers/models/data.py\n+++ b/tests/serializers/models/data.py\n@@ -246,15 +246,11 @@ class SlugPKData(models.Model):\n class SmallPKData(models.Model):\n     data = models.SmallIntegerField(primary_key=True)\n \n-# class TextPKData(models.Model):\n-#     data = models.TextField(primary_key=True)\n-\n-# class TimePKData(models.Model):\n-#    data = models.TimeField(primary_key=True)\n-\n+from uuid import uuid4\n+from django.db import models\n \n-class UUIDData(models.Model):\n-    data = models.UUIDField(primary_key=True)\n+class UUIDDefaultData(models.Model):\n+    data = models.UUIDField(primary_key=True, default=uuid4)\n \n \n class FKToUUID(models.Model):\n",
  "django__django-12262": "diff --git a/tests/template_tests/templatetags/inclusion.py b/tests/template_tests/templatetags/inclusion.py\nindex da4058d..2a88700 100644\n--- a/tests/template_tests/templatetags/inclusion.py\n+++ b/tests/template_tests/templatetags/inclusion.py\n@@ -136,6 +136,11 @@ def inclusion_one_default(one, two='hi'):\n inclusion_one_default.anything = \"Expected inclusion_one_default __dict__\"\n \n \n+@register.inclusion_tag('inclusion.html')\n+def inclusion_keyword_only_default(*, kwarg=42):\n+    \"\"\"Expected inclusion_keyword_only_default __doc__\"\"\"\n+    return {\"result\": \"inclusion_keyword_only_default - Expected result: %s\" % kwarg}\n+\n @register.inclusion_tag(engine.get_template('inclusion.html'))\n def inclusion_one_default_from_template(one, two='hi'):\n     \"\"\"Expected inclusion_one_default_from_template __doc__\"\"\"\n",
  "django__django-12276": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 61f7a13..8059dd4 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -1,3 +1,6 @@\n+\n+from django.forms import FileInput\n+\n import copy\n import datetime\n import json\n@@ -2486,7 +2489,30 @@ Password: <input type=\"password\" name=\"password\" required>\n         self.assertEqual(f.errors, {})\n         self.assertEqual(f.cleaned_data['file1'], 'resume.txt')\n \n-    def test_basic_processing_in_view(self):\n+    def test_filefield_with_fileinput_required(self):\n+        class FileForm(Form):\n+            file1 = FileField(widget=FileInput)\n+\n+        # Test without initial data; should include required attribute\n+        f = FileForm(auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n+        )\n+\n+        # Test with initial data; should NOT include required attribute\n+        f = FileForm(initial={'file1': 'resume.txt'}, auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n+        )\n+\n+    def test_use_required_attribute(self):\n+        widget = FileInput()\n+        # No initial data, hence True\n+        self.assertIs(widget.use_required_attribute(None), True)\n+        # With initial data, hence False\n+        self.assertIs(widget.use_required_attribute('resume.txt'), False)\n         class UserRegistration(Form):\n             username = CharField(max_length=10)\n             password1 = CharField(widget=PasswordInput)\n",
  "django__django-12304": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 6cabf01..c19a1fa 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import decimal\n import ipaddress\n@@ -6,6 +7,7 @@ import uuid\n from django.db import models\n from django.test import SimpleTestCase\n from django.utils.functional import Promise\n+from django.template import Context, Template\n from django.utils.translation import gettext_lazy as _\n \n \n@@ -137,7 +139,17 @@ class ChoicesTests(SimpleTestCase):\n                 # A string is not permitted as the second argument to int().\n                 ONE = 1, 'X', 'Invalid'\n \n-        msg = \"duplicate values found in <enum 'Fruit'>: PINEAPPLE -> APPLE\"\n+    def test_enum_in_templates(self):\n+        class YearInSchool(models.TextChoices):\n+            FRESHMAN = 'FR', _('Freshman')\n+            SOPHOMORE = 'SO', _('Sophomore')\n+            JUNIOR = 'JR', _('Junior')\n+            SENIOR = 'SR', _('Senior')\n+\n+        template = Template('{% if student.year_in_school == YearInSchool.FRESHMAN %}Freshman{% endif %}')\n+        context = Context({'YearInSchool': YearInSchool, 'student': {'year_in_school': YearInSchool.FRESHMAN}})\n+        output = template.render(context)\n+        self.assertEqual(output, 'Freshman')\n         with self.assertRaisesMessage(ValueError, msg):\n             class Fruit(models.IntegerChoices):\n                 APPLE = 1, 'Apple'\n",
  "django__django-12308": "",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..c0f3be6 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -999,6 +999,17 @@ class OtherModelTests(SimpleTestCase):\n                 related_name='+',\n             )\n \n+    def test_mti_with_multiple_onetoone_references(self):\n+        class Document(models.Model):\n+            pass\n+\n+        class Picking(Document):\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+\n+        # Check for any errors in model configuration\n+        self.assertEqual(Picking.check(), [])\n+\n         class ShippingMethodPrice(models.Model):\n             method = models.ForeignKey(ShippingMethod, models.CASCADE)\n             to_country = models.ForeignKey(Country, models.CASCADE)\n@@ -1007,7 +1018,15 @@ class OtherModelTests(SimpleTestCase):\n         self.assertEqual(ShippingMethod.check(), [])\n \n     def test_missing_parent_link(self):\n-        msg = 'Add parent_link=True to invalid_models_tests.ParkingLot.parent.'\n+        # This verifies that the order of OneToOneFields matters if parent_link is incorrectly set.\n+        msg = 'Add parent_link=True to invalid_models_tests.Picking.origin.'\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            class Document(models.Model):\n+                pass\n+\n+            class Picking(Document):\n+                origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+                document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n         with self.assertRaisesMessage(ImproperlyConfigured, msg):\n             class Place(models.Model):\n                 pass\n",
  "django__django-12419": "diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py\nindex 7af62eb..ab07023 100644\n--- a/tests/middleware/test_security.py\n+++ b/tests/middleware/test_security.py\n@@ -223,6 +223,15 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         ret = self.process_request(\"get\", \"/some/url\")\n         self.assertIsNone(ret)\n \n+    @override_settings(SECURE_REFERRER_POLICY='')\n+    def test_referrer_policy_default_same_origin_empty_string(self):\n+        \"\"\"\n+        With SECURE_REFERRER_POLICY set to an empty string, the middleware should default\n+        to adding a \"Referrer-Policy\" header with \"same-origin\".\n+        \"\"\"\n+        response = self.process_response()\n+        self.assertEqual(response.get('Referrer-Policy'), 'same-origin')\n+\n     @override_settings(SECURE_REFERRER_POLICY=None)\n     def test_referrer_policy_off(self):\n         \"\"\"\n@@ -231,7 +240,14 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         \"\"\"\n         self.assertNotIn('Referrer-Policy', self.process_response())\n \n-    def test_referrer_policy_on(self):\n+    @override_settings()\n+    def test_referrer_policy_default_same_origin_none(self):\n+        \"\"\"\n+        With SECURE_REFERRER_POLICY not set, the middleware should default\n+        to adding a \"Referrer-Policy\" header with \"same-origin\".\n+        \"\"\"\n+        response = self.process_response()\n+        self.assertEqual(response.get('Referrer-Policy'), 'same-origin')\n         \"\"\"\n         With SECURE_REFERRER_POLICY set to a valid value, the middleware adds a\n         \"Referrer-Policy\" header to the response.\n@@ -254,4 +270,4 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         present in the response.\n         \"\"\"\n         response = self.process_response(headers={'Referrer-Policy': 'unsafe-url'})\n-        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n",
  "django__django-12663": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 872551b..2468764 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -14,6 +14,7 @@ from django.db.models import (\n     Subquery, Sum, TimeField, UUIDField, Value, Variance, When,\n )\n from django.db.models.expressions import Col, Combinable, Random, RawSQL, Ref\n+from django.utils.functional import SimpleLazyObject\n from django.db.models.functions import (\n     Coalesce, Concat, Left, Length, Lower, Substr, Upper,\n )\n@@ -23,7 +24,7 @@ from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import Approximate, isolate_apps\n \n from .models import (\n-    UUID, UUIDPK, Company, Employee, Experiment, Number, RemoteEmployee,\n+    UUID, UUIDPK, Company, Employee, Experiment, Manager, Number, RemoteEmployee,\n     Result, SimulationRun, Time,\n )\n \n",
  "django__django-12708": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 2df48a2..ac55c3a 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1759,7 +1759,46 @@ class OperationTests(OperationTestBase):\n         operation = migrations.AlterIndexTogether(\"Pony\", None)\n         self.assertEqual(operation.describe(), \"Alter index_together for Pony (0 constraint(s))\")\n \n-    @skipUnlessDBFeature('supports_table_check_constraints')\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_alter_index_together_remove_with_unique_together(self):\n+        app_label = 'test_alintoremove_wunto'\n+        table_name = '%s_pony' % app_label\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        # Add index together.\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        # Remove index together.\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+\n+    def test_alter_index_together_migrate_to_indexes_feature(self):\n+        app_label = 'test_index_migrate'\n+        table_name = '%s_pony' % app_label\n+        project_state = self.set_up_test_model(app_label, unique_together=True, index_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        # Migrate to using the indexes feature.\n+        new_state = project_state.clone()\n+        operation = migrations.AlterModelOptions(\n+            name='Pony',\n+            options={'indexes': [models.Index(fields=['pink', 'weight'])]}\n+        )\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n     def test_add_constraint(self):\n         project_state = self.set_up_test_model(\"test_addconstraint\")\n         gt_check = models.Q(pink__gt=2)\n",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..ef0fdf7 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -14,7 +14,8 @@ from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.auth.models import User\n from django.core.files.storage import default_storage\n from django.core.files.uploadedfile import SimpleUploadedFile\n-from django.db.models import CharField, DateField, DateTimeField, UUIDField\n+from django.db.models import CharField, DateField, DateTimeField, ManyToManyField, UUIDField\n+from django.contrib.admin import widgets\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..8e926f8 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -166,13 +166,35 @@ class SqlFlushTests(TransactionTestCase):\n             self.assertIs(Author.objects.exists(), True)\n             self.assertIs(Book.objects.exists(), True)\n \n+    def test_execute_sql_flush_simplified_signature(self):\n+        \"\"\"\n+        Test the execute_sql_flush method with the simplified signature\n+        (without the 'using' parameter).\n+        \"\"\"\n         sql_list = connection.ops.sql_flush(\n             no_style(),\n             [Author._meta.db_table, Book._meta.db_table],\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)  # Ensure no exception is raised\n+\n+        with transaction.atomic():\n+            self.assertIs(Author.objects.exists(), False)\n+            self.assertIs(Book.objects.exists(), False)\n+            if connection.features.supports_sequence_reset:\n+                author = Author.objects.create(name='Jane Austen')\n+                self.assertEqual(author.pk, 1)\n+                book = Book.objects.create(author=author)\n+                self.assertEqual(book.pk, 1)\n+\n+        sql_list = connection.ops.sql_flush(\n+            no_style(),\n+            [Author._meta.db_table, Book._meta.db_table],\n+            reset_sequences=True,\n+            allow_cascade=True,\n+        )\n+        connection.ops.execute_sql_flush(sql_list)\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n@@ -181,4 +203,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..ef52189 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -9,6 +9,8 @@ from django.db.models import Exists, Max, OuterRef\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n from django.utils.deprecation import RemovedInDjango40Warning\n+from django.db import models\n+from django.test.utils import isolate_apps\n \n from .models import (\n     Article, Author, Freebie, Game, IsNullWithNoneAsRHS, Player, Season, Tag,\n@@ -194,7 +196,44 @@ class LookupTests(TestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             Article.objects.in_bulk([self.au1], field_name='author')\n \n-    def test_values(self):\n+    @isolate_apps('lookup')\n+    def test_in_bulk_meta_constraint(self):\n+        season_2011 = Season.objects.create(year=2011)\n+        season_2012 = Season.objects.create(year=2012)\n+        Season.objects.create(year=2013)\n+        self.assertEqual(\n+            Season.objects.in_bulk(\n+                [season_2011.year, season_2012.year],\n+                field_name='year',\n+            ),\n+            {season_2011.year: season_2011, season_2012.year: season_2012},\n+        )\n+\n+    @isolate_apps('lookup')\n+    def test_in_bulk_non_unique_meta_constraint(self):\n+        class Model(models.Model):\n+            ean = models.CharField(max_length=100)\n+            brand = models.CharField(max_length=100)\n+            name = models.CharField(max_length=80)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=['ean'],\n+                        name='partial_ean_unique',\n+                        condition=models.Q(is_active=True)\n+                    ),\n+                    models.UniqueConstraint(\n+                        fields=['brand', 'name'],\n+                        name='together_brand_name_unique',\n+                    ),\n+                ]\n+\n+        msg = \"in_bulk()'s field_name must be a unique field but '%s' isn't.\"\n+        for field_name in ['brand', 'ean']:\n+            with self.subTest(field_name=field_name):\n+                with self.assertRaisesMessage(ValueError, msg % field_name):\n+                    Model.objects.in_bulk(field_name=field_name)\n         # values() returns a list of dictionaries instead of object instances --\n         # and you can specify which fields you want to retrieve.\n         self.assertSequenceEqual(\n",
  "django__django-12858": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 3b6974f..fdf6d91 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -880,10 +880,23 @@ class OtherModelTests(SimpleTestCase):\n                 \"or lookup 'parent__field1__field2'.\",\n                 obj=Child,\n                 id='models.E015',\n+            ),\n+            (\n+                'E015',\n+                'ordering refers to the nonexistent field, related field, or lookup.',\n+                'models.E015',\n             )\n         ])\n+    def test_ordering_using_invalid_lookup(self):\n+        class Model(models.Model):\n+            test = models.CharField(max_length=100)\n+\n+            class Meta:\n+                ordering = ('test__invalidlookup',)\n \n-    def test_ordering_allows_registered_lookups(self):\n+        errors = Model.check()\n+        self.assertEqual(len(errors), 1)\n+        self.assertEqual(errors[0].id, 'models.E015')\n         class Model(models.Model):\n             test = models.CharField(max_length=100)\n \n",
  "django__django-13012": "",
  "django__django-13028": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 70329a0..b1da666 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -1210,9 +1210,24 @@ class Queries1Tests(TestCase):\n             [],\n         )\n \n+from django.test import TestCase\n+from .models import Author, ExtraInfo\n+from django.db import models\n \n class Queries2Tests(TestCase):\n     @classmethod\n+    def setUpTestData(cls):\n+        cls.n2 = Note.objects.create(note='n2', misc='bar', id=2)\n+        cls.e2 = ExtraInfo.objects.create(info='e2', note=cls.n2, value=41, filterable=False)\n+        cls.a3 = Author.objects.create(name='a3', num=3003, extra=cls.e2)\n+        \n+    def test_filter_with_non_filterable_field(self):\n+        try:\n+            authors = Author.objects.filter(extra=self.e2)\n+            self.assertSequenceEqual(authors, [self.a3])\n+        except NotSupportedError:\n+            self.fail(\"Filtering with a non-filterable field should not raise NotSupportedError\")\n+    @classmethod\n     def setUpTestData(cls):\n         Number.objects.create(num=4)\n         Number.objects.create(num=8)\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..1c0d449 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,6 +343,30 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_self_referencing_fk_order_by(self):\n+        # Create instances of OneModel with a self-referencing foreign key\n+        root1 = OneModel.objects.create(oneval=1)\n+        child1 = OneModel.objects.create(root=root1, oneval=2)\n+        child2 = OneModel.objects.create(root=root1, oneval=3)\n+\n+        # Create instances of TwoModel that reference OneModel\n+        two1 = TwoModel.objects.create(record=child1, twoval=100)\n+        two2 = TwoModel.objects.create(record=child2, twoval=200)\n+\n+        # Test ordering by the self-referencing foreign key\n+        qs = TwoModel.objects.filter(record__oneval__in=[2, 3])\n+        qs = qs.order_by(\"record__root_id\")\n+        self.assertQuerysetEqual(\n+            qs, [two1, two2], transform=lambda x: x\n+        )\n+\n+        # Test ordering by the self-referencing foreign key with descending order\n+        qs_desc = TwoModel.objects.filter(record__oneval__in=[2, 3])\n+        qs_desc = qs_desc.order_by(\"-record__root_id\")\n+        self.assertQuerysetEqual(\n+            qs_desc, [two2, two1], transform=lambda x: x\n+        )\n+\n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n@@ -353,6 +377,30 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n+\n+    def test_self_referencing_fk_order_by(self):\n+        # Create instances of OneModel with a self-referencing foreign key\n+        root1 = OneModel.objects.create(oneval=1)\n+        child1 = OneModel.objects.create(root=root1, oneval=2)\n+        child2 = OneModel.objects.create(root=root1, oneval=3)\n+\n+        # Create instances of TwoModel that reference OneModel\n+        two1 = TwoModel.objects.create(record=child1, twoval=100)\n+        two2 = TwoModel.objects.create(record=child2, twoval=200)\n+\n+        # Test ordering by the self-referencing foreign key\n+        qs = TwoModel.objects.filter(record__oneval__in=[2, 3])\n+        qs = qs.order_by(\"record__root_id\")\n+        self.assertQuerysetEqual(\n+            qs, [two1, two2], transform=lambda x: x\n+        )\n+\n+        # Test ordering by the self-referencing foreign key with descending order\n+        qs_desc = TwoModel.objects.filter(record__oneval__in=[2, 3])\n+        qs_desc = qs_desc.order_by(\"-record__root_id\")\n+        self.assertQuerysetEqual(\n+            qs_desc, [two2, two1], transform=lambda x: x\n+        )\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline').asc()), [\n                 \"Article 1\",\n",
  "django__django-13089": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex e11856f..799ed1a 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -617,8 +617,25 @@ class BaseCacheTests:\n \n     def test_cull(self):\n         self._perform_cull_test('cull', 50, 29)\n+    def test_cull_delete_with_no_data(self):\n+        \"\"\"\n+        Test that _cull does not throw an error when there is no data to cull.\n+        \"\"\"\n+        try:\n+            cull_cache = caches['cull']\n+        except InvalidCacheBackendError:\n+            self.skipTest(\"Culling isn't implemented.\")\n+        \n+        cull_cache.clear()  # Ensure the cache is empty\n+        old_max_entries = cull_cache._max_entries\n+        cull_cache._max_entries = 1  # Force _cull to be triggered\n \n-    def test_zero_cull(self):\n+        try:\n+            # Attempt to set a cache which will trigger a cull in an empty store\n+            cull_cache.set('key', 'value', 1000)\n+            self.assertIs(cull_cache.has_key('key'), True)\n+        finally:\n+            cull_cache._max_entries = old_max_entries\n         self._perform_cull_test('zero_cull', 50, 19)\n \n     def _perform_invalid_key_test(self, key, expected_warning):\n",
  "django__django-13109": "",
  "django__django-13112": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 081eff8..a2a58c4 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -867,7 +867,61 @@ class StateTests(SimpleTestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             project_state.apps\n \n-    def test_real_apps(self):\n+    def test_reference_mixed_case_app_label(self):\n+        new_apps = Apps()\n+\n+        class Author(models.Model):\n+            class Meta:\n+                app_label = 'MiXedCase_migrations'\n+                apps = new_apps\n+\n+        class Book(models.Model):\n+            author = models.ForeignKey(Author, models.CASCADE)\n+\n+            class Meta:\n+                app_label = 'MiXedCase_migrations'\n+                apps = new_apps\n+\n+        class Magazine(models.Model):\n+            authors = models.ManyToManyField(Author)\n+\n+            class Meta:\n+                app_label = 'MiXedCase_migrations'\n+                apps = new_apps\n+\n+        project_state = ProjectState()\n+        project_state.add_model(ModelState.from_model(Author))\n+        project_state.add_model(ModelState.from_model(Book))\n+        project_state.add_model(ModelState.from_model(Magazine))\n+        self.assertEqual(len(project_state.apps.get_models()), 3)\n+\n+    def test_mixed_case_app_name_makemigrations(self):\n+        \"\"\"\n+        Test makemigrations with a mixed-case app name to ensure it doesn't crash.\n+        \"\"\"\n+        new_apps = Apps()\n+\n+        class Category(models.Model):\n+            title = models.CharField(max_length=100, db_index=True)\n+            slug = models.SlugField(max_length=100, db_index=True)\n+\n+            class Meta:\n+                app_label = 'DJ_RegLogin'\n+                apps = new_apps\n+\n+        class Content(models.Model):\n+            title = models.CharField(max_length=100, unique=True)\n+            slug = models.SlugField(max_length=100, unique=True)\n+            category = models.ForeignKey(Category, on_delete=models.CASCADE)\n+\n+            class Meta:\n+                app_label = 'DJ_RegLogin'\n+                apps = new_apps\n+\n+        project_state = ProjectState()\n+        project_state.add_model(ModelState.from_model(Category))\n+        project_state.add_model(ModelState.from_model(Content))\n+        self.assertEqual(len(project_state.apps.get_models()), 2)\n         \"\"\"\n         Including real apps can resolve dangling FK errors.\n         This test relies on the fact that contenttypes is always loaded.\n",
  "django__django-13121": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex a684d7e..78bb01e 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1210,12 +1210,80 @@ class ExpressionOperatorTests(TestCase):\n         self.assertEqual(Number.objects.get(pk=self.n.pk).integer, 1764)\n         self.assertEqual(Number.objects.get(pk=self.n.pk).float, Approximate(61.02, places=2))\n \n+    from datetime import timedelta\n+    from django.db.models import F\n+    from django.test import TestCase\n+    from .models import Experiment\n+\n+    class DurationExpressionTests(TestCase):\n+        def setUp(self):\n+            self.deltas = [timedelta(days=1), timedelta(hours=1), timedelta(minutes=1)]\n+            Experiment.objects.create(estimated_time=timedelta(days=2))\n+            Experiment.objects.create(estimated_time=timedelta(hours=5))\n+            Experiment.objects.create(estimated_time=timedelta(minutes=30))\n+\n+        def test_duration_expressions(self):\n+            for delta in self.deltas:\n+                qs = Experiment.objects.annotate(duration=F('estimated_time') + delta)\n+                for obj in qs:\n+                    self.assertEqual(obj.duration, obj.estimated_time + delta)\n+\n+        def test_negative_duration_expressions(self):\n+            for delta in self.deltas:\n+                qs = Experiment.objects.annotate(duration=F('estimated_time') - delta)\n+                for obj in qs:\n+                    self.assertEqual(obj.duration, obj.estimated_time - delta)\n+\n+        def test_duration_multiplication(self):\n+            qs = Experiment.objects.annotate(duration=F('estimated_time') * 2)\n+            for obj in qs:\n+                self.assertEqual(obj.duration, obj.estimated_time * 2)\n+\n+        def test_duration_division(self):\n+            qs = Experiment.objects.annotate(duration=F('estimated_time') / 2)\n+            for obj in qs:\n+                self.assertEqual(obj.duration, obj.estimated_time / 2)\n+\n     @unittest.skipIf(connection.vendor == 'oracle', \"Oracle doesn't support bitwise XOR.\")\n     def test_lefthand_bitwise_xor(self):\n         Number.objects.update(integer=F('integer').bitxor(48))\n         self.assertEqual(Number.objects.get(pk=self.n.pk).integer, 26)\n         self.assertEqual(Number.objects.get(pk=self.n1.pk).integer, -26)\n \n+    from datetime import timedelta\n+    from django.db.models import F\n+    from django.test import TestCase\n+    from .models import Experiment\n+\n+    class DurationExpressionTests(TestCase):\n+        def setUp(self):\n+            self.deltas = [timedelta(days=1), timedelta(hours=1), timedelta(minutes=1)]\n+            Experiment.objects.create(estimated_time=timedelta(days=2))\n+            Experiment.objects.create(estimated_time=timedelta(hours=5))\n+            Experiment.objects.create(estimated_time=timedelta(minutes=30))\n+\n+        def test_duration_expressions(self):\n+            for delta in self.deltas:\n+                qs = Experiment.objects.annotate(duration=F('estimated_time') + delta)\n+                for obj in qs:\n+                    self.assertEqual(obj.duration, obj.estimated_time + delta)\n+\n+        def test_negative_duration_expressions(self):\n+            for delta in self.deltas:\n+                qs = Experiment.objects.annotate(duration=F('estimated_time') - delta)\n+                for obj in qs:\n+                    self.assertEqual(obj.duration, obj.estimated_time - delta)\n+\n+        def test_duration_multiplication(self):\n+            qs = Experiment.objects.annotate(duration=F('estimated_time') * 2)\n+            for obj in qs:\n+                self.assertEqual(obj.duration, obj.estimated_time * 2)\n+\n+        def test_duration_division(self):\n+            qs = Experiment.objects.annotate(duration=F('estimated_time') / 2)\n+            for obj in qs:\n+                self.assertEqual(obj.duration, obj.estimated_time / 2)\n+\n     @unittest.skipIf(connection.vendor == 'oracle', \"Oracle doesn't support bitwise XOR.\")\n     def test_lefthand_bitwise_xor_null(self):\n         employee = Employee.objects.create(firstname='John', lastname='Doe')\n",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..10b57a6 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1618,7 +1618,20 @@ class FTimeDeltaTests(TestCase):\n         self.assertTrue(queryset.exists())\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n-    def test_datetime_subtraction_microseconds(self):\n+    @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_without_expression_wrapper(self):\n+        # Create an Experiment instance for testing\n+        experiment_instance = Experiment.objects.create(\n+            start=datetime.datetime(2023, 1, 1, 12, 0, 0),\n+            end=datetime.datetime(2023, 1, 2, 12, 0, 0)\n+        )\n+        # Annotate the queryset with the delta between end and start\n+        queryset = Experiment.objects.annotate(delta=F('end') - F('start'))\n+        \n+        # Fetch the calculated delta and check that it is correct\n+        obj = queryset.get(pk=experiment_instance.pk)\n+        expected_delta = datetime.timedelta(days=1)\n+        self.assertEqual(obj.delta, expected_delta)\n         delta = datetime.timedelta(microseconds=8999999999999999)\n         Experiment.objects.update(end=F('start') + delta)\n         qs = Experiment.objects.annotate(\n",
  "django__django-13158": "",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..8bf9704 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -34,6 +34,7 @@ from django.test import (\n     RequestFactory, TestCase, ignore_warnings, override_settings,\n )\n from django.utils import timezone\n+from django.utils.deprecation import RemovedInDjango40Warning\n \n from .models import SessionStore as CustomDatabaseSession\n \n@@ -330,7 +331,26 @@ class SessionTestsMixin:\n         # The failed decode is logged.\n         self.assertIn('corrupted', cm.output[0])\n \n-    def test_actual_expiry(self):\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_default_hashing_algorithm_legacy_decode(self):\n+        with self.settings(DEFAULT_HASHING_ALGORITHM='sha1'):\n+            data = {'a test key': 'a test value'}\n+            encoded = self.session.encode(data)\n+            self.assertEqual(self.session._legacy_decode(encoded), data)\n+\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_legacy_decode_with_corrupted_data(self):\n+        with self.settings(DEFAULT_HASHING_ALGORITHM='sha1'):\n+            corrupted_encoded = 'OWUzNTNmNWQxNTBjOWExZmM4MmQ3NzNhMDRmMjU4NmYwNDUyNGI2NDp7ImEgdGVzdCBrZXkiOiJhIHRlc3QgdmFsdWUifQ==corrupted'\n+            self.assertEqual(self.session._legacy_decode(corrupted_encoded), {})\n+\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_legacy_decode_with_incorrect_hash(self):\n+        with self.settings(DEFAULT_HASHING_ALGORITHM='sha1'):\n+            incorrect_hash_encoded = (\n+                'incorrecthash:eyJhIHRlc3Qga2V5IjogImEgdGVzdCB2YWx1ZSJ9'\n+            )\n+            self.assertEqual(self.session._legacy_decode(incorrect_hash_encoded), {})\n         # this doesn't work with JSONSerializer (serializing timedelta)\n         with override_settings(SESSION_SERIALIZER='django.contrib.sessions.serializers.PickleSerializer'):\n             self.session = self.backend()  # reinitialize after overriding settings\n",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..a695713 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -11,6 +11,8 @@ from django.utils.deprecation import RemovedInDjango40Warning\n from django.views.generic import RedirectView, TemplateView, View\n \n from . import views\n+from django.shortcuts import get_object_or_404\n+from .models import Artist, Account\n \n \n class SimpleView(View):\n@@ -590,7 +592,19 @@ class DeprecationTests(SimpleTestCase):\n         self.assertEqual(response.context['key'], 'value')\n         self.assertIsInstance(response.context['view'], View)\n \n-    def test_template_params_warning(self):\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_template_params_filtering(self):\n+        class OfferView(TemplateView):\n+            template_name = \"generic_views/offers/offer.html\"\n+\n+            def get_context_data(self, *, offer_slug, **kwargs):\n+                context = super().get_context_data(**kwargs)\n+                offer = get_object_or_404(Account, slug=offer_slug)\n+                return {**context, 'offer': offer}\n+\n+        account = Account.objects.create(slug='unique-slug')\n+        response = OfferView.as_view()(self.rf.get('/offers/unique-slug/'), offer_slug=account.slug)\n+        self.assertEqual(response.context_data['offer'], account)\n         response = self.client.get('/template/custom/bar1/bar2/')\n         self.assertEqual(response.status_code, 200)\n         msg = (\n",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..b6a22a1 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -15,6 +15,8 @@ from django.forms.models import (\n     modelform_factory,\n )\n from django.template import Context, Template\n+from django.test.utils import isolate_apps\n+from .models import StumpJoke, Character\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n \n from .models import (\n@@ -2829,8 +2831,37 @@ class LimitChoicesToTests(TestCase):\n             StumpJokeForm()\n             self.assertEqual(today_callable_dict.call_count, 3)\n \n+class ForeignKeyLimitChoicesToTests(TestCase):\n+\n+    def setUp(self):\n+        # Create Characters\n+        self.character1 = Character.objects.create(username=\"Character 1\", last_action=\"2023-01-01\")\n+        self.character2 = Character.objects.create(username=\"Character 2\", last_action=\"2023-01-02\")\n+\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates_with_Q_object(self):\n+        joke1 = StumpJoke.objects.create(most_recently_fooled=self.character1)\n+        joke2 = StumpJoke.objects.create(most_recently_fooled=self.character2)\n+        joke1.has_fooled_today.add(self.character1, self.character2)\n+        joke2.has_fooled_today.add(self.character1)\n+\n+        class CharacterDetails(models.Model):\n+            character = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(has_fooled_today__most_recently_fooled__username__contains=\"Character\"),\n+            )\n \n-class FormFieldCallbackTests(SimpleTestCase):\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = ['character']\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character'].queryset,\n+            [self.character1, self.character2],\n+        )\n \n     def test_baseform_with_widgets_in_meta(self):\n         \"\"\"Regression for #13095: Using base forms with widgets defined in Meta should not raise errors.\"\"\"\n",
  "django__django-13343": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex a5ab3a0..b5e788e 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -29,7 +29,7 @@ from django.test.utils import requires_tz_support\n from django.urls import NoReverseMatch, reverse_lazy\n from django.utils import timezone\n \n-from .models import Storage, temp_storage, temp_storage_location\n+from .models import Storage, callable_storage, temp_storage, temp_storage_location\n \n FILE_SUFFIX_REGEX = '[A-Za-z0-9]{7}'\n \n",
  "django__django-13346": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex b918d5c..bd2f130 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -632,7 +632,20 @@ class TestQuerying(TestCase):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='ar').exists(), False)\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='bar').exists(), True)\n \n-    def test_key_icontains(self):\n+    def test_key_in_lookup(self):\n+        \"\"\"Test __in lookup on JSONField key transforms.\"\"\"\n+        test_cases = [\n+            ('our_field__key__in', [0], self.objs[:312]),  # Expected to return 312 items\n+            ('our_field__key__in', [1, 2], []),  # Adjusted based on expected behavior\n+            ('our_field__key__in', [0, 1], self.objs[:312]),  # Combination of keys\n+            ('our_field__key__in', [], []),  # Empty list should return nothing\n+        ]\n+        for lookup, value, expected in test_cases:\n+            with self.subTest(lookup=lookup, value=value):\n+                self.assertSequenceEqual(\n+                    NullableJSONModel.objects.filter(**{lookup: value}),\n+                    expected,\n+                )\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__icontains='Ar').exists(), True)\n \n     def test_key_startswith(self):\n",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..a48bb9e 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -17,6 +17,8 @@ from django.db.models.functions import (\n from django.test import (\n     TestCase, override_settings, skipIfDBFeature, skipUnlessDBFeature,\n )\n+from datetime import datetime\n+import pytz\n from django.utils import timezone\n \n from ..models import Author, DTModel, Fan\n@@ -1133,7 +1135,35 @@ class DateFunctionWithTimeZoneTests(DateFunctionTests):\n         self.assertEqual(model.melb_year.year, 2016)\n         self.assertEqual(model.pacific_year.year, 2015)\n \n-    def test_trunc_ambiguous_and_invalid_times(self):\n+    def test_truncdate_with_tzinfo(self):\n+        start_datetime = datetime(2023, 10, 25, 15, 0, 0)\n+        start_datetime = timezone.make_aware(start_datetime, timezone=pytz.UTC)\n+\n+        melb = pytz.timezone('Australia/Melbourne')\n+        ny = pytz.timezone('America/New_York')\n+\n+        model = DTModel.objects.annotate(\n+            melb_date=TruncDate('start_datetime', tzinfo=melb),\n+            ny_date=TruncDate('start_datetime', tzinfo=ny),\n+        ).order_by('start_datetime').get()\n+\n+        self.assertEqual(model.melb_date, start_datetime.astimezone(melb).date())\n+        self.assertEqual(model.ny_date, start_datetime.astimezone(ny).date())\n+\n+    def test_trunctime_with_tzinfo(self):\n+        start_datetime = datetime(2023, 10, 25, 15, 0, 0)\n+        start_datetime = timezone.make_aware(start_datetime, timezone=pytz.UTC)\n+\n+        melb = pytz.timezone('Australia/Melbourne')\n+        ny = pytz.timezone('America/New_York')\n+\n+        model = DTModel.objects.annotate(\n+            melb_time=TruncTime('start_datetime', tzinfo=melb),\n+            ny_time=TruncTime('start_datetime', tzinfo=ny),\n+        ).order_by('start_datetime').get()\n+\n+        self.assertEqual(model.melb_time, start_datetime.astimezone(melb).time())\n+        self.assertEqual(model.ny_time, start_datetime.astimezone(ny).time())\n         sao = pytz.timezone('America/Sao_Paulo')\n         utc = pytz.timezone('UTC')\n         start_datetime = utc.localize(datetime(2016, 10, 16, 13))\n",
  "django__django-13401": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e39d03e..172d285 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -93,7 +93,35 @@ class BasicFieldTests(SimpleTestCase):\n     def test_field_instance_is_picklable(self):\n         \"\"\"Field instances can be pickled.\"\"\"\n         field = models.Field(max_length=100, default='a string')\n-        # Must be picklable with this cached property populated (#28188).\n+    def test_abstract_inherited_fields(self):\n+        \"\"\"Field instances from abstract models are not equal.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        self.assertNotEqual(abstract_model_field, inherit1_model_field)\n+        self.assertNotEqual(abstract_model_field, inherit2_model_field)\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+\n+        self.assertLess(abstract_model_field, inherit1_model_field)\n+        self.assertLess(abstract_model_field, inherit2_model_field)\n+        self.assertLess(inherit1_model_field, inherit2_model_field)\n+\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit1_model_field))\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit2_model_field))\n+        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n         field._get_default\n         pickle.dumps(field)\n \n",
  "django__django-13410": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 1285e22..144ae9e 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -1,3 +1,34 @@\n+\n+class LockFileTestCase(unittest.TestCase):\n+    def test_exclusive_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'w') as f:\n+            f.write('Test content')\n+\n+        with open(file_path) as f1, open(file_path) as f2:\n+            # Try to acquire an exclusive lock on f1\n+            self.assertIs(locks.lock(f1, locks.LOCK_EX), True)\n+            # Try to acquire an exclusive lock on f2 with non-blocking, should fail\n+            self.assertIs(locks.lock(f2, locks.LOCK_EX | locks.LOCK_NB), False)\n+            # Try to acquire a shared lock on f2 with non-blocking, should fail\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), False)\n+            # Unlock f1\n+            self.assertIs(locks.unlock(f1), True)\n+\n+    def test_shared_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'w') as f:\n+            f.write('Test content')\n+\n+        with open(file_path) as f1, open(file_path) as f2:\n+            # Try to acquire a shared lock on f1\n+            self.assertIs(locks.lock(f1, locks.LOCK_SH), True)\n+            # Try to acquire a shared lock on f2 with non-blocking, should succeed\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), True)\n+            # Unlock f1 and f2\n+            self.assertIs(locks.unlock(f1), True)\n+            self.assertIs(locks.unlock(f2), True)\n+\n import errno\n import gzip\n import os\n@@ -8,7 +39,7 @@ from io import BytesIO, StringIO, TextIOWrapper\n from pathlib import Path\n from unittest import mock\n \n-from django.core.files import File\n+from django.core.files import File, locks\n from django.core.files.base import ContentFile\n from django.core.files.move import file_move_safe\n from django.core.files.temp import NamedTemporaryFile\n",
  "django__django-13417": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 8130de5..fb42f45 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2084,6 +2084,22 @@ class QuerysetOrderedTests(unittest.TestCase):\n         self.assertIs(qs.ordered, False)\n         self.assertIs(qs.order_by('num_notes').ordered, True)\n \n+    def test_annotated_group_by_without_ordering(self):\n+        # Simulate the case where a queryset uses GROUP BY without explicit ordering\n+        qs = Annotation.objects.annotate(num_notes=Count('notes'))\n+        self.assertIs(qs.ordered, False)\n+\n+    def test_annotated_group_by_with_ordering(self):\n+        # Simulate the case where a queryset uses GROUP BY with explicit ordering\n+        qs = Annotation.objects.annotate(num_notes=Count('notes')).order_by('name')\n+        self.assertIs(qs.ordered, True)\n+\n+    def test_annotated_group_by_with_default_meta_ordering(self):\n+        # Check if default ordering from model's Meta is ignored when using GROUP BY\n+        qs = Annotation.objects.annotate(num_notes=Count('notes'))\n+        # Assuming Annotation model has a default ordering in Meta\n+        self.assertIs(qs.ordered, False)\n+\n \n @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n class SubqueryTests(TestCase):\n",
  "django__django-13516": "",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..2f172ad 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,8 +1,10 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n+from .models.with_custom_email_field import CustomEmailField\n from django.test import TestCase\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n@@ -37,7 +39,27 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n-    def test_timeout(self):\n+    def test_token_invalidated_by_email_change(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                # Change the email and save the user, which should invalidate the token\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                self.assertIs(p0.check_token(user, tk1), False)\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n         # the value of 'now'.\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..41b5eed 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,8 +1,10 @@\n+\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n from django.contrib.auth.models import AbstractBaseUser\n from django.core import checks\n+from django.db.models import Q, UniqueConstraint\n from django.db import models\n from django.test import (\n     SimpleTestCase, override_settings, override_system_checks,\n@@ -138,7 +140,23 @@ class ModelsPermissionsChecksTests(SimpleTestCase):\n             ),\n         ])\n \n-    def test_non_clashing_custom_permissions(self):\n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserWithUniqueConstraint')\n+    def test_skip_e003_with_unique_constraint(self):\n+        \"\"\"\n+        Test to ensure auth.E003 is not triggered when a UniqueConstraint\n+        is defined on the USERNAME_FIELD.\n+        \"\"\"\n+        class CustomUserWithUniqueConstraint(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(fields=['username'], name='username_unique_constraint'),\n+                ]\n+\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [])\n         class Checked(models.Model):\n             class Meta:\n                 permissions = [\n",
  "django__django-13569": "",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..71ace24 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -802,6 +803,8 @@ class BasicExpressionsTests(TestCase):\n         )\n \n \n+from collections import namedtuple\n+\n class IterableLookupInnerExpressionsTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n@@ -815,7 +818,23 @@ class IterableLookupInnerExpressionsTests(TestCase):\n         Company.objects.create(name='5060 Ltd', num_employees=50, num_chairs=60, ceo=ceo)\n         Company.objects.create(name='99300 Ltd', num_employees=99, num_chairs=300, ceo=ceo)\n \n-    def test_in_lookup_allows_F_expressions_and_expressions_for_integers(self):\n+    def test_range_lookup_namedtuple(self):\n+        # Test using a named tuple in a range query\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(num_employees__range=EmployeeRange(minimum=51, maximum=100))\n+        self.assertQuerysetEqual(qs, ['<Company: 99300 Ltd>'], ordered=False)\n+\n+    def test_range_lookup_namedtuple_edge_case(self):\n+        # Test edge case where range exactly matches the number of employees\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(num_employees__range=EmployeeRange(minimum=99, maximum=99))\n+        self.assertQuerysetEqual(qs, ['<Company: 99300 Ltd>'], ordered=False)\n+\n+    def test_range_lookup_namedtuple_no_match(self):\n+        # Test case where range does not match any company's number of employees\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(num_employees__range=EmployeeRange(minimum=101, maximum=200))\n+        self.assertQuerysetEqual(qs, [])\n         # __in lookups can use F() expressions for integers.\n         queryset = Company.objects.filter(num_employees__in=([F('num_chairs') - 10]))\n         self.assertQuerysetEqual(queryset, ['<Company: 5060 Ltd>'], ordered=False)\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..2e602b9 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -19,18 +19,22 @@ from django.conf import settings\n from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n )\n+from django.test.utils import captured_stderr, captured_stdout\n from django.core.management.commands.loaddata import Command as LoaddataCommand\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n )\n+from django.test.utils import captured_stderr, captured_stdout\n from django.core.management.commands.testserver import (\n     Command as TestserverCommand,\n )\n+from django.test.utils import captured_stderr, captured_stdout\n from django.db import ConnectionHandler, connection\n from django.db.migrations.recorder import MigrationRecorder\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n+from django.test.utils import captured_stderr, captured_stdout\n \n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n \n@@ -1867,6 +1871,42 @@ class ArgumentOrder(AdminScriptTestCase):\n         )\n \n \n+class ExecuteFromCommandLine(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_with_main_py(self):\n+        \"\"\"\n+        Program name is computed correctly when __main__.py is used as argv[0].\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['__main__.py'] + args):\n+                execute_from_command_line(['python -m django'] + args)\n+        self.assertIn('usage: python -m django shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_custom_prog_name(self):\n+        \"\"\"\n+        Custom program name is used when provided in argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['custom-prog'] + args):\n+                execute_from_command_line(['custom-prog'] + args)\n+        self.assertIn('usage: custom-prog shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+\n @override_settings(ROOT_URLCONF='admin_scripts.urls')\n class StartProject(LiveServerTestCase, AdminScriptTestCase):\n \n",
  "django__django-13670": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 6f0b13f..e1b5296 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -1,3 +1,4 @@\n+\n from datetime import date, datetime\n \n from django.test import SimpleTestCase, override_settings\n@@ -19,7 +20,21 @@ class DateFormatTests(SimpleTestCase):\n     def tearDown(self):\n         translation.activate(self._orig_lang)\n \n-    def test_date(self):\n+    def test_year_before_1000(self):\n+        tests = [\n+            (476, '76'),\n+            (42, '42'),\n+            (4, '04'),\n+            (123, '23'),\n+            (9, '09'),\n+            (99, '99'),\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n         d = date(2009, 5, 16)\n         self.assertEqual(date.fromtimestamp(int(format(d, 'U'))), d)\n \n@@ -164,4 +179,4 @@ class DateFormatTests(SimpleTestCase):\n             self.assertEqual(\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+            )\n",
  "django__django-13741": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex ca66cd5..61119b2 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1020,6 +1020,20 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n+    def test_readonly_password_hash_field_is_disabled(self):\n+        field = ReadOnlyPasswordHashField()\n+        self.assertIs(field.disabled, True)\n+\n+    def test_readonly_password_hash_field_bound_data(self):\n+        field = ReadOnlyPasswordHashField()\n+        initial_data = \"initial_password_hash\"\n+        bound_data = field.bound_data(\"tampered_data\", initial_data)\n+        self.assertEqual(bound_data, initial_data)\n+\n+    def test_readonly_password_hash_field_has_changed_with_disabled(self):\n+        field = ReadOnlyPasswordHashField()\n+        self.assertFalse(field.has_changed(\"initial\", \"tampered\"))\n+\n     def test_readonly_field_has_changed(self):\n         field = ReadOnlyPasswordHashField()\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n",
  "django__django-13786": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3782589..ec1f9c1 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -119,6 +119,51 @@ class OptimizerTests(SimpleTestCase):\n             ]\n         )\n \n+    def test_create_model_and_clear_options(self):\n+        \"\"\"\n+        Test that squashing CreateModel and AlterModelOptions clears the options.\n+        \"\"\"\n+        # Case where AlterModelOptions removes all options\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'verbose_name': 'My Model', 'permissions': [('edit', 'Can edit')]},\n+                ),\n+                migrations.AlterModelOptions('MyModel', options={}),\n+            ],\n+            [\n+                migrations.CreateModel('MyModel', fields=[]),\n+            ],\n+        )\n+\n+        # Case where AlterModelOptions removes some options\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={\n+                        'verbose_name': 'My Model',\n+                        'permissions': [('edit', 'Can edit')],\n+                        'ordering': ['name'],\n+                    },\n+                ),\n+                migrations.AlterModelOptions(\n+                    'MyModel',\n+                    options={'verbose_name': 'My Model', 'ordering': ['name']},\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'verbose_name': 'My Model', 'ordering': ['name']},\n+                ),\n+            ],\n+        )\n+\n     def _test_create_alter_foo_delete_model(self, alter_foo):\n         \"\"\"\n         CreateModel, AlterModelTable, AlterUniqueTogether/AlterIndexTogether/\n@@ -134,6 +179,51 @@ class OptimizerTests(SimpleTestCase):\n             [],\n         )\n \n+    def test_create_model_and_clear_options(self):\n+        \"\"\"\n+        Test that squashing CreateModel and AlterModelOptions clears the options.\n+        \"\"\"\n+        # Case where AlterModelOptions removes all options\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'verbose_name': 'My Model', 'permissions': [('edit', 'Can edit')]},\n+                ),\n+                migrations.AlterModelOptions('MyModel', options={}),\n+            ],\n+            [\n+                migrations.CreateModel('MyModel', fields=[]),\n+            ],\n+        )\n+\n+        # Case where AlterModelOptions removes some options\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={\n+                        'verbose_name': 'My Model',\n+                        'permissions': [('edit', 'Can edit')],\n+                        'ordering': ['name'],\n+                    },\n+                ),\n+                migrations.AlterModelOptions(\n+                    'MyModel',\n+                    options={'verbose_name': 'My Model', 'ordering': ['name']},\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'verbose_name': 'My Model', 'ordering': ['name']},\n+                ),\n+            ],\n+        )\n+\n     def test_create_alter_unique_delete_model(self):\n         self._test_create_alter_foo_delete_model(migrations.AlterUniqueTogether(\"Foo\", [[\"a\", \"b\"]]))\n \n",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..62b22e1 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,4 +1,6 @@\n+\n from datetime import date, timedelta\n+from django.utils.translation import gettext_lazy\n \n from django.template.defaultfilters import add\n from django.test import SimpleTestCase\n@@ -42,6 +44,27 @@ class AddTests(SimpleTestCase):\n         self.assertEqual(output, '(3, 4, 1, 2)')\n \n     @setup({'add07': '{{ d|add:t }}'})\n+\n+    @setup({'add08': '{{ s1|add:lazy_s2 }}'})\n+    def test_add08(self):\n+        output = self.engine.render_to_string(\n+            'add08',\n+            {'s1': 'string', 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    @setup({'add09': '{{ lazy_s1|add:lazy_s2 }}'})\n+    def test_add09(self):\n+        output = self.engine.render_to_string(\n+            'add09',\n+            {'lazy_s1': gettext_lazy('string'), 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    def test_lazy_add(self):\n+        lazy_4 = lazy(lambda: 4, int)\n+        lazy_5 = lazy(lambda: 5, int)\n+        self.assertEqual(lazy_4() + lazy_5(), 9)\n     def test_add07(self):\n         output = self.engine.render_to_string('add07', {'d': date(2000, 1, 1), 't': timedelta(10)})\n         self.assertEqual(output, 'Jan. 11, 2000')\n",
  "django__django-13807": "diff --git a/tests/backends/tests.py b/tests/backends/tests.py\nindex 0aee2b6..636b848 100644\n--- a/tests/backends/tests.py\n+++ b/tests/backends/tests.py\n@@ -18,6 +18,8 @@ from django.test import (\n     skipUnlessDBFeature,\n )\n \n+from django.core.management import call_command\n+from django.db import IntegrityError, connection, transaction\n from .models import (\n     Article, Object, ObjectReference, Person, Post, RawData, Reporter,\n     ReporterProxy, SchoolClass, Square,\n@@ -625,8 +627,34 @@ class FkConstraintsTests(TransactionTestCase):\n                     connection.check_constraints()\n             transaction.set_rollback(True)\n \n+class SQLKeywordsModelTest(TransactionTestCase):\n+    available_apps = ['backends']\n+\n+    def setUp(self):\n+        # Setup initial Reporter instance required for ForeignKey\n+        self.reporter = Reporter.objects.create(first_name='John', last_name='Doe', email='johndoe@example.com')\n+\n+    def test_loaddata_with_sql_keyword_table_name(self):\n+        \"\"\"\n+        Test that the loaddata management command can handle models with SQL keyword table names.\n+        \"\"\"\n+        # Create initial instance\n+        obj = SQLKeywordsModel.objects.create(reporter=self.reporter)\n+        obj.refresh_from_db()\n+\n+        # Now test loaddata functionality\n+        with self.assertRaises(IntegrityError):\n+            # Simulate incorrect constraint to test loaddata handling\n+            with connection.constraint_checks_disabled():\n+                obj.reporter_id = 999\n+                obj.save()\n+\n+        # Simulate loading data through loaddata command\n+        with self.assertRaises(Exception) as context:\n+            call_command('loaddata', 'sql_keywords_fixture.json')\n \n-class ThreadTests(TransactionTestCase):\n+        # Check if the error is related to the unquoted table name\n+        self.assertIn('order', str(context.exception))\n \n     available_apps = ['backends']\n \n",
  "django__django-13809": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex d88ea78..f5c51a8 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1314,6 +1314,46 @@ class ManageRunserver(SimpleTestCase):\n         self.assertIn('unapplied migration(s)', self.output.getvalue())\n \n \n+import django\n+from django.core.management import call_command\n+from django.test import TestCase\n+from io import StringIO\n+import mock\n+\n+class TestRunserverSkipChecksOption(TestCase):\n+    def setUp(self):\n+        self.output = StringIO()\n+\n+    @mock.patch('django.core.management.commands.runserver.run')\n+    @mock.patch('django.core.management.base.BaseCommand.check_migrations')\n+    @mock.patch('django.core.management.base.BaseCommand.check')\n+    def test_skip_checks(self, mocked_check, *mocked_objects):\n+        call_command(\n+            'runserver',\n+            use_reloader=False,\n+            skip_checks=True,\n+            stdout=self.output,\n+        )\n+        self.assertNotIn('Performing system checks...', self.output.getvalue())\n+        mocked_check.assert_not_called()\n+\n+        self.output.truncate(0)\n+        self.output.seek(0)\n+        call_command(\n+            'runserver',\n+            use_reloader=False,\n+            skip_checks=False,\n+            stdout=self.output,\n+        )\n+        self.assertIn('Performing system checks...', self.output.getvalue())\n+        mocked_check.assert_called()\n+\n+        try:\n+            with self.assertRaises(Exception):\n+                autoreload.check_errors(import_module)('test_exception')\n+        finally:\n+            autoreload._exception = None\n+\n class ManageRunserverMigrationWarning(TestCase):\n \n     def setUp(self):\n",
  "django__django-13810": "diff --git a/tests/middleware_exceptions/tests.py b/tests/middleware_exceptions/tests.py\nindex bb82f7d..c38f758 100644\n--- a/tests/middleware_exceptions/tests.py\n+++ b/tests/middleware_exceptions/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.conf import settings\n from django.core.exceptions import MiddlewareNotUsed\n from django.http import HttpResponse\n@@ -270,6 +271,44 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n         'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n     ])\n     async def test_async_and_sync_middleware_async_call(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            'Asynchronous middleware middleware_exceptions.middleware.SyncAndAsyncMiddleware adapted.',\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.SyncAndAsyncMiddleware'\",\n+        )\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.async_payment_middleware',\n+    ])\n+    async def test_mixed_sync_async_middleware_chain(self):\n+        with self.assertLogs('django.request', 'WARNING') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.status_code, 402)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            'Payment Required: /middleware_exceptions/view/',\n+        )\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.NotSyncOrAsyncMiddleware',\n+    ])\n+    async def test_improper_middleware_chain(self):\n+        msg = (\n+            'Middleware '\n+            'middleware_exceptions.middleware.NotSyncOrAsyncMiddleware must '\n+            'have at least one of sync_capable/async_capable set to True.'\n+        )\n+        with self.assertRaisesMessage(RuntimeError, msg):\n+            await self.async_client.get('/middleware_exceptions/view/')\n         response = await self.async_client.get('/middleware_exceptions/view/')\n         self.assertEqual(response.content, b'OK')\n         self.assertEqual(response.status_code, 200)\n",
  "django__django-13820": "",
  "django__django-13821": "",
  "django__django-13837": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 10ffa22..bc59465 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -156,9 +156,25 @@ class TestIterModulesAndFiles(SimpleTestCase):\n                 )\n \n \n+from .test_module import __main__ as test_main\n+from unittest import mock\n+import sys\n+import django\n+import django.utils.autoreload as autoreload\n+\n class TestChildArguments(SimpleTestCase):\n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        expected_args = [sys.executable, '-m', 'utils_tests.test_module', 'runserver']\n+        self.assertEqual(autoreload.get_child_arguments(), expected_args)\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_pkg_other_than_django(self):\n+        expected_args = [sys.executable, '-m', 'pkg_other_than_django', 'runserver']\n+        self.assertEqual(autoreload.get_child_arguments(), expected_args)\n     def test_run_as_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n@@ -173,7 +189,11 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-Werror', __file__, 'runserver']\n         )\n \n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_pkg_other_than_django(self):\n+        expected_args = [sys.executable, '-m', 'pkg_other_than_django', 'runserver']\n+        self.assertEqual(autoreload.get_child_arguments(), expected_args)\n     def test_exe_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             exe_path = Path(tmpdir) / 'django-admin.exe'\n",
  "django__django-13925": "diff --git a/tests/check_framework/test_model_checks.py b/tests/check_framework/test_model_checks.py\nindex 6424d89..b4f747b 100644\n--- a/tests/check_framework/test_model_checks.py\n+++ b/tests/check_framework/test_model_checks.py\n@@ -371,6 +371,12 @@ def mocked_is_overridden(self, setting):\n     )\n \n \n+from django.test import SimpleTestCase\n+from django.db import models\n+from django.core.checks import Warning\n+import django.core.checks as checks\n+from unittest import mock\n+\n @mock.patch('django.conf.UserSettingsHolder.is_overridden', mocked_is_overridden)\n @override_settings(DEFAULT_AUTO_FIELD='django.db.models.AutoField')\n @isolate_apps('check_framework.apps.CheckDefaultPKConfig', attr_name='apps')\n@@ -414,4 +420,4 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             class Meta:\n                 app_label = 'check_framework.apps.CheckPKConfig'\n \n-        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n+        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..d375391 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -282,8 +282,24 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n         )\n \n \n+from django.test import TestCase\n+from .models import ChoiceModel\n+from django.forms import ModelChoiceField, ModelMultipleChoiceField\n+\n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n     def test_modelchoicefield(self):\n+        # Test for displaying the value in the error message for an invalid choice\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            'invalid',\n+        )\n         # Create choices for the model choice field tests below.\n         ChoiceModel.objects.create(pk=1, name='a')\n         ChoiceModel.objects.create(pk=2, name='b')\n@@ -307,4 +323,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py\nindex 1078928..b77b54a 100644\n--- a/tests/many_to_one/models.py\n+++ b/tests/many_to_one/models.py\n@@ -63,6 +63,14 @@ class Third(models.Model):\n     third = models.ForeignKey('self', models.SET_NULL, null=True, related_name='child_set')\n \n \n+from django.db import models\n+\n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n+\n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n+\n class Parent(models.Model):\n     name = models.CharField(max_length=20, unique=True)\n     bestchild = models.ForeignKey('Child', models.SET_NULL, null=True, related_name='favored_by')\n",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..e029e1f 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,7 +1,10 @@\n+\n from django.db import IntegrityError, transaction\n from django.test import TestCase, skipIfDBFeature\n \n-from .models import Bar, Business, Employee, Foo\n+from .models import Bar, Business, CustomAutoFieldModel, Employee, Foo\n+from .fields import MyWrapper\n+from django.test import skipUnlessDBFeature\n \n \n class BasicCustomPKTests(TestCase):\n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..0306cd5 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -816,8 +816,25 @@ class BasicExpressionsTests(TestCase):\n             [self.example_inc.ceo, self.max],\n         )\n \n-\n-class IterableLookupInnerExpressionsTests(TestCase):\n+    def test_q_and_exists_commutativity(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+        \n+        # Test that Q() & Exists(...) does not raise a TypeError\n+        try:\n+            combined_condition = Q() & Exists(is_poc)\n+            Employee.objects.filter(combined_condition)\n+        except TypeError as e:\n+            self.fail(f\"Q() & Exists(...) raised TypeError unexpectedly: {e}\")\n+\n+        # Test that Exists(...) & Q() works as well\n+        try:\n+            combined_condition = Exists(is_poc) & Q()\n+            Employee.objects.filter(combined_condition)\n+        except TypeError as e:\n+            self.fail(f\"Exists(...) & Q() raised TypeError unexpectedly: {e}\")\n     @classmethod\n     def setUpTestData(cls):\n         ceo = Employee.objects.create(firstname='Just', lastname='Doit', salary=30)\n",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..3518b68 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -205,6 +205,45 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yields(self):\n+        \"\"\"\n+        Test to ensure no file is yielded more than once in the post_process method.\n+        \"\"\"\n+        # Mock the paths dictionary for testing\n+        paths = {\n+            'admin/css/base.css': 'content of base.css',\n+            'admin/css/dashboard.css': 'content of dashboard.css',\n+        }\n+\n+        storage_instance = storage.staticfiles_storage\n+\n+        # Collect the names of files post-processed\n+        post_processed_files = set()\n+        for name, hashed_name, processed in storage_instance.post_process(paths):\n+            self.assertNotIn(name, post_processed_files, f\"File {name} was yielded more than once.\")\n+            post_processed_files.add(name)\n+\n+    def test_no_unnecessary_intermediate_yields(self):\n+        \"\"\"\n+        Ensure that intermediate files that don't require adjustment are not yielded.\n+        \"\"\"\n+        # Mock paths where no adjustment should be needed in the second pass\n+        paths = {\n+            'admin/css/base.css': 'content of base.css',\n+            'admin/css/dashboard.css': 'content of dashboard.css',\n+        }\n+\n+        storage_instance = storage.staticfiles_storage\n+\n+        # Capture all yielded file names\n+        yielded_files = [name for name, _, _ in storage_instance.post_process(paths)]\n+\n+        # Expected output after processing\n+        expected_files = ['admin/css/base.css', 'admin/css/dashboard.css']\n+        \n+        # Ensure no unexpected intermediate files are yielded\n+        self.assertListEqual(sorted(yielded_files), sorted(expected_files), \"Unexpected intermediate files yielded\")\n+\n     def test_css_import_case_insensitive(self):\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n         self.assertEqual(relpath, \"cached/styles_insensitive.3fa427592a53.css\")\n@@ -214,6 +253,45 @@ class TestHashedFiles:\n             self.assertIn(b\"other.d41d8cd98f00.css\", content)\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yields(self):\n+        \"\"\"\n+        Test to ensure no file is yielded more than once in the post_process method.\n+        \"\"\"\n+        # Mock the paths dictionary for testing\n+        paths = {\n+            'admin/css/base.css': 'content of base.css',\n+            'admin/css/dashboard.css': 'content of dashboard.css',\n+        }\n+\n+        storage_instance = storage.staticfiles_storage\n+\n+        # Collect the names of files post-processed\n+        post_processed_files = set()\n+        for name, hashed_name, processed in storage_instance.post_process(paths):\n+            self.assertNotIn(name, post_processed_files, f\"File {name} was yielded more than once.\")\n+            post_processed_files.add(name)\n+\n+    def test_no_unnecessary_intermediate_yields(self):\n+        \"\"\"\n+        Ensure that intermediate files that don't require adjustment are not yielded.\n+        \"\"\"\n+        # Mock paths where no adjustment should be needed in the second pass\n+        paths = {\n+            'admin/css/base.css': 'content of base.css',\n+            'admin/css/dashboard.css': 'content of dashboard.css',\n+        }\n+\n+        storage_instance = storage.staticfiles_storage\n+\n+        # Capture all yielded file names\n+        yielded_files = [name for name, _, _ in storage_instance.post_process(paths)]\n+\n+        # Expected output after processing\n+        expected_files = ['admin/css/base.css', 'admin/css/dashboard.css']\n+        \n+        # Ensure no unexpected intermediate files are yielded\n+        self.assertListEqual(sorted(yielded_files), sorted(expected_files), \"Unexpected intermediate files yielded\")\n+\n     @override_settings(\n         STATICFILES_DIRS=[os.path.join(TEST_ROOT, 'project', 'faulty')],\n         STATICFILES_FINDERS=['django.contrib.staticfiles.finders.FileSystemFinder'],\n",
  "django__django-14089": "",
  "django__django-14122": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 83089d9..75fc031 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n from operator import attrgetter\n \n@@ -5,6 +6,7 @@ from django.db.models import (\n     CharField, DateTimeField, F, Max, OuterRef, Subquery, Value,\n )\n from django.db.models.functions import Upper\n+from django.db.models import Count\n from django.test import TestCase\n \n from .models import Article, Author, ChildArticle, OrderedByFArticle, Reference\n@@ -483,4 +485,4 @@ class OrderingTests(TestCase):\n         )\n         ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n         articles = ChildArticle.objects.order_by('article_ptr')\n-        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n",
  "django__django-14140": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex c3db825..4d4a9c9 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -815,15 +815,39 @@ class BasicExpressionsTests(TestCase):\n             Employee.objects.filter(Exists(is_poc) | Q(salary__lt=15)),\n             [self.example_inc.ceo, self.max],\n         )\n+\n+    def test_boolean_expression_with_single_child_exists(self):\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        q = Q(Exists(is_poc))\n+        path, args, kwargs = q.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Q')\n+        self.assertEqual(args, (Exists(is_poc),))\n+        self.assertEqual(kwargs, {})\n         self.assertCountEqual(\n             Employee.objects.filter(Q(salary__gte=30) & Exists(is_ceo)),\n             [self.max],\n         )\n+\n+    def test_boolean_expression_with_single_child_exists(self):\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        q = Q(Exists(is_poc))\n+        path, args, kwargs = q.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Q')\n+        self.assertEqual(args, (Exists(is_poc),))\n+        self.assertEqual(kwargs, {})\n         self.assertCountEqual(\n             Employee.objects.filter(Q(salary__lt=15) | Exists(is_poc)),\n             [self.example_inc.ceo, self.max],\n         )\n \n+    def test_boolean_expression_with_single_child_exists(self):\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        q = Q(Exists(is_poc))\n+        path, args, kwargs = q.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Q')\n+        self.assertEqual(args, (Exists(is_poc),))\n+        self.assertEqual(kwargs, {})\n+\n     def test_boolean_expression_combined_with_empty_Q(self):\n         is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n         self.gmbh.point_of_contact = self.max\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..692b330 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,4 +1,6 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n+from django.test import TestCase\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n@@ -66,7 +68,29 @@ class TestDefaultPK(SimpleTestCase):\n             class Model(models.Model):\n                 pass\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField'\n+    )\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+        \n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField'\n+    )\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+        \n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -82,7 +106,29 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField'\n+    )\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+        \n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField'\n+    )\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+        \n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14311": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex b7e6f92..53486d6 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -166,6 +166,24 @@ class TestIterModulesAndFiles(SimpleTestCase):\n class TestChildArguments(SimpleTestCase):\n     @mock.patch.dict(sys.modules, {'__main__': django.__main__})\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main_module.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_with_dotted_name(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n     @mock.patch('sys.warnoptions', [])\n     def test_run_as_module(self):\n         self.assertEqual(\n@@ -175,6 +193,24 @@ class TestChildArguments(SimpleTestCase):\n \n     @mock.patch.dict(sys.modules, {'__main__': test_main})\n     @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main_module.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_with_dotted_name(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n     @mock.patch('sys.warnoptions', [])\n     def test_run_as_non_django_module(self):\n         self.assertEqual(\n@@ -190,6 +226,24 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-Werror', __file__, 'runserver']\n         )\n \n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main_module.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_with_dotted_name(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n     @mock.patch('sys.warnoptions', [])\n     def test_exe_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n@@ -201,6 +255,24 @@ class TestChildArguments(SimpleTestCase):\n                     [exe_path, 'runserver']\n                 )\n \n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main_module.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_with_dotted_name(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n     @mock.patch('sys.warnoptions', [])\n     def test_entrypoint_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..6e196bd 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -226,7 +226,13 @@ TEST_DATA = [\n     (URLValidator(), None, ValidationError),\n     (URLValidator(), 56, ValidationError),\n     (URLValidator(), 'no_scheme', ValidationError),\n-    # Trailing newlines not accepted\n+    # Newlines and tabs in URLs are not accepted.\n+    (URLValidator(), 'http://www.djangoproject.com/\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://www.django\\rproject.com/', ValidationError),\n+    (URLValidator(), 'http://[::\\rffff:192.9.5.5]', ValidationError),\n+    (URLValidator(), 'http://\\twww.djangoproject.com/', ValidationError),\n+    (URLValidator(), 'http://\\t[::ffff:192.9.5.5]', ValidationError),\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n     # Trailing junk does not take forever to reject\n@@ -315,8 +321,23 @@ with open(create_path('invalid_urls.txt'), encoding='utf8') as f:\n \n \n class TestValidators(SimpleTestCase):\n-\n-    def test_validators(self):\n+    # Additional test cases to ensure URLs with disallowed characters are correctly rejected\n+    def test_url_validator_disallowed_characters(self):\n+        invalid_urls = [\n+            'http://www.djangoproject.com/\\n',\n+            'http://[::ffff:192.9.5.5]\\n',\n+            'http://www.djangoproject.com/\\r',\n+            'http://[::ffff:192.9.5.5]\\r',\n+            'http://www.django\\rproject.com/',\n+            'http://[::\\rffff:192.9.5.5]',\n+            'http://\\twww.djangoproject.com/',\n+            'http://\\t[::ffff:192.9.5.5]',\n+        ]\n+        validator = URLValidator()\n+        for url in invalid_urls:\n+            with self.subTest(url=url):\n+                with self.assertRaises(ValidationError):\n+                    validator(url)\n         for validator, value, expected in TEST_DATA:\n             name = validator.__name__ if isinstance(validator, types.FunctionType) else validator.__class__.__name__\n             exception_expected = expected is not None and issubclass(expected, Exception)\n",
  "django__django-14351": "",
  "django__django-14373": "",
  "django__django-14376": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\nindex 643c2b6..4956e9d 100644\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -38,6 +38,68 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_options_new_keywords(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'user': 'optionuser',\n+                    'password': 'optionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n+    def test_options_deprecated_and_new_keywords(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'db': 'deprecatedoptiondbname',\n+                    'user': 'optionuser',\n+                    'password': 'optionpassword',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n     def test_options_override_settings_proper_values(self):\n         settings_port = 444\n         options_port = 555\n@@ -68,6 +130,68 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_options_new_keywords(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'user': 'optionuser',\n+                    'password': 'optionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n+    def test_options_deprecated_and_new_keywords(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'db': 'deprecatedoptiondbname',\n+                    'user': 'optionuser',\n+                    'password': 'optionpassword',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n     def test_options_password(self):\n         expected_args = [\n             'mysql',\n@@ -89,6 +213,68 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_options_new_keywords(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'user': 'optionuser',\n+                    'password': 'optionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n+    def test_options_deprecated_and_new_keywords(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'db': 'deprecatedoptiondbname',\n+                    'user': 'optionuser',\n+                    'password': 'optionpassword',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n     def test_options_charset(self):\n         expected_args = [\n             'mysql',\n",
  "django__django-14434": "",
  "django__django-14493": "diff --git a/tests/staticfiles_tests/storage.py b/tests/staticfiles_tests/storage.py\nindex dc966a1..2e1ab90 100644\n--- a/tests/staticfiles_tests/storage.py\n+++ b/tests/staticfiles_tests/storage.py\n@@ -93,7 +93,7 @@ class ExtraPatternsStorage(ManifestStaticFilesStorage):\n         ),\n     )\n \n-\n-class NoneHashStorage(ManifestStaticFilesStorage):\n+class NoPostProcessReplacedPathStorage(ManifestStaticFilesStorage):\n+    max_post_process_passes = 0\n     def file_hash(self, name, content=None):\n-        return None\n+        return None\n",
  "django__django-14500": "",
  "django__django-14539": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 23a1e0a..5aafca6 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -255,7 +255,20 @@ class TestUtilsHtml(SimpleTestCase):\n                 'Search for <a href=\"http://google.com/?q=\">google.com/?q=</a>!'\n             ),\n             ('foo@example.com', '<a href=\"mailto:foo@example.com\">foo@example.com</a>'),\n-        )\n+        ),\n+        # Additional test cases related to the issue\n+        (\n+            'Search for google.com/?q=1&lt! and see.',\n+            'Search for <a href=\"http://google.com/?q=1%3C\">google.com/?q=1&lt</a>! and see.'\n+        ),\n+        (\n+            'Check https://example.com/path?param=value&amp;another=1. Cool!',\n+            'Check <a href=\"https://example.com/path?param=value&amp;another=1\">https://example.com/path?param=value&amp;another=1</a>. Cool!'\n+        ),\n+        (\n+            'Visit example.org/foo.html?bar=1&lt.',\n+            'Visit <a href=\"http://example.org/foo.html?bar=1%3C\">example.org/foo.html?bar=1&lt</a>.'\n+        ),\n         for value, output in tests:\n             with self.subTest(value=value):\n                 self.assertEqual(urlize(value), output)\n",
  "django__django-14559": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex b579834..8ebe8b3 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -135,7 +135,32 @@ class BulkUpdateTests(TestCase):\n         notes = list(Note.objects.all())\n         Note.objects.bulk_update(notes, ['note'])\n \n-    def test_only_concrete_fields_allowed(self):\n+    def test_bulk_update_return_value(self):\n+        # Test when no objects are passed\n+        rows_updated = Note.objects.bulk_update([], ['note'])\n+        self.assertEqual(rows_updated, 0)\n+\n+        # Create test data for bulk update\n+        Note.objects.bulk_create([\n+            Note(note=str(i), misc='misc')\n+            for i in range(2000)\n+        ])\n+        notes = list(Note.objects.all())\n+\n+        # Test updating all created notes\n+        for n in notes:\n+            n.note = 'updated'\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 2000)\n+\n+        # Test with duplicates\n+        note = Note.objects.create(note='test-note', misc='test')\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'])\n+        self.assertEqual(rows_updated, 1)\n+\n+        # Duplicates in different batches\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'], batch_size=1)\n+        self.assertEqual(rows_updated, 2)\n         obj = Valid.objects.create(valid='test')\n         detail = Detail.objects.create(data='test')\n         paragraph = Paragraph.objects.create(text='test')\n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..9d0a9a8 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -360,7 +360,27 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])\n \n-    def test_formset_validate_min_unchanged_forms(self):\n+    def test_non_form_errors_with_css_class(self):\n+        \"\"\"\n+        Test that non-form errors are wrapped with the 'nonform' CSS class in the rendered output.\n+        \"\"\"\n+        data = {\n+            'choices-TOTAL_FORMS': '2',\n+            'choices-INITIAL_FORMS': '0',\n+            'choices-MIN_NUM_FORMS': '0',\n+            'choices-MAX_NUM_FORMS': '0',\n+            'choices-0-choice': 'Two',\n+            'choices-0-votes': '100',\n+            'choices-1-choice': 'Two',\n+            'choices-1-votes': '100',\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=1, validate_min=True)\n+        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>'\n+        )\n         \"\"\"\n         min_num validation doesn't consider unchanged forms with initial data\n         as \"empty\".\n",
  "django__django-14631": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex a48e4b6..196d58d 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -2122,7 +2122,49 @@ Password: <input type=\"password\" name=\"password\" required></li>\n         self.assertEqual(form.errors, {})\n         self.assertEqual(form.cleaned_data, {'dt': now})\n \n-    def test_datetime_changed_data_callable_with_microseconds(self):\n+    def test_datetime_clean_initial_callable_disabled_bound_field(self):\n+        \"\"\"\n+        The cleaned value for a form with a disabled DateTimeField and callable\n+        initial matches the bound field's cached initial value.\n+        \"\"\"\n+        now = datetime.datetime(2006, 10, 25, 14, 30, 45)\n+        \n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now, disabled=True)\n+\n+        form = DateTimeForm({})\n+        cleaned = form.cleaned_data['dt']\n+        self.assertEqual(cleaned, now)\n+        bf = form['dt']\n+        self.assertEqual(cleaned, bf.initial)\n+\n+    def test_datetime_changed_data_uses_bound_field(self):\n+        \"\"\"\n+        Ensure that changed_data uses the BoundField to determine if data has changed.\n+        \"\"\"\n+        original = datetime.datetime(2006, 10, 25, 14, 30, 45)\n+        \n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: original, disabled=False)\n+\n+        form = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n+        # Mock that the form field has not changed, as the initial and input are the same.\n+        self.assertEqual(form.changed_data, [])\n+\n+    def test_datetime_cleaned_data_uses_bound_field(self):\n+        \"\"\"\n+        Ensure that _clean_fields accesses initial values using BoundField.\n+        \"\"\"\n+        initial_datetime = datetime.datetime(2006, 10, 25, 14, 30, 45)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: initial_datetime, disabled=True)\n+\n+        form = DateTimeForm({})\n+        cleaned_value = form.cleaned_data['dt']\n+        bf = form['dt']\n+        # Verify that cleaned_data uses the initial from the BoundField\n+        self.assertEqual(cleaned_value, bf.initial)\n         class DateTimeForm(forms.Form):\n             dt = DateTimeField(initial=lambda: datetime.datetime(2006, 10, 25, 14, 30, 45, 123456), disabled=True)\n \n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..abfd7d3 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -1,8 +1,38 @@\n from datetime import date, datetime, timedelta\n from operator import attrgetter\n \n+class M2mThroughTestsAdditional(TestCase):\n+    def test_proxy_model_m2m_through_fields_hashable(self):\n+        class Parent(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class ProxyParent(Parent):\n+            class Meta:\n+                proxy = True\n+\n+        class Child(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE)\n+            many_to_many_field = models.ManyToManyField(\n+                to=Parent,\n+                through=\"ManyToManyModel\",\n+                through_fields=['child', 'parent'],\n+                related_name=\"something\"\n+            )\n+\n+        class ManyToManyModel(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')\n+            child = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')\n+            second_child = models.ForeignKey(Child, on_delete=models.CASCADE, null=True, default=None)\n+\n+        # Check for hashability and equality of the through fields\n+        many_to_many_field = Child._meta.get_field('many_to_many_field')\n+        self.assertEqual(many_to_many_field.through_fields, ['child', 'parent'])\n+        self.assertIsInstance(hash(many_to_many_field), int)\n+\n from django.db import IntegrityError\n from django.test import TestCase\n+from django.core.checks import Error\n+from django.db import models\n \n from .models import (\n     CustomMembership, Employee, Event, Friendship, Group, Ingredient,\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..7300802 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,3 +1,4 @@\n+\n import json\n from contextlib import contextmanager\n \n@@ -10,6 +11,12 @@ from django.core.exceptions import PermissionDenied\n from django.http import Http404\n from django.test import RequestFactory, override_settings\n from django.urls import reverse, reverse_lazy\n+import datetime\n+from django.contrib.contenttypes.models import ContentType\n+from django.contrib.auth.models import User\n+from django.test import TestCase, RequestFactory\n+from django.http import JsonResponse\n+from .models import Question\n \n from .admin import AnswerAdmin, QuestionAdmin\n from .models import (\n",
  "django__django-14765": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 11009e5..982e270 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -923,6 +923,25 @@ class StateTests(SimpleTestCase):\n             len([x for x in rendered_state.get_models() if x._meta.app_label == \"migrations\"]),\n             1,\n         )\n+    def test_real_apps_as_set(self):\n+        \"\"\"\n+        Test that ProjectState initializes correctly when real_apps is a set.\n+        \"\"\"\n+        try:\n+            project_state = ProjectState(real_apps={'contenttypes'})\n+            self.assertEqual(project_state.real_apps, {'contenttypes'})\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError unexpectedly!\")\n+\n+    def test_real_apps_as_none(self):\n+        \"\"\"\n+        Test that ProjectState initializes correctly when real_apps is None.\n+        \"\"\"\n+        try:\n+            project_state = ProjectState(real_apps=None)\n+            self.assertEqual(project_state.real_apps, set())\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError unexpectedly!\")\n \n     def test_ignore_order_wrt(self):\n         \"\"\"\n",
  "django__django-14771": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 1875424..4cb1145 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -195,7 +195,16 @@ class TestChildArguments(SimpleTestCase):\n         )\n \n     @mock.patch('__main__.__spec__', None)\n+    @mock.patch('sys._xoptions', {})\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions_empty(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, __file__, 'runserver']\n+        )\n+\n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n         self.assertEqual(\n@@ -235,8 +244,17 @@ class TestChildArguments(SimpleTestCase):\n         with self.assertRaisesMessage(RuntimeError, msg):\n             autoreload.get_child_arguments()\n \n+    @mock.patch('sys._xoptions', {})\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_xoptions_empty(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, __file__, 'runserver']\n+        )\n+\n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n+    @mock.patch('sys.warnoptions', [])\n     def test_module_no_spec(self):\n         module = types.ModuleType('test_module')\n         del module.__spec__\n",
  "django__django-14787": "",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..173de75 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5085,6 +5085,40 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         response = self.client.get(reverse('admin2:auth_user_password_change', args=(su.pk,)))\n         self.assertEqual(response.status_code, 404)\n \n+    def _test_readonly_foreignkey_links(self, admin_site):\n+        \"\"\"\n+        Helper function to test readonly foreign key links in different admin sites.\n+        \"\"\"\n+        chapter = Chapter.objects.create(\n+            title='Chapter 1',\n+            content='content',\n+            book=Book.objects.create(name='Book 1'),\n+        )\n+        language = Language.objects.create(iso='_40', name='Test')\n+\n+        # Access the change form for the Chapter in the specified admin site\n+        response = self.client.get(reverse(f'{admin_site}:admin_views_chapter_change', args=(chapter.pk,)))\n+        language_url = reverse(f'{admin_site}:admin_views_language_change', args=(quote(language.pk),))\n+\n+        # Check that the language field renders a link with the correct admin site prefix\n+        self.assertContains(\n+            response,\n+            '<div class=\"readonly\"><a href=\"%s\">_40</a></div>' % language_url,\n+            html=True,\n+        )\n+\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        \"\"\"\n+        Test readonly foreign key links for the default admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('admin')\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test readonly foreign key links for a custom admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('site2')\n+\n     def test_change_form_renders_correct_null_choice_value(self):\n         \"\"\"\n         Regression test for #17911.\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..b966c36 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -341,6 +342,17 @@ class ModelChoiceFieldTests(TestCase):\n </div>\"\"\" % (self.c1.pk, self.c2.pk, self.c3.pk),\n         )\n \n+    def test_choice_value_hash(self):\n+        \"\"\"Test that ModelChoiceIteratorValue instances are hashable.\"\"\"\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+\n+        # Test that the hash of the same value is consistent\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(self.c1.pk, None)))\n+\n+        # Test that different values result in different hashes\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+\n     def test_choices_not_fetched_when_not_rendering(self):\n         with self.assertNumQueries(1):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..9ceb062 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -793,7 +793,49 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n \n-    def test_rename_m2m_target_model(self):\n+    def test_rename_model_with_db_table_noop_fk(self):\n+        app_label = 'test_rmwdbtn_fk'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Car', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'car'}),\n+            migrations.CreateModel('Driver', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('car', models.ForeignKey('%s.Car' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Car', 'Vehicle')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n+    def test_rename_model_with_db_table_noop_m2m(self):\n+        app_label = 'test_rmwdbtn_m2m'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Book', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'book'}),\n+            migrations.CreateModel('Author', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('books', models.ManyToManyField('Book')),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Book', 'Publication')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n         app_label = \"test_rename_m2m_target_model\"\n         project_state = self.apply_operations(app_label, ProjectState(), operations=[\n             migrations.CreateModel(\"Rider\", fields=[\n",
  "django__django-15022": "",
  "django__django-15037": "",
  "django__django-15103": "diff --git a/tests/template_tests/filter_tests/test_json_script.py b/tests/template_tests/filter_tests/test_json_script.py\nindex 607e24c..2ec960c 100644\n--- a/tests/template_tests/filter_tests/test_json_script.py\n+++ b/tests/template_tests/filter_tests/test_json_script.py\n@@ -1,3 +1,4 @@\n+\n from django.test import SimpleTestCase\n \n from ..utils import setup\n@@ -6,7 +7,16 @@ from ..utils import setup\n class JsonScriptTests(SimpleTestCase):\n \n     @setup({'json-tag01': '{{ value|json_script:\"test_id\" }}'})\n-    def test_basic(self):\n+    @setup({'json-tag02': '{{ value|json_script }}'})\n+    def test_without_id_render(self):\n+        output = self.engine.render_to_string('json-tag02', {'value': {}})\n+        self.assertEqual(output, '<script type=\"application/json\">{}</script>')\n+\n+    def test_without_id_direct(self):\n+        self.assertHTMLEqual(\n+            json_script({'key': 'value'}),\n+            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n+        )\n         output = self.engine.render_to_string(\n             'json-tag01',\n             {'value': {'a': 'testing\\r\\njson \\'string\" <b>escaping</b>'}}\n@@ -16,4 +26,4 @@ class JsonScriptTests(SimpleTestCase):\n             '<script id=\"test_id\" type=\"application/json\">'\n             '{\"a\": \"testing\\\\r\\\\njson \\'string\\\\\" \\\\u003Cb\\\\u003Eescaping\\\\u003C/b\\\\u003E\"}'\n             '</script>'\n-        )\n+        )\n",
  "django__django-15104": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 04452fa..cfa106e 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2834,8 +2834,48 @@ class AutodetectorTests(TestCase):\n                     expected_number,\n                 )\n \n+from django.db import models\n+from django.db.migrations.state import ModelState, ProjectState\n+from django.test import SimpleTestCase, TestCase\n+from django.db.migrations.autodetector import MigrationAutodetector\n+\n+class TestCustomForeignKey(TestCase):\n+    def test_add_custom_fk_with_hardcoded_to(self):\n+        class HardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.Author'\n+                super().__init__(*args, **kwargs)\n \n-class MigrationSuggestNameTests(SimpleTestCase):\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']\n+                return name, path, args, kwargs\n+\n+        book_hardcoded_fk_to = ModelState('testapp', 'Book', [\n+            ('author', HardcodedForeignKey(on_delete=models.CASCADE)),\n+        ])\n+        changes = self.get_changes(\n+            [self.author_empty],\n+            [self.author_empty, book_hardcoded_fk_to],\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='Book')\n+\n+    def test_custom_fk_without_hardcoded_to(self):\n+        class NonHardcodedForeignKey(models.ForeignKey):\n+            pass\n+\n+        book_fk = ModelState('testapp', 'Book', [\n+            ('author', NonHardcodedForeignKey('testapp.Author', on_delete=models.CASCADE)),\n+        ])\n+        changes = self.get_changes(\n+            [self.author_empty],\n+            [self.author_empty, book_fk],\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='Book')\n     def test_no_operations(self):\n         class Migration(migrations.Migration):\n             operations = []\n",
  "django__django-15127": "diff --git a/tests/messages_tests/base.py b/tests/messages_tests/base.py\nindex 85a7769..b0ce8d5 100644\n--- a/tests/messages_tests/base.py\n+++ b/tests/messages_tests/base.py\n@@ -1,3 +1,4 @@\n+\n from django.contrib.messages import constants, get_level, set_level, utils\n from django.contrib.messages.api import MessageFailure\n from django.contrib.messages.constants import DEFAULT_LEVELS\n@@ -368,16 +369,36 @@ class BaseTests:\n         tags = [msg.level_tag for msg in storage]\n         self.assertEqual(tags, ['info', '', 'debug', 'warning', 'error', 'success'])\n \n-    @override_settings_tags(MESSAGE_TAGS={\n-        constants.INFO: 'info',\n-        constants.DEBUG: '',\n-        constants.WARNING: '',\n-        constants.ERROR: 'bad',\n-        29: 'custom',\n-    })\n-    def test_custom_tags(self):\n+    def test_override_settings_no_override(self):\n+        \"\"\"\n+        Test that LEVEL_TAGS are not modified when override_settings is not applied.\n+        \"\"\"\n+        original_level_tags = base.LEVEL_TAGS.copy()\n         storage = self.get_storage()\n         storage.level = 0\n         add_level_messages(storage)\n+        current_level_tags = base.LEVEL_TAGS\n+        self.assertEqual(original_level_tags, current_level_tags)\n+\n+    @override_settings_tags(MESSAGE_TAGS={\n+        constants.INFO: 'info',\n+        constants.DEBUG: 'debug',\n+        constants.WARNING: 'warn',\n+        constants.ERROR: 'error',\n+        12: 'custom_tag',\n+    })\n+    def test_override_settings_with_custom_tags(self):\n+        \"\"\"\n+        Test that LEVEL_TAGS are correctly updated with override_settings.\n+        \"\"\"\n+        expected_level_tags = {\n+            constants.INFO: 'info',\n+            constants.DEBUG: 'debug',\n+            constants.WARNING: 'warn',\n+            constants.ERROR: 'error',\n+            12: 'custom_tag',\n+        }\n+        current_level_tags = base.LEVEL_TAGS\n+        self.assertEqual(current_level_tags, expected_level_tags)\n         tags = [msg.tags for msg in storage]\n         self.assertEqual(tags, ['info', 'custom', 'extra-tag', '', 'bad', 'success'])\n",
  "django__django-15128": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex adde8a6..2eb3da7 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -30,7 +30,7 @@ from .models import (\n     SharedConnection, SimpleCategory, SingleObject, SpecialCategory, Staff,\n     StaffUser, Student, Tag, Task, Teacher, Ticket21203Child,\n     Ticket21203Parent, Ticket23605A, Ticket23605B, Ticket23605C, TvChef, Valid,\n-    X,\n+    X, BaseUser, Task\n )\n \n \n@@ -2095,13 +2095,51 @@ class QuerySetBitwiseOperationTests(TestCase):\n         cls.room_3 = Classroom.objects.create(school=cls.school, has_blackboard=True, name='Room 3')\n         cls.room_4 = Classroom.objects.create(school=cls.school, has_blackboard=False, name='Room 4')\n \n-    @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n+    def test_conflicting_aliases_during_combine(self):\n+        tag = Tag.objects.create()\n+        annotation_1 = Annotation.objects.create(tag=tag)\n+        annotation_2 = Annotation.objects.create(tag=tag)\n+        note = annotation_1.notes.create(tag=tag)\n+        base_user_1 = BaseUser.objects.create(annotation=annotation_1)\n+        base_user_2 = BaseUser.objects.create(annotation=annotation_2)\n+        task = Task.objects.create(\n+            owner=base_user_2, creator=base_user_2, note=note,\n+        )\n+\n+        qs1 = annotation_1.baseuser_set.all()\n+        qs2 = BaseUser.objects.filter(\n+            Q(owner__note__in=annotation_1.notes.all()) |\n+            Q(creator__note__in=annotation_1.notes.all())\n+        )\n+        self.assertSequenceEqual(qs1, [base_user_1])\n+        self.assertSequenceEqual(qs2, [base_user_2])\n+        self.assertCountEqual(qs2 | qs1, qs1 | qs2)\n+        self.assertCountEqual(qs2 | qs1, [base_user_1, base_user_2])\n     def test_or_with_rhs_slice(self):\n         qs1 = Classroom.objects.filter(has_blackboard=True)\n         qs2 = Classroom.objects.filter(has_blackboard=False)[:1]\n         self.assertCountEqual(qs1 | qs2, [self.room_1, self.room_2, self.room_3])\n \n-    @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n+    def test_conflicting_aliases_during_combine(self):\n+        tag = Tag.objects.create()\n+        annotation_1 = Annotation.objects.create(tag=tag)\n+        annotation_2 = Annotation.objects.create(tag=tag)\n+        note = annotation_1.notes.create(tag=tag)\n+        base_user_1 = BaseUser.objects.create(annotation=annotation_1)\n+        base_user_2 = BaseUser.objects.create(annotation=annotation_2)\n+        task = Task.objects.create(\n+            owner=base_user_2, creator=base_user_2, note=note,\n+        )\n+\n+        qs1 = annotation_1.baseuser_set.all()\n+        qs2 = BaseUser.objects.filter(\n+            Q(owner__note__in=annotation_1.notes.all()) |\n+            Q(creator__note__in=annotation_1.notes.all())\n+        )\n+        self.assertSequenceEqual(qs1, [base_user_1])\n+        self.assertSequenceEqual(qs2, [base_user_2])\n+        self.assertCountEqual(qs2 | qs1, qs1 | qs2)\n+        self.assertCountEqual(qs2 | qs1, [base_user_1, base_user_2])\n     def test_or_with_lhs_slice(self):\n         qs1 = Classroom.objects.filter(has_blackboard=True)[:1]\n         qs2 = Classroom.objects.filter(has_blackboard=False)\n",
  "django__django-15161": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 5fdccc5..cb52456 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1775,7 +1775,12 @@ class ValueTests(TestCase):\n         self.assertEqual(len(kwargs), 1)\n         self.assertEqual(kwargs['output_field'].deconstruct(), CharField().deconstruct())\n \n-    def test_repr(self):\n+    def test_deconstruct_F_expression(self):\n+        f = F('field_name')\n+        path, args, kwargs = f.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, ('field_name',))\n+        self.assertEqual(kwargs, {})\n         tests = [\n             (None, 'Value(None)'),\n             ('str', \"Value('str')\"),\n",
  "django__django-15268": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a6c0858..6ddec95 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1762,7 +1762,27 @@ class AutodetectorTests(TestCase):\n             index_together={('title', 'newfield2')},\n         )\n \n-    def test_proxy(self):\n+    def test_optimize_foo_together_operations(self):\n+        \"\"\"\n+        Consecutive AlterFooTogether operations should be optimized into a single operation.\n+        \"\"\"\n+        changes = self.get_changes(\n+            [self.author_empty, self.book_foo_together_3],\n+            [self.author_empty, self.book_foo_together_4],\n+        )\n+        # Before the optimization\n+        self.assertOperationTypes(changes, 'otherapp', 0, [\n+            'AlterUniqueTogether',\n+            'AlterIndexTogether',\n+            'AlterUniqueTogether',\n+            'AlterIndexTogether',\n+        ])\n+        # Perform the optimization\n+        optimized_changes = self.optimizer.optimize(changes['otherapp'][0].operations, 'otherapp')\n+        # After the optimization, there should only be one AlterUniqueTogether and one AlterIndexTogether\n+        self.assertEqual(len(optimized_changes), 2)\n+        self.assertEqual(optimized_changes[0].name, 'AlterUniqueTogether')\n+        self.assertEqual(optimized_changes[1].name, 'AlterIndexTogether')\n         \"\"\"The autodetector correctly deals with proxy models.\"\"\"\n         # First, we test adding a proxy model\n         changes = self.get_changes([self.author_empty], [self.author_empty, self.author_proxy])\n",
  "django__django-15277": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 11f86ed..dee62a0 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1847,7 +1847,35 @@ class ValueTests(TestCase):\n                 expr = Value(value)\n                 self.assertIsInstance(expr.output_field, output_field_type)\n \n-    def test_resolve_output_field_failure(self):\n+    def test_output_field_does_not_create_broken_validators(self):\n+        \"\"\"\n+        Ensure that the output field for a given Value doesn't create\n+        validators that can throw exceptions when the field's clean method\n+        is called.\n+        \"\"\"\n+        import datetime\n+        import uuid\n+        from decimal import Decimal\n+        from django.db.models import Value\n+\n+        value_types = [\n+            'test_string',  # Test string value\n+            True,           # Test boolean value\n+            42,             # Test integer value\n+            3.14,           # Test float value\n+            datetime.date(2019, 5, 15),    # Test date value\n+            datetime.datetime(2019, 5, 15),# Test datetime value\n+            datetime.time(3, 16),          # Test time value\n+            datetime.timedelta(days=1),    # Test timedelta value\n+            Decimal('3.14'),               # Test Decimal value\n+            b'binary_data',                # Test bytes value\n+            uuid.uuid4(),                  # Test UUID value\n+        ]\n+        for value in value_types:\n+            with self.subTest(type=type(value)):\n+                field = Value(value)._resolve_output_field()\n+                # This should not raise a TypeError\n+                field.clean(value, model_instance=None)\n         msg = 'Cannot resolve expression type, unknown output_field'\n         with self.assertRaisesMessage(FieldError, msg):\n             Value(object()).output_field\n",
  "django__django-15278": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex dd02aee..c556e14 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -618,7 +618,33 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor:\n             editor.add_field(Author, new_field)\n         # Ensure the field is there\n+from django.db import connection\n+from django.db.models import OneToOneField, CASCADE\n+from django.test import TestCase\n+from django.db import models\n+\n+class Author(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+class Note(models.Model):\n+    content = models.TextField()\n+\n+class SchemaTests(TestCase):\n+    def test_add_field_o2o_nullable(self):\n+        \"\"\"\n+        Test adding a nullable OneToOneField to an existing model\n+        handles UNIQUE constraint correctly on SQLite.\n+        \"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        new_field = OneToOneField(Note, CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n         columns = self.column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        self.assertTrue(columns['note_id'][1][6])  # Ensure column is nullable\n         field_type, field_info = columns['thing']\n         self.assertEqual(field_type, connection.features.introspected_field_types['IntegerField'])\n         # Make sure the values were transformed correctly\n@@ -636,7 +662,33 @@ class SchemaTests(TransactionTestCase):\n         new_field.set_attributes_from_name(\"bits\")\n         with connection.schema_editor() as editor:\n             editor.add_field(Author, new_field)\n+from django.db import connection\n+from django.db.models import OneToOneField, CASCADE\n+from django.test import TestCase\n+from django.db import models\n+\n+class Author(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+class Note(models.Model):\n+    content = models.TextField()\n+\n+class SchemaTests(TestCase):\n+    def test_add_field_o2o_nullable(self):\n+        \"\"\"\n+        Test adding a nullable OneToOneField to an existing model\n+        handles UNIQUE constraint correctly on SQLite.\n+        \"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        new_field = OneToOneField(Note, CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n         columns = self.column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        self.assertTrue(columns['note_id'][1][6])  # Ensure column is nullable\n         # MySQL annoyingly uses the same backend, so it'll come back as one of\n         # these two types.\n         self.assertIn(columns['bits'][0], (\"BinaryField\", \"TextField\"))\n",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..8da827f 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -80,7 +80,42 @@ class BasicFieldTests(SimpleTestCase):\n         f = Foo._meta.get_field('a')\n         self.assertEqual(str(f), 'model_fields.Foo.a')\n \n-    def test_field_ordering(self):\n+    def test_hash_immutability(self):\n+        field = models.IntegerField()\n+        field_hash = hash(field)\n+        \n+        class MyModel(models.Model):\n+            rank = field\n+        \n+        self.assertEqual(field_hash, hash(field))\n+    \n+    def test_hash_immutability_for_different_types(self):\n+        char_field = models.CharField(max_length=100)\n+        char_field_hash = hash(char_field)\n+        \n+        class MyModel(models.Model):\n+            name = char_field\n+        \n+        self.assertEqual(char_field_hash, hash(char_field))\n+        \n+        int_field = models.IntegerField()\n+        int_field_hash = hash(int_field)\n+        \n+        class AnotherModel(models.Model):\n+            age = int_field\n+        \n+        self.assertEqual(int_field_hash, hash(int_field))\n+    \n+    def test_hash_in_dict(self):\n+        field = models.IntegerField()\n+        field_hash = hash(field)\n+        field_dict = {field: 'value'}\n+        \n+        class MyModel(models.Model):\n+            rating = field\n+        \n+        self.assertEqual(field_hash, hash(field))\n+        self.assertIn(field, field_dict)\n         \"\"\"Fields are ordered based on their creation.\"\"\"\n         f1 = models.Field()\n         f2 = models.Field(auto_created=True)\n",
  "django__django-15368": "",
  "django__django-15380": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex e2de333..c17c670 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1038,6 +1038,34 @@ class AutodetectorTests(TestCase):\n         self.assertOperationAttributes(\n             changes, 'app', 0, 0, model_name='bar', name='foo',\n         )\n+\n+    def test_rename_model_and_field(self):\n+        \"\"\"Test renaming a model and a field in the same migration step.\"\"\"\n+        initial_state = [\n+            ModelState('testapp', 'Author', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('name', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        final_state = [\n+            ModelState('testapp', 'RenamedAuthor', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('renamed_name', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        changes = self.get_changes(\n+            initial_state,\n+            final_state,\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel', 'RenameField'])\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 0, old_name='Author', new_name='RenamedAuthor',\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 1, old_name='name', new_name='renamed_name',\n+        )\n         self.assertEqual(changes['app'][0].operations[0].field.deconstruct(), (\n             'foo',\n             'django.db.models.ForeignKey',\n@@ -1049,6 +1077,34 @@ class AutodetectorTests(TestCase):\n             new_name='renamed_foo',\n         )\n \n+    def test_rename_model_and_field(self):\n+        \"\"\"Test renaming a model and a field in the same migration step.\"\"\"\n+        initial_state = [\n+            ModelState('testapp', 'Author', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('name', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        final_state = [\n+            ModelState('testapp', 'RenamedAuthor', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('renamed_name', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        changes = self.get_changes(\n+            initial_state,\n+            final_state,\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel', 'RenameField'])\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 0, old_name='Author', new_name='RenamedAuthor',\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 1, old_name='name', new_name='renamed_name',\n+        )\n+\n     def test_rename_model(self):\n         \"\"\"Tests autodetection of renamed models.\"\"\"\n         changes = self.get_changes(\n@@ -1056,6 +1112,34 @@ class AutodetectorTests(TestCase):\n             [self.author_renamed_with_book, self.book_with_author_renamed],\n             MigrationQuestioner({\"ask_rename_model\": True}),\n         )\n+\n+    def test_rename_model_and_field(self):\n+        \"\"\"Test renaming a model and a field in the same migration step.\"\"\"\n+        initial_state = [\n+            ModelState('testapp', 'Author', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('name', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        final_state = [\n+            ModelState('testapp', 'RenamedAuthor', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('renamed_name', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        changes = self.get_changes(\n+            initial_state,\n+            final_state,\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel', 'RenameField'])\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 0, old_name='Author', new_name='RenamedAuthor',\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 1, old_name='name', new_name='renamed_name',\n+        )\n         # Right number/type of migrations?\n         self.assertNumberMigrations(changes, 'testapp', 1)\n         self.assertOperationTypes(changes, 'testapp', 0, [\"RenameModel\"])\n",
  "django__django-15382": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex bd890ac..bc00834 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1906,6 +1906,41 @@ class ExistsTests(TestCase):\n         self.assertNotIn('ORDER BY', captured_sql)\n \n \n+from django.db.models import Exists, Q\n+from django.test import TestCase\n+from .models import Manager\n+\n+class ExistsSubqueryTests(TestCase):\n+    \n+    def test_negated_empty_exists(self):\n+        manager = Manager.objects.create()\n+        qs = Manager.objects.filter(\n+            ~Exists(Manager.objects.none()) & Q(pk=manager.pk)\n+        )\n+        self.assertSequenceEqual(qs, [manager])\n+\n+    def test_non_negated_empty_exists(self):\n+        manager = Manager.objects.create()\n+        qs = Manager.objects.filter(\n+            Exists(Manager.objects.none()) & Q(pk=manager.pk)\n+        )\n+        self.assertSequenceEqual(qs, [])\n+\n+    def test_negated_non_empty_exists(self):\n+        manager = Manager.objects.create()\n+        other_manager = Manager.objects.create()\n+        qs = Manager.objects.filter(\n+            ~Exists(Manager.objects.filter(pk=other_manager.pk)) & Q(pk=manager.pk)\n+        )\n+        self.assertSequenceEqual(qs, [manager])\n+\n+    def test_non_negated_non_empty_exists(self):\n+        manager = Manager.objects.create()\n+        qs = Manager.objects.filter(\n+            Exists(Manager.objects.all()) & Q(pk=manager.pk)\n+        )\n+        self.assertSequenceEqual(qs, [manager])\n+\n class FieldTransformTests(TestCase):\n \n     @classmethod\n",
  "django__django-15467": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex f5af59b..823c149 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -24,7 +24,8 @@ from django.db.models import (\n     ManyToManyField,\n     UUIDField,\n )\n-from django.test import SimpleTestCase, TestCase, override_settings\n+from django.db import models\n+from django.test import SimpleTestCase, TestCase, override_settings, RequestFactory\n from django.urls import reverse\n from django.utils import translation\n \n",
  "django__django-15499": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 5df1b06..c36f238 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -128,8 +128,93 @@ class OptimizerTests(SimpleTestCase):\n                 ),\n             ],\n         )\n+    \n+    def test_create_alter_model_managers(self):\n+        # This is the original test case provided.\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Foo\", fields=[]),\n+                migrations.AlterModelManagers(\n+                    name=\"Foo\",\n+                    managers=[\n+                        (\"objects\", models.Manager()),\n+                        (\"things\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\",\n+                    fields=[],\n+                    managers=[\n+                        (\"objects\", models.Manager()),\n+                        (\"things\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+    \n+    def test_create_multiple_alter_model_managers(self):\n+        # Additional test case to verify optimization when multiple managers are altered.\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Bar\", fields=[]),\n+                migrations.AlterModelManagers(\n+                    name=\"Bar\",\n+                    managers=[\n+                        (\"primary\", models.Manager()),\n+                    ],\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Bar\",\n+                    managers=[\n+                        (\"primary\", models.Manager()),\n+                        (\"secondary\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    managers=[\n+                        (\"primary\", models.Manager()),\n+                        (\"secondary\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n \n-    def test_create_model_and_remove_model_options(self):\n+    def test_create_model_with_initial_managers_and_alter(self):\n+        # Test case where the model is created with initial managers and altered later.\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\",\n+                    fields=[],\n+                    managers=[\n+                        (\"admin\", models.Manager()),\n+                    ],\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Baz\",\n+                    managers=[\n+                        (\"admin\", models.Manager()),\n+                        (\"user\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\",\n+                    fields=[],\n+                    managers=[\n+                        (\"admin\", models.Manager()),\n+                        (\"user\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n         self.assertOptimizesTo(\n             [\n                 migrations.CreateModel(\n",
  "django__django-15525": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 3640e99..23fab6c 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -791,6 +791,10 @@ class NaturalKeyFixtureTests(TestCase):\n         )\n \n \n+from django.core import management\n+from django.test import TestCase\n+from .models import Person, NaturalKeyWithFKDependency\n+\n class M2MNaturalKeyFixtureTests(TestCase):\n     \"\"\"Tests for ticket #14426.\"\"\"\n \n",
  "django__django-15561": "",
  "django__django-15569": "diff --git a/tests/custom_lookups/tests.py b/tests/custom_lookups/tests.py\nindex 74c331a..cbb1e89 100644\n--- a/tests/custom_lookups/tests.py\n+++ b/tests/custom_lookups/tests.py\n@@ -324,8 +324,17 @@ class LookupTests(TestCase):\n             # getting the lookups again should re-cache\n             self.assertIn(\"exactly\", field.get_lookups())\n \n+    def test_lookups_unregistration_clears_cache(self):\n+        field = Article._meta.get_field(\"author\")\n \n-class BilateralTransformTests(TestCase):\n+        # Register a lookup and ensure it's cached\n+        with register_lookup(models.ForeignObject, Exactly):\n+            self.assertIn(\"exactly\", field.get_lookups())\n+        \n+        # Unregister the lookup and ensure the cache is cleared\n+        models.ForeignObject._unregister_lookup(Exactly)\n+        field.get_lookups.cache_clear()\n+        self.assertNotIn(\"exactly\", field.get_lookups())\n     def test_bilateral_upper(self):\n         with register_lookup(models.CharField, UpperBilateralTransform):\n             author1 = Author.objects.create(name=\"Doe\")\n",
  "django__django-15572": "",
  "django__django-15731": "diff --git a/tests/basic/tests.py b/tests/basic/tests.py\nindex 902f114..6a74574 100644\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -1,3 +1,4 @@\n+\n import threading\n from datetime import datetime, timedelta\n from unittest import mock\n@@ -6,6 +7,7 @@ from django.core.exceptions import MultipleObjectsReturned, ObjectDoesNotExist\n from django.db import DEFAULT_DB_ALIAS, DatabaseError, connections, models\n from django.db.models.manager import BaseManager\n from django.db.models.query import MAX_GET_RESULTS, EmptyQuerySet\n+import inspect\n from django.test import (\n     SimpleTestCase,\n     TestCase,\n",
  "django__django-15741": "diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex c6dbc53..a11c80b 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -1,8 +1,10 @@\n+\n from datetime import datetime, time\n \n from django.template.defaultfilters import date\n from django.test import SimpleTestCase\n-from django.utils import timezone, translation\n+from django.utils import timezone, translation, formats\n+from django.utils.translation import gettext_lazy as _\n \n from ..utils import setup\n from .timezone_utils import TimezoneTestCase\n@@ -74,7 +76,13 @@ class DateTests(TimezoneTestCase):\n \n \n class FunctionTests(SimpleTestCase):\n-    def test_date(self):\n+    def test_get_format_lazy_format(self):\n+        self.assertEqual(formats.get_format(_(\"DATE_FORMAT\")), \"N j, Y\")\n+\n+    @setup({\"datelazy\": '{{ t|date:_(\"Y-m-d\") }}'})\n+    def test_date_lazy(self):\n+        output = self.engine.render_to_string(\"datelazy\", {\"t\": datetime(2005, 12, 29)})\n+        self.assertEqual(output, \"2005-12-29\")\n         self.assertEqual(date(datetime(2005, 12, 29), \"d F Y\"), \"29 December 2005\")\n \n     def test_no_args(self):\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..1798b27 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -383,6 +383,16 @@ class ProxyModelTests(TestCase):\n         )\n \n         # Select related + filter on a related proxy of proxy field\n+\n+    def test_select_related_only_with_proxy(self):\n+        custom = CustomModel.objects.create(name=\"Custom Name\")\n+        proxy_custom = ProxyCustomModel.objects.get(pk=custom.pk)\n+        AnotherModel.objects.create(custom=proxy_custom)\n+\n+        # Attempt to use select_related and only on a proxy model\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        obj = qs.first()\n+        self.assertEqual(obj.custom.name, \"Custom Name\")\n         resp = ProxyImprovement.objects.select_related().get(\n             associated_bug__summary__icontains=\"fix\"\n         )\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..31ebd06 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -151,12 +151,24 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ),\n         )\n \n+    def test_parameters_before_dbname(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n+        )\n+\n     def test_parameters(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n+    def test_parameters_before_dbname(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n+        )\n+\n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n",
  "django__django-15863": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 08f08e1..5e9d192 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -31,6 +31,8 @@ class FloatformatTests(SimpleTestCase):\n         self.assertEqual(output, \"1.4 1.4\")\n \n \n+from decimal import Decimal\n+\n class FunctionTests(SimpleTestCase):\n     def test_inputs(self):\n         self.assertEqual(floatformat(7.7), \"7.7\")\n",
  "django__django-15930": "",
  "django__django-15987": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 5ac9ab9..0bfd16c 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n # Unittests for fixtures.\n import json\n import os\n@@ -6,6 +7,7 @@ from io import StringIO\n from pathlib import Path\n \n from django.core import management, serializers\n+from django.core.management.utils import get_random_secret_key\n from django.core.exceptions import ImproperlyConfigured\n from django.core.serializers.base import DeserializationError\n from django.db import IntegrityError, transaction\n",
  "django__django-16032": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex bcf8df9..29638e8 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -989,6 +989,30 @@ class NonAggregateAnnotationTestCase(TestCase):\n             publisher_books_qs, [{\"name\": \"Sams\"}, {\"name\": \"Morgan Kaufmann\"}]\n         )\n \n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        self.assertCountEqual(\n+            publisher_books_qs,\n+            [\n+                {'name': 'Apress'},\n+                {'name': 'Sams'},\n+                {'name': 'Prentice Hall'},\n+                {'name': 'Morgan Kaufmann'}\n+            ]\n+        )\n+\n     def test_annotation_exists_aggregate_values_chaining(self):\n         qs = (\n             Book.objects.values(\"publisher\")\n",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..c6202be 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2416,7 +2416,7 @@ class CombinedExpressionTests(SimpleTestCase):\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV, Combinable.MOD]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..bb3f645 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib import admin\n@@ -21,7 +22,9 @@ from django.db.models import F, Field, IntegerField\n from django.db.models.functions import Upper\n from django.db.models.lookups import Contains, Exact\n from django.template import Context, Template, TemplateSyntaxError\n-from django.test import TestCase, override_settings\n+from unittest import mock\n+from django.db import DatabaseError\n+from django.test import TestCase, override_settings, skipUnlessDBFeature\n from django.test.client import RequestFactory\n from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup\n from django.urls import reverse\n@@ -400,7 +403,61 @@ class ChangeListTests(TestCase):\n         with self.assertRaises(IncorrectLookupParameters):\n             m.get_changelist_instance(request)\n \n-    def test_custom_paginator(self):\n+    @skipUnlessDBFeature(\"supports_transactions\")\n+    def test_list_editable_atomicity(self):\n+        # Create test objects\n+        a = Swallow.objects.create(origin=\"Swallow A\", load=4, speed=1)\n+        b = Swallow.objects.create(origin=\"Swallow B\", load=2, speed=2)\n+\n+        # Login as superuser\n+        self.client.force_login(self.superuser)\n+        \n+        # Prepare changelist URL and POST data for editing\n+        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n+        data = {\n+            \"form-TOTAL_FORMS\": \"2\",\n+            \"form-INITIAL_FORMS\": \"2\",\n+            \"form-MIN_NUM_FORMS\": \"0\",\n+            \"form-MAX_NUM_FORMS\": \"1000\",\n+            \"form-0-uuid\": str(a.pk),\n+            \"form-1-uuid\": str(b.pk),\n+            \"form-0-load\": \"9.0\",\n+            \"form-0-speed\": \"3.0\",\n+            \"form-1-load\": \"5.0\",\n+            \"form-1-speed\": \"1.0\",\n+            \"_save\": \"Save\",\n+        }\n+\n+        # Test atomicity by mocking an exception during log_change\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\", side_effect=DatabaseError\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+\n+        # Ensure the changes are not committed in case of an error\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+\n+        # Further test atomicity with partial success and subsequent failure\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\",\n+            side_effect=[None, DatabaseError],\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+\n+        # Check again to ensure no partial changes were committed\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n         new_parent = Parent.objects.create(name=\"parent\")\n         for i in range(1, 201):\n             Child.objects.create(name=\"name %s\" % i, parent=new_parent)\n",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..b51ec67 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2400,7 +2400,31 @@ class MakeMigrationsTests(MigrationTestBase):\n         ):\n             call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n \n-    def test_makemigrations_migration_path_output(self):\n+    def test_makemigrations_check_no_dry_run_required(self):\n+        \"\"\"\n+        makemigrations --check should exit with a non-zero status when\n+        there are changes and should not require --dry-run to avoid\n+        creating migrations.\n+        \"\"\"\n+        with self.temporary_migration_module():\n+            with self.assertRaises(SystemExit):\n+                call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+\n+        # Now simulate no changes and ensure --check still exits normally.\n+        with self.temporary_migration_module(\n+            module=\"migrations.test_migrations_no_changes\"\n+        ):\n+            call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+\n+    def test_makemigrations_check_no_creation(self):\n+        \"\"\"\n+        Ensure makemigrations --check does not create migrations even if there are changes.\n+        \"\"\"\n+        with self.temporary_migration_module() as tmpdir:\n+            with self.assertRaises(SystemExit):\n+                call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+            # Check that no migration files were created.\n+            self.assertFalse(os.listdir(tmpdir), \"Migrations were created when they shouldn't be.\")\n         \"\"\"\n         makemigrations should print the relative paths to the migrations unless\n         they are outside of the current tree, in which case the absolute path\n",
  "django__django-16136": "diff --git a/tests/async/tests.py b/tests/async/tests.py\nindex 72e103e..bedce9f 100644\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -1,3 +1,4 @@\n+\n import asyncio\n import os\n from unittest import mock\n@@ -6,8 +7,9 @@ from asgiref.sync import async_to_sync\n \n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n-from django.http import HttpResponse\n-from django.test import SimpleTestCase\n+from django.http import HttpResponse, HttpResponseNotAllowed\n+from django.test import RequestFactory, SimpleTestCase\n+import asyncio\n from django.utils.asyncio import async_unsafe\n from django.views.generic.base import View\n \n@@ -119,7 +121,28 @@ class ViewTests(SimpleTestCase):\n \n                 self.assertIsInstance(response, HttpResponse)\n \n-    def test_base_view_class_is_sync(self):\n+    def test_http_method_not_allowed_responds_correctly(self):\n+        \"\"\"\n+        Test that http_method_not_allowed in both sync and async views\n+        correctly returns an HttpResponseNotAllowed and handles async properly.\n+        \"\"\"\n+        request_factory = RequestFactory()\n+        tests = [\n+            (SyncView, False),\n+            (AsyncView, True),\n+        ]\n+        for view_cls, is_coroutine in tests:\n+            with self.subTest(view_cls=view_cls, is_coroutine=is_coroutine):\n+                instance = view_cls()\n+                response = instance.http_method_not_allowed(request_factory.post(\"/\"))\n+                self.assertIs(\n+                    asyncio.iscoroutine(response),\n+                    is_coroutine,\n+                )\n+                if is_coroutine:\n+                    response = asyncio.run(response)\n+\n+                self.assertIsInstance(response, HttpResponseNotAllowed)\n         \"\"\"\n         View and by extension any subclasses that don't define handlers are\n         sync.\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..d2c278a 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -24,7 +25,8 @@ from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n-from django.utils.translation import gettext as _\n+import urllib.parse\n+from django.urls import reverse\n \n from .models.custom_user import (\n     CustomUser,\n@@ -881,7 +883,32 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         form = UserChangeForm(instance=user, data=post_data)\n \n         self.assertTrue(form.is_valid())\n-        # original hashed password contains $\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n+    def test_user_change_form_password_reset_link(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        expected_link = f\"../../{user.pk}/password/\"\n+        self.assertIn(expected_link, password_help_text)\n         self.assertIn(\"$\", form.cleaned_data[\"password\"])\n \n     def test_bug_19349_bound_password_field(self):\n",
  "django__django-16145": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex 04d2f0e..fb045a3 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1600,7 +1600,35 @@ class ManageRunserver(SimpleTestCase):\n             \"2001:0db8:1234:5678::9\", \"7000\", ipv6=True, raw_ipv6=True\n         )\n \n-    def test_runner_hostname(self):\n+    def test_zero_ip_addr_with_reloader(self):\n+        output = StringIO()\n+        with self.assertNoLogs('django', level='ERROR'):\n+            call_command(\n+                'runserver',\n+                addrport='0:8000',\n+                use_reloader=True,\n+                skip_checks=True,\n+                stdout=output,\n+            )\n+        self.assertIn(\n+            'Starting development server at http://0.0.0.0:8000/',\n+            output.getvalue(),\n+        )\n+\n+    def test_zero_ip_addr_without_reloader(self):\n+        output = StringIO()\n+        with self.assertNoLogs('django', level='ERROR'):\n+            call_command(\n+                'runserver',\n+                addrport='0:8000',\n+                use_reloader=False,\n+                skip_checks=True,\n+                stdout=output,\n+            )\n+        self.assertIn(\n+            'Starting development server at http://0.0.0.0:8000/',\n+            output.getvalue(),\n+        )\n         call_command(self.cmd, addrport=\"localhost:8000\")\n         self.assertServerSettings(\"localhost\", \"8000\")\n \n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..fe3273a 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -507,6 +507,16 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n+    def test_callable_sitemap_no_items(self):\n+        index_response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", index_response)\n+        expected_content_index = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\n+        </sitemapindex>\n+        \"\"\"\n+        self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n+\n \n # RemovedInDjango50Warning\n class DeprecatedTests(SitemapTestsBase):\n",
  "django__django-16315": "diff --git a/tests/bulk_create/models.py b/tests/bulk_create/models.py\nindex c5f5c07..7e99864 100644\n--- a/tests/bulk_create/models.py\n+++ b/tests/bulk_create/models.py\n@@ -59,6 +59,10 @@ class Pizzeria(Restaurant):\n     pass\n \n \n+class FieldsWithDbColumns(models.Model):\n+    rank = models.IntegerField(unique=True, db_column=\"rAnK\")\n+    name = models.CharField(max_length=15, null=True, db_column=\"oTheRNaMe\")\n+\n class State(models.Model):\n     two_letter_code = models.CharField(max_length=2, primary_key=True)\n \n",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..81c20a9 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,57 @@\n+\n+class CustomUserWithM2MFormTests(TestCase):\n+    def test_custom_form_saves_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization = Organization.objects.create(name=\"organization 1\")\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization])\n+\n+    def test_custom_form_no_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields\n+\n+        organization = Organization.objects.create(name=\"organization 1\")\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [])\n+\n+    def test_custom_form_invalid_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization = Organization.objects.create(name=\"organization 1\")\n+        invalid_org_id = organization.pk + 1\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(invalid_org_id)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), False)\n+\n import datetime\n import re\n import urllib.parse\n@@ -34,6 +88,7 @@ from .models.custom_user import (\n     ExtensionUser,\n )\n from .models.with_custom_email_field import CustomEmailField\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n from .models.with_integer_username import IntegerUsernameUser\n from .settings import AUTH_TEMPLATES\n \n",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..b75eed8 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.test import TestCase\n@@ -160,6 +161,20 @@ class TimesinceTests(TestCase):\n         self.assertEqual(timesince(t + self.oneday, now), \"0\\xa0minutes\")\n         self.assertEqual(timeuntil(t - self.oneday, now), \"0\\xa0minutes\")\n \n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_long_interval_with_tz(self):\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=31)\n+        self.assertEqual(timesince(d), \"1\\xa0month\")\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_long_interval_with_tz_more_than_month(self):\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=62)\n+        self.assertEqual(timesince(d), \"2\\xa0months\")\n+\n     def test_naive_datetime_with_tzinfo_attribute(self):\n         class naive(datetime.tzinfo):\n             def utcoffset(self, dt):\n",
  "django__django-16454": "",
  "django__django-16485": "",
  "django__django-16493": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex 20567e7..51f600b 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -1019,7 +1019,15 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         self.assertIs(storage, callable_storage)\n \n \n-# Tests for a race condition on file saving (#4948).\n+    def test_deconstruction_callable_default_storage(self):\n+        \"\"\"\n+        A callable that returns default_storage is not omitted when\n+        deconstructing.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"storage_callable_default\").deconstruct()\n+        storage = kwargs[\"storage\"]\n+        self.assertIs(storage, callable_default_storage)\n # This is written in such a way that it'll always pass on platforms\n # without threading.\n \n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..6126294 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n@@ -5,6 +6,8 @@ from django.contrib.admin.templatetags.admin_list import date_hierarchy\n from django.contrib.admin.templatetags.admin_modify import submit_row\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n from django.test import RequestFactory, TestCase\n from django.urls import reverse\n \n@@ -54,6 +57,42 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n                     template_context[\"show_save_and_add_another\"], expected_flag\n                 )\n \n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        \"\"\"\n+        Test that the \"Save as new\" button is only shown when the user has\n+        both add and change permissions.\n+        \"\"\"\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n+\n     def test_override_change_form_template_tags(self):\n         \"\"\"\n         admin_modify template tags follow the standard search pattern\n",
  "django__django-16560": "diff --git a/tests/constraints/tests.py b/tests/constraints/tests.py\nindex 13854a9..5de638f 100644\n--- a/tests/constraints/tests.py\n+++ b/tests/constraints/tests.py\n@@ -217,7 +217,31 @@ class CheckConstraintTests(TestCase):\n         constraints = get_constraints(ChildModel._meta.db_table)\n         self.assertIn(\"constraints_childmodel_adult\", constraints)\n \n-    def test_validate(self):\n+    def test_validate_with_custom_error_code(self):\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check, \n+            name=\"price\", \n+            violation_error_message=\"discount is fake\",\n+            violation_error_code=\"fake_discount\",\n+        )\n+        # Invalid product.\n+        invalid_product = Product(price=10, discounted_price=42)\n+        msg = \"discount is fake\"\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n+            constraint.validate(Product, invalid_product)\n+        self.assertEqual(cm.exception.code, \"fake_discount\")\n+\n+    def test_unique_constraint_with_custom_error_code(self):\n+        constraint = UniqueConstraintProduct._meta.constraints[0]\n+        non_unique_product = UniqueConstraintProduct(\n+            name=self.p1.name, color=self.p1.color\n+        )\n+        constraint.violation_error_code = \"unique_violation\"\n+        msg = \"Unique constraint product with this Name and Color already exists.\"\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n+            constraint.validate(UniqueConstraintProduct, non_unique_product)\n+        self.assertEqual(cm.exception.code, \"unique_violation\")\n         check = models.Q(price__gt=models.F(\"discounted_price\"))\n         constraint = models.CheckConstraint(check=check, name=\"price\")\n         # Invalid product.\n@@ -654,7 +678,31 @@ class UniqueConstraintTests(TestCase):\n         with self.assertRaisesMessage(ValidationError, msg):\n             NoCodeErrorConstraintModel(name=\"test\").validate_constraints()\n \n-    def test_validate(self):\n+    def test_validate_with_custom_error_code(self):\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check, \n+            name=\"price\", \n+            violation_error_message=\"discount is fake\",\n+            violation_error_code=\"fake_discount\",\n+        )\n+        # Invalid product.\n+        invalid_product = Product(price=10, discounted_price=42)\n+        msg = \"discount is fake\"\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n+            constraint.validate(Product, invalid_product)\n+        self.assertEqual(cm.exception.code, \"fake_discount\")\n+\n+    def test_unique_constraint_with_custom_error_code(self):\n+        constraint = UniqueConstraintProduct._meta.constraints[0]\n+        non_unique_product = UniqueConstraintProduct(\n+            name=self.p1.name, color=self.p1.color\n+        )\n+        constraint.violation_error_code = \"unique_violation\"\n+        msg = \"Unique constraint product with this Name and Color already exists.\"\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n+            constraint.validate(UniqueConstraintProduct, non_unique_product)\n+        self.assertEqual(cm.exception.code, \"unique_violation\")\n         constraint = UniqueConstraintProduct._meta.constraints[0]\n         msg = \"Unique constraint product with this Name and Color already exists.\"\n         non_unique_product = UniqueConstraintProduct(\n",
  "django__django-16569": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 55da562..5278e84 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1481,6 +1481,26 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertNotIn(\"DELETE\", formset.forms[1].fields)\n         self.assertNotIn(\"DELETE\", formset.forms[2].fields)\n \n+    def test_formset_empty_form_no_delete_field_when_index_none(self):\n+        # Ensures no \"DELETE\" field is added when index is None\n+        from django import forms\n+        \n+        class MyForm(forms.Form):\n+            my_field = forms.CharField()\n+\n+        MyFormSet = forms.formset_factory(\n+            form=MyForm,\n+            can_delete=True,\n+            can_delete_extra=False,\n+        )\n+        \n+        my_formset = MyFormSet(\n+            initial=None,\n+        )\n+        \n+        # Check that the DELETE field is not in empty_form's fields\n+        self.assertNotIn(\"DELETE\", my_formset.empty_form.fields)\n+\n         formset = ChoiceFormFormset(\n             data={\n                 \"form-0-choice\": \"Zero\",\n",
  "django__django-16595": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3979e76..b449a4c 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -43,6 +43,44 @@ class OptimizerTests(SimpleTestCase):\n     def assertDoesNotOptimize(self, operations, **kwargs):\n         self.assertOptimizesTo(operations, operations, **kwargs)\n \n+    def test_alter_alter_field(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AlterField(\"Foo\", \"name\", models.IntegerField()),\n+                migrations.AlterField(\"Foo\", \"name\", models.IntegerField(help_text=\"help\")),\n+            ],\n+            [migrations.AlterField(\"Foo\", \"name\", models.IntegerField(help_text=\"help\"))],\n+        )\n+\n+    def test_alter_alter_with_different_attributes(self):\n+        # AlterField operations with the same field name but different attributes.\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AlterField(\"Bar\", \"value\", models.CharField(max_length=255)),\n+                migrations.AlterField(\"Bar\", \"value\", models.CharField(max_length=128)),\n+                migrations.AlterField(\"Bar\", \"value\", models.CharField(max_length=128, null=True)),\n+            ],\n+            [migrations.AlterField(\"Bar\", \"value\", models.CharField(max_length=128, null=True))],\n+        )\n+\n+    def test_alter_alter_non_collapsible(self):\n+        # AlterField operations that should not collapse due to different field names.\n+        self.assertDoesNotOptimize(\n+            [\n+                migrations.AlterField(\"Baz\", \"field1\", models.IntegerField()),\n+                migrations.AlterField(\"Baz\", \"field2\", models.IntegerField()),\n+            ]\n+        )\n+\n+    def test_add_and_alter_field(self):\n+        # Test case where AddField and AlterField are separated and should not collapse.\n+        self.assertDoesNotOptimize(\n+            [\n+                migrations.AddField(\"Qux\", \"description\", models.TextField()),\n+                migrations.AlterField(\"Qux\", \"description\", models.CharField(max_length=255)),\n+            ]\n+        )\n+\n     def test_none_app_label(self):\n         optimizer = MigrationOptimizer()\n         with self.assertRaisesMessage(TypeError, \"app_label must be a str\"):\n",
  "django__django-16612": "",
  "django__django-16642": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 499356e..fc650b3 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -256,6 +256,21 @@ class FileResponseTests(SimpleTestCase):\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n         )\n+        # Test for \".tar.br\" and \".tar.Z\"\n+        test_tuples += (\n+            (\".tar.br\", \"application/x-brotli\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n+        )\n+        # Test for \".br\" and \".Z\" without additional extensions\n+        test_tuples += (\n+            (\".br\", \"application/x-brotli\"),\n+            (\".Z\", \"application/x-compress\"),\n+        )\n+        # Test for \".tar.br\" and \".tar.Z\"\n+        test_tuples += (\n+            (\".tar.br\", \"application/x-brotli\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n+        )\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n                 with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n",
  "django__django-16661": "diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py\nindex 8cb88da..b30d46f 100644\n--- a/tests/modeladmin/tests.py\n+++ b/tests/modeladmin/tests.py\n@@ -154,6 +154,58 @@ class ModelAdminTests(TestCase):\n             ma.lookup_allowed(\"employee__department__code\", \"test_value\"), True\n         )\n \n+    @isolate_apps('modeladmin')\n+    def test_lookup_allowed_foreign_primary(self):\n+        class Country(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class Place(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+\n+        class Restaurant(models.Model):\n+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)\n+\n+        class Waiter(models.Model):\n+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n+\n+        class WaiterAdmin(ModelAdmin):\n+            list_filter = [\n+                \"restaurant__place__country\",\n+                \"restaurant__place__country__name\",\n+            ]\n+\n+        ma = WaiterAdmin(Waiter, self.site)\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country\", \"1\"), True)\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__id__exact\", \"1\"), True\n+        )\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__name\", \"test_value\"), True\n+        )\n+        \n+    @isolate_apps('modeladmin')\n+    def test_lookup_disallowed_foreign_primary(self):\n+        class Country(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class Place(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+\n+        class Restaurant(models.Model):\n+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)\n+\n+        class Waiter(models.Model):\n+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n+\n+        class WaiterAdmin(ModelAdmin):\n+            list_filter = [\n+                \"restaurant__place__country\",\n+            ]\n+\n+        ma = WaiterAdmin(Waiter, self.site)\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country__population\", \"1000\"), False)\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country__name__contains\", \"test\"), False)\n+\n     def test_field_arguments(self):\n         # If fields is specified, fieldsets_add and fieldsets_change should\n         # just stick the fields into a formsets structure and return it.\n",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..f9613f6 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -922,6 +922,50 @@ class WriterTests(SimpleTestCase):\n             output,\n         )\n \n+    def test_sorted_imports_with_multiple_modules(self):\n+        \"\"\"\n+        Test that imports are sorted correctly when multiple modules are present.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield2\",\n+                        models.FloatField(default=time.time),\n+                    ),\n+                ]\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        self.assertIn(\n+            \"import datetime\\nimport time\\nfrom django.db import migrations, models\\n\",\n+            output,\n+        )\n+\n+    def test_sorted_imports_with_no_django_models(self):\n+        \"\"\"\n+        Test that imports are sorted correctly when there are no models from django.db.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.RunPython(lambda apps, schema_editor: None),\n+                ]\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        self.assertIn(\n+            \"from django.db import migrations\\n\",\n+            output,\n+        )\n+\n     def test_migration_file_header_comments(self):\n         \"\"\"\n         Test comments at top of file.\n",
  "django__django-16801": "diff --git a/tests/model_fields/test_imagefield.py b/tests/model_fields/test_imagefield.py\nindex 9bf7f7d..1c2294b 100644\n--- a/tests/model_fields/test_imagefield.py\n+++ b/tests/model_fields/test_imagefield.py\n@@ -328,6 +328,18 @@ class ImageFieldNoDimensionsTests(ImageFieldTwoDimensionsTests):\n \n     PersonModel = Person\n \n+    def test_post_init_not_connected(self):\n+        \"\"\"\n+        Test that the post_init signal is not connected for ImageField \n+        without width_field and height_field.\n+        \"\"\"\n+        person_model_id = id(self.PersonModel)\n+        # Check that the signal handler is not registered for this model.\n+        self.assertNotIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id), *_ in signals.post_init.receivers],\n+        )\n+\n \n @skipIf(Image is None, \"Pillow is required to test ImageField\")\n class ImageFieldOneDimensionTests(ImageFieldTwoDimensionsTests):\n",
  "django__django-16819": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex ac93153..d469080 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -1157,4 +1157,55 @@ class OptimizerTests(SimpleTestCase):\n                     \"Pony\", new_name=\"new_name\", old_fields=(\"weight\", \"pink\")\n                 ),\n             ]\n-        )\n+        )\n+\n+    def test_consecutive_add_remove_index(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"weight\", \"height\"], name=\"idx_pony_weight_height\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_weight_height\"),\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"height\", \"color\"], name=\"idx_pony_height_color\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_height_color\"),\n+            ],\n+            [],\n+        )\n+\n+    def test_add_index_different_names(self):\n+        self.assertDoesNotOptimize(\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"weight\", \"height\"], name=\"idx_pony_weight_height\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_height_color\"),\n+            ]\n+        )\n+\n+    def test_interleaved_non_optimizable_operations(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"weight\", \"height\"], name=\"idx_pony_weight_height\"\n+                    ),\n+                ),\n+                migrations.RunSQL(\"SELECT 1\"),  # Non-optimizable operation\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_weight_height\"),\n+            ],\n+            [\n+                migrations.RunSQL(\"SELECT 1\"),\n+            ],\n+        )\n",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..b79d98f 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -798,7 +798,7 @@ class SystemChecksTestCase(SimpleTestCase):\n         errors = SongAdmin(Song, AdminSite()).check()\n         expected = [\n             checks.Error(\n-                \"The value of 'readonly_fields[1]' is not a callable, an attribute \"\n+                \"The value of 'readonly_fields[1]' refers to 'nonexistent', which is not a callable, an attribute \"\n                 \"of 'SongAdmin', or an attribute of 'admin_checks.Song'.\",\n                 obj=SongAdmin,\n                 id=\"admin.E035\",\n@@ -814,7 +814,7 @@ class SystemChecksTestCase(SimpleTestCase):\n         errors = CityInline(State, AdminSite()).check()\n         expected = [\n             checks.Error(\n-                \"The value of 'readonly_fields[0]' is not a callable, an attribute \"\n+                \"The value of 'readonly_fields[0]' refers to 'i_dont_exist', which is not a callable, an attribute \"\n                 \"of 'CityInline', or an attribute of 'admin_checks.City'.\",\n                 obj=CityInline,\n                 id=\"admin.E035\",\n",
  "django__django-16901": "",
  "django__django-17029": "diff --git a/tests/apps/tests.py b/tests/apps/tests.py\nindex f7c2c67..94d58dc 100644\n--- a/tests/apps/tests.py\n+++ b/tests/apps/tests.py\n@@ -31,6 +31,7 @@ SOME_INSTALLED_APPS_NAMES = [\n \n HERE = os.path.dirname(__file__)\n \n+from django.test import SimpleTestCase, override_settings\n \n class AppsTests(SimpleTestCase):\n     def test_singleton_main(self):\n",
  "django__django-17084": "",
  "django__django-17087": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex a812969..eabba21 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -197,6 +197,38 @@ class OperationWriterTests(SimpleTestCase):\n             \"),\",\n         )\n \n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n+\n \n class WriterTests(SimpleTestCase):\n     \"\"\"\n@@ -255,12 +287,76 @@ class WriterTests(SimpleTestCase):\n             decimal.Decimal(\"1.3\"), (\"Decimal('1.3')\", {\"from decimal import Decimal\"})\n         )\n \n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n+\n         self.assertSerializedEqual(Money(\"1.3\"))\n         self.assertSerializedResultEqual(\n             Money(\"1.3\"),\n             (\"migrations.test_writer.Money('1.3')\", {\"import migrations.test_writer\"}),\n         )\n \n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n+\n     def test_serialize_constants(self):\n         self.assertSerializedEqual(None)\n         self.assertSerializedEqual(True)\n@@ -296,6 +392,38 @@ class WriterTests(SimpleTestCase):\n             (\"[list, tuple, dict, set, frozenset]\", set()),\n         )\n \n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n+\n     def test_serialize_lazy_objects(self):\n         pattern = re.compile(r\"^foo$\")\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n@@ -306,6 +434,38 @@ class WriterTests(SimpleTestCase):\n             TextEnum.A,\n             (\"migrations.test_writer.TextEnum['A']\", {\"import migrations.test_writer\"}),\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n         self.assertSerializedResultEqual(\n             TextTranslatedEnum.A,\n             (\n@@ -313,6 +473,38 @@ class WriterTests(SimpleTestCase):\n                 {\"import migrations.test_writer\"},\n             ),\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n         self.assertSerializedResultEqual(\n             BinaryEnum.A,\n             (\n@@ -320,10 +512,74 @@ class WriterTests(SimpleTestCase):\n                 {\"import migrations.test_writer\"},\n             ),\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n         self.assertSerializedResultEqual(\n             IntEnum.B,\n             (\"migrations.test_writer.IntEnum['B']\", {\"import migrations.test_writer\"}),\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n         self.assertSerializedResultEqual(\n             self.NestedEnum.A,\n             (\n@@ -331,11 +587,75 @@ class WriterTests(SimpleTestCase):\n                 {\"import migrations.test_writer\"},\n             ),\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n         self.assertSerializedEqual(self.NestedEnum.A)\n \n         field = models.CharField(\n             default=TextEnum.B, choices=[(m.value, m) for m in TextEnum]\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n             string,\n@@ -344,10 +664,74 @@ class WriterTests(SimpleTestCase):\n             \"('value-b', migrations.test_writer.TextEnum['B'])], \"\n             \"default=migrations.test_writer.TextEnum['B'])\",\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n         field = models.CharField(\n             default=TextTranslatedEnum.A,\n             choices=[(m.value, m) for m in TextTranslatedEnum],\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n             string,\n@@ -356,9 +740,73 @@ class WriterTests(SimpleTestCase):\n             \"('value-b', migrations.test_writer.TextTranslatedEnum['B'])], \"\n             \"default=migrations.test_writer.TextTranslatedEnum['A'])\",\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n         field = models.CharField(\n             default=BinaryEnum.B, choices=[(m.value, m) for m in BinaryEnum]\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n             string,\n@@ -367,9 +815,73 @@ class WriterTests(SimpleTestCase):\n             \"(b'value-b', migrations.test_writer.BinaryEnum['B'])], \"\n             \"default=migrations.test_writer.BinaryEnum['B'])\",\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n         field = models.IntegerField(\n             default=IntEnum.A, choices=[(m.value, m) for m in IntEnum]\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n             string,\n@@ -379,6 +891,38 @@ class WriterTests(SimpleTestCase):\n             \"default=migrations.test_writer.IntEnum['A'])\",\n         )\n \n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n+\n     def test_serialize_enum_flags(self):\n         self.assertSerializedResultEqual(\n             IntFlagEnum.A,\n@@ -387,6 +931,38 @@ class WriterTests(SimpleTestCase):\n                 {\"import migrations.test_writer\"},\n             ),\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n         self.assertSerializedResultEqual(\n             IntFlagEnum.B,\n             (\n@@ -394,9 +970,73 @@ class WriterTests(SimpleTestCase):\n                 {\"import migrations.test_writer\"},\n             ),\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n         field = models.IntegerField(\n             default=IntFlagEnum.A, choices=[(m.value, m) for m in IntFlagEnum]\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n             string,\n@@ -405,6 +1045,38 @@ class WriterTests(SimpleTestCase):\n             \"(2, migrations.test_writer.IntFlagEnum['B'])], \"\n             \"default=migrations.test_writer.IntFlagEnum['A'])\",\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n         self.assertSerializedResultEqual(\n             IntFlagEnum.A | IntFlagEnum.B,\n             (\n@@ -414,6 +1086,38 @@ class WriterTests(SimpleTestCase):\n             ),\n         )\n \n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n+\n     def test_serialize_choices(self):\n         class TextChoices(models.TextChoices):\n             A = \"A\", \"A value\"\n@@ -433,6 +1137,38 @@ class WriterTests(SimpleTestCase):\n             DateChoices.DATE_1,\n             (\"datetime.date(1969, 7, 20)\", {\"import datetime\"}),\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n         field = models.CharField(default=TextChoices.B, choices=TextChoices)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n@@ -440,12 +1176,76 @@ class WriterTests(SimpleTestCase):\n             \"models.CharField(choices=[('A', 'A value'), ('B', 'B value')], \"\n             \"default='B')\",\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n         field = models.IntegerField(default=IntegerChoices.B, choices=IntegerChoices)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n             string,\n             \"models.IntegerField(choices=[(1, 'One'), (2, 'Two')], default=2)\",\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n         field = models.DateField(default=DateChoices.DATE_2, choices=DateChoices)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n@@ -456,6 +1256,38 @@ class WriterTests(SimpleTestCase):\n             \"default=datetime.date(1969, 11, 19))\",\n         )\n \n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n+\n     def test_serialize_nested_class(self):\n         for nested_cls in [self.NestedEnum, self.NestedChoices]:\n             cls_name = nested_cls.__name__\n@@ -478,14 +1310,110 @@ class WriterTests(SimpleTestCase):\n             uuid_a,\n             (\"uuid.UUID('5c859437-d061-4847-b3f7-e6b78852f8c8')\", {\"import uuid\"}),\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n         self.assertSerializedResultEqual(\n             uuid_b,\n             (\"uuid.UUID('c7853ec1-2ea3-4359-b02d-b54e8f1bcee2')\", {\"import uuid\"}),\n         )\n \n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n+\n         field = models.UUIDField(\n             choices=((uuid_a, \"UUID A\"), (uuid_b, \"UUID B\")), default=uuid_a\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n             string,\n@@ -495,6 +1423,38 @@ class WriterTests(SimpleTestCase):\n             \"default=uuid.UUID('5c859437-d061-4847-b3f7-e6b78852f8c8'))\",\n         )\n \n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n+\n     def test_serialize_pathlib(self):\n         # Pure path objects work in all platforms.\n         self.assertSerializedEqual(pathlib.PurePosixPath())\n@@ -523,6 +1483,38 @@ class WriterTests(SimpleTestCase):\n             string,\n             \"models.FilePathField(path=pathlib.PurePosixPath('/home/user'))\",\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n         self.assertIn(\"import pathlib\", imports)\n \n     def test_serialize_path_like(self):\n@@ -554,13 +1546,109 @@ class WriterTests(SimpleTestCase):\n         self.assertSerializedEqual(\n             datetime.datetime(2014, 1, 1, 1, 1, tzinfo=get_default_timezone())\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n         self.assertSerializedEqual(\n             datetime.datetime(2013, 12, 31, 22, 1, tzinfo=get_fixed_timezone(180))\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n         self.assertSerializedResultEqual(\n             datetime.datetime(2014, 1, 1, 1, 1),\n             (\"datetime.datetime(2014, 1, 1, 1, 1)\", {\"import datetime\"}),\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n         self.assertSerializedResultEqual(\n             datetime.datetime(2012, 1, 1, 1, 1, tzinfo=datetime.timezone.utc),\n             (\n@@ -568,6 +1656,38 @@ class WriterTests(SimpleTestCase):\n                 {\"import datetime\"},\n             ),\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n         self.assertSerializedResultEqual(\n             datetime.datetime(\n                 2012, 1, 1, 2, 1, tzinfo=zoneinfo.ZoneInfo(\"Europe/Paris\")\n@@ -578,12 +1698,76 @@ class WriterTests(SimpleTestCase):\n             ),\n         )\n \n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n+\n     def test_serialize_fields(self):\n         self.assertSerializedFieldEqual(models.CharField(max_length=255))\n         self.assertSerializedResultEqual(\n             models.CharField(max_length=255),\n             (\"models.CharField(max_length=255)\", {\"from django.db import models\"}),\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n         self.assertSerializedFieldEqual(models.TextField(null=True, blank=True))\n         self.assertSerializedResultEqual(\n             models.TextField(null=True, blank=True),\n@@ -593,20 +1777,148 @@ class WriterTests(SimpleTestCase):\n             ),\n         )\n \n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n+\n     def test_serialize_settings(self):\n         self.assertSerializedEqual(\n             SettingsReference(settings.AUTH_USER_MODEL, \"AUTH_USER_MODEL\")\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n         self.assertSerializedResultEqual(\n             SettingsReference(\"someapp.model\", \"AUTH_USER_MODEL\"),\n             (\"settings.AUTH_USER_MODEL\", {\"from django.conf import settings\"}),\n         )\n \n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n+\n     def test_serialize_iterators(self):\n         self.assertSerializedResultEqual(\n             ((x, x * x) for x in range(3)), (\"((0, 0), (1, 1), (2, 4))\", set())\n         )\n \n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n+\n     def test_serialize_compiled_regex(self):\n         \"\"\"\n         Make sure compiled regex can be serialized.\n@@ -624,6 +1936,38 @@ class WriterTests(SimpleTestCase):\n         self.assertEqual(\n             string, \"django.core.validators.RegexValidator(message='hello')\"\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n         self.serialize_round_trip(validator)\n \n         # Test with a compiled regex.\n@@ -633,6 +1977,38 @@ class WriterTests(SimpleTestCase):\n             string,\n             \"django.core.validators.RegexValidator(regex=re.compile('^\\\\\\\\w+$'))\",\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n         self.serialize_round_trip(validator)\n \n         # Test a string regex with flag\n@@ -643,6 +2019,38 @@ class WriterTests(SimpleTestCase):\n             \"django.core.validators.RegexValidator('^[0-9]+$', \"\n             \"flags=re.RegexFlag['DOTALL'])\",\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n         self.serialize_round_trip(validator)\n \n         # Test message and code\n@@ -653,6 +2061,38 @@ class WriterTests(SimpleTestCase):\n             \"django.core.validators.RegexValidator('^[-a-zA-Z0-9_]+$', 'Invalid', \"\n             \"'invalid')\",\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n         self.serialize_round_trip(validator)\n \n         # Test with a subclass.\n@@ -661,6 +2101,38 @@ class WriterTests(SimpleTestCase):\n         self.assertEqual(\n             string, \"django.core.validators.EmailValidator(message='hello')\"\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n         self.serialize_round_trip(validator)\n \n         validator = deconstructible(path=\"migrations.test_writer.EmailValidator\")(\n@@ -671,9 +2143,73 @@ class WriterTests(SimpleTestCase):\n             string, \"migrations.test_writer.EmailValidator(message='hello')\"\n         )\n \n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n+\n         validator = deconstructible(path=\"custom.EmailValidator\")(EmailValidator)(\n             message=\"hello\"\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n         with self.assertRaisesMessage(ImportError, \"No module named 'custom'\"):\n             MigrationWriter.serialize(validator)\n \n@@ -700,6 +2236,38 @@ class WriterTests(SimpleTestCase):\n             models.OrderBy(models.F(\"name\").desc()),\n             name=\"complex_func_index\",\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n         string, imports = MigrationWriter.serialize(index)\n         self.assertEqual(\n             string,\n@@ -711,6 +2279,38 @@ class WriterTests(SimpleTestCase):\n             \"models.OrderBy(models.OrderBy(models.F('name'), descending=True)), \"\n             \"name='complex_func_index')\",\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n         self.assertEqual(imports, {\"from django.db import models\"})\n \n     def test_serialize_empty_nonempty_tuple(self):\n@@ -762,6 +2362,38 @@ class WriterTests(SimpleTestCase):\n                 {\"import migrations.models\"},\n             ),\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n         self.assertSerializedEqual(FoodManager(\"a\", \"b\"))\n         self.assertSerializedEqual(FoodManager(\"x\", \"y\", c=3, d=4))\n \n@@ -772,6 +2404,38 @@ class WriterTests(SimpleTestCase):\n             frozenset(\"cba\"), (\"frozenset(['a', 'b', 'c'])\", set())\n         )\n \n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n+\n     def test_serialize_set(self):\n         self.assertSerializedEqual(set())\n         self.assertSerializedResultEqual(set(), (\"set()\", set()))\n@@ -809,6 +2473,38 @@ class WriterTests(SimpleTestCase):\n             (\"('models.Model', {'from django.db import models'})\", set()),\n         )\n \n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n+\n     def test_simple_migration(self):\n         \"\"\"\n         Tests serializing a simple migration.\n@@ -848,6 +2544,38 @@ class WriterTests(SimpleTestCase):\n                 \"dependencies\": [(\"testapp\", \"some_other_one\")],\n             },\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n         writer = MigrationWriter(migration)\n         output = writer.as_string()\n         # We don't test the output formatting - that's too fragile.\n@@ -887,6 +2615,38 @@ class WriterTests(SimpleTestCase):\n                 \"dependencies\": [],\n             },\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n         writer = MigrationWriter(migration)\n         output = writer.as_string()\n         result = self.safe_exec(output)\n@@ -896,6 +2656,38 @@ class WriterTests(SimpleTestCase):\n             result[\"custom_migration_operations\"].more_operations.TestOperation,\n         )\n \n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n+\n     def test_sorted_dependencies(self):\n         migration = type(\n             \"Migration\",\n@@ -912,6 +2704,38 @@ class WriterTests(SimpleTestCase):\n                 ],\n             },\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n         output = MigrationWriter(migration, include_header=False).as_string()\n         self.assertIn(\n             \"    dependencies = [\\n\"\n@@ -923,6 +2747,38 @@ class WriterTests(SimpleTestCase):\n             output,\n         )\n \n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n+\n     def test_sorted_imports(self):\n         \"\"\"\n         #24155 - Tests ordering of imports.\n@@ -949,6 +2805,38 @@ class WriterTests(SimpleTestCase):\n                 ]\n             },\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n         writer = MigrationWriter(migration)\n         output = writer.as_string()\n         self.assertIn(\n@@ -956,6 +2844,38 @@ class WriterTests(SimpleTestCase):\n             output,\n         )\n \n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n+\n     def test_migration_file_header_comments(self):\n         \"\"\"\n         Test comments at top of file.\n@@ -1001,6 +2921,38 @@ class WriterTests(SimpleTestCase):\n                 ]\n             },\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n         writer = MigrationWriter(migration)\n         output = writer.as_string()\n         self.assertIn(\"from django.db import migrations\\n\", output)\n@@ -1017,6 +2969,38 @@ class WriterTests(SimpleTestCase):\n             \"models.CharField(default=migrations.test_writer.DeconstructibleInstances)\",\n         )\n \n+    def test_serialize_nested_class_method(self):\n+        \"\"\"\n+        Test the serialization of a class method from a nested class\n+        as a default value in a model field.\n+        \"\"\"\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), \"\n+            \"default=migrations.test_writer.Profile.Capability.default, null=True)\",\n+        )\n+\n+        self.assertIn(\"from django.contrib.postgres.fields\", imports)\n+        self.assertIn(\"from django.db import models\", imports)\n+\n     def test_register_serializer(self):\n         class ComplexSerializer(BaseSerializer):\n             def serialize(self):\n@@ -1032,4 +3016,4 @@ class WriterTests(SimpleTestCase):\n         with self.assertRaisesMessage(\n             ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"\n         ):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "django__django-7530": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex a74680b..60f3dbc 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -641,6 +641,30 @@ class MakeMigrationsTests(MigrationTestBase):\n                 allow_migrate.assert_called_with('other', 'migrations', model_name='UnicodeModel')\n                 self.assertEqual(ensure_schema.call_count, 4)\n \n+    def test_makemigrations_correct_app_and_model_combination(self):\n+        \"\"\"\n+        Test that makemigrations calls allow_migrate with the correct app and model combinations.\n+        \"\"\"\n+        apps.register_model('migrations', UnicodeModel)\n+        apps.register_model('migrations2', AnotherModel)\n+\n+        with self.settings(DATABASE_ROUTERS=['migrations.routers.TestRouter']):\n+            with mock.patch.object(TestRouter, 'allow_migrate', return_value=True) as allow_migrate:\n+                call_command('makemigrations', 'migrations', verbosity=0)\n+                call_command('makemigrations', 'migrations2', verbosity=0)\n+\n+            # Check that allow_migrate is called with correct app/model combinations\n+            allow_migrate.assert_any_call('default', 'migrations', model_name='UnicodeModel')\n+            allow_migrate.assert_any_call('default', 'migrations2', model_name='AnotherModel')\n+\n+            # Ensure no invalid (app_label, model) pairs are called\n+            for call_args in allow_migrate.call_args_list:\n+                connection_alias, app_label = call_args[0]\n+                model_name = call_args[1]['model_name']\n+\n+                # Ensure the app_label and model_name correspond correctly\n+                apps.get_app_config(app_label).get_model(model_name)\n+\n     def test_failing_migration(self):\n         # If a migration fails to serialize, it shouldn't generate an empty file. #21280\n         apps.register_model('migrations', UnserializableModel)\n",
  "django__django-9296": "diff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\nindex b9b5fbc..33269ee 100644\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -297,6 +297,50 @@ class PaginationTests(SimpleTestCase):\n         with self.assertRaises(EmptyPage):\n             paginator.get_page(1)\n \n+    def test_paginator_iteration(self):\n+        paginator = Paginator([1, 2, 3], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2], [3]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+\n+    def test_paginator_empty_iteration(self):\n+        paginator = Paginator([], 2)\n+        page_iterator = iter(paginator)\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_paginator_single_page(self):\n+        paginator = Paginator([1, 2], 2)\n+        page_iterator = iter(paginator)\n+        self.assertEqual([1, 2], list(next(page_iterator)))\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_paginator_multiple_pages(self):\n+        paginator = Paginator([1, 2, 3, 4, 5, 6, 7], 3)\n+        page_iterator = iter(paginator)\n+        expected_pages = ([[1, 2, 3], [4, 5, 6], [7]])\n+        for expected in expected_pages:\n+            self.assertEqual(expected, list(next(page_iterator)))\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_paginator_large_page_size(self):\n+        paginator = Paginator([1, 2, 3], 10)\n+        page_iterator = iter(paginator)\n+        self.assertEqual([1, 2, 3], list(next(page_iterator)))\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_paginator_exact_page_size(self):\n+        paginator = Paginator([1, 2, 3, 4], 2)\n+        page_iterator = iter(paginator)\n+        expected_pages = ([[1, 2], [3, 4]])\n+        for expected in expected_pages:\n+            self.assertEqual(expected, list(next(page_iterator)))\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n \n class ModelPaginationTests(TestCase):\n     \"\"\"\n",
  "matplotlib__matplotlib-13989": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5483eef..2687c37 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6359,8 +6359,35 @@ def test_hist_auto_bins():\n \n def test_hist_nan_data():\n     fig, (ax1, ax2) = plt.subplots(2)\n+import matplotlib.pyplot as plt\n+import numpy as np\n \n-    data = [1, 2, 3]\n+def test_hist_range_and_density():\n+    # Original test case\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_density_and_data_distribution():\n+    # Test with different data to ensure range is respected\n+    data = np.random.normal(0.5, 0.1, 1000)\n+    _, bins, _ = plt.hist(data, bins=30, range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_density_different_ranges():\n+    # Test with a different range\n+    data = np.random.rand(1000)\n+    _, bins, _ = plt.hist(data, bins=30, range=(0.2, 0.8), density=True)\n+    assert bins[0] == 0.2\n+    assert bins[-1] == 0.8\n+\n+def test_hist_range_no_density():\n+    # Test with density=False to ensure consistent behavior\n+    data = np.random.rand(1000)\n+    _, bins, _ = plt.hist(data, bins=30, range=(0, 1), density=False)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n     nan_data = data + [np.nan]\n \n     bins, edges, _ = ax1.hist(data)\n@@ -6368,4 +6395,4 @@ def test_hist_nan_data():\n         nanbins, nanedges, _ = ax2.hist(nan_data)\n \n     assert np.allclose(bins, nanbins)\n-    assert np.allclose(edges, nanedges)\n+    assert np.allclose(edges, nanedges)\n",
  "matplotlib__matplotlib-14623": "",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..22246cb 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6961,6 +6961,25 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n \n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear(fig_test, fig_ref):\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+\n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    axs = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs.flat:\n+        ax.plot(x, y)\n+\n+    axs = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n+\n def test_shared_axes_retick():\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n \n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "diff --git a/lib/matplotlib/tests/test_category.py b/lib/matplotlib/tests/test_category.py\nindex 40c4dcf..fd277b7 100644\n--- a/lib/matplotlib/tests/test_category.py\n+++ b/lib/matplotlib/tests/test_category.py\n@@ -311,4 +311,24 @@ def test_hist():\n     fig, ax = plt.subplots()\n     n, bins, patches = ax.hist(['a', 'b', 'a', 'c', 'ff'])\n     assert n.shape == (10,)\n-    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n+\n+def test_no_deprecation_on_empty_data_more_cases():\n+    \"\"\"Additional test to ensure no deprecation warnings or errors \n+    occur with empty data on category axis.\n+    \"\"\"\n+    import matplotlib.pyplot as plt\n+    from matplotlib.testing.decorators import check_figures_equal\n+\n+    @check_figures_equal(extensions=[\"png\"])\n+    def _test(fig_test, fig_ref):\n+        ax_test = fig_test.add_subplot()\n+        ax_ref = fig_ref.add_subplot()\n+\n+        ax_test.xaxis.update_units([\"a\", \"b\"])\n+        ax_test.plot([], [])  # Should not raise warnings or errors\n+\n+        ax_ref.xaxis.update_units([\"a\", \"b\"])\n+        ax_ref.plot([], [])  # Control case\n+\n+    _test()\n+    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n",
  "matplotlib__matplotlib-22865": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex 2c28713..4249bfd 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -919,7 +919,38 @@ def test_proportional_colorbars():\n             fig.colorbar(CS3, spacing=spacings[j], ax=axs[i, j])\n \n \n-def test_negative_boundarynorm():\n+@pytest.mark.parametrize(\"extend, coloroffset, expected_segments\", [\n+    ('both', 1, [\n+        np.array([[0., 0.], [0., 1.]]), \n+        np.array([[1., 0.], [1., 1.]]),\n+        np.array([[2., 0.], [2., 1.]])\n+    ]),\n+    ('min', 0, [\n+        np.array([[0., 0.], [0., 1.]]), \n+        np.array([[1., 0.], [1., 1.]])\n+    ]),\n+    ('max', 0, [\n+        np.array([[1., 0.], [1., 1.]]), \n+        np.array([[2., 0.], [2., 1.]])\n+    ]),\n+    ('neither', -1, [\n+        np.array([[1., 0.], [1., 1.]])\n+    ])\n+])\n+def test_colorbar_extend_drawedges(extend, coloroffset, expected_segments):\n+    cmap = plt.get_cmap(\"viridis\")\n+    bounds = np.arange(3)\n+    nb_colors = len(bounds) + coloroffset\n+    colors = cmap(np.linspace(100, 255, nb_colors).astype(int))\n+    cmap, norm = mcolors.from_levels_and_colors(bounds, colors, extend=extend)\n+\n+    plt.figure(figsize=(5, 1))\n+    ax = plt.subplot(111)\n+    cbar = mpl.colorbar.ColorbarBase(ax, cmap=cmap, norm=norm, orientation='horizontal', drawedges=True)\n+    \n+    # Verify that the segments match expected results\n+    result_segments = cbar.dividers.get_segments()\n+    assert np.all(np.equal(result_segments, expected_segments))\n     fig, ax = plt.subplots(figsize=(1, 3))\n     cmap = plt.get_cmap(\"viridis\")\n \n",
  "matplotlib__matplotlib-23299": "",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..428290a 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -15,6 +15,7 @@ from matplotlib.patches import Circle\n \n import matplotlib.pyplot as plt\n import numpy as np\n+from matplotlib.testing.decorators import check_figures_equal\n \n \n mpl3d_image_comparison = functools.partial(\n@@ -28,7 +29,19 @@ def test_aspect_equal_error():\n         ax.set_aspect('equal')\n \n \n-@mpl3d_image_comparison(['bar3d.png'])\n+@check_figures_equal(extensions=[\"png\"])\n+def test_set_visible_3d(fig_test, fig_ref):\n+    ax1 = fig_test.add_subplot(121, projection='3d')\n+    ax1.scatter(1, 1, 1)\n+    ax1.set_visible(False)\n+    \n+    ax2 = fig_ref.add_subplot(121, projection='3d')\n+    ax2.scatter(1, 1, 1)\n+    ax2.set_visible(True)\n+    \n+    ax3 = fig_ref.add_subplot(122, projection='3d')\n+    ax3.scatter(1, 1, 1, c='r')\n+    ax3.set_visible(True)\n def test_bar3d():\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..e76a9da 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -156,9 +156,32 @@ def test_negative_rect():\n     neg_vertices = Rectangle((0, 0), -3, -2).get_verts()[:-1]\n     assert_array_equal(np.roll(neg_vertices, 2, 0), pos_vertices)\n \n+from matplotlib.patches import Rectangle\n+import matplotlib.pyplot as plt\n+import numpy as np\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=['png'])\n+def test_dash_offset_patch_draw_complex(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n+\n+    loc = (0.1, 0.1)\n+    width, height = (0.8, 0.8)\n \n-@image_comparison(['clip_to_bbox'])\n-def test_clip_to_bbox():\n+    # Reference rectangles with different dash offsets\n+    rect_ref = Rectangle(loc, width, height, linewidth=3, edgecolor='b', linestyle=(0, [5, 5]))\n+    rect_ref2 = Rectangle((0.3, 0.3), width, height, linewidth=3, edgecolor='r', linestyle=(5, [5, 5]))\n+    \n+    ax_ref.add_patch(rect_ref)\n+    ax_ref.add_patch(rect_ref2)\n+\n+    # Test rectangles with the same dash patterns as references\n+    rect_test = Rectangle(loc, width, height, linewidth=3, edgecolor='b', linestyle=(0, [5, 5]))\n+    rect_test2 = Rectangle((0.3, 0.3), width, height, linewidth=3, edgecolor='r', linestyle=(5, [5, 5]))\n+    \n+    ax_test.add_patch(rect_test)\n+    ax_test.add_patch(rect_test2)\n     fig, ax = plt.subplots()\n     ax.set_xlim([-18, 20])\n     ax.set_ylim([-150, 100])\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..277589c 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2866,9 +2866,26 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n-\n-@image_comparison(['stackplot_test_baseline'], remove_text=True)\n-def test_stackplot_baseline():\n+def test_stackplot_with_CN_colors():\n+    import matplotlib.pyplot as plt\n+    import numpy as np\n+    from matplotlib.patches import Rectangle\n+    \n+    # Create some test data\n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    \n+    # Create a figure and axis\n+    fig, ax = plt.subplots()\n+    \n+    # Plot using CN colors\n+    ax.plot([1, 3], [1, 3], color='C0')\n+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))\n+    ax.stackplot([1, 2, 3], my_data, colors=['C2', 'C3', 'C4'])\n+    \n+    # Assert that the cycler has not changed\n+    original_colors = ['C0', 'C1', 'C2', 'C3', 'C4']\n+    current_colors = [next(ax._get_lines.prop_cycler)['color'] for _ in range(5)]\n+    assert original_colors == current_colors\n     np.random.seed(0)\n \n     def layers(n, m):\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "",
  "matplotlib__matplotlib-24627": "",
  "matplotlib__matplotlib-24637": "diff --git a/lib/matplotlib/tests/test_backend_svg.py b/lib/matplotlib/tests/test_backend_svg.py\nindex 8817464..08acf8b 100644\n--- a/lib/matplotlib/tests/test_backend_svg.py\n+++ b/lib/matplotlib/tests/test_backend_svg.py\n@@ -577,13 +577,127 @@ def test_svg_font_string(font_str, include_generic):\n     plt.rcParams[f\"font.{generic}\"] = rest\n     plt.rcParams[\"font.size\"] = size\n     plt.rcParams[\"svg.fonttype\"] = \"none\"\n+from io import BytesIO\n+import numpy as np\n+from matplotlib.offsetbox import (OffsetImage, AnnotationBbox)\n+\n+def test_annotationbbox_gid():\n+    # Test that object gid appears in the AnnotationBbox in output svg.\n+    fig, ax = plt.subplots()\n+    arr_img = np.ones((32, 32))\n+    xy = (0.3, 0.55)\n+\n+    imagebox = OffsetImage(arr_img, zoom=0.1)\n+    imagebox.image.axes = ax\n+\n+    ab = AnnotationBbox(imagebox, xy,\n+                        xybox=(120., -80.),\n+                        xycoords='data',\n+                        boxcoords=\"offset points\",\n+                        pad=0.5,\n+                        arrowprops=dict(\n+                            arrowstyle=\"->\",\n+                            connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                        )\n+    ab.set_gid(\"a test for issue 20044\")\n+    ax.add_artist(ab)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n+\n+    expected = '<g id=\"a test for issue 20044\">'\n+    assert expected in buf\n+\n+def test_annotationbbox_no_gid():\n+    # Test that no gid is present when not set.\n+    fig, ax = plt.subplots()\n+    arr_img = np.ones((32, 32))\n+    xy = (0.3, 0.55)\n+\n+    imagebox = OffsetImage(arr_img, zoom=0.1)\n+    imagebox.image.axes = ax\n+\n+    ab = AnnotationBbox(imagebox, xy,\n+                        xybox=(120., -80.),\n+                        xycoords='data',\n+                        boxcoords=\"offset points\",\n+                        pad=0.5,\n+                        arrowprops=dict(\n+                            arrowstyle=\"->\",\n+                            connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                        )\n+    ax.add_artist(ab)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n \n+    unexpected = '<g id='\n+    assert unexpected not in buf\n     fig, ax = plt.subplots()\n     if generic == \"sans-serif\":\n         generic_options = [\"sans\", \"sans-serif\", \"sans serif\"]\n     else:\n         generic_options = [generic]\n+from io import BytesIO\n+import numpy as np\n+from matplotlib.offsetbox import (OffsetImage, AnnotationBbox)\n+\n+def test_annotationbbox_gid():\n+    # Test that object gid appears in the AnnotationBbox in output svg.\n+    fig, ax = plt.subplots()\n+    arr_img = np.ones((32, 32))\n+    xy = (0.3, 0.55)\n+\n+    imagebox = OffsetImage(arr_img, zoom=0.1)\n+    imagebox.image.axes = ax\n+\n+    ab = AnnotationBbox(imagebox, xy,\n+                        xybox=(120., -80.),\n+                        xycoords='data',\n+                        boxcoords=\"offset points\",\n+                        pad=0.5,\n+                        arrowprops=dict(\n+                            arrowstyle=\"->\",\n+                            connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                        )\n+    ab.set_gid(\"a test for issue 20044\")\n+    ax.add_artist(ab)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n+\n+    expected = '<g id=\"a test for issue 20044\">'\n+    assert expected in buf\n+\n+def test_annotationbbox_no_gid():\n+    # Test that no gid is present when not set.\n+    fig, ax = plt.subplots()\n+    arr_img = np.ones((32, 32))\n+    xy = (0.3, 0.55)\n+\n+    imagebox = OffsetImage(arr_img, zoom=0.1)\n+    imagebox.image.axes = ax\n+\n+    ab = AnnotationBbox(imagebox, xy,\n+                        xybox=(120., -80.),\n+                        xycoords='data',\n+                        boxcoords=\"offset points\",\n+                        pad=0.5,\n+                        arrowprops=dict(\n+                            arrowstyle=\"->\",\n+                            connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                        )\n+    ax.add_artist(ab)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n \n+    unexpected = '<g id='\n+    assert unexpected not in buf\n     for generic_name in generic_options:\n         # test that fallback works\n         ax.text(0.5, 0.5, \"There are \u51e0\u4e2a\u6c49\u5b57 in between!\",\n@@ -592,11 +706,125 @@ def test_svg_font_string(font_str, include_generic):\n         ax.text(0.5, 0.1, \"There are \u51e0\u4e2a\u6c49\u5b57 in between!\",\n                 family=[explicit, *rest, generic_name], ha=\"center\")\n     ax.axis(\"off\")\n+from io import BytesIO\n+import numpy as np\n+from matplotlib.offsetbox import (OffsetImage, AnnotationBbox)\n+\n+def test_annotationbbox_gid():\n+    # Test that object gid appears in the AnnotationBbox in output svg.\n+    fig, ax = plt.subplots()\n+    arr_img = np.ones((32, 32))\n+    xy = (0.3, 0.55)\n+\n+    imagebox = OffsetImage(arr_img, zoom=0.1)\n+    imagebox.image.axes = ax\n+\n+    ab = AnnotationBbox(imagebox, xy,\n+                        xybox=(120., -80.),\n+                        xycoords='data',\n+                        boxcoords=\"offset points\",\n+                        pad=0.5,\n+                        arrowprops=dict(\n+                            arrowstyle=\"->\",\n+                            connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                        )\n+    ab.set_gid(\"a test for issue 20044\")\n+    ax.add_artist(ab)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n+\n+    expected = '<g id=\"a test for issue 20044\">'\n+    assert expected in buf\n+\n+def test_annotationbbox_no_gid():\n+    # Test that no gid is present when not set.\n+    fig, ax = plt.subplots()\n+    arr_img = np.ones((32, 32))\n+    xy = (0.3, 0.55)\n+\n+    imagebox = OffsetImage(arr_img, zoom=0.1)\n+    imagebox.image.axes = ax\n+\n+    ab = AnnotationBbox(imagebox, xy,\n+                        xybox=(120., -80.),\n+                        xycoords='data',\n+                        boxcoords=\"offset points\",\n+                        pad=0.5,\n+                        arrowprops=dict(\n+                            arrowstyle=\"->\",\n+                            connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                        )\n+    ax.add_artist(ab)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n \n+    unexpected = '<g id='\n+    assert unexpected not in buf\n     with BytesIO() as fd:\n         fig.savefig(fd, format=\"svg\")\n         buf = fd.getvalue()\n+from io import BytesIO\n+import numpy as np\n+from matplotlib.offsetbox import (OffsetImage, AnnotationBbox)\n+\n+def test_annotationbbox_gid():\n+    # Test that object gid appears in the AnnotationBbox in output svg.\n+    fig, ax = plt.subplots()\n+    arr_img = np.ones((32, 32))\n+    xy = (0.3, 0.55)\n+\n+    imagebox = OffsetImage(arr_img, zoom=0.1)\n+    imagebox.image.axes = ax\n+\n+    ab = AnnotationBbox(imagebox, xy,\n+                        xybox=(120., -80.),\n+                        xycoords='data',\n+                        boxcoords=\"offset points\",\n+                        pad=0.5,\n+                        arrowprops=dict(\n+                            arrowstyle=\"->\",\n+                            connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                        )\n+    ab.set_gid(\"a test for issue 20044\")\n+    ax.add_artist(ab)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n+\n+    expected = '<g id=\"a test for issue 20044\">'\n+    assert expected in buf\n+\n+def test_annotationbbox_no_gid():\n+    # Test that no gid is present when not set.\n+    fig, ax = plt.subplots()\n+    arr_img = np.ones((32, 32))\n+    xy = (0.3, 0.55)\n+\n+    imagebox = OffsetImage(arr_img, zoom=0.1)\n+    imagebox.image.axes = ax\n+\n+    ab = AnnotationBbox(imagebox, xy,\n+                        xybox=(120., -80.),\n+                        xycoords='data',\n+                        boxcoords=\"offset points\",\n+                        pad=0.5,\n+                        arrowprops=dict(\n+                            arrowstyle=\"->\",\n+                            connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                        )\n+    ax.add_artist(ab)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n \n+    unexpected = '<g id='\n+    assert unexpected not in buf\n     tree = xml.etree.ElementTree.fromstring(buf)\n     ns = \"http://www.w3.org/2000/svg\"\n     text_count = 0\n",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..4464f73 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -20,6 +20,20 @@ import matplotlib.scale as mscale\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n \n \n+import numpy as np\n+import pytest\n+from numpy.testing import assert_array_equal\n+import matplotlib.pyplot as plt\n+import matplotlib as mpl\n+\n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.float16, float])\n+def test_no_deprecation_warnings_for_colormap(dtype):\n+    cm = mpl.colormaps[\"viridis\"]\n+    with pytest.warns(None) as record:\n+        cm(dtype(0))\n+    assert len(record) == 0, f\"Expected no warnings, but got: {record}\"\n+\n+...\n @pytest.mark.parametrize('N, result', [\n     (5, [1, .6, .2, .1, 0]),\n     (2, [1, 0]),\n",
  "matplotlib__matplotlib-25122": "diff --git a/lib/matplotlib/tests/test_mlab.py b/lib/matplotlib/tests/test_mlab.py\nindex 51d0c35..7d94455 100644\n--- a/lib/matplotlib/tests/test_mlab.py\n+++ b/lib/matplotlib/tests/test_mlab.py\n@@ -622,8 +622,33 @@ class TestSpectral:\n         # these should not be almost equal\n         with pytest.raises(AssertionError):\n             assert_allclose(spec_b, spec_c, atol=1e-08)\n-\n-    def test_psd_window_hanning_detrend_linear(self):\n+    def test_psd_window_flattop(self):\n+        # Test using a flattop window, which includes negative values\n+        from scipy import signal\n+        NFFT = 512\n+        window = signal.windows.flattop(NFFT)\n+\n+        # Generate a sample data array\n+        x = np.random.randn(NFFT*10)\n+\n+        # Calculate PSD using the flattop window\n+        spec, fsp = mlab.psd(x=x,\n+                             NFFT=NFFT,\n+                             Fs=self.Fs,\n+                             noverlap=0,\n+                             sides=self.sides,\n+                             window=window)\n+\n+        # Calculate the expected PSD without the np.abs in the window correction\n+        expected_spec, fsp_expected = mlab.psd(x=x,\n+                                               NFFT=NFFT,\n+                                               Fs=self.Fs,\n+                                               noverlap=0,\n+                                               sides=self.sides,\n+                                               window=window)\n+\n+        # Validate that the results are close\n+        assert_allclose(spec*window.sum()**2, expected_spec*self.Fs*(window**2).sum(), atol=1e-08)\n         if self.NFFT_density is None:\n             return\n         ydata = np.arange(self.NFFT_density)\n",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..6b9bc66 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,6 +7801,37 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+def test_xaxis_offsetText_color():\n+    plt.rcParams['xtick.labelcolor'] = 'blue'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.xaxis.offsetText.get_color() == 'blue'\n+\n+    plt.rcParams['xtick.color'] = 'yellow'\n+    plt.rcParams['xtick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.xaxis.offsetText.get_color() == 'yellow'\n+\n+\n+def test_yaxis_offsetText_color():\n+    plt.rcParams['ytick.labelcolor'] = 'green'\n+    ax = plt.axes()\n+    ax.plot([1e9, 2e9, 3e9])\n+    assert ax.yaxis.offsetText.get_color() == 'green'\n+\n+    plt.rcParams['ytick.color'] = 'red'\n+    plt.rcParams['ytick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.plot([1e9, 2e9, 3e9])\n+    assert ax.yaxis.offsetText.get_color() == 'red'\n+\n+\n+import pytest\n+import matplotlib.pyplot as plt\n+import matplotlib.font_manager as mfont_manager\n+import numpy as np\n+\n def test_ytickcolor_is_not_yticklabelcolor():\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..2c9f393 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -89,8 +90,26 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n-\n @mpl.style.context(\"default\")\n+def test_pickle_figure_with_draggable_legend():\n+    fig, ax = plt.subplots()\n+    ax.plot([0, 1, 2], [10, 20, 15], label='Test Line')\n+    leg = ax.legend()\n+    leg.set_draggable(True)  # Set the legend to be draggable\n+\n+    # Attempt to pickle the figure\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+    \n+    # Ensure no reference to GUI-specific objects in pickle\n+    import pickletools\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)], \\\n+        \"Pickle stream should not contain FigureCanvasAgg\"\n+\n+    # Unpickle and ensure it loads correctly\n+    loaded_fig = pickle.loads(pkl)\n+    loaded_fig.canvas.draw()  # Test that the loaded figure can be drawn\n+\n+    plt.close(loaded_fig)\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..6ed3df1 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -43,8 +43,34 @@ def test_simple():\n     ax.set_yscale('log')\n     pickle.dump(fig, BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+import pickle\n+from io import BytesIO\n+\n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n \n-def _generate_complete_test_figure(fig_ref):\n+    # Call align_labels which previously caused issues with pickling\n+    fig.align_labels()\n+\n+    # Test pickling\n+    try:\n+        pickle.dumps(fig)\n+        print(\"Pickling successful\")\n+    except Exception as e:\n+        print(f\"Pickling failed: {e}\")\n     fig_ref.set_size_inches((10, 6))\n     plt.figure(fig_ref)\n \n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..4513b11 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -991,8 +991,45 @@ def test_hexbin_linear():\n     ax.hexbin(x, y, gridsize=(10, 5), marginals=True,\n               reduce_C_function=np.sum)\n \n+from matplotlib.testing.decorators import check_figures_equal\n \n-def test_hexbin_log_clim():\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_behavior_upon_C_parameter(fig_test, fig_ref):\n+    # see: gh:12926\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # without C parameter\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # with C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=[1] * len(X),\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n     x, y = np.arange(200).reshape((2, 100))\n     fig, ax = plt.subplots()\n     h = ax.hexbin(x, y, bins='log', vmin=2, vmax=100)\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex 700190c..118ef1f 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -99,8 +99,56 @@ def test_contour_Nlevels():\n     cs2 = ax.contour(z, levels=5)\n     assert (cs1.levels == cs2.levels).all()\n \n+from matplotlib.testing.decorators import check_figures_equal\n+from matplotlib import pyplot as plt\n+import numpy as np\n \n-@pytest.mark.parametrize(\"split_collections\", [False, True])\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths_empty(fig_test, fig_ref):\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+    cs_test = ax_test.contour(np.array([[0, 1], [1, 2]]))\n+    cs_ref = ax_ref.contour(np.array([[0, 1], [1, 2]]))\n+    \n+    # Set paths to empty\n+    cs_test.set_paths([])\n+    \n+    assert len(cs_test.collections[0].get_paths()) == 0\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths_transform(fig_test, fig_ref):\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+    cs_test = ax_test.contour(np.array([[0, 1], [1, 2]]))\n+    cs_ref = ax_ref.contour(np.array([[0, 1], [1, 2]]))\n+    \n+    paths = cs_ref.get_paths()\n+    # Apply a transformation, for instance, a simple translation\n+    for path in paths:\n+        path.vertices += np.array([1, 1])\n+    \n+    cs_test.set_paths(paths)\n+    \n+    # The transformation should be reflected in the test figure\n+    paths_test = cs_test.get_paths()\n+    for path, path_test in zip(paths, paths_test):\n+        np.testing.assert_array_almost_equal(path.vertices, path_test.vertices)\n+\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths_different_levels(fig_test, fig_ref):\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+    cs_test = ax_test.contour(np.array([[0, 1], [1, 2]]), levels=3)\n+    cs_ref = ax_ref.contour(np.array([[0, 1], [1, 2]]), levels=5)\n+    \n+    # Even if levels are different, paths can still be set\n+    cs_test.set_paths(cs_ref.get_paths())\n+    \n+    paths_test = cs_test.get_paths()\n+    paths_ref = cs_ref.get_paths()\n+    for path_test, path_ref in zip(paths_test, paths_ref):\n+        np.testing.assert_array_almost_equal(path_test.vertices, path_ref.vertices)\n @image_comparison(['contour_manual_labels'], remove_text=True, style='mpl20', tol=0.26)\n def test_contour_manual_labels(split_collections):\n     x, y = np.meshgrid(np.arange(0, 10), np.arange(0, 10))\n",
  "mwaskom__seaborn-3069": "",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..5c4453f 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -244,6 +244,25 @@ def test_default_static_max_age(app):\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n \n+def test_empty_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"\", __name__)\n+\n+def test_whitespace_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"   \", __name__)\n+\n+def test_valid_name_allowed(app, client):\n+    bp = flask.Blueprint(\"valid_name\", __name__)\n+    assert bp.name == \"valid_name\"\n+\n+def test_special_character_name_allowed(app, client):\n+    bp = flask.Blueprint(\"name_with_chars_123\", __name__)\n+    assert bp.name == \"name_with_chars_123\"\n+\n+import pytest\n+import flask\n+\n def test_templates_list(test_apps):\n     from blueprintapp import app\n \n",
  "psf__requests-1142": "",
  "psf__requests-1724": "",
  "psf__requests-1766": "",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..f5e52c6 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,6 +81,10 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://.example.com'),  # Test for invalid label at the beginning\n+            (InvalidURL, 'http://example..com'),  # Test for consecutive dots in the domain\n+            (InvalidURL, 'http://example.com..'), # Test for trailing dots in the domain\n+            (InvalidURL, 'http://.com'),          # Test for only TLD with an initial dot\n         ))\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..f9df468 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2308,8 +2308,28 @@ class TestAsCompatibleData:\n         orig = Variable(dims=(\"x\"), data=array, attrs={\"foo\": \"bar\"})\n         assert isinstance(orig._data, CustomIndexable)\n \n-\n-def test_raise_no_warning_for_nan_in_binary_ops():\n+import numpy as np\n+import pytest\n+from xarray import DataArray\n+\n+# Test case for the issue described: coercing types on objects with a values property\n+def test_variable_setitem_no_coercion_on_values_property():\n+    # Create two DataArrays with an object dtype to store arbitrary objects\n+    good_indexed = DataArray([None], dims=\"dim_0\", dtype=object)\n+    bad_indexed = DataArray([None], dims=\"dim_0\", dtype=object)\n+\n+    class HasValues:\n+        values = 5\n+\n+    # Assign a set object, which should not be coerced\n+    good_indexed.loc[{'dim_0': 0}] = set()\n+    # Verify the set object is stored correctly\n+    assert isinstance(good_indexed.values[0], set)\n+\n+    # Assign an object with a 'values' property\n+    bad_indexed.loc[{'dim_0': 0}] = HasValues()\n+    # Verify the object with 'values' property is stored correctly, not coerced to its 'values' attribute\n+    assert isinstance(bad_indexed.values[0], HasValues)\n     with pytest.warns(None) as record:\n         Variable(\"x\", [1, 2, np.NaN]) > 0\n     assert len(record) == 0\n",
  "pydata__xarray-3095": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex d6a4400..3151660 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -2068,6 +2068,18 @@ class TestDataset:\n                 assert v0 is not v1\n \n             assert data.attrs['Test'] is not copied.attrs['Test']\n+    \n+    def test_copy_unicode_indices(self):\n+        ds = xr.Dataset(\n+            coords={'x': ['foo'], 'y': ('x', ['bar'])},\n+            data_vars={'z': ('x', ['baz'])}\n+        )\n+\n+        copied_shallow = ds.copy(deep=False)\n+        copied_deep = ds.copy(deep=True)\n+\n+        assert copied_shallow.coords['x'].dtype.kind == 'U'\n+        assert copied_deep.coords['x'].dtype.kind == 'U'\n \n     def test_copy_with_data(self):\n         orig = create_test_data()\n",
  "pydata__xarray-3151": "",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..9990e6d 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2309,8 +2309,24 @@ class TestDataArray:\n                     self.dv.values, np.array(q) * 100, axis=axis\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n+    def test_quantile_keep_attrs(self):\n+        import xarray as xr\n+        from collections import OrderedDict\n \n-    def test_reduce_keep_attrs(self):\n+        # Create a DataArray with attributes\n+        da = xr.DataArray([0, 0], dims=\"x\", attrs={'units': 'K'})\n+\n+        # Check quantile with keep_attrs=True\n+        out = da.quantile(0.9, dim='x', keep_attrs=True)\n+        assert out.attrs == {'units': 'K'}, \"Attributes should be retained when keep_attrs=True.\"\n+\n+        # Check quantile with keep_attrs=False\n+        out_no_attrs = da.quantile(0.9, dim='x', keep_attrs=False)\n+        assert out_no_attrs.attrs == OrderedDict(), \"Attributes should not be retained when keep_attrs=False.\"\n+\n+        # Check quantile without specifying keep_attrs (default is False)\n+        out_default = da.quantile(0.9, dim='x')\n+        assert out_default.attrs == OrderedDict(), \"Attributes should not be retained by default (keep_attrs=False).\"\n         # Test dropped attrs\n         vm = self.va.mean()\n         assert len(vm.attrs) == 0\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..b8dc082 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import pytest\n \n@@ -159,6 +160,24 @@ class TestMergeMethod:\n         with raises_regex(ValueError, \"should be coordinates or not\"):\n             data.merge(data.reset_coords())\n \n+    def test_merge_dataarray(self):\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+        assert_identical(ds.merge(da), xr.merge([ds, da]))\n+\n+    def test_merge_dataarray_with_different_dimensions(self):\n+        ds = xr.Dataset({\"a\": (\"x\", [1, 2, 3])})\n+        da = xr.DataArray(data=[4, 5, 6], dims=\"x\", name=\"b\")\n+        expected = xr.Dataset({\"a\": (\"x\", [1, 2, 3]), \"b\": (\"x\", [4, 5, 6])})\n+        assert_identical(ds.merge(da), xr.merge([ds, da]))\n+        assert_identical(ds.merge(da), expected)\n+\n+    def test_merge_dataarray_with_conflicting_names(self):\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"a\")\n+        with pytest.raises(xr.MergeError):\n+            ds.merge(da)\n+\n     def test_merge_broadcast_equals(self):\n         ds1 = xr.Dataset({\"x\": 0})\n         ds2 = xr.Dataset({\"x\": (\"y\", [0, 0])})\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "diff --git a/xarray/tests/test_duck_array_ops.py b/xarray/tests/test_duck_array_ops.py\nindex 0c63f0f..0b2ffeb 100644\n--- a/xarray/tests/test_duck_array_ops.py\n+++ b/xarray/tests/test_duck_array_ops.py\n@@ -592,6 +592,13 @@ def test_min_count(dim_num, dtype, dask, func, aggdim):\n     actual = getattr(da, func)(dim=aggdim, skipna=True, min_count=min_count)\n     expected = series_reduce(da, func, skipna=True, dim=aggdim, min_count=min_count)\n     assert_allclose(actual, expected)\n+\n+    # Test for multi-dimensional array with min_count\n+    da_multi_dim = construct_dataarray(dim_num, dtype, contains_nan=True, dask=dask)\n+    actual_multi_dim = getattr(da_multi_dim, func)(dim=[\"x\", \"y\", \"z\"], skipna=True, min_count=min_count)\n+    expected_multi_dim = series_reduce(da_multi_dim, func, skipna=True, dim=[\"x\", \"y\", \"z\"], min_count=min_count)\n+    assert_allclose(actual_multi_dim, expected_multi_dim)\n+    assert_dask_array(actual_multi_dim, dask)\n     assert_dask_array(actual, dask)\n \n \n@@ -603,8 +610,15 @@ def test_min_count_dataset(func):\n     expected = getattr(ds[\"var1\"], func)(dim=\"x\", skipna=True, min_count=3)\n     assert_allclose(actual, expected)\n \n+    # Test for multi-dimensional array with min_count\n+    da_multi_dim = construct_dataarray(dim_num, dtype, contains_nan=True, dask=dask)\n+    actual_multi_dim = getattr(da_multi_dim, func)(dim=[\"x\", \"y\", \"z\"], skipna=True, min_count=min_count)\n+    expected_multi_dim = series_reduce(da_multi_dim, func, skipna=True, dim=[\"x\", \"y\", \"z\"], min_count=min_count)\n+    assert_allclose(actual_multi_dim, expected_multi_dim)\n+    assert_dask_array(actual_multi_dim, dask)\n \n-@pytest.mark.parametrize(\"dtype\", [float, int, np.float32, np.bool_])\n+\n+@pytest.mark.parametrize(\"dtype\", [float, int, np.float32, np.bool_, np.complex128])\n @pytest.mark.parametrize(\"dask\", [False, True])\n @pytest.mark.parametrize(\"func\", [\"sum\", \"prod\"])\n def test_multiple_dims(dtype, dask, func):\n@@ -616,6 +630,13 @@ def test_multiple_dims(dtype, dask, func):\n     expected = getattr(getattr(da, func)(\"x\"), func)(\"y\")\n     assert_allclose(actual, expected)\n \n+    # Test for multi-dimensional array with min_count\n+    da_multi_dim = construct_dataarray(dim_num, dtype, contains_nan=True, dask=dask)\n+    actual_multi_dim = getattr(da_multi_dim, func)(dim=[\"x\", \"y\", \"z\"], skipna=True, min_count=min_count)\n+    expected_multi_dim = series_reduce(da_multi_dim, func, skipna=True, dim=[\"x\", \"y\", \"z\"], min_count=min_count)\n+    assert_allclose(actual_multi_dim, expected_multi_dim)\n+    assert_dask_array(actual_multi_dim, dask)\n+\n \n def test_docs():\n     # with min_count\n",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..1f84419 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -109,7 +109,35 @@ class TestMergeFunction:\n             expected.attrs = expected_attrs\n             assert actual.identical(expected)\n \n-    def test_merge_dicts_simple(self):\n+    def test_merge_attrs_override_copy(self):\n+        ds1 = xr.Dataset(attrs={\"x\": 0})\n+        ds2 = xr.Dataset(attrs={\"x\": 1})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"x\"] = 2\n+        assert ds1.attrs[\"x\"] == 0\n+        assert ds3.attrs[\"x\"] == 2\n+\n+    def test_merge_attrs_override_copy_multiple(self):\n+        ds1 = xr.Dataset(attrs={\"x\": 0, \"y\": 10})\n+        ds2 = xr.Dataset(attrs={\"x\": 1, \"y\": 20})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"x\"] = 2\n+        ds3.attrs[\"y\"] = 30\n+        assert ds1.attrs[\"x\"] == 0\n+        assert ds1.attrs[\"y\"] == 10\n+        assert ds2.attrs[\"x\"] == 1\n+        assert ds2.attrs[\"y\"] == 20\n+        assert ds3.attrs[\"x\"] == 2\n+        assert ds3.attrs[\"y\"] == 30\n+\n+    def test_merge_attrs_override_no_attrs(self):\n+        ds1 = xr.Dataset()\n+        ds2 = xr.Dataset(attrs={\"x\": 1})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"x\"] = 2\n+        assert \"x\" not in ds1.attrs\n+        assert ds2.attrs[\"x\"] == 1\n+        assert ds3.attrs[\"x\"] == 2\n         actual = xr.merge([{\"foo\": 0}, {\"bar\": \"one\"}, {\"baz\": 3.5}])\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n         assert actual.identical(expected)\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..1ea8c98 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1921,8 +1921,20 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n+def test_where_keep_attrs() -> None:\n+    \"\"\"Test xr.where with keep_attrs=True to ensure attributes are preserved.\"\"\"\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr_cond\": \"condition_attr\"})\n+    x = xr.DataArray([1, 2], dims=\"x\", attrs={\"attr_x\": \"x_attr\"})\n+    y = xr.DataArray([0, -1], dims=\"x\", attrs={\"attr_y\": \"y_attr\"})\n \n-@pytest.mark.parametrize(\"use_dask\", [True, False])\n+    actual = xr.where(cond, x, y, keep_attrs=True)\n+    expected = xr.DataArray([1, -1], dims=\"x\", attrs={\"attr_x\": \"x_attr\"})\n+\n+    assert_identical(expected, actual)\n+\n+    # Check if the attributes from 'cond' and 'y' are not mixed mistakenly\n+    assert actual.attrs.get(\"attr_cond\") is None\n+    assert actual.attrs.get(\"attr_y\") is None\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n def test_polyval(use_dask, use_datetime) -> None:\n     if use_dask and not has_dask:\n",
  "pydata__xarray-4695": "",
  "pydata__xarray-4966": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex 2dbb0b4..c023e13 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -9,12 +9,24 @@ from xarray.coding import variables\n from xarray.conventions import decode_cf_variable, encode_cf_variable\n \n from . import assert_allclose, assert_equal, assert_identical, requires_dask\n+import numpy as np\n+import pytest\n \n with suppress(ImportError):\n     import dask.array as da\n \n-\n-def test_CFMaskCoder_decode():\n+@pytest.mark.parametrize(\"engine\", [\"netcdf4\", \"pydap\"])\n+def test_opendap_signed_byte_handling(engine):\n+    url = \"https://observations.ipsl.fr/thredds/dodsC/EUREC4A/PRODUCTS/testdata/netcdf_testfiles/test_NC_BYTE_neg.nc\"\n+    ds = xr.open_dataset(url, engine=engine)\n+    \n+    expected_values_netcdf4 = np.array([-128.0, -1.0, 0.0, 1.0, 2.0, np.nan, 127.0])\n+    expected_values_pydap = np.array([128.0, 255.0, 0.0, 1.0, 2.0, np.nan, 127.0])\n+\n+    if engine == \"netcdf4\":\n+        assert np.allclose(ds.coords['test'].values, expected_values_netcdf4, equal_nan=True)\n+    elif engine == \"pydap\":\n+        assert np.allclose(ds.coords['test'].values, expected_values_pydap, equal_nan=True)\n     original = xr.Variable((\"x\",), [0, -1, 1], {\"_FillValue\": -1})\n     expected = xr.Variable((\"x\",), [0, np.nan, 1])\n     coder = variables.CFMaskCoder()\n",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..a5455c5 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1928,6 +1928,13 @@ def test_where_attrs() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n     assert_identical(expected, actual)\n \n+def test_where_scalar_with_keep_attrs() -> None:\n+    # Test where with scalar and keep_attrs=True\n+    cond = xr.DataArray([True, False], dims=\"x\")\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={})\n+    assert_identical(expected, actual)\n+\n \n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n",
  "pydata__xarray-6599": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f1ec005..381ab8f 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -2010,6 +2010,14 @@ def test_where_attrs() -> None:\n             ),\n             id=\"datetime\",\n         ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array([1000, 2000, 3000], dtype=\"timedelta64[ns]\"), dims=\"x\"\n+            ),\n+            xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n+            xr.DataArray([1000.0, 2000.0, 3000.0], dims=\"x\"),\n+            id=\"timedelta\",\n+        ),\n     ],\n )\n def test_polyval(\n",
  "pydata__xarray-6721": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex cab9007..fc403d3 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -1071,7 +1071,12 @@ class TestDataset:\n         ds.set_coords(\"var1\")\n         ds.drop_vars(\"var1\")\n \n-    def test_isel(self) -> None:\n+    def test_chunks_does_not_load_data(self) -> None:\n+        # Test case to verify if accessing chunks on zarr-backed xarray loads entire array\n+        url = \"https://ncsa.osn.xsede.org/Pangeo/pangeo-forge/swot_adac/FESOM/surf/fma.zarr\"\n+        ds = xr.open_dataset(url, engine='zarr') # note that ds is not chunked but still uses lazy loading\n+        # Ensure that inspecting the chunks property does not cause data loading\n+        assert ds.chunks == {}\n         data = create_test_data()\n         slicers = {\"dim1\": slice(None, None, 2), \"dim2\": slice(0, 2)}\n         ret = data.isel(**slicers)\n",
  "pydata__xarray-6744": "diff --git a/xarray/tests/test_rolling.py b/xarray/tests/test_rolling.py\nindex 0a9ef75..f355557 100644\n--- a/xarray/tests/test_rolling.py\n+++ b/xarray/tests/test_rolling.py\n@@ -27,6 +27,16 @@ pytestmark = [\n \n class TestDataArrayRolling:\n     @pytest.mark.parametrize(\"da\", (1, 2), indirect=True)\n+    @pytest.mark.parametrize(\"center\", [True, False])\n+    @pytest.mark.parametrize(\"size\", [3])\n+    def test_rolling_manual_iteration_center(self, da, center, size) -> None:\n+        my_data = xr.DataArray(np.arange(1, 10), dims=\"x\")\n+        rolling_obj = my_data.rolling(x=size, center=center)\n+\n+        result_manual = [window.mean().values.item() if window.count() >= rolling_obj.min_periods else np.nan for label, window in rolling_obj]\n+        result_auto = my_data.rolling(x=size, center=center).mean().values\n+\n+        np.testing.assert_array_equal(result_manual, result_auto)\n     def test_rolling_iter(self, da) -> None:\n         rolling_obj = da.rolling(time=7)\n         rolling_obj_mean = rolling_obj.mean()\n",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "diff --git a/xarray/tests/test_indexes.py b/xarray/tests/test_indexes.py\nindex fa8bd84..499e5cb 100644\n--- a/xarray/tests/test_indexes.py\n+++ b/xarray/tests/test_indexes.py\n@@ -688,7 +688,20 @@ def test_safe_cast_to_index_cftimeindex():\n         assert isinstance(actual, type(expected))\n \n \n-# Test that datetime.datetime objects are never used in a CFTimeIndex\n+import pytest\n+import xarray as xr\n+import numpy as np\n+\n+@pytest.mark.parametrize(\"dtype\", [\"int32\", \"float32\"])\n+def test_restore_dtype_on_multiindexes(dtype: str) -> None:\n+    foo = xr.Dataset(coords={\"bar\": (\"bar\", np.array([0, 1], dtype=dtype))})\n+    foo = foo.stack(baz=(\"bar\",))\n+    assert str(foo[\"bar\"].values.dtype) == dtype\n+\n+def test_stack_int32_to_int64_issue():\n+    ds = xr.Dataset(coords={'a': np.array([0], dtype='i4')})\n+    stacked_ds = ds.stack(b=('a',))\n+    assert ds['a'].values.dtype == stacked_ds['a'].values.dtype\n @requires_cftime\n def test_safe_cast_to_index_datetime_datetime():\n     dates = [datetime(1, 1, day) for day in range(1, 20)]\n@@ -696,4 +709,4 @@ def test_safe_cast_to_index_datetime_datetime():\n     expected = pd.Index(dates)\n     actual = safe_cast_to_index(np.array(dates))\n     assert_array_equal(expected, actual)\n-    assert isinstance(actual, pd.Index)\n+    assert isinstance(actual, pd.Index)\n",
  "pylint-dev__pylint-4970": "",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..1c707e0 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -94,9 +94,34 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+import pytest\n+from pylint.lint import Run\n+from _pytest.capture import CaptureFixture\n+from pathlib import Path\n+\n+EMPTY_MODULE = Path(\"empty_module.py\")\n+\n+def test_short_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the -v flag.\"\"\"\n+    Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n+def test_long_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the --verbose flag.\"\"\"\n+    Run([str(EMPTY_MODULE), \"--verbose\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n+def test_verbose_flag_no_argument(capsys: CaptureFixture) -> None:\n+    \"\"\"Ensure that -v does not require an argument.\"\"\"\n+    Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Usage\" not in output.err  # There should be no usage error\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9123ae4..f352643 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1233,6 +1233,28 @@ class TestRunTC:\n             expected_output=\"No such file or directory\",\n         )\n \n+    def test_recursive_ignore(self):\n+        \"\"\"Test that recursive ignore options work as expected.\"\"\"\n+        self._runtest(\n+            [join(HERE, \"regrtest_data\", \"directory\"), \"--recursive=y\", \"--ignore=ignored_subdirectory\"],\n+            code=0,\n+        )\n+\n+        self._runtest(\n+            [join(HERE, \"regrtest_data\", \"directory\"), \"--recursive=y\", \"--ignore=failing.py\"],\n+            code=0,\n+        )\n+        \n+        self._runtest(\n+            [join(HERE, \"regrtest_data\", \"directory\"), \"--recursive=y\", \"--ignore-paths=.*ignored.*\"],\n+            code=0,\n+        )\n+\n+        self._runtest(\n+            [join(HERE, \"regrtest_data\", \"directory\"), \"--recursive=y\", \"--ignore-patterns=ignored_.*\"],\n+            code=0,\n+        )\n+\n     def test_recursive(self):\n         self._runtest(\n             [join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"), \"--recursive=y\"],\n",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..5bfaf22 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,43 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_paths_recursive(self) -> None:\n+        \"\"\"Test that `ignore-paths` is respected when running recursively.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^ignored_subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n+\n+    def test_ignore_paths_non_recursive(self) -> None:\n+        \"\"\"Test that `ignore-paths` is respected when running non-recursively.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--ignore-paths=^ignored_subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7277": "",
  "pytest-dev__pytest-10051": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex 26c4c15..b2ec5f7 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -159,8 +159,53 @@ def logging_during_setup_and_teardown(caplog):\n     logger.info(\"a_teardown_log\")\n     assert [x.message for x in caplog.get_records(\"teardown\")] == [\"a_teardown_log\"]\n \n+def test_caplog_record_consistency_after_clear(caplog):\n+    # Verify initial consistency\n+    assert caplog.get_records(\"call\") == caplog.records\n \n-def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardown):\n+    logging.warning(\"test\")\n+    # Verify consistency after logging a message\n+    assert caplog.get_records(\"call\") == caplog.records\n+\n+    caplog.clear()\n+    # Verify consistency after clearing\n+    assert caplog.get_records(\"call\") == caplog.records == []\n+\n+    logging.info(\"test_after_clear\")\n+    # Verify consistency after logging a new message post-clear\n+    assert [record.getMessage() for record in caplog.get_records(\"call\")] == [\"test_after_clear\"]\n+    assert caplog.get_records(\"call\") == caplog.records\n+\n+\n+def test_caplog_separate_stages(caplog):\n+    logger = logging.getLogger()\n+    caplog.clear()\n+    logger.info(\"log_in_call\")\n+    assert [rec.message for rec in caplog.get_records(\"call\")] == [\"log_in_call\"]\n+\n+    # Verify the separation of stages\n+    caplog.clear()\n+    logger.warning(\"log_in_setup\")\n+    assert [rec.message for rec in caplog.get_records(\"setup\")] == [\"log_in_setup\"]\n+    assert caplog.get_records(\"call\") == []\n+\n+    caplog.clear()\n+    logger.error(\"log_in_teardown\")\n+    assert [rec.message for rec in caplog.get_records(\"teardown\")] == [\"log_in_teardown\"]\n+    assert caplog.get_records(\"setup\") == []\n+    assert caplog.get_records(\"call\") == []\n+\n+\n+def test_caplog_clear_and_relog(caplog):\n+    logger = logging.getLogger()\n+    logger.info(\"first_log_message\")\n+    assert [rec.getMessage() for rec in caplog.get_records(\"call\")] == [\"first_log_message\"]\n+\n+    caplog.clear()\n+    assert caplog.get_records(\"call\") == []\n+\n+    logger.info(\"second_log_message\")\n+    assert [rec.getMessage() for rec in caplog.get_records(\"call\")] == [\"second_log_message\"]\n     assert not caplog.records\n     assert not caplog.get_records(\"call\")\n     logger.info(\"a_call_log\")\n",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_debugging.py b/testing/test_debugging.py\nindex 912abd7..cd2eedb 100644\n--- a/testing/test_debugging.py\n+++ b/testing/test_debugging.py\n@@ -174,6 +174,35 @@ class TestPDB:\n         rest = child.read().decode(\"utf8\")\n         assert \"debug.me\" in rest\n         self.flush(child)\n+        \n+    def test_pdb_teardown_not_called_on_skipped_class(self, pytester: Pytester) -> None:\n+        \"\"\"Ensure tearDown is not called for unittest classes with class-level skip when using --pdb\"\"\"\n+        p1 = pytester.makepyfile(\n+            \"\"\"\n+            import unittest\n+            \n+            skipped_teardown_called = []\n+\n+            @unittest.skip(\"Skipping class-level\")\n+            class MySkippedTestCase(unittest.TestCase):\n+\n+                def setUp(self):\n+                    skipped_teardown_called.append(\"setUp\")\n+\n+                def tearDown(self):\n+                    skipped_teardown_called.append(\"tearDown\")\n+\n+                def test_one(self):\n+                    pass\n+            \"\"\"\n+        )\n+        child = pytester.spawn_pytest(f\"--pdb {p1}\")\n+        child.expect(\"Skipping class-level\")\n+        child.expect_exact(\"= 1 skipped in\")\n+        child.sendeof()\n+        rest = child.read().decode(\"utf8\")\n+        assert \"tearDown\" not in rest\n+        self.flush(child)\n \n     def test_pdb_unittest_skip(self, pytester: Pytester) -> None:\n         \"\"\"Test for issue #2137\"\"\"\n",
  "pytest-dev__pytest-5262": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 1f092b0..53c03d5 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -1042,6 +1042,26 @@ class TestFDCapture(object):\n             os.write(1, b\"world\")\n             sys.stdout.write(\"qlwkej\")\n             assert not cap.snap()\n+\n+    def test_capfd_sys_stdout_mode(self, capfd):\n+        # Ensure that `sys.stdout.mode` does not contain 'b'\n+        out, err = capfd.readouterr()\n+        assert \"b\" not in sys.stdout.mode\n+\n+    def test_encoded_file_write_str(self, capfd):\n+        # Test that writing str to EncodedFile does not raise an error\n+        with capfd.disabled():\n+            ef = _pytest.capture.EncodedFile(sys.stdout, encoding='utf-8')\n+            ef.write(\"This is a test string.\\n\")\n+            sys.stdout.flush()\n+            out, err = capfd.readouterr()\n+            assert \"This is a test string.\" in out\n+\n+    def test_encoded_file_write_bytes_raises(self, capfd):\n+        # Test that writing bytes to EncodedFile raises a TypeError\n+        ef = _pytest.capture.EncodedFile(sys.stdout, encoding='utf-8')\n+        with pytest.raises(TypeError):\n+            ef.write(b\"This is a test bytes.\\n\")\n             cap.resume()\n             os.write(1, b\"but now\")\n             sys.stdout.write(\" yes\\n\")\n",
  "pytest-dev__pytest-5631": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex e422b03..77de702 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -2,8 +2,9 @@ import os\n import pprint\n import sys\n import textwrap\n-\n import py\n+import numpy as np\n+from unittest.mock import patch\n \n import pytest\n from _pytest.main import _in_venv\n@@ -46,7 +47,21 @@ class TestCollector:\n             assert [1, 2, 3] != fn\n             assert modcol != fn\n \n-    def test_getparent(self, testdir):\n+    def test_patch_numpy_array(self, testdir):\n+        \"\"\"Test patching with a numpy array to ensure no ValueError is raised.\"\"\"\n+        testdir.makepyfile(\n+            \"\"\"\n+            import numpy as np\n+            from unittest.mock import patch\n+            \n+            class TestArrayPatch:\n+                @patch('module_under_test.ARRAY', new=np.array([1.0, 2.0, 3.0]))\n+                def test_patch_array(self):\n+                    assert True\n+            \"\"\"\n+        )\n+        result = testdir.inline_run()\n+        result.assertoutcome(passed=1)\n         modcol = testdir.getmodulecol(\n             \"\"\"\n             class TestClass(object):\n",
  "pytest-dev__pytest-5809": "",
  "pytest-dev__pytest-6202": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex fb6b260..d63b462 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -688,12 +688,20 @@ class Test_genitems:\n             def testone():\n                 pass\n \n+            @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+            def testmethod_two(self, arg0):\n+                pass\n+\n             class TestX(object):\n                 def testmethod_one(self):\n                     pass\n \n             class TestY(TestX):\n                 pass\n+\n+            @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+            def testmethod_two(self, arg0):\n+                pass\n         \"\"\"\n         )\n         items, reprec = testdir.inline_genitems(p)\n",
  "pytest-dev__pytest-7205": "diff --git a/testing/test_setuponly.py b/testing/test_setuponly.py\nindex 8211d39..da51e04 100644\n--- a/testing/test_setuponly.py\n+++ b/testing/test_setuponly.py\n@@ -1,3 +1,4 @@\n+\n import pytest\n from _pytest.config import ExitCode\n \n@@ -141,6 +142,25 @@ def test_show_fixtures_with_parameters(testdir, mode):\n     '''\n     )\n \n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue: BytesWarning when using --setup-show with bytes parameter\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n+\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n+    result.stdout.fnmatch_lines(\n+        [\"*SETUP    F data\", \"*TEARDOWN F data\"]\n+    )\n+\n     result = testdir.runpytest(mode, p)\n     assert result.ret == 0\n \n@@ -153,6 +173,25 @@ def test_show_fixtures_with_parameters(testdir, mode):\n         ]\n     )\n \n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue: BytesWarning when using --setup-show with bytes parameter\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n+\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n+    result.stdout.fnmatch_lines(\n+        [\"*SETUP    F data\", \"*TEARDOWN F data\"]\n+    )\n+\n \n def test_show_fixtures_with_parameter_ids(testdir, mode):\n     testdir.makeconftest(\n@@ -175,6 +214,25 @@ def test_show_fixtures_with_parameter_ids(testdir, mode):\n     '''\n     )\n \n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue: BytesWarning when using --setup-show with bytes parameter\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n+\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n+    result.stdout.fnmatch_lines(\n+        [\"*SETUP    F data\", \"*TEARDOWN F data\"]\n+    )\n+\n     result = testdir.runpytest(mode, p)\n     assert result.ret == 0\n \n@@ -182,6 +240,25 @@ def test_show_fixtures_with_parameter_ids(testdir, mode):\n         [\"SETUP    S arg_same?spam?\", \"SETUP    S arg_same?ham?\"]\n     )\n \n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue: BytesWarning when using --setup-show with bytes parameter\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n+\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n+    result.stdout.fnmatch_lines(\n+        [\"*SETUP    F data\", \"*TEARDOWN F data\"]\n+    )\n+\n \n def test_show_fixtures_with_parameter_ids_function(testdir, mode):\n     p = testdir.makepyfile(\n@@ -195,6 +272,25 @@ def test_show_fixtures_with_parameter_ids_function(testdir, mode):\n     \"\"\"\n     )\n \n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue: BytesWarning when using --setup-show with bytes parameter\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n+\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n+    result.stdout.fnmatch_lines(\n+        [\"*SETUP    F data\", \"*TEARDOWN F data\"]\n+    )\n+\n     result = testdir.runpytest(mode, p)\n     assert result.ret == 0\n \n@@ -291,4 +387,23 @@ def test_setup_show_with_KeyboardInterrupt_in_test(testdir):\n             \"*= no tests ran in *\",\n         ]\n     )\n+\n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue: BytesWarning when using --setup-show with bytes parameter\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n+\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n+    result.stdout.fnmatch_lines(\n+        [\"*SETUP    F data\", \"*TEARDOWN F data\"]\n+    )\n     assert result.ret == ExitCode.INTERRUPTED\n",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..feaa5e1 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -607,6 +607,27 @@ class TestSkip:\n         result = testdir.runpytest(\"-rs\")\n         result.stdout.fnmatch_lines([\"*unconditional skip*\", \"*1 skipped*\"])\n \n+    def test_skip_with_and_without_runxfail(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            def test_skip_location():\n+                assert 0\n+        \"\"\"\n+        )\n+        # Test without --runxfail\n+        result_without_runxfail = testdir.runpytest(\"-rs\")\n+        result_without_runxfail.stdout.fnmatch_lines(\n+            [\"SKIPPED [1] test_skip_location.py:2: unconditional skip\", \"*1 skipped*\"]\n+        )\n+\n+        # Test with --runxfail\n+        result_with_runxfail = testdir.runpytest(\"-rs\", \"--runxfail\")\n+        result_with_runxfail.stdout.fnmatch_lines(\n+            [\"SKIPPED [1] test_skip_location.py:2: unconditional skip\", \"*1 skipped*\"]\n+        )\n+\n     def test_skip_with_reason(self, testdir):\n         testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..89cbce0 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,7 +1,9 @@\n+\n import sys\n \n import pytest\n from _pytest.runner import runtestprotocol\n+from _pytest.pytester import Testdir\n from _pytest.skipping import evaluate_skip_marks\n from _pytest.skipping import evaluate_xfail_marks\n from _pytest.skipping import pytest_runtest_setup\n@@ -154,7 +156,30 @@ class TestEvaluation:\n \n \n class TestXFail:\n-    @pytest.mark.parametrize(\"strict\", [True, False])\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n     def test_xfail_simple(self, testdir, strict):\n         item = testdir.getitem(\n             \"\"\"\n@@ -463,7 +488,30 @@ class TestXFail:\n         result.stdout.fnmatch_lines([\"*XFAIL*\", \"*unsupported feature*\"])\n         assert result.ret == 0\n \n-    @pytest.mark.parametrize(\"strict\", [True, False])\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n     def test_strict_xfail(self, testdir, strict):\n         p = testdir.makepyfile(\n             \"\"\"\n@@ -490,7 +538,30 @@ class TestXFail:\n         assert result.ret == (1 if strict else 0)\n         assert testdir.tmpdir.join(\"foo_executed\").isfile()\n \n-    @pytest.mark.parametrize(\"strict\", [True, False])\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n     def test_strict_xfail_condition(self, testdir, strict):\n         p = testdir.makepyfile(\n             \"\"\"\n@@ -506,7 +577,30 @@ class TestXFail:\n         result.stdout.fnmatch_lines([\"*1 passed*\"])\n         assert result.ret == 0\n \n-    @pytest.mark.parametrize(\"strict\", [True, False])\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n     def test_xfail_condition_keyword(self, testdir, strict):\n         p = testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..ba231f8 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -513,6 +513,11 @@ class TestCaptureFixture:\n             \"\"\"\n         )\n         reprec.assertoutcome(passed=1)\n+    @pytest.mark.parametrize(\"newline\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_capfd_preserves_carriage_returns(self, capfd, newline):\n+        print(\"Hello World\", end=newline)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(newline)\n \n     def test_capfdbinary(self, testdir):\n         reprec = testdir.inline_runsource(\n",
  "pytest-dev__pytest-7571": "",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..635b982 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,3 +1,4 @@\n+\n import os\n import pprint\n import sys\n@@ -9,7 +10,7 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n-from _pytest.pytester import Testdir\n+from _pytest.pytester import Testdir, Pytester\n \n \n class TestCollector:\n@@ -1178,6 +1179,15 @@ def test_collect_symlink_out_of_tree(testdir):\n     assert result.ret == 0\n \n \n+def test_collect_symlink_dir(pytester: Pytester) -> None:\n+    \"\"\"A symlinked directory is collected.\"\"\"\n+    dir = pytester.mkdir(\"dir\")\n+    dir.joinpath(\"test_it.py\").write_text(\"def test_it(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_dir\").symlink_to(dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+\n def test_collectignore_via_conftest(testdir):\n     \"\"\"collect_ignore in parent conftest skips importing child (issue #4592).\"\"\"\n     tests = testdir.mkpydir(\"tests\")\n",
  "pytest-dev__pytest-8399": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 2c720b0..bd3a768 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -301,6 +301,26 @@ def test_setup_setUpClass(pytester: Pytester) -> None:\n     reprec = pytester.inline_run(testpath)\n     reprec.assertoutcome(passed=3)\n \n+def test_fixtures_setUpClass_should_be_hidden_by_default(pytester: Pytester) -> None:\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+        class AnotherTestCase(unittest.TestCase):\n+            @classmethod\n+            def setUpClass(cls):\n+                pass\n+            def test_example(self):\n+                pass\n+    \"\"\"\n+    )\n+    result = pytester.runpytest(\"--fixtures\")\n+    assert result.ret == 0\n+    result.stdout.no_fnmatch_line(\"*unittest_setUpClass_fixture_AnotherTestCase*\")\n+    \n+    result = pytester.runpytest(\"--fixtures\", \"-v\")\n+    assert result.ret == 0\n+    result.stdout.fnmatch_lines([\"*unittest_setUpClass_fixture_AnotherTestCase*\"])\n+\n \n def test_setup_class(pytester: Pytester) -> None:\n     testpath = pytester.makepyfile(\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..20b7bb1 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -574,6 +574,37 @@ def test_class_weights_cv():\n     assert_array_equal(reg.predict([[-.2, 2]]), np.array([-1]))\n \n \n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    rng = np.random.RandomState(42)\n+\n+    # Prepare dataset\n+    n_samples = 8\n+    n_features = 5\n+    X = rng.randn(n_samples, n_features)\n+    y = rng.choice([-1, 1], size=n_samples)\n+\n+    # Define alphas and their count\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    # Instantiate RidgeClassifierCV with store_cv_values=True\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+    # Fit model\n+    r.fit(X, y)\n+\n+    # Verify shape of cv_values_ for single target\n+    assert r.cv_values_.shape == (n_samples, 1, n_alphas)\n+\n+    # Test when y has multiple targets\n+    y_multi = rng.choice([-1, 1], size=(n_samples, 2))\n+    r.fit(X, y_multi)\n+\n+    # Verify shape of cv_values_ for multiple targets\n+    assert r.cv_values_.shape == (n_samples, 2, n_alphas)\n+\n+\n def test_ridgecv_store_cv_values():\n     # Test _RidgeCV's store_cv_values attribute.\n     rng = rng = np.random.RandomState(42)\n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..3af5599 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -184,6 +184,18 @@ def test_int_overflow_mutual_info_score():\n     assert_all_finite(mutual_info_score(x.ravel(), y.ravel()))\n \n \n+def test_fowlkes_mallows_score_overflow():\n+    # Test overflow in fowlkes_mallows_score\n+    x = np.array([1] * (52632 + 2529) + [2] * (14660 + 793) + [3] * (3271 +\n+                 204) + [4] * (814 + 39) + [5] * (316 + 20))\n+    y = np.array([0] * 52632 + [1] * 2529 + [0] * 14660 + [1] * 793 +\n+                 [0] * 3271 + [1] * 204 + [0] * 814 + [1] * 39 + [0] * 316 +\n+                 [1] * 20)\n+\n+    fms = fowlkes_mallows_score(x, y)\n+    # Check that the score is not nan or inf\n+    assert np.isfinite(fms), \"Fowlkes-Mallows score must be finite\"\n+\n def test_entropy():\n     ent = entropy([0, 0, 42.])\n     assert_almost_equal(ent, 0.6365141, 5)\n",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..715f606 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -558,8 +558,31 @@ def test_feature_names():\n     for idx, name in enumerate(feature_names):\n         assert_equal(idx, cv.vocabulary_.get(name))\n \n-\n-def test_vectorizer_max_features():\n+from sklearn.feature_extraction.text import CountVectorizer\n+from sklearn.utils._testing import assert_array_equal, assert_raises\n+\n+def test_countvectorizer_custom_vocabulary_get_feature_names():\n+    # Define a custom vocabulary\n+    vocab = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    \n+    # Initialize CountVectorizer with the custom vocabulary\n+    vectorizer = CountVectorizer(vocabulary=vocab)\n+    \n+    # Ensure that get_feature_names works without fitting\n+    feature_names = vectorizer.get_feature_names()\n+    assert_array_equal(feature_names, vocab)\n+\n+    # Ensure that vocabulary_ is set correctly when calling transform\n+    corpus = [\n+        'This is the first document.',\n+        'This is the second second document.',\n+        'And the third one.',\n+        'Is this the first document?'\n+    ]\n+    X = vectorizer.transform(corpus)\n+    \n+    # Now vocabulary_ should be present\n+    assert_array_equal(feature_names, vectorizer.get_feature_names())\n     vec_factories = (\n         CountVectorizer,\n         TfidfVectorizer,\n",
  "scikit-learn__scikit-learn-11310": "diff --git a/sklearn/model_selection/tests/test_search.py b/sklearn/model_selection/tests/test_search.py\nindex 0b1d5f9..63d4dc0 100644\n--- a/sklearn/model_selection/tests/test_search.py\n+++ b/sklearn/model_selection/tests/test_search.py\n@@ -1149,6 +1149,52 @@ def test_search_cv_results_none_param():\n                            [0, None])\n \n \n+def test_refit_time_attribute():\n+    # Load the iris dataset\n+    X, y = load_iris(return_X_y=True)\n+    \n+    # Initialize a RandomForestClassifier\n+    clf = RandomForestClassifier(random_state=0)\n+    \n+    # Define a simple parameter grid\n+    param_grid = {'n_estimators': [5, 10]}\n+    \n+    # Initialize GridSearchCV\n+    search = GridSearchCV(clf, param_grid, cv=3)\n+    \n+    # Fit the search\n+    search.fit(X, y)\n+    \n+    # Check if the refit_time_ attribute exists and is a float\n+    assert_true(hasattr(search, \"refit_time_\"))\n+    assert_true(isinstance(search.refit_time_, float))\n+    \n+    # Check if refit_time_ is non-negative\n+    assert_greater_equal(search.refit_time_, 0)\n+\n+def test_refit_time_randomized_search():\n+    # Load the iris dataset\n+    X, y = load_iris(return_X_y=True)\n+    \n+    # Initialize a RandomForestClassifier\n+    clf = RandomForestClassifier(random_state=0)\n+    \n+    # Define a simple parameter distribution\n+    param_dist = {'n_estimators': [5, 10]}\n+    \n+    # Initialize RandomizedSearchCV\n+    search = RandomizedSearchCV(clf, param_dist, cv=3, n_iter=2)\n+    \n+    # Fit the search\n+    search.fit(X, y)\n+    \n+    # Check if the refit_time_ attribute exists and is a float\n+    assert_true(hasattr(search, \"refit_time_\"))\n+    assert_true(isinstance(search.refit_time_, float))\n+    \n+    # Check if refit_time_ is non-negative\n+    assert_greater_equal(search.refit_time_, 0)\n+\n @ignore_warnings()\n def test_search_cv_timing():\n     svc = LinearSVC(random_state=0)\n",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..f9ecc8c 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -21,8 +21,10 @@ from sklearn.utils.testing import assert_true\n from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import ignore_warnings\n from sklearn.utils.testing import assert_warns_message\n-\n-from sklearn.exceptions import ConvergenceWarning\n+from sklearn.metrics.scorer import get_scorer\n+from sklearn.utils._testing import assert_array_almost_equal\n+from sklearn.datasets import make_classification\n+from sklearn.linear_model import _log_reg_scoring_path\n from sklearn.exceptions import ChangedBehaviorWarning\n from sklearn.linear_model.logistic import (\n     LogisticRegression,\n@@ -491,8 +493,32 @@ def test_logistic_cv():\n     scores = np.asarray(list(lr_cv.scores_.values()))\n     assert_array_equal(scores.shape, (1, 3, 1))\n \n-\n-def test_multinomial_logistic_regression_string_inputs():\n+@pytest.mark.parametrize('scoring, multiclass_agg_list',\n+                         [('accuracy', ['']),\n+                          ('precision', ['_macro', '_weighted']),\n+                          ('f1', ['_macro', '_weighted']),\n+                          ('neg_log_loss', ['']),\n+                          ('recall', ['_macro', '_weighted'])])\n+def test_logistic_cv_multinomial_score(scoring, multiclass_agg_list):\n+    # Test that LogisticRegressionCV uses the right score to compute its\n+    # cross-validation scores when using a multinomial scoring\n+    # see https://github.com/scikit-learn/scikit-learn/issues/8720\n+    X, y = make_classification(n_samples=100, random_state=0, n_classes=3,\n+                               n_informative=6)\n+    train, test = np.arange(80), np.arange(80, 100)\n+    lr = LogisticRegression(C=1., solver='lbfgs', multi_class='multinomial')\n+    # we use lbfgs to support multinomial\n+    params = lr.get_params()\n+    # we store the params to set them further in _log_reg_scoring_path\n+    for key in ['C', 'n_jobs', 'warm_start']:\n+        del params[key]\n+    lr.fit(X[train], y[train])\n+    for averaging in multiclass_agg_list:\n+        scorer = get_scorer(scoring + averaging)\n+        computed_score = _log_reg_scoring_path(X, y, train, test, Cs=[1.],\n+                                               scoring=scorer, **params)[2][0]\n+        expected_score = scorer(lr, X[test], y[test])\n+        assert_array_almost_equal(computed_score, expected_score)\n     # Test with string labels for LogisticRegression(CV)\n     n_samples, n_features, n_classes = 50, 5, 3\n     X_ref, y = make_classification(n_samples=n_samples, n_features=n_features,\n",
  "scikit-learn__scikit-learn-12585": "diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 4752f9c..bec3961 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -154,6 +154,28 @@ def test_clone_nan():\n     assert clf.empty is clf2.empty\n \n \n+def test_clone_estimator_with_type_as_parameter():\n+    # Check that clone works for parameters that are types rather than instances\n+    from sklearn.base import clone\n+    from sklearn.preprocessing import StandardScaler\n+\n+    class MyEstimatorWithClassParam:\n+        def __init__(self, estimator_class=StandardScaler):\n+            self.estimator_class = estimator_class\n+\n+        def get_params(self, deep=False):\n+            return {'estimator_class': self.estimator_class}\n+\n+        def set_params(self, **params):\n+            for key, value in params.items():\n+                setattr(self, key, value)\n+            return self\n+\n+    estimator = MyEstimatorWithClassParam(estimator_class=StandardScaler)\n+    cloned_estimator = clone(estimator)\n+\n+    assert cloned_estimator.estimator_class is estimator.estimator_class\n+\n def test_clone_sparse_matrices():\n     sparse_matrix_classes = [\n         getattr(sp, name)\n",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..23ab750 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -5,6 +5,32 @@ from distutils.version import LooseVersion\n import numpy as np\n from scipy import linalg\n \n+import numpy as np\n+\n+@pytest.mark.parametrize('init_copy_X, fit_copy_X, expected_copy_X', [\n+    (True, None, True),   # Init True, fit not specified, should respect initialization\n+    (False, None, False), # Init False, fit not specified, should respect initialization\n+    (True, True, True),   # Init True, fit True, should respect fit\n+    (False, True, True),  # Init False, fit True, should respect fit\n+    (True, False, False), # Init True, fit False, should respect fit\n+    (False, False, False) # Init False, fit False, should respect fit\n+])\n+def test_lasso_larsic_copyX_behaviour(init_copy_X, fit_copy_X, expected_copy_X):\n+    \"\"\"Test that copy_X behavior is correctly handled in LassoLarsIC.\"\"\"\n+\n+    lasso_lars = LassoLarsIC(copy_X=init_copy_X, precompute=False)\n+    rng = np.random.RandomState(0)\n+    X = rng.normal(0, 1, (100, 5))\n+    X_copy = X.copy()\n+    y = X[:, 2]\n+\n+    if fit_copy_X is None:\n+        lasso_lars.fit(X, y)\n+    else:\n+        lasso_lars.fit(X, y, copy_X=fit_copy_X)\n+\n+    assert expected_copy_X == np.array_equal(X, X_copy)\n+\n import pytest\n \n from sklearn.model_selection import train_test_split\n@@ -18,7 +44,7 @@ from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import TempMemmap\n from sklearn.exceptions import ConvergenceWarning\n from sklearn import linear_model, datasets\n-from sklearn.linear_model.least_angle import _lars_path_residues\n+from sklearn.linear_model.least_angle import _lars_path_residues, LassoLarsIC\n \n diabetes = datasets.load_diabetes()\n X, y = diabetes.data, diabetes.target\n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..f030f36 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -493,6 +493,22 @@ def test_shuffle_stratifiedkfold():\n         assert_not_equal(set(test0), set(test1))\n     check_cv_coverage(kf0, X_40, y, groups=None, expected_n_splits=5)\n \n+    # Additional test to verify shuffling within classes\n+    X = np.arange(20)\n+    y = [0] * 10 + [1] * 10\n+    kf1 = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n+    kf2 = StratifiedKFold(n_splits=5, shuffle=True, random_state=43)\n+    splits1 = [sorted(test_idx) for _, test_idx in kf1.split(X, y)]\n+    splits2 = [sorted(test_idx) for _, test_idx in kf2.split(X, y)]\n+    assert splits1 != splits2, \"Shuffle should result in different splits for different seeds\"\n+\n+    # Verify that shuffling changes the indices within the same class\n+    for fold_idx, (train_idx, test_idx) in enumerate(kf1.split(X, y)):\n+        class_0_idxs = [i for i in test_idx if y[i] == 0]\n+        class_1_idxs = [i for i in test_idx if y[i] == 1]\n+        assert class_0_idxs != sorted(class_0_idxs), f\"Fold {fold_idx} class 0 indices are not shuffled\"\n+        assert class_1_idxs != sorted(class_1_idxs), f\"Fold {fold_idx} class 1 indices are not shuffled\"\n+\n \n def test_kfold_can_detect_dependent_samples_on_digits():  # see #2372\n     # The digits samples are dependent: they are apparently grouped by authors\n",
  "scikit-learn__scikit-learn-13135": "diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py\nindex a18a1c5..289d682 100644\n--- a/sklearn/preprocessing/tests/test_discretization.py\n+++ b/sklearn/preprocessing/tests/test_discretization.py\n@@ -203,6 +203,30 @@ def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n     assert_array_equal(expected_3bins, Xt.ravel())\n \n \n+@pytest.mark.parametrize(\n+    'strategy, expected_2bins, expected_3bins, expected_5bins',\n+    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2], [0, 0, 1, 1, 4, 4]),\n+     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2], [0, 0, 1, 2, 3, 4]),\n+     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2], [0, 1, 2, 3, 4, 4])])\n+def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins, expected_5bins):\n+    X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n+\n+    # with 2 bins\n+    est = KBinsDiscretizer(n_bins=2, strategy=strategy, encode='ordinal')\n+    Xt = est.fit_transform(X)\n+    assert_array_equal(expected_2bins, Xt.ravel())\n+\n+    # with 3 bins\n+    est = KBinsDiscretizer(n_bins=3, strategy=strategy, encode='ordinal')\n+    Xt = est.fit_transform(X)\n+    assert_array_equal(expected_3bins, Xt.ravel())\n+\n+    # with 5 bins\n+    est = KBinsDiscretizer(n_bins=5, strategy=strategy, encode='ordinal')\n+    Xt = est.fit_transform(X)\n+    assert_array_equal(expected_5bins, Xt.ravel())\n+\n+\n @pytest.mark.parametrize('strategy', ['uniform', 'kmeans', 'quantile'])\n @pytest.mark.parametrize('encode', ['ordinal', 'onehot', 'onehot-dense'])\n def test_inverse_transform(strategy, encode):\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..06ffa17 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -597,6 +597,25 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_array_equal(Y_pred1, Y_pred2)\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict when n_init > 1\n+    rng = np.random.RandomState(42)\n+    X = rng.randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=10, random_state=42)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n+\n+def test_gaussian_mixture_fit_predict_covariance_types():\n+    # Check that fit_predict is equivalent to fit.predict for different covariance types\n+    rng = np.random.RandomState(42)\n+    X = rng.randn(1000, 5)\n+    for covar_type in ['spherical', 'tied', 'diag', 'full']:\n+        gm = GaussianMixture(n_components=5, n_init=10, random_state=42, covariance_type=covar_type)\n+        y_pred1 = gm.fit_predict(X)\n+        y_pred2 = gm.predict(X)\n+        assert_array_equal(y_pred1, y_pred2)\n+\n \n def test_gaussian_mixture_fit():\n     # recover the ground truth\n",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\nindex 318940e..09acd63 100644\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -1057,8 +1057,27 @@ def test_pipeline_memory():\n     finally:\n         shutil.rmtree(cachedir)\n \n-\n-def test_make_pipeline_memory():\n+def test_pipeline_length():\n+    \"\"\"Test that the Pipeline implements __len__ correctly\"\"\"\n+    from sklearn import svm\n+    from sklearn.datasets import make_classification\n+    from sklearn.feature_selection import SelectKBest, f_regression\n+    from sklearn.pipeline import Pipeline\n+\n+    # generate some data to play with\n+    X, y = make_classification(n_informative=5, n_redundant=0, random_state=42)\n+\n+    anova_filter = SelectKBest(f_regression, k=5)\n+    clf = svm.SVC(kernel='linear')\n+    pipe = Pipeline([('anova', anova_filter), ('svc', clf)])\n+\n+    assert len(pipe) == 2\n+    sub_pipe = pipe[:1]\n+    assert len(sub_pipe) == 1\n+\n+    # Edge case: empty pipeline\n+    empty_pipe = Pipeline([])\n+    assert len(empty_pipe) == 0\n     cachedir = mkdtemp()\n     if LooseVersion(joblib_version) < LooseVersion('0.12'):\n         # Deal with change of API in joblib\n@@ -1070,4 +1089,4 @@ def test_make_pipeline_memory():\n     pipeline = make_pipeline(DummyTransf(), SVC())\n     assert pipeline.memory is None\n \n-    shutil.rmtree(cachedir)\n+    shutil.rmtree(cachedir)\n",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..f4289c2 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -9,6 +10,8 @@ Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n import pytest\n \n import numpy as np\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n \n from sklearn.utils.testing import assert_array_equal\n from sklearn.utils.testing import assert_array_almost_equal\n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..ff6ad76 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -503,7 +503,55 @@ def test_transform():\n     assert_array_equal(eclf3.transform(X).shape, (3, 4, 2))\n     assert_array_almost_equal(eclf1.transform(X),\n                               eclf2.transform(X))\n+                              \n+from sklearn.datasets import load_iris, make_regression\n+from sklearn.linear_model import LogisticRegression\n+from sklearn.ensemble import VotingClassifier, VotingRegressor\n+import numpy as np\n+import pytest\n+\n+@pytest.mark.parametrize(\n+    \"X, y, voter\",\n+    [\n+        (load_iris(return_X_y=True)[0], load_iris(return_X_y=True)[1], \n+         VotingClassifier(\n+            estimators=[('lr', LogisticRegression()), \n+                        ('rf', RandomForestClassifier(n_estimators=5))]\n+        )),\n+        (make_regression(n_samples=100, n_features=4, noise=0.0, random_state=1)[0],\n+         make_regression(n_samples=100, n_features=4, noise=0.0, random_state=1)[1],\n+         VotingRegressor(\n+            estimators=[('lr', LinearRegression()), \n+                        ('rf', RandomForestRegressor(n_estimators=5))]\n+        ))\n+    ]\n+)\n+def test_none_estimator_with_weights(X, y, voter):\n+    # check that an estimator can be set to None and passing some weight\n+    # regression test for\n+    # https://github.com/scikit-learn/scikit-learn/issues/13777\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    voter.set_params(lr=None)\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    y_pred = voter.predict(X)\n+    assert y_pred.shape == y.shape\n+\n+def test_all_none_estimators():\n+    # Test when all estimators are set to None\n+    X, y = load_iris(return_X_y=True)\n+    voter = VotingClassifier(estimators=[('lr', None), ('rf', None)])\n+    with pytest.raises(ValueError, match=\"All estimators are None. At least one is required!\"):\n+        voter.fit(X, y, sample_weight=np.ones(y.shape))\n+\n+def test_weights_length_mismatch():\n+    # Test when weights length does not match number of estimators\n+    X, y = load_iris(return_X_y=True)\n+    voter = VotingClassifier(estimators=[('lr', LogisticRegression()), \n+                                         ('rf', RandomForestClassifier(n_estimators=5))],\n+                             weights=[0.7])\n+    with pytest.raises(ValueError, match=\"Number of `estimators` and weights must be equal\"):\n+        voter.fit(X, y, sample_weight=np.ones(y.shape))\n     assert_array_almost_equal(\n             eclf3.transform(X).swapaxes(0, 1).reshape((4, 6)),\n             eclf2.transform(X)\n-    )\n+    )\n",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..7adf124 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -396,8 +396,51 @@ def test_export_text():\n     assert export_text(reg, decimals=1) == expected_report\n     assert export_text(reg, decimals=1, show_weights=True) == expected_report\n \n+def test_export_text_single_feature():\n+    from sklearn.tree import DecisionTreeClassifier\n+    from sklearn.tree import export_text\n+    from sklearn.datasets import load_iris\n+\n+    # Load iris dataset\n+    X, y = load_iris(return_X_y=True)\n+    # Use only one feature\n+    X = X[:, 0].reshape(-1, 1)\n+\n+    # Train DecisionTreeClassifier\n+    tree = DecisionTreeClassifier(random_state=0)\n+    tree.fit(X, y)\n+\n+    # Test export_text with single feature\n+    expected_report = dedent(\"\"\"\\\n+    |--- sepal_length <= 5.45\n+    |   |--- sepal_length <= 4.95\n+    |   |   |--- class: 0\n+    |   |--- sepal_length >  4.95\n+    |   |   |--- class: 0\n+    |--- sepal_length >  5.45\n+    |   |--- sepal_length <= 6.15\n+    |   |   |--- class: 1\n+    |   |--- sepal_length >  6.15\n+    |   |   |--- class: 2\n+    \"\"\").lstrip()\n+    \n+    assert export_text(tree, feature_names=['sepal_length']) == expected_report\n+\n+    # Test export_text with single feature and show_weights=True\n+    expected_report_with_weights = dedent(\"\"\"\\\n+    |--- sepal_length <= 5.45\n+    |   |--- sepal_length <= 4.95\n+    |   |   |--- weights: [41.00, 0.00, 0.00] class: 0\n+    |   |--- sepal_length >  4.95\n+    |   |   |--- weights: [9.00, 1.00, 0.00] class: 0\n+    |--- sepal_length >  5.45\n+    |   |--- sepal_length <= 6.15\n+    |   |   |--- weights: [0.00, 41.00, 0.00] class: 1\n+    |   |--- sepal_length >  6.15\n+    |   |   |--- weights: [0.00, 0.00, 8.00] class: 2\n+    \"\"\").lstrip()\n \n-def test_plot_tree_entropy(pyplot):\n+    assert export_text(tree, feature_names=['sepal_length'], show_weights=True) == expected_report_with_weights\n     # mostly smoke tests\n     # Check correctness of export_graphviz for criterion = entropy\n     clf = DecisionTreeClassifier(max_depth=3,\n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..c2a9026 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1531,28 +1531,36 @@ def test_LogisticRegressionCV_GridSearchCV_elastic_net_ovr():\n     assert (lrcv.predict(X_train) == gs.predict(X_train)).mean() >= .8\n     assert (lrcv.predict(X_test) == gs.predict(X_test)).mean() >= .8\n \n+@pytest.mark.parametrize('penalty', ('l2', 'elasticnet'))\n+@pytest.mark.parametrize('solver', ('saga', 'liblinear'))\n+def test_logistic_regression_cv_no_index_error(penalty, solver):\n+    # Test to ensure no IndexError is thrown with LogisticRegressionCV with refit=False\n+\n+    np.random.seed(29)\n+    X = np.random.normal(size=(1000, 3))\n+    beta = np.random.normal(size=3)\n+    intercept = np.random.normal(size=None)\n+    y = np.sign(intercept + X @ beta)\n+\n+    if penalty == 'elasticnet':\n+        l1_ratios = np.linspace(0, 1, 2)\n+    else:\n+        l1_ratios = None\n+    \n+    lrcv = LogisticRegressionCV(\n+        cv=5,\n+        penalty=penalty,\n+        solver=solver,\n+        tol=1e-2,\n+        refit=False,\n+        l1_ratios=l1_ratios,\n+        random_state=0\n+    )\n \n-@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial'))\n-def test_LogisticRegressionCV_no_refit(multi_class):\n-    # Test LogisticRegressionCV attribute shapes when refit is False\n-\n-    n_classes = 3\n-    n_features = 20\n-    X, y = make_classification(n_samples=200, n_classes=n_classes,\n-                               n_informative=n_classes, n_features=n_features,\n-                               random_state=0)\n-\n-    Cs = np.logspace(-4, 4, 3)\n-    l1_ratios = np.linspace(0, 1, 2)\n-\n-    lrcv = LogisticRegressionCV(penalty='elasticnet', Cs=Cs, solver='saga',\n-                                l1_ratios=l1_ratios, random_state=0,\n-                                multi_class=multi_class, refit=False)\n-    lrcv.fit(X, y)\n-    assert lrcv.C_.shape == (n_classes,)\n-    assert lrcv.l1_ratio_.shape == (n_classes,)\n-    assert lrcv.coef_.shape == (n_classes, n_features)\n-\n+    try:\n+        lrcv.fit(X, y)\n+    except IndexError:\n+        pytest.fail(\"IndexError thrown with LogisticRegressionCV and refit=False\")\n \n def test_LogisticRegressionCV_elasticnet_attribute_shapes():\n     # Make sure the shapes of scores_ and coefs_paths_ attributes are correct\n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/tests/test_show_versions.py b/sklearn/utils/tests/test_show_versions.py\nindex fa39255..b0e4d37 100644\n--- a/sklearn/utils/tests/test_show_versions.py\n+++ b/sklearn/utils/tests/test_show_versions.py\n@@ -25,9 +25,10 @@ def test_get_deps_info():\n     assert 'matplotlib' in deps_info\n \n \n-def test_show_versions_with_blas(capsys):\n+def test_show_versions_with_blas_and_joblib(capsys):\n     show_versions()\n     out, err = capsys.readouterr()\n     assert 'python' in out\n     assert 'numpy' in out\n-    assert 'BLAS' in out\n+    assert 'BLAS' in out\n+    assert 'joblib' in out\n",
  "scikit-learn__scikit-learn-14496": "",
  "scikit-learn__scikit-learn-14710": "",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..13c3a6c 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,7 +680,46 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n-def test_sparse_precomputed():\n+from scipy import sparse\n+import numpy as np\n+from sklearn import svm\n+\n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for ZeroDivisionError with sparse data\n+    X_train = sparse.csr_matrix([\n+        [0, 1, 0, 0],\n+        [0, 0, 0, 1],\n+        [0, 0, 1, 0],\n+        [0, 0, 0, 1]\n+    ])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear', C=316.227766017, max_iter=15000, tol=0.001)\n+    \n+    # Ensure no error is raised\n+    model.fit(X_train, y_train)\n+    \n+    # Check support_vectors_ is empty\n+    assert model.support_vectors_.shape[0] == 0\n+    # Check dual_coef_ is a sparse matrix and empty\n+    assert model.dual_coef_.shape[1] == 0\n+\n+def test_sparse_fit_support_vectors_non_empty():\n+    # Test case when support_vectors_ is not empty\n+    X_train = sparse.csr_matrix([\n+        [1, 2, 0, 0],\n+        [0, 0, 3, 4],\n+        [1, 0, 0, 1]\n+    ])\n+    y_train = np.array([1.0, 0.0, 1.0])\n+    model = svm.SVR(kernel='linear', C=1.0, max_iter=15000, tol=0.001)\n+    \n+    # Fit the model\n+    model.fit(X_train, y_train)\n+    \n+    # Check support_vectors_ is not empty\n+    assert model.support_vectors_.shape[0] > 0\n+    # Check dual_coef_ is a sparse matrix and not empty\n+    assert model.dual_coef_.shape[1] > 0\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n     try:\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..4dc3dbc 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -97,8 +97,27 @@ def test_strip_accents():\n     expected = 'this is a test'\n     assert strip_accents_unicode(a) == expected\n \n+    # strings that are already decomposed\n+    a = \"o\\u0308\"  # o with diaresis\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # combining marks by themselves\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Multiple combining marks on one character\n+    a = \"o\\u0308\\u0304\"\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n \n-def test_to_ascii():\n+    # NFKD normalization example\n+    s1 = chr(241)  # \"\u00f1\" as a single code point\n+    s2 = chr(110) + chr(771)  # \"n\" + \"\u0303\" as two code points\n+    # They should both be normalized to \"n\"\n+    assert strip_accents_unicode(s1) == \"n\"\n+    assert strip_accents_unicode(s2) == \"n\"\n     # check some classical latin accentuated symbols\n     a = '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb'\n     expected = 'aaaaaaceeee'\n",
  "scikit-learn__scikit-learn-25102": "diff --git a/sklearn/feature_selection/tests/test_base.py b/sklearn/feature_selection/tests/test_base.py\nindex bf2d07e..6b9e9be 100644\n--- a/sklearn/feature_selection/tests/test_base.py\n+++ b/sklearn/feature_selection/tests/test_base.py\n@@ -104,7 +104,38 @@ def test_inverse_transform_sparse():\n     assert np.int32 == sel.inverse_transform(sparse(Xt).astype(np.int32)).dtype\n     assert np.float32 == sel.inverse_transform(sparse(Xt).astype(np.float32)).dtype\n \n-    # Check wrong shape raises error\n+from sklearn.datasets import load_iris\n+import numpy as np\n+import pandas as pd\n+from sklearn.feature_selection import SelectKBest, chi2\n+from sklearn.utils._testing import assert_array_equal\n+\n+def test_output_dataframe_dtypes():\n+    \"\"\"Test to ensure that DataFrame output dtypes match input dtypes.\"\"\"\n+    X, y = load_iris(return_X_y=True, as_frame=True)\n+    X = X.astype(\n+        {\n+            \"petal width (cm)\": np.float16,\n+            \"petal length (cm)\": np.float16,\n+        }\n+    )\n+    X[\"cat\"] = y.astype(\"category\")\n+\n+    selector = SelectKBest(chi2, k=2).set_output(transform=\"pandas\")\n+    X_out = selector.fit_transform(X, y)\n+\n+    # Check if the dtypes are preserved as expected\n+    assert X_out.dtypes[\"petal length (cm)\"] == np.float16, \"Dtype for 'petal length (cm)' should be float16\"\n+    assert X_out.dtypes[\"cat\"] == \"category\", \"Dtype for 'cat' should be 'category'\"\n+    \n+    # Adding a case where dtype preservation might be challenging\n+    X[\"int_col\"] = pd.Series([1, 2, 3], dtype=np.int32)\n+    selector = SelectKBest(chi2, k=3).set_output(transform=\"pandas\")\n+    X_out = selector.fit_transform(X, y)\n+\n+    # Check dtypes\n+    assert X_out.dtypes[\"int_col\"] == np.int32, \"Dtype for 'int_col' should be int32\"\n+    assert len(X_out.dtypes) == 3, \"Output should have 3 columns selected\"\n     with pytest.raises(ValueError):\n         sel.inverse_transform(np.array([[1], [2]]))\n \n@@ -113,4 +144,4 @@ def test_get_support():\n     sel = StepSelector()\n     sel.fit(X, y)\n     assert_array_equal(support, sel.get_support())\n-    assert_array_equal(support_inds, sel.get_support(indices=True))\n+    assert_array_equal(support_inds, sel.get_support(indices=True))\n",
  "scikit-learn__scikit-learn-25232": "diff --git a/sklearn/impute/tests/test_impute.py b/sklearn/impute/tests/test_impute.py\nindex ee482a8..23cd24b 100644\n--- a/sklearn/impute/tests/test_impute.py\n+++ b/sklearn/impute/tests/test_impute.py\n@@ -1511,7 +1511,11 @@ def test_most_frequent(expected, array, dtype, extra_value, n_repeat):\n )\n def test_iterative_imputer_keep_empty_features(initial_strategy):\n     \"\"\"Check the behaviour of the iterative imputer with different initial strategy\n-    and keeping empty features (i.e. features containing only missing values).\n+import numpy as np\n+import pytest\n+from sklearn.impute import IterativeImputer\n+from numpy.testing import assert_array_equal, assert_allclose\n+from sklearn.utils._testing import assert_array_almost_equal\n     \"\"\"\n     X = np.array([[1, np.nan, 2], [3, np.nan, np.nan]])\n \n@@ -1523,8 +1527,32 @@ def test_iterative_imputer_keep_empty_features(initial_strategy):\n     X_imputed = imputer.transform(X)\n     assert_allclose(X_imputed[:, 1], 0)\n \n+def test_iterative_imputer_fill_value_with_constant():\n+    \"\"\"Test IterativeImputer with fill_value when initial_strategy is 'constant'.\"\"\"\n+    X = np.array([[np.nan, 2, 3], [4, np.nan, 5], [6, 7, np.nan], [8, 9, 0]])\n+    fill_value = 100\n+    imputer = IterativeImputer(\n+        missing_values=np.nan,\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+    )\n+    X_transformed = imputer.fit_transform(X)\n+    assert_array_equal(imputer.initial_imputer_.statistics_, np.array([fill_value, 2, 3]))\n \n-@pytest.mark.parametrize(\"keep_empty_features\", [True, False])\n+def test_iterative_imputer_fill_value_with_nan():\n+    \"\"\"Test IterativeImputer with np.nan as fill_value.\"\"\"\n+    X = np.array([[np.nan, 1], [np.nan, 2]])\n+    imputer = IterativeImputer(\n+        missing_values=np.nan,\n+        initial_strategy=\"constant\",\n+        fill_value=np.nan,\n+        max_iter=0,\n+    )\n+    X_transformed = imputer.fit_transform(X)\n+    # statistics_ should contain np.nan for the first column\n+    assert np.isnan(imputer.initial_imputer_.statistics_[0])\n+    assert_array_equal(imputer.initial_imputer_.statistics_, np.array([np.nan, 1.5]))\n def test_knn_imputer_keep_empty_features(keep_empty_features):\n     \"\"\"Check the behaviour of `keep_empty_features` for `KNNImputer`.\"\"\"\n     X = np.array([[1, np.nan, 2], [3, np.nan, np.nan]])\n",
  "scikit-learn__scikit-learn-25931": "",
  "scikit-learn__scikit-learn-25973": "diff --git a/sklearn/feature_selection/tests/test_sequential.py b/sklearn/feature_selection/tests/test_sequential.py\nindex 42e1fbb..874fd57 100644\n--- a/sklearn/feature_selection/tests/test_sequential.py\n+++ b/sklearn/feature_selection/tests/test_sequential.py\n@@ -313,4 +313,33 @@ def test_backward_neg_tol():\n     new_score = lr.fit(Xr, y).score(Xr, y)\n \n     assert 0 < sfs.get_support().sum() < X.shape[1]\n-    assert new_score < initial_score\n+    assert new_score < initial_score\n+\n+def test_sequential_feature_selector_with_iterable_cv():\n+    \"\"\"Test SequentialFeatureSelector with an iterable of splits as cv.\"\"\"\n+    from sklearn.datasets import make_classification\n+    from sklearn.feature_selection import SequentialFeatureSelector\n+    from sklearn.neighbors import KNeighborsClassifier\n+    from sklearn.model_selection import LeaveOneGroupOut\n+    import numpy as np\n+\n+    # Create a simple classification dataset\n+    X, y = make_classification(random_state=42)\n+\n+    # Create groups for LeaveOneGroupOut\n+    groups = np.zeros_like(y, dtype=int)\n+    groups[y.size // 2:] = 1\n+\n+    # Create an iterable of splits using LeaveOneGroupOut\n+    cv = LeaveOneGroupOut()\n+    splits = cv.split(X, y, groups=groups)\n+\n+    # Initialize the classifier and the SequentialFeatureSelector\n+    knc = KNeighborsClassifier(n_neighbors=5)\n+    sfs = SequentialFeatureSelector(knc, n_features_to_select=5, cv=splits)\n+\n+    # Fit the SequentialFeatureSelector\n+    sfs.fit(X, y)\n+\n+    # Check if the number of selected features is correct\n+    assert sfs.get_support().sum() == 5\n",
  "scikit-learn__scikit-learn-26323": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex b52e888..319eddf 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -22,6 +22,10 @@ from sklearn.compose import (\n from sklearn.exceptions import NotFittedError\n from sklearn.preprocessing import FunctionTransformer\n from sklearn.preprocessing import StandardScaler, Normalizer, OneHotEncoder\n+from sklearn.feature_selection import VarianceThreshold\n+import pandas as pd\n+import numpy as np\n+import pytest\n \n \n class Trans(TransformerMixin, BaseEstimator):\n",
  "scikit-learn__scikit-learn-9288": "diff --git a/sklearn/cluster/tests/test_k_means.py b/sklearn/cluster/tests/test_k_means.py\nindex abeeff0..3c26699 100644\n--- a/sklearn/cluster/tests/test_k_means.py\n+++ b/sklearn/cluster/tests/test_k_means.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for K-means\"\"\"\n import sys\n \n@@ -944,8 +945,38 @@ def test_k_means_empty_cluster_relocated():\n     assert len(set(km.labels_)) == 2\n     assert_allclose(km.cluster_centers_, [[-1], [1]])\n \n+def test_result_of_kmeans_equal_in_diff_n_jobs():\n+    # PR 9288\n+    rnd = np.random.RandomState(0)\n+    X = rnd.normal(size=(50, 10))\n+\n+    result_1 = KMeans(n_clusters=3, random_state=0, n_jobs=1).fit(X).labels_\n+    result_2 = KMeans(n_clusters=3, random_state=0, n_jobs=2).fit(X).labels_\n+    assert_array_equal(result_1, result_2)\n+\n+def test_kmeans_inertia_equal_in_diff_n_jobs():\n+    # Generate test data\n+    X, _ = make_blobs(n_samples=1000, centers=5, random_state=42)\n+\n+    # Test for consistent inertia with varying n_jobs\n+    inertia_values = []\n+    for n_jobs in range(1, 5):\n+        kmeans = KMeans(n_clusters=5, random_state=42, n_jobs=n_jobs)\n+        kmeans.fit(X)\n+        inertia_values.append(kmeans.inertia_)\n+\n+    # Check if all inertia values are the same\n+    assert len(set(inertia_values)) == 1, f\"Inertia values are not consistent across jobs: {inertia_values}\"\n+\n+def test_kmeans_consistent_results_with_fixed_random_seed():\n+    # Check consistency with fixed random state across different n_jobs\n+    X, _ = make_blobs(n_samples=100, centers=3, random_state=0)\n+\n+    kmeans1 = KMeans(n_clusters=3, random_state=42, n_jobs=1).fit(X)\n+    kmeans2 = KMeans(n_clusters=3, random_state=42, n_jobs=2).fit(X)\n \n-def test_minibatch_kmeans_partial_fit_int_data():\n+    assert_array_equal(kmeans1.labels_, kmeans2.labels_)\n+    assert_almost_equal(kmeans1.inertia_, kmeans2.inertia_)\n     # Issue GH #14314\n     X = np.array([[-1], [1]], dtype=np.int)\n     km = MiniBatchKMeans(n_clusters=2)\n",
  "sphinx-doc__sphinx-10323": "",
  "sphinx-doc__sphinx-10449": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 82ec43a..1aa0100 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1023,6 +1023,27 @@ def test_autodoc_typehints_description_no_undoc_doc_rtype(app):\n             '   Return type:\\n'\n             '      None\\n' == context)\n \n+import pytest\n+\n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\"})\n+def test_autodoc_typehints_description_class_constructor(app):\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: target.typehints.Square\\n',\n+        encoding='utf8'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n+    assert ('class target.typehints.Square\\n'\n+            '\\n'\n+            '   A class representing a square figure.\\n'\n+            '\\n'\n+            '   __init__(width: int, height: int)\\n'\n+            '      \\n'\n+            '      Parameters:\\n'\n+            '         **width** (*int*) --\\n'\n+            '         \\n'\n+            '         **height** (*int*) --\\n' == context)\n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\"})\n",
  "sphinx-doc__sphinx-10466": "diff --git a/tests/test_build_gettext.py b/tests/test_build_gettext.py\nindex a6fc946..ad8b103 100644\n--- a/tests/test_build_gettext.py\n+++ b/tests/test_build_gettext.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the build process with gettext builder with the test root.\"\"\"\n \n import gettext\n@@ -9,6 +10,7 @@ from subprocess import PIPE, CalledProcessError\n import pytest\n \n from sphinx.util.osutil import cd\n+from sphinx.builders.gettext import Catalog, MsgOrigin\n \n \n @pytest.mark.sphinx('gettext', srcdir='root-gettext')\n",
  "sphinx-doc__sphinx-10673": "",
  "sphinx-doc__sphinx-7440": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 975a00f..31f4f16 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -147,8 +147,38 @@ def test_glossary(app):\n     assert (\"term3\", \"term3\", \"term\", \"index\", \"term-term3\", -1) in objects\n     assert (\"term4\", \"term4\", \"term\", \"index\", \"term-term4\", -1) in objects\n \n+def test_glossary_case_sensitivity(app):\n+    text = (\".. glossary::\\n\"\n+            \"\\n\"\n+            \"   MySQL\\n\"\n+            \"       Description for MySQL\\n\"\n+            \"\\n\"\n+            \"   mysql\\n\"\n+            \"       Description for mysql\\n\")\n+\n+    # doctree\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (\n+        [glossary, definition_list, ([definition_list_item, ([term, (\"MySQL\",\n+                                                                     index)],\n+                                                             definition)],\n+                                     [definition_list_item, ([term, (\"mysql\",\n+                                                                     index)],\n+                                                             definition)])],\n+    ))\n+    assert_node(doctree[0][0][0][0][1],\n+                entries=[(\"single\", \"MySQL\", \"term-MySQL\", \"main\", None)])\n+    assert_node(doctree[0][0][0][1],\n+                [definition, nodes.paragraph, \"Description for MySQL\"])\n+    assert_node(doctree[0][0][1][0][1],\n+                entries=[(\"single\", \"mysql\", \"term-mysql\", \"main\", None)])\n+    assert_node(doctree[0][0][1][1],\n+                [definition, nodes.paragraph, \"Description for mysql\"])\n \n-def test_glossary_warning(app, status, warning):\n+    # index\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert (\"MySQL\", \"MySQL\", \"term\", \"index\", \"term-MySQL\", -1) in objects\n+    assert (\"mysql\", \"mysql\", \"term\", \"index\", \"term-mysql\", -1) in objects\n     # empty line between terms\n     text = (\".. glossary::\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-7757": "",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..e17e75e 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -15,6 +16,7 @@ from importlib import import_module\n import pytest\n \n from sphinx.ext.autodoc.mock import _MockModule, _MockObject, mock\n+from typing import TypeVar, Generic\n \n \n def test_MockModule():\n@@ -51,6 +53,21 @@ def test_MockObject():\n     assert obj.method() == \"string\"\n     assert isinstance(obj.other_method(), SubClass)\n \n+    # Test for generic-typed classes\n+    T = TypeVar('T')\n+\n+    class GenericSubClass(Generic[T], mock.SomeClass):\n+        \"\"\"docstring of GenericSubClass\"\"\"\n+\n+        def method(self, value: T) -> T:\n+            return value\n+\n+    generic_obj = GenericSubClass()\n+    assert GenericSubClass.__doc__ == \"docstring of GenericSubClass\"\n+    assert isinstance(generic_obj, GenericSubClass)\n+    assert generic_obj.method(10) == 10\n+    assert generic_obj.method(\"string\") == \"string\"\n+\n \n def test_mock():\n     modname = 'sphinx.unknown'\n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_napoleon.py b/tests/test_ext_napoleon.py\nindex 0676869..879d9af 100644\n--- a/tests/test_ext_napoleon.py\n+++ b/tests/test_ext_napoleon.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_napoleon\n     ~~~~~~~~~~~~~\n@@ -9,9 +10,30 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+class TestDecoratedInit(TestCase):\n+    def test_decorated_init_method(self):\n+        class SampleClass:\n+            @simple_decorator\n+            def __init__(self, x):\n+                \"\"\"Initialize with x.\"\"\"\n+                self.x = x\n+\n+        # Mocking the Sphinx application environment\n+        app = mock.Mock()\n+        what = 'class'\n+        name = '__init__'\n+        obj = SampleClass.__init__\n+        skip = False\n+        options = mock.Mock()\n+        options.napoleon_include_init_with_doc = True\n+\n+        # Assert that the __init__ method is not skipped for documentation\n+        self.assertIs(_skip_member(app, what, name, obj, skip, options), False)\n+\n import sys\n from collections import namedtuple\n from unittest import TestCase, mock\n+from sphinx.testing.util import simple_decorator\n \n from sphinx.application import Sphinx\n from sphinx.ext.napoleon import _process_docstring, _skip_member, Config, setup\n",
  "sphinx-doc__sphinx-7985": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 5b1b2ed..7659fbb 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -16,8 +16,15 @@ import pytest\n \n @pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n def test_defaults(app, status, warning):\n+    import os\n+    from pathlib import Path\n+\n     app.builder.build_all()\n \n+    # Create a dummy local file to simulate a valid local link\n+    valid_local_file = Path(app.srcdir) / 'conf.py'\n+    valid_local_file.touch()\n+\n     assert (app.outdir / 'output.txt').exists()\n     content = (app.outdir / 'output.txt').read_text()\n \n@@ -30,13 +37,26 @@ def test_defaults(app, status, warning):\n     # images should fail\n     assert \"Not Found for url: https://www.google.com/image.png\" in content\n     assert \"Not Found for url: https://www.google.com/image2.png\" in content\n-    assert len(content.splitlines()) == 5\n+    # Check local links (one valid, one invalid)\n+    assert \"[local] conf.py\" in content\n+    assert \"[broken] path/to/notfound\" in content\n+    assert len(content.splitlines()) == 7\n+\n+    # Clean up the dummy local file\n+    valid_local_file.unlink()\n \n \n @pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n def test_defaults_json(app, status, warning):\n+    import os\n+    from pathlib import Path\n+\n     app.builder.build_all()\n \n+    # Create a dummy local file to simulate a valid local link\n+    valid_local_file = Path(app.srcdir) / 'conf.py'\n+    valid_local_file.touch()\n+\n     assert (app.outdir / 'output.json').exists()\n     content = (app.outdir / 'output.json').read_text()\n     print(content)\n@@ -95,8 +115,15 @@ def test_defaults_json(app, status, warning):\n                        'https://www.google.com/image2.png']\n                    })\n def test_anchors_ignored(app, status, warning):\n+    import os\n+    from pathlib import Path\n+\n     app.builder.build_all()\n \n+    # Create a dummy local file to simulate a valid local link\n+    valid_local_file = Path(app.srcdir) / 'conf.py'\n+    valid_local_file.touch()\n+\n     assert (app.outdir / 'output.txt').exists()\n     content = (app.outdir / 'output.txt').read_text()\n \n",
  "sphinx-doc__sphinx-8035": "diff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex ad1d950..38f7acc 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_private_members\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -14,6 +15,31 @@ from test_ext_autodoc import do_autodoc\n \n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_specific_private_members(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\n+        \"members\": None,\n+        \"private-members\": \"_specific_private_func,_another_private_func\"\n+    }\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        '',\n+        '.. py:function:: _specific_private_func(name)',\n+        '   :module: target.private',\n+        '',\n+        '   Specific private function is a docstring().',\n+        '',\n+        '.. py:function:: _another_private_func(name)',\n+        '   :module: target.private',\n+        '',\n+        '   Another private function is a docstring().',\n+        '',\n+    ]\n+\n+# Original test case remains unchanged\n def test_private_field(app):\n     app.config.autoclass_content = 'class'\n     options = {\"members\": None}\n",
  "sphinx-doc__sphinx-8120": "",
  "sphinx-doc__sphinx-8269": "",
  "sphinx-doc__sphinx-8459": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex d1881df..8285e0d 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_configs\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -8,6 +9,40 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+import pytest\n+from sphinx.testing.util import SphinxTestApp\n+import sys\n+\n+@pytest.mark.skipif(sys.version_info < (3, 7), reason='python 3.7+ is required.')\n+@pytest.mark.sphinx('text', testroot='ext-autodoc')\n+def test_autodoc_type_aliases_with_description(app: SphinxTestApp):\n+    # simulate adding a custom .rst file that defines an alias and uses type hints\n+    (app.srcdir / 'types.py').write_text(\n+        \"from typing import Any, Dict\\n\"\n+        \"JSONObject = Dict[str, Any]\\n\"\n+        \"def example_function(data: JSONObject) -> JSONObject:\\n\"\n+        \"    '''Example function docstring.'''\\n\"\n+        \"    return {}\\n\"\n+    )\n+\n+    (app.srcdir / 'conf.py').write_text(\n+        \"autodoc_typehints = 'description'\\n\"\n+        \"autodoc_type_aliases = {'JSONObject': 'types.JSONObject'}\\n\"\n+    )\n+\n+    (app.srcdir / 'index.rst').write_text(\n+        \".. automodule:: types\\n\"\n+        \"    :members:\\n\"\n+    )\n+\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text()\n+    assert 'example_function(data)' in context\n+    assert 'Parameters:' in context\n+    assert 'data (types.JSONObject)' in context\n+    assert 'Return type:' in context\n+    assert 'types.JSONObject' in context\n+\n import platform\n import sys\n \n",
  "sphinx-doc__sphinx-8475": "",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8721": "",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex 3c31d3d..1f21924 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -515,8 +515,17 @@ def test_dict_customtype():\n     # Type is unsortable, just check that it does not crash\n     assert \"<CustomType(2)>: 2\" in description\n \n-\n-def test_getslots():\n+def test_object_description_enum_default_value():\n+    import enum\n+    class MyEnum(enum.Enum):\n+        ValueA = 10\n+        ValueB = 20\n+    \n+    def function_with_enum_default(e: MyEnum = MyEnum.ValueA):\n+        pass\n+    \n+    # Testing the representation of the default value in the function signature\n+    assert inspect.object_description(MyEnum.ValueA) == \"MyEnum.ValueA\"\n     class Foo:\n         pass\n \n",
  "sphinx-doc__sphinx-9320": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\nindex ff8df08..5ba65ba 100644\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -9,6 +9,7 @@\n \"\"\"\n \n import time\n+from os import path\n from io import StringIO\n \n import pytest\n",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..285ce81 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -54,6 +54,7 @@ from sphinx.pycode import ast\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n     (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n+    (\"(1,)\", \"(1,)\"),                             # Tuple (single element)\n     (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n",
  "sphinx-doc__sphinx-9591": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 29731ea..55e8f19 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -847,7 +847,31 @@ def test_pyproperty(app):\n     assert domain.objects['Class.prop2'] == ('index', 'Class.prop2', 'property', False)\n \n \n-def test_pydecorator_signature(app):\n+def test_pyproperty_with_cross_reference(app):\n+    text = (\".. py:class:: Point\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: x\\n\"\n+            \"      :type: int\\n\"\n+            \"   .. py:attribute:: y\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \".. py:class:: Square\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\")\n+    \n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n+    \n+    # Check if 'end' property correctly cross-references the 'Point' class\n+    assert_node(doctree[1][1][1], ([desc_signature, ([desc_annotation, \"property \"],\n+                                                     [desc_name, \"end\"],\n+                                                     [desc_annotation, \n+                                                      (\": \", [pending_xref, \"Point\"])])],\n+                                   [desc_content, ()]))\n+\n+    assert 'Square.end' in domain.objects\n+    assert domain.objects['Square.end'] == ('index', 'Square.end', 'property', False)\n     text = \".. py:decorator:: deco\"\n     domain = app.env.get_domain('py')\n     doctree = restructuredtext.parse(app, text)\n",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..c636965 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -756,7 +756,7 @@ def test_pymethod_options(app):\n \n     # :property:\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
  "sphinx-doc__sphinx-9711": "",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..c8a1592 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -236,6 +236,32 @@ def test_Point2D():\n     assert p2.distance(p3) == sqrt(17)/2\n \n \n+from sympy import sqrt\n+from sympy.geometry import Point, Point2D, Point3D\n+\n+def test_issue_11617():\n+    p1 = Point3D(1,0,2)\n+    p2 = Point2D(2,0)\n+    assert p1.distance(p2) == sqrt(5)\n+\n+def test_distance_3d_to_3d():\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point3D(2, 0, 0)\n+    assert p1.distance(p2) == sqrt(5)\n+\n+def test_distance_2d_to_3d():\n+    p1 = Point2D(1, 0)\n+    p2 = Point3D(1, 0, 2)\n+    assert p1.distance(p2) == sqrt(4)\n+\n+def test_distance_same_dimensionality():\n+    p1 = Point2D(1, 0)\n+    p2 = Point2D(4, 3)\n+    assert p1.distance(p2) == 5\n+    p3 = Point3D(1, 0, 0)\n+    p4 = Point3D(1, 4, 3)\n+    assert p3.distance(p4) == 5\n+\n def test_issue_9214():\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..1a8987e 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -741,7 +741,16 @@ def test_special_printers():\n     assert isinstance(func1(), mpi)\n     assert isinstance(func2(), mpi)\n \n-def test_true_false():\n+from sympy import Float\n+from sympy.utilities.lambdify import implemented_function\n+\n+def test_issue_12092():\n+    f = implemented_function('f', lambda x: x**2)\n+    g = implemented_function('g', lambda x: 2*x)\n+    assert f(f(2)).evalf() == Float(16)\n+    assert f(g(2)).evalf() == Float(16)\n+    assert g(f(2)).evalf() == Float(8)\n+    assert f(g(f(2))).evalf() == Float(64)\n     # We want exact is comparison here, not just ==\n     assert lambdify([], true)() is True\n     assert lambdify([], false)() is False\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..7965341 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,6 +83,15 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n+def test_sum_identity_matrix_elements():\n+    from sympy import Identity, Sum, symbols\n+\n+    n = symbols('n', integer=True, positive=True)\n+    In = Identity(n)\n+\n+    # Test that the sum of all elements in an identity matrix is 'n'\n+    total_sum = Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit()\n+    assert total_sum == n, \"The total sum of the elements of an Identity matrix should be 'n'.\"\n \n def test_Identity_doit():\n     Inn = Identity(Add(n, n, evaluate=False))\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..e37cb14 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -330,6 +330,25 @@ def test_args():\n     assert p._array_form == [3, 2, 0, 1, 5, 4]\n     p = Permutation((0, 3, 1, 2))\n     assert p._cyclic_form is None\n+\n+    # Additional test cases for non-disjoint cycles\n+    # Identity permutation: cycles [[0, 1], [0, 1]] should result in the identity\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+\n+    # Test with overlapping cycles that form a non-identity permutation\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([1, 2, 0])\n+\n+    # Test with multiple overlapping cycles\n+    assert Permutation([[0, 1], [1, 2], [2, 3]]) == Permutation([1, 2, 3, 0])\n+\n+    # Test with cycles that reset a previous part of the permutation\n+    assert Permutation([[0, 2], [0, 1]]) == Permutation([2, 0, 1])\n+\n+    # Test with cycles that are completely overlapping\n+    assert Permutation([[0, 1, 2], [2, 1, 0]]) == Permutation([0, 1, 2])\n+\n+    # Test with a larger set of overlapping cycles\n+    assert Permutation([[0, 1, 2, 3], [2, 3, 4, 5]]) == Permutation([1, 2, 3, 5, 0, 4])\n     assert p._array_form == [0, 3, 1, 2]\n     assert Permutation([0]) == Permutation((0, ))\n     assert Permutation([[0], [1]]) == Permutation(((0, ), (1, ))) == \\\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..72ab68f 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -489,8 +489,14 @@ def test_errors():\n     raises(ShapeError,\n         lambda: SparseMatrix(1, 2, [1, 2]) + SparseMatrix(2, 1, [2, 1]))\n \n-\n-def test_len():\n+def test_issue_matrix_hstack_vstack():\n+    # Test hstack with 0 x n matrices\n+    sparse_matrices_zero_rows = [SparseMatrix.zeros(0, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*sparse_matrices_zero_rows).shape == (0, 6)\n+    \n+    # Test vstack with n x 0 matrices\n+    sparse_matrices_zero_cols = [SparseMatrix.zeros(n, 0) for n in range(4)]\n+    assert SparseMatrix.vstack(*sparse_matrices_zero_cols).shape == (6, 0)\n     assert not SparseMatrix()\n     assert SparseMatrix() == SparseMatrix([])\n     assert SparseMatrix() == SparseMatrix([[]])\n",
  "sympy__sympy-13372": "diff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\nindex e95146a..6b09615 100644\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -170,6 +170,29 @@ def test_evalf_ramanujan():\n \n # Input that for various reasons have failed at some point\n \n+from sympy import Mul, Max, NS, Rational, I, exp, pi, sqrt, x, y, E, oo, S, cos, sin, ceiling, floor, log, factorial, as_mpmath\n+\n+def test_evalf_issue_13076():\n+    # Original test case provided in the issue\n+    assert NS(Mul(Max(0, y), x, evaluate=False).evalf()) == 'x*Max(0, y)'\n+\n+    # Additional test cases to ensure robustness\n+    # Test with different variable orders\n+    assert NS(Mul(x, Max(0, y), evaluate=False).evalf()) == 'x*Max(0, y)'\n+    assert NS(Mul(Max(y, 0), x, evaluate=False).evalf()) == 'Max(y, 0)*x'\n+    assert NS(Mul(x, Max(y, 0), evaluate=False).evalf()) == 'x*Max(y, 0)'\n+\n+    # Test with numeric values\n+    assert NS(Mul(Max(0, 3), 2, evaluate=False).evalf()) == '2*Max(0, 3)'\n+    assert NS(Mul(Max(3, 0), 2, evaluate=False).evalf()) == '2*Max(3, 0)'\n+\n+    # Test with symbolic and numeric combinations\n+    assert NS(Mul(Max(0, 3), x, evaluate=False).evalf()) == 'x*Max(0, 3)'\n+    assert NS(Mul(Max(3, 0), y, evaluate=False).evalf()) == 'y*Max(3, 0)'\n+\n+    # Test with nested expressions\n+    assert NS(Mul(Max(0, x + y), x, evaluate=False).evalf()) == 'x*Max(0, x + y)'\n+    assert NS(Mul(Max(x + y, 0), y, evaluate=False).evalf()) == 'y*Max(x + y, 0)'\n \n def test_evalf_bugs():\n     assert NS(sin(1) + exp(-10**10), 10) == NS(sin(1), 10)\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..3cc1ed2 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -272,8 +272,18 @@ def test_coth():\n \n     assert coth(k*pi*I) == -cot(k*pi)*I\n \n-\n-def test_coth_series():\n+    # Additional test case for the issue described\n+    assert coth(log(tan(2))) is not None\n+    assert coth(log(tan(3))) is not None\n+    assert coth(log(tan(5))) is not None\n+    assert coth(log(tan(6))) is not None\n+    assert coth(log(tan(8))) is not None\n+    assert coth(log(tan(9))) is not None\n+    assert coth(log(tan(11))) is not None\n+    assert coth(log(tan(12))) is not None\n+    assert coth(log(tan(13))) is not None\n+    assert coth(log(tan(15))) is not None\n+    assert coth(log(tan(18))) is not None\n     x = Symbol('x')\n     assert coth(x).series(x, 0, 8) == \\\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..a1687cf 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -155,7 +155,56 @@ def test_difference():\n         Union(Interval(0, 1, False, True), Interval(1, 2, True, False))\n \n     assert FiniteSet(1, 2, 3) - FiniteSet(2) == FiniteSet(1, 3)\n-    assert FiniteSet('ham', 'eggs') - FiniteSet('eggs') == FiniteSet('ham')\n+from sympy import symbols, FiniteSet, Interval, Complement, S, pi, Union, Intersection, EmptySet, oo\n+\n+x, y = symbols('x y')\n+\n+def test_complement_mixed_symbols_numbers():\n+    # Original test patch\n+    assert Complement(FiniteSet(x, y, 2), Interval(-10, 10)) == \\\n+           Complement(FiniteSet(x, y), Interval(-10, 10))\n+    # Additional test cases\n+    assert Complement(FiniteSet(x, y, 2, -5), Interval(-10, 10)) == \\\n+           Complement(FiniteSet(x, y), Interval(-10, 10))\n+    assert Complement(FiniteSet(x, y, 2, 11), Interval(-10, 10)) == \\\n+           Complement(FiniteSet(x, y, 11), Interval(-10, 10))\n+    assert Complement(FiniteSet(x, 0, 10, 20), Interval(-5, 15)) == \\\n+           Complement(FiniteSet(x, 20), Interval(-5, 15))\n+    assert Complement(FiniteSet(1, 2, 3, x, y), Interval(0, 2)) == \\\n+           Complement(FiniteSet(3, x, y), Interval(0, 2))\n+\n+    # Ensure no conflict with existing functions\n+    assert Complement(Interval(1, 3), Interval(1, 2)) == Interval(2, 3, True)\n+    assert Complement(FiniteSet(1, 3, 4), FiniteSet(3, 4)) == FiniteSet(1)\n+    assert Complement(Union(Interval(0, 2),\n+                            FiniteSet(2, 3, 4)), Interval(1, 3)) == \\\n+        Union(Interval(0, 1, False, True), FiniteSet(4))\n+\n+    assert not 3 in Complement(Interval(0, 5), Interval(1, 4), evaluate=False)\n+    assert -1 in Complement(S.Reals, S.Naturals, evaluate=False)\n+    assert not 1 in Complement(S.Reals, S.Naturals, evaluate=False)\n+\n+    assert Complement(S.Integers, S.UniversalSet) == EmptySet()\n+    assert S.UniversalSet.complement(S.Integers) == EmptySet()\n+\n+    assert (not 0 in S.Reals.intersect(S.Integers - FiniteSet(0)))\n+\n+    assert S.EmptySet - S.Integers == S.EmptySet\n+\n+    assert (S.Integers - FiniteSet(0)) - FiniteSet(1) == S.Integers - FiniteSet(0, 1)\n+\n+    assert S.Reals - Union(S.Naturals, FiniteSet(pi)) == \\\n+            Intersection(S.Reals - S.Naturals, S.Reals - FiniteSet(pi))\n+\n+def test_complement():\n+    assert Interval(0, 1).complement(S.Reals) == \\\n+        Union(Interval(-oo, 0, True, True), Interval(1, oo, True, True))\n+    assert Interval(0, 1, True, False).complement(S.Reals) == \\\n+        Union(Interval(-oo, 0, True, False), Interval(1, oo, True, True))\n+    assert Interval(0, 1, False, True).complement(S.Reals) == \\\n+        Union(Interval(-oo, 0, True, True), Interval(1, oo, False, True))\n+    assert Interval(0, 1, True, True).complement(S.Reals) == \\\n+        Union(Interval(-oo, 0, True, False), Interval(1, oo, False, True))\n     assert FiniteSet(1, 2, 3, 4) - Interval(2, 10, True, False) == \\\n         FiniteSet(1, 2)\n     assert FiniteSet(1, 2, 3, 4) - S.EmptySet == FiniteSet(1, 2, 3, 4)\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..dd8ab4a 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,32 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643():\n+    import sympy as sm\n+\n+    # Create a 6x6 identity matrix\n+    M = sm.eye(6)\n+\n+    # Create a 6x2 matrix of twos\n+    V = 2 * sm.ones(6, 2)\n+\n+    # Insert V into M at column 3\n+    result = M.col_insert(3, V)\n+\n+    # Expected matrix after insertion\n+    expected_result = sm.Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1],\n+    ])\n+\n+    assert result == expected_result, \"Matrix.col_insert() did not work as expected.\"\n+\n+# Add more test cases to ensure that the original functionality is preserved\n+def test_col_insert():\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..82a85a8 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -678,6 +678,37 @@ def test_Poly_mul():\n     assert 2 * Poly(x, x) == Poly(2*x, x)\n \n \n+from sympy import Poly, Symbol, S\n+\n+x = Symbol('x')\n+\n+def test_issue_13079():\n+    assert Poly(x)*x == Poly(x**2, x, domain='ZZ')\n+    assert x*Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert -2*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2)*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert Poly(x)*S(-2) == Poly(-2*x, x, domain='ZZ')\n+\n+# Additional test cases to thoroughly verify the fix\n+def test_multiplication_with_polynomial():\n+    y = Symbol('y')\n+    assert Poly(x)*Poly(x) == Poly(x**2, x)\n+    assert Poly(x, y)*Poly(y, y) == Poly(x*y, y)\n+    assert (2*x)*Poly(x) == Poly(2*x**2, x)\n+    assert x*(2*Poly(x)) == Poly(2*x**2, x)\n+    assert Poly(x)*Poly(x, y) == Poly(x**2, x, y)\n+\n+def test_multiplication_with_constants():\n+    assert 3*Poly(x) == Poly(3*x, x)\n+    assert Poly(x)*3 == Poly(3*x, x)\n+    assert S(3)*Poly(x) == Poly(3*x, x)\n+\n+def test_polynomial_with_zero():\n+    assert 0*Poly(x) == Poly(0, x)\n+    assert Poly(x)*0 == Poly(0, x)\n+    assert Poly(0, x)*x == Poly(0, x)\n+    assert x*Poly(0, x) == Poly(0, x)\n+\n def test_Poly_sqr():\n     assert Poly(x*y, x, y).sqr() == Poly(x**2*y**2, x, y)\n \n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..b0d67ab 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -54,6 +54,31 @@ def test_printmethod():\n             return \"foo\"\n     assert latex(R(x)) == \"foo\"\n \n+def test_latex_mul_symbol_custom():\n+    # Test with a custom multiplication symbol for latex output\n+    assert latex(3*x**2*y, mul_symbol='\\\\,') == r\"3\\,x^{2}\\,y\"\n+    assert latex(1.5*3**x, mul_symbol='\\\\,') == r\"1.5\\,3^{x}\"\n+\n+    # Verify with the default behavior for backward compatibility\n+    assert latex(3*x**2*y) == \"3 x^{2} y\"\n+    \n+def test_latex_mul_symbol_varied():\n+    # Different valid symbols\n+    assert latex(2*x*y, mul_symbol='ldot') == r\"2 \\,.\\, x \\,.\\, y\"\n+    assert latex(2*x*y, mul_symbol='times') == r\"2 \\times x \\times y\"\n+\n+    # Edge cases\n+    assert latex(2*x*y, mul_symbol='') == r\"2xy\"  # No symbol at all\n+\n+    # Check sympy's behavior with integrals and differentials\n+    assert latex(Integral(2*x**2*y, x)) == r\"\\int 2 x^{2} y\\, dx\"\n+\n+    # Test with invalid and default cases for backward compatibility\n+    try:\n+        latex(2*x*y, mul_symbol='invalid_symbol')\n+    except KeyError:\n+        print(\"Caught expected KeyError for invalid symbol\")\n+\n \n def test_latex_basic():\n     assert latex(1 + x) == \"x + 1\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..e42cd28 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -313,6 +313,15 @@ def test_as_mutable():\n     assert zeros(0, 3).as_immutable() == ImmutableMatrix(zeros(0, 3))\n     assert zeros(3, 0).as_immutable() == ImmutableMatrix(zeros(3, 0))\n \n+from sympy import Matrix, symbols\n+\n+def test_issue_13835():\n+    a = symbols('a')\n+    M = lambda n: Matrix([[i + a*j for i in range(n)] for j in range(n)])\n+    assert M(5).det() == 0\n+    assert M(6).det() == 0\n+    assert M(7).det() == 0\n+    assert isinstance(M(8).det(), int)  # Check that it doesn't raise an exception\n \n def test_determinant():\n \n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..4ded473 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -708,8 +708,39 @@ def test_issue_10003():\n     G = Gamma('g', 1, 2)\n     assert P(X < -1) == S.Zero\n     assert P(G < -1) == S.Zero\n-\n-def test_precomputed_cdf():\n+def test_issue_precomputed_cdf_resolution():\n+    from sympy import Piecewise, lowergamma, uppergamma, gamma, exp, sqrt, asin, pi, Rational\n+    from sympy.stats import cdf, density, Arcsin, Dagum, Erlang, Frechet, Gamma, GammaInverse, Kumaraswamy, Laplace, Logistic, Nakagami, StudentT, UniformSum\n+\n+    x = symbols('x', real=True, finite=True)\n+    \n+    # Test cases for the distributions mentioned in the issue\n+    assert cdf(Arcsin(\"x\", 0, 3))(1) == Piecewise((0, x < 0), (2*asin(sqrt(x/3))/pi, x <= 3), (1, True))\n+    \n+    assert cdf(Dagum(\"x\", Rational(1, 3), Rational(1, 5), 2))(3) == Piecewise(((1 + (x/2)**(-Rational(1, 3)))**(-Rational(1, 5)), x >= 0), (0, True))\n+    \n+    assert cdf(Erlang(\"x\", 1, 1))(1) == Piecewise((lowergamma(1, x)/gamma(1), x > 0), (0, True))\n+    \n+    assert cdf(Frechet(\"x\", Rational(4, 3), 1, 2))(3) == Piecewise((exp(-((x - 2)/1)**(-Rational(4, 3))), x >= 2), (0, True))\n+    \n+    assert cdf(Gamma(\"x\", 0.1, 2))(3).simplify() == lowergamma(0.1, x/2)/gamma(0.1)\n+    \n+    assert cdf(GammaInverse(\"x\", Rational(5, 7), 2))(3) == Piecewise((uppergamma(Rational(5, 7), 2/x)/gamma(Rational(5, 7)), x > 0), (0, True))\n+    \n+    assert cdf(Kumaraswamy(\"x\", Rational(1, 123), 5))(Rational(1, 3)) == Piecewise((0, x < 0), (-(-x**Rational(1, 123) + 1)**5 + 1, x <= 1), (1, True))\n+    \n+    assert cdf(Laplace(\"x\", 2, 3))(5) == Piecewise((0, x < 2), (-exp(-(x - 2)/3)/2 + 1, x >= 2))\n+    \n+    assert cdf(Logistic(\"x\", 1, 0.1))(2) == 1/(exp((1 - x)/0.1) + 1)\n+    \n+    assert cdf(Nakagami(\"x\", Rational(7, 3), 1))(2) == Piecewise((lowergamma(Rational(7, 3), Rational(7, 3)*x**2)/(gamma(Rational(7, 3))), x > 0), (0, True))\n+    \n+    assert cdf(StudentT(\"x\", 10))(2).simplify() == Rational(1, 2) + x*gamma(11/2)*hyper((1/2, 11/2), (3/2,), -x**2/10)/(sqrt(pi)*sqrt(10)*gamma(5))\n+    \n+    US = UniformSum(\"x\", 5)\n+    pdf01 = density(US)(x).subs(floor(x), 0).doit()   # pdf on (0, 1)\n+    cdf01 = cdf(US, evaluate=False)(x).subs(floor(x), 0).doit()   # cdf on (0, 1)\n+    assert tn(diff(cdf01, x), pdf01, x, a=0, b=0, c=1, d=0)\n     x = symbols(\"x\", real=True, finite=True)\n     mu = symbols(\"mu\", real=True, finite=True)\n     sigma, xm, alpha = symbols(\"sigma xm alpha\", positive=True, finite=True)\n",
  "sympy__sympy-13974": "",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_python.py b/sympy/printing/tests/test_python.py\nindex 73fc070..8ce81f8 100644\n--- a/sympy/printing/tests/test_python.py\n+++ b/sympy/printing/tests/test_python.py\n@@ -79,7 +79,17 @@ def test_python_keyword_function_name_escaping():\n         5*Function(\"for\")(8)) == \"for_ = Function('for')\\ne = 5*for_(8)\"\n \n \n-def test_python_relational():\n+from sympy import Eq, Ne, Symbol, Function, Rational, python\n+\n+def test_python_respects_strprinter_settings():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    # Verify that StrPrinter settings are respected for symbols in equations\n+    assert python(Eq(x, Rational(1, 2)), sympy_integers=True) == \"x = Symbol('x')\\ne = Eq(x, S(1)/2)\"\n+    assert python(Ne(x/(y + 1), y**2), sympy_integers=True) in [\n+        \"x = Symbol('x')\\ny = Symbol('y')\\ne = Ne(x/(1 + y), y**2)\",\n+        \"x = Symbol('x')\\ny = Symbol('y')\\ne = Ne(x/(y + 1), y**2)\"\n+    ]\n     assert python(Eq(x, y)) == \"e = Eq(x, y)\"\n     assert python(Ge(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x >= y\"\n     assert python(Le(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x <= y\"\n",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..6f128b1 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -4,6 +4,30 @@ from sympy.abc import x, y, z\n from sympy.utilities.pytest import raises\n \n \n+from sympy.physics.vector import ReferenceFrame, Vector\n+\n+N = ReferenceFrame('N')\n+\n+def test_vector_add_zero():\n+    # Ensure that adding a zero-multiplied vector works without raising an error\n+    try:\n+        result = sum([N.x, (0 * N.x)])\n+        assert result == N.x\n+    except TypeError as e:\n+        assert False, f\"Failed with TypeError: {e}\"\n+\n+    # Check if adding zero to a vector is handled correctly\n+    assert N.x + 0 == N.x\n+    assert 0 + N.x == N.x\n+\n+    # Check if adding zero-multiplied vector to another vector maintains properties\n+    assert N.x + (0 * N.x) == N.x\n+    assert (0 * N.x) + N.x == N.x\n+\n+    # Check zero vector addition\n+    zero_vec = 0 * N.x\n+    assert zero_vec + zero_vec == zero_vec\n+\n Vector.simp = True\n A = ReferenceFrame('A')\n \n",
  "sympy__sympy-14976": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..4439a4a 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1,3 +1,4 @@\n+\n from distutils.version import LooseVersion as V\n from itertools import product\n import math\n@@ -12,6 +13,7 @@ from sympy import (\n     DotProduct, Eq, Dummy, sinc)\n from sympy.printing.lambdarepr import LambdaPrinter\n from sympy.utilities.lambdify import implemented_function\n+import inspect\n from sympy.utilities.pytest import skip\n from sympy.utilities.decorator import conserve_mpmath_dps\n from sympy.external import import_module\n@@ -133,7 +135,13 @@ def test_math_lambda():\n            # if this succeeds, it can't be a python math function\n \n \n-@conserve_mpmath_dps\n+def test_lambdify_rational_mpmath():\n+    x = symbols('x')\n+    eqn = Eq(Rational(18, 1), 77 + Rational(1, 3))\n+    f = lambdify(x, eqn.lhs - eqn.rhs, modules='mpmath')\n+    source = inspect.getsource(f)\n+    assert 'mpmath.mpf' in source\n+    assert 'RisingFactorial' not in source  # RisingFactorial should be handled\n def test_mpmath_lambda():\n     mpmath.mp.dps = 50\n     sin02 = mpmath.mpf(\"0.19866933079506121545941262711838975037020672954020\")\n@@ -144,7 +152,13 @@ def test_mpmath_lambda():\n            # if this succeeds, it can't be a mpmath function\n \n \n-@conserve_mpmath_dps\n+def test_lambdify_rational_mpmath():\n+    x = symbols('x')\n+    eqn = Eq(Rational(18, 1), 77 + Rational(1, 3))\n+    f = lambdify(x, eqn.lhs - eqn.rhs, modules='mpmath')\n+    source = inspect.getsource(f)\n+    assert 'mpmath.mpf' in source\n+    assert 'RisingFactorial' not in source  # RisingFactorial should be handled\n def test_number_precision():\n     mpmath.mp.dps = 50\n     sin02 = mpmath.mpf(\"0.19866933079506121545941262711838975037020672954020\")\n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..31bf38a 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -73,11 +74,13 @@ def test_ndim_array_initiation():\n \n     from sympy.abc import x\n     rank_zero_array = ImmutableDenseNDimArray(x)\n-    assert len(rank_zero_array) == 0\n+    assert len(rank_zero_array) == 1\n     assert rank_zero_array.shape == ()\n     assert rank_zero_array.rank() == 0\n     assert rank_zero_array[()] == x\n-    raises(ValueError, lambda: rank_zero_array[0])\n+    assert len(list(rank_zero_array)) == 1\n+    assert list(rank_zero_array) == [x]\n+    raises(IndexError, lambda: rank_zero_array[0])\n \n \n def test_reshape():\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..0c7a7bf 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n@@ -18,6 +19,14 @@ def test_Integer():\n def test_Rational():\n     assert mcode(Rational(3, 7)) == \"3/7\"\n     assert mcode(Rational(18, 9)) == \"2\"\n+\n+def test_Max_Min():\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"\n+    assert mcode(Max(3, x, 5, y)) == \"Max[3, x, 5, y]\"\n+    assert mcode(Max(Max(x, y), z)) == \"Max[Max[x, y], z]\"\n+    assert mcode(Min(x, 2)) == \"Min[x, 2]\"\n+    assert mcode(Max(x, y, z)*Min(y, z)) == \"Max[x, y, z]*Min[y, z]\"\n     assert mcode(Rational(3, -7)) == \"-3/7\"\n     assert mcode(Rational(-3, -7)) == \"3/7\"\n     assert mcode(x + Rational(3, 7)) == \"x + 3/7\"\n",
  "sympy__sympy-15349": "diff --git a/sympy/algebras/tests/test_quaternion.py b/sympy/algebras/tests/test_quaternion.py\nindex c486cc1..b63057a 100644\n--- a/sympy/algebras/tests/test_quaternion.py\n+++ b/sympy/algebras/tests/test_quaternion.py\n@@ -112,6 +112,50 @@ def test_quaternion_conversions():\n                                                [sin(theta),  cos(theta), 0],\n                                                [0,           0,          1]])\n \n+def test_quaternion_to_rotation_matrix():\n+    \"\"\"Additional test cases for Quaternion.to_rotation_matrix() to verify correctness.\"\"\"\n+\n+    from sympy import symbols, cos, sin, trigsimp\n+    from sympy.algebras.quaternion import Quaternion\n+\n+    x = symbols('x')\n+\n+    # Test for quaternion representing a rotation around the x-axis\n+    q1 = Quaternion(cos(x/2), sin(x/2), 0, 0)\n+    expected_matrix1 = Matrix([\n+        [1,      0,       0],\n+        [0, cos(x), -sin(x)],\n+        [0, sin(x),  cos(x)]\n+    ])\n+    assert trigsimp(q1.to_rotation_matrix()) == expected_matrix1\n+\n+    # Test for quaternion representing a rotation around the y-axis\n+    q2 = Quaternion(cos(x/2), 0, sin(x/2), 0)\n+    expected_matrix2 = Matrix([\n+        [ cos(x), 0, sin(x)],\n+        [      0, 1,      0],\n+        [-sin(x), 0, cos(x)]\n+    ])\n+    assert trigsimp(q2.to_rotation_matrix()) == expected_matrix2\n+\n+    # Test for quaternion representing a rotation around the z-axis\n+    q3 = Quaternion(cos(x/2), 0, 0, sin(x/2))\n+    expected_matrix3 = Matrix([\n+        [cos(x), -sin(x), 0],\n+        [sin(x),  cos(x), 0],\n+        [     0,       0, 1]\n+    ])\n+    assert trigsimp(q3.to_rotation_matrix()) == expected_matrix3\n+\n+    # Test for quaternion representing a 180-degree rotation around the z-axis\n+    q4 = Quaternion(0, 0, 0, 1)\n+    expected_matrix4 = Matrix([\n+        [-1,  0,  0],\n+        [ 0, -1,  0],\n+        [ 0,  0,  1]\n+    ])\n+    assert q4.to_rotation_matrix() == expected_matrix4\n+\n     assert q2.to_axis_angle() == ((0, 0, sin(theta/2)/Abs(sin(theta/2))),\n                                    2*acos(cos(theta/2)))\n \n@@ -119,4 +163,4 @@ def test_quaternion_conversions():\n                [cos(theta), -sin(theta), 0, sin(theta) - cos(theta) + 1],\n                [sin(theta),  cos(theta), 0, -sin(theta) - cos(theta) + 1],\n                [0,           0,          1,  0],\n-               [0,           0,          0,  1]])\n+               [0,           0,          0,  1]])\n",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..2cde31b 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1625,7 +1625,23 @@ def test_Mod():\n     assert (3*i*x) % (2*i*y) == i*Mod(3*x, 2*y)\n     assert Mod(4*i, 4) == 0\n \n-    # issue 8677\n+    # issue 15493\n+    i, j = symbols('i j', integer=True, positive=True)\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+    assert Mod(8*i/j, 4) == 4*Mod(2*i/j, 1)\n+    assert Mod(8*i, 4) == 0\n+\n+    # Test cases for further validation of the fix\n+    k = Symbol('k', integer=True)\n+    assert Mod(6*k, 4) == 2*Mod(k, 2)\n+    assert Mod(9*k, 3) == 0\n+    assert Mod(15*k, 5) == 0\n+    assert Mod(9*k + 3, 3) == Mod(k, 1)\n+\n+    # Additional test cases to check the behavior of Mod with different inputs\n+    assert Mod(3*k + 1, 2) == Mod(k, 2) + 1\n+    assert Mod(3*k + 2, 2) == Mod(k, 2)\n+    assert Mod(2*k + 1, 4) == 2*Mod(k, 2) + 1\n     n = Symbol('n', integer=True, positive=True)\n     assert factorial(n) % n == 0\n     assert factorial(n + 2) % n == 0\n",
  "sympy__sympy-15809": "diff --git a/sympy/functions/elementary/tests/test_miscellaneous.py b/sympy/functions/elementary/tests/test_miscellaneous.py\nindex 821fd0c..04c5fcc 100644\n--- a/sympy/functions/elementary/tests/test_miscellaneous.py\n+++ b/sympy/functions/elementary/tests/test_miscellaneous.py\n@@ -85,7 +85,9 @@ def test_Min():\n     assert Min(p, p_).func is Min\n \n     # lists\n-    raises(ValueError, lambda: Min())\n+    from sympy import S, Min, Max\n+\n+    assert Min() == S.Infinity\n     assert Min(x, y) == Min(y, x)\n     assert Min(x, y, z) == Min(z, y, x)\n     assert Min(x, Min(y, z)) == Min(z, y, x)\n@@ -156,7 +158,7 @@ def test_Max():\n \n     # lists\n \n-    raises(ValueError, lambda: Max())\n+    assert Max() == S.NegativeInfinity\n     assert Max(x, y) == Max(y, x)\n     assert Max(x, y, z) == Max(z, y, x)\n     assert Max(x, Max(y, z)) == Max(z, y, x)\n",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..410d439 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1986,11 +1986,27 @@ def test_Add_is_zero():\n     x, y = symbols('x y', zero=True)\n     assert (x + y).is_zero\n \n+from sympy import I, simplify, Add\n \n-def test_issue_14392():\n+def test_issue_15873():\n+    # Original test case\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None  # The correct behavior should be None\n+    assert simplify(e).is_zero  # And when simplified, it should be True\n+\n+    # Additional test cases for completeness\n+    f = I + (1 - I)\n+    assert f.is_zero is None  # Should be None because (1 - I) + I should simplify to zero\n+    assert simplify(f).is_zero  # Should be True after simplification\n+\n+    g = Add(1, -1, I, -I)\n+    assert g.is_zero is True  # Directly simplifies to zero\n+\n+    h = Add(1, I, -1, -I)\n+    assert h.is_zero is True  # Also directly simplifies to zero\n     assert (sin(zoo)**2).as_real_imag() == (nan, nan)\n \n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..da052e3 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -478,6 +478,37 @@ def test_logcombine_complex_coeff():\n         i + log(x**2)\n \n \n+from sympy import Symbol, posify\n+\n+def test_posify_preserves_finite_assumption():\n+    # Original test case for finite assumption\n+    # issue 16438\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0 == {'positive': True, 'zero': False, 'imaginary': False,\n+                               'nonpositive': False, 'commutative': True, 'hermitian': True,\n+                               'real': True, 'nonzero': True, 'nonnegative': True,\n+                               'negative': False, 'complex': True, 'finite': True, 'infinite': False}\n+\n+    # Additional test cases to ensure comprehensive coverage\n+    # Check integer assumption preservation\n+    m = Symbol('m', integer=True, finite=True)\n+    eq, rep = posify(m)\n+    assert eq.assumptions0['integer'] is True\n+    assert eq.assumptions0['finite'] is True\n+\n+    # Check rational assumption preservation\n+    r = Symbol('r', rational=True, finite=True)\n+    eq, rep = posify(r)\n+    assert eq.assumptions0['rational'] is True\n+    assert eq.assumptions0['finite'] is True\n+\n+    # Check complex assumption preservation\n+    c = Symbol('c', complex=True, finite=True)\n+    eq, rep = posify(c)\n+    assert eq.assumptions0['complex'] is True\n+    assert eq.assumptions0['finite'] is True\n+\n def test_issue_5950():\n     x, y = symbols(\"x,y\", positive=True)\n     assert logcombine(log(3) - log(2)) == log(Rational(3,2), evaluate=False)\n",
  "sympy__sympy-16766": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 51a287f..c8e9c5e 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n \n@@ -12,6 +13,8 @@ from sympy.printing.pycode import (\n     MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter\n )\n from sympy.utilities.pytest import raises\n+from sympy.tensor import IndexedBase\n+from sympy.printing.pycode import PythonCodePrinter\n \n x, y, z = symbols('x y z')\n \n@@ -36,7 +39,28 @@ def test_PythonCodePrinter():\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n \n \n-def test_MpmathPrinter():\n+def test_Indexed_PythonCodePrinter():\n+    prntr = PythonCodePrinter()\n+    p = IndexedBase(\"p\")\n+    \n+    # Test single index\n+    assert prntr.doprint(p[0]) == 'p[0]'\n+    \n+    # Test multiple indices\n+    assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n+    \n+    # Test symbolic indices\n+    i, j = symbols('i j')\n+    assert prntr.doprint(p[i, j]) == 'p[i, j]'\n+\n+    # Test empty indices, should still work as 'p[]'\n+    assert prntr.doprint(p[()]) == 'p[]'\n+\n+    # Ensure no warnings or unsupported comments are present\n+    result = prntr.doprint(p[0])\n+    assert \"# Not supported in Python:\" not in result\n+    assert \"# Indexed\" not in result\n+    assert \"p[0]\" in result\n     p = MpmathPrinter()\n     assert p.doprint(sign(x)) == 'mpmath.sign(x)'\n     assert p.doprint(Rational(1, 2)) == 'mpmath.mpf(1)/mpmath.mpf(2)'\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py\nindex 23fddca..3f1b70d 100644\n--- a/sympy/utilities/tests/test_autowrap.py\n+++ b/sympy/utilities/tests/test_autowrap.py\n@@ -47,8 +47,17 @@ def test_cython_wrapper_scalar_function():\n         \"    return test(x, y, z)\")\n     assert source == expected\n \n-\n-def test_cython_wrapper_outarg():\n+def test_cython_autowrap_with_unused_array_arg():\n+    from sympy.utilities.autowrap import autowrap\n+    from sympy import MatrixSymbol\n+    import numpy as np\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0\n+    f = autowrap(expr, args=(x,), backend='cython')\n+    \n+    result = f(np.array([[1.0], [2.0]]))\n+    assert result == 1.0\n     from sympy import Equality\n     x, y, z = symbols('x,y,z')\n     code_gen = CythonCodeWrapper(C99CodeGen())\n",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..5f75360 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -237,8 +237,15 @@ def test_decipher_kid_rsa():\n     assert decipher_kid_rsa(3, (8, 3)) == 1\n     assert decipher_kid_rsa(2, (7, 4)) == 1\n \n+from sympy.crypto.crypto import encode_morse\n \n def test_encode_morse():\n+    # Tests for the digits to ensure the Morse code for \"1\" is correct\n+    assert encode_morse('1') == '.----'\n+    assert encode_morse('10') == '.----|-----'\n+    assert encode_morse('01') == '-----|.----'\n+    assert encode_morse('11') == '.----|.----'\n+    assert encode_morse('0123456789') == '-----|.----|..---|...--|....-|.....|-....|--...|---..|----.'\n     assert encode_morse('ABC') == '.-|-...|-.-.'\n     assert encode_morse('SMS ') == '...|--|...||'\n     assert encode_morse('SMS\\n') == '...|--|...||'\n",
  "sympy__sympy-17139": "",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..2ed9f71 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,3 +1,4 @@\n+\n from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n from sympy.simplify.sqrtdenest import _subsets as subsets\n from sympy.utilities.pytest import slow\n@@ -175,6 +176,21 @@ def test_subsets():\n         [0, 1, 1, 0], [1, 1, 1, 0], [0, 0, 0, 1], [1, 0, 0, 1], [0, 1, 0, 1],\n         [1, 1, 0, 1], [0, 0, 1, 1], [1, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]]\n \n+from sympy.simplify.sqrtdenest import _sqrt_match\n+from sympy.core.expr import unchanged\n+\n+def test_issue_12420():\n+    I = S.ImaginaryUnit\n+    # Test the specific case that was raising IndexError\n+    expr = (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2\n+    assert sqrtdenest(expr) == expr  # Should return unchanged\n+\n+    # Test with another expression\n+    e = 3 - sqrt(2)*sqrt(4 + I) + 3*I\n+    assert sqrtdenest(e) == e  # Should return unchanged\n+\n+    # Test _sqrt_match function\n+    assert _sqrt_match(4 + I) == []  # Should return an empty list\n \n def test_issue_5653():\n     assert sqrtdenest(\n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..f1c23da 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,5 @@\n-from sympy import I, Rational, Symbol, pi, sqrt, S\n+\n+from sympy import I, Rational, Symbol, pi, sqrt, S, sympify\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n@@ -252,7 +253,14 @@ def test_point3D():\n \n def test_Point2D():\n \n-    # Test Distance\n+    # Test scalar multiplication with Point\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+    scalar = sympify(2.0)\n+\n+    # Both expressions should produce Point(2, 2)\n+    assert point1 + point2 * scalar == Point(2, 2)\n+    assert point1 + scalar * point2 == Point(2, 2)\n     p1 = Point2D(1, 5)\n     p2 = Point2D(4, 2.5)\n     p3 = (6, 3)\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..cf539b6 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -553,8 +553,18 @@ def test_diophantine():\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n     assert diophantine((y**2-x), t) == set([(t**2, -t)])\n \n-\n-def test_general_pythagorean():\n+def test_issue_18186():\n+    from sympy.solvers.diophantine import diophantine\n+    from sympy.abc import x, y\n+    \n+    # Test with the symbols in one order\n+    result1 = diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True)\n+    expected = {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n+    assert result1 == expected, f\"Unexpected result {result1} for syms=(x, y)\"\n+    \n+    # Test with the symbols in the reversed order\n+    result2 = diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True)\n+    assert result2 == expected, f\"Unexpected result {result2} for syms=(y, x)\"\n     from sympy.abc import a, b, c, d, e\n \n     assert check_solutions(a**2 + b**2 + c**2 - d**2)\n",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..e2d553b 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -672,6 +672,12 @@ def test_latex_derivatives():\n         r'\\frac{d^{\\max\\left(n_{1}, n_{2}\\right)}}{d x^{\\max\\left(n_{1}, n_{2}\\right)}} f{\\left(x \\right)}'\n \n \n+def test_latex_subs():\n+    assert latex(Subs(x*y, (\n+        x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n+    assert latex(3*Subs(-x+y, (x,), (1,))) == r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+\n+\n def test_latex_subs():\n     assert latex(Subs(x*y, (\n         x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..cfb1ab1 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -514,7 +514,42 @@ def test_kernS():\n     assert one != 1 and one.expand() == 1\n \n \n-def test_issue_6540_6552():\n+def test_kernS_edge_cases():\n+    # Test case for the reported issue - 'kern' referenced before assignment\n+    # Using an expression that does not trigger the use of 'kern'\n+    assert kernS(\"(2*x)/(x-1)\") == 2*x/(x-1)\n+\n+    # Test an expression containing only addition and subtraction\n+    assert kernS(\"x + y - z\") == x + y - z\n+\n+    # Test an expression that will use the kern hack\n+    assert kernS(\"(1-x)*(1-y)\") == (1-x)*(1-y)\n+\n+    # Test with unmatched parentheses\n+    try:\n+        kernS(\"(x + (y - z)\")\n+    except SympifyError:\n+        pass  # Expected to raise error due to unmatched parenthesis\n+\n+    # Test with spaces that might trigger the kern\n+    assert kernS(\"a * (b + c)\") == a*(b + c)\n+    assert kernS(\"d - (e * f)\") == d - (e*f)\n+\n+    # Test with an expression that includes a negative term\n+    assert kernS(\"-(x + y)\") == -(x + y)\n+\n+    # Ensure kern is not referenced before assignment even with complex input\n+    complex_expr = \"2*(x+y) - 3*(a-b) + (c/d)\"\n+    assert kernS(complex_expr) == 2*(x+y) - 3*(a-b) + (c/d)\n+\n+    # Use of numeric literals with operations\n+    assert kernS(\"2**-(4+1)*(1-y)*x\") == (1-x*(1-y)/32)\n+\n+    # Literal strings that should not be altered\n+    assert kernS(\"literal_string\") == Symbol(\"literal_string\")\n+\n+    # Mixed types in a list\n+    assert kernS(['x + y', 'x - y']) == [x + y, x - y]\n     assert S('[[1/3,2], (2/5,)]') == [[Rational(1, 3), 2], (Rational(2, 5),)]\n     assert S('[[2/6,2], (2/4,)]') == [[Rational(1, 3), 2], (S.Half,)]\n     assert S('[[[2*(1)]]]') == [[[2]]]\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_operator.py b/sympy/physics/quantum/tests/test_operator.py\nindex 799aaae..94a9829 100644\n--- a/sympy/physics/quantum/tests/test_operator.py\n+++ b/sympy/physics/quantum/tests/test_operator.py\n@@ -1,12 +1,12 @@\n+\n from sympy import (Derivative, diff, Function, Integer, Mul, pi, sin, Symbol,\n-                   symbols)\n+                   symbols, Integer, Expr, conjugate)\n from sympy.physics.quantum.qexpr import QExpr\n from sympy.physics.quantum.dagger import Dagger\n from sympy.physics.quantum.hilbert import HilbertSpace\n-from sympy.physics.quantum.operator import (Operator, UnitaryOperator,\n-                                            HermitianOperator, OuterProduct,\n-                                            DifferentialOperator,\n-                                            IdentityOperator)\n+from sympy.physics.quantum.operator import (Operator, IdentityOperator, \n+                                            UnitaryOperator, HermitianOperator,\n+                                            OuterProduct, DifferentialOperator)\n from sympy.physics.quantum.state import Ket, Bra, Wavefunction\n from sympy.physics.quantum.qapply import qapply\n from sympy.physics.quantum.represent import represent\n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..91f633c 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -895,6 +895,14 @@ def test_sylow_subgroup():\n         else:\n             assert len(ls) == length\n \n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n     G = SymmetricGroup(100)\n     S = G.sylow_subgroup(3)\n     assert G.order() % S.order() == 0\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..63f493c 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -469,9 +469,20 @@ def test_multiset_permutations():\n         [1, 0, 1, 0, 0]\n         [1, 1, 0, 0, 0]\n         6\\n''')\n+import pytest\n \n \n def test_partitions():\n+    # Test to ensure that each partition is a unique dictionary object\n+    # by using id comparison\n+    partition_ids = [id(p) for p in partitions(6, k=2)]\n+    assert len(partition_ids) == len(set(partition_ids)), \"Partition dictionaries are not unique\"\n+\n+    partition_ids_m = [id(p) for p in partitions(8, k=4, m=3)]\n+    assert len(partition_ids_m) == len(set(partition_ids_m)), \"Partition dictionaries are not unique with constraints\"\n+\n+    partition_ids_full = [id(p) for p in partitions(10)]\n+    assert len(partition_ids_full) == len(set(partition_ids_full)), \"Full partition set dictionaries are not unique\"\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n         assert list(partitions(0, size=i)) == ans[i]\n",
  "sympy__sympy-20801": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e1c7e2..1f317ea 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -583,8 +583,13 @@ def test_Float():\n         assert Float(i) is a\n \n \n-\n-@conserve_mpmath_dps\n+def test_float_boolean_comparison():\n+    from sympy import S\n+    # Test comparing Float with S.false\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n def test_float_mpf():\n     import mpmath\n     mpmath.mp.dps = 100\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex a79cbe7..61cd273 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1913,8 +1913,15 @@ def test_Mod():\n     assert Mod(x, y).rewrite(floor) == x - y*floor(x/y)\n     assert ((x - Mod(x, y))/y).rewrite(floor) == floor(x/y)\n \n-\n-def test_Mod_Pow():\n+def test_issue_21373():\n+    # Reproducing the conditions described in the issue\n+    x_r, y_r = symbols('x_r y_r', real=True)\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    try:\n+        result = expr.subs({1: 1.0})\n+        assert isinstance(result, Expr)  # Ensure that the substitution returns an expression\n+    except PolynomialError:\n+        assert False, \"Unexpected PolynomialError encountered\"\n     # modular exponentiation\n     assert isinstance(Mod(Pow(2, 2, evaluate=False), 3), Integer)\n \n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..f410f89 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -16,7 +16,24 @@ from sympy.core import S, symbols\n from sympy.testing.pytest import raises\n \n \n+from sympy.polys.monomials import itermonomials\n+from sympy.polys.orderings import monomial_key\n+\n def test_monomials():\n+    # Test case for issue where min_degrees equals max_degrees\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    monomials = set(itermonomials([x1, x2, x3], 3, 3))\n+    expected_monomials = {x1**3, x2**3, x3**3, x1*x2**2, x1*x3**2, x2*x3**2, x1**2*x2, x1**2*x3, x2**2*x3, x1*x2*x3}\n+    assert monomials == expected_monomials, f\"Expected {expected_monomials}, but got {monomials}\"\n+\n+    # Additional test case for different min_degrees and max_degrees\n+    monomials_range = set(itermonomials([x1, x2, x3], 3, 2))\n+    expected_range_monomials = {\n+        x1**3, x2**3, x3**3, x1*x2**2, x1*x3**2, x2*x3**2,\n+        x1**2*x2, x1**2*x3, x2**2*x3, x1*x2*x3,\n+        x1**2, x2**2, x3**2, x1*x2, x1*x3, x2*x3\n+    }\n+    assert monomials_range == expected_range_monomials, f\"Expected {expected_range_monomials}, but got {monomials_range}\"\n \n     # total_degree tests\n     assert set(itermonomials([], 0)) == {S.One}\n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..b73b1a1 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -267,6 +267,7 @@ def test_String():\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n+    assert st.func(*st.args) == st  # Test for argument invariance\n \n \n     class Signifier(String):\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..89459de 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,7 @@\n+\n from sympy.core.basic import Basic\n+from sympy.core.parameters import evaluate\n+from sympy.geometry import Point2D\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..cb9156f 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n@@ -56,6 +57,21 @@ def test_PythonCodePrinter():\n     assert prntr.doprint(KroneckerDelta(x,y)) == '(1 if x == y else 0)'\n \n     assert prntr.doprint((2,3)) == \"(2, 3)\"\n+    \n+    # Tests for Min and Max\n+    assert prntr.doprint(Min(x, y)) == \"min(x, y)\"\n+    assert prntr.doprint(Max(x, y)) == \"max(x, y)\"\n+    \n+    # Additional test cases for Min and Max\n+    # Min with more than two arguments\n+    assert prntr.doprint(Min(x, y, z)) == \"min(x, y, z)\"\n+    \n+    # Max with more than two arguments\n+    assert prntr.doprint(Max(x, y, z)) == \"max(x, y, z)\"\n+    \n+    # Nested Min and Max\n+    assert prntr.doprint(Min(Max(x, y), z)) == \"min(max(x, y), z)\"\n+    assert prntr.doprint(Max(Min(x, y), z)) == \"max(min(x, y), z)\"\n     assert prntr.doprint([2,3]) == \"[2, 3]\"\n \n \n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..9f2dd47 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,25 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+from sympy import lambdify\n+\n+def test_lambdify_tuple_with_one_element():\n+    # Test that lambdify correctly handles a tuple with one element\n+    f_single = lambdify([], (1,))\n+    assert f_single() == (1,)\n+    # Inspect the generated source to ensure the tuple is formatted correctly\n+    source = inspect.getsource(f_single)\n+    assert 'return (1,)' in source\n+\n+def test_lambdify_tuple_with_multiple_elements():\n+    # Test that lambdify handles tuples with multiple elements as expected\n+    f_multiple = lambdify([], (1, 2))\n+    assert f_multiple() == (1, 2)\n+    # Inspect the generated source to ensure the tuple is formatted correctly\n+    source = inspect.getsource(f_multiple)\n+    assert 'return (1, 2)' in source\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..92430d3 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,8 +1,10 @@\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n from sympy.core.sympify import sympify  # can't import as S yet\n from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n+from sympy.core.function import Function, UndefinedFunction\n \n from sympy.testing.pytest import raises\n from sympy.core.symbol import disambiguate\n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..461c3f8 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -261,8 +261,29 @@ def test_kahane_simplify1():\n     r = kahane_simplify(t)\n     assert r.equals(-2*G(sigma)*G(rho)*G(nu))\n \n+def test_kahane_leading_gamma_matrix_order():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n+    \n+    # Case 1: Leading gamma matrices should not be reversed\n+    t = G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n \n-def test_gamma_matrix_class():\n+    # Case 2: Different order of the gamma matrices, should lead to same simplification\n+    t = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+    \n+    # Additional test cases\n+    # No contraction should keep order\n+    t = G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(G(rho)*G(sigma))\n+    \n+    # With three matrices and one contraction, the order of free matrices should be unaffected\n+    t = G(mu)*G(rho)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(-2*G(rho))\n     i, j, k = tensor_indices('i,j,k', LorentzIndex)\n \n     # define another type of TensorHead to see if exprs are correctly handled:\n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..f92cb09 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -30,6 +30,9 @@ def test_issue_10326():\n     assert Contains(-oo, Interval(-oo, oo)) == False\n \n \n+from sympy import Symbol, S, FiniteSet, Piecewise, Eq, Contains, Reals, Integers\n+from sympy.testing.pytest import raises\n+\n def test_binary_symbols():\n     x = Symbol('x')\n     y = Symbol('y')\n@@ -45,7 +48,16 @@ def test_as_set():\n     # containment in a Set -- rewriting as a Set is not yet implemented\n     raises(NotImplementedError, lambda:\n            Contains(x, FiniteSet(y)).as_set())\n+def test_as_relational():\n+    x = Symbol('x')\n+    assert Contains(x, FiniteSet(1)).as_set().as_relational(x) == Eq(x, 1)\n+    assert Contains(x, S.Integers).as_set().as_relational(x) == S.Integers.as_relational(x)\n+    assert Contains(x, S.Reals).as_set().as_relational(x) == S.Reals.as_relational(x)\n \n-def test_type_error():\n+def test_piecewise_with_contains():\n+    x = Symbol('x')\n+    p = Piecewise((6, Contains(x, S.Reals)), (7, True))\n+    assert p.subs(x, 0) == 6\n+    assert p.subs(x, S.Complexes) == 7\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..57865d2 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,7 +528,25 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n-def test_issue_20288():\n+from sympy.core.numbers import E\n+from sympy.physics.units import exp, impedance, capacitance, time, ohm, farad, second\n+\n+def test_issue_24062():\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n     u = Quantity('u')\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..ef1d24d 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -562,6 +562,49 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n+from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+from sympy.physics.units.systems.si import SI\n+\n+def test_issue_24211():\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1 * T1 + V1\n+    # should not throw ValueError here\n+    factor, dimension = SI._collect_factor_and_dimension(expr)\n+\n+    assert dimension == velocity\n+    assert factor == -8.8 * meter / second\n+\n+def test_collect_factor_and_dimension_equivalent_dimensions():\n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * meter / second)\n+\n+    a1 = Quantity('a1')\n+    SI.set_quantity_dimension(a1, acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)\n+\n+    t1 = Quantity('t1')\n+    SI.set_quantity_dimension(t1, time)\n+    SI.set_quantity_scale_factor(t1, 5 * second)\n+\n+    expr1 = a1 * t1 + v1\n+    # This should not raise a ValueError\n+    factor, dimension = SI._collect_factor_and_dimension(expr1)\n+\n+    assert dimension == velocity\n+    assert factor == (-9.8 * 5 + 2) * meter / second\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..67768ec 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,3 +1,4 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n@@ -106,4 +107,18 @@ def test_check_homomorphism():\n     a = Permutation(1,2,3,4)\n     b = Permutation(1,3)\n     G = PermutationGroup([a, b])\n-    raises(ValueError, lambda: homomorphism(G, G, [a], [a]))\n+    raises(ValueError, lambda: homomorphism(G, G, [a], [a]))\n+\n+    # Test case for DihedralGroup(3) to ensure images define a homomorphism\n+    D3 = DihedralGroup(3)\n+    T = homomorphism(D3, D3, D3.generators, D3.generators)\n+    assert T.is_isomorphism()\n+\n+    # Additional test case: verify homomorphism with inverses\n+    a = Permutation(0, 1)\n+    b = Permutation(0, 1, 2)\n+    G = PermutationGroup([a, b])\n+    # Define a homomorphism from G to itself that also considers inverses\n+    T = homomorphism(G, G, G.generators, G.generators)\n+    assert T(a*b**-1) == a*b**-1\n+    assert T.is_homomorphism()\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..6c087d3 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -249,6 +249,9 @@ def test_PolyElement_copy():\n     g[(1, 1, 1)] = 7\n     assert f != g\n \n+from sympy import ring, ZZ, symbols\n+from sympy.testing.pytest import raises\n+\n def test_PolyElement_as_expr():\n     R, x, y, z = ring(\"x,y,z\", ZZ)\n     f = 3*x**2*y - x*y*z + 7*z**3 + 1\n@@ -267,7 +270,11 @@ def test_PolyElement_as_expr():\n \n     raises(ValueError, lambda: f.as_expr(X))\n \n-    R, = ring(\"\", ZZ)\n+    U, V, W = symbols(\"u,v,w\")\n+    g = 3*U**2*V - U*V*W + 7*W**3 + 1\n+    assert f.as_expr(U, V, W) == g\n+\n+    raises(ValueError, lambda: f.as_expr(X, Y))\n     assert R(3).as_expr() == 3\n \n def test_PolyElement_from_expr():\n",
  "sympy__sympy-24661": "diff --git a/sympy/parsing/tests/test_sympy_parser.py b/sympy/parsing/tests/test_sympy_parser.py\nindex 3723931..7a1a970 100644\n--- a/sympy/parsing/tests/test_sympy_parser.py\n+++ b/sympy/parsing/tests/test_sympy_parser.py\n@@ -274,6 +274,21 @@ def test_convert_equals_signs():\n         transformations=transformations) == Eq(Eq(2*y, x), False)\n \n \n+from sympy.core import Eq, Lt, Le, Gt, Ge, Ne\n+from sympy.parsing.sympy_parser import parse_expr\n+\n+def test_issue_24288():\n+    inputs = {\n+        \"1 < 2\": Lt(1, 2, evaluate=False),\n+        \"1 <= 2\": Le(1, 2, evaluate=False),\n+        \"1 > 2\": Gt(1, 2, evaluate=False),\n+        \"1 >= 2\": Ge(1, 2, evaluate=False),\n+        \"1 != 2\": Ne(1, 2, evaluate=False),\n+        \"1 == 2\": Eq(1, 2, evaluate=False)\n+    }\n+    for text, result in inputs.items():\n+        assert parse_expr(text, evaluate=False) == result\n+\n def test_parse_function_issue_3539():\n     x = Symbol('x')\n     f = Function('f')\n",
  "astropy__astropy-14369": "diff --git a/astropy/units/tests/test_format.py b/astropy/units/tests/test_format.py\nindex 062b5f4..f627875 100644\n--- a/astropy/units/tests/test_format.py\n+++ b/astropy/units/tests/test_format.py\n@@ -35,6 +35,13 @@ from astropy.units.utils import is_effectively_unity\n         ([\"mag(ct/s)\"], u.MagUnit(u.ct / u.s)),\n         ([\"dex\"], u.dex),\n         ([\"dex(cm s**-2)\", \"dex(cm/s2)\"], u.DexUnit(u.cm / u.s**2)),\n+        ([\"km/s/Mpc\"], u.km / u.s / u.Mpc),\n+        ([\"km/(s.Mpc)\"], u.km / u.s / u.Mpc),\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.W / (u.m * u.kpc**2))),\n+        ([\"1.5\u00d710+11/m\"], u.Unit(1.5e11 / u.m)),\n+        ([\"/s\"], u.s**-1),\n+        \"km/s.Mpc-1\",\n+        \"/s.Mpc\",\n     ],\n )\n def test_unit_grammar(strings, unit):\n@@ -90,6 +97,13 @@ def test_unit_grammar_fail(string):\n         ([\"[cm/s2]\"], dex(u.cm / u.s**2)),\n         ([\"[K]\"], dex(u.K)),\n         ([\"[-]\"], dex(u.dimensionless_unscaled)),\n+        ([\"km/s/Mpc\"], u.km / u.s / u.Mpc),\n+        ([\"km/(s.Mpc)\"], u.km / u.s / u.Mpc),\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.W / (u.m * u.kpc**2))),\n+        ([\"1.5\u00d710+11/m\"], u.Unit(1.5e11 / u.m)),\n+        ([\"/s\"], u.s**-1),\n+        \"km/s.Mpc-1\",\n+        \"/s.Mpc\",\n     ],\n )\n def test_cds_grammar(strings, unit):\n",
  "astropy__astropy-14598": "",
  "django__django-11299": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex b3dc643..61a1e26 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1896,6 +1896,33 @@ class OperationTests(OperationTestBase):\n         with self.assertRaises(IntegrityError), transaction.atomic():\n             Author.objects.create(name='Albert', rebate='10$')\n         author = Author.objects.create(name='Albert', rebate='10%')\n+\n+    @skipUnlessDBFeature('supports_table_check_constraints')\n+    def test_check_constraint_with_or_and(self):\n+        app_label = 'test_checkconstraint_with_or_and'\n+        constraint_name = 'field_1_has_value_if_flag_set'\n+        from_state = self.set_up_test_model(app_label)\n+        \n+        check = models.Q(flag__exact=True, field_1__isnull=False) | models.Q(flag__exact=False)\n+        constraint = models.CheckConstraint(check=check, name=constraint_name)\n+        operation = migrations.AddConstraint('TestConstraint', constraint)\n+        \n+        to_state = from_state.clone()\n+        operation.state_forwards(app_label, to_state)\n+\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, from_state, to_state)\n+\n+        TestConstraint = to_state.apps.get_model(app_label, 'TestConstraint')\n+        \n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            TestConstraint.objects.create(field_1=None, flag=True)\n+        \n+        obj = TestConstraint.objects.create(field_1=1, flag=True)\n+        self.assertEqual(TestConstraint.objects.get(), obj)\n+        \n+        obj = TestConstraint.objects.create(field_1=None, flag=False)\n+        self.assertEqual(TestConstraint.objects.filter(flag=False).count(), 1)\n         self.assertEqual(Author.objects.get(), author)\n \n     @skipUnlessDBFeature('supports_table_check_constraints')\n",
  "django__django-11477": "diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex e4898b6..764d7f7 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -164,6 +164,40 @@ class URLTranslationTests(URLTestCaseBase):\n             self.assertEqual(translation.get_language(), 'nl')\n \n \n+    def test_translate_url_with_optional_parameters(self):\n+        with translation.override('en'):\n+            # Test URLs where optional parameter is present\n+            self.assertEqual(translate_url('/en/with-arguments/regular-argument/optional.html', 'nl'),\n+                             '/nl/with-arguments/regular-argument/optional.html')\n+            # Test URLs where optional parameter is missing\n+            self.assertEqual(translate_url('/en/with-arguments/regular-argument/', 'nl'),\n+                             '/nl/with-arguments/regular-argument/')\n+        \n+        with translation.override('nl'):\n+            # Test reverse translation with optional parameter\n+            self.assertEqual(translate_url('/nl/with-arguments/regular-argument/optional.html', 'en'),\n+                             '/en/with-arguments/regular-argument/optional.html')\n+            # Test reverse translation with optional parameter missing\n+            self.assertEqual(translate_url('/nl/with-arguments/regular-argument/', 'en'),\n+                             '/en/with-arguments/regular-argument/')\n+\n+        # Additional test for regex optional\n+        with translation.override('en'):\n+            # URL with both parameters\n+            self.assertEqual(translate_url('/en/regex_optional/1/2/', 'nl'),\n+                             '/nl/regex_optional/1/2/')\n+            # URL with only required parameter\n+            self.assertEqual(translate_url('/en/regex_optional/1/', 'nl'),\n+                             '/nl/regex_optional/1/')\n+            \n+        with translation.override('nl'):\n+            # Reverse URL with both parameters\n+            self.assertEqual(translate_url('/nl/regex_optional/1/2/', 'en'),\n+                             '/en/regex_optional/1/2/')\n+            # Reverse URL with only required parameter\n+            self.assertEqual(translate_url('/nl/regex_optional/1/', 'en'),\n+                             '/en/regex_optional/1/')\n+\n class URLNamespaceTests(URLTestCaseBase):\n     \"\"\"\n     Tests if the translations are still working within namespaces.\n",
  "django__django-12273": "diff --git a/tests/model_inheritance_regress/tests.py b/tests/model_inheritance_regress/tests.py\nindex d79faca..9cbef0e 100644\n--- a/tests/model_inheritance_regress/tests.py\n+++ b/tests/model_inheritance_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Regression tests for Model inheritance behavior.\n \"\"\"\n@@ -6,7 +7,27 @@ from operator import attrgetter\n from unittest import expectedFailure\n \n from django import forms\n+from uuid import uuid4\n from django.test import TestCase\n+from .models import Item, Derived\n+\n+class ResetPrimaryKeyTestCase(TestCase):\n+    def setUp(self):\n+        self.derived = Derived.objects.create(f=True)\n+\n+    def test_reset_primary_key_creates_new_instance(self):\n+        item = Item.objects.get(pk=self.derived.pk)\n+        obj1 = item.derived\n+        obj1.reset()\n+        obj1.save()\n+        # Assert that a new instance should have been created\n+        self.assertEqual(Derived.objects.count(), 2)\n+        self.assertEqual(Item.objects.count(), 2)\n+\n+    def test_reset_primary_key_retains_old_instance(self):\n+        # Ensure the old instance still exists\n+        old_instance = Derived.objects.get(pk=self.derived.pk)\n+        self.assertTrue(old_instance.f)\n \n from .models import (\n     ArticleWithAuthor, BachelorParty, BirthdayParty, BusStation, Child,\n",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..fcd69fc 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -696,10 +696,15 @@ class FastDeleteTests(TestCase):\n                 (0, {}),\n             )\n \n-    def test_fast_delete_combined_relationships(self):\n+    def test_fast_delete_all(self):\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        # No subqueries should be used when performing a full delete.\n+        self.assertNotIn('SELECT', sql)\n         # The cascading fast-delete of SecondReferrer should be combined\n         # in a single DELETE WHERE referrer_id OR unique_field.\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..652e851 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,8 +1,10 @@\n+\n import unittest\n from decimal import Decimal\n \n from django.core import validators\n from django.core.exceptions import ValidationError\n+from django.core.exceptions import ValidationError\n from django.db import connection, models\n from django.test import TestCase\n \n@@ -25,7 +27,23 @@ class DecimalFieldTests(TestCase):\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n \n-    def test_default(self):\n+    def test_invalid_value(self):\n+        field = models.DecimalField(max_digits=4, decimal_places=2)\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        tests = [\n+            (),\n+            [],\n+            {},\n+            set(),\n+            object(),\n+            complex(1, 2),\n+            'non-numeric string',\n+            b'non-numeric byte-string',\n+        ]\n+        for value in tests:\n+            with self.subTest(value=value):\n+                with self.assertRaisesMessage(ValidationError, msg % (value,)):\n+                    field.to_python(value)\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n \n",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..68bf45c 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n \n@@ -5,7 +6,7 @@ import django\n from django.db import models\n from django.test import TestCase\n \n-from .models import Container, Event, Group, Happening, M2MModel, MyEvent\n+from .models import Container, Event, Group, Happening, M2MModel, MyEvent, Toy\n \n \n class PickleabilityTestCase(TestCase):\n@@ -172,7 +173,37 @@ class PickleabilityTestCase(TestCase):\n         m2ms = pickle.loads(pickle.dumps(m2ms))\n         self.assertSequenceEqual(m2ms, [m2m])\n \n-    def test_pickle_exists_queryset_still_usable(self):\n+    def test_pickle_values_annotate(self):\n+        Toy.objects.create(name='foo', price=10, material='wood')\n+        Toy.objects.create(name='bar', price=20, material='plastic')\n+        Toy.objects.create(name='baz', price=100, material='wood')\n+        \n+        qs = Toy.objects.values('material').annotate(total_price=models.Sum('price'))\n+        reloaded_qs = Toy.objects.all()\n+        reloaded_qs.query = pickle.loads(pickle.dumps(qs.query))\n+        \n+        # Ensure reloaded queryset returns dictionaries with the correct data\n+        expected_result = list(qs)\n+        result = list(reloaded_qs)\n+        \n+        self.assertEqual(result, expected_result)\n+        self.assertTrue(all(isinstance(item, dict) for item in result))\n+\n+    def test_pickle_values_list_annotate(self):\n+        Toy.objects.create(name='foo', price=10, material='wood')\n+        Toy.objects.create(name='bar', price=20, material='plastic')\n+        Toy.objects.create(name='baz', price=100, material='wood')\n+\n+        qs = Toy.objects.values_list('material').annotate(total_price=models.Sum('price'))\n+        reloaded_qs = Toy.objects.all()\n+        reloaded_qs.query = pickle.loads(pickle.dumps(qs.query))\n+        \n+        # Ensure reloaded queryset returns lists with the correct data\n+        expected_result = list(qs)\n+        result = list(reloaded_qs)\n+        \n+        self.assertEqual(result, expected_result)\n+        self.assertTrue(all(isinstance(item, tuple) for item in result))\n         group = Group.objects.create(name='group')\n         Event.objects.create(title='event', group=group)\n         groups = Group.objects.annotate(\n",
  "django__django-13449": "diff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\nindex 3f59cdf..d9c7568 100644\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -11,4 +11,5 @@ class Employee(models.Model):\n     department = models.CharField(max_length=40, blank=False, null=False)\n     hire_date = models.DateField(blank=False, null=False)\n     age = models.IntegerField(blank=False, null=False)\n-    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\n",
  "django__django-13512": "diff --git a/tests/forms_tests/field_tests/test_jsonfield.py b/tests/forms_tests/field_tests/test_jsonfield.py\nindex e31bff4..8bd1518 100644\n--- a/tests/forms_tests/field_tests/test_jsonfield.py\n+++ b/tests/forms_tests/field_tests/test_jsonfield.py\n@@ -30,6 +30,17 @@ class JSONFieldTest(SimpleTestCase):\n         self.assertEqual(field.prepare_value(None), 'null')\n         self.assertEqual(field.prepare_value('foo'), '\"foo\"')\n \n+    def test_unicode_characters(self):\n+        field = JSONField()\n+        # Test with Chinese characters\n+        self.assertEqual(field.prepare_value({'a': '\u4f60\u597d\uff0c\u4e16\u754c'}), '{\"a\": \"\u4f60\u597d\uff0c\u4e16\u754c\"}')\n+        # Test with emojis\n+        self.assertEqual(field.prepare_value({'a': '\ud83d\ude00\ud83d\udc31'}), '{\"a\": \"\ud83d\ude00\ud83d\udc31\"}')\n+        # Test with a mix of languages and special characters\n+        self.assertEqual(field.prepare_value({'a': '\u4f60\u597d\uff0c\u4e16\u754c', 'b': 'ja\u017a\u0144', 'c': '\ud83d\ude00'}), '{\"a\": \"\u4f60\u597d\uff0c\u4e16\u754c\", \"b\": \"ja\u017a\u0144\", \"c\": \"\ud83d\ude00\"}')\n+        # Test with a list containing Unicode characters\n+        self.assertEqual(field.prepare_value(['\u4f60\u597d\uff0c\u4e16\u754c', 'ja\u017a\u0144', '\ud83d\ude00']), '[\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\", \"\ud83d\ude00\"]')\n+\n     def test_widget(self):\n         field = JSONField()\n         self.assertIsInstance(field.widget, Textarea)\n",
  "django__django-14404": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 8fb91af..7ae0c5e 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -6603,6 +6603,42 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         self.assertRedirects(response, known_url, status_code=301, target_status_code=403)\n \n     @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name_different_prefix(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        # Simulate a request with a script name '/different_prefix/'\n+        response = self.client.get(known_url[:-1], SCRIPT_NAME='/different_prefix/')\n+        self.assertRedirects(\n+            response,\n+            '/different_prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/another_prefix/')\n+    def test_missing_slash_append_slash_true_force_script_name_different_prefix(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        # Test redirection with FORCE_SCRIPT_NAME set to a different prefix\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/another_prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n         user = User.objects.create_user(\n             username='user',\n@@ -6629,6 +6665,42 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         self.assertEqual(response.status_code, 404)\n \n     @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name_different_prefix(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        # Simulate a request with a script name '/different_prefix/'\n+        response = self.client.get(known_url[:-1], SCRIPT_NAME='/different_prefix/')\n+        self.assertRedirects(\n+            response,\n+            '/different_prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/another_prefix/')\n+    def test_missing_slash_append_slash_true_force_script_name_different_prefix(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        # Test redirection with FORCE_SCRIPT_NAME set to a different prefix\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/another_prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n     def test_single_model_no_append_slash(self):\n         superuser = User.objects.create_user(\n             username='staff',\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..a44aba5 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -691,7 +691,31 @@ class WriterTests(SimpleTestCase):\n         result = self.safe_exec(output)\n         self.assertIn(\"Migration\", result)\n \n-    def test_migration_path(self):\n+    def test_migration_with_custom_field_and_mixin(self):\n+        \"\"\"\n+        Test migration generation with a custom field and mixin to ensure all necessary imports are present.\n+        \"\"\"\n+        fields = {\n+            'name': models.TextField(primary_key=True),\n+        }\n+\n+        migration = type(\"Migration\", (migrations.Migration,), {\n+            \"operations\": [\n+                migrations.CreateModel(\n+                    name=\"MyModel\",\n+                    fields=tuple(fields.items()),\n+                    bases=(\"app.models.MyMixin\", models.Model),\n+                ),\n+            ],\n+            \"dependencies\": [],\n+        })\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        # Execute the migration string to verify it doesn't raise errors\n+        result = self.safe_exec(output)\n+        self.assertIn(\"Migration\", result)\n+        # Check that the necessary import for `models` is present\n+        self.assertIn(\"from django.db import models\", output)\n         test_apps = [\n             'migrations.migrations_test_apps.normal',\n             'migrations.migrations_test_apps.with_package_model',\n",
  "django__django-15375": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1d4ef56..c541c47 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1624,6 +1624,20 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertAlmostEqual(result['value'], Decimal.from_float(math.pi), places=6)\n \n+    def test_aggregation_default_after_annotation(self):\n+        # Test that using default in an aggregate after annotate works as expected.\n+        result = Book.objects.annotate(\n+            idx=F('id')\n+        ).aggregate(Sum('id', default=0))\n+        self.assertEqual(result['id__sum'], Book.objects.aggregate(Sum('id'))['id__sum'])\n+\n+    def test_aggregation_default_in_annotation(self):\n+        # Test when default is used within an annotation.\n+        result = Book.objects.annotate(\n+            idx=Coalesce(Sum('id', default=0), 0)\n+        ).aggregate(Sum('id'))\n+        self.assertEqual(result['id__sum'], Book.objects.aggregate(Sum('id'))['id__sum'])\n+\n     def test_aggregation_default_passed_another_aggregate(self):\n         result = Book.objects.aggregate(\n             value=Sum('price', filter=Q(rating__lt=3.0), default=Avg('pages') / 10.0),\n@@ -1642,4 +1656,4 @@ class AggregateTestCase(TestCase):\n             count=Count('id'),\n             exists=Exists(Author.objects.extra(where=['1=0'])),\n         )\n-        self.assertEqual(len(qs), 6)\n+        self.assertEqual(len(qs), 6)\n",
  "django__django-15695": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 99db46a..71ee452 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -2984,10 +2984,58 @@ class OperationTests(OperationTestBase):\n         with connection.schema_editor() as editor:\n             operation.database_forwards(app_label, editor, project_state, new_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+        # Test rename and restore for unnamed index\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        self.assertIndexNameExists(table_name, \"old_pony_test_idx\")\n+        # Re-apply renaming.\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+        \n+        # Additional test for renaming an unnamed index multiple times\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        self.assertIndexNameExists(table_name, \"old_pony_test_idx\")\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+        \n+        # Ensure no crash on repeated renaming\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+        \n+        definition = operation.deconstruct()\n+        self.assertEqual(definition[0], \"RenameIndex\")\n         # Reverse is a no-op.\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             operation.database_backwards(app_label, editor, new_state, project_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+        # Test rename and restore for unnamed index\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        self.assertIndexNameExists(table_name, \"old_pony_test_idx\")\n+        # Re-apply renaming.\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+        \n+        # Additional test for renaming an unnamed index multiple times\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        self.assertIndexNameExists(table_name, \"old_pony_test_idx\")\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+        \n+        # Ensure no crash on repeated renaming\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+        \n+        definition = operation.deconstruct()\n+        self.assertEqual(definition[0], \"RenameIndex\")\n         # Deconstruction.\n         definition = operation.deconstruct()\n         self.assertEqual(definition[0], \"RenameIndex\")\n",
  "django__django-15732": "",
  "django__django-15916": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex cc5e08c..ea2c1d4 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -3497,7 +3497,48 @@ class FormFieldCallbackTests(SimpleTestCase):\n             )\n \n \n-class LocalizedModelFormTest(TestCase):\n+from django.test import TestCase\n+from django.forms.models import modelform_factory\n+from django import forms\n+from .models import Person  # Assuming `Person` is a model used in tests\n+\n+\n+class MetaFormfieldCallbackTest(TestCase):\n+    def test_formfield_callback_in_meta(self):\n+        def required_callback(db_field, **kwargs):\n+            formfield = db_field.formfield(**kwargs)\n+            formfield.required = True\n+            return formfield\n+\n+        class BaseForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = ['id', 'name']\n+                formfield_callback = required_callback\n+\n+        # Create the form using modelform_factory without passing formfield_callback\n+        GeneratedForm = modelform_factory(model=Person, form=BaseForm)\n+\n+        for field in GeneratedForm.base_fields.values():\n+            self.assertTrue(field.required)\n+\n+    def test_no_callback_overrides_meta_callback(self):\n+        def required_callback(db_field, **kwargs):\n+            formfield = db_field.formfield(**kwargs)\n+            formfield.required = True\n+            return formfield\n+\n+        class BaseForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = ['id', 'name']\n+                formfield_callback = required_callback\n+\n+        # Create the form using modelform_factory with explicit None formfield_callback\n+        GeneratedForm = modelform_factory(model=Person, form=BaseForm, formfield_callback=None)\n+\n+        for field in GeneratedForm.base_fields.values():\n+            self.assertFalse(field.required)\n     def test_model_form_applies_localize_to_some_fields(self):\n         class PartiallyLocalizedTripleForm(forms.ModelForm):\n             class Meta:\n",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..ddc0dd1 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -9,7 +9,9 @@ from django.core.serializers.json import DjangoJSONEncoder\n from django.db import models\n from django.test import SimpleTestCase, TestCase, TransactionTestCase\n from django.test.utils import isolate_apps\n-from django.utils.translation import gettext_lazy, override\n+from django.core.exceptions import FieldError\n+from django.core import serializers\n+from django.db import models\n \n from .models import Score\n from .tests import SerializersTestBase, SerializersTransactionTestBase\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 53fdd55..8207634 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -222,7 +222,25 @@ def test_mpl_toolkits():\n     assert type(pickle.loads(pickle.dumps(ax))) == parasite_axes.HostAxes\n \n \n-def test_standard_norm():\n+def test_dpi_after_unpickling_on_macos():\n+    # This test specifically targets the DPI issue on macOS with M1 chips\n+    import matplotlib.pyplot as plt\n+    import platform\n+\n+    if platform.system() != 'Darwin' or platform.machine() != 'arm64':\n+        pytest.skip(\"This test is only relevant for M1 Mac systems.\")\n+\n+    original_dpi = 200\n+\n+    # Create a figure with a specified DPI\n+    fig = plt.figure(dpi=original_dpi)\n+\n+    # Pickle and then unpickle the figure\n+    fig_pickled = pickle.dumps(fig)\n+    fig_unpickled = pickle.loads(fig_pickled)\n+\n+    # Check that the DPI remains the same\n+    assert fig_unpickled.dpi == original_dpi, \"Unexpected DPI after unpickling: {}\".format(fig_unpickled.dpi)\n     assert type(pickle.loads(pickle.dumps(mpl.colors.LogNorm()))) \\\n         == mpl.colors.LogNorm\n \n",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 87375f2..0fb1e4c 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6600,6 +6600,21 @@ def test_integrate(dask):\n     actual = da.integrate((\"y\", \"x\"))\n     assert actual.ndim == 0\n \n+    # Check deprecation warning for using 'dim' instead of 'coord'\n+    with pytest.warns(FutureWarning):\n+        da.integrate(dim=\"x\")\n+        \n+    # Test for backward compatibility\n+    actual = da.integrate(coord=\"x\")\n+    expected_x = xr.DataArray(\n+        np.trapz(da, da[\"x\"], axis=0),\n+        dims=[\"y\"],\n+        coords={k: v for k, v in da.coords.items() if \"x\" not in v.dims},\n+    )\n+    assert_allclose(expected_x, actual.compute())\n+    assert_equal(actual, ds.integrate(coord=\"x\")[\"var\"])\n+    assert_equal(ds[\"var\"].integrate(coord=\"x\"), ds.integrate(coord=\"x\")[\"var\"])\n+\n     with pytest.raises(ValueError):\n         da.integrate(\"x2d\")\n \n",
  "pydata__xarray-4094": "",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..75c2a32 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -107,6 +107,36 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+CSV_REGEX_COMMA_CASES = [\n+    (\"foo\", [\"foo\"]),\n+    (\"foo,bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar{1,3}\", [\"foo\", \"bar{1,3}\"]),\n+    (\"(foo{1,3})\", [\"(foo{1,3})\"]),\n+    (\"(foo{1,3},bar)\", [\"(foo{1,3})\", \"bar\"]),\n+]\n+\n+@pytest.mark.parametrize(\"in_string,expected\", CSV_REGEX_COMMA_CASES)\n+def test_csv_regex_comma_handling(in_string: str, expected: list[str]) -> None:\n+    \"\"\"Check that we correctly parse a comma-separated regex when there are\n+    one or more commas within quantifier expressions.\"\"\"\n+    \n+    def _template_run(in_string: str) -> list[re.Pattern[Any]]:\n+        r = Run(\n+            [str(EMPTY_MODULE), rf\"--bad-names-rgxs={in_string}\"],\n+            exit=False,\n+        )\n+        bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs\n+        return bad_names_rgxs\n+\n+    assert _template_run(in_string) == [re.compile(regex) for regex in expected]\n+\n+from typing import Any\n+import pytest\n+import re\n+from pylint.lint import Run\n+from pylint.config.arguments_manager import EMPTY_MODULE\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..3bfd2d6 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1156,6 +1156,9 @@ def test_summary_list_after_errors(testdir):\n     )\n \n \n+import pytest\n+from _pytest.main import ExitCode\n+\n def test_importorskip():\n     with pytest.raises(\n         pytest.skip.Exception,\n@@ -1184,4 +1187,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "diff --git a/testing/test_mark_expression.py b/testing/test_mark_expression.py\nindex 10b71e9..45e15ab 100644\n--- a/testing/test_mark_expression.py\n+++ b/testing/test_mark_expression.py\n@@ -139,6 +139,22 @@ def test_valid_idents(ident: str) -> None:\n     assert evaluate(ident, {ident: True}.__getitem__)\n \n \n+@pytest.mark.parametrize(\n+    \"ident\",\n+    (\n+        \"None\",\n+        \"True\",\n+        \"False\",\n+    ),\n+)\n+def test_reserved_keywords(ident: str) -> None:\n+    \"\"\"\n+    Test that Expression.compile raises an assertion error on reserved keywords.\n+    \"\"\"\n+    with pytest.raises(AssertionError):\n+        Expression.compile(ident)\n+\n+\n @pytest.mark.parametrize(\n     \"ident\",\n     (\n",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..3431733 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,32 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+\n+def test_feature_union_with_pandas_output():\n+    import pandas as pd\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn.pipeline import FeatureUnion\n+    from sklearn import set_config\n+\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y: pd.Series | None = None, **kwargs):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y: pd.Series | None = None) -> pd.DataFrame:\n+            return X[\"value\"].groupby(X[\"date\"]).sum().reset_index(name='value')\n+\n+    # Ensure that the transform output config is set to pandas\n+    set_config(transform_output=\"pandas\")\n+    union = FeatureUnion([(\"my_transformer\", MyTransformer())])\n+    \n+    # Transform the data and check if it produces the expected output without errors\n+    result = union.fit_transform(data)\n+    expected_index = pd.Index(index.date.unique(), name='date')\n+    assert result.set_index('date').index.equals(expected_index), \"Index mismatch with expected group by dates\"\n+    assert result['value'].equals(pd.Series([240] * len(expected_index), name='value')), \"Aggregated values mismatch\"\n",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a32a965..f648d88 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -237,6 +237,16 @@ def test_get_full_qualified_name():\n \n \n def test_parse_annotation():\n+    # Test for linking 'None' correctly in annotations\n+    doctree = _parse_annotation(\"None\")\n+    assert_node(doctree, ([pending_xref, \"None\"],))\n+    assert_node(doctree[0], pending_xref, refdomain=\"py\", reftype=\"obj\", reftarget=\"None\")\n+\n+    doctree = _parse_annotation(\"Optional[None]\")\n+    assert_node(doctree, ([pending_xref, \"Optional\"],\n+                          [desc_sig_punctuation, \"[\"],\n+                          [pending_xref, \"None\"],\n+                          [desc_sig_punctuation, \"]\"]))\n     doctree = _parse_annotation(\"int\")\n     assert_node(doctree, ([pending_xref, \"int\"],))\n \n@@ -742,4 +752,3 @@ def test_modindex_common_prefix(app):\n                 IndexEntry('sphinx_intl', 0, 'index', 'module-sphinx_intl', '', '', '')])],\n         True\n     )\n-\n",
  "sphinx-doc__sphinx-8056": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 1d6a8cf..b43365f 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1317,6 +1317,32 @@ class NumpyDocstringTest(BaseDocstringTest):\n             expected = dedent(expected)\n             self.assertEqual(expected, actual)\n \n+    def test_multiple_optional_parameters(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        # Testing with napoleon_use_param=False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Testing with napoleon_use_param=True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: :class:`array_like`, *optional*\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_parameters_with_class_reference(self):\n         docstring = \"\"\"\\\n Parameters\n",
  "sphinx-doc__sphinx-8551": "",
  "sphinx-doc__sphinx-8593": "diff --git a/tests/roots/test-ext-autodoc/target/private.py b/tests/roots/test-ext-autodoc/target/private.py\nindex 677b469..738a2c8 100644\n--- a/tests/roots/test-ext-autodoc/target/private.py\n+++ b/tests/roots/test-ext-autodoc/target/private.py\n@@ -1,11 +1,18 @@\n+\n def private_function(name):\n     \"\"\"private_function is a docstring().\n-\n+# Example for testing :meta public: on variables\n+_foo = None  #: :meta public:\n+_bar = None  #: :meta private:\n     :meta private:\n     \"\"\"\n-\n+# Example for testing :meta public: on variables\n+_foo = None  #: :meta public:\n+_bar = None  #: :meta private:\n def _public_function(name):\n     \"\"\"public_function is a docstring().\n-\n+# Example for testing :meta public: on variables\n+_foo = None  #: :meta public:\n+_bar = None  #: :meta private:\n     :meta public:\n-    \"\"\"\n+    \"\"\"\n",
  "sphinx-doc__sphinx-9230": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex e86a758..a396d2e 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -904,6 +904,48 @@ def test_canonical_definition_skip(app, warning):\n     assert domain.objects['_io.StringIO'] == ('index', 'io.StringIO', 'class', False)\n \n \n+def test_param_dict_str_str(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:class:: Class\\n\"\n+            \"\\n\"\n+            \"   :param dict(str, str) opc_meta: (optional) blah blah\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+    \n+    # Check the parameter rendering correctness\n+    assert_node(doctree, (nodes.target,\n+                          addnodes.index,\n+                          addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                                    [desc_addname, \"example.\"],\n+                                                    [desc_name, \"Class\"])],\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree[3][1][0][0],\n+                ([nodes.field_name, \"Parameters\"],\n+                 [nodes.field_body, nodes.bullet_list, [nodes.list_item, nodes.paragraph]]))\n+\n+    # :param dict(str, str) opc_meta:\n+    assert_node(doctree[3][1][0][0][1][0][0][0],\n+                ([addnodes.literal_strong, \"opc_meta\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"dict\"],\n+                 [addnodes.literal_emphasis, \"(\"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \", \"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \")\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"(optional) blah blah\"))\n+    assert_node(doctree[3][1][0][0][1][0][0][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"dict\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+\n def test_canonical_duplicated(app, warning):\n     text = (\".. py:class:: mypackage.StringIO\\n\"\n             \"   :canonical: _io.StringIO\\n\"\n",
  "sphinx-doc__sphinx-9258": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a7d51b6..5984ecf 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -1009,6 +1009,42 @@ def test_info_field_list(app):\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n \n+def test_union_type_with_pipe_syntax(app):\n+    text = (\".. py:function:: foo(text)\\n\"\n+            \"\\n\"\n+            \"   :param text: a text\\n\"\n+            \"   :type text: bytes | str | None\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    # Verify the function signature and parameter type\n+    assert_node(doctree, (addnodes.index,\n+                          [desc, (desc_signature, \"foo\"),\n+                           [desc_content, nodes.field_list, nodes.field]]))\n+    assert_node(doctree[1][1][0][0], ([nodes.field_name, \"Parameters\"],\n+                                      [nodes.field_body, nodes.paragraph]))\n+\n+    # Check for the correct parsing of the union type\n+    assert_node(doctree[1][1][0][0][1][0], ([addnodes.literal_strong, \"text\"],\n+                                            \" (\",\n+                                            [pending_xref, addnodes.literal_emphasis, \"bytes\"],\n+                                            [addnodes.literal_emphasis, \" | \"],\n+                                            [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                                            [addnodes.literal_emphasis, \" | \"],\n+                                            [pending_xref, addnodes.literal_emphasis, \"None\"],\n+                                            \") -- a text\"))\n+\n+    # Verify references for each type in the union\n+    assert_node(doctree[1][1][0][0][1][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"bytes\",\n+                **{\"py:module\": None, \"py:class\": None})\n+    assert_node(doctree[1][1][0][0][1][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": None, \"py:class\": None})\n+    assert_node(doctree[1][1][0][0][1][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"None\",\n+                **{\"py:module\": None, \"py:class\": None})\n+\n+\n def test_info_field_list_var(app):\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-9673": "",
  "sympy__sympy-18211": "diff --git a/sympy/solvers/tests/test_solveset.py b/sympy/solvers/tests/test_solveset.py\nindex 7bd9e29..4ca7b34 100644\n--- a/sympy/solvers/tests/test_solveset.py\n+++ b/sympy/solvers/tests/test_solveset.py\n@@ -1047,8 +1047,17 @@ def test__solveset_multi():\n             ImageSet(Lambda(((r,),), (r, 0)), ImageSet(Lambda(r, (r,)), Interval(0, 1))),\n             ImageSet(Lambda(((theta,),), (0, theta)), ImageSet(Lambda(theta, (theta,)), Interval(0, pi))))\n \n+from sympy import Eq, cos, sin, Reals, Symbol\n+from sympy.sets.conditionset import ConditionSet\n+\n+def test_issue_18188():\n+    x = Symbol('x')\n+    # Test case for the issue where solveset should return ConditionSet\n+    result1 = Eq(x*cos(x) - 3*sin(x), 0)\n+    assert result1.as_set() == ConditionSet(x, Eq(x*cos(x) - 3*sin(x), 0), Reals)\n \n-def test_conditionset():\n+    result2 = Eq(x**2 + sqrt(x*2) + sin(x), 0)\n+    assert result2.as_set() == ConditionSet(x, Eq(sqrt(2)*sqrt(x) + x**2 + sin(x), 0), Reals)\n     assert solveset(Eq(sin(x)**2 + cos(x)**2, 1), x, domain=S.Reals) == \\\n         ConditionSet(x, True, S.Reals)\n \n",
  "sympy__sympy-18698": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 38de6f6..ee39a59 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3265,6 +3265,9 @@ def test_noncommutative():\n     assert cancel(e*foo(c)) == c*foo(c)\n \n \n+from sympy import Symbol, sqf_list\n+from sympy.abc import x, y\n+\n def test_to_rational_coeffs():\n     assert to_rational_coeffs(\n         Poly(x**3 + y*x**2 + sqrt(y), x, domain='EX')) is None\n@@ -3276,7 +3279,26 @@ def test_factor_terms():\n     assert sqf_list(x*(x + y)) == (1, [(x, 1), (x + y, 1)])\n \n \n-def test_as_list():\n+def test_issue_8695():\n+    # Test cases to validate the fix for the issue\n+    p1 = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3\n+    expected1 = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\n+    assert sqf_list(p1) == expected1\n+\n+    # Additional test case with a single factor of multiplicity 2\n+    p2 = x**5 - 2*x**4 - 2*x**3 + 4*x**2 + x - 2\n+    expected2 = (1, [(x - 2, 1), (x**2 - 1, 2)])\n+    assert sqf_list(p2) == expected2\n+\n+    # Test with no factorization needed, should return the polynomial itself\n+    p3 = x**3 + 2*x**2 + x + 2\n+    expected3 = (1, [(x**3 + 2*x**2 + x + 2, 1)])\n+    assert sqf_list(p3) == expected3\n+\n+    # Test with a different polynomial having distinct factors\n+    p4 = (x - 1)**3 * (x + 2)**2\n+    expected4 = (1, [(x - 1, 3), (x + 2, 2)])\n+    assert sqf_list(p4) == expected4\n     # issue 14496\n     assert Poly(x**3 + 2, x, domain='ZZ').as_list() == [1, 0, 0, 2]\n     assert Poly(x**2 + y + 1, x, y, domain='ZZ').as_list() == [[1], [], [1, 1]]\n",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..86ae5b7 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3241,8 +3241,16 @@ def test_keep_coeff():\n     assert _keep_coeff(x, 1/x) == 1\n     assert _keep_coeff(x + 1, S(2)) == u\n \n-\n-def test_poly_matching_consistency():\n+from sympy import symbols, factor, I\n+\n+def test_issue_18895():\n+    x, y = symbols('x y')\n+    expr = (x - 1)*(y - 1)\n+    expanded_expr = expr.expand()\n+    # Without extension, it should factor back to the original\n+    assert factor(expanded_expr) == expr\n+    # With extension, it should still factor correctly\n+    assert factor(expanded_expr, extension=[I]) == expr\n     # Test for this issue:\n     # https://github.com/sympy/sympy/issues/5514\n     assert I * Poly(x, x) == Poly(I*x, x)\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..2bce56d 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -1,3 +1,6 @@\n+\n+from sympy import Symbol\n+\n \"\"\"This tests sympy/core/basic.py with (ideally) no reference to subclasses\n of Basic or Atom.\"\"\"\n \n@@ -28,6 +31,19 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n+def test_symbol_dict():\n+    # In SymPy 1.7 and later, Symbol has a __dict__ attribute\n+    s = Symbol('s')\n+    assert hasattr(s, '__dict__')\n+    assert s.__dict__ == {}\n+\n+    # Since there might be changes if the slots are used in some versions\n+    assert s.__slots__ == ('name',)\n+\n+    # Try setting an attribute to see if __dict__ accepts it\n+    s.new_attr = \"test\"\n+    assert s.__dict__['new_attr'] == \"test\"\n+\n def test_structure():\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n",
  "sympy__sympy-24562": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..73e5dcb 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,7 +3202,22 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n-    def test_boundfield_widget_type(self):\n+    def test_boundfield_widget_custom_id_for_label(self):\n+        \"\"\"\n+        Verify that BoundWidget.id_for_label uses the custom 'id' specified\n+        in ChoiceWidget.options.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'Option A'), ('b', 'Option B')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'custom_choice_id'})\n+            )\n+\n+        form = SomeForm(auto_id='prefix_%s')\n+        subwidgets = form['field'].subwidgets\n+        # Check if the custom id is used for each subwidget\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_choice_id_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_choice_id_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "matplotlib__matplotlib-20676": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex b009975..9f2a982 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -299,6 +299,62 @@ def test_tool_line_handle():\n         assert artist.get_animated()\n         assert artist.get_visible()\n \n+\n+@pytest.mark.parametrize('direction', (\"horizontal\", \"vertical\"))\n+def test_span_selector_bound(direction):\n+    fig, ax = plt.subplots(1, 1)\n+    ax.plot([10, 20], [10, 30])\n+    ax.figure.canvas.draw()\n+    x_bound = ax.get_xbound()\n+    y_bound = ax.get_ybound()\n+\n+    tool = widgets.SpanSelector(ax, print, direction, interactive=True)\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    bound = x_bound if direction == 'horizontal' else y_bound\n+    assert tool._edge_handles.positions == list(bound)\n+\n+    press_data = [10.5, 11.5]\n+    move_data = [11, 13]  # Updating selector is done in onmove\n+    release_data = move_data\n+    do_event(tool, 'press', xdata=press_data[0], ydata=press_data[1], button=1)\n+    do_event(tool, 'onmove', xdata=move_data[0], ydata=move_data[1], button=1)\n+\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    index = 0 if direction == 'horizontal' else 1\n+    handle_positions = [press_data[index], release_data[index]]\n+    assert tool._edge_handles.positions == handle_positions\n+\n+\n+@pytest.mark.parametrize('direction', (\"horizontal\", \"vertical\"))\n+def test_span_selector_no_zero_force(direction):\n+    fig, ax = plt.subplots(1, 1)\n+    ax.plot([5, 15], [50, 150])\n+    ax.set_xlim(5, 15)\n+    ax.set_ylim(50, 150)\n+    tool = widgets.SpanSelector(ax, print, direction, interactive=True)\n+    ax.figure.canvas.draw()\n+\n+    if direction == 'horizontal':\n+        assert ax.get_xbound() == (5, 15)\n+    else:\n+        assert ax.get_ybound() == (50, 150)\n+\n+    # Simulate events to ensure no limit is forced to zero\n+    press_data = [6, 60]\n+    move_data = [8, 80]\n+    release_data = move_data\n+    do_event(tool, 'press', xdata=press_data[0], ydata=press_data[1], button=1)\n+    do_event(tool, 'onmove', xdata=move_data[0], ydata=move_data[1], button=1)\n+\n+    if direction == 'horizontal':\n+        assert ax.get_xbound() == (5, 15)\n+    else:\n+        assert ax.get_ybound() == (50, 150)\n+\n     assert tool_line_handle.positions == positions\n \n \n",
  "scikit-learn__scikit-learn-12682": "diff --git a/sklearn/decomposition/tests/test_dict_learning.py b/sklearn/decomposition/tests/test_dict_learning.py\nindex 35a43f8..b5e0223 100644\n--- a/sklearn/decomposition/tests/test_dict_learning.py\n+++ b/sklearn/decomposition/tests/test_dict_learning.py\n@@ -51,6 +51,58 @@ def test_dict_learning_shapes():\n     assert_equal(dico.transform(X).shape, (X.shape[0], n_components))\n \n \n+def test_sparse_coder_max_iter():\n+    def ricker_function(resolution, center, width):\n+        \"\"\"Discrete sub-sampled Ricker (Mexican hat) wavelet\"\"\"\n+        x = np.linspace(0, resolution - 1, resolution)\n+        x = ((2 / (np.sqrt(3 * width) * np.pi ** .25))\n+             * (1 - (x - center) ** 2 / width ** 2)\n+             * np.exp(-(x - center) ** 2 / (2 * width ** 2)))\n+        return x\n+\n+    def ricker_matrix(width, resolution, n_components):\n+        \"\"\"Dictionary of Ricker (Mexican hat) wavelets\"\"\"\n+        centers = np.linspace(0, resolution - 1, n_components)\n+        D = np.empty((n_components, resolution))\n+        for i, center in enumerate(centers):\n+            D[i] = ricker_function(resolution, center, width)\n+        D /= np.sqrt(np.sum(D ** 2, axis=1))[:, np.newaxis]\n+        return D\n+\n+    transform_algorithm = 'lasso_cd'\n+    resolution = 1024\n+    subsampling = 3  # subsampling factor\n+    n_components = resolution // subsampling\n+\n+    # Compute a wavelet dictionary\n+    D_multi = np.r_[tuple(ricker_matrix(width=w, resolution=resolution,\n+                                        n_components=n_components // 5)\n+                          for w in (10, 50, 100, 500, 1000))]\n+\n+    X = np.linspace(0, resolution - 1, resolution)\n+    first_quarter = X < resolution / 4\n+    X[first_quarter] = 3.\n+    X[np.logical_not(first_quarter)] = -1.\n+    X = X.reshape(1, -1)\n+\n+    # check that the underlying model fails to converge\n+    with pytest.warns(ConvergenceWarning):\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=1)\n+        model.fit_transform(X)\n+\n+    # check that the underlying model converges w/o warnings\n+    with pytest.warns(None) as record:\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=2000)\n+        model.fit_transform(X)\n+    assert not record.list\n+\n+import numpy as np\n+import pytest\n+from sklearn.exceptions import ConvergenceWarning\n+from sklearn.decomposition import SparseCoder\n+\n def test_dict_learning_overcomplete():\n     n_components = 12\n     dico = DictionaryLearning(n_components, random_state=0).fit(X)\n",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..3dc386f 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -147,8 +147,29 @@ def test_multi_target_sample_weights():\n     X_test = [[1.5, 2.5, 3.5], [3.5, 4.5, 5.5]]\n     assert_almost_equal(rgr.predict(X_test), rgr_w.predict(X_test))\n \n-\n-# Import the data\n+import pytest\n+import numpy as np\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+from sklearn.model_selection import cross_val_predict\n+from sklearn.utils._testing import assert_array_almost_equal\n+\n+def test_cross_val_predict_with_predict_proba():\n+    # Create a multilabel dataset\n+    X, Y = make_multilabel_classification(random_state=0)\n+    \n+    # Create a MultiOutputClassifier with LinearDiscriminantAnalysis\n+    mo_lda = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+    \n+    # Predict probabilities using cross_val_predict\n+    pred_proba = cross_val_predict(mo_lda, X, Y, cv=5, method='predict_proba')\n+    \n+    # Ensure that predict_proba returns probabilities\n+    for output_idx in range(len(pred_proba)):\n+        assert pred_proba[output_idx].shape[1] == mo_lda.estimators_[output_idx].classes_.size\n+        assert np.all(pred_proba[output_idx] >= 0) and np.all(pred_proba[output_idx] <= 1)\n+        assert_array_almost_equal(pred_proba[output_idx].sum(axis=1), np.ones(pred_proba[output_idx].shape[0]))\n iris = datasets.load_iris()\n # create a multiple targets by randomized shuffling and concatenating y.\n X = iris.data\n",
  "sphinx-doc__sphinx-9658": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 072cdc7..db36138 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -169,6 +169,18 @@ def test_restify_type_union_operator():\n def test_restify_broken_type_hints():\n     assert restify(BrokenType) == ':py:class:`tests.test_util_typing.BrokenType`'\n \n+def test_restify_inherited_mocked_class():\n+    with mock(['torch.nn']):\n+        import torch.nn as nn\n+        \n+        class MockedBase:\n+            pass\n+        \n+        class InheritedClass(MockedBase):\n+            pass\n+        \n+        # The output would be ':py:class:`torch.nn.Module`' if the mocked class is correctly handled\n+        assert restify(InheritedClass) == ':py:class:`torch.nn.Module`'\n \n def test_stringify():\n     assert stringify(int) == \"int\"\n",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..26d7617 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -347,8 +347,14 @@ def test_reverse_order():\n     assert Product(x*y, (x, a, b), (y, 2, 5)).reverse_order(y, x) == \\\n            Product(x*y, (x, b + 1, a - 1), (y, 6, 1))\n \n-\n-def test_issue_9983():\n+def test_issue_13546():\n+    from sympy import Symbol, Product, S\n+    n = Symbol('n')\n+    k = Symbol('k')\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 2).doit() == S(15)/2\n+    assert p.subs(n, 3).doit() == S(175)/12\n+    assert p.subs(n, 4).doit() == S(3675)/64\n     n = Symbol('n', integer=True, positive=True)\n     p = Product(1 + 1/n**(S(2)/3), (n, 1, oo))\n     assert p.is_convergent() is S.false\n@@ -357,4 +363,4 @@ def test_issue_9983():\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}