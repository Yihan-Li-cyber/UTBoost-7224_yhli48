{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..01cc667 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -134,6 +134,31 @@ def test_separable(compound_model, result):\n     assert_allclose(is_separable(compound_model), result[0])\n     assert_allclose(separability_matrix(compound_model), result[1])\n \n+def test_issue_separability_matrix_for_nested_compound_models():\n+    from astropy.modeling import models as m\n+    from astropy.modeling.separable import separability_matrix\n+\n+    cm = m.Linear1D(10) & m.Linear1D(5)\n+    result_cm = separability_matrix(cm)\n+    expected_cm = np.array([[True, False],\n+                            [False, True]])\n+    assert_allclose(result_cm, expected_cm)\n+\n+    complex_model = m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5)\n+    result_complex = separability_matrix(complex_model)\n+    expected_complex = np.array([[True, True, False, False],\n+                                 [True, True, False, False],\n+                                 [False, False, True, False],\n+                                 [False, False, False, True]])\n+    assert_allclose(result_complex, expected_complex)\n+\n+    nested_model = m.Pix2Sky_TAN() & cm\n+    result_nested = separability_matrix(nested_model)\n+    expected_nested = np.array([[True, True, False, False],\n+                                [True, True, False, False],\n+                                [False, False, True, False],\n+                                [False, False, False, True]])\n+    assert_allclose(result_nested, expected_nested)\n \n def test_custom_model_separable():\n     @custom_model\n",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "",
  "astropy__astropy-14508": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex 6bdf92c..0564348 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -137,7 +137,48 @@ class TestHeaderFunctions(FitsTestCase):\n         ):\n             assert str(c) == _pad(\"FLOATNUM= -4.6737463674763E+32\")\n \n-    def test_complex_value_card(self):\n+    def test_floating_point_string_representation_card(self):\n+        \"\"\"\n+        Ensures Card formats float values with the correct precision, avoiding\n+        comment truncation\n+\n+        Regression test for https://github.com/astropy/astropy/issues/14507\n+        \"\"\"\n+        k = \"HIERARCH ABC DEF GH IJKLMN\"\n+        com = \"[m] abcdef ghijklm nopqrstu vw xyzab\"\n+        c = fits.Card(k, 0.009125, com)\n+        expected_str = f\"{k} = 0.009125 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, 8.95, com)\n+        expected_str = f\"{k} = 8.95 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, -99.9, com)\n+        expected_str = f\"{k} = -99.9 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+    def test_floating_point_edge_cases_card(self):\n+        \"\"\"\n+        Test edge cases for floating point values in Cards\n+        \"\"\"\n+\n+        # Test for a float with many decimal numbers\n+        k = \"HIERARCH EDGE CASE\"\n+        com = \"precision edge case test\"\n+        c = fits.Card(k, 0.12345678901234567, com)\n+        expected_value_str = \"0.12345678901234567\"\n+        assert repr(c.value) == expected_value_str\n+\n+        # Test a very small float value\n+        c = fits.Card(k, 1e-10, com)\n+        expected_value_str = \"1e-10\"\n+        assert repr(c.value) == expected_value_str\n+\n+        # Test a very large float value\n+        c = fits.Card(k, 1e+10, com)\n+        expected_value_str = \"10000000000.0\"\n+        assert repr(c.value) == expected_value_str\n         \"\"\"Test Card constructor with complex value\"\"\"\n \n         c = fits.Card(\"abc\", (1.2345377437887837487e88 + 6324767364763746367e-33j))\n",
  "astropy__astropy-14539": "diff --git a/astropy/io/fits/tests/test_diff.py b/astropy/io/fits/tests/test_diff.py\nindex 9bf4897..7a797a5 100644\n--- a/astropy/io/fits/tests/test_diff.py\n+++ b/astropy/io/fits/tests/test_diff.py\n@@ -418,8 +418,28 @@ class TestDiff(FitsTestCase):\n         assert diff.common_column_names == set(\"abcdefghij\")\n         assert diff.diff_ratio == 0\n         assert diff.diff_total == 0\n-\n-    def test_diff_empty_tables(self):\n+    def test_diff_with_vla_columns_identical_files(self):\n+        \"\"\"Test FITSDiff with files containing VLA columns, ensuring identical files are recognized.\"\"\"\n+        col = fits.Column('a', format='QD', array=[[0], [0, 0]])\n+        hdu = fits.BinTableHDU.from_columns([col])\n+        hdu.writeto('test_vla_identical.fits', overwrite=True)\n+\n+        diff = fits.FITSDiff('test_vla_identical.fits', 'test_vla_identical.fits')\n+        assert diff.identical, \"FITSDiff did not recognize identical VLA files as identical\"\n+\n+    def test_diff_with_vla_columns_different_files(self):\n+        \"\"\"Test FITSDiff with files containing VLA columns, ensuring differences are detected.\"\"\"\n+        col1 = fits.Column('a', format='QD', array=[[0], [0, 0]])\n+        col2 = fits.Column('a', format='QD', array=[[1], [1, 1]])\n+        hdu1 = fits.BinTableHDU.from_columns([col1])\n+        hdu2 = fits.BinTableHDU.from_columns([col2])\n+\n+        hdu1.writeto('test_vla_diff1.fits', overwrite=True)\n+        hdu2.writeto('test_vla_diff2.fits', overwrite=True)\n+\n+        diff = fits.FITSDiff('test_vla_diff1.fits', 'test_vla_diff2.fits')\n+        assert not diff.identical, \"FITSDiff failed to detect differences between VLA files\"\n+        assert len(diff.diff_values) > 0, \"Expected differences not reported for VLA files\"\n         \"\"\"\n         Regression test for https://aeon.stsci.edu/ssb/trac/pyfits/ticket/178\n \n",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..42d556d 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -89,6 +89,21 @@ def test_inherit_docstrings():\n         assert Subclass.__call__.__doc__ == \"FOO\"\n \n \n+def test_inherit_docstrings_for_properties():\n+    class Base(metaclass=misc.InheritDocstrings):\n+        @property\n+        def bar(self):\n+            \"BAR\"\n+            return 42\n+\n+    class Subclass(Base):\n+        @property\n+        def bar(self):\n+            return super().bar\n+\n+    if Base.bar.__doc__ is not None:\n+        assert Subclass.bar.__doc__ == \"BAR\"\n+\n def test_set_locale():\n     # First, test if the required locales are available\n     current = locale.setlocale(locale.LC_ALL)\n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..9017b4b 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -198,9 +198,17 @@ def test_unknown_unit3():\n         unit5 = u.Unit(None)\n \n \n-@raises(TypeError)\n+import pytest\n+from astropy import units as u\n+\n+def test_unit_equality_with_none():\n+    unit = u.Unit('asdf', parse_strict='silent')\n+    assert unit != None  # noqa\n+    assert unit not in (None, u.m)\n+\n def test_invalid_scale():\n-    x = ['a', 'b', 'c'] * u.m\n+    with pytest.raises(TypeError):\n+        x = ['a', 'b', 'c'] * u.m\n \n \n def test_cds_power():\n",
  "astropy__astropy-7671": "diff --git a/astropy/utils/tests/test_introspection.py b/astropy/utils/tests/test_introspection.py\nindex 852d721..cfceb2c 100644\n--- a/astropy/utils/tests/test_introspection.py\n+++ b/astropy/utils/tests/test_introspection.py\n@@ -69,7 +69,17 @@ def test_minversion():\n     test_module.__version__ = '0.12.2'\n     good_versions = ['0.12', '0.12.1', '0.12.0.dev']\n     bad_versions = ['1', '1.2rc1']\n+    \n+    # Additional edge case versions that used to cause issues\n+    edge_case_versions = ['1.14dev', '1.14.3']\n+\n+    # Testing whether the function raises TypeError with edge cases - it should not\n+    for version in edge_case_versions:\n+        try:\n+            minversion(test_module, version)\n+        except TypeError:\n+            assert False, f\"minversion raised TypeError unexpectedly with version {version}\"\n     for version in good_versions:\n         assert minversion(test_module, version)\n     for version in bad_versions:\n-        assert not minversion(test_module, version)\n+        assert not minversion(test_module, version)\n",
  "astropy__astropy-8707": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex a2103c6..247d1b5 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -2330,6 +2330,31 @@ class TestHeaderFunctions(FitsTestCase):\n                 c.verify('exception')\n \n \n+class TestHeaderFromString(FitsTestCase):\n+\n+    def test_header_fromstring_unicode(self):\n+        \"\"\"Test reading a Header from a Unicode string.\"\"\"\n+        header_str = \"SIMPLE  =                    T / file does conform to FITS standard\"\n+        header = fits.Header.fromstring(header_str)\n+        assert header['SIMPLE'] is True\n+\n+    def test_header_fromstring_bytes_with_nonascii(self):\n+        \"\"\"Test reading a Header from a bytes string containing non-ASCII characters.\"\"\"\n+        header_bytes = b\"SIMPLE  =                    T / file does conform to FITS standard \\xa3\"\n+        header = fits.Header.fromstring(header_bytes.decode('latin-1'))\n+        assert header['SIMPLE'] is True\n+\n+    def test_card_from_empty_bytes(self):\n+        \"\"\"Test loading a Card from an empty bytes object.\"\"\"\n+        c = fits.Card.fromstring(b\"\")\n+        assert c.keyword == ''\n+        assert c.value == ''\n+\n+    def test_header_from_empty_bytes(self):\n+        \"\"\"Test reading a Header from an empty bytes string.\"\"\"\n+        header = fits.Header.fromstring(b\"\")\n+        assert len(header) == 0\n+\n class TestRecordValuedKeywordCards(FitsTestCase):\n     \"\"\"\n     Tests for handling of record-valued keyword cards as used by the\n",
  "astropy__astropy-8872": "",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..02e3264 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -218,6 +218,14 @@ TEST_DATA = [\n     (URLValidator(EXTENDED_SCHEMES), 'git+ssh://git@github.com/example/hg-git.git', None),\n \n     (URLValidator(EXTENDED_SCHEMES), 'git://-invalid.com', ValidationError),\n+    # Test for invalid characters in username/password\n+    (URLValidator(), 'http://foo@bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo/bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar@baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar/baz@example.com', ValidationError),\n+    (URLValidator(), 'http://invalid-.com/?m=foo@example.com', ValidationError),\n+    (URLValidator(), \"http://-.~_!$&'()*+,;=%40:80%2f@example.com\", ValidationError),\n     # Trailing newlines not accepted\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..9c472b5 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -389,6 +390,14 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n+    def test_count_distinct_case_expression(self):\n+        # This test ensures that Count with Case and distinct=True does not cause SQL syntax errors.\n+        aggs = Book.objects.aggregate(\n+            distinct_high_ratings=Count(Case(When(rating__gt=4, then='id')), distinct=True),\n+        )\n+        # The expected result would depend on your specific dataset. Adjust the expected value accordingly.\n+        self.assertEqual(aggs['distinct_high_ratings'], 2)\n+\n     def test_count_star(self):\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n",
  "django__django-10914": "",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..00e0526 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,5 +1,7 @@\n+\n import os\n import signal\n+import subprocess\n from unittest import mock\n \n from django.db.backends.postgresql.client import DatabaseClient\n@@ -101,6 +103,29 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n+    def test_pgpassword_set(self):\n+        \"\"\"Test that PGPASSWORD is set correctly when subprocess.run is called.\"\"\"\n+        def _mock_subprocess_run(*args, env=None, **kwargs):\n+            self.subprocess_args = args[0]\n+            self.pgpassword = env.get('PGPASSWORD') if env else None\n+            return subprocess.CompletedProcess(args, 0)\n+\n+        dbinfo = {\n+            'database': 'dbname',\n+            'user': 'someuser',\n+            'password': 'somepassword',\n+            'host': 'somehost',\n+            'port': '444',\n+        }\n+\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            result, pgpassword = self._run_it(dbinfo)\n+            self.assertEqual(\n+                result,\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname']\n+            )\n+            self.assertEqual(pgpassword, 'somepassword')\n+\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n         def _mock_subprocess_call(*args):\n@@ -113,4 +138,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..a68c6d5 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -5,6 +5,7 @@ from django.contrib.contenttypes.models import ContentType\n from django.core.management import call_command\n from django.db import migrations, models\n from django.test import TransactionTestCase, override_settings\n+from django.contrib.contenttypes.models import ContentType\n \n \n @override_settings(\n@@ -38,7 +39,29 @@ class ContentTypeOperationsTests(TransactionTestCase):\n                     self.assertEqual(next_operation.old_model, operation.old_name_lower)\n                     self.assertEqual(next_operation.new_model, operation.new_name_lower)\n \n-    def test_existing_content_type_rename(self):\n+    class TestRouter:\n+        def db_for_write(self, model, **hints):\n+            return 'default'\n+\n+    @override_settings(DATABASE_ROUTERS=[TestRouter()])\n+    def test_existing_content_type_rename_other_database(self):\n+        # Create a content type in the 'other' database\n+        ContentType.objects.using('other').create(app_label='contenttypes_tests', model='foo')\n+        other_content_types = ContentType.objects.using('other').filter(app_label='contenttypes_tests')\n+\n+        # Run the migration on the 'other' database\n+        call_command('migrate', 'contenttypes_tests', database='other', interactive=False, verbosity=0)\n+\n+        # Verify the content type has been renamed in the 'other' database\n+        self.assertFalse(other_content_types.filter(model='foo').exists())\n+        self.assertTrue(other_content_types.filter(model='renamedfoo').exists())\n+\n+        # Reverse the migration on the 'other' database\n+        call_command('migrate', 'contenttypes_tests', 'zero', database='other', interactive=False, verbosity=0)\n+\n+        # Verify the original state is restored in the 'other' database\n+        self.assertTrue(other_content_types.filter(model='foo').exists())\n+        self.assertFalse(other_content_types.filter(model='renamedfoo').exists())\n         ContentType.objects.create(app_label='contenttypes_tests', model='foo')\n         call_command('migrate', 'contenttypes_tests', database='default', interactive=False, verbosity=0,)\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n@@ -63,4 +86,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "diff --git a/tests/generic_inline_admin/tests.py b/tests/generic_inline_admin/tests.py\nindex 9dd9fd9..48d5dd7 100644\n--- a/tests/generic_inline_admin/tests.py\n+++ b/tests/generic_inline_admin/tests.py\n@@ -428,4 +428,45 @@ class GenericInlineModelAdminTest(SimpleTestCase):\n         ma = EpisodeAdmin(Episode, self.site)\n         inlines = ma.get_inline_instances(request)\n         for (formset, inline), other_inline in zip(ma.get_formsets_with_inlines(request), inlines):\n-            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+\n+    def test_get_inlines(self):\n+        class MediaInline(GenericTabularInline):\n+            model = Media\n+\n+        class AlternateInline(GenericTabularInline):\n+            model = Media\n+\n+        class EpisodeAdmin(admin.ModelAdmin):\n+            inlines = [AlternateInline, MediaInline]\n+\n+            def get_inlines(self, request, obj=None):\n+                if hasattr(request, 'name'):\n+                    if request.name == 'alternate':\n+                        return self.inlines[:1]\n+                    elif request.name == 'media':\n+                        return self.inlines[1:2]\n+                return []\n+\n+        ma = EpisodeAdmin(Episode, self.site)\n+\n+        # Test with no special request attribute\n+        request = type('Request', (object,), {})()  # Create a simple request object\n+        self.assertEqual(ma.get_inlines(request, None), [])\n+\n+        # Test with 'alternate' request attribute\n+        request.name = 'alternate'\n+        self.assertEqual(ma.get_inlines(request, None), [AlternateInline])\n+\n+        # Test with 'media' request attribute\n+        request.name = 'media'\n+        self.assertEqual(ma.get_inlines(request, None), [MediaInline])\n+\n+        # Test get_inline_instances with the same scenarios\n+        self.assertEqual(ma.get_inline_instances(request), [MediaInline(self.model, self.admin_site)])\n+\n+        request.name = 'alternate'\n+        self.assertEqual(ma.get_inline_instances(request), [AlternateInline(self.model, self.admin_site)])\n+\n+        request.name = 'none'\n+        self.assertEqual(ma.get_inline_instances(request), [])\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..6179796 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -243,7 +243,12 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for valid in valid_usernames:\n             with self.subTest(valid=valid):\n                 v(valid)\n-        for invalid in invalid_usernames:\n+        # Test usernames with trailing newline\n+        usernames_with_newline = ['username\\n', 'anotherUser\\n']\n+        for username in usernames_with_newline:\n+            with self.subTest(username=username):\n+                with self.assertRaises(ValidationError):\n+                    v(username)\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n                     v(invalid)\n@@ -255,7 +260,12 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for valid in valid_usernames:\n             with self.subTest(valid=valid):\n                 v(valid)\n-        for invalid in invalid_usernames:\n+        # Test usernames with trailing newline\n+        usernames_with_newline = ['username\\n', 'anotherUser\\n']\n+        for username in usernames_with_newline:\n+            with self.subTest(username=username):\n+                with self.assertRaises(ValidationError):\n+                    v(username)\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..2a1f692 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -22,7 +22,30 @@ class RenderToStringTest(SimpleTestCase):\n         )\n \n \n-class GetDefaultTests(SimpleTestCase):\n+class RenderToStringTest(SimpleTestCase):\n+\n+    def setUp(self):\n+        self.engine = Engine(dirs=[TEMPLATE_DIR])\n+\n+    def test_basic_context(self):\n+        self.assertEqual(\n+            self.engine.render_to_string('test_context.html', {'obj': 'test'}),\n+            'obj:test\\n',\n+        )\n+\n+    def test_autoescape_off(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:<script>\\n',\n+        )\n+\n+    def test_autoescape_on(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n \n     @override_settings(TEMPLATES=[])\n     def test_no_engines_configured(self):\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..f27c48e 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -356,7 +356,21 @@ class HttpResponseTests(unittest.TestCase):\n         r = HttpResponse()\n         self.assertIsNone(r.get('test'))\n \n-    def test_non_string_content(self):\n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview content'))\n+        self.assertEqual(r.content, b'memoryview content')\n+\n+        # Testing with empty memoryview\n+        r = HttpResponse(memoryview(b''))\n+        self.assertEqual(r.content, b'')\n+\n+        # Testing with memoryview from a part of the bytes\n+        r = HttpResponse(memoryview(b'partial content')[0:7])\n+        self.assertEqual(r.content, b'partial')\n+\n+        # Ensuring no leftover from previous responses\n+        r = HttpResponse(memoryview(b'new data'))\n+        self.assertEqual(r.content, b'new data')\n         # Bug 16494: HttpResponse should behave consistently with non-strings\n         r = HttpResponse(12345)\n         self.assertEqual(r.content, b'12345')\n",
  "django__django-11141": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex b5a87e7..920547d 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -509,6 +509,44 @@ class LoaderTests(TestCase):\n         self.assertEqual(migrations, ['0001_initial'])\n \n \n+from django.test import override_settings\n+from django.db import connection\n+from django.db.migrations.loader import MigrationLoader\n+from django.test import TestCase\n+import os\n+import compileall\n+\n+class NamespacePackageMigrationTests(TestCase):\n+    @override_settings(\n+        MIGRATION_MODULES={'migrations': 'migrations.test_migrations_namespace_package'},\n+    )\n+    def test_loading_namespace_package(self):\n+        \"\"\"Migration directories without an __init__.py file are loaded.\"\"\"\n+        migration_loader = MigrationLoader(connection)\n+        self.assertEqual(\n+            migration_loader.graph.forwards_plan(('migrations', '0001_initial')),\n+            [('migrations', '0001_initial')],\n+        )\n+\n+    @override_settings(\n+        MIGRATION_MODULES={'migrations': 'migrations.test_empty_namespace_package'}\n+    )\n+    def test_empty_namespace_package(self):\n+        \"\"\"An empty migrations package without an __init__.py should not be treated as having migrations.\"\"\"\n+        migration_loader = MigrationLoader(connection)\n+        self.assertNotIn('migrations', migration_loader.migrated_apps)\n+\n+    @override_settings(\n+        MIGRATION_MODULES={'migrations': 'migrations.test_migrations_with_init'}\n+    )\n+    def test_migrations_directory_with_init(self):\n+        \"\"\"Migration directories with an __init__.py file are correctly loaded.\"\"\"\n+        migration_loader = MigrationLoader(connection)\n+        self.assertEqual(\n+            migration_loader.graph.forwards_plan(('migrations', '0001_initial')),\n+            [('migrations', '0001_initial')],\n+        )\n+\n class PycLoaderTests(MigrationTestBase):\n \n     def test_valid(self):\n",
  "django__django-11149": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 296cfba..5acc03d 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -665,7 +665,29 @@ class TestInlinePermissions(TestCase):\n         self.assertNotContains(response, 'id=\"id_Author_books-TOTAL_FORMS\"')\n         self.assertNotContains(response, 'id=\"id_Author_books-0-DELETE\"')\n \n-    def test_inline_change_m2m_change_perm(self):\n+    def test_inline_view_m2m_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(self.author_change_url)\n+        # User has view permission on books, so the inline should appear in a read-only state\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" id=\"id_Author_books-TOTAL_FORMS\" value=\"1\" name=\"Author_books-TOTAL_FORMS\">',\n+            html=True\n+        )\n+        # Inline items should be displayed as read-only\n+        self.assertContains(response, '<p>%s</p>' % 'The inline Book', html=True)\n+        self.assertNotContains(response, 'id=\"id_Author_books-0-DELETE\"')\n+        \n+    def test_inline_view_m2m_no_add_change_delete_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(self.author_change_url)\n+        # Ensure no add/change/delete permissions\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n         permission = Permission.objects.get(codename='change_book', content_type=self.book_ct)\n         self.user.user_permissions.add(permission)\n         response = self.client.get(self.author_change_url)\n",
  "django__django-11163": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex b25d077..c543ea2 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2900,7 +2900,29 @@ class StrictAssignmentTests(SimpleTestCase):\n \n \n class ModelToDictTests(TestCase):\n-    def test_many_to_many(self):\n+    def test_empty_fields_returns_empty_dict(self):\n+        \"\"\"model_to_dict should return an empty dict when given an empty fields list.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        result = model_to_dict(bw, fields=[])\n+        self.assertEqual(result, {})\n+\n+    def test_specific_fields(self):\n+        \"\"\"model_to_dict should return only the specified fields.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        result = model_to_dict(bw, fields=['id', 'name'])\n+        self.assertEqual(sorted(result), ['id', 'name'])\n+\n+    def test_empty_exclude_returns_all_fields(self):\n+        \"\"\"model_to_dict should return all fields when exclude is an empty list.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        result = model_to_dict(bw, exclude=[])\n+        self.assertEqual(sorted(result), ['id', 'name', 'score', 'writer_ptr'])\n+\n+    def test_specific_exclude(self):\n+        \"\"\"model_to_dict should return all fields except the specified ones in exclude.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        result = model_to_dict(bw, exclude=['id', 'name'])\n+        self.assertEqual(sorted(result), ['score', 'writer_ptr'])\n         \"\"\"Data for a ManyToManyField is a list rather than a lazy QuerySet.\"\"\"\n         blue = Colour.objects.create(name='blue')\n         red = Colour.objects.create(name='red')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..9be4b0d 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,8 +1,10 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from django.db.models.deletion import Collector\n \n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n@@ -471,7 +473,29 @@ class FastDeleteTests(TestCase):\n         self.assertEqual(User.objects.count(), 1)\n         self.assertTrue(User.objects.filter(pk=u2.pk).exists())\n \n-    def test_fast_delete_joined_qs(self):\n+    def test_fast_delete_instance_set_pk_none(self):\n+        # Test fast-deleting a User instance and assert PK is set to None\n+        u = User.objects.create()\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n+    def test_fast_delete_instance_no_explicit_pk(self):\n+        # Test fast-deleting a model instance without an explicit PK\n+        a = Avatar.objects.create(desc='test avatar')\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(a))\n+        a.delete()\n+        self.assertIsNone(a.pk)\n+\n+    def test_fast_delete_instance_with_different_fields(self):\n+        # Test fast-deleting a model instance with additional fields\n+        m = M.objects.create(name='test model', value=10)\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(m))\n+        m.delete()\n+        self.assertIsNone(m.pk)\n         a = Avatar.objects.create(desc='a')\n         User.objects.create(avatar=a)\n         u2 = User.objects.create()\n",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..8ae33e7 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -95,6 +95,11 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+            # Test case to check small decimals formatting without scientific notation.\n+            ('1e-201', 2, '0.00'),\n+            ('1e-202', 3, '0.000'),\n+            ('1e-300', 5, '0.00000'),\n+            ('0.{}1234'.format('0' * 299), 3, '0.000'),\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-11211": "diff --git a/tests/prefetch_related/models.py b/tests/prefetch_related/models.py\nindex 3ce4b3f..33ce450 100644\n--- a/tests/prefetch_related/models.py\n+++ b/tests/prefetch_related/models.py\n@@ -1,3 +1,4 @@\n+\n import uuid\n \n from django.contrib.contenttypes.fields import (\n@@ -196,7 +197,14 @@ class Comment(models.Model):\n         ordering = ['id']\n \n \n-# Models for lookup ordering tests\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=50, unique=True)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE, db_index=True)\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n \n class House(models.Model):\n     name = models.CharField(max_length=50)\n",
  "django__django-11239": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex b843072..d04f039 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -81,6 +81,29 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n+    def test_ssl_certificate(self):\n+        self.assertEqual(\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+                'sslmode': 'verify-ca',\n+                'sslrootcert': 'root.crt',\n+                'sslcert': 'client.crt',\n+                'sslkey': 'client.key',\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                {\n+                    'PGSSLMODE': 'verify-ca',\n+                    'PGSSLROOTCERT': 'root.crt',\n+                    'PGSSLCERT': 'client.crt',\n+                    'PGSSLKEY': 'client.key',\n+                },\n+                None,\n+            )\n+        )\n+\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n         def _mock_subprocess_run(*args, **kwargs):\n",
  "django__django-11265": "diff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py\nindex a587c22..777a331 100644\n--- a/tests/filtered_relation/tests.py\n+++ b/tests/filtered_relation/tests.py\n@@ -98,6 +98,35 @@ class FilteredRelationTests(TestCase):\n             [self.author1]\n         )\n \n+    def test_with_exclude(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2],\n+        )\n+\n+    def test_with_exclude_no_match(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_bob=FilteredRelation('book', condition=Q(book__title__iexact='poem by bob')),\n+            ).exclude(book_bob__isnull=False),\n+            [self.author1, self.author2],\n+        )\n+\n+    def test_with_exclude_and_multiple_conditions(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_filtered=FilteredRelation(\n+                    'book', condition=Q(\n+                        Q(book__title__iexact='poem by alice') |\n+                        Q(book__state=Book.RENTED)\n+                    ),\n+                ),\n+            ).exclude(book_filtered__isnull=False),\n+            [self.author2],\n+        )\n+\n     def test_with_join_and_complex_condition(self):\n         self.assertSequenceEqual(\n             Author.objects.annotate(\n",
  "django__django-11276": "",
  "django__django-11292": "",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..87c400b 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,5 +1,8 @@\n+\n from django.test import SimpleTestCase\n-from django.urls.resolvers import RegexPattern, RoutePattern\n+from django.urls.resolvers import RegexPattern, RoutePattern, get_resolver\n+from django.test.utils import override_settings\n+from django.conf import settings\n from django.utils.translation import gettext_lazy as _\n \n \n@@ -12,4 +15,4 @@ class RegexPatternTests(SimpleTestCase):\n class RoutePatternTests(SimpleTestCase):\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\nindex b010b42..06abc9a 100644\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -227,6 +227,12 @@ class BaseModelBackendTest:\n         self.assertEqual(CountingMD5PasswordHasher.calls, 1)\n \n \n+from django.test import TestCase, override_settings\n+from django.contrib.auth import authenticate, get_user_model\n+from auth_tests.test_auth_backends import CountingMD5PasswordHasher\n+\n+User = get_user_model()\n+\n class ModelBackendTest(BaseModelBackendTest, TestCase):\n     \"\"\"\n     Tests for the ModelBackend using the default User model.\n@@ -242,7 +248,23 @@ class ModelBackendTest(BaseModelBackendTest, TestCase):\n             password='test',\n         )\n \n-    def test_authenticate_inactive(self):\n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authentication_without_username_and_password(self):\n+        CountingMD5PasswordHasher.calls = 0\n+        # Test with no credentials\n+        with self.assertNumQueries(0):\n+            authenticate()\n+        self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n+\n+        # Test with username only\n+        with self.assertNumQueries(0):\n+            authenticate(username=getattr(self.user, self.UserModel.USERNAME_FIELD))\n+        self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n+\n+        # Test with password only\n+        with self.assertNumQueries(0):\n+            authenticate(password='test')\n+        self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n         \"\"\"\n         An inactive user can't authenticate.\n         \"\"\"\n",
  "django__django-11490": "",
  "django__django-11532": "diff --git a/tests/mail/tests.py b/tests/mail/tests.py\nindex a6f0e17..3e11325 100644\n--- a/tests/mail/tests.py\n+++ b/tests/mail/tests.py\n@@ -2,6 +2,7 @@ import asyncore\n import base64\n import mimetypes\n import os\n+from unittest import mock\n import shutil\n import smtpd\n import sys\n@@ -363,6 +364,19 @@ class MailTests(HeadersCheckMixin, SimpleTestCase):\n     def test_none_body(self):\n         msg = EmailMessage('subject', None, 'from@example.com', ['to@example.com'])\n         self.assertEqual(msg.body, '')\n+\n+    @mock.patch('socket.getfqdn', return_value='\u6f22\u5b57')\n+    def test_non_ascii_dns_non_unicode_email(self, mocked_getfqdn):\n+        \"\"\"\n+        Test that non-ASCII hostname is converted to punycode in Message-ID\n+        when the email encoding is non-unicode such as iso-8859-1.\n+        \"\"\"\n+        from django.core.mail.message import DNS_NAME\n+        delattr(DNS_NAME, '_fqdn')  # Reset DNS_NAME cache\n+        email = EmailMessage('Subject', 'Body', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        message = email.message()\n+        self.assertIn('@xn--p8s937b', message['Message-ID'])\n         self.assertEqual(msg.message().get_payload(), '')\n \n     def test_encoding(self):\n",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..378e0c6 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,9 +1,10 @@\n+\n from django import forms\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n-from django.db.models import F\n+from django.db.models import F, Field, Model\n from django.db.models.functions import Upper\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..cb02873 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -8,8 +8,8 @@ from django.db.models import (\n from django.db.models.functions import Upper\n from django.test import TestCase\n from django.utils.deprecation import RemovedInDjango31Warning\n-\n-from .models import Article, Author, OrderedByFArticle, Reference\n+from datetime import datetime\n+from .models import Article, Author, ChildArticle, OrderedByFArticle, Reference\n \n \n class OrderingTests(TestCase):\n",
  "django__django-11603": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 2b8f813..f72871e 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -391,7 +391,18 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n-    def test_count_star(self):\n+    def test_min_max_distinct_on_aggregate(self):\n+        \"\"\"\n+        Test Min and Max with distinct=True. These should return correct results,\n+        even though distinct has no practical effect on their outcome.\n+        \"\"\"\n+        for aggregate, expected_result in (\n+            (Min, 3.0),  # Assuming ratings have values [3.0, 4.0, 5.0, 4.0, 5.5], distinct min is 3.0\n+            (Max, 5.5),  # Assuming ratings have values [3.0, 4.0, 5.0, 4.0, 5.5], distinct max is 5.5\n+        ):\n+            with self.subTest(aggregate=aggregate.__name__):\n+                books = Book.objects.aggregate(ratings=aggregate('rating', distinct=True))\n+                self.assertEqual(books['ratings'], expected_result)\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n         sql = ctx.captured_queries[0]['sql']\n",
  "django__django-11740": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a98fff5..2bf5af3 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -718,7 +718,36 @@ class AutodetectorTests(TestCase):\n         self.assertOperationTypes(changes, 'testapp', 0, [\"RemoveField\"])\n         self.assertOperationAttributes(changes, \"testapp\", 0, 0, name=\"name\")\n \n-    def test_alter_field(self):\n+    def test_field_change_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test that changing a UUIDField to a ForeignKey creates the correct\n+        model dependency in migrations.\n+        \"\"\"\n+        # Initial state with a UUIDField\n+        app1_initial = ModelState(\"testapp1\", \"App1\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+            (\"another_app\", models.UUIDField(null=True, blank=True)),\n+        ])\n+        app2_initial = ModelState(\"testapp2\", \"App2\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+        ])\n+        # State after changing UUIDField to ForeignKey\n+        app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+            (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2_with_fk = ModelState(\"testapp2\", \"App2\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([app1_initial, app2_initial], [app1_with_fk, app2_with_fk])\n+        # Check the number and types of migrations\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, [\"AlterField\"])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n         \"\"\"Tests autodetection of new fields.\"\"\"\n         changes = self.get_changes([self.author_name], [self.author_name_longer])\n         # Right number/type of migrations?\n@@ -2399,4 +2428,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-11749": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex a0e1530..dbef6fc 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -223,8 +223,25 @@ class CommandTests(SimpleTestCase):\n         out = StringIO()\n         management.call_command('subparser_dest', 'foo', bar=12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n+    from django.core.management import call_command, CommandError\n+    from django.core.management.base import BaseCommand\n+    from django.utils.six import StringIO\n \n-    def test_subparser_dest_required_args(self):\n+    def test_mutually_exclusive_group_required_options(self):\n+        # Test with mutually exclusive argument 'foo_id' provided.\n+        out = StringIO()\n+        call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+\n+        # Test with mutually exclusive argument 'foo_name' provided.\n+        out = StringIO()\n+        call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+\n+        # Test the case where neither mutually exclusive arguments are provided.\n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            call_command('mutually_exclusive_required')\n         out = StringIO()\n         management.call_command('subparser_required', 'foo_1', 'foo_2', bar=12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n",
  "django__django-11790": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 440150b..57894b5 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -437,6 +437,23 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         self.assertEqual(form.fields['username'].max_length, 254)\n         self.assertEqual(form.errors, {})\n \n+    def test_username_field_renders_maxlength_attribute(self):\n+        data = {\n+            'username': 'testuser',\n+            'password': 'password',\n+        }\n+        form = AuthenticationForm(None, data)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 255)\n+\n+    @override_settings(AUTH_USER_MODEL='auth_tests.IntegerUsernameUser')\n+    def test_username_field_renders_default_maxlength_when_not_set(self):\n+        data = {\n+            'username': '0123456',\n+            'password': 'password',\n+        }\n+        form = AuthenticationForm(None, data)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 254)\n+\n     def test_username_field_label(self):\n \n         class CustomAuthenticationForm(AuthenticationForm):\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..7e87e9f 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -306,7 +306,28 @@ class WriterTests(SimpleTestCase):\n             \"default=migrations.test_writer.IntEnum(1))\"\n         )\n \n-    def test_serialize_choices(self):\n+    def test_serialize_translated_enum(self):\n+        from django.utils.translation import gettext_lazy as _\n+\n+        class TextTranslatedEnum(enum.Enum):\n+            A = _('a-value')\n+            B = _('value-b')\n+\n+        # Check the serialization of the Enum name instead of the translated value\n+        self.assertSerializedResultEqual(\n+            TextTranslatedEnum.A,\n+            (\"migrations.test_writer.TextTranslatedEnum['A']\", {'import migrations.test_writer'})\n+        )\n+        \n+        field = models.CharField(default=TextTranslatedEnum.A, choices=[(m.value, m) for m in TextTranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('a-value', migrations.test_writer.TextTranslatedEnum['A']), \"\n+            \"('value-b', migrations.test_writer.TextTranslatedEnum['B'])], \"\n+            \"default=migrations.test_writer.TextTranslatedEnum['A'])\"\n+        )\n         class TextChoices(models.TextChoices):\n             A = 'A', 'A value'\n             B = 'B', 'B value'\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..4d7d94f 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,6 @@\n+\n import unittest\n-from datetime import datetime\n+from datetime import datetime, timedelta\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -316,9 +317,32 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_rfc850(self):\n-        parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n-        self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_two_digit_year(self, mocked_datetime):\n+        # Mock the current date to different years to test the parsing logic\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        # Test with different current years to check the two-digit year resolution\n+        current_years = [2019, 2020, 2048, 2075]\n+        for current_year in current_years:\n+            # Set the mocked current date\n+            mocked_datetime.utcnow.return_value = datetime(current_year, 11, 6, 8, 49, 37)\n+            \n+            # Test cases\n+            test_cases = [\n+                # Two-digit year '69' should be resolved based on the current year\n+                ('Tuesday, 31-Dec-69 08:49:37 GMT', datetime(1969 if current_year - 50 < 1969 else 2069, 12, 31, 8, 49, 37)),\n+                # Two-digit year '70' should be resolved based on the current year\n+                ('Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970 if current_year - 50 < 1970 else 2070, 11, 10, 8, 49, 37)),\n+                # Two-digit year '99' should always resolve to 1999 before 2049\n+                ('Friday, 31-Dec-99 08:49:37 GMT', datetime(1999 if current_year < 2049 else 2099, 12, 31, 8, 49, 37)),\n+            ]\n+\n+            for rfc850str, expected_date in test_cases:\n+                with self.subTest(rfc850str=rfc850str, current_year=current_year):\n+                    parsed = parse_http_date(rfc850str)\n+                    self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n \n     def test_parsing_asctime(self):\n         parsed = parse_http_date('Sun Nov  6 08:49:37 1994')\n",
  "django__django-11880": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 95afc0d..526caf9 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3672,7 +3672,48 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n             '<input type=\"hidden\" name=\"data\" id=\"id_data\"></td></tr>'\n         )\n \n-    def test_field_named_data(self):\n+import copy\n+from django.forms import Form, CharField\n+from django.test import SimpleTestCase\n+\n+class FieldDeepCopyTests(SimpleTestCase):\n+    def test_field_deep_copy_error_messages(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        self.assertIsInstance(field_copy, CustomCharField)\n+        self.assertIsNot(field_copy.error_messages, field.error_messages)\n+        self.assertEqual(field_copy.error_messages, {'invalid': 'Form custom error message.'})\n+\n+    def test_modify_original_field_error_messages(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Original error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        field.error_messages['invalid'] = 'Modified original error message.'\n+\n+        self.assertEqual(field.error_messages['invalid'], 'Modified original error message.')\n+        self.assertEqual(field_copy.error_messages['invalid'], 'Original error message.')\n+\n+    def test_modify_copied_field_error_messages(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Original error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        field_copy.error_messages['invalid'] = 'Modified copied error message.'\n+\n+        self.assertEqual(field.error_messages['invalid'], 'Original error message.')\n+        self.assertEqual(field_copy.error_messages['invalid'], 'Modified copied error message.')\n         class DataForm(Form):\n             data = CharField(max_length=10)\n \n",
  "django__django-11951": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex f2f6bbd..80a50ca 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -1,4 +1,6 @@\n+\n from operator import attrgetter\n+from math import ceil\n \n from django.db import IntegrityError, NotSupportedError, connection\n from django.db.models import FileField, Value\n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..aeff159 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -116,6 +116,16 @@ class ChoicesTests(SimpleTestCase):\n         self.assertEqual(Medal.values, ['GOLD', 'SILVER', 'BRONZE'])\n         self.assertEqual(Medal.names, ['GOLD', 'SILVER', 'BRONZE'])\n \n+    def test_str(self):\n+        for test_enum in [Gender, Suit, YearInSchool, Vehicle]:\n+            for member in test_enum:\n+                with self.subTest(member=member):\n+                    self.assertEqual(str(member), str(member.value))\n+        Medal = models.TextChoices('Medal', 'GOLD SILVER BRONZE')\n+        self.assertEqual(Medal.labels, ['Gold', 'Silver', 'Bronze'])\n+        self.assertEqual(Medal.values, ['GOLD', 'SILVER', 'BRONZE'])\n+        self.assertEqual(Medal.names, ['GOLD', 'SILVER', 'BRONZE'])\n+\n     def test_textchoices_containment(self):\n         self.assertIn(YearInSchool.FRESHMAN, YearInSchool)\n         self.assertIn('FR', YearInSchool)\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..6a5bfcb 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -147,8 +147,22 @@ class ChoicesTests(SimpleTestCase):\n             with self.subTest(field=field):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n+from django.db import models\n+from django.test import TestCase\n+\n+class OverridingGetFieldDisplayTests(TestCase):\n+\n+    def test_overriding_get_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n \n-class GetFieldDisplayTests(SimpleTestCase):\n+        # Create an instance of the model\n+        f = FooBar(foo_bar=1)\n+        # Assert that the overridden method returns the expected value\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n \n     def test_choices_and_field_display(self):\n         \"\"\"\n",
  "django__django-12039": "diff --git a/tests/indexes/tests.py b/tests/indexes/tests.py\nindex 700f574..bce2134 100644\n--- a/tests/indexes/tests.py\n+++ b/tests/indexes/tests.py\n@@ -9,12 +9,16 @@ from django.db.models.query_utils import Q\n from django.test import (\n     TestCase, TransactionTestCase, skipIfDBFeature, skipUnlessDBFeature,\n )\n+from django.db import connection\n+from django.db.models import Index\n from django.test.utils import override_settings\n from django.utils import timezone\n \n from .models import (\n     Article, ArticleTranslation, IndexedArticle2, IndexTogetherSingleList,\n )\n+from django.db import connection\n+from django.db.models import Index\n \n \n class SchemaIndexesTests(TestCase):\n@@ -22,7 +26,45 @@ class SchemaIndexesTests(TestCase):\n     Test index handling by the db.backends.schema infrastructure.\n     \"\"\"\n \n-    def test_index_name_hash(self):\n+    def test_columns_list_sql(self):\n+        index = Index(fields=['headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_descending_columns_list_sql(self):\n+        index = Index(fields=['-headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s DESC)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_ops_class_columns_lists_sql(self):\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_ops_class_descending_columns_list_sql(self):\n+        index = Index(\n+            fields=['-headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops DESC)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n         \"\"\"\n         Index names should be deterministic.\n         \"\"\"\n",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..d5c6928 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n@@ -10,12 +11,32 @@ from django.db.models.sql.query import Query\n from django.db.models.sql.where import OR\n from django.test import SimpleTestCase\n from django.test.utils import register_lookup\n+from django.db.models.sql.where import WhereNode\n \n from .models import Author, Item, ObjectC, Ranking\n \n \n class TestQuery(SimpleTestCase):\n-    def test_simple_query(self):\n+    def test_iterable_lookup_value(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=['a', 'b']))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ['a', 'b'])\n+\n+    def test_iterable_lookup_value_with_tuple(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=('a', 'b')))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ('a', 'b'))\n+\n+    def test_non_iterable_lookup_value(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name='a'))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, 'a')\n         query = Query(Author)\n         where = query.build_where(Q(num__gt=2))\n         lookup = where.children[0]\n",
  "django__django-12125": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex e62f7b0..9b4b434 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -470,7 +470,36 @@ class WriterTests(SimpleTestCase):\n         regex = re.compile(r'^\\w+$')\n         self.assertSerializedEqual(regex)\n \n-    def test_serialize_class_based_validators(self):\n+    def test_serialize_nested_classes(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        field = Outer.Inner(max_length=20)\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"test_writer.Outer.Inner(max_length=20)\",\n+            \"Inner class was not serialized with the correct path\"\n+        )\n+\n+    def test_serialize_nested_enum(self):\n+        import enum\n+        from enumfields import Enum, EnumField\n+\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+        \n+        field = EnumField(enum=Thing.State)\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"enumfields.fields.EnumField(enum=test_writer.Thing.State)\",\n+            \"EnumField did not serialize the nested enum class correctly\"\n+        )\n         \"\"\"\n         Ticket #22943: Test serialization of class-based validators, including\n         compiled regexes.\n@@ -746,4 +775,4 @@ class WriterTests(SimpleTestCase):\n \n     def test_register_non_serializer(self):\n         with self.assertRaisesMessage(ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "django__django-12143": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 2d13234..dd03514 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -831,11 +831,30 @@ class ChangeListTests(TestCase):\n             'form-0-load': '10',\n             '_save': 'Save',\n         }\n+    def test_get_list_editable_queryset_with_complex_prefix(self):\n+        # Test with a complex prefix including regex special characters\n+        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n+        Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n+        data = {\n+            'form.*(?P<name>\\w+)-TOTAL_FORMS': '2',\n+            'form.*(?P<name>\\w+)-INITIAL_FORMS': '2',\n+            'form.*(?P<name>\\w+)-MIN_NUM_FORMS': '0',\n+            'form.*(?P<name>\\w+)-MAX_NUM_FORMS': '1000',\n+            'form.*(?P<name>\\w+)-0-uuid': str(a.pk),\n+            'form.*(?P<name>\\w+)-0-load': '10',\n+            '_save': 'Save',\n+        }\n         superuser = self._create_superuser('superuser')\n         self.client.force_login(superuser)\n         changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n         m = SwallowAdmin(Swallow, custom_site)\n         request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form.*(?P<name>\\w+)')\n+        self.assertEqual(queryset.count(), 1)\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n+        request = self.factory.post(changelist_url, data=data)\n         queryset = m._get_list_editable_queryset(request, prefix='form')\n         self.assertEqual(queryset.count(), 1)\n         data['form-0-uuid'] = 'INVALD_PRIMARY_KEY'\n",
  "django__django-12155": "",
  "django__django-12193": "diff --git a/tests/postgres_tests/test_array.py b/tests/postgres_tests/test_array.py\nindex 6228cbc..6ffffd6 100644\n--- a/tests/postgres_tests/test_array.py\n+++ b/tests/postgres_tests/test_array.py\n@@ -1103,6 +1103,34 @@ class TestSplitFormWidget(PostgreSQLWidgetTestCase):\n             }\n         )\n \n+    def test_splitarrayfield_with_booleanfield(self):\n+        # Initialize SplitArrayField with BooleanField and pre-existing data\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=4)\n+        context = widget.get_context('name', [True, False, True, False])\n+        # Check that the checked attribute is correctly applied\n+        self.assertEqual(\n+            [subwidget['attrs'].get('checked', False) for subwidget in context['widget']['subwidgets']],\n+            [True, {}, True, {}]\n+        )\n+\n+    def test_splitarrayfield_no_true_values(self):\n+        # All values are False, none should be checked\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('name', [False, False, False])\n+        self.assertEqual(\n+            [subwidget['attrs'].get('checked', False) for subwidget in context['widget']['subwidgets']],\n+            [{}, {}, {}]\n+        )\n+\n+    def test_splitarrayfield_all_true_values(self):\n+        # All values are True, all should be checked\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('name', [True, True, True])\n+        self.assertEqual(\n+            [subwidget['attrs'].get('checked', False) for subwidget in context['widget']['subwidgets']],\n+            [True, True, True]\n+        )\n+\n     def test_render(self):\n         self.check_html(\n             SplitArrayWidget(forms.TextInput(), size=2), 'array', None,\n",
  "django__django-12209": "diff --git a/tests/serializers/models/data.py b/tests/serializers/models/data.py\nindex 946715d..2630143 100644\n--- a/tests/serializers/models/data.py\n+++ b/tests/serializers/models/data.py\n@@ -252,6 +252,10 @@ class SmallPKData(models.Model):\n # class TimePKData(models.Model):\n #    data = models.TimeField(primary_key=True)\n \n+import uuid\n+\n+class UUIDDefaultData(models.Model):\n+    data = models.UUIDField(primary_key=True, default=uuid.uuid4)\n \n class UUIDData(models.Model):\n     data = models.UUIDField(primary_key=True)\n",
  "django__django-12262": "",
  "django__django-12276": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 61f7a13..417551c 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import copy\n import datetime\n import json\n@@ -2486,6 +2487,22 @@ Password: <input type=\"password\" name=\"password\" required>\n         self.assertEqual(f.errors, {})\n         self.assertEqual(f.cleaned_data['file1'], 'resume.txt')\n \n+    def test_fileinput_with_required_attribute(self):\n+        # Test the FileInput widget directly, ensuring it handles the `required` attribute properly.\n+        widget = FileInput()\n+        \n+        # Case 1: No initial data provided, should be required.\n+        self.assertHTMLEqual(\n+            widget.render('file1', None, attrs={'required': True}),\n+            '<input type=\"file\" name=\"file1\" required>',\n+        )\n+\n+        # Case 2: Initial data provided, should not be required.\n+        self.assertHTMLEqual(\n+            widget.render('file1', 'resume.txt', attrs={'required': True}),\n+            '<input type=\"file\" name=\"file1\">',\n+        )\n+\n     def test_basic_processing_in_view(self):\n         class UserRegistration(Form):\n             username = CharField(max_length=10)\n",
  "django__django-12304": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 6cabf01..4293b2b 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -1,3 +1,7 @@\n+\n+from django.template import Context, Template\n+...\n+\n import datetime\n import decimal\n import ipaddress\n@@ -143,6 +147,15 @@ class ChoicesTests(SimpleTestCase):\n                 APPLE = 1, 'Apple'\n                 PINEAPPLE = 1, 'Pineapple'\n \n+    def test_enum_usage_in_template(self):\n+        # Test the enumeration type in Django template\n+        template = Template('{% if student.year_in_school == YearInSchool.FRESHMAN %}Freshman{% else %}Not Freshman{% endif %}')\n+        output = template.render(Context({'student': type('Student', (object,), {'year_in_school': YearInSchool.FRESHMAN})}))\n+        self.assertEqual(output, 'Freshman')\n+        \n+        output = template.render(Context({'student': type('Student', (object,), {'year_in_school': YearInSchool.SENIOR})}))\n+        self.assertEqual(output, 'Not Freshman')\n+\n     def test_str(self):\n         for test in [Gender, Suit, YearInSchool, Vehicle]:\n             for member in test:\n",
  "django__django-12308": "",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..03dde02 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1015,7 +1015,23 @@ class OtherModelTests(SimpleTestCase):\n             class ParkingLot(Place):\n                 parent = models.OneToOneField(Place, models.CASCADE)\n \n-    def test_m2m_table_name_clash(self):\n+    def test_order_of_onetoonefields_with_parent_link(self):\n+        class Document(models.Model):\n+            pass\n+\n+        # Test with correct order of parent_link first\n+        class PickingCorrectOrder(Document):\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+\n+        self.assertEqual(PickingCorrectOrder.check(), [])\n+\n+        # Test with incorrect order of parent_link second\n+        msg = 'Add parent_link=True to invalid_models_tests.PickingIncorrectOrder.origin.'\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            class PickingIncorrectOrder(Document):\n+                origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+                document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n         class Foo(models.Model):\n             bar = models.ManyToManyField('Bar', db_table='myapp_bar')\n \n",
  "django__django-12419": "diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py\nindex 7af62eb..b279d55 100644\n--- a/tests/middleware/test_security.py\n+++ b/tests/middleware/test_security.py\n@@ -247,11 +247,16 @@ class SecurityMiddlewareTest(SimpleTestCase):\n             with self.subTest(value=value), override_settings(SECURE_REFERRER_POLICY=value):\n                 self.assertEqual(self.process_response()['Referrer-Policy'], expected)\n \n-    @override_settings(SECURE_REFERRER_POLICY='strict-origin')\n+    @override_settings(SECURE_REFERRER_POLICY='same-origin')\n+    def test_referrer_policy_secure_default(self):\n+        \"\"\"\n+        The default SECURE_REFERRER_POLICY should be 'same-origin'.\n+        \"\"\"\n+        self.assertEqual(self.process_response()['Referrer-Policy'], 'same-origin')\n     def test_referrer_policy_already_present(self):\n         \"\"\"\n         The middleware will not override a \"Referrer-Policy\" header already\n         present in the response.\n         \"\"\"\n         response = self.process_response(headers={'Referrer-Policy': 'unsafe-url'})\n-        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n",
  "django__django-12663": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 872551b..e91c97a 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -19,6 +19,7 @@ from django.db.models.functions import (\n )\n from django.db.models.sql import constants\n from django.db.models.sql.datastructures import Join\n+from django.utils.functional import SimpleLazyObject\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import Approximate, isolate_apps\n \n",
  "django__django-12708": "",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..28991b1 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -138,7 +138,18 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n         self.assertEqual(f2.widget.attrs['maxlength'], '20')\n         self.assertEqual(f2.widget.attrs['size'], '10')\n \n-    def test_formfield_overrides_for_datetime_field(self):\n+    def test_formfield_overrides_m2m_widget(self):\n+        \"\"\"\n+        The widget for ManyToManyFields should be overridden by specifying a \n+        widget in formfield_overrides.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            formfield_overrides = {\n+                ManyToManyField: {'widget': forms.CheckboxSelectMultiple},\n+            }\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, forms.CheckboxSelectMultiple)\n         \"\"\"\n         Overriding the widget for DateTimeField doesn't overrides the default\n         form_class for that field (#26449).\n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..b0ffe95 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,7 +172,7 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n@@ -181,4 +181,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 17e707b..426a0aa 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2444,8 +2444,35 @@ class AutodetectorTests(TestCase):\n         self.assertNumberMigrations(changes, 'testapp', 1)\n         self.assertOperationTypes(changes, 'testapp', 0, [\"AddField\", \"AddField\"])\n         self.assertOperationAttributes(changes, 'testapp', 0, 0)\n-\n-    def test_mti_inheritance_model_removal(self):\n+    from django.db import models\n+    from django.test import TestCase\n+    from django.db.migrations.state import ModelState\n+\n+    class TestMigrationFieldError(TestCase):\n+        def test_add_model_with_field_removed_from_base_model(self):\n+            \"\"\"\n+            Removing a base field takes place before adding a new inherited model\n+            that has a field with the same name.\n+            \"\"\"\n+            before = [\n+                ModelState('app', 'readable', [\n+                    ('id', models.AutoField(primary_key=True)),\n+                    ('title', models.CharField(max_length=200)),\n+                ]),\n+            ]\n+            after = [\n+                ModelState('app', 'readable', [\n+                    ('id', models.AutoField(primary_key=True)),\n+                ]),\n+                ModelState('app', 'book', [\n+                    ('title', models.CharField(max_length=200)),\n+                ], bases=('app.readable',)),\n+            ]\n+            changes = self.get_changes(before, after)\n+            self.assertNumberMigrations(changes, 'app', 1)\n+            self.assertOperationTypes(changes, 'app', 0, ['RemoveField', 'CreateModel'])\n+            self.assertOperationAttributes(changes, 'app', 0, 0, name='title', model_name='readable')\n+            self.assertOperationAttributes(changes, 'app', 0, 1, name='book')\n         Animal = ModelState('app', 'Animal', [\n             (\"id\", models.AutoField(primary_key=True)),\n         ])\n@@ -2453,4 +2480,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..a426c8b 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -8,7 +8,8 @@ from django.db import connection\n from django.db.models import Exists, Max, OuterRef\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n-from django.utils.deprecation import RemovedInDjango40Warning\n+from django.db import models\n+from django.test.utils import isolate_apps\n \n from .models import (\n     Article, Author, Freebie, Game, IsNullWithNoneAsRHS, Player, Season, Tag,\n@@ -189,6 +190,49 @@ class LookupTests(TestCase):\n             }\n         )\n \n+    def test_in_bulk_meta_constraint(self):\n+        # Setting up a model with a UniqueConstraint on the 'year' field\n+        season_2011 = Season.objects.create(year=2011)\n+        season_2012 = Season.objects.create(year=2012)\n+        Season.objects.create(year=2013)\n+        \n+        # Testing in_bulk with field_name='year' which should be valid\n+        self.assertEqual(\n+            Season.objects.in_bulk(\n+                [season_2011.year, season_2012.year],\n+                field_name='year',\n+            ),\n+            {season_2011.year: season_2011, season_2012.year: season_2012},\n+        )\n+\n+    @isolate_apps('lookup')\n+    def test_in_bulk_non_unique_meta_constaint(self):\n+        # Creating a temporary model with UniqueConstraint on 'ean' and 'brand'+'name'\n+        class Model(models.Model):\n+            ean = models.CharField(max_length=100)\n+            brand = models.CharField(max_length=100)\n+            name = models.CharField(max_length=80)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=['ean'],\n+                        name='partial_ean_unique',\n+                        condition=models.Q(is_active=True)\n+                    ),\n+                    models.UniqueConstraint(\n+                        fields=['brand', 'name'],\n+                        name='together_brand_name_unique',\n+                    ),\n+                ]\n+\n+        # Testing in_bulk with non-unique field_names\n+        msg = \"in_bulk()'s field_name must be a unique field but '%s' isn't.\"\n+        for field_name in ['brand', 'ean']:\n+            with self.subTest(field_name=field_name):\n+                with self.assertRaisesMessage(ValueError, msg % field_name):\n+                    Model.objects.in_bulk(field_name=field_name)\n+\n     def test_in_bulk_non_unique_field(self):\n         msg = \"in_bulk()'s field_name must be a unique field but 'author' isn't.\"\n         with self.assertRaisesMessage(ValueError, msg):\n",
  "django__django-12858": "",
  "django__django-13012": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 87c0945..e118253 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1821,10 +1821,26 @@ class CombinableTests(SimpleTestCase):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             Combinable() | Combinable()\n \n-    def test_reversed_and(self):\n+    class ExpressionWrapperTests(SimpleTestCase):\n+        def test_empty_group_by(self):\n+            expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+            self.assertEqual(expr.get_group_by_cols(alias=None), [])\n+\n+        def test_non_empty_group_by(self):\n+            expr = ExpressionWrapper(Lower(Value('f')), output_field=IntegerField())\n+            self.assertEqual(expr.get_group_by_cols(alias=None), [expr.expression])\n+\n+        def test_constant_expression_exclusion_from_group_by(self):\n+            # Assuming 'Model' has fields 'column_a' and 'column_b'\n+            expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+            queryset = Model.objects.annotate(expr_res=expr).values('expr_res', 'column_a').annotate(sum=Sum('column_b'))\n+            sql, params = queryset.query.sql_with_params()\n+            self.assertNotIn(\"GROUP BY \\\"model\\\".\\\"column_a\\\", 3\", sql)\n+            # We would expect the group by to only contain column_a\n+            self.assertIn(\"GROUP BY \\\"model\\\".\\\"column_a\\\"\", sql)\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             object() & Combinable()\n \n     def test_reversed_or(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n-            object() | Combinable()\n+            object() | Combinable()\n",
  "django__django-13028": "diff --git a/tests/queries/models.py b/tests/queries/models.py\nindex a43cfb4..ffffab0 100644\n--- a/tests/queries/models.py\n+++ b/tests/queries/models.py\n@@ -72,6 +72,8 @@ class ExtraInfo(models.Model):\n     class Meta:\n         ordering = ['info']\n \n+    filterable = models.BooleanField(default=True)\n+\n     def __str__(self):\n         return self.info\n \n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..a57d544 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,6 +343,34 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_order_by_self_referential_fk(self):\n+        # Set up authors and articles\n+        author_1 = Author.objects.create(name='Author 1')\n+        author_2 = Author.objects.create(name='Author 2', editor=author_1)\n+        article_1 = Article.objects.create(headline='Article 1', author=author_1)\n+        article_2 = Article.objects.create(headline='Article 2', author=author_2)\n+        \n+        # Order by the editor (self-referential FK)\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline'),\n+        )\n+\n+        # Order by editor_id field explicitly\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline'),\n+        )\n+\n+        # Test with descending order\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__editor_id'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline'),\n+        )\n+\n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n@@ -353,6 +381,34 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n+\n+    def test_order_by_self_referential_fk(self):\n+        # Set up authors and articles\n+        author_1 = Author.objects.create(name='Author 1')\n+        author_2 = Author.objects.create(name='Author 2', editor=author_1)\n+        article_1 = Article.objects.create(headline='Article 1', author=author_1)\n+        article_2 = Article.objects.create(headline='Article 2', author=author_2)\n+        \n+        # Order by the editor (self-referential FK)\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline'),\n+        )\n+\n+        # Order by editor_id field explicitly\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline'),\n+        )\n+\n+        # Test with descending order\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__editor_id'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline'),\n+        )\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline').asc()), [\n                 \"Article 1\",\n",
  "django__django-13089": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex e11856f..08e39de 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -615,6 +615,32 @@ class BaseCacheTests:\n                 count += 1\n         self.assertEqual(count, final_count)\n \n+    def test_cull_when_no_entries_to_delete(self):\n+        \"\"\"\n+        Test the _cull method when there are no entries to delete.\n+        This ensures the fix for handling None values from cursor.fetchone().\n+        \"\"\"\n+        try:\n+            cull_cache = caches['cull']\n+        except InvalidCacheBackendError:\n+            self.skipTest(\"Culling isn't implemented.\")\n+        \n+        # Set the max_entries to force culling\n+        old_max_entries = cull_cache._max_entries\n+        cull_cache._max_entries = 1\n+        try:\n+            # Clear any existing cache entries\n+            cull_cache.clear()\n+            # Add a single cache entry\n+            cull_cache.set('test_key', 'test_value', 1000)\n+            # Trigger _cull\n+            cull_cache.set('another_key', 'another_value', 1000)\n+            # Ensure the key still exists since _cull shouldn't remove it\n+            self.assertTrue(cull_cache.has_key('test_key'))\n+            self.assertTrue(cull_cache.has_key('another_key'))\n+        finally:\n+            cull_cache._max_entries = old_max_entries\n+\n     def test_cull(self):\n         self._perform_cull_test('cull', 50, 29)\n \n",
  "django__django-13109": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex d60d822..ef1b2e4 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -1645,7 +1645,45 @@ class ModelFormBasicTests(TestCase):\n         obj.full_clean()\n \n \n-class ModelMultipleChoiceFieldTests(TestCase):\n+from django.test import TestCase\n+from django import forms\n+from django.core.exceptions import ValidationError\n+from .models import Article, Writer, FavoriteArticles\n+\n+class ForeignKeyValidationTests(TestCase):\n+    def setUp(self):\n+        # Create articles, some of which are archived\n+        self.active_article = Article.objects.create(title='Active Article', archived=False)\n+        self.archived_article = Article.objects.create(title='Archived Article', archived=True)\n+\n+    def test_foreign_key_validation_uses_base_manager(self):\n+        class FavoriteArticlesForm(forms.ModelForm):\n+            class Meta:\n+                model = FavoriteArticles\n+                fields = '__all__'\n+            \n+            def __init__(self, *args, **kwargs):\n+                super().__init__(*args, **kwargs)\n+                # Override the queryset to include archived articles\n+                self.fields['article'].queryset = Article._base_manager.all()\n+\n+        # Test that the form validates successfully with an archived article\n+        form = FavoriteArticlesForm(data={'article': self.archived_article.pk})\n+        self.assertTrue(form.is_valid())\n+\n+    def test_foreign_key_validation_fails_with_default_manager(self):\n+        class FavoriteArticlesForm(forms.ModelForm):\n+            class Meta:\n+                model = FavoriteArticles\n+                fields = '__all__'\n+        \n+        # Form should not validate when using an archived article with the default manager\n+        form = FavoriteArticlesForm(data={'article': self.archived_article.pk})\n+        self.assertFalse(form.is_valid())\n+        self.assertEqual(\n+            form.errors,\n+            {'article': ['Select a valid choice. That choice is not one of the available choices.']}\n+        )\n     @classmethod\n     def setUpTestData(cls):\n         cls.c1 = Category.objects.create(name='Entertainment', slug='entertainment', url='entertainment')\n",
  "django__django-13112": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 081eff8..a283028 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -867,6 +867,74 @@ class StateTests(SimpleTestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             project_state.apps\n \n+    def test_mixed_case_app_label_with_foreign_key(self):\n+        new_apps = Apps()\n+\n+        class Parent(models.Model):\n+            class Meta:\n+                app_label = 'MixedCaseApp'\n+                apps = new_apps\n+\n+        class Child(models.Model):\n+            parent = models.ForeignKey(Parent, models.CASCADE)\n+\n+            class Meta:\n+                app_label = 'MixedCaseApp'\n+                apps = new_apps\n+\n+        project_state = ProjectState()\n+        project_state.add_model(ModelState.from_model(Parent))\n+        project_state.add_model(ModelState.from_model(Child))\n+        self.assertEqual(len(project_state.apps.get_models()), 2)\n+\n+    def test_mixed_case_app_label_with_many_to_many(self):\n+        new_apps = Apps()\n+\n+        class Publisher(models.Model):\n+            class Meta:\n+                app_label = 'MixedCaseApp'\n+                apps = new_apps\n+\n+        class Book(models.Model):\n+            publishers = models.ManyToManyField(Publisher)\n+\n+            class Meta:\n+                app_label = 'MixedCaseApp'\n+                apps = new_apps\n+\n+        project_state = ProjectState()\n+        project_state.add_model(ModelState.from_model(Publisher))\n+        project_state.add_model(ModelState.from_model(Book))\n+        self.assertEqual(len(project_state.apps.get_models()), 2)\n+\n+    def test_reference_mixed_case_app_label(self):\n+        new_apps = Apps()\n+\n+        class Author(models.Model):\n+            class Meta:\n+                app_label = 'MiXedCase_migrations'\n+                apps = new_apps\n+\n+        class Book(models.Model):\n+            author = models.ForeignKey(Author, models.CASCADE)\n+\n+            class Meta:\n+                app_label = 'MiXedCase_migrations'\n+                apps = new_apps\n+\n+        class Magazine(models.Model):\n+            authors = models.ManyToManyField(Author)\n+\n+            class Meta:\n+                app_label = 'MiXedCase_migrations'\n+                apps = new_apps\n+\n+        project_state = ProjectState()\n+        project_state.add_model(ModelState.from_model(Author))\n+        project_state.add_model(ModelState.from_model(Book))\n+        project_state.add_model(ModelState.from_model(Magazine))\n+        self.assertEqual(len(project_state.apps.get_models()), 3)\n+\n     def test_real_apps(self):\n         \"\"\"\n         Including real apps can resolve dangling FK errors.\n",
  "django__django-13121": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex a684d7e..69d9e0a 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1210,13 +1210,57 @@ class ExpressionOperatorTests(TestCase):\n         self.assertEqual(Number.objects.get(pk=self.n.pk).integer, 1764)\n         self.assertEqual(Number.objects.get(pk=self.n.pk).float, Approximate(61.02, places=2))\n \n-    @unittest.skipIf(connection.vendor == 'oracle', \"Oracle doesn't support bitwise XOR.\")\n+    from django.db.models import F\n+    from datetime import timedelta\n+    from django.test import TestCase, skipIf, skipUnless\n+    from django.db import connection\n+    from .models import Experiment\n+\n+    class DurationExpressionTests(TestCase):\n+        def setUp(self):\n+            self.deltas = [timedelta(days=1), timedelta(seconds=3600), timedelta(microseconds=1000)]\n+            self.experiment = Experiment.objects.create(estimated_time=timedelta(days=2, seconds=3600)) \n+\n+        def test_duration_expressions(self):\n+            for delta in self.deltas:\n+                qs = Experiment.objects.annotate(duration=F('estimated_time') + delta)\n+                for obj in qs:\n+                    self.assertEqual(obj.duration, obj.estimated_time + delta)\n+                    \n+        @skipIf(connection.vendor not in {'sqlite', 'mysql'}, \"Test specific to SQLite and MySQL.\")\n+        def test_sqlite_mysql_duration_expression(self):\n+            delta = timedelta(days=1)\n+            qs = Experiment.objects.annotate(duration=F('estimated_time') + delta)\n+            for obj in qs:\n+                self.assertEqual(obj.duration, obj.estimated_time + delta)\n     def test_lefthand_bitwise_xor(self):\n         Number.objects.update(integer=F('integer').bitxor(48))\n         self.assertEqual(Number.objects.get(pk=self.n.pk).integer, 26)\n         self.assertEqual(Number.objects.get(pk=self.n1.pk).integer, -26)\n \n-    @unittest.skipIf(connection.vendor == 'oracle', \"Oracle doesn't support bitwise XOR.\")\n+    from django.db.models import F\n+    from datetime import timedelta\n+    from django.test import TestCase, skipIf, skipUnless\n+    from django.db import connection\n+    from .models import Experiment\n+\n+    class DurationExpressionTests(TestCase):\n+        def setUp(self):\n+            self.deltas = [timedelta(days=1), timedelta(seconds=3600), timedelta(microseconds=1000)]\n+            self.experiment = Experiment.objects.create(estimated_time=timedelta(days=2, seconds=3600)) \n+\n+        def test_duration_expressions(self):\n+            for delta in self.deltas:\n+                qs = Experiment.objects.annotate(duration=F('estimated_time') + delta)\n+                for obj in qs:\n+                    self.assertEqual(obj.duration, obj.estimated_time + delta)\n+                    \n+        @skipIf(connection.vendor not in {'sqlite', 'mysql'}, \"Test specific to SQLite and MySQL.\")\n+        def test_sqlite_mysql_duration_expression(self):\n+            delta = timedelta(days=1)\n+            qs = Experiment.objects.annotate(duration=F('estimated_time') + delta)\n+            for obj in qs:\n+                self.assertEqual(obj.duration, obj.estimated_time + delta)\n     def test_lefthand_bitwise_xor_null(self):\n         employee = Employee.objects.create(firstname='John', lastname='Doe')\n         Employee.objects.update(salary=F('salary').bitxor(48))\n",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..41c1971 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1627,7 +1627,15 @@ class FTimeDeltaTests(TestCase):\n         for e in qs:\n             self.assertEqual(e.delta, delta)\n \n-    def test_duration_with_datetime(self):\n+    @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_no_expression_wrapper(self):\n+        # Test for temporal subtraction without using ExpressionWrapper\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for obj in queryset:\n+            expected_delta = obj.end - obj.start\n+            self.assertEqual(obj.delta, expected_delta)\n         # Exclude e1 which has very high precision so we can test this on all\n         # backends regardless of whether or not it supports\n         # microsecond_precision.\n",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..1de6dbf 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,6 +1,7 @@\n import operator\n \n-from django.db import DatabaseError, NotSupportedError, connection\n+from django.forms import ModelForm, ModelMultipleChoiceField\n+from .models import Number, ReservedName, Publication, Article\n from django.db.models import Exists, F, IntegerField, OuterRef, Value\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n@@ -39,6 +40,36 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.intersection(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n+    def test_union_with_none(self):\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        qs3 = qs1.union(qs2)\n+        # Verifying that qs3.none() indeed returns an empty list.\n+        self.assertSequenceEqual(list(qs3.none()), [])\n+        # Ensure that calling none() does not affect the original union results.\n+        self.assertNumbersEqual(qs3, [0, 1, 8, 9], ordered=False)\n+\n+    def test_union_in_model_form(self):\n+        # Creating a test model form to simulate the issue\n+        class TestArticleForm(ModelForm):\n+            publications = ModelMultipleChoiceField(\n+                Publication.objects.filter(id__lt=2).union(\n+                    Publication.objects.filter(id__gt=5)\n+                ),\n+                required=False,\n+            )\n+\n+            class Meta:\n+                model = Article\n+                fields = ['publications']\n+\n+        form = TestArticleForm(data={'publications': []})  # Simulate empty submission\n+        self.assertTrue(form.is_valid())\n+        article = form.save(commit=False)\n+        article.save()\n+        # Initially, no publications should be added since form is submitted empty\n+        self.assertEqual(article.publications.count(), 0)\n+\n     @skipUnlessDBFeature('supports_select_difference')\n     def test_simple_difference(self):\n         qs1 = Number.objects.filter(num__lte=5)\n",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..8d35823 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -313,6 +313,34 @@ class SessionTestsMixin:\n \n     @override_settings(SECRET_KEY='django_tests_secret_key')\n     def test_decode_legacy(self):\n+        # Custom test to verify legacy decode during Django 3.1 transition\n+        legacy_data = {'a test key': 'a test value'}\n+        with self.settings(DEFAULT_HASHING_ALGORITHM='sha1'):\n+            encoded = self.session.encode(legacy_data)\n+            self.assertEqual(self.session._legacy_decode(encoded), legacy_data)\n+\n+    def test_decode_with_sha256(self):\n+        # Test to ensure decode works with sha256 algorithm\n+        data = {'key1': 'value1'}\n+        with self.settings(DEFAULT_HASHING_ALGORITHM='sha256'):\n+            encoded = self.session.encode(data)\n+            self.assertEqual(self.session.decode(encoded), data)\n+\n+    def test_decode_invalid_data(self):\n+        # Test decoding of invalid data to ensure empty dict is returned\n+        invalid_data = 'invalid:session:data'\n+        with self.assertLogs('django.security.SuspiciousSession', 'WARNING') as cm:\n+            self.assertEqual(self.session.decode(invalid_data), {})\n+        self.assertIn('corrupted', cm.output[0])\n+\n+    def test_legacy_decode_invalid_hash(self):\n+        # Test _legacy_decode when hash doesn't match\n+        data = {'a test key': 'a test value'}\n+        with self.settings(DEFAULT_HASHING_ALGORITHM='sha1'):\n+            encoded = self.session.encode(data)\n+            corrupted_encoded = encoded.replace('a', 'b')\n+            result = self.session._legacy_decode(corrupted_encoded)\n+            self.assertEqual(result, {})\n         # RemovedInDjango40Warning: pre-Django 3.1 sessions will be invalid.\n         legacy_encoded = (\n             'OWUzNTNmNWQxNTBjOWExZmM4MmQ3NzNhMDRmMjU4NmYwNDUyNGI2NDp7ImEgdGVzd'\n",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..483e76d 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -6,6 +6,8 @@ from django.test import (\n     RequestFactory, SimpleTestCase, ignore_warnings, override_settings,\n )\n from django.test.utils import require_jinja2\n+from django.shortcuts import get_object_or_404\n+from .models import Artist, Account\n from django.urls import resolve\n from django.utils.deprecation import RemovedInDjango40Warning\n from django.views.generic import RedirectView, TemplateView, View\n@@ -590,7 +592,20 @@ class DeprecationTests(SimpleTestCase):\n         self.assertEqual(response.context['key'], 'value')\n         self.assertIsInstance(response.context['view'], View)\n \n-    def test_template_params_warning(self):\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_template_params_filtering(self):\n+        \"\"\"Test resolving SimpleLazyObject in kwargs for TemplateView context data.\"\"\"\n+        class OfferView(TemplateView):\n+            template_name = \"offers/offer.html\"\n+            def get_context_data(self, *, offer_slug, **kwargs):\n+                context = super().get_context_data(**kwargs)\n+                offer = get_object_or_404(Account, slug=str(offer_slug))\n+                return {**context, 'offer': offer}\n+\n+        # Create a mock Account object\n+        account = Account.objects.create(slug='test-offer')\n+        response = OfferView.as_view()(self.client.get('/'), offer_slug=account.slug)\n+        self.assertEqual(response.context_data['offer'], account)\n         response = self.client.get('/template/custom/bar1/bar2/')\n         self.assertEqual(response.status_code, 200)\n         msg = (\n",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..7454381 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -15,6 +15,7 @@ from django.forms.models import (\n     modelform_factory,\n )\n from django.template import Context, Template\n+from django.test.utils import isolate_apps\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n \n from .models import (\n@@ -2829,8 +2830,69 @@ class LimitChoicesToTests(TestCase):\n             StumpJokeForm()\n             self.assertEqual(today_callable_dict.call_count, 3)\n \n+class LimitChoicesToTests(TestCase):\n+\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates_with_q_object(self):\n+        # Create test data\n+        threepwood = Character.objects.create(username='Threepwood', last_action='2023-10-01T00:00:00Z')\n+        marley = Character.objects.create(username='Marley', last_action='2023-10-01T00:00:00Z')\n+        \n+        joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=marley)\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=marley)\n+        \n+        joke1.has_fooled_today.add(marley, threepwood)\n+        joke2.has_fooled_today.add(marley)\n+        joke3.has_fooled_today.add(marley, threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n \n-class FormFieldCallbackTests(SimpleTestCase):\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [marley, threepwood],\n+        )\n \n     def test_baseform_with_widgets_in_meta(self):\n         \"\"\"Regression for #13095: Using base forms with widgets defined in Meta should not raise errors.\"\"\"\n",
  "django__django-13343": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex a5ab3a0..5339b7c 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -29,7 +29,7 @@ from django.test.utils import requires_tz_support\n from django.urls import NoReverseMatch, reverse_lazy\n from django.utils import timezone\n \n-from .models import Storage, temp_storage, temp_storage_location\n+from .models import Storage, callable_storage, temp_storage, temp_storage_location\n \n FILE_SUFFIX_REGEX = '[A-Za-z0-9]{7}'\n \n@@ -68,19 +68,15 @@ class GetStorageClassTests(SimpleTestCase):\n \n class FileSystemStorageTests(unittest.TestCase):\n \n-    def test_deconstruction(self):\n-        path, args, kwargs = temp_storage.deconstruct()\n-        self.assertEqual(path, \"django.core.files.storage.FileSystemStorage\")\n-        self.assertEqual(args, ())\n-        self.assertEqual(kwargs, {'location': temp_storage_location})\n-\n-        kwargs_orig = {\n-            'location': temp_storage_location,\n-            'base_url': 'http://myfiles.example.com/'\n-        }\n-        storage = FileSystemStorage(**kwargs_orig)\n-        path, args, kwargs = storage.deconstruct()\n-        self.assertEqual(kwargs, kwargs_orig)\n+    def test_filefield_callable_storage_deconstruction(self):\n+        \"\"\"\n+        Test that a FileField with callable storage retains the callable on deconstruction.\n+        \"\"\"\n+        obj = Storage()\n+        field = obj._meta.get_field('storage_callable')\n+        name, path, args, kwargs = field.deconstruct()\n+        # Make sure the storage argument is the callable, not the evaluated storage\n+        self.assertEqual(kwargs['storage'], callable_storage)\n \n     def test_lazy_base_url_init(self):\n         \"\"\"\n",
  "django__django-13346": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex b918d5c..b7b0f34 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -632,7 +632,21 @@ class TestQuerying(TestCase):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='ar').exists(), False)\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='bar').exists(), True)\n \n-    def test_key_icontains(self):\n+    def test_key_in_lookup(self):\n+        # Assuming 'self.objs' is a list of pre-existing objects for testing\n+        # You should replace `key` and `our_field` with the actual field and key names used in your models\n+        tests = [\n+            ('value__key__in', [0], [self.objs[0], self.objs[1], self.objs[2]]),  # Adjust expected results\n+            ('value__key__in', [1], [self.objs[3]]),  # Adjust expected results\n+            ('value__key', 0, [self.objs[0], self.objs[1], self.objs[2]]),  # Ensure it matches the `__in` case\n+            ('value__key', 1, [self.objs[3]]),  # Ensure it matches the `__in` case\n+        ]\n+        for lookup, value, expected in tests:\n+            with self.subTest(lookup=lookup, value=value):\n+                self.assertSequenceEqual(\n+                    NullableJSONModel.objects.filter(**{lookup: value}),\n+                    expected,\n+                )\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__icontains='Ar').exists(), True)\n \n     def test_key_startswith(self):\n",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..202602d 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -17,6 +17,8 @@ from django.db.models.functions import (\n from django.test import (\n     TestCase, override_settings, skipIfDBFeature, skipUnlessDBFeature,\n )\n+import pytz\n+from datetime import datetime\n from django.utils import timezone\n \n from ..models import Author, DTModel, Fan\n@@ -1133,7 +1135,45 @@ class DateFunctionWithTimeZoneTests(DateFunctionTests):\n         self.assertEqual(model.melb_year.year, 2016)\n         self.assertEqual(model.pacific_year.year, 2015)\n \n-    def test_trunc_ambiguous_and_invalid_times(self):\n+    def test_truncdate_with_tzinfo(self):\n+        start_datetime = datetime(2023, 10, 25, 15, 0, 0)\n+        start_datetime = timezone.make_aware(start_datetime, timezone=pytz.utc)\n+\n+        ny_tz = pytz.timezone('America/New_York')\n+        la_tz = pytz.timezone('America/Los_Angeles')\n+\n+        self.create_model(start_datetime, start_datetime)\n+\n+        model = DTModel.objects.annotate(\n+            ny_date=TruncDate('start_datetime', tzinfo=ny_tz),\n+            la_date=TruncDate('start_datetime', tzinfo=la_tz),\n+        ).get()\n+\n+        ny_start_datetime = start_datetime.astimezone(ny_tz)\n+        la_start_datetime = start_datetime.astimezone(la_tz)\n+\n+        self.assertEqual(model.ny_date, ny_start_datetime.date())\n+        self.assertEqual(model.la_date, la_start_datetime.date())\n+\n+    def test_trunctime_with_tzinfo(self):\n+        start_datetime = datetime(2023, 10, 25, 15, 0, 0)\n+        start_datetime = timezone.make_aware(start_datetime, timezone=pytz.utc)\n+\n+        ny_tz = pytz.timezone('America/New_York')\n+        la_tz = pytz.timezone('America/Los_Angeles')\n+\n+        self.create_model(start_datetime, start_datetime)\n+\n+        model = DTModel.objects.annotate(\n+            ny_time=TruncTime('start_datetime', tzinfo=ny_tz),\n+            la_time=TruncTime('start_datetime', tzinfo=la_tz),\n+        ).get()\n+\n+        ny_start_datetime = start_datetime.astimezone(ny_tz)\n+        la_start_datetime = start_datetime.astimezone(la_tz)\n+\n+        self.assertEqual(model.ny_time, ny_start_datetime.time())\n+        self.assertEqual(model.la_time, la_start_datetime.time())\n         sao = pytz.timezone('America/Sao_Paulo')\n         utc = pytz.timezone('UTC')\n         start_datetime = utc.localize(datetime(2016, 10, 16, 13))\n",
  "django__django-13401": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e39d03e..bc84ede 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -93,9 +93,67 @@ class BasicFieldTests(SimpleTestCase):\n     def test_field_instance_is_picklable(self):\n         \"\"\"Field instances can be pickled.\"\"\"\n         field = models.Field(max_length=100, default='a string')\n-        # Must be picklable with this cached property populated (#28188).\n-        field._get_default\n-        pickle.dumps(field)\n+from django.test import TestCase\n+from django.db import models\n+\n+class AbstractFieldComparisonTests(TestCase):\n+    def test_abstract_inherited_fields(self):\n+        \"\"\"Field instances from abstract models are not equal.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        # Verify fields from different models are not equal\n+        self.assertNotEqual(abstract_model_field, inherit1_model_field)\n+        self.assertNotEqual(abstract_model_field, inherit2_model_field)\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+\n+        # Verify ordering of fields\n+        self.assertLess(abstract_model_field, inherit1_model_field)\n+        self.assertLess(abstract_model_field, inherit2_model_field)\n+        self.assertLess(inherit1_model_field, inherit2_model_field)\n+\n+        # Verify hashing of fields\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit1_model_field))\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit2_model_field))\n+        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n+\n+    def test_fields_from_same_model(self):\n+        \"\"\"Fields from the same model should be equal if they have the same creation_counter.\"\"\"\n+        class ModelWithTwoFields(models.Model):\n+            field1 = models.IntegerField()\n+            field2 = models.IntegerField()\n+\n+        field1 = ModelWithTwoFields._meta.get_field('field1')\n+        field2 = ModelWithTwoFields._meta.get_field('field2')\n+\n+        # These fields should not be equal because they have different creation counters\n+        self.assertNotEqual(field1, field2)\n+        # However, fields from the same model with explicitly set same counters should be equal\n+        field1.creation_counter = field2.creation_counter\n+        self.assertEqual(field1, field2)\n+\n+    def test_field_equality_with_non_field(self):\n+        \"\"\"Fields should not be equal to non-field objects.\"\"\"\n+        class SimpleModel(models.Model):\n+            field = models.IntegerField()\n+\n+        field = SimpleModel._meta.get_field('field')\n+        non_field_object = object()\n+\n+        self.assertNotEqual(field, non_field_object)\n \n     def test_deconstruct_nested_field(self):\n         \"\"\"deconstruct() uses __qualname__ for nested class support.\"\"\"\n",
  "django__django-13410": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 1285e22..d4d4b17 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -1,3 +1,40 @@\n+\n+class LockFileTestCase(unittest.TestCase):\n+    def setUp(self):\n+        # Create a temporary file for testing.\n+        self.test_file = tempfile.NamedTemporaryFile(delete=False)\n+        self.test_file.close()  # Close the file so it can be reopened by tests\n+\n+    def tearDown(self):\n+        # Remove the temporary file after tests run.\n+        os.unlink(self.test_file.name)\n+\n+    def test_exclusive_lock(self):\n+        with open(self.test_file.name, 'rb') as f1, open(self.test_file.name, 'rb') as f2:\n+            self.assertIs(locks.lock(f1, locks.LOCK_EX), True)\n+            self.assertIs(locks.lock(f2, locks.LOCK_EX | locks.LOCK_NB), False)\n+            self.assertIs(locks.unlock(f1), True)\n+\n+    def test_shared_lock(self):\n+        with open(self.test_file.name, 'rb') as f1, open(self.test_file.name, 'rb') as f2:\n+            self.assertIs(locks.lock(f1, locks.LOCK_SH), True)\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), True)\n+            self.assertIs(locks.unlock(f1), True)\n+            self.assertIs(locks.unlock(f2), True)\n+\n+    def test_unlock_failure(self):\n+        # Test unlocking a file that is not locked\n+        with open(self.test_file.name, 'rb') as f:\n+            self.assertIs(locks.unlock(f), True)  # Unlocking an unlocked file should return True\n+\n+    def test_lock_invalid_file(self):\n+        # Test attempting to lock or unlock an invalid file descriptor\n+        with self.assertRaises(OSError):\n+            locks.lock(None, locks.LOCK_EX)\n+\n+        with self.assertRaises(OSError):\n+            locks.unlock(None)\n+\n import errno\n import gzip\n import os\n@@ -8,7 +45,7 @@ from io import BytesIO, StringIO, TextIOWrapper\n from pathlib import Path\n from unittest import mock\n \n-from django.core.files import File\n+from django.core.files import File, locks\n from django.core.files.base import ContentFile\n from django.core.files.move import file_move_safe\n from django.core.files.temp import NamedTemporaryFile\n",
  "django__django-13417": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 8130de5..620d22f 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2076,6 +2076,24 @@ class QuerysetOrderedTests(unittest.TestCase):\n     def test_empty_queryset(self):\n         self.assertIs(Annotation.objects.none().ordered, True)\n \n+    def test_annotated_default_ordering(self):\n+        qs = Annotation.objects.annotate(num_notes=Count('notes'))\n+        self.assertIs(qs.ordered, False)\n+        self.assertIs(qs.order_by('notes').ordered, True)\n+\n+    def test_annotated_values_default_ordering(self):\n+        qs = Annotation.objects.values('name').annotate(num_notes=Count('notes'))\n+        self.assertIs(qs.ordered, False)\n+        self.assertIs(qs.order_by('name').ordered, True)\n+\n+    def test_group_by_without_ordering(self):\n+        qs = Annotation.objects.annotate(num_notes=Count('notes')).all()\n+        self.assertIs(qs.ordered, False)\n+\n+    def test_group_by_with_ordering(self):\n+        qs = Annotation.objects.annotate(num_notes=Count('notes')).order_by('name').all()\n+        self.assertIs(qs.ordered, True)\n+\n     def test_order_by_extra(self):\n         self.assertIs(Annotation.objects.all().extra(order_by=['id']).ordered, True)\n \n",
  "django__django-13516": "",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..7fe4c6d 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,11 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n+from .with_custom_email_field import CustomEmailField\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n@@ -37,7 +39,32 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n-    def test_timeout(self):\n+    def test_token_invalid_after_email_change(self):\n+        \"\"\"Ensure that changing a user's email address invalidates the password reset token.\"\"\"\n+        user = CustomEmailField.objects.create_user('changeemailuser', 'original@example.com', 'testpw')\n+        p0 = PasswordResetTokenGenerator()\n+        tk1 = p0.make_token(user)\n+        self.assertIs(p0.check_token(user, tk1), True)\n+        \n+        # Change the user's email\n+        user.email_address = 'newemail@example.com'\n+        user.save()\n+        \n+        # Token should no longer be valid\n+        self.assertIs(p0.check_token(user, tk1), False)\n+\n+    def test_token_still_valid_without_email_change(self):\n+        \"\"\"Ensure that the token is still valid if the email is not changed.\"\"\"\n+        user = CustomEmailField.objects.create_user('nochangeuser', 'nochange@example.com', 'testpw')\n+        p0 = PasswordResetTokenGenerator()\n+        tk1 = p0.make_token(user)\n+        self.assertIs(p0.check_token(user, tk1), True)\n+        \n+        # Save without changing the email\n+        user.save()\n+        \n+        # Token should still be valid\n+        self.assertIs(p0.check_token(user, tk1), True)\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n         # the value of 'now'.\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..8b78365 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,3 +1,5 @@\n+\n+from django.db.models import Q, UniqueConstraint\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n",
  "django__django-13569": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex a44d0b6..b92c1b6 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1314,4 +1314,52 @@ class AggregateTestCase(TestCase):\n         # non-multivalued JOINs, see Col.possibly_multivalued (refs #31150):\n         # with self.assertNumQueries(1) as ctx:\n         #     self.assertSequenceEqual(books_qs, [book])\n-        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n+        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n+\n+    def test_aggregation_random_ordering_group_by(self):\n+        \"\"\"Test that Random() in ordering doesn't affect grouping with aggregation.\"\"\"\n+        # Setup the test data\n+        t = Thing.objects.create()\n+        Related.objects.create(thing=t)\n+        Related.objects.create(thing=t)\n+\n+        # Annotate with count and order by '?'\n+        queryset = Thing.objects.annotate(rc=Count('related')).order_by('?').values('id', 'rc')\n+\n+        # Ensure that the random ordering does not split the group\n+        self.assertEqual(len(queryset), 1)\n+        self.assertEqual(queryset[0]['rc'], 2)\n+\n+    def test_multiple_aggregates_with_random_ordering(self):\n+        \"\"\"Test multiple aggregates with Random() in ordering.\"\"\"\n+        t1 = Thing.objects.create()\n+        t2 = Thing.objects.create()\n+        Related.objects.create(thing=t1)\n+        Related.objects.create(thing=t1)\n+        Related.objects.create(thing=t2)\n+\n+        # Annotate with count and order by '?'\n+        queryset = Thing.objects.annotate(\n+            rc=Count('related'),\n+            max_id=Max('related__id')\n+        ).order_by('?').values('id', 'rc', 'max_id')\n+\n+        # Ensure that the random ordering does not split the group\n+        self.assertEqual(len(queryset), 2)\n+        counts = sorted(q['rc'] for q in queryset)\n+        max_ids = sorted(q['max_id'] for q in queryset)\n+        self.assertEqual(counts, [1, 2])\n+        self.assertEqual(max_ids, [1, 3])\n+\n+    def test_random_ordering_with_values_list(self):\n+        \"\"\"Test Random() with values_list.\"\"\"\n+        t1 = Thing.objects.create()\n+        Related.objects.create(thing=t1)\n+        Related.objects.create(thing=t1)\n+\n+        # Annotate with count and order by '?'\n+        queryset = Thing.objects.annotate(rc=Count('related')).order_by('?').values_list('id', 'rc')\n+\n+        # Ensure that the random ordering does not split the group\n+        self.assertEqual(len(queryset), 1)\n+        self.assertEqual(queryset[0][1], 2)\n",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..9c4d95b 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -7,6 +8,7 @@ from decimal import Decimal\n from unittest import mock\n \n from django.core.exceptions import FieldError\n+from collections import namedtuple\n from django.db import DatabaseError, NotSupportedError, connection\n from django.db.models import (\n     AutoField, Avg, BinaryField, BooleanField, Case, CharField, Count,\n@@ -875,6 +877,30 @@ class IterableLookupInnerExpressionsTests(TestCase):\n             ['<Company: 5020 Ltd>', '<Company: 5040 Ltd>', '<Company: 5050 Ltd>', '<Company: 5060 Ltd>'],\n             ordered=False\n         )\n+\n+    def test_range_lookup_namedtuple(self):\n+        # Test case to check if namedtuple can be used as arguments to __range\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n+    def test_range_lookup_namedtuple_single_value(self):\n+        # Test case to check if namedtuple with the same min and max values works\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=99, maximum=99),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n+    def test_range_lookup_namedtuple_reverse(self):\n+        # Test case to check if namedtuple with reversed min and max values works\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=100, maximum=51),\n+        )\n+        self.assertSequenceEqual(qs, [])\n         self.assertQuerysetEqual(\n             Company.objects.filter(num_employees__range=(1, 100)),\n             [\n@@ -884,6 +910,30 @@ class IterableLookupInnerExpressionsTests(TestCase):\n             ordered=False\n         )\n \n+    def test_range_lookup_namedtuple(self):\n+        # Test case to check if namedtuple can be used as arguments to __range\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n+    def test_range_lookup_namedtuple_single_value(self):\n+        # Test case to check if namedtuple with the same min and max values works\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=99, maximum=99),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n+    def test_range_lookup_namedtuple_reverse(self):\n+        # Test case to check if namedtuple with reversed min and max values works\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=100, maximum=51),\n+        )\n+        self.assertSequenceEqual(qs, [])\n+\n     @unittest.skipUnless(connection.vendor == 'sqlite',\n                          \"This defensive test only works on databases that don't validate parameter types\")\n     def test_complex_expressions_do_not_introduce_sql_injection_via_untrusted_string_inclusion(self):\n",
  "django__django-13658": "",
  "django__django-13670": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 6f0b13f..e451eeb 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -1,3 +1,4 @@\n+\n from datetime import date, datetime\n \n from django.test import SimpleTestCase, override_settings\n@@ -146,7 +147,24 @@ class DateFormatTests(SimpleTestCase):\n         # Ticket #16924 -- We don't need timezone support to test this\n         self.assertEqual(dateformat.format(aware_dt, 'O'), '-0330')\n \n-    def test_invalid_time_format_specifiers(self):\n+    def test_year_before_1000(self):\n+        # Test years before 1000 to ensure leading zeros are correctly handled.\n+        tests = [\n+            (476, '76'),   # Expected '76' indicates the current issue (incorrect result)\n+            (42, '42'),    # Expected '42' indicates the current issue (incorrect result)\n+            (4, '04'),     # Should be '04' to show the fixed behavior\n+            (999, '99'),   # Boundary for 3-digit year, should be '99'\n+            (1000, '00'),  # Check transition to 4-digit year to 2-digit format\n+            (1, '01'),     # Very small year edge case\n+            (10, '10'),    # Small year edge case\n+            (9999, '99'),  # Upper boundary for 4-digit year\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n         my_birthday = date(1984, 8, 7)\n \n         for specifier in ['a', 'A', 'f', 'g', 'G', 'h', 'H', 'i', 'P', 'r', 's', 'u']:\n@@ -164,4 +182,4 @@ class DateFormatTests(SimpleTestCase):\n             self.assertEqual(\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+            )\n",
  "django__django-13741": "",
  "django__django-13786": "",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..4711a5b 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,7 +1,9 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n from django.test import SimpleTestCase\n+from django.utils.functional import lazy\n \n from ..utils import setup\n \n",
  "django__django-13807": "diff --git a/tests/backends/tests.py b/tests/backends/tests.py\nindex 0aee2b6..dd397d0 100644\n--- a/tests/backends/tests.py\n+++ b/tests/backends/tests.py\n@@ -630,7 +630,16 @@ class ThreadTests(TransactionTestCase):\n \n     available_apps = ['backends']\n \n-    def test_default_connection_thread_local(self):\n+    def test_check_constraints_sql_keywords(self):\n+        with transaction.atomic():\n+            obj = SQLKeywordsModel.objects.create(reporter=self.r)\n+            obj.refresh_from_db()\n+            obj.reporter_id = 30\n+            with connection.constraint_checks_disabled():\n+                obj.save()\n+                with self.assertRaises(IntegrityError):\n+                    connection.check_constraints(table_names=['order'])\n+            transaction.set_rollback(True)\n         \"\"\"\n         The default connection (i.e. django.db.connection) is different for\n         each thread (#17258).\n",
  "django__django-13809": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex d88ea78..cbadfd8 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1314,6 +1314,12 @@ class ManageRunserver(SimpleTestCase):\n         self.assertIn('unapplied migration(s)', self.output.getvalue())\n \n \n+import mock\n+from django.core.management import call_command\n+from django.core.management.commands.runserver import Command as RunserverCommand\n+from django.test import TestCase\n+from io import StringIO\n+\n class ManageRunserverMigrationWarning(TestCase):\n \n     def setUp(self):\n",
  "django__django-13810": "diff --git a/tests/middleware_exceptions/tests.py b/tests/middleware_exceptions/tests.py\nindex bb82f7d..3779062 100644\n--- a/tests/middleware_exceptions/tests.py\n+++ b/tests/middleware_exceptions/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.conf import settings\n from django.core.exceptions import MiddlewareNotUsed\n from django.http import HttpResponse\n@@ -277,7 +278,10 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n     ])\n-    def test_async_and_sync_middleware_sync_call(self):\n+    async def test_async_and_sync_middleware_chain_sync_call(self):\n+        response = self.client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n         response = self.client.get('/middleware_exceptions/view/')\n         self.assertEqual(response.content, b'OK')\n         self.assertEqual(response.status_code, 200)\n",
  "django__django-13820": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex 594c01e..0073923 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -1,3 +1,4 @@\n+\n import compileall\n import os\n \n@@ -6,6 +7,7 @@ from django.db.migrations.exceptions import (\n     AmbiguityError, InconsistentMigrationHistory, NodeNotFoundError,\n )\n from django.db.migrations.loader import MigrationLoader\n+from importlib import import_module\n from django.db.migrations.recorder import MigrationRecorder\n from django.test import TestCase, modify_settings, override_settings\n \n@@ -502,6 +504,48 @@ class LoaderTests(TestCase):\n         migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n         self.assertEqual(migrations, ['0001_initial'])\n \n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations'})\n+    def test_loading_package_with_spec_no_file(self):\n+        \"\"\"\n+        To support frozen environments, MigrationLoader loads migrations from\n+        regular packages with __spec__ set but no __file__ attribute.\n+        \"\"\"\n+        test_module = import_module('migrations.test_migrations')\n+        loader = MigrationLoader(connection)\n+        module_file = test_module.__file__\n+        module_origin = test_module.__spec__.origin\n+        module_has_location = test_module.__spec__.has_location\n+        try:\n+            del test_module.__file__\n+            test_module.__spec__.origin = None\n+            test_module.__spec__.has_location = False\n+            loader.load_disk()\n+            migrations = [\n+                name\n+                for app, name in loader.disk_migrations\n+                if app == 'migrations'\n+            ]\n+            self.assertCountEqual(migrations, ['0001_initial', '0002_second'])\n+        finally:\n+            test_module.__file__ = module_file\n+            test_module.__spec__.origin = module_origin\n+            test_module.__spec__.has_location = module_has_location\n+\n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_namespace_package'})\n+    def test_loading_namespace_package_no_file(self):\n+        \"\"\"\n+        Test that MigrationLoader skips namespace packages (PEP 420) correctly,\n+        even if they don't have a __file__ attribute.\n+        \"\"\"\n+        loader = MigrationLoader(connection)\n+        loader.load_disk()\n+        migrations = [\n+            name\n+            for app, name in loader.disk_migrations\n+            if app == 'migrations'\n+        ]\n+        self.assertEqual(migrations, [])\n+\n     @override_settings(\n         MIGRATION_MODULES={'migrations': 'migrations.test_migrations_namespace_package'},\n     )\n",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..9a01397 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -16,6 +16,8 @@ from django.test import (\n )\n from django.test.utils import isolate_apps\n \n+from unittest import mock\n+from django.core.exceptions import ImproperlyConfigured\n from ..models import Author, Item, Object, Square\n \n try:\n@@ -36,7 +38,14 @@ class Tests(TestCase):\n                 self.assertRaisesMessage(ImproperlyConfigured, msg):\n             check_sqlite_version()\n \n-    def test_aggregation(self):\n+    def test_check_sqlite_version_exact_boundary(self):\n+        \"\"\"Test that SQLite 3.9.0 is accepted as a valid version.\"\"\"\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 9, 0)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.9.0'):\n+            try:\n+                check_sqlite_version()\n+            except ImproperlyConfigured as e:\n+                self.fail(f\"check_sqlite_version() raised ImproperlyConfigured unexpectedly: {e}\")\n         \"\"\"Raise NotSupportedError when aggregating on date/time fields.\"\"\"\n         for aggregate in (Sum, Avg, Variance, StdDev):\n             with self.assertRaises(NotSupportedError):\n",
  "django__django-13837": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 10ffa22..826a7d7 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -158,7 +158,13 @@ class TestIterModulesAndFiles(SimpleTestCase):\n \n class TestChildArguments(SimpleTestCase):\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n+        )\n     def test_run_as_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n@@ -173,7 +179,13 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-Werror', __file__, 'runserver']\n         )\n \n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n+        )\n     def test_exe_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             exe_path = Path(tmpdir) / 'django-admin.exe'\n",
  "django__django-13925": "diff --git a/tests/check_framework/test_model_checks.py b/tests/check_framework/test_model_checks.py\nindex 6424d89..accb0ba 100644\n--- a/tests/check_framework/test_model_checks.py\n+++ b/tests/check_framework/test_model_checks.py\n@@ -395,6 +395,49 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_inherited_explicit_pk_no_warning(self):\n+        class BaseModel(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class ChildModel(BaseModel):\n+            pass\n+\n+        # No warning should be issued as the primary key is explicitly defined in BaseModel and inherited.\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n+    def test_inherited_explicit_parent_link_no_warning(self):\n+        class BaseModel(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class ChildModel(BaseModel):\n+            parent_ptr = models.OneToOneField(BaseModel, models.CASCADE, parent_link=True)\n+\n+        # No warning should be issued as the primary key is explicitly defined in BaseModel and inherited.\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n+    def test_auto_created_primary_key_warning(self):\n+        class BaseModel(models.Model):\n+            pass\n+\n+        class ChildModel(BaseModel):\n+            pass\n+\n+        # Warning should be issued for auto-created primary key as it's not defined explicitly.\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [\n+            Warning(\n+                \"Auto-created primary key used when not defining a primary \"\n+                \"key type, by default 'django.db.models.AutoField'.\",\n+                hint=(\n+                    \"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    \"CheckDefaultPKConfig.default_auto_field attribute to \"\n+                    \"point to a subclass of AutoField, e.g. \"\n+                    \"'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=BaseModel,\n+                id='models.W042',\n+            ),\n+        ])\n+\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.BigAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -414,4 +457,4 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             class Meta:\n                 app_label = 'check_framework.apps.CheckPKConfig'\n \n-        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n+        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n",
  "django__django-13933": "",
  "django__django-13964": "diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py\nindex 1078928..8031800 100644\n--- a/tests/many_to_one/models.py\n+++ b/tests/many_to_one/models.py\n@@ -63,6 +63,13 @@ class Third(models.Model):\n     third = models.ForeignKey('self', models.SET_NULL, null=True, related_name='child_set')\n \n \n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n+\n+\n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n+\n class Parent(models.Model):\n     name = models.CharField(max_length=20, unique=True)\n     bestchild = models.ForeignKey('Child', models.SET_NULL, null=True, related_name='favored_by')\n",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..366e510 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,5 +1,8 @@\n+\n from django.db import IntegrityError, transaction\n-from django.test import TestCase, skipIfDBFeature\n+from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from .fields import MyWrapper\n+from .models import CustomAutoFieldModel\n \n from .models import Bar, Business, Employee, Foo\n \n@@ -220,7 +223,21 @@ class CustomPKTests(TestCase):\n         self.assertEqual(f, new_foo),\n         self.assertEqual(f.bar, new_bar)\n \n-    # SQLite lets objects be saved with an empty primary key, even though an\n+    def test_auto_field_subclass_create(self):\n+        \"\"\"\n+        Test that MyAutoField wraps the ID in MyWrapper on instance creation.\n+        \"\"\"\n+        obj = CustomAutoFieldModel.objects.create()\n+        self.assertIsInstance(obj.id, MyWrapper)\n+\n+    @skipUnlessDBFeature('can_return_rows_from_bulk_insert')\n+    def test_auto_field_subclass_bulk_create(self):\n+        \"\"\"\n+        Test that MyAutoField wraps the ID in MyWrapper on bulk creation.\n+        \"\"\"\n+        obj = CustomAutoFieldModel()\n+        CustomAutoFieldModel.objects.bulk_create([obj])\n+        self.assertIsInstance(obj.id, MyWrapper)\n     # integer is expected. So we can't check for an error being raised in that\n     # case for SQLite. Remove it from the suite for this next bit.\n     @skipIfDBFeature('supports_unspecified_pk')\n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..58cc40e 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -816,6 +816,32 @@ class BasicExpressionsTests(TestCase):\n             [self.example_inc.ceo, self.max],\n         )\n \n+    def test_commutative_q_exists_and_or(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+\n+        # Test commutative property of Q and Exists with AND operator\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(salary__gte=30) & Exists(is_ceo)),\n+            Employee.objects.filter(Exists(is_ceo) & Q(salary__gte=30))\n+        )\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(salary__lt=15) & Exists(is_poc)),\n+            Employee.objects.filter(Exists(is_poc) & Q(salary__lt=15))\n+        )\n+\n+        # Test commutative property of Q and Exists with OR operator\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(salary__gte=30) | Exists(is_ceo)),\n+            Employee.objects.filter(Exists(is_ceo) | Q(salary__gte=30))\n+        )\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(salary__lt=15) | Exists(is_poc)),\n+            Employee.objects.filter(Exists(is_poc) | Q(salary__lt=15))\n+        )\n+\n \n class IterableLookupInnerExpressionsTests(TestCase):\n     @classmethod\n",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..cb3584b 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -204,6 +204,13 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('cached', 'css', 'img', 'window.png'), stats['unmodified'])\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n+    def test_no_duplicate_yield_in_post_process(self):\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(post_process=True, dry_run=False)\n+        stats = collectstatic_cmd.collect()\n+\n+        # Ensure no file is yielded more than once.\n+        self.assertCountEqual(stats['post_processed'], set(stats['post_processed']))\n \n     def test_css_import_case_insensitive(self):\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n",
  "django__django-14089": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 7fb3d83..d8e92a1 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n@@ -6,6 +7,7 @@ import copy\n import pickle\n \n from django.test import SimpleTestCase\n+import collections.abc\n from django.utils.datastructures import (\n     CaseInsensitiveMapping, DictWrapper, ImmutableList, MultiValueDict,\n     MultiValueDictKeyError, OrderedSet,\n@@ -18,6 +20,21 @@ class OrderedSetTests(SimpleTestCase):\n         s = OrderedSet([1, 2, 3])\n         self.assertEqual(list(s.dict.keys()), [1, 2, 3])\n \n+    def test_reversed(self):\n+        s = reversed(OrderedSet([1, 2, 3]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [3, 2, 1])\n+\n+    def test_reversed_empty(self):\n+        s = reversed(OrderedSet())\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [])\n+\n+    def test_reversed_one_element(self):\n+        s = reversed(OrderedSet([42]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [42])\n+\n     def test_remove(self):\n         s = OrderedSet()\n         self.assertEqual(len(s), 0)\n",
  "django__django-14122": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex b2ec8af..45e66b9 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,9 +1,11 @@\n+\n import datetime\n import re\n from decimal import Decimal\n \n from django.core.exceptions import FieldError\n from django.db import connection\n+from datetime import datetime\n from django.db.models import (\n     Avg, Case, Count, DecimalField, DurationField, Exists, F, FloatField,\n     IntegerField, Max, Min, OuterRef, Subquery, Sum, Value, When,\n@@ -1339,4 +1341,4 @@ class AggregateTestCase(TestCase):\n             ('Wesley J. Chun', 1),\n             ('Stuart Russell', 1),\n             ('Peter Norvig', 2),\n-        ], lambda a: (a.name, a.contact_count), ordered=False)\n+        ], lambda a: (a.name, a.contact_count), ordered=False)\n",
  "django__django-14140": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex 7e095fe..8922708 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,4 +1,7 @@\n-from django.db.models import F, Q\n+\n+from django.db.models import Exists, F, OuterRef, Q\n+from .models import Tag, Group, Event, Company, Employee\n+import pickle\n from django.test import SimpleTestCase\n \n \n@@ -35,7 +38,32 @@ class QTests(SimpleTestCase):\n         with self.assertRaisesMessage(TypeError, str(obj)):\n             q & obj\n \n-    def test_deconstruct(self):\n+    def test_deconstruct_single_exists(self):\n+        tagged = Tag.objects.filter(category=OuterRef('pk'))\n+        q = Q(Exists(tagged))\n+        path, args, kwargs = q.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Q')\n+        self.assertEqual(args, (Exists(tagged),))\n+        self.assertEqual(kwargs, {})\n+\n+    def test_combination_with_exists(self):\n+        group = Group.objects.create(name='group')\n+        Event.objects.create(title='event', group=group)\n+        exists_q = Q(Exists(Event.objects.filter(group_id=OuterRef('id'))))\n+        q = exists_q & Q(name='group')\n+        path, args, kwargs = q.deconstruct()\n+        self.assertEqual(args, (\n+            Exists(Event.objects.filter(group_id=OuterRef('id'))),\n+            ('name', 'group'),\n+        ))\n+        self.assertEqual(kwargs, {})\n+\n+    def test_pickle_single_exists(self):\n+        group = Group.objects.create(name='group')\n+        Event.objects.create(title='event', group=group)\n+        groups = Group.objects.filter(Q(Exists(Event.objects.filter(group_id=OuterRef('id')))))\n+        groups2 = pickle.loads(pickle.dumps(groups))\n+        self.assertSequenceEqual(groups2, [group])\n         q = Q(price__gt=F('discounted_price'))\n         path, args, kwargs = q.deconstruct()\n         self.assertEqual(path, 'django.db.models.Q')\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..745782f 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,4 +1,6 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n+from django.test import override_settings\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n@@ -74,7 +76,27 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.AutoField')\n     def test_app_default_auto_field(self):\n         class Model(models.Model):\n",
  "django__django-14311": "",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..66ddc47 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -214,6 +214,13 @@ TEST_DATA = [\n     (MaxLengthValidator(10), 15 * 'x', ValidationError),\n \n     (MinLengthValidator(10), 15 * 'x', None),\n+    # Newlines, carriage returns, and tabs should be rejected\n+    (URLValidator(), 'http://www.djangoproject.com/\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://www.django\\rproject.com/', ValidationError),\n+    (URLValidator(), 'http://[::\\rffff:192.9.5.5]', ValidationError),\n+    (URLValidator(), 'http://\\twww.djangoproject.com/', ValidationError),\n+    (URLValidator(), 'http://\\t[::ffff:192.9.5.5]', ValidationError),\n     (MinLengthValidator(10), 10 * 'x', None),\n \n     (MinLengthValidator(10), '', ValidationError),\n",
  "django__django-14351": "diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\nindex 79963c3..7593caf 100644\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -1526,6 +1526,38 @@ class AggregationTests(TestCase):\n         DistinctAggregate('foo', distinct=True)\n \n \n+from django.db.models import Q, Count\n+from django.test import TestCase\n+from .models import Agent, PropertyGroup, ThingManagerTicketRatingCumulativeMovingAverage\n+\n+class QObjectOrTests(TestCase):\n+    def setUp(self):\n+        # Assume Agent and PropertyGroup models are available with appropriate relations\n+        self.management_agent = Agent.objects.create(name=\"Management Agent\")\n+        self.property_group_1 = PropertyGroup.objects.create(name=\"Property Group 1\", management_agent=self.management_agent)\n+        self.property_group_2 = PropertyGroup.objects.create(name=\"Property Group 2\", management_agent=self.management_agent)\n+        self.thing = ThingManagerTicketRatingCumulativeMovingAverage.objects.create(agent=self.management_agent)\n+\n+    def test_q_object_or_with_in(self):\n+        property_groups = PropertyGroup.objects.filter(management_agent=self.management_agent)\n+        queryset = ThingManagerTicketRatingCumulativeMovingAverage.objects.annotate(Count(\"agent__property_groups\"))\n+        filtered_queryset = queryset.filter(\n+            Q(agent__property_groups__in=property_groups) | Q(agent__property_groups__count=0)\n+        ).distinct()\n+\n+        self.assertEqual(filtered_queryset.count(), 1)\n+        self.assertIn(self.thing, filtered_queryset)\n+\n+    def test_q_object_or_with_id_in(self):\n+        property_group_ids = PropertyGroup.objects.filter(management_agent=self.management_agent).values_list(\"id\", flat=True)\n+        queryset = ThingManagerTicketRatingCumulativeMovingAverage.objects.annotate(Count(\"agent__property_groups\"))\n+        filtered_queryset = queryset.filter(\n+            Q(agent__property_groups__id__in=property_group_ids) | Q(agent__property_groups__count=0)\n+        ).distinct()\n+\n+        self.assertEqual(filtered_queryset.count(), 1)\n+        self.assertIn(self.thing, filtered_queryset)\n+\n class JoinPromotionTests(TestCase):\n     def test_ticket_21150(self):\n         b = Bravo.objects.create()\n",
  "django__django-14373": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 2f7c68b..9b34899 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -166,7 +166,21 @@ class DateFormatTests(SimpleTestCase):\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n             )\n \n-    def test_year_before_1000(self):\n+    from datetime import datetime\n+    from django.utils import dateformat\n+\n+    def test_y_format_year_before_1000(self):\n+        # Test for the 'y' format (2-digit year)\n+        self.assertEqual(dateformat.format(datetime(1, 1, 1), 'y'), '01')\n+        self.assertEqual(dateformat.format(datetime(42, 1, 1), 'y'), '42')\n+        self.assertEqual(dateformat.format(datetime(999, 1, 1), 'y'), '99')\n+\n+    def test_Y_format_year_before_1000(self):\n+        # Test for the 'Y' format (4-digit year, zero-padded)\n+        self.assertEqual(dateformat.format(datetime(1, 1, 1), 'Y'), '0001')\n+        self.assertEqual(dateformat.format(datetime(42, 1, 1), 'Y'), '0042')\n+        self.assertEqual(dateformat.format(datetime(476, 1, 1), 'Y'), '0476')\n+        self.assertEqual(dateformat.format(datetime(999, 1, 1), 'Y'), '0999')\n         tests = [\n             (476, '76'),\n             (42, '42'),\n",
  "django__django-14376": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\nindex 643c2b6..892b6b2 100644\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -37,6 +37,67 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             }),\n             (expected_args, expected_env),\n         )\n+    \n+    def test_options_new_keys_preferred_over_deprecated(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'db': 'deprecatedoptiondbname',\n+                    'user': 'optionuser',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n+    def test_options_deprecated_keys_still_supported(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'db': 'optiondbname',\n+                    'user': 'optionuser',\n+                    'passwd': 'optionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n \n     def test_options_override_settings_proper_values(self):\n         settings_port = 444\n",
  "django__django-14434": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex 39c82bf..07781f7 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -2198,6 +2198,30 @@ class SchemaTests(TransactionTestCase):\n             AuthorWithUniqueNameAndBirthday._meta.constraints = []\n             editor.remove_constraint(AuthorWithUniqueNameAndBirthday, constraint)\n \n+    def test_references_column_with_table_as_argument(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        constraint = UniqueConstraint(fields=[Author], name='incorrect_reference_uq')\n+        with self.assertRaises(TypeError):\n+            with connection.schema_editor() as editor:\n+                editor.add_constraint(Author, constraint)\n+\n+    def test_correct_references_column(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        constraint = UniqueConstraint(fields=['name'], name='correct_reference_uq')\n+        # Add constraint.\n+        with connection.schema_editor() as editor:\n+            editor.add_constraint(Author, constraint)\n+            sql = constraint.create_sql(Author, editor)\n+        table = Author._meta.db_table\n+        self.assertIs(sql.references_table(table), True)\n+        self.assertIs(sql.references_column(table, 'name'), True)\n+        # Remove constraint.\n+        with connection.schema_editor() as editor:\n+            editor.remove_constraint(Author, constraint)\n+        self.assertNotIn(constraint.name, self.get_constraints(table))\n+\n     @skipUnlessDBFeature('supports_expression_indexes')\n     def test_func_unique_constraint(self):\n         with connection.schema_editor() as editor:\n",
  "django__django-14493": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 17aecdd..e5ed530 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -454,6 +454,10 @@ class TestCollectionManifestStorage(TestHashedFiles, CollectionTestCase):\n         )\n \n \n+from django.contrib.staticfiles.storage import ManifestStaticFilesStorage\n+from django.test.utils import override_settings\n+from io import StringIO\n+\n @override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.NoneHashStorage')\n class TestCollectionNoneHashStorage(CollectionTestCase):\n     hashed_file_path = hashed_file_path\n@@ -463,7 +467,19 @@ class TestCollectionNoneHashStorage(CollectionTestCase):\n         self.assertEqual(relpath, 'cached/styles.css')\n \n \n-@override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.SimpleStorage')\n+class NoPostProcessReplacedPathStorage(ManifestStaticFilesStorage):\n+    max_post_process_passes = 0\n+\n+\n+@override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.NoPostProcessReplacedPathStorage')\n+class TestCollectionNoPostProcessReplacedPaths(CollectionTestCase):\n+    run_collectstatic_in_setUp = False\n+\n+    def test_collectstatic_no_post_process_replaced_paths(self):\n+        stdout = StringIO()\n+        self.run_collectstatic(verbosity=1, stdout=stdout)\n+        # Verify that the collectstatic does not crash and runs successfully\n+        self.assertIn('post-processed', stdout.getvalue())\n class TestCollectionSimpleStorage(CollectionTestCase):\n     hashed_file_path = hashed_file_path\n \n",
  "django__django-14500": "diff --git a/tests/migrations/test_executor.py b/tests/migrations/test_executor.py\nindex d884fe4..2277633 100644\n--- a/tests/migrations/test_executor.py\n+++ b/tests/migrations/test_executor.py\n@@ -653,7 +653,35 @@ class ExecutorTests(MigrationTestBase):\n             recorder.applied_migrations(),\n         )\n \n-    # When the feature is False, the operation and the record won't be\n+\n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_squashed'})\n+    def test_migrate_marks_squashed_migration_unapplied(self):\n+        # Setup MigrationExecutor and apply the squashed migration\n+        executor = MigrationExecutor(connection)\n+        executor.migrate([('migrations', '0001_squashed_0002')])\n+        \n+        # Ensure the squashed migration is marked as applied\n+        self.assertIn(\n+            ('migrations', '0001_squashed_0002'),\n+            executor.recorder.applied_migrations(),\n+        )\n+        \n+        # Unapply the squashed migration\n+        executor.migrate([('migrations', None)])\n+        \n+        # Verify both squashed and replaced migrations are marked as unapplied\n+        self.assertNotIn(\n+            ('migrations', '0001_squashed_0002'),\n+            executor.recorder.applied_migrations(),\n+        )\n+        self.assertNotIn(\n+            ('migrations', '0001_initial'),\n+            executor.recorder.applied_migrations(),\n+        )\n+        self.assertNotIn(\n+            ('migrations', '0002_second'),\n+            executor.recorder.applied_migrations(),\n+        )\n     # performed in a transaction and the test will systematically pass.\n     @skipUnlessDBFeature('can_rollback_ddl')\n     def test_migrations_applied_and_recorded_atomically(self):\n",
  "django__django-14539": "",
  "django__django-14559": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex b579834..2e5d0cc 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -135,7 +135,28 @@ class BulkUpdateTests(TestCase):\n         notes = list(Note.objects.all())\n         Note.objects.bulk_update(notes, ['note'])\n \n-    def test_only_concrete_fields_allowed(self):\n+    def test_bulk_update_returns_row_count(self):\n+        # Test when no objects are passed\n+        rows_updated = Note.objects.bulk_update([], ['note'])\n+        self.assertEqual(rows_updated, 0, \"Expected no rows to be updated when no objects are passed.\")\n+        \n+        # Create 2000 Note objects\n+        Note.objects.bulk_create([Note(note=str(i), misc=str(i)) for i in range(2000)])\n+        notes = list(Note.objects.all())\n+        \n+        # Update notes and check the number of rows updated\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 2000, \"Expected 2000 rows to be updated.\")\n+    \n+    def test_bulk_update_with_duplicates(self):\n+        note = Note.objects.create(note='test-note', misc='test')\n+        # Test with duplicate objects in the same batch\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'])\n+        self.assertEqual(rows_updated, 1, \"Expected 1 row to be updated when duplicates are passed.\")\n+        \n+        # Test with duplicates in different batches\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'], batch_size=1)\n+        self.assertEqual(rows_updated, 2, \"Expected 2 rows to be updated with duplicates in different batches.\")\n         obj = Valid.objects.create(valid='test')\n         detail = Detail.objects.create(data='test')\n         paragraph = Paragraph.objects.create(text='test')\n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..c4469fb 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -337,6 +337,7 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at most 1 form.'])\n+        self.assertInHTML('<ul class=\"errorlist nonform\"><li>Please submit at most 1 form.</li></ul>', str(formset.non_form_errors()))\n \n     def test_formset_validate_min_flag(self):\n         \"\"\"\n@@ -359,6 +360,7 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])\n+        self.assertInHTML('<ul class=\"errorlist nonform\"><li>Please submit at least 3 forms.</li></ul>', str(formset.non_form_errors()))\n \n     def test_formset_validate_min_unchanged_forms(self):\n         \"\"\"\n@@ -983,6 +985,7 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = FavoriteDrinksFormSet(data, prefix='drinks')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n+        self.assertInHTML('<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>', str(formset.non_form_errors()))\n \n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n",
  "django__django-14631": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex a48e4b6..d414524 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -2122,6 +2122,38 @@ Password: <input type=\"password\" name=\"password\" required></li>\n         self.assertEqual(form.errors, {})\n         self.assertEqual(form.cleaned_data, {'dt': now})\n \n+    def test_datetime_clean_initial_callable_match_bound_field(self):\n+        \"\"\"\n+        Ensures that the cleaned_data value matches the BoundField's initial value\n+        for a form with a disabled DateTimeField and callable initial.\n+        \"\"\"\n+        now = datetime.datetime(2006, 10, 25, 14, 30, 45, 123456)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now, disabled=True)\n+\n+        form = DateTimeForm({})\n+        cleaned = form.cleaned_data['dt']\n+        bf = form['dt']\n+        self.assertEqual(cleaned, bf.initial)\n+\n+    def test_changed_data_with_initial_callable(self):\n+        \"\"\"\n+        Test that changed_data correctly identifies changes when using callable initial values.\n+        \"\"\"\n+        initial_value = datetime.datetime(2006, 10, 25, 14, 30, 45, 123456)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: initial_value)\n+\n+        # No change\n+        form = DateTimeForm({'dt': '2006-10-25 14:30:45.123456'})\n+        self.assertEqual(form.changed_data, [])\n+\n+        # Changed\n+        form_with_change = DateTimeForm({'dt': '2006-10-25 14:31:45.123456'})\n+        self.assertEqual(form_with_change.changed_data, ['dt'])\n+\n     def test_datetime_changed_data_callable_with_microseconds(self):\n         class DateTimeForm(forms.Form):\n             dt = DateTimeField(initial=lambda: datetime.datetime(2006, 10, 25, 14, 30, 45, 123456), disabled=True)\n",
  "django__django-14672": "",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..7154441 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,5 +1,43 @@\n+\n+class AutocompleteJsonSerializeResultView(AutocompleteJsonView):\n+    def serialize_result(self, obj, to_field_name):\n+        return {\n+            **super().serialize_result(obj, to_field_name),\n+            'posted': str(obj.posted),\n+        }\n+\n+class AutocompleteJsonViewTests(TestCase):\n+    def setUp(self):\n+        self.factory = RequestFactory()\n+        self.url = reverse('admin:app_list_autocomplete')\n+        self.opts = {'app_label': 'admin_views', 'model_name': 'question', 'field_name': 'questions'}\n+        self.superuser = User.objects.create_superuser(\n+            'super', 'super@example.com', 'secret'\n+        )\n+\n+    def test_serialize_result(self):\n+        Question.objects.create(question='Question 1', posted=datetime.date(2021, 8, 9))\n+        Question.objects.create(question='Question 2', posted=datetime.date(2021, 8, 7))\n+        \n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+        request.user = self.superuser\n+        response = AutocompleteJsonSerializeResultView.as_view(admin_site=admin.site)(request)\n+        \n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        expected_results = [\n+            {'id': str(q.pk), 'text': q.question, 'posted': str(q.posted)}\n+            for q in Question.objects.order_by('-posted')\n+        ]\n+        self.assertEqual(data, {'results': expected_results, 'pagination': {'more': False}})\n+\n+import json\n+import datetime\n import json\n from contextlib import contextmanager\n+from django.test import RequestFactory\n+from django.contrib.admin.views.autocomplete import AutocompleteJsonView\n+from .models import Question\n \n from django.contrib import admin\n from django.contrib.admin.tests import AdminSeleniumTestCase\n",
  "django__django-14765": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 11009e5..55e1adf 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -923,8 +923,30 @@ class StateTests(SimpleTestCase):\n             len([x for x in rendered_state.get_models() if x._meta.app_label == \"migrations\"]),\n             1,\n         )\n+    def test_real_apps_non_set(self):\n+        \"\"\"\n+        Test that ProjectState raises an AssertionError if real_apps is not a set.\n+        \"\"\"\n+        with self.assertRaises(AssertionError):\n+            ProjectState(real_apps=['contenttypes'])\n \n-    def test_ignore_order_wrt(self):\n+    def test_real_apps_is_set(self):\n+        \"\"\"\n+        Test that ProjectState initializes correctly when real_apps is a set.\n+        \"\"\"\n+        try:\n+            ProjectState(real_apps={'contenttypes'})\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError unexpectedly!\")\n+\n+    def test_real_apps_is_none(self):\n+        \"\"\"\n+        Test that ProjectState initializes correctly when real_apps is None.\n+        \"\"\"\n+        try:\n+            ProjectState(real_apps=None)\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError unexpectedly!\")\n         \"\"\"\n         Makes sure ProjectState doesn't include OrderWrt fields when\n         making from existing models.\n",
  "django__django-14771": "",
  "django__django-14787": "",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..d514684 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5132,6 +5132,44 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         # Related ForeignKey object not registered in admin.\n         self.assertContains(response, '<div class=\"readonly\">Chapter 1</div>', html=True)\n \n+    def _test_readonly_foreignkey_links(self, admin_site_name, expected_admin_path):\n+        \"\"\"\n+        Helper method to test readonly ForeignKey links for different admin sites.\n+        \"\"\"\n+        chapter = Chapter.objects.create(\n+            title='Chapter 1',\n+            content='content',\n+            book=Book.objects.create(name='Book 1'),\n+        )\n+        language = Language.objects.create(iso='en', name='English')\n+\n+        # Link to the readonly ForeignKey field 'language' should respect the current admin site.\n+        url = reverse(f'{admin_site_name}:admin_views_chapter_change', args=(chapter.pk,))\n+        response = self.client.get(url)\n+        self.assertEqual(response.status_code, 200)\n+        \n+        language_url = reverse(\n+            f'{admin_site_name}:admin_views_language_change',\n+            args=(quote(language.pk),),\n+        )\n+        self.assertContains(\n+            response,\n+            f'<div class=\"readonly\"><a href=\"{language_url}\">en</a></div>',\n+            html=True,\n+        )\n+\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        \"\"\"\n+        Test readonly ForeignKey links in the default admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('admin', '/admin/')\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test readonly ForeignKey links in a custom admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('custom-admin', '/custom-admin/')\n+\n     def test_readonly_manytomany_backwards_ref(self):\n         \"\"\"\n         Regression test for #16433 - backwards references for related objects\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..8e9dd08 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -341,7 +342,20 @@ class ModelChoiceFieldTests(TestCase):\n </div>\"\"\" % (self.c1.pk, self.c2.pk, self.c3.pk),\n         )\n \n-    def test_choices_not_fetched_when_not_rendering(self):\n+    def test_model_choice_iterator_value_hash(self):\n+        # Create ModelChoiceIteratorValue instances\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+\n+        # Test that objects with the same pk have the same hash\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(self.c1.pk, None)))\n+\n+        # Test that objects with different pks have different hashes\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+\n+        # Test that ModelChoiceIteratorValue can be used in a dict\n+        hash_dict = {value_1: 'first'}\n+        self.assertEqual(hash_dict[value_1], 'first')\n         with self.assertNumQueries(1):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n             self.assertEqual('Entertainment', field.clean(self.c1.pk).name)\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..63f0145 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -793,6 +793,52 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n \n+    def test_rename_model_with_db_table_noop(self):\n+        app_label = 'test_rmwdbtn'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n+    def test_rename_model_with_db_table_and_m2m_noop(self):\n+        app_label = 'test_rmwdbtn_m2m'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('riders', models.ManyToManyField('%s.Rider' % app_label)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+        self.assertEqual(Rider.objects.count(), 2)\n+        self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n+\n     def test_rename_m2m_target_model(self):\n         app_label = \"test_rename_m2m_target_model\"\n         project_state = self.apply_operations(app_label, ProjectState(), operations=[\n",
  "django__django-15022": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex e1920cd..6e3f150 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -144,14 +144,45 @@ class ChangeListTests(TestCase):\n         class GetListSelectRelatedAdmin(admin.ModelAdmin):\n             list_display = ('band', 'player')\n \n-            def get_list_select_related(self, request):\n-                return ('band', 'player')\n+from django.test import TestCase\n+from django.contrib.admin.sites import AdminSite\n+from django.db import connection\n+from django.test.utils import CaptureQueriesContext\n+from .models import Client, ClientOffice\n+from .admin import ClientAdmin\n+\n+class AdminQueryOptimizationTests(TestCase):\n+    def setUp(self):\n+        self.site = AdminSite()\n+        self.factory = RequestFactory()\n+        self.superuser = User.objects.create_superuser('admin', 'admin@test.com', 'password')\n \n-        ia = GetListSelectRelatedAdmin(Invitation, custom_site)\n-        request = self.factory.get('/invitation/')\n+    def test_minimal_joins_with_multiple_search_terms(self):\n+        client = Client.objects.create(name='Test Client', name2='Alias', contact_person='John Doe')\n+        ClientOffice.objects.create(client=client, name='Main Office', name2='Headquarters')\n+\n+        client_admin = ClientAdmin(Client, self.site)\n+        request = self.factory.get('/admin/app/client/', data={'q': 'Test Client Main Office John'})\n         request.user = self.superuser\n-        cl = ia.get_changelist_instance(request)\n-        self.assertEqual(cl.queryset.query.select_related, {'player': {}, 'band': {}})\n+\n+        with CaptureQueriesContext(connection) as context:\n+            cl = client_admin.get_changelist_instance(request)\n+            list(cl.get_queryset())  # Force evaluation of the queryset\n+\n+        # Assert that the number of JOINs in the query is minimal (typically 1 or 2)\n+        join_count = sum(1 for query in context.captured_queries if 'JOIN' in query['sql'])\n+        self.assertLessEqual(join_count, 2, 'Excessive JOINs were performed in the search query.')\n+\n+    def test_no_results_for_non_matching_search_terms(self):\n+        client = Client.objects.create(name='Test Client', name2='Alias', contact_person='John Doe')\n+        ClientOffice.objects.create(client=client, name='Main Office', name2='Headquarters')\n+\n+        client_admin = ClientAdmin(Client, self.site)\n+        request = self.factory.get('/admin/app/client/', data={'q': 'Non-existing term'})\n+        request.user = self.superuser\n+\n+        cl = client_admin.get_changelist_instance(request)\n+        self.assertEqual(cl.get_queryset().count(), 0, 'Non-matching search terms should return no results.')\n \n     def test_result_list_empty_changelist_value(self):\n         \"\"\"\n",
  "django__django-15037": "",
  "django__django-15103": "diff --git a/tests/template_tests/filter_tests/test_json_script.py b/tests/template_tests/filter_tests/test_json_script.py\nindex 607e24c..7d6a9a5 100644\n--- a/tests/template_tests/filter_tests/test_json_script.py\n+++ b/tests/template_tests/filter_tests/test_json_script.py\n@@ -1,3 +1,4 @@\n+\n from django.test import SimpleTestCase\n \n from ..utils import setup\n@@ -5,6 +6,11 @@ from ..utils import setup\n \n class JsonScriptTests(SimpleTestCase):\n \n+    @setup({'json-tag02': '{{ value|json_script }}'})\n+    def test_without_id(self):\n+        output = self.engine.render_to_string('json-tag02', {'value': {}})\n+        self.assertEqual(output, '<script type=\"application/json\">{}</script>')\n+\n     @setup({'json-tag01': '{{ value|json_script:\"test_id\" }}'})\n     def test_basic(self):\n         output = self.engine.render_to_string(\n@@ -16,4 +22,4 @@ class JsonScriptTests(SimpleTestCase):\n             '<script id=\"test_id\" type=\"application/json\">'\n             '{\"a\": \"testing\\\\r\\\\njson \\'string\\\\\" \\\\u003Cb\\\\u003Eescaping\\\\u003C/b\\\\u003E\"}'\n             '</script>'\n-        )\n+        )\n",
  "django__django-15104": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 04452fa..66c2ccb 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2835,7 +2835,52 @@ class AutodetectorTests(TestCase):\n                 )\n \n \n-class MigrationSuggestNameTests(SimpleTestCase):\n+class TestMigrationAutodetector(SimpleTestCase):\n+    def test_add_custom_fk_with_hardcoded_to(self):\n+        class HardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.Author'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']\n+                return name, path, args, kwargs\n+\n+        book_hardcoded_fk_to = ModelState('testapp', 'Book', [\n+            ('author', HardcodedForeignKey(on_delete=models.CASCADE)),\n+        ])\n+        changes = self.get_changes(\n+            [self.author_empty],\n+            [self.author_empty, book_hardcoded_fk_to],\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='Book')\n+\n+    def test_custom_fk_field_with_missing_to_key(self):\n+        class CustomFKField(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.HardcodedModel'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']\n+                return name, path, args, kwargs\n+\n+        before = ProjectState()\n+        before.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after = ProjectState()\n+        after.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after.add_model(ModelState('testapp', 'TestModel', [('custom', CustomFKField(on_delete=models.CASCADE))]))\n+\n+        autodetector = MigrationAutodetector(before, after)\n+        changes = autodetector._detect_changes()\n+\n+        self.assertEqual(len(changes['testapp']), 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='TestModel')\n     def test_no_operations(self):\n         class Migration(migrations.Migration):\n             operations = []\n",
  "django__django-15127": "diff --git a/tests/messages_tests/base.py b/tests/messages_tests/base.py\nindex 85a7769..3ab468c 100644\n--- a/tests/messages_tests/base.py\n+++ b/tests/messages_tests/base.py\n@@ -1,8 +1,9 @@\n+\n from django.contrib.messages import constants, get_level, set_level, utils\n from django.contrib.messages.api import MessageFailure\n from django.contrib.messages.constants import DEFAULT_LEVELS\n from django.contrib.messages.storage import base, default_storage\n-from django.contrib.messages.storage.base import Message\n+from django.contrib.messages.storage.base import Message, LEVEL_TAGS\n from django.http import HttpRequest, HttpResponse\n from django.test import modify_settings, override_settings\n from django.urls import reverse\n@@ -368,6 +369,42 @@ class BaseTests:\n         tags = [msg.level_tag for msg in storage]\n         self.assertEqual(tags, ['info', '', 'debug', 'warning', 'error', 'success'])\n \n+    @override_settings_tags(MESSAGE_TAGS={\n+        constants.INFO: 'info',\n+        constants.DEBUG: '',\n+        constants.WARNING: '',\n+        constants.ERROR: 'bad',\n+        29: 'custom',\n+    })\n+    def test_custom_tags(self):\n+        storage = self.get_storage()\n+        storage.level = 0\n+        add_level_messages(storage)\n+        tags = [msg.level_tag for msg in storage]\n+        self.assertEqual(tags, ['info', '', 'debug', 'warning', 'bad', 'success', 'custom'])\n+\n+    @override_settings(MESSAGE_TAGS={\n+        constants.INFO: 'info',\n+        constants.DEBUG: 'debug',\n+        constants.WARNING: 'warn',\n+        constants.ERROR: 'error',\n+        13: 'custom_level',\n+    })\n+    def test_override_settings_level_tags_in_test_case(self):\n+        self.assertEqual(LEVEL_TAGS[constants.INFO], 'info')\n+        self.assertEqual(LEVEL_TAGS[constants.DEBUG], 'debug')\n+        self.assertEqual(LEVEL_TAGS[constants.WARNING], 'warn')\n+        self.assertEqual(LEVEL_TAGS[constants.ERROR], 'error')\n+        self.assertEqual(LEVEL_TAGS[13], 'custom_level')\n+        self.assertEqual(tags, ['info', '', 'extra-tag debug', 'warning', 'error', 'success', 'info'])\n+\n+    def test_level_tag(self):\n+        storage = self.get_storage()\n+        storage.level = 0\n+        add_level_messages(storage)\n+        tags = [msg.level_tag for msg in storage]\n+        self.assertEqual(tags, ['info', '', 'debug', 'warning', 'error', 'success'])\n+\n     @override_settings_tags(MESSAGE_TAGS={\n         constants.INFO: 'info',\n         constants.DEBUG: '',\n",
  "django__django-15128": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex adde8a6..107b022 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2095,12 +2095,60 @@ class QuerySetBitwiseOperationTests(TestCase):\n         cls.room_3 = Classroom.objects.create(school=cls.school, has_blackboard=True, name='Room 3')\n         cls.room_4 = Classroom.objects.create(school=cls.school, has_blackboard=False, name='Room 4')\n \n+    def test_conflicting_aliases_during_combine(self):\n+        # Set up initial data to mimic the issue scenario\n+        tag = Tag.objects.create(name='Test Tag')\n+        annotation_1 = Annotation.objects.create(tag=tag)\n+        annotation_2 = Annotation.objects.create(tag=tag)\n+        note = annotation_1.notes.create(tag=tag)\n+        base_user_1 = BaseUser.objects.create(annotation=annotation_1)\n+        base_user_2 = BaseUser.objects.create(annotation=annotation_2)\n+        task = Task.objects.create(owner=base_user_2, creator=base_user_2, note=note)\n+\n+        qs1 = annotation_1.baseuser_set.all()\n+        qs2 = BaseUser.objects.filter(\n+            Q(owner__note__in=annotation_1.notes.all()) |\n+            Q(creator__note__in=annotation_1.notes.all())\n+        )\n+\n+        # Verify initial querysets are correct\n+        self.assertSequenceEqual(qs1, [base_user_1])\n+        self.assertSequenceEqual(qs2, [base_user_2])\n+\n+        # Verify combined querysets are commutative and contain both base users\n+        self.assertCountEqual(qs2 | qs1, qs1 | qs2)\n+        self.assertCountEqual(qs2 | qs1, [base_user_1, base_user_2])\n+\n     @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n     def test_or_with_rhs_slice(self):\n         qs1 = Classroom.objects.filter(has_blackboard=True)\n         qs2 = Classroom.objects.filter(has_blackboard=False)[:1]\n         self.assertCountEqual(qs1 | qs2, [self.room_1, self.room_2, self.room_3])\n \n+    def test_conflicting_aliases_during_combine(self):\n+        # Set up initial data to mimic the issue scenario\n+        tag = Tag.objects.create(name='Test Tag')\n+        annotation_1 = Annotation.objects.create(tag=tag)\n+        annotation_2 = Annotation.objects.create(tag=tag)\n+        note = annotation_1.notes.create(tag=tag)\n+        base_user_1 = BaseUser.objects.create(annotation=annotation_1)\n+        base_user_2 = BaseUser.objects.create(annotation=annotation_2)\n+        task = Task.objects.create(owner=base_user_2, creator=base_user_2, note=note)\n+\n+        qs1 = annotation_1.baseuser_set.all()\n+        qs2 = BaseUser.objects.filter(\n+            Q(owner__note__in=annotation_1.notes.all()) |\n+            Q(creator__note__in=annotation_1.notes.all())\n+        )\n+\n+        # Verify initial querysets are correct\n+        self.assertSequenceEqual(qs1, [base_user_1])\n+        self.assertSequenceEqual(qs2, [base_user_2])\n+\n+        # Verify combined querysets are commutative and contain both base users\n+        self.assertCountEqual(qs2 | qs1, qs1 | qs2)\n+        self.assertCountEqual(qs2 | qs1, [base_user_1, base_user_2])\n+\n     @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n     def test_or_with_lhs_slice(self):\n         qs1 = Classroom.objects.filter(has_blackboard=True)[:1]\n",
  "django__django-15161": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 5fdccc5..6d3e195 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1775,7 +1775,12 @@ class ValueTests(TestCase):\n         self.assertEqual(len(kwargs), 1)\n         self.assertEqual(kwargs['output_field'].deconstruct(), CharField().deconstruct())\n \n-    def test_repr(self):\n+    def test_deconstruct_F(self):\n+        f_expression = F('field_name')\n+        path, args, kwargs = f_expression.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, ('field_name',))\n+        self.assertEqual(kwargs, {})\n         tests = [\n             (None, 'Value(None)'),\n             ('str', \"Value('str')\"),\n",
  "django__django-15268": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a6c0858..3bed751 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1591,7 +1591,30 @@ class AutodetectorTests(TestCase):\n             index_together={('title', 'author')},\n         )\n \n-    def test_add_field_and_foo_together(self):\n+    def test_optimize_alter_foo_together(self):\n+        \"\"\"\n+        Ensure AlterFooTogether operations are optimized into a single operation.\n+        \"\"\"\n+        changes = self.get_changes(\n+            [self.author_empty, self.book_foo_together],\n+            [self.author_empty, self.book_foo_together_optimized]\n+        )\n+        # Check that only one migration is generated\n+        self.assertNumberMigrations(changes, \"otherapp\", 1)\n+        # Check that there are only two operations instead of four\n+        self.assertOperationTypes(changes, 'otherapp', 0, [\n+            'AlterUniqueTogether',\n+            'AlterIndexTogether',\n+        ])\n+        # Check the operation attributes for optimization\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 0, name='book',\n+            unique_together={('title', 'author')},\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 1, name='book',\n+            index_together={('title', 'author')},\n+        )\n         \"\"\"\n         Added fields will be created before using them in index/unique_together.\n         \"\"\"\n",
  "django__django-15277": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 11f86ed..5be5dde 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1853,6 +1853,49 @@ class ValueTests(TestCase):\n             Value(object()).output_field\n \n \n+    def test_output_field_does_not_create_broken_validators(self):\n+        \"\"\"\n+        The output field for a given Value doesn't get cleaned & validated,\n+        however validators may still be instantiated for a given field type\n+        and this demonstrates that they don't throw an exception.\n+        \"\"\"\n+        value_types = [\n+            'str',\n+            True,\n+            42,\n+            3.14,\n+            datetime.date(2019, 5, 15),\n+            datetime.datetime(2019, 5, 15),\n+            datetime.time(3, 16),\n+            datetime.timedelta(1),\n+            Decimal('3.14'),\n+            b'',\n+            uuid.uuid4(),\n+        ]\n+        for value in value_types:\n+            with self.subTest(type=type(value)):\n+                field = Value(value)._resolve_output_field()\n+                field.clean(value, model_instance=None)\n+\n+    def test_charfield_without_max_length_does_not_have_max_length_validator(self):\n+        \"\"\"\n+        Ensure CharField without a specified max_length does not include MaxLengthValidator.\n+        \"\"\"\n+        char_value = Value('test')\n+        field = char_value._resolve_output_field()\n+        if isinstance(field, fields.CharField):\n+            self.assertFalse(any(isinstance(v, MaxLengthValidator) for v in field.validators))\n+\n+    def test_resolve_output_field_with_specified_max_length(self):\n+        \"\"\"\n+        Ensure that when a CharField has a max_length specified, the MaxLengthValidator is applied.\n+        \"\"\"\n+        max_length = 10\n+        char_value = Value('test')\n+        field = fields.CharField(max_length=max_length)\n+        self.assertEqual(field.max_length, max_length)\n+        self.assertTrue(any(isinstance(v, MaxLengthValidator) and v.limit_value == max_length for v in field.validators))\n+\n class ExistsTests(TestCase):\n     def test_optimizations(self):\n         with CaptureQueriesContext(connection) as context:\n",
  "django__django-15278": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex dd02aee..0fe8bd4 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -618,11 +618,34 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor:\n             editor.add_field(Author, new_field)\n         # Ensure the field is there\n+from django.db import connection\n+from django.db.models import CASCADE, OneToOneField\n+from django.test import TestCase\n+from .models import Author, Note\n+\n+class TestSQLiteSchema(TestCase):\n+\n+    def test_add_nullable_one_to_one_field(self):\n+        \"\"\"\n+        Test adding a nullable OneToOneField on SQLite without causing an OperationalError.\n+        \"\"\"\n+        # Create initial models\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Note)\n+            editor.create_model(Author)\n+\n+        # Define a OneToOneField with nullable and unique constraints\n+        new_field = OneToOneField(Note, CASCADE, null=True, unique=True)\n+        new_field.set_attributes_from_name('note')\n+\n+        # Attempt to add the field using schema_editor\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n+\n+        # Verify the field was added\n         columns = self.column_classes(Author)\n-        field_type, field_info = columns['thing']\n-        self.assertEqual(field_type, connection.features.introspected_field_types['IntegerField'])\n-        # Make sure the values were transformed correctly\n-        self.assertEqual(Author.objects.extra(where=[\"thing = 1\"]).count(), 2)\n+        self.assertIn('note_id', columns)\n+        self.assertTrue(columns['note_id'][1][6])  # Check for the nullable constraint\n \n     def test_add_field_binary(self):\n         \"\"\"\n",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..65cb9ff 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -61,7 +61,14 @@ class BasicFieldTests(SimpleTestCase):\n \n         self.assertEqual(m._meta.get_field('id').verbose_name, 'verbose pk')\n \n-    def test_choices_form_class(self):\n+    def test_hash_immutability(self):\n+        field = models.CharField(max_length=200)\n+        field_hash = hash(field)\n+        \n+        class MyModel(models.Model):\n+            rank = field\n+        \n+        self.assertEqual(field_hash, hash(field))\n         \"\"\"Can supply a custom choices form class to Field.formfield()\"\"\"\n         choices = [('a', 'a')]\n         field = models.CharField(choices=choices)\n",
  "django__django-15368": "",
  "django__django-15380": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex e2de333..d5223e4 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1048,6 +1048,26 @@ class AutodetectorTests(TestCase):\n             changes, 'app', 0, 1, model_name='bar', old_name='foo',\n             new_name='renamed_foo',\n         )\n+    def test_rename_model_and_field_in_reverse_order(self):\n+        \"\"\"Test renaming a field and then a model to ensure correct detection.\"\"\"\n+        changes = self.get_changes(\n+            [self.author_name],\n+            [\n+                ModelState('testapp', 'Author', [\n+                    ('id', models.AutoField(primary_key=True)),\n+                    ('renamed_name', models.CharField(max_length=200)),\n+                ]),\n+                ModelState('testapp', 'RenamedAuthor', [\n+                    ('id', models.AutoField(primary_key=True)),\n+                    ('renamed_name', models.CharField(max_length=200)),\n+                ]),\n+            ],\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameField', 'RenameModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, old_name='name', new_name='renamed_name')\n+        self.assertOperationAttributes(changes, 'testapp', 0, 1, old_name='Author', new_name='RenamedAuthor')\n \n     def test_rename_model(self):\n         \"\"\"Tests autodetection of renamed models.\"\"\"\n",
  "django__django-15382": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex bd890ac..a1f89de 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1906,7 +1906,32 @@ class ExistsTests(TestCase):\n         self.assertNotIn('ORDER BY', captured_sql)\n \n \n-class FieldTransformTests(TestCase):\n+from django.test import TestCase\n+from django.db.models import Exists, Q\n+from .models import Manager\n+\n+class SubqueryExistsTests(TestCase):\n+    def test_negated_empty_exists_with_name_filter(self):\n+        manager = Manager.objects.create(name='test')\n+        qs = Manager.objects.filter(~Exists(Manager.objects.none()), name='test')\n+        self.assertSequenceEqual(qs, [manager])\n+\n+    def test_negated_empty_exists_without_additional_conditions(self):\n+        manager = Manager.objects.create()\n+        qs = Manager.objects.filter(~Exists(Manager.objects.none()))\n+        self.assertSequenceEqual(qs, [manager])\n+\n+    def test_negated_empty_exists_with_multiple_objects(self):\n+        manager1 = Manager.objects.create(name='test1')\n+        manager2 = Manager.objects.create(name='test2')\n+        qs = Manager.objects.filter(~Exists(Manager.objects.none()))\n+        self.assertSequenceEqual(qs, [manager1, manager2])\n+\n+    def test_negated_empty_exists_combined_with_other_conditions(self):\n+        manager1 = Manager.objects.create(name='test1')\n+        Manager.objects.create(name='other')\n+        qs = Manager.objects.filter(~Exists(Manager.objects.none()), name='test1')\n+        self.assertSequenceEqual(qs, [manager1])\n \n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-15467": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex f5af59b..b597a3d 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -9,6 +9,38 @@ try:\n except ImportError:\n     from backports import zoneinfo\n \n+class TestRadioFieldsOverrideEmptyLabel(TestCase):\n+    def test_radio_fields_does_not_override_empty_label(self):\n+        class MyModel(models.Model):\n+            parent = models.ForeignKey(\n+                'self', null=True, blank=True, on_delete=models.CASCADE\n+            )\n+\n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {\"parent\": admin.VERTICAL}\n+\n+            def formfield_for_foreignkey(self, db_field, request, **kwargs):\n+                if db_field.name == \"parent\":\n+                    kwargs[\"empty_label\"] = \"Custom empty label\"\n+                return super().formfield_for_foreignkey(db_field, request, **kwargs)\n+\n+        ma = MyModelAdmin(MyModel, admin.site)\n+        ff = ma.formfield_for_dbfield(MyModel._meta.get_field(\"parent\"), request=None)\n+        self.assertEqual(ff.empty_label, \"Custom empty label\")\n+\n+    def test_radio_fields_with_default_empty_label(self):\n+        class MyModel(models.Model):\n+            parent = models.ForeignKey(\n+                'self', null=True, blank=True, on_delete=models.CASCADE\n+            )\n+\n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {\"parent\": admin.VERTICAL}\n+\n+        ma = MyModelAdmin(MyModel, admin.site)\n+        ff = ma.formfield_for_dbfield(MyModel._meta.get_field(\"parent\"), request=None)\n+        self.assertEqual(ff.empty_label, \"None\")\n+\n from django import forms\n from django.conf import settings\n from django.contrib import admin\n@@ -28,6 +60,9 @@ from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n \n+from django.contrib import admin\n+from django.db import models\n+from django.test import TestCase\n from .models import (\n     Advisor,\n     Album,\n",
  "django__django-15499": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 5df1b06..179080e 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -129,6 +129,30 @@ class OptimizerTests(SimpleTestCase):\n             ],\n         )\n \n+    def test_create_alter_model_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Foo\", fields=[]),\n+                migrations.AlterModelManagers(\n+                    name=\"Foo\",\n+                    managers=[\n+                        (\"objects\", models.Manager()),\n+                        (\"things\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\",\n+                    fields=[],\n+                    managers=[\n+                        (\"objects\", models.Manager()),\n+                        (\"things\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n     def test_create_model_and_remove_model_options(self):\n         self.assertOptimizesTo(\n             [\n",
  "django__django-15525": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 3640e99..e9c5c55 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -791,6 +791,50 @@ class NaturalKeyFixtureTests(TestCase):\n         )\n \n \n+from django.test import TestCase\n+from django.core import management\n+from django.core.management import call_command\n+from .models import Author, Book\n+\n+class NaturalKeyWithFKDependencyTests(TestCase):\n+    databases = {'default', 'other'}\n+\n+    def setUp(self):\n+        # Set up initial data for the default database\n+        Author.objects.using('default').create(name='JR Tolkien')\n+\n+    def test_natural_key_loading_on_non_default_db(self):\n+        \"\"\"\n+        Test that loading data with natural keys using foreign keys works on a non-default database.\n+        \"\"\"\n+        # Load data into the 'other' database\n+        data = [\n+            {\n+                \"model\": \"fixtures_regress.author\",\n+                \"fields\": {\n+                    \"name\": \"JR Tolkien\"\n+                }\n+            },\n+            {\n+                \"model\": \"fixtures_regress.book\",\n+                \"fields\": {\n+                    \"title\": \"The Ring\",\n+                    \"author\": [\n+                        \"JR Tolkien\"\n+                    ]\n+                }\n+            }\n+        ]\n+        management.call_command('loaddata', data, database='other', format='json', verbosity=0)\n+\n+        # Validate that the data was loaded correctly\n+        author = Author.objects.using('other').get(name='JR Tolkien')\n+        book = Book.objects.using('other').get(title='The Ring', author=author)\n+\n+        self.assertEqual(author.name, 'JR Tolkien')\n+        self.assertEqual(book.title, 'The Ring')\n+        self.assertEqual(book.author.name, 'JR Tolkien')\n+\n class M2MNaturalKeyFixtureTests(TestCase):\n     \"\"\"Tests for ticket #14426.\"\"\"\n \n",
  "django__django-15561": "",
  "django__django-15569": "diff --git a/tests/custom_lookups/tests.py b/tests/custom_lookups/tests.py\nindex 74c331a..d39c838 100644\n--- a/tests/custom_lookups/tests.py\n+++ b/tests/custom_lookups/tests.py\n@@ -312,7 +312,16 @@ class LookupTests(TestCase):\n         with register_lookup(models.Field, Exactly):\n             self.assertIsNone(field.get_lookup(\"exactly\"))\n \n-    def test_lookups_caching(self):\n+    def test_lookups_unregistration_clears_cache(self):\n+        field = Article._meta.get_field(\"author\")\n+\n+        # Register a lookup and check it is cached\n+        with register_lookup(models.ForeignObject, Exactly):\n+            self.assertIn(\"exactly\", field.get_lookups())\n+        \n+        # Unregister the lookup and check that the cache is cleared\n+        models.ForeignObject._unregister_lookup(Exactly)\n+        self.assertNotIn(\"exactly\", field.get_lookups())\n         field = Article._meta.get_field(\"author\")\n \n         # clear and re-cache\n",
  "django__django-15572": "",
  "django__django-15731": "diff --git a/tests/basic/tests.py b/tests/basic/tests.py\nindex 902f114..35487d0 100644\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -1,3 +1,4 @@\n+\n import threading\n from datetime import datetime, timedelta\n from unittest import mock\n@@ -6,6 +7,7 @@ from django.core.exceptions import MultipleObjectsReturned, ObjectDoesNotExist\n from django.db import DEFAULT_DB_ALIAS, DatabaseError, connections, models\n from django.db.models.manager import BaseManager\n from django.db.models.query import MAX_GET_RESULTS, EmptyQuerySet\n+import inspect\n from django.test import (\n     SimpleTestCase,\n     TestCase,\n@@ -736,6 +738,16 @@ class ManagerTest(SimpleTestCase):\n             sorted(self.QUERYSET_PROXY_METHODS),\n         )\n \n+    def test_bulk_create_signature(self):\n+        # Test that inspect.signature returns the correct signature for bulk_create.\n+        expected_signature = \"(objs, batch_size=None, ignore_conflicts=False, update_conflicts=False, update_fields=None, unique_fields=None)\"\n+        actual_signature = str(inspect.signature(Article.objects.bulk_create))\n+        self.assertEqual(\n+            actual_signature,\n+            expected_signature,\n+            f\"Expected signature: {expected_signature}, but got: {actual_signature}\"\n+        )\n+\n \n class SelectOnSaveTests(TestCase):\n     def test_select_on_save(self):\n",
  "django__django-15741": "diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex c6dbc53..4b16538 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -1,6 +1,9 @@\n+\n from datetime import datetime, time\n \n from django.template.defaultfilters import date\n+from django.utils.translation import gettext_lazy\n+from django.utils.formats import get_format\n from django.test import SimpleTestCase\n from django.utils import timezone, translation\n \n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..b704dd7 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -398,9 +398,20 @@ class ProxyModelTests(TestCase):\n     def test_eq(self):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n-\n-@override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n-class ProxyModelAdminTests(TestCase):\n+from django.test import TestCase\n+from .models import AnotherModel, ProxyCustomModel\n+\n+class ProxyModelFunctionalityTests(TestCase):\n+    def setUp(self):\n+        # Set up data for the test\n+        self.proxy_custom_model = ProxyCustomModel.objects.create(name=\"ProxyName\")\n+        self.another_model = AnotherModel.objects.create(custom=self.proxy_custom_model)\n+\n+    def test_queryset_only_after_select_related_on_proxy_model(self):\n+        # This test specifically targets the issue with select_related and only on proxy models\n+        queryset = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        result = list(queryset)\n+        self.assertEqual(result[0].custom.name, \"ProxyName\")\n     @classmethod\n     def setUpTestData(cls):\n         cls.superuser = AuthUser.objects.create(is_superuser=True, is_staff=True)\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..22dd5a8 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -151,12 +151,26 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ),\n         )\n \n+    def test_parameters_with_command(self):\n+        # Test that additional parameters are correctly ordered before the dbname\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT * FROM some_table;\"]),\n+            ([\"psql\", \"-c\", \"SELECT * FROM some_table;\", \"dbname\"], None),\n+        )\n+\n     def test_parameters(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n+    def test_parameters_with_command(self):\n+        # Test that additional parameters are correctly ordered before the dbname\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT * FROM some_table;\"]),\n+            ([\"psql\", \"-c\", \"SELECT * FROM some_table;\", \"dbname\"], None),\n+        )\n+\n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n",
  "django__django-15863": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 08f08e1..5e9d192 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -31,6 +31,8 @@ class FloatformatTests(SimpleTestCase):\n         self.assertEqual(output, \"1.4 1.4\")\n \n \n+from decimal import Decimal\n+\n class FunctionTests(SimpleTestCase):\n     def test_inputs(self):\n         self.assertEqual(floatformat(7.7), \"7.7\")\n",
  "django__django-15930": "diff --git a/tests/expressions_case/tests.py b/tests/expressions_case/tests.py\nindex 696f4d0..93eaf18 100644\n--- a/tests/expressions_case/tests.py\n+++ b/tests/expressions_case/tests.py\n@@ -405,6 +405,16 @@ class CaseExpressionTests(TestCase):\n             [1, 4, 3, 3, 3, 2, 2],\n         )\n \n+    def test_annotate_with_inverse_empty_when(self):\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+            )\n+        )\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n+\n     def test_annotate_with_empty_when(self):\n         objects = CaseTestModel.objects.annotate(\n             selected=Case(\n@@ -412,6 +422,16 @@ class CaseExpressionTests(TestCase):\n                 default=Value(\"not selected\"),\n             )\n         )\n+\n+    def test_annotate_with_inverse_empty_when(self):\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+            )\n+        )\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n         self.assertEqual(len(objects), CaseTestModel.objects.count())\n         self.assertTrue(all(obj.selected == \"not selected\" for obj in objects))\n \n",
  "django__django-15987": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 5ac9ab9..240c055 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -1,3 +1,32 @@\n+\n+from django.utils._os import upath\n+from django.test import override_settings\n+from django.core.exceptions import ImproperlyConfigured\n+from django.core import management\n+import os\n+from pathlib import Path\n+\n+_cur_dir = os.path.dirname(upath(__file__))\n+\n+class FixtureDuplicatePathTest(TestCase):\n+    @override_settings(\n+        FIXTURE_DIRS=[\n+            Path(_cur_dir) / \"fixtures\",\n+            Path(_cur_dir) / \"fixtures\",\n+        ]\n+    )\n+    def test_duplicate_fixture_dirs_as_path_instances(self):\n+        \"\"\"\n+        settings.FIXTURE_DIRS should not allow duplicate directories when using Path instances.\n+        \"\"\"\n+        msg = (\n+            \"'%s' is a duplicate fixture directory and cannot be listed \"\n+            \"multiple times in settings.FIXTURE_DIRS.\"\n+            % (os.path.join(_cur_dir, \"fixtures\"))\n+        )\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n+\n # Unittests for fixtures.\n import json\n import os\n",
  "django__django-16032": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex bcf8df9..f0ecbc8 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -989,6 +989,30 @@ class NonAggregateAnnotationTestCase(TestCase):\n             publisher_books_qs, [{\"name\": \"Sams\"}, {\"name\": \"Morgan Kaufmann\"}]\n         )\n \n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        self.assertCountEqual(\n+            publisher_books_qs,\n+            [\n+                {\"name\": \"Apress\"},\n+                {\"name\": \"Sams\"},\n+                {\"name\": \"Prentice Hall\"},\n+                {\"name\": \"Morgan Kaufmann\"}\n+            ]\n+        )\n+\n     def test_annotation_exists_aggregate_values_chaining(self):\n         qs = (\n             Book.objects.values(\"publisher\")\n",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..c6202be 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2416,7 +2416,7 @@ class CombinedExpressionTests(SimpleTestCase):\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV, Combinable.MOD]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..4a3f7b2 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib import admin\n@@ -24,6 +25,8 @@ from django.template import Context, Template, TemplateSyntaxError\n from django.test import TestCase, override_settings\n from django.test.client import RequestFactory\n from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup\n+from unittest import mock\n+from django.db import DatabaseError\n from django.urls import reverse\n from django.utils import formats\n \n",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..414483e 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2400,7 +2400,15 @@ class MakeMigrationsTests(MigrationTestBase):\n         ):\n             call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n \n-    def test_makemigrations_migration_path_output(self):\n+    def test_makemigrations_dry_run_check(self):\n+        \"\"\"\n+        makemigrations --check --dry-run should simulate makemigrations without creating files\n+        \"\"\"\n+        with self.temporary_migration_module() as tmpdir:\n+            self.assertFalse(os.path.exists(tmpdir))\n+            with self.assertRaises(SystemExit):\n+                call_command(\"makemigrations\", \"--check\", \"--dry-run\", \"migrations\", verbosity=0)\n+            self.assertFalse(os.path.exists(tmpdir))\n         \"\"\"\n         makemigrations should print the relative paths to the migrations unless\n         they are outside of the current tree, in which case the absolute path\n",
  "django__django-16136": "diff --git a/tests/async/tests.py b/tests/async/tests.py\nindex 72e103e..cec1e53 100644\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -1,3 +1,4 @@\n+\n import asyncio\n import os\n from unittest import mock\n@@ -6,7 +7,9 @@ from asgiref.sync import async_to_sync\n \n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n-from django.http import HttpResponse\n+from django.http import HttpResponse, HttpResponseNotAllowed\n+import asyncio\n+from django.test import SimpleTestCase, RequestFactory\n from django.test import SimpleTestCase\n from django.utils.asyncio import async_unsafe\n from django.views.generic.base import View\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..cc6ee1e 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -24,7 +25,9 @@ from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n+from django.urls import reverse\n from django.utils.translation import gettext as _\n+import urllib.parse\n \n from .models.custom_user import (\n     CustomUser,\n@@ -881,7 +884,41 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         form = UserChangeForm(instance=user, data=post_data)\n \n         self.assertTrue(form.is_valid())\n-        # original hashed password contains $\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n+    def test_password_reset_link_with_pk(self):\n+        user = User.objects.create_user(username=\"newuser\", password=\"secret\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        self.assertIn(f'href=\"../../{user.pk}/password/\"', password_help_text)\n+\n+    def test_no_password_field(self):\n+        class NoPasswordUserChangeForm(UserChangeForm):\n+            def __init__(self, *args, **kwargs):\n+                super().__init__(*args, **kwargs)\n+                self.fields.pop(\"password\", None)\n+\n+        user = User.objects.get(username=\"testclient\")\n+        form = NoPasswordUserChangeForm(instance=user)\n+        self.assertNotIn(\"password\", form.fields)\n         self.assertIn(\"$\", form.cleaned_data[\"password\"])\n \n     def test_bug_19349_bound_password_field(self):\n",
  "django__django-16145": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex 04d2f0e..12bd836 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1600,6 +1600,21 @@ class ManageRunserver(SimpleTestCase):\n             \"2001:0db8:1234:5678::9\", \"7000\", ipv6=True, raw_ipv6=True\n         )\n \n+    @mock.patch(\"django.core.management.commands.runserver.run\")\n+    @mock.patch(\"django.core.management.base.BaseCommand.check_migrations\")\n+    def test_zero_ip_addr(self, *mocked_objects):\n+        call_command(\n+            self.cmd,\n+            addrport=\"0:8000\",\n+            use_reloader=False,\n+            skip_checks=True,\n+            stdout=self.output,\n+        )\n+        self.assertIn(\n+            \"Starting development server at http://0.0.0.0:8000/\",\n+            self.output.getvalue(),\n+        )\n+\n     def test_runner_hostname(self):\n         call_command(self.cmd, addrport=\"localhost:8000\")\n         self.assertServerSettings(\"localhost\", \"8000\")\n",
  "django__django-16255": "",
  "django__django-16315": "diff --git a/tests/bulk_create/models.py b/tests/bulk_create/models.py\nindex c5f5c07..7e99864 100644\n--- a/tests/bulk_create/models.py\n+++ b/tests/bulk_create/models.py\n@@ -59,6 +59,10 @@ class Pizzeria(Restaurant):\n     pass\n \n \n+class FieldsWithDbColumns(models.Model):\n+    rank = models.IntegerField(unique=True, db_column=\"rAnK\")\n+    name = models.CharField(max_length=15, null=True, db_column=\"oTheRNaMe\")\n+\n class State(models.Model):\n     two_letter_code = models.CharField(max_length=2, primary_key=True)\n \n",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..ed519ff 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,51 @@\n+\n+class CustomUserCreationForm(UserCreationForm):\n+    class Meta(UserCreationForm.Meta):\n+        model = CustomUserWithM2M\n+        fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+class CustomUserWithM2MTest(TestCase):\n+    def test_custom_form_saves_many_to_many_field(self):\n+        organization = Organization.objects.create(name=\"organization 1\")\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization])\n+\n+    def test_custom_form_saves_multiple_many_to_many_fields(self):\n+        organization1 = Organization.objects.create(name=\"organization 1\")\n+        organization2 = Organization.objects.create(name=\"organization 2\")\n+\n+        data = {\n+            \"username\": \"testclient2@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization1.pk), str(organization2.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization1, organization2])\n+\n+    def test_custom_form_no_many_to_many_field(self):\n+        data = {\n+            \"username\": \"testclient3@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [])\n+\n import datetime\n import re\n import urllib.parse\n@@ -15,6 +63,7 @@ from django.contrib.auth.forms import (\n     UserCreationForm,\n )\n from django.contrib.auth.models import User\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n from django.contrib.auth.signals import user_login_failed\n from django.contrib.sites.models import Site\n from django.core import mail\n",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..8ec0f5e 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.test import TestCase\n@@ -7,6 +8,8 @@ from django.utils.timesince import timesince, timeuntil\n from django.utils.translation import npgettext_lazy\n \n \n+from django.test.utils import override_settings, requires_tz_support\n+\n class TimesinceTests(TestCase):\n     def setUp(self):\n         self.t = datetime.datetime(2007, 8, 14, 13, 46, 0)\n@@ -236,7 +239,28 @@ class TimesinceTests(TestCase):\n             with self.subTest():\n                 self.assertEqual(timesince(t, value), expected)\n \n-    def test_depth_invalid(self):\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_long_interval_with_tz(self):\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=31)\n+        self.assertEqual(timesince(d), \"1\\xa0month\")\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_timesince_with_aware_datetime(self):\n+        now = timezone.now()\n+        aware_datetime = timezone.make_aware(self.t, timezone.get_default_timezone())\n+        self.assertEqual(timesince(aware_datetime, now), \"16\\xa0years\")\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_timesince_with_naive_and_aware(self):\n+        now = timezone.now()\n+        naive_datetime = self.t  # Naive datetime\n+        aware_datetime = timezone.make_aware(naive_datetime, timezone.get_default_timezone())\n+        with self.assertRaises(TypeError):\n+            timesince(naive_datetime, aware_datetime)\n         msg = \"depth must be greater than 0.\"\n         with self.assertRaisesMessage(ValueError, msg):\n             timesince(self.t, self.t, depth=0)\n",
  "django__django-16454": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 8d0729b..8b08b3d 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -470,6 +470,46 @@ class CommandRunTests(AdminScriptTestCase):\n \n \n class UtilsTests(SimpleTestCase):\n+    def test_subparser_missing_argument(self):\n+        class SampleCommand(BaseCommand):\n+            def add_arguments(self, parser):\n+                subparsers = parser.add_subparsers(required=True)\n+                create = subparsers.add_parser(\"create\")\n+                create.add_argument(\"name\")\n+\n+            def handle(self, *args, **options):\n+                pass\n+\n+        command_instance = SampleCommand()\n+        parser = CommandParser()\n+        command_instance.add_arguments(parser)\n+\n+        # Simulate missing the required 'name' argument for subparser 'create'\n+        with self.assertRaises(CommandError) as context:\n+            parser.parse_args(['create'])\n+        \n+        self.assertIn('the following arguments are required: name', str(context.exception))\n+\n+    def test_subparser_invalid_type_argument(self):\n+        class SampleCommand(BaseCommand):\n+            def add_arguments(self, parser):\n+                subparsers = parser.add_subparsers(required=True)\n+                parser_foo = subparsers.add_parser(\"foo\")\n+                parser_foo.add_argument(\"bar\", type=int)\n+\n+            def handle(self, *args, **options):\n+                pass\n+\n+        command_instance = SampleCommand()\n+        parser = CommandParser()\n+        command_instance.add_arguments(parser)\n+\n+        # Simulate providing an invalid type for 'bar' argument\n+        with self.assertRaises(CommandError) as context:\n+            parser.parse_args(['foo', 'not_an_int'])\n+\n+        self.assertIn(\"argument bar: invalid int value: 'not_an_int'\", str(context.exception))\n+\n     def test_no_existent_external_program(self):\n         msg = \"Error executing a_42_command_that_doesnt_exist_42\"\n         with self.assertRaisesMessage(CommandError, msg):\n",
  "django__django-16485": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 1623d39..382dc8d 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -112,6 +112,20 @@ class FunctionTests(SimpleTestCase):\n             floatformat(0.000000000000000000015, 20), \"0.00000000000000000002\"\n         )\n \n+    def test_zero_string_representation(self):\n+        from decimal import Decimal\n+        from django.template.defaultfilters import floatformat\n+\n+        # Test the issue directly by checking the response for '0.00'.\n+        self.assertEqual(floatformat(\"0.00\", 0), \"0\")\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), 0), \"0\")\n+\n+        # Additional edge cases to ensure robustness.\n+        self.assertEqual(floatformat(\"0.00\", 2), \"0.00\")\n+        self.assertEqual(floatformat(\"0\", 0), \"0\")\n+        self.assertEqual(floatformat(\"0.0\", 1), \"0.0\")\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), 2), \"0.00\")\n+\n     def test_negative_zero_values(self):\n         tests = [\n             (-0.01, -1, \"0.0\"),\n",
  "django__django-16493": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex 20567e7..c2b792e 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -1018,6 +1018,15 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         storage = kwargs[\"storage\"]\n         self.assertIs(storage, callable_storage)\n \n+    def test_deconstruction_storage_callable_default(self):\n+        \"\"\"\n+        A callable that returns default_storage is not omitted when\n+        deconstructing.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"storage_callable_default\").deconstruct()\n+        self.assertIs(kwargs[\"storage\"], callable_default_storage)\n+\n \n # Tests for a race condition on file saving (#4948).\n # This is written in such a way that it'll always pass on platforms\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..c29459b 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n@@ -10,7 +11,8 @@ from django.urls import reverse\n \n from .admin import ArticleAdmin, site\n from .models import Article, Question\n-from .tests import AdminViewBasicTestCase\n+from .tests import AdminViewBasicTestCase, get_perm\n+from django.contrib.auth import get_permission_codename\n \n \n class AdminTemplateTagsTest(AdminViewBasicTestCase):\n@@ -54,6 +56,40 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n                     template_context[\"show_save_and_add_another\"], expected_flag\n                 )\n \n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        # Test when user only has change permission\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        # Test when user has both add and change permissions\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n+\n     def test_override_change_form_template_tags(self):\n         \"\"\"\n         admin_modify template tags follow the standard search pattern\n",
  "django__django-16560": "diff --git a/tests/constraints/tests.py b/tests/constraints/tests.py\nindex 13854a9..175827e 100644\n--- a/tests/constraints/tests.py\n+++ b/tests/constraints/tests.py\n@@ -67,6 +67,31 @@ class BaseConstraintTests(SimpleTestCase):\n         )\n         self.assertEqual(c.get_violation_error_message(), \"custom base_name message\")\n \n+    def test_custom_violation_code_message(self):\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check, \n+            name=\"price\", \n+            violation_error_code=\"custom_code\"\n+        )\n+        # Invalid product.\n+        invalid_product = Product(price=10, discounted_price=42)\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(Product, invalid_product)\n+        self.assertEqual(cm.exception.code, \"custom_code\")\n+\n+    def test_repr_with_violation_error_code(self):\n+        constraint = models.CheckConstraint(\n+            check=models.Q(price__lt=1),\n+            name=\"price_lt_one\",\n+            violation_error_code=\"more_than_one\",\n+        )\n+        self.assertEqual(\n+            repr(constraint),\n+            \"<CheckConstraint: check=(AND: ('price__lt', 1)) name='price_lt_one' \"\n+            \"violation_error_code='more_than_one'>\",\n+        )\n+\n     def test_custom_violation_error_message_clone(self):\n         constraint = BaseConstraint(\n             name=\"base_name\",\n",
  "django__django-16569": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 55da562..6b46967 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1481,6 +1481,24 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertNotIn(\"DELETE\", formset.forms[1].fields)\n         self.assertNotIn(\"DELETE\", formset.forms[2].fields)\n \n+    def test_empty_form_no_type_error(self):\n+        class MyForm(forms.Form):\n+            my_field = forms.CharField()\n+\n+        MyFormSet = forms.formset_factory(\n+            form=MyForm,\n+            can_delete=True,\n+            can_delete_extra=False,\n+        )\n+        my_formset = MyFormSet(initial=None)\n+        # The test is to call empty_form and ensure no TypeError is raised.\n+        try:\n+            empty_form = my_formset.empty_form\n+            # If we reach this line, no error was raised, which is the expected behavior.\n+            self.assertNotIn(\"DELETE\", empty_form.fields)\n+        except TypeError:\n+            self.fail(\"FormSet.empty_form() raised TypeError unexpectedly!\")\n+\n         formset = ChoiceFormFormset(\n             data={\n                 \"form-0-choice\": \"Zero\",\n",
  "django__django-16595": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3979e76..436fadf 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -43,6 +43,46 @@ class OptimizerTests(SimpleTestCase):\n     def assertDoesNotOptimize(self, operations, **kwargs):\n         self.assertOptimizesTo(operations, operations, **kwargs)\n \n+    def test_alter_alter_field(self):\n+        \"\"\"\n+        Test that sequential AlterField operations are reduced to the last one.\n+        \"\"\"\n+        from django.db import models\n+        from django.db.migrations import operations\n+\n+        operations_sequence = [\n+            operations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=256, null=True),\n+            ),\n+            operations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True),\n+            ),\n+            operations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\"),\n+            ),\n+            operations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+            ),\n+        ]\n+\n+        expected_operations = [\n+            operations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+            ),\n+        ]\n+\n+        self.assertOptimizesTo(operations_sequence, expected_operations)\n+\n     def test_none_app_label(self):\n         optimizer = MigrationOptimizer()\n         with self.assertRaisesMessage(TypeError, \"app_label must be a str\"):\n",
  "django__django-16612": "",
  "django__django-16642": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 499356e..70e0480 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -255,6 +255,8 @@ class FileResponseTests(SimpleTestCase):\n             (\".tar.gz\", \"application/gzip\"),\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n+            (\".tar.br\", \"application/x-brotli\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n         )\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n@@ -263,7 +265,20 @@ class FileResponseTests(SimpleTestCase):\n                 self.assertEqual(response.headers[\"Content-Type\"], mimetype)\n                 self.assertFalse(response.has_header(\"Content-Encoding\"))\n \n-    def test_unicode_attachment(self):\n+    def test_br_and_Z_mime_type(self):\n+        \"\"\"\n+        Test that the MIME type for .br and .Z files is guessed correctly.\n+        \"\"\"\n+        test_tuples = (\n+            (\".br\", \"application/x-brotli\"),\n+            (\".Z\", \"application/x-compress\"),\n+        )\n+        for extension, mimetype in test_tuples:\n+            with self.subTest(ext=extension):\n+                with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n+                    response = FileResponse(tmp)\n+                self.assertEqual(response.headers[\"Content-Type\"], mimetype)\n+                self.assertFalse(response.has_header(\"Content-Encoding\"))\n         response = FileResponse(\n             ContentFile(b\"binary content\", name=\"\u795d\u60a8\u5e73\u5b89.odt\"),\n             as_attachment=True,\n",
  "django__django-16661": "diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py\nindex 8cb88da..bc0283e 100644\n--- a/tests/modeladmin/tests.py\n+++ b/tests/modeladmin/tests.py\n@@ -154,6 +154,35 @@ class ModelAdminTests(TestCase):\n             ma.lookup_allowed(\"employee__department__code\", \"test_value\"), True\n         )\n \n+    @isolate_apps(\"modeladmin\")\n+    def test_lookup_allowed_foreign_primary(self):\n+        class Country(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class Place(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+\n+        class Restaurant(models.Model):\n+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)\n+\n+        class Waiter(models.Model):\n+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n+\n+        class WaiterAdmin(ModelAdmin):\n+            list_filter = [\n+                \"restaurant__place__country\",\n+                \"restaurant__place__country__name\",\n+            ]\n+\n+        ma = WaiterAdmin(Waiter, self.site)\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country\", \"1\"), True)\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__id__exact\", \"1\"), True\n+        )\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__name\", \"test_value\"), True\n+        )\n+\n     def test_field_arguments(self):\n         # If fields is specified, fieldsets_add and fieldsets_change should\n         # just stick the fields into a formsets structure and return it.\n",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..f2f1673 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -922,7 +922,30 @@ class WriterTests(SimpleTestCase):\n             output,\n         )\n \n-    def test_migration_file_header_comments(self):\n+    def test_correct_import_ordering(self):\n+        \"\"\"\n+        Test that imports in migration files are correctly ordered.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield2\",\n+                        models.FloatField(default=time.time),\n+                    ),\n+                ]\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        # Verify imports are ordered as specified in the issue\n+        self.assertIn(\n+            \"import datetime\\nimport time\\nfrom django.db import migrations, models\\n\",\n+            output,\n+        )\n         \"\"\"\n         Test comments at top of file.\n         \"\"\"\n",
  "django__django-16801": "",
  "django__django-16819": "",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..213459b 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -806,6 +806,51 @@ class SystemChecksTestCase(SimpleTestCase):\n         ]\n         self.assertEqual(errors, expected)\n \n+    def test_readonly_field_name_in_error(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            readonly_fields = (\"nonexistent_field\",)\n+\n+        errors = SongAdmin(Song, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' refers to 'nonexistent_field', \"\n+                \"which is not a callable, an attribute of 'SongAdmin', or an attribute \"\n+                \"of 'admin_checks.Song'.\",\n+                obj=SongAdmin,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n+\n+    def test_readonly_callable_not_in_model(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            readonly_fields = (\"some_callable\",)\n+\n+        class Song:\n+            pass\n+\n+        errors = SongAdmin(Song, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' refers to 'some_callable', \"\n+                \"which is not a callable, an attribute of 'SongAdmin', or an attribute \"\n+                \"of 'admin_checks.Song'.\",\n+                obj=SongAdmin,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n+\n+    def test_readonly_field_is_attribute(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            readonly_fields = (\"existing_attribute\",)\n+\n+        class Song:\n+            existing_attribute = \"I'm an attribute\"\n+\n+        errors = SongAdmin(Song, AdminSite()).check()\n+        self.assertEqual(errors, [])\n+\n     def test_nonexistent_field_on_inline(self):\n         class CityInline(admin.TabularInline):\n             model = City\n@@ -822,6 +867,51 @@ class SystemChecksTestCase(SimpleTestCase):\n         ]\n         self.assertEqual(errors, expected)\n \n+    def test_readonly_field_name_in_error(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            readonly_fields = (\"nonexistent_field\",)\n+\n+        errors = SongAdmin(Song, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' refers to 'nonexistent_field', \"\n+                \"which is not a callable, an attribute of 'SongAdmin', or an attribute \"\n+                \"of 'admin_checks.Song'.\",\n+                obj=SongAdmin,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n+\n+    def test_readonly_callable_not_in_model(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            readonly_fields = (\"some_callable\",)\n+\n+        class Song:\n+            pass\n+\n+        errors = SongAdmin(Song, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' refers to 'some_callable', \"\n+                \"which is not a callable, an attribute of 'SongAdmin', or an attribute \"\n+                \"of 'admin_checks.Song'.\",\n+                obj=SongAdmin,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n+\n+    def test_readonly_field_is_attribute(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            readonly_fields = (\"existing_attribute\",)\n+\n+        class Song:\n+            existing_attribute = \"I'm an attribute\"\n+\n+        errors = SongAdmin(Song, AdminSite()).check()\n+        self.assertEqual(errors, [])\n+\n     def test_readonly_fields_not_list_or_tuple(self):\n         class SongAdmin(admin.ModelAdmin):\n             readonly_fields = \"test\"\n",
  "django__django-16901": "",
  "django__django-17029": "diff --git a/tests/apps/tests.py b/tests/apps/tests.py\nindex f7c2c67..7d5d694 100644\n--- a/tests/apps/tests.py\n+++ b/tests/apps/tests.py\n@@ -24,6 +24,10 @@ SOME_INSTALLED_APPS = [\n     \"django.contrib.staticfiles\",\n ]\n \n+from django.apps import apps\n+from django.test import SimpleTestCase, override_settings\n+from functools import lru_cache\n+\n SOME_INSTALLED_APPS_NAMES = [\n     \"django.contrib.admin\",\n     \"django.contrib.auth\",\n@@ -138,7 +142,26 @@ class AppsTests(SimpleTestCase):\n             config = apps.get_app_config(\"two_configs_one_default_app\")\n         self.assertIsInstance(config, TwoConfig)\n \n+    @lru_cache(None)\n+    def get_swappable_settings_name(self, setting):\n+        # Simulate the behavior of the original function\n+        return None\n+\n     @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n+    def test_clear_cache_includes_get_swappable_settings_name(self):\n+        \"\"\"\n+        Ensure that get_swappable_settings_name cache is cleared when \n+        apps.clear_cache() is called.\n+        \"\"\"\n+        # Populate the cache\n+        self.get_swappable_settings_name(\"admin.LogEntry\")\n+        self.assertGreater(self.get_swappable_settings_name.cache_info().currsize, 0)\n+\n+        # Clear the cache\n+        apps.clear_cache()\n+\n+        # Check if the cache size is zero\n+        self.assertEqual(self.get_swappable_settings_name.cache_info().currsize, 0)\n     def test_get_app_configs(self):\n         \"\"\"\n         Tests apps.get_app_configs().\n@@ -148,7 +171,26 @@ class AppsTests(SimpleTestCase):\n             [app_config.name for app_config in app_configs], SOME_INSTALLED_APPS_NAMES\n         )\n \n+    @lru_cache(None)\n+    def get_swappable_settings_name(self, setting):\n+        # Simulate the behavior of the original function\n+        return None\n+\n     @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n+    def test_clear_cache_includes_get_swappable_settings_name(self):\n+        \"\"\"\n+        Ensure that get_swappable_settings_name cache is cleared when \n+        apps.clear_cache() is called.\n+        \"\"\"\n+        # Populate the cache\n+        self.get_swappable_settings_name(\"admin.LogEntry\")\n+        self.assertGreater(self.get_swappable_settings_name.cache_info().currsize, 0)\n+\n+        # Clear the cache\n+        apps.clear_cache()\n+\n+        # Check if the cache size is zero\n+        self.assertEqual(self.get_swappable_settings_name.cache_info().currsize, 0)\n     def test_get_app_config(self):\n         \"\"\"\n         Tests apps.get_app_config().\n@@ -166,7 +208,26 @@ class AppsTests(SimpleTestCase):\n         with self.assertRaisesMessage(LookupError, msg):\n             apps.get_app_config(\"django.contrib.auth\")\n \n+    @lru_cache(None)\n+    def get_swappable_settings_name(self, setting):\n+        # Simulate the behavior of the original function\n+        return None\n+\n     @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n+    def test_clear_cache_includes_get_swappable_settings_name(self):\n+        \"\"\"\n+        Ensure that get_swappable_settings_name cache is cleared when \n+        apps.clear_cache() is called.\n+        \"\"\"\n+        # Populate the cache\n+        self.get_swappable_settings_name(\"admin.LogEntry\")\n+        self.assertGreater(self.get_swappable_settings_name.cache_info().currsize, 0)\n+\n+        # Clear the cache\n+        apps.clear_cache()\n+\n+        # Check if the cache size is zero\n+        self.assertEqual(self.get_swappable_settings_name.cache_info().currsize, 0)\n     def test_is_installed(self):\n         \"\"\"\n         Tests apps.is_installed().\n@@ -176,7 +237,26 @@ class AppsTests(SimpleTestCase):\n         self.assertIs(apps.is_installed(\"django.contrib.staticfiles\"), True)\n         self.assertIs(apps.is_installed(\"django.contrib.admindocs\"), False)\n \n+    @lru_cache(None)\n+    def get_swappable_settings_name(self, setting):\n+        # Simulate the behavior of the original function\n+        return None\n+\n     @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n+    def test_clear_cache_includes_get_swappable_settings_name(self):\n+        \"\"\"\n+        Ensure that get_swappable_settings_name cache is cleared when \n+        apps.clear_cache() is called.\n+        \"\"\"\n+        # Populate the cache\n+        self.get_swappable_settings_name(\"admin.LogEntry\")\n+        self.assertGreater(self.get_swappable_settings_name.cache_info().currsize, 0)\n+\n+        # Clear the cache\n+        apps.clear_cache()\n+\n+        # Check if the cache size is zero\n+        self.assertEqual(self.get_swappable_settings_name.cache_info().currsize, 0)\n     def test_get_model(self):\n         \"\"\"\n         Tests apps.get_model().\n",
  "django__django-17084": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1e0d80c..36ce901 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -44,6 +44,8 @@ from django.db.models.functions import (\n )\n from django.test import TestCase\n from django.test.testcases import skipUnlessDBFeature\n+from django.db.models import Avg, Count, F\n+from django.db.models.functions.window import Window\n from django.test.utils import Approximate, CaptureQueriesContext\n from django.utils import timezone\n \n@@ -2206,4 +2208,42 @@ class AggregateAnnotationPruningTests(TestCase):\n             )\n         sql = ctx.captured_queries[0][\"sql\"].lower()\n         self.assertEqual(sql.count(\"select\"), 3, \"Subquery wrapping required\")\n-        self.assertEqual(aggregate, {\"sum_total_books\": 3})\n+        self.assertEqual(aggregate, {\"sum_total_books\": 3})\n+\n+    @skipUnlessDBFeature(\"supports_over_clause\")\n+    def test_aggregate_over_window_function(self):\n+        \"\"\"\n+        Test to check if aggregates can be used over window functions\n+        without causing an error.\n+        \"\"\"\n+        from django.db import models\n+\n+        class Book(models.Model):\n+            title = models.CharField(max_length=100)\n+            pages = models.IntegerField()\n+            publisher = models.CharField(max_length=100)\n+\n+        # Create sample data\n+        Book.objects.create(title=\"Book 1\", pages=300, publisher=\"Publisher A\")\n+        Book.objects.create(title=\"Book 2\", pages=400, publisher=\"Publisher A\")\n+        Book.objects.create(title=\"Book 3\", pages=200, publisher=\"Publisher B\")\n+\n+        books_qs = Book.objects.annotate(\n+            cumul_pages=Coalesce(\n+                Window(Sum(\"pages\"), order_by=F(\"title\").asc()), 0.0\n+            )\n+        )\n+        with self.assertNumQueries(1) as ctx:\n+            aggregate = books_qs.aggregate(\n+                total_pages=Sum(\"pages\"),\n+                cumul_pages_total=Sum(\"cumul_pages\"),\n+            )\n+        query_sql = ctx.captured_queries[0][\"sql\"].lower()\n+        self.assertIn(\"select\", query_sql, \"Query should be executed successfully\")\n+        self.assertEqual(\n+            aggregate,\n+            {\n+                \"total_pages\": 900.0,  # Total pages of all books\n+                \"cumul_pages_total\": 900.0,\n+            },\n+        )\n",
  "django__django-17087": "",
  "django__django-7530": "",
  "django__django-9296": "diff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\nindex b9b5fbc..2f9bff6 100644\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -309,6 +309,32 @@ class ModelPaginationTests(TestCase):\n             a = Article(headline='Article %s' % x, pub_date=datetime(2005, 7, 29))\n             a.save()\n \n+    def test_paginator_iteration(self):\n+        paginator = Paginator([1, 2, 3], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2], [3]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+\n+    def test_paginator_iteration_empty_list(self):\n+        paginator = Paginator([], 2)\n+        page_iterator = iter(paginator)\n+        self.assertRaises(StopIteration, next, page_iterator)\n+\n+    def test_paginator_iteration_one_item_per_page(self):\n+        paginator = Paginator([1, 2, 3, 4], 1)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1], [2], [3], [4]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+\n+    def test_paginator_iteration_more_items_than_page_size(self):\n+        paginator = Paginator([1, 2, 3, 4, 5], 3)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2, 3], [4, 5]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+\n     def test_first_page(self):\n         paginator = Paginator(Article.objects.order_by('id'), 5)\n         p = paginator.page(1)\n",
  "matplotlib__matplotlib-13989": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5483eef..e033d22 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6359,8 +6359,39 @@ def test_hist_auto_bins():\n \n def test_hist_nan_data():\n     fig, (ax1, ax2) = plt.subplots(2)\n+from matplotlib import pyplot as plt\n+import numpy as np\n \n-    data = [1, 2, 3]\n+def test_hist_range_and_density():\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_and_density_different_range():\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0.2, 0.8), density=True)\n+    assert bins[0] == 0.2\n+    assert bins[-1] == 0.8\n+\n+def test_hist_range_without_density():\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=False)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_different_data_distributions():\n+    data = np.random.normal(loc=0.5, scale=0.1, size=100)\n+    _, bins, _ = plt.hist(data, bins=10, range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+    data = np.random.exponential(scale=0.5, size=100)\n+    _, bins, _ = plt.hist(data, bins=10, range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+    data = np.random.uniform(low=0, high=1, size=100)\n+    _, bins, _ = plt.hist(data, bins=10, range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n     nan_data = data + [np.nan]\n \n     bins, edges, _ = ax1.hist(data)\n@@ -6368,4 +6399,4 @@ def test_hist_nan_data():\n         nanbins, nanedges, _ = ax2.hist(nan_data)\n \n     assert np.allclose(bins, nanbins)\n-    assert np.allclose(edges, nanedges)\n+    assert np.allclose(edges, nanedges)\n",
  "matplotlib__matplotlib-14623": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c9ad946..56c32b2 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -908,7 +908,23 @@ def test_hexbin_pickable():\n def test_hexbin_log():\n     # Issue #1636 (and also test log scaled colorbar)\n     np.random.seed(19680801)\n-    n = 100000\n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n+def test_invert_log_scale_axis():\n+    # Test inverting log scale axis using its limits\n+    fig, ax = plt.subplots()\n+    ax.set_yscale('log')\n+    ax.set_ylim(10, 1)\n+    inverted_y_lim = ax.get_ylim()\n+    assert inverted_y_lim == (10, 1), f\"Expected inverted limits (10, 1), but got {inverted_y_lim}\"\n+    \n+    ax.set_xscale('log')\n+    ax.set_xlim(10, 1)\n+    inverted_x_lim = ax.get_xlim()\n+    assert inverted_x_lim == (10, 1), f\"Expected inverted limits (10, 1), but got {inverted_x_lim}\"\n+    \n+    plt.close(fig)\n     x = np.random.standard_normal(n)\n     y = 2.0 + 3.0 * x + 4.0 * np.random.standard_normal(n)\n     y = np.power(2, y * 0.5)\n",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..48a4498 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6960,8 +6960,33 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[3].hist(np.arange(10), color=color.reshape((1, -1)))\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n+from matplotlib.testing.decorators import check_figures_equal\n \n-def test_shared_axes_retick():\n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear(fig_test, fig_ref):\n+    # Test data\n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    # Reference figure without using ax.clear()\n+    axs_ref = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_ref.flat:\n+        ax.plot(x, y)\n+\n+    # Test figure with ax.clear()\n+    axs_test = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_test.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n+\n+    # Validate that the shared axes remain synced and no extra ticks/labels appear\n+    for ax_ref, ax_test in zip(axs_ref.flat, axs_test.flat):\n+        assert ax_ref.get_xlim() == ax_test.get_xlim(), \"xlim differs between ref and test\"\n+        assert ax_ref.get_ylim() == ax_test.get_ylim(), \"ylim differs between ref and test\"\n+        assert ax_ref.get_xticks().tolist() == ax_test.get_xticks().tolist(), \"xticks differ between ref and test\"\n+        assert ax_ref.get_yticks().tolist() == ax_test.get_yticks().tolist(), \"yticks differ between ref and test\"\n+        assert ax_ref.get_xticklabels() == ax_test.get_xticklabels(), \"xticklabels differ between ref and test\"\n+        assert ax_ref.get_yticklabels() == ax_test.get_yticklabels(), \"yticklabels differ between ref and test\"\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n \n     for ax in axs.flat:\n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "diff --git a/lib/matplotlib/tests/test_category.py b/lib/matplotlib/tests/test_category.py\nindex 40c4dcf..b59e8ea 100644\n--- a/lib/matplotlib/tests/test_category.py\n+++ b/lib/matplotlib/tests/test_category.py\n@@ -307,8 +307,34 @@ def test_overriding_units_in_plot(fig_test, fig_ref):\n         assert y_units is ax.yaxis.units\n \n \n-def test_hist():\n+def test_no_deprecation_on_empty_data():\n+    \"\"\"\n+    Verify that no deprecation warning is emitted when plotting empty data \n+    on an axis using category units.\n+    \"\"\"\n+    import matplotlib.pyplot as plt\n+    import warnings\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        f, ax = plt.subplots()\n+        ax.xaxis.update_units([\"a\", \"b\"])\n+        ax.plot([], [])\n+        # Check no warnings were raised\n+        assert len(w) == 0, \"Deprecation warnings were raised!\"\n+\n+def test_no_error_on_empty_unit_conversion():\n+    \"\"\"\n+    Verify that converting empty data does not raise an error.\n+    \"\"\"\n+    import matplotlib.pyplot as plt\n+    f, ax = plt.subplots()\n+    ax.xaxis.update_units([\"a\", \"b\"])\n+    try:\n+        converted_data = ax.convert_xunits([])\n+        assert isinstance(converted_data, list) or isinstance(converted_data, np.ndarray)\n+    except Exception as e:\n+        assert False, f\"An exception was raised during conversion: {e}\"\n     fig, ax = plt.subplots()\n     n, bins, patches = ax.hist(['a', 'b', 'a', 'c', 'ff'])\n     assert n.shape == (10,)\n-    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n+    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n",
  "matplotlib__matplotlib-22865": "",
  "matplotlib__matplotlib-23299": "",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..13d6801 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -14,14 +14,24 @@ from matplotlib.collections import LineCollection, PolyCollection\n from matplotlib.patches import Circle\n \n import matplotlib.pyplot as plt\n+from matplotlib.testing.decorators import check_figures_equal\n import numpy as np\n \n \n mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n-\n-def test_aspect_equal_error():\n+@check_figures_equal(extensions=[\"png\"])\n+def test_3d_set_visible_false(fig_test, fig_ref):\n+    ax1 = fig_test.add_subplot(121, projection='3d')\n+    ax2 = fig_test.add_subplot(122, projection='3d')\n+    ax1.set_visible(False)\n+    ax2.scatter(1, 1, 1, c='r')\n+\n+    ax1_ref = fig_ref.add_subplot(121, projection='3d')\n+    ax2_ref = fig_ref.add_subplot(122, projection='3d')\n+    ax1_ref.set_visible(False)\n+    ax2_ref.scatter(1, 1, 1, c='r')\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n     with pytest.raises(NotImplementedError):\n",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..3551a5a 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -156,9 +156,44 @@ def test_negative_rect():\n     neg_vertices = Rectangle((0, 0), -3, -2).get_verts()[:-1]\n     assert_array_equal(np.roll(neg_vertices, 2, 0), pos_vertices)\n \n+import matplotlib.pyplot as plt\n+import matplotlib as mpl\n+import pytest\n+from matplotlib.patches import Rectangle\n+from matplotlib.testing.decorators import check_figures_equal\n \n-@image_comparison(['clip_to_bbox'])\n-def test_clip_to_bbox():\n+@check_figures_equal(extensions=['png'])\n+def test_dash_offset_patch_draw_rectangle(fig_test, fig_ref):\n+    # Test with rectangles to check if dash offset is respected\n+    ax_test = fig_test.add_subplot(111)\n+    ax_ref = fig_ref.add_subplot(111)\n+    \n+    loc = (0.1, 0.1)\n+    width, height = (0.8, 0.8)\n+    \n+    # Reference rectangles (should look the same if dash offset works)\n+    rect_ref = Rectangle(loc, width, height, linewidth=3, edgecolor='b', linestyle=(0, [10, 5]))\n+    rect_ref_offset = Rectangle(loc, width, height, linewidth=3, edgecolor='r', linestyle=(5, [10, 5]))\n+    \n+    ax_ref.add_patch(rect_ref)\n+    ax_ref.add_patch(rect_ref_offset)\n+\n+    # Test rectangles with the same style and offset\n+    rect_test = Rectangle(loc, width, height, linewidth=3, edgecolor='b', linestyle=(0, [10, 5]))\n+    rect_test_offset = Rectangle(loc, width, height, linewidth=3, edgecolor='r', linestyle=(5, [10, 5]))\n+    \n+    ax_test.add_patch(rect_test)\n+    ax_test.add_patch(rect_test_offset)\n+\n+def test_dash_offset_patch_with_ellipse():\n+    fig, ax = plt.subplots()\n+    ax.set_xlim([0, 2])\n+    ax.set_ylim([0, 2])\n+    \n+    ellipse = mpl.patches.Ellipse((1, 1), 1, 1.5, edgecolor='g', facecolor='none', linewidth=2, linestyle=(7, [5, 2]))\n+    \n+    ax.add_patch(ellipse)\n+    plt.show()\n     fig, ax = plt.subplots()\n     ax.set_xlim([-18, 20])\n     ax.set_ylim([-150, 100])\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..1894a43 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2866,8 +2866,24 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+from matplotlib.patches import Rectangle\n+\n+def test_stackplot_does_not_alter_axe_cycler():\n+    # Set up data\n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    fig, ax = plt.subplots()\n+\n+    # Plot with fixed colors using C0, C1, etc.\n+    ax.plot([1, 3], [1, 3], color='C0')\n+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))\n+\n+    # Now use stackplot with color references\n+    ax.stackplot([1, 2, 3], my_data, colors=['C2', 'C3', 'C4'])\n \n-@image_comparison(['stackplot_test_baseline'], remove_text=True)\n+    # Assert that the stackplot did not alter the cycler\n+    assert ax._get_lines.get_next_color() == 'C1'\n def test_stackplot_baseline():\n     np.random.seed(0)\n \n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 45f9c04..7190419 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -11,6 +11,7 @@ import matplotlib.patches as mpatches\n import matplotlib.lines as mlines\n from matplotlib.backend_bases import MouseButton, MouseEvent\n \n+from matplotlib.patches import Rectangle\n from matplotlib.offsetbox import (\n     AnchoredOffsetbox, AnnotationBbox, AnchoredText, DrawingArea, OffsetBox,\n     OffsetImage, TextArea, _get_packed_offsets)\n",
  "matplotlib__matplotlib-24627": "",
  "matplotlib__matplotlib-24637": "",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..9dfa256 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -20,6 +20,20 @@ import matplotlib.scale as mscale\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n \n \n+import numpy as np\n+import matplotlib as mpl\n+import pytest\n+from numpy.testing import assert_array_equal\n+from matplotlib import colors as mcolors\n+\n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.float16, float])\n+def test_no_deprecation_warning(dtype):\n+    # Test to ensure no deprecation warnings occur\n+    cm = mpl.colormaps[\"viridis\"]\n+    with pytest.warns(None) as record:\n+        cm(dtype(0))\n+    assert len(record) == 0, \"Unexpected deprecation warnings occurred.\"\n+\n @pytest.mark.parametrize('N, result', [\n     (5, [1, .6, .2, .1, 0]),\n     (2, [1, 0]),\n",
  "matplotlib__matplotlib-25122": "",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..6a28801 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,6 +7801,36 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+def test_xaxis_offsetText_color():\n+    plt.rcParams['xtick.labelcolor'] = 'blue'\n+    ax = plt.axes()\n+    ax.plot([1e9, 2e9, 3e9])  # Adding some data to ensure offset text appears\n+    ax.figure.canvas.draw()  # Force a draw to update text properties\n+    assert ax.xaxis.get_offset_text().get_color() == 'blue'\n+\n+    plt.rcParams['xtick.color'] = 'yellow'\n+    plt.rcParams['xtick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.plot([1e9, 2e9, 3e9])\n+    ax.figure.canvas.draw()\n+    assert ax.xaxis.get_offset_text().get_color() == 'yellow'\n+\n+def test_yaxis_offsetText_color():\n+    plt.rcParams['ytick.labelcolor'] = 'green'\n+    ax = plt.axes()\n+    ax.plot([1e9, 2e9, 3e9])\n+    ax.figure.canvas.draw()\n+    assert ax.yaxis.get_offset_text().get_color() == 'green'\n+\n+    plt.rcParams['ytick.color'] = 'red'\n+    plt.rcParams['ytick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.plot([1e9, 2e9, 3e9])\n+    ax.figure.canvas.draw()\n+    assert ax.yaxis.get_offset_text().get_color() == 'red'\n+\n+import matplotlib.pyplot as plt\n+\n def test_ytickcolor_is_not_yticklabelcolor():\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..8019546 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,19 @@\n+\n+@pytest.mark.parametrize(\"draggable\", [True, False])\n+def test_pickle_draggable_legend(draggable):\n+    fig, ax = plt.subplots()\n+    ax.plot([0, 1, 2], [0, 1, 0], label='test')\n+    legend = ax.legend(draggable=draggable)\n+    \n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+\n+    # Ensure no FigureCanvasAgg objects are in the pickle stream.\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+\n+    loaded_fig = pickle.loads(pkl)\n+    assert isinstance(loaded_fig, plt.Figure)\n+    plt.close(loaded_fig)\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -89,6 +105,7 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import pickletools\n \n @mpl.style.context(\"default\")\n @check_figures_equal(extensions=[\"png\"])\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..483b0d6 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -43,8 +43,33 @@ def test_simple():\n     ax.set_yscale('log')\n     pickle.dump(fig, BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n+import matplotlib.pyplot as plt\n+import pickle\n+from io import BytesIO\n \n-def _generate_complete_test_figure(fig_ref):\n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()\n+\n+    # Attempt to pickle the figure\n+    pkl = BytesIO()\n+    try:\n+        pickle.dump(fig, pkl, pickle.HIGHEST_PROTOCOL)\n+        print(\"Pickle success\")\n+    except Exception as e:\n+        print(f\"Pickle failed: {e}\")\n+    \n+    plt.close(fig)\n     fig_ref.set_size_inches((10, 6))\n     plt.figure(fig_ref)\n \n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..d9c047a 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -991,8 +991,55 @@ def test_hexbin_linear():\n     ax.hexbin(x, y, gridsize=(10, 5), marginals=True,\n               reduce_C_function=np.sum)\n \n+from matplotlib.testing.decorators import check_figures_equal\n+import numpy as np\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_behavior_upon_C_parameter(fig_test, fig_ref):\n+    # Test for issue with mincnt and C parameter in hexbin\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n \n-def test_hexbin_log_clim():\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # without C parameter\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # with C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=C,\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n+\n+def test_hexbin_with_C_and_mincnt():\n+    # Additional test to ensure behavior is consistent across different scenarios\n+    fig, ax = plt.subplots()\n+    X = [0, 1, 2]\n+    Y = [0, 1, 2]\n+    C = [1, 1, 1]\n+    ax.hexbin(X, Y, C=C, reduce_C_function=np.sum, mincnt=1)\n+    # Check that hexbin does not crash and correctly plots the data\n     x, y = np.arange(200).reshape((2, 100))\n     fig, ax = plt.subplots()\n     h = ax.hexbin(x, y, bins='log', vmin=2, vmax=100)\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex 700190c..e9c04d4 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -89,6 +89,43 @@ def test_contour_no_valid_levels():\n     ax.contour(np.ones((9, 9)))\n \n \n+from matplotlib.testing.decorators import check_figures_equal, image_comparison\n+import matplotlib.pyplot as plt\n+import numpy as np\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths(fig_test, fig_ref):\n+    # Create a contour plot on the test figure\n+    cs_test = fig_test.subplots().contour([[0, 1], [1, 2]])\n+    # Create another contour plot on the reference figure\n+    cs_ref = fig_ref.subplots().contour([[1, 0], [2, 1]])\n+\n+    # Use set_paths with the paths from the reference contour set\n+    cs_test.set_paths(cs_ref.get_paths())\n+\n+    # We expect this to make the test and reference figures identical\n+    # as cs_test should now have the same paths as cs_ref.\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths_with_transformation(fig_test, fig_ref):\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # Create initial contour sets\n+    cs_test = ax_test.contour([[0, 1], [1, 2]])\n+    cs_ref = ax_ref.contour([[1, 0], [2, 1]])\n+\n+    # Apply an affine transformation to the paths (e.g., scaling)\n+    transform = ax_test.transData.transform\n+    transformed_paths = [path.transformed(transform) for path in cs_ref.get_paths()]\n+\n+    # Set transformed paths to the test contour set\n+    cs_test.set_paths(transformed_paths)\n+\n+    # To verify, transform paths of cs_ref and compare visually\n+    for path, transformed_path in zip(cs_ref.get_paths(), transformed_paths):\n+        assert np.allclose(path.vertices, transformed_path.vertices, atol=1e-6)\n+\n def test_contour_Nlevels():\n     # A scalar levels arg or kwarg should trigger auto level generation.\n     # https://github.com/matplotlib/matplotlib/issues/11913\n",
  "mwaskom__seaborn-3069": "",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..e770a22 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -244,7 +244,10 @@ def test_default_static_max_age(app):\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n \n-def test_templates_list(test_apps):\n+\n+def test_empty_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"\", __name__)\n     from blueprintapp import app\n \n     templates = sorted(app.jinja_env.list_templates())\n",
  "psf__requests-1142": "",
  "psf__requests-1724": "",
  "psf__requests-1766": "",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..2684991 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,6 +81,18 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://.example.com'),\n+            (InvalidURL, 'http://..example.com'),\n+            (InvalidURL, 'http://example..com'),\n+            (InvalidURL, 'http://example.com..'),\n+            (InvalidURL, 'http://-example.com'),\n+            (InvalidURL, 'http://example-.com'),\n+            (InvalidURL, 'http://example.-com'),\n+            (InvalidURL, 'http://example.com-'),\n+            (InvalidURL, 'http://.'),\n+            (InvalidURL, 'http://..'),\n+            (InvalidURL, 'http://.-'),\n+            (InvalidURL, 'http://-'),\n         ))\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..80fea18 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2308,8 +2308,25 @@ class TestAsCompatibleData:\n         orig = Variable(dims=(\"x\"), data=array, attrs={\"foo\": \"bar\"})\n         assert isinstance(orig._data, CustomIndexable)\n \n-\n-def test_raise_no_warning_for_nan_in_binary_ops():\n+def test_setitem_with_object_having_values_property():\n+    import numpy as np\n+    import xarray as xr\n+    \n+    # Define a class with a `values` property\n+    class HasValues:\n+        values = 5\n+\n+    # Create DataArrays with dtype=object\n+    good_indexed = xr.DataArray([None], dims='dim_0', dtype=object)\n+    bad_indexed = xr.DataArray([None], dims='dim_0', dtype=object)\n+\n+    # Assign a set and an instance of HasValues\n+    good_indexed.loc[{'dim_0': 0}] = set()\n+    bad_indexed.loc[{'dim_0': 0}] = HasValues()\n+\n+    # Test that the values are stored correctly\n+    assert good_indexed.values[0] == set()\n+    assert isinstance(bad_indexed.values[0], HasValues)\n     with pytest.warns(None) as record:\n         Variable(\"x\", [1, 2, np.NaN]) > 0\n     assert len(record) == 0\n",
  "pydata__xarray-3095": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex d6a4400..7ffb599 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -2107,6 +2107,15 @@ class TestDataset:\n \n         assert_identical(ds.coords['a'], expected_orig)\n \n+    def test_copy_with_unicode_index(self):\n+        ds = xr.Dataset(\n+            coords={'x': ['foo'], 'y': ('x', ['bar'])},\n+            data_vars={'z': ('x', ['baz'])}\n+        )\n+        ds_copy = ds.copy(deep=True)\n+        assert ds.coords['x'].dtype == ds_copy.coords['x'].dtype\n+        assert ds_copy.coords['x'].dtype == '<U3'\n+\n     def test_copy_with_data_errors(self):\n         orig = create_test_data()\n         new_var1 = np.arange(orig['var1'].size).reshape(orig['var1'].shape)\n",
  "pydata__xarray-3151": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 026dec9..4ff6396 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -571,7 +571,24 @@ class TestCombineAuto:\n         with raises_regex(ValueError, 'Every dimension needs a coordinate'):\n             combine_by_coords(objs)\n \n-        def test_empty_input(self):\n+    def test_combine_by_coords_non_monotonic_coords(self):\n+        # Test that non-monotonic but identical coordinates do not raise an error\n+        ycoord = ['a', 'c', 'b']\n+        data = np.random.rand(7, 3)\n+\n+        ds1 = Dataset(data_vars=dict(data=(['x', 'y'], data[:3, :])),\n+                      coords=dict(x=[1, 2, 3], y=ycoord))\n+\n+        ds2 = Dataset(data_vars=dict(data=(['x', 'y'], data[3:, :])),\n+                      coords=dict(x=[4, 5, 6, 7], y=ycoord))\n+\n+        expected = Dataset(data_vars=dict(data=(['x', 'y'], data)),\n+                           coords=dict(x=[1, 2, 3, 4, 5, 6, 7], y=ycoord))\n+\n+        actual = combine_by_coords((ds1, ds2))\n+        assert_identical(expected, actual)\n+\n+    def test_empty_input(self):\n             assert_identical(Dataset(), combine_by_coords([]))\n \n     def test_infer_order_from_coords(self):\n",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..00f579b 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2310,7 +2310,29 @@ class TestDataArray:\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n \n-    def test_reduce_keep_attrs(self):\n+    def test_quantile_keep_attrs(self):\n+        # Test that attributes are preserved with keep_attrs=True\n+        \n+        # Create a DataArray with attributes\n+        da = DataArray([0, 0, 1, 2, 3], dims=\"x\", attrs={'units': 'K', 'description': 'test data'})\n+        \n+        # Compute quantile with keep_attrs=True\n+        result = da.quantile(0.5, dim='x', keep_attrs=True)\n+        \n+        # Assert that the attributes are preserved\n+        assert result.attrs == da.attrs\n+        \n+        # Compute quantile with keep_attrs=False\n+        result_no_attrs = da.quantile(0.5, dim='x', keep_attrs=False)\n+        \n+        # Assert that the attributes are not preserved\n+        assert result_no_attrs.attrs == {}\n+        \n+        # Test with multiple quantiles\n+        result_multi = da.quantile([0.25, 0.75], dim='x', keep_attrs=True)\n+        \n+        # Assert that the attributes are preserved\n+        assert result_multi.attrs == da.attrs\n         # Test dropped attrs\n         vm = self.va.mean()\n         assert len(vm.attrs) == 0\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..ba10096 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import pytest\n \n@@ -159,6 +160,15 @@ class TestMergeMethod:\n         with raises_regex(ValueError, \"should be coordinates or not\"):\n             data.merge(data.reset_coords())\n \n+    def test_merge_dataarray(self):\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+\n+        expected = xr.merge([ds, da])\n+        actual = ds.merge(da)\n+\n+        assert_identical(actual, expected)\n+\n     def test_merge_broadcast_equals(self):\n         ds1 = xr.Dataset({\"x\": 0})\n         ds2 = xr.Dataset({\"x\": (\"y\", [0, 0])})\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "diff --git a/xarray/tests/test_duck_array_ops.py b/xarray/tests/test_duck_array_ops.py\nindex 0c63f0f..2da9a03 100644\n--- a/xarray/tests/test_duck_array_ops.py\n+++ b/xarray/tests/test_duck_array_ops.py\n@@ -582,6 +582,25 @@ def test_dask_gradient(axis, edge_order):\n @pytest.mark.parametrize(\"dask\", [False, True])\n @pytest.mark.parametrize(\"func\", [\"sum\", \"prod\"])\n @pytest.mark.parametrize(\"aggdim\", [None, \"x\"])\n+@pytest.mark.parametrize(\"dtype\", [float, int, np.float32, np.bool_])\n+@pytest.mark.parametrize(\"dask\", [False, True])\n+@pytest.mark.parametrize(\"func\", [\"sum\", \"prod\"])\n+def test_min_count_multiple_dims(dtype, dask, func):\n+    if dask and not has_dask:\n+        pytest.skip(\"requires dask\")\n+\n+    da = construct_dataarray(3, dtype, contains_nan=True, dask=dask)\n+    min_count = 2\n+\n+    # Test with multiple dimensions\n+    actual = getattr(da, func)(dim=(\"x\", \"y\"), skipna=True, min_count=min_count)\n+    # Since the issue is with multiple dims, check the equivalent single dim process\n+    expected = getattr(getattr(da, func)(\"x\", skipna=True, min_count=min_count), func)(\"y\", skipna=True, min_count=min_count)\n+    assert_allclose(actual, expected)\n+\n+    assert_dask_array(actual, dask)\n+\n+\n def test_min_count(dim_num, dtype, dask, func, aggdim):\n     if dask and not has_dask:\n         pytest.skip(\"requires dask\")\n",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..c869aef 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -109,6 +109,24 @@ class TestMergeFunction:\n             expected.attrs = expected_attrs\n             assert actual.identical(expected)\n \n+    def test_merge_attrs_override_copy(self):\n+        import xarray as xr\n+        ds1 = xr.Dataset(attrs={'a': 'b'})\n+        ds2 = xr.Dataset(attrs={'a': 'c'})\n+        \n+        # Merge datasets with combine_attrs='override'\n+        ds3 = xr.merge([ds1, ds2], combine_attrs='override')\n+        \n+        # Change the attribute in the merged dataset\n+        ds3.attrs['a'] = 'd'\n+        \n+        # Assert that ds1's attribute did not change\n+        assert ds1.attrs['a'] == 'b'\n+        # Assert that ds2's attribute did not change\n+        assert ds2.attrs['a'] == 'c'\n+        # Assert that ds3's attribute is updated\n+        assert ds3.attrs['a'] == 'd'\n+\n     def test_merge_dicts_simple(self):\n         actual = xr.merge([{\"foo\": 0}, {\"bar\": \"one\"}, {\"baz\": 3.5}])\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..e8ab992 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1921,6 +1921,33 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n+def test_where_attrs() -> None:\n+    # Test if attributes are preserved when keep_attrs=True\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    actual = xr.where(cond, x, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected, actual)\n+\n+    # Test if attributes are not preserved when keep_attrs=False (default)\n+    actual_no_attrs = xr.where(cond, x, y)\n+    expected_no_attrs = xr.DataArray([1, 0], dims=\"x\")\n+    assert_identical(expected_no_attrs, actual_no_attrs)\n+\n+def test_where_dtype_preservation() -> None:\n+    # Test if dtype is preserved\n+    data = xr.DataArray(np.ones([10, 10], dtype=np.int8))\n+    data.attrs[\"attr_1\"] = \"test1\"\n+    data.attrs[\"attr_2\"] = \"test2\"\n+    result = xr.where(data == 1, 5, 0, keep_attrs=True)\n+    assert result.dtype == np.int8\n+    assert result.attrs == data.attrs\n+    cond = xr.DataArray([True, False], dims=\"x\")\n+    actual = xr.where(cond, 1, 0)\n+    expected = xr.DataArray([1, 0], dims=\"x\")\n+    assert_identical(expected, actual)\n+\n \n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n",
  "pydata__xarray-4695": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex 3a4b8ad..daf5372 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -1165,6 +1165,36 @@ class TestDataArray:\n         assert_identical(da[\"x\"], get_data()[\"x\"])\n         assert_identical(da[\"non-dim\"], get_data()[\"non-dim\"])\n \n+    def test_loc_dim_name_collision_with_sel_params(self):\n+        da = xr.DataArray(\n+            [[0, 0], [1, 1]],\n+            dims=[\"dim1\", \"method\"],\n+            coords={\"dim1\": [\"x\", \"y\"], \"method\": [\"a\", \"b\"]},\n+        )\n+        np.testing.assert_array_equal(\n+            da.loc[dict(dim1=[\"x\", \"y\"], method=[\"a\"])], [[0], [1]]\n+        )\n+\n+    def test_loc_dim_name_collision_with_sel_params_extended(self):\n+        # Additional test cases to ensure that variables and dims named \"method\" do not cause problems\n+        da = xr.DataArray(\n+            [[0, 0], [1, 1]],\n+            dims=[\"dim1\", \"method\"],\n+            coords={\"dim1\": [\"x\", \"y\"], \"method\": [\"a\", \"b\"]},\n+        )\n+\n+        # Test single element selection\n+        assert da.loc[dict(dim1=\"x\", method=\"a\")] == 0\n+        assert da.loc[dict(dim1=\"y\", method=\"b\")] == 1\n+\n+        # Test slicing with .loc\n+        expected = xr.DataArray(\n+            [[0, 0], [1, 1]],\n+            dims=[\"dim1\", \"method\"],\n+            coords={\"dim1\": [\"x\", \"y\"], \"method\": [\"a\", \"b\"]},\n+        )\n+        assert_identical(da.loc[dict(method=slice(\"a\", \"b\"))], expected)\n+\n     def test_loc_single_boolean(self):\n         data = DataArray([0, 1], coords=[[True, False]])\n         assert data.loc[True] == 0\n",
  "pydata__xarray-4966": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex 2dbb0b4..7e47240 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -7,8 +7,7 @@ import pytest\n import xarray as xr\n from xarray.coding import variables\n from xarray.conventions import decode_cf_variable, encode_cf_variable\n-\n-from . import assert_allclose, assert_equal, assert_identical, requires_dask\n+import numpy as np\n \n with suppress(ImportError):\n     import dask.array as da\n",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..4358f66 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1913,6 +1913,14 @@ def test_dot_align_coords(use_dask) -> None:\n         xr.testing.assert_allclose(expected, actual)\n \n \n+def test_where_scalar_second_argument_keep_attrs_true() -> None:\n+    # Test case for the issue where using xr.where with a scalar second argument and keep_attrs=True raises IndexError\n+    cond = xr.DataArray([True, False, True], dims=\"x\")\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={})\n+    assert_identical(expected, actual)\n+\n+\n def test_where() -> None:\n     cond = xr.DataArray([True, False], dims=\"x\")\n     actual = xr.where(cond, 1, 0)\n",
  "pydata__xarray-6599": "",
  "pydata__xarray-6721": "",
  "pydata__xarray-6744": "diff --git a/xarray/tests/test_rolling.py b/xarray/tests/test_rolling.py\nindex 0a9ef75..25e6f20 100644\n--- a/xarray/tests/test_rolling.py\n+++ b/xarray/tests/test_rolling.py\n@@ -18,6 +18,10 @@ from xarray.tests import (\n     requires_dask,\n     requires_numbagg,\n )\n+import pytest\n+import numpy as np\n+import xarray as xr\n+from numpy.testing import assert_array_equal\n \n pytestmark = [\n     pytest.mark.filterwarnings(\"error:Mean of empty slice\"),\n",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "diff --git a/xarray/tests/test_indexes.py b/xarray/tests/test_indexes.py\nindex fa8bd84..03a8fc4 100644\n--- a/xarray/tests/test_indexes.py\n+++ b/xarray/tests/test_indexes.py\n@@ -688,6 +688,20 @@ def test_safe_cast_to_index_cftimeindex():\n         assert isinstance(actual, type(expected))\n \n \n+import pytest\n+import xarray as xr\n+import numpy as np\n+\n+@pytest.mark.parametrize(\"dtype\", [\"int32\", \"float32\", \"int64\", \"float64\"])\n+def test_restore_dtype_on_multiindexes(dtype: str) -> None:\n+    foo = xr.Dataset(coords={\"bar\": (\"bar\", np.array([0, 1], dtype=dtype))})\n+    foo = foo.stack(baz=(\"bar\",))\n+    assert str(foo[\"bar\"].values.dtype) == dtype\n+\n+def test_stack_preserves_int32_dtype():\n+    ds = xr.Dataset(coords={'a': np.array([0], dtype='i4')})\n+    assert ds['a'].values.dtype == ds.stack(b=('a',))['a'].values.dtype\n+\n # Test that datetime.datetime objects are never used in a CFTimeIndex\n @requires_cftime\n def test_safe_cast_to_index_datetime_datetime():\n@@ -696,4 +710,4 @@ def test_safe_cast_to_index_datetime_datetime():\n     expected = pd.Index(dates)\n     actual = safe_cast_to_index(np.array(dates))\n     assert_array_equal(expected, actual)\n-    assert isinstance(actual, pd.Index)\n+    assert isinstance(actual, pd.Index)\n",
  "pylint-dev__pylint-4970": "diff --git a/tests/checkers/unittest_similar.py b/tests/checkers/unittest_similar.py\nindex 97cd4d0..f229d5f 100644\n--- a/tests/checkers/unittest_similar.py\n+++ b/tests/checkers/unittest_similar.py\n@@ -494,11 +494,39 @@ def test_get_map_data() -> None:\n         # The map bit, can you tell? ;)\n         data.extend(sim.get_map_data())\n \n-    assert len(expected_linelists) == len(data)\n+from io import StringIO\n+import pytest\n+from contextlib import redirect_stdout\n+from pylint.checkers.similar import Run\n+\n+def test_set_duplicate_lines_to_zero():\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        Run([\"--duplicates=0\", \"file1.py\", \"file2.py\"])\n+    assert ex.value.code == 0\n+    assert output.getvalue() == \"\"\n+\n+def test_set_duplicate_lines_to_positive_value():\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit):\n+        Run([\"--duplicates=5\", \"file1.py\", \"file2.py\"])\n+    # We assume that 5 is a threshold that would find duplicates if they exist\n+\n+def test_no_files_provided():\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        Run([\"--duplicates=0\"])\n+    assert ex.value.code != 0  # Ensure it exits with an error code\n+\n+def test_default_behavior_with_files():\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit):\n+        Run([\"file1.py\", \"file2.py\"])\n+    # This checks the default behavior when no duplicates flag is provided\n     for source_fname, expected_lines, lineset_obj in zip(\n         source_streams, expected_linelists, data\n     ):\n         assert source_fname == lineset_obj.name\n         # There doesn't seem to be a faster way of doing this, yet.\n         lines = (linespec.text for linespec in lineset_obj.stripped_lines)\n-        assert tuple(expected_lines) == tuple(lines)\n+        assert tuple(expected_lines) == tuple(lines)\n",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..a962292 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -93,10 +93,25 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     output = capsys.readouterr()\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n+from pylint.lint import Run\n+from pytest import CaptureFixture\n+import pytest\n+\n+def test_short_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the -v flag.\"\"\"\n+    Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n+def test_long_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the --verbose flag.\"\"\"\n+    Run([str(EMPTY_MODULE), \"--verbose\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n \n-def test_unknown_py_version(capsys: CaptureFixture) -> None:\n-    \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n+def test_short_verbose_with_argument(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that -v with an argument raises an error.\"\"\"\n     with pytest.raises(SystemExit):\n-        Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n+        Run([str(EMPTY_MODULE), \"-v\", \"unexpected_argument\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"error: argument --verbose/-v: ignored explicit argument 'unexpected_argument'\" in output.err\n",
  "pylint-dev__pylint-6528": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9123ae4..d35ce90 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1233,6 +1233,66 @@ class TestRunTC:\n             expected_output=\"No such file or directory\",\n         )\n \n+    def test_recursive_ignore(self):\n+        \"\"\"Test Pylint respects the --ignore parameter in recursive mode.\"\"\"\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore=ignored_subdirectory\",\n+            ],\n+            code=0,\n+        )\n+\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore=failing.py\",\n+            ],\n+            code=0,\n+        )\n+\n+    def test_recursive_ignore_patterns(self):\n+        \"\"\"Test Pylint respects the --ignore-patterns parameter in recursive mode.\"\"\"\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-patterns=ignored_.*\",\n+            ],\n+            code=0,\n+        )\n+\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-patterns=failing.*\",\n+            ],\n+            code=0,\n+        )\n+\n+    def test_recursive_ignore_paths(self):\n+        \"\"\"Test Pylint respects the --ignore-paths parameter in recursive mode.\"\"\"\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-paths=.*ignored.*\",\n+            ],\n+            code=0,\n+        )\n+\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-paths=.*failing.*\",\n+            ],\n+            code=0,\n+        )\n+\n     def test_recursive(self):\n         self._runtest(\n             [join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"), \"--recursive=y\"],\n",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..c98687e 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1329,8 +1329,25 @@ class TestRunTC:\n                     [\".\", \"--recursive=y\"],\n                     code=0,\n                 )\n-\n-    def test_regression_recursive_current_dir(self):\n+    def test_ignore_paths_with_recursive(self):\n+        \"\"\"Test that --ignore-paths works with --recursive=y.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\"))\n+                self._runtest(\n+                    [\n+                        \"directory\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^directory/ignored_subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n+                # Check that files in the ignored path are not linted\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n             # astroid to believe that directory is a package.\n",
  "pylint-dev__pylint-7277": "diff --git a/pylint/__init__.py b/pylint/__init__.py\nindex 79f7224..342a743 100644\n--- a/pylint/__init__.py\n+++ b/pylint/__init__.py\n@@ -96,7 +96,9 @@ def modify_sys_path() -> None:\n       if pylint is installed in an editable configuration (as the last item).\n       https://github.com/PyCQA/pylint/issues/4161\n     \"\"\"\n-    sys.path.pop(0)\n+    cwd = os.getcwd()\n+    if sys.path and sys.path[0] in {\"\", \".\", cwd}:\n+        sys.path.pop(0)\n     env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")\n     cwd = os.getcwd()\n     if env_pythonpath.startswith(\":\") and env_pythonpath not in (f\":{cwd}\", \":.\"):\n@@ -105,4 +107,4 @@ def modify_sys_path() -> None:\n         sys.path.pop(1)\n \n \n-version = __version__\n+version = __version__\n",
  "pytest-dev__pytest-10051": "",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_debugging.py b/testing/test_debugging.py\nindex 912abd7..f28863b 100644\n--- a/testing/test_debugging.py\n+++ b/testing/test_debugging.py\n@@ -177,6 +177,33 @@ class TestPDB:\n \n     def test_pdb_unittest_skip(self, pytester: Pytester) -> None:\n         \"\"\"Test for issue #2137\"\"\"\n+\n+    def test_pdb_unittest_skip_class_teardown(self, pytester: Pytester) -> None:\n+        \"\"\"Test for issue related to tearDown execution on skipped classes with --pdb\"\"\"\n+        p1 = pytester.makepyfile(\n+            \"\"\"\n+            import unittest\n+            import pytest\n+            skipped_teardown_called = False\n+\n+            @unittest.skip(\"Skipping also with pdb active\")\n+            class MyTestCase(unittest.TestCase):\n+                def setUp(self):\n+                    pass\n+\n+                def tearDown(self):\n+                    global skipped_teardown_called\n+                    skipped_teardown_called = True\n+\n+                def test_one(self):\n+                    assert 0\n+\n+            def test_teardown_not_called():\n+                assert not skipped_teardown_called\n+        \"\"\"\n+        )\n+        result = pytester.runpytest_inprocess(\"--pdb\", p1)\n+        result.assert_outcomes(skipped=1, passed=1)\n         p1 = pytester.makepyfile(\n             \"\"\"\n             import unittest\n",
  "pytest-dev__pytest-5262": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 1f092b0..c85c15d 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -1051,9 +1051,14 @@ class TestFDCapture(object):\n             cap.done()\n             pytest.raises(AttributeError, cap.suspend)\n \n-\n-@contextlib.contextmanager\n-def saved_fd(fd):\n+def test_capture_encoded_file_mode(capfd):\n+    # This test checks if the mode of EncodedFile does not include 'b'\n+    sys_stdout_mode = sys.stdout.mode\n+    assert 'b' not in sys_stdout_mode\n+\n+    captured = capfd.readouterr()\n+    assert captured.out == \"\"\n+    assert captured.err == \"\"\n     new_fd = os.dup(fd)\n     try:\n         yield\n",
  "pytest-dev__pytest-5631": "",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..176b8b6 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -116,10 +116,32 @@ class TestPaste(object):\n             monkeypatch.setattr(urllib, \"urlopen\", mocked)\n         else:\n             import urllib.request\n+    \n+    @pytest.fixture\n+    def mock_urlopen_text_lexer(monkeypatch):\n+        calls = []\n+\n+        def mocked(url, data=None, headers={}):\n+            calls.append((url, data))\n+            class MockResponse:\n+                def read(self):\n+                    return b'href=\"/raw/3c0c6750bd\"'\n+            return MockResponse()\n \n-            monkeypatch.setattr(urllib.request, \"urlopen\", mocked)\n+        monkeypatch.setattr(urllib.request, \"urlopen\", mocked)\n         return calls\n \n+    def test_create_new_paste_with_text_lexer(self, pastebin, mock_urlopen_text_lexer):\n+        result = pastebin.create_new_paste(b\"arbitrary-text-contents\")\n+        assert result == \"https://bpaste.net/show/3c0c6750bd\"\n+        assert len(mock_urlopen_text_lexer) == 1\n+        url, data = mock_urlopen_text_lexer[0]\n+        assert type(data) is bytes\n+        assert url == \"https://bpaste.net\"\n+        assert \"lexer=text\" in data.decode()\n+        assert \"code=arbitrary-text-contents\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n+\n     def test_create_new_paste(self, pastebin, mocked_urlopen):\n         result = pastebin.create_new_paste(b\"full-paste-contents\")\n         assert result == \"https://bpaste.net/show/3c0c6750bd\"\n@@ -130,4 +152,4 @@ class TestPaste(object):\n         assert url == \"https://bpaste.net\"\n         assert \"lexer=%s\" % lexer in data.decode()\n         assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n",
  "pytest-dev__pytest-6202": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex fb6b260..49e9bfa 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -702,7 +702,14 @@ class Test_genitems:\n         assert items[1].name == \"testmethod_one\"\n         assert items[2].name == \"testmethod_one\"\n \n-        # let's also test getmodpath here\n+        # Test getmodpath with special characters in parameter\n+        @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+        def testmethod_two(self, arg0):\n+            pass\n+        assert len(items) == 4\n+        assert items[3].name == \"testmethod_two[.[]\"\n+        # Ensure that getmodpath returns the correct string including special characters\n+        assert items[3].getmodpath() == \"TestY.testmethod_two[.[]\"\n         assert items[0].getmodpath() == \"testone\"\n         assert items[1].getmodpath() == \"TestX.testmethod_one\"\n         assert items[2].getmodpath() == \"TestY.testmethod_one\"\n",
  "pytest-dev__pytest-7205": "diff --git a/testing/test_setuponly.py b/testing/test_setuponly.py\nindex 8211d39..ffb452f 100644\n--- a/testing/test_setuponly.py\n+++ b/testing/test_setuponly.py\n@@ -1,3 +1,4 @@\n+\n import pytest\n from _pytest.config import ExitCode\n \n@@ -201,7 +202,21 @@ def test_show_fixtures_with_parameter_ids_function(testdir, mode):\n     result.stdout.fnmatch_lines([\"*SETUP    F foobar?FOO?\", \"*SETUP    F foobar?BAR?\"])\n \n \n-def test_dynamic_fixture_request(testdir):\n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue: BytesWarning when using --setup-show with bytes parameter\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n+\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n     p = testdir.makepyfile(\n         \"\"\"\n         import pytest\n",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..226b1af 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -607,7 +607,30 @@ class TestSkip:\n         result = testdir.runpytest(\"-rs\")\n         result.stdout.fnmatch_lines([\"*unconditional skip*\", \"*1 skipped*\"])\n \n-    def test_skip_with_reason(self, testdir):\n+    def test_skip_location_reporting_without_runxfail(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            def test_skip_location():\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(\"-rs\")\n+        result.stdout.fnmatch_lines([\"SKIPPED [1] test_skip_location_reporting_without_runxfail.py:2: unconditional skip\", \"*1 skipped*\"])\n+\n+    def test_skip_location_reporting_with_runxfail(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            def test_skip_location():\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(\"-rs\", \"--runxfail\")\n+        # Ensures that the location is correct even with --runxfail\n+        result.stdout.fnmatch_lines([\"SKIPPED [1] test_skip_location_reporting_with_runxfail.py:2: unconditional skip\", \"*1 skipped*\"])\n         testdir.makepyfile(\n             \"\"\"\n             import pytest\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..5948c69 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,9 +1,11 @@\n+\n import sys\n \n import pytest\n from _pytest.runner import runtestprotocol\n from _pytest.skipping import evaluate_skip_marks\n from _pytest.skipping import evaluate_xfail_marks\n+from _pytest.pytester import Testdir\n from _pytest.skipping import pytest_runtest_setup\n \n \n@@ -411,6 +413,31 @@ class TestXFail:\n         result = testdir.runpytest(p, \"-rxX\")\n         result.stdout.fnmatch_lines([\"*XFAIL*test_this*\", \"*NOTRUN*\"])\n \n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # This test verifies that dynamically adding an xfail marker during test execution works as expected.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # This test verifies that dynamically adding a strict xfail marker during test execution works as expected.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n+\n     def test_dynamic_xfail_set_during_funcarg_setup(self, testdir):\n         p = testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..d89bdaa 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -513,6 +513,11 @@ class TestCaptureFixture:\n             \"\"\"\n         )\n         reprec.assertoutcome(passed=1)\n+    @pytest.mark.parametrize(\"nl\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_cafd_preserves_newlines(self, capfd, nl):\n+        print(\"test\", end=nl)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(nl)\n \n     def test_capfdbinary(self, testdir):\n         reprec = testdir.inline_runsource(\n",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..05f0899 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import pytest\n@@ -49,6 +50,29 @@ def test_change_level_undo(testdir):\n     result.stdout.fnmatch_lines([\"*log from test1*\", \"*2 failed in *\"])\n     result.stdout.no_fnmatch_line(\"*log from test2*\")\n \n+def test_change_level_undos_handler_level(testdir):\n+    \"\"\"Ensure that 'set_level' is undone after the end of the test (handler).\"\"\"\n+\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test1(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(41)\n+            assert caplog.handler.level == 41\n+\n+        def test2(caplog):\n+            assert caplog.handler.level == 0\n+\n+        def test3(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(43)\n+            assert caplog.handler.level == 43\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=3)\n \n def test_with_statement(caplog):\n     with caplog.at_level(logging.INFO):\n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..67c0981 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,4 +1,33 @@\n+\n import os\n+def test_collect_symlink_nested_dir(pytester: Pytester) -> None:\n+    \"\"\"A symlinked nested directory is collected as well.\"\"\"\n+    outer_dir = pytester.mkdir(\"outer_dir\")\n+    nested_dir = outer_dir.mkdir(\"nested_dir\")\n+    nested_dir.joinpath(\"test_nested.py\").write_text(\"def test_nested(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_to_nested\").symlink_to(nested_dir)\n+    \n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=1)\n+\n+def test_collect_symlink_to_nonexistent(pytester: Pytester) -> None:\n+    \"\"\"A symlink pointing to a non-existent directory should be handled gracefully.\"\"\"\n+    broken_symlink = pytester.path.joinpath(\"broken_symlink\")\n+    broken_symlink.symlink_to(pytester.path.joinpath(\"non_existent_dir\"))\n+    \n+    result = pytester.runpytest()\n+    result.stdout.fnmatch_lines([\"*No such file or directory*\"])\n+\n+def test_collect_symlink_file_in_dir(pytester: Pytester) -> None:\n+    \"\"\"A symlink to a file in a directory should be collected.\"\"\"\n+    dir_with_file = pytester.mkdir(\"dir_with_file\")\n+    test_file = dir_with_file.joinpath(\"test_file.py\")\n+    test_file.write_text(\"def test_file(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_to_file\").symlink_to(test_file)\n+    \n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=1)\n+\n import pprint\n import sys\n import textwrap\n@@ -9,6 +38,7 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n+from _pytest.pytester import Pytester\n from _pytest.pytester import Testdir\n \n \n",
  "pytest-dev__pytest-8399": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 2c720b0..7a07211 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -301,8 +301,27 @@ def test_setup_setUpClass(pytester: Pytester) -> None:\n     reprec = pytester.inline_run(testpath)\n     reprec.assertoutcome(passed=3)\n \n+def test_unittest_setUpClass_fixture_hidden(pytester: Pytester) -> None:\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+        class MyTestCase(unittest.TestCase):\n+            @classmethod\n+            def setUpClass(cls):\n+                pass\n+            def test_example(self):\n+                pass\n+        \"\"\"\n+    )\n+    # Check that the fixture is not listed without verbose flag\n+    result = pytester.runpytest(\"--fixtures\")\n+    assert result.ret == 0\n+    result.stdout.no_fnmatch_line(\"*unittest_setUpClass_fixture_MyTestCase*\")\n \n-def test_setup_class(pytester: Pytester) -> None:\n+    # Check that the fixture is listed with verbose flag\n+    result = pytester.runpytest(\"--fixtures\", \"-v\")\n+    assert result.ret == 0\n+    result.stdout.fnmatch_lines(\"*unittest_setUpClass_fixture_MyTestCase*\")\n     testpath = pytester.makepyfile(\n         \"\"\"\n         import unittest\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..e4e0736 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -597,8 +597,31 @@ def test_ridgecv_store_cv_values():\n     r.fit(x, y)\n     assert_equal(r.cv_values_.shape, (n_samples, n_responses, n_alphas))\n \n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    import numpy as np\n+    from sklearn.linear_model import RidgeClassifierCV\n+    from numpy.testing import assert_equal\n \n-def test_ridgecv_sample_weight():\n+    rng = np.random.RandomState(42)\n+\n+    n_samples = 8\n+    n_features = 5\n+    x = rng.randn(n_samples, n_features)\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+    # with len(y.shape) == 1\n+    y = np.array([1, 1, -1, -1, 1, -1, 1, -1])\n+    r.fit(x, y)\n+    assert_equal(r.cv_values_.shape, (n_samples, len(set(y)), n_alphas))\n+\n+    # with len(y.shape) == 2 (multiclass case)\n+    y = rng.randint(0, 3, size=(n_samples, 2))\n+    r.fit(x, y)\n+    assert_equal(r.cv_values_.shape, (n_samples, y.shape[1], n_alphas))\n     rng = np.random.RandomState(0)\n     alphas = (0.1, 1.0, 10.0)\n \n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..51c0df5 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -184,7 +184,16 @@ def test_int_overflow_mutual_info_score():\n     assert_all_finite(mutual_info_score(x.ravel(), y.ravel()))\n \n \n-def test_entropy():\n+def test_fowlkes_mallows_score_overflow():\n+    # Test to ensure that fowlkes_mallows_score does not produce\n+    # RuntimeWarning for large pk and qk values that could lead to overflow.\n+    \n+    # Labels designed to create large pk and qk values.\n+    labels_true = np.array([0] * 100000 + [1] * 100000)\n+    labels_pred = np.array([0] * 50000 + [1] * 50000 + [0] * 50000 + [1] * 50000)\n+    \n+    score = fowlkes_mallows_score(labels_true, labels_pred)\n+    assert_all_finite(score)\n     ent = entropy([0, 0, 42.])\n     assert_almost_equal(ent, 0.6365141, 5)\n     assert_almost_equal(entropy([]), 1)\n",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..8c11681 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -558,8 +558,27 @@ def test_feature_names():\n     for idx, name in enumerate(feature_names):\n         assert_equal(idx, cv.vocabulary_.get(name))\n \n+def test_countvectorizer_custom_vocabulary_no_notfittederror():\n+    # Vocabulary provided at initialization\n+    vocab = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    cv = CountVectorizer(vocabulary=vocab)\n \n-def test_vectorizer_max_features():\n+    # Ensure that get_feature_names doesn't raise NotFittedError\n+    feature_names = cv.get_feature_names()\n+    assert_array_equal(vocab, feature_names)\n+\n+    # Transforming a corpus to check if it works without fitting\n+    corpus = [\n+        'This is the first document.',\n+        'This is the second second document.',\n+        'And the third one.',\n+        'Is this the first document?',\n+    ]\n+    X = cv.transform(corpus)\n+    assert_equal(X.shape, (4, len(vocab)))\n+\n+    # Check if vocabulary_ attribute is set\n+    assert_true(hasattr(cv, 'vocabulary_'))\n     vec_factories = (\n         CountVectorizer,\n         TfidfVectorizer,\n",
  "scikit-learn__scikit-learn-11310": "diff --git a/sklearn/model_selection/tests/test_search.py b/sklearn/model_selection/tests/test_search.py\nindex 0b1d5f9..bb8aa24 100644\n--- a/sklearn/model_selection/tests/test_search.py\n+++ b/sklearn/model_selection/tests/test_search.py\n@@ -1159,7 +1159,15 @@ def test_search_cv_timing():\n     gs = GridSearchCV(svc, {'C': [0, 1]}, cv=2, error_score=0)\n     rs = RandomizedSearchCV(svc, {'C': [0, 1]}, cv=2, error_score=0, n_iter=2)\n \n+    from sklearn.utils.testing import assert_true\n+    from sklearn.utils.testing import assert_greater_equal\n+\n     for search in (gs, rs):\n+        search.fit(X, y)\n+        # Check for the existence and type of refit_time_ attribute\n+        assert_true(hasattr(search, \"refit_time_\"))\n+        assert_true(isinstance(search.refit_time_, float))\n+        assert_greater_equal(search.refit_time_, 0)\n         search.fit(X, y)\n         for key in ['mean_fit_time', 'std_fit_time']:\n             # NOTE The precision of time.time in windows is not high\n",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..d7d710e 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -17,6 +17,7 @@ from sklearn.utils.testing import assert_equal\n from sklearn.utils.testing import assert_greater\n from sklearn.utils.testing import assert_raise_message\n from sklearn.utils.testing import assert_raises\n+from sklearn.metrics.scorer import get_scorer\n from sklearn.utils.testing import assert_true\n from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import ignore_warnings\n@@ -489,6 +490,58 @@ def test_logistic_cv():\n     assert_array_equal(coefs_paths.shape, (1, 3, 1, n_features))\n     assert_array_equal(lr_cv.Cs_.shape, (1,))\n     scores = np.asarray(list(lr_cv.scores_.values()))\n+\n+@pytest.mark.parametrize('scoring, multiclass_agg_list',\n+                         [('accuracy', ['']),\n+                          ('precision', ['_macro', '_weighted']),\n+                          # no need to test for micro averaging because it\n+                          # is the same as accuracy for f1, precision,\n+                          # and recall (see https://github.com/\n+                          # scikit-learn/scikit-learn/pull/\n+                          # 11578#discussion_r203250062)\n+                          ('f1', ['_macro', '_weighted']),\n+                          ('neg_log_loss', ['']),\n+                          ('recall', ['_macro', '_weighted'])])\n+def test_logistic_cv_multinomial_score(scoring, multiclass_agg_list):\n+    # test that LogisticRegressionCV uses the right score to compute its\n+    # cross-validation scores when using a multinomial scoring\n+    # see https://github.com/scikit-learn/scikit-learn/issues/8720\n+    X, y = make_classification(n_samples=100, random_state=0, n_classes=3,\n+                               n_informative=6)\n+    train, test = np.arange(80), np.arange(80, 100)\n+    lr = LogisticRegression(C=1., solver='lbfgs', multi_class='multinomial')\n+    # we use lbfgs to support multinomial\n+    params = lr.get_params()\n+    # we store the params to set them further in _log_reg_scoring_path\n+    for key in ['C', 'n_jobs', 'warm_start']:\n+        del params[key]\n+    lr.fit(X[train], y[train])\n+    for averaging in multiclass_agg_list:\n+        scorer = get_scorer(scoring + averaging)\n+        assert_array_almost_equal(\n+            _log_reg_scoring_path(X, y, train, test, Cs=[1.],\n+                                  scoring=scorer, **params)[2][0],\n+            scorer(lr, X[test], y[test]))\n+\n+# Additional test to ensure that LogisticRegressionCV uses the correct multiclass setting\n+def test_logistic_cv_multiclass_settings():\n+    X, y = make_classification(n_samples=100, random_state=42, n_classes=3,\n+                               n_informative=5)\n+    train, test = np.arange(70), np.arange(70, 100)\n+    # Multinomial setting\n+    lr_multi = LogisticRegressionCV(cv=5, solver='lbfgs', multi_class='multinomial')\n+    lr_multi.fit(X[train], y[train])\n+    scorer_multi = get_scorer('neg_log_loss')\n+    score_multi = scorer_multi(lr_multi, X[test], y[test])\n+\n+    # OvR setting\n+    lr_ovr = LogisticRegressionCV(cv=5, solver='lbfgs', multi_class='ovr')\n+    lr_ovr.fit(X[train], y[train])\n+    scorer_ovr = get_scorer('neg_log_loss')\n+    score_ovr = scorer_ovr(lr_ovr, X[test], y[test])\n+\n+    # Check that the scores are calculated using the correct multiclass strategy\n+    assert score_multi != score_ovr\n     assert_array_equal(scores.shape, (1, 3, 1))\n \n \n",
  "scikit-learn__scikit-learn-12585": "diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 4752f9c..388a60a 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -167,6 +167,28 @@ def test_clone_sparse_matrices():\n         assert_array_equal(clf.empty.toarray(), clf_cloned.empty.toarray())\n \n \n+def test_clone_estimator_with_class_param():\n+    # Check that clone works for parameters that are classes rather than instances\n+    from sklearn.preprocessing import StandardScaler\n+    from sklearn.base import clone\n+    from sklearn.utils.estimator_checks import check_estimator\n+\n+    class MyEstimatorWithClassParam:\n+        def __init__(self, estimator_class=StandardScaler):\n+            self.estimator_class = estimator_class\n+\n+        def get_params(self, deep=True):\n+            return {\"estimator_class\": self.estimator_class}\n+\n+        def set_params(self, **params):\n+            self.estimator_class = params.get(\"estimator_class\", self.estimator_class)\n+            return self\n+\n+    estimator = MyEstimatorWithClassParam()\n+    cloned_estimator = clone(estimator)\n+\n+    assert cloned_estimator.estimator_class is estimator.estimator_class\n+\n def test_repr():\n     # Smoke test the repr of the base estimator.\n     my_estimator = MyEstimator()\n",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..b506a00 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -18,7 +18,8 @@ from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import TempMemmap\n from sklearn.exceptions import ConvergenceWarning\n from sklearn import linear_model, datasets\n-from sklearn.linear_model.least_angle import _lars_path_residues\n+from sklearn.linear_model.least_angle import _lars_path_residues, LassoLarsIC\n+import numpy as np\n \n diabetes = datasets.load_diabetes()\n X, y = diabetes.data, diabetes.target\n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..d3240e4 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -493,6 +493,34 @@ def test_shuffle_stratifiedkfold():\n         assert_not_equal(set(test0), set(test1))\n     check_cv_coverage(kf0, X_40, y, groups=None, expected_n_splits=5)\n \n+    # New test cases to verify the fix for shuffle behavior\n+    X = np.arange(20)\n+    y = np.array([0] * 10 + [1] * 10)\n+\n+    kf1 = StratifiedKFold(n_splits=5, shuffle=True, random_state=3)\n+    kf2 = StratifiedKFold(n_splits=5, shuffle=True, random_state=4)\n+\n+    test_set1_random3 = sorted([tuple(test_idx) for _, test_idx in kf1.split(X, y)])\n+    test_set2_random4 = sorted([tuple(test_idx) for _, test_idx in kf2.split(X, y)])\n+\n+    # Test that different random states result in different test sets\n+    assert test_set1_random3 != test_set2_random4\n+\n+    # Verify that using the same random state results in identical splits\n+    kf3 = StratifiedKFold(n_splits=5, shuffle=True, random_state=3)\n+    test_set3_random3 = sorted([tuple(test_idx) for _, test_idx in kf3.split(X, y)])\n+\n+    assert test_set1_random3 == test_set3_random3\n+\n+    # Test with shuffle=False to ensure that the splits are identical regardless of random state\n+    kf4 = StratifiedKFold(n_splits=5, shuffle=False)\n+\n+    test_set4_no_shuffle = sorted([tuple(test_idx) for _, test_idx in kf4.split(X, y)])\n+    kf5 = StratifiedKFold(n_splits=5, shuffle=False, random_state=3)\n+    test_set5_no_shuffle = sorted([tuple(test_idx) for _, test_idx in kf5.split(X, y)])\n+\n+    assert test_set4_no_shuffle == test_set5_no_shuffle\n+\n \n def test_kfold_can_detect_dependent_samples_on_digits():  # see #2372\n     # The digits samples are dependent: they are apparently grouped by authors\n",
  "scikit-learn__scikit-learn-13135": "diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py\nindex a18a1c5..aa1e6d0 100644\n--- a/sklearn/preprocessing/tests/test_discretization.py\n+++ b/sklearn/preprocessing/tests/test_discretization.py\n@@ -185,11 +185,11 @@ def test_invalid_strategy_option():\n \n \n @pytest.mark.parametrize(\n-    'strategy, expected_2bins, expected_3bins',\n-    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2]),\n-     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2]),\n-     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2])])\n-def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n+    'strategy, expected_2bins, expected_3bins, expected_5bins',\n+    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2], [0, 0, 1, 1, 4, 4]),\n+     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2], [0, 0, 1, 2, 3, 4]),\n+     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2], [0, 1, 2, 3, 4, 4])])\n+def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins, expected_5bins):\n     X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n \n     # with 2 bins\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..ff704c3 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -597,8 +597,30 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_array_equal(Y_pred1, Y_pred2)\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n+from sklearn.mixture import GaussianMixture\n+from sklearn.utils.testing import assert_array_equal\n+import numpy as np\n \n-def test_gaussian_mixture_fit():\n+def test_gaussian_mixture_fit_predict_n_init_varying_random_state():\n+    # Check consistency across different random states\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    for random_state in [0, 1, 42, 100]:\n+        gm = GaussianMixture(n_components=5, n_init=5, random_state=random_state)\n+        y_pred1 = gm.fit_predict(X)\n+        y_pred2 = gm.predict(X)\n+        assert_array_equal(y_pred1, y_pred2)\n+\n+def test_gaussian_mixture_fit_predict_n_init_varying_sample_size():\n+    # Check consistency across different sample sizes\n+    random_state = np.random.RandomState(0)\n+    for n_samples in [500, 1000, 1500]:\n+        X = random_state.randn(n_samples, 5)\n+        gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+        y_pred1 = gm.fit_predict(X)\n+        y_pred2 = gm.predict(X)\n+        assert_array_equal(y_pred1, y_pred2)\n+\n+def test_gaussian_mixture_fit_predict():\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n     rand_data = RandomData(rng)\n",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/iforest.py b/sklearn/ensemble/iforest.py\nindex 17608bc..1983d07 100644\n--- a/sklearn/ensemble/iforest.py\n+++ b/sklearn/ensemble/iforest.py\n@@ -173,7 +173,9 @@ class IsolationForest(BaseBagging, OutlierMixin):\n                  n_jobs=None,\n                  behaviour='old',\n                  random_state=None,\n-                 verbose=0):\n+                 verbose=0,\n+                 warm_start=False):\n+        self.warm_start = warm_start\n         super().__init__(\n             base_estimator=ExtraTreeRegressor(\n                 max_features=1,\n",
  "scikit-learn__scikit-learn-13779": "",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..5ac72fc 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -396,8 +396,29 @@ def test_export_text():\n     assert export_text(reg, decimals=1) == expected_report\n     assert export_text(reg, decimals=1, show_weights=True) == expected_report\n \n+def test_export_text_single_feature():\n+    from sklearn.tree import DecisionTreeClassifier\n+    from sklearn.tree import export_text\n+    from sklearn.datasets import load_iris\n \n-def test_plot_tree_entropy(pyplot):\n+    # Loading the iris dataset and using only one feature\n+    X, y = load_iris(return_X_y=True)\n+    X_single_feature = X[:, 0].reshape(-1, 1)\n+\n+    # Training a decision tree classifier\n+    tree = DecisionTreeClassifier(random_state=0)\n+    tree.fit(X_single_feature, y)\n+\n+    # Exporting tree text for a single feature\n+    expected_report = dedent(\"\"\"\n+    |--- sepal_length <= 5.45\n+    |   |--- class: 0\n+    |--- sepal_length >  5.45\n+    |   |--- class: 1\n+    \"\"\").lstrip()\n+\n+    # Testing export_text with a single feature\n+    assert export_text(tree, feature_names=['sepal_length']) == expected_report\n     # mostly smoke tests\n     # Check correctness of export_graphviz for criterion = entropy\n     clf = DecisionTreeClassifier(max_depth=3,\n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..c5b68e4 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1532,7 +1532,33 @@ def test_LogisticRegressionCV_GridSearchCV_elastic_net_ovr():\n     assert (lrcv.predict(X_test) == gs.predict(X_test)).mean() >= .8\n \n \n-@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial'))\n+import pytest\n+import numpy as np\n+from sklearn.linear_model import LogisticRegressionCV\n+from sklearn.datasets import make_classification\n+\n+@pytest.mark.parametrize('penalty', ('l2', 'elasticnet'))\n+@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial', 'auto'))\n+def test_LogisticRegressionCV_no_refit_issue_reproduction(penalty, multi_class):\n+    # Test to ensure no IndexError is thrown when refit=False\n+\n+    n_samples = 1000\n+    n_features = 3\n+    X, y = make_classification(n_samples=n_samples, n_features=n_features, n_informative=3, n_redundant=0, random_state=29)\n+\n+    lrcv = LogisticRegressionCV(\n+        penalty=penalty,\n+        solver='saga',\n+        tol=1e-2,\n+        refit=False,\n+        cv=5,\n+        multi_class=multi_class\n+    )\n+    try:\n+        lrcv.fit(X, y)\n+        assert True  # If no error, the test passes\n+    except IndexError:\n+        pytest.fail(\"IndexError was raised with refit=False\")\n def test_LogisticRegressionCV_no_refit(multi_class):\n     # Test LogisticRegressionCV attribute shapes when refit is False\n \n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/tests/test_show_versions.py b/sklearn/utils/tests/test_show_versions.py\nindex fa39255..efe5759 100644\n--- a/sklearn/utils/tests/test_show_versions.py\n+++ b/sklearn/utils/tests/test_show_versions.py\n@@ -15,6 +15,9 @@ def test_get_sys_info():\n def test_get_deps_info():\n     deps_info = _get_deps_info()\n \n+    assert 'joblib' in deps_info\n+    deps_info = _get_deps_info()\n+\n     assert 'pip' in deps_info\n     assert 'setuptools' in deps_info\n     assert 'sklearn' in deps_info\n@@ -26,8 +29,12 @@ def test_get_deps_info():\n \n \n def test_show_versions_with_blas(capsys):\n+    # Test to check if joblib is present in show_versions output\n+    show_versions()\n+    out, err = capsys.readouterr()\n+    assert 'joblib' in out\n     show_versions()\n     out, err = capsys.readouterr()\n     assert 'python' in out\n     assert 'numpy' in out\n-    assert 'BLAS' in out\n+    assert 'BLAS' in out\n",
  "scikit-learn__scikit-learn-14496": "diff --git a/sklearn/cluster/tests/test_optics.py b/sklearn/cluster/tests/test_optics.py\nindex 6c9dac3..13f8e3a 100644\n--- a/sklearn/cluster/tests/test_optics.py\n+++ b/sklearn/cluster/tests/test_optics.py\n@@ -77,8 +77,37 @@ def test_the_extract_xi_labels(ordering, clusters, expected):\n \n     assert_array_equal(labels, expected)\n \n+from sklearn.cluster import OPTICS\n+from sklearn.utils import shuffle\n+import numpy as np\n+from numpy.testing import assert_array_equal\n+\n+def test_optics_float_min_samples():\n+    # Test with min_samples as a float\n+    rng = np.random.RandomState(42)\n+    n_points_per_cluster = 5\n+\n+    C1 = [-5, -2] + .8 * rng.randn(n_points_per_cluster, 2)\n+    C2 = [4, -1] + .1 * rng.randn(n_points_per_cluster, 2)\n+    C3 = [1, -2] + .2 * rng.randn(n_points_per_cluster, 2)\n+    C4 = [-2, 3] + .3 * rng.randn(n_points_per_cluster, 2)\n+    C5 = [3, -2] + .6 * rng.randn(n_points_per_cluster, 2)\n+    C6 = [5, 6] + .2 * rng.randn(n_points_per_cluster, 2)\n+\n+    X = np.vstack((C1, C2, C3, C4, C5, np.array([[100, 100]]), C6))\n+    expected_labels = np.r_[[2] * 5, [0] * 5, [1] * 5, [3] * 5, [1] * 5,\n+                            -1, [4] * 5]\n+    X, expected_labels = shuffle(X, expected_labels, random_state=rng)\n+\n+    clust = OPTICS(min_samples=0.1, min_cluster_size=0.08,\n+                   max_eps=20, cluster_method='xi',\n+                   xi=0.4).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n \n-def test_extract_xi():\n+    # Make sure the fix correctly handles a float value for min_samples\n+    n_samples = X.shape[0]\n+    min_samples = max(2, int(round(0.1 * n_samples)))\n+    assert clust.min_samples == min_samples\n     # small and easy test (no clusters around other clusters)\n     # but with a clear noise data.\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-14710": "",
  "scikit-learn__scikit-learn-14894": "",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..cf92f02 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -97,8 +97,26 @@ def test_strip_accents():\n     expected = 'this is a test'\n     assert strip_accents_unicode(a) == expected\n \n+    # strings that are already decomposed\n+    a = \"o\\u0308\"  # o with diaresis\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # combining marks by themselves\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"  # various combining marks\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Multiple combining marks on one character\n+    a = \"o\\u0308\\u0304\"  # o with diaresis and macron\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n \n-def test_to_ascii():\n+    # Test case for issue example with NFKD form\n+    s1 = chr(241)  # \u00f1\n+    s2 = chr(110) + chr(771)  # n\u0303\n+    assert strip_accents_unicode(s1) == \"n\"\n+    assert strip_accents_unicode(s2) == \"n\"\n     # check some classical latin accentuated symbols\n     a = '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb'\n     expected = 'aaaaaaceeee'\n",
  "scikit-learn__scikit-learn-25102": "",
  "scikit-learn__scikit-learn-25232": "",
  "scikit-learn__scikit-learn-25931": "",
  "scikit-learn__scikit-learn-25973": "",
  "scikit-learn__scikit-learn-26323": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex b52e888..0fd44b7 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -22,6 +22,10 @@ from sklearn.compose import (\n from sklearn.exceptions import NotFittedError\n from sklearn.preprocessing import FunctionTransformer\n from sklearn.preprocessing import StandardScaler, Normalizer, OneHotEncoder\n+from sklearn.feature_selection import VarianceThreshold\n+import pandas as pd\n+import pytest\n+import numpy as np\n \n \n class Trans(TransformerMixin, BaseEstimator):\n@@ -2184,4 +2188,27 @@ def test_raise_error_if_index_not_aligned():\n         \" Indexes that do not match.\"\n     )\n     with pytest.raises(ValueError, match=msg):\n-        ct.fit_transform(X)\n+        ct.fit_transform(X)\n+\n+def test_remainder_set_output():\n+    \"\"\"Check that the output is set for the remainder.\n+\n+    Non-regression test for #26306.\n+    \"\"\"\n+\n+    df = pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3]})\n+\n+    # Test with `set_output(transform=\"pandas\")` and remainder as estimator\n+    ct = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+    out = ct.fit_transform(df)\n+    pd.testing.assert_frame_equal(out, df)\n+\n+    # Test with `set_output(transform=\"default\")`\n+    ct.set_output(transform=\"default\")\n+    out = ct.fit_transform(df)\n+    assert isinstance(out, np.ndarray)\n",
  "scikit-learn__scikit-learn-9288": "diff --git a/sklearn/cluster/tests/test_k_means.py b/sklearn/cluster/tests/test_k_means.py\nindex abeeff0..a0763e8 100644\n--- a/sklearn/cluster/tests/test_k_means.py\n+++ b/sklearn/cluster/tests/test_k_means.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for K-means\"\"\"\n import sys\n \n@@ -944,8 +945,24 @@ def test_k_means_empty_cluster_relocated():\n     assert len(set(km.labels_)) == 2\n     assert_allclose(km.cluster_centers_, [[-1], [1]])\n \n+def test_result_of_kmeans_equal_in_diff_n_jobs():\n+    # PR 9288\n+    rnd = np.random.RandomState(0)\n+    X = rnd.normal(size=(50, 10))\n+\n+    result_1 = KMeans(n_clusters=3, random_state=0, n_jobs=1).fit(X).labels_\n+    result_2 = KMeans(n_clusters=3, random_state=0, n_jobs=2).fit(X).labels_\n+    assert_array_equal(result_1, result_2)\n+\n+def test_kmeans_inertia_consistency_across_jobs():\n+    \"\"\"Test that KMeans inertia is consistent across different n_jobs settings.\"\"\"\n+    from sklearn.datasets import make_blobs\n+    X, _ = make_blobs(n_samples=1000, centers=10, n_features=2, random_state=42)\n \n-def test_minibatch_kmeans_partial_fit_int_data():\n+    inertia_1 = KMeans(n_clusters=10, random_state=42, n_jobs=1).fit(X).inertia_\n+    for n_jobs in range(2, 5):\n+        inertia_n = KMeans(n_clusters=10, random_state=42, n_jobs=n_jobs).fit(X).inertia_\n+        assert_almost_equal(inertia_1, inertia_n, decimal=5, err_msg=f\"Inertia mismatch for n_jobs={n_jobs}\")\n     # Issue GH #14314\n     X = np.array([[-1], [1]], dtype=np.int)\n     km = MiniBatchKMeans(n_clusters=2)\n",
  "sphinx-doc__sphinx-10323": "diff --git a/tests/test_directive_code.py b/tests/test_directive_code.py\nindex 949c70e..dc69821 100644\n--- a/tests/test_directive_code.py\n+++ b/tests/test_directive_code.py\n@@ -1,16 +1,97 @@\n-\"\"\"Test the code-block directive.\"\"\"\n \n+\"\"\"Test the code-block directive.\"\"\"\n+@pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n+def test_LiteralIncludeReader_prepend_with_indentation(literal_inc_path):\n+    # This test is for the prepend option with expected indentation\n+    options = {\n+        'lines': '9-11',\n+        'dedent': 5,\n+        'prepend': '     <plugin>',\n+        'start-at': '<groupId>com.github.ekryd.sortpom</groupId>',\n+        'end-at': '</plugin>'\n+    }\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    expected_content = (\"     <plugin>\\n\"\n+                        \"        <groupId>com.github.ekryd.sortpom</groupId>\\n\"\n+                        \"        <artifactId>sortpom-maven-plugin</artifactId>\\n\"\n+                        \"</plugin>\\n\")\n+    assert content == expected_content\n import os\n-\n+@pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n+def test_LiteralIncludeReader_prepend_with_indentation(literal_inc_path):\n+    # This test is for the prepend option with expected indentation\n+    options = {\n+        'lines': '9-11',\n+        'dedent': 5,\n+        'prepend': '     <plugin>',\n+        'start-at': '<groupId>com.github.ekryd.sortpom</groupId>',\n+        'end-at': '</plugin>'\n+    }\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    expected_content = (\"     <plugin>\\n\"\n+                        \"        <groupId>com.github.ekryd.sortpom</groupId>\\n\"\n+                        \"        <artifactId>sortpom-maven-plugin</artifactId>\\n\"\n+                        \"</plugin>\\n\")\n+    assert content == expected_content\n import pytest\n from docutils import nodes\n-\n+@pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n+def test_LiteralIncludeReader_prepend_with_indentation(literal_inc_path):\n+    # This test is for the prepend option with expected indentation\n+    options = {\n+        'lines': '9-11',\n+        'dedent': 5,\n+        'prepend': '     <plugin>',\n+        'start-at': '<groupId>com.github.ekryd.sortpom</groupId>',\n+        'end-at': '</plugin>'\n+    }\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    expected_content = (\"     <plugin>\\n\"\n+                        \"        <groupId>com.github.ekryd.sortpom</groupId>\\n\"\n+                        \"        <artifactId>sortpom-maven-plugin</artifactId>\\n\"\n+                        \"</plugin>\\n\")\n+    assert content == expected_content\n from sphinx.config import Config\n from sphinx.directives.code import LiteralIncludeReader\n from sphinx.testing.util import etree_parse\n-\n+@pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n+def test_LiteralIncludeReader_prepend_with_indentation(literal_inc_path):\n+    # This test is for the prepend option with expected indentation\n+    options = {\n+        'lines': '9-11',\n+        'dedent': 5,\n+        'prepend': '     <plugin>',\n+        'start-at': '<groupId>com.github.ekryd.sortpom</groupId>',\n+        'end-at': '</plugin>'\n+    }\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    expected_content = (\"     <plugin>\\n\"\n+                        \"        <groupId>com.github.ekryd.sortpom</groupId>\\n\"\n+                        \"        <artifactId>sortpom-maven-plugin</artifactId>\\n\"\n+                        \"</plugin>\\n\")\n+    assert content == expected_content\n DUMMY_CONFIG = Config({}, {})\n-\n+@pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n+def test_LiteralIncludeReader_prepend_with_indentation(literal_inc_path):\n+    # This test is for the prepend option with expected indentation\n+    options = {\n+        'lines': '9-11',\n+        'dedent': 5,\n+        'prepend': '     <plugin>',\n+        'start-at': '<groupId>com.github.ekryd.sortpom</groupId>',\n+        'end-at': '</plugin>'\n+    }\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    expected_content = (\"     <plugin>\\n\"\n+                        \"        <groupId>com.github.ekryd.sortpom</groupId>\\n\"\n+                        \"        <artifactId>sortpom-maven-plugin</artifactId>\\n\"\n+                        \"</plugin>\\n\")\n+    assert content == expected_content\n \n @pytest.fixture(scope='module')\n def testroot(rootdir):\n@@ -241,7 +322,23 @@ def test_LiteralIncludeReader_dedent(literal_inc_path):\n     assert content == (\"f baz():\\n\"\n                        \"  pass\\n\"\n                        \"\\n\")\n-\n+@pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n+def test_LiteralIncludeReader_prepend_with_indentation(literal_inc_path):\n+    # This test is for the prepend option with expected indentation\n+    options = {\n+        'lines': '9-11',\n+        'dedent': 5,\n+        'prepend': '     <plugin>',\n+        'start-at': '<groupId>com.github.ekryd.sortpom</groupId>',\n+        'end-at': '</plugin>'\n+    }\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    expected_content = (\"     <plugin>\\n\"\n+                        \"        <groupId>com.github.ekryd.sortpom</groupId>\\n\"\n+                        \"        <artifactId>sortpom-maven-plugin</artifactId>\\n\"\n+                        \"</plugin>\\n\")\n+    assert content == expected_content\n     # dedent: None\n     options = {'lines': '9-11', 'dedent': None}\n     reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n@@ -249,7 +346,23 @@ def test_LiteralIncludeReader_dedent(literal_inc_path):\n     assert content == (\"def baz():\\n\"\n                        \"    pass\\n\"\n                        \"\\n\")\n-\n+@pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n+def test_LiteralIncludeReader_prepend_with_indentation(literal_inc_path):\n+    # This test is for the prepend option with expected indentation\n+    options = {\n+        'lines': '9-11',\n+        'dedent': 5,\n+        'prepend': '     <plugin>',\n+        'start-at': '<groupId>com.github.ekryd.sortpom</groupId>',\n+        'end-at': '</plugin>'\n+    }\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    expected_content = (\"     <plugin>\\n\"\n+                        \"        <groupId>com.github.ekryd.sortpom</groupId>\\n\"\n+                        \"        <artifactId>sortpom-maven-plugin</artifactId>\\n\"\n+                        \"</plugin>\\n\")\n+    assert content == expected_content\n \n @pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n def test_LiteralIncludeReader_tabwidth(testroot):\n",
  "sphinx-doc__sphinx-10449": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 82ec43a..b6b3b2e 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1023,6 +1023,20 @@ def test_autodoc_typehints_description_no_undoc_doc_rtype(app):\n             '   Return type:\\n'\n             '      None\\n' == context)\n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\"})\n+def test_autodoc_typehints_description_no_return_type(app):\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: target.typehints._ClassWithoutReturnType\\n',\n+        encoding='utf8'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n+    assert ('class target.typehints._ClassWithoutReturnType\\n'\n+            '\\n'\n+            '   A class representing a square figure.\\n'\n+            '\\n' not in context)\n+    assert 'Return type:' not in context\n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\"})\n",
  "sphinx-doc__sphinx-10466": "diff --git a/tests/test_build_gettext.py b/tests/test_build_gettext.py\nindex a6fc946..a94272a 100644\n--- a/tests/test_build_gettext.py\n+++ b/tests/test_build_gettext.py\n@@ -1,10 +1,47 @@\n+\n+def test_Catalog_no_duplicate_locations():\n+    catalog = Catalog()\n+    catalog.add('example', MsgOrigin('/path/to/file1', 10))\n+    catalog.add('example', MsgOrigin('/path/to/file1', 10))\n+    catalog.add('example', MsgOrigin('/path/to/file2', 20))\n+    catalog.add('example', MsgOrigin('/path/to/file2', 20))\n+    catalog.add('example', MsgOrigin('/path/to/file3', 30))\n+\n+    messages = list(catalog)\n+    assert len(messages) == 1\n+\n+    msg = messages[0]\n+    assert msg.text == 'example'\n+    assert len(msg.locations) == 3  # Ensure no duplicates\n+    assert sorted(msg.locations) == sorted([\n+        ('/path/to/file1', 10),\n+        ('/path/to/file2', 20),\n+        ('/path/to/file3', 30)\n+    ])\n+\n+def test_Catalog_different_messages():\n+    catalog = Catalog()\n+    catalog.add('first', MsgOrigin('/path/to/file', 1))\n+    catalog.add('second', MsgOrigin('/path/to/file', 2))\n+    catalog.add('first', MsgOrigin('/path/to/file', 1))  # Intentional duplicate\n+    catalog.add('second', MsgOrigin('/path/to/file', 3))\n+\n+    messages = list(catalog)\n+    assert len(messages) == 2\n+\n+    msg1, msg2 = messages\n+    assert msg1.text == 'first'\n+    assert msg2.text == 'second'\n+    assert msg1.locations == [('/path/to/file', 1)]\n+    assert msg2.locations == [('/path/to/file', 2), ('/path/to/file', 3)]\n+\n \"\"\"Test the build process with gettext builder with the test root.\"\"\"\n \n import gettext\n import os\n import re\n import subprocess\n-from subprocess import PIPE, CalledProcessError\n+from sphinx.builders.gettext import Catalog, MsgOrigin\n \n import pytest\n \n",
  "sphinx-doc__sphinx-10673": "",
  "sphinx-doc__sphinx-7440": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 975a00f..dd741b3 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -147,6 +147,37 @@ def test_glossary(app):\n     assert (\"term3\", \"term3\", \"term\", \"index\", \"term-term3\", -1) in objects\n     assert (\"term4\", \"term4\", \"term\", \"index\", \"term-term4\", -1) in objects\n \n+    # Test case for duplicate glossary terms with different case\n+    text_case_sensitive = (\".. glossary::\\n\"\n+                           \"\\n\"\n+                           \"   MySQL\\n\"\n+                           \"       A popular open-source database management system.\\n\"\n+                           \"\\n\"\n+                           \"   mysql\\n\"\n+                           \"       Refers to the command-line client executable.\\n\")\n+    \n+    # parse the glossary\n+    doctree_case_sensitive = restructuredtext.parse(app, text_case_sensitive)\n+    assert_node(doctree_case_sensitive, (\n+        [glossary, definition_list, ([definition_list_item, ([term, (\"MySQL\", index)],\n+                                                             definition)],\n+                                     [definition_list_item, ([term, (\"mysql\", index)],\n+                                                             definition)])],\n+    ))\n+    assert_node(doctree_case_sensitive[0][0][0][0][1],\n+                entries=[(\"single\", \"MySQL\", \"term-MySQL\", \"main\", None)])\n+    assert_node(doctree_case_sensitive[0][0][0][1][1],\n+                entries=[(\"single\", \"mysql\", \"term-mysql\", \"main\", None)])\n+    assert_node(doctree_case_sensitive[0][0][0][0][1],\n+                [definition, nodes.paragraph, \"A popular open-source database management system.\"])\n+    assert_node(doctree_case_sensitive[0][0][1][0][1],\n+                [definition, nodes.paragraph, \"Refers to the command-line client executable.\"])\n+    \n+    # Ensure both terms are indexed\n+    objects_case_sensitive = list(app.env.get_domain(\"std\").get_objects())\n+    assert (\"MySQL\", \"MySQL\", \"term\", \"index\", \"term-MySQL\", -1) in objects_case_sensitive\n+    assert (\"mysql\", \"mysql\", \"term\", \"index\", \"term-mysql\", -1) in objects_case_sensitive\n+\n \n def test_glossary_warning(app, status, warning):\n     # empty line between terms\n",
  "sphinx-doc__sphinx-7757": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex b3053d1..d286050 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -331,6 +331,23 @@ def test_signature_from_str_kwonly_args():\n     assert sig.parameters['b'].kind == Parameter.KEYWORD_ONLY\n     assert sig.parameters['b'].default == Parameter.empty\n \n+@pytest.mark.skipif(sys.version_info < (3, 8),\n+                    reason='python-3.8 or above is required')\n+def test_signature_from_str_positional_only_args_with_defaults():\n+    sig = inspect.signature_from_str('(a, b=0, /, c=1)')\n+    assert list(sig.parameters.keys()) == ['a', 'b', 'c']\n+    assert sig.parameters['a'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['a'].default == Parameter.empty\n+    assert sig.parameters['b'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['b'].default == '0'\n+    assert sig.parameters['c'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['c'].default == '1'\n+    assert list(sig.parameters.keys()) == ['a', 'b']\n+    assert sig.parameters['a'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['a'].default == Parameter.empty\n+    assert sig.parameters['b'].kind == Parameter.KEYWORD_ONLY\n+    assert sig.parameters['b'].default == Parameter.empty\n+\n \n @pytest.mark.skipif(sys.version_info < (3, 8),\n                     reason='python-3.8 or above is required')\n",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..76fd0d0 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -15,6 +16,7 @@ from importlib import import_module\n import pytest\n \n from sphinx.ext.autodoc.mock import _MockModule, _MockObject, mock\n+from typing import TypeVar, Generic\n \n \n def test_MockModule():\n@@ -51,6 +53,19 @@ def test_MockObject():\n     assert obj.method() == \"string\"\n     assert isinstance(obj.other_method(), SubClass)\n \n+    # Test case for issue with generic-typed classes\n+    T = TypeVar('T')\n+\n+    class GenericClass(Generic[T]):\n+        \"\"\"A generic class with type variable\"\"\"\n+\n+    class SubClass2(mock.SomeClass[T]):\n+        \"\"\"docstring of SubClass2\"\"\"\n+\n+    obj2 = SubClass2()\n+    assert SubClass2.__doc__ == \"docstring of SubClass2\"\n+    assert isinstance(obj2, SubClass2)\n+\n \n def test_mock():\n     modname = 'sphinx.unknown'\n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex 464108d..8cc6b35 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -1261,8 +1261,30 @@ def test_automethod_for_builtin(app):\n         '',\n     ]\n \n+from sphinx.testing.util import simple_decorator\n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_decorated_init_method(app):\n+    class SampleClass:\n+        @simple_decorator\n+        def __init__(self, x):\n+            \"\"\"Initialize with x.\"\"\"\n+            self.x = x\n+\n+    app.builder.env.app.config.napoleon_include_init_with_doc = True\n+    options = {\"members\": None}\n+    actual = list(do_autodoc(app, 'class', 'path.to.SampleClass', options))\n+    \n+    expected_doc_lines = [\n+        '',\n+        '.. py:class:: SampleClass(x)',\n+        '',\n+        '   Initialize with x.',\n+        '',\n+    ]\n+\n+    for line in expected_doc_lines:\n+        assert line in actual\n def test_automethod_for_decorated(app):\n     actual = do_autodoc(app, 'method', 'target.decorator.Bar.meth')\n     assert list(actual) == [\n@@ -1272,8 +1294,30 @@ def test_automethod_for_decorated(app):\n         '',\n     ]\n \n+from sphinx.testing.util import simple_decorator\n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_decorated_init_method(app):\n+    class SampleClass:\n+        @simple_decorator\n+        def __init__(self, x):\n+            \"\"\"Initialize with x.\"\"\"\n+            self.x = x\n+\n+    app.builder.env.app.config.napoleon_include_init_with_doc = True\n+    options = {\"members\": None}\n+    actual = list(do_autodoc(app, 'class', 'path.to.SampleClass', options))\n+    \n+    expected_doc_lines = [\n+        '',\n+        '.. py:class:: SampleClass(x)',\n+        '',\n+        '   Initialize with x.',\n+        '',\n+    ]\n+\n+    for line in expected_doc_lines:\n+        assert line in actual\n def test_abstractmethods(app):\n     options = {\"members\": None,\n                \"undoc-members\": None}\n",
  "sphinx-doc__sphinx-7985": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 5b1b2ed..18defe4 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -8,6 +8,9 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+import os\n+import shutil\n+\n import json\n import re\n from unittest import mock\n",
  "sphinx-doc__sphinx-8035": "diff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex ad1d950..9b3eb36 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_private_members\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -13,6 +14,32 @@ import pytest\n from test_ext_autodoc import do_autodoc\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_specific_private_members(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\n+        \"members\": None,\n+        \"private-members\": \"_private_function1, _private_function2\"\n+    }\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        '',\n+        '.. py:function:: _private_function1(param)',\n+        '   :module: target.private',\n+        '',\n+        '   _private_function1 is a docstring().',\n+        '',\n+        '',\n+        '.. py:function:: _private_function2(param)',\n+        '   :module: target.private',\n+        '',\n+        '   _private_function2 is a docstring().',\n+        '',\n+    ]\n+\n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_private_field(app):\n     app.config.autoclass_content = 'class'\n",
  "sphinx-doc__sphinx-8120": "diff --git a/tests/test_intl.py b/tests/test_intl.py\nindex 58339b1..7b9ee45 100644\n--- a/tests/test_intl.py\n+++ b/tests/test_intl.py\n@@ -1287,5 +1287,40 @@ def test_image_glob_intl_using_figure_language_filename(app):\n                             'image/svg+xml': 'subdir/svgimg.svg'})\n \n \n-def getwarning(warnings):\n-    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n+from babel.messages import pofile\n+from sphinx.testing.util import SphinxTestApp\n+import pytest\n+\n+def test_locale_translation_override(make_app, app_params, sphinx_test_tempdir):\n+    try:\n+        # Clear translators cache\n+        locale.translators.clear()\n+\n+        # Set up translation directory and file\n+        locale_dir = sphinx_test_tempdir / 'basic' / 'locale' / 'da' / 'LC_MESSAGES'\n+        locale_dir.makedirs()\n+        with (locale_dir / 'sphinx.po').open('wb') as f:\n+            catalog = Catalog()\n+            catalog.add('Fig. %s', 'Foobar %s')\n+            catalog.add('Listing %s', 'Whatever %s')\n+            pofile.write_po(f, catalog)\n+\n+        # Create a Sphinx application\n+        args, kwargs = app_params\n+        app = make_app(*args, confoverrides={'language': 'da'}, **kwargs)\n+\n+        # Ensure the message catalog (.mo) is created\n+        assert (locale_dir / 'sphinx.mo').exists()\n+\n+        # Check translations are correctly applied\n+        assert app.translator.gettext('Fig. %s') == 'Foobar %s'\n+        assert app.translator.gettext('Listing %s') == 'Whatever %s'\n+\n+        # Build the app and check the output\n+        app.build()\n+        content = (app.outdir / 'index.html').read_text()\n+        assert 'Foobar 1' in content\n+        assert 'Whatever 1' in content\n+    finally:\n+        locale.translators.clear()\n+    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n",
  "sphinx-doc__sphinx-8269": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 7842f56..a65b615 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -107,6 +107,44 @@ def test_anchors_ignored(app, status, warning):\n     assert not content\n \n \n+import pytest\n+import http.server\n+import threading\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_raises_for_not_found_status(app, status, warning):\n+    server_thread = HttpServerThread(NotFoundHandler, daemon=True)\n+    server_thread.start()\n+    try:\n+        app.builder.build_all()\n+    finally:\n+        server_thread.terminate()\n+\n+    content = (app.outdir / 'output.txt').read_text()\n+    assert content == (\n+        \"index.rst:1: [broken] http://localhost:7777/#anchor: \"\n+        \"404 Client Error: Not Found \"\n+        \"for url: http://localhost:7777/\\n\"\n+    )\n+\n+class HttpServerThread(threading.Thread):\n+    def __init__(self, handler, *args, **kwargs):\n+        super().__init__(*args, **kwargs)\n+        self.server = http.server.HTTPServer((\"localhost\", 7777), handler)\n+\n+    def run(self):\n+        self.server.serve_forever(poll_interval=0.01)\n+\n+    def terminate(self):\n+        self.server.shutdown()\n+        self.server.server_close()\n+        self.join()\n+\n+class NotFoundHandler(http.server.BaseHTTPRequestHandler):\n+    def do_GET(self):\n+        self.send_error(404, \"Not Found\")\n+\n+\n @pytest.mark.sphinx(\n     'linkcheck', testroot='linkcheck', freshenv=True,\n     confoverrides={'linkcheck_auth': [\n@@ -159,4 +197,11 @@ def test_linkcheck_request_headers(app, status, warning):\n                 assert headers[\"Accept\"] == \"text/html,application/xhtml+xml;q=0.9,*/*;q=0.8\"\n                 assert headers[\"X-Secret\"] == \"open sesami\"\n             else:\n-                assert headers[\"Accept\"] == \"text/html,application/xhtml+xml;q=0.9,*/*;q=0.8\"\n+                assert headers[\"Accept\"] == \"text/html,application/xhtml+xml;q=0.9,*/*;q=0.8\"\n+\n+\n+\n+\n+\n+\n+\n",
  "sphinx-doc__sphinx-8459": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex d1881df..b67a874 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_configs\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -8,6 +9,45 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+import pytest\n+import sys\n+from sphinx.testing.path import path\n+\n+@pytest.mark.skipif(sys.version_info < (3, 7), reason='python 3.7+ is required.')\n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    srcdir='autodoc_typehints_description_and_type_aliases',\n+                    confoverrides={'autodoc_typehints': \"description\",\n+                                   'autodoc_type_aliases': {'JSONObject': 'types.JSONObject'}})\n+def test_autodoc_typehints_description_and_type_aliases(app):\n+    (app.srcdir / 'types.py').write_text('''\n+from __future__ import annotations\n+from typing import Any, Dict\n+\n+JSONObject = Dict[str, Any]\n+\n+def sphinx_doc(data: JSONObject) -> JSONObject:\n+    \"\"\"Does it work.\n+\n+    Args:\n+        data: Does it args.\n+\n+    Returns:\n+        Does it work in return.\n+    \"\"\"\n+    return {}\n+''')\n+    (app.srcdir / 'conf.py').write_text('''\n+autodoc_typehints = 'description'\n+autodoc_type_aliases = {\n+    'JSONObject': 'types.JSONObject',\n+}\n+''')\n+    (app.srcdir / 'index.rst').write_text('.. automodule:: types\\n   :members:\\n')\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text()\n+    assert 'data (types.JSONObject)' in context\n+    assert 'Return type\\ntypes.JSONObject' in context\n+\n import platform\n import sys\n \n",
  "sphinx-doc__sphinx-8475": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 41632e7..22c1c49 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -372,6 +372,28 @@ def test_connect_to_selfsigned_nonexistent_cert_file(app):\n     with https_server(OKHandler):\n         app.builder.build_all()\n \n+import json\n+import pytest\n+import http.server\n+from sphinx.testing.util import SphinxTestApp\n+from sphinx.util import requests\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_TooManyRedirects_on_HEAD(app: SphinxTestApp):\n+    class InfiniteRedirectOnHeadHandler(http.server.BaseHTTPRequestHandler):\n+        def do_HEAD(self):\n+            self.send_response(302, \"Found\")\n+            self.send_header(\"Location\", \"http://localhost:7777/\")\n+            self.end_headers()\n+\n+        def do_GET(self):\n+            self.send_response(200, \"OK\")\n+            self.end_headers()\n+            self.wfile.write(b\"ok\\n\")\n+\n+    with http_server(InfiniteRedirectOnHeadHandler):\n+        app.builder.build_all()\n+\n     with open(app.outdir / 'output.json') as fp:\n         content = json.load(fp)\n     assert content == {\n@@ -381,4 +403,4 @@ def test_connect_to_selfsigned_nonexistent_cert_file(app):\n         \"lineno\": 1,\n         \"uri\": \"https://localhost:7777/\",\n         \"info\": \"Could not find a suitable TLS CA certificate bundle, invalid path: does/not/exist\",\n-    }\n+    }\n",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8721": "",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex 3c31d3d..aa7cdbd 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -516,6 +516,25 @@ def test_dict_customtype():\n     assert \"<CustomType(2)>: 2\" in description\n \n \n+def test_object_description_enum():\n+    import enum\n+\n+    class MyEnum(enum.Enum):\n+        ValueA = 10\n+        ValueB = 20\n+\n+    # Original test case to ensure enum member is described correctly\n+    assert inspect.object_description(MyEnum.ValueA) == \"MyEnum.ValueA\"\n+\n+    # New test case to simulate the function signature case\n+    def ugly_enum_func(e: MyEnum = MyEnum.ValueA) -> None:\n+        pass\n+\n+    signature = inspect.signature(ugly_enum_func)\n+    params = signature.parameters\n+    assert str(params['e'].default) == \"MyEnum.ValueA\"\n+\n+\n def test_getslots():\n     class Foo:\n         pass\n",
  "sphinx-doc__sphinx-9320": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\nindex ff8df08..9aef66a 100644\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -16,6 +16,7 @@ import pytest\n from sphinx import application\n from sphinx.cmd import quickstart as qs\n from sphinx.util.console import coloron, nocolor\n+from os import path\n \n warnfile = StringIO()\n \n",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..a528a92 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -46,6 +46,7 @@ from sphinx.pycode import ast\n     (\"not a\", \"not a\"),                         # Not\n     (\"a or b\", \"a or b\"),                       # Or\n     (\"a ** b\", \"a ** b\"),                       # Pow\n+    (\"(1,)\", \"(1,)\"),                           # Tuple (single element)\n     (\"a >> b\", \"a >> b\"),                       # RShift\n     (\"{1, 2, 3}\", \"{1, 2, 3}\"),                 # Set\n     (\"a - b\", \"a - b\"),                         # Sub\n",
  "sphinx-doc__sphinx-9591": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 29731ea..d1ee25a 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -847,6 +847,57 @@ def test_pyproperty(app):\n     assert domain.objects['Class.prop2'] == ('index', 'Class.prop2', 'property', False)\n \n \n+def test_pyproperty_with_cross_reference(app):\n+    text = (\".. py:class:: Square\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\"\n+            \"\\n\"\n+            \"   .. py:class:: Point\\n\"\n+            \"\\n\"\n+            \"      :py:attribute:: x\\n\"\n+            \"      :py:attribute:: y\\n\")\n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                                    [desc_name, \"Square\"])],\n+                                  [desc_content, (addnodes.index,\n+                                                  desc)])]))\n+    assert_node(doctree[1][1][0], addnodes.index,\n+                entries=[('single', 'end (Square property)', 'Square.end', '', None)])\n+    assert_node(doctree[1][1][1], ([desc_signature, ([desc_annotation, \"property \"],\n+                                                     [desc_name, \"end\"],\n+                                                     [pending_xref, \"Point\"])],\n+                                   [desc_content, ()]))\n+    assert 'Square.end' in domain.objects\n+    assert domain.objects['Square.end'] == ('index', 'Square.end', 'property', False)\n+\n+    # Ensure 'Point' is correctly cross-referenced\n+    assert_node(doctree[1][1][1][0][2], pending_xref, **{\"py:class\": \"Point\"})\n+\n+    text2 = (\".. py:class:: Rectangle\\n\"\n+             \"\\n\"\n+             \"   .. py:property:: end\\n\"\n+             \"      :type: Point\\n\")\n+    doctree2 = restructuredtext.parse(app, text2)\n+    assert_node(doctree2, (addnodes.index,\n+                           [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                                     [desc_name, \"Rectangle\"])],\n+                                   [desc_content, (addnodes.index,\n+                                                   desc)])]))\n+    assert_node(doctree2[1][1][0], addnodes.index,\n+                entries=[('single', 'end (Rectangle property)', 'Rectangle.end', '', None)])\n+    assert_node(doctree2[1][1][1], ([desc_signature, ([desc_annotation, \"property \"],\n+                                                      [desc_name, \"end\"],\n+                                                      [pending_xref, \"Point\"])],\n+                                    [desc_content, ()]))\n+    assert 'Rectangle.end' in domain.objects\n+    assert domain.objects['Rectangle.end'] == ('index', 'Rectangle.end', 'property', False)\n+\n+    # Ensure 'Point' is correctly cross-referenced in Rectangle class as well\n+    assert_node(doctree2[1][1][1][0][2], pending_xref, **{\"py:class\": \"Point\"})\n+\n def test_pydecorator_signature(app):\n     text = \".. py:decorator:: deco\"\n     domain = app.env.get_domain('py')\n",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..cafc4d9 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -754,15 +754,43 @@ def test_pymethod_options(app):\n     assert 'Class.meth4' in domain.objects\n     assert domain.objects['Class.meth4'] == ('index', 'Class.meth4', 'method', False)\n \n-    # :property:\n+    # :property: should not have parentheses in index\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n     assert 'Class.meth5' in domain.objects\n     assert domain.objects['Class.meth5'] == ('index', 'Class.meth5', 'method', False)\n \n+def test_property_no_parens(app):\n+    text = (\".. py:class:: Class\\n\"\n+            \"\\n\"\n+            \"   .. py:method:: property_method\\n\"\n+            \"      :property:\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: direct_property\\n\")\n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n+\n+    # Test py:method with :property: option\n+    assert_node(doctree[1][1][0], addnodes.index,\n+                entries=[('single', 'property_method (Class property)', 'Class.property_method', '', None)])\n+    assert_node(doctree[1][1][1], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n+                                                     [desc_name, \"property_method\"])],\n+                                   [desc_content, ()]))\n+    assert 'Class.property_method' in domain.objects\n+    assert domain.objects['Class.property_method'] == ('index', 'Class.property_method', 'method', False)\n+\n+    # Test py:property directive directly\n+    assert_node(doctree[1][1][2], addnodes.index,\n+                entries=[('single', 'direct_property (Class property)', 'Class.direct_property', '', None)])\n+    assert_node(doctree[1][1][3], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n+                                                     [desc_name, \"direct_property\"])],\n+                                   [desc_content, ()]))\n+    assert 'Class.direct_property' in domain.objects\n+    assert domain.objects['Class.direct_property'] == ('index', 'Class.direct_property', 'property', False)\n+\n     # :abstractmethod:\n     assert_node(doctree[1][1][10], addnodes.index,\n                 entries=[('single', 'meth6() (Class method)', 'Class.meth6', '', None)])\n",
  "sphinx-doc__sphinx-9711": "",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..faee5ce 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -236,7 +236,29 @@ def test_Point2D():\n     assert p2.distance(p3) == sqrt(17)/2\n \n \n-def test_issue_9214():\n+def test_issue_11617():\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point2D(2, 0)\n+    assert p1.distance(p2) == sqrt(5)\n+\n+def test_distance_between_3D_points():\n+    p1 = Point3D(1, 2, 3)\n+    p2 = Point3D(4, 5, 6)\n+    assert p1.distance(p2) == sqrt(27)\n+\n+def test_distance_between_2D_and_3D_points():\n+    p3d = Point3D(1, 0, 2)\n+    p2d = Point2D(1, 0)\n+    assert p3d.distance(p2d) == 2\n+    assert p2d.distance(p3d) == 2\n+\n+def test_distance_with_different_dimensions():\n+    p1 = Point2D(0, 0)\n+    p2 = Point3D(0, 0, 1)\n+    p3 = Point3D(1, 1, 1)\n+    assert p1.distance(p2) == 1\n+    assert p1.distance(p3) == sqrt(3)\n+    assert p2.distance(p3) == sqrt(2)\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n     p3 = Point3D(7, 2, 3)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..4cfbde7 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -741,6 +741,26 @@ def test_special_printers():\n     assert isinstance(func1(), mpi)\n     assert isinstance(func2(), mpi)\n \n+def test_recursive_evalf():\n+    # Test for the case described in the issue\n+    f = implemented_function('f', lambda x: x ** 2)\n+    g = implemented_function('g', lambda x: 2 * x)\n+    assert f(g(2)).evalf() == Float(16)  # Should evaluate to 16\n+\n+    # Additional test for deeper nesting\n+    h = implemented_function('h', lambda x: x + 1)\n+    assert f(g(h(2))).evalf() == Float(36)  # g(h(2)) = 6, f(6) = 36\n+\n+    # Test with a different function\n+    k = implemented_function('k', lambda x: x / 2)\n+    assert k(f(g(2))).evalf() == Float(8)  # f(g(2)) = 16, k(16) = 8\n+\n+    # Verify that original test patch is not affected\n+    assert f(f(2)).evalf() == Float(16)\n+\n+from sympy.utilities.lambdify import implemented_function\n+from sympy import Float\n+\n def test_true_false():\n     # We want exact is comparison here, not just ==\n     assert lambdify([], true)() is True\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..89554a3 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,6 +83,14 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n+def test_Identity_sum_of_elements():\n+    from sympy import Sum, symbols\n+    \n+    n = symbols('n', integer=True, positive=True)\n+    In = Identity(n)\n+\n+    # Check that the total sum of elements in the identity matrix is n\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n \n def test_Identity_doit():\n     Inn = Identity(Add(n, n, evaluate=False))\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..192ba43 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -330,6 +330,16 @@ def test_args():\n     assert p._array_form == [3, 2, 0, 1, 5, 4]\n     p = Permutation((0, 3, 1, 2))\n     assert p._cyclic_form is None\n+    \n+    # Additional test cases for non-disjoint cycles\n+    # They should be applied from left to right\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([0, 2, 1])\n+    assert Permutation([[0, 1, 2], [1, 2]]) == Permutation([0, 2, 1])\n+    assert Permutation([[1, 0], [0, 1]]) == Permutation([0, 1])  # Should be identity\n+    assert Permutation([[0, 1, 2], [2, 0]]) == Permutation([2, 0, 1])\n+    assert Permutation([[0, 1], [2], [1, 2]]) == Permutation([0, 2, 1])\n+    assert Permutation([[], [0, 1]]) == Permutation([1, 0])  # Empty cycle should not affect result\n     assert p._array_form == [0, 3, 1, 2]\n     assert Permutation([0]) == Permutation((0, ))\n     assert Permutation([[0], [1]]) == Permutation(((0, ), (1, ))) == \\\n",
  "sympy__sympy-13031": "",
  "sympy__sympy-13372": "diff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\nindex e95146a..cf0df03 100644\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -230,6 +230,16 @@ def test_evalf_bugs():\n     #issue 11518\n     assert NS(2*x**2.5, 5) == '2.0000*x**2.5000'\n \n+    #issue 13076\n+    # Original test case\n+    assert NS(Mul(Max(0, y), x, evaluate=False).evalf()) == 'x*Max(0, y)'\n+    # Additional test cases\n+    assert NS(Mul(Max(0, y), 2, evaluate=False).evalf()) == '2*Max(0, y)'\n+    assert NS(Mul(3, Max(0, y), evaluate=False).evalf()) == '3*Max(0, y)'\n+    assert NS(Mul(Max(0, 1), x, evaluate=False).evalf()) == 'x'\n+    assert NS(Mul(x, Max(0, 1), evaluate=False).evalf()) == 'x'\n+    assert NS(Mul(Max(0, y), Max(0, x), evaluate=False).evalf()) == 'Max(0, y)*Max(0, x)'\n+\n \n def test_evalf_integer_parts():\n     a = floor(log(8)/log(2) - exp(-1000), evaluate=False)\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..eed4106 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -272,8 +272,26 @@ def test_coth():\n \n     assert coth(k*pi*I) == -cot(k*pi)*I\n \n-\n-def test_coth_series():\n+from sympy import Symbol, I, coth, log, tan\n+\n+def test_coth_issue():\n+    x = Symbol('x')\n+    # Test the specific problematic substitution values\n+    assert coth(log(tan(2))).is_real is False\n+    assert coth(log(tan(3))).is_real is False\n+    assert coth(log(tan(5))).is_real is False\n+    assert coth(log(tan(6))).is_real is False\n+    assert coth(log(tan(8))).is_real is False\n+    assert coth(log(tan(9))).is_real is False\n+    assert coth(log(tan(11))).is_real is False\n+    assert coth(log(tan(12))).is_real is False\n+    assert coth(log(tan(13))).is_real is False\n+    assert coth(log(tan(15))).is_real is False\n+    assert coth(log(tan(18))).is_real is False\n+\n+    # Test the original patch cases to ensure they still pass\n+    assert coth(log(tan(2))) == coth(log(-tan(2)))\n+    assert coth(1 + I*pi/2) == tanh(1)\n     x = Symbol('x')\n     assert coth(x).series(x, 0, 8) == \\\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..de1975a 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -165,7 +165,12 @@ def test_difference():\n     assert -1 in S.Reals - S.Naturals\n \n \n-def test_Complement():\n+def test_complement_mixed_symbols_numbers():\n+    # This test addresses issue 12712\n+    a = FiniteSet(x, y, 2)\n+    b = Interval(-10, 10)\n+    expected = FiniteSet(x, y)\n+    assert Complement(a, b) == expected\n     assert Complement(Interval(1, 3), Interval(1, 2)) == Interval(2, 3, True)\n     assert Complement(FiniteSet(1, 3, 4), FiniteSet(3, 4)) == FiniteSet(1)\n     assert Complement(Union(Interval(0, 2),\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..9d200b6 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,6 +201,45 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n+def test_issue_13643_col_insert():\n+    # Test the col_insert for identity and ones matrices\n+    from sympy import Matrix, eye, ones\n+\n+    M = eye(6)\n+    V = 2 * ones(6, 2)\n+    result = M.col_insert(3, V)\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert result == expected\n+\n+    # Additional test cases\n+    M = eye(3)\n+    V = ones(3, 1)\n+    result = M.col_insert(1, V)\n+    expected = Matrix([\n+        [1, 1, 0, 0],\n+        [0, 1, 1, 0],\n+        [0, 0, 1, 1]\n+    ])\n+    assert result == expected\n+\n+    M = eye(4)\n+    V = Matrix([3, 3, 3, 3])\n+    result = M.col_insert(0, V)\n+    expected = Matrix([\n+        [3, 1, 0, 0, 0],\n+        [3, 0, 1, 0, 0],\n+        [3, 0, 0, 1, 0],\n+        [3, 0, 0, 0, 1]\n+    ])\n+    assert result == expected\n+\n def test_extract():\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..2429b2d 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -672,12 +672,22 @@ def test_Poly_mul():\n     assert Poly(4, x, y) * Poly(2, x, y) == Poly(8, x, y)\n \n     assert Poly(1, x) * x == Poly(x, x)\n+\n+    # Test cases for issue with multiplication\n+    assert Poly(x) * x == Poly(x**2, x, domain='ZZ')\n+    assert x * Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert -2 * Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2) * Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert Poly(x) * S(-2) == Poly(-2*x, x, domain='ZZ')\n     assert Poly(1, x) * sin(x) == sin(x)\n \n     assert Poly(x, x) * 2 == Poly(2*x, x)\n     assert 2 * Poly(x, x) == Poly(2*x, x)\n \n \n+from sympy import Poly, S\n+from sympy.abc import x\n+\n def test_Poly_sqr():\n     assert Poly(x*y, x, y).sqr() == Poly(x**2*y**2, x, y)\n \n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..c4fa2b8 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -54,8 +54,24 @@ def test_printmethod():\n             return \"foo\"\n     assert latex(R(x)) == \"foo\"\n \n-\n-def test_latex_basic():\n+def test_custom_mul_symbol():\n+    from sympy import symbols, latex, Integral\n+    x, y = symbols('x y')\n+\n+    # Test custom mul_symbol with thin space\n+    assert latex(3*x**2*y, mul_symbol='\\\\,') == r\"3\\,x^{2}\\,y\"\n+    \n+    # Test with a different custom symbol\n+    assert latex(3*x**2*y, mul_symbol='*') == r\"3*x^{2}*y\"\n+    \n+    # Ensure existing behavior with default options is not affected\n+    assert latex(3*x**2*y) == \"3 x^{2} y\"\n+    \n+    # Test with non-standard multiplication symbol in an integral\n+    assert latex(Integral(2*x**2*y, x), mul_symbol='\\\\,') == r\"\\int 2 x^{2} y\\,dx\"\n+    \n+    # Test with default integral behavior unaffected\n+    assert latex(Integral(2*x**2*y, x)) == r\"\\int 2 x^{2} y\\\\, dx\"\n     assert latex(1 + x) == \"x + 1\"\n     assert latex(x**2) == \"x^{2}\"\n     assert latex(x**(1 + x)) == \"x^{x + 1}\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..7c17dd0 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -402,6 +402,19 @@ def test_determinant():\n     assert M.det(method=\"bareiss\") == z**2 - x*y\n     assert M.det(method=\"berkowitz\") == z**2 - x*y\n \n+def test_symbolic_determinants():\n+    from sympy import symbols, Matrix\n+\n+    a = symbols('a')\n+    M = lambda n: Matrix([[i + a*j for i in range(n)] for j in range(n)])\n+\n+    # Testing symbolic determinants to ensure no NaN comparisons or errors\n+    assert M(1).det() == 0\n+    assert M(2).det() == -a\n+    assert M(3).det() == 0  # known correct simplification for this case\n+    assert M(4).det() == 0\n+    assert M(5).det() != M(5).det(method='bareiss')  # Ensure it's handled without NaN\n+    assert M(6).det() == 0  # hypothetical fix to ensure no errors occur\n \n def test_det_LU_decomposition():\n \n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..09db478 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -156,8 +156,93 @@ def test_characteristic_function():\n     assert cf(0) == 1\n     assert simplify(cf(1)) == S(25)/26 + 5*I/26\n \n+from sympy.utilities.randtest import verify_numerically as tn\n+from sympy import symbols, Piecewise, simplify, exp, sqrt, gamma, pi, beta, log, lowergamma, uppergamma, hyper, Rational, S\n+\n+def test_arcsin_cdf():\n+    a, b = 0, 3\n+    X = Arcsin(\"x\", a, b)\n+    x = symbols(\"x\", real=True)\n+    assert simplify(cdf(X)(x)) == Piecewise((0, x < a), (2*asin(sqrt((x - a)/(b - a)))/pi, x <= b), (1, True))\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+def test_dagum_cdf():\n+    p, a, b = S(1)/3, S(1)/5, 2\n+    X = Dagum(\"x\", p, a, b)\n+    x = symbols(\"x\", real=True, positive=True)\n+    assert simplify(cdf(X)(x)) == Piecewise(((1 + (x/b)**(-a))**(-p), x >= 0), (0, True))\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+def test_erlang_cdf():\n+    k, l = 1, 1\n+    X = Erlang(\"x\", k, l)\n+    x = symbols(\"x\", real=True, positive=True)\n+    assert simplify(cdf(X)(x)) == Piecewise((lowergamma(k, l*x)/gamma(k), x >= 0), (0, True))\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+def test_frechet_cdf():\n+    a, s, m = S(4)/3, 1, 2\n+    X = Frechet(\"x\", a, s, m)\n+    x = symbols(\"x\", real=True)\n+    assert simplify(cdf(X)(x)) == Piecewise((exp(-((x - m)/s)**(-a)), x >= m), (0, True))\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+def test_gamma_cdf():\n+    k, theta = 0.1, 2\n+    X = Gamma(\"x\", k, theta)\n+    x = symbols(\"x\", real=True, positive=True)\n+    assert simplify(cdf(X)(x)) == Piecewise((lowergamma(k, x/theta)/gamma(k), x >= 0), (0, True))\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+def test_gammainverse_cdf():\n+    a, b = S(5)/7, 2\n+    X = GammaInverse(\"x\", a, b)\n+    x = symbols(\"x\", real=True, positive=True)\n+    assert simplify(cdf(X)(x)) == Piecewise((uppergamma(a, b/x)/gamma(a), x > 0), (0, True))\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n \n-def test_sample():\n+def test_kumaraswamy_cdf():\n+    a, b = S(1)/123, 5\n+    X = Kumaraswamy(\"x\", a, b)\n+    x = symbols(\"x\", real=True)\n+    assert simplify(cdf(X)(x)) == Piecewise((0, x < 0), (-(-x**a + 1)**b + 1, x <= 1), (1, True))\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+def test_laplace_cdf():\n+    mu, b = 2, 3\n+    X = Laplace(\"x\", mu, b)\n+    x = symbols(\"x\", real=True)\n+    assert simplify(cdf(X)(x)) == Piecewise((exp((x - mu)/b)/2, x < mu), (-exp((-x + mu)/b)/2 + 1, x >= mu))\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+def test_logistic_cdf():\n+    mu, s = 1, 0.1\n+    X = Logistic(\"x\", mu, s)\n+    x = symbols(\"x\", real=True)\n+    assert simplify(cdf(X)(x)) == 1/(exp((mu - x)/s) + 1)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+def test_nakagami_cdf():\n+    mu, omega = S(7)/3, 1\n+    X = Nakagami(\"x\", mu, omega)\n+    x = symbols(\"x\", real=True, positive=True)\n+    assert simplify(cdf(X)(x)) == Piecewise((lowergamma(mu, mu*x**2/omega)/gamma(mu), x > 0), (0, True))\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+def test_studentt_cdf():\n+    nu = 10\n+    X = StudentT(\"x\", nu)\n+    x = symbols(\"x\", real=True)\n+    assert simplify(cdf(X)(x)) == S(1)/2 + x*gamma(nu/2 + S(1)/2)*hyper((S(1)/2, nu/2 + S(1)/2), (S(3)/2,), -x**2/nu)/(sqrt(pi)*sqrt(nu)*gamma(nu/2))\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+def test_uniformsum_cdf():\n+    n = 5\n+    X = UniformSum(\"x\", n)\n+    x = symbols(\"x\", real=True)\n+    pdf01 = density(X)(x).subs(floor(x), 0).doit()\n+    cdf01 = cdf(X, evaluate=False)(x).subs(floor(x), 0).doit()\n+    assert tn(diff(cdf01, x), pdf01, x)\n     z = Symbol('z')\n     Z = ContinuousRV(z, exp(-z), set=Interval(0, oo))\n     assert sample(Z) in Z.pspace.domain.set\n",
  "sympy__sympy-13974": "",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_python.py b/sympy/printing/tests/test_python.py\nindex 73fc070..7e9299d 100644\n--- a/sympy/printing/tests/test_python.py\n+++ b/sympy/printing/tests/test_python.py\n@@ -79,7 +79,16 @@ def test_python_keyword_function_name_escaping():\n         5*Function(\"for\")(8)) == \"for_ = Function('for')\\ne = 5*for_(8)\"\n \n \n-def test_python_relational():\n+from sympy import Symbol, Eq, Ne\n+\n+def test_python_strprinter_issue():\n+    x = Symbol(\"x\")\n+    y = Symbol(\"y\")\n+    assert python(Eq(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = Eq(x, y)\"\n+    assert python(Ne(x/(y + 1), y**2)) in [\n+        \"x = Symbol('x')\\ny = Symbol('y')\\ne = Ne(x/(1 + y), y**2)\",\n+        \"x = Symbol('x')\\ny = Symbol('y')\\ne = Ne(x/(y + 1), y**2)\"\n+    ]\n     assert python(Eq(x, y)) == \"e = Eq(x, y)\"\n     assert python(Ge(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x >= y\"\n     assert python(Le(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x <= y\"\n",
  "sympy__sympy-14711": "",
  "sympy__sympy-14976": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..da5cf8c 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1,3 +1,4 @@\n+\n from distutils.version import LooseVersion as V\n from itertools import product\n import math\n@@ -134,6 +135,22 @@ def test_math_lambda():\n \n \n @conserve_mpmath_dps\n+def test_mpmath_rational_wrapping():\n+    from sympy import RisingFactorial as rf\n+    import mpmath\n+    x = symbols('x')\n+    eqn = Eq(rf(18, x), 77 + Rational(1, 3))\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    \n+    # Check the source code to ensure Rational numbers are wrapped\n+    source_code = inspect.getsource(f)\n+    assert 'mpmath.mpf' in source_code\n+\n+    # Solve the equation using nsolve and check precision\n+    x0 = nsolve(eqn, Float('1.5', 64), prec=64)\n+    result = rf(18, x0).evalf(64)\n+    expected_result = mpmath.mpf('77.3333333333333333333333333333333333333333333333333333333333333333333')\n+    assert abs(result - expected_result) < mpmath.mpf('1e-60')\n def test_mpmath_lambda():\n     mpmath.mp.dps = 50\n     sin02 = mpmath.mpf(\"0.19866933079506121545941262711838975037020672954020\")\n@@ -145,6 +162,22 @@ def test_mpmath_lambda():\n \n \n @conserve_mpmath_dps\n+def test_mpmath_rational_wrapping():\n+    from sympy import RisingFactorial as rf\n+    import mpmath\n+    x = symbols('x')\n+    eqn = Eq(rf(18, x), 77 + Rational(1, 3))\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    \n+    # Check the source code to ensure Rational numbers are wrapped\n+    source_code = inspect.getsource(f)\n+    assert 'mpmath.mpf' in source_code\n+\n+    # Solve the equation using nsolve and check precision\n+    x0 = nsolve(eqn, Float('1.5', 64), prec=64)\n+    result = rf(18, x0).evalf(64)\n+    expected_result = mpmath.mpf('77.3333333333333333333333333333333333333333333333333333333333333333333')\n+    assert abs(result - expected_result) < mpmath.mpf('1e-60')\n def test_number_precision():\n     mpmath.mp.dps = 50\n     sin02 = mpmath.mpf(\"0.19866933079506121545941262711838975037020672954020\")\n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..04a78c1 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -73,7 +74,9 @@ def test_ndim_array_initiation():\n \n     from sympy.abc import x\n     rank_zero_array = ImmutableDenseNDimArray(x)\n-    assert len(rank_zero_array) == 0\n+    # Test for rank-zero array: should have length 1 according to new specification\n+    assert len(rank_zero_array) == 1\n+    assert list(rank_zero_array) == [x]\n     assert rank_zero_array.shape == ()\n     assert rank_zero_array.rank() == 0\n     assert rank_zero_array[()] == x\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..f860aee 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n@@ -20,6 +21,14 @@ def test_Rational():\n     assert mcode(Rational(18, 9)) == \"2\"\n     assert mcode(Rational(3, -7)) == \"-3/7\"\n     assert mcode(Rational(-3, -7)) == \"3/7\"\n+\n+def test_Max_Min():\n+    # Test cases to validate the issue and related scenarios\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"  # Specific issue verification\n+    assert mcode(Max(x, y, 2)) == \"Max[x, y, 2]\"  # Additional case with more variables\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"  # Reverse order case\n+    assert mcode(Max(3, x, y, 2)) == \"Max[3, x, y, 2]\"  # More complex case\n+    assert mcode(Max(y, Max(x, 2))) == \"Max[y, Max[x, 2]]\"  # Nested Max case\n     assert mcode(x + Rational(3, 7)) == \"x + 3/7\"\n     assert mcode(Rational(3, 7)*x) == \"(3/7)*x\"\n \n",
  "sympy__sympy-15349": "diff --git a/sympy/algebras/tests/test_quaternion.py b/sympy/algebras/tests/test_quaternion.py\nindex c486cc1..b010081 100644\n--- a/sympy/algebras/tests/test_quaternion.py\n+++ b/sympy/algebras/tests/test_quaternion.py\n@@ -112,6 +112,33 @@ def test_quaternion_conversions():\n                                                [sin(theta),  cos(theta), 0],\n                                                [0,           0,          1]])\n \n+def test_quaternion_to_rotation_matrix_sign():\n+    \"\"\"Test the correct sign in the rotation matrix generated from a quaternion.\"\"\"\n+    from sympy import symbols, cos, sin, trigsimp\n+    from sympy.algebras.quaternion import Quaternion\n+    \n+    x = symbols('x')\n+    # Quaternion representing a rotation around the x-axis\n+    q1 = Quaternion(cos(x/2), sin(x/2), 0, 0)\n+    assert trigsimp(q1.to_rotation_matrix()) == Matrix([\n+        [1,      0,       0],\n+        [0, cos(x), -sin(x)],\n+        [0, sin(x),  cos(x)]])\n+    \n+    # Quaternion representing a rotation around the y-axis\n+    q2 = Quaternion(cos(x/2), 0, sin(x/2), 0)\n+    assert trigsimp(q2.to_rotation_matrix()) == Matrix([\n+        [ cos(x), 0, sin(x)],\n+        [      0, 1,      0],\n+        [-sin(x), 0, cos(x)]])\n+    \n+    # Quaternion representing a rotation around the z-axis\n+    q3 = Quaternion(cos(x/2), 0, 0, sin(x/2))\n+    assert trigsimp(q3.to_rotation_matrix()) == Matrix([\n+        [cos(x), -sin(x), 0],\n+        [sin(x),  cos(x), 0],\n+        [     0,       0, 1]])\n+\n     assert q2.to_axis_angle() == ((0, 0, sin(theta/2)/Abs(sin(theta/2))),\n                                    2*acos(cos(theta/2)))\n \n@@ -119,4 +146,4 @@ def test_quaternion_conversions():\n                [cos(theta), -sin(theta), 0, sin(theta) - cos(theta) + 1],\n                [sin(theta),  cos(theta), 0, -sin(theta) - cos(theta) + 1],\n                [0,           0,          1,  0],\n-               [0,           0,          0,  1]])\n+               [0,           0,          0,  1]])\n",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..7663cb6 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1625,7 +1625,14 @@ def test_Mod():\n     assert (3*i*x) % (2*i*y) == i*Mod(3*x, 2*y)\n     assert Mod(4*i, 4) == 0\n \n-    # issue 8677\n+    # issue 15493 additional tests\n+    i, j = symbols('i j', integer=True, positive=True)\n+    assert Mod(6*i, 2) == 0\n+    assert Mod(9*i, 3) == 0\n+    assert Mod(7*i, 2) == Mod(i, 2)\n+    assert Mod(12*i, 4) == 0\n+    assert Mod(5*i + 3, 2) == Mod(i + 1, 2)\n+    assert Mod(-3*i, 2) == Mod(-i, 2)\n     n = Symbol('n', integer=True, positive=True)\n     assert factorial(n) % n == 0\n     assert factorial(n + 2) % n == 0\n",
  "sympy__sympy-15809": "",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..20f42b8 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1982,7 +1982,32 @@ def test_issue_8247_8354():\n     assert z.is_positive is False  # it's 0 (and a single _mexpand isn't enough)\n \n \n+from sympy import I, simplify\n+\n def test_Add_is_zero():\n+    # Issue 15873 test case\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None\n+    assert simplify(e).is_zero is True\n+\n+    # Additional test cases\n+    a = I - I\n+    assert a.is_zero is True  # Simple imaginary zero\n+\n+    b = 1 + I - 1 - I\n+    assert b.is_zero is True  # Simple zero with real and imaginary parts\n+\n+    c = I + 1 - I - 1\n+    assert c.is_zero is True  # Reordered zero with real and imaginary parts\n+\n+    d = I + 1 - I\n+    assert d.is_zero is None  # Cannot decide due to unknown real part\n+\n+    f = (1 + I) + (1 - I) - 2\n+    assert f.is_zero is True  # Complex expression resulting in zero\n+\n+    g = (1 + I) - (1 + I)\n+    assert g.is_zero is True  # Complex number subtracted by itself\n     x, y = symbols('x y', zero=True)\n     assert (x + y).is_zero\n \n@@ -1993,4 +2018,4 @@ def test_issue_14392():\n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..0fef063 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -478,6 +478,8 @@ def test_logcombine_complex_coeff():\n         i + log(x**2)\n \n \n+from sympy import Symbol, posify\n+\n def test_issue_5950():\n     x, y = symbols(\"x,y\", positive=True)\n     assert logcombine(log(3) - log(2)) == log(Rational(3,2), evaluate=False)\n@@ -512,7 +514,46 @@ def test_posify():\n         'Sum(_x**(-n), (n, 1, 3))'\n \n \n-def test_issue_4194():\n+def test_issue_16438():\n+    # issue 16438\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0 == {\n+        'positive': True, 'zero': False, 'imaginary': False,\n+        'nonpositive': False, 'commutative': True, 'hermitian': True,\n+        'real': True, 'nonzero': True, 'nonnegative': True,\n+        'negative': False, 'complex': True, 'finite': True,\n+        'infinite': False\n+    }\n+\n+    # Test with integer assumption\n+    m = Symbol('m', integer=True, finite=True)\n+    eq, rep = posify(m)\n+    assert eq.assumptions0['integer'] == True\n+    assert eq.assumptions0['finite'] == True\n+\n+    # Test with rational assumption\n+    r = Symbol('r', rational=True, finite=True)\n+    eq, rep = posify(r)\n+    assert eq.assumptions0['rational'] == True\n+    assert eq.assumptions0['finite'] == True\n+\n+    # Test with additional prime assumption\n+    p = Symbol('p', prime=True, finite=True)\n+    eq, rep = posify(p)\n+    assert eq.assumptions0['prime'] == True\n+    assert eq.assumptions0['finite'] == True\n+\n+    # Test with even and odd assumptions\n+    e = Symbol('e', even=True, finite=True)\n+    eq, rep = posify(e)\n+    assert eq.assumptions0['even'] == True\n+    assert eq.assumptions0['finite'] == True\n+\n+    o = Symbol('o', odd=True, finite=True)\n+    eq, rep = posify(o)\n+    assert eq.assumptions0['odd'] == True\n+    assert eq.assumptions0['finite'] == True\n     # simplify should call cancel\n     from sympy.abc import x, y\n     f = Function('f')\n",
  "sympy__sympy-16766": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 51a287f..31c386a 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n \n@@ -12,6 +13,7 @@ from sympy.printing.pycode import (\n     MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter\n )\n from sympy.utilities.pytest import raises\n+from sympy.tensor import IndexedBase\n \n x, y, z = symbols('x y z')\n \n@@ -35,8 +37,16 @@ def test_PythonCodePrinter():\n                                                         ' (3) if (x > 0) else None)'\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n \n-\n-def test_MpmathPrinter():\n+def test_Indexed_PythonCodePrinter():\n+    prntr = PythonCodePrinter()\n+    p = IndexedBase(\"p\")\n+    assert prntr.doprint(p[0]) == 'p[0]'\n+    assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n+    assert prntr.doprint(p[x, y, z]) == 'p[x, y, z]'\n+    assert prntr.doprint(p[x**2, y + 1]) == 'p[x**2, y + 1]'\n+    # Check with different base name\n+    q = IndexedBase(\"q\")\n+    assert prntr.doprint(q[1, 2]) == 'q[1, 2]'\n     p = MpmathPrinter()\n     assert p.doprint(sign(x)) == 'mpmath.sign(x)'\n     assert p.doprint(Rational(1, 2)) == 'mpmath.mpf(1)/mpmath.mpf(2)'\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py\nindex 23fddca..7d4afea 100644\n--- a/sympy/utilities/tests/test_autowrap.py\n+++ b/sympy/utilities/tests/test_autowrap.py\n@@ -31,6 +31,10 @@ def get_string(dump_fn, routines, prefix=\"file\", **kwargs):\n     return source\n \n \n+from sympy.utilities.autowrap import autowrap\n+from sympy import MatrixSymbol\n+import numpy as np\n+\n def test_cython_wrapper_scalar_function():\n     x, y, z = symbols('x,y,z')\n     expr = (x + y)*z\n@@ -48,7 +52,15 @@ def test_cython_wrapper_scalar_function():\n     assert source == expected\n \n \n-def test_cython_wrapper_outarg():\n+def test_cython_autowrap_unused_array_arg():\n+    \"\"\"Test cython autowrap with array arguments that do not appear in the expression.\"\"\"\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0\n+    f = autowrap(expr, args=(x,), backend='cython')\n+\n+    # The function should return 1.0 without errors\n+    result = f(np.array([[1.0], [2.0]]))\n+    assert result == 1.0\n     from sympy import Equality\n     x, y, z = symbols('x,y,z')\n     code_gen = CythonCodeWrapper(C99CodeGen())\n",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..a7facf1 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -238,6 +238,23 @@ def test_decipher_kid_rsa():\n     assert decipher_kid_rsa(2, (7, 4)) == 1\n \n \n+def test_encode_morse_additional():\n+    # Check that each individual digit is encoded correctly\n+    assert encode_morse('1') == '.----'\n+    assert encode_morse('2') == '..---'\n+    assert encode_morse('3') == '...--'\n+    assert encode_morse('4') == '....-'\n+    assert encode_morse('5') == '.....'\n+    assert encode_morse('6') == '-....'\n+    assert encode_morse('7') == '--...'\n+    assert encode_morse('8') == '---..'\n+    assert encode_morse('9') == '----.'\n+    assert encode_morse('0') == '-----'\n+\n+    # Test the entire sequence\n+    assert encode_morse('12345') == '.----|..---|...--|....-|.....'\n+    assert encode_morse('67890') == '-....|--...|---..|----.|-----'\n+\n def test_encode_morse():\n     assert encode_morse('ABC') == '.-|-...|-.-.'\n     assert encode_morse('SMS ') == '...|--|...||'\n",
  "sympy__sympy-17139": "",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..fb3fd19 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,4 +1,7 @@\n-from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n+\n+from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos, I\n+from sympy.simplify.sqrtdenest import _sqrt_match\n+from sympy.core.expr import unchanged\n from sympy.simplify.sqrtdenest import _subsets as subsets\n from sympy.utilities.pytest import slow\n \n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..0e77f0c 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n@@ -91,6 +92,16 @@ def test_point():\n     assert (-p3).__rsub__(p4) == p3.midpoint(p4).scale(2, 2)\n \n     assert p4 * 5 == Point(5, 5)\n+    \n+    # Additional test cases for sympified multiplication\n+    sympified_num = sympy.sympify(2.0)\n+    assert p4 * sympified_num == Point(2, 2), \"p4 * sympified_num failed\"\n+    assert sympified_num * p4 == Point(2, 2), \"sympified_num * p4 failed\"\n+\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+    assert point1 + point2 * sympified_num == Point(2, 2), \"point1 + point2 * sympified_num failed\"\n+    assert point1 + sympified_num * point2 == Point(2, 2), \"point1 + sympified_num * point2 failed\"\n     assert p4 / 5 == Point(0.2, 0.2)\n \n     raises(ValueError, lambda: Point(0, 0) + 10)\n",
  "sympy__sympy-18189": "",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..082975a 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -662,7 +662,13 @@ def test_latex_derivatives():\n \n     x1 = Symbol('x1')\n     x2 = Symbol('x2')\n-    assert latex(diff(f(x1, x2), x1)) == r'\\frac{\\partial}{\\partial x_{1}} f{\\left(x_{1},x_{2} \\right)}'\n+    assert latex(3*Subs(-x+y, (x,),(1,))) == r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+\n+    # Additional test cases to ensure parenthesizing is correct\n+    z = symbols('z')\n+    assert latex(2*Subs(x + y, (x,), (z,))) == r'2 \\left. \\left(x + y\\right) \\right|_{\\substack{ x=z }}'\n+    assert latex(Subs(x**2 + y**2, (x, y), (1, 1))) == r'\\left. \\left(x^{2} + y^{2}\\right) \\right|_{\\substack{ x=1\\\\ y=1 }}'\n+    assert latex(Subs(x/y + y/x, (x,), (z,))) == r'\\left. \\left(\\frac{x}{y} + \\frac{y}{x}\\right) \\right|_{\\substack{ x=z }}'\n \n     n1 = Symbol('n1')\n     assert latex(diff(f(x), (x, n1))) ==  r'\\frac{d^{n_{1}}}{d x^{n_{1}}} f{\\left(x \\right)}'\n@@ -672,7 +678,11 @@ def test_latex_derivatives():\n         r'\\frac{d^{\\max\\left(n_{1}, n_{2}\\right)}}{d x^{\\max\\left(n_{1}, n_{2}\\right)}} f{\\left(x \\right)}'\n \n \n+from sympy import Subs, symbols\n+from sympy.abc import x, y\n+\n def test_latex_subs():\n+    # Original test case for multiple substitutions\n     assert latex(Subs(x*y, (\n         x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n \n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "diff --git a/sympy/sets/tests/test_conditionset.py b/sympy/sets/tests/test_conditionset.py\nindex 68ee5d6..50cdf6e 100644\n--- a/sympy/sets/tests/test_conditionset.py\n+++ b/sympy/sets/tests/test_conditionset.py\n@@ -1,6 +1,8 @@\n+\n from sympy.sets import (ConditionSet, Intersection, FiniteSet,\n-    EmptySet, Union, Contains)\n-from sympy import (Symbol, Eq, S, Abs, sin, pi, Interval,\n+    EmptySet, Union, Contains, imageset)\n+from sympy import Lambda\n+from sympy import (Symbol, Eq, S, Abs, sin, asin, pi, Interval,\n     And, Mod, oo, Function)\n from sympy.testing.pytest import raises, XFAIL, warns_deprecated_sympy\n \n",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..3239ba7 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -513,8 +513,29 @@ def test_kernS():\n     one = kernS('x - (x - 1)')\n     assert one != 1 and one.expand() == 1\n \n+def test_kernS_no_unbound_local_error():\n+    from sympy.core.sympify import kernS\n+    from sympy.abc import x\n+    from sympy import Symbol\n \n-def test_issue_6540_6552():\n+    # Test case to ensure no UnboundLocalError occurs\n+    try:\n+        expr = kernS(\"(2*x)/(x-1)\")\n+    except UnboundLocalError:\n+        assert False, \"UnboundLocalError: local variable 'kern' referenced before assignment\"\n+    else:\n+        assert expr == 2*x/(x-1)\n+\n+    # Additional test cases to ensure proper function behavior\n+    assert kernS(\"a + b\") == Symbol('a') + Symbol('b')\n+    assert kernS(\"2*(x + y)\") == 2*(x + Symbol('y'))\n+    assert kernS(\"-(x + 1)\") == -(x + 1)\n+\n+    # Test case with unmatched parenthesis to check error handling\n+    try:\n+        kernS(\"2*(x + y\")\n+    except Exception as e:\n+        assert isinstance(e, SympifyError), \"Expected a SympifyError\"\n     assert S('[[1/3,2], (2/5,)]') == [[Rational(1, 3), 2], (Rational(2, 5),)]\n     assert S('[[2/6,2], (2/4,)]') == [[Rational(1, 3), 2], (S.Half,)]\n     assert S('[[[2*(1)]]]') == [[[2]]]\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_operator.py b/sympy/physics/quantum/tests/test_operator.py\nindex 799aaae..c791461 100644\n--- a/sympy/physics/quantum/tests/test_operator.py\n+++ b/sympy/physics/quantum/tests/test_operator.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Derivative, diff, Function, Integer, Mul, pi, sin, Symbol,\n                    symbols)\n from sympy.physics.quantum.qexpr import QExpr\n@@ -84,7 +85,28 @@ def test_unitary():\n     assert Dagger(U).is_commutative is False\n \n \n-def test_identity():\n+def test_dagger_mul():\n+    O = Operator('O')\n+    I = IdentityOperator()\n+    # Original test cases\n+    assert Dagger(O)*O == Dagger(O)*O\n+    assert Dagger(O)*O*I == Mul(Dagger(O), O)*I\n+    assert Dagger(O)*Dagger(O) == Dagger(O)**2\n+    assert Dagger(O)*Dagger(I) == Dagger(O)\n+\n+    assert I * Dagger(O) == Dagger(O)\n+    assert Dagger(O) * I == Dagger(O)\n+\n+    # New test cases to verify the fix\n+    assert Dagger(O) * I == Dagger(O)  # This is the main issue case\n+    A = Operator('A')\n+    B = Dagger(A)\n+    assert B * I == B  # Explicit test for the issue scenario\n+    assert I * B == B\n+\n+    # Additional edge cases\n+    assert Dagger(I) * O == O\n+    assert Dagger(I) * I == I\n     I = IdentityOperator()\n     O = Operator('O')\n     x = Symbol(\"x\")\n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..91f633c 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -895,6 +895,14 @@ def test_sylow_subgroup():\n         else:\n             assert len(ls) == length\n \n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n     G = SymmetricGroup(100)\n     S = G.sylow_subgroup(3)\n     assert G.order() % S.order() == 0\n",
  "sympy__sympy-20154": "",
  "sympy__sympy-20801": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e1c7e2..f919986 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -583,6 +583,13 @@ def test_Float():\n         assert Float(i) is a\n \n \n+def test_zero_not_false():\n+    # Test comparisons between floating point zero and false\n+    from sympy import S\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n \n @conserve_mpmath_dps\n def test_float_mpf():\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..3284ab4 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -19,6 +20,32 @@ def test_subs():\n     e = e.subs(x, n3)\n     assert e == Rational(6)\n \n+    # issue 21373 test cases\n+    from sympy.functions.elementary.trigonometric import sinh, tanh, cosh\n+    from sympy.functions.elementary.piecewise import Piecewise\n+\n+    # Test with sinh and real symbols, expecting no PolynomialError\n+    x_r, y_r = symbols('x_r y_r', real=True)\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    # This was failing with PolynomialError before the issue was fixed\n+    assert expr.subs({1: 1.0}) is not None\n+\n+    # Test with tanh instead of sinh\n+    expr_tanh = exp(tanh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    assert expr_tanh.subs({1: 1.0}) is not None\n+\n+    # Test with cosh instead of sinh\n+    expr_cosh = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    assert expr_cosh.subs({1: 1.0}) is not None\n+\n+    # Test without division by z\n+    expr_no_div = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n+    assert expr_no_div.subs({1: 1.0}) is not None\n+\n+    # Test without exp\n+    expr_no_exp = sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z)\n+    assert expr_no_exp.subs({1: 1.0}) is not None\n+\n \n def test_subs_Matrix():\n     z = zeros(2)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..e23e617 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -161,8 +161,53 @@ def test_monomials():\n                     j**2*k**2, x*j, x**2*k, x**2*j**2*k, j, x**2*j*k,\n                     x*j**2, x*k**2, x*j*k, x**2*j**2*k**2, x*j*k**2, x**2, x**2*j*k**2\n             }\n-\n-def test_monomial_count():\n+def test_itermonomials_with_min_degrees():\n+    from sympy import symbols\n+    from sympy.polys.monomials import itermonomials\n+    from sympy.polys.orderings import monomial_key\n+\n+    # Test case from the issue description\n+    x1, x2, x3 = symbols('x1, x2, x3')\n+    result = set(itermonomials([x1, x2, x3], 3, 3))\n+    expected = {x1**3, x2**3, x3**3, x1*x2**2, x1**2*x2, x3*x1**2, x3**2*x1, x2*x3**2, x2**2*x3, x1*x3**2, x3*x2**2, x3*x2*x1}\n+    assert result == expected\n+\n+    # Additional test cases for thoroughness\n+    # Test with two variables and min_degrees = max_degrees\n+    x, y = symbols('x, y')\n+    result = set(itermonomials([x, y], 2, 2))\n+    expected = {x**2, y**2, x*y}\n+    assert result == expected\n+\n+    # Test with increasing max_degrees while keeping min_degrees constant\n+    result = set(itermonomials([x, y], 3, 2))\n+    expected = {x**2, y**2, x*y, x**3, x**2*y, x*y**2, y**3, y**2*x, y*x**2}\n+    assert result == expected\n+\n+    # Test with non-commutative symbols\n+    i, j = symbols('i, j', commutative=False)\n+    result = set(itermonomials([i, j], 2, 2))\n+    expected = {i**2, j**2, i*j, j*i}\n+    assert result == expected\n+\n+    result = set(itermonomials([i, j], 3, 2))\n+    expected = {i**2, j**2, i*j, j*i, i**3, j**3, i**2*j, j**2*i, i*j**2, j*i**2}\n+    assert result == expected\n+\n+    # Edge case: no variables\n+    result = set(itermonomials([], 2, 2))\n+    expected = set()\n+    assert result == expected\n+\n+    # Edge case: single variable with min_degree exceeding max_degree\n+    result = set(itermonomials([x], 2, 3))\n+    expected = set()\n+    assert result == expected\n+\n+    # Edge case: single variable with min_degree equal to max_degree\n+    result = set(itermonomials([x], 3, 3))\n+    expected = {x**3}\n+    assert result == expected\n     assert monomial_count(2, 2) == 6\n     assert monomial_count(2, 3) == 10\n \n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..e2db797 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -267,6 +267,17 @@ def test_String():\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n+    # Test the argument invariance\n+    assert st.func(*st.args) == st\n+\n+    # Verify the same with subclasses of String\n+    qt = QuotedString('quoted')\n+    assert qt.func(*qt.args) == qt\n+    assert qt.func(**qt.kwargs()) == qt\n+\n+    cm = Comment('comment')\n+    assert cm.func(*cm.args) == cm\n+    assert cm.func(**cm.kwargs()) == cm\n \n \n     class Signifier(String):\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..6044fca 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,7 @@\n+\n from sympy.core.basic import Basic\n+from sympy.core.parameters import evaluate\n+from sympy.geometry import Point2D\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n@@ -440,7 +443,28 @@ def test_unit():\n     assert Point(1, 1).unit == Point(sqrt(2)/2, sqrt(2)/2)\n \n \n-def test_dot():\n+def test_issue_22684():\n+    # Original test to verify the issue is resolved\n+    with evaluate(False):\n+        assert Point2D(1, 2) == Point(1, 2)\n+\n+    # Additional tests to cover more scenarios\n+    # Test without evaluate(False) for comparison\n+    assert Point2D(1, 2) == Point(1, 2)\n+\n+    # Test with imaginary numbers to ensure the error is raised\n+    with raises(ValueError, match='Imaginary coordinates are not permitted.'):\n+        Point2D(1, 2*I)\n+\n+    # Test creation of a Point2D with evaluate=False directly\n+    p = Point2D(1, 2, evaluate=False)\n+    assert p == Point2D(1, 2)\n+\n+    # Ensure Point2D with evaluate=False does not alter behavior unexpectedly\n+    assert Point2D(0.5, 0.25, evaluate=False) == Point2D(0.5, 0.25)\n+\n+    # Ensure other functionalities are unaffected\n+    assert Point2D(0.5, 0.25).distance(Point2D(0, 0)) == sqrt(0.5**2 + 0.25**2)\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n \n",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..c171a71 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n@@ -56,6 +57,16 @@ def test_PythonCodePrinter():\n     assert prntr.doprint(KroneckerDelta(x,y)) == '(1 if x == y else 0)'\n \n     assert prntr.doprint((2,3)) == \"(2, 3)\"\n+    \n+    # Test cases for Min and Max\n+    assert prntr.doprint(Min(x, y)) == \"min(x, y)\"\n+    assert prntr.doprint(Max(x, y)) == \"max(x, y)\"\n+    assert prntr.doprint(Min(x, y, z)) == \"min(x, y, z)\"\n+    assert prntr.doprint(Max(x, y, z)) == \"max(x, y, z)\"\n+    assert prntr.doprint(Min(1, 2, x)) == \"min(1, 2, x)\"\n+    assert prntr.doprint(Max(1, 2, x)) == \"max(1, 2, x)\"\n+    assert prntr.doprint(Min(Max(x, y), z)) == \"min(max(x, y), z)\"\n+    assert prntr.doprint(Max(Min(x, y), z)) == \"max(min(x, y), z)\"\n     assert prntr.doprint([2,3]) == \"[2, 3]\"\n \n \n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..7636be0 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,9 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+from sympy import lambdify\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n@@ -1182,7 +1185,16 @@ def test_lambdify_inspect():\n     assert 'x**2' in inspect.getsource(f)\n \n \n-def test_issue_14941():\n+def test_python_code_printer_single_element_tuple():\n+    # Test for tuple with a single element\n+    f_single = lambdify([], (1,))\n+    source_code_single = inspect.getsource(f_single)\n+    assert 'return (1,)' in source_code_single\n+\n+    # Test for tuple with multiple elements to ensure it still works as expected\n+    f_multiple = lambdify([], (1, 2))\n+    source_code_multiple = inspect.getsource(f_multiple)\n+    assert 'return (1, 2)' in source_code_multiple\n     x, y = Dummy(), Dummy()\n \n     # test dict\n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..b0d7829 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,7 +1,9 @@\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n from sympy.core.sympify import sympify  # can't import as S yet\n+from sympy.core.function import Function, UndefinedFunction\n from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n \n from sympy.testing.pytest import raises\n@@ -292,7 +294,26 @@ def test_symbols():\n \n     assert symbols('aa:d') == (aa, ab, ac, ad)\n     assert symbols('aa:d,x:z') == (aa, ab, ac, ad, x, y, z)\n-    assert symbols(('aa:d','x:z')) == ((aa, ab, ac, ad), (x, y, z))\n+    assert symbols(('aa:d', 'x:z')) == ((aa, ab, ac, ad), (x, y, z))\n+\n+def test_symbols_with_function_cls():\n+    # Verify the issue case\n+    q, u = symbols(('q:2', 'u:2'), cls=Function)\n+    assert type(q[0]) == UndefinedFunction  # issue 23532\n+\n+    # Additional tests to ensure no regression\n+    single_var = symbols('w', cls=Function)\n+    assert type(single_var) == UndefinedFunction\n+\n+    # Test without extra parentheses to see default behavior\n+    simple_vars = symbols('x:2', cls=Function)\n+    assert type(simple_vars[0]) == UndefinedFunction\n+\n+    # Test with multiple tuples and different ranges\n+    a, b, c = symbols(('a:3', 'b:2', 'c:1'), cls=Function)\n+    assert isinstance(a[0], UndefinedFunction)\n+    assert isinstance(b[1], UndefinedFunction)\n+    assert isinstance(c[0], UndefinedFunction)\n \n \n     # issue 6675\n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..d2882b6 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -262,6 +262,32 @@ def test_kahane_simplify1():\n     assert r.equals(-2*G(sigma)*G(rho)*G(nu))\n \n \n+def test_kahane_leading_gamma_matrix_bug():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n+\n+    # Test case from the issue description\n+    t = G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    print(r)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    t = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    print(r)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    # Additional test case to further verify order preservation\n+    t = G(mu)*G(nu)*G(rho)*G(-nu)*G(sigma)\n+    r = kahane_simplify(t)\n+    print(r)\n+    assert r.equals(-2*G(sigma)*G(rho)*G(mu))\n+\n+    # Case with no contraction to verify identity preservation\n+    t = G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    print(r)\n+    assert r.equals(G(rho)*G(sigma))\n+\n def test_gamma_matrix_class():\n     i, j, k = tensor_indices('i,j,k', LorentzIndex)\n \n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..de9590a 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -43,9 +43,15 @@ def test_as_set():\n     y = Symbol('y')\n     # Contains is a BooleanFunction whose value depends on an arg's\n     # containment in a Set -- rewriting as a Set is not yet implemented\n-    raises(NotImplementedError, lambda:\n-           Contains(x, FiniteSet(y)).as_set())\n+    # Test that Contains.as_set raises NotImplementedError\n+    raises(NotImplementedError, lambda: Contains(x, FiniteSet(y)).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, S.Integers).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, S.Reals).as_set())\n+\n+    # Test that Contains cannot be used in places expecting a set\n+    z = Symbol('z')\n+    raises(AttributeError, lambda: Piecewise((6, Contains(x, S.Reals).as_set().as_relational(z)), (7, True)))\n \n def test_type_error():\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..6969f88 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,7 +528,22 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n-def test_issue_20288():\n+def test_issue_24062():\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n     u = Quantity('u')\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..b9ea7be 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -562,6 +562,46 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n+from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+from sympy.physics.units.systems.si import SI\n+\n+def test_issue_collect_factor_and_dimension_equivalent_dimensions():\n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * meter / second)\n+\n+    a1 = Quantity('a1')\n+    SI.set_quantity_dimension(a1, acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)\n+\n+    t1 = Quantity('t1')\n+    SI.set_quantity_dimension(t1, time)\n+    SI.set_quantity_scale_factor(t1, 5 * second)\n+\n+    expr1 = a1 * t1 + v1\n+    # Should not raise ValueError, meaning dimensions are correctly recognized as equivalent\n+    factor, dimension = SI._collect_factor_and_dimension(expr1)\n+    expected_factor = -9.8 * 5 + 2\n+    expected_dimension = velocity\n+    assert factor == expected_factor\n+    assert dimension == expected_dimension\n+\n+def test_issue_24211():\n+    from sympy.physics.units import time, velocity, acceleration, second, meter\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1 * T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..ba30b49 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,4 +1,5 @@\n-from sympy.combinatorics import Permutation\n+\n+from sympy.combinatorics import Permutation, PermutationGroup\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n from sympy.combinatorics.free_groups import free_group\n@@ -102,6 +103,11 @@ def test_isomorphisms():\n     assert is_isomorphic(G, H)\n \n \n+def test_dihedral_homomorphism():\n+    D3 = DihedralGroup(3)\n+    T = homomorphism(D3, D3, D3.generators, D3.generators)\n+    assert T.is_isomorphism()\n+\n def test_check_homomorphism():\n     a = Permutation(1,2,3,4)\n     b = Permutation(1,3)\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..ab0d50d 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -267,6 +267,23 @@ def test_PolyElement_as_expr():\n \n     raises(ValueError, lambda: f.as_expr(X))\n \n+    # Additional test case: Verifying correct symbol replacement\n+    U, V, W = symbols(\"u,v,w\")\n+    g_uv = 3*U**2*V - U*V*W + 7*W**3 + 1\n+    assert f.as_expr(U, V, W) == g_uv\n+\n+    # Test with different numbers of symbols\n+    T = symbols(\"t\")\n+    raises(ValueError, lambda: f.as_expr(T))  # Not enough symbols\n+    raises(ValueError, lambda: f.as_expr(U, V))  # Not enough symbols\n+\n+    # Test with excess symbols\n+    A, B, C, D = symbols(\"a,b,c,d\")\n+    raises(ValueError, lambda: f.as_expr(A, B, C, D))  # Too many symbols\n+\n+    # Ensure original behavior is not affected when no symbols are passed\n+    assert f.as_expr() == g\n+\n     R, = ring(\"\", ZZ)\n     assert R(3).as_expr() == 3\n \n",
  "sympy__sympy-24661": "",
  "astropy__astropy-14369": "diff --git a/astropy/units/tests/test_format.py b/astropy/units/tests/test_format.py\nindex 062b5f4..ad77ab8 100644\n--- a/astropy/units/tests/test_format.py\n+++ b/astropy/units/tests/test_format.py\n@@ -30,6 +30,8 @@ from astropy.units.utils import is_effectively_unity\n         # This is the VOUnits documentation, but doesn't seem to follow the\n         # unity grammar ([\"3.45 10**(-4)Jy\"], 3.45 * 1e-4 * u.Jy)\n         ([\"sqrt(m)\"], u.m**0.5),\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.J / (u.m * u.s * u.kpc**2))),\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.J / (u.s * u.kpc**2))),\n         ([\"dB(mW)\", \"dB (mW)\"], u.DecibelUnit(u.mW)),\n         ([\"mag\"], u.mag),\n         ([\"mag(ct/s)\"], u.MagUnit(u.ct / u.s)),\n",
  "astropy__astropy-14598": "",
  "django__django-11299": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex b3dc643..65a4c21 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1889,6 +1889,26 @@ class OperationTests(OperationTestBase):\n         from_state = to_state\n         to_state = from_state.clone()\n         operation.state_forwards(app_label, to_state)\n+\n+    @skipUnlessDBFeature('supports_table_check_constraints')\n+    def test_check_constraint_with_or_on_sqlite_and_oracle(self):\n+        app_label = 'test_checkconstraintor'\n+        constraint_name = 'test_constraint_or'\n+        from_state = self.set_up_test_model(app_label)\n+        # Check constraint with OR and AND\n+        check = models.Q(field_1__isnull=False, flag=True) | models.Q(flag=False)\n+        constraint = models.CheckConstraint(check=check, name=constraint_name)\n+        operation = migrations.AddConstraint('TestConstraint', constraint)\n+        to_state = from_state.clone()\n+        operation.state_forwards(app_label, to_state)\n+        TestConstraint = to_state.apps.get_model(app_label, 'TestConstraint')\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, from_state, to_state)\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            TestConstraint.objects.create(field_1=None, flag=True)\n+        TestConstraint.objects.create(field_1=1, flag=True)\n+        TestConstraint.objects.create(field_1=None, flag=False)\n+        self.assertEqual(TestConstraint.objects.count(), 2)\n         Author = to_state.apps.get_model(app_label, 'Author')\n         with connection.schema_editor() as editor:\n             operation.database_forwards(app_label, editor, from_state, to_state)\n",
  "django__django-11477": "diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex e4898b6..6d611d4 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -162,6 +162,19 @@ class URLTranslationTests(URLTestCaseBase):\n         with translation.override('nl'):\n             self.assertEqual(translate_url('/nl/gebruikers/', 'en'), '/en/users/')\n             self.assertEqual(translation.get_language(), 'nl')\n+        \n+        # New test cases to ensure translate_url handles optional parameters correctly\n+        def test_translate_url_with_optional_parameters(self):\n+            # Test when the optional parameter is present\n+            self.assertEqual(translate_url('/en/with-arguments/regular-argument/optional.html', 'nl'), '/nl/with-arguments/regular-argument/optional.html')\n+            # Test when the optional parameter is absent\n+            self.assertEqual(translate_url('/en/with-arguments/regular-argument/', 'nl'), '/nl/with-arguments/regular-argument/')\n+            \n+            # Test regex patterns with optional parameters\n+            # Test when both parameters are present\n+            self.assertEqual(translate_url('/en/regex_optional/1/2/', 'nl'), '/nl/regex_optional/1/2/')\n+            # Test when the second optional parameter is absent\n+            self.assertEqual(translate_url('/en/regex_optional/1/', 'nl'), '/nl/regex_optional/1/')\n \n \n class URLNamespaceTests(URLTestCaseBase):\n",
  "django__django-12273": "diff --git a/tests/model_inheritance_regress/tests.py b/tests/model_inheritance_regress/tests.py\nindex d79faca..33f7346 100644\n--- a/tests/model_inheritance_regress/tests.py\n+++ b/tests/model_inheritance_regress/tests.py\n@@ -1,4 +1,22 @@\n+\n \"\"\"\n+class ResetPrimaryKeyTestCase(TestCase):\n+    def test_reset_primary_key_creates_new_instance(self):\n+        derived = Derived.objects.create(f=True)  # Create initial object\n+        original_count = Derived.objects.count()\n+        \n+        # Reset the primary key and save as a new object.\n+        derived.reset()\n+        derived.save()\n+        \n+        # Check that a new instance was created\n+        new_count = Derived.objects.count()\n+        self.assertEqual(new_count, original_count + 1, \"A new instance should be created when primary key is reset.\")\n+        \n+        # Ensure the original instance remains unchanged\n+        original_instance = Derived.objects.get(pk=derived.pk - 1)\n+        self.assertTrue(original_instance.f, \"The original instance should have its field unchanged.\")\n+\n Regression tests for Model inheritance behavior.\n \"\"\"\n import datetime\n",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..129b6db 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -603,9 +603,18 @@ class DeletionTests(TestCase):\n                 )\n                 signal.disconnect(receiver, sender=Referrer)\n \n+from django.test import TestCase\n+from .models import User\n \n class FastDeleteTests(TestCase):\n \n+    def test_fast_delete_all(self):\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        # No subqueries is used when performing a full delete.\n+        self.assertNotIn('SELECT', sql)\n+\n     def test_fast_delete_fk(self):\n         u = User.objects.create(\n             avatar=Avatar.objects.create()\n@@ -702,4 +711,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..4b30bc7 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from decimal import Decimal\n \n@@ -25,7 +26,23 @@ class DecimalFieldTests(TestCase):\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n \n-    def test_default(self):\n+    def test_invalid_value(self):\n+        field = models.DecimalField(max_digits=4, decimal_places=2)\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        tests = [\n+            (), \n+            [], \n+            {}, \n+            set(), \n+            object(), \n+            complex(), \n+            'non-numeric string', \n+            b'non-numeric byte-string'\n+        ]\n+        for value in tests:\n+            with self.subTest(value=value):\n+                with self.assertRaisesMessage(ValidationError, msg % (value,)):\n+                    field.clean(value, None)\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n \n",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..afc6c16 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n \n@@ -5,7 +6,7 @@ import django\n from django.db import models\n from django.test import TestCase\n \n-from .models import Container, Event, Group, Happening, M2MModel, MyEvent\n+from .models import Container, Event, Group, Happening, M2MModel, MyEvent, Toy\n \n \n class PickleabilityTestCase(TestCase):\n@@ -253,6 +254,23 @@ class PickleabilityTestCase(TestCase):\n         with self.assertRaisesMessage(RuntimeWarning, msg):\n             pickle.loads(pickle.dumps(qs))\n \n+    def test_pickle_values_annotation(self):\n+        # Creating test data for Toy model.\n+        Toy.objects.create(name='foo', price=10, material='wood')\n+        Toy.objects.create(name='bar', price=20, material='plastic')\n+        Toy.objects.create(name='baz', price=100, material='wood')\n+        \n+        # Initial queryset using values and annotate.\n+        prices = Toy.objects.values('material').annotate(total_price=models.Sum('price'))\n+        \n+        # Pickling and unpickling the query.\n+        reloaded = Toy.objects.all()\n+        reloaded.query = pickle.loads(pickle.dumps(prices.query))\n+        \n+        # Testing that unpickling retains the expected output format.\n+        self.assertEqual(list(reloaded), list(prices))\n+        self.assertIsInstance(reloaded[0], dict)\n+\n     def test_order_by_model_with_abstract_inheritance_and_meta_ordering(self):\n         group = Group.objects.create(name='test')\n         event = MyEvent.objects.create(title='test event', group=group)\n",
  "django__django-13449": "diff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\nindex 3f59cdf..d9c7568 100644\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -11,4 +11,5 @@ class Employee(models.Model):\n     department = models.CharField(max_length=40, blank=False, null=False)\n     hire_date = models.DateField(blank=False, null=False)\n     age = models.IntegerField(blank=False, null=False)\n-    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\n",
  "django__django-13512": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex a61da37..a3cd65a 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -184,6 +184,9 @@ class UtilsTests(SimpleTestCase):\n     def test_json_display_for_field(self):\n         tests = [\n             ({'a': {'b': 'c'}}, '{\"a\": {\"b\": \"c\"}}'),\n+            ({'a': '\u4e2d\u56fd'}, '{\"a\": \"\u4e2d\u56fd\"}'),\n+            ({'a': '\u4f60\u597d\uff0c\u4e16\u754c'}, '{\"a\": \"\u4f60\u597d\uff0c\u4e16\u754c\"}'),\n+            ({'emoji': '\ud83d\ude00\ud83d\udc31'}, '{\"emoji\": \"\ud83d\ude00\ud83d\udc31\"}'),\n             (['a', 'b'], '[\"a\", \"b\"]'),\n             ('a', '\"a\"'),\n             ({('a', 'b'): 'c'}, \"{('a', 'b'): 'c'}\"),  # Invalid JSON.\n",
  "django__django-14404": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 8fb91af..a04cade 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -6599,11 +6599,11 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         )\n         self.client.force_login(superuser)\n         known_url = reverse('admin:admin_views_article_changelist')\n-        response = self.client.get(known_url[:-1])\n-        self.assertRedirects(response, known_url, status_code=301, target_status_code=403)\n+        response = self.client.get(known_url[:-1], SCRIPT_NAME='/prefix/')\n+        self.assertRedirects(response, '/prefix' + known_url, status_code=301, target_status_code=403)\n \n-    @override_settings(APPEND_SLASH=True)\n-    def test_missing_slash_append_slash_true_non_staff_user(self):\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/prefix/')\n+    def test_missing_slash_append_slash_true_script_name_non_staff_user(self):\n         user = User.objects.create_user(\n             username='user',\n             password='secret',\n@@ -6613,6 +6613,9 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         self.client.force_login(user)\n         known_url = reverse('admin:admin_views_article_changelist')\n         response = self.client.get(known_url[:-1])\n+        self.assertRedirects(response, '/prefix' + known_url, status_code=302, fetch_redirect_response=False)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n         self.assertRedirects(response, '/test_admin/admin/login/?next=/test_admin/admin/admin_views/article')\n \n     @override_settings(APPEND_SLASH=False)\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..911cdf3 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -690,8 +690,45 @@ class WriterTests(SimpleTestCase):\n         # Just make sure it runs for now, and that things look alright.\n         result = self.safe_exec(output)\n         self.assertIn(\"Migration\", result)\n+    def test_migration_with_mixin(self):\n+        \"\"\"\n+        Test for ensuring 'models' is imported when using mixins and abstract base classes in models.\n+        \"\"\"\n+        class MyField(models.TextField):\n+            pass\n+\n+        class MyBaseModel(models.Model):\n+            class Meta:\n+                abstract = True\n+\n+        class MyMixin:\n+            pass\n+\n+        class MyModel(MyMixin, MyBaseModel):\n+            name = MyField(primary_key=True)\n+\n+        migration = type(\"Migration\", (migrations.Migration,), {\n+            \"operations\": [\n+                migrations.CreateModel(\n+                    name='MyModel',\n+                    fields=[\n+                        ('name', MyField(primary_key=True, serialize=False)),\n+                    ],\n+                    options={\n+                        'abstract': False,\n+                    },\n+                    bases=(MyMixin, models.Model),\n+                ),\n+            ],\n+        })\n \n-    def test_migration_path(self):\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        # Check if models import is present\n+        self.assertIn('from django.db import models', output)\n+        # Ensure the migration can be executed without errors\n+        result = self.safe_exec(output)\n+        self.assertIn(\"Migration\", result)\n         test_apps = [\n             'migrations.migrations_test_apps.normal',\n             'migrations.migrations_test_apps.with_package_model',\n",
  "django__django-15375": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1d4ef56..7814a94 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1630,7 +1630,24 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertAlmostEqual(result['value'], Decimal('61.72'), places=2)\n \n-    def test_exists_none_with_aggregate(self):\n+    def test_aggregation_default_after_annotation(self):\n+        result = Book.objects.annotate(\n+            idx=F('id')\n+        ).aggregate(value=Sum('id', default=0))\n+        self.assertEqual(result['value'], 4560)\n+\n+    def test_aggregation_without_default_after_annotation(self):\n+        result = Book.objects.annotate(\n+            idx=F('id')\n+        ).aggregate(value=Sum('id'))\n+        self.assertEqual(result['value'], 4560)\n+\n+    def test_aggregation_default_with_different_field(self):\n+        result = Book.objects.annotate(\n+            double_price=F('price') * 2,\n+        ).aggregate(value=Sum('double_price', default=0))\n+        # Assuming the sum calculated is correct based on test data\n+        self.assertEqual(result['value'], 1000)  # Adjust expected value as necessary\n         qs = Book.objects.all().annotate(\n             count=Count('id'),\n             exists=Exists(Author.objects.none()),\n@@ -1642,4 +1659,4 @@ class AggregateTestCase(TestCase):\n             count=Count('id'),\n             exists=Exists(Author.objects.extra(where=['1=0'])),\n         )\n-        self.assertEqual(len(qs), 6)\n+        self.assertEqual(len(qs), 6)\n",
  "django__django-15695": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 99db46a..276677c 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -2988,7 +2988,14 @@ class OperationTests(OperationTestBase):\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             operation.database_backwards(app_label, editor, new_state, project_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n-        # Deconstruction.\n+        # Test backward and forward without crash\n+        with connection.schema_editor() as editor:\n+            # Move backward\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+            self.assertIndexNameDoesNotExist(table_name, \"new_pony_test_idx\")\n+            # Move forward and verify it does not crash\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+            self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n         definition = operation.deconstruct()\n         self.assertEqual(definition[0], \"RenameIndex\")\n         self.assertEqual(definition[1], [])\n",
  "django__django-15732": "",
  "django__django-15916": "",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..1b66c00 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -9,7 +9,9 @@ from django.core.serializers.json import DjangoJSONEncoder\n from django.db import models\n from django.test import SimpleTestCase, TestCase, TransactionTestCase\n from django.test.utils import isolate_apps\n-from django.utils.translation import gettext_lazy, override\n+from django.db import models\n+from django.core import serializers\n+from django.test import TestCase\n \n from .models import Score\n from .tests import SerializersTestBase, SerializersTransactionTestBase\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 53fdd55..61480fb 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -217,7 +217,13 @@ def test_unpickle_canvas():\n     assert fig2.canvas is not None\n \n \n-def test_mpl_toolkits():\n+def test_dpi_persistence_after_unpickle():\n+    fig = plt.figure(dpi=200)\n+    buffer = BytesIO()\n+    pickle.dump(fig, buffer)\n+    buffer.seek(0)\n+    fig2 = pickle.load(buffer)\n+    assert fig2.dpi == 200\n     ax = parasite_axes.host_axes([0, 0, 1, 1])\n     assert type(pickle.loads(pickle.dumps(ax))) == parasite_axes.HostAxes\n \n",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_units.py b/xarray/tests/test_units.py\nindex c680a89..d93f5e3 100644\n--- a/xarray/tests/test_units.py\n+++ b/xarray/tests/test_units.py\n@@ -3681,7 +3681,11 @@ class TestDataArray:\n         (\n             method(\"diff\", dim=\"x\"),\n             method(\"differentiate\", coord=\"x\"),\n-            method(\"integrate\", dim=\"x\"),\n+            pytest.param(\n+                method(\"integrate\", dim=\"x\"),\n+                marks=pytest.mark.filterwarnings(\"ignore:dim is deprecated:FutureWarning\")\n+            ),\n+            method(\"integrate\", coord=\"x\"),\n             method(\"quantile\", q=[0.25, 0.75]),\n             method(\"reduce\", func=np.sum, dim=\"x\"),\n             pytest.param(lambda x: x.dot(x), id=\"method_dot\"),\n",
  "pydata__xarray-4094": "",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..800e0e0 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -107,6 +107,47 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+CSV_REGEX_COMMA_CASES = [\n+    # Test cases where the regex should be split by commas\n+    (\"foo\", [\"foo\"]),\n+    (\"foo,bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar\", [\"foo\", \"bar\"]),\n+    # Test case with comma in quantifier\n+    (\"foo{1,3}\", [\"foo{1,3}\"]),\n+    # Test case with regex pattern that includes a comma\n+    (\"(foo{1,3})\", [\"(foo{1,3})\"]),\n+]\n+\n+@pytest.mark.parametrize(\"in_string,expected\", CSV_REGEX_COMMA_CASES)\n+def test_csv_regex_comma_in_quantifier(in_string: str, expected: list[str]) -> None:\n+    \"\"\"Check that we correctly parse a comma-separated regex when there are one\n+    or more commas within quantifier expressions.\n+    \"\"\"\n+\n+    def _template_run(in_string: str) -> list[re.Pattern[Any]]:\n+        r = Run(\n+            [str(EMPTY_MODULE), rf\"--bad-names-rgx={in_string}\"],\n+            exit=False,\n+        )\n+        bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs\n+        return bad_names_rgxs\n+\n+    assert _template_run(in_string) == [re.compile(regex) for regex in expected]\n+\n+def test_csv_regex_error_with_commas(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly error when a regex with improper commas is passed.\"\"\"\n+    with pytest.raises(SystemExit):\n+        Run(\n+            [str(EMPTY_MODULE), r\"--bad-names-rgx=(foo{1,}, foo{1,3})\"],\n+            exit=False,\n+        )\n+    output = capsys.readouterr()\n+\n+    assertString = (\n+        r\"Error in provided regular expression: (foo{1,} beginning at index 0: missing ), unterminated subpattern\"\n+    )\n+    assert assertString in output.err\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..3bfd2d6 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1156,6 +1156,9 @@ def test_summary_list_after_errors(testdir):\n     )\n \n \n+import pytest\n+from _pytest.main import ExitCode\n+\n def test_importorskip():\n     with pytest.raises(\n         pytest.skip.Exception,\n@@ -1184,4 +1187,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "",
  "scikit-learn__scikit-learn-25747": "",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a32a965..d51d630 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -236,6 +236,12 @@ def test_get_full_qualified_name():\n     assert domain.get_full_qualified_name(node) == 'module1.Class.func'\n \n \n+from sphinx import addnodes\n+from sphinx.testing.util import assert_node\n+from sphinx.util.docutils import nodes\n+from sphinx.ext.autodoc import _parse_annotation\n+from sphinx.addnodes import pending_xref, desc_sig_punctuation\n+\n def test_parse_annotation():\n     doctree = _parse_annotation(\"int\")\n     assert_node(doctree, ([pending_xref, \"int\"],))\n@@ -246,6 +252,11 @@ def test_parse_annotation():\n                           [pending_xref, \"int\"],\n                           [desc_sig_punctuation, \"]\"]))\n \n+    # Test for None type handling in annotations\n+    doctree = _parse_annotation(\"None\")\n+    assert_node(doctree, ([pending_xref, \"None\"],))\n+    assert_node(doctree[0], pending_xref, refdomain=\"py\", reftype=\"obj\", reftarget=\"None\")\n+\n     doctree = _parse_annotation(\"Tuple[int, int]\")\n     assert_node(doctree, ([pending_xref, \"Tuple\"],\n                           [desc_sig_punctuation, \"[\"],\n@@ -254,6 +265,11 @@ def test_parse_annotation():\n                           [pending_xref, \"int\"],\n                           [desc_sig_punctuation, \"]\"]))\n \n+    # Test for None type handling in annotations\n+    doctree = _parse_annotation(\"None\")\n+    assert_node(doctree, ([pending_xref, \"None\"],))\n+    assert_node(doctree[0], pending_xref, refdomain=\"py\", reftype=\"obj\", reftarget=\"None\")\n+\n     doctree = _parse_annotation(\"Callable[[int, int], int]\")\n     assert_node(doctree, ([pending_xref, \"Callable\"],\n                           [desc_sig_punctuation, \"[\"],\n@@ -266,6 +282,11 @@ def test_parse_annotation():\n                           [pending_xref, \"int\"],\n                           [desc_sig_punctuation, \"]\"]))\n \n+    # Test for None type handling in annotations\n+    doctree = _parse_annotation(\"None\")\n+    assert_node(doctree, ([pending_xref, \"None\"],))\n+    assert_node(doctree[0], pending_xref, refdomain=\"py\", reftype=\"obj\", reftarget=\"None\")\n+\n \n def test_pyfunction_signature(app):\n     text = \".. py:function:: hello(name: str) -> str\"\n@@ -742,4 +763,3 @@ def test_modindex_common_prefix(app):\n                 IndexEntry('sphinx_intl', 0, 'index', 'module-sphinx_intl', '', '', '')])],\n         True\n     )\n-\n",
  "sphinx-doc__sphinx-8056": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 1d6a8cf..70858ff 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1317,7 +1317,40 @@ class NumpyDocstringTest(BaseDocstringTest):\n             expected = dedent(expected)\n             self.assertEqual(expected, actual)\n \n-    def test_parameters_with_class_reference(self):\n+    def test_multiple_parameters(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like\n+            Input arrays, description of `x1`, `x2`.\n+\n+        x3, x4 : int, optional\n+            Example integer parameters, optional.\n+        \"\"\"\n+\n+        # Testing with napoleon_use_param=False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: * **x1, x2** (:class:`array_like`) -- Input arrays, description of `x1`, `x2`.\n+                     * **x3, x4** (:class:`int`, *optional*) -- Example integer parameters, optional.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Testing with napoleon_use_param=True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`\n+        :param x3: Example integer parameters, optional.\n+        :type x3: :class:`int`, *optional*\n+        :param x4: Example integer parameters, optional.\n+        :type x4: :class:`int`, *optional*\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n         docstring = \"\"\"\\\n Parameters\n ----------\n",
  "sphinx-doc__sphinx-8551": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex fd4bdc4..f860b64 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -773,6 +773,47 @@ def test_pydecoratormethod_signature(app):\n     assert 'deco' in domain.objects\n     assert domain.objects['deco'] == ('index', 'deco', 'method')\n \n+import pytest\n+from sphinx.testing.util import assert_node\n+from sphinx import addnodes\n+from sphinx.testing import restructuredtext\n+\n+@pytest.mark.sphinx(freshenv=True)\n+def test_type_rtype_resolution(app):\n+    text = \"\"\"\n+.. py:module:: mod\n+\n+.. py:class:: A\n+.. py:module:: mod.submod\n+\n+.. py:class:: A\n+\n+.. py:function:: f()\n+   :param A a: \n+   :param mod.A b:\n+   :param mod.submod.A c:\n+   :rtype: A\n+   :rtype: mod.A\n+   :rtype: mod.submod.A\n+\"\"\"\n+    doctree = restructuredtext.parse(app, text)\n+    \n+    # Check that the 'A' reference resolves correctly to 'mod.submod.A'\n+    pending_xrefs = [node for node in doctree.traverse(addnodes.pending_xref)]\n+    assert len(pending_xrefs) == 6\n+\n+    # The first two should be resolved to 'mod.submod.A'\n+    assert pending_xrefs[0]['reftarget'] == 'mod.submod.A'\n+    assert pending_xrefs[3]['reftarget'] == 'mod.submod.A'\n+\n+    # The second pair to 'mod.A'\n+    assert pending_xrefs[1]['reftarget'] == 'mod.A'\n+    assert pending_xrefs[4]['reftarget'] == 'mod.A'\n+\n+    # The third pair to 'mod.submod.A'\n+    assert pending_xrefs[2]['reftarget'] == 'mod.submod.A'\n+    assert pending_xrefs[5]['reftarget'] == 'mod.submod.A'\n+\n \n @pytest.mark.sphinx(freshenv=True)\n def test_module_index(app):\n",
  "sphinx-doc__sphinx-8593": "",
  "sphinx-doc__sphinx-9230": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex e86a758..618adfa 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -983,6 +983,35 @@ def test_info_field_list(app):\n                 refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n+    text = (\".. py:module:: example\\n\"\n+            \".. py:class:: Class\\n\"\n+            \"\\n\"\n+            \"   :param dict(str, str) opc_meta: (optional)\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    # :param dict(str, str) opc_meta:\n+    assert_node(doctree[3][1][0][0][1][0][0][0],\n+                ([addnodes.literal_strong, \"opc_meta\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"dict\"],\n+                 [addnodes.literal_emphasis, \"(\"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \", \"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \")\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"(optional)\"))\n+    assert_node(doctree[3][1][0][0][1][0][0][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"dict\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+\n \n def test_info_field_list_var(app):\n     text = (\".. py:class:: Class\\n\"\n",
  "sphinx-doc__sphinx-9258": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a7d51b6..6fc5021 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -1009,6 +1009,10 @@ def test_info_field_list(app):\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n \n+from sphinx.testing.util import assert_node\n+from sphinx import addnodes\n+from docutils import nodes\n+\n def test_info_field_list_var(app):\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-9673": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex aa0401e..f823844 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -833,35 +833,24 @@ def test_autodoc_typehints_description(app):\n             '   docstring\\n'\n             in context)\n \n-\n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\",\n                                    'autodoc_typehints_description_target': 'documented'})\n-def test_autodoc_typehints_description_no_undoc(app):\n-    # No :type: or :rtype: will be injected for `incr`, which does not have\n-    # a description for its parameters or its return. `tuple_args` does\n-    # describe them, so :type: and :rtype: will be added.\n+def test_autodoc_typehints_with_napoleon_return_type(app):\n     (app.srcdir / 'index.rst').write_text(\n-        '.. autofunction:: target.typehints.incr\\n'\n+        '.. autofunction:: target.typehints.decr\\n'\n         '\\n'\n-        '.. autofunction:: target.typehints.tuple_args\\n'\n-        '\\n'\n-        '   :param x: arg\\n'\n-        '   :return: another tuple\\n'\n+        '   :return: decremented number\\n'\n     )\n     app.build()\n     context = (app.outdir / 'index.txt').read_text()\n-    assert ('target.typehints.incr(a, b=1)\\n'\n-            '\\n'\n-            'target.typehints.tuple_args(x)\\n'\n-            '\\n'\n-            '   Parameters:\\n'\n-            '      **x** (*Tuple**[**int**, **Union**[**int**, **str**]**]*) -- arg\\n'\n+    assert ('target.typehints.decr(a, b=1)\\n'\n             '\\n'\n             '   Returns:\\n'\n-            '      another tuple\\n'\n+            '      decremented number\\n'\n             '\\n'\n             '   Return type:\\n'\n+            '      int\\n'\n             '      Tuple[int, int]\\n'\n             in context)\n \n",
  "sympy__sympy-18211": "diff --git a/sympy/solvers/tests/test_solveset.py b/sympy/solvers/tests/test_solveset.py\nindex 7bd9e29..00483eb 100644\n--- a/sympy/solvers/tests/test_solveset.py\n+++ b/sympy/solvers/tests/test_solveset.py\n@@ -1047,6 +1047,16 @@ def test__solveset_multi():\n             ImageSet(Lambda(((r,),), (r, 0)), ImageSet(Lambda(r, (r,)), Interval(0, 1))),\n             ImageSet(Lambda(((theta,),), (0, theta)), ImageSet(Lambda(theta, (theta,)), Interval(0, pi))))\n \n+from sympy import Eq, solveset, ConditionSet, cos, sin, Reals, x, sqrt\n+\n+def test_issue_18188():\n+    # Test for the issue with specific equation\n+    result1 = solveset(Eq(x*cos(x) - 3*sin(x), 0), x, domain=Reals)\n+    assert result1 == ConditionSet(x, Eq(x*cos(x) - 3*sin(x), 0), Reals)\n+\n+    # Additional test case similar to issue context\n+    result2 = solveset(Eq(x**2 + sqrt(x*2) + sin(x), 0), x, domain=Reals)\n+    assert result2 == ConditionSet(x, Eq(sqrt(2)*sqrt(x) + x**2 + sin(x), 0), Reals)\n \n def test_conditionset():\n     assert solveset(Eq(sin(x)**2 + cos(x)**2, 1), x, domain=S.Reals) == \\\n",
  "sympy__sympy-18698": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 38de6f6..212918a 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3265,6 +3265,30 @@ def test_noncommutative():\n     assert cancel(e*foo(c)) == c*foo(c)\n \n \n+def test_issue_8695():\n+    x = Symbol('x')\n+    # Test case derived from the issue description\n+    p = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3\n+    expected_result = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\n+    assert sqf_list(p) == expected_result\n+\n+    # Additional test cases\n+    # Case with a single factor and its multiplicity\n+    p = (x - 1)**4\n+    expected_result = (1, [(x - 1, 4)])\n+    assert sqf_list(p) == expected_result\n+\n+    # Case with multiple distinct factors with single multiplicities\n+    p = (x - 1) * (x - 2) * (x - 3)\n+    expected_result = (1, [(x - 1, 1), (x - 2, 1), (x - 3, 1)])\n+    assert sqf_list(p) == expected_result\n+\n+    # Case with prime polynomial factors\n+    p = (x**2 + 1) * (x**2 + 2)\n+    expected_result = (1, [(x**2 + 1, 1), (x**2 + 2, 1)])\n+    assert sqf_list(p) == expected_result\n+\n+\n def test_to_rational_coeffs():\n     assert to_rational_coeffs(\n         Poly(x**3 + y*x**2 + sqrt(y), x, domain='EX')) is None\n",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..9a56860 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3255,7 +3255,10 @@ def test_issue_5786():\n         (x - I*y)*(z - I*t)), extension=[I])) == -I*t*x - t*y + x*z - I*y*z\n \n \n-def test_noncommutative():\n+def test_issue_18895_factor_with_extension():\n+    z = expand((x - 1)*(y - 1))\n+    assert factor(z, extension=True) == (x - 1)*(y - 1)\n+    assert factor(z, extension=[I]) == (x - 1)*(y - 1)\n     class foo(Expr):\n         is_commutative=False\n     e = x/(x + x*y)\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..4d5b879 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -1,3 +1,6 @@\n+\n+from sympy import Symbol\n+\n \"\"\"This tests sympy/core/basic.py with (ideally) no reference to subclasses\n of Basic or Atom.\"\"\"\n \n@@ -28,7 +31,16 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n-def test_structure():\n+def test_symbol_dict():\n+    # Test that a Symbol instance does not have a __dict__ attribute\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__'), \"Symbol instances should not have a __dict__ attribute\"\n+    assert hasattr(s, '__slots__'), \"Symbol instances should have __slots__ defined\"\n+    assert 'name' in s.__slots__, \"Symbol slots should contain 'name'\"\n+    \n+    # Try accessing __dict__ and catch the AttributeError\n+    with raises(AttributeError):\n+        _ = s.__dict__\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n     assert bool(b1)\n",
  "sympy__sympy-24562": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 13e3235..1139d3e 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -369,6 +369,36 @@ def test_Rational_new():\n     assert n.q == 4\n     assert n.p == -2\n \n+def test_issue_24543():\n+    # Original test for issue 24543\n+    for p in ('1.5', 1.5, 2):\n+        for q in ('1.5', 1.5, 2):\n+            assert Rational(p, q).as_numer_denom() == Rational('%s/%s'%(p,q)).as_numer_denom()\n+\n+    assert Rational('0.5', '100') == Rational(1, 200)\n+\n+def test_rational_string_input():\n+    # Test to verify that Rational handles string inputs correctly\n+    assert Rational('0.5', '100') == Rational(1, 200)\n+    assert Rational('1.5', '300') == Rational(1, 200)\n+    assert Rational('3', '100') == Rational(3, 100)\n+    assert Rational('3/100') == Rational(3, 100)\n+    assert Rational('1e-2/3.2') == Rational(1, 320)\n+\n+def test_rational_numeric_input():\n+    # Test to verify that Rational handles numeric inputs correctly\n+    assert Rational(0.5, 100) == Rational(1, 200)\n+    assert Rational(1.5, 300) == Rational(1, 200)\n+    assert Rational(3, 100) == Rational(3, 100)\n+\n+def test_rational_mixed_inputs():\n+    # Test to verify that Rational handles mixed inputs correctly\n+    assert Rational(0.5, '100') == Rational(1, 200)\n+    assert Rational('1.5', 300) == Rational(1, 200)\n+    assert Rational('3', 100) == Rational(3, 100)\n+\n+\n+from sympy import Rational, Integer\n \n def test_Number_new():\n     \"\"\"\"\n",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..d4de1de 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,6 +3202,23 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n+    def test_boundwidget_id_for_label_with_custom_id_in_subwidget(self):\n+        \"\"\"\n+        The `BoundWidget.id_for_label` should use the provided `id` from the widget's\n+        attributes if specified by `ChoiceWidget.options`.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'Option A'), ('b', 'Option B')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'custom_id'}),\n+            )\n+\n+        form = SomeForm(auto_id='prefix_%s')\n+        subwidgets = form['field'].subwidgets\n+        # Verify that the `id_for_label` uses the 'attrs' id if provided.\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_id_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_id_1')\n+\n     def test_boundfield_widget_type(self):\n         class SomeForm(Form):\n             first_name = CharField()\n",
  "matplotlib__matplotlib-20676": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex b009975..633fe50 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -301,6 +301,37 @@ def test_tool_line_handle():\n \n     assert tool_line_handle.positions == positions\n \n+import pytest\n+from matplotlib import pyplot as plt\n+from matplotlib import widgets\n+\n+@pytest.mark.parametrize('direction', (\"horizontal\", \"vertical\"))\n+def test_span_selector_bound(direction):\n+    fig, ax = plt.subplots(1, 1)\n+    ax.plot([10, 20], [10, 30])\n+    ax.figure.canvas.draw()\n+    x_bound = ax.get_xbound()\n+    y_bound = ax.get_ybound()\n+\n+    tool = widgets.SpanSelector(ax, print, direction, interactive=True)\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    bound = x_bound if direction == 'horizontal' else y_bound\n+    assert tool._edge_handles.positions == list(bound)\n+\n+    press_data = [10.5, 11.5]\n+    move_data = [11, 13]  # Updating selector is done in onmove\n+    release_data = move_data\n+    do_event(tool, 'press', xdata=press_data[0], ydata=press_data[1], button=1)\n+    do_event(tool, 'onmove', xdata=move_data[0], ydata=move_data[1], button=1)\n+\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    index = 0 if direction == 'horizontal' else 1\n+    handle_positions = [press_data[index], release_data[index]]\n+    assert tool._edge_handles.positions == handle_positions\n \n def check_lasso_selector(**kwargs):\n     ax = get_ax()\n",
  "scikit-learn__scikit-learn-12682": "diff --git a/sklearn/decomposition/tests/test_dict_learning.py b/sklearn/decomposition/tests/test_dict_learning.py\nindex 35a43f8..e79eee9 100644\n--- a/sklearn/decomposition/tests/test_dict_learning.py\n+++ b/sklearn/decomposition/tests/test_dict_learning.py\n@@ -51,6 +51,58 @@ def test_dict_learning_shapes():\n     assert_equal(dico.transform(X).shape, (X.shape[0], n_components))\n \n \n+import pytest\n+import numpy as np\n+from sklearn.decomposition import SparseCoder\n+from sklearn.exceptions import ConvergenceWarning\n+\n+def test_sparse_coder_max_iter():\n+    def ricker_function(resolution, center, width):\n+        \"\"\"Discrete sub-sampled Ricker (Mexican hat) wavelet\"\"\"\n+        x = np.linspace(0, resolution - 1, resolution)\n+        x = ((2 / (np.sqrt(3 * width) * np.pi ** .25))\n+             * (1 - (x - center) ** 2 / width ** 2)\n+             * np.exp(-(x - center) ** 2 / (2 * width ** 2)))\n+        return x\n+\n+    def ricker_matrix(width, resolution, n_components):\n+        \"\"\"Dictionary of Ricker (Mexican hat) wavelets\"\"\"\n+        centers = np.linspace(0, resolution - 1, n_components)\n+        D = np.empty((n_components, resolution))\n+        for i, center in enumerate(centers):\n+            D[i] = ricker_function(resolution, center, width)\n+        D /= np.sqrt(np.sum(D ** 2, axis=1))[:, np.newaxis]\n+        return D\n+\n+    transform_algorithm = 'lasso_cd'\n+    resolution = 1024\n+    subsampling = 3  # subsampling factor\n+    n_components = resolution // subsampling\n+\n+    # Compute a wavelet dictionary\n+    D_multi = np.r_[tuple(ricker_matrix(width=w, resolution=resolution,\n+                          n_components=n_components // 5)\n+                          for w in (10, 50, 100, 500, 1000))]\n+\n+    X = np.linspace(0, resolution - 1, resolution)\n+    first_quarter = X < resolution / 4\n+    X[first_quarter] = 3.\n+    X[np.logical_not(first_quarter)] = -1.\n+    X = X.reshape(1, -1)\n+\n+    # check that the underlying model fails to converge with a low max_iter\n+    with pytest.warns(ConvergenceWarning):\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=1)\n+        model.fit_transform(X)\n+\n+    # check that the underlying model converges w/o warnings with a higher max_iter\n+    with pytest.warns(None) as record:\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=2000)\n+        model.fit_transform(X)\n+    assert not record.list\n+\n def test_dict_learning_overcomplete():\n     n_components = 12\n     dico = DictionaryLearning(n_components, random_state=0).fit(X)\n",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..d82ee84 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -148,6 +148,31 @@ def test_multi_target_sample_weights():\n     assert_almost_equal(rgr.predict(X_test), rgr_w.predict(X_test))\n \n \n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+from sklearn.model_selection import cross_val_predict\n+from numpy.testing import assert_array_equal, assert_almost_equal\n+import pytest\n+\n+def test_cross_val_predict_predict_proba_multioutput():\n+    # Reproduce the bug described in the issue\n+    X, Y = make_multilabel_classification()\n+    mo_lda = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+\n+    # Test method='predict'\n+    pred = cross_val_predict(mo_lda, X, Y, cv=5)\n+    assert pred.shape == Y.shape\n+\n+    # Test method='predict_proba' to ensure no AttributeError is raised\n+    pred_proba = cross_val_predict(mo_lda, X, Y, cv=5, method='predict_proba')\n+    assert isinstance(pred_proba, list)\n+    assert len(pred_proba) == Y.shape[1]  # List length should match number of outputs\n+    for i, proba in enumerate(pred_proba):\n+        # Ensure probabilities are returned for each class in each output\n+        assert proba.shape == (X.shape[0], len(mo_lda.estimators_[i].classes_))\n+        assert_almost_equal(proba.sum(axis=1), 1)  # Probabilities should sum to 1\n+\n # Import the data\n iris = datasets.load_iris()\n # create a multiple targets by randomized shuffling and concatenating y.\n",
  "sphinx-doc__sphinx-9658": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 072cdc7..d04fa3a 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -158,12 +158,25 @@ def test_restify_pep_585():\n                                                    \"[:py:class:`int`, ...]]\")\n \n \n-@pytest.mark.skipif(sys.version_info < (3, 10), reason='python 3.10+ is required.')\n-def test_restify_type_union_operator():\n-    assert restify(int | None) == \":py:class:`int` | :py:obj:`None`\"  # type: ignore\n-    assert restify(int | str) == \":py:class:`int` | :py:class:`str`\"  # type: ignore\n-    assert restify(int | str | None) == (\":py:class:`int` | :py:class:`str` | \"  # type: ignore\n-                                         \":py:obj:`None`\")\n+from sphinx.ext.autodoc import mock\n+\n+def test_restify_mock_inherited():\n+    \"\"\"Test restify function for classes inheriting from mocked modules.\"\"\"\n+    with mock(['torch.nn']):\n+        import torch.nn\n+        class MockBase(torch.nn.Module):\n+            pass\n+\n+        assert restify(MockBase) == ':py:class:`torch.nn.Module`'\n+\n+def test_stringify_mock_inherited():\n+    \"\"\"Test stringify function for classes inheriting from mocked modules.\"\"\"\n+    with mock(['torch.nn']):\n+        import torch.nn\n+        class MockBase(torch.nn.Module):\n+            pass\n+        \n+        assert stringify(MockBase) == 'torch.nn.Module'\n \n \n def test_restify_broken_type_hints():\n",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..06feb34 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -348,6 +348,18 @@ def test_reverse_order():\n            Product(x*y, (x, b + 1, a - 1), (y, 6, 1))\n \n \n+def test_issue_13546():\n+    n = Symbol('n', integer=True, positive=True)\n+    k = Symbol('k', integer=True, positive=True)\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 2).doit() == S(15)/2\n+\n+    # Additional test cases\n+    assert p.subs(n, 1).doit() == S(3)\n+    assert simplify(p.subs(n, 3).doit() * Rational(16, 1)) == S(315)\n+    assert simplify(p.subs(n, 4).doit() * Rational(1024, 1)) == S(9765)\n+\n+\n def test_issue_9983():\n     n = Symbol('n', integer=True, positive=True)\n     p = Product(1 + 1/n**(S(2)/3), (n, 1, oo))\n@@ -357,4 +369,4 @@ def test_issue_9983():\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}