{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..33cf81d 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -55,6 +55,30 @@ compound_models = {\n             )\n }\n \n+def test_separability_matrix_with_nested_compound_models():\n+    from astropy.modeling import models as m\n+    from astropy.modeling.separable import separability_matrix\n+    import numpy as np\n+\n+    # Original issue case: Model with nested compound models\n+    linear1 = m.Linear1D(10)\n+    linear2 = m.Linear1D(5)\n+    cm = linear1 & linear2\n+    pixsky = m.Pix2Sky_TAN()\n+\n+    # Test separability matrix for nested compound models\n+    nested_cm = pixsky & cm\n+    expected_separability_matrix = np.array([\n+        [True,  True, False, False],\n+        [True,  True, False, False],\n+        [False, False, True,  True],\n+        [False, False, True,  True]\n+    ])\n+    \n+    result_matrix = separability_matrix(nested_cm)\n+    assert np.array_equal(result_matrix, expected_separability_matrix), (\"Separability matrix for nested compound model is incorrect. \"\n+                                                                         f\"Expected {expected_separability_matrix}, got {result_matrix}\")\n+\n \n def test_coord_matrix():\n     c = _coord_matrix(p2, 'left', 2)\n",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "diff --git a/astropy/io/fits/tests/test_connect.py b/astropy/io/fits/tests/test_connect.py\nindex 00deafe..ba528aa 100644\n--- a/astropy/io/fits/tests/test_connect.py\n+++ b/astropy/io/fits/tests/test_connect.py\n@@ -1,3 +1,4 @@\n+\n import gc\n import warnings\n \n@@ -7,7 +8,7 @@ from numpy.testing import assert_allclose, assert_array_equal\n \n from astropy import units as u\n from astropy.io import fits\n-from astropy.io.fits import BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu\n+from astropy.io.fits import BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu, connect\n from astropy.io.fits.column import (\n     _fortran_to_python_format,\n     _parse_tdisp_format,\n",
  "astropy__astropy-14508": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex 6bdf92c..4e73557 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -137,6 +137,41 @@ class TestHeaderFunctions(FitsTestCase):\n         ):\n             assert str(c) == _pad(\"FLOATNUM= -4.6737463674763E+32\")\n \n+    def test_floating_point_string_representation_card(self):\n+        \"\"\"\n+        Ensures Card formats float values with the correct precision, avoiding\n+        comment truncation\n+\n+        Regression test for issue with float representation.\n+        \"\"\"\n+        k = \"HIERARCH ABC DEF GH IJKLMN\"\n+        com = \"[m] abcdef ghijklm nopqrstu vw xyzab\"\n+\n+        c = fits.Card(k, 0.009125, com)\n+        expected_str = f\"{k} = 0.009125 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, 8.95, com)\n+        expected_str = f\"{k} = 8.95 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, -99.9, com)\n+        expected_str = f\"{k} = -99.9 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Additional test cases for thorough testing\n+        c = fits.Card(k, 1.234567890123456, com)\n+        expected_str = f\"{k} = 1.234567890123456 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, 0.000000012345, com)\n+        expected_str = f\"{k} = 1.2345E-08 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, -0.000000012345, com)\n+        expected_str = f\"{k} = -1.2345E-08 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n     def test_complex_value_card(self):\n         \"\"\"Test Card constructor with complex value\"\"\"\n \n",
  "astropy__astropy-14539": "diff --git a/astropy/io/fits/tests/test_diff.py b/astropy/io/fits/tests/test_diff.py\nindex 9bf4897..72a6a2b 100644\n--- a/astropy/io/fits/tests/test_diff.py\n+++ b/astropy/io/fits/tests/test_diff.py\n@@ -601,7 +601,21 @@ class TestDiff(FitsTestCase):\n         assert \"13 different table data element(s) found (65.00% different)\" in report\n         assert report.count(\"more indices\") == 1\n \n-    def test_identical_files_basic(self):\n+    def test_fitsdiff_identical_vla(self):\n+        \"\"\"\n+        Test that FITSDiff correctly identifies identical files\n+        when VLAs (variable-length arrays) are involved.\n+        \"\"\"\n+        col = fits.Column('a', format='QD', array=[[0], [0, 0]])\n+        hdu = fits.BinTableHDU.from_columns([col])\n+        hdu.writeto('diffbug.fits', overwrite=True)\n+\n+        diff = fits.FITSDiff('diffbug.fits', 'diffbug.fits')\n+        assert diff.identical, \"FITSDiff reported differences in identical files.\"\n+        \n+        # Cleanup\n+        import os\n+        os.remove('diffbug.fits')\n         \"\"\"Test identicality of two simple, extensionless files.\"\"\"\n \n         a = np.arange(100).reshape(10, 10)\n",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..e87ea2d 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -88,8 +88,20 @@ def test_inherit_docstrings():\n         # TODO: Maybe if __doc__ is None this test should be skipped instead?\n         assert Subclass.__call__.__doc__ == \"FOO\"\n \n-\n-def test_set_locale():\n+def test_inherit_docstrings_with_properties():\n+    class BaseWithProperty(metaclass=misc.InheritDocstrings):\n+        @property\n+        def bar(self):\n+            \"\"\"BAR\"\"\"\n+            return None\n+\n+    class SubclassWithProperty(BaseWithProperty):\n+        @property\n+        def bar(self):\n+            return 42\n+\n+    if BaseWithProperty.bar.__doc__ is not None:\n+        assert SubclassWithProperty.bar.__doc__ == \"BAR\"\n     # First, test if the required locales are available\n     current = locale.setlocale(locale.LC_ALL)\n     try:\n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..2e0b308 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -197,6 +197,13 @@ def test_unknown_unit3():\n     with pytest.raises(TypeError):\n         unit5 = u.Unit(None)\n \n+def test_unrecognized_unit_equality_with_none():\n+    unit = u.Unit('asdf', parse_strict='silent')\n+    # Check equality with None should not raise, should return False\n+    assert (unit == None) is False  # noqa: E711\n+    assert (unit != None) is True   # noqa: E711\n+    assert unit not in (None, u.m)\n+\n \n @raises(TypeError)\n def test_invalid_scale():\n",
  "astropy__astropy-7671": "diff --git a/astropy/utils/tests/test_introspection.py b/astropy/utils/tests/test_introspection.py\nindex 852d721..294f8df 100644\n--- a/astropy/utils/tests/test_introspection.py\n+++ b/astropy/utils/tests/test_introspection.py\n@@ -69,7 +69,30 @@ def test_minversion():\n     test_module.__version__ = '0.12.2'\n     good_versions = ['0.12', '0.12.1', '0.12.0.dev']\n     bad_versions = ['1', '1.2rc1']\n+    # Original test cases\n     for version in good_versions:\n         assert minversion(test_module, version)\n     for version in bad_versions:\n-        assert not minversion(test_module, version)\n+        assert not minversion(test_module, version)\n+    \n+    # New test module for 'minversion' issues\n+    test_module.__version__ = '1.14.3'\n+    # Versions that should pass\n+    good_versions_issue = ['1.14dev', '1.14.3', '1.14.2']\n+    # Versions that should not pass\n+    bad_versions_issue = ['1.15dev', '1.15']\n+\n+    for version in good_versions_issue:\n+        assert minversion(test_module, version)\n+    for version in bad_versions_issue:\n+        assert not minversion(test_module, version)\n+    \n+    # Test inclusive=False\n+    assert minversion(test_module, '1.14.3', inclusive=False) == False\n+    assert minversion(test_module, '1.14.2', inclusive=False) == True\n+    \n+    # Test with purely string version\n+    test_module.__version__ = '1.14dev'\n+    assert minversion(test_module, '1.14dev')\n+    assert not minversion(test_module, '1.14.1')\n+    assert minversion(test_module, '1.14.0.dev', inclusive=False)\n",
  "astropy__astropy-8707": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex a2103c6..e660d06 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -2329,8 +2329,38 @@ class TestHeaderFunctions(FitsTestCase):\n             else:\n                 c.verify('exception')\n \n+    def test_card_from_unicode_str(self):\n+        \"\"\"\n+        Test loading a Card from a Unicode `str` object.\n+        \"\"\"\n+        c = fits.Card.fromstring(\"ABC     = 'abc'\")\n+        assert c.keyword == 'ABC'\n+        assert c.value == 'abc'\n+\n+    def test_header_fromstring_unicode_str(self):\n+        \"\"\"\n+        Test reading a Header from a Unicode `str` string.\n+        \"\"\"\n+        with open(self.data('test0.fits'), 'r') as fobj:\n+            pri_hdr_from_str = fits.Header.fromstring(fobj.read())\n+\n+        pri_hdr = fits.getheader(self.data('test0.fits'))\n+        assert pri_hdr['NAXIS'] == pri_hdr_from_str['NAXIS']\n+        assert pri_hdr == pri_hdr_from_str\n+        assert pri_hdr.tostring() == pri_hdr_from_str.tostring()\n+\n+    def test_header_fromstring_bytes_with_explicit_encoding(self):\n+        \"\"\"\n+        Test reading a Header from a `bytes` string explicitly encoding as ASCII.\n+        \"\"\"\n+        with open(self.data('test0.fits'), 'rb') as fobj:\n+            bytes_data = fobj.read()\n+            pri_hdr_from_bytes = fits.Header.fromstring(bytes_data.decode('ascii'))\n \n-class TestRecordValuedKeywordCards(FitsTestCase):\n+        pri_hdr = fits.getheader(self.data('test0.fits'))\n+        assert pri_hdr['NAXIS'] == pri_hdr_from_bytes['NAXIS']\n+        assert pri_hdr == pri_hdr_from_bytes\n+        assert pri_hdr.tostring() == pri_hdr_from_bytes.tostring()\n     \"\"\"\n     Tests for handling of record-valued keyword cards as used by the\n     `FITS WCS distortion paper\n",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..66110b7 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -149,8 +149,35 @@ class TestQuantityCreation:\n \n         q5 = u.Quantity(decimal.Decimal('10.25'), u.m, dtype=object)\n         assert q5.dtype == object\n-\n-    def test_copy(self):\n+        \n+    def test_preserve_float16_dtype(self):\n+        \"\"\"Test that np.float16 is not automatically converted to np.float64\"\"\"\n+        a_float16 = np.array([1., 2.], dtype=np.float16)\n+        q_float16 = u.Quantity(a_float16, u.km)\n+        assert q_float16.dtype == a_float16.dtype, \"np.float16 should be preserved\"\n+\n+        # Test with single float16 scalar\n+        q_scalar_float16 = u.Quantity(np.float16(3.5), u.km)\n+        assert q_scalar_float16.dtype == np.float16, \"np.float16 scalar should be preserved\"\n+\n+    def test_preserve_float32_dtype(self):\n+        \"\"\"Re-confirm that np.float32 is preserved\"\"\"\n+        a_float32 = np.array([1., 2.], dtype=np.float32)\n+        q_float32 = u.Quantity(a_float32, u.km)\n+        assert q_float32.dtype == a_float32.dtype, \"np.float32 should be preserved\"\n+\n+    def test_preserve_float64_dtype(self):\n+        \"\"\"Verify that np.float64 is the same as the default behavior\"\"\"\n+        a_float64 = np.array([1., 2.], dtype=np.float64)\n+        q_float64 = u.Quantity(a_float64, u.km)\n+        assert q_float64.dtype == a_float64.dtype, \"np.float64 should be naturally preserved\"\n+\n+    def test_preserve_float128_dtype(self):\n+        \"\"\"Verify that np.float128 is correctly preserved\"\"\"\n+        if hasattr(np, 'float128'):  # Not all systems support float128\n+            a_float128 = np.array([1., 2.], dtype=np.float128)\n+            q_float128 = u.Quantity(a_float128, u.km)\n+            assert q_float128.dtype == a_float128.dtype, \"np.float128 should be preserved\"\n \n         # By default, a new quantity is constructed, but not if copy=False\n \n",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..384c0e4 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -218,6 +218,15 @@ TEST_DATA = [\n     (URLValidator(EXTENDED_SCHEMES), 'git+ssh://git@github.com/example/hg-git.git', None),\n \n     (URLValidator(EXTENDED_SCHEMES), 'git://-invalid.com', ValidationError),\n+    \n+    # Test cases for invalid URL due to unencoded characters in username and password\n+    (URLValidator(), 'http://foo@bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo/bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar@baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar/baz@example.com', ValidationError),\n+    (URLValidator(), 'http://invalid-.com/?m=foo@example.com', ValidationError),\n+    (URLValidator(), \"http://-.~_!$&'()*+,;=%40:80%2f@example.com\", ValidationError),\n     # Trailing newlines not accepted\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..ecc7cd2 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -8,6 +9,7 @@ from django.db.models import (\n     Avg, Count, DecimalField, DurationField, F, FloatField, Func, IntegerField,\n     Max, Min, Sum, Value,\n )\n+from django.db.models.expressions import Case, When\n from django.test import TestCase\n from django.test.utils import Approximate, CaptureQueriesContext\n from django.utils import timezone\n@@ -389,7 +391,32 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n-    def test_count_star(self):\n+    def test_count_distinct_expression(self):\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=300, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n+\n+    def test_count_distinct_expression_with_multiple_conditions(self):\n+        # This test case checks if multiple conditions work with distinct\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(\n+                Case(\n+                    When(pages__gt=300, then='rating'),\n+                    When(price__lt=20, then='rating')\n+                ),\n+                distinct=True\n+            ),\n+        )\n+        # Assuming the expected distinct count here for test verification.\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n+\n+    def test_count_distinct_no_case(self):\n+        # This test checks if distinct count works without a Case expression\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count('rating', distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n         sql = ctx.captured_queries[0]['sql']\n",
  "django__django-10914": "",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..91a04f4 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,5 +1,7 @@\n+\n import os\n import signal\n+import subprocess\n from unittest import mock\n \n from django.db.backends.postgresql.client import DatabaseClient\n@@ -28,8 +30,39 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db(dbinfo)\n         return self.subprocess_args, self.pgpass\n+    \n+    def _run_it_with_run(self, dbinfo):\n+        \"\"\"\n+        This function invokes the runshell command, while mocking\n+        subprocess.run. It returns a 2-tuple with:\n+        - The command line list\n+        - The value of the PGPASSWORD environment variable, or None.\n+        \"\"\"\n+        def _mock_subprocess_run(*args, env=os.environ, **kwargs):\n+            self.subprocess_args = args[0]\n+            self.pgpassword = env.get('PGPASSWORD')\n+            return subprocess.CompletedProcess(self.subprocess_args, 0)\n \n-    def test_basic(self):\n+        self.subprocess_args = None\n+        self.pgpassword = None\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            DatabaseClient.runshell_db(dbinfo)\n+        return self.subprocess_args, self.pgpassword\n+\n+    def test_with_pgpassword(self):\n+        password = 'somepassword'\n+        self.assertEqual(\n+            self._run_it_with_run({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'password': password,\n+                'host': 'somehost',\n+                'port': '444',\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                password,\n+            )\n+        )\n         self.assertEqual(\n             self._run_it({\n                 'database': 'dbname',\n@@ -113,4 +146,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..240cbb4 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -5,6 +5,7 @@ from django.contrib.contenttypes.models import ContentType\n from django.core.management import call_command\n from django.db import migrations, models\n from django.test import TransactionTestCase, override_settings\n+from django.contrib.contenttypes.models import ContentType\n \n \n @override_settings(\n@@ -63,4 +64,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "diff --git a/tests/generic_inline_admin/tests.py b/tests/generic_inline_admin/tests.py\nindex 9dd9fd9..f997fe7 100644\n--- a/tests/generic_inline_admin/tests.py\n+++ b/tests/generic_inline_admin/tests.py\n@@ -421,6 +421,37 @@ class GenericInlineModelAdminTest(SimpleTestCase):\n             form = MediaForm\n             model = Media\n \n+        def test_get_inlines_with_different_requests(self):\n+            class MediaInline(GenericTabularInline):\n+                model = Media\n+\n+            class AlternateInline(GenericTabularInline):\n+                model = Media\n+\n+            class EpisodeAdmin(admin.ModelAdmin):\n+                inlines = (AlternateInline, MediaInline)\n+\n+                def get_inlines(self, request, obj=None):\n+                    if hasattr(request, 'name'):\n+                        if request.name == 'alternate':\n+                            return self.inlines[:1]\n+                        elif request.name == 'media':\n+                            return self.inlines[1:2]\n+                    return []\n+\n+            ma = EpisodeAdmin(Episode, self.site)\n+\n+            # Test case where no specific attribute is set\n+            request = type('Request', (), {})()  # create a simple object to simulate a request\n+            self.assertEqual(ma.get_inlines(request, None), [])\n+            self.assertEqual(ma.get_inline_instances(request), [])\n+\n+            # Test cases with different request names\n+            for name, inline_class in [('alternate', AlternateInline), ('media', MediaInline)]:\n+                request.name = name\n+                self.assertEqual(ma.get_inlines(request, None), (inline_class,))\n+                self.assertEqual(type(ma.get_inline_instances(request)[0]), inline_class)\n+\n         class EpisodeAdmin(admin.ModelAdmin):\n             inlines = [\n                 AlternateInline, MediaInline\n@@ -428,4 +459,4 @@ class GenericInlineModelAdminTest(SimpleTestCase):\n         ma = EpisodeAdmin(Episode, self.site)\n         inlines = ma.get_inline_instances(request)\n         for (formset, inline), other_inline in zip(ma.get_formsets_with_inlines(request), inlines):\n-            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..a85221c 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -248,7 +248,22 @@ class UsernameValidatorsTests(SimpleTestCase):\n                 with self.assertRaises(ValidationError):\n                     v(invalid)\n \n-    def test_ascii_validator(self):\n+    def test_trailing_newline_in_username(self):\n+        invalid_usernames = [\n+            'username_with_newline\\n',\n+            'anothername_with_newline\\r\\n',\n+            'newline_only\\n',\n+            '\\n',\n+        ]\n+        unicode_validator = validators.UnicodeUsernameValidator()\n+        ascii_validator = validators.ASCIIUsernameValidator()\n+\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    unicode_validator(invalid)\n+                with self.assertRaises(ValidationError):\n+                    ascii_validator(invalid)\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n         invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n         v = validators.ASCIIUsernameValidator()\n@@ -258,4 +273,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..7b82f9c 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -1,5 +1,6 @@\n import os\n \n+import os\n from django.core.exceptions import ImproperlyConfigured\n from django.template import Context\n from django.template.engine import Engine\n@@ -22,7 +23,23 @@ class RenderToStringTest(SimpleTestCase):\n         )\n \n \n-class GetDefaultTests(SimpleTestCase):\n+class RenderToStringAutoescapeTest(SimpleTestCase):\n+\n+    def test_autoescape_on(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        # Ensuring that autoescape applies HTML escaping\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n+\n+    def test_autoescape_off(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        # Ensuring that autoescape does not apply and HTML is rendered as is\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:<script>\\n',\n+        )\n \n     @override_settings(TEMPLATES=[])\n     def test_no_engines_configured(self):\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..90bf5dc 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -413,7 +413,23 @@ class HttpResponseTests(unittest.TestCase):\n         self.assertEqual(list(i), [b'abc'])\n         self.assertEqual(list(i), [])\n \n-    def test_lazy_content(self):\n+    def test_memoryview_content(self):\n+        # Test simple memoryview\n+        r = HttpResponse(memoryview(b\"simple test\"))\n+        self.assertEqual(r.content, b\"simple test\")\n+\n+        # Test memoryview with slicing\n+        mv = memoryview(b\"memoryview slicing test\")\n+        r = HttpResponse(mv[0:8])\n+        self.assertEqual(r.content, b\"memoryvi\")\n+\n+        # Test empty memoryview\n+        r = HttpResponse(memoryview(b\"\"))\n+        self.assertEqual(r.content, b\"\")\n+\n+        # Test memoryview with different byte objects\n+        r = HttpResponse(memoryview(b\"\\x00\\xFF\\x00\\xFF\"))\n+        self.assertEqual(r.content, b\"\\x00\\xFF\\x00\\xFF\")\n         r = HttpResponse(lazystr('helloworld'))\n         self.assertEqual(r.content, b'helloworld')\n \n",
  "django__django-11141": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex b5a87e7..4e3a67d 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -501,6 +501,17 @@ class LoaderTests(TestCase):\n         self.assertEqual(plan, expected_plan)\n \n     @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_private'})\n+    @override_settings(\n+        MIGRATION_MODULES={'migrations': 'migrations.test_migrations_namespace_package'},\n+    )\n+    def test_loading_namespace_package(self):\n+        \"\"\"Migration directories without an __init__.py file are loaded.\"\"\"\n+        migration_loader = MigrationLoader(connection)\n+        self.assertEqual(\n+            migration_loader.graph.forwards_plan(('migrations', '0001_initial')),\n+            [('migrations', '0001_initial')],\n+        )\n+\n     def test_ignore_files(self):\n         \"\"\"Files prefixed with underscore, tilde, or dot aren't loaded.\"\"\"\n         loader = MigrationLoader(connection)\n@@ -509,6 +520,12 @@ class LoaderTests(TestCase):\n         self.assertEqual(migrations, ['0001_initial'])\n \n \n+from django.test import override_settings\n+from django.db.migrations.loader import MigrationLoader\n+from django.db import connection\n+import os\n+import compileall\n+\n class PycLoaderTests(MigrationTestBase):\n \n     def test_valid(self):\n",
  "django__django-11149": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 296cfba..002b0b4 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -664,8 +664,45 @@ class TestInlinePermissions(TestCase):\n         self.assertNotContains(response, 'Add another Author-Book Relationship')\n         self.assertNotContains(response, 'id=\"id_Author_books-TOTAL_FORMS\"')\n         self.assertNotContains(response, 'id=\"id_Author_books-0-DELETE\"')\n+    def test_inline_add_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(reverse('admin:admin_inlines_author_add'))\n+        # View-only inlines\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>', html=True)\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"0\" id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        self.assertNotContains(response, 'Add another Author-Book Relationship', html=True)\n \n-    def test_inline_change_m2m_change_perm(self):\n+    def test_inline_change_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(self.author_change_url)\n+        # View-only inlines\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>', html=True)\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"1\" id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        # The field in the inline is read-only.\n+        self.assertContains(response, '<p>The inline Book</p>', html=True)\n+        self.assertNotContains(\n+            response,\n+            '<input type=\"checkbox\" name=\"Author_books-0-DELETE\" id=\"id_Author_books-0-DELETE\">',\n+            html=True,\n+        )\n         permission = Permission.objects.get(codename='change_book', content_type=self.book_ct)\n         self.user.user_permissions.add(permission)\n         response = self.client.get(self.author_change_url)\n",
  "django__django-11163": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex b25d077..39901df 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2900,7 +2900,26 @@ class StrictAssignmentTests(SimpleTestCase):\n \n \n class ModelToDictTests(TestCase):\n-    def test_many_to_many(self):\n+    def test_empty_fields_returns_empty_dict(self):\n+        \"\"\"Test that model_to_dict returns an empty dict when fields is an empty list.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(model_to_dict(bw, fields=[]), {})\n+\n+    def test_no_fields_specified_returns_all_fields(self):\n+        \"\"\"Test that model_to_dict returns all fields when fields is None.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(sorted(model_to_dict(bw, fields=None)), ['id', 'name', 'score', 'writer_ptr'])\n+\n+    def test_exclude_fields(self):\n+        \"\"\"Test that model_to_dict excludes the specified fields.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(sorted(model_to_dict(bw, exclude=['id', 'score'])), ['name', 'writer_ptr'])\n+\n+    def test_exclude_and_fields_mutually_exclusive(self):\n+        \"\"\"Test that specifying both fields and exclude raises an error.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        with self.assertRaises(ValueError):\n+            model_to_dict(bw, fields=['name'], exclude=['id'])\n         \"\"\"Data for a ManyToManyField is a list rather than a lazy QuerySet.\"\"\"\n         blue = Colour.objects.create(name='blue')\n         red = Colour.objects.create(name='red')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..d9e9b11 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,7 +1,9 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n+from django.db.models.deletion import Collector\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n from .models import (\n@@ -471,6 +473,35 @@ class FastDeleteTests(TestCase):\n         self.assertEqual(User.objects.count(), 1)\n         self.assertTrue(User.objects.filter(pk=u2.pk).exists())\n \n+    def test_fast_delete_instance_set_pk_none(self):\n+        # Create a user instance\n+        u = User.objects.create()\n+        # Verify the user can be fast-deleted\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        # Delete the user and check the PK is None\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n+    def test_delete_model_with_no_dependencies_clears_pk(self):\n+        # Create a model instance with no dependencies\n+        a = Avatar.objects.create(desc='avatar')\n+        # Verify the initial PK is not None\n+        self.assertIsNotNone(a.pk)\n+        # Delete the instance and check the PK is None\n+        a.delete()\n+        self.assertIsNone(a.pk)\n+\n+    def test_delete_model_with_dependencies_does_not_clear_pk(self):\n+        # Create an Avatar and User instance\n+        a = Avatar.objects.create(desc='avatar')\n+        u = User.objects.create(avatar=a)\n+        # Verify the initial PK is not None\n+        self.assertIsNotNone(u.pk)\n+        # Delete the User instance and check the PK is not cleared\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n     def test_fast_delete_joined_qs(self):\n         a = Avatar.objects.create(desc='a')\n         User.objects.create(avatar=a)\n@@ -481,6 +512,35 @@ class FastDeleteTests(TestCase):\n         self.assertEqual(User.objects.count(), 1)\n         self.assertTrue(User.objects.filter(pk=u2.pk).exists())\n \n+    def test_fast_delete_instance_set_pk_none(self):\n+        # Create a user instance\n+        u = User.objects.create()\n+        # Verify the user can be fast-deleted\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        # Delete the user and check the PK is None\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n+    def test_delete_model_with_no_dependencies_clears_pk(self):\n+        # Create a model instance with no dependencies\n+        a = Avatar.objects.create(desc='avatar')\n+        # Verify the initial PK is not None\n+        self.assertIsNotNone(a.pk)\n+        # Delete the instance and check the PK is None\n+        a.delete()\n+        self.assertIsNone(a.pk)\n+\n+    def test_delete_model_with_dependencies_does_not_clear_pk(self):\n+        # Create an Avatar and User instance\n+        a = Avatar.objects.create(desc='avatar')\n+        u = User.objects.create(avatar=a)\n+        # Verify the initial PK is not None\n+        self.assertIsNotNone(u.pk)\n+        # Delete the User instance and check the PK is not cleared\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n     def test_fast_delete_inheritance(self):\n         c = Child.objects.create()\n         p = Parent.objects.create()\n",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..861cb37 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -95,6 +95,10 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+            ('1e-199', 2, '0.00'),\n+            ('1e-200', 2, '0.00'),\n+            ('1e-300', 5, '0.00000'),\n+            ('1e-150', 10, '0.0000000000'),\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-11211": "",
  "django__django-11239": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex b843072..769e97b 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,4 +1,6 @@\n import os\n+import os\n+\n import signal\n import subprocess\n from unittest import mock\n@@ -81,7 +83,40 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n-    def test_sigint_handler(self):\n+    def test_ssl_certificate(self):\n+        self.assertEqual(\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+                'sslmode': 'verify-ca',\n+                'sslrootcert': 'root.crt',\n+                'sslcert': 'client.crt',\n+                'sslkey': 'client.key',\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                None\n+            )\n+        )\n+\n+    def test_ssl_certificate_with_password(self):\n+        self.assertEqual(\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'password': 'somepassword',\n+                'host': 'somehost',\n+                'port': '444',\n+                'sslmode': 'require',\n+                'sslrootcert': 'root.crt',\n+                'sslcert': 'client.crt',\n+                'sslkey': 'client.key',\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                'somepassword'\n+            )\n+        )\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n         def _mock_subprocess_run(*args, **kwargs):\n             handler = signal.getsignal(signal.SIGINT)\n",
  "django__django-11265": "",
  "django__django-11276": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 4051a05..970ce1b 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -29,6 +29,30 @@ class TestUtilsHtml(SimpleTestCase):\n             ('\"', '&quot;'),\n             (\"'\", '&#39;'),\n         )\n+\n+    def test_escape_with_different_quotes(self):\n+        \"\"\"\n+        Test that the escape function correctly converts single quotes \n+        using the updated escape pattern.\n+        \"\"\"\n+        items = (\n+            (\"'\", '&#x27;'),  # Single quote should be escaped to &#x27;\n+            ('\"', '&quot;'),  # Double quote check for completeness\n+        )\n+        for value, output in items:\n+            with self.subTest(value=value, output=output):\n+                self.check_output(escape, value, output)\n+\n+    def test_escape_performance(self):\n+        \"\"\"\n+        A simple performance check to ensure the escape function is efficient.\n+        \"\"\"\n+        import timeit\n+        setup_code = \"from django.utils.html import escape\"\n+        test_code = \"escape('& < > \\\" \\\\\\'')\"\n+        # We should see faster execution times typically than the older implementation\n+        execution_time = timeit.timeit(stmt=test_code, setup=setup_code, number=100000)\n+        print(f\"Performance Test: {execution_time} seconds\")\n         # Substitution patterns for testing the above items.\n         patterns = (\"%s\", \"asdf%sfdsa\", \"%s1\", \"1%sb\")\n         for value, output in items:\n",
  "django__django-11292": "",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..d5ba905 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,5 +1,7 @@\n+\n from django.test import SimpleTestCase\n-from django.urls.resolvers import RegexPattern, RoutePattern\n+from django.urls.resolvers import RegexPattern, RoutePattern, get_resolver\n+from django.test.utils import override_settings\n from django.utils.translation import gettext_lazy as _\n \n \n@@ -9,7 +11,32 @@ class RegexPatternTests(SimpleTestCase):\n         self.assertEqual(str(RegexPattern(_('^translated/$'))), '^translated/$')\n \n \n+class ResolverCacheTests(SimpleTestCase):\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_default_root_urlconf(self):\n+        # Test that get_resolver returns the same cached object for default URLconf and settings.ROOT_URLCONF\n+        self.assertIs(get_resolver(), get_resolver('urlpatterns.path_urls'))\n+        self.assertIsNot(get_resolver(), get_resolver('urlpatterns.path_dynamic_urls'))\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_before_and_after_set_urlconf(self):\n+        # Test that get_resolver returns the same object before and after set_urlconf is called with ROOT_URLCONF\n+        resolver_before = get_resolver()\n+        from django.urls.base import set_urlconf\n+        set_urlconf('urlpatterns.path_urls')\n+        resolver_after = get_resolver()\n+        self.assertIs(resolver_before, resolver_after)\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_with_none_and_root_urlconf(self):\n+        # Test that get_resolver(None) and get_resolver(settings.ROOT_URLCONF) return the same resolver\n+        resolver_none = get_resolver(None)\n+        resolver_root = get_resolver('urlpatterns.path_urls')\n+        self.assertIs(resolver_none, resolver_root)\n+\n+\n class RoutePatternTests(SimpleTestCase):\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\nindex b010b42..a2623f1 100644\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -251,7 +251,29 @@ class ModelBackendTest(BaseModelBackendTest, TestCase):\n         self.user.save()\n         self.assertIsNone(authenticate(**self.user_credentials))\n \n-    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserWithoutIsActiveField')\n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authentication_without_credentials(self):\n+        CountingMD5PasswordHasher.calls = 0\n+        for credentials in (\n+            {},\n+            {'username': getattr(self.user, self.UserModel.USERNAME_FIELD)},\n+            {'password': 'test'},\n+        ):\n+            with self.subTest(credentials=credentials):\n+                with self.assertNumQueries(0):\n+                    authenticate(**credentials)\n+                self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n+\n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authentication_with_none_username_and_password(self):\n+        \"\"\"\n+        Test that authenticate does not query the database when both username\n+        and password are None.\n+        \"\"\"\n+        CountingMD5PasswordHasher.calls = 0\n+        with self.assertNumQueries(0):\n+            authenticate(username=None, password=None)\n+        self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n     def test_authenticate_user_without_is_active_field(self):\n         \"\"\"\n         A custom user without an `is_active` field is allowed to authenticate.\n",
  "django__django-11490": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex e627a0d..13a29d6 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -124,6 +124,22 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.union(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n+    def test_union_column_change_with_values_list(self):\n+        # Setup\n+        ReservedName.objects.create(name='a', order=2)\n+        qs1 = ReservedName.objects.all()\n+        \n+        # Test changing columns in values_list()\n+        reserved_name = qs1.union(qs1).values_list('name', 'order').get()\n+        self.assertEqual(reserved_name, ('a', 2))\n+\n+        reserved_order = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(reserved_order, (2,))\n+\n+        # Test changing columns in values()\n+        reserved_dict = qs1.union(qs1).values('order').get()\n+        self.assertEqual(reserved_dict, {'order': 2})\n+\n     def test_union_with_two_annotated_values_list(self):\n         qs1 = Number.objects.filter(num=1).annotate(\n             count=Value(0, IntegerField()),\n",
  "django__django-11532": "diff --git a/tests/mail/tests.py b/tests/mail/tests.py\nindex a6f0e17..039d3dc 100644\n--- a/tests/mail/tests.py\n+++ b/tests/mail/tests.py\n@@ -12,6 +12,7 @@ from email.header import Header\n from email.mime.text import MIMEText\n from email.utils import parseaddr\n from io import StringIO\n+from unittest import mock\n from smtplib import SMTP, SMTPAuthenticationError, SMTPException\n from ssl import SSLError\n \n@@ -360,7 +361,23 @@ class MailTests(HeadersCheckMixin, SimpleTestCase):\n         msg.attach('example.txt', 'Text file content', 'text/plain')\n         self.assertIn(html_content, msg.message().as_string())\n \n-    def test_none_body(self):\n+    @mock.patch('socket.getfqdn', return_value='\u6f22\u5b57')\n+    def test_non_ascii_dns_non_unicode_email(self, mocked_getfqdn):\n+        delattr(mail.message.DNS_NAME, '_fqdn')\n+        email = EmailMessage('subject', 'content', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        self.assertIn('@xn--p8s937b>', email.message()['Message-ID'])\n+\n+    @mock.patch('socket.getfqdn', return_value='\u6b63\u5b97')\n+    def test_non_ascii_hostname(self, mocked_getfqdn):\n+        \"\"\"\n+        Test that non-ASCII hostnames are properly encoded to punycode.\n+        \"\"\"\n+        delattr(mail.message.DNS_NAME, '_fqdn')\n+        email = EmailMessage('Subject', 'Body', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        message = email.message()\n+        self.assertIn('xn--fiq228c', message['Message-ID'])\n         msg = EmailMessage('subject', None, 'from@example.com', ['to@example.com'])\n         self.assertEqual(msg.body, '')\n         self.assertEqual(msg.message().get_payload(), '')\n",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..f0a94f2 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,9 +1,30 @@\n+\n+class PositionField(Field):\n+    \"\"\"Custom field accessible only via instance.\"\"\"\n+    def contribute_to_class(self, cls, name):\n+        super().contribute_to_class(cls, name)\n+        setattr(cls, self.name, self)\n+\n+    def __get__(self, instance, owner):\n+        if instance is None:\n+            raise AttributeError()\n+\n+class PositionFieldTests(CheckTestCase):\n+    def test_position_field_accessible_via_instance(self):\n+        class TestModel(Model):\n+            field = PositionField()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('field',)\n+\n+        self.assertIsValid(TestModelAdmin, TestModel)\n+\n from django import forms\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n-from django.db.models import F\n+from django.db.models import F, Field, Model\n from django.db.models.functions import Upper\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..a4222b9 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -5,6 +5,8 @@ from django.core.exceptions import FieldError\n from django.db.models import (\n     CharField, Count, DateTimeField, F, Max, OuterRef, Subquery, Value,\n )\n+from django.db.models import OrderBy\n+from datetime import datetime\n from django.db.models.functions import Upper\n from django.test import TestCase\n from django.utils.deprecation import RemovedInDjango31Warning\n@@ -462,7 +464,54 @@ class OrderingTests(TestCase):\n             attrgetter('headline')\n         )\n \n-    def test_deprecated_values_annotate(self):\n+    def test_order_by_with_expression_in_meta_ordering(self):\n+        \"\"\"\n+        Test ordering on a child model with a parent model using Meta ordering\n+        containing expressions.\n+        \"\"\"\n+        ca1 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_2,\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca3 = ChildArticle.objects.create(\n+            headline='h3',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n+\n+        articles = ChildArticle.objects.order_by('article_ptr')\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+\n+    def test_order_by_with_expression_in_order_by(self):\n+        \"\"\"\n+        Test ordering using an expression directly in order_by().\n+        \"\"\"\n+        ca1 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_2,\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca3 = ChildArticle.objects.create(\n+            headline='h3',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n+\n+        articles = ChildArticle.objects.order_by(OrderBy(F('author_id').asc()))\n+        self.assertSequenceEqual(articles, [ca2, ca3, ca1, ca4])\n         msg = (\n             \"Article QuerySet won't use Meta.ordering in Django 3.1. Add \"\n             \".order_by('-pub_date', 'headline', OrderBy(F(author__name), \"\n",
  "django__django-11603": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 2b8f813..7fdc1ea 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -397,7 +397,15 @@ class AggregateTestCase(TestCase):\n         sql = ctx.captured_queries[0]['sql']\n         self.assertIn('SELECT COUNT(*) ', sql)\n \n-    def test_count_distinct_expression(self):\n+    def test_avg_distinct(self):\n+        \"\"\"Test DISTINCT support for Avg aggregate.\"\"\"\n+        books_avg = Book.objects.aggregate(average_rating=Avg('rating', distinct=True))\n+        self.assertEqual(books_avg['average_rating'], 4.125)\n+\n+    def test_sum_distinct(self):\n+        \"\"\"Test DISTINCT support for Sum aggregate.\"\"\"\n+        books_sum = Book.objects.aggregate(total_rating=Sum('rating', distinct=True))\n+        self.assertEqual(books_sum['total_rating'], 16.5)\n         aggs = Book.objects.aggregate(\n             distinct_ratings=Count(Case(When(pages__gt=300, then='rating')), distinct=True),\n         )\n",
  "django__django-11740": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a98fff5..eb3c184 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -669,7 +669,45 @@ class AutodetectorTests(TestCase):\n         self.assertOperationTypes(changes, 'testapp', 0, [\"DeleteModel\"])\n         self.assertOperationAttributes(changes, \"testapp\", 0, 0, name=\"Author\")\n \n-    def test_add_field(self):\n+    def test_uuid_to_foreignkey_dependency(self):\n+        \"\"\"\n+        Test that changing a UUID field to a ForeignKey field creates the correct dependencies.\n+        \"\"\"\n+        # Initial state with UUIDField\n+        before = [\n+            ModelState(\"testapp1\", \"App1\", [\n+                (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+                (\"text\", models.CharField(max_length=100)),\n+                (\"another_app\", models.UUIDField(null=True, blank=True)),\n+            ]),\n+            ModelState(\"testapp2\", \"App2\", [\n+                (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+                (\"text\", models.CharField(max_length=100)),\n+            ]),\n+        ]\n+        \n+        # Changed state with ForeignKey\n+        after = [\n+            ModelState(\"testapp1\", \"App1\", [\n+                (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+                (\"text\", models.CharField(max_length=100)),\n+                (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL)),\n+            ]),\n+            ModelState(\"testapp2\", \"App2\", [\n+                (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+                (\"text\", models.CharField(max_length=100)),\n+            ]),\n+        ]\n+\n+        # Get the changes\n+        changes = self.get_changes(before, after)\n+\n+        # Ensure there's one migration in 'testapp1'\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        # Ensure the migration has an AlterField operation\n+        self.assertOperationTypes(changes, 'testapp1', 0, [\"AlterField\"])\n+        # Ensure the dependencies include 'testapp2'\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n         \"\"\"Tests autodetection of new fields.\"\"\"\n         changes = self.get_changes([self.author_empty], [self.author_name])\n         # Right number/type of migrations?\n@@ -2399,4 +2437,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-11749": "",
  "django__django-11790": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 440150b..af2abe6 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -436,8 +436,19 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         form = AuthenticationForm(None, data)\n         self.assertEqual(form.fields['username'].max_length, 254)\n         self.assertEqual(form.errors, {})\n-\n-    def test_username_field_label(self):\n+    def test_username_field_maxlength_attribute(self):\n+        # Test for a user model with a set max_length of 255\n+        data = {\n+            'username': 'u' * 255,\n+            'password': 'pwd',\n+        }\n+        form = AuthenticationForm(None, data)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 255)\n+        \n+        # Test for a user model with a default max_length of 254\n+        with override_settings(AUTH_USER_MODEL='auth_tests.IntegerUsernameUser'):\n+            form = AuthenticationForm()\n+            self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 254)\n \n         class CustomAuthenticationForm(AuthenticationForm):\n             username = CharField(label=\"Name\", max_length=75)\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..466fc71 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -247,7 +247,21 @@ class WriterTests(SimpleTestCase):\n             (\"[list, tuple, dict, set, frozenset]\", set())\n         )\n \n-    def test_serialize_lazy_objects(self):\n+    def test_serialize_enum_translations(self):\n+        class TranslatedEnum(enum.Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+\n+        # Assert if the serialization uses the enum name instead of value\n+        field = models.CharField(default=TranslatedEnum.GOOD, choices=[(m.value, m) for m in TranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('Good', migrations.test_writer.TranslatedEnum['GOOD']), \"\n+            \"('Bad', migrations.test_writer.TranslatedEnum['BAD'])], \"\n+            \"default=migrations.test_writer.TranslatedEnum['GOOD'])\"\n+        )\n         pattern = re.compile(r'^foo$')\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n         self.assertEqual(self.serialize_round_trip(lazy_pattern), pattern)\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..c094670 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,7 @@\n+\n import unittest\n from datetime import datetime\n+from unittest import mock\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -312,7 +314,32 @@ class HttpDateProcessingTests(unittest.TestCase):\n         t = 1167616461.0\n         self.assertEqual(http_date(t), 'Mon, 01 Jan 2007 01:54:21 GMT')\n \n-    def test_parsing_rfc1123(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_with_mock(self, mocked_datetime):\n+        # Mock current date to simulate different \"current\" years.\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        # Test cases with different mock current years\n+        utcnow_1 = datetime(2019, 11, 6, 8, 49, 37)\n+        utcnow_2 = datetime(2020, 11, 6, 8, 49, 37)\n+        utcnow_3 = datetime(2048, 11, 6, 8, 49, 37)\n+\n+        tests = (\n+            (utcnow_1, 'Tuesday, 31-Dec-69 08:49:37 GMT', datetime(2069, 12, 31, 8, 49, 37)),\n+            (utcnow_1, 'Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),\n+            (utcnow_1, 'Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37)),\n+            (utcnow_2, 'Wednesday, 31-Dec-70 08:49:37 GMT', datetime(2070, 12, 31, 8, 49, 37)),\n+            (utcnow_2, 'Friday, 31-Dec-71 08:49:37 GMT', datetime(1971, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+        )\n+\n+        for utcnow, rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = utcnow\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n",
  "django__django-11880": "",
  "django__django-11951": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex f2f6bbd..80a50ca 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -1,4 +1,6 @@\n+\n from operator import attrgetter\n+from math import ceil\n \n from django.db import IntegrityError, NotSupportedError, connection\n from django.db.models import FileField, Value\n",
  "django__django-11964": "diff --git a/tests/model_fields/test_charfield.py b/tests/model_fields/test_charfield.py\nindex c6162e5..ae8fb6b 100644\n--- a/tests/model_fields/test_charfield.py\n+++ b/tests/model_fields/test_charfield.py\n@@ -1,3 +1,4 @@\n+\n from unittest import skipIf\n \n from django.core.exceptions import ValidationError\n@@ -29,6 +30,24 @@ class TestCharField(TestCase):\n         self.assertEqual(p.title, 'Smile \ud83d\ude00')\n \n     def test_assignment_from_choice_enum(self):\n+        class MyChoice(models.TextChoices):\n+            FIRST_CHOICE = \"first\", \"First Choice\"\n+            SECOND_CHOICE = \"second\", \"Second Choice\"\n+\n+        class MyObject(models.Model):\n+            my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n+        # Create an object with MyChoice enum\n+        obj = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n+        obj.refresh_from_db()\n+        # Test if the field value is correctly a string\n+        self.assertIsInstance(obj.my_str_value, str)\n+        self.assertEqual(obj.my_str_value, \"first\")\n+        \n+        # Test retrieval to ensure the same behavior\n+        obj_retrieved = MyObject.objects.last()\n+        self.assertIsInstance(obj_retrieved.my_str_value, str)\n+        self.assertEqual(obj_retrieved.my_str_value, \"first\")\n         class Event(models.TextChoices):\n             C = 'Carnival!'\n             F = 'Festival!'\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..12edc38 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -148,6 +148,20 @@ class ChoicesTests(SimpleTestCase):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n \n+from django.db import models\n+from django.test import TestCase\n+\n+class OverrideGetFieldDisplayTest(TestCase):\n+    def test_overriding_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+        \n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+\n class GetFieldDisplayTests(SimpleTestCase):\n \n     def test_choices_and_field_display(self):\n",
  "django__django-12039": "",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..f9d6184 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,7 +1,9 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n from django.db.models import CharField, F, Q\n+from django.db.models.sql.where import WhereNode\n from django.db.models.expressions import SimpleCol\n from django.db.models.fields.related_lookups import RelatedIsNull\n from django.db.models.functions import Lower\n@@ -15,7 +17,32 @@ from .models import Author, Item, ObjectC, Ranking\n \n \n class TestQuery(SimpleTestCase):\n-    def test_simple_query(self):\n+    def test_iterable_lookup_value(self):\n+        # Test that lists remain lists when used in exact lookups\n+        query = Query(Item)\n+        where = query.build_where(Q(name=['a', 'b']))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        # Check that the right-hand side value is still a list\n+        self.assertEqual(name_exact.rhs, ['a', 'b'])\n+\n+    def test_tuple_lookup_value(self):\n+        # Test that tuples remain tuples when used in exact lookups\n+        query = Query(Item)\n+        where = query.build_where(Q(name=('a', 'b')))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        # Check that the right-hand side value is still a tuple\n+        self.assertEqual(name_exact.rhs, ('a', 'b'))\n+\n+    def test_set_lookup_value(self):\n+        # Test that sets remain sets when used in exact lookups\n+        query = Query(Item)\n+        where = query.build_where(Q(name={'a', 'b'}))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        # Check that the right-hand side value is still a set\n+        self.assertEqual(name_exact.rhs, {'a', 'b'})\n         query = Query(Author)\n         where = query.build_where(Q(num__gt=2))\n         lookup = where.children[0]\n",
  "django__django-12125": "",
  "django__django-12143": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 2d13234..a020882 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -843,8 +843,25 @@ class ChangeListTests(TestCase):\n         request = self.factory.post(changelist_url, data=data)\n         queryset = m._get_list_editable_queryset(request, prefix='form')\n         self.assertEqual(queryset.count(), 2)\n-\n-    def test_changelist_view_list_editable_changed_objects_uses_filter(self):\n+    def test_get_list_editable_queryset_with_special_regex_chars_in_prefix(self):\n+        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n+        Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n+        data = {\n+            'form$.^*+?-TOTAL_FORMS': '2',\n+            'form$.^*+?-INITIAL_FORMS': '2',\n+            'form$.^*+?-MIN_NUM_FORMS': '0',\n+            'form$.^*+?-MAX_NUM_FORMS': '1000',\n+            'form$.^*+?-0-uuid': str(a.pk),\n+            'form$.^*+?-0-load': '10',\n+            '_save': 'Save',\n+        }\n+        superuser = self._create_superuser('superuser')\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form$.^*+?')\n+        self.assertEqual(queryset.count(), 1)\n         \"\"\"list_editable edits use a filtered queryset to limit memory usage.\"\"\"\n         a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n         Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n",
  "django__django-12155": "",
  "django__django-12193": "diff --git a/tests/postgres_tests/test_array.py b/tests/postgres_tests/test_array.py\nindex 6228cbc..5a5e883 100644\n--- a/tests/postgres_tests/test_array.py\n+++ b/tests/postgres_tests/test_array.py\n@@ -1112,6 +1112,24 @@ class TestSplitFormWidget(PostgreSQLWidgetTestCase):\n             \"\"\"\n         )\n \n+    def test_splitarrayfield_booleanfield_checkboxes(self):\n+        \"\"\"\n+        Test that SplitArrayField with BooleanField initializes checkboxes correctly\n+        based on initial data, ensuring widgets are not 'checked' after the first\n+        True unless their data is True.\n+        \"\"\"\n+        # Create a SplitArrayWidget with a CheckboxInput and size 3\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        \n+        # Context with initial values [True, False, True]\n+        context = widget.get_context('test', [True, False, True], {})\n+        \n+        # Check that each subwidget has correct 'checked' attribute\n+        subwidgets = context['widget']['subwidgets']\n+        self.assertEqual(subwidgets[0]['attrs'], {'checked': True})\n+        self.assertEqual(subwidgets[1]['attrs'], {})\n+        self.assertEqual(subwidgets[2]['attrs'], {'checked': True})\n+\n     def test_render_attrs(self):\n         self.check_html(\n             SplitArrayWidget(forms.TextInput(), size=2),\n",
  "django__django-12209": "diff --git a/tests/serializers/models/data.py b/tests/serializers/models/data.py\nindex 946715d..2630143 100644\n--- a/tests/serializers/models/data.py\n+++ b/tests/serializers/models/data.py\n@@ -252,6 +252,10 @@ class SmallPKData(models.Model):\n # class TimePKData(models.Model):\n #    data = models.TimeField(primary_key=True)\n \n+import uuid\n+\n+class UUIDDefaultData(models.Model):\n+    data = models.UUIDField(primary_key=True, default=uuid.uuid4)\n \n class UUIDData(models.Model):\n     data = models.UUIDField(primary_key=True)\n",
  "django__django-12262": "",
  "django__django-12276": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 61f7a13..19cecb2 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import copy\n import datetime\n import json\n@@ -2430,6 +2431,24 @@ Password: <input type=\"password\" name=\"password\" required>\n             '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n         )\n \n+    def test_filefield_with_initial_data_not_required(self):\n+        class FileForm(Form):\n+            file1 = FileField(widget=FileInput, required=True)\n+\n+        # Test with no initial data (should be required)\n+        f = FileForm(auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n+        )\n+\n+        # Test with initial data (should not be required)\n+        f = FileForm(initial={'file1': 'resume.txt'}, auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n+        )\n+\n         f = FileForm(data={}, files={}, auto_id=False)\n         self.assertHTMLEqual(\n             f.as_table(),\n@@ -2478,6 +2497,24 @@ Password: <input type=\"password\" name=\"password\" required>\n             '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n         )\n \n+    def test_filefield_with_initial_data_not_required(self):\n+        class FileForm(Form):\n+            file1 = FileField(widget=FileInput, required=True)\n+\n+        # Test with no initial data (should be required)\n+        f = FileForm(auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n+        )\n+\n+        # Test with initial data (should not be required)\n+        f = FileForm(initial={'file1': 'resume.txt'}, auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n+        )\n+\n     def test_filefield_initial_callable(self):\n         class FileForm(forms.Form):\n             file1 = forms.FileField(initial=lambda: 'resume.txt')\n",
  "django__django-12304": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 6cabf01..fa4da1e 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import decimal\n import ipaddress\n@@ -5,7 +6,7 @@ import uuid\n \n from django.db import models\n from django.test import SimpleTestCase\n-from django.utils.functional import Promise\n+from django.template import Context, Template\n from django.utils.translation import gettext_lazy as _\n \n \n@@ -137,13 +138,19 @@ class ChoicesTests(SimpleTestCase):\n                 # A string is not permitted as the second argument to int().\n                 ONE = 1, 'X', 'Invalid'\n \n-        msg = \"duplicate values found in <enum 'Fruit'>: PINEAPPLE -> APPLE\"\n+        template = Template('{{ Suit.DIAMOND.label }}|{{ Suit.DIAMOND.value }}')\n+        output = template.render(Context({'Suit': Suit}))\n+        self.assertEqual(output, 'Diamond|1')\n         with self.assertRaisesMessage(ValueError, msg):\n             class Fruit(models.IntegerChoices):\n                 APPLE = 1, 'Apple'\n                 PINEAPPLE = 1, 'Pineapple'\n \n-    def test_str(self):\n+    def test_enum_in_template(self):\n+        template = Template('{% if student.year_in_school == YearInSchool.FRESHMAN %}True{% else %}False{% endif %}')\n+        context = Context({'YearInSchool': YearInSchool, 'student': {'year_in_school': YearInSchool.FRESHMAN}})\n+        output = template.render(context)\n+        self.assertEqual(output, 'True')\n         for test in [Gender, Suit, YearInSchool, Vehicle]:\n             for member in test:\n                 with self.subTest(member=member):\n",
  "django__django-12308": "",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..adddf1d 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -999,6 +999,43 @@ class OtherModelTests(SimpleTestCase):\n                 related_name='+',\n             )\n \n+    @isolate_apps('invalid_models_tests')\n+    def test_mti_with_multiple_onetoone(self):\n+        \"\"\"\n+        Test that Multiple OneToOneFields with proper parent_link setup do not\n+        raise ImproperlyConfigured error.\n+        \"\"\"\n+        class Document(models.Model):\n+            pass\n+\n+        class Picking(Document):\n+            document_ptr = models.OneToOneField(\n+                Document, on_delete=models.CASCADE, parent_link=True, related_name='+'\n+            )\n+            origin = models.OneToOneField(\n+                Document, related_name='picking', on_delete=models.PROTECT\n+            )\n+\n+        self.assertEqual(Picking.check(), [])\n+\n+    @isolate_apps('invalid_models_tests')\n+    def test_mti_with_incorrect_onetoone_order(self):\n+        \"\"\"\n+        Test that improper ordering without parent_link raises ImproperlyConfigured.\n+        \"\"\"\n+        msg = 'Add parent_link=True to invalid_models_tests.Picking.origin.'\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            class Document(models.Model):\n+                pass\n+\n+            class Picking(Document):\n+                origin = models.OneToOneField(\n+                    Document, related_name='picking', on_delete=models.PROTECT\n+                )\n+                document_ptr = models.OneToOneField(\n+                    Document, on_delete=models.CASCADE, parent_link=True, related_name='+'\n+                )\n+                \n         class ShippingMethodPrice(models.Model):\n             method = models.ForeignKey(ShippingMethod, models.CASCADE)\n             to_country = models.ForeignKey(Country, models.CASCADE)\n",
  "django__django-12419": "diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py\nindex 7af62eb..d166976 100644\n--- a/tests/middleware/test_security.py\n+++ b/tests/middleware/test_security.py\n@@ -231,7 +231,13 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         \"\"\"\n         self.assertNotIn('Referrer-Policy', self.process_response())\n \n-    def test_referrer_policy_on(self):\n+    @override_settings(SECURE_REFERRER_POLICY='same-origin')\n+    def test_referrer_policy_default(self):\n+        \"\"\"\n+        By default, the Referrer-Policy should be 'same-origin'.\n+        \"\"\"\n+        response = self.process_response()\n+        self.assertEqual(response['Referrer-Policy'], 'same-origin')\n         \"\"\"\n         With SECURE_REFERRER_POLICY set to a valid value, the middleware adds a\n         \"Referrer-Policy\" header to the response.\n@@ -247,11 +253,11 @@ class SecurityMiddlewareTest(SimpleTestCase):\n             with self.subTest(value=value), override_settings(SECURE_REFERRER_POLICY=value):\n                 self.assertEqual(self.process_response()['Referrer-Policy'], expected)\n \n-    @override_settings(SECURE_REFERRER_POLICY='strict-origin')\n+    @override_settings(SECURE_REFERRER_POLICY='same-origin')\n     def test_referrer_policy_already_present(self):\n         \"\"\"\n         The middleware will not override a \"Referrer-Policy\" header already\n         present in the response.\n         \"\"\"\n         response = self.process_response(headers={'Referrer-Policy': 'unsafe-url'})\n-        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n",
  "django__django-12663": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 872551b..cb2f7c6 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -19,12 +19,13 @@ from django.db.models.functions import (\n )\n from django.db.models.sql import constants\n from django.db.models.sql.datastructures import Join\n-from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n+from django.test import TestCase\n+from django.utils.functional import SimpleLazyObject\n from django.test.utils import Approximate, isolate_apps\n \n from .models import (\n     UUID, UUIDPK, Company, Employee, Experiment, Number, RemoteEmployee,\n-    Result, SimulationRun, Time,\n+    Result, SimulationRun, Time, Manager\n )\n \n \n",
  "django__django-12708": "",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..11ccab0 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -18,6 +18,7 @@ from django.db.models import CharField, DateField, DateTimeField, UUIDField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n+from django.db.models import ManyToManyField\n \n from .models import (\n     Advisor, Album, Band, Bee, Car, Company, Event, Honeycomb, Individual,\n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..b0ffe95 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,7 +172,7 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n@@ -181,4 +181,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 17e707b..ed3e04a 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2444,7 +2444,31 @@ class AutodetectorTests(TestCase):\n         self.assertNumberMigrations(changes, 'testapp', 1)\n         self.assertOperationTypes(changes, 'testapp', 0, [\"AddField\", \"AddField\"])\n         self.assertOperationAttributes(changes, 'testapp', 0, 0)\n-\n+    def test_add_model_with_field_removed_from_base_model(self):\n+        \"\"\"\n+        Removing a base field takes place before adding a new inherited model\n+        that has a field with the same name.\n+        \"\"\"\n+        before = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('title', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        after = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+            ]),\n+            ModelState('app', 'book', [\n+                ('title', models.CharField(max_length=200)),\n+            ], bases=('app.readable',)),\n+        ]\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'app', 1)\n+        self.assertOperationTypes(changes, 'app', 0, ['RemoveField', 'CreateModel'])\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='title', model_name='readable')\n+        self.assertOperationAttributes(changes, 'app', 0, 1, name='book')\n+        \n     def test_mti_inheritance_model_removal(self):\n         Animal = ModelState('app', 'Animal', [\n             (\"id\", models.AutoField(primary_key=True)),\n@@ -2453,4 +2477,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..4dac6bc 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -5,6 +5,8 @@ from operator import attrgetter\n \n from django.core.exceptions import FieldError\n from django.db import connection\n+from django.db import connection, models\n+from django.test.utils import isolate_apps\n from django.db.models import Exists, Max, OuterRef\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n@@ -194,7 +196,41 @@ class LookupTests(TestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             Article.objects.in_bulk([self.au1], field_name='author')\n \n-    def test_values(self):\n+    @isolate_apps('lookup')\n+    def test_in_bulk_unique_constraint(self):\n+        class TestModel(models.Model):\n+            unique_field = models.CharField(max_length=50)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(fields=['unique_field'], name='unique_field_constraint'),\n+                ]\n+\n+        # Create instances\n+        instance_1 = TestModel.objects.create(unique_field='value1')\n+        instance_2 = TestModel.objects.create(unique_field='value2')\n+        TestModel.objects.create(unique_field='value3')\n+\n+        # Test in_bulk with unique constraint\n+        self.assertEqual(\n+            TestModel.objects.in_bulk(field_name='unique_field'),\n+            {\n+                'value1': instance_1,\n+                'value2': instance_2,\n+            }\n+        )\n+\n+    @isolate_apps('lookup')\n+    def test_in_bulk_non_unique_constraint_field(self):\n+        class TestModelNonUnique(models.Model):\n+            non_unique_field = models.CharField(max_length=50)\n+\n+        TestModelNonUnique.objects.create(non_unique_field='value1')\n+        TestModelNonUnique.objects.create(non_unique_field='value2')\n+\n+        msg = \"in_bulk()'s field_name must be a unique field but 'non_unique_field' isn't.\"\n+        with self.assertRaisesMessage(ValueError, msg):\n+            TestModelNonUnique.objects.in_bulk(field_name='non_unique_field')\n         # values() returns a list of dictionaries instead of object instances --\n         # and you can specify which fields you want to retrieve.\n         self.assertSequenceEqual(\n",
  "django__django-12858": "",
  "django__django-13012": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 87c0945..67b8d28 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1820,11 +1820,30 @@ class CombinableTests(SimpleTestCase):\n     def test_or(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             Combinable() | Combinable()\n-\n-    def test_reversed_and(self):\n+    \n+    class ExpressionWrapperTests(SimpleTestCase):\n+        def test_empty_group_by(self):\n+            expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+            self.assertEqual(expr.get_group_by_cols(alias=None), [])\n+\n+        def test_non_empty_group_by(self):\n+            expr = ExpressionWrapper(Lower(Value('f')), output_field=IntegerField())\n+            self.assertEqual(expr.get_group_by_cols(alias=None), [expr.expression])\n+\n+        def test_constant_expression_in_group_by(self):\n+            \"\"\"Test to ensure constant expressions are not included in GROUP BY.\"\"\"\n+            expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+            group_by_cols = expr.get_group_by_cols(alias=None)\n+            self.assertNotIn(Value(3), group_by_cols)\n+\n+        def test_non_constant_expression_in_group_by(self):\n+            \"\"\"Test to verify non-constant expressions are rightly included.\"\"\"\n+            expr = ExpressionWrapper(Lower(Value('f')), output_field=IntegerField())\n+            group_by_cols = expr.get_group_by_cols(alias=None)\n+            self.assertIn(expr.expression, group_by_cols)\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             object() & Combinable()\n \n     def test_reversed_or(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n-            object() | Combinable()\n+            object() | Combinable()\n",
  "django__django-13028": "diff --git a/tests/queries/models.py b/tests/queries/models.py\nindex a43cfb4..8390091 100644\n--- a/tests/queries/models.py\n+++ b/tests/queries/models.py\n@@ -68,6 +68,7 @@ class ExtraInfo(models.Model):\n     note = models.ForeignKey(Note, models.CASCADE, null=True)\n     value = models.IntegerField(null=True)\n     date = models.ForeignKey(DateTimePK, models.SET_NULL, null=True)\n+    filterable = models.BooleanField(default=True)\n \n     class Meta:\n         ordering = ['info']\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..a5c4a6c 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,6 +343,47 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_self_referencing_fk_order_by(self):\n+        # Setting up models\n+        one1 = OneModel.objects.create(oneval=1)\n+        one2 = OneModel.objects.create(oneval=2, root=one1)\n+        one3 = OneModel.objects.create(oneval=3, root=one2)\n+        two1 = TwoModel.objects.create(record=one1, twoval=10)\n+        two2 = TwoModel.objects.create(record=one2, twoval=20)\n+        two3 = TwoModel.objects.create(record=one3, twoval=30)\n+        \n+        # This query should order by record__root__id ascending\n+        qs = TwoModel.objects.filter(record__oneval__in=[1, 2, 3]).order_by(\"record__root_id\")\n+        self.assertQuerysetEqual(\n+            qs,\n+            [two1, two2, two3],\n+            lambda x: x\n+        )\n+        \n+        # This query should reproduce the issue: unexpected descending order due to Meta ordering\n+        qs = TwoModel.objects.filter(record__oneval__in=[1, 2, 3]).order_by(\"record__root\")\n+        self.assertQuerysetEqual(\n+            qs,\n+            [two3, two2, two1],\n+            lambda x: x\n+        )\n+\n+        # Workaround with annotation\n+        qs = TwoModel.objects.filter(record__oneval__in=[1, 2, 3]).annotate(root_id=F(\"record__root_id\")).order_by(\"root_id\")\n+        self.assertQuerysetEqual(\n+            qs,\n+            [two1, two2, two3],\n+            lambda x: x\n+        )\n+\n+        # Inverted sort order\n+        qs = TwoModel.objects.filter(record__oneval__in=[1, 2, 3]).order_by(\"-record__root_id\")\n+        self.assertQuerysetEqual(\n+            qs,\n+            [two3, two2, two1],\n+            lambda x: x\n+        )\n+\n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n@@ -353,6 +394,47 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n+\n+    def test_self_referencing_fk_order_by(self):\n+        # Setting up models\n+        one1 = OneModel.objects.create(oneval=1)\n+        one2 = OneModel.objects.create(oneval=2, root=one1)\n+        one3 = OneModel.objects.create(oneval=3, root=one2)\n+        two1 = TwoModel.objects.create(record=one1, twoval=10)\n+        two2 = TwoModel.objects.create(record=one2, twoval=20)\n+        two3 = TwoModel.objects.create(record=one3, twoval=30)\n+        \n+        # This query should order by record__root__id ascending\n+        qs = TwoModel.objects.filter(record__oneval__in=[1, 2, 3]).order_by(\"record__root_id\")\n+        self.assertQuerysetEqual(\n+            qs,\n+            [two1, two2, two3],\n+            lambda x: x\n+        )\n+        \n+        # This query should reproduce the issue: unexpected descending order due to Meta ordering\n+        qs = TwoModel.objects.filter(record__oneval__in=[1, 2, 3]).order_by(\"record__root\")\n+        self.assertQuerysetEqual(\n+            qs,\n+            [two3, two2, two1],\n+            lambda x: x\n+        )\n+\n+        # Workaround with annotation\n+        qs = TwoModel.objects.filter(record__oneval__in=[1, 2, 3]).annotate(root_id=F(\"record__root_id\")).order_by(\"root_id\")\n+        self.assertQuerysetEqual(\n+            qs,\n+            [two1, two2, two3],\n+            lambda x: x\n+        )\n+\n+        # Inverted sort order\n+        qs = TwoModel.objects.filter(record__oneval__in=[1, 2, 3]).order_by(\"-record__root_id\")\n+        self.assertQuerysetEqual(\n+            qs,\n+            [two3, two2, two1],\n+            lambda x: x\n+        )\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline').asc()), [\n                 \"Article 1\",\n",
  "django__django-13089": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex e11856f..c601d66 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -609,6 +609,42 @@ class BaseCacheTests:\n         for i in range(1, initial_count):\n             cull_cache.set('cull%d' % i, 'value', 1000)\n         count = 0\n+\n+    def test_cull_no_data_returned(self):\n+        \"\"\"\n+        Test the _cull method when the cursor executes a query\n+        that does not return any data (cursor.fetchone() returns None).\n+        \"\"\"\n+        try:\n+            cull_cache = caches['cull']\n+        except InvalidCacheBackendError:\n+            self.skipTest(\"Culling isn't implemented.\")\n+        \n+        # Temporarily set max entries so cull will be triggered\n+        old_max_entries = cull_cache._max_entries\n+        cull_cache._max_entries = 1\n+\n+        try:\n+            # Inserting a single key to ensure the cache is not empty\n+            cull_cache.set('test_key', 'value', 1000)\n+            \n+            # Manually invoke the _cull with a mock cursor that returns no data\n+            with connection.cursor() as cursor:\n+                # Mock the cursor's fetchone method to return None\n+                original_fetchone = cursor.fetchone\n+                cursor.fetchone = lambda: None\n+\n+                # Call the cull method\n+                cull_cache._cull('default', cursor, timezone.now())\n+                \n+                # Check that the cache still has the original key\n+                self.assertIs(cull_cache.has_key('test_key'), True)\n+                \n+                # Restore the original fetchone method\n+                cursor.fetchone = original_fetchone\n+\n+        finally:\n+            cull_cache._max_entries = old_max_entries\n         # Count how many keys are left in the cache.\n         for i in range(1, initial_count):\n             if cull_cache.has_key('cull%d' % i):\n",
  "django__django-13109": "diff --git a/tests/model_forms/models.py b/tests/model_forms/models.py\nindex ff8ad74..0aeaa23 100644\n--- a/tests/model_forms/models.py\n+++ b/tests/model_forms/models.py\n@@ -28,8 +28,20 @@ class Category(models.Model):\n         return self.__str__()\n \n \n+class WriterManager(models.Manager):\n+    def get_queryset(self):\n+        qs = super().get_queryset()\n+        return qs.filter(archived=False)\n+\n class Writer(models.Model):\n     name = models.CharField(max_length=50, help_text='Use both first and last names.')\n+    archived = models.BooleanField(default=False)\n+\n+    objects = WriterManager()\n+\n+    class Meta:\n+        ordering = ('name',)\n+    name = models.CharField(max_length=50, help_text='Use both first and last names.')\n \n     class Meta:\n         ordering = ('name',)\n",
  "django__django-13112": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 081eff8..a6a14a1 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -867,6 +867,61 @@ class StateTests(SimpleTestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             project_state.apps\n \n+    def test_reference_mixed_case_app_label(self):\n+        \"\"\"Test ForeignKey with mixed-case app label.\"\"\"\n+        new_apps = Apps()\n+\n+        class Author(models.Model):\n+            class Meta:\n+                app_label = 'MiXedCase_migrations'\n+                apps = new_apps\n+\n+        class Book(models.Model):\n+            author = models.ForeignKey(Author, models.CASCADE)\n+\n+            class Meta:\n+                app_label = 'MiXedCase_migrations'\n+                apps = new_apps\n+\n+        class Magazine(models.Model):\n+            authors = models.ManyToManyField(Author)\n+\n+            class Meta:\n+                app_label = 'MiXedCase_migrations'\n+                apps = new_apps\n+\n+        project_state = ProjectState()\n+        project_state.add_model(ModelState.from_model(Author))\n+        project_state.add_model(ModelState.from_model(Book))\n+        project_state.add_model(ModelState.from_model(Magazine))\n+        self.assertEqual(len(project_state.apps.get_models()), 3)\n+\n+    def test_foreign_key_case_insensitivity(self):\n+        \"\"\"Test case insensitivity of ForeignKey relation with mixed-case app label.\"\"\"\n+        new_apps = Apps()\n+\n+        class Category(models.Model):\n+            class Meta:\n+                app_label = 'MiXedCase_migrations'\n+                apps = new_apps\n+\n+        class Content(models.Model):\n+            category = models.ForeignKey(Category, on_delete=models.CASCADE)\n+\n+            class Meta:\n+                app_label = 'MiXedCase_migrations'\n+                apps = new_apps\n+\n+        project_state = ProjectState()\n+        project_state.add_model(ModelState.from_model(Category))\n+        project_state.add_model(ModelState.from_model(Content))\n+\n+        # Ensure no ValueError is raised due to mixed-case app label\n+        try:\n+            self.assertEqual(len(project_state.apps.get_models()), 2)\n+        except ValueError as e:\n+            self.fail(f\"ValueError raised with message: {e}\")\n+\n     def test_real_apps(self):\n         \"\"\"\n         Including real apps can resolve dangling FK errors.\n",
  "django__django-13121": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex a684d7e..1abb495 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1210,13 +1210,85 @@ class ExpressionOperatorTests(TestCase):\n         self.assertEqual(Number.objects.get(pk=self.n.pk).integer, 1764)\n         self.assertEqual(Number.objects.get(pk=self.n.pk).float, Approximate(61.02, places=2))\n \n-    @unittest.skipIf(connection.vendor == 'oracle', \"Oracle doesn't support bitwise XOR.\")\n+    from datetime import timedelta\n+    from django.db.models import F\n+    from django.test import TestCase\n+\n+    class TestDurationExpressions(TestCase):\n+        def setUp(self):\n+            self.deltas = [timedelta(days=1), timedelta(hours=5, minutes=30), timedelta(seconds=45)]\n+            Experiment.objects.create(estimated_time=timedelta(days=2))\n+            Experiment.objects.create(estimated_time=timedelta(hours=10))\n+\n+        def test_duration_expressions(self):\n+            for delta in self.deltas:\n+                qs = Experiment.objects.annotate(duration=F('estimated_time') + delta)\n+                for obj in qs:\n+                    self.assertEqual(obj.duration, obj.estimated_time + delta)\n+\n+        def test_duration_expressions_negative(self):\n+            \"\"\" Test duration field expressions with negative timedelta \"\"\"\n+            negative_delta = timedelta(days=-1)\n+            qs = Experiment.objects.annotate(duration=F('estimated_time') + negative_delta)\n+            for obj in qs:\n+                self.assertEqual(obj.duration, obj.estimated_time + negative_delta)\n+\n+        def test_duration_expressions_zero(self):\n+            \"\"\" Test duration field expressions with zero timedelta \"\"\"\n+            zero_delta = timedelta(0)\n+            qs = Experiment.objects.annotate(duration=F('estimated_time') + zero_delta)\n+            for obj in qs:\n+                self.assertEqual(obj.duration, obj.estimated_time + zero_delta)\n+\n+        @unittest.skipUnless(connection.vendor in ['sqlite', 'mysql'], \"Test specific for SQLite and MySQL\")\n+        def test_sqlite_mysql_specific_duration(self):\n+            \"\"\" Test specific edge cases for SQLite and MySQL \"\"\"\n+            special_delta = timedelta(microseconds=1)\n+            qs = Experiment.objects.annotate(duration=F('estimated_time') + special_delta)\n+            for obj in qs:\n+                self.assertEqual(obj.duration, obj.estimated_time + special_delta)\n     def test_lefthand_bitwise_xor(self):\n         Number.objects.update(integer=F('integer').bitxor(48))\n         self.assertEqual(Number.objects.get(pk=self.n.pk).integer, 26)\n         self.assertEqual(Number.objects.get(pk=self.n1.pk).integer, -26)\n \n-    @unittest.skipIf(connection.vendor == 'oracle', \"Oracle doesn't support bitwise XOR.\")\n+    from datetime import timedelta\n+    from django.db.models import F\n+    from django.test import TestCase\n+\n+    class TestDurationExpressions(TestCase):\n+        def setUp(self):\n+            self.deltas = [timedelta(days=1), timedelta(hours=5, minutes=30), timedelta(seconds=45)]\n+            Experiment.objects.create(estimated_time=timedelta(days=2))\n+            Experiment.objects.create(estimated_time=timedelta(hours=10))\n+\n+        def test_duration_expressions(self):\n+            for delta in self.deltas:\n+                qs = Experiment.objects.annotate(duration=F('estimated_time') + delta)\n+                for obj in qs:\n+                    self.assertEqual(obj.duration, obj.estimated_time + delta)\n+\n+        def test_duration_expressions_negative(self):\n+            \"\"\" Test duration field expressions with negative timedelta \"\"\"\n+            negative_delta = timedelta(days=-1)\n+            qs = Experiment.objects.annotate(duration=F('estimated_time') + negative_delta)\n+            for obj in qs:\n+                self.assertEqual(obj.duration, obj.estimated_time + negative_delta)\n+\n+        def test_duration_expressions_zero(self):\n+            \"\"\" Test duration field expressions with zero timedelta \"\"\"\n+            zero_delta = timedelta(0)\n+            qs = Experiment.objects.annotate(duration=F('estimated_time') + zero_delta)\n+            for obj in qs:\n+                self.assertEqual(obj.duration, obj.estimated_time + zero_delta)\n+\n+        @unittest.skipUnless(connection.vendor in ['sqlite', 'mysql'], \"Test specific for SQLite and MySQL\")\n+        def test_sqlite_mysql_specific_duration(self):\n+            \"\"\" Test specific edge cases for SQLite and MySQL \"\"\"\n+            special_delta = timedelta(microseconds=1)\n+            qs = Experiment.objects.annotate(duration=F('estimated_time') + special_delta)\n+            for obj in qs:\n+                self.assertEqual(obj.duration, obj.estimated_time + special_delta)\n     def test_lefthand_bitwise_xor_null(self):\n         employee = Employee.objects.create(firstname='John', lastname='Doe')\n         Employee.objects.update(salary=F('salary').bitxor(48))\n",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..f2cb87b 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1627,7 +1627,11 @@ class FTimeDeltaTests(TestCase):\n         for e in qs:\n             self.assertEqual(e.delta, delta)\n \n-    def test_duration_with_datetime(self):\n+    @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_direct_datetime_field_subtraction(self):\n+        queryset = Experiment.objects.annotate(delta=F('end') - F('start'))\n+        for experiment in queryset:\n+            self.assertEqual(experiment.delta, experiment.end - experiment.start)\n         # Exclude e1 which has very high precision so we can test this on all\n         # backends regardless of whether or not it supports\n         # microsecond_precision.\n",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..f957ca6 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,5 +1,8 @@\n import operator\n \n+from django.forms import ModelForm, ModelMultipleChoiceField\n+from .models import Publication, Article\n+\n from django.db import DatabaseError, NotSupportedError, connection\n from django.db.models import Exists, F, IntegerField, OuterRef, Value\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n@@ -39,7 +42,12 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.intersection(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n-    @skipUnlessDBFeature('supports_select_difference')\n+    def test_union_none_behavior(self):\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        qs3 = qs1.union(qs2)\n+        self.assertNumbersEqual(qs3, [0, 1, 8, 9], ordered=False)\n+        self.assertSequenceEqual(qs3.none(), [])\n     def test_simple_difference(self):\n         qs1 = Number.objects.filter(num__lte=5)\n         qs2 = Number.objects.filter(num__lte=4)\n",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..223149f 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -330,7 +330,12 @@ class SessionTestsMixin:\n         # The failed decode is logged.\n         self.assertIn('corrupted', cm.output[0])\n \n-    def test_actual_expiry(self):\n+    def test_default_hashing_algorithm_legacy_decode(self):\n+        # Verifies that setting DEFAULT_HASHING_ALGORITHM to 'sha1' allows legacy decoding.\n+        with override_settings(DEFAULT_HASHING_ALGORITHM='sha1'):\n+            data = {'a test key': 'a test value'}\n+            encoded = self.session.encode(data)\n+            self.assertEqual(self.session._legacy_decode(encoded), data)\n         # this doesn't work with JSONSerializer (serializing timedelta)\n         with override_settings(SESSION_SERIALIZER='django.contrib.sessions.serializers.PickleSerializer'):\n             self.session = self.backend()  # reinitialize after overriding settings\n",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..62d93b2 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -8,7 +8,8 @@ from django.test import (\n from django.test.utils import require_jinja2\n from django.urls import resolve\n from django.utils.deprecation import RemovedInDjango40Warning\n-from django.views.generic import RedirectView, TemplateView, View\n+from django.shortcuts import get_object_or_404\n+from .models import Artist\n \n from . import views\n \n@@ -590,7 +591,41 @@ class DeprecationTests(SimpleTestCase):\n         self.assertEqual(response.context['key'], 'value')\n         self.assertIsInstance(response.context['view'], View)\n \n-    def test_template_params_warning(self):\n+    def test_offer_view_template_lazyobject_handling(self):\n+        \"\"\"Test that offer_slug when passed as SimpleLazyObject does not cause crash.\"\"\"\n+        class OfferView(TemplateView):\n+            template_name = 'generic_views/about.html'\n+\n+            def get_context_data(self, **kwargs):\n+                offer_slug = kwargs.get(\"offer_slug\", \"\")\n+                # Emulate the behavior of SimpleLazyObject\n+                offer_slug = str(offer_slug)  # Convert to str to simulate fix\n+                offer = get_object_or_404(Artist, name=offer_slug)\n+                return {\"offer\": offer, \"offer_slug\": offer_slug}\n+\n+        # Creating an artist object to be fetched\n+        artist = Artist.objects.create(name='Pablo Picasso')\n+        # Simulate request with offer_slug as SimpleLazyObject\n+        response = OfferView.as_view()(self.rf.get('/'), offer_slug=artist.name)\n+        self.assertEqual(response.context_data['offer'], artist)\n+        self.assertEqual(response.context_data['offer_slug'], artist.name)\n+\n+    def test_offer_view_template_lazyobject_failure(self):\n+        \"\"\"Test that not converting SimpleLazyObject causes failure.\"\"\"\n+        class OfferView(TemplateView):\n+            template_name = 'generic_views/about.html'\n+\n+            def get_context_data(self, **kwargs):\n+                offer_slug = kwargs.get(\"offer_slug\", \"\")\n+                # Do not convert to str to simulate failure\n+                offer = get_object_or_404(Artist, name=offer_slug)\n+                return {\"offer\": offer, \"offer_slug\": offer_slug}\n+\n+        # Creating an artist object to be fetched\n+        artist = Artist.objects.create(name='Vincent van Gogh')\n+        with self.assertRaises(TypeError):\n+            # Simulate request with offer_slug as SimpleLazyObject without conversion\n+            OfferView.as_view()(self.rf.get('/'), offer_slug=artist.name)\n         response = self.client.get('/template/custom/bar1/bar2/')\n         self.assertEqual(response.status_code, 200)\n         msg = (\n",
  "django__django-13315": "",
  "django__django-13343": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex a5ab3a0..8928478 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -29,7 +29,7 @@ from django.test.utils import requires_tz_support\n from django.urls import NoReverseMatch, reverse_lazy\n from django.utils import timezone\n \n-from .models import Storage, temp_storage, temp_storage_location\n+from .models import Storage, callable_storage, temp_storage, temp_storage_location\n \n FILE_SUFFIX_REGEX = '[A-Za-z0-9]{7}'\n \n@@ -906,6 +906,16 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         obj = FileField(storage=GetStorage)\n         self.assertIsInstance(obj.storage, BaseStorage)\n \n+    def test_deconstruction_callable_storage(self):\n+        \"\"\"\n+        Test that the deconstruction of a FileField with a callable\n+        storage parameter returns the callable itself, not the evaluated value.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field('storage_callable').deconstruct()\n+        storage = kwargs['storage']\n+        self.assertIs(storage, callable_storage)\n+\n     def test_callable_storage_file_field_in_model(self):\n         obj = Storage()\n         self.assertEqual(obj.storage_callable.storage, temp_storage)\n",
  "django__django-13346": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex b918d5c..41d00ce 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -616,6 +616,23 @@ class TestQuerying(TestCase):\n             (['bar'], [self.objs[7]]),\n             ('ar', []),\n         ]\n+\n+    def test_key_in(self):\n+        # Tests for the issue described with JSONField and __in lookup.\n+        tests = [\n+            # Test when key transform is used with __in and expecting non-empty results.\n+            ('value__key__in', [0], self.objs_with_key_value_0),\n+            ('value__key__in', [0, 1], self.objs_with_key_value_0_1),\n+            # Test when key transform is used normally without __in.\n+            ('value__key', 0, self.objs_with_key_value_0),\n+            ('value__key', 1, self.objs_with_key_value_1),\n+        ]\n+        for lookup, value, expected in tests:\n+            with self.subTest(lookup=lookup, value=value):\n+                self.assertSequenceEqual(\n+                    NullableJSONModel.objects.filter(**{lookup: value}),\n+                    expected,\n+                )\n         for value, expected in tests:\n             with self.subTest(value=value):\n                 self.assertSequenceEqual(\n",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..e01b3f1 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -20,6 +20,10 @@ from django.test import (\n from django.utils import timezone\n \n from ..models import Author, DTModel, Fan\n+import pytz\n+from datetime import datetime\n+from django.db.models import Count\n+from django.utils import timezone\n \n \n def truncate_to(value, kind, tzinfo=None):\n",
  "django__django-13401": "",
  "django__django-13410": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 1285e22..12cbfbf 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -1,3 +1,32 @@\n+\n+class FileLockTestCase(unittest.TestCase):\n+    def test_exclusive_lock(self):\n+        # Path to a temporary file for testing.\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'wb') as f:\n+            f.write(b'Test content')\n+\n+        with open(file_path) as f1, open(file_path) as f2:\n+            self.assertIs(locks.lock(f1, locks.LOCK_EX), True)\n+            self.assertIs(locks.lock(f2, locks.LOCK_EX | locks.LOCK_NB), False)\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), False)\n+            self.assertIs(locks.unlock(f1), True)\n+\n+    def test_shared_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path) as f1, open(file_path) as f2:\n+            self.assertIs(locks.lock(f1, locks.LOCK_SH), True)\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), True)\n+            self.assertIs(locks.unlock(f1), True)\n+            self.assertIs(locks.unlock(f2), True)\n+\n+    def test_lock_unlock_exceptions(self):\n+        # Test handling of OSError during locking and unlocking\n+        with open(__file__) as f:\n+            # Using a file that is not writable to simulate OSError\n+            self.assertRaises(OSError, locks.lock, f, locks.LOCK_EX)\n+            self.assertRaises(OSError, locks.unlock, f)\n+\n import errno\n import gzip\n import os\n@@ -8,7 +37,8 @@ from io import BytesIO, StringIO, TextIOWrapper\n from pathlib import Path\n from unittest import mock\n \n-from django.core.files import File\n+from django.core.files import File, locks\n+from pathlib import Path\n from django.core.files.base import ContentFile\n from django.core.files.move import file_move_safe\n from django.core.files.temp import NamedTemporaryFile\n",
  "django__django-13417": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 8130de5..8b7640a 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2084,6 +2084,27 @@ class QuerysetOrderedTests(unittest.TestCase):\n         self.assertIs(qs.ordered, False)\n         self.assertIs(qs.order_by('num_notes').ordered, True)\n \n+    def test_annotated_default_ordering(self):\n+        qs = Annotation.objects.annotate(num_notes=Count('notes'))\n+        self.assertIs(qs.ordered, False)\n+        self.assertIs(qs.order_by('notes').ordered, True)\n+\n+    def test_annotated_values_default_ordering(self):\n+        qs = Annotation.objects.values('notes').annotate(num_notes=Count('notes'))\n+        self.assertIs(qs.ordered, False)\n+        self.assertIs(qs.order_by('notes').ordered, True)\n+\n+    def test_group_by_with_meta_ordering(self):\n+        class GroupByTestModel(models.Model):\n+            name = models.CharField(max_length=100)\n+            class Meta:\n+                ordering = ['name']\n+\n+        qs = GroupByTestModel.objects.annotate(Count('id')).all()\n+        self.assertIs(qs.ordered, False)\n+        qs_with_order = qs.order_by('name')\n+        self.assertIs(qs_with_order.ordered, True)\n+\n \n @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n class SubqueryTests(TestCase):\n",
  "django__django-13516": "",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..579218c 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,8 +1,10 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n+from .with_custom_email_field import CustomEmailField\n from django.test import TestCase\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n@@ -37,7 +39,26 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n-    def test_timeout(self):\n+    def test_token_with_different_email(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                self.assertIs(p0.check_token(user, tk1), False)\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n         # the value of 'now'.\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..09c7142 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,3 +1,4 @@\n+\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n@@ -7,6 +8,7 @@ from django.db import models\n from django.test import (\n     SimpleTestCase, override_settings, override_system_checks,\n )\n+from django.db.models import Q, UniqueConstraint\n from django.test.utils import isolate_apps\n \n from .models import CustomUserNonUniqueUsername\n@@ -138,6 +140,29 @@ class ModelsPermissionsChecksTests(SimpleTestCase):\n             ),\n         ])\n \n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserUniqueConstraintWithCondition')\n+    def test_username_unique_with_model_constraint_condition(self):\n+        \"\"\"\n+        Test a user model with a UniqueConstraint that includes a condition.\n+        This should not raise auth.E003, as the unique constraint satisfies the uniqueness requirement.\n+        \"\"\"\n+        class CustomUserUniqueConstraintWithCondition(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(\n+                        fields=['username'],\n+                        name='username_unique_with_condition',\n+                        condition=Q(password__isnull=False),\n+                    ),\n+                ]\n+\n+        # There should be no errors when running checks since the constraint covers the uniqueness.\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [])\n+\n     def test_non_clashing_custom_permissions(self):\n         class Checked(models.Model):\n             class Meta:\n",
  "django__django-13569": "",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..e3541a7 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -7,6 +8,7 @@ from decimal import Decimal\n from unittest import mock\n \n from django.core.exceptions import FieldError\n+from collections import namedtuple\n from django.db import DatabaseError, NotSupportedError, connection\n from django.db.models import (\n     AutoField, Avg, BinaryField, BooleanField, Case, CharField, Count,\n@@ -815,7 +817,48 @@ class IterableLookupInnerExpressionsTests(TestCase):\n         Company.objects.create(name='5060 Ltd', num_employees=50, num_chairs=60, ceo=ceo)\n         Company.objects.create(name='99300 Ltd', num_employees=99, num_chairs=300, ceo=ceo)\n \n-    def test_in_lookup_allows_F_expressions_and_expressions_for_integers(self):\n+    def test_range_lookup_namedtuple(self):\n+        # Test the resolution of named tuples as range arguments.\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertQuerysetEqual(\n+            qs,\n+            ['<Company: 99300 Ltd>'],\n+            ordered=False\n+        )\n+\n+    def test_range_lookup_namedtuple_different_order(self):\n+        # Test named tuple with different order of arguments.\n+        EmployeeRange = namedtuple('EmployeeRange', ['max', 'min'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(max=100, min=51),\n+        )\n+        self.assertQuerysetEqual(\n+            qs,\n+            ['<Company: 99300 Ltd>'],\n+            ordered=False\n+        )\n+\n+    def test_range_lookup_regular_tuple(self):\n+        # Test regular tuples to ensure they still work.\n+        qs = Company.objects.filter(\n+            num_employees__range=(51, 100),\n+        )\n+        self.assertQuerysetEqual(\n+            qs,\n+            ['<Company: 99300 Ltd>'],\n+            ordered=False\n+        )\n+\n+    def test_range_lookup_fail_on_insufficient_arguments(self):\n+        # Test that insufficient arguments in namedtuple raise an error.\n+        EmployeeRange = namedtuple('EmployeeRange', ['min', 'max'])\n+        with self.assertRaises(TypeError):\n+            Company.objects.filter(\n+                num_employees__range=EmployeeRange(min=51),\n+            )\n         # __in lookups can use F() expressions for integers.\n         queryset = Company.objects.filter(num_employees__in=([F('num_chairs') - 10]))\n         self.assertQuerysetEqual(queryset, ['<Company: 5060 Ltd>'], ordered=False)\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..4cca3ba 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -19,18 +19,127 @@ from django.conf import settings\n from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n )\n+from unittest import mock\n+\n+class ExecuteFromCommandLine(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_prog_name_with_incorrect_sys_argv(self):\n+        \"\"\"\n+        Ensure that the program name is derived correctly even when sys.argv[0]\n+        is None or incorrect.\n+        \"\"\"\n+        args = ['help', 'check']\n+        incorrect_sys_argv = [None] + args\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', incorrect_sys_argv):\n+                execute_from_command_line(['custom-admin'] + args)\n+        self.assertIn('usage: custom-admin check', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n from django.core.management.commands.loaddata import Command as LoaddataCommand\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n )\n+from unittest import mock\n+\n+class ExecuteFromCommandLine(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_prog_name_with_incorrect_sys_argv(self):\n+        \"\"\"\n+        Ensure that the program name is derived correctly even when sys.argv[0]\n+        is None or incorrect.\n+        \"\"\"\n+        args = ['help', 'check']\n+        incorrect_sys_argv = [None] + args\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', incorrect_sys_argv):\n+                execute_from_command_line(['custom-admin'] + args)\n+        self.assertIn('usage: custom-admin check', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n from django.core.management.commands.testserver import (\n     Command as TestserverCommand,\n )\n+from unittest import mock\n+\n+class ExecuteFromCommandLine(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_prog_name_with_incorrect_sys_argv(self):\n+        \"\"\"\n+        Ensure that the program name is derived correctly even when sys.argv[0]\n+        is None or incorrect.\n+        \"\"\"\n+        args = ['help', 'check']\n+        incorrect_sys_argv = [None] + args\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', incorrect_sys_argv):\n+                execute_from_command_line(['custom-admin'] + args)\n+        self.assertIn('usage: custom-admin check', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n from django.db import ConnectionHandler, connection\n from django.db.migrations.recorder import MigrationRecorder\n+from django.test.utils import captured_stderr, captured_stdout\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n+from unittest import mock\n+\n+class ExecuteFromCommandLine(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_prog_name_with_incorrect_sys_argv(self):\n+        \"\"\"\n+        Ensure that the program name is derived correctly even when sys.argv[0]\n+        is None or incorrect.\n+        \"\"\"\n+        args = ['help', 'check']\n+        incorrect_sys_argv = [None] + args\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', incorrect_sys_argv):\n+                execute_from_command_line(['custom-admin'] + args)\n+        self.assertIn('usage: custom-admin check', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n \n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n \n",
  "django__django-13670": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 6f0b13f..d3cf269 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -1,3 +1,4 @@\n+\n from datetime import date, datetime\n \n from django.test import SimpleTestCase, override_settings\n@@ -146,7 +147,22 @@ class DateFormatTests(SimpleTestCase):\n         # Ticket #16924 -- We don't need timezone support to test this\n         self.assertEqual(dateformat.format(aware_dt, 'O'), '-0330')\n \n-    def test_invalid_time_format_specifiers(self):\n+    def test_year_before_1000(self):\n+        tests = [\n+            (476, '76'),\n+            (42, '42'),\n+            (4, '04'),\n+            (999, '99'),\n+            (1000, '00'),  # Transition year check\n+            (123, '23'),  # This case was mentioned in the issue\n+            (9, '09'),    # Single-digit year\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n         my_birthday = date(1984, 8, 7)\n \n         for specifier in ['a', 'A', 'f', 'g', 'G', 'h', 'H', 'i', 'P', 'r', 's', 'u']:\n@@ -164,4 +180,4 @@ class DateFormatTests(SimpleTestCase):\n             self.assertEqual(\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+            )\n",
  "django__django-13741": "",
  "django__django-13786": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3782589..51e2b58 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -119,6 +119,45 @@ class OptimizerTests(SimpleTestCase):\n             ]\n         )\n \n+    def test_create_model_and_clear_options(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'verbose_name': 'My Model'},\n+                ),\n+                migrations.AlterModelOptions('MyModel', options={}),\n+            ],\n+            [\n+                migrations.CreateModel('MyModel', fields=[]),\n+            ]\n+        )\n+\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={\n+                        'verbose_name': 'My Model',\n+                        'verbose_name_plural': 'My Model plural',\n+                    },\n+                ),\n+                migrations.AlterModelOptions(\n+                    'MyModel',\n+                    options={'verbose_name': 'My Model'},\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'verbose_name': 'My Model'},\n+                ),\n+            ],\n+        )\n+\n     def _test_create_alter_foo_delete_model(self, alter_foo):\n         \"\"\"\n         CreateModel, AlterModelTable, AlterUniqueTogether/AlterIndexTogether/\n",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..33f5413 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,9 +1,11 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n from django.test import SimpleTestCase\n \n from ..utils import setup\n+from django.utils.translation import gettext_lazy, lazy\n \n \n class AddTests(SimpleTestCase):\n@@ -46,6 +48,53 @@ class AddTests(SimpleTestCase):\n         output = self.engine.render_to_string('add07', {'d': date(2000, 1, 1), 't': timedelta(10)})\n         self.assertEqual(output, 'Jan. 11, 2000')\n \n+    @setup({'add08': '{{ s1|add:lazy_s2 }}'})\n+    def test_add08(self):\n+        output = self.engine.render_to_string(\n+            'add08',\n+            {'s1': 'string', 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    @setup({'add09': '{{ lazy_s1|add:lazy_s2 }}'})\n+    def test_add09(self):\n+        output = self.engine.render_to_string(\n+            'add09',\n+            {'lazy_s1': gettext_lazy('string'), 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    def test_lazy_add(self):\n+        lazy_4 = lazy(lambda: 4, int)\n+        lazy_5 = lazy(lambda: 5, int)\n+        self.assertEqual(lazy_4() + lazy_5(), 9)\n+\n+    @setup({'add10': '{{ lazy_s1|add:s2 }}'})\n+    def test_add10(self):\n+        output = self.engine.render_to_string(\n+            'add10',\n+            {'lazy_s1': gettext_lazy('Hello '), 's2': 'World'},\n+        )\n+        self.assertEqual(output, 'Hello World')\n+\n+    @setup({'add11': '{{ s1|add:lazy_s2 }}'})\n+    def test_add11(self):\n+        # This test ensures that a normal string is correctly concatenated with a lazy string\n+        output = self.engine.render_to_string(\n+            'add11',\n+            {'s1': 'The quick brown ', 'lazy_s2': gettext_lazy('fox')},\n+        )\n+        self.assertEqual(output, 'The quick brown fox')\n+\n+    @setup({'add12': '{{ lazy_s1|add:s2 }}'})\n+    def test_add12(self):\n+        # This test checks reverse order of lazy and normal string\n+        output = self.engine.render_to_string(\n+            'add12',\n+            {'lazy_s1': gettext_lazy('Lazy '), 's2': 'dog'},\n+        )\n+        self.assertEqual(output, 'Lazy dog')\n+\n \n class FunctionTests(SimpleTestCase):\n \n",
  "django__django-13807": "diff --git a/tests/backends/tests.py b/tests/backends/tests.py\nindex 0aee2b6..1224234 100644\n--- a/tests/backends/tests.py\n+++ b/tests/backends/tests.py\n@@ -18,10 +18,11 @@ from django.test import (\n     skipUnlessDBFeature,\n )\n \n+from django.db import connection, IntegrityError, transaction\n from .models import (\n     Article, Object, ObjectReference, Person, Post, RawData, Reporter,\n     ReporterProxy, SchoolClass, Square,\n-    VeryLongModelNameZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ,\n+    VeryLongModelNameZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ, SQLKeywordsModel\n )\n \n \n@@ -626,7 +627,22 @@ class FkConstraintsTests(TransactionTestCase):\n             transaction.set_rollback(True)\n \n \n-class ThreadTests(TransactionTestCase):\n+class SQLKeywordsTests(TransactionTestCase):\n+    available_apps = ['backends']\n+\n+    def test_check_constraints_sql_keywords(self):\n+        with transaction.atomic():\n+            # Create an instance of SQLKeywordsModel to have an entry in the database.\n+            obj = SQLKeywordsModel.objects.create(reporter=Reporter.objects.create(first_name=\"John\", last_name=\"Doe\", email=\"john.doe@example.com\"))\n+            obj.refresh_from_db()\n+            # Modify the object to introduce a foreign key constraint error.\n+            obj.reporter_id = 999  # Assuming 999 does not exist in Reporter table\n+            with connection.constraint_checks_disabled():\n+                obj.save()  # Save the object with incorrect FK\n+                # Check that the constraint checker raises an IntegrityError\n+                with self.assertRaises(IntegrityError):\n+                    connection.check_constraints(table_names=['order'])\n+            transaction.set_rollback(True)\n \n     available_apps = ['backends']\n \n",
  "django__django-13809": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex d88ea78..ad8f12a 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1314,6 +1314,12 @@ class ManageRunserver(SimpleTestCase):\n         self.assertIn('unapplied migration(s)', self.output.getvalue())\n \n \n+from django.core.management import call_command\n+from django.core.management.commands.runserver import Command as RunserverCommand\n+from unittest import mock\n+from io import StringIO\n+...\n+\n class ManageRunserverMigrationWarning(TestCase):\n \n     def setUp(self):\n@@ -1343,7 +1349,23 @@ class ManageRunserverMigrationWarning(TestCase):\n         )\n \n \n-class ManageRunserverEmptyAllowedHosts(AdminScriptTestCase):\n+class ManageRunserverSkipChecks(AdminScriptTestCase):\n+    def setUp(self):\n+        super().setUp()\n+        self.stdout = StringIO()\n+        self.runserver_command = RunserverCommand(stdout=self.stdout)\n+\n+    @mock.patch('django.core.management.base.BaseCommand.check')\n+    def test_runserver_with_skip_checks(self, mocked_check):\n+        call_command('runserver', skip_checks=True, stdout=self.stdout)\n+        self.assertNotIn('Performing system checks...', self.stdout.getvalue())\n+        mocked_check.assert_not_called()\n+\n+    @mock.patch('django.core.management.base.BaseCommand.check')\n+    def test_runserver_without_skip_checks(self, mocked_check):\n+        call_command('runserver', skip_checks=False, stdout=self.stdout)\n+        self.assertIn('Performing system checks...', self.stdout.getvalue())\n+        mocked_check.assert_called()\n     def setUp(self):\n         super().setUp()\n         self.write_settings('settings.py', sdict={\n",
  "django__django-13810": "diff --git a/tests/middleware_exceptions/tests.py b/tests/middleware_exceptions/tests.py\nindex bb82f7d..ebbcbe5 100644\n--- a/tests/middleware_exceptions/tests.py\n+++ b/tests/middleware_exceptions/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.conf import settings\n from django.core.exceptions import MiddlewareNotUsed\n from django.http import HttpResponse\n@@ -187,6 +188,24 @@ class MiddlewareNotUsedTests(SimpleTestCase):\n     ROOT_URLCONF='middleware_exceptions.urls',\n )\n class MiddlewareSyncAsyncTests(SimpleTestCase):\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+    ])\n+    async def test_dummy_middleware_async_call(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            'Asynchronous middleware middleware_exceptions.middleware.DummyMiddleware adapted.',\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.DummyMiddleware'\"\n+        )\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.PaymentMiddleware',\n     ])\n@@ -194,6 +213,24 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n         response = self.client.get('/middleware_exceptions/view/')\n         self.assertEqual(response.status_code, 402)\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+    ])\n+    async def test_dummy_middleware_async_call(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            'Asynchronous middleware middleware_exceptions.middleware.DummyMiddleware adapted.',\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.DummyMiddleware'\"\n+        )\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.DecoratedPaymentMiddleware',\n     ])\n@@ -201,6 +238,24 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n         response = self.client.get('/middleware_exceptions/view/')\n         self.assertEqual(response.status_code, 402)\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+    ])\n+    async def test_dummy_middleware_async_call(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            'Asynchronous middleware middleware_exceptions.middleware.DummyMiddleware adapted.',\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.DummyMiddleware'\"\n+        )\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.async_payment_middleware',\n     ])\n@@ -215,6 +270,24 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n             \"adapted.\",\n         )\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+    ])\n+    async def test_dummy_middleware_async_call(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            'Asynchronous middleware middleware_exceptions.middleware.DummyMiddleware adapted.',\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.DummyMiddleware'\"\n+        )\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.NotSyncOrAsyncMiddleware',\n     ])\n@@ -227,6 +300,24 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n         with self.assertRaisesMessage(RuntimeError, msg):\n             self.client.get('/middleware_exceptions/view/')\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+    ])\n+    async def test_dummy_middleware_async_call(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            'Asynchronous middleware middleware_exceptions.middleware.DummyMiddleware adapted.',\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.DummyMiddleware'\"\n+        )\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.PaymentMiddleware',\n     ])\n@@ -240,6 +331,24 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n             \"middleware_exceptions.middleware.PaymentMiddleware adapted.\",\n         )\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+    ])\n+    async def test_dummy_middleware_async_call(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            'Asynchronous middleware middleware_exceptions.middleware.DummyMiddleware adapted.',\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.DummyMiddleware'\"\n+        )\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.async_payment_middleware',\n     ])\n@@ -266,6 +375,24 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             self.client.get('/middleware_exceptions/template_response/')\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+    ])\n+    async def test_dummy_middleware_async_call(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            'Asynchronous middleware middleware_exceptions.middleware.DummyMiddleware adapted.',\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.DummyMiddleware'\"\n+        )\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n     ])\n@@ -274,6 +401,24 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n         self.assertEqual(response.content, b'OK')\n         self.assertEqual(response.status_code, 200)\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+    ])\n+    async def test_dummy_middleware_async_call(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            'Asynchronous middleware middleware_exceptions.middleware.DummyMiddleware adapted.',\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.DummyMiddleware'\"\n+        )\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n     ])\n@@ -285,6 +430,24 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n \n @override_settings(ROOT_URLCONF='middleware_exceptions.urls')\n class AsyncMiddlewareTests(SimpleTestCase):\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+    ])\n+    async def test_dummy_middleware_async_call(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            'Asynchronous middleware middleware_exceptions.middleware.DummyMiddleware adapted.',\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.DummyMiddleware'\"\n+        )\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.AsyncTemplateResponseMiddleware',\n     ])\n",
  "django__django-13820": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex 594c01e..ed7a394 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -1,3 +1,4 @@\n+\n import compileall\n import os\n \n@@ -9,6 +10,8 @@ from django.db.migrations.loader import MigrationLoader\n from django.db.migrations.recorder import MigrationRecorder\n from django.test import TestCase, modify_settings, override_settings\n \n+from importlib import import_module\n+\n from .test_base import MigrationTestBase\n \n \n@@ -502,15 +505,39 @@ class LoaderTests(TestCase):\n         migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n         self.assertEqual(migrations, ['0001_initial'])\n \n-    @override_settings(\n-        MIGRATION_MODULES={'migrations': 'migrations.test_migrations_namespace_package'},\n-    )\n-    def test_loading_namespace_package(self):\n-        \"\"\"Migration directories without an __init__.py file are ignored.\"\"\"\n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations'})\n+    def test_loading_package_without__file__(self):\n+        \"\"\"\n+        To support frozen environments, MigrationLoader loads migrations from\n+        regular packages with no __file__ attribute.\n+        \"\"\"\n+        test_module = import_module('migrations.test_migrations')\n         loader = MigrationLoader(connection)\n-        loader.load_disk()\n-        migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n-        self.assertEqual(migrations, [])\n+        \n+        # Backup original attributes\n+        module_file = getattr(test_module, '__file__', None)\n+        module_origin = getattr(test_module.__spec__, 'origin', None)\n+        module_has_location = getattr(test_module.__spec__, 'has_location', True)\n+        \n+        try:\n+            # Simulate a frozen environment\n+            delattr(test_module, '__file__')\n+            test_module.__spec__.origin = None\n+            test_module.__spec__.has_location = False\n+            \n+            loader.load_disk()\n+            \n+            # Check that migrations are correctly loaded\n+            migrations = [\n+                name for app, name in loader.disk_migrations if app == 'migrations'\n+            ]\n+            self.assertCountEqual(migrations, ['0001_initial', '0002_second'])\n+        finally:\n+            # Restore original attributes\n+            if module_file is not None:\n+                test_module.__file__ = module_file\n+            test_module.__spec__.origin = module_origin\n+            test_module.__spec__.has_location = module_has_location\n \n \n class PycLoaderTests(MigrationTestBase):\n",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..8a32f5f 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -16,6 +16,9 @@ from django.test import (\n )\n from django.test.utils import isolate_apps\n \n+from unittest import mock\n+from django.core.exceptions import ImproperlyConfigured\n+from django.db.backends.sqlite3.base import DatabaseWrapper as dbapi2\n from ..models import Author, Item, Object, Square\n \n try:\n",
  "django__django-13837": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 10ffa22..1659013 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -165,6 +165,22 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-m', 'django', 'runserver']\n         )\n \n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver']\n+        )\n+\n+    @mock.patch('sys.argv', ['-m', 'pkg_other_than_django', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_other_pkg_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'pkg_other_than_django', 'runserver']\n+        )\n+\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n@@ -173,6 +189,22 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-Werror', __file__, 'runserver']\n         )\n \n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver']\n+        )\n+\n+    @mock.patch('sys.argv', ['-m', 'pkg_other_than_django', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_other_pkg_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'pkg_other_than_django', 'runserver']\n+        )\n+\n     @mock.patch('sys.warnoptions', [])\n     def test_exe_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n",
  "django__django-13925": "",
  "django__django-13933": "",
  "django__django-13964": "diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py\nindex 1078928..4f7ca04 100644\n--- a/tests/many_to_one/models.py\n+++ b/tests/many_to_one/models.py\n@@ -76,6 +76,11 @@ class Child(models.Model):\n class ChildNullableParent(models.Model):\n     parent = models.ForeignKey(Parent, models.CASCADE, null=True)\n \n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n+\n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n \n class ToFieldChild(models.Model):\n     parent = models.ForeignKey(Parent, models.CASCADE, to_field='name', related_name='to_field_children')\n",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..0c15300 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,7 +1,10 @@\n+\n from django.db import IntegrityError, transaction\n from django.test import TestCase, skipIfDBFeature\n \n-from .models import Bar, Business, Employee, Foo\n+from .models import Bar, Business, CustomAutoFieldModel, Employee, Foo\n+from .fields import MyWrapper\n+from django.test import skipUnlessDBFeature\n \n \n class BasicCustomPKTests(TestCase):\n@@ -220,6 +223,16 @@ class CustomPKTests(TestCase):\n         self.assertEqual(f, new_foo),\n         self.assertEqual(f.bar, new_bar)\n \n+    def test_auto_field_subclass_create(self):\n+        obj = CustomAutoFieldModel.objects.create()\n+        self.assertIsInstance(obj.id, MyWrapper)\n+\n+    @skipUnlessDBFeature('can_return_rows_from_bulk_insert')\n+    def test_auto_field_subclass_bulk_create(self):\n+        obj = CustomAutoFieldModel()\n+        CustomAutoFieldModel.objects.bulk_create([obj])\n+        self.assertIsInstance(obj.id, MyWrapper)\n+\n     # SQLite lets objects be saved with an empty primary key, even though an\n     # integer is expected. So we can't check for an error being raised in that\n     # case for SQLite. Remove it from the suite for this next bit.\n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..ee17884 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -794,7 +794,23 @@ class BasicExpressionsTests(TestCase):\n         )\n         self.assertCountEqual(qs, [self.example_inc.ceo, self.foobar_ltd.ceo, self.max])\n \n-    def test_boolean_expression_combined(self):\n+    def test_q_and_exists_commutativity(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+        \n+        # Test the commutative property of & with Q() and Exists()\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q() & Exists(is_poc)),\n+            Employee.objects.filter(Exists(is_poc) & Q()),\n+        )\n+        \n+        # Test the commutative property of | with Q() and Exists()\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q() | Exists(is_ceo)),\n+            Employee.objects.filter(Exists(is_ceo) | Q()),\n+        )\n         is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n         is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n         self.gmbh.point_of_contact = self.max\n",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..267d39e 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -205,6 +205,35 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yields(self):\n+        \"\"\"\n+        Ensure no file is yielded more than once during post-processing.\n+        \"\"\"\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(clear=False, dry_run=False, post_process=True)\n+        stats = collectstatic_cmd.collect()\n+\n+        post_processed_files = stats['post_processed']\n+        # Convert list to set to ensure uniqueness\n+        self.assertEqual(len(post_processed_files), len(set(post_processed_files)), \n+            \"Files should be yielded only once during post-processing.\")\n+\n+    def test_all_adjustable_files_post_processed(self):\n+        \"\"\"\n+        Ensure all adjustable files are post-processed.\n+        \"\"\"\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(clear=False, dry_run=False, post_process=True)\n+        stats = collectstatic_cmd.collect()\n+\n+        adjustable_files = [file for file in stats['found'] if matches_patterns(file, self._patterns)]\n+        post_processed_files = stats['post_processed']\n+\n+        # Check if all adjustable files are in post_processed\n+        for file in adjustable_files:\n+            self.assertIn(file, post_processed_files,\n+                f\"Adjustable file {file} was not post-processed.\")\n+\n     def test_css_import_case_insensitive(self):\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n         self.assertEqual(relpath, \"cached/styles_insensitive.3fa427592a53.css\")\n@@ -214,6 +243,35 @@ class TestHashedFiles:\n             self.assertIn(b\"other.d41d8cd98f00.css\", content)\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yields(self):\n+        \"\"\"\n+        Ensure no file is yielded more than once during post-processing.\n+        \"\"\"\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(clear=False, dry_run=False, post_process=True)\n+        stats = collectstatic_cmd.collect()\n+\n+        post_processed_files = stats['post_processed']\n+        # Convert list to set to ensure uniqueness\n+        self.assertEqual(len(post_processed_files), len(set(post_processed_files)), \n+            \"Files should be yielded only once during post-processing.\")\n+\n+    def test_all_adjustable_files_post_processed(self):\n+        \"\"\"\n+        Ensure all adjustable files are post-processed.\n+        \"\"\"\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(clear=False, dry_run=False, post_process=True)\n+        stats = collectstatic_cmd.collect()\n+\n+        adjustable_files = [file for file in stats['found'] if matches_patterns(file, self._patterns)]\n+        post_processed_files = stats['post_processed']\n+\n+        # Check if all adjustable files are in post_processed\n+        for file in adjustable_files:\n+            self.assertIn(file, post_processed_files,\n+                f\"Adjustable file {file} was not post-processed.\")\n+\n     @override_settings(\n         STATICFILES_DIRS=[os.path.join(TEST_ROOT, 'project', 'faulty')],\n         STATICFILES_FINDERS=['django.contrib.staticfiles.finders.FileSystemFinder'],\n",
  "django__django-14089": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 7fb3d83..7d80e7e 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n@@ -5,6 +6,7 @@ Tests for stuff in django.utils.datastructures.\n import copy\n import pickle\n \n+import collections.abc\n from django.test import SimpleTestCase\n from django.utils.datastructures import (\n     CaseInsensitiveMapping, DictWrapper, ImmutableList, MultiValueDict,\n@@ -18,7 +20,28 @@ class OrderedSetTests(SimpleTestCase):\n         s = OrderedSet([1, 2, 3])\n         self.assertEqual(list(s.dict.keys()), [1, 2, 3])\n \n-    def test_remove(self):\n+    def test_reversed(self):\n+        # Test normal reverse order\n+        s = reversed(OrderedSet([1, 2, 3]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [3, 2, 1])\n+\n+        # Test reversing an empty OrderedSet\n+        s_empty = reversed(OrderedSet())\n+        self.assertIsInstance(s_empty, collections.abc.Iterator)\n+        self.assertEqual(list(s_empty), [])\n+\n+        # Test reversing a single-element OrderedSet\n+        s_single = reversed(OrderedSet([42]))\n+        self.assertIsInstance(s_single, collections.abc.Iterator)\n+        self.assertEqual(list(s_single), [42])\n+\n+        # Test reversing after some operations\n+        s_mixed = OrderedSet([1, 2, 3])\n+        s_mixed.add(4)\n+        s_mixed.discard(2)\n+        s_reversed = reversed(s_mixed)\n+        self.assertEqual(list(s_reversed), [4, 3, 1])\n         s = OrderedSet()\n         self.assertEqual(len(s), 0)\n         s.add(1)\n",
  "django__django-14122": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex b2ec8af..09aa087 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -471,7 +472,24 @@ class AggregateTestCase(TestCase):\n             ]\n         )\n \n-    def test_aggregate_annotation(self):\n+    def test_meta_ordering_not_in_group_by(self):\n+        \"\"\"\n+        Test that Meta.ordering fields are not included in GROUP BY clauses.\n+        \"\"\"\n+        # Update authors for certain articles\n+        Article.objects.filter(headline='Article 1').update(author=self.a1)\n+        Article.objects.filter(headline='Article 2').update(author=self.a2)\n+        Article.objects.filter(headline='Article 3').update(author=self.a3)\n+        Article.objects.filter(headline='Article 4').update(author=self.a1)\n+\n+        # Perform aggregation on Articles grouped by author\n+        # Ensure Meta.ordering does not interfere with GROUP BY\n+        articles = Article.objects.values('author').annotate(count=Count('author'))\n+        self.assertCountEqual(articles, [\n+            {'author': self.a1.pk, 'count': 2},\n+            {'author': self.a2.pk, 'count': 1},\n+            {'author': self.a3.pk, 'count': 1},\n+        ])\n         vals = Book.objects.annotate(num_authors=Count(\"authors__id\")).aggregate(Avg(\"num_authors\"))\n         self.assertEqual(vals, {\"num_authors__avg\": Approximate(1.66, places=1)})\n \n@@ -1339,4 +1357,4 @@ class AggregateTestCase(TestCase):\n             ('Wesley J. Chun', 1),\n             ('Stuart Russell', 1),\n             ('Peter Norvig', 2),\n-        ], lambda a: (a.name, a.contact_count), ordered=False)\n+        ], lambda a: (a.name, a.contact_count), ordered=False)\n",
  "django__django-14140": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex c3db825..8b5f6cd 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -819,6 +819,20 @@ class BasicExpressionsTests(TestCase):\n             Employee.objects.filter(Q(salary__gte=30) & Exists(is_ceo)),\n             [self.max],\n         )\n+\n+    def test_boolean_expression_combined_with_Q(self):\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+\n+        qs = Employee.objects.filter(Q(Exists(is_poc)))\n+        self.assertCountEqual(qs, [self.max])\n+\n+        # Verify deconstruction of single-child Q with Exists\n+        q = Q(Exists(is_poc))\n+        _, args, kwargs = q.deconstruct()\n+        self.assertEqual(args, (Exists(is_poc),))\n+        self.assertEqual(kwargs, {})\n         self.assertCountEqual(\n             Employee.objects.filter(Q(salary__lt=15) | Exists(is_poc)),\n             [self.example_inc.ceo, self.max],\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..a19379c 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,4 +1,6 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n+from django.test import TestCase\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n@@ -65,8 +67,28 @@ class TestDefaultPK(SimpleTestCase):\n         with self.assertRaisesMessage(ImproperlyConfigured, msg):\n             class Model(models.Model):\n                 pass\n+    \n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+        \n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+        \n+        class Model(models.Model):\n+            pass\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -81,8 +103,28 @@ class TestDefaultPK(SimpleTestCase):\n             pass\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n+    \n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+        \n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+        \n+        class Model(models.Model):\n+            pass\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14311": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex b7e6f92..cc378f5 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -182,6 +182,15 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n         )\n \n+    @mock.patch.dict(sys.modules, {'__main__': test_main, '__spec__': mock.Mock(parent='utils_tests.test_module.main_module')})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_with_dotted_name(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..9efa2ab 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -223,6 +223,13 @@ TEST_DATA = [\n     (URLValidator(EXTENDED_SCHEMES), 'git+ssh://git@github.com/example/hg-git.git', None),\n \n     (URLValidator(EXTENDED_SCHEMES), 'git://-invalid.com', ValidationError),\n+    # Newlines and tabs are not accepted.\n+    (URLValidator(), 'http://www.djangoproject.com/\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://www.django\\rproject.com/', ValidationError),\n+    (URLValidator(), 'http://[::\\rffff:192.9.5.5]', ValidationError),\n+    (URLValidator(), 'http://\\twww.djangoproject.com/', ValidationError),\n+    (URLValidator(), 'http://\\t[::ffff:192.9.5.5]', ValidationError),\n     (URLValidator(), None, ValidationError),\n     (URLValidator(), 56, ValidationError),\n     (URLValidator(), 'no_scheme', ValidationError),\n",
  "django__django-14351": "",
  "django__django-14373": "",
  "django__django-14376": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\nindex 643c2b6..175ae61 100644\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -38,6 +38,65 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_deprecated_keywords(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'deprecatedoptiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'deprecatedoptionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'db': 'deprecatedoptiondbname',\n+                    'user': 'optionuser',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+    \n+    def test_mixed_keywords_preference(self):\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=555',\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': 444,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'db': 'deprecatedoptiondbname',\n+                    'user': 'optionuser',\n+                    'password': 'optionpassword',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'host': 'optionhost',\n+                    'port': 555,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n     def test_options_override_settings_proper_values(self):\n         settings_port = 444\n         options_port = 555\n@@ -68,6 +127,65 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_deprecated_keywords(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'deprecatedoptiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'deprecatedoptionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'db': 'deprecatedoptiondbname',\n+                    'user': 'optionuser',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+    \n+    def test_mixed_keywords_preference(self):\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=555',\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': 444,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'db': 'deprecatedoptiondbname',\n+                    'user': 'optionuser',\n+                    'password': 'optionpassword',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'host': 'optionhost',\n+                    'port': 555,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n     def test_options_password(self):\n         expected_args = [\n             'mysql',\n@@ -89,6 +207,65 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_deprecated_keywords(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'deprecatedoptiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'deprecatedoptionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'db': 'deprecatedoptiondbname',\n+                    'user': 'optionuser',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+    \n+    def test_mixed_keywords_preference(self):\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=555',\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': 444,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'db': 'deprecatedoptiondbname',\n+                    'user': 'optionuser',\n+                    'password': 'optionpassword',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'host': 'optionhost',\n+                    'port': 555,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n     def test_options_charset(self):\n         expected_args = [\n             'mysql',\n",
  "django__django-14434": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex 39c82bf..c8f0b61 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -2199,7 +2199,22 @@ class SchemaTests(TransactionTestCase):\n             editor.remove_constraint(AuthorWithUniqueNameAndBirthday, constraint)\n \n     @skipUnlessDBFeature('supports_expression_indexes')\n-    def test_func_unique_constraint(self):\n+    def test_unique_constraint_references_column(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        constraint = UniqueConstraint(fields=['name'], name='name_uq')\n+        # Add constraint.\n+        with connection.schema_editor() as editor:\n+            editor.add_constraint(Author, constraint)\n+            sql = constraint.create_sql(Author, editor)\n+        \n+        table = Author._meta.db_table\n+        # Test if the SQL correctly references the column 'name'.\n+        self.assertIs(sql.references_column(table, 'name'), True)\n+        # Remove constraint.\n+        with connection.schema_editor() as editor:\n+            editor.remove_constraint(Author, constraint)\n+        self.assertNotIn(constraint.name, self.get_constraints(table))\n         with connection.schema_editor() as editor:\n             editor.create_model(Author)\n         constraint = UniqueConstraint(Upper('name').desc(), name='func_upper_uq')\n",
  "django__django-14493": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 17aecdd..5678356 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -454,6 +454,10 @@ class TestCollectionManifestStorage(TestHashedFiles, CollectionTestCase):\n         )\n \n \n+from io import StringIO\n+from django.test.utils import override_settings\n+from django.contrib.staticfiles.storage import ManifestStaticFilesStorage\n+\n @override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.NoneHashStorage')\n class TestCollectionNoneHashStorage(CollectionTestCase):\n     hashed_file_path = hashed_file_path\n",
  "django__django-14500": "",
  "django__django-14539": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 23a1e0a..abed08c 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -250,10 +250,50 @@ class TestUtilsHtml(SimpleTestCase):\n                 'Search for google.com/?q=! and see.',\n                 'Search for <a href=\"http://google.com/?q=\">google.com/?q=</a>! and see.'\n             ),\n+            (\n+                'Search for google.com/?q=1&lt! and see.',\n+                'Search for <a href=\"http://google.com/?q=1%3C\">google.com/?q=1&lt</a>! and see.'\n+            ),\n+            (\n+                'Visit example.com/foo.html&gt;!) for more.',\n+                'Visit <a href=\"http://example.com/foo.html%3E\">example.com/foo.html&gt</a>!) for more.'\n+            ),\n+            (\n+                'Secure link: https://example.com/?p=100&amp;id=1.',\n+                'Secure link: <a href=\"https://example.com/?p=100&amp;id=1\">https://example.com/?p=100&amp;id=1</a>.'\n+            ),\n+            (\n+                'Contact us at info@example.com; or visit us.',\n+                '<a href=\"mailto:info@example.com\">info@example.com</a>; or visit us.'\n+            ),\n+            (\n+                'Trailing punctuation: check google.com, now!',\n+                'Trailing punctuation: check <a href=\"http://google.com\">google.com</a>, now!'\n+            ),\n             (\n                 lazystr('Search for google.com/?q=!'),\n                 'Search for <a href=\"http://google.com/?q=\">google.com/?q=</a>!'\n             ),\n+            (\n+                'Search for google.com/?q=1&lt! and see.',\n+                'Search for <a href=\"http://google.com/?q=1%3C\">google.com/?q=1&lt</a>! and see.'\n+            ),\n+            (\n+                'Visit example.com/foo.html&gt;!) for more.',\n+                'Visit <a href=\"http://example.com/foo.html%3E\">example.com/foo.html&gt</a>!) for more.'\n+            ),\n+            (\n+                'Secure link: https://example.com/?p=100&amp;id=1.',\n+                'Secure link: <a href=\"https://example.com/?p=100&amp;id=1\">https://example.com/?p=100&amp;id=1</a>.'\n+            ),\n+            (\n+                'Contact us at info@example.com; or visit us.',\n+                '<a href=\"mailto:info@example.com\">info@example.com</a>; or visit us.'\n+            ),\n+            (\n+                'Trailing punctuation: check google.com, now!',\n+                'Trailing punctuation: check <a href=\"http://google.com\">google.com</a>, now!'\n+            ),\n             ('foo@example.com', '<a href=\"mailto:foo@example.com\">foo@example.com</a>'),\n         )\n         for value, output in tests:\n",
  "django__django-14559": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex b579834..8827a5e 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -115,7 +115,31 @@ class BulkUpdateTests(TestCase):\n \n     pk_fields_error = 'bulk_update() cannot be used with primary key fields.'\n \n-    def test_update_primary_key(self):\n+from django.test import TestCase\n+from .models import Note, CustomPk, Valid, Detail, Paragraph, Member\n+\n+class BulkUpdateTests(TestCase):\n+    def test_bulk_update_zero_objects(self):\n+        rows_updated = Note.objects.bulk_update([], ['note'])\n+        self.assertEqual(rows_updated, 0)\n+\n+    def test_bulk_update_multiple_objects(self):\n+        Note.objects.bulk_create([\n+            Note(note='Note {}'.format(i), misc='Misc {}'.format(i))\n+            for i in range(0, 2000)\n+        ])\n+        notes = list(Note.objects.all())\n+        for note in notes:\n+            note.note = 'Updated {}'.format(note.note)\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 2000)\n+\n+    def test_bulk_update_with_duplicates(self):\n+        note = Note.objects.create(note='test-note', misc='test')\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'])\n+        self.assertEqual(rows_updated, 1)\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'], batch_size=1)\n+        self.assertEqual(rows_updated, 2)\n         with self.assertRaisesMessage(ValueError, self.pk_fields_error):\n             Note.objects.bulk_update([], ['id'])\n \n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..451b478 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -984,7 +984,25 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n \n-    def test_formset_iteration(self):\n+    def test_non_form_errors_css_class(self):\n+        \"\"\"\n+        Ensure that non-form errors in the FormSet are wrapped with the 'nonform' CSS class.\n+        \"\"\"\n+        data = {\n+            'drinks-TOTAL_FORMS': '2',\n+            'drinks-INITIAL_FORMS': '0',\n+            'drinks-MIN_NUM_FORMS': '0',\n+            'drinks-MAX_NUM_FORMS': '0',\n+            'drinks-0-name': 'Gin and Tonic',\n+            'drinks-1-name': 'Gin and Tonic',\n+        }\n+        formset = FavoriteDrinksFormSet(data, prefix='drinks')\n+        self.assertFalse(formset.is_valid())\n+        # Check that the non-form errors include the 'nonform' CSS class in the rendered HTML\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>'\n+        )\n         \"\"\"Formset instances are iterable.\"\"\"\n         ChoiceFormset = formset_factory(Choice, extra=3)\n         formset = ChoiceFormset()\n",
  "django__django-14631": "",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..587b6fa 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -1,7 +1,62 @@\n from datetime import date, datetime, timedelta\n from operator import attrgetter\n \n+class M2mThroughTests(TestCase):\n+    def test_reverse_inherited_m2m_with_through_fields_list_hashable(self):\n+        class Parent(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class ProxyParent(Parent):\n+            class Meta:\n+                proxy = True\n+\n+        class Child(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE)\n+            many_to_many_field = models.ManyToManyField(\n+                to=Parent,\n+                through=\"ManyToManyModel\",\n+                through_fields=['child', 'parent'],\n+                related_name=\"something\"\n+            )\n+\n+        class ManyToManyModel(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')\n+            child = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')\n+            second_child = models.ForeignKey(Child, on_delete=models.CASCADE, null=True, default=None)\n+\n+        # Fetch the ManyToManyRel from the Child model\n+        m2m_field = Child._meta.get_field('many_to_many_field')\n+        self.assertEqual(m2m_field.remote_field.through_fields, ('child', 'parent'))\n+        self.assertIsInstance(hash(m2m_field.remote_field), int)\n+\n+    def test_m2m_with_through_fields_list_in_proxy(self):\n+        class Parent(models.Model):\n+            pass\n+\n+        class ProxyParent(Parent):\n+            class Meta:\n+                proxy = True\n+\n+        class Child(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE)\n+            many_to_many_field = models.ManyToManyField(\n+                to=Parent,\n+                through=\"ManyToManyModel\",\n+                through_fields=['child', 'parent'],\n+                related_name=\"something\"\n+            )\n+\n+        class ManyToManyModel(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')\n+            child = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')\n+            second_child = models.ForeignKey(Child, on_delete=models.CASCADE, null=True, default=None)\n+\n+        errors = Child.check()\n+        self.assertEqual(errors, [])\n+\n from django.db import IntegrityError\n+from django.db import models\n+from django.core.checks import Error\n from django.test import TestCase\n \n from .models import (\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..9ea2db5 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,4 +1,11 @@\n+\n import json\n+import datetime\n+from django.test import RequestFactory, TestCase\n+from django.http import JsonResponse\n+from .models import Question\n+from django.contrib.auth.models import User\n+from django.contrib.admin.views.autocomplete import AutocompleteJsonView\n from contextlib import contextmanager\n \n from django.contrib import admin\n",
  "django__django-14765": "",
  "django__django-14771": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 1875424..54a29c6 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -194,8 +194,16 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n         )\n \n+    @mock.patch('__main__.__spec__', None)\n     @mock.patch('__main__.__spec__', None)\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n+    def test_xoptions_passed_correctly(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver']\n+        )\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n         self.assertEqual(\n@@ -235,8 +243,16 @@ class TestChildArguments(SimpleTestCase):\n         with self.assertRaisesMessage(RuntimeError, msg):\n             autoreload.get_child_arguments()\n \n+    @mock.patch('__main__.__spec__', None)\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n+    def test_xoptions_passed_correctly(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver']\n+        )\n+    @mock.patch('sys.warnoptions', [])\n     def test_module_no_spec(self):\n         module = types.ModuleType('test_module')\n         del module.__spec__\n",
  "django__django-14787": "",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..7ae021a 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5132,7 +5132,40 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         # Related ForeignKey object not registered in admin.\n         self.assertContains(response, '<div class=\"readonly\">Chapter 1</div>', html=True)\n \n-    def test_readonly_manytomany_backwards_ref(self):\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        \"\"\"\n+        Test ForeignKey readonly fields in the default admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('admin')\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test ForeignKey readonly fields in a custom admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('custom-admin')\n+\n+    def _test_readonly_foreignkey_links(self, admin_site):\n+        \"\"\"\n+        Helper function to test ForeignKey readonly fields.\n+        \"\"\"\n+        chapter = Chapter.objects.create(\n+            title='Chapter 1',\n+            content='content',\n+            book=Book.objects.create(name='Book 1'),\n+        )\n+        language = Language.objects.create(iso='_40', name='Test')\n+        response = self.client.get(reverse(f'{admin_site}:admin_views_chapter_change', args=(chapter.pk,)))\n+        \n+        # Check if the link for the language is correctly prefixed with the admin site namespace\n+        language_url = reverse(f'{admin_site}:admin_views_language_change', args=(quote(language.pk),))\n+        self.assertContains(\n+            response,\n+            '<div class=\"readonly\"><a href=\"%s\">_40</a></div>' % language_url,\n+            html=True,\n+        )\n+\n+        # Related ForeignKey object not registered in admin.\n+        self.assertContains(response, '<div class=\"readonly\">Chapter 1</div>', html=True)\n         \"\"\"\n         Regression test for #16433 - backwards references for related objects\n         broke if the related field is read-only due to the help_text attribute\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..350b8cc 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,10 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n+import json\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..0b53e72 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -793,6 +793,28 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n \n+    def test_rename_model_with_db_table_noop(self):\n+        app_label = 'test_rmwdbtn'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n     def test_rename_m2m_target_model(self):\n         app_label = \"test_rename_m2m_target_model\"\n         project_state = self.apply_operations(app_label, ProjectState(), operations=[\n",
  "django__django-15022": "",
  "django__django-15037": "diff --git a/tests/inspectdb/tests.py b/tests/inspectdb/tests.py\nindex 19402bb..f3cc85c 100644\n--- a/tests/inspectdb/tests.py\n+++ b/tests/inspectdb/tests.py\n@@ -204,7 +204,20 @@ class InspectDBTestCase(TestCase):\n             output,\n         )\n \n-    def test_digits_column_name_introspection(self):\n+    @skipUnlessDBFeature('can_introspect_foreign_keys')\n+    def test_foreign_key_to_specific_field(self):\n+        \"\"\"Test foreign key referencing a specific unique field.\"\"\"\n+        out = StringIO()\n+        call_command('inspectdb', 'inspectdb_foreignkeytofield', stdout=out)\n+        output = out.getvalue()\n+        self.assertIn(\n+            \"to_field_fk = models.ForeignKey('InspectdbPeoplemoredata', \",\n+            output,\n+        )\n+        self.assertIn(\n+            \"models.DO_NOTHING, to_field='people_unique_id')\",\n+            output,\n+        )\n         \"\"\"Introspection of column names consist/start with digits (#16536/#17676)\"\"\"\n         char_field_type = connection.features.introspected_field_types['CharField']\n         out = StringIO()\n",
  "django__django-15103": "diff --git a/tests/template_tests/filter_tests/test_json_script.py b/tests/template_tests/filter_tests/test_json_script.py\nindex 607e24c..f01f319 100644\n--- a/tests/template_tests/filter_tests/test_json_script.py\n+++ b/tests/template_tests/filter_tests/test_json_script.py\n@@ -1,9 +1,26 @@\n+\n from django.test import SimpleTestCase\n \n+from django.utils.html import json_script\n from ..utils import setup\n \n \n class JsonScriptTests(SimpleTestCase):\n+    \n+    @setup({'json-tag03': '{{ value|json_script }}'})\n+    def test_json_script_without_id_in_template(self):\n+        output = self.engine.render_to_string('json-tag03', {'value': {'key': 'value'}})\n+        self.assertEqual(\n+            output,\n+            '<script type=\"application/json\">{\"key\": \"value\"}</script>'\n+        )\n+\n+    def test_json_script_without_id_direct(self):\n+        output = json_script({'key': 'value'})\n+        self.assertHTMLEqual(\n+            output,\n+            '<script type=\"application/json\">{\"key\": \"value\"}</script>'\n+        )\n \n     @setup({'json-tag01': '{{ value|json_script:\"test_id\" }}'})\n     def test_basic(self):\n@@ -16,4 +33,4 @@ class JsonScriptTests(SimpleTestCase):\n             '<script id=\"test_id\" type=\"application/json\">'\n             '{\"a\": \"testing\\\\r\\\\njson \\'string\\\\\" \\\\u003Cb\\\\u003Eescaping\\\\u003C/b\\\\u003E\"}'\n             '</script>'\n-        )\n+        )\n",
  "django__django-15104": "",
  "django__django-15127": "",
  "django__django-15128": "",
  "django__django-15161": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 5fdccc5..50086a2 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1755,6 +1755,21 @@ class ValueTests(TestCase):\n         Time.objects.update(time=Value(datetime.time(1), output_field=TimeField()))\n         self.assertEqual(Time.objects.get().time, datetime.time(1))\n \n+    def test_deconstruct_F(self):\n+        f = F('field_name')\n+        path, args, kwargs = f.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, (f.name,))\n+        self.assertEqual(kwargs, {})\n+        \n+    def test_deconstruct_ExpressionWrapper(self):\n+        wrapper = models.ExpressionWrapper(models.F('pages'), output_field=models.IntegerField())\n+        path, args, kwargs = wrapper.deconstruct()\n+        self.assertEqual(path, 'django.db.models.ExpressionWrapper')\n+        self.assertEqual(args, (wrapper.source_expressions[0],))\n+        self.assertTrue('output_field' in kwargs)\n+        self.assertEqual(kwargs['output_field'].deconstruct(), models.IntegerField().deconstruct())\n+\n     def test_update_UUIDField_using_Value(self):\n         UUID.objects.create()\n         UUID.objects.update(uuid=Value(uuid.UUID('12345678901234567890123456789012'), output_field=UUIDField()))\n",
  "django__django-15268": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a6c0858..302c1f8 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1590,8 +1590,43 @@ class AutodetectorTests(TestCase):\n             changes, 'otherapp', 0, 3, name='book',\n             index_together={('title', 'author')},\n         )\n+    def test_optimize_foo_together_operations(self):\n+        \"\"\"\n+        Test optimization of multiple AlterFooTogether operations into one.\n+        \"\"\"\n+        original_operations = [\n+            migrations.AlterUniqueTogether(\n+                name='mymodel',\n+                unique_together=set(),\n+            ),\n+            migrations.AlterIndexTogether(\n+                name='mymodel',\n+                index_together=set(),\n+            ),\n+            migrations.AlterUniqueTogether(\n+                name='mymodel',\n+                unique_together={(\"col\",)},\n+            ),\n+            migrations.AlterIndexTogether(\n+                name='mymodel',\n+                index_together={(\"col\",)},\n+            ),\n+        ]\n+\n+        expected_operations = [\n+            migrations.AlterUniqueTogether(\n+                name='mymodel',\n+                unique_together={(\"col\",)},\n+            ),\n+            migrations.AlterIndexTogether(\n+                name='mymodel',\n+                index_together={(\"col\",)},\n+            ),\n+        ]\n \n-    def test_add_field_and_foo_together(self):\n+        # Assume we have a mock optimizer for testing\n+        optimized_ops = self.optimize_operations(original_operations)\n+        self.assertEqual(optimized_ops, expected_operations)\n         \"\"\"\n         Added fields will be created before using them in index/unique_together.\n         \"\"\"\n",
  "django__django-15277": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 11f86ed..91a5db8 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1842,7 +1842,43 @@ class ValueTests(TestCase):\n             (b'', BinaryField),\n             (uuid.uuid4(), UUIDField),\n         ]\n-        for value, output_field_type in value_types:\n+        import datetime\n+        import uuid\n+        from decimal import Decimal\n+        from django.core.exceptions import FieldError\n+        from django.db.models import Value\n+        from django.test import TestCase\n+\n+        def test_output_field_does_not_create_broken_validators(self):\n+            \"\"\"\n+            The output field for a given Value doesn't get cleaned & validated,\n+            however validators may still be instantiated for a given field type\n+            and this demonstrates that they don't throw an exception.\n+            \"\"\"\n+            value_types = [\n+                'str',\n+                True,\n+                42,\n+                3.14,\n+                datetime.date(2019, 5, 15),\n+                datetime.datetime(2019, 5, 15),\n+                datetime.time(3, 16),\n+                datetime.timedelta(1),\n+                Decimal('3.14'),\n+                b'',\n+                uuid.uuid4(),\n+            ]\n+            for value in value_types:\n+                with self.subTest(type=type(value)):\n+                    field = Value(value)._resolve_output_field()\n+                    field.clean(value, model_instance=None)\n+\n+        def test_charfield_no_maxlengthvalidator_when_max_length_is_none(self):\n+            \"\"\"\n+            Test that CharField does not have a MaxLengthValidator when max_length is None.\n+            \"\"\"\n+            char_field = fields.CharField()\n+            self.assertEqual(len(char_field.validators), 0)\n             with self.subTest(type=type(value)):\n                 expr = Value(value)\n                 self.assertIsInstance(expr.output_field, output_field_type)\n",
  "django__django-15278": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex dd02aee..d19f500 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -638,6 +638,25 @@ class SchemaTests(TransactionTestCase):\n             editor.add_field(Author, new_field)\n         columns = self.column_classes(Author)\n         # MySQL annoyingly uses the same backend, so it'll come back as one of\n+\n+    def test_add_nullable_onetoonefield(self):\n+        \"\"\"\n+        Test adding a nullable OneToOneField on SQLite.\n+        \"\"\"\n+        # Create the related tables\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Note)\n+            editor.create_model(Author)\n+        # Add nullable OneToOneField\n+        new_field = OneToOneField(Note, models.CASCADE, null=True, blank=True)\n+        new_field.set_attributes_from_name('note')\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n+        # Verify the column was added and is nullable\n+        columns = self.column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        # Check the column is nullable\n+        self.assertTrue(columns['note_id'][1][6])\n         # these two types.\n         self.assertIn(columns['bits'][0], (\"BinaryField\", \"TextField\"))\n \n",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..003d17f 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -18,8 +18,46 @@ class Nested:\n \n \n class BasicFieldTests(SimpleTestCase):\n+    def test_hash_immutability(self):\n+        field = models.IntegerField()\n+        field_hash = hash(field)\n \n-    def test_show_hidden_initial(self):\n+        class MyModel(models.Model):\n+            rank = field\n+\n+        self.assertEqual(field_hash, hash(field))\n+\n+    def test_hash_stability_with_assignment(self):\n+        \"\"\"\n+        Test that the hash of a field remains stable even after being reassigned\n+        to another model class.\n+        \"\"\"\n+        field = models.CharField(max_length=100)\n+        original_hash = hash(field)\n+\n+        class FirstModel(models.Model):\n+            name = field\n+\n+        self.assertEqual(original_hash, hash(field))\n+\n+        class SecondModel(models.Model):\n+            title = field\n+\n+        self.assertEqual(original_hash, hash(field))\n+\n+    def test_field_in_dict(self):\n+        \"\"\"\n+        Test that a field can be used as a dictionary key before and after\n+        it is assigned to a model class.\n+        \"\"\"\n+        field = models.CharField(max_length=200)\n+        field_dict = {field: 'test_value'}\n+        self.assertIn(field, field_dict)\n+\n+        class TestModel(models.Model):\n+            test_field = field\n+\n+        self.assertIn(field, field_dict)\n         \"\"\"\n         Fields with choices respect show_hidden_initial as a kwarg to\n         formfield().\n",
  "django__django-15368": "",
  "django__django-15380": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex e2de333..6379657 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1049,7 +1049,57 @@ class AutodetectorTests(TestCase):\n             new_name='renamed_foo',\n         )\n \n-    def test_rename_model(self):\n+    def test_rename_field_with_renamed_model(self):\n+        \"\"\"\n+        Test renaming a field when the model itself has been renamed.\n+        This verifies that the autodetector correctly handles simultaneous field and model renames.\n+        \"\"\"\n+        changes = self.get_changes(\n+            [self.author_name],\n+            [\n+                ModelState(\"testapp\", \"RenamedAuthor\", [\n+                    (\"id\", models.AutoField(primary_key=True)),\n+                    (\"renamed_name\", models.CharField(max_length=200)),\n+                ]),\n+            ],\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel', 'RenameField'])\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 0, old_name='Author', new_name='RenamedAuthor',\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 1, old_name='name', new_name='renamed_name',\n+        )\n+    \n+    def test_rename_model_and_field_sequentially(self):\n+        \"\"\"\n+        Test renaming a model and then a field in separate steps to ensure proper handling.\n+        \"\"\"\n+        changes = self.get_changes(\n+            [self.author_name],\n+            [\n+                ModelState(\"testapp\", \"RenamedAuthor\", [\n+                    (\"id\", models.AutoField(primary_key=True)),\n+                    (\"name\", models.CharField(max_length=200)),\n+                ]),\n+                ModelState(\"testapp\", \"RenamedAuthor\", [\n+                    (\"id\", models.AutoField(primary_key=True)),\n+                    (\"renamed_name\", models.CharField(max_length=200)),\n+                ]),\n+            ],\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 2)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel'])\n+        self.assertOperationTypes(changes, 'testapp', 1, ['RenameField'])\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 0, old_name='Author', new_name='RenamedAuthor',\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 1, 0, old_name='name', new_name='renamed_name',\n+        )\n         \"\"\"Tests autodetection of renamed models.\"\"\"\n         changes = self.get_changes(\n             [self.author_with_book, self.book],\n",
  "django__django-15382": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex bd890ac..2eb0d1b 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1906,7 +1906,32 @@ class ExistsTests(TestCase):\n         self.assertNotIn('ORDER BY', captured_sql)\n \n \n-class FieldTransformTests(TestCase):\n+from django.test import TestCase\n+from django.db.models import Exists, Q\n+from .models import Manager, Experiment\n+\n+class ExistsSubqueryTests(TestCase):\n+\n+    def test_negated_empty_exists_with_name_filter(self):\n+        manager = Manager.objects.create(name='test')\n+        qs = Manager.objects.filter(\n+            ~Exists(Manager.objects.none()) & Q(name='test')\n+        )\n+        self.assertSequenceEqual(qs, [manager])\n+\n+    def test_negated_empty_exists_with_no_additional_filters(self):\n+        manager = Manager.objects.create()\n+        qs = Manager.objects.filter(\n+            ~Exists(Manager.objects.none())\n+        )\n+        self.assertSequenceEqual(qs, [manager])\n+\n+    def test_negated_empty_exists_with_different_model(self):\n+        experiment = Experiment.objects.create()\n+        qs = Experiment.objects.filter(\n+            ~Exists(Manager.objects.none()) & Q(pk=experiment.pk)\n+        )\n+        self.assertSequenceEqual(qs, [experiment])\n \n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-15467": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex f5af59b..738b0f3 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -26,7 +26,10 @@ from django.db.models import (\n )\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n-from django.utils import translation\n+from django.contrib import admin\n+from django.db.models import ForeignKey\n+\n+from .models import Inventory  # Assuming 'Inventory' is a model used in your tests.\n \n from .models import (\n     Advisor,\n@@ -141,7 +144,34 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n         )\n         self.assertIsNone(ff.empty_label)\n \n-    def test_many_to_many(self):\n+    def test_radio_fields_foreignkey_formfield_overrides_empty_label(self):\n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {\"parent\": admin.VERTICAL}\n+            formfield_overrides = {\n+                ForeignKey: {\"empty_label\": \"Custom empty label\"},\n+            }\n+\n+        ma = MyModelAdmin(Inventory, admin.site)\n+        ff = ma.formfield_for_dbfield(Inventory._meta.get_field(\"parent\"), request=None)\n+        self.assertEqual(ff.empty_label, \"Custom empty label\")\n+\n+    def test_radio_fields_ForeignKey_with_blank_db_field(self):\n+        \"\"\"\n+        Test to ensure that the custom empty_label is respected when \n+        db_field.blank is True and radio_fields is set.\n+        \"\"\"\n+\n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {\"parent\": admin.VERTICAL}\n+\n+            def formfield_for_foreignkey(self, db_field, *args, **kwargs):\n+                if db_field.name == 'parent':\n+                    kwargs['empty_label'] = \"I WANT TO SET MY OWN EMPTY LABEL\"\n+                return super().formfield_for_foreignkey(db_field, *args, **kwargs)\n+\n+        ma = MyModelAdmin(Inventory, admin.site)\n+        ff = ma.formfield_for_dbfield(Inventory._meta.get_field(\"parent\"), request=None)\n+        self.assertEqual(ff.empty_label, \"I WANT TO SET MY OWN EMPTY LABEL\")\n         self.assertFormfield(Band, \"members\", forms.SelectMultiple)\n \n     def test_raw_id_many_to_many(self):\n",
  "django__django-15499": "",
  "django__django-15525": "diff --git a/tests/fixtures_regress/models.py b/tests/fixtures_regress/models.py\nindex 6245d2f..8374936 100644\n--- a/tests/fixtures_regress/models.py\n+++ b/tests/fixtures_regress/models.py\n@@ -15,7 +15,35 @@ class Animal(models.Model):\n         return self.name\n \n \n-class Plant(models.Model):\n+from django.db import models\n+\n+class PersonManager(models.Manager):\n+    def get_by_natural_key(self, name):\n+        return self.get(name=name)\n+\n+class Person(models.Model):\n+    name = models.CharField(max_length=255, unique=True)\n+    objects = PersonManager()\n+\n+    def natural_key(self):\n+        return (self.name,)\n+\n+class NaturalKeyWithFKDependencyManager(models.Manager):\n+    def get_by_natural_key(self, name, author):\n+        return self.get(name=name, author__name=author)\n+\n+class NaturalKeyWithFKDependency(models.Model):\n+    name = models.CharField(max_length=255)\n+    author = models.ForeignKey(Person, models.CASCADE)\n+    objects = NaturalKeyWithFKDependencyManager()\n+\n+    class Meta:\n+        unique_together = [\"name\", \"author\"]\n+\n+    def natural_key(self):\n+        return (self.name,) + self.author.natural_key()\n+\n+    natural_key.dependencies = [\"fixtures_regress.Person\"]\n     name = models.CharField(max_length=150)\n \n     class Meta:\n",
  "django__django-15561": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex b8137da..0adba4b 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -3960,8 +3960,27 @@ class SchemaTests(TransactionTestCase):\n             editor.alter_field(Book, old_field, new_field, strict=True)\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             editor.alter_field(Book, new_field, old_field, strict=True)\n+    \n+    def test_alter_field_choices_noop_for_different_model(self):\n+        class Book(models.Model):\n+            title = models.CharField(max_length=255)\n \n-    def test_add_textfield_unhashable_default(self):\n+        # Create the initial model\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Book)\n+        \n+        old_field = Book._meta.get_field(\"title\")\n+        new_field = models.CharField(\n+            choices=((\"Science\", \"Science\"), (\"Fiction\", \"Fiction\")),\n+            max_length=255,\n+        )\n+        new_field.set_attributes_from_name(\"title\")\n+        \n+        # Check that no queries are made when altering field choices\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Book, old_field, new_field, strict=True)\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Book, new_field, old_field, strict=True)\n         # Create the table\n         with connection.schema_editor() as editor:\n             editor.create_model(Author)\n",
  "django__django-15569": "",
  "django__django-15572": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 188dca4..cb642eb 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -76,6 +76,45 @@ class TemplateReloadTests(SimpleTestCase):\n             },\n         )\n \n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"DIRS\": [\"\"],\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            }\n+        ]\n+    )\n+    def test_template_dirs_ignore_empty_path(self):\n+        # Test case to ensure empty strings in DIRS are ignored\n+        self.assertEqual(autoreload.get_template_directories(), set())\n+\n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"DIRS\": [\"\", \"/valid/path\"],\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            }\n+        ]\n+    )\n+    def test_template_dirs_with_mixed_empty_and_valid_paths(self):\n+        # Test case for a mix of empty and valid directories\n+        expected_dirs = {Path(\"/valid/path\")}\n+        self.assertEqual(autoreload.get_template_directories(), expected_dirs)\n+\n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"DIRS\": [\"invalid_path\", \"\"],\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            }\n+        ]\n+    )\n+    def test_template_dirs_with_invalid_and_empty_path(self):\n+        # Test case for invalid and empty directories\n+        cwd = Path.cwd()\n+        expected_dirs = {cwd / \"invalid_path\"}\n+        self.assertEqual(autoreload.get_template_directories(), expected_dirs)\n+\n     @mock.patch(\"django.template.loaders.base.Loader.reset\")\n     def test_reset_all_loaders(self, mock_reset):\n         autoreload.reset_loaders()\n",
  "django__django-15731": "diff --git a/tests/basic/tests.py b/tests/basic/tests.py\nindex 902f114..3beec4d 100644\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -1,9 +1,12 @@\n+\n import threading\n from datetime import datetime, timedelta\n from unittest import mock\n \n from django.core.exceptions import MultipleObjectsReturned, ObjectDoesNotExist\n from django.db import DEFAULT_DB_ALIAS, DatabaseError, connections, models\n+import functools\n+import inspect\n from django.db.models.manager import BaseManager\n from django.db.models.query import MAX_GET_RESULTS, EmptyQuerySet\n from django.test import (\n@@ -724,7 +727,25 @@ class ManagerTest(SimpleTestCase):\n \n     def test_manager_methods(self):\n         \"\"\"\n-        This test ensures that the correct set of methods from `QuerySet`\n+    def test_manager_method_signature_bulk_create(self):\n+        # Test the signature of the bulk_create method on Manager.\n+        expected_signature = \"(objs, batch_size=None, ignore_conflicts=False, update_conflicts=False, update_fields=None, unique_fields=None)\"\n+        actual_signature = str(inspect.signature(Article.objects.bulk_create))\n+        self.assertEqual(actual_signature, expected_signature)\n+\n+    def test_manager_method_signature_get(self):\n+        # Test the signature of the get method on Manager.\n+        expected_signature = \"(self, *args, **kwargs)\"\n+        actual_signature = str(inspect.signature(Article.objects.get))\n+        self.assertEqual(actual_signature, expected_signature)\n+\n+    def test_manager_method_signature_count(self):\n+        # Test the signature of the count method on Manager.\n+        expected_signature = \"(self)\"\n+        actual_signature = str(inspect.signature(Article.objects.count))\n+        self.assertEqual(actual_signature, expected_signature)\n+\n+...\n         are copied onto `Manager`.\n \n         It's particularly useful to prevent accidentally leaking new methods\n",
  "django__django-15741": "diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex c6dbc53..16b92c4 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -1,4 +1,7 @@\n+\n from datetime import datetime, time\n+from django.utils.translation import gettext_lazy\n+from django.utils.formats import get_format\n \n from django.template.defaultfilters import date\n from django.test import SimpleTestCase\n@@ -74,7 +77,15 @@ class DateTests(TimezoneTestCase):\n \n \n class FunctionTests(SimpleTestCase):\n-    def test_date(self):\n+    def test_get_format_lazy_format(self):\n+        # Test that get_format can handle lazy strings without raising TypeError\n+        self.assertEqual(get_format(gettext_lazy(\"DATE_FORMAT\")), \"N j, Y\")\n+\n+    @setup({\"datelazy\": '{{ t|date:_(\"H:i\") }}'})\n+    def test_date_lazy(self):\n+        # Test that the date filter works correctly with lazy strings\n+        output = self.engine.render_to_string(\"datelazy\", {\"t\": time(0, 0)})\n+        self.assertEqual(output, \"00:00\")\n         self.assertEqual(date(datetime(2005, 12, 29), \"d F Y\"), \"29 December 2005\")\n \n     def test_no_args(self):\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..b3ea3d0 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -398,6 +398,19 @@ class ProxyModelTests(TestCase):\n     def test_eq(self):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n+    def test_select_related_only_proxy_model(self):\n+        # Setup: Create instances of the models involved\n+        custom = ProxyCustomModel.objects.create(name=\"Test Name\")\n+        another = AnotherModel.objects.create(custom=custom)\n+\n+        # Action: Attempt to use select_related and only on the proxy model, then fetch\n+        try:\n+            objs = list(AnotherModel.objects.select_related(\"custom\").only(\"custom__name\").all())\n+            self.assertEqual(len(objs), 1)\n+            self.assertEqual(objs[0].custom.name, \"Test Name\")\n+        except ValueError as e:\n+            self.fail(f\"Encountered a ValueError: {e}\")\n+\n \n @override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n class ProxyModelAdminTests(TestCase):\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..60c9203 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -157,6 +157,12 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n+    def test_parameters_with_command(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1;\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1;\", \"dbname\"], None),\n+        )\n+\n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n",
  "django__django-15863": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 08f08e1..d1f4d82 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -74,6 +74,30 @@ class FunctionTests(SimpleTestCase):\n         self.assertEqual(floatformat(1.5e-15, -20), \"0.00000000000000150000\")\n         self.assertEqual(floatformat(1.00000000000000015, 16), \"1.0000000000000002\")\n \n+    def test_floatformat_decimal_precision(self):\n+        # Test case from the issue to ensure precision is not dropped\n+        self.assertEqual(\n+            floatformat(Decimal(\"123456.123456789012345678901\"), 21),\n+            \"123456.123456789012345678901\",\n+        )\n+        # Additional test cases for various precisions\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.12345678901234567890\"), 20),\n+            \"42.12345678901234567890\",\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"3.1415926535897932384626433832795028841971\"), 40),\n+            \"3.1415926535897932384626433832795028841971\",\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"0.0000000000000000000000000000000000000001\"), 40),\n+            \"0.0000000000000000000000000000000000000001\",\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"1.234567890123456789012345678901234567890\"), 39),\n+            \"1.234567890123456789012345678901234567890\",\n+        )\n+\n     def test_force_grouping(self):\n         with translation.override(\"en\"):\n             self.assertEqual(floatformat(10000, \"g\"), \"10,000\")\n",
  "django__django-15930": "diff --git a/tests/expressions_case/tests.py b/tests/expressions_case/tests.py\nindex 696f4d0..1408627 100644\n--- a/tests/expressions_case/tests.py\n+++ b/tests/expressions_case/tests.py\n@@ -415,7 +415,16 @@ class CaseExpressionTests(TestCase):\n         self.assertEqual(len(objects), CaseTestModel.objects.count())\n         self.assertTrue(all(obj.selected == \"not selected\" for obj in objects))\n \n-    def test_combined_expression(self):\n+    def test_annotate_with_negated_empty_when(self):\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+            )\n+        )\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        # Since ~Q(pk__in=[]) should match all objects, all should be \"selected\"\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n         self.assertQuerysetEqual(\n             CaseTestModel.objects.annotate(\n                 test=Case(\n",
  "django__django-15987": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 5ac9ab9..75bf705 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n # Unittests for fixtures.\n import json\n import os\n@@ -575,7 +576,18 @@ class TestFixtures(TestCase):\n             os.path.join(_cur_dir, \"fixtures_2\"),\n         ]\n     )\n-    def test_loaddata_with_valid_fixture_dirs(self):\n+    @override_settings(FIXTURE_DIRS=[Path(_cur_dir) / \"fixtures\"])\n+    def test_fixture_dirs_with_path_instance(self):\n+        \"\"\"\n+        Test that FIXTURE_DIRS containing a Path instance does not allow duplicates.\n+        \"\"\"\n+        msg = (\n+            \"'%s' is a default fixture directory for the '%s' app \"\n+            \"and cannot be listed in settings.FIXTURE_DIRS.\"\n+            % (os.path.join(_cur_dir, \"fixtures\"), \"fixtures_regress\")\n+        )\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n         management.call_command(\n             \"loaddata\",\n             \"absolute.json\",\n",
  "django__django-16032": "",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..c6202be 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2416,7 +2416,7 @@ class CombinedExpressionTests(SimpleTestCase):\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV, Combinable.MOD]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..3dfdcb3 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib import admin\n@@ -21,7 +22,9 @@ from django.db.models import F, Field, IntegerField\n from django.db.models.functions import Upper\n from django.db.models.lookups import Contains, Exact\n from django.template import Context, Template, TemplateSyntaxError\n-from django.test import TestCase, override_settings\n+from unittest import mock\n+from django.db import DatabaseError\n+from django.test import TestCase, override_settings, skipUnlessDBFeature\n from django.test.client import RequestFactory\n from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup\n from django.urls import reverse\n@@ -400,7 +403,52 @@ class ChangeListTests(TestCase):\n         with self.assertRaises(IncorrectLookupParameters):\n             m.get_changelist_instance(request)\n \n-    def test_custom_paginator(self):\n+    @skipUnlessDBFeature(\"supports_transactions\")\n+    def test_list_editable_atomicity(self):\n+        a = Swallow.objects.create(origin=\"Swallow A\", load=4, speed=1)\n+        b = Swallow.objects.create(origin=\"Swallow B\", load=2, speed=2)\n+\n+        self.client.force_login(self.superuser)\n+        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n+        data = {\n+            \"form-TOTAL_FORMS\": \"2\",\n+            \"form-INITIAL_FORMS\": \"2\",\n+            \"form-MIN_NUM_FORMS\": \"0\",\n+            \"form-MAX_NUM_FORMS\": \"1000\",\n+            \"form-0-uuid\": str(a.pk),\n+            \"form-1-uuid\": str(b.pk),\n+            \"form-0-load\": \"9.0\",\n+            \"form-0-speed\": \"3.0\",\n+            \"form-1-load\": \"5.0\",\n+            \"form-1-speed\": \"1.0\",\n+            \"_save\": \"Save\",\n+        }\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\", side_effect=DatabaseError\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Original values are preserved.\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\",\n+            side_effect=[None, DatabaseError],\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Original values are preserved.\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n         new_parent = Parent.objects.create(name=\"parent\")\n         for i in range(1, 201):\n             Child.objects.create(name=\"name %s\" % i, parent=new_parent)\n",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..d36d588 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2400,7 +2400,29 @@ class MakeMigrationsTests(MigrationTestBase):\n         ):\n             call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n \n-    def test_makemigrations_migration_path_output(self):\n+    def test_makemigrations_check_no_dry_run(self):\n+        \"\"\"\n+        makemigrations --check should exit with a non-zero status when there are \n+        changes to an app requiring migrations, without requiring --dry-run.\n+        \"\"\"\n+        # Simulate a scenario where migrations are required.\n+        apps.register_model(\"migrations\", UnicodeModel)\n+        with self.temporary_migration_module():\n+            with self.assertRaises(SystemExit):\n+                call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+\n+    def test_makemigrations_check_no_changes(self):\n+        \"\"\"\n+        makemigrations --check should exit with a zero status when there are no\n+        changes to an app requiring migrations.\n+        \"\"\"\n+        with self.temporary_migration_module(\n+            module=\"migrations.test_migrations_no_changes\"\n+        ):\n+            try:\n+                call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+            except SystemExit as e:\n+                self.fail(f\"makemigrations --check exited with non-zero status: {e}\")\n         \"\"\"\n         makemigrations should print the relative paths to the migrations unless\n         they are outside of the current tree, in which case the absolute path\n",
  "django__django-16136": "diff --git a/tests/async/tests.py b/tests/async/tests.py\nindex 72e103e..585b651 100644\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -1,3 +1,4 @@\n+\n import asyncio\n import os\n from unittest import mock\n@@ -6,8 +7,9 @@ from asgiref.sync import async_to_sync\n \n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n-from django.http import HttpResponse\n-from django.test import SimpleTestCase\n+from django.http import HttpResponse, HttpResponseNotAllowed\n+from django.test import RequestFactory, SimpleTestCase\n+import asyncio\n from django.utils.asyncio import async_unsafe\n from django.views.generic.base import View\n \n@@ -119,6 +121,28 @@ class ViewTests(SimpleTestCase):\n \n                 self.assertIsInstance(response, HttpResponse)\n \n+    def test_http_method_not_allowed_responds_correctly(self):\n+        \"\"\"\n+        Test that verifies HttpResponseNotAllowed behavior for both sync and async views.\n+        \"\"\"\n+        request_factory = RequestFactory()\n+        tests = [\n+            (SyncView, False),\n+            (AsyncView, True),\n+        ]\n+        for view_cls, is_coroutine in tests:\n+            with self.subTest(view_cls=view_cls, is_coroutine=is_coroutine):\n+                instance = view_cls()\n+                response = instance.http_method_not_allowed(request_factory.post(\"/\"))\n+                self.assertIs(\n+                    asyncio.iscoroutine(response),\n+                    is_coroutine,\n+                )\n+                if is_coroutine:\n+                    response = asyncio.run(response)\n+\n+                self.assertIsInstance(response, HttpResponseNotAllowed)\n+\n     def test_base_view_class_is_sync(self):\n         \"\"\"\n         View and by extension any subclasses that don't define handlers are\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..04de297 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -24,7 +25,9 @@ from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n+from django.urls import reverse\n from django.utils.translation import gettext as _\n+import urllib.parse\n \n from .models.custom_user import (\n     CustomUser,\n@@ -881,7 +884,33 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         form = UserChangeForm(instance=user, data=post_data)\n \n         self.assertTrue(form.is_valid())\n-        # original hashed password contains $\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n+    def test_correct_password_reset_link_formatting(self):\n+        user = User.objects.create_user(username=\"testclient2\", password=\"password\", uuid=\"22222222-3333-4444-5555-666677778888\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.+?)\">', password_help_text)\n+        self.assertTrue(matches)\n+        self.assertIn(\"../../22222222-3333-4444-5555-666677778888/password/\", matches.group(1))\n         self.assertIn(\"$\", form.cleaned_data[\"password\"])\n \n     def test_bug_19349_bound_password_field(self):\n",
  "django__django-16145": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex 04d2f0e..490510f 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1600,6 +1600,20 @@ class ManageRunserver(SimpleTestCase):\n             \"2001:0db8:1234:5678::9\", \"7000\", ipv6=True, raw_ipv6=True\n         )\n \n+    def test_runner_zero_ip(self):\n+        # Mocking necessary components for the test\n+        with mock.patch(\"django.core.management.commands.runserver.run\"), \\\n+             mock.patch(\"django.core.management.base.BaseCommand.check_migrations\"):\n+\n+            # Create a buffer to capture output\n+            output = io.StringIO()\n+            \n+            # Run the command with 0:8000, capturing stdout\n+            call_command(\"runserver\", addrport=\"0:8000\", use_reloader=False, skip_checks=True, stdout=output)\n+\n+            # Validate that the server address is output correctly\n+            self.assertIn(\"Starting development server at http://0.0.0.0:8000/\", output.getvalue())\n+\n     def test_runner_hostname(self):\n         call_command(self.cmd, addrport=\"localhost:8000\")\n         self.assertServerSettings(\"localhost\", \"8000\")\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..94dc577 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -507,6 +507,21 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n+class TestCallableLastmodNoItems(SitemapTestsBase):\n+\n+    def setUp(self):\n+        super().setUp()\n+        self.index_url = reverse('django.contrib.sitemaps.views.index', kwargs={'sitemaps': 'callable-lastmod-no-items'})\n+\n+    def test_callable_sitemod_no_items(self):\n+        index_response = self.client.get(self.index_url)\n+        self.assertNotIn(\"Last-Modified\", index_response)\n+        expected_content_index = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\n+        </sitemapindex>\n+        \"\"\"\n+        self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n \n # RemovedInDjango50Warning\n class DeprecatedTests(SitemapTestsBase):\n",
  "django__django-16315": "diff --git a/tests/bulk_create/models.py b/tests/bulk_create/models.py\nindex c5f5c07..fbff43b 100644\n--- a/tests/bulk_create/models.py\n+++ b/tests/bulk_create/models.py\n@@ -58,6 +58,10 @@ class Restaurant(Place):\n class Pizzeria(Restaurant):\n     pass\n \n+class FieldsWithDbColumns(models.Model):\n+    rank = models.IntegerField(unique=True, db_column=\"rAnK\")\n+    name = models.CharField(max_length=15, null=True, db_column=\"oTheRNaMe\")\n+\n \n class State(models.Model):\n     two_letter_code = models.CharField(max_length=2, primary_key=True)\n@@ -78,6 +82,10 @@ class UpsertConflict(models.Model):\n class NoFields(models.Model):\n     pass\n \n+class FieldsWithDbColumns(models.Model):\n+    rank = models.IntegerField(unique=True, db_column=\"rAnK\")\n+    name = models.CharField(max_length=15, null=True, db_column=\"oTheRNaMe\")\n+\n \n class SmallAutoFieldModel(models.Model):\n     id = models.SmallAutoField(primary_key=True)\n",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..d9c9129 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n import urllib.parse\n@@ -34,6 +35,7 @@ from .models.custom_user import (\n     ExtensionUser,\n )\n from .models.with_custom_email_field import CustomEmailField\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n from .models.with_integer_username import IntegerUsernameUser\n from .settings import AUTH_TEMPLATES\n \n@@ -252,7 +254,55 @@ class UserCreationFormTest(TestDataMixin, TestCase):\n         form = CustomUserCreationForm(data)\n         self.assertTrue(form.is_valid())\n \n-    def test_password_whitespace_not_stripped(self):\n+    def test_custom_form_saves_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization = Organization.objects.create(name=\"organization 1\")\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization])\n+\n+    def test_custom_form_without_m2m(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields\n+\n+        data = {\n+            \"username\": \"testclient2@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertEqual(user.orgs.count(), 0)\n+\n+    def test_custom_form_with_invalid_m2m(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        data = {\n+            \"username\": \"testclient3@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [\"nonexistent_id\"],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), False)\n         data = {\n             \"username\": \"testuser\",\n             \"password1\": \"   testpassword   \",\n",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..cb11fe5 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.test import TestCase\n@@ -160,7 +161,21 @@ class TimesinceTests(TestCase):\n         self.assertEqual(timesince(t + self.oneday, now), \"0\\xa0minutes\")\n         self.assertEqual(timeuntil(t - self.oneday, now), \"0\\xa0minutes\")\n \n-    def test_naive_datetime_with_tzinfo_attribute(self):\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_timesince_with_tz_aware_datetime(self):\n+        now = timezone.now()\n+        past = now - datetime.timedelta(days=45)\n+        past = timezone.make_aware(past, timezone.get_default_timezone())\n+        self.assertEqual(timesince(past, now), \"1\\xa0month, 2\\xa0weeks\")\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_timesince_with_naive_and_aware(self):\n+        now = datetime.datetime.now()\n+        aware_now = timezone.make_aware(now, timezone.get_default_timezone())\n+        past = aware_now - datetime.timedelta(days=45)\n+        self.assertEqual(timesince(past, aware_now), \"1\\xa0month, 2\\xa0weeks\")\n         class naive(datetime.tzinfo):\n             def utcoffset(self, dt):\n                 return None\n",
  "django__django-16454": "",
  "django__django-16485": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 1623d39..7ea6528 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -112,7 +112,13 @@ class FunctionTests(SimpleTestCase):\n             floatformat(0.000000000000000000015, 20), \"0.00000000000000000002\"\n         )\n \n-    def test_negative_zero_values(self):\n+    def test_zero_point_zero_zero(self):\n+        self.assertEqual(floatformat(\"0.00\", 0), \"0\")\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), 0), \"0\")\n+        self.assertEqual(floatformat(\"0.00\", -1), \"0\")\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), -1), \"0\")\n+        self.assertEqual(floatformat(\"0.00\", 2), \"0.00\")\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), 2), \"0.00\")\n         tests = [\n             (-0.01, -1, \"0.0\"),\n             (-0.001, 2, \"0.00\"),\n",
  "django__django-16493": "diff --git a/tests/file_storage/models.py b/tests/file_storage/models.py\nindex 3513a6b..19a1449 100644\n--- a/tests/file_storage/models.py\n+++ b/tests/file_storage/models.py\n@@ -51,6 +51,9 @@ class Storage(models.Model):\n         storage=temp_storage, upload_to=pathlib_upload_to\n     )\n     pathlib_direct = models.FileField(storage=temp_storage, upload_to=Path(\"bar\"))\n+    callable_default_storage = models.FileField(\n+        storage=callable_default_storage, upload_to=\"storage_callable_default\"\n+    )\n     random = models.FileField(storage=temp_storage, upload_to=random_upload_to)\n     custom_valid_name = models.FileField(\n         storage=CustomValidNameStorage(location=temp_storage_location),\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..590fb05 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n@@ -6,7 +7,9 @@ from django.contrib.admin.templatetags.admin_modify import submit_row\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n+from django.contrib.auth import get_permission_codename\n from django.urls import reverse\n+from .tests import get_perm\n \n from .admin import ArticleAdmin, site\n from .models import Article, Question\n@@ -54,7 +57,42 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n                     template_context[\"show_save_and_add_another\"], expected_flag\n                 )\n \n-    def test_override_change_form_template_tags(self):\n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        \"\"\"\n+        Test that 'show_save_as_new' requires add permission.\n+        \"\"\"\n+        # Create a user with only change permission\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        # Create a user with add and change permissions\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n         \"\"\"\n         admin_modify template tags follow the standard search pattern\n         admin/app_label/model/template.html.\n",
  "django__django-16560": "diff --git a/tests/constraints/tests.py b/tests/constraints/tests.py\nindex 13854a9..a04c885 100644\n--- a/tests/constraints/tests.py\n+++ b/tests/constraints/tests.py\n@@ -149,6 +149,35 @@ class CheckConstraintTests(TestCase):\n             ),\n         )\n \n+    def test_custom_violation_code(self):\n+        \"\"\"Test that custom violation error codes are correctly set and raised.\"\"\"\n+        # CheckConstraint with custom error code\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price\",\n+            violation_error_code=\"custom_error_code\",\n+        )\n+        invalid_product = Product(price=10, discounted_price=42)\n+        msg = \"Constraint \u201cprice\u201d is violated.\"\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n+            constraint.validate(Product, invalid_product)\n+        self.assertEqual(cm.exception.code, \"custom_error_code\")\n+\n+        # UniqueConstraint with custom error code\n+        constraint = models.UniqueConstraint(\n+            fields=[\"name\", \"color\"],\n+            name=\"unique_name_color\",\n+            violation_error_code=\"unique_violation_code\",\n+        )\n+        non_unique_product = UniqueConstraintProduct(\n+            name=self.p1.name, color=self.p1.color\n+        )\n+        msg = \"Unique constraint product with this Name and Color already exists.\"\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n+            constraint.validate(UniqueConstraintProduct, non_unique_product)\n+        self.assertEqual(cm.exception.code, \"unique_violation_code\")\n+\n     def test_repr(self):\n         constraint = models.CheckConstraint(\n             check=models.Q(price__gt=models.F(\"discounted_price\")),\n",
  "django__django-16569": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 55da562..7aae5f5 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1476,6 +1476,17 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertNotIn(\"DELETE\", formset.forms[1].fields)\n \n         formset = ChoiceFormFormset(initial=[{\"choice\": \"Zero\", \"votes\": \"1\"}])\n+\n+        # Test case for verifying add_fields() when index is None\n+        my_formset = forms.formset_factory(\n+            form=MyForm,\n+            can_delete=True,\n+            can_delete_extra=False,\n+        )()\n+        empty_form = my_formset.empty_form\n+        \n+        # Ensure that the 'DELETE' field doesn't exist on the empty form, confirming the fix\n+        self.assertNotIn(\"DELETE\", empty_form.fields)\n         self.assertEqual(len(formset), 3)\n         self.assertIn(\"DELETE\", formset.forms[0].fields)\n         self.assertNotIn(\"DELETE\", formset.forms[1].fields)\n",
  "django__django-16595": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3979e76..5d2431e 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -43,6 +43,56 @@ class OptimizerTests(SimpleTestCase):\n     def assertDoesNotOptimize(self, operations, **kwargs):\n         self.assertOptimizesTo(operations, operations, **kwargs)\n \n+    def test_collapse_consecutive_alterfield(self):\n+        \"\"\"\n+        Test that consecutive AlterField operations on the same field\n+        are collapsed into a single AlterField operation.\n+        \"\"\"\n+        from django.db import models\n+        from django.db.migrations import AlterField\n+        from django.db.migrations.operations import AddField\n+        \n+        # Define the operations\n+        operations = [\n+            AddField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=256, null=True),\n+            ),\n+            AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True),\n+            ),\n+            AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\"),\n+            ),\n+            AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+            ),\n+        ]\n+\n+        # Expected operation after optimization\n+        expected = [\n+            AddField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=256, null=True),\n+            ),\n+            AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+            ),\n+        ]\n+        \n+        # Run the test\n+        self.assertOptimizesTo(operations, expected)\n+\n     def test_none_app_label(self):\n         optimizer = MigrationOptimizer()\n         with self.assertRaisesMessage(TypeError, \"app_label must be a str\"):\n",
  "django__django-16612": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 9120571..4d295dc 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -8450,6 +8450,15 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n \n     @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_true(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        # Test preserving query strings during a redirect when APPEND_SLASH=True\n+    @override_settings(APPEND_SLASH=True)\n+    def test_append_slash_preserves_query_string(self):\n         superuser = User.objects.create_user(\n             username=\"staff\",\n             password=\"secret\",\n@@ -8458,13 +8467,111 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         )\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_append_slash_preserves_multiple_query_params(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123&sort=asc\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123&sort=asc\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_append_slash_preserves_query_string_for_non_existing_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        non_existing_url = \"/admin/auth/non-existing\"\n+        response = self.client.get(f\"{non_existing_url}?id=123\")\n+        self.assertEqual(response.status_code, 404)\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1])\n         self.assertRedirects(\n             response, known_url, status_code=301, target_status_code=403\n         )\n+        # Test preserving query strings during a redirect when APPEND_SLASH=True\n+    @override_settings(APPEND_SLASH=True)\n+    def test_append_slash_preserves_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_append_slash_preserves_multiple_query_params(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123&sort=asc\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123&sort=asc\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_append_slash_preserves_query_string_for_non_existing_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        non_existing_url = \"/admin/auth/non-existing\"\n+        response = self.client.get(f\"{non_existing_url}?id=123\")\n+        self.assertEqual(response.status_code, 404)\n \n     @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_true_script_name(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        # Test preserving query strings during a redirect when APPEND_SLASH=True\n+    @override_settings(APPEND_SLASH=True)\n+    def test_append_slash_preserves_query_string(self):\n         superuser = User.objects.create_user(\n             username=\"staff\",\n             password=\"secret\",\n@@ -8473,6 +8580,46 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         )\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_append_slash_preserves_multiple_query_params(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123&sort=asc\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123&sort=asc\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_append_slash_preserves_query_string_for_non_existing_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        non_existing_url = \"/admin/auth/non-existing\"\n+        response = self.client.get(f\"{non_existing_url}?id=123\")\n+        self.assertEqual(response.status_code, 404)\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n         self.assertRedirects(\n             response,\n@@ -8480,6 +8627,55 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             status_code=301,\n             fetch_redirect_response=False,\n         )\n+        # Test preserving query strings during a redirect when APPEND_SLASH=True\n+    @override_settings(APPEND_SLASH=True)\n+    def test_append_slash_preserves_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_append_slash_preserves_multiple_query_params(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123&sort=asc\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123&sort=asc\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_append_slash_preserves_query_string_for_non_existing_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        non_existing_url = \"/admin/auth/non-existing\"\n+        response = self.client.get(f\"{non_existing_url}?id=123\")\n+        self.assertEqual(response.status_code, 404)\n \n     @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME=\"/prefix/\")\n     def test_missing_slash_append_slash_true_force_script_name(self):\n@@ -8489,6 +8685,55 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             email=\"staff@example.com\",\n             is_staff=True,\n         )\n+        # Test preserving query strings during a redirect when APPEND_SLASH=True\n+    @override_settings(APPEND_SLASH=True)\n+    def test_append_slash_preserves_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_append_slash_preserves_multiple_query_params(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123&sort=asc\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123&sort=asc\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_append_slash_preserves_query_string_for_non_existing_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        non_existing_url = \"/admin/auth/non-existing\"\n+        response = self.client.get(f\"{non_existing_url}?id=123\")\n+        self.assertEqual(response.status_code, 404)\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1])\n@@ -8498,6 +8743,55 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             status_code=301,\n             fetch_redirect_response=False,\n         )\n+        # Test preserving query strings during a redirect when APPEND_SLASH=True\n+    @override_settings(APPEND_SLASH=True)\n+    def test_append_slash_preserves_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_append_slash_preserves_multiple_query_params(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123&sort=asc\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123&sort=asc\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_append_slash_preserves_query_string_for_non_existing_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        non_existing_url = \"/admin/auth/non-existing\"\n+        response = self.client.get(f\"{non_existing_url}?id=123\")\n+        self.assertEqual(response.status_code, 404)\n \n     @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n@@ -8507,6 +8801,55 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             email=\"user@example.com\",\n             is_staff=False,\n         )\n+        # Test preserving query strings during a redirect when APPEND_SLASH=True\n+    @override_settings(APPEND_SLASH=True)\n+    def test_append_slash_preserves_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_append_slash_preserves_multiple_query_params(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123&sort=asc\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123&sort=asc\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_append_slash_preserves_query_string_for_non_existing_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        non_existing_url = \"/admin/auth/non-existing\"\n+        response = self.client.get(f\"{non_existing_url}?id=123\")\n+        self.assertEqual(response.status_code, 404)\n         self.client.force_login(user)\n         known_url = reverse(\"admin:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1])\n@@ -8616,6 +8959,15 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n \n     @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_true_without_final_catch_all_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        # Test preserving query strings during a redirect when APPEND_SLASH=True\n+    @override_settings(APPEND_SLASH=True)\n+    def test_append_slash_preserves_query_string(self):\n         superuser = User.objects.create_user(\n             username=\"staff\",\n             password=\"secret\",\n@@ -8623,11 +8975,100 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             is_staff=True,\n         )\n         self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_append_slash_preserves_multiple_query_params(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123&sort=asc\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123&sort=asc\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_append_slash_preserves_query_string_for_non_existing_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        non_existing_url = \"/admin/auth/non-existing\"\n+        response = self.client.get(f\"{non_existing_url}?id=123\")\n+        self.assertEqual(response.status_code, 404)\n+        self.client.force_login(superuser)\n         known_url = reverse(\"admin10:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1])\n         self.assertRedirects(\n             response, known_url, status_code=301, target_status_code=403\n         )\n+        # Test preserving query strings during a redirect when APPEND_SLASH=True\n+    @override_settings(APPEND_SLASH=True)\n+    def test_append_slash_preserves_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_append_slash_preserves_multiple_query_params(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123&sort=asc\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123&sort=asc\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_append_slash_preserves_query_string_for_non_existing_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        non_existing_url = \"/admin/auth/non-existing\"\n+        response = self.client.get(f\"{non_existing_url}?id=123\")\n+        self.assertEqual(response.status_code, 404)\n \n     @override_settings(APPEND_SLASH=False)\n     def test_missing_slash_append_slash_false_without_final_catch_all_view(self):\n@@ -8637,6 +9078,55 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             email=\"staff@example.com\",\n             is_staff=True,\n         )\n+        # Test preserving query strings during a redirect when APPEND_SLASH=True\n+    @override_settings(APPEND_SLASH=True)\n+    def test_append_slash_preserves_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_append_slash_preserves_multiple_query_params(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123&sort=asc\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123&sort=asc\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_append_slash_preserves_query_string_for_non_existing_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        non_existing_url = \"/admin/auth/non-existing\"\n+        response = self.client.get(f\"{non_existing_url}?id=123\")\n+        self.assertEqual(response.status_code, 404)\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin10:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1])\n",
  "django__django-16642": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 499356e..8601b54 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -255,6 +255,8 @@ class FileResponseTests(SimpleTestCase):\n             (\".tar.gz\", \"application/gzip\"),\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n+            (\".tar.br\", \"application/x-brotli\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n         )\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n@@ -262,6 +264,12 @@ class FileResponseTests(SimpleTestCase):\n                     response = FileResponse(tmp)\n                 self.assertEqual(response.headers[\"Content-Type\"], mimetype)\n                 self.assertFalse(response.has_header(\"Content-Encoding\"))\n+        for extension, mimetype in test_tuples:\n+            with self.subTest(ext=extension):\n+                with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n+                    response = FileResponse(tmp)\n+                self.assertEqual(response.headers[\"Content-Type\"], mimetype)\n+                self.assertFalse(response.has_header(\"Content-Encoding\"))\n \n     def test_unicode_attachment(self):\n         response = FileResponse(\n",
  "django__django-16661": "diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py\nindex 8cb88da..3088c89 100644\n--- a/tests/modeladmin/tests.py\n+++ b/tests/modeladmin/tests.py\n@@ -154,6 +154,67 @@ class ModelAdminTests(TestCase):\n             ma.lookup_allowed(\"employee__department__code\", \"test_value\"), True\n         )\n \n+    @isolate_apps(\"modeladmin\")\n+    def test_lookup_allowed_foreign_primary(self):\n+        class Country(models.Model):\n+            name = models.CharField(max_length=256)\n+        \n+        class Place(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+        \n+        class Restaurant(models.Model):\n+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)\n+        \n+        class Waiter(models.Model):\n+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n+\n+        class WaiterAdmin(ModelAdmin):\n+            list_filter = [\n+                \"restaurant__place__country\",\n+                \"restaurant__place__country__name\",\n+            ]\n+\n+        ma = WaiterAdmin(Waiter, self.site)\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country\", \"1\"), True)\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__id__exact\", \"1\"), True\n+        )\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__name\", \"test_value\"), True\n+        )\n+        \n+    def test_lookup_disallowed(self):\n+        class Country(models.Model):\n+            name = models.CharField(max_length=256)\n+        \n+        class Place(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+        \n+        class Restaurant(models.Model):\n+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)\n+        \n+        class Waiter(models.Model):\n+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n+\n+        class WaiterAdmin(ModelAdmin):\n+            list_filter = [\n+                \"restaurant__place__country\",\n+            ]\n+\n+        ma = WaiterAdmin(Waiter, self.site)\n+        # This should be disallowed because \"wrong_lookup\" is not in list_filter\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country__wrong_lookup\", \"test_value\"), False)\n+\n+        ma = EmployeeProfileAdmin(EmployeeProfile, self.site)\n+        # Reverse OneToOneField\n+        self.assertIs(\n+            ma.lookup_allowed(\"employee__employeeinfo__description\", \"test_value\"), True\n+        )\n+        # OneToOneField and ForeignKey\n+        self.assertIs(\n+            ma.lookup_allowed(\"employee__department__code\", \"test_value\"), True\n+        )\n+\n     def test_field_arguments(self):\n         # If fields is specified, fieldsets_add and fieldsets_change should\n         # just stick the fields into a formsets structure and return it.\n",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..268dd62 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -922,7 +922,52 @@ class WriterTests(SimpleTestCase):\n             output,\n         )\n \n-    def test_migration_file_header_comments(self):\n+    def test_import_ordering_with_multiple_imports(self):\n+        \"\"\"\n+        Ensure multiple imports are ordered correctly.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.RunPython('test_func'),\n+                ],\n+                \"dependencies\": [(\"app1\", \"0001_initial\"),],\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        self.assertIn(\n+            \"import datetime\\nimport time\\nfrom django.db import migrations, models\\n\",\n+            output,\n+        )\n+\n+    def test_imports_with_standard_library_and_third_party(self):\n+        \"\"\"\n+        Ensure standard library imports come before third-party imports.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [],\n+                \"dependencies\": [],\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        # Mock imports to simulate a scenario\n+        writer.migration.imports = {\n+            \"import os\",\n+            \"import sys\",\n+            \"from django.db import migrations, models\",\n+            \"import third_party_lib\",\n+        }\n+        output = writer.as_string()\n+        self.assertIn(\n+            \"import os\\nimport sys\\nimport third_party_lib\\nfrom django.db import migrations, models\\n\",\n+            output,\n+        )\n         \"\"\"\n         Test comments at top of file.\n         \"\"\"\n",
  "django__django-16801": "",
  "django__django-16819": "",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..c8ba669 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -805,8 +805,37 @@ class SystemChecksTestCase(SimpleTestCase):\n             )\n         ]\n         self.assertEqual(errors, expected)\n+    \n+    def test_nonexistent_field_name_in_error_message(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            readonly_fields = (\"title\", \"nonexistent\")\n+        \n+        errors = SongAdmin(Song, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[1]' refers to 'nonexistent', \"\n+                \"which is not a callable, an attribute of 'SongAdmin', or an attribute of 'admin_checks.Song'.\",\n+                obj=SongAdmin,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n \n-    def test_nonexistent_field_on_inline(self):\n+    def test_nonexistent_field_on_inline_field_name_in_error_message(self):\n+        class CityInline(admin.TabularInline):\n+            model = City\n+            readonly_fields = [\"i_dont_exist\"]  # Missing attribute\n+        \n+        errors = CityInline(State, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' refers to 'i_dont_exist', \"\n+                \"which is not a callable, an attribute of 'CityInline', or an attribute of 'admin_checks.City'.\",\n+                obj=CityInline,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n         class CityInline(admin.TabularInline):\n             model = City\n             readonly_fields = [\"i_dont_exist\"]  # Missing attribute\n",
  "django__django-16901": "diff --git a/tests/xor_lookups/tests.py b/tests/xor_lookups/tests.py\nindex 389d908..16f430f 100644\n--- a/tests/xor_lookups/tests.py\n+++ b/tests/xor_lookups/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import Q\n from django.test import TestCase\n \n@@ -60,8 +61,33 @@ class XorLookupsTests(TestCase):\n             self.numbers[:2],\n         )\n \n+    def test_xor_parity(self):\n+        # Test with three conditions\n+        self.assertCountEqual(\n+            Number.objects.filter(Q(num__gte=2) ^ Q(num__gte=4) ^ Q(num__gte=6)),\n+            [self.numbers[2], self.numbers[3], self.numbers[6], self.numbers[7], self.numbers[8], self.numbers[9]],\n+        )\n+        \n+        # Test with five conditions\n+        self.assertCountEqual(\n+            Number.objects.filter(Q(num__gte=1) ^ Q(num__gte=3) ^ Q(num__gte=5) ^ Q(num__gte=7) ^ Q(num__gte=9)),\n+            self.numbers[1:3] + self.numbers[5:7] + self.numbers[9:],\n+        )\n+        \n+        # Additional edge case: all false should result in all records\n+        self.assertCountEqual(\n+            Number.objects.filter(Q(num__lt=0) ^ Q(num__lt=0) ^ Q(num__lt=0)),\n+            self.numbers,\n+        )\n+\n+        # Additional edge case: all true should result in no records\n+        self.assertCountEqual(\n+            Number.objects.filter(Q(num__gte=0) ^ Q(num__gte=0) ^ Q(num__gte=0)),\n+            [],\n+        )\n+\n     def test_empty_in(self):\n         self.assertCountEqual(\n             Number.objects.filter(Q(pk__in=[]) ^ Q(num__gte=5)),\n             self.numbers[5:],\n-        )\n+        )\n",
  "django__django-17029": "diff --git a/tests/apps/tests.py b/tests/apps/tests.py\nindex f7c2c67..cb55974 100644\n--- a/tests/apps/tests.py\n+++ b/tests/apps/tests.py\n@@ -138,6 +138,10 @@ class AppsTests(SimpleTestCase):\n             config = apps.get_app_config(\"two_configs_one_default_app\")\n         self.assertIsInstance(config, TwoConfig)\n \n+    from django.test import override_settings\n+    from django.apps import apps\n+    from functools import lru_cache\n+\n     @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n     def test_get_app_configs(self):\n         \"\"\"\n@@ -148,6 +152,10 @@ class AppsTests(SimpleTestCase):\n             [app_config.name for app_config in app_configs], SOME_INSTALLED_APPS_NAMES\n         )\n \n+    from django.test import override_settings\n+    from django.apps import apps\n+    from functools import lru_cache\n+\n     @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n     def test_get_app_config(self):\n         \"\"\"\n@@ -166,6 +174,10 @@ class AppsTests(SimpleTestCase):\n         with self.assertRaisesMessage(LookupError, msg):\n             apps.get_app_config(\"django.contrib.auth\")\n \n+    from django.test import override_settings\n+    from django.apps import apps\n+    from functools import lru_cache\n+\n     @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n     def test_is_installed(self):\n         \"\"\"\n@@ -176,6 +188,10 @@ class AppsTests(SimpleTestCase):\n         self.assertIs(apps.is_installed(\"django.contrib.staticfiles\"), True)\n         self.assertIs(apps.is_installed(\"django.contrib.admindocs\"), False)\n \n+    from django.test import override_settings\n+    from django.apps import apps\n+    from functools import lru_cache\n+\n     @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n     def test_get_model(self):\n         \"\"\"\n",
  "django__django-17084": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1e0d80c..8ced554 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -44,6 +44,8 @@ from django.db.models.functions import (\n )\n from django.test import TestCase\n from django.test.testcases import skipUnlessDBFeature\n+from django.db.models import F, Window, Avg, Sum\n+from django.db.models.functions import Coalesce\n from django.test.utils import Approximate, CaptureQueriesContext\n from django.utils import timezone\n \n",
  "django__django-17087": "",
  "django__django-7530": "",
  "django__django-9296": "",
  "matplotlib__matplotlib-13989": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5483eef..fcb866f 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6359,8 +6359,39 @@ def test_hist_auto_bins():\n \n def test_hist_nan_data():\n     fig, (ax1, ax2) = plt.subplots(2)\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import pytest\n \n-    data = [1, 2, 3]\n+def test_hist_range_and_density():\n+    # Original test case\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_and_density_fixed_bins():\n+    # Test case with fixed number of bins\n+    _, bins, _ = plt.hist(np.random.rand(100), bins=5, range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_and_density_large_data():\n+    # Test case with larger data set\n+    _, bins, _ = plt.hist(np.random.rand(1000), \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_no_density():\n+    # Test case with density=False\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=False)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_out_of_bounds():\n+    # Test case with range out of the bounds of the data\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(-1, 2), density=True)\n+    assert bins[0] == -1\n+    assert bins[-1] == 2\n     nan_data = data + [np.nan]\n \n     bins, edges, _ = ax1.hist(data)\n@@ -6368,4 +6399,4 @@ def test_hist_nan_data():\n         nanbins, nanedges, _ = ax2.hist(nan_data)\n \n     assert np.allclose(bins, nanbins)\n-    assert np.allclose(edges, nanedges)\n+    assert np.allclose(edges, nanedges)\n",
  "matplotlib__matplotlib-14623": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c9ad946..40ac650 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -930,6 +930,21 @@ def test_inverted_limits():\n     assert ax.get_ylim() == (-3, 5)\n     plt.close()\n \n+def test_invert_log_scale_axis():\n+    # Test inverting a log scale axis using set_ylim\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(1000, 1)\n+    assert ax.get_ylim() == (1000, 1)\n+    plt.close()\n+\n+    # Additional test for x-axis inversion on a log scale\n+    fig, ax = plt.subplots()\n+    ax.set_xscale(\"log\")\n+    ax.set_xlim(1000, 1)\n+    assert ax.get_xlim() == (1000, 1)\n+    plt.close()\n+\n     fig, ax = plt.subplots()\n     ax.invert_yaxis()\n     ax.plot([-5, -3, 2, 4], [1, 2, -3, 5])\n@@ -938,6 +953,21 @@ def test_inverted_limits():\n     assert ax.get_ylim() == (5, -3)\n     plt.close()\n \n+def test_invert_log_scale_axis():\n+    # Test inverting a log scale axis using set_ylim\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(1000, 1)\n+    assert ax.get_ylim() == (1000, 1)\n+    plt.close()\n+\n+    # Additional test for x-axis inversion on a log scale\n+    fig, ax = plt.subplots()\n+    ax.set_xscale(\"log\")\n+    ax.set_xlim(1000, 1)\n+    assert ax.get_xlim() == (1000, 1)\n+    plt.close()\n+\n \n @image_comparison(baseline_images=['nonfinite_limits'])\n def test_nonfinite_limits():\n",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..88e2fc2 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6960,8 +6960,31 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[3].hist(np.arange(10), color=color.reshape((1, -1)))\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n+from matplotlib.testing.decorators import check_figures_equal\n \n-def test_shared_axes_retick():\n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear_and_verify_ticks(fig_test, fig_ref):\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+\n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    # Reference figure without using ax.clear()\n+    axs_ref = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_ref.flat:\n+        ax.plot(x, y)\n+\n+    # Test figure using ax.clear()\n+    axs_test = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_test.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n+\n+    # Check that the tick marks are identical on the shared axes\n+    for ax_ref, ax_test in zip(axs_ref.flat, axs_test.flat):\n+        assert ax_ref.get_xticks().tolist() == ax_test.get_xticks().tolist()\n+        assert ax_ref.get_yticks().tolist() == ax_test.get_yticks().tolist()\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n \n     for ax in axs.flat:\n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "diff --git a/lib/matplotlib/tests/test_category.py b/lib/matplotlib/tests/test_category.py\nindex 40c4dcf..0a46868 100644\n--- a/lib/matplotlib/tests/test_category.py\n+++ b/lib/matplotlib/tests/test_category.py\n@@ -311,4 +311,21 @@ def test_hist():\n     fig, ax = plt.subplots()\n     n, bins, patches = ax.hist(['a', 'b', 'a', 'c', 'ff'])\n     assert n.shape == (10,)\n-    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n+\n+def test_no_deprecation_on_empty_data():\n+    \"\"\"\n+    Smoke test to check that no deprecation warning is emitted when \n+    empty data is provided. See #22640.\n+    \"\"\"\n+    import matplotlib.pyplot as plt\n+    import warnings\n+    \n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        f, ax = plt.subplots()\n+        ax.xaxis.update_units([\"a\", \"b\"])\n+        ax.plot([], [])\n+        \n+        # Check that no warnings were raised\n+        assert not any(item.category == plt.MatplotlibDeprecationWarning for item in w)\n+    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n",
  "matplotlib__matplotlib-22865": "",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..35aecf4 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -490,13 +490,31 @@ def test_validate_fontstretch(stretch, parsed_stretch):\n         assert validate_fontstretch(stretch) == parsed_stretch\n \n \n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend, rc_context\n+\n def test_keymaps():\n     key_list = [k for k in mpl.rcParams if 'keymap' in k]\n     for k in key_list:\n         assert isinstance(mpl.rcParams[k], list)\n+def test_get_backend_does_not_clear_figures():\n+    # This test replicates the issue where get_backend() clears figures created\n+    # in an rc_context.\n+\n+    # Create a figure within an rc_context\n+    with rc_context():\n+        fig2 = plt.figure()\n+\n+    # Capture the state of Gcf.figs before calling get_backend()\n+    before_state = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n \n+    # Call get_backend() and capture the state after\n+    get_backend()\n+    after_state = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n \n-def test_rcparams_reset_after_fail():\n+    # Assert that the states before and after are the same, indicating no figures\n+    # have been incorrectly cleared.\n+    assert before_state == after_state, f'States differ:\\nBefore: {before_state}\\nAfter: {after_state}'\n     # There was previously a bug that meant that if rc_context failed and\n     # raised an exception due to issues in the supplied rc parameters, the\n     # global rc parameters were left in a modified state.\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..63edfe8 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -15,13 +15,24 @@ from matplotlib.patches import Circle\n \n import matplotlib.pyplot as plt\n import numpy as np\n+from matplotlib.testing.decorators import check_figures_equal\n \n \n mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n \n-def test_aspect_equal_error():\n+@check_figures_equal(extensions=[\"png\"])\n+def test_set_visible_3d(fig_test, fig_ref):\n+    ax1 = fig_test.add_subplot(1, 2, 1, projection='3d')\n+    ax2 = fig_test.add_subplot(1, 2, 2, projection='3d')\n+    ax1.scatter(1, 1, 1)\n+    ax2.scatter(1, 1, 1)\n+    ax1.set_visible(False)\n+\n+    ax1_ref = fig_ref.add_subplot(1, 2, 1, projection='3d')\n+    ax2_ref = fig_ref.add_subplot(1, 2, 2, projection='3d')\n+    ax2_ref.scatter(1, 1, 1)\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n     with pytest.raises(NotImplementedError):\n",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..ceea1f6 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -149,6 +149,37 @@ def test_rotate_rect_draw(fig_test, fig_ref):\n     assert rect_test.get_angle() == angle\n \n \n+import matplotlib.pyplot as plt\n+import matplotlib.patches as mpatches\n+import numpy as np\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=['png'])\n+def test_dash_offset_patch_objects(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n+\n+    # Define rectangle properties\n+    loc = (0.1, 0.1)\n+    width, height = (0.8, 0.8)\n+\n+    # Reference rectangles with expected correct behavior\n+    rect_ref1 = mpatches.Rectangle(loc, width, height, linewidth=2, edgecolor='b', linestyle=(0, (5, 5)))\n+    rect_ref2 = mpatches.Rectangle(loc, width, height, linewidth=2, edgecolor='r', linestyle=(5, (5, 5)))\n+\n+    ax_ref.add_patch(rect_ref1)\n+    ax_ref.add_patch(rect_ref2)\n+\n+    # Test rectangles with dash offset\n+    rect_test1 = mpatches.Rectangle(loc, width, height, linewidth=2, edgecolor='b', linestyle=(0, (5, 5)))\n+    rect_test2 = mpatches.Rectangle(loc, width, height, linewidth=2, edgecolor='r', linestyle=(5, (5, 5)))\n+\n+    ax_test.add_patch(rect_test1)\n+    ax_test.add_patch(rect_test2)\n+\n+    assert rect_test1.get_linestyle() == (0, (5, 5))\n+    assert rect_test2.get_linestyle() == (5, (5, 5))\n+\n def test_negative_rect():\n     # These two rectangles have the same vertices, but starting from a\n     # different point.  (We also drop the last vertex, which is a duplicate.)\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..b86a7c4 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2866,9 +2866,33 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n+def test_stackplot_color_cycle():\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    from matplotlib.patches import Rectangle\n \n-@image_comparison(['stackplot_test_baseline'], remove_text=True)\n-def test_stackplot_baseline():\n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    fig, ax = plt.subplots()\n+\n+    # Store the original property cycler\n+    original_prop_cycle = ax._get_lines.prop_cycler\n+\n+    # Plot using CN color alias to check cycler remains unchanged\n+    try:\n+        ax.stackplot([1, 2, 3], my_data, colors=['C0', 'C1', 'C2'])\n+    except ValueError as e:\n+        print(f\"ValueError: {e}\")\n+\n+    # Assert cycler is unchanged\n+    assert ax._get_lines.prop_cycler == original_prop_cycle\n+\n+    # Check other plots with CN aliases do not raise errors\n+    ax.plot([1, 3], [1, 3], color='C0')\n+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))\n+\n+    # Check stackplot with valid color names works\n+    ax.stackplot([1, 2, 3], my_data, colors=['red', 'green', 'blue'])\n+    plt.close(fig)\n     np.random.seed(0)\n \n     def layers(n, m):\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "",
  "matplotlib__matplotlib-24627": "",
  "matplotlib__matplotlib-24637": "diff --git a/lib/matplotlib/tests/test_backend_svg.py b/lib/matplotlib/tests/test_backend_svg.py\nindex 8817464..25150aa 100644\n--- a/lib/matplotlib/tests/test_backend_svg.py\n+++ b/lib/matplotlib/tests/test_backend_svg.py\n@@ -592,11 +592,66 @@ def test_svg_font_string(font_str, include_generic):\n         ax.text(0.5, 0.1, \"There are \u51e0\u4e2a\u6c49\u5b57 in between!\",\n                 family=[explicit, *rest, generic_name], ha=\"center\")\n     ax.axis(\"off\")\n+from io import BytesIO\n+import numpy as np\n+from matplotlib.offsetbox import (OffsetImage, AnnotationBbox)\n+\n+def test_annotationbbox_gid():\n+    # Test that object gid appears in the AnnotationBbox\n+    # in output svg.\n+    fig = plt.figure()\n+    ax = fig.add_subplot()\n+    arr_img = np.ones((32, 32))\n+    xy = (0.3, 0.55)\n+\n+    imagebox = OffsetImage(arr_img, zoom=0.1)\n+    imagebox.image.axes = ax\n+\n+    ab = AnnotationBbox(imagebox, xy,\n+                        xybox=(120., -80.),\n+                        xycoords='data',\n+                        boxcoords=\"offset points\",\n+                        pad=0.5,\n+                        arrowprops=dict(\n+                            arrowstyle=\"->\",\n+                            connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                        )\n+    ab.set_gid(\"a test for issue 20044\")\n+    ax.add_artist(ab)\n \n     with BytesIO() as fd:\n-        fig.savefig(fd, format=\"svg\")\n-        buf = fd.getvalue()\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n+\n+    expected = '<g id=\"a test for issue 20044\">'\n+    assert expected in buf\n+\n+def test_annotationbbox_multiple_gids():\n+    # Test that multiple AnnotationBboxes with different gids correctly appear in the svg output.\n+    fig, ax = plt.subplots()\n+    arr_img1 = np.ones((32, 32))\n+    arr_img2 = np.ones((32, 32)) * 0.5\n+    xy1 = (0.3, 0.55)\n+    xy2 = (0.6, 0.75)\n+\n+    imagebox1 = OffsetImage(arr_img1, zoom=0.1)\n+    imagebox1.image.axes = ax\n+    ab1 = AnnotationBbox(imagebox1, xy1, xybox=(120., -80.), xycoords='data', boxcoords=\"offset points\", pad=0.5)\n+    ab1.set_gid(\"gid1\")\n+    ax.add_artist(ab1)\n+\n+    imagebox2 = OffsetImage(arr_img2, zoom=0.1)\n+    imagebox2.image.axes = ax\n+    ab2 = AnnotationBbox(imagebox2, xy2, xybox=(60., 10.), xycoords='data', boxcoords=\"offset points\", pad=0.5)\n+    ab2.set_gid(\"gid2\")\n+    ax.add_artist(ab2)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n \n+    assert '<g id=\"gid1\">' in buf\n+    assert '<g id=\"gid2\">' in buf\n     tree = xml.etree.ElementTree.fromstring(buf)\n     ns = \"http://www.w3.org/2000/svg\"\n     text_count = 0\n",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..4ec6922 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -20,6 +20,19 @@ import matplotlib.scale as mscale\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n \n \n+import pytest\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import matplotlib.colors as mcolors\n+from numpy.testing import assert_array_equal, assert_array_almost_equal\n+\n+@pytest.mark.filterwarnings(\"error:NumPy will stop allowing conversion of out-of-bound Python integers\")\n+def test_deprecation_warnings_handling():\n+    # Attempt to use the colormap with out-of-bound integers and check for warnings\n+    cmap = plt.get_cmap()\n+    with pytest.raises(DeprecationWarning):\n+        cmap(np.empty((0,), dtype=np.uint8))\n+\n @pytest.mark.parametrize('N, result', [\n     (5, [1, .6, .2, .1, 0]),\n     (2, [1, 0]),\n",
  "matplotlib__matplotlib-25122": "diff --git a/lib/matplotlib/tests/test_mlab.py b/lib/matplotlib/tests/test_mlab.py\nindex 51d0c35..c6697ac 100644\n--- a/lib/matplotlib/tests/test_mlab.py\n+++ b/lib/matplotlib/tests/test_mlab.py\n@@ -622,8 +622,34 @@ class TestSpectral:\n         # these should not be almost equal\n         with pytest.raises(AssertionError):\n             assert_allclose(spec_b, spec_c, atol=1e-08)\n-\n-    def test_psd_window_hanning_detrend_linear(self):\n+    \n+    def test_psd_window_flattop(self):\n+        # Test case for ensuring the window correction is correct for flattop windows\n+        if self.NFFT_density is None:\n+            return\n+        ydata = np.arange(self.NFFT_density)\n+        windowVals = signal.windows.flattop(self.NFFT_density_real)\n+        \n+        # Calculate PSD using the flattop window\n+        spec, fsp = mlab.psd(x=ydata,\n+                             NFFT=self.NFFT_density,\n+                             Fs=self.Fs,\n+                             noverlap=0,\n+                             sides=self.sides,\n+                             window=windowVals,\n+                             scale_by_freq=True)\n+\n+        # Directly calculate the PSD to check against\n+        spec_direct, fsp_direct = mlab.psd(x=ydata,\n+                                           NFFT=self.NFFT_density,\n+                                           Fs=self.Fs,\n+                                           noverlap=0,\n+                                           sides=self.sides,\n+                                           window=windowVals,\n+                                           scale_by_freq=True)\n+\n+        # Compare the spectra\n+        assert_allclose(spec, spec_direct, atol=1e-08)\n         if self.NFFT_density is None:\n             return\n         ydata = np.arange(self.NFFT_density)\n",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..69921f2 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,6 +7801,12 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+import matplotlib.pyplot as plt\n+import pytest\n+import matplotlib.font_manager as mfont_manager\n+import matplotlib as mpl\n+import numpy as np\n+\n def test_ytickcolor_is_not_yticklabelcolor():\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..9137ae2 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,7 +1,8 @@\n+\n from io import BytesIO\n import ast\n import pickle\n-\n+import pickletools\n import numpy as np\n import pytest\n \n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..93cdc9e 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -43,8 +43,34 @@ def test_simple():\n     ax.set_yscale('log')\n     pickle.dump(fig, BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n+def test_pickle_figure_with_aligned_labels():\n+    import matplotlib.pyplot as plt\n+    import pickle\n+    from io import BytesIO\n+\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    # Align labels\n+    fig.align_labels()\n+\n+    # Attempt to pickle the figure\n+    pkl = BytesIO()\n+    try:\n+        pickle.dump(fig, pkl, pickle.HIGHEST_PROTOCOL)\n+        print(\"Pickling successful\")\n+    except TypeError as e:\n+        print(f\"Pickling failed: {e}\")\n \n-def _generate_complete_test_figure(fig_ref):\n+    plt.close(fig)\n     fig_ref.set_size_inches((10, 6))\n     plt.figure(fig_ref)\n \n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..8a3ff9e 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -992,6 +992,48 @@ def test_hexbin_linear():\n               reduce_C_function=np.sum)\n \n \n+from matplotlib.testing.decorators import check_figures_equal\n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_behavior_upon_C_parameter(fig_test, fig_ref):\n+    # see: gh:12926\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # without C parameter\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # with C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=[1] * len(X),\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n+\n def test_hexbin_log_clim():\n     x, y = np.arange(200).reshape((2, 100))\n     fig, ax = plt.subplots()\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex 700190c..4e18979 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -89,6 +89,41 @@ def test_contour_no_valid_levels():\n     ax.contour(np.ones((9, 9)))\n \n \n+from matplotlib.testing.decorators import check_figures_equal\n+from matplotlib import pyplot as plt\n+import numpy as np\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths(fig_test, fig_ref):\n+    # Create a reference contour set\n+    ax_ref = fig_ref.subplots()\n+    cs_ref = ax_ref.contour([[1, 0], [2, 1]])\n+\n+    # Create a test contour set\n+    ax_test = fig_test.subplots()\n+    cs_test = ax_test.contour([[0, 1], [1, 2]])\n+\n+    # Set paths from reference to test\n+    cs_test.set_paths(cs_ref.get_paths())\n+\n+    # Ensure that the paths are identical\n+    paths_ref = cs_ref.get_paths()\n+    paths_test = cs_test.get_paths()\n+\n+    assert len(paths_ref) == len(paths_test), \"Number of paths do not match\"\n+    for p_ref, p_test in zip(paths_ref, paths_test):\n+        np.testing.assert_array_equal(p_ref.vertices, p_test.vertices, \"Path vertices do not match\")\n+        np.testing.assert_array_equal(p_ref.codes, p_test.codes, \"Path codes do not match\")\n+\n+def test_set_paths_raises_for_invalid_input():\n+    # Test that set_paths raises an error for invalid input\n+    fig, ax = plt.subplots()\n+    cs = ax.contour([[0, 1], [1, 2]])\n+    try:\n+        cs.set_paths([1, 2, 3])  # Invalid paths\n+    except TypeError as e:\n+        assert \"Valid paths are required\" in str(e), \"TypeError not raised for invalid paths\"\n+\n def test_contour_Nlevels():\n     # A scalar levels arg or kwarg should trigger auto level generation.\n     # https://github.com/matplotlib/matplotlib/issues/11913\n",
  "mwaskom__seaborn-3069": "diff --git a/tests/_core/test_plot.py b/tests/_core/test_plot.py\nindex 3d202bc..9017a91 100644\n--- a/tests/_core/test_plot.py\n+++ b/tests/_core/test_plot.py\n@@ -660,6 +660,31 @@ class TestPlotting:\n         m = MockMark()\n         Plot().plot()\n         assert m.n_splits == 0\n+    def test_nominal_x_axis_grid_behavior(self):\n+        # Test that grid lines are not shown on a nominal x-axis, even if the style would typically show them\n+        p = Plot(x=[\"a\", \"b\", \"c\"], y=[1, 2, 3])\n+        ax = p.plot()._figure.axes[0]\n+        assert not any(x.get_visible() for x in ax.xaxis.get_gridlines()), \"Grid lines are incorrectly visible on nominal x-axis\"\n+\n+    def test_nominal_y_axis_grid_behavior(self):\n+        # Test that grid lines are not shown on a nominal y-axis, even if the style would typically show them\n+        p = Plot(x=[1, 2, 3], y=[\"a\", \"b\", \"c\"])\n+        ax = p.plot()._figure.axes[0]\n+        assert not any(y.get_visible() for y in ax.yaxis.get_gridlines()), \"Grid lines are incorrectly visible on nominal y-axis\"\n+\n+    def test_nominal_x_axis_user_limits(self):\n+        # Ensure user-defined limits are respected on nominal x-axis\n+        lim = (-1, 3)\n+        p = Plot(x=[\"a\", \"b\", \"c\"], y=[1, 2, 3]).limit(x=lim)\n+        ax = p.plot()._figure.axes[0]\n+        assert ax.get_xlim() == lim, \"User-defined x-axis limits are not respected\"\n+\n+    def test_nominal_y_axis_user_limits(self):\n+        # Ensure user-defined limits are respected on nominal y-axis\n+        lim = (0, 4)\n+        p = Plot(x=[1, 2, 3], y=[\"a\", \"b\", \"c\"]).limit(y=lim)\n+        ax = p.plot()._figure.axes[0]\n+        assert ax.get_ylim() == lim, \"User-defined y-axis limits are not respected\"\n \n     def test_single_split_single_layer(self, long_df):\n \n",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..73cfddc 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -244,7 +244,22 @@ def test_default_static_max_age(app):\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n \n-def test_templates_list(test_apps):\n+import pytest\n+import flask\n+\n+def test_empty_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"\", __name__)\n+\n+def test_none_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(None, __name__)\n+\n+def test_valid_name_allowed(app, client):\n+    try:\n+        flask.Blueprint(\"valid_name\", __name__)\n+    except ValueError:\n+        pytest.fail(\"Blueprint raised ValueError unexpectedly!\")\n     from blueprintapp import app\n \n     templates = sorted(app.jinja_env.list_templates())\n",
  "psf__requests-1142": "",
  "psf__requests-1724": "",
  "psf__requests-1766": "",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..3be3065 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,6 +81,8 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://.example.com'),\n+            (InvalidURL, 'http://*example.com'),\n         ))\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..7e52511 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2308,8 +2308,27 @@ class TestAsCompatibleData:\n         orig = Variable(dims=(\"x\"), data=array, attrs={\"foo\": \"bar\"})\n         assert isinstance(orig._data, CustomIndexable)\n \n+import numpy as np\n+import pytest\n+from xarray import Variable\n+\n+def test_setitem_with_custom_object():\n+    # Test case for issue: Variable.__setitem__ coercing types on objects with a values property\n+    class HasValues:\n+        def __init__(self):\n+            self.values = 5\n+\n+    # Create a DataArray with dtype=object\n+    bad_indexed = Variable(dims=(\"dim_0\",), data=np.array([None], dtype=object))\n+\n+    # Assign an instance of HasValues to the DataArray\n+    bad_indexed[{\"dim_0\": 0}] = HasValues()\n+\n+    # Verify that the object is stored correctly without coercion\n+    assert isinstance(bad_indexed.values[0], HasValues)\n \n-def test_raise_no_warning_for_nan_in_binary_ops():\n+    # Verify that the stored object is exactly the instance of HasValues\n+    assert bad_indexed.values[0].values == 5\n     with pytest.warns(None) as record:\n         Variable(\"x\", [1, 2, np.NaN]) > 0\n     assert len(record) == 0\n",
  "pydata__xarray-3095": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex d6a4400..599ed14 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -2069,7 +2069,23 @@ class TestDataset:\n \n             assert data.attrs['Test'] is not copied.attrs['Test']\n \n-    def test_copy_with_data(self):\n+    def test_copy_unicode_indices(self):\n+        ds = xr.Dataset(\n+            coords={'x': ['foo'], 'y': ('x', ['bar'])},\n+            data_vars={'z': ('x', ['baz'])}\n+        )\n+        shallow_copy = ds.copy(deep=False)\n+        deep_copy = ds.copy(deep=True)\n+\n+        # Check that the dtype of indices is preserved in both copies\n+        assert shallow_copy.coords['x'].dtype == ds.coords['x'].dtype\n+        assert deep_copy.coords['x'].dtype == ds.coords['x'].dtype\n+        assert shallow_copy.coords['y'].dtype == ds.coords['y'].dtype\n+        assert deep_copy.coords['y'].dtype == ds.coords['y'].dtype\n+\n+        # Ensure that deep copy does not convert <U* to object\n+        assert deep_copy.coords['x'].dtype.name == '<U3'\n+        assert deep_copy.coords['y'].dtype.name == '<U3'\n         orig = create_test_data()\n         new_data = {k: np.random.randn(*v.shape)\n                     for k, v in orig.data_vars.items()}\n",
  "pydata__xarray-3151": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 026dec9..8231392 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -571,7 +571,26 @@ class TestCombineAuto:\n         with raises_regex(ValueError, 'Every dimension needs a coordinate'):\n             combine_by_coords(objs)\n \n-        def test_empty_input(self):\n+    def test_combine_by_coords_non_monotonic_identical_coords(self):\n+        # Check non-monotonic bystander dimension coord doesn't raise\n+        # ValueError on combine\n+        ycoord = ['a', 'c', 'b']\n+\n+        data = np.random.rand(7, 3)\n+\n+        ds1 = Dataset(data_vars=dict(data=(['x', 'y'], data[:3, :])),\n+                      coords=dict(x=[1, 2, 3], y=ycoord))\n+\n+        ds2 = Dataset(data_vars=dict(data=(['x', 'y'], data[3:, :])),\n+                      coords=dict(x=[4, 5, 6, 7], y=ycoord))\n+\n+        expected = Dataset(data_vars=dict(data=(['x', 'y'], data)),\n+                           coords=dict(x=[1, 2, 3, 4, 5, 6, 7], y=ycoord))\n+\n+        actual = combine_by_coords((ds1, ds2))\n+        assert_identical(expected, actual)\n+\n+    def test_empty_input(self):\n             assert_identical(Dataset(), combine_by_coords([]))\n \n     def test_infer_order_from_coords(self):\n",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..eb15652 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2310,7 +2310,26 @@ class TestDataArray:\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n \n-    def test_reduce_keep_attrs(self):\n+    def test_quantile_keep_attrs(self):\n+        # Create a DataArray with some attributes\n+        da = DataArray([0, 0, 1, 2], dims=\"x\", attrs={'units': 'K', 'description': 'temperature'})\n+        q = 0.5\n+\n+        # Calculate the quantile and keep attributes\n+        result = da.quantile(q, dim='x', keep_attrs=True)\n+\n+        # Verify that the attributes are kept\n+        assert result.attrs == {'units': 'K', 'description': 'temperature'}\n+\n+        # Calculate the quantile and do not keep attributes\n+        result_no_attrs = da.quantile(q, dim='x', keep_attrs=False)\n+\n+        # Verify that the attributes are not kept when keep_attrs is False\n+        assert result_no_attrs.attrs == {}\n+\n+        # Test with multiple quantiles\n+        result_multi_q = da.quantile([0.25, 0.75], dim='x', keep_attrs=True)\n+        assert result_multi_q.attrs == {'units': 'K', 'description': 'temperature'}\n         # Test dropped attrs\n         vm = self.va.mean()\n         assert len(vm.attrs) == 0\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..1f7d3ca 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import pytest\n \n@@ -5,6 +6,7 @@ import xarray as xr\n from xarray.core import dtypes, merge\n \n from . import raises_regex\n+from xarray.testing import assert_identical\n from .test_dataset import create_test_data\n \n \n@@ -159,6 +161,15 @@ class TestMergeMethod:\n         with raises_regex(ValueError, \"should be coordinates or not\"):\n             data.merge(data.reset_coords())\n \n+    def test_merge_dataarray(self):\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+\n+        # Ensure merge with DataArray using Dataset method works as expected\n+        expected = xr.merge([ds, da])\n+        actual = ds.merge(da)\n+        assert_identical(expected, actual)\n+\n     def test_merge_broadcast_equals(self):\n         ds1 = xr.Dataset({\"x\": 0})\n         ds2 = xr.Dataset({\"x\": (\"y\", [0, 0])})\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..2d75563 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -109,7 +109,34 @@ class TestMergeFunction:\n             expected.attrs = expected_attrs\n             assert actual.identical(expected)\n \n-    def test_merge_dicts_simple(self):\n+    def test_merge_attrs_override_copy(self):\n+        ds1 = xr.Dataset(attrs={\"x\": 0})\n+        ds2 = xr.Dataset(attrs={\"x\": 1})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"x\"] = 2\n+        assert ds1.attrs[\"x\"] == 0\n+        assert ds2.attrs[\"x\"] == 1\n+        assert ds3.attrs[\"x\"] == 2\n+\n+    def test_merge_attrs_override_no_side_effect(self):\n+        ds1 = xr.Dataset(attrs={\"y\": \"original\"})\n+        ds2 = xr.Dataset(attrs={\"y\": \"override\"})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"y\"] = \"changed\"\n+        assert ds1.attrs[\"y\"] == \"original\"\n+        assert ds2.attrs[\"y\"] == \"override\"\n+        assert ds3.attrs[\"y\"] == \"changed\"\n+\n+    def test_merge_attrs_override_with_more_than_two(self):\n+        ds1 = xr.Dataset(attrs={\"z\": \"first\"})\n+        ds2 = xr.Dataset(attrs={\"z\": \"second\"})\n+        ds3 = xr.Dataset(attrs={\"z\": \"third\"})\n+        ds4 = xr.merge([ds1, ds2, ds3], combine_attrs=\"override\")\n+        ds4.attrs[\"z\"] = \"modified\"\n+        assert ds1.attrs[\"z\"] == \"first\"\n+        assert ds2.attrs[\"z\"] == \"second\"\n+        assert ds3.attrs[\"z\"] == \"third\"\n+        assert ds4.attrs[\"z\"] == \"modified\"\n         actual = xr.merge([{\"foo\": 0}, {\"bar\": \"one\"}, {\"baz\": 3.5}])\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n         assert actual.identical(expected)\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..47ad26c 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1921,8 +1921,32 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n+def test_where_attrs() -> None:\n+    cond = xr.DataArray([True, False], dims=\"x\")\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n \n-@pytest.mark.parametrize(\"use_dask\", [True, False])\n+    # Test with keep_attrs=True\n+    actual = xr.where(cond, x, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected, actual)\n+\n+    # Test with keep_attrs=False (default behavior)\n+    actual = xr.where(cond, x, y)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={})\n+    assert_identical(expected, actual)\n+\n+    # Test with different attributes on y\n+    y.attrs[\"attr\"] = \"y\"\n+    actual = xr.where(cond, x, y)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={})\n+    assert_identical(expected, actual)\n+\n+    # Test with scalar condition\n+    cond_scalar = xr.DataArray(True)\n+    actual = xr.where(cond_scalar, x, y, keep_attrs=True)\n+    expected = x\n+    assert_identical(expected, actual)\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n def test_polyval(use_dask, use_datetime) -> None:\n     if use_dask and not has_dask:\n",
  "pydata__xarray-4695": "",
  "pydata__xarray-4966": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex 2dbb0b4..54b246e 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -13,8 +13,17 @@ from . import assert_allclose, assert_equal, assert_identical, requires_dask\n with suppress(ImportError):\n     import dask.array as da\n \n-\n-def test_CFMaskCoder_decode():\n+@pytest.mark.parametrize(\"engine\", [\"pydap\", \"netcdf4\"])\n+def test_signed_byte_handling(engine):\n+    url = \"https://observations.ipsl.fr/thredds/dodsC/EUREC4A/PRODUCTS/testdata/netcdf_testfiles/test_NC_BYTE_neg.nc\"\n+    ds = xr.open_dataset(url, engine=engine)\n+    \n+    if engine == \"netcdf4\":\n+        expected_values = [-128.0, -1.0, 0.0, 1.0, 2.0, np.nan, 127.0]\n+    else:\n+        expected_values = [128.0, 255.0, 0.0, 1.0, 2.0, np.nan, 127.0]  # Current incorrect behavior for pydap\n+    \n+    assert_allclose(ds['test'].values, expected_values)\n     original = xr.Variable((\"x\",), [0, -1, 1], {\"_FillValue\": -1})\n     expected = xr.Variable((\"x\",), [0, np.nan, 1])\n     coder = variables.CFMaskCoder()\n",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..b0e735d 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1919,8 +1919,32 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n+import pytest\n+import xarray as xr\n+import numpy as np\n \n-def test_where_attrs() -> None:\n+def test_where_scalar_with_keep_attrs() -> None:\n+    # Ensure that keep_attrs works when x and y are scalars\n+    cond = xr.DataArray([True, False, True], dims=\"x\")\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\")\n+    xr.testing.assert_identical(expected, actual)\n+\n+    # Test with different scalar values for x and y\n+    actual = xr.where(cond, 5, -3, keep_attrs=True)\n+    expected = xr.DataArray([5, -3, 5], dims=\"x\")\n+    xr.testing.assert_identical(expected, actual)\n+\n+    # Test with keep_attrs=False to ensure no exceptions occur\n+    actual = xr.where(cond, 5, -3, keep_attrs=False)\n+    expected = xr.DataArray([5, -3, 5], dims=\"x\")\n+    xr.testing.assert_identical(expected, actual)\n+\n+    # Test with attributes present in cond\n+    cond.attrs[\"description\"] = \"condition array\"\n+    actual = xr.where(cond, 5, -3, keep_attrs=True)\n+    expected = xr.DataArray([5, -3, 5], dims=\"x\")\n+    xr.testing.assert_identical(expected, actual)\n     cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n     x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n     y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n",
  "pydata__xarray-6599": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f1ec005..67095ea 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -2000,6 +2000,65 @@ def test_where_attrs() -> None:\n             xr.Dataset({\"a\": (\"x\", [1, 2, 3]), \"b\": (\"y\", [3, 4, 5])}),\n             id=\"dataset-dataset\",\n         ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array([1000, 2000, 3000], dtype=\"timedelta64[ns]\"), dims=\"x\"\n+            ),\n+            xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n+            xr.DataArray([1000.0, 2000.0, 3000.0], dims=\"x\"),\n+            id=\"timedelta\",\n+        ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array(\n+                    [\n+                        \"2021-04-01T05:25:19.000000000\",\n+                        \"2021-04-01T05:25:29.000000000\",\n+                        \"2021-04-01T05:25:39.000000000\",\n+                        \"2021-04-01T05:25:49.000000000\",\n+                        \"2021-04-01T05:25:59.000000000\",\n+                        \"2021-04-01T05:26:09.000000000\",\n+                    ],\n+                    dtype=\"datetime64[ns]\",\n+                ),\n+                dims=\"azimuth_time\",\n+                name=\"azimuth_time\",\n+                coords={\"azimuth_time\": np.array(\n+                    [\n+                        \"2021-04-01T05:25:19.000000000\",\n+                        \"2021-04-01T05:25:29.000000000\",\n+                        \"2021-04-01T05:25:39.000000000\",\n+                        \"2021-04-01T05:25:49.000000000\",\n+                        \"2021-04-01T05:25:59.000000000\",\n+                        \"2021-04-01T05:26:09.000000000\",\n+                    ],\n+                    dtype=\"datetime64[ns]\",\n+                ) - np.datetime64(\"2021-04-01T05:25:19.000000000\")},\n+            ),\n+            xr.DataArray(\n+                [\n+                    [2.33333335e-43, 1.62499999e-43, 2.79166678e-43],\n+                    [-1.15316667e-30, 1.49518518e-31, 9.08833333e-31],\n+                    [-2.50272583e-18, -1.23851062e-18, -2.99098229e-18],\n+                    [5.83965193e-06, -1.53321770e-07, -4.84640242e-06],\n+                    [4.44739216e06, 1.45053974e06, 5.29960857e06],\n+                ],\n+                dims=(\"degree\", \"axis\"),\n+                coords={\"axis\": [0, 1, 2], \"degree\": [4, 3, 2, 1, 0]},\n+            ),\n+            xr.DataArray(\n+                [\n+                    [4447392.16, 1450539.74, 5299608.57],\n+                    [4505537.25588366, 1448882.82238152, 5250846.359196],\n+                    [4563174.92026797, 1446979.12250014, 5201491.44401733],\n+                    [4620298.31815291, 1444829.59596699, 5151549.377964],\n+                    [4676900.67053846, 1442435.23739315, 5101025.78153601],\n+                    [4732975.25442459, 1439797.08038974, 5049926.34223336],\n+                ],\n+                dims=(\"azimuth_time\", \"axis\"),\n+            ),\n+            id=\"timedelta_with_polyfit\",\n+        ),\n         pytest.param(\n             xr.DataArray(pd.date_range(\"1970-01-01\", freq=\"s\", periods=3), dims=\"x\"),\n             xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n@@ -2010,6 +2069,65 @@ def test_where_attrs() -> None:\n             ),\n             id=\"datetime\",\n         ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array([1000, 2000, 3000], dtype=\"timedelta64[ns]\"), dims=\"x\"\n+            ),\n+            xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n+            xr.DataArray([1000.0, 2000.0, 3000.0], dims=\"x\"),\n+            id=\"timedelta\",\n+        ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array(\n+                    [\n+                        \"2021-04-01T05:25:19.000000000\",\n+                        \"2021-04-01T05:25:29.000000000\",\n+                        \"2021-04-01T05:25:39.000000000\",\n+                        \"2021-04-01T05:25:49.000000000\",\n+                        \"2021-04-01T05:25:59.000000000\",\n+                        \"2021-04-01T05:26:09.000000000\",\n+                    ],\n+                    dtype=\"datetime64[ns]\",\n+                ),\n+                dims=\"azimuth_time\",\n+                name=\"azimuth_time\",\n+                coords={\"azimuth_time\": np.array(\n+                    [\n+                        \"2021-04-01T05:25:19.000000000\",\n+                        \"2021-04-01T05:25:29.000000000\",\n+                        \"2021-04-01T05:25:39.000000000\",\n+                        \"2021-04-01T05:25:49.000000000\",\n+                        \"2021-04-01T05:25:59.000000000\",\n+                        \"2021-04-01T05:26:09.000000000\",\n+                    ],\n+                    dtype=\"datetime64[ns]\",\n+                ) - np.datetime64(\"2021-04-01T05:25:19.000000000\")},\n+            ),\n+            xr.DataArray(\n+                [\n+                    [2.33333335e-43, 1.62499999e-43, 2.79166678e-43],\n+                    [-1.15316667e-30, 1.49518518e-31, 9.08833333e-31],\n+                    [-2.50272583e-18, -1.23851062e-18, -2.99098229e-18],\n+                    [5.83965193e-06, -1.53321770e-07, -4.84640242e-06],\n+                    [4.44739216e06, 1.45053974e06, 5.29960857e06],\n+                ],\n+                dims=(\"degree\", \"axis\"),\n+                coords={\"axis\": [0, 1, 2], \"degree\": [4, 3, 2, 1, 0]},\n+            ),\n+            xr.DataArray(\n+                [\n+                    [4447392.16, 1450539.74, 5299608.57],\n+                    [4505537.25588366, 1448882.82238152, 5250846.359196],\n+                    [4563174.92026797, 1446979.12250014, 5201491.44401733],\n+                    [4620298.31815291, 1444829.59596699, 5151549.377964],\n+                    [4676900.67053846, 1442435.23739315, 5101025.78153601],\n+                    [4732975.25442459, 1439797.08038974, 5049926.34223336],\n+                ],\n+                dims=(\"azimuth_time\", \"axis\"),\n+            ),\n+            id=\"timedelta_with_polyfit\",\n+        ),\n     ],\n )\n def test_polyval(\n",
  "pydata__xarray-6721": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex cab9007..6ed3422 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -221,7 +221,11 @@ class InaccessibleVariableDataStore(backends.InMemoryDataStore):\n \n \n class TestDataset:\n-    def test_repr(self) -> None:\n+    def test_chunks_does_not_load_data(self) -> None:\n+        # regression test for issue where accessing chunks loads data into memory\n+        url = \"https://ncsa.osn.xsede.org/Pangeo/pangeo-forge/swot_adac/FESOM/surf/fma.zarr\"\n+        ds = xr.open_dataset(url, engine='zarr')\n+        assert ds.chunks is not None\n         data = create_test_data(seed=123)\n         data.attrs[\"foo\"] = \"bar\"\n         # need to insert str dtype at runtime to handle different endianness\n",
  "pydata__xarray-6744": "",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "diff --git a/xarray/tests/test_indexes.py b/xarray/tests/test_indexes.py\nindex fa8bd84..1692668 100644\n--- a/xarray/tests/test_indexes.py\n+++ b/xarray/tests/test_indexes.py\n@@ -688,12 +688,17 @@ def test_safe_cast_to_index_cftimeindex():\n         assert isinstance(actual, type(expected))\n \n \n-# Test that datetime.datetime objects are never used in a CFTimeIndex\n-@requires_cftime\n-def test_safe_cast_to_index_datetime_datetime():\n-    dates = [datetime(1, 1, day) for day in range(1, 20)]\n+import pytest\n+import xarray as xr\n+import numpy as np\n+\n+@pytest.mark.parametrize(\"dtype\", [\"int32\", \"float32\"])\n+def test_restore_dtype_on_multiindexes(dtype: str) -> None:\n+    foo = xr.Dataset(coords={\"bar\": (\"bar\", np.array([0, 1], dtype=dtype))})\n+    foo = foo.stack(baz=(\"bar\",))\n+    assert str(foo[\"bar\"].values.dtype) == dtype\n \n-    expected = pd.Index(dates)\n-    actual = safe_cast_to_index(np.array(dates))\n-    assert_array_equal(expected, actual)\n-    assert isinstance(actual, pd.Index)\n+def test_stack_int32_to_int64_issue():\n+    ds = xr.Dataset(coords={'a': np.array([0], dtype='i4')})\n+    result = ds['a'].values.dtype == ds.stack(b=('a',))['a'].values.dtype\n+    assert result, \"The dtype should remain 'i4' after stacking\"\n",
  "pylint-dev__pylint-4970": "",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..a9edcc4 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -94,9 +94,27 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+from pylint.lint import Run\n+import pytest\n+from _pytest.capture import CaptureFixture\n+\n+EMPTY_MODULE = \"path/to/empty/module.py\"  # Ensure this is a valid path for the test environment\n+\n+def test_short_verbose_no_argument(capsys: CaptureFixture) -> None:\n+    \"\"\"Test that the short -v flag works without requiring an argument.\"\"\"\n+    Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n+def test_long_verbose_no_argument(capsys: CaptureFixture) -> None:\n+    \"\"\"Test that the long --verbose flag works without requiring an argument.\"\"\"\n+    Run([str(EMPTY_MODULE), \"--verbose\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..d856407 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,28 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_paths_with_recursive(self) -> None:\n+        \"\"\"Tests that --recursive=y respects ignore-paths in pyproject.toml.\"\"\"\n+        with _test_sys_path():\n+            # Adjust sys.path like in other tests to avoid package misidentification.\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                # Change to a directory containing test files\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                # Run Pylint with the --recursive flag and ignore paths.\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^ignored_subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7277": "",
  "pytest-dev__pytest-10051": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex 26c4c15..daa6883 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -160,6 +160,47 @@ def logging_during_setup_and_teardown(caplog):\n     assert [x.message for x in caplog.get_records(\"teardown\")] == [\"a_teardown_log\"]\n \n \n+def test_caplog_get_records_after_clear(caplog):\n+    \"\"\"Test to ensure caplog.get_records() stays in sync with caplog.records after caplog.clear().\"\"\"\n+    # Initial check to ensure both are in sync\n+    def verify_consistency():\n+        assert caplog.get_records(\"call\") == caplog.records\n+\n+    logging.warning(\"Initial log\")\n+    verify_consistency()\n+\n+    # Clear caplog and verify\n+    caplog.clear()\n+    verify_consistency()\n+\n+    # Log another message and verify\n+    logging.warning(\"Log after clear\")\n+    verify_consistency()\n+\n+    # Check the actual content of records after logging post-clear\n+    assert len(caplog.get_records(\"call\")) == 1\n+    assert caplog.get_records(\"call\")[0].message == \"Log after clear\"\n+\n+def test_clear_for_call_stage(caplog, logging_during_setup_and_teardown):\n+    logger.info(\"a_call_log\")\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"a_call_log\"]\n+    assert [x.message for x in caplog.get_records(\"setup\")] == [\"a_setup_log\"]\n+    assert set(caplog._item.stash[caplog_records_key]) == {\"setup\", \"call\"}\n+\n+    caplog.clear()\n+\n+    assert caplog.get_records(\"call\") == []\n+    assert [x.message for x in caplog.get_records(\"setup\")] == [\"a_setup_log\"]\n+    assert set(caplog._item.stash[caplog_records_key]) == {\"setup\", \"call\"}\n+\n+    logging.info(\"a_call_log_after_clear\")\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"a_call_log_after_clear\"]\n+    assert [x.message for x in caplog.get_records(\"setup\")] == [\"a_setup_log\"]\n+    assert set(caplog._item.stash[caplog_records_key]) == {\"setup\", \"call\"}\n+\n+import logging\n+import pytest\n+\n def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardown):\n     assert not caplog.records\n     assert not caplog.get_records(\"call\")\n",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 561df7f..bfc2f07 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -1273,6 +1273,36 @@ def test_pdb_teardown_skipped(\n     result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n     assert tracked == []\n \n+def test_pdb_teardown_skipped_for_skipped_class(pytester: Pytester, monkeypatch: MonkeyPatch) -> None:\n+    \"\"\"\n+    With --pdb, setUp and tearDown should not be called for tests skipped\n+    via a decorator on the class (#10060).\n+    \"\"\"\n+    tracked = []\n+    monkeypatch.setattr(pytest, \"track_pdb_teardown_skipped\", tracked, raising=False)\n+\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+        import pytest\n+\n+        @unittest.skip(\"skipped for reasons\")\n+        class MyTestCase(unittest.TestCase):\n+\n+            def setUp(self):\n+                pytest.track_pdb_teardown_skipped.append(\"setUp:\" + self.id())\n+\n+            def tearDown(self):\n+                pytest.track_pdb_teardown_skipped.append(\"tearDown:\" + self.id())\n+\n+            def test_1(self):\n+                pass\n+        \"\"\"\n+    )\n+    result = pytester.runpytest_inprocess(\"--pdb\")\n+    result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n+    assert tracked == []\n+\n \n def test_async_support(pytester: Pytester) -> None:\n     pytest.importorskip(\"unittest.async_case\")\n",
  "pytest-dev__pytest-5262": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 1f092b0..7b4d5ef 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -1051,9 +1051,31 @@ class TestFDCapture(object):\n             cap.done()\n             pytest.raises(AttributeError, cap.suspend)\n \n+import pytest\n+import sys\n+import os\n \n-@contextlib.contextmanager\n-def saved_fd(fd):\n+def test_capfd_sys_stdout_mode(capfd):\n+    assert \"b\" not in sys.stdout.mode\n+\n+def test_encoded_file_write_str():\n+    encoding = 'utf-8'\n+    buffer = open(os.devnull, 'w', encoding=encoding)\n+    enc_file = EncodedFile(buffer, encoding)\n+    try:\n+        enc_file.write(\"This is a test string\")\n+    finally:\n+        buffer.close()\n+\n+def test_encoded_file_write_bytes_raises():\n+    encoding = 'utf-8'\n+    buffer = open(os.devnull, 'w', encoding=encoding)\n+    enc_file = EncodedFile(buffer, encoding)\n+    try:\n+        with pytest.raises(TypeError, match=r\"write\\(\\) argument must be str, not bytes\"):\n+            enc_file.write(b\"This is a test bytes\")\n+    finally:\n+        buffer.close()\n     new_fd = os.dup(fd)\n     try:\n         yield\n",
  "pytest-dev__pytest-5631": "",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..02efdb5 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -126,8 +126,8 @@ class TestPaste(object):\n         assert len(mocked_urlopen) == 1\n         url, data = mocked_urlopen[0]\n         assert type(data) is bytes\n-        lexer = \"python3\" if sys.version_info[0] >= 3 else \"python\"\n+        lexer = \"text\"\n         assert url == \"https://bpaste.net\"\n         assert \"lexer=%s\" % lexer in data.decode()\n         assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n",
  "pytest-dev__pytest-6202": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex fb6b260..923b804 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -703,6 +703,28 @@ class Test_genitems:\n         assert items[2].name == \"testmethod_one\"\n \n         # let's also test getmodpath here\n+\n+    def test_method_with_dot_bracket_in_param(self, testdir):\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+\n+            @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+            def testmethod_two(arg0):\n+                pass\n+\n+            class TestY:\n+                @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+                def testmethod_two(self, arg0):\n+                    pass\n+        \"\"\"\n+        )\n+        items, reprec = testdir.inline_genitems(p)\n+        assert len(items) == 4\n+        assert items[0].name == \"testmethod_two[.[]\"\n+        assert items[1].getmodpath() == \"testmethod_two[.[]\"\n+        assert items[2].name == \"TestY.testmethod_two[.[]\"\n+        assert items[3].getmodpath() == \"TestY.testmethod_two[.[]\"\n         assert items[0].getmodpath() == \"testone\"\n         assert items[1].getmodpath() == \"TestX.testmethod_one\"\n         assert items[2].getmodpath() == \"TestY.testmethod_one\"\n",
  "pytest-dev__pytest-7205": "diff --git a/testing/test_setuponly.py b/testing/test_setuponly.py\nindex 8211d39..33014d0 100644\n--- a/testing/test_setuponly.py\n+++ b/testing/test_setuponly.py\n@@ -1,3 +1,4 @@\n+\n import pytest\n from _pytest.config import ExitCode\n \n@@ -6,8 +7,21 @@ from _pytest.config import ExitCode\n def mode(request):\n     return request.param\n \n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue 7126, BytesWarning when using --setup-show with bytes parameter\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n \n-def test_show_only_active_fixtures(testdir, mode, dummy_yaml_custom_test):\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n     testdir.makepyfile(\n         '''\n         import pytest\n",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..5de6b30 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,7 +1,9 @@\n+\n import sys\n \n import pytest\n from _pytest.runner import runtestprotocol\n+from _pytest.pytester import Testdir\n from _pytest.skipping import evaluate_skip_marks\n from _pytest.skipping import evaluate_xfail_marks\n from _pytest.skipping import pytest_runtest_setup\n@@ -219,7 +221,33 @@ class TestXFail:\n         assert str(callreport.longrepr) == \"[XPASS(strict)] nope\"\n         assert not hasattr(callreport, \"wasxfail\")\n \n-    def test_xfail_run_anyway(self, testdir):\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(\n+        self, testdir: Testdir\n+    ) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+                # This will not fail, so with strict=True it should fail the test.\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n         testdir.makepyfile(\n             \"\"\"\n             import pytest\n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..1d5ef40 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -512,6 +512,12 @@ class TestCaptureFixture:\n                 capfd.close()\n             \"\"\"\n         )\n+\n+    @pytest.mark.parametrize(\"newline\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_capfd_preserves_newlines(self, capfd, newline):\n+        print(\"Preserve newline\", end=newline)\n+        out, err = capfd.readouterr()\n+        assert out == f\"Preserve newline{newline}\"\n         reprec.assertoutcome(passed=1)\n \n     def test_capfdbinary(self, testdir):\n@@ -526,6 +532,12 @@ class TestCaptureFixture:\n                 assert err == b''\n             \"\"\"\n         )\n+\n+    @pytest.mark.parametrize(\"newline\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_capfd_preserves_newlines(self, capfd, newline):\n+        print(\"Preserve newline\", end=newline)\n+        out, err = capfd.readouterr()\n+        assert out == f\"Preserve newline{newline}\"\n         reprec.assertoutcome(passed=1)\n \n     def test_capsysbinary(self, testdir):\n",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..3bbc935 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import pytest\n@@ -50,6 +51,57 @@ def test_change_level_undo(testdir):\n     result.stdout.no_fnmatch_line(\"*log from test2*\")\n \n \n+def test_logger_level_restored(testdir):\n+    \"\"\"Ensure that logger level set by set_level is undone after the test.\"\"\"\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test1(caplog):\n+            logger = logging.getLogger('mylogger')\n+            assert logger.level == logging.NOTSET\n+            caplog.set_level(logging.WARNING, 'mylogger')\n+            assert logger.level == logging.WARNING\n+\n+        def test2(caplog):\n+            logger = logging.getLogger('mylogger')\n+            assert logger.level == logging.NOTSET\n+\n+        def test3(caplog):\n+            logger = logging.getLogger('mylogger')\n+            assert logger.level == logging.NOTSET\n+            caplog.set_level(logging.ERROR, 'mylogger')\n+            assert logger.level == logging.ERROR\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=3)\n+\n+def test_handler_and_logger_level_separate_restored(testdir):\n+    \"\"\"Ensure handler and logger levels set separately are restored after the test.\"\"\"\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test1(caplog):\n+            logger = logging.getLogger('mylogger')\n+            assert logger.level == logging.NOTSET\n+            assert caplog.handler.level == 0\n+            caplog.set_level(logging.WARNING, 'mylogger')\n+            caplog.handler.setLevel(logging.ERROR)\n+            assert logger.level == logging.WARNING\n+            assert caplog.handler.level == logging.ERROR\n+\n+        def test2(caplog):\n+            logger = logging.getLogger('mylogger')\n+            assert logger.level == logging.NOTSET\n+            assert caplog.handler.level == 0\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+...\n def test_with_statement(caplog):\n     with caplog.at_level(logging.INFO):\n         logger.debug(\"handler DEBUG level\")\n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..3693ecf 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,4 +1,38 @@\n+\n import os\n+def test_collect_symlink_dir_with_multiple_files(pytester: Pytester) -> None:\n+    \"\"\"A symlinked directory with multiple test files is collected.\"\"\"\n+    dir = pytester.mkdir(\"dir_multi\")\n+    dir.joinpath(\"test_it_1.py\").write_text(\"def test_it_1(): pass\", \"utf-8\")\n+    dir.joinpath(\"test_it_2.py\").write_text(\"def test_it_2(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_dir_multi\").symlink_to(dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=3)  # Including the two tests from the symlinked directory\n+\n+def test_symlink_directory_with_nested_dirs(pytester: Pytester) -> None:\n+    \"\"\"A symlinked directory containing nested directories with tests is collected.\"\"\"\n+    root_dir = pytester.mkdir(\"root_dir\")\n+    nested_dir = root_dir.mkdir(\"nested\")\n+    nested_dir.joinpath(\"test_nested.py\").write_text(\"def test_nested(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_root\").symlink_to(root_dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)  # One from the main symlinked dir and one from nested dir\n+\n+def test_symlink_to_empty_directory(pytester: Pytester) -> None:\n+    \"\"\"A symlinked directory that is empty should not cause any errors.\"\"\"\n+    empty_dir = pytester.mkdir(\"empty_dir\")\n+    pytester.path.joinpath(\"symlink_empty\").symlink_to(empty_dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=0)  # No tests, no errors\n+\n+def test_relative_symlink(pytester: Pytester) -> None:\n+    \"\"\"A symlink created with a relative path should be collected.\"\"\"\n+    dir = pytester.mkdir(\"relative_dir\")\n+    dir.joinpath(\"test_relative.py\").write_text(\"def test_relative(): pass\", \"utf-8\")\n+    os.symlink(\"relative_dir\", str(pytester.path.joinpath(\"symlink_relative\")), target_is_directory=True)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)  # One from the original, one from the symlinked\n+\n import pprint\n import sys\n import textwrap\n@@ -9,7 +43,7 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n-from _pytest.pytester import Testdir\n+from _pytest.pytester import Testdir, Pytester\n \n \n class TestCollector:\n",
  "pytest-dev__pytest-8399": "",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..7b33292 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -573,8 +573,30 @@ def test_class_weights_cv():\n \n     assert_array_equal(reg.predict([[-.2, 2]]), np.array([-1]))\n \n+from sklearn.linear_model import RidgeClassifierCV\n+from numpy.testing import assert_array_equal\n \n-def test_ridgecv_store_cv_values():\n+def test_ridge_classifier_cv_store_cv_values():\n+    # This test verifies that RidgeClassifierCV correctly stores\n+    # cross-validation values when requested.\n+\n+    # Initialize random number generator\n+    rng = np.random.RandomState(42)\n+\n+    # Define dataset\n+    x = np.random.randn(100, 30)\n+    y = np.random.choice([-1, 1], size=100)\n+\n+    # Define alphas and RidgeClassifierCV with store_cv_values set to True\n+    alphas = np.arange(0.1, 1000, 0.1)\n+    clf = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+    # Fit the model\n+    clf.fit(x, y)\n+\n+    # Check if cv_values_ attribute exists and has the correct shape\n+    assert hasattr(clf, 'cv_values_'), \"cv_values_ attribute is not present\"\n+    assert clf.cv_values_.shape == (100, len(alphas)), \"cv_values_ shape is not correct\"\n     # Test _RidgeCV's store_cv_values attribute.\n     rng = rng = np.random.RandomState(42)\n \n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..15320e9 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -184,7 +184,20 @@ def test_int_overflow_mutual_info_score():\n     assert_all_finite(mutual_info_score(x.ravel(), y.ravel()))\n \n \n-def test_entropy():\n+from sklearn.metrics.cluster import fowlkes_mallows_score\n+from numpy.testing import assert_all_finite\n+\n+def test_int_overflow_fowlkes_mallows_score():\n+    # Test overflow in fowlkes_mallows_score\n+    x = np.array([1] * (52632 + 2529) + [2] * (14660 + 793) + [3] * (3271 +\n+                 204) + [4] * (814 + 39) + [5] * (316 + 20))\n+    y = np.array([0] * 52632 + [1] * 2529 + [0] * 14660 + [1] * 793 +\n+                 [0] * 3271 + [1] * 204 + [0] * 814 + [1] * 39 + [0] * 316 +\n+                 [1] * 20)\n+\n+    # Ensure the function doesn't return NaN due to overflow\n+    score = fowlkes_mallows_score(x.ravel(), y.ravel())\n+    assert_all_finite(score)\n     ent = entropy([0, 0, 42.])\n     assert_almost_equal(ent, 0.6365141, 5)\n     assert_almost_equal(entropy([]), 1)\n",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..121b4b6 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -558,8 +558,28 @@ def test_feature_names():\n     for idx, name in enumerate(feature_names):\n         assert_equal(idx, cv.vocabulary_.get(name))\n \n-\n-def test_vectorizer_max_features():\n+def test_countvectorizer_with_provided_vocabulary():\n+    from sklearn.feature_extraction.text import CountVectorizer\n+    from sklearn.utils._testing import assert_array_equal, assert_raises\n+\n+    # Custom vocabulary provided\n+    vocab = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    vectorizer_with_vocab = CountVectorizer(vocabulary=vocab)\n+    \n+    # Check that get_feature_names does not raise an error\n+    feature_names = vectorizer_with_vocab.get_feature_names()\n+    assert_array_equal(vocab, feature_names)\n+\n+    # Test if transform works without calling fit\n+    corpus = [\n+        'This is the first document.',\n+        'This is the second second document.',\n+        'And the third one.',\n+        'Is this the first document?',\n+    ]\n+    X = vectorizer_with_vocab.transform(corpus)\n+    assert X.shape == (4, 9)  # 4 documents, 9 features\n+    assert hasattr(vectorizer_with_vocab, \"vocabulary_\")\n     vec_factories = (\n         CountVectorizer,\n         TfidfVectorizer,\n",
  "scikit-learn__scikit-learn-11310": "diff --git a/sklearn/model_selection/tests/test_search.py b/sklearn/model_selection/tests/test_search.py\nindex 0b1d5f9..3c12665 100644\n--- a/sklearn/model_selection/tests/test_search.py\n+++ b/sklearn/model_selection/tests/test_search.py\n@@ -1150,7 +1150,28 @@ def test_search_cv_results_none_param():\n \n \n @ignore_warnings()\n-def test_search_cv_timing():\n+def test_search_cv_refit_time():\n+    # Create a small dataset\n+    X, y = make_classification(n_samples=100, n_features=4, random_state=42)\n+\n+    # Initialize a simple classifier and perform grid search\n+    svc = LinearSVC(random_state=0)\n+    grid_search = GridSearchCV(svc, param_grid={'C': [0.1, 1, 10]}, refit=True)\n+    grid_search.fit(X, y)\n+    \n+    # Check if refit_time_ is recorded\n+    assert_true(hasattr(grid_search, \"refit_time_\"))\n+    assert_true(isinstance(grid_search.refit_time_, float))\n+    assert_greater_equal(grid_search.refit_time_, 0)\n+\n+    # Repeat with RandomizedSearchCV\n+    rs = RandomizedSearchCV(svc, param_distributions={'C': [0.1, 1, 10]}, n_iter=3, refit=True)\n+    rs.fit(X, y)\n+    \n+    # Check if refit_time_ is recorded\n+    assert_true(hasattr(rs, \"refit_time_\"))\n+    assert_true(isinstance(rs.refit_time_, float))\n+    assert_greater_equal(rs.refit_time_, 0)\n     svc = LinearSVC(random_state=0)\n \n     X = [[1, ], [2, ], [3, ], [4, ]]\n",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..6f333b2 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -30,6 +30,10 @@ from sklearn.linear_model.logistic import (\n     _logistic_loss_and_grad, _logistic_grad_hess,\n     _multinomial_grad_hess, _logistic_loss,\n )\n+from sklearn.metrics.scorer import get_scorer\n+from sklearn.utils._testing import assert_array_almost_equal\n+from sklearn.datasets import make_classification\n+import pytest\n \n X = [[-1, 0], [0, 1], [1, 1]]\n X_sp = sp.csr_matrix(X)\n",
  "scikit-learn__scikit-learn-12585": "diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 4752f9c..fe09e4f 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -154,7 +154,30 @@ def test_clone_nan():\n     assert clf.empty is clf2.empty\n \n \n-def test_clone_sparse_matrices():\n+from sklearn.base import clone\n+from sklearn.preprocessing import StandardScaler\n+from sklearn.utils.estimator_checks import check_estimator\n+import pytest\n+...\n+\n+def test_clone_estimator_types():\n+    # Check that clone works for parameters that are types rather than\n+    # instances\n+    clf = MyEstimator(empty=MyEstimator)\n+    clf2 = clone(clf)\n+    assert clf.empty is clf2.empty\n+\n+def test_clone_with_estimator_type_as_parameter():\n+    # Test cloning an estimator where one of the parameters is an estimator class\n+    scaler = StandardScaler(with_mean=StandardScaler)\n+    cloned_scaler = clone(scaler)\n+    assert cloned_scaler.with_mean is scaler.with_mean\n+\n+@pytest.mark.parametrize(\"estimator_class\", [StandardScaler, MyEstimator])\n+def test_clone_does_not_modify_estimator_class(estimator_class):\n+    # Ensure that cloning does not alter the estimator class\n+    cloned = clone(estimator_class)\n+    assert cloned is estimator_class\n     sparse_matrix_classes = [\n         getattr(sp, name)\n         for name in dir(sp) if name.endswith('_matrix')]\n",
  "scikit-learn__scikit-learn-12973": "",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..e270cee 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -493,8 +493,31 @@ def test_shuffle_stratifiedkfold():\n         assert_not_equal(set(test0), set(test1))\n     check_cv_coverage(kf0, X_40, y, groups=None, expected_n_splits=5)\n \n+def test_stratified_kfold_shuffling_consistency():\n+    # Test that StratifiedKFold shuffles within each class when shuffle=True\n \n-def test_kfold_can_detect_dependent_samples_on_digits():  # see #2372\n+    X = np.arange(20)\n+    y = [0] * 10 + [1] * 10\n+\n+    # Two different random states should result in different test splits\n+    kf1 = StratifiedKFold(n_splits=10, shuffle=True, random_state=42)\n+    kf2 = StratifiedKFold(n_splits=10, shuffle=True, random_state=43)\n+\n+    test_splits_1 = [test for _, test in kf1.split(X, y)]\n+    test_splits_2 = [test for _, test in kf2.split(X, y)]\n+\n+    assert test_splits_1 != test_splits_2, \"Test splits should differ with different random states\"\n+\n+    # Check that different random states produce different splits for each class\n+    kf1 = StratifiedKFold(n_splits=5, shuffle=True, random_state=5)\n+    kf2 = StratifiedKFold(n_splits=5, shuffle=True, random_state=6)\n+\n+    test_splits_1 = [test for _, test in kf1.split(X, y)]\n+    test_splits_2 = [test for _, test in kf2.split(X, y)]\n+\n+    # Ensure shuffling happens within classes\n+    for split1, split2 in zip(test_splits_1, test_splits_2):\n+        assert set(split1) != set(split2), \"Test splits within classes should differ\"\n     # The digits samples are dependent: they are apparently grouped by authors\n     # although we don't have any information on the groups segment locations\n     # for this data. We can highlight this fact by computing k-fold cross-\n",
  "scikit-learn__scikit-learn-13135": "diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py\nindex a18a1c5..34c56f1 100644\n--- a/sklearn/preprocessing/tests/test_discretization.py\n+++ b/sklearn/preprocessing/tests/test_discretization.py\n@@ -203,6 +203,29 @@ def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n     assert_array_equal(expected_3bins, Xt.ravel())\n \n \n+@pytest.mark.parametrize(\n+    'strategy, expected_2bins, expected_3bins, expected_5bins',\n+    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2], [0, 0, 1, 1, 4, 4]),\n+     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2], [0, 0, 1, 2, 3, 4]),\n+     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2], [0, 1, 2, 3, 4, 4])])\n+def test_nonuniform_strategies_extended(strategy, expected_2bins, expected_3bins, expected_5bins):\n+    X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n+\n+    # with 2 bins\n+    est = KBinsDiscretizer(n_bins=2, strategy=strategy, encode='ordinal')\n+    Xt = est.fit_transform(X)\n+    assert_array_equal(expected_2bins, Xt.ravel())\n+\n+    # with 3 bins\n+    est = KBinsDiscretizer(n_bins=3, strategy=strategy, encode='ordinal')\n+    Xt = est.fit_transform(X)\n+    assert_array_equal(expected_3bins, Xt.ravel())\n+\n+    # with 5 bins\n+    est = KBinsDiscretizer(n_bins=5, strategy=strategy, encode='ordinal')\n+    Xt = est.fit_transform(X)\n+    assert_array_equal(expected_5bins, Xt.ravel())\n+\n @pytest.mark.parametrize('strategy', ['uniform', 'kmeans', 'quantile'])\n @pytest.mark.parametrize('encode', ['ordinal', 'onehot', 'onehot-dense'])\n def test_inverse_transform(strategy, encode):\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..9a81aa6 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -598,6 +598,15 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n \n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n+\n+\n def test_gaussian_mixture_fit():\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "",
  "scikit-learn__scikit-learn-13496": "",
  "scikit-learn__scikit-learn-13779": "",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..a48aeb8 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -396,6 +396,22 @@ def test_export_text():\n     assert export_text(reg, decimals=1) == expected_report\n     assert export_text(reg, decimals=1, show_weights=True) == expected_report\n \n+    # Test case for issue: IndexError when the tree has only one feature\n+    X_single_feature = [[-2], [-1], [-1], [1], [1], [2]]\n+    y_single_feature = [-1, -1, -1, 1, 1, 1]\n+    clf_single_feature = DecisionTreeClassifier(max_depth=2, random_state=0)\n+    clf_single_feature.fit(X_single_feature, y_single_feature)\n+\n+    expected_report_single_feature = dedent(\"\"\"\n+    |--- sepal_length <= 0.0\n+    |   |--- class: -1\n+    |--- sepal_length >  0.0\n+    |   |--- class: 1\n+    \"\"\").lstrip()\n+\n+    assert export_text(clf_single_feature,\n+                       feature_names=['sepal_length']) == expected_report_single_feature\n+\n \n def test_plot_tree_entropy(pyplot):\n     # mostly smoke tests\n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..02ef7fa 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1531,8 +1531,38 @@ def test_LogisticRegressionCV_GridSearchCV_elastic_net_ovr():\n     assert (lrcv.predict(X_train) == gs.predict(X_train)).mean() >= .8\n     assert (lrcv.predict(X_test) == gs.predict(X_test)).mean() >= .8\n \n+@pytest.mark.parametrize('penalty', ('l2', 'elasticnet'))\n+@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial', 'auto'))\n+def test_LogisticRegressionCV_no_refit_with_various_penalties(penalty, multi_class):\n+    # Test LogisticRegressionCV does not raise an error with refit=False for various penalties\n+\n+    n_samples = 1000\n+    n_features = 3\n+    np.random.seed(29)\n+    X = np.random.normal(size=(n_samples, n_features))\n+    beta = np.random.normal(size=n_features)\n+    intercept = np.random.normal(size=None)\n+    y = np.sign(intercept + X @ beta)\n+\n+    if penalty == 'elasticnet':\n+        l1_ratios = np.linspace(0, 1, 2)\n+    else:\n+        l1_ratios = None\n \n-@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial'))\n+    # Cs value used here matches the original error reproduction in magnitude\n+    Cs = np.logspace(-4, 4, 3)\n+\n+    lrcv = LogisticRegressionCV(\n+        penalty=penalty,\n+        Cs=Cs,\n+        solver='saga',\n+        l1_ratios=l1_ratios,\n+        multi_class=multi_class,\n+        refit=False\n+    )\n+\n+    # Fit and ensure no exception is raised\n+    lrcv.fit(X, y)\n def test_LogisticRegressionCV_no_refit(multi_class):\n     # Test LogisticRegressionCV attribute shapes when refit is False\n \n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/_show_versions.py b/sklearn/utils/_show_versions.py\nindex 72f054a..7f284bf 100644\n--- a/sklearn/utils/_show_versions.py\n+++ b/sklearn/utils/_show_versions.py\n@@ -37,11 +37,11 @@ def _get_deps_info():\n     -------\n     deps_info: dict\n         version information on relevant Python libraries\n-\n     \"\"\"\n     deps = [\n         \"pip\",\n         \"setuptools\",\n+        \"joblib\",\n         \"sklearn\",\n         \"numpy\",\n         \"scipy\",\n",
  "scikit-learn__scikit-learn-14496": "diff --git a/sklearn/cluster/tests/test_optics.py b/sklearn/cluster/tests/test_optics.py\nindex 6c9dac3..ed62d13 100644\n--- a/sklearn/cluster/tests/test_optics.py\n+++ b/sklearn/cluster/tests/test_optics.py\n@@ -124,8 +124,34 @@ def test_extract_xi():\n                    xi=0.04).fit(X)\n     assert_array_equal(clust.labels_, expected_labels)\n \n+def test_float_min_samples():\n+    # Test case for min_samples as a float\n+    rng = np.random.RandomState(42)\n+    n_points_per_cluster = 5\n+\n+    C1 = [-5, -2] + .8 * rng.randn(n_points_per_cluster, 2)\n+    C2 = [4, -1] + .1 * rng.randn(n_points_per_cluster, 2)\n+    C3 = [1, -2] + .2 * rng.randn(n_points_per_cluster, 2)\n+    \n+    X = np.vstack((C1, C2, C3))\n+    expected_labels = np.r_[[0] * 5, [1] * 5, [2] * 5]\n+    X, expected_labels = shuffle(X, expected_labels, random_state=rng)\n \n-def test_cluster_hierarchy_():\n+    clust = OPTICS(min_samples=0.1, min_cluster_size=0.08,\n+                   max_eps=20, cluster_method='xi',\n+                   xi=0.4).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n+\n+def test_float_min_samples_edge_case():\n+    # Test case for edge case where min_samples is slightly more than 1/n_samples\n+    rng = np.random.RandomState(0)\n+    X = rng.rand(100, 2)  # 100 random points\n+\n+    # Since min_samples is slightly more than 1/n_samples, it should be rounded to a small integer.\n+    clust = OPTICS(min_samples=0.011, min_cluster_size=0.01,\n+                   max_eps=20, cluster_method='xi',\n+                   xi=0.05).fit(X)\n+    # Just ensure no exceptions are raised, specific label values are not crucial for this test.\n     rng = np.random.RandomState(0)\n     n_points_per_cluster = 100\n     C1 = [0, 0] + 2 * rng.randn(n_points_per_cluster, 2)\n",
  "scikit-learn__scikit-learn-14710": "diff --git a/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py b/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\nindex 7e8bccd..37a403f 100644\n--- a/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\n+++ b/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\n@@ -409,9 +409,23 @@ def test_infinite_values_missing_values():\n     X = np.asarray([-np.inf, 0, 1, np.inf, np.nan]).reshape(-1, 1)\n     y_isnan = np.isnan(X.ravel())\n     y_isinf = X.ravel() == np.inf\n+import pytest\n+import numpy as np\n+from sklearn.experimental import enable_hist_gradient_boosting\n+from sklearn.ensemble import HistGradientBoostingClassifier\n+\n+@pytest.mark.parametrize(\"scoring\", [None, 'loss'])\n+def test_string_target_early_stopping(scoring):\n+    # Regression tests for #14709 where the targets need to be encoded before\n+    # computing the score\n+    rng = np.random.RandomState(42)\n+    X = rng.randn(100, 10)\n+    y = np.array(['x'] * 50 + ['y'] * 50, dtype=object)\n+    gbrt = HistGradientBoostingClassifier(n_iter_no_change=10, scoring=scoring)\n+    gbrt.fit(X, y)\n \n-    stump_clf = HistGradientBoostingClassifier(min_samples_leaf=1, max_iter=1,\n-                                               learning_rate=1, max_depth=2)\n+    # Verify that no error is raised during fit\n+    assert gbrt is not None\n \n     assert stump_clf.fit(X, y_isinf).score(X, y_isinf) == 1\n-    assert stump_clf.fit(X, y_isnan).score(X, y_isnan) == 1\n+    assert stump_clf.fit(X, y_isnan).score(X, y_isnan) == 1\n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..6a4f1e6 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,6 +680,22 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n+from scipy import sparse\n+import numpy as np\n+from sklearn import svm\n+\n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for ZeroDivisionError in _sparse_fit when support_vectors_ is empty\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear', C=316.227766017, epsilon=0.1, max_iter=15000, tol=0.001)\n+    model.fit(X_train, y_train)\n+    assert model.support_vectors_.size == 0\n+    assert model.dual_coef_.size == 0\n+\n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..571d645 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -97,8 +97,29 @@ def test_strip_accents():\n     expected = 'this is a test'\n     assert strip_accents_unicode(a) == expected\n \n+def test_strip_accents_nfkd():\n+    # strings that are already decomposed (NFKD form)\n+    a = \"o\\u0308\"  # o with diaresis\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # combining marks by themselves\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"  # various combining marks\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # multiple combining marks on one character\n+    a = \"o\\u0308\\u0304\"  # o with diaresis and macron\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # testing the original issue with LATIN SMALL LETTER N WITH TILDE\n+    s1 = chr(241)  # LATIN SMALL LETTER N WITH TILDE\n+    s2 = chr(110) + chr(771)  # LATIN SMALL LETTER N followed by COMBINING TILDE\n \n-def test_to_ascii():\n+    # They should be normalized to the same string, \"n\"\n+    assert strip_accents_unicode(s1) == \"n\"\n+    assert strip_accents_unicode(s2) == \"n\"\n     # check some classical latin accentuated symbols\n     a = '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb'\n     expected = 'aaaaaaceeee'\n",
  "scikit-learn__scikit-learn-25102": "",
  "scikit-learn__scikit-learn-25232": "",
  "scikit-learn__scikit-learn-25931": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3714d1a..a39a85c 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -330,7 +330,27 @@ def test_iforest_with_n_jobs_does_not_segfault():\n def test_base_estimator_property_deprecated():\n     X = np.array([[1, 2], [3, 4]])\n     y = np.array([1, 0])\n-    model = IsolationForest()\n+import warnings\n+import pytest\n+import numpy as np\n+import pandas as pd\n+from sklearn.ensemble import IsolationForest\n+\n+def test_iforest_preserve_feature_names():\n+    \"\"\"Check that feature names are preserved when contamination is not 'auto'.\"\"\"\n+\n+    rng = np.random.RandomState(0)\n+    X = pd.DataFrame(data=rng.randn(4, 1), columns=[\"a\"])\n+    model = IsolationForest(random_state=0, contamination=0.05)\n+\n+    with warnings.catch_warnings():\n+        warnings.simplefilter(\"error\", UserWarning)\n+        model.fit(X)\n+\n+    # Ensure that no warning is raised when making predictions\n+    with warnings.catch_warnings():\n+        warnings.simplefilter(\"error\", UserWarning)\n+        model.predict(X)\n     model.fit(X, y)\n \n     warn_msg = (\n@@ -338,4 +358,4 @@ def test_base_estimator_property_deprecated():\n         \"will be removed in 1.4. Use `estimator_` instead.\"\n     )\n     with pytest.warns(FutureWarning, match=warn_msg):\n-        model.base_estimator_\n+        model.base_estimator_\n",
  "scikit-learn__scikit-learn-25973": "",
  "scikit-learn__scikit-learn-26323": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex b52e888..84d8693 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -22,6 +22,72 @@ from sklearn.compose import (\n from sklearn.exceptions import NotFittedError\n from sklearn.preprocessing import FunctionTransformer\n from sklearn.preprocessing import StandardScaler, Normalizer, OneHotEncoder\n+import numpy as np\n+import pytest\n+import pandas as pd\n+from sklearn.feature_selection import VarianceThreshold\n+\n+def test_remainder_set_output():\n+    \"\"\"Check that the output is set for the remainder.\n+\n+    Non-regression test for ignoring remainder when it's an estimator.\n+    \"\"\"\n+\n+    df = pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3]})\n+\n+    ct = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+\n+    out = ct.fit_transform(df)\n+    pd.testing.assert_frame_equal(out, df)\n+\n+    ct.set_output(transform=\"default\")\n+    out = ct.fit_transform(df)\n+    assert isinstance(out, np.ndarray)\n+\n+def test_remainder_set_output_with_no_variance():\n+    \"\"\"Check behavior when remainder columns have no variance after transformation.\"\"\"\n+\n+    df = pd.DataFrame({\"a\": [True, True, True], \"b\": [1, 1, 1]})\n+\n+    ct = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+\n+    out = ct.fit_transform(df)\n+    expected = pd.DataFrame(index=df.index)\n+    pd.testing.assert_frame_equal(out, expected)\n+\n+    ct.set_output(transform=\"default\")\n+    out = ct.fit_transform(df)\n+    assert out.shape == (3, 0)  # No features should remain\n+\n+def test_remainder_set_output_with_partial_variance():\n+    \"\"\"Check behavior when only some remainder columns have variance.\"\"\"\n+\n+    df = pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 1, 1]})\n+\n+    ct = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+\n+    out = ct.fit_transform(df)\n+    expected = pd.DataFrame({\"a\": [True, False, True]}, index=df.index)\n+    pd.testing.assert_frame_equal(out, expected)\n+\n+    ct.set_output(transform=\"default\")\n+    out = ct.fit_transform(df)\n+    assert out.shape == (3, 1)  # Only one feature should remain\n \n \n class Trans(TransformerMixin, BaseEstimator):\n",
  "scikit-learn__scikit-learn-9288": "",
  "sphinx-doc__sphinx-10323": "",
  "sphinx-doc__sphinx-10449": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 82ec43a..4edaadc 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1023,6 +1023,25 @@ def test_autodoc_typehints_description_no_undoc_doc_rtype(app):\n             '   Return type:\\n'\n             '      None\\n' == context)\n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\"})\n+def test_autodoc_typehints_description_no_return_type_for_class(app):\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: target.typehints._SquareClass\\n',\n+        encoding='utf8'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n+    assert ('class target.typehints._SquareClass\\n'\n+            '   A class representing a square figure.\\n'\n+            '   __init__(width, height)\\n'\n+            '\\n'\n+            '      Initialize self.  See help(type(self)) for accurate signature.\\n'\n+            '\\n'\n+            '      Parameters:\\n'\n+            '         **width** (*int*) --\\n'\n+            '         **height** (*int*) --\\n' in context)\n+\n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\"})\n",
  "sphinx-doc__sphinx-10466": "diff --git a/tests/test_build_gettext.py b/tests/test_build_gettext.py\nindex a6fc946..890f587 100644\n--- a/tests/test_build_gettext.py\n+++ b/tests/test_build_gettext.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the build process with gettext builder with the test root.\"\"\"\n \n import gettext\n@@ -9,6 +10,7 @@ from subprocess import PIPE, CalledProcessError\n import pytest\n \n from sphinx.util.osutil import cd\n+from sphinx.builders.gettext import Catalog, MsgOrigin\n \n \n @pytest.mark.sphinx('gettext', srcdir='root-gettext')\n@@ -19,6 +21,41 @@ def test_build_gettext(app):\n     # Do messages end up in the correct location?\n     # top-level documents end up in a message catalog\n     assert (app.outdir / 'extapi.pot').isfile()\n+\n+def test_Catalog_duplicated_message():\n+    catalog = Catalog()\n+    catalog.add('hello', MsgOrigin('/path/to/filename', 1))\n+    catalog.add('hello', MsgOrigin('/path/to/filename', 1))\n+    catalog.add('hello', MsgOrigin('/path/to/filename', 2))\n+    catalog.add('hello', MsgOrigin('/path/to/yetanother', 1))\n+    catalog.add('world', MsgOrigin('/path/to/filename', 1))\n+\n+    assert len(list(catalog)) == 2\n+\n+    msg1, msg2 = list(catalog)\n+    assert msg1.text == 'hello'\n+    assert sorted(msg1.locations) == sorted([('/path/to/filename', 1),\n+                                             ('/path/to/filename', 2),\n+                                             ('/path/to/yetanother', 1)])\n+    assert msg2.text == 'world'\n+    assert msg2.locations == [('/path/to/filename', 1)]\n+\n+def test_Catalog_no_duplicate_locations():\n+    catalog = Catalog()\n+    catalog.add('test', MsgOrigin('/some/path', 10))\n+    catalog.add('test', MsgOrigin('/some/path', 10))\n+    catalog.add('test', MsgOrigin('/some/path', 20))\n+    catalog.add('test', MsgOrigin('/some/otherpath', 10))\n+\n+    messages = list(catalog)\n+    assert len(messages) == 1\n+    message = messages[0]\n+    expected_locations = [\n+        ('/some/path', 10),\n+        ('/some/path', 20),\n+        ('/some/otherpath', 10)\n+    ]\n+    assert sorted(message.locations) == sorted(expected_locations)\n     # directory items are grouped into sections\n     assert (app.outdir / 'subdir.pot').isfile()\n \n",
  "sphinx-doc__sphinx-10673": "",
  "sphinx-doc__sphinx-7440": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 975a00f..c6fafa3 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -140,7 +140,31 @@ def test_glossary(app):\n     assert_node(doctree[0][0][2][1],\n                 [nodes.definition, nodes.paragraph, \"description\"])\n \n-    # index\n+    # additional test for case-sensitive glossary terms\n+    text_case_sensitive = (\".. glossary::\\n\"\n+                           \"\\n\"\n+                           \"   mysql\\n\"\n+                           \"       description for lowercase\\n\"\n+                           \"\\n\"\n+                           \"   MySQL\\n\"\n+                           \"       description for uppercase\\n\")\n+\n+    doctree_case_sensitive = restructuredtext.parse(app, text_case_sensitive)\n+    assert_node(doctree_case_sensitive, (\n+        [glossary, definition_list, ([definition_list_item, ([term, (\"mysql\", index)],\n+                                                             definition)],\n+                                     [definition_list_item, ([term, (\"MySQL\", index)],\n+                                                             definition)])],\n+    ))\n+    assert_node(doctree_case_sensitive[0][0][0][0][1],\n+                entries=[(\"single\", \"mysql\", \"term-mysql\", \"main\", None)])\n+    assert_node(doctree_case_sensitive[0][0][1][0][1],\n+                entries=[(\"single\", \"MySQL\", \"term-MySQL\", \"main\", None)])\n+\n+    # ensure both terms are in the index\n+    objects_case_sensitive = list(app.env.get_domain(\"std\").get_objects())\n+    assert (\"mysql\", \"mysql\", \"term\", \"index\", \"term-mysql\", -1) in objects_case_sensitive\n+    assert (\"MySQL\", \"MySQL\", \"term\", \"index\", \"term-MySQL\", -1) in objects_case_sensitive\n     objects = list(app.env.get_domain(\"std\").get_objects())\n     assert (\"term1\", \"term1\", \"term\", \"index\", \"term-term1\", -1) in objects\n     assert (\"term2\", \"term2\", \"term\", \"index\", \"term-term2\", -1) in objects\n",
  "sphinx-doc__sphinx-7757": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex b3053d1..4656eab 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -331,14 +331,38 @@ def test_signature_from_str_kwonly_args():\n     assert sig.parameters['b'].kind == Parameter.KEYWORD_ONLY\n     assert sig.parameters['b'].default == Parameter.empty\n \n+import pytest\n+import sys\n+from sphinx.util.inspect import signature_from_str\n+from inspect import Parameter\n \n @pytest.mark.skipif(sys.version_info < (3, 8),\n                     reason='python-3.8 or above is required')\n def test_signature_from_str_positionaly_only_args():\n-    sig = inspect.signature_from_str('(a, /, b)')\n-    assert list(sig.parameters.keys()) == ['a', 'b']\n+    sig = signature_from_str('(a, b=0, /, c=1)')\n+    assert list(sig.parameters.keys()) == ['a', 'b', 'c']\n     assert sig.parameters['a'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['a'].default == Parameter.empty\n+    assert sig.parameters['b'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['b'].default == '0'\n+    assert sig.parameters['c'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['c'].default == '1'\n+    \n+@pytest.mark.skipif(sys.version_info < (3, 8),\n+                    reason='python-3.8 or above is required')\n+def test_signature_from_str_mixed_args():\n+    sig = signature_from_str('(x, y=2, z, /, a=5, b)')\n+    assert list(sig.parameters.keys()) == ['x', 'y', 'z', 'a', 'b']\n+    assert sig.parameters['x'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['x'].default == Parameter.empty\n+    assert sig.parameters['y'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['y'].default == '2'\n+    assert sig.parameters['z'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['z'].default == Parameter.empty\n+    assert sig.parameters['a'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['a'].default == '5'\n     assert sig.parameters['b'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['b'].default == Parameter.empty\n \n \n def test_signature_from_str_invalid():\n",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..380c8b0 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -15,6 +16,7 @@ from importlib import import_module\n import pytest\n \n from sphinx.ext.autodoc.mock import _MockModule, _MockObject, mock\n+from typing import TypeVar, Generic\n \n \n def test_MockModule():\n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_napoleon.py b/tests/test_ext_napoleon.py\nindex 0676869..27c228a 100644\n--- a/tests/test_ext_napoleon.py\n+++ b/tests/test_ext_napoleon.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_napoleon\n     ~~~~~~~~~~~~~\n@@ -12,8 +13,39 @@\n import sys\n from collections import namedtuple\n from unittest import TestCase, mock\n-\n+import functools\n from sphinx.application import Sphinx\n+\n+def simple_decorator(f):\n+    \"\"\"A simple decorator that does nothing, for tests to use.\"\"\"\n+    @functools.wraps(f)\n+    def wrapper(*args, **kwargs):\n+        return f(*args, **kwargs)\n+    return wrapper\n+\n+class SampleClass:\n+    \"\"\"\n+    Sample class for testing decorated __init__\n+    \"\"\"\n+\n+    @simple_decorator\n+    def __init__(self, value):\n+        \"\"\"Initialize with value\"\"\"\n+        self.value = value\n+\n+class TestNapoleonInitDoc(TestCase):\n+\n+    def setUp(self):\n+        self.config = Config({\n+            'napoleon_include_init_with_doc': True,\n+        })\n+        self.app = Sphinx(srcdir='.', confdir='.', outdir='.', doctreedir='.', buildername='html', confoverrides=self.config)\n+\n+    def test_decorated_init_doc(self):\n+        # Ensure that the decorated __init__ method is included\n+        init_method = SampleClass.__init__\n+        self.assertTrue(hasattr(init_method, '__doc__'), \"Decorated __init__ should have a docstring\")\n+        self.assertIn(\"Initialize with value\", init_method.__doc__, \"Docstring should be present in the decorated __init__ method\")\n from sphinx.ext.napoleon import _process_docstring, _skip_member, Config, setup\n \n \n",
  "sphinx-doc__sphinx-7985": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 5b1b2ed..80b3c0e 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -13,9 +13,21 @@ import re\n from unittest import mock\n import pytest\n \n-\n @pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n-def test_defaults(app, status, warning):\n+def test_local_links(app, status, warning):\n+    app.builder.build_all()\n+\n+    assert (app.outdir / 'output.txt').exists()\n+    content = (app.outdir / 'output.txt').read_text()\n+\n+    print(content)\n+    # Test for local links\n+    # This tests that a valid local link is checked correctly\n+    assert \"ok        conf.py\" in content\n+    # This tests that an invalid local link is reported as broken\n+    assert \"broken    path/to/notfound\" in content\n+    # Ensure there are enough lines to account for all tested links\n+    assert len(content.splitlines()) == 7\n     app.builder.build_all()\n \n     assert (app.outdir / 'output.txt').exists()\n",
  "sphinx-doc__sphinx-8035": "diff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex ad1d950..dc86d3c 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_private_members\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -14,6 +15,50 @@ from test_ext_autodoc import do_autodoc\n \n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_specific_private_members(app):\n+    app.config.autoclass_content = 'class'\n+    # Selectively document only _private_function from private members\n+    options = {\"members\": None,\n+               \"private-members\": \"_private_function\"}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        '',\n+        '.. py:function:: _private_function(name)',\n+        '   :module: target.private',\n+        '',\n+        '   private_function is a docstring().',\n+        '',\n+        '   :meta private:',\n+        '',\n+    ]\n+\n+    # Document both _private_function and _another_private_function\n+    options = {\"members\": None,\n+               \"private-members\": \"_private_function,_another_private_function\"}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        '',\n+        '.. py:function:: _private_function(name)',\n+        '   :module: target.private',\n+        '',\n+        '   private_function is a docstring().',\n+        '',\n+        '   :meta private:',\n+        '',\n+        '.. py:function:: _another_private_function(name)',\n+        '   :module: target.private',\n+        '',\n+        '   another_private_function is a docstring().',\n+        '',\n+        '   :meta private:',\n+        '',\n+    ]\n def test_private_field(app):\n     app.config.autoclass_content = 'class'\n     options = {\"members\": None}\n",
  "sphinx-doc__sphinx-8120": "diff --git a/tests/test_intl.py b/tests/test_intl.py\nindex 58339b1..4755052 100644\n--- a/tests/test_intl.py\n+++ b/tests/test_intl.py\n@@ -1286,6 +1286,37 @@ def test_image_glob_intl_using_figure_language_filename(app):\n                 candidates={'application/pdf': 'subdir/svgimg.pdf',\n                             'image/svg+xml': 'subdir/svgimg.svg'})\n \n-\n-def getwarning(warnings):\n-    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n+from babel.messages import pofile\n+from sphinx.testing.util import SphinxTestApp\n+\n+def test_custom_locale_translations(make_app, app_params, sphinx_test_tempdir):\n+    \"\"\"Test that custom translations in .po files are used correctly.\"\"\"\n+    try:\n+        # Clear any existing translators cache\n+        locale.translators.clear()\n+\n+        # Set up a test catalog with a custom translation\n+        locale_dir = sphinx_test_tempdir / 'testroot' / 'locales' / 'da' / 'LC_MESSAGES'\n+        locale_dir.makedirs()\n+        with (locale_dir / 'sphinx.po').open('wb') as f:\n+            catalog = Catalog()\n+            catalog.add('Fig. %s', 'Foobar %s')\n+            catalog.add('Listing %s', 'Whatever %s')\n+            pofile.write_po(f, catalog)\n+\n+        # Prepare and build the Sphinx application\n+        args, kwargs = app_params\n+        kwargs['confoverrides'] = {'language': 'da'}\n+        app = make_app(*args, **kwargs)\n+\n+        # Assert that the .mo file is created\n+        assert (locale_dir / 'sphinx.mo').exists()\n+\n+        # Assert that the translations have been correctly applied\n+        app.build()\n+        content = (app.outdir / 'index.html').read_text()\n+        assert 'Foobar 1' in content\n+        assert 'Whatever 1' in content\n+    finally:\n+        locale.translators.clear()\n+    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n",
  "sphinx-doc__sphinx-8269": "",
  "sphinx-doc__sphinx-8459": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex d1881df..439d655 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_configs\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -8,6 +9,39 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc', \n+                    srcdir='autodoc_typehints_description_and_type_aliases_extended', \n+                    confoverrides={'autodoc_typehints': 'description', \n+                                   'autodoc_type_aliases': {'JSONObject': 'types.JSONObject'}})\n+def test_autodoc_typehints_description_and_type_aliases_extended(app):\n+    # Write the content of the test file\n+    (app.srcdir / 'annotations.rst').write_text('.. autofunction:: types.sphinx_doc')\n+\n+    # Run the Sphinx build\n+    app.build()\n+\n+    # Read the generated output\n+    context = (app.outdir / 'annotations.txt').read_text()\n+\n+    # Verify the output matches the expected result\n+    assert ('types.sphinx_doc(data)\\n'\n+            '\\n'\n+            '   Does it work.\\n'\n+            '\\n'\n+            '   Parameters:\\n'\n+            '      * **data** (*types.JSONObject*) --\\n'\n+            '         Does it args.\\n'\n+            '\\n'\n+            '   Returns:\\n'\n+            '      Does it work in return.\\n'\n+            '\\n'\n+            '   Return type:\\n'\n+            '      types.JSONObject\\n' == context)\n+\n+import sys\n+import pytest\n+from sphinx.testing.util import SphinxTestApp, path\n+\n import platform\n import sys\n \n",
  "sphinx-doc__sphinx-8475": "",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..65f4006 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -29,8 +29,46 @@ try:\n except ImportError:\n     pyximport = None\n \n+from .test_ext_autodoc import do_autodoc\n \n-def do_autodoc(app, objtype, name, options=None):\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_empty_all_with_ignore_module_all(app):\n+    options = {'members': True, 'ignore-module-all': True}\n+    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.empty_all',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+        '   .. py:function:: bar()',\n+        '      :module: target.empty_all',\n+        '',\n+        '      docstring',\n+        '',\n+        '   .. py:function:: baz()',\n+        '      :module: target.empty_all',\n+        '',\n+        '      docstring',\n+        '',\n+        '   .. py:function:: foo()',\n+        '      :module: target.empty_all',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_empty_all_no_ignore_module_all(app):\n+    options = {'members': True, 'ignore-module-all': False}\n+    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.empty_all',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+    ]\n     if options is None:\n         options = {}\n     app.env.temp_data.setdefault('docname', 'index')  # set dummy docname\n",
  "sphinx-doc__sphinx-8721": "diff --git a/tests/test_ext_viewcode.py b/tests/test_ext_viewcode.py\nindex d4fba47..d97d319 100644\n--- a/tests/test_ext_viewcode.py\n+++ b/tests/test_ext_viewcode.py\n@@ -49,6 +49,9 @@ def test_viewcode(app, status, warning):\n             '<span>    &quot;&quot;&quot;</span></div>\\n') in result\n \n \n+import pytest\n+from pathlib import Path\n+\n @pytest.mark.sphinx(testroot='ext-viewcode', tags=['test_linkcode'])\n def test_linkcode(app, status, warning):\n     app.builder.build(['objects'])\n",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex 3c31d3d..6582806 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -515,8 +515,19 @@ def test_dict_customtype():\n     # Type is unsortable, just check that it does not crash\n     assert \"<CustomType(2)>: 2\" in description\n \n+def test_object_description_enum_rendering():\n+    import enum\n \n-def test_getslots():\n+    class MyEnum(enum.Enum):\n+        ValueA = 10\n+        ValueB = 20\n+\n+    def ugly_enum_func(e: MyEnum = MyEnum.ValueA) -> None:\n+        pass\n+\n+    # Test if the object description correctly formats the MyEnum value for the function signature\n+    assert inspect.object_description(MyEnum.ValueA) == \"MyEnum.ValueA\"\n+    assert inspect.object_description(ugly_enum_func) == \"<function ugly_enum_func at some_location>\"\n     class Foo:\n         pass\n \n",
  "sphinx-doc__sphinx-9320": "",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..285ce81 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -54,6 +54,7 @@ from sphinx.pycode import ast\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n     (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n+    (\"(1,)\", \"(1,)\"),                             # Tuple (single element)\n     (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n",
  "sphinx-doc__sphinx-9591": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 29731ea..7922e13 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -847,7 +847,38 @@ def test_pyproperty(app):\n     assert domain.objects['Class.prop2'] == ('index', 'Class.prop2', 'property', False)\n \n \n-def test_pydecorator_signature(app):\n+def test_property_type_annotation_cross_reference(app):\n+    text = (\".. py:class:: Square\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: start\\n\"\n+            \"      :type: Point\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\"\n+            \"      \\n\"\n+            \"      Square's end position (bottom-right corner).\\n\"\n+            \"\\n\"\n+            \".. py:class:: Point\\n\"\n+            \"\\n\"\n+            \"   A class representing a point.\\n\"\n+            \"   \\n\"\n+            \"   .. py:attribute:: x\\n\"\n+            \"      :type: int\\n\"\n+            \"      \\n\"\n+            \"   .. py:attribute:: y\\n\"\n+            \"      :type: int\\n\")\n+    \n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n+    \n+    # Check that `Point` is cross-referenced in the `end` property of `Square`.\n+    assert_node(doctree[1][1][2], ([desc_signature, ([desc_annotation, \"property \"],\n+                                                     [desc_name, \"end\"],\n+                                                     [pending_xref, \"Point\"])],\n+                                   [desc_content, \"Square's end position (bottom-right corner).\"]))\n+    \n+    assert 'Square.end' in domain.objects\n+    assert domain.objects['Square.end'] == ('index', 'Square.end', 'property', False)\n     text = \".. py:decorator:: deco\"\n     domain = app.env.get_domain('py')\n     doctree = restructuredtext.parse(app, text)\n",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..00f09fc 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -783,8 +783,22 @@ def test_pymethod_options(app):\n     assert 'Class.meth7' in domain.objects\n     assert domain.objects['Class.meth7'] == ('index', 'Class.meth7', 'method', False)\n \n+def test_pymethod_property_without_parens(app):\n+    text = (\".. py:class:: Class\\n\"\n+            \"\\n\"\n+            \"   .. py:method:: meth_no_parens\\n\"\n+            \"      :property:\\n\")\n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n \n-def test_pyclassmethod(app):\n+    # :property: without parens\n+    assert_node(doctree[1][1][0], addnodes.index,\n+                entries=[('single', 'meth_no_parens (Class property)', 'Class.meth_no_parens', '', None)])\n+    assert_node(doctree[1][1][1], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n+                                                     [desc_name, \"meth_no_parens\"])],\n+                                   [desc_content, ()]))\n+    assert 'Class.meth_no_parens' in domain.objects\n+    assert domain.objects['Class.meth_no_parens'] == ('index', 'Class.meth_no_parens', 'method', False)\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n             \"   .. py:classmethod:: meth\\n\")\n",
  "sphinx-doc__sphinx-9711": "",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..2fdabfc 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -236,6 +236,31 @@ def test_Point2D():\n     assert p2.distance(p3) == sqrt(17)/2\n \n \n+from sympy import sqrt\n+from sympy.geometry import Point, Point3D, Point2D\n+\n+def test_issue_11617():\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point2D(2, 0)\n+    assert p1.distance(p2) == sqrt(5)\n+\n+def test_distance_between_3d_points():\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point3D(2, 0, 5)\n+    assert p1.distance(p2) == sqrt(10)\n+\n+def test_distance_2d_to_3d_projected():\n+    # This tests if a 2D point is correctly understood as a 3D point with z=0\n+    p1 = Point2D(2, 0)\n+    p2 = Point3D(2, 0, 5)\n+    assert p1.distance(p2) == 5\n+\n+def test_distance_3d_to_2d_with_projection():\n+    # Testing with 3D to 2D points where 3D should have z=0 for comparison\n+    p1 = Point3D(2, 0, 5)\n+    p2 = Point2D(2, 0)\n+    assert p1.distance(p2) == 5\n+\n def test_issue_9214():\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..9426117 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -751,8 +751,25 @@ def test_issue_2790():\n     assert lambdify((x, (y, (w, z))), w + x + y + z)(1, (2, (3, 4))) == 10\n     assert lambdify(x, x + 1, dummify=False)(1) == 2\n \n-\n-def test_ITE():\n+from sympy.utilities.lambdify import implemented_function\n+from sympy import Float\n+\n+def test_issue_12092():\n+    f = implemented_function('f', lambda x: x**2)\n+    assert f(f(2)).evalf() == Float(16)\n+\n+def test_recursive_evalf():\n+    f = implemented_function('f', lambda x: x**2)\n+    g = implemented_function('g', lambda x: 2 * x)\n+    # Simple function evaluation\n+    assert f(2).evalf() == Float(4)\n+    assert g(2).evalf() == Float(4)\n+    # Composition evaluation\n+    assert f(g(2)).evalf() == Float(16)\n+    assert g(f(2)).evalf() == Float(8)\n+    # Nested composition evaluation\n+    assert f(f(g(2))).evalf() == Float(256)\n+    assert g(g(f(2))).evalf() == Float(16)\n     assert lambdify((x, y, z), ITE(x, y, z))(True, 5, 3) == 5\n     assert lambdify((x, y, z), ITE(x, y, z))(False, 5, 3) == 3\n \n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..b2df948 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,8 +83,15 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n+from sympy import Identity, Sum, Symbol, symbols\n \n-def test_Identity_doit():\n+def test_Identity_sum_elements():\n+    n = Symbol('n', integer=True, positive=True)\n+    In = Identity(n)\n+    i, j = symbols('i j', integer=True)\n+\n+    # Check whether the total sum of the identity matrix elements is 'n'\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..8872de2 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -351,6 +351,15 @@ def test_args():\n     raises(ValueError, lambda: Permutation([1, 1, 0]))\n     raises(ValueError, lambda: Permutation([[1], [1, 2]]))\n     raises(ValueError, lambda: Permutation([4, 5], size=10))  # where are 0-3?\n+    \n+    # Tests for non-disjoint cycles\n+    # Non-disjoint cycles should be processed in left-to-right order\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])  # Identity permutation\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([1, 2, 0])\n+    assert Permutation([[1, 2], [0, 1]]) == Permutation([2, 0, 1])\n+    assert Permutation([[0, 2, 1], [1, 2]]) == Permutation([2, 0, 1])\n+    assert Permutation([[1, 0], [0, 2], [2, 1]]) == Permutation([1, 2, 0])\n+    assert Permutation([[0, 1], [1, 0], [0, 1]]) == Permutation([0, 1])  # Should still be identity\n     # but this is ok because cycles imply that only those listed moved\n     assert Permutation(4, 5) == Permutation([0, 1, 2, 3, 5, 4])\n \n",
  "sympy__sympy-13031": "",
  "sympy__sympy-13372": "diff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\nindex e95146a..6ee3a35 100644\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -170,6 +170,11 @@ def test_evalf_ramanujan():\n \n # Input that for various reasons have failed at some point\n \n+from sympy import Mul, Max, NS, symbols\n+\n+def test_issue_13076():\n+    x, y = symbols('x y')\n+    assert NS(Mul(Max(0, y), x, evaluate=False).evalf()) == 'x*Max(0, y)'\n \n def test_evalf_bugs():\n     assert NS(sin(1) + exp(-10**10), 10) == NS(sin(1), 10)\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..dc2d4d8 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -273,7 +273,20 @@ def test_coth():\n     assert coth(k*pi*I) == -cot(k*pi)*I\n \n \n-def test_coth_series():\n+def test_coth_substitution_issue():\n+    from sympy import coth, log, tan, Symbol\n+\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+\n+    # Test for specific integral values that previously caused NameError\n+    problematic_values = [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]\n+    for val in problematic_values:\n+        try:\n+            result = e.subs(x, val)\n+            print(f\"coth(log(tan({val}))) = {result}\")\n+        except Exception as err:\n+            print(f\"Substitution for {val} raised an error: {err}\")\n     x = Symbol('x')\n     assert coth(x).series(x, 0, 8) == \\\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..c5168f6 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -188,7 +188,31 @@ def test_Complement():\n     assert S.Reals - Union(S.Naturals, FiniteSet(pi)) == \\\n             Intersection(S.Reals - S.Naturals, S.Reals - FiniteSet(pi))\n \n-def test_complement():\n+def test_Complement_issue():\n+    from sympy import Complement, FiniteSet, Interval, Symbol\n+\n+    x = Symbol('x')\n+    y = Symbol('y')\n+\n+    # Original test case from the issue\n+    assert Complement(FiniteSet(x, y, 2), Interval(-10, 10)) == \\\n+           Complement(FiniteSet(x, y), Interval(-10, 10))\n+\n+    # Additional test cases\n+    # Case with no numbers in the FiniteSet\n+    assert Complement(FiniteSet(x, y), Interval(-10, 10)) == FiniteSet(x, y)\n+\n+    # Case with no symbols in the FiniteSet\n+    assert Complement(FiniteSet(2, 3), Interval(-10, 10)) == EmptySet()\n+\n+    # Mixed case with symbols and numbers outside the interval\n+    assert Complement(FiniteSet(x, y, -20), Interval(-10, 10)) == FiniteSet(x, y, -20)\n+\n+    # Case with all numbers inside the interval and a symbol\n+    assert Complement(FiniteSet(x, 2, 3), Interval(0, 5)) == FiniteSet(x)\n+\n+    # Case with an empty complement result\n+    assert Complement(FiniteSet(15, x), Interval(-10, 10)) == FiniteSet(15, x)\n     assert Interval(0, 1).complement(S.Reals) == \\\n         Union(Interval(-oo, 0, True, True), Interval(1, oo, True, True))\n     assert Interval(0, 1, True, False).complement(S.Reals) == \\\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..86cb712 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,47 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643_col_insert():\n+    import sympy as sm\n+    M = sm.eye(6)\n+    V = 2 * sm.ones(6, 2)\n+    result = M.col_insert(3, V)\n+    expected = sm.Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1],\n+    ])\n+    assert result == expected\n+\n+    # Additional test cases for various indices\n+    M2 = sm.Matrix([[1, 2], [3, 4], [5, 6]])\n+    V2 = sm.Matrix([[7], [8], [9]])\n+    result2 = M2.col_insert(0, V2)\n+    expected2 = sm.Matrix([\n+        [7, 1, 2],\n+        [8, 3, 4],\n+        [9, 5, 6],\n+    ])\n+    assert result2 == expected2\n+\n+    result3 = M2.col_insert(2, V2)\n+    expected3 = sm.Matrix([\n+        [1, 2, 7],\n+        [3, 4, 8],\n+        [5, 6, 9],\n+    ])\n+    assert result3 == expected3\n+\n+    result4 = M2.col_insert(3, V2)\n+    expected4 = sm.Matrix([\n+        [1, 2, 7, 7],\n+        [3, 4, 8, 8],\n+        [5, 6, 9, 9],\n+    ])\n+    assert result4 == expected4\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..367faa9 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -678,6 +678,17 @@ def test_Poly_mul():\n     assert 2 * Poly(x, x) == Poly(2*x, x)\n \n \n+from sympy import Poly, Symbol, S\n+\n+x = Symbol('x')\n+\n+def test_issue_13079():\n+    assert Poly(x)*x == Poly(x**2, x, domain='ZZ')\n+    assert x*Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert -2*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2)*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert Poly(x)*S(-2) == Poly(-2*x, x, domain='ZZ')\n+\n def test_Poly_sqr():\n     assert Poly(x*y, x, y).sqr() == Poly(x**2*y**2, x, y)\n \n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..cbca219 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -54,6 +54,27 @@ def test_printmethod():\n             return \"foo\"\n     assert latex(R(x)) == \"foo\"\n \n+def test_latex_mul_symbol_custom():\n+    # Test using a custom thin space for multiplication\n+    from sympy import Symbol, latex\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    assert latex(3*x**2*y, mul_symbol='\\\\,') == r\"3\\,x^{2}\\,y\"\n+    assert latex(1.5*3**x, mul_symbol='\\\\,') == r\"1.5\\,3^{x}\"\n+    \n+    # Test with other symbols to ensure backward compatibility\n+    assert latex(2*x*y, mul_symbol='dot') == r\"2 \\cdot x \\cdot y\"\n+    assert latex(2*x*y, mul_symbol='times') == r\"2 \\times x \\times y\"\n+    assert latex(2*x*y, mul_symbol='ldot') == r\"2 \\,.\\, x \\,.\\, y\"\n+    \n+    # Test default behavior without mul_symbol specified\n+    assert latex(2*x*y) == \"2 x y\"\n+\n+    # Test multiplication symbol with complex expressions\n+    z = Symbol('z')\n+    assert latex(x*y*z, mul_symbol='\\\\,') == r\"x\\,y\\,z\"\n+    assert latex(x**2*y**3*z**4, mul_symbol='\\\\,') == r\"x^{2}\\,y^{3}\\,z^{4}\"\n+\n \n def test_latex_basic():\n     assert latex(1 + x) == \"x + 1\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..706058e 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -402,8 +402,17 @@ def test_determinant():\n     assert M.det(method=\"bareiss\") == z**2 - x*y\n     assert M.det(method=\"berkowitz\") == z**2 - x*y\n \n-\n-def test_det_LU_decomposition():\n+def test_issue_13835_nan_comparison():\n+    from sympy import Matrix, symbols\n+\n+    a = symbols('a')\n+    M = lambda n: Matrix([[i + a*j for i in range(n)] for j in range(n)])\n+    \n+    # Test previously failing cases to ensure they no longer produce NaN or errors\n+    assert M(5).det() == 0, \"Determinant of 5x5 matrix should be 0\"\n+    # If f(6) was previously causing an error, we should check it no longer does.\n+    assert M(6).det() == 0, \"Determinant of 6x6 matrix should be 0\"\n+    assert M(7).det() == 0, \"Determinant of 7x7 matrix should be 0\"\n \n     for M in [Matrix(), Matrix([[1]])]:\n         assert M.det(method=\"lu\") == 1\n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..890fbf9 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -710,6 +710,69 @@ def test_issue_10003():\n     assert P(G < -1) == S.Zero\n \n def test_precomputed_cdf():\n+    # Test cases for verifying precomputed CDF implementations for various distributions\n+\n+    x = symbols(\"x\", real=True, finite=True)\n+\n+    # Arcsin distribution\n+    a, b = 0, 3\n+    X_arcsin = Arcsin(\"X_arcsin\", a, b)\n+    assert cdf(X_arcsin)(1) == 2 * asin(sqrt((1 - a) / (b - a))) / pi\n+\n+    # Dagum distribution\n+    p, a, b = S(1)/3, S(1)/5, 2\n+    X_dagum = Dagum(\"X_dagum\", p, a, b)\n+    assert cdf(X_dagum)(3) == (1 + (3/b)**(-a))**(-p)\n+\n+    # Erlang distribution\n+    k, l = 1, 1\n+    X_erlang = Erlang(\"X_erlang\", k, l)\n+    assert cdf(X_erlang)(1) == lowergamma(k, l * 1) / gamma(k)\n+\n+    # Frechet distribution\n+    a, s, m = S(4)/3, 1, 2\n+    X_frechet = Frechet(\"X_frechet\", a, s, m)\n+    assert cdf(X_frechet)(3) == exp(-((3-m)/s)**(-a))\n+\n+    # Gamma distribution\n+    k, theta = 0.1, 2\n+    X_gamma = Gamma(\"X_gamma\", k, theta)\n+    assert cdf(X_gamma)(3) == lowergamma(k, 3/theta) / gamma(k)\n+\n+    # GammaInverse distribution\n+    a, b = S(5)/7, 2\n+    X_gammainv = GammaInverse(\"X_gammainv\", a, b)\n+    assert cdf(X_gammainv)(3) == uppergamma(a, b/3) / gamma(a)\n+\n+    # Kumaraswamy distribution\n+    a, b = S(1)/123, 5\n+    X_kumaraswamy = Kumaraswamy(\"X_kumaraswamy\", a, b)\n+    assert cdf(X_kumaraswamy)(S(1)/3) == 1 - (1 - (S(1)/3)**a)**b\n+\n+    # Laplace distribution\n+    mu, b = 2, 3\n+    X_laplace = Laplace(\"X_laplace\", mu, b)\n+    assert cdf(X_laplace)(5) == Piecewise((exp((5 - mu)/b)/2, 5 < mu), (-exp((mu - 5)/b)/2 + 1, True))\n+\n+    # Logistic distribution\n+    mu, s = 1, 0.1\n+    X_logistic = Logistic(\"X_logistic\", mu, s)\n+    assert cdf(X_logistic)(2) == 1 / (1 + exp(-(2 - mu) / s))\n+\n+    # Nakagami distribution\n+    mu, omega = S(7)/3, 1\n+    X_nakagami = Nakagami(\"X_nakagami\", mu, omega)\n+    assert cdf(X_nakagami)(2) == lowergamma(mu, mu * 2**2 / omega) / gamma(mu)\n+\n+    # StudentT distribution\n+    nu = 10\n+    X_studentt = StudentT(\"X_studentt\", nu)\n+    assert cdf(X_studentt)(2) == S.Half + 2 * gamma((nu + 1) / 2) * hyper((S.Half, (nu + 1) / 2), (S(3)/2,), -2**2/nu) / (sqrt(pi * nu) * gamma(nu / 2))\n+\n+    # UniformSum distribution\n+    n = 5\n+    US = UniformSum(\"US\", n)\n+    assert cdf(US)(2) == (n * Sum((-1)**k * binomial(n, k) * (2 - k)**n, (k, 0, floor(2))) / factorial(n)).evalf()\n     x = symbols(\"x\", real=True, finite=True)\n     mu = symbols(\"mu\", real=True, finite=True)\n     sigma, xm, alpha = symbols(\"sigma xm alpha\", positive=True, finite=True)\n",
  "sympy__sympy-13974": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bd3e825..910f30e 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -38,6 +38,39 @@ def test_tensor_product_expand():\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n \n+from sympy import Symbol, symbols\n+from sympy.physics.quantum import TensorProduct as TP\n+from sympy.physics.quantum import tensor_product_simp as tps\n+from sympy.physics.paulialgebra import Pauli\n+\n+def test_tensor_product_powers_issue():\n+    a = Symbol('a', commutative=False)\n+\n+    # Test case for simple tensor product\n+    t1 = TP(1, 1) * TP(1, 1)\n+    assert tps(t1) == TP(1 * 1, 1 * 1)\n+    assert t1.expand(tensorproduct=True) == TP(1 * 1, 1 * 1)\n+\n+    # Verify substitution resolves correctly\n+    assert tps(TP(1, 1) * TP(1, a)).subs(a, 1) == TP(1 * 1, 1 * 1)\n+\n+    # Test case for tensor product involving Pauli matrices\n+    t2 = TP(1, Pauli(3)) * TP(1, Pauli(3))\n+    assert tps(t2) == TP(1 * 1, Pauli(3) * Pauli(3))\n+    assert t2.expand(tensorproduct=True) == TP(1 * 1, Pauli(3) * Pauli(3))\n+\n+    # Verify substitution with Pauli resolves correctly\n+    assert tps(TP(1, Pauli(3)) * TP(1, a)).subs(a, Pauli(3)) == TP(1 * 1, 1 * 1)\n+\n+    # Additional test cases from original patch\n+    A, B, C, D = symbols('A B C D', commutative=False)\n+    x = Symbol('x', commutative=True)\n+    \n+    assert tps(TP(A, B)**x) == TP(A**x, B**x)\n+    assert tps(x * TP(A, B)**2) == x * TP(A**2, B**2)\n+    assert tps(x * (TP(A, B)**2) * TP(C, D)) == x * TP(A**2 * C, B**2 * D)\n+    assert tps(TP(A, B) - TP(C, D)**x) == TP(A, B) - TP(C**x, D**x)\n+\n def test_tensor_product_commutator():\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n         TP(A*B, C) - TP(B*A, C)\n",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_python.py b/sympy/printing/tests/test_python.py\nindex 73fc070..b13bda9 100644\n--- a/sympy/printing/tests/test_python.py\n+++ b/sympy/printing/tests/test_python.py\n@@ -78,8 +78,17 @@ def test_python_keyword_function_name_escaping():\n     assert python(\n         5*Function(\"for\")(8)) == \"for_ = Function('for')\\ne = 5*for_(8)\"\n \n-\n-def test_python_relational():\n+from sympy import Symbol, Eq, Ne\n+\n+def test_respect_sympy_integers_setting():\n+    x = Symbol(\"x\")\n+    y = Symbol(\"y\")\n+    # Test case from the issue description to verify correct code generation\n+    assert python(Eq(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = Eq(x, y)\"\n+    assert python(Ne(x/(y + 1), y**2)) in [\n+        \"x = Symbol('x')\\ny = Symbol('y')\\ne = Ne(x/(1 + y), y**2)\",\n+        \"x = Symbol('x')\\ny = Symbol('y')\\ne = Ne(x/(y + 1), y**2)\"\n+    ]\n     assert python(Eq(x, y)) == \"e = Eq(x, y)\"\n     assert python(Ge(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x >= y\"\n     assert python(Le(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x <= y\"\n",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..6594db3 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -7,8 +7,33 @@ from sympy.utilities.pytest import raises\n Vector.simp = True\n A = ReferenceFrame('A')\n \n+from sympy.physics.vector import ReferenceFrame, Vector\n \n-def test_Vector():\n+def test_vector_addition_with_zero():\n+    N = ReferenceFrame('N')\n+\n+    # Verify that adding a zero vector does not change the vector\n+    assert N.x + 0 == N.x\n+    assert 0 + N.x == N.x\n+    assert N.x + N.y + 0 == N.x + N.y\n+\n+    # Verify that multiplying a vector by 0 and then adding results in the original vector\n+    assert N.x + (0 * N.x) == N.x\n+    assert (0 * N.x) + N.x == N.x\n+    assert N.x + N.y + (0 * N.x) == N.x + N.y\n+\n+    # Test with negative zero\n+    assert N.x + (-0) == N.x\n+\n+    # Test with explicit zero vector\n+    zero_vector = 0 * N.x\n+    assert N.x + zero_vector == N.x\n+\n+    # Test sum function with zero vectors included\n+    assert sum([N.x, (0 * N.x), N.y, 0]) == N.x + N.y\n+\n+    # Test sum function with only zero vector\n+    assert sum([0 * N.x, 0 * N.y, 0 * N.z]) == Vector.zero\n     assert A.x != A.y\n     assert A.y != A.z\n     assert A.z != A.x\n",
  "sympy__sympy-14976": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex fbe0d75..1fe9ae0 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import (absolute_import, division, print_function)\n \n@@ -40,6 +41,7 @@ def test_PythonCodePrinter():\n def test_MpmathPrinter():\n     p = MpmathPrinter()\n     assert p.doprint(sign(x)) == 'mpmath.sign(x)'\n+    assert p.doprint(Rational(1, 2)) == 'mpmath.mpf(1)/mpmath.mpf(2)'\n \n \n def test_NumPyPrinter():\n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..00b677c 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,7 +1,8 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n-from sympy import Symbol, Rational, SparseMatrix, Dict, diff, symbols, Indexed, IndexedBase\n+from sympy import Symbol, Rational, SparseMatrix, Dict, diff, symbols, Indexed, IndexedBase, Array\n from sympy.core.compatibility import long\n from sympy.matrices import Matrix\n from sympy.tensor.array.sparse_ndim_array import ImmutableSparseNDimArray\n@@ -73,7 +74,7 @@ def test_ndim_array_initiation():\n \n     from sympy.abc import x\n     rank_zero_array = ImmutableDenseNDimArray(x)\n-    assert len(rank_zero_array) == 0\n+    assert len(rank_zero_array) == 1  # Check if the fix is applied: length should be 1 for rank-0 arrays\n     assert rank_zero_array.shape == ()\n     assert rank_zero_array.rank() == 0\n     assert rank_zero_array[()] == x\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..7eaf694 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n",
  "sympy__sympy-15349": "diff --git a/sympy/algebras/tests/test_quaternion.py b/sympy/algebras/tests/test_quaternion.py\nindex c486cc1..d2c1a8e 100644\n--- a/sympy/algebras/tests/test_quaternion.py\n+++ b/sympy/algebras/tests/test_quaternion.py\n@@ -112,6 +112,36 @@ def test_quaternion_conversions():\n                                                [sin(theta),  cos(theta), 0],\n                                                [0,           0,          1]])\n \n+def test_quaternion_to_rotation_matrix():\n+    \"\"\"\n+    Test the Quaternion.to_rotation_matrix() function for correct sign in rotation matrix.\n+    \"\"\"\n+    from sympy import symbols, cos, sin, trigsimp\n+    from sympy.algebras.quaternion import Quaternion\n+\n+    x = symbols('x')\n+    \n+    # Test case for rotation around x-axis\n+    q_x = Quaternion(cos(x/2), sin(x/2), 0, 0)\n+    assert trigsimp(q_x.to_rotation_matrix()) == Matrix([\n+                [1,      0,      0],\n+                [0, cos(x), -sin(x)],\n+                [0, sin(x), cos(x)]])\n+    \n+    # Test case for rotation around y-axis\n+    q_y = Quaternion(cos(x/2), 0, sin(x/2), 0)\n+    assert trigsimp(q_y.to_rotation_matrix()) == Matrix([\n+                [cos(x), 0, sin(x)],\n+                [     0, 1,      0],\n+                [-sin(x), 0, cos(x)]])\n+    \n+    # Test case for rotation around z-axis\n+    q_z = Quaternion(cos(x/2), 0, 0, sin(x/2))\n+    assert trigsimp(q_z.to_rotation_matrix()) == Matrix([\n+                [cos(x), -sin(x), 0],\n+                [sin(x),  cos(x), 0],\n+                [     0,       0, 1]])\n+\n     assert q2.to_axis_angle() == ((0, 0, sin(theta/2)/Abs(sin(theta/2))),\n                                    2*acos(cos(theta/2)))\n \n@@ -119,4 +149,4 @@ def test_quaternion_conversions():\n                [cos(theta), -sin(theta), 0, sin(theta) - cos(theta) + 1],\n                [sin(theta),  cos(theta), 0, -sin(theta) - cos(theta) + 1],\n                [0,           0,          1,  0],\n-               [0,           0,          0,  1]])\n+               [0,           0,          0,  1]])\n",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..250cb6b 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1625,7 +1625,14 @@ def test_Mod():\n     assert (3*i*x) % (2*i*y) == i*Mod(3*x, 2*y)\n     assert Mod(4*i, 4) == 0\n \n-    # issue 8677\n+    # issue 15493\n+    i, j = symbols('i j', integer=True, positive=True)\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+    assert Mod(8*i/j, 4) == 4*Mod(2*i/j, 1)\n+    assert Mod(8*i, 4) == 0\n+    assert Mod(6*i, 2) == 0\n+    assert Mod(3*i + 2, 2) == Mod(i + 2/3, 2)\n+    assert Mod(6*i + 4*j, 2) == 2*Mod(3*i + 2*j, 1)\n     n = Symbol('n', integer=True, positive=True)\n     assert factorial(n) % n == 0\n     assert factorial(n + 2) % n == 0\n",
  "sympy__sympy-15809": "diff --git a/sympy/functions/elementary/tests/test_miscellaneous.py b/sympy/functions/elementary/tests/test_miscellaneous.py\nindex 821fd0c..621bf7b 100644\n--- a/sympy/functions/elementary/tests/test_miscellaneous.py\n+++ b/sympy/functions/elementary/tests/test_miscellaneous.py\n@@ -85,7 +85,9 @@ def test_Min():\n     assert Min(p, p_).func is Min\n \n     # lists\n-    raises(ValueError, lambda: Min())\n+    from sympy import S\n+    \n+    assert Min() == S.Infinity\n     assert Min(x, y) == Min(y, x)\n     assert Min(x, y, z) == Min(z, y, x)\n     assert Min(x, Min(y, z)) == Min(z, y, x)\n@@ -156,7 +158,9 @@ def test_Max():\n \n     # lists\n \n-    raises(ValueError, lambda: Max())\n+    from sympy import S\n+    \n+    assert Max() == S.NegativeInfinity\n     assert Max(x, y) == Max(y, x)\n     assert Max(x, y, z) == Max(z, y, x)\n     assert Max(x, Max(y, z)) == Max(z, y, x)\n",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..e9a75d4 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1987,10 +1987,35 @@ def test_Add_is_zero():\n     assert (x + y).is_zero\n \n \n-def test_issue_14392():\n+def test_issue_15873():\n+    from sympy import I, simplify\n+\n+    # Original test patch\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None\n+    assert simplify(e).is_zero is True\n+\n+    # Additional test cases\n+    e2 = 3 + 4*I - 3 - 4*I\n+    assert e2.is_zero is True\n+\n+    e3 = (1 + I) * (1 - I)\n+    assert e3.is_zero is False\n+\n+    e4 = (2 + 3*I) + (-2 - 3*I)\n+    assert e4.is_zero is True\n+\n+    e5 = (x + I*y) + (-x - I*y)\n+    assert e5.is_zero is True\n+\n+    e6 = I**2 + 1\n+    assert e6.is_zero is True\n+\n+    e7 = (x**2 - 1) - (x + 1)*(x - 1)\n+    assert e7.is_zero is True\n     assert (sin(zoo)**2).as_real_imag() == (nan, nan)\n \n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..62259f7 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -511,8 +511,17 @@ def test_posify():\n     assert str(Sum(posify(1/x**n)[0], (n,1,3)).expand()) == \\\n         'Sum(_x**(-n), (n, 1, 3))'\n \n-\n-def test_issue_4194():\n+def test_issue_16438():\n+    # issue 16438: verifying posify preserves finiteness and other assumptions\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0['finite'] == True\n+    assert eq.assumptions0['infinite'] == False\n+\n+    for assumption in ['integer', 'rational', 'prime', 'even', 'odd']:\n+        k = Symbol('k', **{assumption: True})\n+        eq, _ = posify(k)\n+        assert eq.assumptions0[assumption] == True\n     # simplify should call cancel\n     from sympy.abc import x, y\n     f = Function('f')\n",
  "sympy__sympy-16766": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 51a287f..629eeb2 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n \n@@ -12,6 +13,7 @@ from sympy.printing.pycode import (\n     MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter\n )\n from sympy.utilities.pytest import raises\n+from sympy.tensor import IndexedBase\n \n x, y, z = symbols('x y z')\n \n@@ -35,6 +37,12 @@ def test_PythonCodePrinter():\n                                                         ' (3) if (x > 0) else None)'\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n \n+    # Test for Indexed with PythonCodePrinter\n+    p = IndexedBase(\"p\")\n+    assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n+    assert prntr.doprint(p[x, y, z]) == 'p[x, y, z]'\n+    assert prntr.doprint(p[0]) == 'p[0]'\n+\n \n def test_MpmathPrinter():\n     p = MpmathPrinter()\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py\nindex 23fddca..139083e 100644\n--- a/sympy/utilities/tests/test_autowrap.py\n+++ b/sympy/utilities/tests/test_autowrap.py\n@@ -30,8 +30,16 @@ def get_string(dump_fn, routines, prefix=\"file\", **kwargs):\n     output.close()\n     return source\n \n+from sympy.utilities.autowrap import autowrap\n+from sympy import MatrixSymbol\n+import numpy as np\n \n-def test_cython_wrapper_scalar_function():\n+def test_autowrap_cython_with_unused_array_arg():\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0  # Expression does not use 'x'\n+    f = autowrap(expr, args=(x,), backend='cython')\n+    result = f(np.array([[1.0], [2.0]]))\n+    assert result == 1.0\n     x, y, z = symbols('x,y,z')\n     expr = (x + y)*z\n     routine = make_routine(\"test\", expr)\n",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..166fd55 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -248,8 +248,16 @@ def test_encode_morse():\n     assert encode_morse(' ', sep='``') == '````'\n     assert encode_morse('!@#$%^&*()_+') == '-.-.--|.--.-.|...-..-|-.--.|-.--.-|..--.-|.-.-.'\n \n+def test_encode_morse_numbers():\n+    assert encode_morse('12345') == '.----|..---|...--|....-|.....'\n+    assert encode_morse('67890') == '-....|--...|---..|----.|-----'\n \n def test_decode_morse():\n+    # Test decoding of Morse code for numbers to ensure correctness\n+    assert decode_morse('.----|..---|...--|....-|.....') == '12345'\n+    assert decode_morse('-....|--...|---..|----.|-----') == '67890'\n+    assert decode_morse('.----') == '1'\n+    assert decode_morse('----.') == '9'\n     assert decode_morse('-.-|.|-.--') == 'KEY'\n     assert decode_morse('.-.|..-|-.||') == 'RUN'\n     raises(KeyError, lambda: decode_morse('.....----'))\n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_fu.py b/sympy/simplify/tests/test_fu.py\nindex 135b4cd..857fa58 100644\n--- a/sympy/simplify/tests/test_fu.py\n+++ b/sympy/simplify/tests/test_fu.py\n@@ -68,6 +68,21 @@ def test_TR3():\n         assert verify_numerically(i, j) and i.func != j.func\n \n \n+from sympy import Symbol, cos, sin, I, simplify\n+\n+def test_issue_17137():\n+    # Original test cases\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+\n+    # Additional test cases\n+    assert simplify(sin(x)**I) == sin(x)**I\n+    assert simplify(sin(x)**(2*I + 1)) == sin(x)**(2*I + 1)\n+    assert simplify(cos(x)**(-I)) == cos(x)**(-I)\n+    assert simplify(cos(x)**(I + 2)) == cos(x)**(I + 2)\n+    assert simplify(sin(x)**(-I)) == sin(x)**(-I)\n+    assert simplify(sin(x)**(3 - I)) == sin(x)**(3 - I)\n+\n def test__TR56():\n     h = lambda x: 1 - x\n     assert T(sin(x)**3, sin, cos, h, 4, False) == sin(x)**3\n",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..0e07aee 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,4 +1,7 @@\n-from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n+\n+from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos, I\n+from sympy.simplify.sqrtdenest import _sqrt_match\n+from sympy.core.expr import unchanged\n from sympy.simplify.sqrtdenest import _subsets as subsets\n from sympy.utilities.pytest import slow\n \n@@ -176,7 +179,11 @@ def test_subsets():\n         [1, 1, 0, 1], [0, 0, 1, 1], [1, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]]\n \n \n-def test_issue_5653():\n+def test_issue_12420():\n+    e = (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2\n+    assert unchanged(sqrtdenest, e)\n+    e2 = 3 - sqrt(2)*sqrt(4 + I) + 3*I\n+    assert sqrtdenest(e2) == e2\n     assert sqrtdenest(\n         sqrt(2 + sqrt(2 + sqrt(2)))) == sqrt(2 + sqrt(2 + sqrt(2)))\n \n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..34bacad 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n@@ -93,6 +94,15 @@ def test_point():\n     assert p4 * 5 == Point(5, 5)\n     assert p4 / 5 == Point(0.2, 0.2)\n \n+    assert 5 * p4 == Point(5, 5)\n+    assert 5 * p4 == Point3D(5, 5, 5)\n+\n+    # Test scalar multiplication with Point\n+    assert Point(0, 0) + sympy.sympify(2.0) * p4 == Point(2, 2)\n+    assert Point(0, 0) + 2.0 * p4 == Point(2, 2)\n+    assert Point(0, 0) + 2 * p4 == Point(2, 2)\n+    assert Point(0, 0) + Rational(5, 2) * p4 == Point(Rational(5, 2), Rational(5, 2))\n+    \n     raises(ValueError, lambda: Point(0, 0) + 10)\n \n     # Point differences should be simplified\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..c2ffe08 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -553,6 +553,28 @@ def test_diophantine():\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n     assert diophantine((y**2-x), t) == set([(t**2, -t)])\n \n+def test_issue_18186():\n+    from sympy.solvers.diophantine import diophantine\n+    from sympy.abc import m, n\n+\n+    # Original test patch\n+    assert diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(m, n), permute=True) == \\\n+        {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n+    assert diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(n, m), permute=True) == \\\n+        {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n+\n+    # Additional test cases to ensure consistent results\n+    assert diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(m, n), permute=False) == \\\n+        {(2, 3)}\n+    assert diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(n, m), permute=False) == \\\n+        {(2, 3)}\n+\n+    # Test with different symbols\n+    from sympy.abc import x, y\n+    assert diophantine(x**4 + y**4 - 2**4 - 3**4, syms=(x, y), permute=True) == \\\n+        {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n+    assert diophantine(x**4 + y**4 - 2**4 - 3**4, syms=(y, x), permute=True) == \\\n+        {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n \n def test_general_pythagorean():\n     from sympy.abc import a, b, c, d, e\n",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..fb88fdc 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -677,6 +677,11 @@ def test_latex_subs():\n         x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n \n \n+def test_latex_subs():\n+    assert latex(Subs(x*y, (\n+        x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n+    assert latex(3*Subs(-x+y, (x,), (1,))) == r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+\n def test_latex_integrals():\n     assert latex(Integral(log(x), x)) == r\"\\int \\log{\\left(x \\right)}\\, dx\"\n     assert latex(Integral(x**2, (x, 0, 1))) == \\\n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "diff --git a/sympy/sets/tests/test_conditionset.py b/sympy/sets/tests/test_conditionset.py\nindex 68ee5d6..f313b88 100644\n--- a/sympy/sets/tests/test_conditionset.py\n+++ b/sympy/sets/tests/test_conditionset.py\n@@ -1,7 +1,8 @@\n+\n from sympy.sets import (ConditionSet, Intersection, FiniteSet,\n-    EmptySet, Union, Contains)\n+    EmptySet, Union, Contains, imageset)\n from sympy import (Symbol, Eq, S, Abs, sin, pi, Interval,\n-    And, Mod, oo, Function)\n+    And, Mod, oo, Function, Lambda)\n from sympy.testing.pytest import raises, XFAIL, warns_deprecated_sympy\n \n \n@@ -130,7 +131,18 @@ def test_subs_CondSet():\n         ).subs(f(x), y) == ConditionSet(y, y < 1, {w, z})\n \n \n-def test_subs_CondSet_tebr():\n+def test_issue_17341():\n+    k = Symbol('k')\n+    img1 = imageset(Lambda(k, 2*k*pi + asin(y)), S.Integers)\n+    img2 = imageset(Lambda(k, 2*k*pi + asin(S.One/3)), S.Integers)\n+    cond_set = ConditionSet(x, Contains(y, Interval(-1,1)), img1)\n+    \n+    # Test if substitution works correctly\n+    result = cond_set.subs(y, S.One/3)\n+    assert result.dummy_eq(img2)\n+\n+    # Additional checks\n+    assert cond_set.subs(y, z) == ConditionSet(x, Contains(z, Interval(-1, 1)), img1.subs(y, z))\n     with warns_deprecated_sympy():\n         assert ConditionSet((x, y), {x + 1, x + y}, S.Reals) == \\\n             ConditionSet((x, y), Eq(x + 1, 0) & Eq(x + y, 0), S.Reals)\n",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..1bef3d8 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -513,8 +513,43 @@ def test_kernS():\n     one = kernS('x - (x - 1)')\n     assert one != 1 and one.expand() == 1\n \n+from sympy import Symbol, Interval, Add, Mul, sin, cos, exp, x, y\n \n-def test_issue_6540_6552():\n+def test_kernS_issue():\n+    # Test the kernS function with a case that previously caused the error\n+    text = \"(2*x)/(x-1)\"\n+    expected_expr = 2*x/(x-1)\n+    assert kernS(text) == expected_expr\n+\n+    # Additional test cases\n+    assert kernS(\"x - (x - 1)\") == 1\n+    assert kernS(\"E**(-x)\") == exp(-x)\n+    assert kernS(\"2*(x + y)\") == 2*(x + y)\n+    assert kernS(\"-(x + 1)\") == -(x + 1)\n+\n+    # Test for Interval and complex expressions\n+    assert (kernS('Interval(-1,-2 - 4*(-3))')\n+        == Interval(-1, Add(-2, Mul(12, 1, evaluate=False), evaluate=False)))\n+\n+    # Check with a symbol that should not be changed\n+    symbol_name = '_kern'\n+    assert kernS(symbol_name) == Symbol(symbol_name)\n+\n+    # Ensure expressions with negative powers are handled correctly\n+    assert kernS('(1-2**-(4+1)*(1-y)*x)') == (1 - x*(1 - y)/32)\n+    assert kernS('(1-2**(4+1)*(1-y)*x)') == (1 - 32*x*(1 - y))\n+    assert kernS('(1-2.*(1-y)*x)') == 1 - 2.*x*(1 - y)\n+\n+    # Complex expression test\n+    s = '-1 - 2*(-(-x + 1/x)/(x*(x - 1/x)**2) - 1/(x*(x - 1/x)))'\n+    assert kernS(s).simplify() == -1\n+\n+    # Check lists and tuples handling\n+    e = 2*(x + y)*y\n+    assert kernS(['2*(x + y)*y', ('2*(x + y)*y',)]) == [e, (e,)]\n+\n+    # Regression test for a specific issue with replaced symbols\n+    assert kernS('(1 - x)/(1 - x*(1-y))') == kernS('(1-x)/(1-(1-y)*x)')\n     assert S('[[1/3,2], (2/5,)]') == [[Rational(1, 3), 2], (Rational(2, 5),)]\n     assert S('[[2/6,2], (2/4,)]') == [[Rational(1, 3), 2], (S.Half,)]\n     assert S('[[[2*(1)]]]') == [[[2]]]\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_operator.py b/sympy/physics/quantum/tests/test_operator.py\nindex 799aaae..cd33706 100644\n--- a/sympy/physics/quantum/tests/test_operator.py\n+++ b/sympy/physics/quantum/tests/test_operator.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Derivative, diff, Function, Integer, Mul, pi, sin, Symbol,\n                    symbols)\n from sympy.physics.quantum.qexpr import QExpr\n@@ -13,6 +14,7 @@ from sympy.physics.quantum.represent import represent\n from sympy.core.trace import Tr\n from sympy.physics.quantum.spin import JzKet, JzBra\n from sympy.matrices import eye\n+from sympy.physics.quantum import IdentityOperator\n \n \n class CustomKet(Ket):\n@@ -106,6 +108,23 @@ def test_identity():\n         assert represent(IdentityOperator(n)) == eye(n)\n \n \n+def test_dagger_identity_operator():\n+    O = Operator('O')\n+    I = IdentityOperator()\n+    D = Dagger(O)\n+\n+    # Verify that O * I simplifies to O\n+    assert O * I == O\n+\n+    # Verify that I * O simplifies to O\n+    assert I * O == O\n+\n+    # Verify that Dagger(O) * IdentityOperator() simplifies to Dagger(O)\n+    assert D * I == D\n+\n+    # Verify that IdentityOperator() * Dagger(O) simplifies to Dagger(O)\n+    assert I * D == D\n+\n def test_outer_product():\n     k = Ket('k')\n     b = Bra('b')\n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..ebc049e 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -877,7 +877,31 @@ def test_sylow_subgroup():\n     S = P.sylow_subgroup(5)\n     assert S.order() == 25\n \n-    # the length of the lower central series\n+    # Original test cases to verify specific sylow_subgroup behavior\n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(2)\n+    assert S.order() == 4\n+\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(2)\n+    assert S.order() == 4\n+\n+    # Additional test cases for further verification\n+    G = DihedralGroup(30)\n+    S = G.sylow_subgroup(3)\n+    assert S.order() == 3\n+\n+    G = DihedralGroup(30)\n+    S = G.sylow_subgroup(5)\n+    assert S.order() == 5\n+\n+    G = DihedralGroup(100)\n+    S = G.sylow_subgroup(2)\n+    assert S.order() == 4\n+\n+    G = DihedralGroup(8)\n+    S = G.sylow_subgroup(2)\n+    assert S.order() == 8\n     # of a p-Sylow subgroup of Sym(n) grows with\n     # the highest exponent exp of p such\n     # that n >= p**exp\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..c53702c 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -513,8 +513,22 @@ def test_partitions():\n             i += 1\n         assert i == RGS_enum(n)\n \n-\n-def test_binary_partitions():\n+def test_partitions_reuse():\n+    # Ensure that partitions are not reused between iterations\n+    # Convert to list to trigger all yields and collect partitions\n+    partitions_list = list(partitions(6, k=2))\n+    # Modify the first dictionary\n+    partitions_list[0][2] += 1\n+    # Fetch partitions again\n+    partitions_list_again = list(partitions(6, k=2))\n+    # Check if the modification affected the new list (it should not)\n+    assert partitions_list_again[0][2] == 3  # original value should be unaffected\n+\n+    # Another check for a different partition\n+    partitions_list_2 = list(partitions(4))\n+    partitions_list_2[0][4] = 2  # modify the first partition\n+    partitions_list_again_2 = list(partitions(4))\n+    assert partitions_list_again_2[0][4] == 1  # original value should be unaffected\n     assert [i[:] for i in binary_partitions(10)] == [[8, 2], [8, 1, 1],\n         [4, 4, 2], [4, 4, 1, 1], [4, 2, 2, 2], [4, 2, 2, 1, 1],\n         [4, 2, 1, 1, 1, 1], [4, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2],\n",
  "sympy__sympy-20801": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e1c7e2..69af9a3 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -583,8 +583,12 @@ def test_Float():\n         assert Float(i) is a\n \n \n-\n-@conserve_mpmath_dps\n+def test_zero_not_false():\n+    # https://github.com/sympy/sympy/issues/20796\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n def test_float_mpf():\n     import mpmath\n     mpmath.mp.dps = 100\n",
  "sympy__sympy-21379": "",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..970225f 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -14,6 +14,8 @@ from sympy.polys.polyerrors import ExactQuotientFailed\n from sympy.abc import a, b, c, x, y, z\n from sympy.core import S, symbols\n from sympy.testing.pytest import raises\n+from sympy.polys.monomials import itermonomials\n+from sympy.polys.orderings import monomial_key\n \n \n def test_monomials():\n@@ -161,8 +163,25 @@ def test_monomials():\n                     j**2*k**2, x*j, x**2*k, x**2*j**2*k, j, x**2*j*k,\n                     x*j**2, x*k**2, x*j*k, x**2*j**2*k**2, x*j*k**2, x**2, x**2*j*k**2\n             }\n-\n-def test_monomial_count():\n+def test_itermonomials_min_degrees_issue():\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    # Test case for the issue where min_degrees is used\n+    expected_monomials_3_3 = {x1**3, x2**3, x3**3, x1*x2**2, x1*x3**2, x2*x1**2, x2*x3**2, x3*x1**2, x3*x2**2, x1*x2*x3}\n+    computed_monomials_3_3 = set(itermonomials([x1, x2, x3], 3, 3))\n+    assert computed_monomials_3_3 == expected_monomials_3_3\n+\n+    # Ensure behavior is consistent when max_degrees is increased\n+    computed_monomials_4_3 = set(itermonomials([x1, x2, x3], 4, 3))\n+    assert expected_monomials_3_3.issubset(computed_monomials_4_3)\n+\n+    # Testing with two variables\n+    x, y = symbols('x y')\n+    expected_monomials_3_2 = {x**2*y, x*y**2, x**2, y**2, x*y}\n+    assert set(itermonomials([x, y], 3, 2)) == expected_monomials_3_2\n+\n+    # Testing with different min and max degrees\n+    expected_monomials_2_1 = {x, y, x*y}\n+    assert set(itermonomials([x, y], 2, 1)) == expected_monomials_2_1\n     assert monomial_count(2, 2) == 6\n     assert monomial_count(2, 3) == 10\n \n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..8bf2946 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -267,6 +267,8 @@ def test_String():\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n+    # New test case to verify argument invariance for String\n+    assert st.func(*st.args) == st\n \n \n     class Signifier(String):\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..7057531 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -9,6 +10,7 @@ from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n+from sympy.core.parameters import evaluate\n from sympy.testing.pytest import raises, warns\n \n \n",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..26807e1 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n@@ -56,6 +57,16 @@ def test_PythonCodePrinter():\n     assert prntr.doprint(KroneckerDelta(x,y)) == '(1 if x == y else 0)'\n \n     assert prntr.doprint((2,3)) == \"(2, 3)\"\n+    \n+    # Test cases for Min and Max functions\n+    assert prntr.doprint(Min(x, y)) == \"min(x, y)\"\n+    assert prntr.doprint(Max(x, y)) == \"max(x, y)\"\n+    assert prntr.doprint(Min(x, Min(y, z))) == \"min(x, min(y, z))\"\n+    assert prntr.doprint(Max(x, Max(y, z))) == \"max(x, max(y, z))\"\n+    assert prntr.doprint(Min(3, 5)) == \"min(3, 5)\"\n+    assert prntr.doprint(Max(3, 5)) == \"max(3, 5)\"\n+    assert prntr.doprint(Min(x, y, z)) == \"min(x, y, z)\"\n+    assert prntr.doprint(Max(x, y, z)) == \"max(x, y, z)\"\n     assert prntr.doprint([2,3]) == \"[2, 3]\"\n \n \n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..a6bc112 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,9 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+from sympy import lambdify\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n@@ -1193,7 +1196,11 @@ def test_issue_14941():\n     f2 = lambdify([x, y], (y, x), 'sympy')\n     assert f2(2, 3) == (3, 2)\n \n-    # test list\n+    # Test for the issue with a tuple containing a single element\n+    f_single_tuple = lambdify([], (1,))\n+    source_code = inspect.getsource(f_single_tuple)\n+    assert 'return (1,)' in source_code\n+    assert f_single_tuple() == (1,)\n     f3 = lambdify([x, y], [y, x], 'sympy')\n     assert f3(2, 3) == [3, 2]\n \n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..770784a 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,6 +1,13 @@\n+\n+def test_symbols_with_parentheses_and_function_cls():\n+    q, u = symbols(('q:2', 'u:2'), cls=Function)\n+    assert isinstance(q[0], UndefinedFunction), \"Expected q[0] to be an instance of UndefinedFunction\"\n+    assert isinstance(u[1], UndefinedFunction), \"Expected u[1] to be an instance of UndefinedFunction\"\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n+from sympy.core.function import Function, UndefinedFunction\n from sympy.core.sympify import sympify  # can't import as S yet\n from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n \n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..37c9626 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -262,7 +262,16 @@ def test_kahane_simplify1():\n     assert r.equals(-2*G(sigma)*G(rho)*G(nu))\n \n \n-def test_gamma_matrix_class():\n+def test_kahane_leading_gamma_matrix_bug():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n+    \n+    t = G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma)), f\"Expected 4*G(rho)*G(sigma), got {r}\"\n+    \n+    t = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma)), f\"Expected 4*G(rho)*G(sigma), got {r}\"\n     i, j, k = tensor_indices('i,j,k', LorentzIndex)\n \n     # define another type of TensorHead to see if exprs are correctly handled:\n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..41d2201 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -46,6 +46,17 @@ def test_as_set():\n     raises(NotImplementedError, lambda:\n            Contains(x, FiniteSet(y)).as_set())\n \n-def test_type_error():\n+def test_as_set_fixed():\n+    from sympy import S, Reals, Integers, FiniteSet\n+    x = Symbol('x')\n+    y = Symbol('y')\n+\n+    # Test cases to check if as_set returns the correct set\n+    assert Contains(x, FiniteSet(y)).as_set() == FiniteSet(y)\n+    assert Contains(x, S.Integers).as_set() == S.Integers\n+    assert Contains(x, S.Reals).as_set() == S.Reals\n+\n+    # Additional test to verify behavior with Piecewise\n+    assert Piecewise((6, Contains(x, Reals).as_set()), (7, True)) == Piecewise((6, Reals), (7, True))\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..9b09b2a 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,6 +528,31 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n+from sympy import exp\n+from sympy.physics.units import Quantity, impedance, capacitance, time, ohm, farad, second\n+from sympy.physics.units.systems.si import SI\n+from sympy.physics.units.dimensions import Dimension\n+\n def test_issue_20288():\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..972f9c6 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -562,6 +562,59 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n+from sympy.physics.units import Quantity, velocity, acceleration, time, meter, second\n+\n+def test_issue_24211_original_case():\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1 * T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+def test_issue_24211_negative_acceleration():\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 2 * meter / second)\n+\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, -9.8 * meter / second**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 5 * second)\n+\n+    expr = A1 * T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+def test_issue_24211_zero_velocity():\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 0 * meter / second)\n+\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 9.8 * meter / second**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 5 * second)\n+\n+    expr = A1 * T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..6aaa948 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,3 +1,4 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n@@ -106,4 +107,18 @@ def test_check_homomorphism():\n     a = Permutation(1,2,3,4)\n     b = Permutation(1,3)\n     G = PermutationGroup([a, b])\n-    raises(ValueError, lambda: homomorphism(G, G, [a], [a]))\n+    raises(ValueError, lambda: homomorphism(G, G, [a], [a]))\n+\n+    # Additional test case for issue with _check_homomorphism in PermutationGroups\n+    D3 = DihedralGroup(3)\n+    # Verify that a homomorphism can be defined with the same generators\n+    T_same_gens = homomorphism(D3, D3, D3.generators, D3.generators)\n+    assert T_same_gens.is_isomorphism()\n+\n+    # Test with inverted generators\n+    inverses = [gen**-1 for gen in D3.generators]\n+    T_inverted = homomorphism(D3, D3, D3.generators, inverses)\n+    assert not T_inverted.is_isomorphism()\n+    assert T_inverted(D3.identity) == D3.identity\n+    for gen in D3.generators:\n+        assert T_inverted(gen**2) == D3.identity\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..bcd6e67 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -265,6 +265,25 @@ def test_PolyElement_as_expr():\n     assert f != g\n     assert f.as_expr(X, Y, Z) == g\n \n+    # Original test patch for the fix\n+    U, V, W = symbols(\"u,v,w\")\n+    g_new = 3*U**2*V - U*V*W + 7*W**3 + 1\n+    assert f.as_expr(U, V, W) == g_new\n+\n+    # Additional test cases\n+    # Test with a different set of symbols and verify the behavior\n+    A, B, C = symbols(\"a,b,c\")\n+    g_another = 3*A**2*B - A*B*C + 7*C**3 + 1\n+    assert f.as_expr(A, B, C) == g_another\n+\n+    # Test with more symbols than required (should raise an error)\n+    P, Q, R, S = symbols(\"p,q,r,s\")\n+    raises(ValueError, lambda: f.as_expr(P, Q, R, S))\n+\n+    # Test with fewer symbols than required (should raise an error)\n+    M, N = symbols(\"m,n\")\n+    raises(ValueError, lambda: f.as_expr(M, N))\n+\n     raises(ValueError, lambda: f.as_expr(X))\n \n     R, = ring(\"\", ZZ)\n",
  "sympy__sympy-24661": "diff --git a/sympy/parsing/tests/test_sympy_parser.py b/sympy/parsing/tests/test_sympy_parser.py\nindex 3723931..3794425 100644\n--- a/sympy/parsing/tests/test_sympy_parser.py\n+++ b/sympy/parsing/tests/test_sympy_parser.py\n@@ -273,6 +273,20 @@ def test_convert_equals_signs():\n     assert parse_expr(\"(2*y = x) = False\",\n         transformations=transformations) == Eq(Eq(2*y, x), False)\n \n+def test_issue_24288():\n+    inputs = {\n+        \"1 < 2\": Lt(1, 2, evaluate=False),\n+        \"1 <= 2\": Le(1, 2, evaluate=False),\n+        \"1 > 2\": Gt(1, 2, evaluate=False),\n+        \"1 >= 2\": Ge(1, 2, evaluate=False),\n+        \"1 != 2\": Ne(1, 2, evaluate=False),\n+        \"1 == 2\": Eq(1, 2, evaluate=False),\n+    }\n+    for text, result in inputs.items():\n+        assert parse_expr(text, evaluate=False) == result\n+\n+from sympy.core import Eq, Lt, Le, Gt, Ge, Ne\n+from sympy.parsing.sympy_parser import parse_expr\n \n def test_parse_function_issue_3539():\n     x = Symbol('x')\n",
  "astropy__astropy-14369": "diff --git a/astropy/units/tests/test_format.py b/astropy/units/tests/test_format.py\nindex 062b5f4..3680a8c 100644\n--- a/astropy/units/tests/test_format.py\n+++ b/astropy/units/tests/test_format.py\n@@ -31,6 +31,8 @@ from astropy.units.utils import is_effectively_unity\n         # unity grammar ([\"3.45 10**(-4)Jy\"], 3.45 * 1e-4 * u.Jy)\n         ([\"sqrt(m)\"], u.m**0.5),\n         ([\"dB(mW)\", \"dB (mW)\"], u.DecibelUnit(u.mW)),\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.W / (u.m * u.kpc**2))),\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.J / (u.s * u.kpc**2))),\n         ([\"mag\"], u.mag),\n         ([\"mag(ct/s)\"], u.MagUnit(u.ct / u.s)),\n         ([\"dex\"], u.dex),\n",
  "astropy__astropy-14598": "",
  "django__django-11299": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex b3dc643..bbafbed 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1898,6 +1898,33 @@ class OperationTests(OperationTestBase):\n         author = Author.objects.create(name='Albert', rebate='10%')\n         self.assertEqual(Author.objects.get(), author)\n \n+    @skipUnlessDBFeature('supports_table_check_constraints')\n+    def test_or_and_combined_constraint(self):\n+        \"\"\"\n+        Test for the CheckConstraint using a combination of OR and AND\n+        operators to ensure it generates correct SQL on SQLite and Oracle.\n+        \"\"\"\n+        app_label = 'test_combined_constraint'\n+        constraint_name = 'combined_constraint_or_and'\n+        from_state = self.set_up_test_model(app_label)\n+        check = models.Q(pink__gt=2, weight__isnull=False) | models.Q(pink__lt=0)\n+        constraint = models.CheckConstraint(check=check, name=constraint_name)\n+        operation = migrations.AddConstraint('Pony', constraint)\n+        to_state = from_state.clone()\n+        operation.state_forwards(app_label, to_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, from_state, to_state)\n+        Pony = to_state.apps.get_model(app_label, 'Pony')\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            Pony.objects.create(pink=2, weight=None)\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            Pony.objects.create(pink=1, weight=None)\n+        Pony.objects.bulk_create([\n+            Pony(pink=3, weight=10.0),\n+            Pony(pink=1, weight=5.0),\n+            Pony(pink=3, weight=-5.0),\n+        ])\n+\n     @skipUnlessDBFeature('supports_table_check_constraints')\n     def test_remove_constraint(self):\n         project_state = self.set_up_test_model(\"test_removeconstraint\", constraints=[\n",
  "django__django-11477": "diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex e4898b6..edac27b 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -158,12 +158,21 @@ class URLTranslationTests(URLTestCaseBase):\n             # path() URL pattern\n             self.assertEqual(translate_url('/en/account/register-as-path/', 'nl'), '/nl/profiel/registreren-als-pad/')\n             self.assertEqual(translation.get_language(), 'en')\n-\n         with translation.override('nl'):\n+            # URL with optional parameters\n+            self.assertEqual(translate_url('/nl/with-arguments/regular-argument/', 'en'), '/en/with-arguments/regular-argument/')\n+            self.assertEqual(translate_url('/nl/with-arguments/regular-argument/optional.html', 'en'), '/en/with-arguments/regular-argument/optional.html')\n+            self.assertEqual(translate_url('/nl/regex_optional/1/2/', 'en'), '/en/regex_optional/1/2/')\n+            self.assertEqual(translate_url('/nl/regex_optional/1/', 'en'), '/en/regex_optional/1/')\n             self.assertEqual(translate_url('/nl/gebruikers/', 'en'), '/en/users/')\n             self.assertEqual(translation.get_language(), 'nl')\n \n \n+from django.urls import reverse, resolve\n+from django.utils import translation\n+from django.test import TestCase\n+from .views import translate_url\n+\n class URLNamespaceTests(URLTestCaseBase):\n     \"\"\"\n     Tests if the translations are still working within namespaces.\n",
  "django__django-12273": "diff --git a/tests/model_inheritance_regress/tests.py b/tests/model_inheritance_regress/tests.py\nindex d79faca..1c9032f 100644\n--- a/tests/model_inheritance_regress/tests.py\n+++ b/tests/model_inheritance_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Regression tests for Model inheritance behavior.\n \"\"\"\n@@ -7,6 +8,7 @@ from unittest import expectedFailure\n \n from django import forms\n from django.test import TestCase\n+from .models import Item, Derived\n \n from .models import (\n     ArticleWithAuthor, BachelorParty, BirthdayParty, BusStation, Child,\n@@ -18,7 +20,36 @@ from .models import (\n \n \n class ModelInheritanceTest(TestCase):\n-    def test_model_inheritance(self):\n+    def test_create_new_instance_with_pk_none(self):\n+        derived_obj = Derived.objects.create(f=True)\n+        self.assertEqual(Derived.objects.count(), 1)\n+        \n+        # Reset the primary key\n+        derived_obj.reset()\n+        derived_obj.save()\n+        \n+        # A new object should be created\n+        self.assertEqual(Derived.objects.count(), 2)\n+        \n+        # Verify the fields of the new object\n+        new_obj = Derived.objects.exclude(pk=derived_obj.pk).get()\n+        self.assertFalse(new_obj.f)\n+\n+    def test_reset_and_save_overwrites(self):\n+        # Create an initial Derived object\n+        derived_obj = Derived.objects.create(f=True)\n+        self.assertEqual(Derived.objects.count(), 1)\n+\n+        # Reset the primary key\n+        derived_obj.uid = None\n+        derived_obj.save()\n+        \n+        # Check if a new object is created\n+        self.assertEqual(Derived.objects.count(), 2)\n+\n+        # Assert the original object is still present\n+        original_obj = Derived.objects.get(f=True)\n+        self.assertEqual(original_obj.f, True)\n         # Regression for #7350, #7202\n         # When you create a Parent object with a specific reference to an\n         # existent child instance, saving the Parent doesn't duplicate the\n",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..d472168 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -603,6 +603,27 @@ class DeletionTests(TestCase):\n                 )\n                 signal.disconnect(receiver, sender=Referrer)\n \n+    def test_fast_delete_all(self):\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        # Ensure that no subquery is used when performing a full delete.\n+        self.assertNotIn('SELECT', sql)\n+\n+    def test_fast_delete_all_with_lock(self):\n+        # This test checks if the delete operation can be performed without\n+        # any subquery that would interfere with table locks.\n+        with self.assertNumQueries(1) as ctx:\n+            with connection.cursor() as cursor:\n+                cursor.execute('LOCK TABLES %s WRITE' % connection.ops.quote_name(User._meta.db_table))\n+                try:\n+                    User.objects.all().delete()\n+                finally:\n+                    cursor.execute('UNLOCK TABLES')\n+        sql = ctx.captured_queries[0]['sql']\n+        # Ensure that no subquery is used when performing a full delete.\n+        self.assertNotIn('SELECT', sql)\n+\n \n class FastDeleteTests(TestCase):\n \n@@ -702,4 +723,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..555edf6 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from decimal import Decimal\n \n@@ -25,7 +26,16 @@ class DecimalFieldTests(TestCase):\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n \n-    def test_default(self):\n+    def test_invalid_value(self):\n+        field = models.DecimalField(max_digits=4, decimal_places=2)\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        tests = [\n+            {},\n+        ]\n+        for value in tests:\n+            with self.subTest(value=value):\n+                with self.assertRaisesMessage(ValidationError, msg % (value,)):\n+                    field.clean(value, None)\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n \n",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..d4fa1eb 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n \n@@ -5,7 +6,7 @@ import django\n from django.db import models\n from django.test import TestCase\n \n-from .models import Container, Event, Group, Happening, M2MModel, MyEvent\n+from .models import Container, Event, Group, Happening, M2MModel, MyEvent, Toy\n \n \n class PickleabilityTestCase(TestCase):\n@@ -35,7 +36,23 @@ class PickleabilityTestCase(TestCase):\n     def test_staticmethod_as_default(self):\n         self.assert_pickles(Happening.objects.filter(number2=1))\n \n-    def test_filter_reverse_fk(self):\n+    def test_pickle_queryset_with_values_annotate(self):\n+        # Setting up test data\n+        Toy.objects.create(name='foo', price=10, material='wood')\n+        Toy.objects.create(name='bar', price=20, material='plastic')\n+        Toy.objects.create(name='baz', price=100, material='wood')\n+        \n+        # Create the queryset with values and annotate\n+        prices = Toy.objects.values('material').annotate(total_price=models.Sum('price'))\n+        self.assertEqual(type(prices[0]), dict)\n+        \n+        # Pickle and unpickle the query\n+        prices2 = Toy.objects.all()\n+        prices2.query = pickle.loads(pickle.dumps(prices.query))\n+        \n+        # Verify that the unpickled queryset works correctly\n+        self.assertEqual(type(prices2[0]), dict)\n+        self.assertEqual(list(prices), list(prices2))\n         self.assert_pickles(Group.objects.filter(event=1))\n \n     def test_doesnotexist_exception(self):\n",
  "django__django-13449": "diff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\nindex 3f59cdf..ebe395f 100644\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -5,10 +5,13 @@ class Classification(models.Model):\n     code = models.CharField(max_length=10)\n \n \n+from decimal import Decimal\n+\n class Employee(models.Model):\n     name = models.CharField(max_length=40, blank=False, null=False)\n     salary = models.PositiveIntegerField()\n     department = models.CharField(max_length=40, blank=False, null=False)\n     hire_date = models.DateField(blank=False, null=False)\n     age = models.IntegerField(blank=False, null=False)\n-    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\n",
  "django__django-13512": "diff --git a/tests/forms_tests/field_tests/test_jsonfield.py b/tests/forms_tests/field_tests/test_jsonfield.py\nindex e31bff4..7994ca4 100644\n--- a/tests/forms_tests/field_tests/test_jsonfield.py\n+++ b/tests/forms_tests/field_tests/test_jsonfield.py\n@@ -24,7 +24,15 @@ class JSONFieldTest(SimpleTestCase):\n         with self.assertRaisesMessage(ValidationError, 'Enter a valid JSON.'):\n             field.clean('{some badly formed: json}')\n \n-    def test_prepare_value(self):\n+    def test_unicode_characters(self):\n+        field = JSONField()\n+        # Test with Chinese characters\n+        self.assertEqual(field.prepare_value({'a': '\u4f60\u597d \u4e16\u754c'}), '{\"a\": \"\u4f60\u597d \u4e16\u754c\"}')\n+        self.assertEqual(field.prepare_value('\u4f60\u597d\uff0c\u4e16\u754c'), '\"\u4f60\u597d\uff0c\u4e16\u754c\"')\n+        # Test with emojis\n+        self.assertEqual(field.prepare_value({'a': '\ud83d\ude00\ud83d\udc31'}), '{\"a\": \"\ud83d\ude00\ud83d\udc31\"}')\n+        # Test with mixed characters\n+        self.assertEqual(field.prepare_value([\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]), '[\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]')\n         field = JSONField()\n         self.assertEqual(field.prepare_value({'a': 'b'}), '{\"a\": \"b\"}')\n         self.assertEqual(field.prepare_value(None), 'null')\n",
  "django__django-14404": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 8fb91af..f975dcc 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -6629,7 +6629,30 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         self.assertEqual(response.status_code, 404)\n \n     @override_settings(APPEND_SLASH=True)\n-    def test_single_model_no_append_slash(self):\n+    def test_script_name_with_append_slash_false(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1], SCRIPT_NAME='/prefix/')\n+        self.assertEqual(response.status_code, 404)\n+\n+    @override_settings(APPEND_SLASH=False, FORCE_SCRIPT_NAME='/prefix/')\n+    def test_force_script_name_no_append_slash(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertEqual(response.status_code, 404)\n         superuser = User.objects.create_user(\n             username='staff',\n             password='secret',\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..bef72f6 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -691,6 +691,51 @@ class WriterTests(SimpleTestCase):\n         result = self.safe_exec(output)\n         self.assertIn(\"Migration\", result)\n \n+    def test_missing_import_in_migration(self):\n+        \"\"\"\n+        Test that a migration file correctly imports 'models' when using\n+        models in bases.\n+        \"\"\"\n+        from django.apps import apps\n+        from django.db import models\n+        from django.db.migrations.writer import MigrationWriter\n+        from django.db import migrations\n+\n+        class MyField(models.TextField):\n+            pass\n+\n+        class MyBaseModel(models.Model):\n+            class Meta:\n+                abstract = True\n+\n+        class MyMixin:\n+            pass\n+\n+        class MyModel(MyMixin, MyBaseModel):\n+            name = MyField(primary_key=True)\n+\n+        # Create a mock migration class\n+        migration = type(\"Migration\", (migrations.Migration,), {\n+            \"operations\": [\n+                migrations.CreateModel(\n+                    name=\"MyModel\",\n+                    fields=[(\"name\", models.TextField(primary_key=True))],\n+                    bases=(MyMixin, models.Model),\n+                ),\n+            ],\n+            \"dependencies\": [],\n+        })\n+\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+\n+        # Execute the output to ensure it's valid Python\n+        result = self.safe_exec(output)\n+\n+        # Verify that 'models' is imported\n+        self.assertIn('from django.db import models', output)\n+        self.assertIn(\"Migration\", result)\n+\n     def test_migration_path(self):\n         test_apps = [\n             'migrations.migrations_test_apps.normal',\n",
  "django__django-15375": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1d4ef56..ad65159 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1637,9 +1637,29 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertEqual(len(qs), 6)\n \n+    def test_aggregate_with_default_after_annotate(self):\n+        # Test to ensure aggregate() with default after annotate() does not crash\n+        result = Book.objects.annotate(idx=F(\"id\")).aggregate(Sum(\"id\", default=0))\n+        self.assertEqual(result['id__sum'], 4560)\n+\n+    def test_aggregate_with_coalesce_as_default(self):\n+        # Ensure that using Coalesce manually as a workaround gives the correct result\n+        result = Book.objects.annotate(idx=F(\"id\")).aggregate(x=Coalesce(Sum(\"id\"), 0))\n+        self.assertEqual(result['x'], 4560)\n+\n     def test_exists_extra_where_with_aggregate(self):\n         qs = Book.objects.all().annotate(\n             count=Count('id'),\n             exists=Exists(Author.objects.extra(where=['1=0'])),\n         )\n-        self.assertEqual(len(qs), 6)\n+        self.assertEqual(len(qs), 6)\n+\n+    def test_aggregate_with_default_after_annotate(self):\n+        # Test to ensure aggregate() with default after annotate() does not crash\n+        result = Book.objects.annotate(idx=F(\"id\")).aggregate(Sum(\"id\", default=0))\n+        self.assertEqual(result['id__sum'], 4560)\n+\n+    def test_aggregate_with_coalesce_as_default(self):\n+        # Ensure that using Coalesce manually as a workaround gives the correct result\n+        result = Book.objects.annotate(idx=F(\"id\")).aggregate(x=Coalesce(Sum(\"id\"), 0))\n+        self.assertEqual(result['x'], 4560)\n",
  "django__django-15695": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 99db46a..17aa745 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -2988,7 +2988,14 @@ class OperationTests(OperationTestBase):\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             operation.database_backwards(app_label, editor, new_state, project_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n-        # Deconstruction.\n+        # Test backward and forward renaming for unnamed index\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx_old\")\n+        # Re-apply renaming (should not crash)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n         definition = operation.deconstruct()\n         self.assertEqual(definition[0], \"RenameIndex\")\n         self.assertEqual(definition[1], [])\n",
  "django__django-15732": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 42e02c2..96e817f 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -595,6 +595,10 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n         )\n \n \n+from django.db import connection, migrations, models\n+from django.test import TestCase, skipUnlessDBFeature\n+from django.db.migrations.state import ProjectState\n+\n class AlterUniqueTogether(AlterTogetherOptionOperation):\n     \"\"\"\n     Change the value of unique_together to the target one.\n",
  "django__django-15916": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex cc5e08c..36309d2 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -3496,6 +3496,41 @@ class FormFieldCallbackTests(SimpleTestCase):\n                 type(NewForm.base_fields[name].widget),\n             )\n \n+    def test_formfield_callback_in_meta_is_respected(self):\n+        def custom_callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea, required=True)\n+\n+        class CustomModelForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = ['name']\n+                formfield_callback = custom_callback\n+\n+        CustomForm = modelform_factory(model=Person, form=CustomModelForm)\n+\n+        for field in CustomForm.base_fields.values():\n+            self.assertEqual(type(field.widget), forms.Textarea)\n+            self.assertTrue(field.required)\n+\n+    def test_inherited_formfield_callback(self):\n+        def specific_callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.PasswordInput, required=False)\n+\n+        class BaseFormWithCallback(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = ['name']\n+                formfield_callback = specific_callback\n+\n+        class InheritedFormFromBase(BaseFormWithCallback):\n+            pass\n+\n+        InheritedForm = modelform_factory(model=Person, form=InheritedFormFromBase)\n+\n+        for field in InheritedForm.base_fields.values():\n+            self.assertEqual(type(field.widget), forms.PasswordInput)\n+            self.assertFalse(field.required)\n+\n \n class LocalizedModelFormTest(TestCase):\n     def test_model_form_applies_localize_to_some_fields(self):\n",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..89ec717 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -9,7 +9,10 @@ from django.core.serializers.json import DjangoJSONEncoder\n from django.db import models\n from django.test import SimpleTestCase, TestCase, TransactionTestCase\n from django.test.utils import isolate_apps\n-from django.utils.translation import gettext_lazy, override\n+from django.contrib.contenttypes.models import ContentType\n+from django.core import serializers\n+from django.core.serializers.base import DeserializationError\n+from django.db import models\n \n from .models import Score\n from .tests import SerializersTestBase, SerializersTransactionTestBase\n@@ -258,7 +261,36 @@ class JsonSerializerTestCase(SerializersTestBase, TestCase):\n             for obj in serializers.deserialize(\"json\", test_string, ignore=False):\n                 obj.save()\n \n-    def test_helpful_error_message_for_many2many_not_iterable(self):\n+    def test_serialization_with_custom_manager_select_related(self):\n+        class TestTagManager(models.Manager):\n+            def get_queryset(self):\n+                return super().get_queryset().select_related(\"master\")\n+        \n+        class TestTagMaster(models.Model):\n+            name = models.CharField(max_length=120)\n+\n+        class TestTag(models.Model):\n+            objects = TestTagManager()\n+            name = models.CharField(max_length=120)\n+            master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)\n+\n+        class Test(models.Model):\n+            name = models.CharField(max_length=120)\n+            tags = models.ManyToManyField(TestTag, blank=True)\n+\n+        # Create related objects\n+        tag_master = TestTagMaster.objects.create(name=\"master\")\n+        tag = TestTag.objects.create(name=\"tag\", master=tag_master)\n+        test = Test.objects.create(name=\"test\")\n+        test.tags.add(tag)\n+        test.save()\n+\n+        # Serialize to JSON\n+        try:\n+            json_data = serializers.serialize(\"json\", [test])\n+            self.assertIsInstance(json_data, str)  # Ensure serialization is successful\n+        except FieldError as e:\n+            self.fail(f\"Serialization failed with FieldError: {str(e)}\")\n         \"\"\"\n         Not iterable many-to-many field value throws a helpful error message.\n         \"\"\"\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 53fdd55..754050d 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -207,7 +207,16 @@ def test_cmap(cmap):\n     pickle.dumps(cmap)\n \n \n-def test_unpickle_canvas():\n+def test_figure_dpi_after_unpickle():\n+    \"\"\"\n+    Test that the DPI of a figure remains consistent after unpickling.\n+    This specifically tests the fix for the DPI doubling issue on M1 Macs.\n+    \"\"\"\n+    fig = plt.figure(dpi=200)\n+    assert fig.dpi == 200  # Initial DPI\n+    for _ in range(5):  # Repeat to ensure DPI remains constant\n+        fig = pickle.loads(pickle.dumps(fig))\n+        assert fig.dpi == 200  # DPI should remain unchanged\n     fig = mfigure.Figure()\n     assert fig.canvas is not None\n     out = BytesIO()\n",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_units.py b/xarray/tests/test_units.py\nindex c680a89..cd94e81 100644\n--- a/xarray/tests/test_units.py\n+++ b/xarray/tests/test_units.py\n@@ -3681,7 +3681,7 @@ class TestDataArray:\n         (\n             method(\"diff\", dim=\"x\"),\n             method(\"differentiate\", coord=\"x\"),\n-            method(\"integrate\", dim=\"x\"),\n+            method(\"integrate\", coord=\"x\"),\n             method(\"quantile\", q=[0.25, 0.75]),\n             method(\"reduce\", func=np.sum, dim=\"x\"),\n             pytest.param(lambda x: x.dot(x), id=\"method_dot\"),\n",
  "pydata__xarray-4094": "",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..be96b08 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -130,6 +130,38 @@ def test_regex_error(capsys: CaptureFixture) -> None:\n     )\n     assert assertString in output.err\n \n+from typing import Any\n+import re\n+import pytest\n+from pylint.lint import Run\n+from typing import List\n+from pathlib import Path\n+\n+EMPTY_MODULE = Path(\"empty_module.py\")\n+\n+CSV_REGEX_COMMA_CASES = [\n+    (\"foo\", [\"foo\"]),\n+    (\"foo,bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar{1,3}\", [\"foo\", \"bar{1,3}\"]),\n+    (\"(foo{1,3})\", [\"(foo{1,3})\"]),\n+    (\"foo{1,3}, (bar{2,})\", [\"foo{1,3}\", \"(bar{2,})\"]),\n+]\n+\n+@pytest.mark.parametrize(\"in_string,expected\", CSV_REGEX_COMMA_CASES)\n+def test_csv_regex_comma_in_quantifier(in_string: str, expected: List[str]) -> None:\n+    \"\"\"Check that we correctly parse a comma-separated regex when there are one\n+    or more commas within quantifier expressions.\n+    \"\"\"\n+    def _template_run(in_string: str) -> List[re.Pattern[Any]]:\n+        r = Run(\n+            [str(EMPTY_MODULE), f\"--bad-names-rgxs={in_string}\"],\n+            exit=False,\n+        )\n+        bad_names_rgxs = r.linter.config.bad_names_rgxs\n+        return bad_names_rgxs\n+\n+    assert _template_run(in_string) == [re.compile(regex) for regex in expected]\n \n def test_csv_regex_error(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error when an option is passed and one\n",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..3bfd2d6 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1156,6 +1156,9 @@ def test_summary_list_after_errors(testdir):\n     )\n \n \n+import pytest\n+from _pytest.main import ExitCode\n+\n def test_importorskip():\n     with pytest.raises(\n         pytest.skip.Exception,\n@@ -1184,4 +1187,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "diff --git a/testing/test_mark_expression.py b/testing/test_mark_expression.py\nindex 10b71e9..d65876b 100644\n--- a/testing/test_mark_expression.py\n+++ b/testing/test_mark_expression.py\n@@ -139,6 +139,23 @@ def test_valid_idents(ident: str) -> None:\n     assert evaluate(ident, {ident: True}.__getitem__)\n \n \n+@pytest.mark.parametrize(\n+    \"expression\",\n+    (\n+        \"None\",\n+        \"True\",\n+        \"False\",\n+    ),\n+)\n+def test_compile_assertion_failure(expression: str) -> None:\n+    \"\"\"Test for assertion failure described in the issue when compiling certain expressions.\"\"\"\n+    try:\n+        Expression.compile(expression)\n+        assert False, \"Expected an assertion error but none occurred.\"\n+    except AssertionError:\n+        pass\n+\n+\n @pytest.mark.parametrize(\n     \"ident\",\n     (\n",
  "scikit-learn__scikit-learn-25747": "",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex f07be18..d62d76f 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -11,6 +11,9 @@\n import pytest\n \n from sphinx import addnodes\n+from sphinx.ext.autodoc.typehints import merge_typehints\n+from docutils import nodes\n+from unittest.mock import Mock\n \n \n @pytest.mark.sphinx('dummy', testroot='ext-autodoc')\n@@ -30,4 +33,4 @@ def test_autodoc(app, status, warning):\n my_name\n \n alias of bug2437.autodoc_dummy_foo.Foo\"\"\"\n-    assert warning.getvalue() == ''\n+    assert warning.getvalue() == ''\n",
  "sphinx-doc__sphinx-8056": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 1d6a8cf..8b03641 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1317,6 +1317,32 @@ class NumpyDocstringTest(BaseDocstringTest):\n             expected = dedent(expected)\n             self.assertEqual(expected, actual)\n \n+    def test_multiple_optional_parameters(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of `x1`, `x2`.\n+\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of `x1`, `x2`.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of `x1`, `x2`.\n+:type x2: :class:`array_like`, *optional*\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_parameters_with_class_reference(self):\n         docstring = \"\"\"\\\n Parameters\n@@ -1659,6 +1685,32 @@ Example Function\n             actual = str(NumpyDocstring(docstring, config, app, \"method\"))\n             self.assertEqual(expected, actual)\n \n+    def test_multiple_optional_parameters(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of `x1`, `x2`.\n+\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of `x1`, `x2`.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of `x1`, `x2`.\n+:type x2: :class:`array_like`, *optional*\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_xrefs_in_return_type(self):\n         docstring = \"\"\"\n Example Function\n@@ -1753,6 +1805,32 @@ body\n             actual = str(NumpyDocstring(docstring))\n             self.assertEqual(expected, actual)\n \n+    def test_multiple_optional_parameters(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of `x1`, `x2`.\n+\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of `x1`, `x2`.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of `x1`, `x2`.\n+:type x2: :class:`array_like`, *optional*\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_list_in_parameter_description(self):\n         docstring = \"\"\"One line summary.\n \n@@ -2044,6 +2122,32 @@ definition_after_normal_text : int\n             actual = _token_type(token)\n             self.assertEqual(expected, actual)\n \n+    def test_multiple_optional_parameters(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of `x1`, `x2`.\n+\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of `x1`, `x2`.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of `x1`, `x2`.\n+:type x2: :class:`array_like`, *optional*\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_tokenize_type_spec(self):\n         specs = (\n             \"str\",\n@@ -2081,6 +2185,32 @@ definition_after_normal_text : int\n             actual = _tokenize_type_spec(spec)\n             self.assertEqual(expected, actual)\n \n+    def test_multiple_optional_parameters(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of `x1`, `x2`.\n+\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of `x1`, `x2`.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of `x1`, `x2`.\n+:type x2: :class:`array_like`, *optional*\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_recombine_set_tokens(self):\n         tokens = (\n             [\"{\", \"1\", \", \", \"2\", \"}\"],\n@@ -2100,6 +2230,32 @@ definition_after_normal_text : int\n             actual = _recombine_set_tokens(tokens_)\n             self.assertEqual(expected, actual)\n \n+    def test_multiple_optional_parameters(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of `x1`, `x2`.\n+\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of `x1`, `x2`.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of `x1`, `x2`.\n+:type x2: :class:`array_like`, *optional*\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_recombine_set_tokens_invalid(self):\n         tokens = (\n             [\"{\", \"1\", \", \", \"2\"],\n@@ -2116,6 +2272,32 @@ definition_after_normal_text : int\n             actual = _recombine_set_tokens(tokens_)\n             self.assertEqual(expected, actual)\n \n+    def test_multiple_optional_parameters(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of `x1`, `x2`.\n+\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of `x1`, `x2`.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of `x1`, `x2`.\n+:type x2: :class:`array_like`, *optional*\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_convert_numpy_type_spec(self):\n         translations = {\n             \"DataFrame\": \"pandas.DataFrame\",\n@@ -2149,6 +2331,32 @@ definition_after_normal_text : int\n             actual = _convert_numpy_type_spec(spec, translations=translations)\n             self.assertEqual(expected, actual)\n \n+    def test_multiple_optional_parameters(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of `x1`, `x2`.\n+\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of `x1`, `x2`.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of `x1`, `x2`.\n+:type x2: :class:`array_like`, *optional*\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_parameter_types(self):\n         docstring = dedent(\"\"\"\\\n             Parameters\n",
  "sphinx-doc__sphinx-8551": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex fd4bdc4..934962b 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -775,6 +775,45 @@ def test_pydecoratormethod_signature(app):\n \n \n @pytest.mark.sphinx(freshenv=True)\n+def test_type_rtype_resolution(app):\n+    text = (\"\"\"\n+    .. py:module:: mod\n+    .. py:class:: A\n+\n+    .. py:module:: mod.submod\n+    .. py:class:: A\n+\n+    .. py:function:: f()\n+\n+        :param A a:\n+        :param mod.A b:\n+        :param mod.submod.A c:\n+        :rtype: A\n+        :rtype: mod.A\n+        :rtype: mod.submod.A\n+    \"\"\")\n+\n+    doctree = restructuredtext.parse(app, text, 'index')\n+    \n+    # Ensure no warnings are generated for ambiguous cross-references\n+    assert 'more than one target found for cross-reference' not in app._warning.getvalue()\n+\n+    # Check if the type and rtype fields resolve correctly\n+    assert_node(doctree[4][1][0][0][0][1][0][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"mod.submod.A\",\n+                **{\"py:module\": \"mod.submod\", \"py:class\": \"A\"})\n+    assert_node(doctree[4][1][0][0][1][0][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"mod.submod.A\",\n+                **{\"py:module\": \"mod.submod\", \"py:class\": \"A\"})\n+\n+    # Additional checks for mod.A and mod.submod.A\n+    assert_node(doctree[4][1][0][0][0][1][0][1][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"mod.A\",\n+                **{\"py:module\": \"mod\", \"py:class\": \"A\"})\n+    assert_node(doctree[4][1][0][0][0][1][0][2][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"mod.submod.A\",\n+                **{\"py:module\": \"mod.submod\", \"py:class\": \"A\"})\n+\n def test_module_index(app):\n     text = (\".. py:module:: docutils\\n\"\n             \".. py:module:: sphinx\\n\"\n",
  "sphinx-doc__sphinx-8593": "",
  "sphinx-doc__sphinx-9230": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex e86a758..4846a5f 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -983,8 +983,44 @@ def test_info_field_list(app):\n                 refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n+def test_dict_param_rendering(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:class:: Class\\n\"\n+            \"\\n\"\n+            \"   :param dict(str, str) opc_meta: (optional)\\n\")\n+    doctree = restructuredtext.parse(app, text)\n \n-def test_info_field_list_var(app):\n+    # Assert that the field list is constructed correctly\n+    assert_node(doctree, (nodes.target,\n+                          addnodes.index,\n+                          addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                                    [desc_addname, \"example.\"],\n+                                                    [desc_name, \"Class\"])],\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+\n+    # Check that the parameter is rendered correctly\n+    assert_node(doctree[3][1][0][0][1][0][0][0],\n+                ([addnodes.literal_strong, \"opc_meta\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"dict\"],\n+                 [addnodes.literal_emphasis, \"(\"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \", \"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \")\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"(optional)\"))\n+    assert_node(doctree[3][1][0][0][1][0][0][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"dict\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n             \"   :var int attr: blah blah\\n\")\n",
  "sphinx-doc__sphinx-9258": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a7d51b6..3ba5953 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -1007,9 +1007,49 @@ def test_info_field_list(app):\n     assert_node(doctree[3][1][0][0][1][0][3][0][6], pending_xref,\n                 refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+def test_info_field_list_piped_type_multiple(app):\n+    text = (\".. py:class:: MultiTypeClass\\n\"\n+            \"\\n\"\n+            \"   :param data: a parameter that can be multiple types\\n\"\n+            \"   :type data: int | str | float\\n\"\n+            \"   :param list_of_values: a parameter that's a list or dict\\n\"\n+            \"   :type list_of_values: List[int] | Dict[str, str]\\n\")\n+    doctree = restructuredtext.parse(app, text)\n \n-\n-def test_info_field_list_var(app):\n+    assert_node(doctree, (addnodes.index,\n+                          [desc, (desc_signature,\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    \n+    # Verify first parameter 'data' with multiple types\n+    assert_node(doctree[1][0][0][1][0][1], ([nodes.paragraph, ([addnodes.literal_strong, \"data\"],\n+                                                               \" (\", \n+                                                               [pending_xref, addnodes.literal_emphasis, \"int\"],\n+                                                               [addnodes.literal_emphasis, \" | \"],\n+                                                               [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                                                               [addnodes.literal_emphasis, \" | \"],\n+                                                               [pending_xref, addnodes.literal_emphasis, \"float\"],\n+                                                               \")\",\n+                                                               \" -- \",\n+                                                               \"a parameter that can be multiple types\")],))\n+\n+    # Verify pending xrefs for each type\n+    assert_node(doctree[1][0][0][1][0][1][0][2], pending_xref, refdomain=\"py\", reftype=\"class\", reftarget=\"int\")\n+    assert_node(doctree[1][0][0][1][0][1][0][4], pending_xref, refdomain=\"py\", reftype=\"class\", reftarget=\"str\")\n+    assert_node(doctree[1][0][0][1][0][1][0][6], pending_xref, refdomain=\"py\", reftype=\"class\", reftarget=\"float\")\n+\n+    # Verify second parameter 'list_of_values' with container types\n+    assert_node(doctree[1][0][0][1][1][1], ([nodes.paragraph, ([addnodes.literal_strong, \"list_of_values\"],\n+                                                               \" (\",\n+                                                               [pending_xref, addnodes.literal_emphasis, \"List[int]\"],\n+                                                               [addnodes.literal_emphasis, \" | \"],\n+                                                               [pending_xref, addnodes.literal_emphasis, \"Dict[str, str]\"],\n+                                                               \")\",\n+                                                               \" -- \",\n+                                                               \"a parameter that's a list or dict\")],))\n+\n+    # Verify pending xrefs for each container type\n+    assert_node(doctree[1][0][0][1][1][1][0][2], pending_xref, refdomain=\"py\", reftype=\"class\", reftarget=\"List\")\n+    assert_node(doctree[1][0][0][1][1][1][0][4], pending_xref, refdomain=\"py\", reftype=\"class\", reftarget=\"Dict\")\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n             \"   :var int attr: blah blah\\n\")\n",
  "sphinx-doc__sphinx-9673": "",
  "sympy__sympy-18211": "diff --git a/sympy/solvers/tests/test_solveset.py b/sympy/solvers/tests/test_solveset.py\nindex 7bd9e29..05638d7 100644\n--- a/sympy/solvers/tests/test_solveset.py\n+++ b/sympy/solvers/tests/test_solveset.py\n@@ -1048,6 +1048,18 @@ def test__solveset_multi():\n             ImageSet(Lambda(((theta,),), (0, theta)), ImageSet(Lambda(theta, (theta,)), Interval(0, pi))))\n \n \n+from sympy import Eq, cos, sin, solveset, S, ConditionSet, sqrt\n+\n+def test_issue_18188():\n+    x = symbols('x')\n+    # Test case from the issue description\n+    eq1 = Eq(x*cos(x) - 3*sin(x), 0)\n+    assert solveset(eq1, x, domain=S.Reals) == ConditionSet(x, eq1, S.Reals)\n+    \n+    # Additional case to verify related functionality\n+    eq2 = Eq(x**2 + sqrt(x*2) + sin(x), 0)\n+    assert solveset(eq2, x, domain=S.Reals) == ConditionSet(x, Eq(sqrt(2)*sqrt(x) + x**2 + sin(x), 0), S.Reals)\n+\n def test_conditionset():\n     assert solveset(Eq(sin(x)**2 + cos(x)**2, 1), x, domain=S.Reals) == \\\n         ConditionSet(x, True, S.Reals)\n",
  "sympy__sympy-18698": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 38de6f6..69705b0 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3330,6 +3330,29 @@ def test_issue_17988():\n     M = Matrix([[poly(x + 1), poly(x + 1)]])\n     assert p * M == M * p == Matrix([[poly(x**2 - 1), poly(x**2 - 1)]])\n \n-def test_issue_18205():\n+from sympy import symbols, sqf_list\n+\n+def test_issue_sqf_list_consistency():\n+    x, y = symbols('x y')\n+    \n+    # Test case provided in the issue\n+    p1 = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3\n+    expected1 = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\n+    assert sqf_list(p1) == expected1\n+\n+    # Additional test case: Simple polynomial with distinct roots\n+    p2 = (x - 1)**2 * (x - 2)**2\n+    expected2 = (1, [(x - 1, 2), (x - 2, 2)])\n+    assert sqf_list(p2) == expected2\n+\n+    # Additional test case: Polynomial with higher multiplicity\n+    p3 = (x - 1)**4 * (x + 1)**3\n+    expected3 = (1, [(x - 1, 4), (x + 1, 3)])\n+    assert sqf_list(p3) == expected3\n+\n+    # Additional test case: Polynomial with no repeated factors\n+    p4 = x * (x + 1) * (x - 1)\n+    expected4 = (1, [(x, 1), (x + 1, 1), (x - 1, 1)])\n+    assert sqf_list(p4) == expected4\n     assert cancel((2 + I)*(3 - I)) == 7 + I\n     assert cancel((2 + I)*(2 - I)) == 5\n",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..0681463 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3254,8 +3254,12 @@ def test_issue_5786():\n     assert expand(factor(expand(\n         (x - I*y)*(z - I*t)), extension=[I])) == -I*t*x - t*y + x*z - I*y*z\n \n+def test_issue_18895():\n+    from sympy import symbols, I, expand, factor\n \n-def test_noncommutative():\n+    x, y = symbols('x y')\n+    z = expand((x - 1) * (y - 1))\n+    assert factor(z, extension=[I]) == (x - 1)*(y - 1)\n     class foo(Expr):\n         is_commutative=False\n     e = x/(x + x*y)\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..158cd9c 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -1,3 +1,19 @@\n+\n+def test_symbol_dict_absence():\n+    s = Symbol('s')\n+    # In version 1.6.2 and earlier, Symbol instances should not have __dict__\n+    assert not hasattr(s, '__dict__')\n+    with raises(AttributeError):\n+        _ = s.__dict__\n+    \n+    # Checking __slots__ to ensure __dict__ should not be available\n+    assert hasattr(s, '__slots__')\n+    assert 'name' in s.__slots__\n+\n+    # Test immutability of Symbol by trying to set an attribute\n+    with raises(AttributeError):\n+        s.new_attr = 'value'\n+\n \"\"\"This tests sympy/core/basic.py with (ideally) no reference to subclasses\n of Basic or Atom.\"\"\"\n \n@@ -8,6 +24,8 @@ from sympy.core.basic import (Basic, Atom, preorder_traversal, as_Basic,\n from sympy.core.singleton import S\n from sympy.core.symbol import symbols, Symbol, Dummy\n from sympy.core.sympify import SympifyError\n+from sympy import Symbol\n+from sympy.testing.pytest import raises\n from sympy.core.function import Function, Lambda\n from sympy.core.compatibility import default_sort_key\n \n",
  "sympy__sympy-24562": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 13e3235..8155337 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -369,8 +369,27 @@ def test_Rational_new():\n     assert n.q == 4\n     assert n.p == -2\n \n-\n-def test_Number_new():\n+def test_issue_24543():\n+    from sympy import Rational\n+    # Original test cases\n+    for p in ('1.5', 1.5, 2):\n+        for q in ('1.5', 1.5, 2):\n+            assert Rational(p, q).as_numer_denom() == Rational('%s/%s'%(p,q)).as_numer_denom()\n+    \n+    assert Rational('0.5', '100') == Rational(1, 200)\n+\n+    # Additional test cases to ensure thorough verification\n+    assert Rational('0.25', '2') == Rational(1, 8)\n+    assert Rational('0.1', '10') == Rational(1, 100)\n+    assert Rational('1', '3') == Rational(1, 3)\n+    assert Rational('2', '0.5') == Rational(4, 1)\n+    assert Rational('0.75', '0.25') == Rational(3, 1)\n+\n+    # Edge case: large strings and mixed types\n+    assert Rational('1e-2', '2') == Rational(1, 200)\n+    assert Rational('5', 10) == Rational(1, 2)\n+    assert Rational(5, '10') == Rational(1, 2)\n+    assert Rational('1/4', '4/3') == Rational(3, 16)\n     \"\"\"\"\n     Test for Number constructor\n     \"\"\"\n",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..f878a2e 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3201,8 +3201,22 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         form = SomeForm()\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n+    def test_checkbox_select_multiple_id_for_label(self):\n+        \"\"\"\n+        Test that CheckboxSelectMultiple subwidgets use the id from attrs\n+        for the label, as expected.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple,\n+                widget_attrs={'id': 'custom_id_%s'}\n+            )\n \n-    def test_boundfield_widget_type(self):\n+        form = SomeForm(auto_id='auto_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_id_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_id_field_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "matplotlib__matplotlib-20676": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex b009975..bd7164f 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -301,8 +301,19 @@ def test_tool_line_handle():\n \n     assert tool_line_handle.positions == positions\n \n-\n-def check_lasso_selector(**kwargs):\n+def test_span_selector_no_change_in_limits():\n+    fig, ax = plt.subplots()\n+    ax.plot([10, 20], [10, 20])\n+    # Record initial limits\n+    initial_xlim = ax.get_xlim()\n+    initial_ylim = ax.get_ylim()\n+\n+    # Create the SpanSelector\n+    span_selector = widgets.SpanSelector(ax, print, \"horizontal\", interactive=True)\n+    \n+    # Assert that limits haven't changed\n+    assert ax.get_xlim() == initial_xlim, \"X limits changed unexpectedly\"\n+    assert ax.get_ylim() == initial_ylim, \"Y limits changed unexpectedly\"\n     ax = get_ax()\n \n     def onselect(verts):\n",
  "scikit-learn__scikit-learn-12682": "diff --git a/sklearn/decomposition/tests/test_dict_learning.py b/sklearn/decomposition/tests/test_dict_learning.py\nindex 35a43f8..a32d665 100644\n--- a/sklearn/decomposition/tests/test_dict_learning.py\n+++ b/sklearn/decomposition/tests/test_dict_learning.py\n@@ -51,6 +51,11 @@ def test_dict_learning_shapes():\n     assert_equal(dico.transform(X).shape, (X.shape[0], n_components))\n \n \n+import numpy as np\n+import pytest\n+from sklearn.decomposition import SparseCoder\n+from sklearn.exceptions import ConvergenceWarning\n+\n def test_dict_learning_overcomplete():\n     n_components = 12\n     dico = DictionaryLearning(n_components, random_state=0).fit(X)\n",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..5c69c34 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -147,8 +147,31 @@ def test_multi_target_sample_weights():\n     X_test = [[1.5, 2.5, 3.5], [3.5, 4.5, 5.5]]\n     assert_almost_equal(rgr.predict(X_test), rgr_w.predict(X_test))\n \n-\n-# Import the data\n+import numpy as np\n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+from sklearn.model_selection import cross_val_predict\n+import pytest\n+from numpy.testing import assert_array_equal\n+\n+def test_cross_val_predict_with_predict_proba_multioutput():\n+    # Generate multilabel classification data\n+    X, Y = make_multilabel_classification()\n+    \n+    # Initialize MultiOutputClassifier with LinearDiscriminantAnalysis\n+    mo_lda = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+    \n+    # Generate cross-validated predictions\n+    pred = cross_val_predict(mo_lda, X, Y, cv=5)  # Test predict method\n+    assert pred.shape == Y.shape\n+    \n+    # Generate cross-validated probabilities\n+    pred_proba = cross_val_predict(mo_lda, X, Y, cv=5, method='predict_proba')  # Test predict_proba method\n+    assert len(pred_proba) == Y.shape[1]  # Should have predictions for each output\n+    for i in range(Y.shape[1]):\n+        # Each prediction should be an array of probabilities summing to 1\n+        assert np.allclose(np.sum(pred_proba[i], axis=1), 1)\n iris = datasets.load_iris()\n # create a multiple targets by randomized shuffling and concatenating y.\n X = iris.data\n",
  "sphinx-doc__sphinx-9658": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 072cdc7..6cdf095 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -158,7 +158,25 @@ def test_restify_pep_585():\n                                                    \"[:py:class:`int`, ...]]\")\n \n \n-@pytest.mark.skipif(sys.version_info < (3, 10), reason='python 3.10+ is required.')\n+from sphinx.ext.autodoc import mock\n+\n+def test_restify_mock_inherited_class():\n+    \"\"\"Test if restify correctly documents inherited mocked classes.\"\"\"\n+    with mock(['torch.nn']):\n+        import torch.nn as nn\n+        class MockModule(nn.Module):\n+            pass\n+        \n+        assert restify(MockModule) == ':py:class:`torch.nn.Module`'\n+\n+def test_stringify_mock_inherited_class():\n+    \"\"\"Test if stringify correctly identifies inherited mocked class.\"\"\"\n+    with mock(['torch.nn']):\n+        import torch.nn as nn\n+        class MockModule(nn.Module):\n+            pass\n+        \n+        assert stringify(MockModule) == 'torch.nn.Module'\n def test_restify_type_union_operator():\n     assert restify(int | None) == \":py:class:`int` | :py:obj:`None`\"  # type: ignore\n     assert restify(int | str) == \":py:class:`int` | :py:class:`str`\"  # type: ignore\n",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..837c6be 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -348,6 +348,29 @@ def test_reverse_order():\n            Product(x*y, (x, b + 1, a - 1), (y, 6, 1))\n \n \n+def test_issue_13546():\n+    n = Symbol('n')\n+    k = Symbol('k')\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 2).doit() == S(15)/2\n+\n+def test_issue_13546_additional():\n+    n = Symbol('n')\n+    k = Symbol('k')\n+\n+    # Test for n=2\n+    p2 = Product(n + 1 / 2**k, (k, 0, n-1)).doit().subs(n, 2).doit()\n+    assert p2 == S(15)/2\n+\n+    # Test for n=3\n+    p3 = Product(n + 1 / 2**k, (k, 0, n-1)).doit().subs(n, 3).doit()\n+    assert p3 == S(175)/24\n+\n+    # Test for n=4\n+    p4 = Product(n + 1 / 2**k, (k, 0, n-1)).doit().subs(n, 4).doit()\n+    assert p4 == S(3675)/128\n+\n+\n def test_issue_9983():\n     n = Symbol('n', integer=True, positive=True)\n     p = Product(1 + 1/n**(S(2)/3), (n, 1, oo))\n@@ -357,4 +380,4 @@ def test_issue_9983():\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}