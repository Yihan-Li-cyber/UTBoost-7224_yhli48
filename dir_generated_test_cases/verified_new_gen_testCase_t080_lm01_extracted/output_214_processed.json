{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..aeb00f0 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -130,6 +130,37 @@ def test_arith_oper():\n \n \n @pytest.mark.parametrize(('compound_model', 'result'), compound_models.values())\n+def test_nested_compound_model_separable():\n+    # Test case for nested compound model (issue example)\n+    cm = m.Linear1D(10) & m.Linear1D(5)\n+    nested_cm = m.Pix2Sky_TAN() & cm\n+    expected_matrix = np.array([\n+        [True, True, False, False],\n+        [True, True, False, False],\n+        [False, False, True, True],\n+        [False, False, True, True]\n+    ])\n+    assert_allclose(separability_matrix(nested_cm), expected_matrix)\n+    \n+    # Additional nested compound model\n+    nested_cm2 = (m.Pix2Sky_TAN() & m.Identity(1)) & (m.Linear1D(3) & m.Linear1D(4))\n+    expected_matrix2 = np.array([\n+        [True, True, False, False],\n+        [True, True, False, False],\n+        [False, False, True, False],\n+        [False, False, False, True]\n+    ])\n+    assert_allclose(separability_matrix(nested_cm2), expected_matrix2)\n+    \n+    # Test with a more complex combination\n+    nested_cm3 = ((m.Shift(1) & m.Scale(2)) & cm) | m.Rotation2D(45)\n+    expected_matrix3 = np.array([\n+        [True, False, False, False],\n+        [False, True, False, False],\n+        [False, False, True, True],\n+        [False, False, True, True]\n+    ])\n+    assert_allclose(separability_matrix(nested_cm3), expected_matrix3)\n def test_separable(compound_model, result):\n     assert_allclose(is_separable(compound_model), result[0])\n     assert_allclose(separability_matrix(compound_model), result[1])\n",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "",
  "astropy__astropy-14508": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex 6bdf92c..658f5aa 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -137,7 +137,48 @@ class TestHeaderFunctions(FitsTestCase):\n         ):\n             assert str(c) == _pad(\"FLOATNUM= -4.6737463674763E+32\")\n \n-    def test_complex_value_card(self):\n+    def test_floating_point_string_representation_card(self):\n+        \"\"\"\n+        Ensures Card formats float values with the correct precision, avoiding\n+        comment truncation\n+\n+        Regression test for https://github.com/astropy/astropy/issues/14507\n+        \"\"\"\n+        k = \"HIERARCH ABC DEF GH IJKLMN\"\n+        com = \"[m] abcdef ghijklm nopqrstu vw xyzab\"\n+        c = fits.Card(k, 0.009125, com)\n+        expected_str = f\"{k} = 0.009125 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, 8.95, com)\n+        expected_str = f\"{k} = 8.95 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, -99.9, com)\n+        expected_str = f\"{k} = -99.9 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+    def test_floating_point_string_boundary_cases(self):\n+        \"\"\"\n+        Additional tests for edge cases in floating point string representation.\n+        \"\"\"\n+        k = \"HIERARCH XYZ ABC DEF GHIJKL\"\n+        com = \"comment with sufficient length to test\"\n+\n+        # Very small float value\n+        c = fits.Card(k, 1e-10, com)\n+        expected_str = f\"{k} = 1.0E-10 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Float value that rounds to a whole number\n+        c = fits.Card(k, 123456789.0, com)\n+        expected_str = f\"{k} = 123456789.0 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Maximum float value that can fit\n+        c = fits.Card(k, 9999999999.999999, com)\n+        expected_str = f\"{k} = 9999999999.999999 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n         \"\"\"Test Card constructor with complex value\"\"\"\n \n         c = fits.Card(\"abc\", (1.2345377437887837487e88 + 6324767364763746367e-33j))\n",
  "astropy__astropy-14539": "diff --git a/astropy/io/fits/tests/test_diff.py b/astropy/io/fits/tests/test_diff.py\nindex 9bf4897..da51816 100644\n--- a/astropy/io/fits/tests/test_diff.py\n+++ b/astropy/io/fits/tests/test_diff.py\n@@ -601,6 +601,28 @@ class TestDiff(FitsTestCase):\n         assert \"13 different table data element(s) found (65.00% different)\" in report\n         assert report.count(\"more indices\") == 1\n \n+    def test_vla_identical_file(self):\n+        \"\"\"\n+        Test that io.fits.FITSDiff correctly handles files with variable-length arrays.\n+        Comparing a file to itself should yield no differences.\n+        \"\"\"\n+\n+        from astropy.io import fits\n+        import numpy as np\n+\n+        # Create a FITS file with a variable-length array column\n+        col = fits.Column('a', format='QD', array=[[0], [0, 0]])\n+        hdu = fits.BinTableHDU.from_columns([col])\n+        hdu.writeto('diffbug.fits', overwrite=True)\n+\n+        # Use FITSDiff to compare the file to itself\n+        diff = fits.FITSDiff('diffbug.fits', 'diffbug.fits')\n+        assert diff.identical, \"FITSDiff should report identical for the same file\"\n+\n+        # Also check the report\n+        report = diff.report()\n+        assert \"0 different table data element(s) found\" in report\n+\n     def test_identical_files_basic(self):\n         \"\"\"Test identicality of two simple, extensionless files.\"\"\"\n \n",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..89d5852 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -74,6 +74,10 @@ def test_JsonCustomEncoder():\n     assert newd == tmpd\n \n \n+import pytest\n+import inspect\n+from astropy.utils import misc\n+\n def test_inherit_docstrings():\n     class Base(metaclass=misc.InheritDocstrings):\n         def __call__(self, *args):\n@@ -88,6 +92,20 @@ def test_inherit_docstrings():\n         # TODO: Maybe if __doc__ is None this test should be skipped instead?\n         assert Subclass.__call__.__doc__ == \"FOO\"\n \n+    class BaseWithProperty(metaclass=misc.InheritDocstrings):\n+        @property\n+        def bar(self):\n+            \"BAR\"\n+            return 1\n+\n+    class SubclassWithProperty(BaseWithProperty):\n+        @property\n+        def bar(self):\n+            return 2\n+\n+    if BaseWithProperty.bar.__doc__ is not None:\n+        assert SubclassWithProperty.bar.__doc__ == \"BAR\"\n+\n \n def test_set_locale():\n     # First, test if the required locales are available\n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..a335c5f 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -191,11 +191,22 @@ def test_unknown_unit3():\n     x = unit.to_string('latex')\n     y = unit2.to_string('cgs')\n \n-    with pytest.raises(ValueError):\n-        unit4 = u.Unit(\"BAR\", parse_strict='strict')\n+import astropy.units as u\n+import pytest\n+from warnings import catch_warnings\n+\n+...\n+\n+def test_unit_equality_with_none():\n+    unit = u.Unit('asdf', parse_strict='silent')\n+    assert unit != None  # noqa\n+    assert not (unit == None)  # noqa\n+    assert unit not in (None, u.m)\n \n-    with pytest.raises(TypeError):\n-        unit5 = u.Unit(None)\n+def test_unknown_unit3():\n+    unit = u.Unit(\"FOO\", parse_strict='silent')\n+    assert isinstance(unit, u.UnrecognizedUnit)\n+    assert unit.name == \"FOO\"\n \n \n @raises(TypeError)\n",
  "astropy__astropy-7671": "diff --git a/astropy/utils/tests/test_introspection.py b/astropy/utils/tests/test_introspection.py\nindex 852d721..9fb875a 100644\n--- a/astropy/utils/tests/test_introspection.py\n+++ b/astropy/utils/tests/test_introspection.py\n@@ -69,7 +69,18 @@ def test_minversion():\n     test_module.__version__ = '0.12.2'\n     good_versions = ['0.12', '0.12.1', '0.12.0.dev']\n     bad_versions = ['1', '1.2rc1']\n+    # Adding additional test cases for the minversion issue\n+    problematic_versions = ['1.14dev', '1.14.1.dev', '1.14.3']\n+    fixed_versions = ['1.14', '1.14.0', '1.14.1', '1.14.2']\n+\n+    # Test cases that should fail with the original issue\n+    for version in problematic_versions:\n+        assert not minversion(test_module, version), f\"Problematic version '{version}' unexpectedly passed\"\n+\n+    # Test cases that should pass\n+    for version in fixed_versions:\n+        assert minversion(test_module, version), f\"Fixed version '{version}' did not pass when expected\"\n     for version in good_versions:\n         assert minversion(test_module, version)\n     for version in bad_versions:\n-        assert not minversion(test_module, version)\n+        assert not minversion(test_module, version)\n",
  "astropy__astropy-8707": "",
  "astropy__astropy-8872": "",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..56ca9ca 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -218,6 +218,21 @@ TEST_DATA = [\n     (URLValidator(EXTENDED_SCHEMES), 'git+ssh://git@github.com/example/hg-git.git', None),\n \n     (URLValidator(EXTENDED_SCHEMES), 'git://-invalid.com', ValidationError),\n+    \n+    # Test cases for URLs with invalid characters in username and password\n+    (URLValidator(), 'http://foo@bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo/bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar@baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar/baz@example.com', ValidationError),\n+    (URLValidator(), 'http://invalid-.com/?m=foo@example.com', ValidationError),\n+    (URLValidator(), \"http://-.~_!$&'()*+,;=%40:80%2f@example.com\", ValidationError),\n+\n+    # Additional test cases for edge scenarios\n+    (URLValidator(), 'http://validuser:validpass@example.com', None),  # valid encoded characters\n+    (URLValidator(), 'http://%3A%40%2F%40example.com', None),  # encoded ':', '@', and '/'\n+    (URLValidator(), 'http://user:pass@localhost', None),  # valid localhost\n+    (URLValidator(), 'http://user:pass@127.0.0.1', None),  # valid IP address\n     # Trailing newlines not accepted\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..d06c075 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -9,6 +10,7 @@ from django.db.models import (\n     Max, Min, Sum, Value,\n )\n from django.test import TestCase\n+from django.db.models.expressions import Case, When\n from django.test.utils import Approximate, CaptureQueriesContext\n from django.utils import timezone\n \n@@ -389,6 +391,29 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n+    def test_count_distinct_case_expression(self):\n+        # Test Count with Case and distinct=True\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=300, then='rating')), distinct=True),\n+        )\n+        # Expect the number of distinct ratings for books with more than 300 pages\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n+\n+        # Test with a different threshold\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=200, then='rating')), distinct=True),\n+        )\n+        # Assume that this should return 5 distinct ratings\n+        self.assertEqual(aggs['distinct_ratings'], 5)\n+\n+        # Capture SQL and ensure it includes DISTINCT CASE\n+        with self.assertNumQueries(1) as ctx:\n+            Book.objects.aggregate(\n+                distinct_ratings=Count(Case(When(pages__gt=300, then='rating')), distinct=True),\n+            )\n+        sql = ctx.captured_queries[0]['sql']\n+        self.assertIn('COUNT(DISTINCT CASE WHEN', sql)\n+\n     def test_count_star(self):\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..b2abed2 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1100,6 +1100,8 @@ class OverrideSettingsTests(SimpleTestCase):\n         django.core.files.storage.default_storage.\n         \"\"\"\n         self.assertIsNone(default_storage.file_permissions_mode)\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=0o644):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n         with self.settings(FILE_UPLOAD_PERMISSIONS=0o777):\n             self.assertEqual(default_storage.file_permissions_mode, 0o777)\n \n",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..cda28c1 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,7 +1,9 @@\n+\n import os\n import signal\n from unittest import mock\n \n+import subprocess\n from django.db.backends.postgresql.client import DatabaseClient\n from django.test import SimpleTestCase\n \n@@ -29,7 +31,31 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             DatabaseClient.runshell_db(dbinfo)\n         return self.subprocess_args, self.pgpass\n \n-    def test_basic(self):\n+    def test_subprocess_run_with_pgpassword(self):\n+        \"\"\"\n+        Test that subprocess.run is called with PGPASSWORD set in the environment.\n+        \"\"\"\n+        def _mock_subprocess_run(*args, env=None, **kwargs):\n+            self.subprocess_args = list(*args)\n+            self.pgpassword = env.get('PGPASSWORD')\n+            return subprocess.CompletedProcess(args, returncode=0)\n+\n+        dbinfo = {\n+            'database': 'dbname',\n+            'user': 'someuser',\n+            'password': 'somepassword',\n+            'host': 'somehost',\n+            'port': '444',\n+        }\n+\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            DatabaseClient.runshell_db(dbinfo)\n+\n+        self.assertEqual(\n+            self.subprocess_args,\n+            ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname']\n+        )\n+        self.assertEqual(self.pgpassword, 'somepassword')\n         self.assertEqual(\n             self._run_it({\n                 'database': 'dbname',\n@@ -113,4 +139,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..0b112cc 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -2,7 +2,10 @@ from django.apps.registry import apps\n from django.conf import settings\n from django.contrib.contenttypes import management as contenttypes_management\n from django.contrib.contenttypes.models import ContentType\n+from django.apps import apps\n+from django.contrib.contenttypes.models import ContentType\n from django.core.management import call_command\n+from django.db import transaction, IntegrityError\n from django.db import migrations, models\n from django.test import TransactionTestCase, override_settings\n \n@@ -38,7 +41,25 @@ class ContentTypeOperationsTests(TransactionTestCase):\n                     self.assertEqual(next_operation.old_model, operation.old_name_lower)\n                     self.assertEqual(next_operation.new_model, operation.new_name_lower)\n \n-    def test_existing_content_type_rename(self):\n+    class TestRouter:\n+        def db_for_write(self, model, **hints):\n+            return 'default'\n+\n+    @override_settings(DATABASE_ROUTERS=[TestRouter()])\n+    def test_existing_content_type_rename_other_database(self):\n+        # Create a content type in the 'other' database\n+        ContentType.objects.using('other').create(app_label='contenttypes_tests', model='foo')\n+        other_content_types = ContentType.objects.using('other').filter(app_label='contenttypes_tests')\n+\n+        # Migrate and verify content type was renamed\n+        call_command('migrate', 'contenttypes_tests', database='other', interactive=False, verbosity=0)\n+        self.assertFalse(other_content_types.filter(model='foo').exists())\n+        self.assertTrue(other_content_types.filter(model='renamedfoo').exists())\n+\n+        # Rollback and verify content type reverts\n+        call_command('migrate', 'contenttypes_tests', 'zero', database='other', interactive=False, verbosity=0)\n+        self.assertTrue(other_content_types.filter(model='foo').exists())\n+        self.assertFalse(other_content_types.filter(model='renamedfoo').exists())\n         ContentType.objects.create(app_label='contenttypes_tests', model='foo')\n         call_command('migrate', 'contenttypes_tests', database='default', interactive=False, verbosity=0,)\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n@@ -63,4 +84,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "diff --git a/tests/generic_inline_admin/tests.py b/tests/generic_inline_admin/tests.py\nindex 9dd9fd9..cb77ef4 100644\n--- a/tests/generic_inline_admin/tests.py\n+++ b/tests/generic_inline_admin/tests.py\n@@ -428,4 +428,41 @@ class GenericInlineModelAdminTest(SimpleTestCase):\n         ma = EpisodeAdmin(Episode, self.site)\n         inlines = ma.get_inline_instances(request)\n         for (formset, inline), other_inline in zip(ma.get_formsets_with_inlines(request), inlines):\n-            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+\n+    def test_get_inlines_custom_behavior(self):\n+        class MediaInline(GenericTabularInline):\n+            model = Media\n+\n+        class AlternateInline(GenericTabularInline):\n+            model = Media\n+\n+        class EpisodeAdmin(admin.ModelAdmin):\n+            inlines = (AlternateInline, MediaInline)\n+\n+            def get_inlines(self, request, obj=None):\n+                if hasattr(request, 'name'):\n+                    if request.name == 'alternate':\n+                        return self.inlines[:1]\n+                    elif request.name == 'media':\n+                        return self.inlines[1:2]\n+                return []\n+\n+        ma = EpisodeAdmin(Episode, self.site)\n+\n+        request.name = 'alternate'\n+        self.assertEqual(ma.get_inlines(request), (AlternateInline,))\n+        inline_instances = ma.get_inline_instances(request)\n+        self.assertEqual(len(inline_instances), 1)\n+        self.assertIsInstance(inline_instances[0], AlternateInline)\n+\n+        request.name = 'media'\n+        self.assertEqual(ma.get_inlines(request), (MediaInline,))\n+        inline_instances = ma.get_inline_instances(request)\n+        self.assertEqual(len(inline_instances), 1)\n+        self.assertIsInstance(inline_instances[0], MediaInline)\n+\n+        request.name = 'unknown'\n+        self.assertEqual(ma.get_inlines(request), [])\n+        inline_instances = ma.get_inline_instances(request)\n+        self.assertEqual(len(inline_instances), 0)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..3083636 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -248,7 +248,27 @@ class UsernameValidatorsTests(SimpleTestCase):\n                 with self.assertRaises(ValidationError):\n                     v(invalid)\n \n-    def test_ascii_validator(self):\n+    def test_newline_in_unicode_validator(self):\n+        invalid_usernames = [\n+            \"username\\n\", \"user\\nname\", \"name\\r\", \"name\\r\\n\",\n+            \"leading\\nnewline\", \"trailingnewline\\n\"\n+        ]\n+        v = validators.UnicodeUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+\n+    def test_newline_in_ascii_validator(self):\n+        invalid_usernames = [\n+            \"username\\n\", \"user\\nname\", \"name\\r\", \"name\\r\\n\",\n+            \"leading\\nnewline\", \"trailingnewline\\n\"\n+        ]\n+        v = validators.ASCIIUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n         invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n         v = validators.ASCIIUsernameValidator()\n@@ -258,4 +278,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..99741ac 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -6,6 +6,8 @@ from django.template.engine import Engine\n from django.test import SimpleTestCase, override_settings\n \n from .utils import ROOT, TEMPLATE_DIR\n+import os\n+from django.template import TemplateSyntaxError\n \n OTHER_DIR = os.path.join(ROOT, 'other_templates')\n \n@@ -22,7 +24,34 @@ class RenderToStringTest(SimpleTestCase):\n         )\n \n \n-class GetDefaultTests(SimpleTestCase):\n+class RenderToStringTest(SimpleTestCase):\n+\n+    def setUp(self):\n+        self.engine = Engine(dirs=[TEMPLATE_DIR])\n+\n+    def test_basic_context(self):\n+        self.assertEqual(\n+            self.engine.render_to_string('test_context.html', {'obj': 'test'}),\n+            'obj:test\\n',\n+        )\n+\n+    def test_autoescape_on(self):\n+        # Test case when autoescape is set to True\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        # The script tag should be escaped\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n+\n+    def test_autoescape_off(self):\n+        # Original test case for when autoescape is set to False\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        # The script tag should not be escaped\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:<script>\\n',\n+        )\n \n     @override_settings(TEMPLATES=[])\n     def test_no_engines_configured(self):\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..b4e280c 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -413,6 +413,10 @@ class HttpResponseTests(unittest.TestCase):\n         self.assertEqual(list(i), [b'abc'])\n         self.assertEqual(list(i), [])\n \n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'My Content'))\n+        self.assertEqual(r.content, b'My Content')\n+\n     def test_lazy_content(self):\n         r = HttpResponse(lazystr('helloworld'))\n         self.assertEqual(r.content, b'helloworld')\n",
  "django__django-11141": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex b5a87e7..526d098 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -509,6 +509,48 @@ class LoaderTests(TestCase):\n         self.assertEqual(migrations, ['0001_initial'])\n \n \n+import os\n+import compileall\n+from importlib import reload\n+from django.test import override_settings\n+from django.db.migrations.loader import MigrationLoader\n+from django.db import connection\n+from django.test import TestCase\n+\n+class NamespacePackageLoaderTests(TestCase):\n+    @override_settings(\n+        MIGRATION_MODULES={'migrations': 'migrations.test_migrations_namespace_package'},\n+    )\n+    def test_loading_namespace_package(self):\n+        \"\"\"Migration directories without an __init__.py file are loaded.\"\"\"\n+        migration_loader = MigrationLoader(connection)\n+        self.assertEqual(\n+            migration_loader.graph.forwards_plan(('migrations', '0001_initial')),\n+            [('migrations', '0001_initial')],\n+        )\n+\n+    @override_settings(\n+        MIGRATION_MODULES={'migrations': 'migrations.test_migrations_empty_dir'},\n+    )\n+    def test_loading_empty_directory(self):\n+        \"\"\"Ensure that empty directories (no migration files) do not cause errors.\"\"\"\n+        migration_loader = MigrationLoader(connection)\n+        self.assertEqual(\n+            migration_loader.graph.forwards_plan(('migrations', '0001_initial')),\n+            [],\n+        )\n+\n+    @override_settings(\n+        MIGRATION_MODULES={'migrations': 'migrations.test_migrations_with_files'},\n+    )\n+    def test_loading_with_files(self):\n+        \"\"\"Ensure that directories with migration files are correctly loaded.\"\"\"\n+        migration_loader = MigrationLoader(connection)\n+        self.assertEqual(\n+            migration_loader.graph.forwards_plan(('migrations', '0001_initial')),\n+            [('migrations', '0001_initial')],\n+        )\n+\n class PycLoaderTests(MigrationTestBase):\n \n     def test_valid(self):\n",
  "django__django-11149": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 296cfba..122ff4e 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -655,7 +655,35 @@ class TestInlinePermissions(TestCase):\n         self.assertContains(response, '<input type=\"hidden\" id=\"id_inner2_set-TOTAL_FORMS\" '\n                             'value=\"3\" name=\"inner2_set-TOTAL_FORMS\">', html=True)\n \n-    def test_inline_change_m2m_add_perm(self):\n+    def test_inline_change_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(self.author_change_url)\n+        # View-only permissions, so no add/change/delete inlines should be present\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"1\" '\n+            'id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        self.assertContains(response, '<p>%s</p>' % self.book)\n+        self.assertNotContains(response, 'id=\"id_Author_books-0-DELETE\"')\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n+        \n+    def test_inline_add_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(reverse('admin:admin_inlines_author_add'))\n+        # View-only permissions, so no form for adding new inlines should be present\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"0\" '\n+            'id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n         permission = Permission.objects.get(codename='add_book', content_type=self.book_ct)\n         self.user.user_permissions.add(permission)\n         response = self.client.get(self.author_change_url)\n",
  "django__django-11163": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex b25d077..c7e1a00 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2900,7 +2900,22 @@ class StrictAssignmentTests(SimpleTestCase):\n \n \n class ModelToDictTests(TestCase):\n-    def test_many_to_many(self):\n+    def test_empty_fields(self):\n+        \"\"\"Test model_to_dict with empty fields list should return an empty dict.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(model_to_dict(bw, fields=[]), {})\n+\n+    def test_specified_fields(self):\n+        \"\"\"Test model_to_dict with specific fields.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(model_to_dict(bw, fields=['id', 'name']), {'id': bw.id, 'name': 'Joe Better'})\n+        self.assertEqual(model_to_dict(bw, fields=['score']), {'score': 10})\n+\n+    def test_exclude_fields(self):\n+        \"\"\"Test model_to_dict with exclude fields.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(sorted(model_to_dict(bw, exclude=[])), ['id', 'name', 'score', 'writer_ptr'])\n+        self.assertEqual(model_to_dict(bw, exclude=['id', 'name']), {'score': 10, 'writer_ptr': bw.writer_ptr_id})\n         \"\"\"Data for a ManyToManyField is a list rather than a lazy QuerySet.\"\"\"\n         blue = Colour.objects.create(name='blue')\n         red = Colour.objects.create(name='red')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..a4d2853 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,9 +1,11 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n+from django.db.models.deletion import Collector\n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n     M2MTo, MRNull, Parent, R, RChild, S, T, User, create_a, get_default_r,\n",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..8bb7eea 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -95,6 +95,13 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+            # Test cases for verifying the issue fix\n+            ('1e-199', 2, '0.00'),\n+            ('1e-200', 2, '0.00'),\n+            ('1e-250', 10, '0.0000000000'),\n+            ('1e-300', 5, '0.00000'),\n+            # Edge case when the number is just at the threshold of conversion\n+            ('1e-200', None, '1e-200'),  # Without decimal_pos, allow scientific notation\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-11211": "",
  "django__django-11239": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex b843072..ec757b3 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -81,7 +81,27 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n-    def test_sigint_handler(self):\n+    def test_ssl_certificate(self):\n+        self.assertEqual(\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+                'sslmode': 'verify-ca',\n+                'sslrootcert': 'root.crt',\n+                'sslcert': 'client.crt',\n+                'sslkey': 'client.key',\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                {\n+                    'PGSSLCERT': 'client.crt',\n+                    'PGSSLKEY': 'client.key',\n+                    'PGSSLMODE': 'verify-ca',\n+                    'PGSSLROOTCERT': 'root.crt',\n+                },\n+            )\n+        )\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n         def _mock_subprocess_run(*args, **kwargs):\n             handler = signal.getsignal(signal.SIGINT)\n",
  "django__django-11265": "diff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py\nindex a587c22..aa1efe4 100644\n--- a/tests/filtered_relation/tests.py\n+++ b/tests/filtered_relation/tests.py\n@@ -98,6 +98,14 @@ class FilteredRelationTests(TestCase):\n             [self.author1]\n         )\n \n+    def test_with_exclude(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2],\n+        )\n+\n     def test_with_join_and_complex_condition(self):\n         self.assertSequenceEqual(\n             Author.objects.annotate(\n",
  "django__django-11276": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 4051a05..4771491 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -27,7 +27,7 @@ class TestUtilsHtml(SimpleTestCase):\n             ('<', '&lt;'),\n             ('>', '&gt;'),\n             ('\"', '&quot;'),\n-            (\"'\", '&#39;'),\n+            (\"'\", '&#x27;'),\n         )\n         # Substitution patterns for testing the above items.\n         patterns = (\"%s\", \"asdf%sfdsa\", \"%s1\", \"1%sb\")\n",
  "django__django-11292": "",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..2526465 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,9 +1,38 @@\n+\n from django.test import SimpleTestCase\n-from django.urls.resolvers import RegexPattern, RoutePattern\n+from django.urls.resolvers import RegexPattern, RoutePattern, get_resolver\n+from django.test.utils import override_settings\n from django.utils.translation import gettext_lazy as _\n \n \n-class RegexPatternTests(SimpleTestCase):\n+class ResolverCacheTests(SimpleTestCase):\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_default__root_urlconf(self):\n+        # resolver for a default URLconf (passing no argument) and for the\n+        # settings.ROOT_URLCONF is the same cached object.\n+        self.assertIs(get_resolver(), get_resolver('urlpatterns.path_urls'))\n+        self.assertIsNot(get_resolver(), get_resolver('urlpatterns.path_dynamic_urls'))\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_none_root_urlconf(self):\n+        # Test that the resolver with None uses settings.ROOT_URLCONF\n+        resolver_default = get_resolver()\n+        resolver_none = get_resolver(None)\n+        resolver_specified = get_resolver('urlpatterns.path_urls')\n+\n+        # Assert that resolver with None and default resolver are the same\n+        self.assertIs(resolver_default, resolver_none)\n+        # Assert that resolver with None and specified ROOT_URLCONF are the same\n+        self.assertIs(resolver_none, resolver_specified)\n+\n+    def test_resolver_cache_different_urlconf(self):\n+        # Test that different URL configurations use different resolver instances\n+        resolver_one = get_resolver('urlpatterns.path_urls_one')\n+        resolver_two = get_resolver('urlpatterns.path_urls_two')\n+\n+        # Assert that the resolvers for different URL configurations are not the same\n+        self.assertIsNot(resolver_one, resolver_two)\n \n     def test_str(self):\n         self.assertEqual(str(RegexPattern(_('^translated/$'))), '^translated/$')\n@@ -12,4 +41,4 @@ class RegexPatternTests(SimpleTestCase):\n class RoutePatternTests(SimpleTestCase):\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\nindex b010b42..e259ec3 100644\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -227,6 +227,10 @@ class BaseModelBackendTest:\n         self.assertEqual(CountingMD5PasswordHasher.calls, 1)\n \n \n+from django.contrib.auth import get_user_model\n+from django.test import TestCase, override_settings\n+from django.contrib.auth import authenticate\n+\n class ModelBackendTest(BaseModelBackendTest, TestCase):\n     \"\"\"\n     Tests for the ModelBackend using the default User model.\n@@ -242,7 +246,20 @@ class ModelBackendTest(BaseModelBackendTest, TestCase):\n             password='test',\n         )\n \n-    def test_authenticate_inactive(self):\n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authentication_no_query_when_username_is_none(self):\n+        CountingMD5PasswordHasher.calls = 0\n+        with self.assertNumQueries(0):\n+            authenticate(password='test')\n+        self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n+\n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authentication_no_query_when_password_is_none(self):\n+        CountingMD5PasswordHasher.calls = 0\n+        username = getattr(self.user, self.UserModel.USERNAME_FIELD)\n+        with self.assertNumQueries(0):\n+            authenticate(username=username)\n+        self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n         \"\"\"\n         An inactive user can't authenticate.\n         \"\"\"\n",
  "django__django-11490": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex e627a0d..207eb10 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -115,7 +115,25 @@ class QuerySetSetOperationTests(TestCase):\n         qs2 = Number.objects.filter(num__gte=2, num__lte=3)\n         self.assertNumbersEqual(qs1.union(qs2).order_by(F('num').desc()), [3, 2, 1, 0])\n \n-    def test_union_with_values(self):\n+    def test_union_with_different_values_list(self):\n+        # Test for changing columns in values_list for a composed query\n+        ReservedName.objects.create(name='a', order=2)\n+        qs1 = ReservedName.objects.all()\n+        # First, use values_list with 'name' and 'order'\n+        reserved_name = qs1.union(qs1).values_list('name', 'order').get()\n+        self.assertEqual(reserved_name, ('a', 2))\n+\n+        # Then, change columns to only 'order'\n+        reserved_order = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(reserved_order, (2,))\n+\n+        # Change columns to only 'name'\n+        reserved_name_only = qs1.union(qs1).values_list('name').get()\n+        self.assertEqual(reserved_name_only, ('a',))\n+\n+        # Change columns to 'order' and 'name'\n+        reserved_flipped = qs1.union(qs1).values_list('order', 'name').get()\n+        self.assertEqual(reserved_flipped, (2, 'a'))\n         ReservedName.objects.create(name='a', order=2)\n         qs1 = ReservedName.objects.all()\n         reserved_name = qs1.union(qs1).values('name', 'order', 'id').get()\n",
  "django__django-11532": "diff --git a/tests/mail/tests.py b/tests/mail/tests.py\nindex a6f0e17..0e06060 100644\n--- a/tests/mail/tests.py\n+++ b/tests/mail/tests.py\n@@ -11,6 +11,7 @@ from email import charset, message_from_binary_file, message_from_bytes\n from email.header import Header\n from email.mime.text import MIMEText\n from email.utils import parseaddr\n+from unittest.mock import patch\n from io import StringIO\n from smtplib import SMTP, SMTPAuthenticationError, SMTPException\n from ssl import SSLError\n@@ -360,6 +361,14 @@ class MailTests(HeadersCheckMixin, SimpleTestCase):\n         msg.attach('example.txt', 'Text file content', 'text/plain')\n         self.assertIn(html_content, msg.message().as_string())\n \n+    @patch('socket.getfqdn', return_value='\u6f22\u5b57')\n+    def test_non_ascii_dns_non_unicode_email(self, mocked_getfqdn):\n+        delattr(mail.DNS_NAME, '_fqdn')\n+        email = EmailMessage('subject', 'content', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        message = email.message()\n+        self.assertIn('@xn--p8s937b>', message['Message-ID'])\n+\n     def test_none_body(self):\n         msg = EmailMessage('subject', None, 'from@example.com', ['to@example.com'])\n         self.assertEqual(msg.body, '')\n",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..f4d6edf 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,9 +1,71 @@\n+\n+class CustomFieldAccessibleViaInstanceTests(CheckTestCase):\n+    def test_valid_field_accessible_via_instance(self):\n+        class PositionField(Field):\n+            \"\"\"Custom field accessible only via instance.\"\"\"\n+            def contribute_to_class(self, cls, name):\n+                super().contribute_to_class(cls, name)\n+                setattr(cls, self.name, self)\n+\n+            def __get__(self, instance, owner):\n+                if instance is None:\n+                    raise AttributeError()\n+\n+        class TestModel(Model):\n+            field = PositionField()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('field',)\n+\n+        self.assertIsValid(TestModelAdmin, TestModel)\n+\n+    def test_invalid_field_not_in_list_display(self):\n+        class PositionField(Field):\n+            \"\"\"Custom field accessible only via instance.\"\"\"\n+            def contribute_to_class(self, cls, name):\n+                super().contribute_to_class(cls, name)\n+                setattr(cls, self.name, self)\n+\n+            def __get__(self, instance, owner):\n+                if instance is None:\n+                    raise AttributeError()\n+\n+        class TestModel(Model):\n+            field = PositionField()\n+            number = IntegerField(default=0)\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('number', 'non_existent_field')\n+\n+        self.assertIsInvalid(\n+            TestModelAdmin, TestModel,\n+            \"The value of 'list_display[1]' refers to 'non_existent_field', which is not a callable, \"\n+            \"an attribute of 'TestModelAdmin', or an attribute or method on 'app_label.TestModel'.\",\n+            'admin.E108'\n+        )\n+\n+    def test_field_is_many_to_many(self):\n+        from django.db.models import ManyToManyField\n+        \n+        class TestModel(Model):\n+            field = ManyToManyField('self', symmetrical=False)\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('field',)\n+\n+        self.assertIsInvalid(\n+            TestModelAdmin, TestModel,\n+            \"The value of 'list_display' must not be a ManyToManyField.\",\n+            'admin.E109'\n+        )\n+\n from django import forms\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n-from django.db.models import F\n+from django.db.models import F, Field, Model, IntegerField\n+from django.core.checks import checks\n from django.db.models.functions import Upper\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..8902953 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -2,6 +2,7 @@ from datetime import datetime\n from operator import attrgetter\n \n from django.core.exceptions import FieldError\n+from datetime import datetime\n from django.db.models import (\n     CharField, Count, DateTimeField, F, Max, OuterRef, Subquery, Value,\n )\n@@ -9,7 +10,7 @@ from django.db.models.functions import Upper\n from django.test import TestCase\n from django.utils.deprecation import RemovedInDjango31Warning\n \n-from .models import Article, Author, OrderedByFArticle, Reference\n+from .models import Article, Author, ChildArticle, OrderedByFArticle, Reference\n \n \n class OrderingTests(TestCase):\n",
  "django__django-11603": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 2b8f813..de14506 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -390,8 +390,15 @@ class AggregateTestCase(TestCase):\n \n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n-\n-    def test_count_star(self):\n+    def test_distinct_on_avg(self):\n+        books = Book.objects.aggregate(avg_rating=Avg('rating', distinct=True))\n+        expected_avg = 4.125  # Assuming this is the expected distinct average based on test data\n+        self.assertEqual(books['avg_rating'], expected_avg)\n+\n+    def test_distinct_on_sum(self):\n+        books = Book.objects.aggregate(sum_rating=Sum('rating', distinct=True))\n+        expected_sum = 16.5  # Assuming this is the expected distinct sum based on test data\n+        self.assertEqual(books['sum_rating'], expected_sum)\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n         sql = ctx.captured_queries[0]['sql']\n",
  "django__django-11740": "",
  "django__django-11749": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex a0e1530..d88bdde 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -209,6 +209,22 @@ class CommandTests(SimpleTestCase):\n         self.assertIn('need_me', out.getvalue())\n         self.assertIn('needme2', out.getvalue())\n \n+    def test_mutually_exclusive_group_required_options(self):\n+        out = StringIO()\n+        # Test with `foo_id` provided in kwargs\n+        management.call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+\n+        # Test with `foo_name` provided in kwargs\n+        out = StringIO()\n+        management.call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+\n+        # Test calling without either argument\n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            management.call_command('mutually_exclusive_required', stdout=out)\n+\n     def test_command_add_arguments_after_common_arguments(self):\n         out = StringIO()\n         management.call_command('common_args', stdout=out)\n",
  "django__django-11790": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 440150b..02ad331 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -437,7 +437,27 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         self.assertEqual(form.fields['username'].max_length, 254)\n         self.assertEqual(form.errors, {})\n \n-    def test_username_field_label(self):\n+    def test_username_field_maxlength_attribute_matches_user_model(self):\n+        # Ensure the maxlength attribute is set to the user's max_length\n+        data = {\n+            'username': 'u' * 255,\n+            'password': 'pwd',\n+            'email': 'test@example.com',\n+        }\n+        CustomEmailField.objects.create_user(**data)\n+        form = AuthenticationForm(None, data)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), '255')\n+\n+    @override_settings(AUTH_USER_MODEL='auth_tests.IntegerUsernameUser')\n+    def test_username_field_maxlength_attribute_defaults_to_254(self):\n+        # Ensure the maxlength attribute defaults to 254 when not specified\n+        data = {\n+            'username': '0123456',\n+            'password': 'password',\n+        }\n+        IntegerUsernameUser.objects.create_user(**data)\n+        form = AuthenticationForm(None, data)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), '254')\n \n         class CustomAuthenticationForm(AuthenticationForm):\n             username = CharField(label=\"Name\", max_length=75)\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..7709f5c 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -252,6 +252,22 @@ class WriterTests(SimpleTestCase):\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n         self.assertEqual(self.serialize_round_trip(lazy_pattern), pattern)\n \n+    def test_serialize_enum_default(self):\n+        # Test case for ensuring enum names are used in migrations\n+        class TranslatedEnum(enum.Enum):\n+            A = _('translated-a')\n+            B = _('translated-b')\n+\n+        field = models.CharField(default=TranslatedEnum.A, choices=[(m.value, m) for m in TranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('translated-a', migrations.test_writer.TranslatedEnum['A']), \"\n+            \"('translated-b', migrations.test_writer.TranslatedEnum['B'])], \"\n+            \"default=migrations.test_writer.TranslatedEnum['A'])\"\n+        )\n+\n     def test_serialize_enums(self):\n         class TextEnum(enum.Enum):\n             A = 'a-value'\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..c80050b 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,7 @@\n+\n import unittest\n-from datetime import datetime\n+from datetime import datetime, timedelta\n+from unittest import mock\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -312,7 +314,30 @@ class HttpDateProcessingTests(unittest.TestCase):\n         t = 1167616461.0\n         self.assertEqual(http_date(t), 'Mon, 01 Jan 2007 01:54:21 GMT')\n \n-    def test_parsing_rfc1123(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_year_fix(self, mocked_datetime):\n+        # Mock datetime to control the current year for comparison\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        # Test cases checking the new logic for the two-digit year\n+        utcnow_cases = [\n+            (datetime(2023, 11, 6, 8, 49, 37), [\n+                ('Monday, 01-Jan-50 08:49:37 GMT', datetime(1950, 1, 1, 8, 49, 37)),\n+                ('Thursday, 01-Jan-49 08:49:37 GMT', datetime(2049, 1, 1, 8, 49, 37)),\n+            ]),\n+            (datetime(2070, 11, 6, 8, 49, 37), [\n+                ('Thursday, 01-Jan-50 08:49:37 GMT', datetime(2050, 1, 1, 8, 49, 37)),\n+                ('Thursday, 01-Jan-49 08:49:37 GMT', datetime(2049, 1, 1, 8, 49, 37)),\n+            ]),\n+        ]\n+\n+        for utcnow, tests in utcnow_cases:\n+            mocked_datetime.utcnow.return_value = utcnow\n+            for rfc850str, expected_date in tests:\n+                with self.subTest(rfc850str=rfc850str, utcnow=utcnow):\n+                    parsed = parse_http_date(rfc850str)\n+                    self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n",
  "django__django-11880": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 95afc0d..2a612f5 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3672,7 +3672,33 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n             '<input type=\"hidden\" name=\"data\" id=\"id_data\"></td></tr>'\n         )\n \n-    def test_field_named_data(self):\n+    def test_field_deep_copy_error_messages(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        self.assertIsInstance(field_copy, CustomCharField)\n+        self.assertIsNot(field_copy.error_messages, field.error_messages)\n+        self.assertEqual(field_copy.error_messages['invalid'], 'Form custom error message.')\n+\n+    def test_deep_copy_error_messages_modification(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Initial error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        \n+        # Modify the error message in the original field\n+        field.error_messages['invalid'] = 'Modified error message.'\n+\n+        # Ensure the copy's error message did not change\n+        self.assertEqual(field_copy.error_messages['invalid'], 'Initial error message.')\n+        self.assertNotEqual(field_copy.error_messages['invalid'], field.error_messages['invalid'])\n         class DataForm(Form):\n             data = CharField(max_length=10)\n \n@@ -3686,6 +3712,10 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertIsInstance(p.files, MultiValueDict)\n \n \n+import copy\n+from django.forms import Form, CharField\n+from django.test import SimpleTestCase\n+\n class CustomRenderer(DjangoTemplates):\n     pass\n \n",
  "django__django-11951": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex f2f6bbd..80a50ca 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -1,4 +1,6 @@\n+\n from operator import attrgetter\n+from math import ceil\n \n from django.db import IntegrityError, NotSupportedError, connection\n from django.db.models import FileField, Value\n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..d944714 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -32,6 +32,22 @@ class Vehicle(models.IntegerChoices):\n     __empty__ = _('(Unknown)')\n \n \n+from django.test import TestCase\n+from .models import Gender, Suit, YearInSchool, Vehicle\n+\n+class EnumStrMethodTests(TestCase):\n+    def test_str_method_on_textchoices(self):\n+        for test_enum in [Gender, YearInSchool]:\n+            for member in test_enum:\n+                with self.subTest(member=member):\n+                    self.assertEqual(str(test_enum[member.name]), str(member.value))\n+\n+    def test_str_method_on_integerchoices(self):\n+        for test_enum in [Suit, Vehicle]:\n+            for member in test_enum:\n+                with self.subTest(member=member):\n+                    self.assertEqual(str(test_enum[member.name]), str(member.value))\n+\n class Gender(models.TextChoices):\n     MALE = 'M'\n     FEMALE = 'F'\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..edfb8cc 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -148,8 +148,39 @@ class ChoicesTests(SimpleTestCase):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n \n+from django.db import models\n+from django.test import TestCase\n+\n class GetFieldDisplayTests(SimpleTestCase):\n \n+    def test_overriding_get_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+\n+    def test_default_get_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+        f = FooBar(foo_bar=1)\n+        # By default, this should return the choice's display value, 'foo'.\n+        self.assertEqual(f.get_foo_bar_display(), 'foo')\n+\n+    def test_no_choices_get_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField()\n+\n+            def get_foo_bar_display(self):\n+                return 'no choices'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'no choices')\n+\n     def test_choices_and_field_display(self):\n         \"\"\"\n         get_choices() interacts with get_FIELD_display() to return the expected\n",
  "django__django-12039": "diff --git a/tests/indexes/tests.py b/tests/indexes/tests.py\nindex 700f574..b4994ad 100644\n--- a/tests/indexes/tests.py\n+++ b/tests/indexes/tests.py\n@@ -9,6 +9,8 @@ from django.db.models.query_utils import Q\n from django.test import (\n     TestCase, TransactionTestCase, skipIfDBFeature, skipUnlessDBFeature,\n )\n+from django.db import connection\n+from django.db.models import Index\n from django.test.utils import override_settings\n from django.utils import timezone\n \n@@ -34,7 +36,45 @@ class SchemaIndexesTests(TestCase):\n         )\n         self.assertEqual(index_name, \"indexes_article_c1_a52bd80b123\")\n \n-    def test_index_name(self):\n+    def test_columns_list_sql(self):\n+        index = Index(fields=['headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_descending_columns_list_sql(self):\n+        index = Index(fields=['-headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s DESC)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_ops_class_columns_lists_sql(self):\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_ops_class_descending_columns_list_sql(self):\n+        index = Index(\n+            fields=['-headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops DESC)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n         \"\"\"\n         Index names on the built-in database backends::\n             * Are truncated as needed.\n",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..72df69b 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n@@ -7,6 +8,7 @@ from django.db.models.fields.related_lookups import RelatedIsNull\n from django.db.models.functions import Lower\n from django.db.models.lookups import Exact, GreaterThan, IsNull, LessThan\n from django.db.models.sql.query import Query\n+from django.db.models.lookups import In\n from django.db.models.sql.where import OR\n from django.test import SimpleTestCase\n from django.test.utils import register_lookup\n@@ -107,7 +109,37 @@ class TestQuery(SimpleTestCase):\n         self.assertIsInstance(b_isnull.lhs, SimpleCol)\n         self.assertEqual(b_isnull.lhs.target, ObjectC._meta.get_field('objectb'))\n \n-    def test_clone_select_related(self):\n+    def test_iterable_lookup_value(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=['a', 'b']))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        # Ensure that the rhs remains a list if input was a list\n+        self.assertEqual(name_exact.rhs, ['a', 'b'])\n+\n+    def test_iterable_lookup_value_tuple(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=('a', 'b')))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        # Ensure that the rhs remains a tuple if input was a tuple\n+        self.assertEqual(name_exact.rhs, ('a', 'b'))\n+\n+    def test_in_lookup_value_list(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name__in=['a', 'b']))\n+        name_in = where.children[0]\n+        self.assertIsInstance(name_in, In)\n+        # Ensure that the rhs remains a list for the 'in' lookup if input was a list\n+        self.assertEqual(name_in.rhs, ['a', 'b'])\n+\n+    def test_in_lookup_value_tuple(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name__in=('a', 'b')))\n+        name_in = where.children[0]\n+        self.assertIsInstance(name_in, In)\n+        # Ensure that the rhs remains a tuple for the 'in' lookup if input was a tuple\n+        self.assertEqual(name_in.rhs, ('a', 'b'))\n         query = Query(Item)\n         query.add_select_related(['creator'])\n         clone = query.clone()\n",
  "django__django-12125": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex e62f7b0..e33d5ca 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -180,6 +180,40 @@ class OperationWriterTests(SimpleTestCase):\n         )\n \n \n+    def test_serialize_inner_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        self.assertSerializedResultEqual(\n+            A._meta.get_field('field'),\n+            (\n+                \"test_writer.Outer.Inner(max_length=20)\",\n+                {'from tests.migrations.test_writer import Outer'},\n+            ),\n+        )\n+\n+    def test_serialize_inner_enum_field(self):\n+        class Thing(models.Model):\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        self.assertSerializedResultEqual(\n+            Thing._meta.get_field('state'),\n+            (\n+                \"enumfields.fields.EnumField(enum=test_writer.Thing.State, \"\n+                \"max_length=3)\",\n+                {'from tests.migrations.test_writer import Thing'},\n+            ),\n+        )\n+\n+\n class WriterTests(SimpleTestCase):\n     \"\"\"\n     Tests the migration writer (makes migration files from Migration instances)\n@@ -229,12 +263,80 @@ class WriterTests(SimpleTestCase):\n             (\"Decimal('1.3')\", {'from decimal import Decimal'})\n         )\n \n+\n+    def test_serialize_inner_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        self.assertSerializedResultEqual(\n+            A._meta.get_field('field'),\n+            (\n+                \"test_writer.Outer.Inner(max_length=20)\",\n+                {'from tests.migrations.test_writer import Outer'},\n+            ),\n+        )\n+\n+    def test_serialize_inner_enum_field(self):\n+        class Thing(models.Model):\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        self.assertSerializedResultEqual(\n+            Thing._meta.get_field('state'),\n+            (\n+                \"enumfields.fields.EnumField(enum=test_writer.Thing.State, \"\n+                \"max_length=3)\",\n+                {'from tests.migrations.test_writer import Thing'},\n+            ),\n+        )\n+\n         self.assertSerializedEqual(Money('1.3'))\n         self.assertSerializedResultEqual(\n             Money('1.3'),\n             (\"migrations.test_writer.Money('1.3')\", {'import migrations.test_writer'})\n         )\n \n+\n+    def test_serialize_inner_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        self.assertSerializedResultEqual(\n+            A._meta.get_field('field'),\n+            (\n+                \"test_writer.Outer.Inner(max_length=20)\",\n+                {'from tests.migrations.test_writer import Outer'},\n+            ),\n+        )\n+\n+    def test_serialize_inner_enum_field(self):\n+        class Thing(models.Model):\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        self.assertSerializedResultEqual(\n+            Thing._meta.get_field('state'),\n+            (\n+                \"enumfields.fields.EnumField(enum=test_writer.Thing.State, \"\n+                \"max_length=3)\",\n+                {'from tests.migrations.test_writer import Thing'},\n+            ),\n+        )\n+\n     def test_serialize_constants(self):\n         self.assertSerializedEqual(None)\n         self.assertSerializedEqual(True)\n@@ -270,6 +372,40 @@ class WriterTests(SimpleTestCase):\n             (\"[list, tuple, dict, set, frozenset]\", set())\n         )\n \n+\n+    def test_serialize_inner_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        self.assertSerializedResultEqual(\n+            A._meta.get_field('field'),\n+            (\n+                \"test_writer.Outer.Inner(max_length=20)\",\n+                {'from tests.migrations.test_writer import Outer'},\n+            ),\n+        )\n+\n+    def test_serialize_inner_enum_field(self):\n+        class Thing(models.Model):\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        self.assertSerializedResultEqual(\n+            Thing._meta.get_field('state'),\n+            (\n+                \"enumfields.fields.EnumField(enum=test_writer.Thing.State, \"\n+                \"max_length=3)\",\n+                {'from tests.migrations.test_writer import Thing'},\n+            ),\n+        )\n+\n     def test_serialize_lazy_objects(self):\n         pattern = re.compile(r'^foo$')\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n@@ -280,18 +416,154 @@ class WriterTests(SimpleTestCase):\n             TextEnum.A,\n             (\"migrations.test_writer.TextEnum['A']\", {'import migrations.test_writer'})\n         )\n+\n+\n+    def test_serialize_inner_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        self.assertSerializedResultEqual(\n+            A._meta.get_field('field'),\n+            (\n+                \"test_writer.Outer.Inner(max_length=20)\",\n+                {'from tests.migrations.test_writer import Outer'},\n+            ),\n+        )\n+\n+    def test_serialize_inner_enum_field(self):\n+        class Thing(models.Model):\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        self.assertSerializedResultEqual(\n+            Thing._meta.get_field('state'),\n+            (\n+                \"enumfields.fields.EnumField(enum=test_writer.Thing.State, \"\n+                \"max_length=3)\",\n+                {'from tests.migrations.test_writer import Thing'},\n+            ),\n+        )\n         self.assertSerializedResultEqual(\n             TextTranslatedEnum.A,\n             (\"migrations.test_writer.TextTranslatedEnum['A']\", {'import migrations.test_writer'})\n         )\n+\n+\n+    def test_serialize_inner_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        self.assertSerializedResultEqual(\n+            A._meta.get_field('field'),\n+            (\n+                \"test_writer.Outer.Inner(max_length=20)\",\n+                {'from tests.migrations.test_writer import Outer'},\n+            ),\n+        )\n+\n+    def test_serialize_inner_enum_field(self):\n+        class Thing(models.Model):\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        self.assertSerializedResultEqual(\n+            Thing._meta.get_field('state'),\n+            (\n+                \"enumfields.fields.EnumField(enum=test_writer.Thing.State, \"\n+                \"max_length=3)\",\n+                {'from tests.migrations.test_writer import Thing'},\n+            ),\n+        )\n         self.assertSerializedResultEqual(\n             BinaryEnum.A,\n             (\"migrations.test_writer.BinaryEnum['A']\", {'import migrations.test_writer'})\n         )\n+\n+\n+    def test_serialize_inner_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        self.assertSerializedResultEqual(\n+            A._meta.get_field('field'),\n+            (\n+                \"test_writer.Outer.Inner(max_length=20)\",\n+                {'from tests.migrations.test_writer import Outer'},\n+            ),\n+        )\n+\n+    def test_serialize_inner_enum_field(self):\n+        class Thing(models.Model):\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        self.assertSerializedResultEqual(\n+            Thing._meta.get_field('state'),\n+            (\n+                \"enumfields.fields.EnumField(enum=test_writer.Thing.State, \"\n+                \"max_length=3)\",\n+                {'from tests.migrations.test_writer import Thing'},\n+            ),\n+        )\n         self.assertSerializedResultEqual(\n             IntEnum.B,\n             (\"migrations.test_writer.IntEnum['B']\", {'import migrations.test_writer'})\n         )\n+\n+\n+    def test_serialize_inner_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        self.assertSerializedResultEqual(\n+            A._meta.get_field('field'),\n+            (\n+                \"test_writer.Outer.Inner(max_length=20)\",\n+                {'from tests.migrations.test_writer import Outer'},\n+            ),\n+        )\n+\n+    def test_serialize_inner_enum_field(self):\n+        class Thing(models.Model):\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        self.assertSerializedResultEqual(\n+            Thing._meta.get_field('state'),\n+            (\n+                \"enumfields.fields.EnumField(enum=test_writer.Thing.State, \"\n+                \"max_length=3)\",\n+                {'from tests.migrations.test_writer import Thing'},\n+            ),\n+        )\n         self.assertSerializedResultEqual(\n             self.NestedEnum.A,\n             (\n@@ -299,6 +571,40 @@ class WriterTests(SimpleTestCase):\n                 {'import migrations.test_writer'},\n             ),\n         )\n+\n+\n+    def test_serialize_inner_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        self.assertSerializedResultEqual(\n+            A._meta.get_field('field'),\n+            (\n+                \"test_writer.Outer.Inner(max_length=20)\",\n+                {'from tests.migrations.test_writer import Outer'},\n+            ),\n+        )\n+\n+    def test_serialize_inner_enum_field(self):\n+        class Thing(models.Model):\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        self.assertSerializedResultEqual(\n+            Thing._meta.get_field('state'),\n+            (\n+                \"enumfields.fields.EnumField(enum=test_writer.Thing.State, \"\n+                \"max_length=3)\",\n+                {'from tests.migrations.test_writer import Thing'},\n+            ),\n+        )\n         self.assertSerializedEqual(self.NestedEnum.A)\n \n         field = models.CharField(default=TextEnum.B, choices=[(m.value, m) for m in TextEnum])\n@@ -310,10 +616,78 @@ class WriterTests(SimpleTestCase):\n             \"('value-b', migrations.test_writer.TextEnum['B'])], \"\n             \"default=migrations.test_writer.TextEnum['B'])\"\n         )\n+\n+\n+    def test_serialize_inner_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        self.assertSerializedResultEqual(\n+            A._meta.get_field('field'),\n+            (\n+                \"test_writer.Outer.Inner(max_length=20)\",\n+                {'from tests.migrations.test_writer import Outer'},\n+            ),\n+        )\n+\n+    def test_serialize_inner_enum_field(self):\n+        class Thing(models.Model):\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        self.assertSerializedResultEqual(\n+            Thing._meta.get_field('state'),\n+            (\n+                \"enumfields.fields.EnumField(enum=test_writer.Thing.State, \"\n+                \"max_length=3)\",\n+                {'from tests.migrations.test_writer import Thing'},\n+            ),\n+        )\n         field = models.CharField(\n             default=TextTranslatedEnum.A,\n             choices=[(m.value, m) for m in TextTranslatedEnum],\n         )\n+\n+\n+    def test_serialize_inner_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        self.assertSerializedResultEqual(\n+            A._meta.get_field('field'),\n+            (\n+                \"test_writer.Outer.Inner(max_length=20)\",\n+                {'from tests.migrations.test_writer import Outer'},\n+            ),\n+        )\n+\n+    def test_serialize_inner_enum_field(self):\n+        class Thing(models.Model):\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        self.assertSerializedResultEqual(\n+            Thing._meta.get_field('state'),\n+            (\n+                \"enumfields.fields.EnumField(enum=test_writer.Thing.State, \"\n+                \"max_length=3)\",\n+                {'from tests.migrations.test_writer import Thing'},\n+            ),\n+        )\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n             string,\n@@ -322,6 +696,40 @@ class WriterTests(SimpleTestCase):\n             \"('value-b', migrations.test_writer.TextTranslatedEnum['B'])], \"\n             \"default=migrations.test_writer.TextTranslatedEnum['A'])\"\n         )\n+\n+\n+    def test_serialize_inner_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        self.assertSerializedResultEqual(\n+            A._meta.get_field('field'),\n+            (\n+                \"test_writer.Outer.Inner(max_length=20)\",\n+                {'from tests.migrations.test_writer import Outer'},\n+            ),\n+        )\n+\n+    def test_serialize_inner_enum_field(self):\n+        class Thing(models.Model):\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        self.assertSerializedResultEqual(\n+            Thing._meta.get_field('state'),\n+            (\n+                \"enumfields.fields.EnumField(enum=test_writer.Thing.State, \"\n+                \"max_length=3)\",\n+                {'from tests.migrations.test_writer import Thing'},\n+            ),\n+        )\n         field = models.CharField(default=BinaryEnum.B, choices=[(m.value, m) for m in BinaryEnum])\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n@@ -331,6 +739,40 @@ class WriterTests(SimpleTestCase):\n             \"(b'value-b', migrations.test_writer.BinaryEnum['B'])], \"\n             \"default=migrations.test_writer.BinaryEnum['B'])\"\n         )\n+\n+\n+    def test_serialize_inner_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        self.assertSerializedResultEqual(\n+            A._meta.get_field('field'),\n+            (\n+                \"test_writer.Outer.Inner(max_length=20)\",\n+                {'from tests.migrations.test_writer import Outer'},\n+            ),\n+        )\n+\n+    def test_serialize_inner_enum_field(self):\n+        class Thing(models.Model):\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        self.assertSerializedResultEqual(\n+            Thing._meta.get_field('state'),\n+            (\n+                \"enumfields.fields.EnumField(enum=test_writer.Thing.State, \"\n+                \"max_length=3)\",\n+                {'from tests.migrations.test_writer import Thing'},\n+            ),\n+        )\n         field = models.IntegerField(default=IntEnum.A, choices=[(m.value, m) for m in IntEnum])\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n@@ -341,6 +783,40 @@ class WriterTests(SimpleTestCase):\n             \"default=migrations.test_writer.IntEnum['A'])\"\n         )\n \n+\n+    def test_serialize_inner_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        self.assertSerializedResultEqual(\n+            A._meta.get_field('field'),\n+            (\n+                \"test_writer.Outer.Inner(max_length=20)\",\n+                {'from tests.migrations.test_writer import Outer'},\n+            ),\n+        )\n+\n+    def test_serialize_inner_enum_field(self):\n+        class Thing(models.Model):\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        self.assertSerializedResultEqual(\n+            Thing._meta.get_field('state'),\n+            (\n+                \"enumfields.fields.EnumField(enum=test_writer.Thing.State, \"\n+                \"max_length=3)\",\n+                {'from tests.migrations.test_writer import Thing'},\n+            ),\n+        )\n+\n     def test_serialize_choices(self):\n         class TextChoices(models.TextChoices):\n             A = 'A', 'A value'\n@@ -360,6 +836,40 @@ class WriterTests(SimpleTestCase):\n             DateChoices.DATE_1,\n             ('datetime.date(1969, 7, 20)', {'import datetime'}),\n         )\n+\n+\n+    def test_serialize_inner_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        self.assertSerializedResultEqual(\n+            A._meta.get_field('field'),\n+            (\n+                \"test_writer.Outer.Inner(max_length=20)\",\n+                {'from tests.migrations.test_writer import Outer'},\n+            ),\n+        )\n+\n+    def test_serialize_inner_enum_field(self):\n+        class Thing(models.Model):\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        self.assertSerializedResultEqual(\n+            Thing._meta.get_field('state'),\n+            (\n+                \"enumfields.fields.EnumField(enum=test_writer.Thing.State, \"\n+                \"max_length=3)\",\n+                {'from tests.migrations.test_writer import Thing'},\n+            ),\n+        )\n         field = models.CharField(default=TextChoices.B, choices=TextChoices.choices)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n@@ -367,12 +877,80 @@ class WriterTests(SimpleTestCase):\n             \"models.CharField(choices=[('A', 'A value'), ('B', 'B value')], \"\n             \"default='B')\",\n         )\n+\n+\n+    def test_serialize_inner_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        self.assertSerializedResultEqual(\n+            A._meta.get_field('field'),\n+            (\n+                \"test_writer.Outer.Inner(max_length=20)\",\n+                {'from tests.migrations.test_writer import Outer'},\n+            ),\n+        )\n+\n+    def test_serialize_inner_enum_field(self):\n+        class Thing(models.Model):\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        self.assertSerializedResultEqual(\n+            Thing._meta.get_field('state'),\n+            (\n+                \"enumfields.fields.EnumField(enum=test_writer.Thing.State, \"\n+                \"max_length=3)\",\n+                {'from tests.migrations.test_writer import Thing'},\n+            ),\n+        )\n         field = models.IntegerField(default=IntegerChoices.B, choices=IntegerChoices.choices)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n             string,\n             \"models.IntegerField(choices=[(1, 'One'), (2, 'Two')], default=2)\",\n         )\n+\n+\n+    def test_serialize_inner_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        self.assertSerializedResultEqual(\n+            A._meta.get_field('field'),\n+            (\n+                \"test_writer.Outer.Inner(max_length=20)\",\n+                {'from tests.migrations.test_writer import Outer'},\n+            ),\n+        )\n+\n+    def test_serialize_inner_enum_field(self):\n+        class Thing(models.Model):\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        self.assertSerializedResultEqual(\n+            Thing._meta.get_field('state'),\n+            (\n+                \"enumfields.fields.EnumField(enum=test_writer.Thing.State, \"\n+                \"max_length=3)\",\n+                {'from tests.migrations.test_writer import Thing'},\n+            ),\n+        )\n         field = models.DateField(default=DateChoices.DATE_2, choices=DateChoices.choices)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n@@ -383,6 +961,40 @@ class WriterTests(SimpleTestCase):\n             \"default=datetime.date(1969, 11, 19))\"\n         )\n \n+\n+    def test_serialize_inner_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        self.assertSerializedResultEqual(\n+            A._meta.get_field('field'),\n+            (\n+                \"test_writer.Outer.Inner(max_length=20)\",\n+                {'from tests.migrations.test_writer import Outer'},\n+            ),\n+        )\n+\n+    def test_serialize_inner_enum_field(self):\n+        class Thing(models.Model):\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        self.assertSerializedResultEqual(\n+            Thing._meta.get_field('state'),\n+            (\n+                \"enumfields.fields.EnumField(enum=test_writer.Thing.State, \"\n+                \"max_length=3)\",\n+                {'from tests.migrations.test_writer import Thing'},\n+            ),\n+        )\n+\n     def test_serialize_uuid(self):\n         self.assertSerializedEqual(uuid.uuid1())\n         self.assertSerializedEqual(uuid.uuid4())\n@@ -393,11 +1005,79 @@ class WriterTests(SimpleTestCase):\n             uuid_a,\n             (\"uuid.UUID('5c859437-d061-4847-b3f7-e6b78852f8c8')\", {'import uuid'})\n         )\n+\n+\n+    def test_serialize_inner_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        self.assertSerializedResultEqual(\n+            A._meta.get_field('field'),\n+            (\n+                \"test_writer.Outer.Inner(max_length=20)\",\n+                {'from tests.migrations.test_writer import Outer'},\n+            ),\n+        )\n+\n+    def test_serialize_inner_enum_field(self):\n+        class Thing(models.Model):\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        self.assertSerializedResultEqual(\n+            Thing._meta.get_field('state'),\n+            (\n+                \"enumfields.fields.EnumField(enum=test_writer.Thing.State, \"\n+                \"max_length=3)\",\n+                {'from tests.migrations.test_writer import Thing'},\n+            ),\n+        )\n         self.assertSerializedResultEqual(\n             uuid_b,\n             (\"uuid.UUID('c7853ec1-2ea3-4359-b02d-b54e8f1bcee2')\", {'import uuid'})\n         )\n \n+\n+    def test_serialize_inner_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        self.assertSerializedResultEqual(\n+            A._meta.get_field('field'),\n+            (\n+                \"test_writer.Outer.Inner(max_length=20)\",\n+                {'from tests.migrations.test_writer import Outer'},\n+            ),\n+        )\n+\n+    def test_serialize_inner_enum_field(self):\n+        class Thing(models.Model):\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        self.assertSerializedResultEqual(\n+            Thing._meta.get_field('state'),\n+            (\n+                \"enumfields.fields.EnumField(enum=test_writer.Thing.State, \"\n+                \"max_length=3)\",\n+                {'from tests.migrations.test_writer import Thing'},\n+            ),\n+        )\n+\n         field = models.UUIDField(choices=((uuid_a, 'UUID A'), (uuid_b, 'UUID B')), default=uuid_a)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n@@ -408,6 +1088,40 @@ class WriterTests(SimpleTestCase):\n             \"default=uuid.UUID('5c859437-d061-4847-b3f7-e6b78852f8c8'))\"\n         )\n \n+\n+    def test_serialize_inner_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        self.assertSerializedResultEqual(\n+            A._meta.get_field('field'),\n+            (\n+                \"test_writer.Outer.Inner(max_length=20)\",\n+                {'from tests.migrations.test_writer import Outer'},\n+            ),\n+        )\n+\n+    def test_serialize_inner_enum_field(self):\n+        class Thing(models.Model):\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        self.assertSerializedResultEqual(\n+            Thing._meta.get_field('state'),\n+            (\n+                \"enumfields.fields.EnumField(enum=test_writer.Thing.State, \"\n+                \"max_length=3)\",\n+                {'from tests.migrations.test_writer import Thing'},\n+            ),\n+        )\n+\n     def test_serialize_functions(self):\n         with self.assertRaisesMessage(ValueError, 'Cannot serialize function: lambda'):\n             self.assertSerializedEqual(lambda x: 42)\n@@ -430,6 +1144,40 @@ class WriterTests(SimpleTestCase):\n             datetime.datetime(2014, 1, 1, 1, 1),\n             (\"datetime.datetime(2014, 1, 1, 1, 1)\", {'import datetime'})\n         )\n+\n+\n+    def test_serialize_inner_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        self.assertSerializedResultEqual(\n+            A._meta.get_field('field'),\n+            (\n+                \"test_writer.Outer.Inner(max_length=20)\",\n+                {'from tests.migrations.test_writer import Outer'},\n+            ),\n+        )\n+\n+    def test_serialize_inner_enum_field(self):\n+        class Thing(models.Model):\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        self.assertSerializedResultEqual(\n+            Thing._meta.get_field('state'),\n+            (\n+                \"enumfields.fields.EnumField(enum=test_writer.Thing.State, \"\n+                \"max_length=3)\",\n+                {'from tests.migrations.test_writer import Thing'},\n+            ),\n+        )\n         self.assertSerializedResultEqual(\n             datetime.datetime(2012, 1, 1, 1, 1, tzinfo=utc),\n             (\n@@ -438,18 +1186,120 @@ class WriterTests(SimpleTestCase):\n             )\n         )\n \n+\n+    def test_serialize_inner_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        self.assertSerializedResultEqual(\n+            A._meta.get_field('field'),\n+            (\n+                \"test_writer.Outer.Inner(max_length=20)\",\n+                {'from tests.migrations.test_writer import Outer'},\n+            ),\n+        )\n+\n+    def test_serialize_inner_enum_field(self):\n+        class Thing(models.Model):\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        self.assertSerializedResultEqual(\n+            Thing._meta.get_field('state'),\n+            (\n+                \"enumfields.fields.EnumField(enum=test_writer.Thing.State, \"\n+                \"max_length=3)\",\n+                {'from tests.migrations.test_writer import Thing'},\n+            ),\n+        )\n+\n     def test_serialize_fields(self):\n         self.assertSerializedFieldEqual(models.CharField(max_length=255))\n         self.assertSerializedResultEqual(\n             models.CharField(max_length=255),\n             (\"models.CharField(max_length=255)\", {\"from django.db import models\"})\n         )\n+\n+\n+    def test_serialize_inner_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        self.assertSerializedResultEqual(\n+            A._meta.get_field('field'),\n+            (\n+                \"test_writer.Outer.Inner(max_length=20)\",\n+                {'from tests.migrations.test_writer import Outer'},\n+            ),\n+        )\n+\n+    def test_serialize_inner_enum_field(self):\n+        class Thing(models.Model):\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        self.assertSerializedResultEqual(\n+            Thing._meta.get_field('state'),\n+            (\n+                \"enumfields.fields.EnumField(enum=test_writer.Thing.State, \"\n+                \"max_length=3)\",\n+                {'from tests.migrations.test_writer import Thing'},\n+            ),\n+        )\n         self.assertSerializedFieldEqual(models.TextField(null=True, blank=True))\n         self.assertSerializedResultEqual(\n             models.TextField(null=True, blank=True),\n             (\"models.TextField(blank=True, null=True)\", {'from django.db import models'})\n         )\n \n+\n+    def test_serialize_inner_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        self.assertSerializedResultEqual(\n+            A._meta.get_field('field'),\n+            (\n+                \"test_writer.Outer.Inner(max_length=20)\",\n+                {'from tests.migrations.test_writer import Outer'},\n+            ),\n+        )\n+\n+    def test_serialize_inner_enum_field(self):\n+        class Thing(models.Model):\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        self.assertSerializedResultEqual(\n+            Thing._meta.get_field('state'),\n+            (\n+                \"enumfields.fields.EnumField(enum=test_writer.Thing.State, \"\n+                \"max_length=3)\",\n+                {'from tests.migrations.test_writer import Thing'},\n+            ),\n+        )\n+\n     def test_serialize_settings(self):\n         self.assertSerializedEqual(SettingsReference(settings.AUTH_USER_MODEL, \"AUTH_USER_MODEL\"))\n         self.assertSerializedResultEqual(\n@@ -457,12 +1307,80 @@ class WriterTests(SimpleTestCase):\n             (\"settings.AUTH_USER_MODEL\", {\"from django.conf import settings\"})\n         )\n \n+\n+    def test_serialize_inner_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        self.assertSerializedResultEqual(\n+            A._meta.get_field('field'),\n+            (\n+                \"test_writer.Outer.Inner(max_length=20)\",\n+                {'from tests.migrations.test_writer import Outer'},\n+            ),\n+        )\n+\n+    def test_serialize_inner_enum_field(self):\n+        class Thing(models.Model):\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        self.assertSerializedResultEqual(\n+            Thing._meta.get_field('state'),\n+            (\n+                \"enumfields.fields.EnumField(enum=test_writer.Thing.State, \"\n+                \"max_length=3)\",\n+                {'from tests.migrations.test_writer import Thing'},\n+            ),\n+        )\n+\n     def test_serialize_iterators(self):\n         self.assertSerializedResultEqual(\n             ((x, x * x) for x in range(3)),\n             (\"((0, 0), (1, 1), (2, 4))\", set())\n         )\n \n+\n+    def test_serialize_inner_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        self.assertSerializedResultEqual(\n+            A._meta.get_field('field'),\n+            (\n+                \"test_writer.Outer.Inner(max_length=20)\",\n+                {'from tests.migrations.test_writer import Outer'},\n+            ),\n+        )\n+\n+    def test_serialize_inner_enum_field(self):\n+        class Thing(models.Model):\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        self.assertSerializedResultEqual(\n+            Thing._meta.get_field('state'),\n+            (\n+                \"enumfields.fields.EnumField(enum=test_writer.Thing.State, \"\n+                \"max_length=3)\",\n+                {'from tests.migrations.test_writer import Thing'},\n+            ),\n+        )\n+\n     def test_serialize_compiled_regex(self):\n         \"\"\"\n         Make sure compiled regex can be serialized.\n@@ -558,6 +1476,40 @@ class WriterTests(SimpleTestCase):\n             FoodQuerySet.as_manager(),\n             ('migrations.models.FoodQuerySet.as_manager()', {'import migrations.models'})\n         )\n+\n+\n+    def test_serialize_inner_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        self.assertSerializedResultEqual(\n+            A._meta.get_field('field'),\n+            (\n+                \"test_writer.Outer.Inner(max_length=20)\",\n+                {'from tests.migrations.test_writer import Outer'},\n+            ),\n+        )\n+\n+    def test_serialize_inner_enum_field(self):\n+        class Thing(models.Model):\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        self.assertSerializedResultEqual(\n+            Thing._meta.get_field('state'),\n+            (\n+                \"enumfields.fields.EnumField(enum=test_writer.Thing.State, \"\n+                \"max_length=3)\",\n+                {'from tests.migrations.test_writer import Thing'},\n+            ),\n+        )\n         self.assertSerializedEqual(FoodManager('a', 'b'))\n         self.assertSerializedEqual(FoodManager('x', 'y', c=3, d=4))\n \n@@ -661,6 +1613,40 @@ class WriterTests(SimpleTestCase):\n             result['custom_migration_operations'].more_operations.TestOperation\n         )\n \n+\n+    def test_serialize_inner_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        self.assertSerializedResultEqual(\n+            A._meta.get_field('field'),\n+            (\n+                \"test_writer.Outer.Inner(max_length=20)\",\n+                {'from tests.migrations.test_writer import Outer'},\n+            ),\n+        )\n+\n+    def test_serialize_inner_enum_field(self):\n+        class Thing(models.Model):\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        self.assertSerializedResultEqual(\n+            Thing._meta.get_field('state'),\n+            (\n+                \"enumfields.fields.EnumField(enum=test_writer.Thing.State, \"\n+                \"max_length=3)\",\n+                {'from tests.migrations.test_writer import Thing'},\n+            ),\n+        )\n+\n     def test_sorted_imports(self):\n         \"\"\"\n         #24155 - Tests ordering of imports.\n@@ -681,6 +1667,40 @@ class WriterTests(SimpleTestCase):\n             output\n         )\n \n+\n+    def test_serialize_inner_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        self.assertSerializedResultEqual(\n+            A._meta.get_field('field'),\n+            (\n+                \"test_writer.Outer.Inner(max_length=20)\",\n+                {'from tests.migrations.test_writer import Outer'},\n+            ),\n+        )\n+\n+    def test_serialize_inner_enum_field(self):\n+        class Thing(models.Model):\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        self.assertSerializedResultEqual(\n+            Thing._meta.get_field('state'),\n+            (\n+                \"enumfields.fields.EnumField(enum=test_writer.Thing.State, \"\n+                \"max_length=3)\",\n+                {'from tests.migrations.test_writer import Thing'},\n+            ),\n+        )\n+\n     def test_migration_file_header_comments(self):\n         \"\"\"\n         Test comments at top of file.\n@@ -746,4 +1766,4 @@ class WriterTests(SimpleTestCase):\n \n     def test_register_non_serializer(self):\n         with self.assertRaisesMessage(ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "django__django-12143": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 2d13234..8987ea0 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -844,7 +844,31 @@ class ChangeListTests(TestCase):\n         queryset = m._get_list_editable_queryset(request, prefix='form')\n         self.assertEqual(queryset.count(), 2)\n \n-    def test_changelist_view_list_editable_changed_objects_uses_filter(self):\n+    def test_get_list_editable_queryset_with_special_regex_chars_in_prefix(self):\n+        # Create test objects\n+        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n+        Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n+\n+        # Data with special regex characters in formset prefix\n+        data = {\n+            'form$.*+?-TOTAL_FORMS': '2',\n+            'form$.*+?-INITIAL_FORMS': '2',\n+            'form$.*+?-MIN_NUM_FORMS': '0',\n+            'form$.*+?-MAX_NUM_FORMS': '1000',\n+            'form$.*+?-0-uuid': str(a.pk),\n+            'form$.*+?-0-load': '10',\n+            '_save': 'Save',\n+        }\n+\n+        superuser = self._create_superuser('superuser')\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n+        request = self.factory.post(changelist_url, data=data)\n+\n+        # Test the queryset with special regex characters in prefix\n+        queryset = m._get_list_editable_queryset(request, prefix='form$.*+?')\n+        self.assertEqual(queryset.count(), 1)\n         \"\"\"list_editable edits use a filtered queryset to limit memory usage.\"\"\"\n         a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n         Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n",
  "django__django-12155": "diff --git a/tests/admin_docs/test_utils.py b/tests/admin_docs/test_utils.py\nindex 6cae16b..9c7885b 100644\n--- a/tests/admin_docs/test_utils.py\n+++ b/tests/admin_docs/test_utils.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n \n from django.contrib.admindocs.utils import (\n@@ -95,6 +96,31 @@ class TestUtils(AdminDocsSimpleTestCase):\n         output = parse_rst(header, 'header')\n         self.assertIn('<h3>Header</h3>', output)\n \n+    def test_parse_docstring_with_no_leading_line_feed(self):\n+        \"\"\"\n+        Test parse_docstring with a docstring that has no leading line feed.\n+        The first line has content and should be trimmed correctly.\n+        \"\"\"\n+        title, body, _ = parse_docstring('First line of the docstring.\\n\\n    Indented second line.')\n+        self.assertEqual(title, 'First line of the docstring.')\n+        self.assertEqual(body, 'Indented second line.')\n+\n+    def test_trim_docstring_with_content_on_first_line(self):\n+        \"\"\"\n+        Test trim_docstring with a docstring that has content on the first line.\n+        \"\"\"\n+        docstring = 'First line.\\n\\n    Second line indented.\\n    Third line also indented.'\n+        expected_result = 'First line.\\n\\nSecond line indented.\\nThird line also indented.'\n+        self.assertEqual(trim_docstring(docstring), expected_result)\n+\n+    def test_trim_docstring_with_only_one_line(self):\n+        \"\"\"\n+        Test trim_docstring with a single-line docstring that starts with no indentation.\n+        \"\"\"\n+        docstring = 'Single line docstring with no leading whitespace.'\n+        expected_result = 'Single line docstring with no leading whitespace.'\n+        self.assertEqual(trim_docstring(docstring), expected_result)\n+\n     def test_parse_rst(self):\n         \"\"\"\n         parse_rst() should use `cmsreference` as the default role.\n",
  "django__django-12193": "diff --git a/tests/forms_tests/widget_tests/test_checkboxinput.py b/tests/forms_tests/widget_tests/test_checkboxinput.py\nindex 5c5e45d..0315ef3 100644\n--- a/tests/forms_tests/widget_tests/test_checkboxinput.py\n+++ b/tests/forms_tests/widget_tests/test_checkboxinput.py\n@@ -82,10 +82,32 @@ class CheckboxInputTest(WidgetTest):\n         \"\"\"\n         self.assertFalse(self.widget.value_from_datadict({}, {}, 'testing'))\n \n+    def test_checkbox_input_context_does_not_mutate_attrs(self):\n+        widget = forms.CheckboxInput()\n+        attrs = {'checked': False}\n+        widget.get_context('name', True, attrs)\n+        self.assertIs(attrs['checked'], False)\n+\n+    def test_checkbox_input_with_initial_true_then_false(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('name', [True, False, False])\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{'checked': True}, {}, {}]\n+        )\n+\n+    def test_checkbox_input_with_initial_false_then_true(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('name', [False, True, True])\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{}, {'checked': True}, {'checked': True}]\n+        )\n+\n     def test_value_from_datadict_string_int(self):\n         value = self.widget.value_from_datadict({'testing': '0'}, {}, 'testing')\n         self.assertIs(value, True)\n \n     def test_value_omitted_from_data(self):\n         self.assertIs(self.widget.value_omitted_from_data({'field': 'value'}, {}, 'field'), False)\n-        self.assertIs(self.widget.value_omitted_from_data({}, {}, 'field'), False)\n+        self.assertIs(self.widget.value_omitted_from_data({}, {}, 'field'), False)\n",
  "django__django-12209": "diff --git a/tests/serializers/test_data.py b/tests/serializers/test_data.py\nindex abbb3ab..94cea89 100644\n--- a/tests/serializers/test_data.py\n+++ b/tests/serializers/test_data.py\n@@ -28,7 +28,9 @@ from .models import (\n     PositiveSmallIntegerPKData, SlugData, SlugPKData, SmallData, SmallPKData,\n     Tag, TextData, TimeData, UniqueAnchor, UUIDData,\n )\n-from .tests import register_tests\n+import uuid\n+from django.test import TestCase\n+from .models import UUIDDefaultData\n \n # A set of functions that can be used to recreate\n # test data objects of various kinds.\n",
  "django__django-12262": "diff --git a/tests/template_tests/test_custom.py b/tests/template_tests/test_custom.py\nindex 8a8c535..e124d71 100644\n--- a/tests/template_tests/test_custom.py\n+++ b/tests/template_tests/test_custom.py\n@@ -77,8 +77,27 @@ class SimpleTagTests(TagTestCase):\n                 'simple_only_unlimited_args - Expected result: 37, 42, 56, 89'),\n             ('{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 56 eggs=\"scrambled\" four=1|add:3 %}',\n                 'simple_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4'),\n+            # New test cases for verifying the issue with keyword-only arguments and defaults\n+            ('{% load custom %}{% hello greeting=\"hi\" %}', 'hello world'),\n+            ('{% load custom %}{% hi greeting=\"hello\" %}', 'hello world'),\n         ]\n \n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n+        # New error cases for the issue\n+        error_cases = [\n+            (\"'hello' received unexpected keyword argument 'greeting'\",\n+             '{% load custom %}{% hello greeting=\"hi\" greeting=\"hello\" %}'),\n+            (\"'hi' received unexpected keyword argument 'greeting'\",\n+             '{% load custom %}{% hi greeting=\"hi\" greeting=\"hello\" %}'),\n+        ]\n+\n+        for error in error_cases:\n+            with self.assertRaisesMessage(TemplateSyntaxError, error[0]):\n+                self.engine.from_string(error[1])\n+\n         for entry in templates:\n             t = self.engine.from_string(entry[0])\n             self.assertEqual(t.render(c), entry[1])\n@@ -101,8 +120,27 @@ class SimpleTagTests(TagTestCase):\n                 '{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 eggs=\"scrambled\" 56 four=1|add:3 %}'),\n             (\"'simple_unlimited_args_kwargs' received multiple values for keyword argument 'eggs'\",\n                 '{% load custom %}{% simple_unlimited_args_kwargs 37 eggs=\"scrambled\" eggs=\"scrambled\" %}'),\n+            # New test cases for verifying the issue with keyword-only arguments and defaults\n+            ('{% load custom %}{% hello greeting=\"hi\" %}', 'hello world'),\n+            ('{% load custom %}{% hi greeting=\"hello\" %}', 'hello world'),\n         ]\n \n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n+        # New error cases for the issue\n+        error_cases = [\n+            (\"'hello' received unexpected keyword argument 'greeting'\",\n+             '{% load custom %}{% hello greeting=\"hi\" greeting=\"hello\" %}'),\n+            (\"'hi' received unexpected keyword argument 'greeting'\",\n+             '{% load custom %}{% hi greeting=\"hi\" greeting=\"hello\" %}'),\n+        ]\n+\n+        for error in error_cases:\n+            with self.assertRaisesMessage(TemplateSyntaxError, error[0]):\n+                self.engine.from_string(error[1])\n+\n         for entry in errors:\n             with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n                 self.engine.from_string(entry[1])\n@@ -190,8 +228,27 @@ class InclusionTagTests(TagTestCase):\n                 'inclusion_only_unlimited_args - Expected result: 37, 42, 56, 89\\n'),\n             ('{% load inclusion %}{% inclusion_unlimited_args_kwargs 37 40|add:2 56 eggs=\"scrambled\" four=1|add:3 %}',\n                 'inclusion_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4\\n'),\n+            # New test cases for verifying the issue with keyword-only arguments and defaults\n+            ('{% load custom %}{% hello greeting=\"hi\" %}', 'hello world'),\n+            ('{% load custom %}{% hi greeting=\"hello\" %}', 'hello world'),\n+        ]\n+\n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n+        # New error cases for the issue\n+        error_cases = [\n+            (\"'hello' received unexpected keyword argument 'greeting'\",\n+             '{% load custom %}{% hello greeting=\"hi\" greeting=\"hello\" %}'),\n+            (\"'hi' received unexpected keyword argument 'greeting'\",\n+             '{% load custom %}{% hi greeting=\"hi\" greeting=\"hello\" %}'),\n         ]\n \n+        for error in error_cases:\n+            with self.assertRaisesMessage(TemplateSyntaxError, error[0]):\n+                self.engine.from_string(error[1])\n+\n         for entry in templates:\n             t = self.engine.from_string(entry[0])\n             self.assertEqual(t.render(c), entry[1])\n",
  "django__django-12276": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 61f7a13..051612b 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -1,3 +1,6 @@\n+\n+from django.forms import FileInput\n+\n import copy\n import datetime\n import json\n@@ -2477,8 +2480,30 @@ Password: <input type=\"password\" name=\"password\" required>\n             f.as_table(),\n             '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n         )\n+    def test_filefield_with_fileinput_required(self):\n+        class FileForm(Form):\n+            file1 = forms.FileField(widget=FileInput)\n+\n+        f = FileForm(auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n+        )\n+        # A required file field with initial data doesn't contain the required\n+        # HTML attribute. The file input is left blank by the user to keep the\n+        # existing, initial value.\n+        f = FileForm(initial={'file1': 'resume.txt'}, auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n+        )\n \n-    def test_filefield_initial_callable(self):\n+    def test_use_required_attribute(self):\n+        widget = FileInput()\n+        # False when initial data exists. The file input is left blank by the\n+        # user to keep the existing, initial value.\n+        self.assertIs(widget.use_required_attribute(None), True)\n+        self.assertIs(widget.use_required_attribute('resume.txt'), False)\n         class FileForm(forms.Form):\n             file1 = forms.FileField(initial=lambda: 'resume.txt')\n \n",
  "django__django-12304": "",
  "django__django-12308": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex acbcf33..fa4371b 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -138,8 +138,24 @@ class UtilsTests(SimpleTestCase):\n                 resolved_value = display_for_field(resolved_value, field, self.empty_value)\n \n             self.assertEqual(value, resolved_value)\n-\n-    def test_null_display_for_field(self):\n+    def test_json_display_for_field(self):\n+        \"\"\"\n+        Test the display of JSONField values in the admin when they are readonly.\n+        \"\"\"\n+        # Define test cases with input values and expected JSON-formatted output\n+        tests = [\n+            ({'a': {'b': 'c'}}, '{\"a\": {\"b\": \"c\"}}'),  # Nested dictionary\n+            (['a', 'b'], '[\"a\", \"b\"]'),               # List\n+            ('a', '\"a\"'),                             # String\n+            ({('a', 'b'): 'c'}, \"{('a', 'b'): 'c'}\"),  # Invalid JSON (tuple key)\n+        ]\n+        \n+        for value, expected_display in tests:\n+            with self.subTest(value=value):\n+                self.assertEqual(\n+                    display_for_field(value, models.JSONField(), self.empty_value),\n+                    expected_display,\n+                )\n         \"\"\"\n         Regression test for #12550: display_for_field should handle None\n         value.\n",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..824ca41 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1014,8 +1014,38 @@ class OtherModelTests(SimpleTestCase):\n \n             class ParkingLot(Place):\n                 parent = models.OneToOneField(Place, models.CASCADE)\n+    @isolate_apps('invalid_models_tests')\n+    def test_multiple_onetoone_references_order_matter(self):\n+        class Document(models.Model):\n+            pass\n+\n+        class Picking(Document):\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+\n+        self.assertEqual(Picking.check(), [])\n+\n+    @isolate_apps('invalid_models_tests')\n+    def test_multiple_onetoone_references_reverse_order(self):\n+        class Document(models.Model):\n+            pass\n+\n+        class Picking(Document):\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+\n+        self.assertEqual(Picking.check(), [])\n+\n+    @isolate_apps('invalid_models_tests')\n+    def test_missing_parent_link_on_non_parent_field(self):\n+        msg = 'Add parent_link=True to invalid_models_tests.Picking.origin.'\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            class Document(models.Model):\n+                pass\n \n-    def test_m2m_table_name_clash(self):\n+            class Picking(Document):\n+                origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+                document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True)\n         class Foo(models.Model):\n             bar = models.ManyToManyField('Bar', db_table='myapp_bar')\n \n",
  "django__django-12419": "diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py\nindex 7af62eb..10fe921 100644\n--- a/tests/middleware/test_security.py\n+++ b/tests/middleware/test_security.py\n@@ -231,7 +231,14 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         \"\"\"\n         self.assertNotIn('Referrer-Policy', self.process_response())\n \n-    def test_referrer_policy_on(self):\n+    def test_referrer_policy_default(self):\n+        \"\"\"\n+        With SECURE_REFERRER_POLICY not set, the middleware should default to\n+        setting \"Referrer-Policy\" header to \"same-origin\".\n+        \"\"\"\n+        with override_settings(SECURE_REFERRER_POLICY=None):\n+            response = self.process_response()\n+            self.assertEqual(response['Referrer-Policy'], 'same-origin')\n         \"\"\"\n         With SECURE_REFERRER_POLICY set to a valid value, the middleware adds a\n         \"Referrer-Policy\" header to the response.\n@@ -254,4 +261,4 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         present in the response.\n         \"\"\"\n         response = self.process_response(headers={'Referrer-Policy': 'unsafe-url'})\n-        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n",
  "django__django-12663": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 872551b..4d517ad 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -13,6 +13,33 @@ from django.db.models import (\n     Func, IntegerField, Max, Min, Model, OrderBy, OuterRef, Q, StdDev,\n     Subquery, Sum, TimeField, UUIDField, Value, Variance, When,\n )\n+class SimpleLazyObjectSubqueryTests(TestCase):\n+    def setUp(self):\n+        # Setup initial data\n+        self.user = User.objects.create_user(username='testuser')\n+\n+    def test_simple_lazy_object_with_nested_subquery(self):\n+        # Create models needed for the test\n+        employee = Employee.objects.create(firstname=\"John\", lastname=\"Doe\", salary=50000)\n+        manager = Manager.objects.create(name=\"Manager\")\n+        company = Company.objects.create(name=\"Test Corp\", ceo=employee)\n+\n+        # Use SimpleLazyObject in a queryset with subquery\n+        lazy_user = SimpleLazyObject(lambda: User.objects.get(pk=self.user.pk))\n+        ceo_manager_subquery = Subquery(\n+            Employee.objects.filter(\n+                lastname=OuterRef('ceo__lastname')\n+            ).values('manager')\n+        )\n+\n+        # Attempt to annotate and filter using SimpleLazyObject\n+        qs = Company.objects.annotate(\n+            ceo_manager=ceo_manager_subquery\n+        ).filter(ceo_manager=lazy_user)\n+\n+        # Check if filtering behaves as expected\n+        self.assertEqual(qs.count(), 0)  # Expecting it to fail as per issue description\n+\n from django.db.models.expressions import Col, Combinable, Random, RawSQL, Ref\n from django.db.models.functions import (\n     Coalesce, Concat, Left, Length, Lower, Substr, Upper,\n@@ -22,6 +49,9 @@ from django.db.models.sql.datastructures import Join\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import Approximate, isolate_apps\n \n+from django.contrib.auth.models import User\n+from django.db.models import OuterRef, Subquery\n+from django.utils.functional import SimpleLazyObject\n from .models import (\n     UUID, UUIDPK, Company, Employee, Experiment, Number, RemoteEmployee,\n     Result, SimulationRun, Time,\n",
  "django__django-12708": "diff --git a/tests/migrations/test_base.py b/tests/migrations/test_base.py\nindex d6e6fdb..461ef4e 100644\n--- a/tests/migrations/test_base.py\n+++ b/tests/migrations/test_base.py\n@@ -77,7 +77,13 @@ class MigrationTestBase(TransactionTestCase):\n                 any(c['check'] for n, c in constraints if n == name),\n             )\n \n-    def assertConstraintNotExists(self, table, name):\n+    def assertUniqueConstraintExists(self, table, columns, value=True, using='default'):\n+        with connections[using].cursor() as cursor:\n+            constraints = connections[using].introspection.get_constraints(cursor, table).values()\n+            self.assertEqual(\n+                value,\n+                any(c['unique'] for c in constraints if c['columns'] == list(columns)),\n+            )\n         return self.assertConstraintExists(table, name, False)\n \n     def assertFKExists(self, table, columns, to, value=True, using='default'):\n",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..710d3b8 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -14,7 +14,7 @@ from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.auth.models import User\n from django.core.files.storage import default_storage\n from django.core.files.uploadedfile import SimpleUploadedFile\n-from django.db.models import CharField, DateField, DateTimeField, UUIDField\n+from django.db.models import CharField, DateField, DateTimeField, ManyToManyField, UUIDField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n@@ -116,8 +116,19 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n     def test_filtered_many_to_many(self):\n         self.assertFormfield(Band, 'members', widgets.FilteredSelectMultiple,\n                              filter_vertical=['members'])\n+    def test_formfield_for_manytomany_widget_override(self):\n+        \"\"\"\n+        Test that the widget for a ManyToManyField can be overridden\n+        in formfield_for_manytomany.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            formfield_overrides = {\n+                ManyToManyField: {'widget': forms.CheckboxSelectMultiple},\n+            }\n \n-    def test_formfield_overrides(self):\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, forms.CheckboxSelectMultiple)\n         self.assertFormfield(Event, 'start_date', forms.TextInput,\n                              formfield_overrides={DateField: {'widget': forms.TextInput}})\n \n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..9e135ec 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,7 +172,7 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)  # Updated to remove 'using' argument\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n@@ -181,4 +181,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 17e707b..64967d7 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2444,6 +2444,68 @@ class AutodetectorTests(TestCase):\n         self.assertNumberMigrations(changes, 'testapp', 1)\n         self.assertOperationTypes(changes, 'testapp', 0, [\"AddField\", \"AddField\"])\n         self.assertOperationAttributes(changes, 'testapp', 0, 0)\n+    from django.db import models\n+    from django.test import TestCase\n+    from django.db.migrations.state import ModelState\n+    from django.db.migrations.autodetector import MigrationAutodetector\n+    from django.db.migrations.graph import MigrationGraph\n+    from django.db.migrations.loader import MigrationLoader\n+    from django.db.migrations.writer import MigrationWriter\n+\n+    class MigrationTestCase(TestCase):\n+        def setUp(self):\n+            self.loader = MigrationLoader(None, ignore_no_migrations=True)\n+            self.detector = MigrationAutodetector\n+\n+        def get_changes(self, before_states, after_states):\n+            before = {state.app_label: state for state in before_states}\n+            after = {state.app_label: state for state in after_states}\n+            return self.detector.changes_between_graphs(\n+                self.loader.graph, MigrationGraph(), before, after\n+            )\n+\n+        def assertNumberMigrations(self, changes, app_label, number):\n+            if len(changes.get(app_label, [])) != number:\n+                raise AssertionError(f\"Expected {number} migrations for app {app_label}, got {len(changes.get(app_label, []))}\")\n+\n+        def assertOperationTypes(self, changes, app_label, migration_index, operation_types):\n+            migration = changes.get(app_label, [])[migration_index]\n+            actual = [type(op).__name__ for op in migration.operations]\n+            if actual != operation_types:\n+                raise AssertionError(f\"Expected operation types {operation_types}, got {actual}\")\n+\n+        def assertOperationAttributes(self, changes, app_label, migration_index, operation_index, **attrs):\n+            migration = changes.get(app_label, [])[migration_index]\n+            operation = migration.operations[operation_index]\n+            for attr, expected in attrs.items():\n+                actual = getattr(operation, attr)\n+                if actual != expected:\n+                    raise AssertionError(f\"Expected {attr}={expected}, got {actual}\")\n+\n+    def test_add_model_with_field_removed_from_base_model(self):\n+        \"\"\"\n+        Removing a base field takes place before adding a new inherited model\n+        that has a field with the same name.\n+        \"\"\"\n+        before = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('title', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        after = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+            ]),\n+            ModelState('app', 'book', [\n+                ('title', models.CharField(max_length=200)),\n+            ], bases=('app.readable',)),\n+        ]\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'app', 1)\n+        self.assertOperationTypes(changes, 'app', 0, ['RemoveField', 'CreateModel'])\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='title', model_name='readable')\n+        self.assertOperationAttributes(changes, 'app', 0, 1, name='book')\n \n     def test_mti_inheritance_model_removal(self):\n         Animal = ModelState('app', 'Animal', [\n@@ -2453,4 +2515,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..904d0ec 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -8,7 +8,8 @@ from django.db import connection\n from django.db.models import Exists, Max, OuterRef\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n-from django.utils.deprecation import RemovedInDjango40Warning\n+from django.test.utils import isolate_apps\n+from django.db import models\n \n from .models import (\n     Article, Author, Freebie, Game, IsNullWithNoneAsRHS, Player, Season, Tag,\n@@ -194,7 +195,43 @@ class LookupTests(TestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             Article.objects.in_bulk([self.au1], field_name='author')\n \n-    def test_values(self):\n+    def test_in_bulk_meta_constraint(self):\n+        season_2011 = Season.objects.create(year=2011)\n+        season_2012 = Season.objects.create(year=2012)\n+        Season.objects.create(year=2013)\n+        self.assertEqual(\n+            Season.objects.in_bulk(\n+                [season_2011.year, season_2012.year],\n+                field_name='year',\n+            ),\n+            {season_2011.year: season_2011, season_2012.year: season_2012},\n+        )\n+\n+    @isolate_apps('lookup')\n+    def test_in_bulk_non_unique_meta_constraint(self):\n+        class Model(models.Model):\n+            ean = models.CharField(max_length=100)\n+            brand = models.CharField(max_length=100)\n+            name = models.CharField(max_length=80)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=['ean'],\n+                        name='partial_ean_unique',\n+                        condition=models.Q(brand='Brand'),\n+                    ),\n+                    models.UniqueConstraint(\n+                        fields=['brand', 'name'],\n+                        name='together_brand_name_unique',\n+                    ),\n+                ]\n+\n+        msg = \"in_bulk()'s field_name must be a unique field but '%s' isn't.\"\n+        for field_name in ['brand', 'ean']:\n+            with self.subTest(field_name=field_name):\n+                with self.assertRaisesMessage(ValueError, msg % field_name):\n+                    Model.objects.in_bulk(field_name=field_name)\n         # values() returns a list of dictionaries instead of object instances --\n         # and you can specify which fields you want to retrieve.\n         self.assertSequenceEqual(\n",
  "django__django-12858": "",
  "django__django-13012": "",
  "django__django-13028": "diff --git a/tests/queries/models.py b/tests/queries/models.py\nindex a43cfb4..8f027ba 100644\n--- a/tests/queries/models.py\n+++ b/tests/queries/models.py\n@@ -59,6 +59,33 @@ class Annotation(models.Model):\n         return self.name\n \n \n+class ProductMetaDataType(models.Model):\n+    label = models.CharField(max_length=255, unique=True, blank=False, null=False)\n+    filterable = models.BooleanField(default=False)\n+\n+    class Meta:\n+        app_label = \"adminpricing\"\n+        verbose_name = _(\"product meta data type\")\n+        verbose_name_plural = _(\"product meta data types\")\n+\n+    def __str__(self):\n+        return self.label\n+\n+\n+class ProductMetaData(models.Model):\n+    id = models.BigAutoField(primary_key=True)\n+    product = models.ForeignKey('Produit', null=False, blank=False, on_delete=models.CASCADE)\n+    value = models.TextField(null=False, blank=False)\n+    marketplace = models.ForeignKey('Plateforme', null=False, blank=False, on_delete=models.CASCADE)\n+    date_created = models.DateTimeField(null=True, default=timezone.now)\n+    metadata_type = models.ForeignKey(ProductMetaDataType, null=False, blank=False, on_delete=models.CASCADE)\n+\n+    class Meta:\n+        app_label = \"adminpricing\"\n+        verbose_name = _(\"product meta data\")\n+        verbose_name_plural = _(\"product meta datas\")\n+\n+\n class DateTimePK(models.Model):\n     date = models.DateTimeField(primary_key=True, auto_now_add=True)\n \n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..027d376 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,6 +343,44 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_self_referential_foreign_key_ordering(self):\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\")\n+\n+        # Create OneModel instances with self-referencing foreign key\n+        one_1 = OneModel.objects.create(root=None, oneval=2)\n+        one_2 = OneModel.objects.create(root=one_1, oneval=3)\n+        one_3 = OneModel.objects.create(root=one_2, oneval=1)\n+\n+        # Create TwoModel instances referring to OneModel\n+        two_1 = TwoModel.objects.create(record=one_1, twoval=10)\n+        two_2 = TwoModel.objects.create(record=one_2, twoval=20)\n+        two_3 = TwoModel.objects.create(record=one_3, twoval=30)\n+\n+        # Test ordering with self-referential foreign key\n+        qs = TwoModel.objects.filter(record__oneval__in=[1, 2, 3]).order_by(\"record__root_id\")\n+        self.assertQuerysetEqual(\n+            qs,\n+            [(two_1.id, two_2.id, two_3.id)],\n+            lambda obj: obj.id\n+        )\n+\n+        # Test ordering with annotated field\n+        qs = TwoModel.objects.filter(record__oneval__in=[1, 2, 3]).annotate(root_id=F(\"record__root_id\")).order_by(\"root_id\")\n+        self.assertQuerysetEqual(\n+            qs,\n+            [(two_1.id, two_2.id, two_3.id)],\n+            lambda obj: obj.id\n+        )\n+\n+        # Test inverted ordering\n+        qs = TwoModel.objects.filter(record__oneval__in=[1, 2, 3]).order_by(\"-record__root_id\")\n+        self.assertQuerysetEqual(\n+            qs,\n+            [(two_3.id, two_2.id, two_1.id)],\n+            lambda obj: obj.id\n+        )\n+\n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n@@ -353,6 +391,44 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n+\n+    def test_self_referential_foreign_key_ordering(self):\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\")\n+\n+        # Create OneModel instances with self-referencing foreign key\n+        one_1 = OneModel.objects.create(root=None, oneval=2)\n+        one_2 = OneModel.objects.create(root=one_1, oneval=3)\n+        one_3 = OneModel.objects.create(root=one_2, oneval=1)\n+\n+        # Create TwoModel instances referring to OneModel\n+        two_1 = TwoModel.objects.create(record=one_1, twoval=10)\n+        two_2 = TwoModel.objects.create(record=one_2, twoval=20)\n+        two_3 = TwoModel.objects.create(record=one_3, twoval=30)\n+\n+        # Test ordering with self-referential foreign key\n+        qs = TwoModel.objects.filter(record__oneval__in=[1, 2, 3]).order_by(\"record__root_id\")\n+        self.assertQuerysetEqual(\n+            qs,\n+            [(two_1.id, two_2.id, two_3.id)],\n+            lambda obj: obj.id\n+        )\n+\n+        # Test ordering with annotated field\n+        qs = TwoModel.objects.filter(record__oneval__in=[1, 2, 3]).annotate(root_id=F(\"record__root_id\")).order_by(\"root_id\")\n+        self.assertQuerysetEqual(\n+            qs,\n+            [(two_1.id, two_2.id, two_3.id)],\n+            lambda obj: obj.id\n+        )\n+\n+        # Test inverted ordering\n+        qs = TwoModel.objects.filter(record__oneval__in=[1, 2, 3]).order_by(\"-record__root_id\")\n+        self.assertQuerysetEqual(\n+            qs,\n+            [(two_3.id, two_2.id, two_1.id)],\n+            lambda obj: obj.id\n+        )\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline').asc()), [\n                 \"Article 1\",\n",
  "django__django-13089": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex e11856f..7ba7603 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -620,8 +620,46 @@ class BaseCacheTests:\n \n     def test_zero_cull(self):\n         self._perform_cull_test('zero_cull', 50, 19)\n+    def test_cull_empty_table(self):\n+        try:\n+            cull_cache = caches['cull']\n+        except InvalidCacheBackendError:\n+            self.skipTest(\"Culling isn't implemented.\")\n+        \n+        # Clear cache to start with an empty table\n+        cull_cache.clear()\n+        \n+        # Force _cull operation\n+        with connection.cursor() as cursor:\n+            cull_cache._cull('default', cursor, timezone.now())\n \n-    def _perform_invalid_key_test(self, key, expected_warning):\n+        # Verify no exception is raised and table is still empty\n+        with connection.cursor() as cursor:\n+            cursor.execute(\"SELECT COUNT(*) FROM %s\" % connection.ops.quote_name(cull_cache._table))\n+            count = cursor.fetchone()[0]\n+            self.assertEqual(count, 0)\n+\n+    def test_cull_no_cursor_data(self):\n+        try:\n+            cull_cache = caches['cull']\n+        except InvalidCacheBackendError:\n+            self.skipTest(\"Culling isn't implemented.\")\n+        \n+        old_max_entries = cull_cache._max_entries\n+        cull_cache._max_entries = 1  # Force _cull on next set\n+        try:\n+            # Insert a single item to force culling\n+            cull_cache.set('test_key', 'value', 1000)\n+\n+            # Simulate a culling SQL that returns no data\n+            with mock.patch('django.db.backends.utils.CursorWrapper.fetchone', return_value=None):\n+                with connection.cursor() as cursor:\n+                    cull_cache._cull('default', cursor, timezone.now())\n+                    \n+            # Verify that no exception is raised and the key still exists\n+            self.assertTrue(cull_cache.has_key('test_key'))\n+        finally:\n+            cull_cache._max_entries = old_max_entries\n         \"\"\"\n         All the builtin backends should warn (except memcached that should\n         error) on keys that would be refused by memcached. This encourages\n",
  "django__django-13109": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex d60d822..c28e47a 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -1645,6 +1645,50 @@ class ModelFormBasicTests(TestCase):\n         obj.full_clean()\n \n \n+class ForeignKeyValidationTests(TestCase):\n+    \n+    def test_foreign_key_validation_with_base_manager(self):\n+        class FavoriteArticlesForm(forms.ModelForm):\n+            class Meta:\n+                model = FavoriteArticle\n+                fields = '__all__'\n+            \n+            def __init__(self, *args, **kwargs):\n+                super().__init__(*args, **kwargs)\n+                # Allow archived articles.\n+                self.fields['article'].queryset = Article._base_manager.all()\n+\n+        # Creating an archived article\n+        archived_article = Article.objects.create(title='Archived Article', archived=True)\n+        \n+        data = {\n+            'article': archived_article.pk,\n+        }\n+        \n+        form = FavoriteArticlesForm(data)\n+        self.assertTrue(form.is_valid(), \"The form should be valid as it is using the base manager allowing archived articles.\")\n+    \n+    def test_foreign_key_validation_with_default_manager(self):\n+        class FavoriteArticlesForm(forms.ModelForm):\n+            class Meta:\n+                model = FavoriteArticle\n+                fields = '__all__'\n+\n+        # Creating an archived article\n+        archived_article = Article.objects.create(title='Archived Article', archived=True)\n+        \n+        data = {\n+            'article': archived_article.pk,\n+        }\n+        \n+        form = FavoriteArticlesForm(data)\n+        self.assertFalse(form.is_valid(), \"The form should not be valid as it is using the default manager which filters out archived articles.\")\n+        self.assertEqual(\n+            form.errors,\n+            {'article': ['Select a valid choice. That choice is not one of the available choices.']},\n+            \"The form should show an error about the article choice being invalid.\"\n+        )\n+\n class ModelMultipleChoiceFieldTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-13112": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 081eff8..f7bab72 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -866,8 +866,30 @@ class StateTests(SimpleTestCase):\n         )\n         with self.assertRaisesMessage(ValueError, msg):\n             project_state.apps\n+    def test_mixed_case_app_label(self):\n+        \"\"\"\n+        Test that ForeignKey references with mixed-case app labels are correctly resolved.\n+        \"\"\"\n+        new_apps = Apps()\n+\n+        class Category(models.Model):\n+            class Meta:\n+                app_label = 'MiXedCaSe_App'\n+                apps = new_apps\n \n-    def test_real_apps(self):\n+        class Content(models.Model):\n+            category = models.ForeignKey(Category, models.CASCADE)\n+\n+            class Meta:\n+                app_label = 'MiXedCaSe_App'\n+                apps = new_apps\n+\n+        project_state = ProjectState()\n+        project_state.add_model(ModelState.from_model(Category))\n+        project_state.add_model(ModelState.from_model(Content))\n+        \n+        # Ensure that both models are properly registered and resolved\n+        self.assertEqual(len(project_state.apps.get_models()), 2)\n         \"\"\"\n         Including real apps can resolve dangling FK errors.\n         This test relies on the fact that contenttypes is always loaded.\n",
  "django__django-13121": "",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..dbfec70 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1627,7 +1627,21 @@ class FTimeDeltaTests(TestCase):\n         for e in qs:\n             self.assertEqual(e.delta, delta)\n \n-    def test_duration_with_datetime(self):\n+    @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_without_expression_wrapper(self):\n+        # Create instances with known start and end times\n+        Experiment.objects.create(name='exp1', start=datetime.datetime(2023, 1, 1, 12, 0), end=datetime.datetime(2023, 1, 1, 13, 0))\n+        Experiment.objects.create(name='exp2', start=datetime.datetime(2023, 1, 1, 14, 0), end=datetime.datetime(2023, 1, 1, 15, 0))\n+\n+        # Annotate with a simple subtraction without ExpressionWrapper\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+\n+        # Check that the deltas are as expected\n+        results = {exp.name: exp.delta for exp in queryset}\n+        self.assertEqual(results['exp1'], datetime.timedelta(hours=1))\n+        self.assertEqual(results['exp2'], datetime.timedelta(hours=1))\n         # Exclude e1 which has very high precision so we can test this on all\n         # backends regardless of whether or not it supports\n         # microsecond_precision.\n",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..6527dd7 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,5 +1,8 @@\n import operator\n \n+from django.forms import ModelForm, ModelMultipleChoiceField\n+from .models import Publication, Article\n+\n from django.db import DatabaseError, NotSupportedError, connection\n from django.db.models import Exists, F, IntegerField, OuterRef, Value\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..70aee0e 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -25,6 +25,7 @@ from django.contrib.sessions.models import Session\n from django.contrib.sessions.serializers import (\n     JSONSerializer, PickleSerializer,\n )\n+from django.utils.deprecation import RemovedInDjango40Warning\n from django.core import management\n from django.core.cache import caches\n from django.core.cache.backends.base import InvalidCacheBackendError\n@@ -33,6 +34,7 @@ from django.http import HttpResponse\n from django.test import (\n     RequestFactory, TestCase, ignore_warnings, override_settings,\n )\n+from django.utils.deprecation import RemovedInDjango40Warning\n from django.utils import timezone\n \n from .models import SessionStore as CustomDatabaseSession\n@@ -312,6 +314,13 @@ class SessionTestsMixin:\n         self.assertEqual(self.session.decode(encoded), data)\n \n     @override_settings(SECRET_KEY='django_tests_secret_key')\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_default_hashing_algorithm_legacy_decode(self):\n+        with override_settings(DEFAULT_HASHING_ALGORITHM='sha1'):\n+            data = {'a test key': 'a test value'}\n+            encoded = self.session.encode(data)\n+            self.assertEqual(self.session._legacy_decode(encoded), data)\n+\n     def test_decode_legacy(self):\n         # RemovedInDjango40Warning: pre-Django 3.1 sessions will be invalid.\n         legacy_encoded = (\n",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..9b22eaa 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -11,6 +11,9 @@ from django.utils.deprecation import RemovedInDjango40Warning\n from django.views.generic import RedirectView, TemplateView, View\n \n from . import views\n+from .models import Artist\n+from django.shortcuts import get_object_or_404\n+from django.views.generic import TemplateView\n \n \n class SimpleView(View):\n@@ -590,7 +593,20 @@ class DeprecationTests(SimpleTestCase):\n         self.assertEqual(response.context['key'], 'value')\n         self.assertIsInstance(response.context['view'], View)\n \n-    def test_template_params_warning(self):\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_template_params_filtering(self):\n+        class OfferView(TemplateView):\n+            template_name = \"generic_views/about.html\"\n+\n+            def get_context_data(self, *, offer_slug, **kwargs):\n+                context = super().get_context_data(**kwargs)\n+                offer = get_object_or_404(Artist, slug=str(offer_slug))\n+                return {\"offer\": offer, \"offer_slug\": offer_slug, **context}\n+\n+        artist = Artist.objects.create(name='Rene Magritte', slug='rene-magritte')\n+        response = OfferView.as_view()(self.rf.get('/'), offer_slug=artist.slug)\n+        self.assertEqual(response.context_data['offer'], artist)\n+        self.assertEqual(response.context_data['offer_slug'], 'rene-magritte')\n         response = self.client.get('/template/custom/bar1/bar2/')\n         self.assertEqual(response.status_code, 200)\n         msg = (\n",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..b1ef0f3 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -4,6 +4,7 @@ from decimal import Decimal\n from unittest import mock, skipUnless\n \n from django import forms\n+from django.test.utils import isolate_apps\n from django.core.exceptions import (\n     NON_FIELD_ERRORS, FieldError, ImproperlyConfigured, ValidationError,\n )\n@@ -2829,6 +2830,73 @@ class LimitChoicesToTests(TestCase):\n             StumpJokeForm()\n             self.assertEqual(today_callable_dict.call_count, 3)\n \n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates_different_conditions(self):\n+        joke1 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.threepwood,\n+        )\n+        joke2 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.marley,\n+        )\n+        joke3 = StumpJoke.objects.create(\n+            funny=False,\n+            most_recently_fooled=self.threepwood,\n+        )\n+        joke1.has_fooled_today.add(self.marley, self.threepwood)\n+        joke2.has_fooled_today.add(self.marley)\n+        joke3.has_fooled_today.add(self.marley, self.threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': False,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=False,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        # Expect marley for character1 as only marley satisfies all conditions\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [self.marley],\n+        )\n+        # Expect threepwood for character2 as only threepwood satisfies all conditions\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [self.threepwood],\n+        )\n+        # Expect no characters for character3 as none satisfy the conditions\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [],\n+        )\n \n class FormFieldCallbackTests(SimpleTestCase):\n \n",
  "django__django-13343": "",
  "django__django-13346": "",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..6abc825 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -19,6 +19,8 @@ from django.test import (\n )\n from django.utils import timezone\n \n+import pytz\n+from datetime import datetime\n from ..models import Author, DTModel, Fan\n \n \n@@ -1133,7 +1135,43 @@ class DateFunctionWithTimeZoneTests(DateFunctionTests):\n         self.assertEqual(model.melb_year.year, 2016)\n         self.assertEqual(model.pacific_year.year, 2015)\n \n-    def test_trunc_ambiguous_and_invalid_times(self):\n+    def test_truncdate_timezone_support(self):\n+        start_datetime = datetime(2023, 10, 28, 18, 30, 0)\n+        start_datetime = timezone.make_aware(start_datetime, timezone=pytz.UTC)\n+        self.create_model(start_datetime, start_datetime)\n+\n+        ny_tz = pytz.timezone('America/New_York')\n+        la_tz = pytz.timezone('America/Los_Angeles')\n+\n+        model = DTModel.objects.annotate(\n+            ny_date=TruncDate('start_datetime', tzinfo=ny_tz),\n+            la_date=TruncDate('start_datetime', tzinfo=la_tz),\n+        ).get()\n+\n+        ny_start_datetime = start_datetime.astimezone(ny_tz)\n+        la_start_datetime = start_datetime.astimezone(la_tz)\n+\n+        self.assertEqual(model.ny_date, ny_start_datetime.date())\n+        self.assertEqual(model.la_date, la_start_datetime.date())\n+\n+    def test_trunctime_timezone_support(self):\n+        start_datetime = datetime(2023, 10, 28, 18, 30, 0)\n+        start_datetime = timezone.make_aware(start_datetime, timezone=pytz.UTC)\n+        self.create_model(start_datetime, start_datetime)\n+\n+        ny_tz = pytz.timezone('America/New_York')\n+        la_tz = pytz.timezone('America/Los_Angeles')\n+\n+        model = DTModel.objects.annotate(\n+            ny_time=TruncTime('start_datetime', tzinfo=ny_tz),\n+            la_time=TruncTime('start_datetime', tzinfo=la_tz),\n+        ).get()\n+\n+        ny_start_datetime = start_datetime.astimezone(ny_tz)\n+        la_start_datetime = start_datetime.astimezone(la_tz)\n+\n+        self.assertEqual(model.ny_time, ny_start_datetime.time())\n+        self.assertEqual(model.la_time, la_start_datetime.time())\n         sao = pytz.timezone('America/Sao_Paulo')\n         utc = pytz.timezone('UTC')\n         start_datetime = utc.localize(datetime(2016, 10, 16, 13))\n",
  "django__django-13401": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e39d03e..ab8e8ba 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -103,6 +103,40 @@ class BasicFieldTests(SimpleTestCase):\n         self.assertEqual(path, 'model_fields.tests.Nested.Field')\n \n \n+from django.db import models\n+\n+class AbstractFieldEqualityTests(SimpleTestCase):\n+\n+    def test_abstract_inherited_fields(self):\n+        \"\"\"Field instances from abstract models are not equal.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        self.assertNotEqual(abstract_model_field, inherit1_model_field)\n+        self.assertNotEqual(abstract_model_field, inherit2_model_field)\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+\n+        self.assertLess(abstract_model_field, inherit1_model_field)\n+        self.assertLess(abstract_model_field, inherit2_model_field)\n+        self.assertLess(inherit1_model_field, inherit2_model_field)\n+\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit1_model_field))\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit2_model_field))\n+        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n+\n class ChoicesTests(SimpleTestCase):\n \n     @classmethod\n",
  "django__django-13410": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 1285e22..a71f90a 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -1,3 +1,4 @@\n+\n import errno\n import gzip\n import os\n@@ -6,6 +7,7 @@ import tempfile\n import unittest\n from io import BytesIO, StringIO, TextIOWrapper\n from pathlib import Path\n+from django.core.files import locks\n from unittest import mock\n \n from django.core.files import File\n",
  "django__django-13417": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 8130de5..6759a5a 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2076,6 +2076,24 @@ class QuerysetOrderedTests(unittest.TestCase):\n     def test_empty_queryset(self):\n         self.assertIs(Annotation.objects.none().ordered, True)\n \n+    def test_annotated_default_ordering(self):\n+        qs = Tag.objects.annotate(num_notes=Count('pk'))\n+        self.assertIs(qs.ordered, False)\n+        self.assertIs(qs.order_by('name').ordered, True)\n+\n+    def test_annotated_values_default_ordering(self):\n+        qs = Tag.objects.values('name').annotate(num_notes=Count('pk'))\n+        self.assertIs(qs.ordered, False)\n+        self.assertIs(qs.order_by('name').ordered, True)\n+\n+    def test_annotated_with_meta_ordering(self):\n+        # Assuming Foo model has Meta.ordering set to ['name']\n+        qs = Foo.objects.annotate(num_notes=Count('pk'))\n+        self.assertIs(qs.ordered, False, \"QuerySet should not be ordered as GROUP BY removes default ordering\")\n+\n+        qs_ordered = Foo.objects.annotate(num_notes=Count('pk')).order_by('name')\n+        self.assertIs(qs_ordered.ordered, True, \"QuerySet should be ordered after explicit order_by\")\n+\n     def test_order_by_extra(self):\n         self.assertIs(Annotation.objects.all().extra(order_by=['id']).ordered, True)\n \n",
  "django__django-13516": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 89f7c38..771ecdc 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -335,6 +335,15 @@ class CommandTests(SimpleTestCase):\n             with self.assertRaisesMessage(TypeError, msg):\n                 management.call_command('subparser_dest', subcommand='foo', bar=12)\n \n+    def test_migrate_command_flush(self):\n+        \"\"\"\n+        Test that migrations output is flushed correctly.\n+        \"\"\"\n+        out = StringIO()\n+        with mock.patch('django.db.migrations.executor.Executor.progress_callback', side_effect=lambda action, migration, fake: out.write(f\"Applying {migration.name}...\\n\") or out.flush()):\n+            management.call_command('migrate', stdout=out)\n+        self.assertIn('Applying', out.getvalue())\n+\n     def test_create_parser_kwargs(self):\n         \"\"\"BaseCommand.create_parser() passes kwargs to CommandParser.\"\"\"\n         epilog = 'some epilog text'\n",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..3e55868 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,10 +1,12 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n-from django.test.utils import ignore_warnings\n+from .with_custom_email_field import CustomEmailField\n+from .models import CustomEmailField, IntegerUsernameUser\n from django.utils.deprecation import RemovedInDjango40Warning\n \n \n@@ -37,6 +39,26 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n+    def test_token_invalidation_on_email_change(self):\n+        \"\"\"Test that changing a user's email invalidates the password reset token.\"\"\"\n+        tests = [\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user('changeemailuser', email=email, password='testpw')\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertTrue(p0.check_token(user, tk1))\n+                \n+                # Change the user's email address\n+                setattr(user, user.get_email_field_name(), 'newemail@example.com')\n+                user.save()\n+                \n+                # The token should now be invalid\n+                self.assertFalse(p0.check_token(user, tk1))\n+\n     def test_timeout(self):\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..eb03f1d 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,7 +1,9 @@\n+\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n from django.contrib.auth.models import AbstractBaseUser\n+from django.db.models import Q, UniqueConstraint\n from django.core import checks\n from django.db import models\n from django.test import (\n@@ -194,6 +196,24 @@ class ModelsPermissionsChecksTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_username_partially_unique_with_total_unique_constraint(self):\n+        \"\"\"\n+        Test that auth.E003 is not raised when there's a total UniqueConstraint\n+        on the USERNAME_FIELD.\n+        \"\"\"\n+        class CustomUserWithTotalUniqueConstraint(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(fields=['username'], name='username_total_unique'),\n+                ]\n+\n+        with self.settings(AUTH_USER_MODEL='auth_tests.CustomUserWithTotalUniqueConstraint'):\n+            errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+            self.assertEqual(errors, [])\n+\n     def test_custom_permission_name_max_length(self):\n         custom_permission_name = 'some ridiculously long verbose name that is out of control' * 5\n \n",
  "django__django-13569": "",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..1c95c4a 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -7,6 +8,7 @@ from decimal import Decimal\n from unittest import mock\n \n from django.core.exceptions import FieldError\n+from collections import namedtuple\n from django.db import DatabaseError, NotSupportedError, connection\n from django.db.models import (\n     AutoField, Avg, BinaryField, BooleanField, Case, CharField, Count,\n@@ -815,7 +817,12 @@ class IterableLookupInnerExpressionsTests(TestCase):\n         Company.objects.create(name='5060 Ltd', num_employees=50, num_chairs=60, ceo=ceo)\n         Company.objects.create(name='99300 Ltd', num_employees=99, num_chairs=300, ceo=ceo)\n \n-    def test_in_lookup_allows_F_expressions_and_expressions_for_integers(self):\n+    def test_range_lookup_namedtuple(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertQuerysetEqual(qs, ['<Company: 99300 Ltd>'], ordered=False)\n         # __in lookups can use F() expressions for integers.\n         queryset = Company.objects.filter(num_employees__in=([F('num_chairs') - 10]))\n         self.assertQuerysetEqual(queryset, ['<Company: 5060 Ltd>'], ordered=False)\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..9da9f1f 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -14,26 +14,70 @@ import unittest\n from io import StringIO\n from unittest import mock\n \n+import os\n from django import conf, get_version\n+from django.test.utils import captured_stderr, captured_stdout\n from django.conf import settings\n from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n+    execute_from_command_line,\n )\n from django.core.management.commands.loaddata import Command as LoaddataCommand\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n+    execute_from_command_line,\n )\n from django.core.management.commands.testserver import (\n     Command as TestserverCommand,\n+    execute_from_command_line,\n )\n from django.db import ConnectionHandler, connection\n from django.db.migrations.recorder import MigrationRecorder\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n+    execute_from_command_line,\n )\n+from django.test.utils import captured_stderr, captured_stdout\n \n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n \n+\n+class ExecuteFromCommandLineTest(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Test program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_with_main(self):\n+        \"\"\"\n+        Test program name when __main__.py is used as the program name.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['__main__.py'] + args):\n+                execute_from_command_line(['python -m django'] + args)\n+        self.assertIn('usage: python -m django shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_with_python(self):\n+        \"\"\"\n+        Test program name when 'python' is used as the program name.\n+        This ensures the prog name is set correctly even if sys.argv[0] is 'python'.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['python'] + args):\n+                execute_from_command_line(['python'] + args)\n+        self.assertIn('usage: python shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n SYSTEM_CHECK_MSG = 'System check identified no issues'\n \n \n",
  "django__django-13670": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 6f0b13f..ca9db12 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -1,3 +1,4 @@\n+\n from datetime import date, datetime\n \n from django.test import SimpleTestCase, override_settings\n@@ -116,7 +117,20 @@ class DateFormatTests(SimpleTestCase):\n         the_future = datetime(2100, 10, 25, 0, 00)\n         self.assertEqual(dateformat.format(the_future, r'Y'), '2100')\n \n-    def test_day_of_year_leap(self):\n+    def test_year_before_1000(self):\n+        tests = [\n+            (476, '76'),\n+            (42, '42'),\n+            (4, '04'),\n+            (999, '99'), # New test case to ensure edge case handling\n+            (1000, '00'), # New test case to verify transition\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n         self.assertEqual(dateformat.format(datetime(2000, 12, 31), 'z'), '366')\n \n     def test_timezones(self):\n@@ -164,4 +178,4 @@ class DateFormatTests(SimpleTestCase):\n             self.assertEqual(\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+            )\n",
  "django__django-13741": "",
  "django__django-13786": "",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..77e4450 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,7 +1,10 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n from django.test import SimpleTestCase\n+from django.utils.functional import lazy\n+from django.utils.translation import gettext_lazy\n \n from ..utils import setup\n \n",
  "django__django-13807": "diff --git a/tests/backends/tests.py b/tests/backends/tests.py\nindex 0aee2b6..870efdb 100644\n--- a/tests/backends/tests.py\n+++ b/tests/backends/tests.py\n@@ -18,7 +18,9 @@ from django.test import (\n     skipUnlessDBFeature,\n )\n \n+from django.db import connection, IntegrityError, transaction\n from .models import (\n+    SQLKeywordsModel,\n     Article, Object, ObjectReference, Person, Post, RawData, Reporter,\n     ReporterProxy, SchoolClass, Square,\n     VeryLongModelNameZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ,\n@@ -626,7 +628,28 @@ class FkConstraintsTests(TransactionTestCase):\n             transaction.set_rollback(True)\n \n \n-class ThreadTests(TransactionTestCase):\n+class SQLKeywordsTest(TransactionTestCase):\n+    available_apps = ['backends']\n+    \n+    def test_check_constraints_sql_keywords(self):\n+        \"\"\"\n+        Test that loaddata does not crash when table names are SQL keywords.\n+        \"\"\"\n+        with transaction.atomic():\n+            # Create an instance of SQLKeywordsModel\n+            reporter = Reporter.objects.create(first_name='John', last_name='Doe')\n+            obj = SQLKeywordsModel.objects.create(reporter=reporter)\n+            obj.refresh_from_db()\n+\n+            # Modify object to break constraints\n+            obj.reporter_id = 30\n+\n+            # Disable constraint checks, save and check constraints manually\n+            with connection.constraint_checks_disabled():\n+                obj.save()\n+                with self.assertRaises(IntegrityError):\n+                    connection.check_constraints(table_names=['order'])\n+            transaction.set_rollback(True)\n \n     available_apps = ['backends']\n \n",
  "django__django-13809": "",
  "django__django-13810": "",
  "django__django-13820": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex 594c01e..2cc8bb6 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -1,3 +1,4 @@\n+\n import compileall\n import os\n \n@@ -7,6 +8,7 @@ from django.db.migrations.exceptions import (\n )\n from django.db.migrations.loader import MigrationLoader\n from django.db.migrations.recorder import MigrationRecorder\n+from importlib import import_module\n from django.test import TestCase, modify_settings, override_settings\n \n from .test_base import MigrationTestBase\n@@ -505,7 +507,35 @@ class LoaderTests(TestCase):\n     @override_settings(\n         MIGRATION_MODULES={'migrations': 'migrations.test_migrations_namespace_package'},\n     )\n-    def test_loading_namespace_package(self):\n+    def test_loading_package_without__file_and_with_list_path(self):\n+        \"\"\"\n+        Test that MigrationLoader can load migrations from regular packages\n+        with no __file__ but with a __path__ that is a list, which is the case\n+        for non-namespace packages.\n+        \"\"\"\n+        test_module = import_module('migrations.test_migrations')\n+        loader = MigrationLoader(connection)\n+        module_file = test_module.__file__\n+        module_origin = test_module.__spec__.origin\n+        module_has_location = test_module.__spec__.has_location\n+        module_path = test_module.__path__\n+        try:\n+            del test_module.__file__\n+            test_module.__spec__.origin = None\n+            test_module.__spec__.has_location = False\n+            test_module.__path__ = ['mocked_path']\n+            loader.load_disk()\n+            migrations = [\n+                name\n+                for app, name in loader.disk_migrations\n+                if app == 'migrations'\n+            ]\n+            self.assertCountEqual(migrations, ['0001_initial', '0002_second'])\n+        finally:\n+            test_module.__file__ = module_file\n+            test_module.__spec__.origin = module_origin\n+            test_module.__spec__.has_location = module_has_location\n+            test_module.__path__ = module_path\n         \"\"\"Migration directories without an __init__.py file are ignored.\"\"\"\n         loader = MigrationLoader(connection)\n         loader.load_disk()\n",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..4c03ff6 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -9,7 +9,9 @@ from unittest import mock\n \n from django.core.exceptions import ImproperlyConfigured\n from django.db import NotSupportedError, connection, transaction\n+import mock\n from django.db.models import Aggregate, Avg, CharField, StdDev, Sum, Variance\n+from django.core.exceptions import ImproperlyConfigured\n from django.db.utils import ConnectionHandler\n from django.test import (\n     TestCase, TransactionTestCase, override_settings, skipIfDBFeature,\n@@ -30,6 +32,28 @@ class Tests(TestCase):\n     longMessage = True\n \n     def test_check_sqlite_version(self):\n+        # Test for SQLite version below minimum requirement (3.8.7)\n+        msg_below_min = 'SQLite 3.9.0 or later is required (found 3.8.7).'\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 8, 7)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.8.7'), \\\n+                self.assertRaisesMessage(ImproperlyConfigured, msg_below_min):\n+            check_sqlite_version()\n+\n+        # Test for the minimum supported SQLite version (3.9.0)\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 9, 0)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.9.0'):\n+            try:\n+                check_sqlite_version()\n+            except ImproperlyConfigured:\n+                self.fail(\"check_sqlite_version() raised ImproperlyConfigured unexpectedly!\")\n+\n+        # Test for a higher supported SQLite version (3.11.0)\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 11, 0)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.11.0'):\n+            try:\n+                check_sqlite_version()\n+            except ImproperlyConfigured:\n+                self.fail(\"check_sqlite_version() raised ImproperlyConfigured unexpectedly!\")\n         msg = 'SQLite 3.8.3 or later is required (found 3.8.2).'\n         with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 8, 2)), \\\n                 mock.patch.object(dbapi2, 'sqlite_version', '3.8.2'), \\\n",
  "django__django-13837": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 10ffa22..86ddb3a 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -159,6 +159,13 @@ class TestIterModulesAndFiles(SimpleTestCase):\n class TestChildArguments(SimpleTestCase):\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        with mock.patch.dict(sys.modules, {'__main__': test_main}):\n+            with mock.patch('sys.argv', [test_main.__file__, 'runserver']):\n+                self.assertEqual(\n+                    autoreload.get_child_arguments(),\n+                    [sys.executable, '-m', 'utils_tests.test_module', 'runserver']\n+                )\n     def test_run_as_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n@@ -174,6 +181,13 @@ class TestChildArguments(SimpleTestCase):\n         )\n \n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        with mock.patch.dict(sys.modules, {'__main__': test_main}):\n+            with mock.patch('sys.argv', [test_main.__file__, 'runserver']):\n+                self.assertEqual(\n+                    autoreload.get_child_arguments(),\n+                    [sys.executable, '-m', 'utils_tests.test_module', 'runserver']\n+                )\n     def test_exe_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             exe_path = Path(tmpdir) / 'django-admin.exe'\n",
  "django__django-13925": "diff --git a/tests/check_framework/test_model_checks.py b/tests/check_framework/test_model_checks.py\nindex 6424d89..8af8dd8 100644\n--- a/tests/check_framework/test_model_checks.py\n+++ b/tests/check_framework/test_model_checks.py\n@@ -395,6 +395,34 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_inherited_manual_pk(self):\n+        class Parent(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class Child(Parent):\n+            # Inherited primary key from Parent, should not raise a warning.\n+            pass\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n+    def test_inherited_manual_pk_with_additional_field(self):\n+        class Parent(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class Child(Parent):\n+            extra_field = models.CharField(max_length=255)\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n+    def test_inherited_and_override_pk(self):\n+        class Parent(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class Child(Parent):\n+            id = models.BigAutoField(primary_key=True)\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.BigAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -414,4 +442,4 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             class Meta:\n                 app_label = 'check_framework.apps.CheckPKConfig'\n \n-        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n+        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..81d44ba 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -297,6 +297,14 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['INVALID CHOICE'], f.clean, '4')\n+        # ModelChoiceField with invalid choice displaying the value\n+        f_with_value = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.'\n+            },\n+        )\n+        self.assertFormErrors(['\"invalid\" is not one of the available choices.'], f_with_value.clean, 'invalid')\n \n         # ModelMultipleChoiceField\n         e = {\n@@ -307,4 +315,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/tests.py b/tests/many_to_one/tests.py\nindex 8af1b8e..04d6a55 100644\n--- a/tests/many_to_one/tests.py\n+++ b/tests/many_to_one/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n from copy import deepcopy\n \n@@ -549,7 +550,26 @@ class ManyToOneTests(TestCase):\n         self.assertEqual(child.parent, parent)\n         self.assertEqual(child.parent_id, parent.name)\n \n-    def test_fk_to_bigautofield(self):\n+    def test_save_fk_after_parent_with_non_numeric_pk_set_on_child_empty_instance(self):\n+        with transaction.atomic():\n+            parent = ParentStringPrimaryKey()\n+            child = ChildStringPrimaryKeyParent(parent=parent)\n+            child.parent.name = 'jeff'\n+            parent.save()\n+            child.save()\n+            child.refresh_from_db()\n+            self.assertEqual(child.parent_id, parent.name)\n+            self.assertEqual(child.parent, parent)\n+\n+    def test_save_fk_after_parent_with_non_numeric_pk_set_on_child_initialized_instance(self):\n+        with transaction.atomic():\n+            parent = ParentStringPrimaryKey(name='jeff')\n+            parent.save()\n+            child = ChildStringPrimaryKeyParent(parent=parent)\n+            child.save()\n+            child.refresh_from_db()\n+            self.assertEqual(child.parent, parent)\n+            self.assertEqual(child.parent_id, parent.name)\n         ch = City.objects.create(name='Chicago')\n         District.objects.create(city=ch, name='Far South')\n         District.objects.create(city=ch, name='North')\n",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..9e86e80 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,7 +1,9 @@\n+\n from django.db import IntegrityError, transaction\n from django.test import TestCase, skipIfDBFeature\n \n-from .models import Bar, Business, Employee, Foo\n+from .models import Bar, Business, Employee, Foo, CustomAutoFieldModel\n+from .fields import MyWrapper\n \n \n class BasicCustomPKTests(TestCase):\n",
  "django__django-14017": "",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..55ed661 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -205,6 +205,18 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yields(self):\n+        \"\"\"\n+        Ensure that no file is yielded more than once during post-processing.\n+        \"\"\"\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(clear=False, dry_run=False, post_process=True)\n+        stats = collectstatic_cmd.collect()\n+\n+        # Check that no file is yielded more than once\n+        post_processed_files = stats['post_processed']\n+        self.assertCountEqual(post_processed_files, set(post_processed_files))\n+\n     def test_css_import_case_insensitive(self):\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n         self.assertEqual(relpath, \"cached/styles_insensitive.3fa427592a53.css\")\n@@ -214,6 +226,18 @@ class TestHashedFiles:\n             self.assertIn(b\"other.d41d8cd98f00.css\", content)\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yields(self):\n+        \"\"\"\n+        Ensure that no file is yielded more than once during post-processing.\n+        \"\"\"\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(clear=False, dry_run=False, post_process=True)\n+        stats = collectstatic_cmd.collect()\n+\n+        # Check that no file is yielded more than once\n+        post_processed_files = stats['post_processed']\n+        self.assertCountEqual(post_processed_files, set(post_processed_files))\n+\n     @override_settings(\n         STATICFILES_DIRS=[os.path.join(TEST_ROOT, 'project', 'faulty')],\n         STATICFILES_FINDERS=['django.contrib.staticfiles.finders.FileSystemFinder'],\n",
  "django__django-14089": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 7fb3d83..16db003 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n@@ -34,6 +35,32 @@ class OrderedSetTests(SimpleTestCase):\n         s.discard(2)\n         self.assertEqual(len(s), 1)\n \n+    def test_reversed(self):\n+        import collections.abc\n+        s = reversed(OrderedSet([1, 2, 3]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [3, 2, 1])\n+\n+    def test_reversed_empty(self):\n+        # Test reversing an empty OrderedSet\n+        s = reversed(OrderedSet([]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [])\n+\n+    def test_reversed_single_element(self):\n+        # Test reversing an OrderedSet with a single element\n+        s = reversed(OrderedSet([42]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [42])\n+\n+    def test_reversed_duplicates(self):\n+        # Test that reversing an OrderedSet with duplicates \n+        # in the initial list only keeps unique elements, \n+        # and in reverse order of first appearance\n+        s = reversed(OrderedSet([1, 2, 2, 3, 1]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [3, 2, 1])\n+\n     def test_contains(self):\n         s = OrderedSet()\n         self.assertEqual(len(s), 0)\n",
  "django__django-14122": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 83089d9..9e571b3 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n from operator import attrgetter\n \n@@ -311,7 +312,17 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n-    def test_order_by_pk(self):\n+    def test_default_ordering_does_not_affect_group_by(self):\n+        \"\"\"\n+        Test that Meta.ordering fields do not appear in the GROUP BY clause.\n+        \"\"\"\n+        Article.objects.exclude(headline='Article 4').update(author=self.author_1)\n+        Article.objects.filter(headline='Article 4').update(author=self.author_2)\n+        articles = Article.objects.values('author').annotate(count=Count('author'))\n+        self.assertCountEqual(articles, [\n+            {'author': self.author_1.pk, 'count': 3},\n+            {'author': self.author_2.pk, 'count': 1},\n+        ])\n         \"\"\"\n         'pk' works as an ordering option in Meta.\n         \"\"\"\n@@ -483,4 +494,4 @@ class OrderingTests(TestCase):\n         )\n         ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n         articles = ChildArticle.objects.order_by('article_ptr')\n-        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n",
  "django__django-14140": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex 7e095fe..9742c47 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import F, Q\n from django.test import SimpleTestCase\n \n@@ -87,8 +88,16 @@ class QTests(SimpleTestCase):\n         path, args, kwargs = q.deconstruct()\n         self.assertEqual(args, (Q(price__gt=F('discounted_price')),))\n         self.assertEqual(kwargs, {})\n+    def test_deconstruct_exists_expression(self):\n+        from django.db.models import Exists, OuterRef\n+        from .models import Employee, Company\n \n-    def test_reconstruct(self):\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        q = Q(Exists(is_poc))\n+        path, args, kwargs = q.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Q')\n+        self.assertEqual(args, (Exists(is_poc),))\n+        self.assertEqual(kwargs, {})\n         q = Q(price__gt=F('discounted_price'))\n         path, args, kwargs = q.deconstruct()\n         self.assertEqual(Q(*args, **kwargs), q)\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..9f7f769 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,3 +1,4 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n@@ -66,7 +67,27 @@ class TestDefaultPK(SimpleTestCase):\n             class Model(models.Model):\n                 pass\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -82,7 +103,27 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14311": "",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..26ebc92 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -229,7 +229,13 @@ TEST_DATA = [\n     # Trailing newlines not accepted\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n-    # Trailing junk does not take forever to reject\n+    # Trailing newlines, carriage returns, and tabs not accepted\n+    (URLValidator(), 'http://www.djangoproject.com/\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://www.django\\rproject.com/', ValidationError),\n+    (URLValidator(), 'http://[::\\rffff:192.9.5.5]', ValidationError),\n+    (URLValidator(), 'http://\\twww.djangoproject.com/', ValidationError),\n+    (URLValidator(), 'http://\\t[::ffff:192.9.5.5]', ValidationError),\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br ', ValidationError),\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br z', ValidationError),\n \n@@ -328,8 +334,21 @@ class TestValidators(SimpleTestCase):\n                         validator(value)\n                 else:\n                     self.assertEqual(expected, validator(value))\n-\n-    def test_single_message(self):\n+    \n+    def test_urlvalidator_newlines_carriage_returns_tabs(self):\n+        validator = URLValidator()\n+        test_values = [\n+            'http://www.djangoproject.com/\\r',\n+            'http://[::ffff:192.9.5.5]\\r',\n+            'http://www.django\\rproject.com/',\n+            'http://[::\\rffff:192.9.5.5]',\n+            'http://\\twww.djangoproject.com/',\n+            'http://\\t[::ffff:192.9.5.5]',\n+        ]\n+        for value in test_values:\n+            with self.subTest(value=value):\n+                with self.assertRaises(ValidationError):\n+                    validator(value)\n         v = ValidationError('Not Valid')\n         self.assertEqual(str(v), \"['Not Valid']\")\n         self.assertEqual(repr(v), \"ValidationError(['Not Valid'])\")\n",
  "django__django-14351": "diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\nindex 79963c3..ece15b6 100644\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -1526,6 +1526,9 @@ class AggregationTests(TestCase):\n         DistinctAggregate('foo', distinct=True)\n \n \n+from django.db.models import Q, Count\n+from .models import Author, Book, PropertyGroup, ManagementAgent\n+\n class JoinPromotionTests(TestCase):\n     def test_ticket_21150(self):\n         b = Bravo.objects.create()\n",
  "django__django-14373": "",
  "django__django-14376": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\nindex 643c2b6..c7f0970 100644\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -89,7 +89,66 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n-    def test_options_charset(self):\n+    def test_deprecated_vs_preferred_keys(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args_deprecated = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'deprecatedoptiondbname',\n+        ]\n+        expected_env_deprecated = {'MYSQL_PWD': 'deprecatedoptionpassword'}\n+        expected_args_preferred = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env_preferred = {'MYSQL_PWD': 'optionpassword'}\n+\n+        for keys in [('database', 'password'), ('db', 'passwd')]:\n+            with self.subTest(keys=keys):\n+                database, password = keys\n+                if keys == ('db', 'passwd'):\n+                    self.assertEqual(\n+                        self.settings_to_cmd_args_env({\n+                            'NAME': 'settingdbname',\n+                            'USER': 'settinguser',\n+                            'PASSWORD': 'settingpassword',\n+                            'HOST': 'settinghost',\n+                            'PORT': settings_port,\n+                            'OPTIONS': {\n+                                database: 'deprecatedoptiondbname',\n+                                'user': 'optionuser',\n+                                password: 'deprecatedoptionpassword',\n+                                'host': 'optionhost',\n+                                'port': options_port,\n+                            },\n+                        }),\n+                        (expected_args_deprecated, expected_env_deprecated),\n+                    )\n+                else:\n+                    self.assertEqual(\n+                        self.settings_to_cmd_args_env({\n+                            'NAME': 'settingdbname',\n+                            'USER': 'settinguser',\n+                            'PASSWORD': 'settingpassword',\n+                            'HOST': 'settinghost',\n+                            'PORT': settings_port,\n+                            'OPTIONS': {\n+                                database: 'optiondbname',\n+                                'user': 'optionuser',\n+                                password: 'optionpassword',\n+                                'host': 'optionhost',\n+                                'port': options_port,\n+                            },\n+                        }),\n+                        (expected_args_preferred, expected_env_preferred),\n+                    )\n         expected_args = [\n             'mysql',\n             '--user=someuser',\n",
  "django__django-14434": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex 39c82bf..6150c69 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -2199,7 +2199,15 @@ class SchemaTests(TransactionTestCase):\n             editor.remove_constraint(AuthorWithUniqueNameAndBirthday, constraint)\n \n     @skipUnlessDBFeature('supports_expression_indexes')\n-    def test_func_unique_constraint(self):\n+    def test_invalid_table_reference_in_constraint(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        # Intentionally pass a Table instance (incorrect) to provoke the issue.\n+        table_instance = Author._meta.db_table\n+        constraint = UniqueConstraint(fields=[table_instance], name='table_instance_uq')\n+        with self.assertRaises(TypeError):\n+            with connection.schema_editor() as editor:\n+                editor.add_constraint(Author, constraint)\n         with connection.schema_editor() as editor:\n             editor.create_model(Author)\n         constraint = UniqueConstraint(Upper('name').desc(), name='func_upper_uq')\n",
  "django__django-14493": "",
  "django__django-14500": "diff --git a/tests/migrations/test_executor.py b/tests/migrations/test_executor.py\nindex d884fe4..5aeaef3 100644\n--- a/tests/migrations/test_executor.py\n+++ b/tests/migrations/test_executor.py\n@@ -640,11 +640,61 @@ class ExecutorTests(MigrationTestBase):\n         \"\"\"\n         recorder = MigrationRecorder(connection)\n         # Record all replaced migrations as applied\n+import unittest\n+from django.test import override_settings\n+from django.db import connection\n+from django.db.migrations.executor import MigrationExecutor\n+from django.db.migrations.recorder import MigrationRecorder\n+\n+...\n+\n+@override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_squashed'})\n+class SquashedMigrationTest(unittest.TestCase):\n+    def test_migrate_marks_replacement_unapplied(self):\n+        executor = MigrationExecutor(connection)\n+        executor.migrate([('migrations', '0001_squashed_0002')])\n+        try:\n+            self.assertIn(\n+                ('migrations', '0001_squashed_0002'),\n+                executor.recorder.applied_migrations(),\n+            )\n+        finally:\n+            executor.loader.build_graph()\n+            executor.migrate([('migrations', None)])\n+            self.assertNotIn(\n+                ('migrations', '0001_squashed_0002'),\n+                executor.recorder.applied_migrations(),\n+            )\n+\n+    def test_migrate_keeps_replaced_migrations_unapplied(self):\n+        recorder = MigrationRecorder(connection)\n         recorder.record_applied(\"migrations\", \"0001_initial\")\n         recorder.record_applied(\"migrations\", \"0002_second\")\n         executor = MigrationExecutor(connection)\n         executor.migrate([(\"migrations\", \"0001_squashed_0002\")])\n \n+        # Unapply the squashed migration\n+        executor.migrate([(\"migrations\", None)])\n+\n+        # Assert that the squashed migration is marked as unapplied\n+        self.assertNotIn(\n+            (\"migrations\", \"0001_squashed_0002\"),\n+            recorder.applied_migrations(),\n+        )\n+\n+        # Assert that the individual replaced migrations are still unapplied\n+        self.assertNotIn(\n+            (\"migrations\", \"0001_initial\"),\n+            recorder.applied_migrations(),\n+        )\n+        self.assertNotIn(\n+            (\"migrations\", \"0002_second\"),\n+            recorder.applied_migrations(),\n+        )\n+        recorder.record_applied(\"migrations\", \"0002_second\")\n+        executor = MigrationExecutor(connection)\n+        executor.migrate([(\"migrations\", \"0001_squashed_0002\")])\n+\n         # Because 0001 and 0002 are both applied, even though this migrate run\n         # didn't apply anything new, their squashed replacement should be\n         # marked as applied.\n",
  "django__django-14539": "",
  "django__django-14559": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex b579834..1c7e9c0 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -127,7 +127,37 @@ class BulkUpdateTests(TestCase):\n         with self.assertNumQueries(0):\n             Note.objects.bulk_update([], ['note'])\n \n-    def test_large_batch(self):\n+    def test_bulk_update_return_value_empty(self):\n+        rows_updated = Note.objects.bulk_update([], ['note'])\n+        self.assertEqual(rows_updated, 0, \"Expected 0 rows updated for empty input.\")\n+\n+    def test_bulk_update_return_value_no_change(self):\n+        Note.objects.bulk_create([\n+            Note(note='original', misc='original')\n+            for _ in range(10)\n+        ])\n+        notes = list(Note.objects.all())\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 10, \"Expected 10 rows matched for unchanged notes.\")\n+\n+    def test_bulk_update_return_value_actual_update(self):\n+        Note.objects.bulk_create([\n+            Note(note='note', misc='misc')\n+            for _ in range(5)\n+        ])\n+        notes = list(Note.objects.all())\n+        for note in notes:\n+            note.note = \"updated\"\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 5, \"Expected 5 rows updated for notes.\")\n+\n+    def test_bulk_update_return_value_with_duplicates(self):\n+        note = Note.objects.create(note='duplicate-note', misc='duplicate')\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'])\n+        self.assertEqual(rows_updated, 1, \"Expected 1 row matched when duplicate notes are provided.\")\n+\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'], batch_size=1)\n+        self.assertEqual(rows_updated, 2, \"Expected 2 rows matched with duplicates in different batches.\")\n         Note.objects.bulk_create([\n             Note(note=str(i), misc=str(i))\n             for i in range(0, 2000)\n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..ead7d98 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -984,6 +984,25 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n \n+    def test_non_form_errors_with_css_class(self):\n+        \"\"\"\n+        Test that non form errors are rendered with the nonform CSS class.\n+        \"\"\"\n+        data = {\n+            'drinks-TOTAL_FORMS': '2',  # the number of forms rendered\n+            'drinks-INITIAL_FORMS': '0',  # the number of forms with initial data\n+            'drinks-MIN_NUM_FORMS': '0',  # min number of forms\n+            'drinks-MAX_NUM_FORMS': '0',  # max number of forms\n+            'drinks-0-name': 'Gin and Tonic',\n+            'drinks-1-name': 'Gin and Tonic',\n+        }\n+        formset = FavoriteDrinksFormSet(data, prefix='drinks')\n+        self.assertFalse(formset.is_valid())\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>'\n+        )\n+\n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n         ChoiceFormset = formset_factory(Choice, extra=3)\n",
  "django__django-14631": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex a48e4b6..cdb7433 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -2122,6 +2122,45 @@ Password: <input type=\"password\" name=\"password\" required></li>\n         self.assertEqual(form.errors, {})\n         self.assertEqual(form.cleaned_data, {'dt': now})\n \n+    def test_datetime_clean_disabled_callable_initial_bound_field(self):\n+        \"\"\"\n+        The cleaned value for a form with a disabled DateTimeField and callable\n+        initial matches the bound field's cached initial value.\n+        \"\"\"\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: datetime.datetime(2006, 10, 25, 14, 30, 45, 123456), disabled=True)\n+\n+        form = DateTimeForm({})\n+        cleaned = form.cleaned_data['dt']\n+        self.assertEqual(cleaned, datetime.datetime(2006, 10, 25, 14, 30, 45, 123456))\n+        bf = form['dt']\n+        self.assertEqual(cleaned, bf.initial)\n+\n+    def test_changed_data_bound_field_method(self):\n+        \"\"\"\n+        Test whether changed_data uses BoundField's method to determine changes.\n+        \"\"\"\n+        class TestForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: datetime.datetime(2006, 10, 25, 14, 30, 45), disabled=False)\n+        \n+        form = TestForm({'dt': '2006-10-25 14:30:46'})\n+        self.assertIn('dt', form.changed_data)\n+\n+        form = TestForm({'dt': '2006-10-25 14:30:45'})\n+        self.assertNotIn('dt', form.changed_data)\n+\n+    def test_clean_fields_bound_field_initial(self):\n+        \"\"\"\n+        Test that _clean_fields uses BoundField's initial value correctly.\n+        \"\"\"\n+        class TestForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: datetime.datetime(2006, 10, 25, 14, 30, 45), disabled=True)\n+\n+        form = TestForm({})\n+        self.assertEqual(form.cleaned_data['dt'], form['dt'].initial)\n+        self.assertEqual(form.errors, {})\n+        self.assertEqual(form.cleaned_data, {'dt': now})\n+\n     def test_datetime_changed_data_callable_with_microseconds(self):\n         class DateTimeForm(forms.Form):\n             dt = DateTimeField(initial=lambda: datetime.datetime(2006, 10, 25, 14, 30, 45, 123456), disabled=True)\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..0c5be38 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -1,7 +1,8 @@\n from datetime import date, datetime, timedelta\n from operator import attrgetter\n \n-from django.db import IntegrityError\n+from django.core.checks import Error\n+from django.db import IntegrityError, models\n from django.test import TestCase\n \n from .models import (\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..5beb7f1 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,9 +1,51 @@\n+\n+class AutocompleteJsonSerializeResultView(AutocompleteJsonView):\n+    def serialize_result(self, obj, to_field_name):\n+        return {\n+            **super().serialize_result(obj, to_field_name),\n+            'posted': str(obj.posted),\n+        }\n+\n+class AutocompleteJsonViewTestCase(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.factory = RequestFactory()\n+        cls.url = reverse('admin:autocomplete')\n+        cls.opts = {\n+            'app_label': 'app_name',\n+            'model_name': 'question',\n+            'field_name': 'question'\n+        }\n+        cls.superuser = User.objects.create_superuser(\n+            username='super', password='secret', email='super@example.com',\n+        )\n+\n+    def test_serialize_result(self):\n+        Question.objects.create(question='Question 1', posted=datetime.date(2021, 8, 9))\n+        Question.objects.create(question='Question 2', posted=datetime.date(2021, 8, 7))\n+        \n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+        request.user = self.superuser\n+        response = AutocompleteJsonSerializeResultView.as_view(admin_site=admin.site)(request)\n+        \n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        expected_results = [\n+            {'id': str(q.pk), 'text': q.question, 'posted': str(q.posted)}\n+            for q in Question.objects.order_by('-posted')\n+        ]\n+        self.assertEqual(data, {'results': expected_results, 'pagination': {'more': False}})\n+\n import json\n from contextlib import contextmanager\n \n from django.contrib import admin\n from django.contrib.admin.tests import AdminSeleniumTestCase\n+import datetime\n from django.contrib.admin.views.autocomplete import AutocompleteJsonView\n+from django.http import JsonResponse\n+from django.test import TestCase, RequestFactory\n+from .models import Question\n from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n from django.core.exceptions import PermissionDenied\n",
  "django__django-14765": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 11009e5..9caff7d 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -916,6 +916,24 @@ class StateTests(SimpleTestCase):\n             project_state.apps\n \n         # If we include the real app it should succeed\n+\n+    def test_real_apps_as_non_set(self):\n+        with self.assertRaises(AssertionError):\n+            ProjectState(real_apps=['contenttypes'])\n+\n+    def test_real_apps_as_none(self):\n+        # Ensure no exceptions are raised if real_apps is None\n+        try:\n+            ProjectState(real_apps=None)\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError unexpectedly with real_apps=None\")\n+\n+    def test_real_apps_as_set(self):\n+        # Ensure no exceptions are raised if real_apps is a set\n+        try:\n+            ProjectState(real_apps={'contenttypes'})\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError unexpectedly with real_apps as a set\")\n         project_state = ProjectState(real_apps={'contenttypes'})\n         project_state.add_model(ModelState.from_model(TestModel))\n         rendered_state = project_state.apps\n",
  "django__django-14771": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 1875424..b1d16f1 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -234,6 +234,13 @@ class TestChildArguments(SimpleTestCase):\n         msg = 'Script does-not-exist does not exist.'\n         with self.assertRaisesMessage(RuntimeError, msg):\n             autoreload.get_child_arguments()\n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    def test_xoptions_are_passed(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver'],\n+        )\n \n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..a507694 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -199,7 +199,31 @@ class MethodDecoratorTests(SimpleTestCase):\n     \"\"\"\n     Tests for method_decorator\n     \"\"\"\n-    def test_preserve_signature(self):\n+    def test_wrapper_assignments(self):\n+        \"\"\"@method_decorator preserves wrapper assignments.\"\"\"\n+        from django.utils.decorators import method_decorator\n+        from functools import wraps\n+\n+        func_name = None\n+        func_module = None\n+\n+        def decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_name, func_module\n+                func_name = getattr(func, '__name__', None)\n+                func_module = getattr(func, '__module__', None)\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(decorator)\n+            def method(self):\n+                return 'tests'\n+\n+        Test().method()\n+        self.assertEqual(func_name, 'method')\n+        self.assertIsNotNone(func_module)\n         class Test:\n             @simple_dec_m\n             def say(self, arg):\n",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..f8f10f5 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5124,6 +5124,10 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n             'admin:admin_views_language_change',\n             args=(quote(language.pk),),\n         )\n+        # Verify that the URL for Language model points to the default admin site.\n+        expected_language_url = reverse('admin:admin_views_language_change', args=(quote(language.pk),))\n+        self.assertEqual(language_url, expected_language_url)\n+\n         self.assertContains(\n             response,\n             '<div class=\"readonly\"><a href=\"%s\">_40</a></div>' % language_url,\n@@ -5132,7 +5136,36 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         # Related ForeignKey object not registered in admin.\n         self.assertContains(response, '<div class=\"readonly\">Chapter 1</div>', html=True)\n \n-    def test_readonly_manytomany_backwards_ref(self):\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Verify ForeignKey readonly fields in a custom admin site render with correct URLs.\n+        \"\"\"\n+        admin_site = 'custom-admin'\n+        chapter = Chapter.objects.create(\n+            title='Chapter 1',\n+            content='content',\n+            book=Book.objects.create(name='Book 1'),\n+        )\n+        language = Language.objects.create(iso='_40', name='Test')\n+        # Use the custom admin site namespace to generate the expected URL\n+        language_url = reverse(f'{admin_site}:admin_views_language_change', args=(quote(language.pk),))\n+        \n+        # Verify that the URL for the Language model points to the custom admin site\n+        self.assertEqual(\n+            reverse(f'{admin_site}:admin_views_language_change', args=(quote(language.pk),)),\n+            language_url\n+        )\n+\n+        response = self.client.get(reverse(f'{admin_site}:admin_views_chapter_change', args=(chapter.pk,)))\n+        # Verify that the URL for Language model points to the default admin site.\n+        expected_language_url = reverse('admin:admin_views_language_change', args=(quote(language.pk),))\n+        self.assertEqual(language_url, expected_language_url)\n+\n+        self.assertContains(\n+            response,\n+            '<div class=\"readonly\"><a href=\"%s\">_40</a></div>' % language_url,\n+            html=True,\n+        )\n         \"\"\"\n         Regression test for #16433 - backwards references for related objects\n         broke if the related field is read-only due to the help_text attribute\n",
  "django__django-14915": "",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..555a2cb 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -790,6 +790,28 @@ class OperationTests(OperationTestBase):\n         rider = Rider.objects.create()\n         pony.riders.add(rider)\n         self.assertEqual(Pony.objects.count(), 2)\n+        \n+    def test_rename_model_with_db_table_noop(self):\n+        app_label = 'test_rmwdbtn'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n \n",
  "django__django-15022": "",
  "django__django-15037": "",
  "django__django-15103": "diff --git a/tests/template_tests/filter_tests/test_json_script.py b/tests/template_tests/filter_tests/test_json_script.py\nindex 607e24c..fbf1772 100644\n--- a/tests/template_tests/filter_tests/test_json_script.py\n+++ b/tests/template_tests/filter_tests/test_json_script.py\n@@ -1,10 +1,38 @@\n+\n from django.test import SimpleTestCase\n \n from ..utils import setup\n \n+from django.utils.html import json_script\n \n class JsonScriptTests(SimpleTestCase):\n \n+    @setup({'json-tag02': '{{ value|json_script }}'})\n+    def test_without_id_template_tag(self):\n+        output = self.engine.render_to_string('json-tag02', {'value': {}})\n+        self.assertEqual(output, '<script type=\"application/json\">{}</script>')\n+\n+    def test_json_script_without_id(self):\n+        self.assertHTMLEqual(\n+            json_script({'key': 'value'}),\n+            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n+        )\n+\n+    def test_json_script_with_id(self):\n+        self.assertHTMLEqual(\n+            json_script({'key': 'value'}, 'test_id'),\n+            '<script id=\"test_id\" type=\"application/json\">{\"key\": \"value\"}</script>',\n+        )\n+\n+    def test_json_script_escaping(self):\n+        value = {'key': '<script>alert(\"XSS\")</script>'}\n+        expected_output = (\n+            '<script type=\"application/json\">'\n+            '{\"key\": \"\\\\u003Cscript\\\\u003Ealert(\\\\\"XSS\\\\\")\\\\u003C/script\\\\u003E\"}'\n+            '</script>'\n+        )\n+        self.assertHTMLEqual(json_script(value), expected_output)\n+\n     @setup({'json-tag01': '{{ value|json_script:\"test_id\" }}'})\n     def test_basic(self):\n         output = self.engine.render_to_string(\n@@ -16,4 +44,4 @@ class JsonScriptTests(SimpleTestCase):\n             '<script id=\"test_id\" type=\"application/json\">'\n             '{\"a\": \"testing\\\\r\\\\njson \\'string\\\\\" \\\\u003Cb\\\\u003Eescaping\\\\u003C/b\\\\u003E\"}'\n             '</script>'\n-        )\n+        )\n",
  "django__django-15104": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 04452fa..68b4fec 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2834,6 +2834,73 @@ class AutodetectorTests(TestCase):\n                     expected_number,\n                 )\n \n+    def test_add_custom_fk_with_hardcoded_to(self):\n+        class HardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.Author'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']\n+                return name, path, args, kwargs\n+\n+        book_hardcoded_fk_to = ModelState('testapp', 'Book', [\n+            ('author', HardcodedForeignKey(on_delete=models.CASCADE)),\n+        ])\n+        changes = self.get_changes(\n+            [self.author_empty],\n+            [self.author_empty, book_hardcoded_fk_to],\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='Book')\n+\n+    def test_custom_fk_with_different_model_name(self):\n+        class HardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.AnotherModel'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']\n+                return name, path, args, kwargs\n+\n+        another_model_fk = ModelState('testapp', 'AnotherModel', [\n+            ('related', HardcodedForeignKey(on_delete=models.CASCADE)),\n+        ])\n+        changes = self.get_changes(\n+            [self.author_empty],\n+            [self.author_empty, another_model_fk],\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='AnotherModel')\n+\n+    def test_multiple_custom_fk_fields(self):\n+        class HardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.Model'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']\n+                return name, path, args, kwargs\n+\n+        multiple_fk_model = ModelState('testapp', 'MultipleFKModel', [\n+            ('fk1', HardcodedForeignKey(on_delete=models.CASCADE)),\n+            ('fk2', HardcodedForeignKey(on_delete=models.CASCADE)),\n+        ])\n+        changes = self.get_changes(\n+            [self.author_empty],\n+            [self.author_empty, multiple_fk_model],\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='MultipleFKModel')\n+\n \n class MigrationSuggestNameTests(SimpleTestCase):\n     def test_no_operations(self):\n",
  "django__django-15127": "diff --git a/tests/messages_tests/base.py b/tests/messages_tests/base.py\nindex 85a7769..d706a87 100644\n--- a/tests/messages_tests/base.py\n+++ b/tests/messages_tests/base.py\n@@ -1,3 +1,4 @@\n+\n from django.contrib.messages import constants, get_level, set_level, utils\n from django.contrib.messages.api import MessageFailure\n from django.contrib.messages.constants import DEFAULT_LEVELS\n@@ -361,7 +362,28 @@ class BaseTests:\n         tags = [msg.tags for msg in storage]\n         self.assertEqual(tags, ['info', '', 'extra-tag debug', 'warning', 'error', 'success', 'info'])\n \n-    def test_level_tag(self):\n+    def test_level_tags_restore_after_override(self):\n+        # Check that LEVEL_TAGS is restored after using @override_settings\n+        original_level_tags = base.LEVEL_TAGS.copy()\n+        with override_settings(MESSAGE_TAGS={constants.ERROR: 'critical'}):\n+            self.assertNotEqual(base.LEVEL_TAGS, original_level_tags)\n+            self.assertEqual(base.LEVEL_TAGS[constants.ERROR], 'critical')\n+        # After the block, LEVEL_TAGS should be restored to original\n+        self.assertEqual(base.LEVEL_TAGS, original_level_tags)\n+\n+    def test_message_with_custom_level(self):\n+        class CustomLevel:\n+            CUSTOM = 42\n+\n+        custom_message_tags = {\n+            CustomLevel.CUSTOM: 'custom-tag',\n+        }\n+        with override_settings(MESSAGE_TAGS=custom_message_tags):\n+            storage = self.get_storage()\n+            storage.add(CustomLevel.CUSTOM, 'Custom level message')\n+            message = storage._loaded_messages[0]\n+            self.assertEqual(message.level, CustomLevel.CUSTOM)\n+            self.assertEqual(message.tags, 'custom-tag')\n         storage = self.get_storage()\n         storage.level = 0\n         add_level_messages(storage)\n",
  "django__django-15128": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex adde8a6..9a75486 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -32,6 +32,8 @@ from .models import (\n     Ticket21203Parent, Ticket23605A, Ticket23605B, Ticket23605C, TvChef, Valid,\n     X,\n )\n+from django.db.models import Q\n+from .models import Foo, Bar, Baz, Qux\n \n \n class Queries1Tests(TestCase):\n@@ -2096,12 +2098,64 @@ class QuerySetBitwiseOperationTests(TestCase):\n         cls.room_4 = Classroom.objects.create(school=cls.school, has_blackboard=False, name='Room 4')\n \n     @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n+\n+    def test_query_change_aliases_assertion_error(self):\n+        # Set up the models as described in the issue\n+        qux = Qux.objects.create()\n+        foo1 = Foo.objects.create(qux=qux)\n+        foo2 = Foo.objects.create(qux=qux)\n+        baz = Baz.objects.create()\n+        qux.bazes.add(baz)\n+        \n+        bar1 = Bar.objects.create(foo=foo1, another_foo=foo2, baz=baz)\n+        \n+        # Create the QuerySets\n+        qs1 = qux.foos.all()  # Equivalent to Foo.objects.filter(qux=qux)\n+        qs2 = Foo.objects.filter(\n+            Q(bars__baz__in=qux.bazes.all()) | Q(other_bars__baz__in=qux.bazes.all())\n+        )\n+        \n+        # Verify that qs2 | qs1 does not raise an AssertionError\n+        try:\n+            result = qs2 | qs1\n+            self.assertCountEqual(result, qs1 | qs2)  # Check commutativity\n+        except AssertionError:\n+            self.fail(\"QuerySet OR operation raised AssertionError unexpectedly\")\n+        \n+        # Ensure the results are as expected\n+        self.assertCountEqual(result, [foo1, foo2])\n     def test_or_with_rhs_slice(self):\n         qs1 = Classroom.objects.filter(has_blackboard=True)\n         qs2 = Classroom.objects.filter(has_blackboard=False)[:1]\n         self.assertCountEqual(qs1 | qs2, [self.room_1, self.room_2, self.room_3])\n \n     @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n+\n+    def test_query_change_aliases_assertion_error(self):\n+        # Set up the models as described in the issue\n+        qux = Qux.objects.create()\n+        foo1 = Foo.objects.create(qux=qux)\n+        foo2 = Foo.objects.create(qux=qux)\n+        baz = Baz.objects.create()\n+        qux.bazes.add(baz)\n+        \n+        bar1 = Bar.objects.create(foo=foo1, another_foo=foo2, baz=baz)\n+        \n+        # Create the QuerySets\n+        qs1 = qux.foos.all()  # Equivalent to Foo.objects.filter(qux=qux)\n+        qs2 = Foo.objects.filter(\n+            Q(bars__baz__in=qux.bazes.all()) | Q(other_bars__baz__in=qux.bazes.all())\n+        )\n+        \n+        # Verify that qs2 | qs1 does not raise an AssertionError\n+        try:\n+            result = qs2 | qs1\n+            self.assertCountEqual(result, qs1 | qs2)  # Check commutativity\n+        except AssertionError:\n+            self.fail(\"QuerySet OR operation raised AssertionError unexpectedly\")\n+        \n+        # Ensure the results are as expected\n+        self.assertCountEqual(result, [foo1, foo2])\n     def test_or_with_lhs_slice(self):\n         qs1 = Classroom.objects.filter(has_blackboard=True)[:1]\n         qs2 = Classroom.objects.filter(has_blackboard=False)\n",
  "django__django-15161": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 5fdccc5..1d94c9d 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1755,6 +1755,13 @@ class ValueTests(TestCase):\n         Time.objects.update(time=Value(datetime.time(1), output_field=TimeField()))\n         self.assertEqual(Time.objects.get().time, datetime.time(1))\n \n+    def test_deconstruct_F(self):\n+        f_expression = F('field_name')\n+        path, args, kwargs = f_expression.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, ('field_name',))\n+        self.assertEqual(kwargs, {})\n+\n     def test_update_UUIDField_using_Value(self):\n         UUID.objects.create()\n         UUID.objects.update(uuid=Value(uuid.UUID('12345678901234567890123456789012'), output_field=UUIDField()))\n",
  "django__django-15268": "",
  "django__django-15277": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 11f86ed..1aeb587 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1847,6 +1847,34 @@ class ValueTests(TestCase):\n                 expr = Value(value)\n                 self.assertIsInstance(expr.output_field, output_field_type)\n \n+    def test_output_field_does_not_create_broken_validators(self):\n+        \"\"\"\n+        The output field for a given Value doesn't get cleaned & validated,\n+        however validators may still be instantiated for a given field type\n+        and this demonstrates that they don't throw an exception.\n+        \"\"\"\n+        value_types = [\n+            'test_string',\n+            True,\n+            42,\n+            3.14,\n+            datetime.date(2019, 5, 15),\n+            datetime.datetime(2019, 5, 15),\n+            datetime.time(3, 16),\n+            datetime.timedelta(1),\n+            Decimal('3.14'),\n+            b'',\n+            uuid.uuid4(),\n+        ]\n+        for value in value_types:\n+            with self.subTest(type=type(value)):\n+                field = Value(value)._resolve_output_field()\n+                # Ensure that clean method does not raise exceptions\n+                field.clean(value, model_instance=None)\n+            with self.subTest(type=type(value)):\n+                expr = Value(value)\n+                self.assertIsInstance(expr.output_field, output_field_type)\n+\n     def test_resolve_output_field_failure(self):\n         msg = 'Cannot resolve expression type, unknown output_field'\n         with self.assertRaisesMessage(FieldError, msg):\n",
  "django__django-15278": "",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..1a118d5 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -32,6 +32,15 @@ class BasicFieldTests(SimpleTestCase):\n         form_field = model_field.formfield(show_hidden_initial=False)\n         self.assertFalse(form_field.show_hidden_initial)\n \n+    def test_hash_immutability(self):\n+        field = models.IntegerField()\n+        field_hash = hash(field)\n+\n+        class MyModel(models.Model):\n+            rank = field\n+\n+        self.assertEqual(field_hash, hash(field))\n+\n     def test_field_repr(self):\n         \"\"\"\n         __repr__() of a field displays its name.\n",
  "django__django-15368": "",
  "django__django-15380": "",
  "django__django-15382": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex bd890ac..735e00b 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1906,7 +1906,28 @@ class ExistsTests(TestCase):\n         self.assertNotIn('ORDER BY', captured_sql)\n \n \n-class FieldTransformTests(TestCase):\n+from django.test import TestCase\n+from django.db.models import Exists, Q\n+from .models import MyModel, Manager\n+\n+class ExistsExpressionTests(TestCase):\n+    def test_negated_empty_exists_with_condition(self):\n+        manager = Manager.objects.create(name='test')\n+        # This query should not remove the WHERE clause despite an empty subquery\n+        qs = Manager.objects.filter(~Exists(Manager.objects.none()) & Q(pk=manager.pk))\n+        self.assertSequenceEqual(list(qs), [manager])\n+\n+    def test_negated_exists_with_empty_queryset(self):\n+        # Test the behavior when the subquery is empty, but there is a filter condition\n+        my_model_instance = MyModel.objects.create(name='test')\n+        qs = MyModel.objects.filter(~Exists(MyModel.objects.none()), name='test')\n+        self.assertSequenceEqual(list(qs), [my_model_instance])\n+\n+    def test_exists_with_non_empty_queryset(self):\n+        # Ensure EXISTS() still works with non-empty subqueries\n+        my_model_instance = MyModel.objects.create(name='test')\n+        qs = MyModel.objects.filter(Exists(MyModel.objects.filter(pk=my_model_instance.pk)), name='test')\n+        self.assertSequenceEqual(list(qs), [my_model_instance])\n \n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-15467": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex f5af59b..5b7845f 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -133,6 +133,25 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n         )\n \n     def test_radio_fields_ForeignKey(self):\n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {\"main_band\": admin.VERTICAL}\n+            def formfield_for_foreignkey(self, db_field, request, **kwargs):\n+                if db_field.name == 'main_band':\n+                    kwargs['empty_label'] = \"Custom empty label\"\n+                return super().formfield_for_foreignkey(db_field, request, **kwargs)\n+\n+        ma = MyModelAdmin(Event, admin.site)\n+        ff = ma.formfield_for_dbfield(Event._meta.get_field(\"main_band\"), request=None)\n+        self.assertEqual(ff.empty_label, \"Custom empty label\")\n+\n+    def test_radio_fields_ForeignKey_no_override(self):\n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {\"main_band\": admin.VERTICAL}\n+\n+        ma = MyModelAdmin(Event, admin.site)\n+        ff = ma.formfield_for_dbfield(Event._meta.get_field(\"main_band\"), request=None)\n+        # Since no empty_label is set, it should default to 'None' since 'main_band' is a blank field.\n+        self.assertEqual(ff.empty_label, \"None\")\n         ff = self.assertFormfield(\n             Event,\n             \"main_band\",\n",
  "django__django-15499": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 5df1b06..3162eab 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -129,6 +129,58 @@ class OptimizerTests(SimpleTestCase):\n             ],\n         )\n \n+    def test_create_alter_model_managers_with_no_initial_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Bar\", fields=[]),\n+                migrations.AlterModelManagers(\n+                    name=\"Bar\",\n+                    managers=[\n+                        (\"stuff\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    managers=[\n+                        (\"stuff\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n+    def test_create_alter_model_managers_with_existing_and_new_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\",\n+                    fields=[],\n+                    managers=[\n+                        (\"existing\", models.Manager()),\n+                    ],\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Baz\",\n+                    managers=[\n+                        (\"existing\", models.Manager()),\n+                        (\"new\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\",\n+                    fields=[],\n+                    managers=[\n+                        (\"existing\", models.Manager()),\n+                        (\"new\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n     def test_create_model_and_remove_model_options(self):\n         self.assertOptimizesTo(\n             [\n",
  "django__django-15525": "",
  "django__django-15561": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex b8137da..fecc71c 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -3973,7 +3973,31 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor:\n             editor.add_field(Author, new_field)\n \n-    @unittest.skipUnless(connection.vendor == \"postgresql\", \"PostgreSQL specific\")\n+    def test_alter_field_choices_noop_sqlite(self):\n+        \"\"\"\n+        This test verifies that altering a field's choices does not generate any SQL\n+        operations on a SQLite database.\n+        \"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            \n+        # Initial field without choices\n+        old_field = Author._meta.get_field(\"name\")\n+        \n+        # New field with added choices\n+        new_field_with_choices = CharField(\n+            choices=((\"Alice\", \"Alice\"), (\"Bob\", \"Bob\")),\n+            max_length=255,\n+        )\n+        new_field_with_choices.set_attributes_from_name(\"name\")\n+        \n+        # Test altering the field to add choices - expect zero queries\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field_with_choices, strict=True)\n+        \n+        # Test reverting the field back to no choices - expect zero queries\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, new_field_with_choices, old_field, strict=True)\n     def test_add_indexed_charfield(self):\n         field = CharField(max_length=255, db_index=True)\n         field.set_attributes_from_name(\"nom_de_plume\")\n",
  "django__django-15569": "diff --git a/tests/custom_lookups/tests.py b/tests/custom_lookups/tests.py\nindex 74c331a..5a88792 100644\n--- a/tests/custom_lookups/tests.py\n+++ b/tests/custom_lookups/tests.py\n@@ -326,7 +326,17 @@ class LookupTests(TestCase):\n \n \n class BilateralTransformTests(TestCase):\n-    def test_bilateral_upper(self):\n+    def test_lookup_cache_cleared_on_unregister(self):\n+        field = Article._meta.get_field(\"author\")\n+\n+        # Register a lookup and verify it's in the cache.\n+        with register_lookup(models.ForeignObject, Exactly):\n+            self.assertIn(\"exactly\", field.get_lookups())\n+\n+        # Unregister the lookup and verify the cache is cleared.\n+        models.ForeignObject._unregister_lookup(Exactly)\n+        field.get_lookups.cache_clear()  # Ensure manual cache clear is considered\n+        self.assertNotIn(\"exactly\", field.get_lookups())\n         with register_lookup(models.CharField, UpperBilateralTransform):\n             author1 = Author.objects.create(name=\"Doe\")\n             author2 = Author.objects.create(name=\"doe\")\n",
  "django__django-15572": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 188dca4..2c353c1 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -76,11 +76,62 @@ class TemplateReloadTests(SimpleTestCase):\n             },\n         )\n \n+    from django.test import override_settings\n+    from django.template import autoreload\n+\n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"DIRS\": [\"\"],\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            }\n+        ]\n+    )\n+    def test_template_dirs_ignore_empty_path(self):\n+        self.assertEqual(autoreload.get_template_directories(), set())\n+\n+    from django.test import override_settings\n+    from django.template import autoreload\n+\n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"DIRS\": [\"\", \"valid/path\", \"\"],\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            }\n+        ]\n+    )\n+    def test_template_dirs_with_mixed_empty_and_valid_paths(self):\n+        self.assertSetEqual(\n+            autoreload.get_template_directories(),\n+            {Path(\"valid/path\")},\n+        )\n+\n+    from django.test import override_settings\n+    from django.template import autoreload\n+\n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"DIRS\": [\"valid/path\", \"\"],\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            }\n+        ]\n+    )\n+    def test_template_dirs_with_valid_and_empty_paths(self):\n+        self.assertSetEqual(\n+            autoreload.get_template_directories(),\n+            {Path(\"valid/path\")},\n+        )\n+\n     @mock.patch(\"django.template.loaders.base.Loader.reset\")\n     def test_reset_all_loaders(self, mock_reset):\n         autoreload.reset_loaders()\n         self.assertEqual(mock_reset.call_count, 2)\n \n+    from django.test import override_settings\n+    from django.template import autoreload\n+\n     @override_settings(\n         TEMPLATES=[\n             {\n",
  "django__django-15731": "diff --git a/tests/basic/tests.py b/tests/basic/tests.py\nindex 902f114..fc83e2c 100644\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -1,3 +1,4 @@\n+\n import threading\n from datetime import datetime, timedelta\n from unittest import mock\n@@ -736,6 +737,28 @@ class ManagerTest(SimpleTestCase):\n             sorted(self.QUERYSET_PROXY_METHODS),\n         )\n \n+    def test_manager_method_bulk_create_signature(self):\n+        # Test the signature of the bulk_create method\n+        self.assertEqual(\n+            str(inspect.signature(Article.objects.bulk_create)),\n+            \"(objs, batch_size=None, ignore_conflicts=False, update_conflicts=False, \"\n+            \"update_fields=None, unique_fields=None)\"\n+        )\n+\n+    def test_manager_method_get_signature(self):\n+        # Test the signature of the get method\n+        self.assertEqual(\n+            str(inspect.signature(Article.objects.get)),\n+            \"(**kwargs)\"\n+        )\n+\n+    def test_manager_method_filter_signature(self):\n+        # Test the signature of the filter method\n+        self.assertEqual(\n+            str(inspect.signature(Article.objects.filter)),\n+            \"(*args, **kwargs)\"\n+        )\n+\n \n class SelectOnSaveTests(TestCase):\n     def test_select_on_save(self):\n",
  "django__django-15741": "diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex c6dbc53..97cb790 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -1,4 +1,7 @@\n+\n from datetime import datetime, time\n+from django.utils.translation import gettext_lazy\n+from django.utils.formats import get_format\n \n from django.template.defaultfilters import date\n from django.test import SimpleTestCase\n@@ -74,6 +77,11 @@ class DateTests(TimezoneTestCase):\n \n \n class FunctionTests(SimpleTestCase):\n+    def test_get_format_lazy(self):\n+        # This test verifies that get_format can accept a lazy string and returns the correct format.\n+        date_format = gettext_lazy(\"DATE_FORMAT\")\n+        self.assertEqual(get_format(date_format), \"N j, Y\")\n+\n     def test_date(self):\n         self.assertEqual(date(datetime(2005, 12, 29), \"d F Y\"), \"29 December 2005\")\n \n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..05e6cf4 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -390,7 +390,17 @@ class ProxyModelTests(TestCase):\n             repr(resp), \"<ProxyImprovement: ProxyImprovement:improve that>\"\n         )\n \n-    def test_proxy_load_from_fixture(self):\n+    def test_queryset_only_after_select_related_on_proxy(self):\n+        # Set up proxy models\n+        custom_model = ProxyCustomModel.objects.create(name=\"Test Name\")\n+        another_model = AnotherModel.objects.create(custom=custom_model)\n+        \n+        # Perform the query that was causing the issue\n+        try:\n+            result = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\").get()\n+            self.assertEqual(result.custom.name, \"Test Name\")\n+        except ValueError as e:\n+            self.fail(f\"QuerySet.only() after select_related() raised an unexpected ValueError: {e}\")\n         management.call_command(\"loaddata\", \"mypeople.json\", verbosity=0)\n         p = MyPerson.objects.get(pk=100)\n         self.assertEqual(p.name, \"Elvis Presley\")\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..b24d53c 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -154,10 +154,15 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n     def test_parameters(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n-            ([\"psql\", \"dbname\", \"--help\"], None),\n+            ([\"psql\", \"--help\", \"dbname\"], None),\n         )\n \n-    @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n+    def test_parameters_with_options(self):\n+        # Test that options are placed before the database name\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT * FROM table;\"]),\n+            ([\"psql\", \"-c\", \"SELECT * FROM table;\", \"dbname\"], None),\n+        )\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n \n",
  "django__django-15863": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 08f08e1..fd0eb92 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -31,6 +31,48 @@ class FloatformatTests(SimpleTestCase):\n         self.assertEqual(output, \"1.4 1.4\")\n \n \n+from decimal import Decimal\n+from django.test import SimpleTestCase\n+from django.utils.translation import override\n+\n+class TestFloatformatPrecision(SimpleTestCase):\n+    def test_decimal_precision(self):\n+        # Test to ensure that the precision of Decimal numbers is maintained.\n+        self.assertEqual(\n+            floatformat(Decimal(\"123456.123456789012345678901\"), 21),\n+            \"123456.123456789012345678901\",\n+        )\n+\n+    def test_large_decimal_precision(self):\n+        # Test large decimal number precision\n+        value = Decimal(\"12345678901234567890.12345678901234567890\")\n+        self.assertEqual(\n+            floatformat(value, 40),\n+            \"12345678901234567890.1234567890123456789000000000000000000000\",\n+        )\n+\n+    def test_small_decimal_precision(self):\n+        # Test small decimal number precision\n+        value = Decimal(\"0.00000000000000000012345678901234567890\")\n+        self.assertEqual(\n+            floatformat(value, 40),\n+            \"0.0000000000000000001234567890123456789000\",\n+        )\n+\n+    def test_rounding_decimal(self):\n+        # Test rounding behavior with decimal\n+        self.assertEqual(\n+            floatformat(Decimal(\"1.234567890123456789\"), 10),\n+            \"1.2345678901\",\n+        )\n+\n+    def test_no_decimal_specified(self):\n+        # Test when no decimal places are specified for Decimal\n+        self.assertEqual(\n+            floatformat(Decimal(\"123456.123456789012345678901\")),\n+            \"123456.1\",\n+        )\n+\n class FunctionTests(SimpleTestCase):\n     def test_inputs(self):\n         self.assertEqual(floatformat(7.7), \"7.7\")\n",
  "django__django-15930": "diff --git a/tests/expressions_case/tests.py b/tests/expressions_case/tests.py\nindex 696f4d0..c4fbe1b 100644\n--- a/tests/expressions_case/tests.py\n+++ b/tests/expressions_case/tests.py\n@@ -405,6 +405,16 @@ class CaseExpressionTests(TestCase):\n             [1, 4, 3, 3, 3, 2, 2],\n         )\n \n+    def test_annotate_with_negated_empty_q(self):\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+            )\n+        )\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n+\n     def test_annotate_with_empty_when(self):\n         objects = CaseTestModel.objects.annotate(\n             selected=Case(\n@@ -412,6 +422,16 @@ class CaseExpressionTests(TestCase):\n                 default=Value(\"not selected\"),\n             )\n         )\n+\n+    def test_annotate_with_negated_empty_q(self):\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+            )\n+        )\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n         self.assertEqual(len(objects), CaseTestModel.objects.count())\n         self.assertTrue(all(obj.selected == \"not selected\" for obj in objects))\n \n",
  "django__django-15987": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 5ac9ab9..200f5fc 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -1,8 +1,11 @@\n+\n # Unittests for fixtures.\n import json\n import os\n import re\n from io import StringIO\n+from django.core.management import call_command\n+from django.test.utils import override_settings\n from pathlib import Path\n \n from django.core import management, serializers\n@@ -556,7 +559,24 @@ class TestFixtures(TestCase):\n             management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n \n     @override_settings(FIXTURE_DIRS=[os.path.join(_cur_dir, \"fixtures\")])\n-    def test_fixture_dirs_with_default_fixture_path(self):\n+    @override_settings(FIXTURE_DIRS=[Path(_cur_dir) / \"fixtures\"])\n+    def test_fixture_dirs_with_default_fixture_path_as_pathlib(self):\n+        \"\"\"\n+        settings.FIXTURE_DIRS cannot contain a default fixtures directory\n+        for application (app/fixtures) in order to avoid repeated fixture loading.\n+        \"\"\"\n+        msg = (\n+            \"'%s' is a default fixture directory for the '%s' app \"\n+            \"and cannot be listed in settings.FIXTURE_DIRS.\"\n+            % (os.path.join(_cur_dir, \"fixtures\"), \"fixtures_regress\")\n+        )\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n+\n+    @override_settings(FIXTURE_DIRS=[Path(_cur_dir) / \"fixtures_1\", Path(_cur_dir) / \"fixtures_2\"])\n+    def test_loaddata_with_valid_fixture_dirs_as_pathlib(self):\n+        \"\"\"Test loaddata with valid Path instances in FIXTURE_DIRS.\"\"\"\n+        management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n         \"\"\"\n         settings.FIXTURE_DIRS cannot contain a default fixtures directory\n         for application (app/fixtures) in order to avoid repeated fixture loading.\n",
  "django__django-16032": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex bcf8df9..4a29695 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -989,6 +989,24 @@ class NonAggregateAnnotationTestCase(TestCase):\n             publisher_books_qs, [{\"name\": \"Sams\"}, {\"name\": \"Morgan Kaufmann\"}]\n         )\n \n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        self.assertCountEqual(\n+            publisher_books_qs, [{\"name\": \"Sams\"}, {\"name\": \"Morgan Kaufmann\"}]\n+        )\n+\n     def test_annotation_exists_aggregate_values_chaining(self):\n         qs = (\n             Book.objects.values(\"publisher\")\n@@ -1001,6 +1019,24 @@ class NonAggregateAnnotationTestCase(TestCase):\n             .values_list(\"max_pubdate\", flat=True)\n             .order_by(\"max_pubdate\")\n         )\n+        self.assertCountEqual(\n+            publisher_books_qs, [{\"name\": \"Sams\"}, {\"name\": \"Morgan Kaufmann\"}]\n+        )\n+\n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n         self.assertCountEqual(\n             qs,\n             [\n",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..8b1205e 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2406,6 +2406,11 @@ class CombinableTests(SimpleTestCase):\n             object() ^ Combinable()\n \n \n+from django.db.models import IntegerField, DecimalField, FloatField, AutoField\n+from django.db.models.expressions import CombinedExpression, Expression\n+from django.db.models.functions import Combinable\n+from django.test import SimpleTestCase\n+\n class CombinedExpressionTests(SimpleTestCase):\n     def test_resolve_output_field_number(self):\n         tests = [\n@@ -2416,7 +2421,7 @@ class CombinedExpressionTests(SimpleTestCase):\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV, Combinable.MOD]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..50336f1 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib import admin\n@@ -21,7 +22,9 @@ from django.db.models import F, Field, IntegerField\n from django.db.models.functions import Upper\n from django.db.models.lookups import Contains, Exact\n from django.template import Context, Template, TemplateSyntaxError\n-from django.test import TestCase, override_settings\n+from unittest import mock\n+from django.db import DatabaseError\n+from django.test import TestCase, override_settings, skipUnlessDBFeature\n from django.test.client import RequestFactory\n from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup\n from django.urls import reverse\n@@ -400,7 +403,60 @@ class ChangeListTests(TestCase):\n         with self.assertRaises(IncorrectLookupParameters):\n             m.get_changelist_instance(request)\n \n-    def test_custom_paginator(self):\n+    @skipUnlessDBFeature(\"supports_transactions\")\n+    def test_list_editable_atomicity(self):\n+        \"\"\"\n+        Test that list_editable changes in changelist_view are atomic and wrapped in a transaction.\n+        \"\"\"\n+        a = Swallow.objects.create(origin=\"Swallow A\", load=4, speed=1)\n+        b = Swallow.objects.create(origin=\"Swallow B\", load=2, speed=2)\n+\n+        self.client.force_login(self.superuser)\n+        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n+        data = {\n+            \"form-TOTAL_FORMS\": \"2\",\n+            \"form-INITIAL_FORMS\": \"2\",\n+            \"form-MIN_NUM_FORMS\": \"0\",\n+            \"form-MAX_NUM_FORMS\": \"1000\",\n+            \"form-0-uuid\": str(a.pk),\n+            \"form-1-uuid\": str(b.pk),\n+            \"form-0-load\": \"9.0\",\n+            \"form-0-speed\": \"3.0\",\n+            \"form-1-load\": \"5.0\",\n+            \"form-1-speed\": \"1.0\",\n+            \"_save\": \"Save\",\n+        }\n+        \n+        # Simulate a DatabaseError on the first log_change call to test atomicity\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\", side_effect=DatabaseError\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        \n+        # Original values should be preserved due to transaction rollback\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+\n+        # Simulate a DatabaseError on the second log_change call to test partial successes\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\",\n+            side_effect=[None, DatabaseError],\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        \n+        # Original values should be preserved due to transaction rollback\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n         new_parent = Parent.objects.create(name=\"parent\")\n         for i in range(1, 201):\n             Child.objects.create(name=\"name %s\" % i, parent=new_parent)\n",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..96979ef 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2400,7 +2400,16 @@ class MakeMigrationsTests(MigrationTestBase):\n         ):\n             call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n \n-    def test_makemigrations_migration_path_output(self):\n+    def test_makemigrations_check_no_migrations_created(self):\n+        \"\"\"\n+        makemigrations --check should not create migration files when changes\n+        are detected. It should exit with a non-zero status instead.\n+        \"\"\"\n+        with self.temporary_migration_module() as tmpdir:\n+            with self.assertRaises(SystemExit):\n+                call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+            # Verify that no migration files were created\n+            self.assertFalse(os.listdir(tmpdir), \"Migration files were created when they should not be.\")\n         \"\"\"\n         makemigrations should print the relative paths to the migrations unless\n         they are outside of the current tree, in which case the absolute path\n",
  "django__django-16136": "diff --git a/tests/async/tests.py b/tests/async/tests.py\nindex 72e103e..6251a62 100644\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -1,3 +1,4 @@\n+\n import asyncio\n import os\n from unittest import mock\n@@ -6,7 +7,9 @@ from asgiref.sync import async_to_sync\n \n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n-from django.http import HttpResponse\n+from django.http import HttpResponse, HttpResponseNotAllowed\n+from django.test import RequestFactory\n+import asyncio\n from django.test import SimpleTestCase\n from django.utils.asyncio import async_unsafe\n from django.views.generic.base import View\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..afc9e00 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,4 +1,6 @@\n+\n import datetime\n+import urllib.parse\n import re\n from unittest import mock\n \n@@ -22,6 +24,7 @@ from django.core.mail import EmailMultiAlternatives\n from django.forms import forms\n from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n+from django.urls import reverse\n from django.utils import translation\n from django.utils.text import capfirst\n from django.utils.translation import gettext as _\n@@ -892,6 +895,46 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_with_pk(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin using pk.\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.pk,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n     def test_custom_form(self):\n         class CustomUserChangeForm(UserChangeForm):\n             class Meta(UserChangeForm.Meta):\n",
  "django__django-16145": "",
  "django__django-16255": "",
  "django__django-16315": "diff --git a/tests/bulk_create/models.py b/tests/bulk_create/models.py\nindex c5f5c07..2b5dcf9 100644\n--- a/tests/bulk_create/models.py\n+++ b/tests/bulk_create/models.py\n@@ -59,6 +59,11 @@ class Pizzeria(Restaurant):\n     pass\n \n \n+class FieldsWithDbColumns(models.Model):\n+    rank = models.IntegerField(unique=True, db_column=\"rAnK\")\n+    name = models.CharField(max_length=15, null=True, db_column=\"oTheRNaMe\")\n+\n+\n class State(models.Model):\n     two_letter_code = models.CharField(max_length=2, primary_key=True)\n \n@@ -79,6 +84,11 @@ class NoFields(models.Model):\n     pass\n \n \n+class FieldsWithDbColumns(models.Model):\n+    rank = models.IntegerField(unique=True, db_column=\"rAnK\")\n+    name = models.CharField(max_length=15, null=True, db_column=\"oTheRNaMe\")\n+\n+\n class SmallAutoFieldModel(models.Model):\n     id = models.SmallAutoField(primary_key=True)\n \n",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..aa8005a 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,61 @@\n+\n+class CustomUserCreationFormTests(TestCase):\n+    def test_custom_form_saves_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization = Organization.objects.create(name=\"organization 1\")\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertTrue(form.is_valid())\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization])\n+\n+    def test_custom_form_saves_multiple_many_to_many_fields(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization1 = Organization.objects.create(name=\"organization 1\")\n+        organization2 = Organization.objects.create(name=\"organization 2\")\n+\n+        data = {\n+            \"username\": \"testmultiple@example.com\",\n+            \"password1\": \"testpassword\",\n+            \"password2\": \"testpassword\",\n+            \"orgs\": [str(organization1.pk), str(organization2.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertTrue(form.is_valid())\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization1, organization2])\n+\n+    def test_custom_form_with_no_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        data = {\n+            \"username\": \"testnomany@example.com\",\n+            \"password1\": \"testpassword\",\n+            \"password2\": \"testpassword\",\n+            \"orgs\": [],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertTrue(form.is_valid())\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [])\n+\n import datetime\n import re\n import urllib.parse\n@@ -34,6 +92,7 @@ from .models.custom_user import (\n     ExtensionUser,\n )\n from .models.with_custom_email_field import CustomEmailField\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n from .models.with_integer_username import IntegerUsernameUser\n from .settings import AUTH_TEMPLATES\n \n",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..4e14a5c 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.test import TestCase\n@@ -236,6 +237,20 @@ class TimesinceTests(TestCase):\n             with self.subTest():\n                 self.assertEqual(timesince(t, value), expected)\n \n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_timesince_with_tz_aware_datetime(self):\n+        now = timezone.now()\n+        past_aware = now - datetime.timedelta(days=45)  # More than a month ago\n+        self.assertEqual(timesince(past_aware), \"1\\xa0month, 2\\xa0weeks\")\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_timesince_with_tz_naive_datetime(self):\n+        now = datetime.datetime.now()\n+        past_naive = now - datetime.timedelta(days=45)  # More than a month ago\n+        self.assertEqual(timesince(past_naive, now), \"1\\xa0month, 2\\xa0weeks\")\n+\n     def test_depth_invalid(self):\n         msg = \"depth must be greater than 0.\"\n         with self.assertRaisesMessage(ValueError, msg):\n",
  "django__django-16454": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 8d0729b..9318be2 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -468,8 +468,71 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertNoOutput(err)\n         self.assertEqual(out.strip(), \"Set foo\")\n \n+from django.core.management import CommandError\n+from django.test import SimpleTestCase\n+from django.core.management.base import BaseCommand\n+import argparse\n \n-class UtilsTests(SimpleTestCase):\n+class SubparserCommandTests(SimpleTestCase):\n+    def setUp(self):\n+        class Command(BaseCommand):\n+            def add_arguments(self, parser):\n+                # Set up the subparsers with CommandParser for error handling\n+                subparsers = parser.add_subparsers(parser_class=argparse.ArgumentParser, required=True)\n+                create_parser = subparsers.add_parser('create')\n+                create_parser.add_argument('name')\n+\n+            def handle(self, *args, **options):\n+                pass\n+\n+        self.Command = Command\n+\n+    def test_missing_subparser(self):\n+        # Test missing the subparser argument entirely\n+        out, err = self.run_manage(['cheeses'])\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertIn(\"manage.py cheeses: error: the following arguments are required: {create}\", err_lines)\n+\n+    def test_missing_subparser_argument(self):\n+        # Test missing a required argument for a subparser\n+        out, err = self.run_manage(['cheeses', 'create'])\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertIn(\"manage.py cheeses create: error: the following arguments are required: name\", err_lines)\n+\n+    def test_invalid_subparser_argument_type(self):\n+        # Test invalid type for a subparser argument\n+        class CommandWithTypedArgument(BaseCommand):\n+            def add_arguments(self, parser):\n+                subparsers = parser.add_subparsers(parser_class=argparse.ArgumentParser)\n+                foo_parser = subparsers.add_parser('foo')\n+                foo_parser.add_argument('bar', type=int)\n+\n+            def handle(self, *args, **options):\n+                pass\n+\n+        out, err = self.run_manage(['foo', 'twelve'])\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertIn(\"manage.py foo: error: argument bar: invalid int value: 'twelve'\", err_lines)\n+\n+    def run_manage(self, args):\n+        # Mock a function to simulate running the management command\n+        # This function should mimic Django's call_command or similar\n+        from io import StringIO\n+        import sys\n+\n+        old_stdout, old_stderr = sys.stdout, sys.stderr\n+        sys.stdout, sys.stderr = StringIO(), StringIO()\n+\n+        try:\n+            self.Command().run_from_argv(['manage.py'] + args)\n+            out, err = sys.stdout.getvalue(), sys.stderr.getvalue()\n+        finally:\n+            sys.stdout, sys.stderr = old_stdout, old_stderr\n+\n+        return out, err\n     def test_no_existent_external_program(self):\n         msg = \"Error executing a_42_command_that_doesnt_exist_42\"\n         with self.assertRaisesMessage(CommandError, msg):\n",
  "django__django-16485": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 1623d39..ba4b3da 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -100,9 +100,31 @@ class FunctionTests(SimpleTestCase):\n                 THOUSAND_SEPARATOR=\"!\",\n             ):\n                 self.assertEqual(floatformat(66666.666, \"2gu\"), \"66!666.67\")\n-                self.assertEqual(floatformat(66666.666, \"2ug\"), \"66!666.67\")\n-            # Invalid suffix.\n-            self.assertEqual(floatformat(66666.666, \"u2\"), \"66666.666\")\n+from decimal import Decimal\n+from django.template.defaultfilters import floatformat\n+\n+class FloatFormatTests(SimpleTestCase):\n+\n+    def test_issue_scenario(self):\n+        # Test the scenarios mentioned in the issue description\n+        self.assertEqual(floatformat(\"0.00\", 0), \"0\")\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), 0), \"0\")\n+\n+    def test_additional_zero_cases(self):\n+        # Additional cases with zero in different contexts\n+        self.assertEqual(floatformat(\"0.0\", 1), \"0.0\")\n+        self.assertEqual(floatformat(\"0\", 1), \"0.0\")\n+        self.assertEqual(floatformat(Decimal(\"0.0\"), 1), \"0.0\")\n+        self.assertEqual(floatformat(Decimal(\"0\"), 1), \"0.0\")\n+        self.assertEqual(floatformat(\"0.000\", 2), \"0.00\")\n+        self.assertEqual(floatformat(Decimal(\"0.000\"), 2), \"0.00\")\n+\n+    def test_negative_decimal_places(self):\n+        # Ensure negative decimal places don't break with zero values\n+        self.assertEqual(floatformat(\"0.000\", -1), \"0\")\n+        self.assertEqual(floatformat(Decimal(\"0.000\"), -1), \"0\")\n+        self.assertEqual(floatformat(\"0.00\", -2), \"0\")\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), -2), \"0\")\n \n     def test_zero_values(self):\n         self.assertEqual(floatformat(0, 6), \"0.000000\")\n",
  "django__django-16493": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex 20567e7..33325ae 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -93,6 +93,13 @@ class GetStorageClassTests(SimpleTestCase):\n \n class FileSystemStorageTests(unittest.TestCase):\n     def test_deconstruction(self):\n+        \"\"\"\n+        Test callable that returns default_storage is not omitted during deconstruction.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"storage_callable_default\").deconstruct()\n+        storage = kwargs[\"storage\"]\n+        self.assertIs(storage, callable_default_storage)\n         path, args, kwargs = temp_storage.deconstruct()\n         self.assertEqual(path, \"django.core.files.storage.FileSystemStorage\")\n         self.assertEqual(args, ())\n@@ -1010,6 +1017,13 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         self.assertIsInstance(obj.storage_callable_class.storage, BaseStorage)\n \n     def test_deconstruction(self):\n+        \"\"\"\n+        Test callable that returns default_storage is not omitted during deconstruction.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"storage_callable_default\").deconstruct()\n+        storage = kwargs[\"storage\"]\n+        self.assertIs(storage, callable_default_storage)\n         \"\"\"\n         Deconstructing gives the original callable, not the evaluated value.\n         \"\"\"\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..c4849c3 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,5 +1,8 @@\n+\n import datetime\n \n+from django.contrib.auth import get_permission_codename\n+from .tests import AdminViewBasicTestCase, get_perm\n from django.contrib.admin import ModelAdmin\n from django.contrib.admin.templatetags.admin_list import date_hierarchy\n from django.contrib.admin.templatetags.admin_modify import submit_row\n@@ -33,6 +36,43 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n         self.assertIs(template_context[\"extra\"], True)\n         self.assertIs(template_context[\"show_save\"], True)\n \n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        \"\"\"\n+        Test that 'show_save_as_new' button is not shown without add permission.\n+        \"\"\"\n+        # User with only change permission\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        # User with both add and change permissions\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n+\n     def test_override_show_save_and_add_another(self):\n         request = self.request_factory.get(\n             reverse(\"admin:auth_user_change\", args=[self.superuser.pk]),\n",
  "django__django-16560": "",
  "django__django-16569": "",
  "django__django-16595": "",
  "django__django-16612": "",
  "django__django-16642": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 499356e..5a61b97 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -256,6 +256,16 @@ class FileResponseTests(SimpleTestCase):\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n         )\n+        test_tuples_additional = (\n+            (\".tar.br\", \"application/x-brotli\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n+        )\n+        for extension, mimetype in test_tuples_additional:\n+            with self.subTest(ext=extension):\n+                with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n+                    response = FileResponse(tmp)\n+                self.assertEqual(response.headers[\"Content-Type\"], mimetype)\n+                self.assertFalse(response.has_header(\"Content-Encoding\"))\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n                 with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n",
  "django__django-16661": "",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..28f4558 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -922,7 +922,32 @@ class WriterTests(SimpleTestCase):\n             output,\n         )\n \n-    def test_migration_file_header_comments(self):\n+    def test_import_ordering_in_migration_files(self):\n+        \"\"\"\n+        Test that the imports in the migration files are ordered correctly\n+        according to Django coding style and isort defaults.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield2\",\n+                        models.FloatField(default=time.time),\n+                    ),\n+                ]\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+\n+        # Ensure imports are correctly ordered\n+        self.assertIn(\n+            \"import datetime\\nimport time\\nfrom django.db import migrations, models\\n\",\n+            output,\n+        )\n         \"\"\"\n         Test comments at top of file.\n         \"\"\"\n",
  "django__django-16801": "",
  "django__django-16819": "",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..de4674d 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -805,8 +805,20 @@ class SystemChecksTestCase(SimpleTestCase):\n             )\n         ]\n         self.assertEqual(errors, expected)\n+    \n+    def test_readonly_field_with_nonexistent_field_name(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            readonly_fields = (\"nonexistent\",)\n \n-    def test_nonexistent_field_on_inline(self):\n+        errors = SongAdmin(Song, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' refers to 'nonexistent', which is not a callable, an attribute of 'SongAdmin', or an attribute of 'admin_checks.Song'.\",\n+                obj=SongAdmin,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n         class CityInline(admin.TabularInline):\n             model = City\n             readonly_fields = [\"i_dont_exist\"]  # Missing attribute\n",
  "django__django-16901": "",
  "django__django-17029": "",
  "django__django-17084": "",
  "django__django-17087": "",
  "django__django-7530": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex a74680b..20dc890 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -641,6 +641,22 @@ class MakeMigrationsTests(MigrationTestBase):\n                 allow_migrate.assert_called_with('other', 'migrations', model_name='UnicodeModel')\n                 self.assertEqual(ensure_schema.call_count, 4)\n \n+    def test_makemigrations_router_calls_correct_app_model_pairs(self):\n+        \"\"\"\n+        Test that makemigrations calls router.allow_migrate() with the correct\n+        app and model pairs.\n+        \"\"\"\n+        with self.settings(INSTALLED_APPS=['migrations', 'migrations2']):\n+            with mock.patch('django.db.migrations.operations.base.Operation.allow_migrate') as allow_migrate:\n+                call_command('makemigrations', verbosity=0)\n+                self.assertGreater(len(allow_migrate.mock_calls), 0)\n+                for mock_call in allow_migrate.mock_calls:\n+                    _, call_args, call_kwargs = mock_call\n+                    connection_alias, app_label = call_args\n+                    self.assertIn(connection_alias, ['default', 'other'])\n+                    # Raises an error if invalid app_label/model_name occurs.\n+                    apps.get_app_config(app_label).get_model(call_kwargs['model_name'])\n+\n     def test_failing_migration(self):\n         # If a migration fails to serialize, it shouldn't generate an empty file. #21280\n         apps.register_model('migrations', UnserializableModel)\n",
  "django__django-9296": "",
  "matplotlib__matplotlib-13989": "",
  "matplotlib__matplotlib-14623": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c9ad946..0489221 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -930,6 +930,28 @@ def test_inverted_limits():\n     assert ax.get_ylim() == (-3, 5)\n     plt.close()\n \n+def test_invert_log_scale_axis():\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+\n+    # Test inverting a log scale axis by setting its limits\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(10, 1)\n+    \n+    # Assert the limits are set correctly with the inverted order\n+    assert ax.get_ylim() == (10, 1)\n+\n+    # Additional test to verify the behavior with actual data\n+    y = np.linspace(1000, 1, 100)\n+    x = np.exp(-np.linspace(0, 1, y.size))\n+    ax.plot(x, y)\n+\n+    # Reassert after plotting that the limits remain inverted\n+    assert ax.get_ylim() == (10, 1)\n+\n+    plt.close()\n+\n     fig, ax = plt.subplots()\n     ax.invert_yaxis()\n     ax.plot([-5, -3, 2, 4], [1, 2, -3, 5])\n@@ -938,6 +960,28 @@ def test_inverted_limits():\n     assert ax.get_ylim() == (5, -3)\n     plt.close()\n \n+def test_invert_log_scale_axis():\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+\n+    # Test inverting a log scale axis by setting its limits\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(10, 1)\n+    \n+    # Assert the limits are set correctly with the inverted order\n+    assert ax.get_ylim() == (10, 1)\n+\n+    # Additional test to verify the behavior with actual data\n+    y = np.linspace(1000, 1, 100)\n+    x = np.exp(-np.linspace(0, 1, y.size))\n+    ax.plot(x, y)\n+\n+    # Reassert after plotting that the limits remain inverted\n+    assert ax.get_ylim() == (10, 1)\n+\n+    plt.close()\n+\n \n @image_comparison(baseline_images=['nonfinite_limits'])\n def test_nonfinite_limits():\n",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..b845889 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6961,7 +6961,41 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n \n-def test_shared_axes_retick():\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear(fig_test, fig_ref):\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    \n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    # Reference figure without clearing axes\n+    axs_ref = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_ref.flat:\n+        ax.plot(x, y)\n+\n+    # Test figure with clearing axes\n+    axs_test = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_test.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n+\n+    # Check that shared axes retain correct tick visibility\n+    for i, ax in enumerate(axs_ref.flat):\n+        # Compare visible ticks\n+        ref_ticks = ax.get_xticklabels(which='both')\n+        test_ticks = axs_test.flat[i].get_xticklabels(which='both')\n+        for ref_tick, test_tick in zip(ref_ticks, test_ticks):\n+            assert ref_tick.get_visible() == test_tick.get_visible()\n+        # Compare top and right side ticks which should be hidden\n+        ref_top_ticks = ax.xaxis.get_tick_params(which='both')['top']\n+        ref_right_ticks = ax.yaxis.get_tick_params(which='both')['right']\n+        test_top_ticks = axs_test.flat[i].xaxis.get_tick_params(which='both')['top']\n+        test_right_ticks = axs_test.flat[i].yaxis.get_tick_params(which='both')['right']\n+        assert ref_top_ticks == test_top_ticks\n+        assert ref_right_ticks == test_right_ticks\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n \n     for ax in axs.flat:\n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "diff --git a/lib/matplotlib/tests/test_category.py b/lib/matplotlib/tests/test_category.py\nindex 40c4dcf..d8ebbf1 100644\n--- a/lib/matplotlib/tests/test_category.py\n+++ b/lib/matplotlib/tests/test_category.py\n@@ -311,4 +311,25 @@ def test_hist():\n     fig, ax = plt.subplots()\n     n, bins, patches = ax.hist(['a', 'b', 'a', 'c', 'ff'])\n     assert n.shape == (10,)\n-    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n+\n+\n+def test_no_deprecation_on_empty_data():\n+    \"\"\"\n+    Smoke test to check that no deprecation warning is emitted. See #22640.\n+    \"\"\"\n+    import matplotlib.pyplot as plt\n+    f, ax = plt.subplots()\n+    ax.xaxis.update_units([\"a\", \"b\"])\n+    ax.plot([], [])\n+\n+\n+def test_convert_units_on_empty_data():\n+    \"\"\"\n+    Test that converting units on empty data does not raise a warning or error.\n+    \"\"\"\n+    import matplotlib.pyplot as plt\n+    f, ax = plt.subplots()\n+    ax.xaxis.update_units([\"a\", \"b\"])\n+    converted_units = ax.convert_xunits([])\n+    assert converted_units.size == 0\n+    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n",
  "matplotlib__matplotlib-22865": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex 2c28713..c22f338 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -912,11 +912,33 @@ def test_proportional_colorbars():\n     extends = ['neither', 'both']\n     spacings = ['uniform', 'proportional']\n     fig, axs = plt.subplots(2, 2)\n-    for i in range(2):\n-        for j in range(2):\n-            CS3 = axs[i, j].contourf(X, Y, Z, levels, cmap=cmap, norm=norm,\n-                                     extend=extends[i])\n-            fig.colorbar(CS3, spacing=spacings[j], ax=axs[i, j])\n+from matplotlib import pyplot as plt, colors as mcolors\n+import numpy as np\n+from matplotlib.colorbar import Colorbar\n+import pytest\n+\n+@pytest.mark.parametrize(\"extend, coloroffset, res\", [\n+    ('both', 1, [np.array([[0., 0.], [0., 1.]]),\n+                 np.array([[1., 0.], [1., 1.]]),\n+                 np.array([[2., 0.], [2., 1.]])]),\n+    ('min', 0, [np.array([[0., 0.], [0., 1.]]),\n+                np.array([[1., 0.], [1., 1.]])]),\n+    ('max', 0, [np.array([[1., 0.], [1., 1.]]),\n+                np.array([[2., 0.], [2., 1.]])]),\n+    ('neither', -1, [np.array([[1., 0.], [1., 1.]])])\n+])\n+def test_colorbar_extend_drawedges(extend, coloroffset, res):\n+    cmap = plt.get_cmap(\"viridis\")\n+    bounds = np.arange(3)\n+    nb_colors = len(bounds) + coloroffset\n+    colors = cmap(np.linspace(100, 255, nb_colors).astype(int))\n+    cmap, norm = mcolors.from_levels_and_colors(bounds, colors, extend=extend)\n+\n+    plt.figure(figsize=(5, 1))\n+    ax = plt.subplot(111)\n+    cbar = Colorbar(ax, cmap=cmap, norm=norm, orientation='horizontal',\n+                    drawedges=True)\n+    assert np.all(np.equal(cbar.dividers.get_segments(), res))\n \n \n def test_negative_boundarynorm():\n",
  "matplotlib__matplotlib-23299": "",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..c152268 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -15,12 +15,23 @@ from matplotlib.patches import Circle\n \n import matplotlib.pyplot as plt\n import numpy as np\n+from matplotlib.testing.decorators import check_figures_equal\n \n \n mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n \n+@check_figures_equal()\n+def test_set_visible_false_3d(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot(111, projection='3d')\n+    ax_ref = fig_ref.add_subplot(111, projection='3d')\n+    \n+    ax_test.scatter(1, 1, 1)\n+    ax_test.set_visible(False)  # This should make the entire subplot invisible\n+\n+    ax_ref.scatter(1, 1, 1)  # Reference subplot remains visible\n+\n def test_aspect_equal_error():\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..2ca9e81 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -149,6 +149,36 @@ def test_rotate_rect_draw(fig_test, fig_ref):\n     assert rect_test.get_angle() == angle\n \n \n+@check_figures_equal(extensions=['png'])\n+def test_dash_offset_patch_objects(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n+\n+    # Define rectangle parameters\n+    loc = (0.1, 0.1)\n+    width, height = 0.8, 0.8\n+\n+    # Reference rectangles using Line2D behavior\n+    rect_ref = Rectangle(loc, width, height, linewidth=3, edgecolor='b', linestyle=(0, (6, 6)))\n+    rect_ref2 = Rectangle(loc, width, height, linewidth=3, edgecolor='r', linestyle=(6, (6, 6)))\n+\n+    # Add to reference axes\n+    ax_ref.add_patch(rect_ref)\n+    ax_ref.add_patch(rect_ref2)\n+    \n+    # Test rectangles with expected behavior in patches\n+    rect_test = Rectangle(loc, width, height, linewidth=3, edgecolor='b', linestyle=(0, (6, 6)))\n+    rect_test2 = Rectangle(loc, width, height, linewidth=3, edgecolor='r', linestyle=(6, (6, 6)))\n+\n+    # Add to test axes\n+    ax_test.add_patch(rect_test)\n+    ax_test.add_patch(rect_test2)\n+\n+import matplotlib.pyplot as plt\n+from matplotlib.patches import Rectangle\n+from matplotlib.testing.decorators import check_figures_equal\n+import numpy as np\n+\n def test_negative_rect():\n     # These two rectangles have the same vertices, but starting from a\n     # different point.  (We also drop the last vertex, which is a duplicate.)\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..5cc5e5c 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2866,9 +2866,44 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+from matplotlib.patches import Rectangle\n+import pytest\n \n-@image_comparison(['stackplot_test_baseline'], remove_text=True)\n-def test_stackplot_baseline():\n+def test_stackplot_does_not_change_axes_cycler():\n+    # Create some data\n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    \n+    # Create a figure and axes\n+    fig, ax = plt.subplots()\n+    \n+    # Plot a line and a rectangle with color cycle references\n+    ax.plot([1, 3], [1, 3], color='C0')\n+    initial_color_cycle = ax._get_lines.prop_cycler\n+    \n+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))\n+    \n+    # Call stackplot which should not raise an error and should not change the color cycle\n+    ax.stackplot([1, 2, 3], my_data, colors=['C2', 'C3', 'C4'])\n+    \n+    # Check that the color cycle is unchanged\n+    assert initial_color_cycle == ax._get_lines.prop_cycler\n+\n+@pytest.mark.parametrize(\"colors\", [['C0', 'C1', 'C2'], ['C3', 'C4', 'C5']])\n+def test_stackplot_with_color_aliases(colors):\n+    # Create some data\n+    x = np.arange(1, 4)\n+    y = np.array([[1, 2, 3], [2, 3, 4], [3, 4, 5]])\n+    \n+    # Create a figure and axes\n+    fig, ax = plt.subplots()\n+    \n+    # Call stackplot with color aliases\n+    ax.stackplot(x, y, colors=colors)\n+    \n+    # Check for successful call (no ValueError should be raised)\n+    plt.close(fig)\n     np.random.seed(0)\n \n     def layers(n, m):\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 45f9c04..ba7dcb2 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -15,8 +15,59 @@ from matplotlib.offsetbox import (\n     AnchoredOffsetbox, AnnotationBbox, AnchoredText, DrawingArea, OffsetBox,\n     OffsetImage, TextArea, _get_packed_offsets)\n \n-\n-@image_comparison(['offsetbox_clipping'], remove_text=True)\n+@pytest.mark.parametrize(\"align\", [\"baseline\", \"bottom\", \"top\", \"left\", \"right\", \"center\"])\n+def test_hpacker_alignments(align):\n+    fig = plt.figure(dpi=72)\n+    x1, y1 = 10, 30\n+    x2, y2 = 10, 20\n+    r1 = DrawingArea(x1, y1)\n+    r2 = DrawingArea(x2, y2)\n+    \n+    hpacker = HPacker(children=[r1, r2], pad=0, sep=0, align=align)\n+    renderer = fig.canvas.get_renderer()\n+    \n+    # HPacker\n+    *extents, offset_pairs = hpacker.get_extent_offsets(renderer)\n+    # width, height, xdescent, ydescent\n+    assert_allclose((x1 + x2, max(y1, y2), 0, 0), extents)\n+    \n+    # Internal element placement\n+    if align in (\"baseline\", \"left\", \"bottom\"):\n+        y_height = 0\n+    elif align in (\"right\", \"top\"):\n+        y_height = y1 - y2\n+    elif align == \"center\":\n+        y_height = (y1 - y2) / 2\n+        \n+    # x-offsets, y-offsets\n+    assert_allclose([(0, y_height), (x1, 0)], offset_pairs)\n+\n+@pytest.mark.parametrize(\"align\", [\"baseline\", \"bottom\", \"top\", \"left\", \"right\", \"center\"])\n+def test_vpacker_alignments(align):\n+    fig = plt.figure(dpi=72)\n+    x1, y1 = 10, 30\n+    x2, y2 = 20, 60\n+    r1 = DrawingArea(x1, y1)\n+    r2 = DrawingArea(x2, y2)\n+    \n+    vpacker = VPacker(children=[r1, r2], pad=0, sep=0, align=align)\n+    renderer = fig.canvas.get_renderer()\n+    \n+    # VPacker\n+    *extents, offset_pairs = vpacker.get_extent_offsets(renderer)\n+    # width, height, xdescent, ydescent\n+    assert_allclose([max(x1, x2), y1 + y2, 0, max(y1, y2)], extents)\n+    \n+    # Internal element placement\n+    if align in (\"baseline\", \"left\", \"bottom\"):\n+        x_height = 0\n+    elif align in (\"right\", \"top\"):\n+        x_height = x2 - x1\n+    elif align == \"center\":\n+        x_height = (x2 - x1) / 2\n+        \n+    # x-offsets, y-offsets\n+    assert_allclose([(x_height, 0), (0, -y1)], offset_pairs)\n def test_offsetbox_clipping():\n     # - create a plot\n     # - put an AnchoredOffsetbox with a child DrawingArea\n",
  "matplotlib__matplotlib-24627": "",
  "matplotlib__matplotlib-24637": "",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..2caf10f 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -20,6 +20,12 @@ import matplotlib.scale as mscale\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n \n \n+import numpy as np\n+import pytest\n+from matplotlib import colors as mcolors\n+from numpy.testing import assert_array_equal, assert_array_almost_equal\n+import matplotlib as mpl\n+\n @pytest.mark.parametrize('N, result', [\n     (5, [1, .6, .2, .1, 0]),\n     (2, [1, 0]),\n@@ -29,8 +35,15 @@ def test_create_lookup_table(N, result):\n     data = [(0.0, 1.0, 1.0), (0.5, 0.2, 0.2), (1.0, 0.0, 0.0)]\n     assert_array_almost_equal(mcolors._create_lookup_table(N, data), result)\n \n-\n-def test_resampled():\n+@pytest.mark.parametrize(\"input_value\", [257, 256, 258, -1, 0, 255, 300])\n+def test_deprecation_warnings(input_value):\n+    \"\"\"\n+    Test to ensure no deprecation warnings occur for out-of-bound integer conversions.\n+    \"\"\"\n+    cm = mpl.colormaps[\"viridis\"]\n+    with pytest.warns(None) as record:\n+        cm(np.array([input_value], dtype=np.uint8))\n+    assert len(record) == 0, f\"Warnings were raised for input {input_value}\"\n     \"\"\"\n     GitHub issue #6025 pointed to incorrect ListedColormap.resampled;\n     here we test the method for LinearSegmentedColormap as well.\n",
  "matplotlib__matplotlib-25122": "diff --git a/lib/matplotlib/tests/test_mlab.py b/lib/matplotlib/tests/test_mlab.py\nindex 51d0c35..216df15 100644\n--- a/lib/matplotlib/tests/test_mlab.py\n+++ b/lib/matplotlib/tests/test_mlab.py\n@@ -574,6 +574,45 @@ class TestSpectral:\n                                  Fs=self.Fs,\n                                  noverlap=0,\n                                  sides=self.sides)\n+        \n+    def test_psd_window_flattop(self):\n+        if self.NFFT_density is None:\n+            return\n+        # Test with the flattop window to ensure that the window correction is correct\n+        ydata = np.arange(self.NFFT_density)\n+        windowVals = signal.windows.flattop(self.NFFT_density)\n+        ycontrol = ydata * windowVals\n+        ydata = np.tile(ydata, (20, 1))\n+        ycontrol = np.tile(ycontrol, (20, 1))\n+        ydatab = ydata.T.flatten()\n+        ydataf = ydata.flatten()\n+        ycontrol = ycontrol.flatten()\n+        \n+        spec_g, fsp_g = mlab.psd(x=ydataf,\n+                                 NFFT=self.NFFT_density,\n+                                 Fs=self.Fs,\n+                                 noverlap=0,\n+                                 sides=self.sides,\n+                                 window=windowVals)\n+        spec_b, fsp_b = mlab.psd(x=ydatab,\n+                                 NFFT=self.NFFT_density,\n+                                 Fs=self.Fs,\n+                                 noverlap=0,\n+                                 sides=self.sides,\n+                                 window=windowVals)\n+        spec_c, fsp_c = mlab.psd(x=ycontrol,\n+                                 NFFT=self.NFFT_density,\n+                                 Fs=self.Fs,\n+                                 noverlap=0,\n+                                 sides=self.sides,\n+                                 window=mlab.window_none)\n+        \n+        spec_c *= len(ycontrol1)/(windowVals**2).sum()\n+        assert_allclose(spec_g*windowVals.sum()**2,\n+                        spec_c*self.Fs*(windowVals**2).sum(),\n+                        atol=1e-08)\n+        assert_array_equal(fsp_g, fsp_c)\n+        assert_array_equal(fsp_b, fsp_c)\n         assert_array_equal(fsp_g, fsp_c)\n         assert_array_equal(fsp_b, fsp_c)\n         assert_allclose(spec_g, spec_c, atol=1e-08)\n",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..c006f7b 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,6 +7801,31 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+def test_xaxis_offsetText_color():\n+    plt.rcParams['xtick.labelcolor'] = 'blue'\n+    ax = plt.axes()\n+    assert ax.xaxis.offsetText.get_color() == 'blue'\n+\n+    plt.rcParams['xtick.color'] = 'yellow'\n+    plt.rcParams['xtick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    assert ax.xaxis.offsetText.get_color() == 'yellow'\n+\n+\n+def test_yaxis_offsetText_color():\n+    plt.rcParams['ytick.labelcolor'] = 'green'\n+    ax = plt.axes()\n+    assert ax.yaxis.offsetText.get_color() == 'green'\n+\n+    plt.rcParams['ytick.color'] = 'red'\n+    plt.rcParams['ytick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    assert ax.yaxis.offsetText.get_color() == 'red'\n+\n+import matplotlib.pyplot as plt\n+import matplotlib as mpl\n+import pytest\n+\n def test_ytickcolor_is_not_yticklabelcolor():\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..720663f 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,8 +1,8 @@\n+\n from io import BytesIO\n import ast\n import pickle\n-\n-import numpy as np\n+import pickletools\n import pytest\n \n import matplotlib as mpl\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..36362c3 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -43,8 +43,33 @@ def test_simple():\n     ax.set_yscale('log')\n     pickle.dump(fig, BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+import pickle\n+from io import BytesIO\n \n-def _generate_complete_test_figure(fig_ref):\n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()\n+\n+    # Attempt to pickle the figure\n+    try:\n+        pickle.dumps(fig)\n+        # If successful, print a success message\n+        print(\"Pickling successful.\")\n+    except TypeError as e:\n+        # If there's a TypeError, print the error\n+        print(\"Pickling failed with TypeError:\", e)\n     fig_ref.set_size_inches((10, 6))\n     plt.figure(fig_ref)\n \n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..e45f480 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -991,6 +991,46 @@ def test_hexbin_linear():\n     ax.hexbin(x, y, gridsize=(10, 5), marginals=True,\n               reduce_C_function=np.sum)\n \n+from matplotlib.testing.decorators import check_figures_equal\n+import numpy as np\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_behavior_upon_C_parameter(fig_test, fig_ref):\n+    # see: gh:12926\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # without C parameter\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # with C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=[1] * len(X),\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n \n def test_hexbin_log_clim():\n     x, y = np.arange(200).reshape((2, 100))\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex 700190c..48ec0c2 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -89,6 +89,36 @@ def test_contour_no_valid_levels():\n     ax.contour(np.ones((9, 9)))\n \n \n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths(fig_test, fig_ref):\n+    # Creating two contour plots\n+    cs_test = fig_test.subplots().contour([[0, 1], [1, 2]])\n+    cs_ref = fig_ref.subplots().contour([[1, 0], [2, 1]])\n+\n+    # Setting paths from one contour to the other\n+    cs_test.set_paths(cs_ref.get_paths())\n+\n+    # Assertions are done by comparing the generated images\n+    # The output images should be equivalent\n+\n+def test_set_paths_error_handling():\n+    fig, ax = plt.subplots()\n+    cs = ax.contour([[0, 1], [1, 2]])\n+\n+    with pytest.raises(TypeError):\n+        cs.set_paths(\"not a path object\")\n+\n+    with pytest.raises(ValueError):\n+        cs.set_paths([])  # Try setting it with an empty list\n+\n+import pytest\n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib import _api, colors as mcolors, patches as mpatches\n+from matplotlib.collections import LineCollection\n+from matplotlib.path import Path\n+from matplotlib.testing.decorators import check_figures_equal, image_comparison\n+\n def test_contour_Nlevels():\n     # A scalar levels arg or kwarg should trigger auto level generation.\n     # https://github.com/matplotlib/matplotlib/issues/11913\n",
  "mwaskom__seaborn-3069": "diff --git a/tests/_core/test_plot.py b/tests/_core/test_plot.py\nindex 3d202bc..8cf591f 100644\n--- a/tests/_core/test_plot.py\n+++ b/tests/_core/test_plot.py\n@@ -646,6 +646,54 @@ class TestScaling:\n             p.plot()\n \n \n+import pytest\n+import matplotlib as mpl\n+from seaborn import Plot\n+\n+class TestNominalScale:\n+\n+    def test_nominal_x_axis_tweaks(self):\n+        p = Plot(x=[\"a\", \"b\", \"c\"], y=[1, 2, 3])\n+        ax1 = p.plot()._figure.axes[0]\n+        assert ax1.get_xlim() == (-.5, 2.5)\n+        assert not any(x.get_visible() for x in ax1.xaxis.get_gridlines())\n+\n+        lim = (-1, 2.1)\n+        ax2 = p.limit(x=lim).plot()._figure.axes[0]\n+        assert ax2.get_xlim() == lim\n+\n+    def test_nominal_y_axis_tweaks(self):\n+        p = Plot(x=[1, 2, 3], y=[\"a\", \"b\", \"c\"])\n+        ax1 = p.plot()._figure.axes[0]\n+        assert ax1.get_ylim() == (2.5, -.5)\n+        assert not any(y.get_visible() for y in ax1.yaxis.get_gridlines())\n+\n+        lim = (-1, 2.1)\n+        ax2 = p.limit(y=lim).plot()._figure.axes[0]\n+        assert ax2.get_ylim() == lim\n+\n+    def test_nominal_grid_override(self):\n+        # Check if grid is respected when explicitly enabled\n+        with mpl.style.context({'axes.grid': True}):\n+            p = Plot(x=[\"a\", \"b\", \"c\"], y=[1, 2, 3])\n+            ax = p.plot()._figure.axes[0]\n+            assert not any(x.get_visible() for x in ax.xaxis.get_gridlines())\n+\n+            # Explicitly enable grid\n+            ax.xaxis.grid(True)\n+            assert any(x.get_visible() for x in ax.xaxis.get_gridlines())\n+\n+    def test_nominal_inversion_on_y_axis(self):\n+        # Verify y-axis inversion with nominal scale\n+        p = Plot(x=[1, 2, 3], y=[\"a\", \"b\", \"c\"]).scale(y=Nominal())\n+        ax1 = p.plot()._figure.axes[0]\n+        assert ax1.get_ylim() == (2.5, -.5)\n+\n+        # Check if manually setting limits inverts correctly\n+        lim = (0, 3)\n+        ax2 = p.limit(y=lim).plot()._figure.axes[0]\n+        assert ax2.get_ylim() == lim\n+\n class TestPlotting:\n \n     def test_matplotlib_object_creation(self):\n",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..dc09e8d 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -244,7 +244,29 @@ def test_default_static_max_age(app):\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n \n-def test_templates_list(test_apps):\n+def test_empty_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"\", __name__)\n+\n+\n+def test_valid_name_allowed(app, client):\n+    try:\n+        blueprint = flask.Blueprint(\"valid_name\", __name__)\n+        assert blueprint.name == \"valid_name\"\n+    except ValueError:\n+        pytest.fail(\"Blueprint raised ValueError unexpectedly!\")\n+\n+def test_whitespace_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\" \", __name__)\n+\n+def test_long_name_allowed(app, client):\n+    long_name = \"a\" * 100  # Assuming 100 characters is within valid range\n+    try:\n+        blueprint = flask.Blueprint(long_name, __name__)\n+        assert blueprint.name == long_name\n+    except ValueError:\n+        pytest.fail(\"Blueprint raised ValueError unexpectedly!\")\n     from blueprintapp import app\n \n     templates = sorted(app.jinja_env.list_templates())\n",
  "psf__requests-1142": "",
  "psf__requests-1724": "",
  "psf__requests-1766": "",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..1a1951f 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,6 +81,12 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://*example.com'),\n+            (InvalidURL, 'http://.example.com'),  # Test the specific case mentioned in the issue\n+            (InvalidURL, 'http://..example.com'), # Test double dots\n+            (InvalidURL, 'http://-example.com'),  # Test invalid character at start\n+            (InvalidURL, 'http://example-.com'),  # Test invalid character at end\n+            (InvalidURL, 'http://example..com'),  # Test consecutive dots\n         ))\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..2960981 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2308,8 +2308,27 @@ class TestAsCompatibleData:\n         orig = Variable(dims=(\"x\"), data=array, attrs={\"foo\": \"bar\"})\n         assert isinstance(orig._data, CustomIndexable)\n \n+def test_object_with_values_assignment():\n+    import numpy as np\n+    import xarray as xr\n \n-def test_raise_no_warning_for_nan_in_binary_ops():\n+    # Class with a 'values' attribute\n+    class HasValues:\n+        def __init__(self):\n+            self.values = 5\n+\n+    good_indexed, bad_indexed = xr.DataArray([None]), xr.DataArray([None])\n+\n+    # Assigning a normal set object\n+    good_indexed.loc[{'dim_0': 0}] = set()\n+\n+    # Assigning an object with a 'values' attribute\n+    bad_indexed.loc[{'dim_0': 0}] = HasValues()\n+\n+    # Verify that the object with a 'values' attribute is not coerced\n+    assert isinstance(good_indexed.values[0], set)\n+    assert isinstance(bad_indexed.values[0], HasValues)\n+    assert bad_indexed.values[0].values == 5\n     with pytest.warns(None) as record:\n         Variable(\"x\", [1, 2, np.NaN]) > 0\n     assert len(record) == 0\n",
  "pydata__xarray-3095": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex d6a4400..ef1e492 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -2069,6 +2069,25 @@ class TestDataset:\n \n             assert data.attrs['Test'] is not copied.attrs['Test']\n \n+    def test_copy_deep_unicode_indices(self):\n+        ds = xr.Dataset(\n+            coords={'x': ['foo'], 'y': ('x', ['bar'])},\n+            data_vars={'z': ('x', ['baz'])}\n+        )\n+        \n+        # Perform a deep copy\n+        copied = ds.copy(deep=True)\n+        \n+        # Check that the unicode index was not cast to object\n+        assert copied.coords['x'].dtype == '<U3'\n+        assert copied.coords['y'].dtype == '<U3'\n+        assert copied['z'].dtype == '<U3'\n+\n+        # Check that the original dataset is unchanged\n+        assert ds.coords['x'].dtype == '<U3'\n+        assert ds.coords['y'].dtype == '<U3'\n+        assert ds['z'].dtype == '<U3'\n+\n     def test_copy_with_data(self):\n         orig = create_test_data()\n         new_data = {k: np.random.randn(*v.shape)\n",
  "pydata__xarray-3151": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 026dec9..1c9f8e7 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -611,7 +611,47 @@ class TestCombineAuto:\n         expected = Dataset({'x': 0, 'y': 1, 'z': 2})\n         assert_identical(expected, actual)\n \n-    def test_check_for_impossible_ordering(self):\n+    def test_combine_with_non_monotonic_identical_coords(self):\n+        # Test for issue where combine_by_coords should handle non-monotonic identical coords\n+        ycoord = ['a', 'c', 'b']\n+\n+        data1 = np.random.rand(3, 3)\n+        data2 = np.random.rand(4, 3)\n+\n+        ds1 = Dataset(\n+            data_vars=dict(\n+                data=(['x', 'y'], data1)\n+            ),\n+            coords=dict(\n+                x=[1, 2, 3],\n+                y=ycoord\n+            )\n+        )\n+\n+        ds2 = Dataset(\n+            data_vars=dict(\n+                data=(['x', 'y'], data2)\n+            ),\n+            coords=dict(\n+                x=[4, 5, 6, 7],\n+                y=ycoord\n+            )\n+        )\n+\n+        # Expected dataset should combine along 'x' and keep the non-monotonic 'y' as is\n+        expected_data = np.vstack([data1, data2])\n+        expected = Dataset(\n+            data_vars=dict(\n+                data=(['x', 'y'], expected_data)\n+            ),\n+            coords=dict(\n+                x=[1, 2, 3, 4, 5, 6, 7],\n+                y=ycoord\n+            )\n+        )\n+\n+        actual = combine_by_coords((ds1, ds2))\n+        assert_identical(expected, actual)\n         ds0 = Dataset({'x': [0, 1, 5]})\n         ds1 = Dataset({'x': [2, 3]})\n         with raises_regex(ValueError, \"does not have monotonic global indexes\"\n",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..4ee5203 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2309,8 +2309,37 @@ class TestDataArray:\n                     self.dv.values, np.array(q) * 100, axis=axis\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n+    def test_quantile_keep_attrs(self):\n+        import xarray as xr\n+        import numpy as np\n+        from collections import OrderedDict\n \n-    def test_reduce_keep_attrs(self):\n+        # Create a DataArray with attributes\n+        da = xr.DataArray(\n+            [1, 2, 3, 4, 5],\n+            dims=\"x\",\n+            attrs={\"units\": \"K\", \"description\": \"test data\"},\n+        )\n+\n+        # Compute quantile and keep attributes\n+        q = 0.5\n+        result = da.quantile(q, dim=\"x\", keep_attrs=True)\n+\n+        # Assert that attributes are kept\n+        expected_attrs = OrderedDict([(\"units\", \"K\"), (\"description\", \"test data\")])\n+        assert result.attrs == expected_attrs\n+\n+        # Compute quantile without keeping attributes\n+        result_no_attrs = da.quantile(q, dim=\"x\", keep_attrs=False)\n+\n+        # Assert that attributes are not kept\n+        assert result_no_attrs.attrs == OrderedDict()\n+\n+        # Test with multiple quantiles\n+        result_multiple = da.quantile([0.25, 0.75], dim=\"x\", keep_attrs=True)\n+\n+        # Assert attributes are kept in the result with multiple quantiles\n+        assert result_multiple.attrs == expected_attrs\n         # Test dropped attrs\n         vm = self.va.mean()\n         assert len(vm.attrs) == 0\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..77387cb 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import pytest\n \n@@ -159,7 +160,14 @@ class TestMergeMethod:\n         with raises_regex(ValueError, \"should be coordinates or not\"):\n             data.merge(data.reset_coords())\n \n-    def test_merge_broadcast_equals(self):\n+    def test_merge_dataarray(self):\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+\n+        # This should now be resolved and work as expected\n+        expected = xr.merge([ds, da])\n+        actual = ds.merge(da)\n+        assert_identical(actual, expected)\n         ds1 = xr.Dataset({\"x\": 0})\n         ds2 = xr.Dataset({\"x\": (\"y\", [0, 0])})\n         actual = ds1.merge(ds2)\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..65bcbdb 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -109,6 +109,14 @@ class TestMergeFunction:\n             expected.attrs = expected_attrs\n             assert actual.identical(expected)\n \n+    def test_merge_attrs_override_copy(self):\n+        ds1 = xr.Dataset(attrs={\"x\": 0})\n+        ds2 = xr.Dataset(attrs={\"x\": 1})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"x\"] = 2\n+        assert ds1.attrs[\"x\"] == 0\n+        assert ds3.attrs[\"x\"] == 2\n+\n     def test_merge_dicts_simple(self):\n         actual = xr.merge([{\"foo\": 0}, {\"bar\": \"one\"}, {\"baz\": 3.5}])\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..c709d81 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1922,7 +1922,27 @@ def test_where() -> None:\n     assert_identical(expected, actual)\n \n \n-@pytest.mark.parametrize(\"use_dask\", [True, False])\n+def test_where_attrs_cond() -> None:\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    actual = xr.where(cond, x, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected, actual)\n+\n+def test_where_attrs_y() -> None:\n+    cond = xr.DataArray([False, True], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    actual = xr.where(cond, x, y, keep_attrs=True)\n+    expected = xr.DataArray([0, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected, actual)\n+\n+def test_where_dtype_preservation() -> None:\n+    data = xr.DataArray(np.ones([10,10], dtype=np.int8), attrs={\"attr\": \"data\"})\n+    data2 = xr.where(data == 1, 5, 0, keep_attrs=True)\n+    assert data2.dtype == np.int8, \"dtype should be preserved as np.int8\"\n+    assert data2.attrs == data.attrs, \"attributes should be preserved\"\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n def test_polyval(use_dask, use_datetime) -> None:\n     if use_dask and not has_dask:\n",
  "pydata__xarray-4695": "",
  "pydata__xarray-4966": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex 2dbb0b4..a3a3c90 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -9,6 +9,20 @@ from xarray.coding import variables\n from xarray.conventions import decode_cf_variable, encode_cf_variable\n \n from . import assert_allclose, assert_equal, assert_identical, requires_dask\n+import numpy as np\n+import xarray as xr\n+from xarray.coding import variables\n+@pytest.mark.parametrize(\"dtype, unsigned, expected_dtype, expected_values\", [\n+    (\"i1\", \"true\", \"u1\", [0, 1, 2, 255]),\n+    (\"u1\", \"false\", \"i1\", [0, 1, 2, -1]),\n+])\n+def test_signed_unsigned_handling(dtype, unsigned, expected_dtype, expected_values):\n+    original_values = np.array([0, 1, 2, 255], dtype=dtype)\n+    encoded = xr.Variable((\"x\",), original_values, attrs={\"_Unsigned\": unsigned})\n+    coder = variables.UnsignedIntegerCoder()\n+    decoded = coder.decode(encoded)\n+    assert decoded.dtype == np.dtype(expected_dtype)\n+    assert decoded.values.tolist() == expected_values\n \n with suppress(ImportError):\n     import dask.array as da\n",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..bcca4d4 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1913,6 +1913,16 @@ def test_dot_align_coords(use_dask) -> None:\n         xr.testing.assert_allclose(expected, actual)\n \n \n+def test_where_scalar_with_keep_attrs() -> None:\n+    # Test for issue where xr.where with scalar y and keep_attrs=True\n+    cond = xr.DataArray([True, False, True], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\")\n+    # Expecting an empty attrs dictionary since scalars do not have attrs\n+    assert actual.attrs == {}\n+    assert_identical(expected, actual)\n+\n+\n def test_where() -> None:\n     cond = xr.DataArray([True, False], dims=\"x\")\n     actual = xr.where(cond, 1, 0)\n",
  "pydata__xarray-6599": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f1ec005..2cbb25a 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -2000,6 +2000,14 @@ def test_where_attrs() -> None:\n             xr.Dataset({\"a\": (\"x\", [1, 2, 3]), \"b\": (\"y\", [3, 4, 5])}),\n             id=\"dataset-dataset\",\n         ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array([1000, 2000, 3000], dtype=\"timedelta64[ns]\"), dims=\"x\"\n+            ),\n+            xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n+            xr.DataArray([1000.0, 2000.0, 3000.0], dims=\"x\"),\n+            id=\"timedelta\",\n+        ),\n         pytest.param(\n             xr.DataArray(pd.date_range(\"1970-01-01\", freq=\"s\", periods=3), dims=\"x\"),\n             xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n@@ -2028,6 +2036,76 @@ def test_polyval(\n     xr.testing.assert_allclose(actual, expected)\n \n \n+def test_polyval_timedelta64():\n+    x = xr.DataArray(\n+        np.array(\n+            [\n+                \"2021-04-01T05:25:19.000000000\",\n+                \"2021-04-01T05:25:29.000000000\",\n+                \"2021-04-01T05:25:39.000000000\",\n+                \"2021-04-01T05:25:49.000000000\",\n+                \"2021-04-01T05:25:59.000000000\",\n+                \"2021-04-01T05:26:09.000000000\",\n+            ],\n+            dtype=\"datetime64[ns]\",\n+        ),\n+        name=\"azimuth_time\",\n+        coords={\"azimuth_time\": np.array(\n+            [\n+                \"2021-04-01T05:25:19.000000000\",\n+                \"2021-04-01T05:25:29.000000000\",\n+                \"2021-04-01T05:25:39.000000000\",\n+                \"2021-04-01T05:25:49.000000000\",\n+                \"2021-04-01T05:25:59.000000000\",\n+                \"2021-04-01T05:26:09.000000000\",\n+            ],\n+            dtype=\"datetime64[ns]\",\n+        ) - np.array(\n+            [\"2021-04-01T05:25:19.000000000\"], dtype=\"datetime64[ns]\"\n+        )},\n+    )\n+\n+    coeffs = xr.DataArray(\n+        [\n+            [2.33333335e-43, 1.62499999e-43, 2.79166678e-43],\n+            [-1.15316667e-30, 1.49518518e-31, 9.08833333e-31],\n+            [-2.50272583e-18, -1.23851062e-18, -2.99098229e-18],\n+            [5.83965193e-06, -1.53321770e-07, -4.84640242e-06],\n+            [4.44739216e06, 1.45053974e06, 5.29960857e06],\n+        ],\n+        dims=(\"degree\", \"axis\"),\n+        coords={\"axis\": [0, 1, 2], \"degree\": [4, 3, 2, 1, 0]},\n+    )\n+\n+    expected = xr.DataArray(\n+        [\n+            [4447392.16, 1450539.74, 5299608.57],\n+            [4505537.25588366, 1448882.82238152, 5250846.359196],\n+            [4563174.92026797, 1446979.12250014, 5201491.44401733],\n+            [4620298.31815291, 1444829.59596699, 5151549.377964],\n+            [4676900.67053846, 1442435.23739315, 5101025.78153601],\n+            [4732975.25442459, 1439797.08038974, 5049926.34223336],\n+        ],\n+        dims=(\"azimuth_time\", \"axis\"),\n+        coords={\n+            \"azimuth_time\": np.array(\n+                [\n+                    \"2021-04-01T05:25:19.000000000\",\n+                    \"2021-04-01T05:25:29.000000000\",\n+                    \"2021-04-01T05:25:39.000000000\",\n+                    \"2021-04-01T05:25:49.000000000\",\n+                    \"2021-04-01T05:25:59.000000000\",\n+                    \"2021-04-01T05:26:09.000000000\",\n+                ],\n+                dtype=\"datetime64[ns]\",\n+            ),\n+            \"axis\": [0, 1, 2],\n+        },\n+    )\n+\n+    actual = xr.polyval(coord=x, coeffs=coeffs)\n+    xr.testing.assert_allclose(actual, expected)\n+\n def test_polyval_degree_dim_checks():\n     x = (xr.DataArray([1, 2, 3], dims=\"x\"),)\n     coeffs = xr.DataArray([2, 3, 4], dims=\"degree\", coords={\"degree\": [0, 1, 2]})\n",
  "pydata__xarray-6721": "",
  "pydata__xarray-6744": "",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "diff --git a/xarray/tests/test_indexes.py b/xarray/tests/test_indexes.py\nindex fa8bd84..1dcca61 100644\n--- a/xarray/tests/test_indexes.py\n+++ b/xarray/tests/test_indexes.py\n@@ -688,12 +688,25 @@ def test_safe_cast_to_index_cftimeindex():\n         assert isinstance(actual, type(expected))\n \n \n-# Test that datetime.datetime objects are never used in a CFTimeIndex\n-@requires_cftime\n-def test_safe_cast_to_index_datetime_datetime():\n-    dates = [datetime(1, 1, day) for day in range(1, 20)]\n+import pytest\n+import numpy as np\n+import xarray as xr\n \n-    expected = pd.Index(dates)\n-    actual = safe_cast_to_index(np.array(dates))\n-    assert_array_equal(expected, actual)\n-    assert isinstance(actual, pd.Index)\n+@pytest.mark.parametrize(\"dtype\", [\"int32\", \"float32\", \"uint8\", \"bool\"])\n+def test_restore_dtype_on_multiindexes(dtype: str) -> None:\n+    foo = xr.Dataset(coords={\"bar\": (\"bar\", np.array([0, 1], dtype=dtype))})\n+    foo = foo.stack(baz=(\"bar\",))\n+    assert str(foo[\"bar\"].values.dtype) == dtype\n+\n+def test_empty_array_stack() -> None:\n+    foo = xr.Dataset(coords={\"bar\": (\"bar\", np.array([], dtype=\"int32\"))})\n+    foo = foo.stack(baz=(\"bar\",))\n+    assert foo[\"bar\"].values.dtype == np.int32\n+\n+def test_mixed_dtype_array_stack() -> None:\n+    # Expect the explicit dtype to be preserved, not upcast by pandas!\n+    foo = xr.Dataset(coords={\"bar\": (\"bar\", np.array([1, 2], dtype=np.int32)), \n+                             \"baz\": (\"bar\", np.array([1.5, 2.5], dtype=np.float32))})\n+    foo = foo.stack(qux=(\"bar\",))\n+    assert foo[\"bar\"].values.dtype == np.int32\n+    assert foo[\"baz\"].values.dtype == np.float32\n",
  "pylint-dev__pylint-4970": "diff --git a/tests/checkers/unittest_similar.py b/tests/checkers/unittest_similar.py\nindex 97cd4d0..73d1d5e 100644\n--- a/tests/checkers/unittest_similar.py\n+++ b/tests/checkers/unittest_similar.py\n@@ -493,12 +493,44 @@ def test_get_map_data() -> None:\n             sim.append_stream(source_fname, stream)\n         # The map bit, can you tell? ;)\n         data.extend(sim.get_map_data())\n+import pytest\n+from io import StringIO\n+from contextlib import redirect_stdout\n+from pylint.checkers.similar import Run as similar\n+\n+SIMILAR1 = \"similar_file_1.py\"\n+SIMILAR2 = \"similar_file_2.py\"\n+\n+def test_set_duplicate_lines_to_zero() -> None:\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        similar.Run([\"--duplicates=0\", SIMILAR1, SIMILAR2])\n+    assert ex.value.code == 0\n+    assert output.getvalue() == \"\"\n \n-    assert len(expected_linelists) == len(data)\n+def test_set_duplicate_lines_to_positive() -> None:\n+    # This test ensures that setting a positive number enables duplicate checking.\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        similar.Run([\"--duplicates=2\", SIMILAR1, SIMILAR2])\n+    assert ex.value.code == 0\n+    output_content = output.getvalue()\n+    # Assuming that we expect some output indicating duplication\n+    assert \"Duplicated\" in output_content\n+\n+def test_no_duplicate_option() -> None:\n+    # This test ensures the default behavior without specifying duplicates option\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        similar.Run([SIMILAR1, SIMILAR2])\n+    assert ex.value.code == 0\n+    output_content = output.getvalue()\n+    # Assuming that duplication is checked by default\n+    assert \"Duplicated\" in output_content\n     for source_fname, expected_lines, lineset_obj in zip(\n         source_streams, expected_linelists, data\n     ):\n         assert source_fname == lineset_obj.name\n         # There doesn't seem to be a faster way of doing this, yet.\n         lines = (linespec.text for linespec in lineset_obj.stripped_lines)\n-        assert tuple(expected_lines) == tuple(lines)\n+        assert tuple(expected_lines) == tuple(lines)\n",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..f5d35b2 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -93,10 +93,24 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     output = capsys.readouterr()\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n+from pytest import CaptureFixture\n+from pylint.lint import Run\n+\n+def test_short_verbose_option_no_argument(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that -v option can be used without an argument like --verbose.\"\"\"\n+    Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err or \"No config file found\" in output.err\n+\n+def test_long_verbose_option_no_argument(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that --verbose option can be used without an argument.\"\"\"\n+    Run([str(EMPTY_MODULE), \"--verbose\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err or \"No config file found\" in output.err\n \n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex d5ccd91..ec3e29d 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -864,6 +864,99 @@ def test_by_module_statement_value(initialized_linter: PyLinter) -> None:\n         assert module_stats[\"statement\"] == linter2.stats.statement\n \n \n+def test_recursive_ignore_with_ignore_flag(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test Pylint with --recursive=y and --ignore to ensure ignored files are skipped.\"\"\"\n+    linter = initialized_linter\n+    with tempdir() as tmpdir:\n+        ignored_dir = os.path.join(tmpdir, \".ignored_dir\")\n+        os.makedirs(ignored_dir, exist_ok=True)\n+        create_files([os.path.join(ignored_dir, \"foo.py\"), \"bar.py\"], tmpdir)\n+\n+        run = Run(\n+            [\n+                \"--recursive=y\",\n+                f\"--ignore={os.path.basename(ignored_dir)}\",\n+                tmpdir,\n+            ],\n+            exit=False,\n+        )\n+\n+        linted_files = run.linter._iterate_file_descrs(\n+            tuple(run.linter._discover_files([tmpdir]))\n+        )\n+        linted_file_paths = [file_item.filepath for file_item in linted_files]\n+\n+        # Ensure foo.py inside ignored directory is not linted\n+        ignored_file_path = os.path.abspath(os.path.join(ignored_dir, \"foo.py\"))\n+        assert ignored_file_path not in linted_file_paths\n+\n+        # Ensure bar.py is linted\n+        bar_file_path = os.path.abspath(os.path.join(tmpdir, \"bar.py\"))\n+        assert bar_file_path in linted_file_paths\n+\n+\n+def test_recursive_ignore_with_ignore_paths(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test Pylint with --recursive=y and --ignore-paths to ensure ignored paths are skipped.\"\"\"\n+    linter = initialized_linter\n+    with tempdir() as tmpdir:\n+        ignored_dir = os.path.join(tmpdir, \".ignored_dir\")\n+        os.makedirs(ignored_dir, exist_ok=True)\n+        create_files([os.path.join(ignored_dir, \"foo.py\"), \"bar.py\"], tmpdir)\n+\n+        run = Run(\n+            [\n+                \"--recursive=y\",\n+                f\"--ignore-paths=.*{os.path.basename(ignored_dir)}.*\",\n+                tmpdir,\n+            ],\n+            exit=False,\n+        )\n+\n+        linted_files = run.linter._iterate_file_descrs(\n+            tuple(run.linter._discover_files([tmpdir]))\n+        )\n+        linted_file_paths = [file_item.filepath for file_item in linted_files]\n+\n+        # Ensure foo.py inside ignored directory is not linted\n+        ignored_file_path = os.path.abspath(os.path.join(ignored_dir, \"foo.py\"))\n+        assert ignored_file_path not in linted_file_paths\n+\n+        # Ensure bar.py is linted\n+        bar_file_path = os.path.abspath(os.path.join(tmpdir, \"bar.py\"))\n+        assert bar_file_path in linted_file_paths\n+\n+\n+def test_recursive_ignore_with_ignore_patterns(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test Pylint with --recursive=y and --ignore-patterns to ensure ignored patterns are skipped.\"\"\"\n+    linter = initialized_linter\n+    with tempdir() as tmpdir:\n+        ignored_dir = os.path.join(tmpdir, \".ignored_dir\")\n+        os.makedirs(ignored_dir, exist_ok=True)\n+        create_files([os.path.join(ignored_dir, \"foo.py\"), \"bar.py\"], tmpdir)\n+\n+        run = Run(\n+            [\n+                \"--recursive=y\",\n+                \"--ignore-patterns=^\\\\.ignored_\",\n+                tmpdir,\n+            ],\n+            exit=False,\n+        )\n+\n+        linted_files = run.linter._iterate_file_descrs(\n+            tuple(run.linter._discover_files([tmpdir]))\n+        )\n+        linted_file_paths = [file_item.filepath for file_item in linted_files]\n+\n+        # Ensure foo.py inside ignored directory is not linted\n+        ignored_file_path = os.path.abspath(os.path.join(ignored_dir, \"foo.py\"))\n+        assert ignored_file_path not in linted_file_paths\n+\n+        # Ensure bar.py is linted\n+        bar_file_path = os.path.abspath(os.path.join(tmpdir, \"bar.py\"))\n+        assert bar_file_path in linted_file_paths\n+\n+\n def test_import_sibling_module_from_namespace(initialized_linter: PyLinter) -> None:\n     \"\"\"If the parent directory above `namespace` is on sys.path, ensure that\n     modules under `namespace` can import each other without raising `import-error`.\"\"\"\n",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "",
  "pylint-dev__pylint-7277": "",
  "pytest-dev__pytest-10051": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex 26c4c15..3ff218c 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -160,6 +160,49 @@ def logging_during_setup_and_teardown(caplog):\n     assert [x.message for x in caplog.get_records(\"teardown\")] == [\"a_teardown_log\"]\n \n \n+import logging\n+from pytest import LogCaptureFixture\n+\n+def test_consistency_after_clear(caplog: LogCaptureFixture) -> None:\n+    def verify_consistency():\n+        assert caplog.get_records(\"call\") == caplog.records\n+\n+    # Verify initial consistency\n+    verify_consistency()\n+    \n+    # Log a message and verify consistency\n+    logging.warning(\"test\")\n+    verify_consistency()\n+    \n+    # Clear caplog and verify consistency\n+    caplog.clear()\n+    verify_consistency()\n+\n+def test_clear_affects_get_records_call_stage(caplog: LogCaptureFixture, logging_during_setup_and_teardown):\n+    # Log during \"call\"\n+    logger.info(\"a_call_log\")\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"a_call_log\"]\n+    \n+    # Clear logs\n+    caplog.clear()\n+    \n+    # Ensure no records exist for \"call\" after clear\n+    assert caplog.get_records(\"call\") == []\n+\n+    # Log again and verify new record is captured\n+    logging.info(\"a_call_log_after_clear\")\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"a_call_log_after_clear\"]\n+\n+def test_clear_affects_get_records_setup_stage(caplog: LogCaptureFixture, logging_during_setup_and_teardown):\n+    # Ensure setup logs are present\n+    assert [x.message for x in caplog.get_records(\"setup\")] == [\"a_setup_log\"]\n+    \n+    # Clear logs\n+    caplog.clear()\n+    \n+    # Ensure setup logs still persist after clear\n+    assert [x.message for x in caplog.get_records(\"setup\")] == [\"a_setup_log\"]\n+\n def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardown):\n     assert not caplog.records\n     assert not caplog.get_records(\"call\")\n",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_debugging.py b/testing/test_debugging.py\nindex 912abd7..b9560a9 100644\n--- a/testing/test_debugging.py\n+++ b/testing/test_debugging.py\n@@ -175,22 +175,30 @@ class TestPDB:\n         assert \"debug.me\" in rest\n         self.flush(child)\n \n-    def test_pdb_unittest_skip(self, pytester: Pytester) -> None:\n-        \"\"\"Test for issue #2137\"\"\"\n+    def test_pdb_unittest_skip_class_teardown(self, pytester: Pytester) -> None:\n+        \"\"\"Ensure tearDown is not called for a skipped class with --pdb\"\"\"\n         p1 = pytester.makepyfile(\n             \"\"\"\n             import unittest\n-            @unittest.skipIf(True, 'Skipping also with pdb active')\n+            import pytest\n+\n+            @unittest.skip(\"Class is skipped\")\n             class MyTestCase(unittest.TestCase):\n-                def test_one(self):\n-                    assert 0\n+                def setUp(self):\n+                    self.addCleanup(setattr, self, 'wasRun', True)\n+\n+                def tearDown(self):\n+                    self.wasRun = False\n+\n+                def test_method(self):\n+                    pass\n+\n+            def test_should_not_run_teardown():\n+                assert not hasattr(MyTestCase, 'wasRun'), \"tearDown was called\"\n         \"\"\"\n         )\n-        child = pytester.spawn_pytest(f\"-rs --pdb {p1}\")\n-        child.expect(\"Skipping also with pdb active\")\n-        child.expect_exact(\"= 1 skipped in\")\n-        child.sendeof()\n-        self.flush(child)\n+        result = pytester.runpytest_inprocess(\"--pdb\", str(p1))\n+        result.stdout.fnmatch_lines([\"* 1 skipped in *\"])\n \n     def test_pdb_print_captured_stdout_and_stderr(self, pytester: Pytester) -> None:\n         p1 = pytester.makepyfile(\n",
  "pytest-dev__pytest-5262": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 1f092b0..3f9f97f 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -1051,8 +1051,16 @@ class TestFDCapture(object):\n             cap.done()\n             pytest.raises(AttributeError, cap.suspend)\n \n-\n-@contextlib.contextmanager\n+import pytest\n+import sys\n+import _pytest.capture\n+\n+def test_pytest_capture_stdout_mode():\n+    \"\"\"Test that _pytest.capture.EncodedFile does not include 'b' in mode.\"\"\"\n+    capfd = _pytest.capture.CaptureManager()\n+    with capfd.disabled():\n+        enc_file = _pytest.capture.EncodedFile(sys.stdout, 'utf-8')\n+        assert 'b' not in enc_file.buffer.mode\n def saved_fd(fd):\n     new_fd = os.dup(fd)\n     try:\n",
  "pytest-dev__pytest-5631": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex e422b03..6770f62 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -4,8 +4,9 @@ import sys\n import textwrap\n \n import py\n-\n import pytest\n+import numpy as np\n+from unittest.mock import patch\n from _pytest.main import _in_venv\n from _pytest.main import ExitCode\n from _pytest.main import Session\n@@ -18,6 +19,22 @@ class TestCollector:\n         assert not issubclass(Collector, Item)\n         assert not issubclass(Item, Collector)\n \n+    def test_mock_sentinel_check_with_numpy_array(self, testdir):\n+        \"\"\"Test to ensure patching with numpy arrays does not raise a ValueError.\"\"\"\n+        testdir.makepyfile(\n+            \"\"\"\n+            import numpy as np\n+            from unittest.mock import patch\n+\n+            class TestNumpyPatch:\n+                @patch(target='dummy.FOO', new=np.array([-5.5, 3.0]))\n+                def test_array_patch(self):\n+                    assert True  # Simply test that no ValueError is raised during collection\n+            \"\"\"\n+        )\n+        reprec = testdir.inline_run()\n+        reprec.assertoutcome(passed=1)\n+\n     def test_check_equality(self, testdir):\n         modcol = testdir.getmodulecol(\n             \"\"\"\n",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..42066be 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -119,15 +119,24 @@ class TestPaste(object):\n \n             monkeypatch.setattr(urllib.request, \"urlopen\", mocked)\n         return calls\n-\n-    def test_create_new_paste(self, pastebin, mocked_urlopen):\n+    def test_create_new_paste_with_special_content(self, pastebin, mocked_urlopen):\n+        # This test simulates passing problematic content that used to cause an HTTP 400 error.\n+        special_content = b\"Some special content that triggers the error\"\n+        result = pastebin.create_new_paste(special_content)\n+        assert result == \"https://bpaste.net/show/3c0c6750bd\"\n+        assert len(mocked_urlopen) == 1\n+        url, data = mocked_urlopen[0]\n+        assert type(data) is bytes\n+        assert url == \"https://bpaste.net\"\n+        assert \"lexer=text\" in data.decode()\n+        assert \"code=Some special content that triggers the error\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n         result = pastebin.create_new_paste(b\"full-paste-contents\")\n         assert result == \"https://bpaste.net/show/3c0c6750bd\"\n         assert len(mocked_urlopen) == 1\n         url, data = mocked_urlopen[0]\n         assert type(data) is bytes\n-        lexer = \"python3\" if sys.version_info[0] >= 3 else \"python\"\n         assert url == \"https://bpaste.net\"\n-        assert \"lexer=%s\" % lexer in data.decode()\n+        assert \"lexer=text\" in data.decode()\n         assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n",
  "pytest-dev__pytest-6202": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex fb6b260..183d2ca 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -703,6 +703,28 @@ class Test_genitems:\n         assert items[2].name == \"testmethod_one\"\n \n         # let's also test getmodpath here\n+\n+    def test_incorrect_modpath_replacement(self, testdir):\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            \n+            @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+            def testmethod_two(arg0):\n+                pass\n+\n+            class TestY:\n+                @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+                def testmethod_three(self, arg0):\n+                    pass\n+            \"\"\"\n+        )\n+        items, reprec = testdir.inline_genitems(p)\n+        assert len(items) == 3\n+        assert items[0].name == \"testmethod_two[.[]\"\n+        assert items[0].getmodpath() == \"testmethod_two[.[]\"\n+        assert items[1].name == \"testmethod_three[.[]\"\n+        assert items[1].getmodpath() == \"TestY.testmethod_three[.[]\"\n         assert items[0].getmodpath() == \"testone\"\n         assert items[1].getmodpath() == \"TestX.testmethod_one\"\n         assert items[2].getmodpath() == \"TestY.testmethod_one\"\n",
  "pytest-dev__pytest-7205": "diff --git a/testing/test_setuponly.py b/testing/test_setuponly.py\nindex 8211d39..2a33c7e 100644\n--- a/testing/test_setuponly.py\n+++ b/testing/test_setuponly.py\n@@ -1,3 +1,4 @@\n+\n import pytest\n from _pytest.config import ExitCode\n \n@@ -200,8 +201,22 @@ def test_show_fixtures_with_parameter_ids_function(testdir, mode):\n \n     result.stdout.fnmatch_lines([\"*SETUP    F foobar?FOO?\", \"*SETUP    F foobar?BAR?\"])\n \n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue: BytesWarning when using --setup-show with bytes parameter\n+    import sys\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n \n-def test_dynamic_fixture_request(testdir):\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n     p = testdir.makepyfile(\n         \"\"\"\n         import pytest\n",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..1765ebb 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -153,7 +154,33 @@ class TestEvaluation:\n         assert skipped.reason == \"condition: config._hackxyz\"\n \n \n+from _pytest.pytester import Testdir\n+\n class TestXFail:\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n     @pytest.mark.parametrize(\"strict\", [True, False])\n     def test_xfail_simple(self, testdir, strict):\n         item = testdir.getitem(\n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..b6dd655 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -512,6 +512,12 @@ class TestCaptureFixture:\n                 capfd.close()\n             \"\"\"\n         )\n+    \n+    @pytest.mark.parametrize(\"newline\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_cafd_preserves_newlines(self, capfd, newline):\n+        print(\"test\", end=newline)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(newline)\n         reprec.assertoutcome(passed=1)\n \n     def test_capfdbinary(self, testdir):\n@@ -526,6 +532,12 @@ class TestCaptureFixture:\n                 assert err == b''\n             \"\"\"\n         )\n+    \n+    @pytest.mark.parametrize(\"newline\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_cafd_preserves_newlines(self, capfd, newline):\n+        print(\"test\", end=newline)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(newline)\n         reprec.assertoutcome(passed=1)\n \n     def test_capsysbinary(self, testdir):\n",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..5a8565c 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,6 +1,33 @@\n+\n import logging\n \n import pytest\n+def test_change_level_undos_handler_level(testdir: Testdir) -> None:\n+    \"\"\"Ensure that 'set_level' is undone after the end of the test (handler).\"\"\"\n+\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test1(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(41)\n+            assert caplog.handler.level == 41\n+\n+        def test2(caplog):\n+            assert caplog.handler.level == 0\n+\n+        def test3(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(43)\n+            assert caplog.handler.level == 43\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=3)\n+\n+from _pytest.pytester import Testdir\n+\n from _pytest.logging import caplog_records_key\n \n logger = logging.getLogger(__name__)\n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..a9df0fc 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,3 +1,4 @@\n+\n import os\n import pprint\n import sys\n@@ -9,7 +10,7 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n-from _pytest.pytester import Testdir\n+from _pytest.pytester import Testdir, Pytester\n \n \n class TestCollector:\n@@ -1177,6 +1178,38 @@ def test_collect_symlink_out_of_tree(testdir):\n     )\n     assert result.ret == 0\n \n+def test_collect_multiple_symlink_dirs(pytester: Pytester) -> None:\n+    \"\"\"Test collection of multiple symlinked directories.\"\"\"\n+    dir1 = pytester.mkdir(\"dir1\")\n+    dir1.joinpath(\"test_dir1.py\").write_text(\"def test_dir1(): pass\", \"utf-8\")\n+    dir2 = pytester.mkdir(\"dir2\")\n+    dir2.joinpath(\"test_dir2.py\").write_text(\"def test_dir2(): pass\", \"utf-8\")\n+\n+    pytester.path.joinpath(\"symlink_to_dir1\").symlink_to(dir1)\n+    pytester.path.joinpath(\"symlink_to_dir2\").symlink_to(dir2)\n+    \n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=4)\n+\n+def test_collect_symlink_to_nonexistent(pytester: Pytester) -> None:\n+    \"\"\"Test collection behavior with a symlink to a nonexistent directory.\"\"\"\n+    non_existent_path = pytester.path.joinpath(\"nonexistent_dir\")\n+    pytester.path.joinpath(\"symlink_to_nonexistent\").symlink_to(non_existent_path, target_is_directory=True)\n+\n+    result = pytester.runpytest()\n+    result.assert_outcomes()  # Expect no tests collected\n+\n+def test_collect_symlink_nested(pytester: Pytester) -> None:\n+    \"\"\"Test collection of symlinked directories that have nested directories.\"\"\"\n+    parent_dir = pytester.mkdir(\"parent_dir\")\n+    nested_dir = parent_dir.mkdir(\"nested_dir\")\n+    nested_dir.joinpath(\"test_nested.py\").write_text(\"def test_nested(): pass\", \"utf-8\")\n+\n+    pytester.path.joinpath(\"symlink_to_parent\").symlink_to(parent_dir)\n+    \n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=1)\n+\n \n def test_collectignore_via_conftest(testdir):\n     \"\"\"collect_ignore in parent conftest skips importing child (issue #4592).\"\"\"\n",
  "pytest-dev__pytest-8399": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 2c720b0..bc99fb5 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -301,8 +301,29 @@ def test_setup_setUpClass(pytester: Pytester) -> None:\n     reprec = pytester.inline_run(testpath)\n     reprec.assertoutcome(passed=3)\n \n+def test_setUpClass_fixture_visibility(pytester: Pytester) -> None:\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+\n+        class TestExample(unittest.TestCase):\n+            @classmethod\n+            def setUpClass(cls):\n+                pass\n \n-def test_setup_class(pytester: Pytester) -> None:\n+            def test_method(self):\n+                assert True\n+        \"\"\"\n+    )\n+    # Test without -v, fixture should not be listed\n+    result = pytester.runpytest(\"--fixtures\")\n+    assert result.ret == 0\n+    result.stdout.no_fnmatch_line(\"*unittest_setUpClass_fixture_TestExample*\")\n+\n+    # Test with -v, fixture should be listed\n+    result = pytester.runpytest(\"--fixtures\", \"-v\")\n+    assert result.ret == 0\n+    result.stdout.fnmatch_lines([\"*unittest_setUpClass_fixture_TestExample*\"])\n     testpath = pytester.makepyfile(\n         \"\"\"\n         import unittest\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..a1ec44e 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -573,6 +573,33 @@ def test_class_weights_cv():\n \n     assert_array_equal(reg.predict([[-.2, 2]]), np.array([-1]))\n \n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    rng = np.random.RandomState(42)\n+\n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-.8, -1.0],\n+                  [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+\n+    n_samples = x.shape[0]\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+    # with len(y.shape) == 1\n+    n_targets = 1\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n+\n+    # with len(y.shape) == 2\n+    y = np.array([[1, 1, 1, -1, -1],\n+                  [1, -1, 1, -1, 1],\n+                  [-1, -1, 1, -1, -1]]).transpose()\n+    n_targets = y.shape[1]\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n+\n \n def test_ridgecv_store_cv_values():\n     # Test _RidgeCV's store_cv_values attribute.\n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..c236f91 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -167,6 +167,19 @@ def test_adjusted_mutual_info_score():\n     assert_almost_equal(ami, 0.37, 2)\n \n \n+import numpy as np\n+from sklearn.metrics import fowlkes_mallows_score\n+from sklearn.utils._testing import assert_all_finite\n+\n+def test_int_overflow_fowlkes_mallows_score():\n+    # Create large clusters to test integer overflow\n+    x = np.array([1] * 70000 + [2] * 60000 + [3] * 50000)\n+    y = np.array([1] * 60000 + [2] * 70000 + [3] * 50000)\n+\n+    # Check that the fowlkes_mallows_score does not raise a RuntimeWarning\n+    # and returns a finite value\n+    assert_all_finite(fowlkes_mallows_score(x, y))\n+\n def test_expected_mutual_info_overflow():\n     # Test for regression where contingency cell exceeds 2**16\n     # leading to overflow in np.outer, resulting in EMI > 1\n",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..7e30d1b 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -558,8 +558,31 @@ def test_feature_names():\n     for idx, name in enumerate(feature_names):\n         assert_equal(idx, cv.vocabulary_.get(name))\n \n+def test_countvectorizer_with_vocabulary():\n+    # This test ensures that CountVectorizer does not raise NotFittedError\n+    # when get_feature_names is called after providing a vocabulary at initialization.\n+    \n+    vocabulary = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    cv = CountVectorizer(vocabulary=vocabulary)\n+    \n+    # get_feature_names should work without calling fit\n+    feature_names = cv.get_feature_names()\n+    assert_array_equal(vocabulary, feature_names)\n+\n+    # transform should also work without calling fit\n+    corpus = [\n+        'This is the first document.',\n+        'This is the second second document.',\n+        'And the third one.',\n+        'Is this the first document?',\n+    ]\n+    transformed = cv.transform(corpus)\n+    \n+    # Check the shape of the transformed matrix (4 documents, 9 features)\n+    assert_equal(transformed.shape, (4, 9))\n \n-def test_vectorizer_max_features():\n+    # Check that the vocabulary_ attribute has been set\n+    assert_true(hasattr(cv, \"vocabulary_\"))\n     vec_factories = (\n         CountVectorizer,\n         TfidfVectorizer,\n",
  "scikit-learn__scikit-learn-11310": "diff --git a/sklearn/model_selection/tests/test_search.py b/sklearn/model_selection/tests/test_search.py\nindex 0b1d5f9..2b669c5 100644\n--- a/sklearn/model_selection/tests/test_search.py\n+++ b/sklearn/model_selection/tests/test_search.py\n@@ -1161,13 +1161,18 @@ def test_search_cv_timing():\n \n     for search in (gs, rs):\n         search.fit(X, y)\n-        for key in ['mean_fit_time', 'std_fit_time']:\n+        for key in ['mean_fit_time', 'std_fit_time', 'refit_time_']:\n             # NOTE The precision of time.time in windows is not high\n             # enough for the fit/score times to be non-zero for trivial X and y\n             assert_true(np.all(search.cv_results_[key] >= 0))\n             assert_true(np.all(search.cv_results_[key] < 1))\n \n-        for key in ['mean_score_time', 'std_score_time']:\n+        # Check refit_time_ attribute\n+        assert_true(hasattr(search, \"refit_time_\"))\n+        assert_true(isinstance(search.refit_time_, float))\n+        assert_greater_equal(search.refit_time_, 0)\n+\n+        for key in ['mean_score_time', 'std_score_time', 'refit_time_']:\n             assert_true(search.cv_results_[key][1] >= 0)\n             assert_true(search.cv_results_[key][0] == 0.0)\n             assert_true(np.all(search.cv_results_[key] < 1))\n",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..f7e9e38 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -21,8 +21,38 @@ from sklearn.utils.testing import assert_true\n from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import ignore_warnings\n from sklearn.utils.testing import assert_warns_message\n-\n from sklearn.exceptions import ConvergenceWarning\n+from sklearn.metrics.scorer import get_scorer\n+from sklearn.utils._testing import assert_array_almost_equal\n+import pytest\n+\n+# Test case for issue #8720\n+@pytest.mark.parametrize('scoring, multiclass_agg_list', [\n+    ('accuracy', ['']),\n+    ('precision', ['_macro', '_weighted']),\n+    ('f1', ['_macro', '_weighted']),\n+    ('neg_log_loss', ['']),\n+    ('recall', ['_macro', '_weighted'])\n+])\n+def test_logistic_cv_multinomial_score(scoring, multiclass_agg_list):\n+    # Test that LogisticRegressionCV uses the right score to compute its\n+    # cross-validation scores when using a multinomial scoring\n+    # see https://github.com/scikit-learn/scikit-learn/issues/8720\n+    X, y = make_classification(n_samples=100, random_state=0, n_classes=3, n_informative=6)\n+    train, test = np.arange(80), np.arange(80, 100)\n+    lr = LogisticRegression(C=1., solver='lbfgs', multi_class='multinomial')\n+    # we use lbfgs to support multinomial\n+    params = lr.get_params()\n+    # we store the params to set them further in _log_reg_scoring_path\n+    for key in ['C', 'n_jobs', 'warm_start']:\n+        del params[key]\n+    lr.fit(X[train], y[train])\n+    for averaging in multiclass_agg_list:\n+        scorer = get_scorer(scoring + averaging)\n+        assert_array_almost_equal(\n+            _log_reg_scoring_path(X, y, train, test, Cs=[1.], scoring=scorer, **params)[2][0],\n+            scorer(lr, X[test], y[test])\n+        )\n from sklearn.exceptions import ChangedBehaviorWarning\n from sklearn.linear_model.logistic import (\n     LogisticRegression,\n",
  "scikit-learn__scikit-learn-12585": "diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 4752f9c..0e46c79 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -154,7 +154,16 @@ def test_clone_nan():\n     assert clf.empty is clf2.empty\n \n \n-def test_clone_sparse_matrices():\n+from sklearn.base import clone\n+from sklearn.utils.estimator_checks import check_estimator\n+from sklearn.preprocessing import StandardScaler\n+\n+def test_clone_estimator_types_with_estimator_class():\n+    # Test cloning when an estimator class is passed as a parameter.\n+    # This is the specifically mentioned issue in the description.\n+    estimator = StandardScaler(with_mean=StandardScaler)\n+    cloned_estimator = clone(estimator)\n+    assert estimator.with_mean is cloned_estimator.with_mean\n     sparse_matrix_classes = [\n         getattr(sp, name)\n         for name in dir(sp) if name.endswith('_matrix')]\n",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..cb51ee8 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -5,6 +5,20 @@ from distutils.version import LooseVersion\n import numpy as np\n from scipy import linalg\n \n+@pytest.mark.parametrize('init_copy_X, fit_copy_X', [(True, None), (False, None)])\n+def test_lasso_lars_fit_copyX_behaviour_with_None(init_copy_X, fit_copy_X):\n+    \"\"\"\n+    Test that when the copy_X parameter in fit is None,\n+    it respects the initialized value.\n+    \"\"\"\n+    lasso_lars = LassoLarsIC(copy_X=init_copy_X, precompute=False)\n+    rng = np.random.RandomState(0)\n+    X = rng.normal(0, 1, (100, 5))\n+    X_copy = X.copy()\n+    y = X[:, 2]\n+    lasso_lars.fit(X, y, copy_X=fit_copy_X)\n+    assert init_copy_X == np.array_equal(X, X_copy)\n+\n import pytest\n \n from sklearn.model_selection import train_test_split\n@@ -18,7 +32,9 @@ from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import TempMemmap\n from sklearn.exceptions import ConvergenceWarning\n from sklearn import linear_model, datasets\n-from sklearn.linear_model.least_angle import _lars_path_residues\n+from sklearn.linear_model.least_angle import _lars_path_residues, LassoLarsIC\n+from sklearn.utils._testing import assert_array_equal\n+import numpy as np\n \n diabetes = datasets.load_diabetes()\n X, y = diabetes.data, diabetes.target\n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..e650400 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -493,6 +493,24 @@ def test_shuffle_stratifiedkfold():\n         assert_not_equal(set(test0), set(test1))\n     check_cv_coverage(kf0, X_40, y, groups=None, expected_n_splits=5)\n \n+def test_stratifiedkfold_random_state_effect():\n+    # Test that different random states lead to different shuffles\n+    X = np.arange(20)  # 20 samples\n+    y = np.array([0] * 10 + [1] * 10)  # 10 samples per class\n+\n+    skf1 = StratifiedKFold(n_splits=5, shuffle=True, random_state=0)\n+    skf2 = StratifiedKFold(n_splits=5, shuffle=True, random_state=1)\n+    skf3 = StratifiedKFold(n_splits=5, shuffle=True, random_state=0)\n+\n+    test_set1 = sorted([tuple(test) for _, test in skf1.split(X, y)])\n+    test_set2 = sorted([tuple(test) for _, test in skf2.split(X, y)])\n+    test_set3 = sorted([tuple(test) for _, test in skf3.split(X, y)])\n+\n+    # Assert that test sets are different for different random states\n+    assert test_set1 != test_set2\n+    # Assert that test sets are the same for the same random state\n+    assert test_set1 == test_set3\n+\n \n def test_kfold_can_detect_dependent_samples_on_digits():  # see #2372\n     # The digits samples are dependent: they are apparently grouped by authors\n",
  "scikit-learn__scikit-learn-13135": "diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py\nindex a18a1c5..aa1e6d0 100644\n--- a/sklearn/preprocessing/tests/test_discretization.py\n+++ b/sklearn/preprocessing/tests/test_discretization.py\n@@ -185,11 +185,11 @@ def test_invalid_strategy_option():\n \n \n @pytest.mark.parametrize(\n-    'strategy, expected_2bins, expected_3bins',\n-    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2]),\n-     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2]),\n-     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2])])\n-def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n+    'strategy, expected_2bins, expected_3bins, expected_5bins',\n+    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2], [0, 0, 1, 1, 4, 4]),\n+     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2], [0, 0, 1, 2, 3, 4]),\n+     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2], [0, 1, 2, 3, 4, 4])])\n+def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins, expected_5bins):\n     X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n \n     # with 2 bins\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..9996724 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -597,8 +597,13 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_array_equal(Y_pred1, Y_pred2)\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n-\n-def test_gaussian_mixture_fit():\n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    X = np.random.RandomState(42).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=42)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n     rand_data = RandomData(rng)\n",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..e1b060e 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -6,11 +7,56 @@ Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n #          Alexandre Gramfort <alexandre.gramfort@telecom-paristech.fr>\n # License: BSD 3 clause\n \n+def test_iforest_warm_start_incremental_fit():\n+    \"\"\"Test warm_start by incrementally adding trees\"\"\"\n+    rng = check_random_state(42)\n+    X = rng.randn(100, 5)\n+\n+    # Train IsolationForest with 5 trees\n+    clf = IsolationForest(n_estimators=5, warm_start=True, random_state=rng)\n+    clf.fit(X)\n+    initial_trees = clf.estimators_.copy()\n+\n+    # Incrementally add 5 more trees\n+    clf.set_params(n_estimators=10)\n+    clf.fit(X)\n+    additional_trees = clf.estimators_[5:]\n+\n+    # Check the total number of trees is 10\n+    assert len(clf.estimators_) == 10\n+    # Ensure initial trees are not changed\n+    assert clf.estimators_[:5] == initial_trees\n+    # Ensure additional trees are newly created\n+    assert len(set(additional_trees) & set(initial_trees)) == 0\n+\n+def test_iforest_warm_start_no_effect_when_false():\n+    \"\"\"Test warm_start=False fits a new model instead of adding trees\"\"\"\n+    rng = check_random_state(42)\n+    X = rng.randn(100, 5)\n+\n+    # Train IsolationForest with 5 trees\n+    clf1 = IsolationForest(n_estimators=5, warm_start=False, random_state=rng)\n+    clf1.fit(X)\n+    trees_first_fit = clf1.estimators_.copy()\n+\n+    # Train again with the same parameters\n+    clf2 = IsolationForest(n_estimators=5, warm_start=False, random_state=rng)\n+    clf2.fit(X)\n+    trees_second_fit = clf2.estimators_\n+\n+    # Check if both fits produce the same number of trees\n+    assert len(trees_first_fit) == 5\n+    assert len(trees_second_fit) == 5\n+    # And ensure they are different, as `warm_start` is False\n+    assert trees_first_fit != trees_second_fit\n+\n import pytest\n \n import numpy as np\n \n from sklearn.utils.testing import assert_array_equal\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils.validation import check_random_state\n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_raises\n from sklearn.utils.testing import assert_raises_regex\n",
  "scikit-learn__scikit-learn-13779": "",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..05f1a73 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -328,7 +328,27 @@ def test_export_text_errors():\n                          export_text, clf, spacing=0)\n \n \n-def test_export_text():\n+from sklearn.datasets import load_iris\n+from sklearn.tree import DecisionTreeClassifier\n+from sklearn.tree.export import export_text\n+from sklearn.tree import DecisionTreeRegressor\n+\n+def test_export_text_single_feature():\n+    # Test case for a decision tree with a single feature\n+    X, y = load_iris(return_X_y=True)\n+    X_single_feature = X[:, 0].reshape(-1, 1)  # Use only the first feature\n+\n+    clf = DecisionTreeClassifier(max_depth=2, random_state=0)\n+    clf.fit(X_single_feature, y)\n+    \n+    expected_report = dedent(\"\"\"\n+    |--- sepal_length <= 5.45\n+    |   |--- class: 0\n+    |--- sepal_length >  5.45\n+    |   |--- class: 1\n+    \"\"\").lstrip()\n+\n+    assert export_text(clf, feature_names=['sepal_length']) == expected_report\n     clf = DecisionTreeClassifier(max_depth=2, random_state=0)\n     clf.fit(X, y)\n \n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..2a8cbc5 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1532,7 +1532,35 @@ def test_LogisticRegressionCV_GridSearchCV_elastic_net_ovr():\n     assert (lrcv.predict(X_test) == gs.predict(X_test)).mean() >= .8\n \n \n-@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial'))\n+import pytest\n+import numpy as np\n+from sklearn.linear_model import LogisticRegressionCV\n+from sklearn.datasets import make_classification\n+\n+@pytest.mark.parametrize('penalty', ('l2', 'elasticnet'))\n+@pytest.mark.parametrize('solver', ('liblinear', 'saga'))\n+def test_LogisticRegressionCV_no_refit_varied_penalties_and_solvers(penalty, solver):\n+    # Test LogisticRegressionCV with different penalties and solvers when refit is False\n+\n+    n_classes = 3\n+    n_features = 10\n+    X, y = make_classification(n_samples=100, n_classes=n_classes,\n+                               n_informative=n_classes, n_features=n_features,\n+                               random_state=42)\n+\n+    Cs = np.logspace(-3, 3, 5)\n+    l1_ratios = None if penalty == 'l2' else np.linspace(0, 1, 3)\n+\n+    lrcv = LogisticRegressionCV(penalty=penalty, Cs=Cs, solver=solver,\n+                                l1_ratios=l1_ratios, random_state=42,\n+                                multi_class='ovr', refit=False)\n+    \n+    # Ensure no errors raised during fit\n+    lrcv.fit(X, y)\n+    if penalty == 'elasticnet':\n+        assert lrcv.l1_ratio_.shape == (n_classes,)\n+    assert lrcv.C_.shape == (n_classes,)\n+    assert lrcv.coef_.shape == (n_classes, n_features)\n def test_LogisticRegressionCV_no_refit(multi_class):\n     # Test LogisticRegressionCV attribute shapes when refit is False\n \n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/tests/test_show_versions.py b/sklearn/utils/tests/test_show_versions.py\nindex fa39255..68ffb9a 100644\n--- a/sklearn/utils/tests/test_show_versions.py\n+++ b/sklearn/utils/tests/test_show_versions.py\n@@ -14,6 +14,8 @@ def test_get_sys_info():\n \n def test_get_deps_info():\n     deps_info = _get_deps_info()\n+    assert 'joblib' in deps_info\n+    deps_info = _get_deps_info()\n \n     assert 'pip' in deps_info\n     assert 'setuptools' in deps_info\n@@ -30,4 +32,4 @@ def test_show_versions_with_blas(capsys):\n     out, err = capsys.readouterr()\n     assert 'python' in out\n     assert 'numpy' in out\n-    assert 'BLAS' in out\n+    assert 'BLAS' in out\n",
  "scikit-learn__scikit-learn-14496": "diff --git a/sklearn/cluster/tests/test_optics.py b/sklearn/cluster/tests/test_optics.py\nindex 6c9dac3..2003920 100644\n--- a/sklearn/cluster/tests/test_optics.py\n+++ b/sklearn/cluster/tests/test_optics.py\n@@ -101,6 +101,24 @@ def test_extract_xi():\n                    xi=0.4).fit(X)\n     assert_array_equal(clust.labels_, expected_labels)\n \n+def test_optics_min_samples_float():\n+    # Test when min_samples is passed as a float\n+    rng = np.random.RandomState(42)\n+    n_points_per_cluster = 10\n+\n+    # Generating clusters\n+    C1 = [-5, -2] + 0.5 * rng.randn(n_points_per_cluster, 2)\n+    C2 = [4, -1] + 0.1 * rng.randn(n_points_per_cluster, 2)\n+    C3 = [1, -2] + 0.2 * rng.randn(n_points_per_cluster, 2)\n+\n+    X = np.vstack((C1, C2, C3))\n+    expected_labels = np.r_[[0] * n_points_per_cluster, [1] * n_points_per_cluster, [2] * n_points_per_cluster]\n+    X, expected_labels = shuffle(X, expected_labels, random_state=rng)\n+\n+    # Using float for min_samples\n+    clust = OPTICS(min_samples=0.2, min_cluster_size=0.1, max_eps=20, cluster_method='xi', xi=0.05).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n+\n     X = np.vstack((C1, C2, C3, C4, C5, np.array([[100, 100]] * 2), C6))\n     expected_labels = np.r_[[1] * 5, [3] * 5, [2] * 5, [0] * 5, [2] * 5,\n                             -1, -1, [4] * 5]\n@@ -112,6 +130,24 @@ def test_extract_xi():\n     # this may fail if the predecessor correction is not at work!\n     assert_array_equal(clust.labels_, expected_labels)\n \n+def test_optics_min_samples_float():\n+    # Test when min_samples is passed as a float\n+    rng = np.random.RandomState(42)\n+    n_points_per_cluster = 10\n+\n+    # Generating clusters\n+    C1 = [-5, -2] + 0.5 * rng.randn(n_points_per_cluster, 2)\n+    C2 = [4, -1] + 0.1 * rng.randn(n_points_per_cluster, 2)\n+    C3 = [1, -2] + 0.2 * rng.randn(n_points_per_cluster, 2)\n+\n+    X = np.vstack((C1, C2, C3))\n+    expected_labels = np.r_[[0] * n_points_per_cluster, [1] * n_points_per_cluster, [2] * n_points_per_cluster]\n+    X, expected_labels = shuffle(X, expected_labels, random_state=rng)\n+\n+    # Using float for min_samples\n+    clust = OPTICS(min_samples=0.2, min_cluster_size=0.1, max_eps=20, cluster_method='xi', xi=0.05).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n+\n     C1 = [[0, 0], [0, 0.1], [0, -.1], [0.1, 0]]\n     C2 = [[10, 10], [10, 9], [10, 11], [9, 10]]\n     C3 = [[100, 100], [100, 90], [100, 110], [90, 100]]\n@@ -124,6 +160,24 @@ def test_extract_xi():\n                    xi=0.04).fit(X)\n     assert_array_equal(clust.labels_, expected_labels)\n \n+def test_optics_min_samples_float():\n+    # Test when min_samples is passed as a float\n+    rng = np.random.RandomState(42)\n+    n_points_per_cluster = 10\n+\n+    # Generating clusters\n+    C1 = [-5, -2] + 0.5 * rng.randn(n_points_per_cluster, 2)\n+    C2 = [4, -1] + 0.1 * rng.randn(n_points_per_cluster, 2)\n+    C3 = [1, -2] + 0.2 * rng.randn(n_points_per_cluster, 2)\n+\n+    X = np.vstack((C1, C2, C3))\n+    expected_labels = np.r_[[0] * n_points_per_cluster, [1] * n_points_per_cluster, [2] * n_points_per_cluster]\n+    X, expected_labels = shuffle(X, expected_labels, random_state=rng)\n+\n+    # Using float for min_samples\n+    clust = OPTICS(min_samples=0.2, min_cluster_size=0.1, max_eps=20, cluster_method='xi', xi=0.05).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n+\n \n def test_cluster_hierarchy_():\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-14710": "",
  "scikit-learn__scikit-learn-14894": "",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..2e02781 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -97,8 +97,27 @@ def test_strip_accents():\n     expected = 'this is a test'\n     assert strip_accents_unicode(a) == expected\n \n-\n-def test_to_ascii():\n+def test_strip_accents_nfkd():\n+    from sklearn.feature_extraction.text import strip_accents_unicode\n+\n+    # String with a single combined character \"LATIN SMALL LETTER N WITH TILDE\"\n+    s1 = chr(241)  # \u00f1\n+    expected = 'n'\n+    assert strip_accents_unicode(s1) == expected\n+\n+    # String with decomposed form \"LATIN SMALL LETTER N\" + \"COMBINING TILDE\"\n+    s2 = chr(110) + chr(771)  # n\u0303\n+    assert strip_accents_unicode(s2) == expected\n+\n+    # Additional test: multiple combining accents in decomposed form\n+    s3 = 'a\\u0304\\u0308'  # a\u0304\u0308 (a with macron and diaeresis)\n+    expected = 'a'\n+    assert strip_accents_unicode(s3) == expected\n+\n+    # Decomposed accents only\n+    s4 = '\\u0300\\u0301\\u0302\\u0303'  # \u0300 \u0301 \u0302 \u0303\n+    expected = ''\n+    assert strip_accents_unicode(s4) == expected\n     # check some classical latin accentuated symbols\n     a = '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb'\n     expected = 'aaaaaaceeee'\n",
  "scikit-learn__scikit-learn-25102": "diff --git a/sklearn/feature_selection/tests/test_base.py b/sklearn/feature_selection/tests/test_base.py\nindex bf2d07e..5226815 100644\n--- a/sklearn/feature_selection/tests/test_base.py\n+++ b/sklearn/feature_selection/tests/test_base.py\n@@ -107,10 +107,77 @@ def test_inverse_transform_sparse():\n     # Check wrong shape raises error\n     with pytest.raises(ValueError):\n         sel.inverse_transform(np.array([[1], [2]]))\n-\n-\n-def test_get_support():\n+from sklearn.datasets import make_classification, make_regression, load_iris\n+\n+def test_output_dataframe():\n+    \"\"\"Check output dtypes for dataframes is consistent with the input dtypes.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+\n+    X = pd.DataFrame(\n+        {\n+            \"a\": pd.Series([1.0, 2.4, 4.5], dtype=np.float32),\n+            \"b\": pd.Series([\"a\", \"b\", \"a\"], dtype=\"category\"),\n+            \"c\": pd.Series([\"j\", \"b\", \"b\"], dtype=\"category\"),\n+            \"d\": pd.Series([3.0, 2.4, 1.2], dtype=np.float64),\n+        }\n+    )\n+\n+    for step in [2, 3]:\n+        sel = StepSelector(step=step).set_output(transform=\"pandas\")\n+        sel.fit(X)\n+\n+        output = sel.transform(X)\n+        for name, dtype in output.dtypes.items():\n+            assert dtype == X.dtypes[name]\n+\n+    # step=0 will select nothing\n+    sel0 = StepSelector(step=0).set_output(transform=\"pandas\")\n+    sel0.fit(X)\n+\n+    msg = \"No features were selected\"\n+    with pytest.warns(UserWarning, match=msg):\n+        output0 = sel0.transform(X)\n+\n+    assert_array_equal(output0.index, X.index)\n+    assert output0.shape == (X.shape[0], 0)\n+\n+def test_dataframe_output_dtypes():\n+    \"\"\"Check that the output dataframe dtypes are the same as the input.\n+\n+    Non-regression test for gh-24860.\n+    \"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+\n+    X, y = load_iris(return_X_y=True, as_frame=True)\n+    X = X.astype(\n+        {\n+            \"petal length (cm)\": np.float32,\n+            \"petal width (cm)\": np.float64,\n+        }\n+    )\n+    X[\"petal_width_binned\"] = pd.cut(X[\"petal width (cm)\"], bins=10)\n+\n+    column_order = X.columns\n+\n+    def selector(X, y):\n+        ranking = {\n+            \"sepal length (cm)\": 1,\n+            \"sepal width (cm)\": 2,\n+            \"petal length (cm)\": 3,\n+            \"petal width (cm)\": 4,\n+            \"petal_width_binned\": 5,\n+        }\n+        return np.asarray([ranking[name] for name in column_order])\n+\n+    univariate_filter = SelectKBest(selector, k=3).set_output(transform=\"pandas\")\n+    output = univariate_filter.fit_transform(X, y)\n+\n+    assert_array_equal(\n+        output.columns, [\"petal length (cm)\", \"petal width (cm)\", \"petal_width_binned\"]\n+    )\n+    for name, dtype in output.dtypes.items():\n+        assert dtype == X.dtypes[name]\n     sel = StepSelector()\n     sel.fit(X, y)\n     assert_array_equal(support, sel.get_support())\n-    assert_array_equal(support_inds, sel.get_support(indices=True))\n+    assert_array_equal(support_inds, sel.get_support(indices=True))\n",
  "scikit-learn__scikit-learn-25232": "",
  "scikit-learn__scikit-learn-25931": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3714d1a..2b0148a 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -330,7 +330,49 @@ def test_iforest_with_n_jobs_does_not_segfault():\n def test_base_estimator_property_deprecated():\n     X = np.array([[1, 2], [3, 4]])\n     y = np.array([1, 0])\n-    model = IsolationForest()\n+    import numpy as np\n+    import pandas as pd\n+    from sklearn.ensemble import IsolationForest\n+    import warnings\n+    import pytest\n+    \n+    def test_iforest_preserve_feature_names():\n+        \"\"\"Check that feature names are preserved when contamination is not \"auto\".\n+\n+        Feature names are required for consistency checks during scoring.\n+\n+        Non-regression test for Issue #25844\n+        \"\"\"\n+        rng = np.random.RandomState(0)\n+\n+        # Test with single column DataFrame\n+        X = pd.DataFrame(data=rng.randn(4, 1), columns=[\"a\"])\n+        model = IsolationForest(random_state=0, contamination=0.05)\n+\n+        with warnings.catch_warnings():\n+            warnings.simplefilter(\"error\", UserWarning)\n+            model.fit(X)\n+        \n+    # Additional test to verify multi-column DataFrame\n+    def test_iforest_multi_column_dataframe():\n+        \"\"\"Check that multi-column dataframes do not raise warnings.\"\"\"\n+        rng = np.random.RandomState(0)\n+        X = pd.DataFrame(data=rng.randn(10, 3), columns=[\"a\", \"b\", \"c\"])\n+        model = IsolationForest(random_state=0, contamination=0.1)\n+\n+        with warnings.catch_warnings():\n+            warnings.simplefilter(\"error\", UserWarning)\n+            model.fit(X)\n+\n+    # Test to verify functionality remains consistent when using ndarray\n+    def test_iforest_ndarray():\n+        \"\"\"Check that ndarray inputs do not raise warnings.\"\"\"\n+        rng = np.random.RandomState(0)\n+        X = rng.randn(10, 2)  # numpy array\n+        model = IsolationForest(random_state=0, contamination=0.2)\n+\n+        # The warning is expected when using ndarray but we assert fit works without issues\n+        model.fit(X)\n     model.fit(X, y)\n \n     warn_msg = (\n@@ -338,4 +380,4 @@ def test_base_estimator_property_deprecated():\n         \"will be removed in 1.4. Use `estimator_` instead.\"\n     )\n     with pytest.warns(FutureWarning, match=warn_msg):\n-        model.base_estimator_\n+        model.base_estimator_\n",
  "scikit-learn__scikit-learn-25973": "",
  "scikit-learn__scikit-learn-26323": "",
  "scikit-learn__scikit-learn-9288": "diff --git a/sklearn/cluster/tests/test_k_means.py b/sklearn/cluster/tests/test_k_means.py\nindex abeeff0..7828449 100644\n--- a/sklearn/cluster/tests/test_k_means.py\n+++ b/sklearn/cluster/tests/test_k_means.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for K-means\"\"\"\n import sys\n \n@@ -944,8 +945,19 @@ def test_k_means_empty_cluster_relocated():\n     assert len(set(km.labels_)) == 2\n     assert_allclose(km.cluster_centers_, [[-1], [1]])\n \n+def test_result_of_kmeans_equal_in_diff_n_jobs_inertia():\n+    # Ensure KMeans results are consistent across different n_jobs values\n+    rnd = np.random.RandomState(42)\n+    X = rnd.normal(size=(100, 5))\n+\n+    inertia_1 = KMeans(n_clusters=5, random_state=42, n_jobs=1).fit(X).inertia_\n+    inertia_2 = KMeans(n_clusters=5, random_state=42, n_jobs=2).fit(X).inertia_\n+    inertia_3 = KMeans(n_clusters=5, random_state=42, n_jobs=3).fit(X).inertia_\n+    inertia_4 = KMeans(n_clusters=5, random_state=42, n_jobs=4).fit(X).inertia_\n \n-def test_minibatch_kmeans_partial_fit_int_data():\n+    assert_almost_equal(inertia_1, inertia_2)\n+    assert_almost_equal(inertia_1, inertia_3)\n+    assert_almost_equal(inertia_1, inertia_4)\n     # Issue GH #14314\n     X = np.array([[-1], [1]], dtype=np.int)\n     km = MiniBatchKMeans(n_clusters=2)\n",
  "sphinx-doc__sphinx-10323": "diff --git a/tests/test_directive_code.py b/tests/test_directive_code.py\nindex 949c70e..848762c 100644\n--- a/tests/test_directive_code.py\n+++ b/tests/test_directive_code.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the code-block directive.\"\"\"\n \n import os\n@@ -8,6 +9,7 @@ from docutils import nodes\n from sphinx.config import Config\n from sphinx.directives.code import LiteralIncludeReader\n from sphinx.testing.util import etree_parse\n+from sphinx.errors import SphinxError\n \n DUMMY_CONFIG = Config({}, {})\n \n",
  "sphinx-doc__sphinx-10449": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 82ec43a..1cbc72d 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1054,6 +1054,24 @@ def test_autodoc_typehints_description_with_documented_init(app):\n             '      Return type:\\n'\n             '         None\\n' == context)\n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\"})\n+def test_autodoc_typehints_description_with_no_return_type_for_class(app):\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: target.typehints._SimpleClass\\n'\n+        '   :members:\\n',\n+        encoding='utf8'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n+    assert ('class target.typehints._SimpleClass\\n'\n+            '\\n'\n+            '   A simple class.\\n'\n+            '\\n'\n+            '   __init__()\\n'\n+            '\\n'\n+            '      Initializes the class.\\n'\n+            '\\n' not in context)\n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\",\n",
  "sphinx-doc__sphinx-10466": "diff --git a/tests/test_build_gettext.py b/tests/test_build_gettext.py\nindex a6fc946..9f10246 100644\n--- a/tests/test_build_gettext.py\n+++ b/tests/test_build_gettext.py\n@@ -1,3 +1,38 @@\n+\n+def test_Catalog_no_duplicate_locations():\n+    catalog = Catalog()\n+    # Add messages with duplicate locations\n+    catalog.add('duplicate', MsgOrigin('/path/to/file', 3))\n+    catalog.add('duplicate', MsgOrigin('/path/to/file', 3))\n+    catalog.add('duplicate', MsgOrigin('/path/to/another', 4))\n+    catalog.add('duplicate', MsgOrigin('/path/to/another', 4))\n+    catalog.add('unique', MsgOrigin('/path/to/file', 5))\n+    \n+    assert len(list(catalog)) == 2\n+\n+    msg1, msg2 = list(catalog)\n+    assert msg1.text == 'duplicate'\n+    assert msg1.locations == [('/path/to/file', 3), ('/path/to/another', 4)]\n+    assert msg2.text == 'unique'\n+    assert msg2.locations == [('/path/to/file', 5)]\n+\n+def test_Catalog_mixed_duplicates():\n+    catalog = Catalog()\n+    # Add messages with mixed duplicates and unique entries\n+    catalog.add('mixed', MsgOrigin('/path/to/unique', 7))\n+    catalog.add('mixed', MsgOrigin('/path/to/unique', 7))\n+    catalog.add('mixed', MsgOrigin('/path/to/repeat', 8))\n+    catalog.add('mixed', MsgOrigin('/path/to/unique', 9))\n+    catalog.add('single', MsgOrigin('/path/to/single', 10))\n+\n+    assert len(list(catalog)) == 2\n+\n+    msg1, msg2 = list(catalog)\n+    assert msg1.text == 'mixed'\n+    assert msg1.locations == [('/path/to/unique', 7), ('/path/to/repeat', 8), ('/path/to/unique', 9)]\n+    assert msg2.text == 'single'\n+    assert msg2.locations == [('/path/to/single', 10)]\n+\n \"\"\"Test the build process with gettext builder with the test root.\"\"\"\n \n import gettext\n@@ -8,7 +43,7 @@ from subprocess import PIPE, CalledProcessError\n \n import pytest\n \n-from sphinx.util.osutil import cd\n+from sphinx.builders.gettext import Catalog, MsgOrigin\n \n \n @pytest.mark.sphinx('gettext', srcdir='root-gettext')\n",
  "sphinx-doc__sphinx-10673": "diff --git a/tests/test_environment_toctree.py b/tests/test_environment_toctree.py\nindex d3bf6a2..8ff83a3 100644\n--- a/tests/test_environment_toctree.py\n+++ b/tests/test_environment_toctree.py\n@@ -336,13 +336,61 @@ def test_get_toctree_for_includehidden(app):\n                 ([list_item, compact_paragraph, reference, \"quux\"],\n                  [list_item, compact_paragraph, reference, \"foo.1\"],\n                  [list_item, compact_paragraph, reference, \"foo.2\"]))\n+import pytest\n+from sphinx.addnodes import toctree\n+from sphinx.testing.util import SphinxTestApp\n+from sphinx.util.docutils import new_document\n+from docutils import nodes\n+from sphinx.environment.adapters.toctree import TocTree\n \n+@pytest.mark.sphinx('dummy', testroot='toctree-index')\n+def test_toctree_with_indices(app: SphinxTestApp):\n+    \"\"\"\n+    This test ensures that the toctree can include 'genindex', 'modindex', 'search'\n+    without raising warnings about non-existing documents.\n+    \"\"\"\n+    app.build()\n+    # Create a mock document\n+    doc = new_document('index')\n+    toc = TocTree(app.env).get_toctree_for(\"index\", app.builder, prune=False, collapse=False)\n+\n+    # Assert that 'genindex', 'modindex', 'search' are present in the toctree\n+    toctree_found = False\n+    for node in toc.traverse(toctree):\n+        if node.get('entries') == [(None, 'genindex'), (None, 'modindex'), (None, 'search')]:\n+            toctree_found = True\n+            break\n+    assert toctree_found, \"Toctree does not contain 'genindex', 'modindex', 'search'\"\n     assert_node(toctree[1][0][0][0], reference, refuri=\"foo\", secnumber=[1])\n     assert_node(toctree[1][0][1][0][0][0], reference, refuri=\"quux\", secnumber=[1, 1])\n     assert_node(toctree[1][0][1][1][0][0], reference, refuri=\"foo#foo-1\", secnumber=[1, 2])\n     assert_node(toctree[1][0][1][2][0][0], reference, refuri=\"foo#foo-2\", secnumber=[1, 3])\n     assert_node(toctree[1][1][0][0], reference, refuri=\"bar\", secnumber=[2])\n     assert_node(toctree[1][2][0][0], reference, refuri=\"http://sphinx-doc.org/\")\n+import pytest\n+from sphinx.addnodes import toctree\n+from sphinx.testing.util import SphinxTestApp\n+from sphinx.util.docutils import new_document\n+from docutils import nodes\n+from sphinx.environment.adapters.toctree import TocTree\n \n+@pytest.mark.sphinx('dummy', testroot='toctree-index')\n+def test_toctree_with_indices(app: SphinxTestApp):\n+    \"\"\"\n+    This test ensures that the toctree can include 'genindex', 'modindex', 'search'\n+    without raising warnings about non-existing documents.\n+    \"\"\"\n+    app.build()\n+    # Create a mock document\n+    doc = new_document('index')\n+    toc = TocTree(app.env).get_toctree_for(\"index\", app.builder, prune=False, collapse=False)\n+\n+    # Assert that 'genindex', 'modindex', 'search' are present in the toctree\n+    toctree_found = False\n+    for node in toc.traverse(toctree):\n+        if node.get('entries') == [(None, 'genindex'), (None, 'modindex'), (None, 'search')]:\n+            toctree_found = True\n+            break\n+    assert toctree_found, \"Toctree does not contain 'genindex', 'modindex', 'search'\"\n     assert_node(toctree[2],\n-                [bullet_list, list_item, compact_paragraph, reference, \"baz\"])\n+                [bullet_list, list_item, compact_paragraph, reference, \"baz\"])\n",
  "sphinx-doc__sphinx-7440": "",
  "sphinx-doc__sphinx-7757": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex b3053d1..fd7322e 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -331,6 +331,10 @@ def test_signature_from_str_kwonly_args():\n     assert sig.parameters['b'].kind == Parameter.KEYWORD_ONLY\n     assert sig.parameters['b'].default == Parameter.empty\n \n+import pytest\n+import sys\n+from sphinx.util import inspect\n+from sphinx.util.inspect import Parameter\n \n @pytest.mark.skipif(sys.version_info < (3, 8),\n                     reason='python-3.8 or above is required')\n@@ -341,7 +345,15 @@ def test_signature_from_str_positionaly_only_args():\n     assert sig.parameters['b'].kind == Parameter.POSITIONAL_OR_KEYWORD\n \n \n-def test_signature_from_str_invalid():\n+def test_signature_with_positional_only_defaults():\n+    sig = inspect.signature_from_str('(a, b=0, /, c=1)')\n+    assert list(sig.parameters.keys()) == ['a', 'b', 'c']\n+    assert sig.parameters['a'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['a'].default == Parameter.empty\n+    assert sig.parameters['b'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['b'].default == '0'\n+    assert sig.parameters['c'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['c'].default == '1'\n     with pytest.raises(SyntaxError):\n         inspect.signature_from_str('')\n \n",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..3db06e6 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -53,6 +54,24 @@ def test_MockObject():\n \n \n def test_mock():\n+    # Test case for generically-typed classes\n+    from typing import Generic, TypeVar\n+    \n+    T = TypeVar('T')\n+\n+    class GenericClass(Generic[T]):\n+        \"\"\"Generic class docstring\"\"\"\n+        \n+        def method(self, value: T) -> T:\n+            return value\n+\n+    class SubClassGeneric(GenericClass[int]):\n+        \"\"\"Subclass of GenericClass with int type\"\"\"\n+\n+    obj_generic = SubClassGeneric()\n+    assert SubClassGeneric.__doc__ == \"Subclass of GenericClass with int type\"\n+    assert isinstance(obj_generic, SubClassGeneric)\n+    assert obj_generic.method(5) == 5\n     modname = 'sphinx.unknown'\n     submodule = modname + '.submodule'\n     assert modname not in sys.modules\n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex 464108d..a8dc802 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -1261,9 +1261,17 @@ def test_automethod_for_builtin(app):\n         '',\n     ]\n \n-\n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n-def test_automethod_for_decorated(app):\n+def test_autoinit_for_decorated(app):\n+    actual = do_autodoc(app, 'method', 'target.decorator.Foo.__init__')\n+    assert list(actual) == [\n+        '',\n+        '.. py:method:: Foo.__init__(x, y)',\n+        '   :module: target.decorator',\n+        '',\n+        '   Initializer for Foo class.',\n+        '',\n+    ]\n     actual = do_autodoc(app, 'method', 'target.decorator.Bar.meth')\n     assert list(actual) == [\n         '',\n",
  "sphinx-doc__sphinx-7985": "",
  "sphinx-doc__sphinx-8035": "diff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex ad1d950..2e48fef 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_private_members\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -16,6 +17,50 @@ from test_ext_autodoc import do_autodoc\n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_private_field(app):\n     app.config.autoclass_content = 'class'\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_specific_private_members(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\n+        \"members\": None,\n+        \"private-members\": \"_specific_private_method,_another_private_method\"\n+    }\n+    actual = do_autodoc(app, 'class', 'target.ClassWithPrivateMethods', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: ClassWithPrivateMethods()',\n+        '   :module: target',\n+        '',\n+        '',\n+        '   .. py:method:: ClassWithPrivateMethods._specific_private_method()',\n+        '      :module: target',\n+        '',\n+        '      Specific private method docstring.',\n+        '',\n+        '',\n+        '   .. py:method:: ClassWithPrivateMethods._another_private_method()',\n+        '      :module: target',\n+        '',\n+        '      Another private method docstring.',\n+        '',\n+    ]\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_no_private_members(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\n+        \"members\": None,\n+        \"private-members\": \"\"\n+    }\n+    actual = do_autodoc(app, 'class', 'target.ClassWithPrivateMethods', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: ClassWithPrivateMethods()',\n+        '   :module: target',\n+        '',\n+    ]\n     options = {\"members\": None}\n     actual = do_autodoc(app, 'module', 'target.private', options)\n     assert list(actual) == [\n",
  "sphinx-doc__sphinx-8120": "diff --git a/tests/test_intl.py b/tests/test_intl.py\nindex 58339b1..72bd4f8 100644\n--- a/tests/test_intl.py\n+++ b/tests/test_intl.py\n@@ -1286,6 +1286,34 @@ def test_image_glob_intl_using_figure_language_filename(app):\n                 candidates={'application/pdf': 'subdir/svgimg.pdf',\n                             'image/svg+xml': 'subdir/svgimg.svg'})\n \n-\n-def getwarning(warnings):\n-    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n+from babel.messages import pofile\n+from sphinx import locale\n+\n+def test_custom_locale_override(make_app, app_params, sphinx_test_tempdir):\n+    try:\n+        # clear translators cache\n+        locale.translators.clear()\n+\n+        # prepare message catalog (.po)\n+        locale_dir = sphinx_test_tempdir / 'basic' / 'locales' / 'da' / 'LC_MESSAGES'\n+        locale_dir.makedirs()\n+        with (locale_dir / 'sphinx.po').open('wb') as f:\n+            catalog = Catalog()\n+            catalog.add('Fig. %s', 'Foobar %s')\n+            catalog.add('Listing %s', 'Whatever %s')\n+            pofile.write_po(f, catalog)\n+\n+        # construct application and convert po file to .mo\n+        args, kwargs = app_params\n+        app = make_app(*args, **kwargs)\n+        assert (locale_dir / 'sphinx.mo').exists()\n+        assert app.translator.gettext('Fig. %s') % 1 == 'Foobar 1'\n+        assert app.translator.gettext('Listing %s') % 1 == 'Whatever 1'\n+\n+        app.build()\n+        content = (app.outdir / 'index.html').read_text()\n+        assert 'Foobar 1' in content\n+        assert 'Whatever 1' in content\n+    finally:\n+        locale.translators.clear()\n+    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n",
  "sphinx-doc__sphinx-8269": "",
  "sphinx-doc__sphinx-8459": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex d1881df..9055e8a 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_configs\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -8,6 +9,64 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+@pytest.mark.skipif(sys.version_info < (3, 7), reason='python 3.7+ is required.')\n+@pytest.mark.sphinx('text', testroot='ext-autodoc', srcdir='autodoc_typehints_description_and_type_aliases')\n+def test_autodoc_typehints_with_type_aliases(app):\n+    \"\"\"\n+    Test that autodoc_type_aliases works with autodoc_typehints set to \"description\".\n+    \"\"\"\n+    # Write a test .py file with the necessary alias and function\n+    (app.srcdir / 'types.py').write_text('''\n+from typing import Dict, Any\n+\n+JSONObject = Dict[str, Any]\n+\n+def sphinx_doc(data: JSONObject) -> JSONObject:\n+    \"\"\"Does it work.\n+\n+    Args:\n+        data: Does it args.\n+\n+    Returns:\n+        Does it work in return.\n+    \"\"\"\n+    return {}\n+''')\n+\n+    # Create a corresponding .rst file for the test\n+    (app.srcdir / 'index.rst').write_text('.. autofunction:: types.sphinx_doc')\n+\n+    # Configure Sphinx with the appropriate settings\n+    app.config.autodoc_typehints = 'description'\n+    app.config.autodoc_type_aliases = {'JSONObject': 'types.JSONObject'}\n+\n+    app.build()\n+\n+    # Read the generated documentation\n+    context = (app.outdir / 'index.txt').read_text()\n+    expected_output = (\n+        \"types.sphinx_doc(data)\\n\"\n+        \"   Does it work.\\n\"\n+        \"\\n\"\n+        \"   Parameters:\\n\"\n+        \"      * **data** (*types.JSONObject*) --\\n\"\n+        \"         Does it args.\\n\"\n+        \"\\n\"\n+        \"   Returns:\\n\"\n+        \"      Does it work in return.\\n\"\n+        \"\\n\"\n+        \"   Return type:\\n\"\n+        \"      types.JSONObject\\n\"\n+    )\n+\n+    # Check if the expected alias is used in the output\n+    assert expected_output in context\n+\n+from typing import Dict, Any\n+from sphinx.testing.fixtures import test_params\n+import pytest\n+import sys\n+\n import platform\n import sys\n \n",
  "sphinx-doc__sphinx-8475": "",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8721": "",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex 3c31d3d..a25f59d 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -515,6 +515,16 @@ def test_dict_customtype():\n     # Type is unsortable, just check that it does not crash\n     assert \"<CustomType(2)>: 2\" in description\n \n+def test_object_description_enum_without_value():\n+    import enum\n+\n+    class MyEnum(enum.Enum):\n+        ValueA = 10\n+        ValueB = 20\n+\n+    # Test that the object description returns the Enum member name, not the representation\n+    assert inspect.object_description(MyEnum.ValueA) == \"MyEnum.ValueA\"\n+\n \n def test_getslots():\n     class Foo:\n",
  "sphinx-doc__sphinx-9320": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\nindex ff8df08..59825af 100644\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -15,12 +15,32 @@ import pytest\n \n from sphinx import application\n from sphinx.cmd import quickstart as qs\n+import sys\n from sphinx.util.console import coloron, nocolor\n \n warnfile = StringIO()\n \n+def test_exit_on_enter_with_existing_confpy(monkeypatch):\n+    # Mock the path.isfile to always return True to simulate existing conf.py\n+    def mock_isfile(path):\n+        return True\n \n-def setup_module():\n+    monkeypatch.setattr(path, 'isfile', mock_isfile)\n+\n+    # Mock the input to simulate pressing 'Enter' at the prompt\n+    def mock_input(prompt):\n+        if 'Please enter a new root path' in prompt:\n+            return ''\n+        return None\n+\n+    qs.term_input = mock_input\n+    d = {}\n+    \n+    # Capture the SystemExit exception to verify proper exit\n+    with pytest.raises(SystemExit) as excinfo:\n+        qs.ask_user(d)\n+\n+    assert excinfo.value.code == 1  # Check if exit code is 1, which indicates proper exit on 'Enter'\n     nocolor()\n \n \n",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..285ce81 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -54,6 +54,7 @@ from sphinx.pycode import ast\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n     (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n+    (\"(1,)\", \"(1,)\"),                             # Tuple (single element)\n     (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n",
  "sphinx-doc__sphinx-9591": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 29731ea..4b5ffff 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -847,7 +847,27 @@ def test_pyproperty(app):\n     assert domain.objects['Class.prop2'] == ('index', 'Class.prop2', 'property', False)\n \n \n-def test_pydecorator_signature(app):\n+def test_pyproperty_type_annotation_xref(app):\n+    text = (\".. py:class:: Square\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\")\n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                                    [desc_name, \"Square\"])],\n+                                  [desc_content, (addnodes.index,\n+                                                  desc)])]))\n+    assert_node(doctree[1][1][0], addnodes.index,\n+                entries=[('single', 'end (Square property)', 'Square.end', '', None)])\n+    assert_node(doctree[1][1][1], ([desc_signature, ([desc_annotation, \"property \"],\n+                                                     [desc_name, \"end\"],\n+                                                     [desc_annotation, (\": \",\n+                                                                        [pending_xref, \"Point\"])])],\n+                                   [desc_content, ()]))\n+    assert 'Square.end' in domain.objects\n+    assert domain.objects['Square.end'] == ('index', 'Square.end', 'property', False)\n     text = \".. py:decorator:: deco\"\n     domain = app.env.get_domain('py')\n     doctree = restructuredtext.parse(app, text)\n",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..984f759 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -754,9 +754,10 @@ def test_pymethod_options(app):\n     assert 'Class.meth4' in domain.objects\n     assert domain.objects['Class.meth4'] == ('index', 'Class.meth4', 'method', False)\n \n+    # :property:\n     # :property:\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
  "sphinx-doc__sphinx-9711": "diff --git a/sphinx/extension.py b/sphinx/extension.py\nindex 6ac780b..136f230 100644\n--- a/sphinx/extension.py\n+++ b/sphinx/extension.py\n@@ -10,6 +10,7 @@\n \n from typing import TYPE_CHECKING, Any, Dict\n \n+from packaging.version import parse as parse_version\n from sphinx.config import Config\n from sphinx.errors import VersionRequirementError\n from sphinx.locale import __\n@@ -51,7 +52,7 @@ def verify_needs_extensions(app: \"Sphinx\", config: Config) -> None:\n                               'but it is not loaded.'), extname)\n             continue\n \n-        if extension.version == 'unknown version' or reqversion > extension.version:\n+        if extension.version == 'unknown version' or parse_version(reqversion) > parse_version(extension.version):\n             raise VersionRequirementError(__('This project needs the extension %s at least in '\n                                              'version %s and therefore cannot be built with '\n                                              'the loaded version (%s).') %\n",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..09a538e 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -236,6 +236,34 @@ def test_Point2D():\n     assert p2.distance(p3) == sqrt(17)/2\n \n \n+def test_issue_11617():\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point2D(2, 0)\n+    assert p1.distance(p2) == sqrt(5)\n+\n+def test_2d_to_3d_distance():\n+    p1 = Point2D(0, 0)\n+    p2 = Point3D(0, 0, 3)\n+    assert p1.distance(p2) == 3\n+\n+def test_3d_to_2d_distance():\n+    p1 = Point3D(3, 4, 0)\n+    p2 = Point2D(0, 0)\n+    assert p1.distance(p2) == 5\n+\n+def test_same_dimension_points():\n+    p1 = Point3D(1, 2, 3)\n+    p2 = Point3D(4, 5, 6)\n+    assert p1.distance(p2) == sqrt(27)\n+\n+def test_3d_to_3d_different_z():\n+    p1 = Point3D(1, 2, 3)\n+    p2 = Point3D(1, 2, 0)\n+    assert p1.distance(p2) == 3\n+\n+from sympy.geometry import Point, Point2D, Point3D\n+from sympy import sqrt\n+\n def test_issue_9214():\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..b81dae4 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -741,6 +741,23 @@ def test_special_printers():\n     assert isinstance(func1(), mpi)\n     assert isinstance(func2(), mpi)\n \n+from sympy import Float\n+from sympy.utilities.lambdify import implemented_function\n+\n+def test_issue_12092():\n+    f = implemented_function('f', lambda x: x**2)\n+    g = implemented_function('g', lambda x: 2 * x)\n+    \n+    # Test single function\n+    assert f(2).evalf() == Float(4)\n+    assert g(2).evalf() == Float(4)\n+    \n+    # Test composition of functions\n+    assert f(g(2)).evalf() == Float(16)\n+    assert g(f(2)).evalf() == Float(8)\n+    assert f(f(2)).evalf() == Float(16)\n+    assert g(g(2)).evalf() == Float(8)\n+\n def test_true_false():\n     # We want exact is comparison here, not just ==\n     assert lambdify([], true)() is True\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..06f8217 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,6 +83,10 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n+    # Test for the total sum of the elements in the identity matrix\n+    assert Sum(In[i, j], (i, 0, n-1), (j, 0, n-1)).doit() == n\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n+\n \n def test_Identity_doit():\n     Inn = Identity(Add(n, n, evaluate=False))\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..db7fd68 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -330,6 +330,16 @@ def test_args():\n     assert p._array_form == [3, 2, 0, 1, 5, 4]\n     p = Permutation((0, 3, 1, 2))\n     assert p._cyclic_form is None\n+\n+    # Test for non-disjoint cycles, should not raise ValueError\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+    assert Permutation([[0, 1], [1, 2], [0, 2]]) == Permutation([0, 2, 1])\n+    assert Permutation([[0, 1], [1, 2], [2, 0]]) == Permutation([1, 2, 0])\n+    assert Permutation([[0, 2], [2, 1], [1, 0]]) == Permutation([0, 2, 1])\n+    assert Permutation([[0, 1, 2], [0, 1]]) == Permutation([1, 0, 2])\n+    assert Permutation([[0, 1], [2, 3]]) == Permutation([1, 0, 3, 2])\n+    # Test identity permutation with repeated cycles\n+    assert Permutation([[0], [1], [2, 2]]) == Permutation([0, 1, 2])\n     assert p._array_form == [0, 3, 1, 2]\n     assert Permutation([0]) == Permutation((0, ))\n     assert Permutation([[0], [1]]) == Permutation(((0, ), (1, ))) == \\\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..273303f 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -490,6 +490,22 @@ def test_errors():\n         lambda: SparseMatrix(1, 2, [1, 2]) + SparseMatrix(2, 1, [2, 1]))\n \n \n+def test_zero_row_hstack():\n+    # Test horizontal stacking of 0 x n matrices\n+    M1 = SparseMatrix.zeros(0, 0)\n+    M2 = SparseMatrix.zeros(0, 1)\n+    M3 = SparseMatrix.zeros(0, 2)\n+    M4 = SparseMatrix.zeros(0, 3)\n+    assert SparseMatrix.hstack(M1, M2, M3, M4).shape == (0, 6)\n+\n+def test_zero_column_vstack():\n+    # Test vertical stacking of n x 0 matrices\n+    M1 = SparseMatrix.zeros(0, 0)\n+    M2 = SparseMatrix.zeros(1, 0)\n+    M3 = SparseMatrix.zeros(2, 0)\n+    M4 = SparseMatrix.zeros(3, 0)\n+    assert SparseMatrix.vstack(M1, M2, M3, M4).shape == (6, 0)\n+\n def test_len():\n     assert not SparseMatrix()\n     assert SparseMatrix() == SparseMatrix([])\n",
  "sympy__sympy-13372": "diff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\nindex e95146a..74d1cb0 100644\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -162,6 +162,17 @@ def test_evalf_near_integers():\n \n def test_evalf_ramanujan():\n     assert NS(exp(pi*sqrt(163)) - 640320**3 - 744, 10) == '-7.499274028e-13'\n+\n+    # issue 13076\n+    y = Symbol('y')\n+    assert NS(Mul(Max(0, y), x, evaluate=False).evalf()) == 'x*Max(0, y)'\n+    assert NS(Mul(x, Max(0, y), evaluate=False).evalf()) == 'x*Max(0, y)'\n+\n+    # Additional test cases\n+    assert NS(Mul(Max(1, 2), x, evaluate=False).evalf()) == '2.00000000000000*x'\n+    assert NS(Mul(x, Max(-1, -2), evaluate=False).evalf()) == '-1.00000000000000*x'\n+    assert NS(Mul(Max(0, 1), Max(1, 2), evaluate=False).evalf()) == '2.00000000000000'\n+    assert NS(Mul(x, Max(0, x), evaluate=False).evalf(), subs={x: 5}) == '25.0000000000000'\n     # A related identity\n     A = 262537412640768744*exp(-pi*sqrt(163))\n     B = 196884*exp(-2*pi*sqrt(163))\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..fec752e 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -273,7 +273,18 @@ def test_coth():\n     assert coth(k*pi*I) == -cot(k*pi)*I\n \n \n-def test_coth_series():\n+def test_coth_subs_issue():\n+    x = Symbol('x')\n+    values_to_test = [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]\n+    for val in values_to_test:\n+        expr = coth(log(tan(x)))\n+        try:\n+            expr.subs(x, val)\n+        except NameError as e:\n+            assert False, f\"NameError encountered: {e}\"\n+\n+    assert coth(log(tan(2))) == coth(log(-tan(2)))\n+    assert coth(1 + I*pi/2) == tanh(1)\n     x = Symbol('x')\n     assert coth(x).series(x, 0, 8) == \\\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..9ab162b 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -165,7 +165,20 @@ def test_difference():\n     assert -1 in S.Reals - S.Naturals\n \n \n+from sympy import symbols, FiniteSet, Interval, Complement\n+\n+x, y = symbols('x y')\n+\n def test_Complement():\n+    # Issue 12712 test cases\n+    assert Complement(FiniteSet(x, y, 2), Interval(-10, 10)) == \\\n+        Complement(FiniteSet(x, y), Interval(-10, 10))\n+    assert Complement(FiniteSet(x, 5, 10), Interval(5, 15)) == \\\n+        Complement(FiniteSet(x), Interval(5, 15))\n+    assert Complement(FiniteSet(x, y, -5), Interval(-10, 0)) == \\\n+        Complement(FiniteSet(x, y), Interval(-10, 0))\n+    assert Complement(FiniteSet(0, 1, 2, x), Interval(0, 2)) == \\\n+        Complement(FiniteSet(x), Interval(0, 2))\n     assert Complement(Interval(1, 3), Interval(1, 2)) == Interval(2, 3, True)\n     assert Complement(FiniteSet(1, 3, 4), FiniteSet(3, 4)) == FiniteSet(1)\n     assert Complement(Union(Interval(0, 2),\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..5a13ea8 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -195,6 +195,63 @@ def test_row_insert():\n         assert flatten(eye_Shaping(3).row_insert(i, r4).col(0).tolist()) == l\n \n def test_col_insert():\n+    from sympy import Matrix, eye, ones\n+\n+    # Original test case\n+    c4 = Matrix([4, 4, 4])\n+    for i in range(-4, 5):\n+        l = [0, 0, 0]\n+        l.insert(i, 4)\n+        assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n+\n+    # Additional test cases\n+\n+    # Test case based on the original issue description\n+    M = eye(6)\n+    V = 2 * ones(6, 2)\n+    expected_result = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert M.col_insert(3, V) == expected_result\n+\n+    # Test inserting zero columns\n+    Z = Matrix.zeros(6, 2)\n+    expected_result_zero = Matrix([\n+        [1, 0, 0, 0, 0, 0, 0, 0],\n+        [0, 1, 0, 0, 0, 0, 0, 0],\n+        [0, 0, 1, 0, 0, 0, 0, 0],\n+        [0, 0, 0, 0, 0, 1, 0, 0],\n+        [0, 0, 0, 0, 0, 0, 1, 0],\n+        [0, 0, 0, 0, 0, 0, 0, 1]\n+    ])\n+    assert M.col_insert(3, Z) == expected_result_zero\n+\n+    # Test inserting at the start\n+    expected_result_start = Matrix([\n+        [2, 2, 1, 0, 0, 0, 0, 0],\n+        [2, 2, 0, 1, 0, 0, 0, 0],\n+        [2, 2, 0, 0, 1, 0, 0, 0],\n+        [2, 2, 0, 0, 0, 1, 0, 0],\n+        [2, 2, 0, 0, 0, 0, 1, 0],\n+        [2, 2, 0, 0, 0, 0, 0, 1]\n+    ])\n+    assert M.col_insert(0, V) == expected_result_start\n+\n+    # Test inserting at the end\n+    expected_result_end = Matrix([\n+        [1, 0, 0, 0, 0, 2, 2],\n+        [0, 1, 0, 0, 0, 2, 2],\n+        [0, 0, 1, 0, 0, 2, 2],\n+        [0, 0, 0, 1, 0, 2, 2],\n+        [0, 0, 0, 0, 1, 2, 2],\n+        [0, 0, 0, 0, 0, 2, 2]\n+    ])\n+    assert M.col_insert(5, V) == expected_result_end\n     c4 = Matrix([4, 4, 4])\n     for i in range(-4, 5):\n         l = [0, 0, 0]\n",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..790a782 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -665,8 +665,26 @@ def test_Poly_sub():\n def test_Poly_mul():\n     assert Poly(0, x).mul(Poly(0, x)) == Poly(0, x)\n     assert Poly(0, x) * Poly(0, x) == Poly(0, x)\n-\n-    assert Poly(2, x).mul(Poly(4, x)) == Poly(8, x)\n+from sympy import Poly, Symbol, S\n+\n+x = Symbol('x')\n+\n+def test_issue_13079():\n+    # Original test cases\n+    assert Poly(x)*x == Poly(x**2, x, domain='ZZ')\n+    assert x*Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert -2*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2)*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert Poly(x)*S(-2) == Poly(-2*x, x, domain='ZZ')\n+    \n+    # Additional test cases\n+    assert Poly(x + 1)*x == Poly(x**2 + x, x, domain='ZZ')\n+    assert x*Poly(x + 1) == Poly(x**2 + x, x, domain='ZZ')\n+    assert Poly(x)*3 == Poly(3*x, x, domain='ZZ')\n+    assert 3*Poly(x) == Poly(3*x, x, domain='ZZ')\n+    assert Poly(x)*Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert Poly(x*y, x, y)*x == Poly(x**2*y, x, y, domain='ZZ')\n+    assert x*Poly(x*y, x, y) == Poly(x**2*y, x, y, domain='ZZ')\n     assert Poly(2, x, y) * Poly(4, x) == Poly(8, x, y)\n     assert Poly(4, x).mul(Poly(2, x, y)) == Poly(8, x, y)\n     assert Poly(4, x, y) * Poly(2, x, y) == Poly(8, x, y)\n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..53523b8 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -54,6 +54,27 @@ def test_printmethod():\n             return \"foo\"\n     assert latex(R(x)) == \"foo\"\n \n+def test_latex_mul_symbol_custom():\n+    # Original test patch cases\n+    assert latex(3*x**2*y, mul_symbol='\\\\\\\\,') == r\"3\\\\,x^{2}\\\\,y\"\n+    assert latex(1.5*3**x, mul_symbol='\\\\\\\\,') == r\"1.5 \\\\, 3^{x}\"\n+\n+    # Additional test cases for different mul_symbols\n+    assert latex(4*x*y, mul_symbol='times') == r\"4 \\times x \\times y\"\n+    assert latex(4*x*y, mul_symbol='ldot') == r\"4 \\,.\\, x \\,.\\, y\"\n+    assert latex(4*x*y, mul_symbol='dot') == r\"4 \\cdot x \\cdot y\"\n+\n+    # Test with different expressions\n+    assert latex(x*y*z, mul_symbol='\\\\\\\\,') == r\"x\\\\,y\\\\,z\"\n+    assert latex(5*x*y**2, mul_symbol='\\\\\\\\,') == r\"5\\\\,x\\\\,y^{2}\"\n+\n+    # Test with arbitrary symbol\n+    assert latex(2*x*y, mul_symbol='**') == r\"2**x**y\"\n+    assert latex(x*y*z, mul_symbol='&&') == r\"x&&y&&z\"\n+\n+    # Edge case: no symbol (empty string)\n+    assert latex(3*x*y, mul_symbol='') == r\"3xy\"\n+\n \n def test_latex_basic():\n     assert latex(1 + x) == \"x + 1\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..75bc33c 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -307,8 +307,14 @@ def test_tolist():\n     m = Matrix(lst)\n     assert m.tolist() == lst\n \n-\n-def test_as_mutable():\n+def test_issue_13835():\n+    from sympy import symbols, Matrix\n+    a = symbols('a')\n+    M = lambda n: Matrix([[i + a*j for i in range(n)] for j in range(n)])\n+    # Test cases from the issue\n+    assert M(5).det() == 0\n+    assert M(6).det() == 0\n+    assert M(7).det() == 0\n     assert zeros(0, 3).as_mutable() == zeros(0, 3)\n     assert zeros(0, 3).as_immutable() == ImmutableMatrix(zeros(0, 3))\n     assert zeros(3, 0).as_immutable() == ImmutableMatrix(zeros(3, 0))\n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..bc5c5cf 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -708,8 +708,60 @@ def test_issue_10003():\n     G = Gamma('g', 1, 2)\n     assert P(X < -1) == S.Zero\n     assert P(G < -1) == S.Zero\n+from sympy.utilities.randtest import verify_numerically as tn\n \n def test_precomputed_cdf():\n+    # Additional test cases for distributions with precomputed CDFs\n+    x = symbols(\"x\", real=True, finite=True)\n+    a, b, p, k, l, mu, s, nu, omega = symbols(\"a b p k l mu s nu omega\", positive=True)\n+\n+    # Test Arcsin CDF\n+    X = Arcsin(\"X\", a, b)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+    # Test Dagum CDF\n+    X = Dagum(\"D\", p, a, b)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+    # Test Erlang CDF\n+    X = Erlang(\"E\", k, l)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+    # Test Frechet CDF\n+    X = Frechet(\"F\", a, s, m=0)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+    # Test Gamma CDF\n+    X = Gamma(\"G\", k, theta=1/l)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+    # Test GammaInverse CDF\n+    X = GammaInverse(\"GI\", a, b)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+    # Test Kumaraswamy CDF\n+    X = Kumaraswamy(\"K\", a, b)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+    # Test Laplace CDF\n+    X = Laplace(\"LA\", mu, b)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+    # Test Logistic CDF\n+    X = Logistic(\"L\", mu, s)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+    # Test Nakagami CDF\n+    X = Nakagami(\"N\", mu, omega)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+    # Test StudentT CDF\n+    X = StudentT(\"S\", nu)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+    # Test UniformSum CDF\n+    X = UniformSum(\"US\", 5)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n     x = symbols(\"x\", real=True, finite=True)\n     mu = symbols(\"mu\", real=True, finite=True)\n     sigma, xm, alpha = symbols(\"sigma xm alpha\", positive=True, finite=True)\n",
  "sympy__sympy-13974": "",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_str.py b/sympy/printing/tests/test_str.py\nindex 29c7fd2..e6f9716 100644\n--- a/sympy/printing/tests/test_str.py\n+++ b/sympy/printing/tests/test_str.py\n@@ -491,6 +491,8 @@ def test_Rational():\n \n     assert sstr(Rational(2, 3), sympy_integers=True) == \"S(2)/3\"\n     assert sstr(Symbol(\"x\")**Rational(2, 3), sympy_integers=True) == \"x**(S(2)/3)\"\n+    assert sstr(Eq(x, Rational(1, 2)), sympy_integers=True) == \"Eq(x, S(1)/2)\"\n+    assert sstr(Limit(x, x, Rational(1, 2)), sympy_integers=True) == \"Limit(x, x, S(1)/2)\"\n \n \n def test_Float():\n",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..d5a1a36 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -3,12 +3,44 @@ from sympy.physics.vector import ReferenceFrame, Vector, dynamicsymbols, dot\n from sympy.abc import x, y, z\n from sympy.utilities.pytest import raises\n \n+from sympy.physics.vector import ReferenceFrame, Vector\n \n-Vector.simp = True\n-A = ReferenceFrame('A')\n \n-\n-def test_Vector():\n+def test_vector_zero_operations():\n+    N = ReferenceFrame('N')\n+    # Test addition of zero multiplied vectors\n+    assert N.x + 0 * N.x == N.x\n+    assert sum([N.x, 0 * N.x]) == N.x\n+    assert sum([0 * N.x, N.x]) == N.x\n+    assert sum([0 * N.x, 0 * N.y, 0 * N.z]) == Vector.zero\n+\n+    # Test some more zero operations\n+    v = 0 * N.x + 0 * N.y + 0 * N.z\n+    assert v == Vector.zero\n+    assert v + N.x == N.x\n+    assert N.x + v == N.x\n+\n+    # Test subtraction with zero vectors\n+    assert N.x - 0 * N.x == N.x\n+    assert N.x - Vector.zero == N.x\n+    assert Vector.zero - N.x == -N.x\n+\n+    # Test dot product with zero vectors\n+    assert (N.x & Vector.zero) == 0\n+    assert (Vector.zero & N.x) == 0\n+    assert (Vector.zero & Vector.zero) == 0\n+\n+    # Test cross product with zero vectors\n+    assert (N.x ^ Vector.zero) == Vector.zero\n+    assert (Vector.zero ^ N.x) == Vector.zero\n+    assert (Vector.zero ^ Vector.zero) == Vector.zero\n+\n+    # Ensure no errors with zero vectors in a list\n+    vectors = [N.x, 0 * N.y]\n+    assert sum(vectors) == N.x\n+\n+    vectors = [0 * N.x, 0 * N.y, 0 * N.z]\n+    assert sum(vectors) == Vector.zero\n     assert A.x != A.y\n     assert A.y != A.z\n     assert A.z != A.x\n",
  "sympy__sympy-14976": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..51b071e 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1,3 +1,4 @@\n+\n from distutils.version import LooseVersion as V\n from itertools import product\n import math\n@@ -134,6 +135,20 @@ def test_math_lambda():\n \n \n @conserve_mpmath_dps\n+def test_mpmath_lambdify_rational():\n+    x = symbols('x')\n+    eqn = Eq(Function('rf')(18, x), 77 + Rational(1, 3))\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    \n+    # Check if the source code contains mpmath.mpf for the rational\n+    source_code = inspect.getsource(f)\n+    assert 'mpmath.mpf(232)/mpmath.mpf(3)' in source_code\n+\n+    # Verify the precision of the result\n+    x0 = mpmath.mpf('1.5')\n+    result = f(x0)\n+    expected_result = (mpmath.rf(18, x0) - mpmath.mpf(232)/mpmath.mpf(3))\n+    assert mpmath.almosteq(result, expected_result, rel_eps=mpmath.mpf('1.0e-50'))\n def test_mpmath_lambda():\n     mpmath.mp.dps = 50\n     sin02 = mpmath.mpf(\"0.19866933079506121545941262711838975037020672954020\")\n@@ -145,6 +160,20 @@ def test_mpmath_lambda():\n \n \n @conserve_mpmath_dps\n+def test_mpmath_lambdify_rational():\n+    x = symbols('x')\n+    eqn = Eq(Function('rf')(18, x), 77 + Rational(1, 3))\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    \n+    # Check if the source code contains mpmath.mpf for the rational\n+    source_code = inspect.getsource(f)\n+    assert 'mpmath.mpf(232)/mpmath.mpf(3)' in source_code\n+\n+    # Verify the precision of the result\n+    x0 = mpmath.mpf('1.5')\n+    result = f(x0)\n+    expected_result = (mpmath.rf(18, x0) - mpmath.mpf(232)/mpmath.mpf(3))\n+    assert mpmath.almosteq(result, expected_result, rel_eps=mpmath.mpf('1.0e-50'))\n def test_number_precision():\n     mpmath.mp.dps = 50\n     sin02 = mpmath.mpf(\"0.19866933079506121545941262711838975037020672954020\")\n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..75ece15 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -73,7 +74,8 @@ def test_ndim_array_initiation():\n \n     from sympy.abc import x\n     rank_zero_array = ImmutableDenseNDimArray(x)\n-    assert len(rank_zero_array) == 0\n+    # Testing rank-zero array, expected length should be 1 to match numpy behavior\n+    assert len(rank_zero_array) == 1\n     assert rank_zero_array.shape == ()\n     assert rank_zero_array.rank() == 0\n     assert rank_zero_array[()] == x\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..5c035b0 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n@@ -23,8 +24,18 @@ def test_Rational():\n     assert mcode(x + Rational(3, 7)) == \"x + 3/7\"\n     assert mcode(Rational(3, 7)*x) == \"(3/7)*x\"\n \n-\n-def test_Function():\n+def test_Max():\n+    # Testing single Max with two arguments\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"\n+    \n+    # Testing Max with more than two arguments\n+    assert mcode(Max(x, y, 2)) == \"Max[x, y, 2]\"\n+    assert mcode(Max(2, y, x)) == \"Max[2, y, x]\"\n+    \n+    # Testing combinations with Min\n+    assert mcode(Max(x, y) * Min(y, z)) == \"Max[x, y]*Min[y, z]\"\n+    assert mcode(Max(x, y, z) * Min(y, z)) == \"Max[x, y, z]*Min[y, z]\"\n     assert mcode(f(x, y, z)) == \"f[x, y, z]\"\n     assert mcode(sin(x) ** cos(x)) == \"Sin[x]^Cos[x]\"\n     assert mcode(conjugate(x)) == \"Conjugate[x]\"\n",
  "sympy__sympy-15349": "diff --git a/sympy/algebras/tests/test_quaternion.py b/sympy/algebras/tests/test_quaternion.py\nindex c486cc1..65e3eb2 100644\n--- a/sympy/algebras/tests/test_quaternion.py\n+++ b/sympy/algebras/tests/test_quaternion.py\n@@ -112,6 +112,44 @@ def test_quaternion_conversions():\n                                                [sin(theta),  cos(theta), 0],\n                                                [0,           0,          1]])\n \n+def test_quaternion_rotation_iss1593():\n+    \"\"\" \n+    Test for the specific sign mistake in the rotation matrix.\n+    \"\"\"\n+    from sympy import symbols, cos, sin, trigsimp\n+    x = symbols('x')\n+    q = Quaternion(cos(x/2), sin(x/2), 0, 0)\n+    expected_matrix = Matrix([\n+        [1,      0,      0],\n+        [0, cos(x), -sin(x)],\n+        [0, sin(x),  cos(x)]\n+    ])\n+    assert(trigsimp(q.to_rotation_matrix()) == expected_matrix)\n+\n+def test_quaternion_rotation_general():\n+    \"\"\"\n+    General test of the to_rotation_matrix to ensure correctness with varied inputs.\n+    \"\"\"\n+    from sympy import symbols, cos, sin, trigsimp, sqrt\n+    x, y, z = symbols('x y z')\n+    \n+    # Test for another quaternion\n+    q = Quaternion(sqrt(2)/2, sqrt(2)/2, 0, 0)\n+    expected_matrix_2 = Matrix([\n+        [1, 0, 0],\n+        [0, 0, -1],\n+        [0, 1,  0]\n+    ])\n+    assert(trigsimp(q.to_rotation_matrix()) == expected_matrix_2)\n+\n+    # Test for more general quaternion\n+    q = Quaternion(cos(x/2), sin(x/2), sin(y/2), sin(z/2))\n+    # Here we are verifying that the matrix is in the expected form with trigonometry identities.\n+    # Expected matrix would be calculated according to the quaternion rotation formula.\n+    rotation_matrix = q.to_rotation_matrix()\n+    # We expect this test to pass if the implementation is correct.\n+    assert isinstance(rotation_matrix, Matrix)\n+\n     assert q2.to_axis_angle() == ((0, 0, sin(theta/2)/Abs(sin(theta/2))),\n                                    2*acos(cos(theta/2)))\n \n@@ -119,4 +157,4 @@ def test_quaternion_conversions():\n                [cos(theta), -sin(theta), 0, sin(theta) - cos(theta) + 1],\n                [sin(theta),  cos(theta), 0, -sin(theta) - cos(theta) + 1],\n                [0,           0,          1,  0],\n-               [0,           0,          0,  1]])\n+               [0,           0,          0,  1]])\n",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..565ba8e 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1508,7 +1508,26 @@ def test_issue_5919():\n     assert (x/(y*(1 + y))).expand() == x/(y**2 + y)\n \n \n+from sympy import symbols, Symbol, Mod, factorial\n+\n def test_Mod():\n+    # Additional test cases for issue #15493\n+    i, j = symbols('i j', integer=True, positive=True)\n+    # Basic reduction\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+    # Nested modulus with different divisors\n+    assert Mod(8*i/j, 4) == 4*Mod(2*i/j, 1)\n+    # Multiplicative modulus should reduce\n+    assert Mod(12*j, 4) == 0\n+    # More complex expression with multiple variables\n+    assert Mod(15*i*j, 10*j) == 5*Mod(i, 2)\n+    # Test for zero modulus\n+    assert Mod(3*i, 1) == 0\n+    # Test with negatives\n+    assert Mod(-3*i, 2) == Mod(-i, 2)\n+    # Test with symbolic modulus\n+    k = Symbol('k', integer=True)\n+    assert Mod(3*k, k) == 0\n     assert Mod(x, 1).func is Mod\n     assert pi % pi == S.Zero\n     assert Mod(5, 3) == 2\n",
  "sympy__sympy-15809": "",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..ecce6bc 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1987,10 +1987,32 @@ def test_Add_is_zero():\n     assert (x + y).is_zero\n \n \n-def test_issue_14392():\n+def test_issue_15873():\n+    from sympy import I, simplify\n+\n+    # Test if is_zero returns None for the expression without simplification\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None\n+\n+    # Verify that simplifying the expression leads to is_zero being True\n+    simplified_e = simplify(e)\n+    assert simplified_e.is_zero is True\n+\n+    # Additional test cases to verify behavior with complex numbers\n+    e2 = (1 + I)**2 - 2*I\n+    assert e2.is_zero is None\n+    assert simplify(e2).is_zero is True\n+\n+    # Test with a clearly non-zero complex expression\n+    e3 = (1 + 2*I) + (3 - I)\n+    assert e3.is_zero is False\n+\n+    # Test with an expression that should be zero\n+    e4 = (1 + I) - (1 + I)\n+    assert e4.is_zero is True\n     assert (sin(zoo)**2).as_real_imag() == (nan, nan)\n \n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..ca2fde7 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -512,7 +512,32 @@ def test_posify():\n         'Sum(_x**(-n), (n, 1, 3))'\n \n \n-def test_issue_4194():\n+def test_posify_keeps_finite_assumption():\n+    # Test that posify preserves the 'finite' assumption\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0['finite'] == True\n+    assert eq.assumptions0['infinite'] == False\n+\n+def test_posify_keeps_other_assumptions():\n+    # Test that posify preserves other important assumptions\n+    a = Symbol('a', integer=True)\n+    b = Symbol('b', rational=True)\n+    c = Symbol('c', prime=True)\n+    d = Symbol('d', even=True)\n+    e = Symbol('e', odd=True)\n+\n+    eq_a, _ = posify(a)\n+    eq_b, _ = posify(b)\n+    eq_c, _ = posify(c)\n+    eq_d, _ = posify(d)\n+    eq_e, _ = posify(e)\n+\n+    assert eq_a.assumptions0['integer'] == True\n+    assert eq_b.assumptions0['rational'] == True\n+    assert eq_c.assumptions0['prime'] == True\n+    assert eq_d.assumptions0['even'] == True\n+    assert eq_e.assumptions0['odd'] == True\n     # simplify should call cancel\n     from sympy.abc import x, y\n     f = Function('f')\n",
  "sympy__sympy-16766": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 51a287f..9c171c6 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n \n@@ -13,6 +14,8 @@ from sympy.printing.pycode import (\n )\n from sympy.utilities.pytest import raises\n \n+from sympy.tensor import IndexedBase\n+\n x, y, z = symbols('x y z')\n \n \n@@ -35,6 +38,13 @@ def test_PythonCodePrinter():\n                                                         ' (3) if (x > 0) else None)'\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n \n+    # Test for Indexed support in PythonCodePrinter\n+    p = IndexedBase(\"p\")\n+    assert prntr.doprint(p[0]) == 'p[0]'\n+    assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n+    # Additional test for multi-dimensional index\n+    assert prntr.doprint(p[x, y, z]) == 'p[x, y, z]'\n+\n \n def test_MpmathPrinter():\n     p = MpmathPrinter()\n",
  "sympy__sympy-16792": "",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..133e744 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -237,8 +237,10 @@ def test_decipher_kid_rsa():\n     assert decipher_kid_rsa(3, (8, 3)) == 1\n     assert decipher_kid_rsa(2, (7, 4)) == 1\n \n+from sympy.crypto.crypto import encode_morse\n \n def test_encode_morse():\n+    # Original test cases\n     assert encode_morse('ABC') == '.-|-...|-.-.'\n     assert encode_morse('SMS ') == '...|--|...||'\n     assert encode_morse('SMS\\n') == '...|--|...||'\n@@ -249,6 +251,11 @@ def test_encode_morse():\n     assert encode_morse('!@#$%^&*()_+') == '-.-.--|.--.-.|...-..-|-.--.|-.--.-|..--.-|.-.-.'\n \n \n+    # Test case specifically for the issue with Morse encoding for \"1\"\n+    assert encode_morse('1') == '.----'\n+    # Test case to check all digits\n+    assert encode_morse('0123456789') == '-----|.----|..---|...--|....-|.....|-....|--...|---..|----.'\n+\n def test_decode_morse():\n     assert decode_morse('-.-|.|-.--') == 'KEY'\n     assert decode_morse('.-.|..-|-.||') == 'RUN'\n",
  "sympy__sympy-17139": "",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..d9f2b50 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,4 +1,7 @@\n-from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n+\n+from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos, I\n+from sympy.simplify.sqrtdenest import _sqrt_match\n+from sympy.core.expr import unchanged\n from sympy.simplify.sqrtdenest import _subsets as subsets\n from sympy.utilities.pytest import slow\n \n@@ -175,8 +178,24 @@ def test_subsets():\n         [0, 1, 1, 0], [1, 1, 1, 0], [0, 0, 0, 1], [1, 0, 0, 1], [0, 1, 0, 1],\n         [1, 1, 0, 1], [0, 0, 1, 1], [1, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]]\n \n+def test_issue_12420():\n+    # Test for the specific case from the issue\n+    expr = (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2\n+    result = sqrtdenest(expr)\n+    assert result == expr, \"Expression should be returned unchanged\"\n+\n+    # Additional test cases to verify robustness\n+    # A simple case that should be unchanged\n+    expr_simple = sqrt(2) + 2*I\n+    assert sqrtdenest(expr_simple) == expr_simple, \"Should remain unchanged\"\n+\n+    # Complex nested expressions\n+    expr_nested = (2 + sqrt(3 + sqrt(5))) + I*sqrt(2 + sqrt(3))\n+    assert sqrtdenest(expr_nested) == expr_nested, \"Should remain unchanged\"\n \n-def test_issue_5653():\n+    # Verify _sqrt_match with a complex expression\n+    expr_sqrt_match = 4 + I\n+    assert _sqrt_match(expr_sqrt_match) == [], \"_sqrt_match should return an empty list for non-denestable expression\"\n     assert sqrtdenest(\n         sqrt(2 + sqrt(2 + sqrt(2)))) == sqrt(2 + sqrt(2 + sqrt(2)))\n \n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..aee76a7 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,5 @@\n-from sympy import I, Rational, Symbol, pi, sqrt, S\n+\n+from sympy import I, Rational, Symbol, pi, sqrt, S, sympify\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n@@ -89,8 +90,17 @@ def test_point():\n     assert p4.rotate(pi, Point(0.5, 0.5)) == p3\n     assert p1.__radd__(p2) == p1.midpoint(p2).scale(2, 2)\n     assert (-p3).__rsub__(p4) == p3.midpoint(p4).scale(2, 2)\n-\n-    assert p4 * 5 == Point(5, 5)\n+    # Test for the issue: Ensure multiplication order doesn't cause exceptions\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+    scalar = sympify(2.0)\n+    \n+    # This should work without exceptions\n+    result1 = point1 + point2 * scalar\n+    assert result1 == Point(2, 2), \"Expected result1 to be Point(2, 2)\"\n+    \n+    result2 = point1 + scalar * point2\n+    assert result2 == Point(2, 2), \"Expected result2 to be Point(2, 2)\"\n     assert p4 / 5 == Point(0.2, 0.2)\n \n     raises(ValueError, lambda: Point(0, 0) + 10)\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..9194b47 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -473,8 +473,21 @@ def test_descent():\n     # supposed to be square-free\n     raises(TypeError, lambda: descent(4, 3))\n \n+from sympy import symbols\n+from sympy.solvers.diophantine import diophantine\n+\n+x, y, m, n = symbols('x y m n', integer=True)\n \n def test_diophantine():\n+    # Test cases for issue 18186\n+    # Verify diophantine function with permute=True\n+    # Ensure results are independent of the order of variables\n+\n+    assert diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(m, n), permute=True) == \\\n+        {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n+\n+    assert diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(n, m), permute=True) == \\\n+        {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n     assert check_solutions((x - y)*(y - z)*(z - x))\n     assert check_solutions((x - y)*(x**2 + y**2 - z**2))\n     assert check_solutions((x - 3*y + 7*z)*(x**2 + y**2 - z**2))\n",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..8e70c74 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -677,7 +677,26 @@ def test_latex_subs():\n         x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n \n \n-def test_latex_integrals():\n+def test_latex_subs_parenthesizing():\n+    from sympy import Subs, latex\n+    from sympy.abc import x, y\n+\n+    # Test case from the issue\n+    assert latex(3*Subs(-x+y, (x,), (1,))) == r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+\n+    # Additional test cases\n+    # Test with multiple substitutions\n+    assert latex(Subs(x*y + x - y, (x, y), (1, 2))) == r'\\left. \\left(x y + x - y\\right) \\right|_{\\substack{ x=1\\\\ y=2 }}'\n+\n+    # Test multiplication with a constant\n+    assert latex(5*Subs(x - y, (x,), (2,))) == r'5 \\left. \\left(x - y\\right) \\right|_{\\substack{ x=2 }}'\n+\n+    # Test where expression doesn't need parentheses\n+    assert latex(Subs(x+y, (x,), (1,))) == r'\\left. x + y \\right|_{\\substack{ x=1 }}'\n+\n+    # Test with a more complex expression\n+    expr = Subs(x**2 - y**2 + 3*x*y, (x, y), (2, 3))\n+    assert latex(expr) == r'\\left. \\left(x^{2} - y^{2} + 3 x y\\right) \\right|_{\\substack{ x=2\\\\ y=3 }}'\n     assert latex(Integral(log(x), x)) == r\"\\int \\log{\\left(x \\right)}\\, dx\"\n     assert latex(Integral(x**2, (x, 0, 1))) == \\\n         r\"\\int\\limits_{0}^{1} x^{2}\\, dx\"\n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "diff --git a/sympy/sets/tests/test_conditionset.py b/sympy/sets/tests/test_conditionset.py\nindex 68ee5d6..4d0928d 100644\n--- a/sympy/sets/tests/test_conditionset.py\n+++ b/sympy/sets/tests/test_conditionset.py\n@@ -1,7 +1,8 @@\n+\n from sympy.sets import (ConditionSet, Intersection, FiniteSet,\n-    EmptySet, Union, Contains)\n+    EmptySet, Union, Contains, imageset)\n from sympy import (Symbol, Eq, S, Abs, sin, pi, Interval,\n-    And, Mod, oo, Function)\n+    And, Mod, oo, Function, Lambda)\n from sympy.testing.pytest import raises, XFAIL, warns_deprecated_sympy\n \n \n@@ -130,7 +131,29 @@ def test_subs_CondSet():\n         ).subs(f(x), y) == ConditionSet(y, y < 1, {w, z})\n \n \n-def test_subs_CondSet_tebr():\n+def test_subs_CondSet_imageset_issue():\n+    # Reproducing the issue and verifying the fix for ConditionSet with ImageSet\n+\n+    k = Symbol('k')\n+    img1 = imageset(Lambda(k, 2 * k * pi + asin(y)), S.Integers)\n+    img2 = imageset(Lambda(k, 2 * k * pi + asin(S.One/3)), S.Integers)\n+\n+    cond_set = ConditionSet(x, Contains(y, Interval(-1, 1)), img1)\n+    result = cond_set.subs(y, S.One/3)\n+\n+    assert result.dummy_eq(img2)\n+\n+    # Additional test: Check if subs on the plain ImageSet works correctly\n+    img3 = imageset(Lambda(k, 2 * k * pi + asin(y)), S.Integers)\n+    result_plain = img3.subs(y, S.One/3)\n+    \n+    assert result_plain == img2\n+\n+    # Test for substitution error handling\n+    cond_set_with_error = ConditionSet(x, Contains(y, Interval(-1, 1)), FiniteSet(-y, y))\n+    result_error_handling = cond_set_with_error.subs(y, S.One/3)\n+    \n+    assert result_error_handling == FiniteSet(-S.One/3, S.One/3)\n     with warns_deprecated_sympy():\n         assert ConditionSet((x, y), {x + 1, x + y}, S.Reals) == \\\n             ConditionSet((x, y), Eq(x + 1, 0) & Eq(x + y, 0), S.Reals)\n",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..594445b 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -483,7 +483,46 @@ def test_geometry():\n     assert L == Line((0, 1), (1, 0)) and isinstance(L, Line)\n \n \n+from sympy import Symbol, Interval, Add, Mul, exp, sin, cos, Rational, S, Matrix\n+from sympy.abc import x, y\n+\n def test_kernS():\n+    # Test case for the issue described in the problem statement\n+    # This ensures that the 'kern' variable is correctly assigned and used.\n+    text = \"(2*x)/(x-1)\"\n+    assert kernS(text) == 2*x/(x-1)\n+\n+    # Additional test cases to ensure robustness\n+    # Test single character input\n+    assert kernS('a') == Symbol('a')\n+\n+    # Test simple arithmetic expression\n+    assert kernS('1 + 1') == 2\n+\n+    # Test nested parentheses\n+    assert kernS('((2*x) + (y - (3*z)))') == (2*x + (y - 3*Symbol('z')))\n+\n+    # Test with spaces and no spaces\n+    expr_with_spaces = '2 * ( x + y )'\n+    expr_without_spaces = '2*(x+y)'\n+    assert kernS(expr_with_spaces) == kernS(expr_without_spaces) == 2*(x + y)\n+\n+    # Test complex expressions with multiple parentheses\n+    complex_expr = '3*((4*x)/(y-2) + (5*z))'\n+    assert kernS(complex_expr) == 3*((4*x)/(y-2) + 5*Symbol('z'))\n+\n+    # Ensure that string with unmatched parentheses raises SympifyError\n+    try:\n+        kernS('(2*x')\n+        assert False, \"Expected SympifyError due to unmatched parentheses.\"\n+    except SympifyError:\n+        pass\n+\n+    # Test with negative numbers and implied multiplication\n+    assert kernS('-2*(x-y)') == -2*(x-y)\n+\n+    # Test case which might have caused 'kern' to be unassigned\n+    assert kernS('1 - x/(1 - x*(1-y))') == kernS('1-x/(1-(1-y)*x)')\n     s =   '-1 - 2*(-(-x + 1/x)/(x*(x - 1/x)**2) - 1/(x*(x - 1/x)))'\n     # when 1497 is fixed, this no longer should pass: the expression\n     # should be unchanged\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_operator.py b/sympy/physics/quantum/tests/test_operator.py\nindex 799aaae..930c153 100644\n--- a/sympy/physics/quantum/tests/test_operator.py\n+++ b/sympy/physics/quantum/tests/test_operator.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Derivative, diff, Function, Integer, Mul, pi, sin, Symbol,\n                    symbols)\n from sympy.physics.quantum.qexpr import QExpr\n@@ -13,6 +14,19 @@ from sympy.physics.quantum.represent import represent\n from sympy.core.trace import Tr\n from sympy.physics.quantum.spin import JzKet, JzBra\n from sympy.matrices import eye\n+from sympy.physics.quantum.qexpr import QExpr\n+from sympy.physics.quantum.dagger import Dagger\n+from sympy.physics.quantum.hilbert import HilbertSpace\n+from sympy.physics.quantum.operator import (Operator, UnitaryOperator,\n+                                            HermitianOperator, OuterProduct,\n+                                            DifferentialOperator,\n+                                            IdentityOperator)\n+from sympy.physics.quantum.state import Ket, Bra, Wavefunction\n+from sympy.physics.quantum.qapply import qapply\n+from sympy.physics.quantum.represent import represent\n+from sympy.core.trace import Tr\n+from sympy.physics.quantum.spin import JzKet, JzBra\n+from sympy.matrices import eye\n \n \n class CustomKet(Ket):\n@@ -84,7 +98,13 @@ def test_unitary():\n     assert Dagger(U).is_commutative is False\n \n \n-def test_identity():\n+def test_dagger_identity_simplification():\n+    O = Operator('O')\n+    I = IdentityOperator()\n+    D = Dagger(O)\n+\n+    assert D * I == D\n+    assert I * D == D\n     I = IdentityOperator()\n     O = Operator('O')\n     x = Symbol(\"x\")\n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..232a964 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -854,7 +854,19 @@ def test_generator_product():\n     assert w == p\n \n \n+from sympy.combinatorics import DihedralGroup\n+\n def test_sylow_subgroup():\n+    # Test the specific case mentioned in the issue\n+    # The order of the Sylow 2-subgroup of DihedralGroup(18) should be 4\n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n+    # The order of the Sylow 2-subgroup of DihedralGroup(50) should also be 4\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n     P = PermutationGroup(Permutation(1, 5)(2, 4), Permutation(0, 1, 2, 3, 4, 5))\n     S = P.sylow_subgroup(2)\n     assert S.order() == 4\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..ed4e205 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -470,8 +470,24 @@ def test_multiset_permutations():\n         [1, 1, 0, 0, 0]\n         6\\n''')\n \n-\n-def test_partitions():\n+from sympy.utilities.iterables import partitions\n+\n+def test_partitions_issue_fix():\n+    # Test to ensure partitions do not reuse output dictionaries\n+    results = list(partitions(6, k=2))\n+    expected = [{2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]\n+    for expected_dict, result_dict in zip(expected, results):\n+        assert expected_dict == result_dict, f\"Expected {expected_dict}, got {result_dict}\"\n+\n+    results = list(partitions(6, k=3))\n+    expected = [{3: 2}, {1: 1, 2: 1, 3: 1}, {1: 3, 3: 1}, {2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]\n+    for expected_dict, result_dict in zip(expected, results):\n+        assert expected_dict == result_dict, f\"Expected {expected_dict}, got {result_dict}\"\n+\n+    results = list(partitions(8, k=4, m=3))\n+    expected = [{4: 2}, {1: 1, 3: 1, 4: 1}, {2: 2, 4: 1}, {2: 1, 3: 2}]\n+    for expected_dict, result_dict in zip(expected, results):\n+        assert expected_dict == result_dict, f\"Expected {expected_dict}, got {result_dict}\"\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n         assert list(partitions(0, size=i)) == ans[i]\n",
  "sympy__sympy-20801": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e1c7e2..eec07b6 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -582,8 +582,21 @@ def test_Float():\n     for i, a in zip(u, v):\n         assert Float(i) is a\n \n-\n-\n+def test_zero_not_false():\n+    # https://github.com/sympy/sympy/issues/20796\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n+\n+def test_zero_not_true():\n+    # Additional tests to check relations with S.true\n+    assert (S(0.0) == S.true) is False\n+    assert (S.true == S(0.0)) is False\n+    assert (S(0) == S.true) is False\n+    assert (S.true == S(0)) is False\n+\n+# Retain the existing test functions below\n @conserve_mpmath_dps\n def test_float_mpf():\n     import mpmath\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..dcc7c53 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -7,6 +8,9 @@ from sympy import (\n from sympy.core.basic import _aresame\n from sympy.testing.pytest import XFAIL\n from sympy.abc import a, x, y, z, t\n+from sympy.functions.elementary.trigonometric import sinh, cosh, tanh\n+from sympy.functions.elementary.piecewise import Piecewise\n+from sympy.core.cache import clear_cache\n \n def test_subs():\n     n3 = Rational(3)\n@@ -20,7 +24,36 @@ def test_subs():\n     assert e == Rational(6)\n \n \n-def test_subs_Matrix():\n+def test_issue_21373_subs_with_hyperbolic_and_piecewise():\n+    x_r, y_r, z_r = symbols('x_r y_r z_r', real=True)\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    \n+    # Test with cache clear\n+    clear_cache()\n+    assert expr.subs({1: 1.0}) == expr.subs({1: 1.0})\n+\n+    # Check similar conditions with `cosh` and `tanh`\n+    expr_cosh = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    expr_tanh = exp(tanh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+\n+    clear_cache()\n+    assert expr_cosh.subs({1: 1.0}) == expr_cosh.subs({1: 1.0})\n+    \n+    clear_cache()\n+    assert expr_tanh.subs({1: 1.0}) == expr_tanh.subs({1: 1.0})\n+\n+    # Check behavior without the division by z\n+    expr_no_div = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n+    clear_cache()\n+    assert expr_no_div.subs({1: 1.0}) == expr_no_div.subs({1: 1.0})\n+\n+    # Check behavior without the exp\n+    expr_no_exp = sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r)\n+    clear_cache()\n+    assert expr_no_exp.subs({1: 1.0}) == expr_no_exp.subs({1: 1.0})\n+\n+    # Test with symbolic substitution\n+    assert expr.subs({z_r: 2.0}) == exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / 2.0))\n     z = zeros(2)\n     z1 = ZeroMatrix(2, 2)\n     assert (x*y).subs({x:z, y:0}) in [z, z1]\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..f242fb6 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -11,7 +11,9 @@ from sympy.polys.monomials import (\n \n from sympy.polys.polyerrors import ExactQuotientFailed\n \n-from sympy.abc import a, b, c, x, y, z\n+from sympy.abc import a, b, c, x, y, z, x1, x2, x3\n+from sympy.polys.orderings import monomial_key\n+from sympy import symbols, itermonomials\n from sympy.core import S, symbols\n from sympy.testing.pytest import raises\n \n@@ -162,7 +164,33 @@ def test_monomials():\n                     x*j**2, x*k**2, x*j*k, x**2*j**2*k**2, x*j*k**2, x**2, x**2*j*k**2\n             }\n \n-def test_monomial_count():\n+def test_itermonomials_issue_with_min_degrees():\n+    # Test case that directly addresses the reported issue\n+    states = [x1, x2, x3]\n+    max_degrees = 3\n+    min_degrees = 3\n+\n+    expected_result = {\n+        x1**3, x2**3, x3**3,\n+        x1*x2**2, x1*x3**2, x2*x1**2, x2*x3**2, x3*x1**2, x3*x2**2,\n+        x1**2*x2, x1**2*x3, x2**2*x1, x2**2*x3, x3**2*x1, x3**2*x2,\n+        x1*x2*x3\n+    }\n+\n+    monomials = set(itermonomials(states, max_degrees, min_degrees=min_degrees))\n+    assert monomials == expected_result, f\"Expected {expected_result}, but got {monomials}\"\n+\n+    # Additional test cases to verify the consistency with different ranges\n+    assert set(itermonomials([x, y], 3, 3)) == {x**3, x**2*y, x*y**2, y**3}\n+    assert set(itermonomials([x, y], 3, 2)) == {x**2, x*y, y**2, x**3, x**2*y, x*y**2, y**3}\n+    assert set(itermonomials([i, j, k], 2, 2)) == {k*i, i**2, i*j, j*k, j*i, k**2, j**2, k*j, i*k}\n+    assert set(itermonomials([i, j, k], 3, 2)) == {\n+        j*k**2, i*k**2, k*i*j, k*i**2, k**2, j*k*j, k*j**2, i*k*i, i*j,\n+        j**2*k, i**2*j, j*i*k, j**3, i**3, k*j*i, j*k*i, j*i,\n+        k**2*j, j*i**2, k*j, k*j*k, i*j*i, j*i*j, i*j**2, j**2,\n+        k*i*k, i**2, j*k, i*k, i*k*j, k**3, i**2*k, j**2*i, k**2*i,\n+        i*j*k, k*i\n+    }\n     assert monomial_count(2, 2) == 6\n     assert monomial_count(2, 3) == 10\n \n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..b73b1a1 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -267,6 +267,7 @@ def test_String():\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n+    assert st.func(*st.args) == st  # Test for argument invariance\n \n \n     class Signifier(String):\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..790b1cc 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,7 @@\n+\n from sympy.core.basic import Basic\n+from sympy.core.parameters import evaluate\n+from sympy import Integer, S\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n@@ -452,7 +455,16 @@ def test__normalize_dimension():\n         Point(1, 2, 0), Point(3, 4, 0)]\n \n \n-def test_direction_cosine():\n+def test_issue_22684():\n+    # This test checks that Point2D creation within a non-evaluating context does not raise unexpected errors.\n+    with evaluate(False):\n+        pt = Point2D(Integer(1), Integer(2))\n+        assert pt == Point2D(1, 2)\n+\n+    # Ensure that the sympify with evaluate=False does not affect Point2D instantiation\n+    with evaluate(False):\n+        expr = S('Point2D(Integer(1),Integer(2))')\n+        assert expr == Point2D(1, 2)\n     p1 = Point3D(0, 0, 0)\n     p2 = Point3D(1, 1, 1)\n \n",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..e602441 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n@@ -31,6 +32,8 @@ def test_PythonCodePrinter():\n \n     assert prntr.doprint(x**y) == 'x**y'\n     assert prntr.doprint(Mod(x, 2)) == 'x % 2'\n+    assert prntr.doprint(Min(x, y)) == \"min(x, y)\"\n+    assert prntr.doprint(Max(x, y)) == \"max(x, y)\"\n     assert prntr.doprint(-Mod(x, y)) == '-(x % y)'\n     assert prntr.doprint(Mod(-x, y)) == '(-x) % y'\n     assert prntr.doprint(And(x, y)) == 'x and y'\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..c72bb59 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,23 @@ def test_scipy_polys():\n \n \n \n+def test_lambdify_single_element_tuple():\n+    # Test for the tuple with a single element\n+    f2b = lambdify([], (1,))  # should return a tuple with a single element\n+    assert f2b() == (1,)\n+    source_code = inspect.getsource(f2b)\n+    assert \"return (1,)\" in source_code\n+\n+def test_lambdify_multiple_element_tuple():\n+    # Test for a tuple with multiple elements\n+    f2b = lambdify([], (1, 2))  # should return a tuple with multiple elements\n+    assert f2b() == (1, 2)\n+    source_code = inspect.getsource(f2b)\n+    assert \"return (1, 2)\" in source_code\n+\n+import inspect\n+from sympy import lambdify\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..39a90cf 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,8 +1,14 @@\n+\n+def test_symbols_with_extra_parentheses():\n+    q, u = symbols(('q:2', 'u:2'), cls=Function)\n+    assert type(q[0]) == UndefinedFunction, \"q[0] should be of type UndefinedFunction\"\n+    assert type(u[0]) == UndefinedFunction, \"u[0] should be of type UndefinedFunction\"\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n from sympy.core.sympify import sympify  # can't import as S yet\n-from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n+from sympy.core.function import Function, UndefinedFunction\n \n from sympy.testing.pytest import raises\n from sympy.core.symbol import disambiguate\n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..38fb446 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -262,7 +262,40 @@ def test_kahane_simplify1():\n     assert r.equals(-2*G(sigma)*G(rho)*G(nu))\n \n \n-def test_gamma_matrix_class():\n+def test_kahane_leading_gamma_matrix_bug():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n+\n+    # Original test case from the issue description\n+    t = G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    t = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    # Additional test cases to ensure thorough testing\n+    t = G(rho)*G(mu)*G(-mu)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    t = G(mu)*G(rho)*G(sigma)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    t = G(mu)*G(rho)*G(-mu)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    t = G(rho)*G(mu)*G(sigma)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    t = G(rho)*G(sigma)*G(-mu)*G(mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    print(\"All kahane_simplify tests passed.\")\n     i, j, k = tensor_indices('i,j,k', LorentzIndex)\n \n     # define another type of TensorHead to see if exprs are correctly handled:\n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..78b339f 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -39,6 +39,16 @@ def test_binary_symbols():\n \n \n def test_as_set():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    # Test with different types of sets to ensure NotImplementedError is raised\n+    raises(NotImplementedError, lambda: Contains(x, FiniteSet(y)).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, S.Integers).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, S.Reals).as_set())\n+\n+    # Testing integration with Piecewise to ensure proper error handling\n+    # This should raise an AttributeError because Contains does not have as_relational\n+    raises(AttributeError, lambda: Piecewise((6, Contains(x, S.Reals)), (7, True)))\n     x = Symbol('x')\n     y = Symbol('y')\n     # Contains is a BooleanFunction whose value depends on an arg's\n@@ -48,4 +58,4 @@ def test_as_set():\n \n def test_type_error():\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..2e12553 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,6 +528,31 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units import Quantity\n+    from sympy.physics.units.systems.si import SI\n+    from sympy import exp\n+    from sympy.physics.units.dimensions import Dimension\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n+\n def test_issue_20288():\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..017e95f 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -548,7 +548,45 @@ def test_issue_24062():\n     R = Quantity('R')\n     C = Quantity('C')\n     T = Quantity('T')\n-    SI.set_quantity_dimension(R, impedance)\n+from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+from sympy.physics.units.systems.si import SI\n+\n+def test_issue_24211():\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+def test_collect_factor_and_dimension_equivalence():\n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * meter / second)\n+\n+    a1 = Quantity('a1')\n+    SI.set_quantity_dimension(a1, acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)\n+\n+    t1 = Quantity('t1')\n+    SI.set_quantity_dimension(t1, time)\n+    SI.set_quantity_scale_factor(t1, 5 * second)\n+\n+    expr1 = a1*t1 + v1\n+    # should not raise ValueError if dimensions are correctly identified as equivalent\n+    factor, dimension = SI._collect_factor_and_dimension(expr1)\n+    assert dimension == velocity\n+\n+    # Additional test: verify that the factor is correctly computed\n+    expected_factor = -9.8 * 5 + 2  # -49 + 2 = -47\n+    assert factor == expected_factor\n     SI.set_quantity_dimension(C, capacitance)\n     SI.set_quantity_dimension(T, time)\n     R.set_global_relative_scale_factor(1, ohm)\n",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..cf02bb1 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,3 +1,4 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n@@ -56,8 +57,17 @@ def test_homomorphism():\n     assert T.domain == F\n     assert T.codomain == D\n     assert T(a*b) == p\n+    # Additional test for PermutationGroup -> PermutationGroup with inverses\n+    D3 = DihedralGroup(3)\n+    T = homomorphism(D3, D3, D3.generators, D3.generators)\n+    assert T.is_isomorphism()\n \n-def test_isomorphisms():\n+    # Test case involving inverses\n+    r = D3.generators[0] * D3.generators[1]**-1\n+    images = [D3.generators[0], r]\n+    T_inv = homomorphism(D3, D3, D3.generators, images)\n+    assert T_inv.is_homomorphism()\n+    assert not T_inv.is_isomorphism() # Should not be isomorphic due to the altered images\n \n     F, a, b = free_group(\"a, b\")\n     E, c, d = free_group(\"c, d\")\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..7390610 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -249,7 +249,12 @@ def test_PolyElement_copy():\n     g[(1, 1, 1)] = 7\n     assert f != g\n \n+from sympy import ring, ZZ, symbols\n+from sympy.polys.rings import PolyElement\n+from sympy.testing.pytest import raises\n+\n def test_PolyElement_as_expr():\n+    # Original test for default symbols\n     R, x, y, z = ring(\"x,y,z\", ZZ)\n     f = 3*x**2*y - x*y*z + 7*z**3 + 1\n \n@@ -265,7 +270,26 @@ def test_PolyElement_as_expr():\n     assert f != g\n     assert f.as_expr(X, Y, Z) == g\n \n-    raises(ValueError, lambda: f.as_expr(X))\n+    raises(ValueError, lambda: f.as_expr(X))  # Test for insufficient symbols\n+\n+    # Additional test cases to ensure that f.as_expr() uses the correct symbols\n+    U, V, W = symbols(\"u,v,w\")\n+    g = 3*U**2*V - U*V*W + 7*W**3 + 1\n+    assert f.as_expr(U, V, W) == g\n+\n+    # Test with one generator ring\n+    R, x = ring(\"x\", ZZ)\n+    f_x = 3*x**2 + 2*x + 1\n+    X = symbols(\"X\")\n+    g_x = 3*X**2 + 2*X + 1\n+    assert f_x.as_expr(X) == g_x\n+\n+    # Test with different symbols order\n+    R, x, y = ring(\"x,y\", ZZ)\n+    f_xy = x**2 + y\n+    Y, X = symbols(\"y,x\")\n+    g_yx = X**2 + Y\n+    assert f_xy.as_expr(Y, X) == g_yx\n \n     R, = ring(\"\", ZZ)\n     assert R(3).as_expr() == 3\n",
  "sympy__sympy-24661": "",
  "astropy__astropy-14369": "diff --git a/astropy/units/tests/test_format.py b/astropy/units/tests/test_format.py\nindex 062b5f4..1c93b77 100644\n--- a/astropy/units/tests/test_format.py\n+++ b/astropy/units/tests/test_format.py\n@@ -57,6 +57,8 @@ def test_unit_grammar_fail(string):\n     \"strings, unit\",\n     [\n         ([\"0.1nm\"], u.AA),\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.J / (u.m * u.s * u.kpc**2))),\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.J / (u.s * u.kpc**2))),\n         ([\"mW/m2\"], u.Unit(u.erg / u.cm**2 / u.s)),\n         ([\"mW/(m2)\"], u.Unit(u.erg / u.cm**2 / u.s)),\n         ([\"km/s\", \"km.s-1\"], u.km / u.s),\n",
  "astropy__astropy-14598": "",
  "django__django-11299": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex b3dc643..54aab3b 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1889,6 +1889,24 @@ class OperationTests(OperationTestBase):\n         from_state = to_state\n         to_state = from_state.clone()\n         operation.state_forwards(app_label, to_state)\n+\n+    @skipUnlessDBFeature('supports_table_check_constraints')\n+    def test_check_constraint_with_and_or(self):\n+        app_label = 'test_constraint_and_or'\n+        constraint_name = 'field_1_has_value_if_flag_set'\n+        from_state = self.set_up_test_model(app_label)\n+        check_constraint = models.Q(flag=True, field_1__isnull=False) | models.Q(flag=False)\n+        constraint = models.CheckConstraint(check=check_constraint, name=constraint_name)\n+        operation = migrations.AddConstraint('TestConstraint', constraint)\n+        to_state = from_state.clone()\n+        operation.state_forwards(app_label, to_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, from_state, to_state)\n+        TestConstraint = to_state.apps.get_model(app_label, 'TestConstraint')\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            TestConstraint.objects.create(field_1=None, flag=True)\n+        TestConstraint.objects.create(field_1=1, flag=True)\n+        TestConstraint.objects.create(field_1=None, flag=False)\n         Author = to_state.apps.get_model(app_label, 'Author')\n         with connection.schema_editor() as editor:\n             operation.database_forwards(app_label, editor, from_state, to_state)\n",
  "django__django-11477": "diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex e4898b6..0030e71 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -153,6 +153,23 @@ class URLTranslationTests(URLTestCaseBase):\n         with translation.override('en'):\n             self.assertEqual(translate_url('/en/nonexistent/', 'nl'), '/en/nonexistent/')\n             self.assertEqual(translate_url('/en/users/', 'nl'), '/nl/gebruikers/')\n+            # Test for URL with optional parameters\n+            self.assertEqual(\n+                translate_url('/en/with-arguments/regular-argument/', 'nl'),\n+                '/nl/with-arguments/regular-argument/'\n+            )\n+            self.assertEqual(\n+                translate_url('/en/with-arguments/regular-argument/optional.html', 'nl'),\n+                '/nl/with-arguments/regular-argument/optional.html'\n+            )\n+            self.assertEqual(\n+                translate_url('/en/regex_optional/1/2/', 'nl'),\n+                '/nl/regex_optional/1/2/'\n+            )\n+            self.assertEqual(\n+                translate_url('/en/regex_optional/1/', 'nl'),\n+                '/nl/regex_optional/1/'\n+            )\n             # Namespaced URL\n             self.assertEqual(translate_url('/en/account/register/', 'nl'), '/nl/profiel/registreren/')\n             # path() URL pattern\n",
  "django__django-12273": "",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..166232a 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -603,9 +603,18 @@ class DeletionTests(TestCase):\n                 )\n                 signal.disconnect(receiver, sender=Referrer)\n \n+from django.test import TestCase\n+from .models import User\n \n class FastDeleteTests(TestCase):\n \n+    def test_fast_delete_all(self):\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        # No subqueries should be used when performing a full delete.\n+        self.assertNotIn('SELECT', sql)\n+\n     def test_fast_delete_fk(self):\n         u = User.objects.create(\n             avatar=Avatar.objects.create()\n@@ -702,4 +711,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..b1a30e4 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from decimal import Decimal\n \n@@ -24,8 +25,23 @@ class DecimalFieldTests(TestCase):\n         msg = '\u201cabc\u201d value must be a decimal number.'\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n-\n-    def test_default(self):\n+    def test_invalid_value(self):\n+        field = models.DecimalField(max_digits=4, decimal_places=2)\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        tests = [\n+            (),\n+            [],\n+            {},\n+            set(),\n+            object(),\n+            complex(),\n+            'non-numeric string',\n+            b'non-numeric byte-string',\n+        ]\n+        for value in tests:\n+            with self.subTest(value=value):\n+                with self.assertRaisesMessage(ValidationError, msg % (value,)):\n+                    field.clean(value, None)\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n \n",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..4a88865 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n \n@@ -5,7 +6,8 @@ import django\n from django.db import models\n from django.test import TestCase\n \n-from .models import Container, Event, Group, Happening, M2MModel, MyEvent\n+from .models import Container, Event, Group, Happening, M2MModel, MyEvent, Toy\n+from django.db.models import Sum\n \n \n class PickleabilityTestCase(TestCase):\n",
  "django__django-13449": "diff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\nindex 3f59cdf..d9c7568 100644\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -11,4 +11,5 @@ class Employee(models.Model):\n     department = models.CharField(max_length=40, blank=False, null=False)\n     hire_date = models.DateField(blank=False, null=False)\n     age = models.IntegerField(blank=False, null=False)\n-    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\n",
  "django__django-13512": "diff --git a/tests/forms_tests/field_tests/test_jsonfield.py b/tests/forms_tests/field_tests/test_jsonfield.py\nindex e31bff4..96633a2 100644\n--- a/tests/forms_tests/field_tests/test_jsonfield.py\n+++ b/tests/forms_tests/field_tests/test_jsonfield.py\n@@ -30,7 +30,23 @@ class JSONFieldTest(SimpleTestCase):\n         self.assertEqual(field.prepare_value(None), 'null')\n         self.assertEqual(field.prepare_value('foo'), '\"foo\"')\n \n-    def test_widget(self):\n+    def test_unicode_handling(self):\n+        field = JSONField()\n+        # Test with Chinese characters\n+        self.assertEqual(field.prepare_value({'a': '\u4f60\u597d \u4e16\u754c'}), '{\"a\": \"\u4f60\u597d \u4e16\u754c\"}')\n+        self.assertEqual(field.prepare_value('\u4f60\u597d\uff0c\u4e16\u754c'), '\"\u4f60\u597d\uff0c\u4e16\u754c\"')\n+        # Test with emojis\n+        self.assertEqual(field.prepare_value({'a': '\ud83d\ude00\ud83d\udc31'}), '{\"a\": \"\ud83d\ude00\ud83d\udc31\"}')\n+        # Test with mixed language content\n+        self.assertEqual(field.prepare_value(['\u4f60\u597d\uff0c\u4e16\u754c', 'ja\u017a\u0144']), '[\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]')\n+        # Test with more complex structure\n+        complex_structure = {\n+            'text': '\u4f60\u597d\uff0c\u4e16\u754c',\n+            'emojis': '\ud83d\ude00\ud83d\udc31',\n+            'nested': {'inner': '\u30c6\u30b9\u30c8'}\n+        }\n+        expected_output = '{\"text\": \"\u4f60\u597d\uff0c\u4e16\u754c\", \"emojis\": \"\ud83d\ude00\ud83d\udc31\", \"nested\": {\"inner\": \"\u30c6\u30b9\u30c8\"}}'\n+        self.assertEqual(field.prepare_value(complex_structure), expected_output)\n         field = JSONField()\n         self.assertIsInstance(field.widget, Textarea)\n \n",
  "django__django-14404": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 8fb91af..59e0d4b 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -6603,6 +6603,42 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         self.assertRedirects(response, known_url, status_code=301, target_status_code=403)\n \n     @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_with_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1], SCRIPT_NAME='/myapp/')\n+        self.assertRedirects(\n+            response,\n+            '/myapp' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/myapp/')\n+    def test_missing_slash_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/myapp' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/myapp/')\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n         user = User.objects.create_user(\n             username='user',\n@@ -6629,6 +6665,42 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         self.assertEqual(response.status_code, 404)\n \n     @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_with_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1], SCRIPT_NAME='/myapp/')\n+        self.assertRedirects(\n+            response,\n+            '/myapp' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/myapp/')\n+    def test_missing_slash_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/myapp' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/myapp/')\n     def test_single_model_no_append_slash(self):\n         superuser = User.objects.create_user(\n             username='staff',\n",
  "django__django-14580": "",
  "django__django-15375": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1d4ef56..6d27f6f 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1629,8 +1629,23 @@ class AggregateTestCase(TestCase):\n             value=Sum('price', filter=Q(rating__lt=3.0), default=Avg('pages') / 10.0),\n         )\n         self.assertAlmostEqual(result['value'], Decimal('61.72'), places=2)\n-\n-    def test_exists_none_with_aggregate(self):\n+    def test_aggregation_default_after_annotation(self):\n+        result = Book.objects.annotate(\n+            double_id=F('id') * 2,\n+        ).aggregate(value=Sum('double_id', default=0))\n+        self.assertEqual(result['value'], 9120)  # Assuming there are 95 books.\n+\n+    def test_aggregation_default_with_filter(self):\n+        result = Book.objects.annotate(\n+            filtered_id=F('id'),\n+        ).aggregate(value=Sum('filtered_id', filter=Q(id__lt=50), default=0))\n+        self.assertEqual(result['value'], 1225)  # Sum of ids from 1 to 49.\n+\n+    def test_aggregation_default_not_in_aggregate(self):\n+        result = Book.objects.annotate(\n+            avg_rating=Avg('price', default=20),\n+        ).aggregate(Sum('id'))\n+        self.assertEqual(result['id__sum'], 4560)  # Assuming sum of ids is 4560.\n         qs = Book.objects.all().annotate(\n             count=Count('id'),\n             exists=Exists(Author.objects.none()),\n@@ -1642,4 +1657,4 @@ class AggregateTestCase(TestCase):\n             count=Count('id'),\n             exists=Exists(Author.objects.extra(where=['1=0'])),\n         )\n-        self.assertEqual(len(qs), 6)\n+        self.assertEqual(len(qs), 6)\n",
  "django__django-15695": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 99db46a..83c93ce 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -3001,6 +3001,45 @@ class OperationTests(OperationTestBase):\n             },\n         )\n \n+    def _test_rename_unnamed_index_with_unique_together(self, app_label, project_state, new_state):\n+        \"\"\"\n+        Test the RenameIndex operation when dealing with an unnamed index that is \n+        related to a unique_together constraint.\n+        \"\"\"\n+        # Define the old and new states for a table with unique_together constraint\n+        old_state = project_state.clone()\n+        new_state_with_unique = new_state.clone()\n+        \n+        # Assume the existence of an unnamed index due to unique_together\n+        table_name = \"some_table\"\n+        old_index_name = \"unique_some_table_idx\"  # Hypothetical old generated name\n+        new_index_name = \"new_pony_test_idx\"  # New name after renaming\n+\n+        # Assert the old index exists\n+        self.assertIndexNameExists(table_name, old_index_name)\n+\n+        # Perform forward rename operation\n+        operation = RenameIndex(\n+            model_name=\"Pony\",\n+            old_name=old_index_name,\n+            new_name=new_index_name\n+        )\n+        \n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, old_state, new_state_with_unique)\n+\n+        # Assert the new index name exists and old one does not\n+        self.assertIndexNameExists(table_name, new_index_name)\n+        self.assertIndexNameNotExists(table_name, old_index_name)\n+\n+        # Perform backward operation to restore the old index name\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state_with_unique, old_state)\n+\n+        # Assert the old index name exists and new one does not\n+        self.assertIndexNameExists(table_name, old_index_name)\n+        self.assertIndexNameNotExists(table_name, new_index_name)\n+\n     def test_rename_index_unknown_unnamed_index(self):\n         app_label = \"test_rninuui\"\n         project_state = self.set_up_test_model(app_label)\n",
  "django__django-15732": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 42e02c2..dace328 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -595,6 +595,51 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n         )\n \n \n+class TestUniqueTogetherConstraints(TestCase):\n+    \n+    @skipUnlessDBFeature(\"allows_multiple_constraints_on_same_fields\")\n+    def test_drop_unique_together_primary_key(self):\n+        \"\"\"\n+        Test removing a unique_together constraint on a primary key field\n+        \"\"\"\n+        app_label = \"test_unique_together_pk\"\n+        project_state = self.apply_operations(\n+            app_label,\n+            ProjectState(),\n+            operations=[\n+                migrations.CreateModel(\n+                    \"MyModel\",\n+                    fields=[(\"id\", models.AutoField(primary_key=True))],\n+                    options={\"unique_together\": {(\"id\",)}},\n+                ),\n+            ],\n+        )\n+        table_name = f\"{app_label}_mymodel\"\n+        pk_constraint_name = f\"{table_name}_pkey\"\n+        unique_together_constraint_name = f\"{table_name}_id_uniq\"\n+\n+        # Make sure both constraints exist initially\n+        self.assertConstraintExists(table_name, pk_constraint_name, value=False)\n+        self.assertConstraintExists(table_name, unique_together_constraint_name, value=False)\n+\n+        # Drop the unique_together constraint\n+        new_state = project_state.clone()\n+        operation = migrations.AlterUniqueTogether(\"MyModel\", set())\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+\n+        # Ensure primary key still exists\n+        self.assertConstraintExists(table_name, pk_constraint_name, value=False)\n+        # Ensure unique_together constraint is removed\n+        self.assertConstraintNotExists(table_name, unique_together_constraint_name)\n+\n+from django.db import models, connection\n+from django.db.migrations.state import ProjectState\n+from django.test import TestCase, skipUnlessDBFeature\n+from django.db.migrations import operations\n+\n class AlterUniqueTogether(AlterTogetherOptionOperation):\n     \"\"\"\n     Change the value of unique_together to the target one.\n",
  "django__django-15916": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex cc5e08c..321b8bf 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -3487,7 +3487,48 @@ class FormFieldCallbackTests(SimpleTestCase):\n \n         NewForm = modelform_factory(Person, form=BaseForm, formfield_callback=callback)\n \n-        class InheritedForm(NewForm):\n+from django.test import TestCase\n+from django import forms\n+from django.forms import modelform_factory\n+from .models import Person, Triple\n+\n+class FormFieldCallbackTest(TestCase):\n+    def test_formfield_callback_in_meta(self):\n+        def custom_callback(db_field, **kwargs):\n+            formfield = db_field.formfield(**kwargs)\n+            formfield.widget = forms.Textarea\n+            return formfield\n+        \n+        class BaseForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = '__all__'\n+                formfield_callback = custom_callback\n+\n+        NewForm = modelform_factory(model=Person, form=BaseForm)\n+\n+        for name, field in NewForm.base_fields.items():\n+            self.assertEqual(type(field.widget), forms.Textarea)\n+\n+    def test_factory_form_with_no_callback_uses_base_meta(self):\n+        def custom_callback(db_field, **kwargs):\n+            formfield = db_field.formfield(**kwargs)\n+            formfield.widget = forms.Textarea\n+            return formfield\n+        \n+        class BaseForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = '__all__'\n+                formfield_callback = custom_callback\n+\n+        # Create a factory form without specifying a formfield_callback\n+        NewForm = modelform_factory(model=Person, form=BaseForm)\n+\n+        for name, field in NewForm.base_fields.items():\n+            self.assertEqual(type(field.widget), forms.Textarea)\n+\n+# Ensure existing tests are not affected\n             pass\n \n         for name in NewForm.base_fields:\n",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..ad43f0f 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -9,7 +9,10 @@ from django.core.serializers.json import DjangoJSONEncoder\n from django.db import models\n from django.test import SimpleTestCase, TestCase, TransactionTestCase\n from django.test.utils import isolate_apps\n-from django.utils.translation import gettext_lazy, override\n+from django.core import serializers\n+from django.db import models\n+from django.db.models import Manager\n+from django.core.serializers.base import DeserializationError\n \n from .models import Score\n from .tests import SerializersTestBase, SerializersTransactionTestBase\n@@ -67,7 +70,40 @@ class JsonSerializerTestCase(SerializersTestBase, TestCase):\n             if field_name in obj_dict[\"fields\"]\n         ]\n \n-    def test_indentation_whitespace(self):\n+    def test_serialization_m2m_with_custom_manager(self):\n+        \"\"\"\n+        Test serialization on a model with a many-to-many relation\n+        using a custom manager that employs select_related.\n+        \"\"\"\n+        class TestTagManager(Manager):\n+            def get_queryset(self):\n+                return super().get_queryset().select_related(\"master\")\n+        \n+        class TestTagMaster(models.Model):\n+            name = models.CharField(max_length=120)\n+        \n+        class TestTag(models.Model):\n+            objects = TestTagManager()\n+            name = models.CharField(max_length=120)\n+            master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)\n+        \n+        class Test(models.Model):\n+            name = models.CharField(max_length=120)\n+            tags = models.ManyToManyField(TestTag, blank=True)\n+        \n+        # Create instances for testing\n+        tag_master = TestTagMaster.objects.create(name=\"master\")\n+        tag = TestTag.objects.create(name=\"tag\", master=tag_master)\n+        test_instance = Test.objects.create(name=\"test\")\n+        test_instance.tags.add(tag)\n+        \n+        # Perform serialization\n+        serialized_data = serializers.serialize(\"json\", [test_instance])\n+        \n+        # Validate the serialized output\n+        self.assertIn('\"model\": \"test\"', serialized_data)\n+        self.assertIn('\"fields\": {\"name\": \"test\"', serialized_data)\n+        self.assertIn('\"tags\": [', serialized_data)\n         s = serializers.json.Serializer()\n         json_data = s.serialize([Score(score=5.0), Score(score=6.0)], indent=2)\n         for line in json_data.splitlines():\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_backend_macosx.py b/lib/matplotlib/tests/test_backend_macosx.py\nindex 06d044f..06c460e 100644\n--- a/lib/matplotlib/tests/test_backend_macosx.py\n+++ b/lib/matplotlib/tests/test_backend_macosx.py\n@@ -23,6 +23,21 @@ def test_cached_renderer():\n     assert fig._cachedRenderer is not None\n \n \n+@pytest.mark.backend('macosx')\n+def test_dpi_unpickle_stability():\n+    import pickle\n+    from matplotlib.figure import Figure\n+\n+    # Create a figure with a specific DPI\n+    initial_dpi = 200\n+    fig = Figure(dpi=initial_dpi)\n+    \n+    # Pickle and unpickle the figure\n+    fig2 = pickle.loads(pickle.dumps(fig))\n+    \n+    # Check if the DPI remains the same after unpickling\n+    assert fig2.dpi == initial_dpi, f\"Expected DPI: {initial_dpi}, but got {fig2.dpi}\"\n+\n @pytest.mark.backend('macosx')\n def test_savefig_rcparam(monkeypatch, tmp_path):\n \n",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 87375f2..6ff5283 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6586,7 +6586,11 @@ def test_integrate(dask):\n     assert isinstance(actual.data, type(da.data))\n \n     # along y\n-    actual = da.integrate(\"y\")\n+    with pytest.warns(FutureWarning):\n+        actual = da.integrate(dim=\"y\")\n+\n+    actual_coord = da.integrate(coord=\"y\")\n+    assert_equal(actual, actual_coord)\n     expected_y = xr.DataArray(\n         np.trapz(da, da[\"y\"], axis=1),\n         dims=[\"x\"],\n",
  "pydata__xarray-4094": "",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..f1b15b9 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -130,8 +130,23 @@ def test_regex_error(capsys: CaptureFixture) -> None:\n     )\n     assert assertString in output.err\n \n+from typing import Any\n+import pytest\n+import re\n+from pylint.lint import Run\n+from pylint.testutils import EMPTY_MODULE\n+from pytest import CaptureFixture\n \n def test_csv_regex_error(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly error when an incorrect CSV regex is provided.\"\"\"\n+    invalid_regex = \"(foo{1,}, foo{1,3})\"\n+    with pytest.raises(SystemExit):\n+        Run(\n+            [str(EMPTY_MODULE), f\"--bad-names-rgx={invalid_regex}\"],\n+            exit=False,\n+        )\n+    output = capsys.readouterr()\n+    assert \"Error in provided regular expression\" in output.err\n     \"\"\"Check that we correctly error when an option is passed and one\n     of its comma-separated regular expressions values is an invalid regular expression.\n     \"\"\"\n",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..3bfd2d6 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1156,6 +1156,9 @@ def test_summary_list_after_errors(testdir):\n     )\n \n \n+import pytest\n+from _pytest.main import ExitCode\n+\n def test_importorskip():\n     with pytest.raises(\n         pytest.skip.Exception,\n@@ -1184,4 +1187,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "diff --git a/testing/test_mark_expression.py b/testing/test_mark_expression.py\nindex 10b71e9..2b000e1 100644\n--- a/testing/test_mark_expression.py\n+++ b/testing/test_mark_expression.py\n@@ -139,6 +139,14 @@ def test_valid_idents(ident: str) -> None:\n     assert evaluate(ident, {ident: True}.__getitem__)\n \n \n+@pytest.mark.parametrize(\n+    \"ident\",\n+    (\"None\", \"True\", \"False\"),\n+)\n+def test_keyword_idents(ident: str) -> None:\n+    with pytest.raises(AssertionError):\n+        Expression.compile(ident)\n+\n @pytest.mark.parametrize(\n     \"ident\",\n     (\n",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..2b4101f 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,33 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+\n+def test_feature_union_with_pandas_transform_output():\n+    \"\"\"Test FeatureUnion with pandas set_output configuration.\"\"\"\n+    import pandas as pd\n+    from sklearn.pipeline import FeatureUnion, make_union\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    \n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y=None):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y=None) -> pd.DataFrame:\n+            return pd.DataFrame(X[\"value\"].groupby(X[\"date\"]).sum())\n+\n+    # Test with default output\n+    union = make_union(MyTransformer())\n+    result = union.fit_transform(data)\n+    assert isinstance(result, pd.DataFrame) == False  # default should not return a DataFrame\n+\n+    # Test with pandas output\n+    union.set_output(transform=\"pandas\")\n+    result = union.fit_transform(data)\n+    assert isinstance(result, pd.DataFrame)  # should return a DataFrame\n+    assert len(result) == len(data['date'].unique())  # grouped by date, so fewer rows\n",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a32a965..a3db6bc 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -266,8 +266,15 @@ def test_parse_annotation():\n                           [pending_xref, \"int\"],\n                           [desc_sig_punctuation, \"]\"]))\n \n-\n-def test_pyfunction_signature(app):\n+def test_none_annotation_handling():\n+    # Test the behavior of autodoc_typehints for 'None' in 'description' mode\n+    doctree = _parse_annotation(\"None\", mode='description')\n+    assert_node(doctree, ([pending_xref, \"None\"],))\n+    assert_node(doctree[0], pending_xref, refdomain=\"py\", reftype=\"obj\", reftarget=\"None\")\n+\n+    # Test the behavior of autodoc_typehints for 'None' in 'signature' mode\n+    doctree = _parse_annotation(\"None\", mode='signature')\n+    assert_node(doctree, \"None\")\n     text = \".. py:function:: hello(name: str) -> str\"\n     doctree = restructuredtext.parse(app, text)\n     assert_node(doctree, (addnodes.index,\n@@ -742,4 +749,3 @@ def test_modindex_common_prefix(app):\n                 IndexEntry('sphinx_intl', 0, 'index', 'module-sphinx_intl', '', '', '')])],\n         True\n     )\n-\n",
  "sphinx-doc__sphinx-8056": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 1d6a8cf..6f03d79 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1316,8 +1316,59 @@ class NumpyDocstringTest(BaseDocstringTest):\n             actual = str(NumpyDocstring(dedent(docstring), config))\n             expected = dedent(expected)\n             self.assertEqual(expected, actual)\n+    def test_multiple_parameters(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like\n+            Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n \n-    def test_parameters_with_class_reference(self):\n+        # Test when napoleon_use_param is False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n+\n+        # Test when napoleon_use_param is True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n+\n+    def test_multiple_parameters_with_optional(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+\n+        # Test when napoleon_use_param is False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n+\n+        # Test when napoleon_use_param is True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`, optional\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`, optional\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n         docstring = \"\"\"\\\n Parameters\n ----------\n",
  "sphinx-doc__sphinx-8551": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex fd4bdc4..c9e608b 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -773,9 +773,59 @@ def test_pydecoratormethod_signature(app):\n     assert 'deco' in domain.objects\n     assert domain.objects['deco'] == ('index', 'deco', 'method')\n \n+import pytest\n+from sphinx.testing import restructuredtext\n+from sphinx.addnodes import desc, desc_signature, desc_content, desc_annotation, desc_addname, desc_name\n+from sphinx.testing.util import assert_node\n+from docutils import nodes\n+from sphinx import addnodes\n \n @pytest.mark.sphinx(freshenv=True)\n-def test_module_index(app):\n+def test_info_field_type_rtype_resolution(app):\n+    text = (\n+        \".. py:class:: mod.A\\n\"\n+        \".. py:class:: mod.submod.A\\n\"\n+        \"\\n\"\n+        \".. py:function:: f()\\n\"\n+        \"    :param mod.A a:\\n\"\n+        \"    :param mod.submod.A b:\\n\"\n+        \"    :rtype: mod.A\\n\"\n+        \"    :rtype: mod.submod.A\\n\"\n+        \"\\n\"\n+        \".. py:currentmodule:: mod\\n\"\n+        \"\\n\"\n+        \".. py:function:: f()\\n\"\n+        \"    :param A a:\\n\"\n+        \"    :param mod.A b:\\n\"\n+        \"    :param mod.submod.A c:\\n\"\n+        \"    :rtype: A\\n\"\n+        \"    :rtype: mod.A\\n\"\n+        \"    :rtype: mod.submod.A\\n\"\n+        \"\\n\"\n+        \".. py:currentmodule:: mod.submod\\n\"\n+        \"\\n\"\n+        \".. py:function:: f()\\n\"\n+        \"    :param A a:\\n\"\n+        \"    :param mod.A b:\\n\"\n+        \"    :param mod.submod.A c:\\n\"\n+        \"    :rtype: A\\n\"\n+        \"    :rtype: mod.A\\n\"\n+        \"    :rtype: mod.submod.A\\n\"\n+    )\n+    doctree = restructuredtext.parse(app, text)\n+\n+    # Check the resolution of unqualified 'A' in the context of ':param' and ':rtype'\n+    param_field = doctree[6][1][0][0][1][0][1][0][2]\n+    assert_node(param_field, pending_xref, reftarget=\"mod.submod.A\")\n+\n+    rtype_field = doctree[6][1][0][0][1][0][1][2]\n+    assert_node(rtype_field, pending_xref, reftarget=\"mod.submod.A\")\n+\n+    param_field_mod = doctree[10][1][0][0][1][0][0][0][2]\n+    assert_node(param_field_mod, pending_xref, reftarget=\"mod.A\")\n+\n+    rtype_field_mod = doctree[10][1][0][0][1][0][1][0][0][2]\n+    assert_node(rtype_field_mod, pending_xref, reftarget=\"mod.A\")\n     text = (\".. py:module:: docutils\\n\"\n             \".. py:module:: sphinx\\n\"\n             \".. py:module:: sphinx.config\\n\"\n",
  "sphinx-doc__sphinx-8593": "",
  "sphinx-doc__sphinx-9230": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex e86a758..b06d79b 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -983,8 +983,46 @@ def test_info_field_list(app):\n                 refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n+def test_param_dict_str_str(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:class:: Class\\n\"\n+            \"\\n\"\n+            \"   :param dict(str, str) opc_meta: (optional)\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree, (nodes.target,\n+                          addnodes.index,\n+                          addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                                    [desc_addname, \"example.\"],\n+                                                    [desc_name, \"Class\"])],\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree[3][1][0][0],\n+                ([nodes.field_name, \"Parameters\"],\n+                 [nodes.field_body, nodes.bullet_list, [nodes.list_item, nodes.paragraph]]))\n \n-def test_info_field_list_var(app):\n+    # :param dict(str, str) opc_meta:\n+    assert_node(doctree[3][1][0][0][1][0][0][0],\n+                ([addnodes.literal_strong, \"opc_meta\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"dict\"],\n+                 [addnodes.literal_emphasis, \"(\"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \", \"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \")\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"(optional)\"))\n+    assert_node(doctree[3][1][0][0][1][0][0][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"dict\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n             \"   :var int attr: blah blah\\n\")\n",
  "sphinx-doc__sphinx-9258": "",
  "sphinx-doc__sphinx-9673": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex aa0401e..f98a514 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -832,12 +832,31 @@ def test_autodoc_typehints_description(app):\n             '\\n'\n             '   docstring\\n'\n             in context)\n-\n-\n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\",\n-                                   'autodoc_typehints_description_target': 'documented'})\n-def test_autodoc_typehints_description_no_undoc(app):\n+                                   'autodoc_typehints_description_target': 'documented',\n+                                   'napoleon_google_docstring': True,\n+                                   'napoleon_numpy_docstring': False})\n+def test_autodoc_typehints_with_napoleon_google(app):\n+    # Test that the return type is documented when using Google-style with Napoleon\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autofunction:: target.typehints.sample_function\\n'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text()\n+    assert ('target.typehints.sample_function(param1, param2=1)\\n'\n+            '\\n'\n+            '   Description.\\n'\n+            '\\n'\n+            '   Parameters:\\n'\n+            '      **param1** -- First parameter.\\n'\n+            '      **param2** -- Second parameter.\\n'\n+            '\\n'\n+            '   Returns:\\n'\n+            '      The returned value.\\n'\n+            '\\n'\n+            '   Return type:\\n'\n+            '      int\\n' in context)\n     # No :type: or :rtype: will be injected for `incr`, which does not have\n     # a description for its parameters or its return. `tuple_args` does\n     # describe them, so :type: and :rtype: will be added.\n",
  "sympy__sympy-18211": "diff --git a/sympy/solvers/tests/test_solveset.py b/sympy/solvers/tests/test_solveset.py\nindex 7bd9e29..29de63b 100644\n--- a/sympy/solvers/tests/test_solveset.py\n+++ b/sympy/solvers/tests/test_solveset.py\n@@ -1040,6 +1040,20 @@ def test__solveset_multi():\n             [Interval(0, pi), Interval(-1, 1)]) == FiniteSet((0, 1), (pi, -1))\n     assert _solveset_multi([r*cos(theta)-1, r*sin(theta)], [r, theta],\n             [Interval(0, 1), Interval(0, pi)]) == FiniteSet((1, 0))\n+\n+def test_issue_18188():\n+    from sympy import Eq, cos, sin, Reals\n+    from sympy.sets.conditionset import ConditionSet\n+    from sympy.solvers.solveset import solveset\n+    from sympy.abc import n, x\n+\n+    # Test case for the reported issue\n+    expr = Eq(n*cos(n) - 3*sin(n), 0)\n+    assert solveset(expr, n, domain=Reals) == ConditionSet(n, expr, Reals)\n+\n+    # Additional similar test case\n+    expr2 = Eq(x**2 + sqrt(x*2) + sin(x), 0)\n+    assert solveset(expr2, x, domain=Reals) == ConditionSet(x, expr2, Reals)\n     #assert _solveset_multi([r*cos(theta)-r, r*sin(theta)], [r, theta],\n     #        [Interval(0, 1), Interval(0, pi)]) == ?\n     assert _solveset_multi([r*cos(theta)-r, r*sin(theta)], [r, theta],\n",
  "sympy__sympy-18698": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 38de6f6..3390ae2 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3329,7 +3329,29 @@ def test_issue_17988():\n     p = poly(x - 1)\n     M = Matrix([[poly(x + 1), poly(x + 1)]])\n     assert p * M == M * p == Matrix([[poly(x**2 - 1), poly(x**2 - 1)]])\n-\n-def test_issue_18205():\n+from sympy import Symbol, sqf_list\n+\n+x = Symbol('x')\n+\n+def test_issue_8695():\n+    p = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3\n+    result = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\n+    assert sqf_list(p) == result\n+\n+def test_sqf_list_additional_cases():\n+    # Additional test case based on the issue description\n+    p = (x**2 + x + 1) * (x - 1)**4 * (x + 2)**2\n+    result = (1, [(x**2 + x + 1, 1), (x - 1, 4), (x + 2, 2)])\n+    assert sqf_list(p) == result\n+    \n+    # Another polynomial with different multiplicities\n+    p = (x**3 + 1) * (x - 1)**3 * (x + 1)**2\n+    result = (1, [(x + 1, 1), (x**2 - x + 1, 1), (x - 1, 3)])\n+    assert sqf_list(p) == result\n+\n+    # Case with no multiplicity\n+    p = (x + 1) * (x - 2) * (x + 3)\n+    result = (1, [(x + 1, 1), (x - 2, 1), (x + 3, 1)])\n+    assert sqf_list(p) == result\n     assert cancel((2 + I)*(3 - I)) == 7 + I\n     assert cancel((2 + I)*(2 - I)) == 5\n",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..781bab6 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3255,7 +3255,13 @@ def test_issue_5786():\n         (x - I*y)*(z - I*t)), extension=[I])) == -I*t*x - t*y + x*z - I*y*z\n \n \n-def test_noncommutative():\n+def test_issue_18895():\n+    # Test for issue #18895 related to factoring dropping a factor\n+    z = expand((x-1)*(y-1))\n+    result_without_extension = factor(z)\n+    result_with_extension = factor(z, extension=[I])\n+    assert result_without_extension == (x - 1)*(y - 1)\n+    assert result_with_extension == (x - 1)*(y - 1)\n     class foo(Expr):\n         is_commutative=False\n     e = x/(x + x*y)\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..a2c4f61 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -1,3 +1,15 @@\n+\n+def test_symbol_no_dict():\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__'), \"Symbol instances should not have __dict__\"\n+    assert hasattr(s, '__slots__'), \"Symbol instances should have __slots__\"\n+    assert s.__slots__ == ('name',), \"Symbol instances should have 'name' in __slots__\"\n+\n+def test_symbol_assignment_error():\n+    s = Symbol('s')\n+    with raises(AttributeError):\n+        s.new_attr = 123  # Should raise AttributeError because of __slots__\n+\n \"\"\"This tests sympy/core/basic.py with (ideally) no reference to subclasses\n of Basic or Atom.\"\"\"\n \n@@ -11,7 +23,7 @@ from sympy.core.sympify import SympifyError\n from sympy.core.function import Function, Lambda\n from sympy.core.compatibility import default_sort_key\n \n-from sympy import sin, Q, cos, gamma, Tuple, Integral, Sum\n+from sympy import sin, Q, cos, gamma, Tuple, Integral, Sum, Symbol\n from sympy.functions.elementary.exponential import exp\n from sympy.testing.pytest import raises\n from sympy.core import I, pi\n",
  "sympy__sympy-24562": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 13e3235..ad473f6 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -369,6 +369,27 @@ def test_Rational_new():\n     assert n.q == 4\n     assert n.p == -2\n \n+def test_issue_24543():\n+    for p in ('1.5', 1.5, 2):\n+        for q in ('1.5', 1.5, 2):\n+            assert Rational(p, q).as_numer_denom() == Rational('%s/%s'%(p,q)).as_numer_denom()\n+\n+    assert Rational('0.5', '100') == Rational(1, 200)\n+\n+def test_rational_string_input():\n+    # Tests for the specific issue with Rational('0.5', '100')\n+    assert Rational('0.5', '100') == Rational(1, 200)\n+    assert Rational('1.0', '100') == Rational(1, 100)\n+    assert Rational('1.5', '100') == Rational(3, 200)\n+    # Additional test cases to verify behavior with more string inputs\n+    assert Rational('2.5', '100') == Rational(1, 40)\n+    assert Rational('0.75', '100') == Rational(3, 400)\n+    # Ensure that it behaves correctly with integer string inputs\n+    assert Rational('1', '2') == Rational(1, 2)\n+    # Test with mixed types\n+    assert Rational('0.5', 100) == Rational(1, 200)\n+    assert Rational(0.5, '100') == Rational(1, 200)\n+\n \n def test_Number_new():\n     \"\"\"\"\n",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..b210326 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,7 +3202,22 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n-    def test_boundfield_widget_type(self):\n+    def test_boundfield_choicewidget_id_for_label(self):\n+        \"\"\"\n+        Test that id_for_label for subwidgets in CheckboxSelectMultiple \n+        respects the custom 'id' set by ChoiceWidget.options.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'Choice A'), ('b', 'Choice B')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'custom_id'}),\n+            )\n+\n+        form = SomeForm(auto_id='prefix_%s')\n+        subwidgets = form['field'].subwidgets\n+        # Check that the custom id is respected\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_id_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_id_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "matplotlib__matplotlib-20676": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex b009975..8d5dc9e 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -301,8 +301,63 @@ def test_tool_line_handle():\n \n     assert tool_line_handle.positions == positions\n \n-\n-def check_lasso_selector(**kwargs):\n+import pytest\n+from matplotlib import pyplot as plt\n+from matplotlib import widgets\n+\n+def do_event(tool, event_type, **kwargs):\n+    \"\"\"Simulate an event on the tool.\"\"\"\n+    event = type('Event', (object,), kwargs)\n+    getattr(tool, event_type)(event)\n+\n+@pytest.mark.parametrize('direction', (\"horizontal\", \"vertical\"))\n+def test_span_selector_bound(direction):\n+    fig, ax = plt.subplots(1, 1)\n+    ax.plot([10, 20], [10, 30])\n+    ax.figure.canvas.draw()\n+    x_bound = ax.get_xbound()\n+    y_bound = ax.get_ybound()\n+\n+    tool = widgets.SpanSelector(ax, print, direction, interactive=True)\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    bound = x_bound if direction == 'horizontal' else y_bound\n+    assert tool._edge_handles.positions == list(bound)\n+\n+    press_data = [10.5, 11.5]\n+    move_data = [11, 13]  # Updating selector is done in onmove\n+    release_data = move_data\n+    do_event(tool, 'press', xdata=press_data[0], ydata=press_data[1], button=1)\n+    do_event(tool, 'onmove', xdata=move_data[0], ydata=move_data[1], button=1)\n+\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    index = 0 if direction == 'horizontal' else 1\n+    handle_positions = [press_data[index], release_data[index]]\n+    assert tool._edge_handles.positions == handle_positions\n+\n+@pytest.mark.parametrize('interactive', [True, False])\n+def test_span_selector_no_zero_include(interactive):\n+    fig, ax = plt.subplots()\n+    ax.plot([10, 20], [10, 20])\n+    original_xlim = ax.get_xlim()\n+    original_ylim = ax.get_ylim()\n+\n+    ss = widgets.SpanSelector(ax, lambda vmin, vmax: None, 'horizontal', interactive=interactive)\n+    ax.figure.canvas.draw()\n+    \n+    assert ax.get_xlim() == original_xlim\n+    assert ax.get_ylim() == original_ylim\n+\n+    # Simulate a drag event\n+    do_event(ss, 'press', xdata=15, ydata=15, button=1)\n+    do_event(ss, 'onmove', xdata=17, ydata=17, button=1)\n+    do_event(ss, 'release', xdata=17, ydata=17, button=1)\n+\n+    assert ax.get_xlim() == original_xlim\n+    assert ax.get_ylim() == original_ylim\n     ax = get_ax()\n \n     def onselect(verts):\n",
  "scikit-learn__scikit-learn-12682": "diff --git a/sklearn/decomposition/tests/test_dict_learning.py b/sklearn/decomposition/tests/test_dict_learning.py\nindex 35a43f8..f64810e 100644\n--- a/sklearn/decomposition/tests/test_dict_learning.py\n+++ b/sklearn/decomposition/tests/test_dict_learning.py\n@@ -51,6 +51,58 @@ def test_dict_learning_shapes():\n     assert_equal(dico.transform(X).shape, (X.shape[0], n_components))\n \n \n+import pytest\n+import numpy as np\n+from sklearn.decomposition import SparseCoder\n+from sklearn.exceptions import ConvergenceWarning\n+\n+def test_sparse_coder_max_iter():\n+    def ricker_function(resolution, center, width):\n+        \"\"\"Discrete sub-sampled Ricker (Mexican hat) wavelet\"\"\"\n+        x = np.linspace(0, resolution - 1, resolution)\n+        x = ((2 / (np.sqrt(3 * width) * np.pi ** .25))\n+             * (1 - (x - center) ** 2 / width ** 2)\n+             * np.exp(-(x - center) ** 2 / (2 * width ** 2)))\n+        return x\n+\n+    def ricker_matrix(width, resolution, n_components):\n+        \"\"\"Dictionary of Ricker (Mexican hat) wavelets\"\"\"\n+        centers = np.linspace(0, resolution - 1, n_components)\n+        D = np.empty((n_components, resolution))\n+        for i, center in enumerate(centers):\n+            D[i] = ricker_function(resolution, center, width)\n+        D /= np.sqrt(np.sum(D ** 2, axis=1))[:, np.newaxis]\n+        return D\n+\n+    transform_algorithm = 'lasso_cd'\n+    resolution = 1024\n+    subsampling = 3  # subsampling factor\n+    n_components = resolution // subsampling\n+\n+    # Compute a wavelet dictionary\n+    D_multi = np.r_[tuple(ricker_matrix(width=w, resolution=resolution,\n+                          n_components=n_components // 5)\n+                          for w in (10, 50, 100, 500, 1000))]\n+\n+    X = np.linspace(0, resolution - 1, resolution)\n+    first_quarter = X < resolution / 4\n+    X[first_quarter] = 3.\n+    X[np.logical_not(first_quarter)] = -1.\n+    X = X.reshape(1, -1)\n+\n+    # check that the underlying model fails to converge\n+    with pytest.warns(ConvergenceWarning):\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=1)\n+        model.fit_transform(X)\n+\n+    # check that the underlying model converges w/o warnings\n+    with pytest.warns(None) as record:\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=2000)\n+        model.fit_transform(X)\n+    assert not record.list\n+\n def test_dict_learning_overcomplete():\n     n_components = 12\n     dico = DictionaryLearning(n_components, random_state=0).fit(X)\n",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..43312e3 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -148,7 +148,26 @@ def test_multi_target_sample_weights():\n     assert_almost_equal(rgr.predict(X_test), rgr_w.predict(X_test))\n \n \n-# Import the data\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+from sklearn.model_selection import cross_val_predict\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.datasets import make_multilabel_classification\n+import pytest\n+\n+def test_cross_val_predict_with_multioutput_classifier_predict_proba():\n+    # Generate a multilabel classification dataset\n+    X, Y = make_multilabel_classification(random_state=0)\n+\n+    # Instantiate a MultiOutputClassifier with LinearDiscriminantAnalysis\n+    mo_clf = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+\n+    # Test the cross_val_predict with method='predict_proba'\n+    # This should not raise an AttributeError after the fix\n+    try:\n+        pred_proba = cross_val_predict(mo_clf, X, Y, cv=5, method='predict_proba')\n+        assert pred_proba is not None\n+    except AttributeError as e:\n+        pytest.fail(f\"cross_val_predict raised an unexpected AttributeError: {e}\")\n iris = datasets.load_iris()\n # create a multiple targets by randomized shuffling and concatenating y.\n X = iris.data\n",
  "sphinx-doc__sphinx-9658": "",
  "sympy__sympy-13551": ""
}