{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..02f5faf 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -55,6 +55,32 @@ compound_models = {\n             )\n }\n \n+@pytest.mark.parametrize(\"compound_model, expected_matrix\", [\n+    # Test for nested compound model as described in the issue\n+    (\n+        m.Pix2Sky_TAN() & (m.Linear1D(10) & m.Linear1D(5)),\n+        np.array([\n+            [True, True, False, False],\n+            [True, True, False, False],\n+            [False, False, True, False],\n+            [False, False, False, True]\n+        ])\n+    ),\n+    # Additional test for nested compound model\n+    (\n+        (m.Linear1D(2) & m.Linear1D(4)) & (m.Linear1D(6) & m.Linear1D(8)),\n+        np.array([\n+            [True, False, False, False],\n+            [False, True, False, False],\n+            [False, False, True, False],\n+            [False, False, False, True]\n+        ])\n+    ),\n+])\n+def test_nested_separable_models(compound_model, expected_matrix):\n+    result_matrix = separability_matrix(compound_model)\n+    assert_allclose(result_matrix, expected_matrix)\n+\n \n def test_coord_matrix():\n     c = _coord_matrix(p2, 'left', 2)\n",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "diff --git a/astropy/io/fits/tests/test_connect.py b/astropy/io/fits/tests/test_connect.py\nindex 00deafe..ba528aa 100644\n--- a/astropy/io/fits/tests/test_connect.py\n+++ b/astropy/io/fits/tests/test_connect.py\n@@ -1,3 +1,4 @@\n+\n import gc\n import warnings\n \n@@ -7,7 +8,7 @@ from numpy.testing import assert_allclose, assert_array_equal\n \n from astropy import units as u\n from astropy.io import fits\n-from astropy.io.fits import BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu\n+from astropy.io.fits import BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu, connect\n from astropy.io.fits.column import (\n     _fortran_to_python_format,\n     _parse_tdisp_format,\n",
  "astropy__astropy-14508": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex 6bdf92c..9eac5d4 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -137,6 +137,36 @@ class TestHeaderFunctions(FitsTestCase):\n         ):\n             assert str(c) == _pad(\"FLOATNUM= -4.6737463674763E+32\")\n \n+    def test_floating_point_string_representation_card(self):\n+        \"\"\"\n+        Ensures Card formats float values with the correct precision, avoiding\n+        comment truncation\n+\n+        Regression test for https://github.com/astropy/astropy/issues/14507\n+        \"\"\"\n+        k = \"HIERARCH ABC DEF GH IJKLMN\"\n+        com = \"[m] abcdef ghijklm nopqrstu vw xyzab\"\n+        c = fits.Card(k, 0.009125, com)\n+        expected_str = f\"{k} = 0.009125 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, 8.95, com)\n+        expected_str = f\"{k} = 8.95 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, -99.9, com)\n+        expected_str = f\"{k} = -99.9 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Additional test cases for edge cases\n+        c = fits.Card(k, 0.0000000000000001, com)\n+        expected_str = f\"{k} = 1E-16 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, 1e-25, com)\n+        expected_str = f\"{k} = 1E-25 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n     def test_complex_value_card(self):\n         \"\"\"Test Card constructor with complex value\"\"\"\n \n",
  "astropy__astropy-14539": "diff --git a/astropy/io/fits/tests/test_diff.py b/astropy/io/fits/tests/test_diff.py\nindex 9bf4897..1a17411 100644\n--- a/astropy/io/fits/tests/test_diff.py\n+++ b/astropy/io/fits/tests/test_diff.py\n@@ -601,7 +601,18 @@ class TestDiff(FitsTestCase):\n         assert \"13 different table data element(s) found (65.00% different)\" in report\n         assert report.count(\"more indices\") == 1\n \n-    def test_identical_files_basic(self):\n+    def test_vla_identical_files(self):\n+        \"\"\"\n+        Test that FITSDiff correctly identifies identical files with VLAs.\n+        \"\"\"\n+        col = fits.Column('a', format='QD', array=[[0], [0, 0]])\n+        hdu = fits.BinTableHDU.from_columns([col])\n+        hdu.writeto('diffbug_vla.fits', overwrite=True)\n+\n+        diff = fits.FITSDiff('diffbug_vla.fits', 'diffbug_vla.fits')\n+        assert diff.identical, \"Identical files with VLA should not have differences\"\n+        report = diff.report()\n+        assert \"0 different table data element(s) found\" in report\n         \"\"\"Test identicality of two simple, extensionless files.\"\"\"\n \n         a = np.arange(100).reshape(10, 10)\n",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..9359d63 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -88,8 +88,20 @@ def test_inherit_docstrings():\n         # TODO: Maybe if __doc__ is None this test should be skipped instead?\n         assert Subclass.__call__.__doc__ == \"FOO\"\n \n+def test_inherit_docstrings_with_properties():\n+    class Base(metaclass=misc.InheritDocstrings):\n+        @property\n+        def bar(self):\n+            \"BAR\"\n+            return 0\n+\n+    class Subclass(Base):\n+        @property\n+        def bar(self):\n+            return 42\n \n-def test_set_locale():\n+    if Base.bar.__doc__ is not None:\n+        assert Subclass.bar.__doc__ == \"BAR\"\n     # First, test if the required locales are available\n     current = locale.setlocale(locale.LC_ALL)\n     try:\n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..3fb70c6 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -197,6 +197,15 @@ def test_unknown_unit3():\n     with pytest.raises(TypeError):\n         unit5 = u.Unit(None)\n \n+def test_unrecognized_unit_equality_with_none():\n+    # Create an unrecognized unit\n+    unit = u.Unit('asdf', parse_strict='silent')\n+    \n+    # Test equality and inequality with None\n+    assert unit != None  # noqa\n+    assert not (unit == None)  # noqa\n+    assert unit not in (None, u.m)\n+\n \n @raises(TypeError)\n def test_invalid_scale():\n",
  "astropy__astropy-7671": "diff --git a/astropy/utils/tests/test_introspection.py b/astropy/utils/tests/test_introspection.py\nindex 852d721..585f842 100644\n--- a/astropy/utils/tests/test_introspection.py\n+++ b/astropy/utils/tests/test_introspection.py\n@@ -69,7 +69,18 @@ def test_minversion():\n     test_module.__version__ = '0.12.2'\n     good_versions = ['0.12', '0.12.1', '0.12.0.dev']\n     bad_versions = ['1', '1.2rc1']\n+    # Add specific test cases for LooseVersion bug\n+    special_versions_good = [('1.14.3', '1.14dev'), ('1.14.3', '1.14.0dev')]\n+    special_versions_bad = [('1.14dev', '1.14.3'), ('1.14.0dev', '1.14.3')]\n+\n+    for have_version, min_version in special_versions_good:\n+        test_module.__version__ = have_version\n+        assert minversion(test_module, min_version)\n+\n+    for have_version, min_version in special_versions_bad:\n+        test_module.__version__ = have_version\n+        assert not minversion(test_module, min_version)\n     for version in good_versions:\n         assert minversion(test_module, version)\n     for version in bad_versions:\n-        assert not minversion(test_module, version)\n+        assert not minversion(test_module, version)\n",
  "astropy__astropy-8707": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex a2103c6..a884d4d 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -2329,6 +2329,31 @@ class TestHeaderFunctions(FitsTestCase):\n             else:\n                 c.verify('exception')\n \n+    def test_header_fromstring_unicode(self):\n+        \"\"\"\n+        Test reading a Header from a unicode string.\n+        \"\"\"\n+        header_data = (\n+            \"SIMPLE  =                    T / conforms to FITS standard                      \"\n+            \"BITPIX  =                    8 / array data type                                \"\n+            \"NAXIS   =                    0 / number of array dimensions                     \"\n+            \"EXTEND  =                    T                                                  \"\n+            \"END                                                                             \"\n+        )\n+        header = fits.Header.fromstring(header_data)\n+        assert header['SIMPLE'] == True\n+        assert header['BITPIX'] == 8\n+        assert header['NAXIS'] == 0\n+        assert header['EXTEND'] == True\n+\n+    def test_card_from_unicode(self):\n+        \"\"\"\n+        Test loading a Card from a unicode string.\n+        \"\"\"\n+        card = fits.Card.fromstring(\"ABC     = 'abc' / comment\")\n+        assert card.keyword == 'ABC'\n+        assert card.value == 'abc'\n+        assert card.comment == 'comment'\n \n class TestRecordValuedKeywordCards(FitsTestCase):\n     \"\"\"\n",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..62a9452 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -150,6 +150,14 @@ class TestQuantityCreation:\n         q5 = u.Quantity(decimal.Decimal('10.25'), u.m, dtype=object)\n         assert q5.dtype == object\n \n+    def test_float16_preservation(self):\n+        \"\"\"Test that np.float16 dtype is preserved when creating Quantity.\"\"\"\n+        a3_16 = np.array([1., 2.], dtype=np.float16)\n+        q3_16 = u.Quantity(a3_16, u.km)\n+        assert q3_16.dtype == a3_16.dtype\n+        assert q3_16.value[0] == a3_16[0]\n+        assert q3_16.unit == u.km\n+\n     def test_copy(self):\n \n         # By default, a new quantity is constructed, but not if copy=False\n",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..e376d88 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -206,6 +206,17 @@ TEST_DATA = [\n     (MaxLengthValidator(10), '', None),\n     (MaxLengthValidator(10), 10 * 'x', None),\n \n+    # Test cases for URLValidator to check rejection of invalid characters in username and password fields\n+    (URLValidator(), 'http://foo@bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo/bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar@baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar/baz@example.com', ValidationError),\n+    (URLValidator(), 'http://invalid-.com/?m=foo@example.com', ValidationError),\n+    (URLValidator(), \"http://-.~_!$&'()*+,;=%40:80%2f@example.com\", ValidationError),\n+    (URLValidator(), 'http://username@password@example.com', ValidationError),  # additional case\n+    (URLValidator(), 'http://user%40name:pass%2Fword@example.com', None),  # valid case with encoded characters\n+\n     (MaxLengthValidator(10), 15 * 'x', ValidationError),\n \n     (MinLengthValidator(10), 15 * 'x', None),\n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..9122878 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -8,6 +9,7 @@ from django.db.models import (\n     Avg, Count, DecimalField, DurationField, F, FloatField, Func, IntegerField,\n     Max, Min, Sum, Value,\n )\n+from django.db.models.expressions import Case, When\n from django.test import TestCase\n from django.test.utils import Approximate, CaptureQueriesContext\n from django.utils import timezone\n",
  "django__django-10914": "",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..64bce05 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,5 +1,7 @@\n+\n import os\n import signal\n+import subprocess\n from unittest import mock\n \n from django.db.backends.postgresql.client import DatabaseClient\n@@ -22,10 +24,42 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n                     self.pgpass = f.read().strip()  # ignore line endings\n             else:\n                 self.pgpass = None\n-            return 0\n+            return subprocess.CompletedProcess(args, 0)\n+\n+    def _run_it_with_pgpassword(self, dbinfo):\n+        \"\"\"\n+        This function invokes the runshell command while mocking subprocess.run.\n+        It returns a 2-tuple with:\n+        - The command line list\n+        - The value of the PGPASSWORD environment variable, or None.\n+        \"\"\"\n+        def _mock_subprocess_run(*args, env=os.environ, **kwargs):\n+            self.subprocess_args = list(*args[0])  # args[0] is the list of command arguments\n+            self.pgpassword = env.get('PGPASSWORD')\n+            return subprocess.CompletedProcess(self.subprocess_args, 0)\n+\n+        self.subprocess_args = None\n+        self.pgpassword = None\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            DatabaseClient.runshell_db(dbinfo)\n+        return self.subprocess_args, self.pgpassword\n+\n+    def test_pgpassword_set(self):\n+        self.assertEqual(\n+            self._run_it_with_pgpassword({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'password': 'somepassword',\n+                'host': 'localhost',\n+                'port': '5432',\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'localhost', '-p', '5432', 'dbname'],\n+                'somepassword',\n+            )\n+        )\n         self.subprocess_args = None\n         self.pgpass = None\n-        with mock.patch('subprocess.call', new=_mock_subprocess_call):\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n             DatabaseClient.runshell_db(dbinfo)\n         return self.subprocess_args, self.pgpass\n \n@@ -113,4 +147,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "",
  "django__django-11095": "diff --git a/tests/generic_inline_admin/tests.py b/tests/generic_inline_admin/tests.py\nindex 9dd9fd9..b6ff97e 100644\n--- a/tests/generic_inline_admin/tests.py\n+++ b/tests/generic_inline_admin/tests.py\n@@ -425,7 +425,74 @@ class GenericInlineModelAdminTest(SimpleTestCase):\n             inlines = [\n                 AlternateInline, MediaInline\n             ]\n-        ma = EpisodeAdmin(Episode, self.site)\n+        import unittest\n+        from django.test import RequestFactory\n+        from django.contrib import admin\n+        from .models import Episode, Media\n+        from .admin import MediaInline, AlternateInline\n+\n+        class GetInlinesTestCase(unittest.TestCase):\n+            def setUp(self):\n+                self.site = admin.AdminSite()\n+                self.factory = RequestFactory()\n+                self.request = self.factory.get('/')\n+\n+            def test_get_inlines_no_request_name(self):\n+                class EpisodeAdmin(admin.ModelAdmin):\n+                    inlines = [AlternateInline, MediaInline]\n+\n+                    def get_inlines(self, request, obj):\n+                        return []\n+\n+                ma = EpisodeAdmin(Episode, self.site)\n+                self.assertEqual(ma.get_inlines(self.request, None), [])\n+\n+            def test_get_inlines_alternate(self):\n+                class EpisodeAdmin(admin.ModelAdmin):\n+                    inlines = [AlternateInline, MediaInline]\n+\n+                    def get_inlines(self, request, obj):\n+                        if hasattr(request, 'name') and request.name == 'alternate':\n+                            return self.inlines[:1]\n+                        return []\n+\n+                self.request.name = 'alternate'\n+                ma = EpisodeAdmin(Episode, self.site)\n+                self.assertEqual(ma.get_inlines(self.request, None), (AlternateInline,))\n+\n+            def test_get_inlines_media(self):\n+                class EpisodeAdmin(admin.ModelAdmin):\n+                    inlines = [AlternateInline, MediaInline]\n+\n+                    def get_inlines(self, request, obj):\n+                        if hasattr(request, 'name') and request.name == 'media':\n+                            return self.inlines[1:2]\n+                        return []\n+\n+                self.request.name = 'media'\n+                ma = EpisodeAdmin(Episode, self.site)\n+                self.assertEqual(ma.get_inlines(self.request, None), (MediaInline,))\n+\n+            def test_get_inline_instances_with_dynamic_inlines(self):\n+                class EpisodeAdmin(admin.ModelAdmin):\n+                    inlines = [AlternateInline, MediaInline]\n+\n+                    def get_inlines(self, request, obj):\n+                        if hasattr(request, 'name'):\n+                            if request.name == 'alternate':\n+                                return self.inlines[:1]\n+                            elif request.name == 'media':\n+                                return self.inlines[1:2]\n+                        return []\n+\n+                ma = EpisodeAdmin(Episode, self.site)\n+                self.assertEqual(ma.get_inlines(self.request, None), [])\n+                self.assertEqual(ma.get_inline_instances(self.request), [])\n+\n+                for name, inline_class in (('alternate', AlternateInline), ('media', MediaInline)):\n+                    self.request.name = name\n+                    self.assertEqual(ma.get_inlines(self.request, None), (inline_class,))\n+                    self.assertEqual(type(ma.get_inline_instances(self.request)[0]), inline_class)\n         inlines = ma.get_inline_instances(request)\n         for (formset, inline), other_inline in zip(ma.get_formsets_with_inlines(request), inlines):\n-            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..9fe5497 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -233,11 +233,12 @@ class NumericPasswordValidatorTest(SimpleTestCase):\n \n class UsernameValidatorsTests(SimpleTestCase):\n     def test_unicode_validator(self):\n-        valid_usernames = ['joe', 'Ren\u00e9', '\u1d2e\u1d35\u1d33\u1d2e\u1d35\u1d3f\u1d30', '\u0623\u062d\u0645\u062f']\n+        valid_usernames = ['joe', 'Ren\u00e9', '\u1d2e\u1d35\u1d33\u1d2e\u1d35\u1d3f\u1d30', '\u0623\u062d\u0645\u062f', 'validusername']\n         invalid_usernames = [\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n             \"en\\u2013dash\",\n+            'trailingnewline\\n',\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -250,7 +251,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n \n     def test_ascii_validator(self):\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n-        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n+        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\", 'trailingnewline\\n']\n         v = validators.ASCIIUsernameValidator()\n         for valid in valid_usernames:\n             with self.subTest(valid=valid):\n@@ -258,4 +259,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..f578953 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -22,7 +22,30 @@ class RenderToStringTest(SimpleTestCase):\n         )\n \n \n-class GetDefaultTests(SimpleTestCase):\n+class RenderToStringTest(SimpleTestCase):\n+\n+    def setUp(self):\n+        self.engine = Engine(dirs=[TEMPLATE_DIR])\n+\n+    def test_basic_context(self):\n+        self.assertEqual(\n+            self.engine.render_to_string('test_context.html', {'obj': 'test'}),\n+            'obj:test\\n',\n+        )\n+    \n+    def test_autoescape_off(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:<script>\\n',\n+        )\n+\n+    def test_autoescape_on(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n \n     @override_settings(TEMPLATES=[])\n     def test_no_engines_configured(self):\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..110e06e 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -413,6 +413,10 @@ class HttpResponseTests(unittest.TestCase):\n         self.assertEqual(list(i), [b'abc'])\n         self.assertEqual(list(i), [])\n \n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n     def test_lazy_content(self):\n         r = HttpResponse(lazystr('helloworld'))\n         self.assertEqual(r.content, b'helloworld')\n",
  "django__django-11141": "",
  "django__django-11149": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 296cfba..f47fc28 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -701,8 +701,47 @@ class TestInlinePermissions(TestCase):\n             '<input type=\"hidden\" id=\"id_inner2_set-0-id\" value=\"%i\" name=\"inner2_set-0-id\">' % self.inner2.id,\n             html=True\n         )\n+    def test_inline_add_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(reverse('admin:admin_inlines_author_add'))\n+        # View-only inlines.\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"0\" '\n+            'id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n \n-    def test_inline_change_fk_change_perm(self):\n+    def test_inline_change_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(self.author_change_url)\n+        # View-only inlines.\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"1\" '\n+            'id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        # The field in the inline is read-only.\n+        self.assertContains(response, '<p>%s</p>' % self.book)\n+        self.assertNotContains(\n+            response,\n+            '<input type=\"checkbox\" name=\"Author_books-0-DELETE\" id=\"id_Author_books-0-DELETE\">',\n+            html=True,\n+        )\n         permission = Permission.objects.get(codename='change_inner2', content_type=self.inner_ct)\n         self.user.user_permissions.add(permission)\n         response = self.client.get(self.holder_change_url)\n",
  "django__django-11163": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex b25d077..0186440 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2900,6 +2900,15 @@ class StrictAssignmentTests(SimpleTestCase):\n \n \n class ModelToDictTests(TestCase):\n+    def test_model_to_dict_empty_fields(self):\n+        class BetterWriter(models.Model):\n+            name = models.CharField(max_length=100)\n+            score = models.IntegerField()\n+        \n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        # Test case for an empty list of fields\n+        self.assertEqual(model_to_dict(bw, fields=[]), {})\n+\n     def test_many_to_many(self):\n         \"\"\"Data for a ManyToManyField is a list rather than a lazy QuerySet.\"\"\"\n         blue = Colour.objects.create(name='blue')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..f55ccfe 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,7 +1,9 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n+from django.db.models.deletion import Collector\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n from .models import (\n",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..9e5d5b5 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -95,6 +95,21 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+            # Test cases to confirm issue resolution\n+            # Very small numbers with decimal_pos should not use exponential notation\n+            ('1e-200', 2, '0.00'),\n+            ('1e-201', 2, '0.00'),\n+            ('1e-199', 2, '0.00'),\n+            ('0.{}1'.format('0' * 199), 2, '0.00'),  # This is effectively 1e-200\n+            ('0.{}1'.format('0' * 299), 3, '0.000'),  # Testing close to the original test case\n+\n+            # Additional test cases\n+            # Testing boundaries around the cutoff\n+            ('1e-200', 3, '0.000'),\n+            ('1e-201', 3, '0.000'),\n+            ('1e-199', 3, '0.000'),\n+            ('1.23e-200', 5, '0.00000'),\n+            ('1e-100', 100, '0.' + '0' * 99 + '1'),\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-11211": "diff --git a/tests/prefetch_related/tests.py b/tests/prefetch_related/tests.py\nindex 1dc206f..f138b53 100644\n--- a/tests/prefetch_related/tests.py\n+++ b/tests/prefetch_related/tests.py\n@@ -1,4 +1,8 @@\n+\n from django.contrib.contenttypes.models import ContentType\n+from django.contrib.contenttypes.fields import GenericForeignKey\n+from django.db import models\n+import uuid\n from django.core.exceptions import ObjectDoesNotExist\n from django.db import connection\n from django.db.models import Prefetch, QuerySet\n@@ -7,10 +11,11 @@ from django.test import TestCase, override_settings\n from django.test.utils import CaptureQueriesContext\n \n from .models import (\n+    Article,  # Ensure Article is imported for testing purposes\n     Author, Author2, AuthorAddress, AuthorWithAge, Bio, Book, Bookmark,\n     BookReview, BookWithYear, Comment, Department, Employee, FavoriteAuthors,\n     House, LessonEntry, ModelIterableSubclass, Person, Qualification, Reader,\n-    Room, TaggedItem, Teacher, WordEntry,\n+    Room, TaggedItem, Teacher, WordEntry, Article,\n )\n \n \n@@ -877,7 +882,18 @@ class GenericRelationTests(TestCase):\n             qs = TaggedItem.objects.prefetch_related('content_object')\n             list(qs)\n \n-    def test_prefetch_GFK_nonint_pk(self):\n+    def test_prefetch_GFK_uuid_pk_issue(self):\n+        # Create an Article instance with UUID as the primary key.\n+        article = Article.objects.create(name='Django UUID Test')\n+        \n+        # Create a Comment instance linked to this Article through GFK.\n+        comment = Comment.objects.create(comment='UUID test comment', content_object=article)\n+        \n+        # Prefetch related objects and check if the GFK resolves correctly.\n+        qs = Comment.objects.prefetch_related('content_object_uuid')\n+        \n+        # Assert that the prefetch_related correctly fetches the related Article.\n+        self.assertEqual([c.content_object_uuid for c in qs], [article])\n         Comment.objects.create(comment=\"awesome\", content_object=self.book1)\n \n         # 1 for Comment table, 1 for Book table\n",
  "django__django-11239": "",
  "django__django-11265": "diff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py\nindex a587c22..317acbe 100644\n--- a/tests/filtered_relation/tests.py\n+++ b/tests/filtered_relation/tests.py\n@@ -98,6 +98,14 @@ class FilteredRelationTests(TestCase):\n             [self.author1]\n         )\n \n+    def test_with_exclude(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2]\n+        )\n+\n     def test_with_join_and_complex_condition(self):\n         self.assertSequenceEqual(\n             Author.objects.annotate(\n",
  "django__django-11276": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 4051a05..4771491 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -27,7 +27,7 @@ class TestUtilsHtml(SimpleTestCase):\n             ('<', '&lt;'),\n             ('>', '&gt;'),\n             ('\"', '&quot;'),\n-            (\"'\", '&#39;'),\n+            (\"'\", '&#x27;'),\n         )\n         # Substitution patterns for testing the above items.\n         patterns = (\"%s\", \"asdf%sfdsa\", \"%s1\", \"1%sb\")\n",
  "django__django-11292": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex b016284..dd67827 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -243,7 +243,25 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertNoOutput(err)\n         self.assertEqual(out.strip(), '/PREFIX/some/url/')\n \n-    def test_disallowed_abbreviated_options(self):\n+    def test_skip_checks(self):\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            # (staticfiles.E001) The STATICFILES_DIRS setting is not a tuple or\n+            # list.\n+            'STATICFILES_DIRS': '\"foo\"',\n+        })\n+        out, err = self.run_manage(['set_option', '--skip-checks', '--set', 'foo'])\n+        self.assertNoOutput(err)\n+        self.assertEqual(out.strip(), 'Set foo')\n+\n+    def test_checks_are_run(self):\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            # (staticfiles.E001) The STATICFILES_DIRS setting is not a tuple or\n+            # list.\n+            'STATICFILES_DIRS': '\"foo\"',\n+        })\n+        out, err = self.run_manage(['set_option', '--set', 'foo'])\n+        self.assertIn('SystemCheckError', err)\n+        self.assertNotIn('Set foo', out)\n         \"\"\"\n         To avoid conflicts with custom options, commands don't allow\n         abbreviated forms of the --setting and --pythonpath options.\n",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..e417314 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,5 +1,7 @@\n+\n from django.test import SimpleTestCase\n-from django.urls.resolvers import RegexPattern, RoutePattern\n+from django.urls.resolvers import RegexPattern, RoutePattern, get_resolver\n+from django.test.utils import override_settings\n from django.utils.translation import gettext_lazy as _\n \n \n@@ -9,7 +11,37 @@ class RegexPatternTests(SimpleTestCase):\n         self.assertEqual(str(RegexPattern(_('^translated/$'))), '^translated/$')\n \n \n-class RoutePatternTests(SimpleTestCase):\n+class ResolverCacheTests(SimpleTestCase):\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_default__root_urlconf(self):\n+        # Resolver for a default URLconf (passing no argument) and for the\n+        # settings.ROOT_URLCONF is the same cached object.\n+        self.assertIs(get_resolver(), get_resolver('urlpatterns.path_urls'))\n+        self.assertIsNot(get_resolver(), get_resolver('urlpatterns.path_dynamic_urls'))\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_handles_none(self):\n+        # Test that calling get_resolver with None and with ROOT_URLCONF\n+        # results in the same cached object.\n+        resolver_with_none = get_resolver(None)\n+        resolver_with_root_urlconf = get_resolver('urlpatterns.path_urls')\n+        self.assertIs(resolver_with_none, resolver_with_root_urlconf)\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_reverse_before_and_after_request_handling(self):\n+        # Simulate the behavior before and after request handling.\n+        # Before handling, the URLconf is not set.\n+        initial_resolver = get_resolver()\n+        \n+        # Simulate request handling that sets the URLconf.\n+        from django.urls.base import set_urlconf\n+        set_urlconf('urlpatterns.path_urls')\n+        \n+        # After handling, it should use the ROOT_URLCONF.\n+        post_request_resolver = get_resolver()\n+        \n+        self.assertIs(initial_resolver, post_request_resolver)\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\nindex b010b42..a8453d7 100644\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -227,6 +227,33 @@ class BaseModelBackendTest:\n         self.assertEqual(CountingMD5PasswordHasher.calls, 1)\n \n \n+from django.contrib.auth import authenticate\n+from django.test import TestCase, override_settings\n+from auth_tests.test_auth_backends import CountingMD5PasswordHasher\n+from django.contrib.auth.models import User\n+\n+class TestAuthenticationWithoutDbQuery(TestCase):\n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_no_db_query_when_username_none(self):\n+        CountingMD5PasswordHasher.calls = 0\n+        with self.assertNumQueries(0):\n+            self.assertIsNone(authenticate(username=None, password='test'))\n+        self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n+\n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_no_db_query_when_password_none(self):\n+        CountingMD5PasswordHasher.calls = 0\n+        with self.assertNumQueries(0):\n+            self.assertIsNone(authenticate(username='someuser', password=None))\n+        self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n+\n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_no_db_query_when_both_none(self):\n+        CountingMD5PasswordHasher.calls = 0\n+        with self.assertNumQueries(0):\n+            self.assertIsNone(authenticate(username=None, password=None))\n+        self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n+\n class ModelBackendTest(BaseModelBackendTest, TestCase):\n     \"\"\"\n     Tests for the ModelBackend using the default User model.\n",
  "django__django-11490": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex e627a0d..56c19ee 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -124,7 +124,38 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.union(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n-    def test_union_with_two_annotated_values_list(self):\n+    def test_union_with_values_list_column_change(self):\n+        # Setup test data\n+        ReservedName.objects.create(name='a', order=2)\n+\n+        qs1 = ReservedName.objects.all()\n+        \n+        # Test changing columns with values_list\n+        reserved_name = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(reserved_name, (2,))\n+\n+        reserved_name = qs1.union(qs1).values_list('name').get()\n+        self.assertEqual(reserved_name, ('a',))\n+\n+        reserved_name = qs1.union(qs1).values_list('name', 'order').get()\n+        self.assertEqual(reserved_name, ('a', 2))\n+    \n+    def test_union_with_values_column_change(self):\n+        # Setup test data\n+        ReservedName.objects.create(name='b', order=3)\n+\n+        qs1 = ReservedName.objects.all()\n+\n+        # Test changing columns with values\n+        reserved_name = qs1.union(qs1).values('order').get()\n+        self.assertEqual(reserved_name['order'], 3)\n+\n+        reserved_name = qs1.union(qs1).values('name').get()\n+        self.assertEqual(reserved_name['name'], 'b')\n+\n+        reserved_name = qs1.union(qs1).values('name', 'order').get()\n+        self.assertEqual(reserved_name['name'], 'b')\n+        self.assertEqual(reserved_name['order'], 3)\n         qs1 = Number.objects.filter(num=1).annotate(\n             count=Value(0, IntegerField()),\n         ).values_list('num', 'count')\n",
  "django__django-11532": "diff --git a/tests/mail/tests.py b/tests/mail/tests.py\nindex a6f0e17..6b4278c 100644\n--- a/tests/mail/tests.py\n+++ b/tests/mail/tests.py\n@@ -1,6 +1,8 @@\n import asyncore\n import base64\n import mimetypes\n+from unittest import mock\n+\n import os\n import shutil\n import smtpd\n@@ -359,8 +361,27 @@ class MailTests(HeadersCheckMixin, SimpleTestCase):\n         msg.attach_alternative(html_content, 'text/html')\n         msg.attach('example.txt', 'Text file content', 'text/plain')\n         self.assertIn(html_content, msg.message().as_string())\n+    @mock.patch('django.core.mail.message.DNS_NAME', '\u6f22\u5b57')\n+    def test_non_ascii_dns_non_unicode_email_message_id(self):\n+        \"\"\"\n+        Test that the Message-ID header is properly encoded in punycode\n+        for non-ASCII DNS names when the email encoding is set to iso-8859-1.\n+        \"\"\"\n+        email = EmailMessage('subject', '', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        message = email.message()\n+        self.assertIn('@xn--p8s937b', message['Message-ID'])\n \n-    def test_none_body(self):\n+    @mock.patch('django.core.mail.message.DNS_NAME', '\u6b63\u5b97')\n+    def test_non_ascii_dns_unicode_email_message_id(self):\n+        \"\"\"\n+        Test that the Message-ID header is properly encoded in punycode\n+        for another non-ASCII DNS name when the email encoding is set to iso-8859-1.\n+        \"\"\"\n+        email = EmailMessage('subject', '', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        message = email.message()\n+        self.assertIn('@xn--6krz44b', message['Message-ID'])\n         msg = EmailMessage('subject', None, 'from@example.com', ['to@example.com'])\n         self.assertEqual(msg.body, '')\n         self.assertEqual(msg.message().get_payload(), '')\n",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..5bb5a9b 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,9 +1,10 @@\n+\n from django import forms\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n-from django.db.models import F\n+from django.db.models import F, Field, Model\n from django.db.models.functions import Upper\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n@@ -509,8 +510,62 @@ class ListDisplayTests(CheckTestCase):\n \n         self.assertIsValid(TestModelAdmin, ValidationTestModel)\n \n+class FieldAccessibleViaInstanceTests(CheckTestCase):\n+\n+    def test_valid_field_accessible_via_instance(self):\n+        class PositionField(Field):\n+            \"\"\"Custom field accessible only via instance.\"\"\"\n+            def contribute_to_class(self, cls, name):\n+                super().contribute_to_class(cls, name)\n+                setattr(cls, self.name, self)\n+\n+            def __get__(self, instance, owner):\n+                if instance is None:\n+                    raise AttributeError()\n+\n+        class TestModel(Model):\n+            field = PositionField()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('field',)\n+\n+        self.assertIsValid(TestModelAdmin, TestModel)\n+\n+    def test_invalid_field_not_in_list_display(self):\n+        class PositionField(Field):\n+            def contribute_to_class(self, cls, name):\n+                super().contribute_to_class(cls, name)\n+                setattr(cls, self.name, self)\n+\n+            def __get__(self, instance, owner):\n+                if instance is None:\n+                    raise AttributeError()\n+\n+        class TestModel(Model):\n+            field = PositionField()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('non_existent_field',)\n+\n+        self.assertIsInvalid(\n+            TestModelAdmin, TestModel,\n+            \"The value of 'list_display[0]' refers to 'non_existent_field', which is not a callable, \"\n+            \"an attribute of 'TestModelAdmin', or an attribute or method on 'TestModel'.\",\n+            'admin.E108'\n+        )\n+\n+    def test_many_to_many_field_not_allowed(self):\n+        class TestModel(Model):\n+            many_to_many = ManyToManyField(Band)\n \n-class ListDisplayLinksCheckTests(CheckTestCase):\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('many_to_many',)\n+\n+        self.assertIsInvalid(\n+            TestModelAdmin, TestModel,\n+            \"The value of 'list_display[0]' must not be a ManyToManyField.\",\n+            'admin.E109'\n+        )\n \n     def test_not_iterable(self):\n         class TestModelAdmin(ModelAdmin):\n",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..02d7a59 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -9,7 +9,8 @@ from django.db.models.functions import Upper\n from django.test import TestCase\n from django.utils.deprecation import RemovedInDjango31Warning\n \n-from .models import Article, Author, OrderedByFArticle, Reference\n+from .models import Article, Author, ChildArticle, OrderedByFArticle, Reference\n+from datetime import datetime\n \n \n class OrderingTests(TestCase):\n@@ -462,7 +463,41 @@ class OrderingTests(TestCase):\n             attrgetter('headline')\n         )\n \n-    def test_deprecated_values_annotate(self):\n+    def test_order_by_ptr_field_with_default_ordering_by_expression(self):\n+        ca1 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_2,\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca3 = ChildArticle.objects.create(\n+            headline='h3',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n+        articles = ChildArticle.objects.order_by('article_ptr')\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+\n+    def test_order_by_with_expression_in_meta_ordering(self):\n+        # This test ensures that ordering by an expression in Meta works correctly\n+        ca1 = OrderedByFArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_2,\n+        )\n+        ca2 = OrderedByFArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        articles = OrderedByFArticle.objects.all()\n+        # Ensure that the ordering respects the F expression and the order is correct\n+        self.assertSequenceEqual(articles, [ca2, ca1])\n         msg = (\n             \"Article QuerySet won't use Meta.ordering in Django 3.1. Add \"\n             \".order_by('-pub_date', 'headline', OrderBy(F(author__name), \"\n",
  "django__django-11603": "",
  "django__django-11740": "",
  "django__django-11749": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex a0e1530..f0ac9f1 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -209,7 +209,21 @@ class CommandTests(SimpleTestCase):\n         self.assertIn('need_me', out.getvalue())\n         self.assertIn('needme2', out.getvalue())\n \n-    def test_command_add_arguments_after_common_arguments(self):\n+    def test_mutually_exclusive_group_required_with_kwargs(self):\n+        out = StringIO()\n+        management.call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+\n+    def test_mutually_exclusive_group_required_with_kwargs_name(self):\n+        out = StringIO()\n+        management.call_command('mutually_exclusive_required', foo_name='test', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+\n+    def test_mutually_exclusive_group_error(self):\n+        out = StringIO()\n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            management.call_command('mutually_exclusive_required', stdout=out)\n         out = StringIO()\n         management.call_command('common_args', stdout=out)\n         self.assertIn('Detected that --version already exists', out.getvalue())\n",
  "django__django-11790": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 440150b..05c6809 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -437,7 +437,21 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         self.assertEqual(form.fields['username'].max_length, 254)\n         self.assertEqual(form.errors, {})\n \n-    def test_username_field_label(self):\n+    def test_username_field_max_length_html_attribute(self):\n+        \"\"\"\n+        Test that the maxlength HTML attribute is correctly set on the username field.\n+        \"\"\"\n+        # Assuming CustomEmailField max_length is 255\n+        form = AuthenticationForm()\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 255)\n+\n+    def test_username_field_max_length_html_attribute_default(self):\n+        \"\"\"\n+        Test that the maxlength HTML attribute defaults to 254 if not explicitly set.\n+        \"\"\"\n+        with override_settings(AUTH_USER_MODEL='auth_tests.IntegerUsernameUser'):\n+            form = AuthenticationForm()\n+            self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 254)\n \n         class CustomAuthenticationForm(AuthenticationForm):\n             username = CharField(label=\"Name\", max_length=75)\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..6c860cf 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -247,6 +247,36 @@ class WriterTests(SimpleTestCase):\n             (\"[list, tuple, dict, set, frozenset]\", set())\n         )\n \n+    def test_serialize_translated_enum(self):\n+        class TextTranslatedEnum(enum.Enum):\n+            A = _('a-value')\n+            B = _('value-b')\n+\n+        self.assertSerializedResultEqual(\n+            TextTranslatedEnum.A,\n+            (\"migrations.test_writer.TextTranslatedEnum['A']\", {'import migrations.test_writer'})\n+        )\n+\n+        field = models.CharField(default=TextTranslatedEnum.A, choices=[(m.value, m) for m in TextTranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('a-value', migrations.test_writer.TextTranslatedEnum['A']), \"\n+            \"('value-b', migrations.test_writer.TextTranslatedEnum['B'])], \"\n+            \"default=migrations.test_writer.TextTranslatedEnum['A'])\"\n+        )\n+\n+        field = models.CharField(default=TextTranslatedEnum.B, choices=[(m.value, m) for m in TextTranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('a-value', migrations.test_writer.TextTranslatedEnum['A']), \"\n+            \"('value-b', migrations.test_writer.TextTranslatedEnum['B'])], \"\n+            \"default=migrations.test_writer.TextTranslatedEnum['B'])\"\n+        )\n+\n     def test_serialize_lazy_objects(self):\n         pattern = re.compile(r'^foo$')\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n@@ -269,15 +299,105 @@ class WriterTests(SimpleTestCase):\n             TextEnum.A,\n             (\"migrations.test_writer.TextEnum('a-value')\", {'import migrations.test_writer'})\n         )\n+\n+    def test_serialize_translated_enum(self):\n+        class TextTranslatedEnum(enum.Enum):\n+            A = _('a-value')\n+            B = _('value-b')\n+\n+        self.assertSerializedResultEqual(\n+            TextTranslatedEnum.A,\n+            (\"migrations.test_writer.TextTranslatedEnum['A']\", {'import migrations.test_writer'})\n+        )\n+\n+        field = models.CharField(default=TextTranslatedEnum.A, choices=[(m.value, m) for m in TextTranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('a-value', migrations.test_writer.TextTranslatedEnum['A']), \"\n+            \"('value-b', migrations.test_writer.TextTranslatedEnum['B'])], \"\n+            \"default=migrations.test_writer.TextTranslatedEnum['A'])\"\n+        )\n+\n+        field = models.CharField(default=TextTranslatedEnum.B, choices=[(m.value, m) for m in TextTranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('a-value', migrations.test_writer.TextTranslatedEnum['A']), \"\n+            \"('value-b', migrations.test_writer.TextTranslatedEnum['B'])], \"\n+            \"default=migrations.test_writer.TextTranslatedEnum['B'])\"\n+        )\n         self.assertSerializedResultEqual(\n             BinaryEnum.A,\n             (\"migrations.test_writer.BinaryEnum(b'a-value')\", {'import migrations.test_writer'})\n         )\n+\n+    def test_serialize_translated_enum(self):\n+        class TextTranslatedEnum(enum.Enum):\n+            A = _('a-value')\n+            B = _('value-b')\n+\n+        self.assertSerializedResultEqual(\n+            TextTranslatedEnum.A,\n+            (\"migrations.test_writer.TextTranslatedEnum['A']\", {'import migrations.test_writer'})\n+        )\n+\n+        field = models.CharField(default=TextTranslatedEnum.A, choices=[(m.value, m) for m in TextTranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('a-value', migrations.test_writer.TextTranslatedEnum['A']), \"\n+            \"('value-b', migrations.test_writer.TextTranslatedEnum['B'])], \"\n+            \"default=migrations.test_writer.TextTranslatedEnum['A'])\"\n+        )\n+\n+        field = models.CharField(default=TextTranslatedEnum.B, choices=[(m.value, m) for m in TextTranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('a-value', migrations.test_writer.TextTranslatedEnum['A']), \"\n+            \"('value-b', migrations.test_writer.TextTranslatedEnum['B'])], \"\n+            \"default=migrations.test_writer.TextTranslatedEnum['B'])\"\n+        )\n         self.assertSerializedResultEqual(\n             IntEnum.B,\n             (\"migrations.test_writer.IntEnum(2)\", {'import migrations.test_writer'})\n         )\n \n+    def test_serialize_translated_enum(self):\n+        class TextTranslatedEnum(enum.Enum):\n+            A = _('a-value')\n+            B = _('value-b')\n+\n+        self.assertSerializedResultEqual(\n+            TextTranslatedEnum.A,\n+            (\"migrations.test_writer.TextTranslatedEnum['A']\", {'import migrations.test_writer'})\n+        )\n+\n+        field = models.CharField(default=TextTranslatedEnum.A, choices=[(m.value, m) for m in TextTranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('a-value', migrations.test_writer.TextTranslatedEnum['A']), \"\n+            \"('value-b', migrations.test_writer.TextTranslatedEnum['B'])], \"\n+            \"default=migrations.test_writer.TextTranslatedEnum['A'])\"\n+        )\n+\n+        field = models.CharField(default=TextTranslatedEnum.B, choices=[(m.value, m) for m in TextTranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('a-value', migrations.test_writer.TextTranslatedEnum['A']), \"\n+            \"('value-b', migrations.test_writer.TextTranslatedEnum['B'])], \"\n+            \"default=migrations.test_writer.TextTranslatedEnum['B'])\"\n+        )\n+\n         field = models.CharField(default=TextEnum.B, choices=[(m.value, m) for m in TextEnum])\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n@@ -287,6 +407,36 @@ class WriterTests(SimpleTestCase):\n             \"('value-b', migrations.test_writer.TextEnum('value-b'))], \"\n             \"default=migrations.test_writer.TextEnum('value-b'))\"\n         )\n+\n+    def test_serialize_translated_enum(self):\n+        class TextTranslatedEnum(enum.Enum):\n+            A = _('a-value')\n+            B = _('value-b')\n+\n+        self.assertSerializedResultEqual(\n+            TextTranslatedEnum.A,\n+            (\"migrations.test_writer.TextTranslatedEnum['A']\", {'import migrations.test_writer'})\n+        )\n+\n+        field = models.CharField(default=TextTranslatedEnum.A, choices=[(m.value, m) for m in TextTranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('a-value', migrations.test_writer.TextTranslatedEnum['A']), \"\n+            \"('value-b', migrations.test_writer.TextTranslatedEnum['B'])], \"\n+            \"default=migrations.test_writer.TextTranslatedEnum['A'])\"\n+        )\n+\n+        field = models.CharField(default=TextTranslatedEnum.B, choices=[(m.value, m) for m in TextTranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('a-value', migrations.test_writer.TextTranslatedEnum['A']), \"\n+            \"('value-b', migrations.test_writer.TextTranslatedEnum['B'])], \"\n+            \"default=migrations.test_writer.TextTranslatedEnum['B'])\"\n+        )\n         field = models.CharField(default=BinaryEnum.B, choices=[(m.value, m) for m in BinaryEnum])\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n@@ -296,6 +446,36 @@ class WriterTests(SimpleTestCase):\n             \"(b'value-b', migrations.test_writer.BinaryEnum(b'value-b'))], \"\n             \"default=migrations.test_writer.BinaryEnum(b'value-b'))\"\n         )\n+\n+    def test_serialize_translated_enum(self):\n+        class TextTranslatedEnum(enum.Enum):\n+            A = _('a-value')\n+            B = _('value-b')\n+\n+        self.assertSerializedResultEqual(\n+            TextTranslatedEnum.A,\n+            (\"migrations.test_writer.TextTranslatedEnum['A']\", {'import migrations.test_writer'})\n+        )\n+\n+        field = models.CharField(default=TextTranslatedEnum.A, choices=[(m.value, m) for m in TextTranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('a-value', migrations.test_writer.TextTranslatedEnum['A']), \"\n+            \"('value-b', migrations.test_writer.TextTranslatedEnum['B'])], \"\n+            \"default=migrations.test_writer.TextTranslatedEnum['A'])\"\n+        )\n+\n+        field = models.CharField(default=TextTranslatedEnum.B, choices=[(m.value, m) for m in TextTranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('a-value', migrations.test_writer.TextTranslatedEnum['A']), \"\n+            \"('value-b', migrations.test_writer.TextTranslatedEnum['B'])], \"\n+            \"default=migrations.test_writer.TextTranslatedEnum['B'])\"\n+        )\n         field = models.IntegerField(default=IntEnum.A, choices=[(m.value, m) for m in IntEnum])\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n@@ -306,6 +486,36 @@ class WriterTests(SimpleTestCase):\n             \"default=migrations.test_writer.IntEnum(1))\"\n         )\n \n+    def test_serialize_translated_enum(self):\n+        class TextTranslatedEnum(enum.Enum):\n+            A = _('a-value')\n+            B = _('value-b')\n+\n+        self.assertSerializedResultEqual(\n+            TextTranslatedEnum.A,\n+            (\"migrations.test_writer.TextTranslatedEnum['A']\", {'import migrations.test_writer'})\n+        )\n+\n+        field = models.CharField(default=TextTranslatedEnum.A, choices=[(m.value, m) for m in TextTranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('a-value', migrations.test_writer.TextTranslatedEnum['A']), \"\n+            \"('value-b', migrations.test_writer.TextTranslatedEnum['B'])], \"\n+            \"default=migrations.test_writer.TextTranslatedEnum['A'])\"\n+        )\n+\n+        field = models.CharField(default=TextTranslatedEnum.B, choices=[(m.value, m) for m in TextTranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('a-value', migrations.test_writer.TextTranslatedEnum['A']), \"\n+            \"('value-b', migrations.test_writer.TextTranslatedEnum['B'])], \"\n+            \"default=migrations.test_writer.TextTranslatedEnum['B'])\"\n+        )\n+\n     def test_serialize_choices(self):\n         class TextChoices(models.TextChoices):\n             A = 'A', 'A value'\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..e996e16 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,6 @@\n+\n import unittest\n-from datetime import datetime\n+from datetime import datetime, timedelta\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -316,9 +317,48 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_rfc850(self):\n-        parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n-        self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        # Original test cases\n+        utcnow_1 = datetime(2019, 11, 6, 8, 49, 37)\n+        utcnow_2 = datetime(2020, 11, 6, 8, 49, 37)\n+        utcnow_3 = datetime(2048, 11, 6, 8, 49, 37)\n+        tests = (\n+            (utcnow_1, 'Tuesday, 31-Dec-69 08:49:37 GMT', datetime(2069, 12, 31, 8, 49, 37)),\n+            (utcnow_1, 'Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),\n+            (utcnow_1, 'Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37)),\n+            (utcnow_2, 'Wednesday, 31-Dec-70 08:49:37 GMT', datetime(2070, 12, 31, 8, 49, 37)),\n+            (utcnow_2, 'Friday, 31-Dec-71 08:49:37 GMT', datetime(1971, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+        )\n+        for utcnow, rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = utcnow\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n+\n+        # Additional tests to cover more cases\n+\n+        # Check boundary case for future year interpretation\n+        utcnow_4 = datetime(2071, 11, 6, 8, 49, 37)\n+        rfc850str = 'Friday, 31-Dec-21 08:49:37 GMT'\n+        expected_date = datetime(2021, 12, 31, 8, 49, 37)\n+        with self.subTest(rfc850str=rfc850str):\n+            mocked_datetime.utcnow.return_value = utcnow_4\n+            parsed = parse_http_date(rfc850str)\n+            self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n+\n+        # Check a normal case for past years\n+        rfc850str = 'Monday, 01-Jan-50 08:49:37 GMT'\n+        expected_date = datetime(2050, 1, 1, 8, 49, 37)\n+        with self.subTest(rfc850str=rfc850str):\n+            mocked_datetime.utcnow.return_value = datetime.now()   # Use current time\n+            parsed = parse_http_date(rfc850str)\n+            self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n \n     def test_parsing_asctime(self):\n         parsed = parse_http_date('Sun Nov  6 08:49:37 1994')\n",
  "django__django-11880": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 95afc0d..614223b 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3672,7 +3672,47 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n             '<input type=\"hidden\" name=\"data\" id=\"id_data\"></td></tr>'\n         )\n \n-    def test_field_named_data(self):\n+import copy\n+from django.forms import Form, CharField\n+from django.test import SimpleTestCase\n+\n+class FieldDeepCopyTests(SimpleTestCase):\n+\n+    def test_field_deep_copy_error_messages(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        self.assertIsInstance(field_copy, CustomCharField)\n+        self.assertIsNot(field_copy.error_messages, field.error_messages)\n+\n+    def test_deepcopy_does_not_affect_original(self):\n+        class AnotherCustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'required': 'This field is required.'}\n+                super().__init__(**kwargs)\n+\n+        field = AnotherCustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        field_copy.error_messages['required'] = 'Changed message.'\n+\n+        self.assertEqual(field.error_messages['required'], 'This field is required.')\n+        self.assertEqual(field_copy.error_messages['required'], 'Changed message.')\n+\n+    def test_field_deep_copy_with_different_field_type(self):\n+        class CustomField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid_choice': 'Invalid choice selected.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomField()\n+        field_copy = copy.deepcopy(field)\n+        self.assertIsInstance(field_copy, CustomField)\n+        self.assertIsNot(field_copy.error_messages, field.error_messages)\n+        self.assertEqual(field_copy.error_messages['invalid_choice'], 'Invalid choice selected.')\n         class DataForm(Form):\n             data = CharField(max_length=10)\n \n",
  "django__django-11951": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex f2f6bbd..f6a2792 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -1,3 +1,5 @@\n+\n+from math import ceil\n from operator import attrgetter\n \n from django.db import IntegrityError, NotSupportedError, connection\n",
  "django__django-11964": "diff --git a/tests/model_fields/test_charfield.py b/tests/model_fields/test_charfield.py\nindex c6162e5..b9b2157 100644\n--- a/tests/model_fields/test_charfield.py\n+++ b/tests/model_fields/test_charfield.py\n@@ -1,3 +1,4 @@\n+\n from unittest import skipIf\n \n from django.core.exceptions import ValidationError\n@@ -6,6 +7,29 @@ from django.test import SimpleTestCase, TestCase\n \n from .models import Post\n \n+class MyChoice(models.TextChoices):\n+    FIRST_CHOICE = \"first\", \"The first choice, it is\"\n+    SECOND_CHOICE = \"second\", \"The second choice, it is\"\n+\n+class MyObject(models.Model):\n+    my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n+\n+class MyChoiceTests(TestCase):\n+    def setUp(self):\n+        self.obj = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n+\n+    def test_created_object_value_type(self):\n+        # Test that the created object's field returns the correct type\n+        self.assertIsInstance(self.obj.my_str_value, str)\n+        self.assertEqual(self.obj.my_str_value, \"first\")\n+\n+    def test_retrieved_object_value_type(self):\n+        # Test that the retrieved object's field returns the correct type\n+        retrieved_obj = MyObject.objects.get(pk=self.obj.pk)\n+        self.assertIsInstance(retrieved_obj.my_str_value, str)\n+        self.assertEqual(retrieved_obj.my_str_value, \"first\")\n+\n \n class TestCharField(TestCase):\n \n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..5ec06c5 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -147,8 +147,45 @@ class ChoicesTests(SimpleTestCase):\n             with self.subTest(field=field):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n+from django.test import TestCase\n+from django.db import models\n+\n+class OverrideGetFieldDisplayTests(TestCase):\n+    def test_overriding_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+\n+    def test_get_FIELD_display_default_behavior(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+        f = FooBar(foo_bar=1)\n+        # This expects the default behavior, which should return the choice 'foo'.\n+        self.assertEqual(f.get_foo_bar_display(), 'foo')\n+\n+    def test_get_FIELD_display_override_with_no_choices(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField()\n+\n+            def get_foo_bar_display(self):\n+                return 'something else'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something else')\n+\n+    def test_get_FIELD_display_no_override(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField()\n \n-class GetFieldDisplayTests(SimpleTestCase):\n+        f = FooBar(foo_bar=1)\n+        # Without choices, the default behavior should be just the raw value.\n+        self.assertEqual(f.get_foo_bar_display(), 1)\n \n     def test_choices_and_field_display(self):\n         \"\"\"\n",
  "django__django-12039": "diff --git a/tests/indexes/tests.py b/tests/indexes/tests.py\nindex 700f574..8e797ec 100644\n--- a/tests/indexes/tests.py\n+++ b/tests/indexes/tests.py\n@@ -32,6 +32,39 @@ class SchemaIndexesTests(TestCase):\n             column_names=(\"c1\",),\n             suffix=\"123\",\n         )\n+\n+    def test_index_with_opclasses_no_order(self):\n+        # Test index creation with opclasses but no explicit ordering\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            sql = str(index.create_sql(Article, editor))\n+            self.assertIn('(%s text_pattern_ops)' % editor.quote_name('headline'), sql)\n+\n+    def test_index_with_opclasses_and_ascending_order(self):\n+        # Test index creation with opclasses and ascending order\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            sql = str(index.create_sql(Article, editor))\n+            self.assertIn('(%s text_pattern_ops)' % editor.quote_name('headline'), sql)\n+\n+    def test_index_with_opclasses_and_descending_order(self):\n+        # Test index creation with opclasses and descending order\n+        index = Index(\n+            fields=['-headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            sql = str(index.create_sql(Article, editor))\n+            self.assertIn('(%s text_pattern_ops DESC)' % editor.quote_name('headline'), sql)\n         self.assertEqual(index_name, \"indexes_article_c1_a52bd80b123\")\n \n     def test_index_name(self):\n@@ -48,6 +81,39 @@ class SchemaIndexesTests(TestCase):\n             column_names=('c1', 'c2', long_name),\n             suffix='ix',\n         )\n+\n+    def test_index_with_opclasses_no_order(self):\n+        # Test index creation with opclasses but no explicit ordering\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            sql = str(index.create_sql(Article, editor))\n+            self.assertIn('(%s text_pattern_ops)' % editor.quote_name('headline'), sql)\n+\n+    def test_index_with_opclasses_and_ascending_order(self):\n+        # Test index creation with opclasses and ascending order\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            sql = str(index.create_sql(Article, editor))\n+            self.assertIn('(%s text_pattern_ops)' % editor.quote_name('headline'), sql)\n+\n+    def test_index_with_opclasses_and_descending_order(self):\n+        # Test index creation with opclasses and descending order\n+        index = Index(\n+            fields=['-headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            sql = str(index.create_sql(Article, editor))\n+            self.assertIn('(%s text_pattern_ops DESC)' % editor.quote_name('headline'), sql)\n         expected = {\n             'mysql': 'indexes_article_c1_c2_looooooooooooooooooo_255179b2ix',\n             'oracle': 'indexes_a_c1_c2_loo_255179b2ix',\n@@ -70,6 +136,39 @@ class SchemaIndexesTests(TestCase):\n             index_sql[0]\n         )\n \n+    def test_index_with_opclasses_no_order(self):\n+        # Test index creation with opclasses but no explicit ordering\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            sql = str(index.create_sql(Article, editor))\n+            self.assertIn('(%s text_pattern_ops)' % editor.quote_name('headline'), sql)\n+\n+    def test_index_with_opclasses_and_ascending_order(self):\n+        # Test index creation with opclasses and ascending order\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            sql = str(index.create_sql(Article, editor))\n+            self.assertIn('(%s text_pattern_ops)' % editor.quote_name('headline'), sql)\n+\n+    def test_index_with_opclasses_and_descending_order(self):\n+        # Test index creation with opclasses and descending order\n+        index = Index(\n+            fields=['-headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            sql = str(index.create_sql(Article, editor))\n+            self.assertIn('(%s text_pattern_ops DESC)' % editor.quote_name('headline'), sql)\n+\n     def test_index_together_single_list(self):\n         # Test for using index_together with a single list (#22172)\n         index_sql = connection.schema_editor()._model_indexes_sql(IndexTogetherSingleList)\n@@ -86,6 +185,39 @@ class SchemaIndexesNotPostgreSQLTests(TransactionTestCase):\n             fields=['headline'],\n             opclasses=['varchar_pattern_ops'],\n         )\n+\n+    def test_index_with_opclasses_no_order(self):\n+        # Test index creation with opclasses but no explicit ordering\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            sql = str(index.create_sql(Article, editor))\n+            self.assertIn('(%s text_pattern_ops)' % editor.quote_name('headline'), sql)\n+\n+    def test_index_with_opclasses_and_ascending_order(self):\n+        # Test index creation with opclasses and ascending order\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            sql = str(index.create_sql(Article, editor))\n+            self.assertIn('(%s text_pattern_ops)' % editor.quote_name('headline'), sql)\n+\n+    def test_index_with_opclasses_and_descending_order(self):\n+        # Test index creation with opclasses and descending order\n+        index = Index(\n+            fields=['-headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            sql = str(index.create_sql(Article, editor))\n+            self.assertIn('(%s text_pattern_ops DESC)' % editor.quote_name('headline'), sql)\n         with connection.schema_editor() as editor:\n             # This would error if opclasses weren't ignored.\n             editor.add_index(IndexedArticle2, index)\n@@ -236,6 +368,39 @@ class SchemaIndexesMySQLTests(TransactionTestCase):\n         storage = connection.introspection.get_storage_engine(\n             connection.cursor(), ArticleTranslation._meta.db_table\n         )\n+\n+    def test_index_with_opclasses_no_order(self):\n+        # Test index creation with opclasses but no explicit ordering\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            sql = str(index.create_sql(Article, editor))\n+            self.assertIn('(%s text_pattern_ops)' % editor.quote_name('headline'), sql)\n+\n+    def test_index_with_opclasses_and_ascending_order(self):\n+        # Test index creation with opclasses and ascending order\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            sql = str(index.create_sql(Article, editor))\n+            self.assertIn('(%s text_pattern_ops)' % editor.quote_name('headline'), sql)\n+\n+    def test_index_with_opclasses_and_descending_order(self):\n+        # Test index creation with opclasses and descending order\n+        index = Index(\n+            fields=['-headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            sql = str(index.create_sql(Article, editor))\n+            self.assertIn('(%s text_pattern_ops DESC)' % editor.quote_name('headline'), sql)\n         if storage != \"InnoDB\":\n             self.skip(\"This test only applies to the InnoDB storage engine\")\n         index_sql = [str(statement) for statement in connection.schema_editor()._model_indexes_sql(ArticleTranslation)]\n",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..73f1997 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n@@ -7,6 +8,7 @@ from django.db.models.fields.related_lookups import RelatedIsNull\n from django.db.models.functions import Lower\n from django.db.models.lookups import Exact, GreaterThan, IsNull, LessThan\n from django.db.models.sql.query import Query\n+from django.db.models.lookups import Exact\n from django.db.models.sql.where import OR\n from django.test import SimpleTestCase\n from django.test.utils import register_lookup\n@@ -107,7 +109,12 @@ class TestQuery(SimpleTestCase):\n         self.assertIsInstance(b_isnull.lhs, SimpleCol)\n         self.assertEqual(b_isnull.lhs.target, ObjectC._meta.get_field('objectb'))\n \n-    def test_clone_select_related(self):\n+    def test_iterable_lookup_value(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=['a', 'b']))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ['a', 'b'])\n         query = Query(Item)\n         query.add_select_related(['creator'])\n         clone = query.clone()\n",
  "django__django-12125": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex e62f7b0..fb218cd 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -746,4 +746,19 @@ class WriterTests(SimpleTestCase):\n \n     def test_register_non_serializer(self):\n         with self.assertRaisesMessage(ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n+\n+    def test_serialize_inner_class(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class TestModel(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = TestModel._meta.get_field('field')\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"tests.migrations.test_writer.Outer.Inner(max_length=20)\"\n+        )\n",
  "django__django-12143": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 2d13234..29bbdaf 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -844,6 +844,59 @@ class ChangeListTests(TestCase):\n         queryset = m._get_list_editable_queryset(request, prefix='form')\n         self.assertEqual(queryset.count(), 2)\n \n+    def test_get_list_editable_queryset_with_unescaped_chars_in_prefix(self):\n+        \"\"\"Test with unescaped special regex characters in prefix.\"\"\"\n+        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n+        Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n+        data = {\n+            'form[0]-TOTAL_FORMS': '2',\n+            'form[0]-INITIAL_FORMS': '2',\n+            'form[0]-MIN_NUM_FORMS': '0',\n+            'form[0]-MAX_NUM_FORMS': '1000',\n+            'form[0]-0-uuid': str(a.pk),\n+            'form[0]-0-load': '10',\n+            '_save': 'Save',\n+        }\n+        superuser = self._create_superuser('superuser')\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form[0]')\n+        self.assertEqual(queryset.count(), 1)\n+\n+    def test_get_list_editable_queryset_with_complex_chars_in_prefix(self):\n+        \"\"\"Test with multiple complex special regex characters in prefix.\"\"\"\n+        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n+        Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n+        data = {\n+            'form*-TOTAL_FORMS': '2',\n+            'form*-INITIAL_FORMS': '2',\n+            'form*-MIN_NUM_FORMS': '0',\n+            'form*-MAX_NUM_FORMS': '1000',\n+            'form*-0-uuid': str(a.pk),\n+            'form*-0-load': '10',\n+            '_save': 'Save',\n+        }\n+        superuser = self._create_superuser('superuser')\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form*')\n+        self.assertEqual(queryset.count(), 1)\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form')\n+        self.assertEqual(queryset.count(), 1)\n+        data['form-0-uuid'] = 'INVALD_PRIMARY_KEY'\n+        # The unfiltered queryset is returned if there's invalid data.\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form')\n+        self.assertEqual(queryset.count(), 2)\n+\n     def test_changelist_view_list_editable_changed_objects_uses_filter(self):\n         \"\"\"list_editable edits use a filtered queryset to limit memory usage.\"\"\"\n         a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n",
  "django__django-12155": "diff --git a/tests/admin_docs/test_utils.py b/tests/admin_docs/test_utils.py\nindex 6cae16b..ccbb812 100644\n--- a/tests/admin_docs/test_utils.py\n+++ b/tests/admin_docs/test_utils.py\n@@ -1,8 +1,10 @@\n+\n import unittest\n \n from django.contrib.admindocs.utils import (\n     docutils_is_available, parse_docstring, parse_rst, trim_docstring,\n )\n+from django.test.utils import captured_stderr\n \n from .tests import AdminDocsSimpleTestCase\n \n",
  "django__django-12193": "diff --git a/tests/postgres_tests/test_array.py b/tests/postgres_tests/test_array.py\nindex 6228cbc..0175c84 100644\n--- a/tests/postgres_tests/test_array.py\n+++ b/tests/postgres_tests/test_array.py\n@@ -1103,6 +1103,36 @@ class TestSplitFormWidget(PostgreSQLWidgetTestCase):\n             }\n         )\n \n+    def test_splitarrayfield_booleanfield_initial_data_all_false(self):\n+        # Test with all False values\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('name', [False, False, False])\n+        self.assertEqual(context['widget']['value'], '[False, False, False]')\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{}, {}, {}]\n+        )\n+\n+    def test_splitarrayfield_booleanfield_initial_data_all_true(self):\n+        # Test with all True values\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('name', [True, True, True])\n+        self.assertEqual(context['widget']['value'], '[True, True, True]')\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{'checked': True}, {'checked': True}, {'checked': True}]\n+        )\n+\n+    def test_splitarrayfield_booleanfield_mixed_initial_data(self):\n+        # Test with mixed True and False values\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=4)\n+        context = widget.get_context('name', [False, True, False, True])\n+        self.assertEqual(context['widget']['value'], '[False, True, False, True]')\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{}, {'checked': True}, {}, {'checked': True}]\n+        )\n+\n     def test_render(self):\n         self.check_html(\n             SplitArrayWidget(forms.TextInput(), size=2), 'array', None,\n@@ -1112,6 +1142,36 @@ class TestSplitFormWidget(PostgreSQLWidgetTestCase):\n             \"\"\"\n         )\n \n+    def test_splitarrayfield_booleanfield_initial_data_all_false(self):\n+        # Test with all False values\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('name', [False, False, False])\n+        self.assertEqual(context['widget']['value'], '[False, False, False]')\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{}, {}, {}]\n+        )\n+\n+    def test_splitarrayfield_booleanfield_initial_data_all_true(self):\n+        # Test with all True values\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('name', [True, True, True])\n+        self.assertEqual(context['widget']['value'], '[True, True, True]')\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{'checked': True}, {'checked': True}, {'checked': True}]\n+        )\n+\n+    def test_splitarrayfield_booleanfield_mixed_initial_data(self):\n+        # Test with mixed True and False values\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=4)\n+        context = widget.get_context('name', [False, True, False, True])\n+        self.assertEqual(context['widget']['value'], '[False, True, False, True]')\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{}, {'checked': True}, {}, {'checked': True}]\n+        )\n+\n     def test_render_attrs(self):\n         self.check_html(\n             SplitArrayWidget(forms.TextInput(), size=2),\n",
  "django__django-12209": "diff --git a/tests/serializers/test_data.py b/tests/serializers/test_data.py\nindex abbb3ab..1f27abd 100644\n--- a/tests/serializers/test_data.py\n+++ b/tests/serializers/test_data.py\n@@ -28,7 +28,23 @@ from .models import (\n     PositiveSmallIntegerPKData, SlugData, SlugPKData, SmallData, SmallPKData,\n     Tag, TextData, TimeData, UniqueAnchor, UUIDData,\n )\n-from .tests import register_tests\n+from django.test import TestCase\n+from .models import UUIDData\n+import uuid\n+\n+class UUIDFieldPKDefaultTest(TestCase):\n+    def test_duplicate_pk_inserts(self):\n+        # Create an initial instance with default UUID\n+        first_instance = UUIDData.objects.create()\n+        original_pk = first_instance.pk\n+\n+        # Create a new instance with the same primary key\n+        duplicate_instance = UUIDData(pk=original_pk)\n+\n+        with self.assertRaises(Exception) as context:\n+            duplicate_instance.save()\n+\n+        self.assertIn('UNIQUE constraint failed', str(context.exception))\n \n # A set of functions that can be used to recreate\n # test data objects of various kinds.\n",
  "django__django-12262": "diff --git a/tests/template_tests/test_custom.py b/tests/template_tests/test_custom.py\nindex 8a8c535..c3c93a8 100644\n--- a/tests/template_tests/test_custom.py\n+++ b/tests/template_tests/test_custom.py\n@@ -77,8 +77,27 @@ class SimpleTagTests(TagTestCase):\n                 'simple_only_unlimited_args - Expected result: 37, 42, 56, 89'),\n             ('{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 56 eggs=\"scrambled\" four=1|add:3 %}',\n                 'simple_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4'),\n+            ('{% load custom %}{% hello greeting=\"hi\" %}', 'hello - Expected result: hi world'),\n         ]\n \n+        # New test cases for the reported issue\n+        new_tests = [\n+            # Test for keyword-only argument with default value\n+            (\"{% load custom %}{% hello %}\", \"hello - Expected result: hello world\"),\n+            (\"{% load custom %}{% hello greeting='hi' %}\", \"hello - Expected result: hi world\"),\n+            # Test for multiple keyword arguments supplied\n+            (\"'hi' received multiple values for keyword argument 'greeting'\",\n+                '{% load custom %}{% hi greeting=\"hi\" greeting=\"hello\" %}'),\n+        ]\n+\n+        for entry in new_tests:\n+            if isinstance(entry, tuple):\n+                t = self.engine.from_string(entry[0])\n+                self.assertEqual(t.render(c), entry[1])\n+            else:\n+                with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n+                    self.engine.from_string(entry[1])\n+\n         for entry in templates:\n             t = self.engine.from_string(entry[0])\n             self.assertEqual(t.render(c), entry[1])\n@@ -101,8 +120,27 @@ class SimpleTagTests(TagTestCase):\n                 '{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 eggs=\"scrambled\" 56 four=1|add:3 %}'),\n             (\"'simple_unlimited_args_kwargs' received multiple values for keyword argument 'eggs'\",\n                 '{% load custom %}{% simple_unlimited_args_kwargs 37 eggs=\"scrambled\" eggs=\"scrambled\" %}'),\n+            ('{% load custom %}{% hello greeting=\"hi\" %}', 'hello - Expected result: hi world'),\n+        ]\n+\n+        # New test cases for the reported issue\n+        new_tests = [\n+            # Test for keyword-only argument with default value\n+            (\"{% load custom %}{% hello %}\", \"hello - Expected result: hello world\"),\n+            (\"{% load custom %}{% hello greeting='hi' %}\", \"hello - Expected result: hi world\"),\n+            # Test for multiple keyword arguments supplied\n+            (\"'hi' received multiple values for keyword argument 'greeting'\",\n+                '{% load custom %}{% hi greeting=\"hi\" greeting=\"hello\" %}'),\n         ]\n \n+        for entry in new_tests:\n+            if isinstance(entry, tuple):\n+                t = self.engine.from_string(entry[0])\n+                self.assertEqual(t.render(c), entry[1])\n+            else:\n+                with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n+                    self.engine.from_string(entry[1])\n+\n         for entry in errors:\n             with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n                 self.engine.from_string(entry[1])\n@@ -190,8 +228,27 @@ class InclusionTagTests(TagTestCase):\n                 'inclusion_only_unlimited_args - Expected result: 37, 42, 56, 89\\n'),\n             ('{% load inclusion %}{% inclusion_unlimited_args_kwargs 37 40|add:2 56 eggs=\"scrambled\" four=1|add:3 %}',\n                 'inclusion_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4\\n'),\n+            ('{% load custom %}{% hello greeting=\"hi\" %}', 'hello - Expected result: hi world'),\n+        ]\n+\n+        # New test cases for the reported issue\n+        new_tests = [\n+            # Test for keyword-only argument with default value\n+            (\"{% load custom %}{% hello %}\", \"hello - Expected result: hello world\"),\n+            (\"{% load custom %}{% hello greeting='hi' %}\", \"hello - Expected result: hi world\"),\n+            # Test for multiple keyword arguments supplied\n+            (\"'hi' received multiple values for keyword argument 'greeting'\",\n+                '{% load custom %}{% hi greeting=\"hi\" greeting=\"hello\" %}'),\n         ]\n \n+        for entry in new_tests:\n+            if isinstance(entry, tuple):\n+                t = self.engine.from_string(entry[0])\n+                self.assertEqual(t.render(c), entry[1])\n+            else:\n+                with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n+                    self.engine.from_string(entry[1])\n+\n         for entry in templates:\n             t = self.engine.from_string(entry[0])\n             self.assertEqual(t.render(c), entry[1])\n",
  "django__django-12276": "",
  "django__django-12304": "diff --git a/tests/template_tests/test_callables.py b/tests/template_tests/test_callables.py\nindex d71266b..1318b1d 100644\n--- a/tests/template_tests/test_callables.py\n+++ b/tests/template_tests/test_callables.py\n@@ -1,4 +1,6 @@\n+\n from unittest import TestCase\n+from django.template import Context, Template  # Added import for Template\n \n from django.template import Context, Engine\n \n@@ -95,6 +97,30 @@ class CallableVariablesTests(TestCase):\n         # template rendering.\n         self.assertEqual(my_doodad.num_calls, 0)\n \n+    def test_enum_do_not_call_in_templates(self):\n+        class YearInSchool(models.TextChoices):\n+            FRESHMAN = 'FR', _('Freshman')\n+            SOPHOMORE = 'SO', _('Sophomore')\n+            JUNIOR = 'JR', _('Junior')\n+            SENIOR = 'SR', _('Senior')\n+            \n+            do_not_call_in_templates = True\n+\n+        context = Context({'YearInSchool': YearInSchool})\n+\n+        # Test that template can access the enum member's label and value correctly\n+        t = Template('{{ YearInSchool.FRESHMAN.label }}|{{ YearInSchool.FRESHMAN.value }}')\n+        self.assertEqual(t.render(context), 'Freshman|FR')\n+\n+        # Test comparison in template\n+        t = Template('{% if YearInSchool.FRESHMAN == \"FR\" %}Match{% else %}No Match{% endif %}')\n+        self.assertEqual(t.render(context), 'Match')\n+\n+        # Test using in an if condition\n+        student = Context({'student': {'year_in_school': 'FR'}})\n+        t = Template('{% if student.year_in_school == YearInSchool.FRESHMAN %}Yes{% else %}No{% endif %}')\n+        self.assertEqual(t.render(student), 'Yes')\n+\n     def test_do_not_call_and_alters_data(self):\n         # If we combine ``alters_data`` and ``do_not_call_in_templates``, the\n         # ``alters_data`` attribute will not make any difference in the\n@@ -122,4 +148,4 @@ class CallableVariablesTests(TestCase):\n \n         # Double-check that the object was really never called during the\n         # template rendering.\n-        self.assertEqual(my_doodad.num_calls, 0)\n+        self.assertEqual(my_doodad.num_calls, 0)\n",
  "django__django-12308": "",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..fe7196a 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1015,7 +1015,44 @@ class OtherModelTests(SimpleTestCase):\n             class ParkingLot(Place):\n                 parent = models.OneToOneField(Place, models.CASCADE)\n \n-    def test_m2m_table_name_clash(self):\n+    @isolate_apps('invalid_models_tests')\n+    def test_mti_onetoone_field_order(self):\n+        \"\"\"\n+        Test that the order of OneToOneField declarations does not affect the configuration.\n+        \"\"\"\n+        class Document(models.Model):\n+            pass\n+\n+        class PickingIncorrectOrder(Document):\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+        \n+        class PickingCorrectOrder(Document):\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+\n+        # Test for Proper Configuration\n+        self.assertEqual(PickingCorrectOrder.check(), [])\n+\n+        # Test for Improper Configuration due to incorrect order\n+        msg = 'Add parent_link=True to invalid_models_tests.PickingIncorrectOrder.origin.'\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            PickingIncorrectOrder.check()\n+\n+    @isolate_apps('invalid_models_tests')\n+    def test_multiple_onetoone_inheritance(self):\n+        \"\"\"\n+        Test for multiple OneToOneFields with inheritance and parent_link.\n+        \"\"\"\n+        class ParentModel(models.Model):\n+            pass\n+\n+        class ChildModel(ParentModel):\n+            parent = models.OneToOneField(ParentModel, models.CASCADE, parent_link=True, related_name='+')\n+            another_parent = models.OneToOneField(ParentModel, models.CASCADE, related_name='another_child')\n+\n+        # This should not raise any configuration errors.\n+        self.assertEqual(ChildModel.check(), [])\n         class Foo(models.Model):\n             bar = models.ManyToManyField('Bar', db_table='myapp_bar')\n \n",
  "django__django-12419": "diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py\nindex 7af62eb..442afad 100644\n--- a/tests/middleware/test_security.py\n+++ b/tests/middleware/test_security.py\n@@ -231,7 +231,13 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         \"\"\"\n         self.assertNotIn('Referrer-Policy', self.process_response())\n \n-    def test_referrer_policy_on(self):\n+    @override_settings(SECURE_REFERRER_POLICY='same-origin')\n+    def test_referrer_policy_default(self):\n+        \"\"\"\n+        By default, SECURE_REFERRER_POLICY is set to \"same-origin\".\n+        The middleware adds a \"Referrer-Policy\" header with the value \"same-origin\".\n+        \"\"\"\n+        self.assertEqual(self.process_response()['Referrer-Policy'], 'same-origin')\n         \"\"\"\n         With SECURE_REFERRER_POLICY set to a valid value, the middleware adds a\n         \"Referrer-Policy\" header to the response.\n@@ -254,4 +260,4 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         present in the response.\n         \"\"\"\n         response = self.process_response(headers={'Referrer-Policy': 'unsafe-url'})\n-        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n",
  "django__django-12663": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 872551b..4de6b5a 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -13,10 +13,12 @@ from django.db.models import (\n     Func, IntegerField, Max, Min, Model, OrderBy, OuterRef, Q, StdDev,\n     Subquery, Sum, TimeField, UUIDField, Value, Variance, When,\n )\n+from django.utils.functional import SimpleLazyObject\n from django.db.models.expressions import Col, Combinable, Random, RawSQL, Ref\n from django.db.models.functions import (\n     Coalesce, Concat, Left, Length, Lower, Substr, Upper,\n )\n+from django.utils.functional import SimpleLazyObject\n from django.db.models.sql import constants\n from django.db.models.sql.datastructures import Join\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n@@ -26,6 +28,7 @@ from .models import (\n     UUID, UUIDPK, Company, Employee, Experiment, Number, RemoteEmployee,\n     Result, SimulationRun, Time,\n )\n+from django.utils.functional import SimpleLazyObject\n \n \n class BasicExpressionsTests(TestCase):\n",
  "django__django-12708": "",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..2907371 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -23,7 +23,7 @@ from .models import (\n     Advisor, Album, Band, Bee, Car, Company, Event, Honeycomb, Individual,\n     Inventory, Member, MyFileField, Profile, School, Student,\n )\n-from .widgetadmin import site as widget_admin_site\n+from django.db.models import ManyToManyField\n \n \n class TestDataMixin:\n@@ -138,7 +138,44 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n         self.assertEqual(f2.widget.attrs['maxlength'], '20')\n         self.assertEqual(f2.widget.attrs['size'], '10')\n \n-    def test_formfield_overrides_for_datetime_field(self):\n+    def test_formfield_overrides_m2m_filter_widget(self):\n+        \"\"\"\n+        The autocomplete_fields, raw_id_fields, filter_vertical, and\n+        filter_horizontal widgets for ManyToManyFields may be overridden by\n+        specifying a widget in formfield_overrides.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            filter_vertical = ['members']\n+            formfield_overrides = {\n+                ManyToManyField: {'widget': forms.CheckboxSelectMultiple},\n+            }\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget.widget, forms.CheckboxSelectMultiple)\n+\n+    def test_formfield_overrides_m2m_autocomplete_widget(self):\n+        \"\"\"\n+        Test that a ManyToManyField widget can be overridden with an Autocomplete widget.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            autocomplete_fields = ['members']\n+            formfield_overrides = {\n+                ManyToManyField: {'widget': widgets.AutocompleteSelectMultiple},\n+            }\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget.widget, widgets.AutocompleteSelectMultiple)\n+\n+    def test_m2m_no_override_uses_default(self):\n+        \"\"\"\n+        Test that the default widget is used when no override is provided.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            pass\n+\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, widgets.FilteredSelectMultiple)\n         \"\"\"\n         Overriding the widget for DateTimeField doesn't overrides the default\n         form_class for that field (#26449).\n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..b0ffe95 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,7 +172,7 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n@@ -181,4 +181,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..aa04287 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -5,7 +5,8 @@ from operator import attrgetter\n \n from django.core.exceptions import FieldError\n from django.db import connection\n-from django.db.models import Exists, Max, OuterRef\n+from django.db.models import Exists, Max, OuterRef, Q\n+from django.test.utils import isolate_apps\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n from django.utils.deprecation import RemovedInDjango40Warning\n@@ -189,7 +190,43 @@ class LookupTests(TestCase):\n             }\n         )\n \n-    def test_in_bulk_non_unique_field(self):\n+    def test_in_bulk_meta_constraint(self):\n+        season_2011 = Season.objects.create(year=2011)\n+        season_2012 = Season.objects.create(year=2012)\n+        Season.objects.create(year=2013)\n+        self.assertEqual(\n+            Season.objects.in_bulk(\n+                [season_2011.year, season_2012.year],\n+                field_name='year',\n+            ),\n+            {season_2011.year: season_2011, season_2012.year: season_2012},\n+        )\n+\n+    @isolate_apps('lookup')\n+    def test_in_bulk_non_unique_meta_constraint(self):\n+        class Model(models.Model):\n+            ean = models.CharField(max_length=100)\n+            brand = models.CharField(max_length=100)\n+            name = models.CharField(max_length=80)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=['ean'],\n+                        name='partial_ean_unique',\n+                        condition=Q(is_active=True)\n+                    ),\n+                    models.UniqueConstraint(\n+                        fields=['brand', 'name'],\n+                        name='together_brand_name_unique',\n+                    ),\n+                ]\n+\n+        msg = \"in_bulk()'s field_name must be a unique field but '%s' isn't.\"\n+        for field_name in ['brand', 'ean']:\n+            with self.subTest(field_name=field_name):\n+                with self.assertRaisesMessage(ValueError, msg % field_name):\n+                    Model.objects.in_bulk(field_name=field_name)\n         msg = \"in_bulk()'s field_name must be a unique field but 'author' isn't.\"\n         with self.assertRaisesMessage(ValueError, msg):\n             Article.objects.in_bulk([self.au1], field_name='author')\n",
  "django__django-12858": "",
  "django__django-13012": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 87c0945..116c016 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1820,11 +1820,32 @@ class CombinableTests(SimpleTestCase):\n     def test_or(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             Combinable() | Combinable()\n-\n-    def test_reversed_and(self):\n+from django.db.models import ExpressionWrapper, Value, IntegerField\n+from django.test import SimpleTestCase\n+\n+class ExpressionWrapperTests(SimpleTestCase):\n+    def test_empty_group_by(self):\n+        expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [])\n+\n+    def test_non_empty_group_by(self):\n+        expr = ExpressionWrapper(Lower(Value('f')), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [expr.expression])\n+\n+    def test_constant_expression_in_group_by(self):\n+        # Simulate a query where the expression is a constant\n+        expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+        # Check that the group by columns are empty, since constants should not appear there\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [])\n+\n+    def test_variable_expression_in_group_by(self):\n+        # Simulate a query where the expression is not just a constant\n+        expr = ExpressionWrapper(Lower(Value('test')), output_field=IntegerField())\n+        # Check that the group by columns include the expression, as it is not a constant\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [expr.expression])\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             object() & Combinable()\n \n     def test_reversed_or(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n-            object() | Combinable()\n+            object() | Combinable()\n",
  "django__django-13028": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 70329a0..7d4810b 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -61,7 +61,7 @@ class Queries1Tests(TestCase):\n \n         cls.a1 = Author.objects.create(name='a1', num=1001, extra=e1)\n         cls.a2 = Author.objects.create(name='a2', num=2002, extra=e1)\n-        a3 = Author.objects.create(name='a3', num=3003, extra=cls.e2)\n+        cls.a3 = Author.objects.create(name='a3', num=3003, extra=cls.e2)\n         cls.a4 = Author.objects.create(name='a4', num=4004, extra=cls.e2)\n \n         cls.time1 = datetime.datetime(2007, 12, 19, 22, 25, 0)\n@@ -1198,6 +1198,24 @@ class Queries1Tests(TestCase):\n             'mixed_case_field_category__CaTeGoRy',\n             'mixed_case_db_column_category__category',\n         )\n+\n+    def test_filter_with_filterable_false(self):\n+        # Assuming `ExtraInfo` has an attribute `filterable` and setting it to False\n+        self.e2.filterable = False\n+        self.e2.save()\n+\n+        # Filtering should still work without raising NotSupportedError\n+        authors = Author.objects.filter(extra=self.e2)\n+        self.assertSequenceEqual(authors, [self.a3, self.a4])\n+\n+    def test_filter_with_filterable_true(self):\n+        # Setting `filterable` to True and testing\n+        self.e2.filterable = True\n+        self.e2.save()\n+\n+        # Filtering should work correctly\n+        authors = Author.objects.filter(extra=self.e2)\n+        self.assertSequenceEqual(authors, [self.a3, self.a4])\n         self.assertTrue(qs.first())\n \n     def test_excluded_intermediary_m2m_table_joined(self):\n@@ -1205,11 +1223,47 @@ class Queries1Tests(TestCase):\n             Note.objects.filter(~Q(tag__annotation__name=F('note'))),\n             [self.n1, self.n2, self.n3],\n         )\n+\n+    def test_filter_with_filterable_false(self):\n+        # Assuming `ExtraInfo` has an attribute `filterable` and setting it to False\n+        self.e2.filterable = False\n+        self.e2.save()\n+\n+        # Filtering should still work without raising NotSupportedError\n+        authors = Author.objects.filter(extra=self.e2)\n+        self.assertSequenceEqual(authors, [self.a3, self.a4])\n+\n+    def test_filter_with_filterable_true(self):\n+        # Setting `filterable` to True and testing\n+        self.e2.filterable = True\n+        self.e2.save()\n+\n+        # Filtering should work correctly\n+        authors = Author.objects.filter(extra=self.e2)\n+        self.assertSequenceEqual(authors, [self.a3, self.a4])\n         self.assertSequenceEqual(\n             Note.objects.filter(tag__annotation__name='a1').filter(~Q(tag__annotation__name=F('note'))),\n             [],\n         )\n \n+    def test_filter_with_filterable_false(self):\n+        # Assuming `ExtraInfo` has an attribute `filterable` and setting it to False\n+        self.e2.filterable = False\n+        self.e2.save()\n+\n+        # Filtering should still work without raising NotSupportedError\n+        authors = Author.objects.filter(extra=self.e2)\n+        self.assertSequenceEqual(authors, [self.a3, self.a4])\n+\n+    def test_filter_with_filterable_true(self):\n+        # Setting `filterable` to True and testing\n+        self.e2.filterable = True\n+        self.e2.save()\n+\n+        # Filtering should work correctly\n+        authors = Author.objects.filter(extra=self.e2)\n+        self.assertSequenceEqual(authors, [self.a3, self.a4])\n+\n \n class Queries2Tests(TestCase):\n     @classmethod\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..b0847c6 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,6 +343,39 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_self_referential_fk_order_by(self):\n+        # Create authors with a self-referential foreign key relationship\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\", editor=author_1)\n+        article_1 = Article.objects.create(headline=\"Article 1\", author=author_1, pub_date=\"2023-10-10\")\n+        article_2 = Article.objects.create(headline=\"Article 2\", author=author_2, pub_date=\"2023-10-11\")\n+\n+        # Test ordering by self-referential foreign key\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline'),\n+        )\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline'),\n+        )\n+\n+    def test_self_referential_fk_desc_order_by(self):\n+        # Create authors with a self-referential foreign key relationship\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\", editor=author_1)\n+        article_1 = Article.objects.create(headline=\"Article 1\", author=author_1, pub_date=\"2023-10-10\")\n+        article_2 = Article.objects.create(headline=\"Article 2\", author=author_2, pub_date=\"2023-10-11\")\n+\n+        # Test ordering by self-referential foreign key in descending order\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__editor_id'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline'),\n+        )\n+\n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n@@ -353,6 +386,39 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n+\n+    def test_self_referential_fk_order_by(self):\n+        # Create authors with a self-referential foreign key relationship\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\", editor=author_1)\n+        article_1 = Article.objects.create(headline=\"Article 1\", author=author_1, pub_date=\"2023-10-10\")\n+        article_2 = Article.objects.create(headline=\"Article 2\", author=author_2, pub_date=\"2023-10-11\")\n+\n+        # Test ordering by self-referential foreign key\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline'),\n+        )\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline'),\n+        )\n+\n+    def test_self_referential_fk_desc_order_by(self):\n+        # Create authors with a self-referential foreign key relationship\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\", editor=author_1)\n+        article_1 = Article.objects.create(headline=\"Article 1\", author=author_1, pub_date=\"2023-10-10\")\n+        article_2 = Article.objects.create(headline=\"Article 2\", author=author_2, pub_date=\"2023-10-11\")\n+\n+        # Test ordering by self-referential foreign key in descending order\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__editor_id'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline'),\n+        )\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline').asc()), [\n                 \"Article 1\",\n",
  "django__django-13089": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex e11856f..ead4563 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -617,8 +617,34 @@ class BaseCacheTests:\n \n     def test_cull(self):\n         self._perform_cull_test('cull', 50, 29)\n+    \n+    def test_cull_no_result(self):\n+        \"\"\"\n+        Test that the _cull method handles the case where the cursor doesn't\n+        return any data safely.\n+        \"\"\"\n+        try:\n+            cull_cache = caches['cull']\n+        except InvalidCacheBackendError:\n+            self.skipTest(\"Culling isn't implemented.\")\n \n-    def test_zero_cull(self):\n+        old_max_entries = cull_cache._max_entries\n+        cull_cache._max_entries = 1  # Set max entries low to trigger culling easily.\n+\n+        try:\n+            with connections['default'].cursor() as cursor:\n+                # Simulate an empty result set from the SQL that culls cache keys.\n+                cursor.execute(\"DELETE FROM %s\" % cull_cache._table)\n+                cursor.execute(\"INSERT INTO %s (cache_key, value, expires) VALUES ('key1', 'value1', CURRENT_TIMESTAMP + interval '1 hour')\" % cull_cache._table)\n+                cursor.execute(\"INSERT INTO %s (cache_key, value, expires) VALUES ('key2', 'value2', CURRENT_TIMESTAMP + interval '1 hour')\" % cull_cache._table)\n+\n+            # Attempt to set a key to force a cull operation\n+            cull_cache.set('force_cull', 'value', 1000)\n+            # Ensure the key is set\n+            self.assertIs(cull_cache.has_key('force_cull'), True)\n+\n+        finally:\n+            cull_cache._max_entries = old_max_entries\n         self._perform_cull_test('zero_cull', 50, 19)\n \n     def _perform_invalid_key_test(self, key, expected_warning):\n",
  "django__django-13109": "diff --git a/tests/model_forms/models.py b/tests/model_forms/models.py\nindex ff8ad74..9fb6662 100644\n--- a/tests/model_forms/models.py\n+++ b/tests/model_forms/models.py\n@@ -28,6 +28,23 @@ class Category(models.Model):\n         return self.__str__()\n \n \n+from django.db import models\n+from django.core.exceptions import ValidationError\n+from django import forms\n+\n+class ArticleManager(models.Manager):\n+    def get_queryset(self):\n+        qs = super().get_queryset()\n+        return qs.filter(archived=False)\n+\n+class Article(models.Model):\n+    title = models.CharField(max_length=100)\n+    archived = models.BooleanField(default=False)\n+    objects = ArticleManager()\n+\n+class FavoriteArticle(models.Model):\n+    article = models.ForeignKey(Article, on_delete=models.CASCADE)\n+\n class Writer(models.Model):\n     name = models.CharField(max_length=50, help_text='Use both first and last names.')\n \n",
  "django__django-13112": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 081eff8..b3e6d40 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -867,6 +867,38 @@ class StateTests(SimpleTestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             project_state.apps\n \n+    def test_mixed_case_app_label_reference(self):\n+        \"\"\"\n+        Test handling of models with mixed-case app labels to ensure\n+        ForeignKey and ManyToManyField can resolve references correctly.\n+        \"\"\"\n+        new_apps = Apps()\n+\n+        class Publisher(models.Model):\n+            class Meta:\n+                app_label = 'MiXeDCasE_App'\n+                apps = new_apps\n+\n+        class Author(models.Model):\n+            publisher = models.ForeignKey(Publisher, models.CASCADE)\n+\n+            class Meta:\n+                app_label = 'MiXeDCasE_App'\n+                apps = new_apps\n+\n+        class Book(models.Model):\n+            authors = models.ManyToManyField(Author)\n+\n+            class Meta:\n+                app_label = 'MiXeDCasE_App'\n+                apps = new_apps\n+\n+        project_state = ProjectState()\n+        project_state.add_model(ModelState.from_model(Publisher))\n+        project_state.add_model(ModelState.from_model(Author))\n+        project_state.add_model(ModelState.from_model(Book))\n+        self.assertEqual(len(project_state.apps.get_models()), 3)\n+\n     def test_real_apps(self):\n         \"\"\"\n         Including real apps can resolve dangling FK errors.\n",
  "django__django-13121": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex a684d7e..370fa39 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1210,6 +1210,16 @@ class ExpressionOperatorTests(TestCase):\n         self.assertEqual(Number.objects.get(pk=self.n.pk).integer, 1764)\n         self.assertEqual(Number.objects.get(pk=self.n.pk).float, Approximate(61.02, places=2))\n \n+    @unittest.skipIf(connection.vendor not in ('sqlite', 'mysql'), \"This test is specific to SQLite and MySQL.\")\n+    def test_duration_expression_with_timedelta(self):\n+        from django.db.models import F\n+        from datetime import timedelta\n+        Experiment.objects.create(estimated_time=timedelta(days=1))\n+        delta = timedelta(days=1)\n+        qs = Experiment.objects.annotate(duration=F('estimated_time') + delta)\n+        for obj in qs:\n+            self.assertEqual(obj.duration, obj.estimated_time + delta)\n+\n     @unittest.skipIf(connection.vendor == 'oracle', \"Oracle doesn't support bitwise XOR.\")\n     def test_lefthand_bitwise_xor(self):\n         Number.objects.update(integer=F('integer').bitxor(48))\n",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..9b41d9d 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1627,7 +1627,28 @@ class FTimeDeltaTests(TestCase):\n         for e in qs:\n             self.assertEqual(e.delta, delta)\n \n-    def test_duration_with_datetime(self):\n+    @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_datetime_subtraction_without_expression_wrapper(self):\n+        # Create some experiments with specific start and end times\n+        Experiment.objects.create(\n+            name='e1', start=datetime.datetime(2023, 1, 1, 10, 0, 0), end=datetime.datetime(2023, 1, 1, 12, 0, 0)\n+        )\n+        Experiment.objects.create(\n+            name='e2', start=datetime.datetime(2023, 1, 2, 14, 30, 0), end=datetime.datetime(2023, 1, 2, 14, 45, 0)\n+        )\n+        \n+        # Annotate with direct subtraction\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+\n+        # Test that deltas are calculated correctly without ExpressionWrapper\n+        expected_deltas = {\n+            'e1': datetime.timedelta(hours=2),\n+            'e2': datetime.timedelta(minutes=15),\n+        }\n+        for obj in queryset:\n+            self.assertEqual(obj.delta, expected_deltas[obj.name])\n         # Exclude e1 which has very high precision so we can test this on all\n         # backends regardless of whether or not it supports\n         # microsecond_precision.\n",
  "django__django-13158": "",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..10ec359 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -34,6 +34,7 @@ from django.test import (\n     RequestFactory, TestCase, ignore_warnings, override_settings,\n )\n from django.utils import timezone\n+from django.utils.deprecation import RemovedInDjango40Warning\n \n from .models import SessionStore as CustomDatabaseSession\n \n@@ -323,7 +324,20 @@ class SessionTestsMixin:\n             {'a test key': 'a test value'},\n         )\n \n-    def test_decode_failure_logged_to_security(self):\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    @override_settings(DEFAULT_HASHING_ALGORITHM='sha1')\n+    def test_default_hashing_algorithm_legacy_decode(self):\n+        data = {'a test key': 'a test value'}\n+        encoded = self.session.encode(data)\n+        self.assertEqual(self.session._legacy_decode(encoded), data)\n+\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    @override_settings(DEFAULT_HASHING_ALGORITHM='sha1')\n+    def test_legacy_decode_with_corrupted_data(self):\n+        # Test how the _legacy_decode handles corrupted session data\n+        corrupted_data = 'invalid:session:data'\n+        result = self.session._legacy_decode(corrupted_data)\n+        self.assertEqual(result, {})\n         bad_encode = base64.b64encode(b'flaskdj:alkdjf').decode('ascii')\n         with self.assertLogs('django.security.SuspiciousSession', 'WARNING') as cm:\n             self.assertEqual({}, self.session.decode(bad_encode))\n",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..1fc570d 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -8,6 +8,8 @@ from django.test import (\n from django.test.utils import require_jinja2\n from django.urls import resolve\n from django.utils.deprecation import RemovedInDjango40Warning\n+from django.shortcuts import get_object_or_404\n+from .models import Artist\n from django.views.generic import RedirectView, TemplateView, View\n \n from . import views\n@@ -571,6 +573,33 @@ class SingleObjectTemplateResponseMixinTest(SimpleTestCase):\n \n \n @override_settings(ROOT_URLCONF='generic_views.urls')\n+class OfferViewTests(TestCase):\n+    rf = RequestFactory()\n+\n+    def test_offer_view_with_simple_lazy_object(self):\n+        # Create an artist as a stand-in for the Account model\n+        artist = Artist.objects.create(name='Offer Artist')\n+        # Mock request with OfferView\n+        request = self.rf.get('/offers/offer-artist/')\n+        \n+        # Manually resolving the SimpleLazyObject in kwargs\n+        response = OfferView.as_view()(request, offer_slug=str(artist.name))\n+        \n+        # Check if the artist is correctly retrieved\n+        self.assertEqual(response.context_data['offer'].name, artist.name)\n+\n+    def test_offer_view_with_implicit_conversion(self):\n+        # Create an artist as a stand-in for the Account model\n+        artist = Artist.objects.create(name='Implicit Offer Artist')\n+        # Mock request with OfferView\n+        request = self.rf.get('/offers/implicit-offer-artist/')\n+        \n+        # Assume that kwargs.get() returns a SimpleLazyObject.\n+        # Directly pass that object without string conversion to test the real behavior.\n+        response = OfferView.as_view()(request, offer_slug=artist.name)\n+        \n+        # Check if the artist is correctly retrieved, should fail if issue is not fixed\n+        self.assertEqual(response.context_data['offer'].name, artist.name)\n class DeprecationTests(SimpleTestCase):\n     @ignore_warnings(category=RemovedInDjango40Warning)\n     def test_template_params(self):\n",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..e733f27 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -17,6 +17,7 @@ from django.forms.models import (\n from django.template import Context, Template\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n \n+from django.test.utils import isolate_apps\n from .models import (\n     Article, ArticleStatus, Author, Author1, Award, BetterWriter, BigInt, Book,\n     Category, Character, Colour, ColourfulItem, CustomErrorMessage, CustomFF,\n@@ -2819,7 +2820,66 @@ class LimitChoicesToTests(TestCase):\n         fields = fields_for_model(StumpJoke, ['has_fooled_today'])\n         self.assertSequenceEqual(fields['has_fooled_today'].queryset, [self.threepwood])\n \n-    def test_callable_called_each_time_form_is_instantiated(self):\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        threepwood = Character.objects.create(username=\"Threepwood\", last_action=\"2023-10-10\")\n+        marley = Character.objects.create(username=\"Marley\", last_action=\"2023-10-10\")\n+\n+        joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=marley)\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=marley)\n+\n+        joke1.has_fooled_today.add(marley, threepwood)\n+        joke2.has_fooled_today.add(marley)\n+        joke3.has_fooled_today.add(marley, threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [marley, threepwood],\n+        )\n         field = StumpJokeForm.base_fields['most_recently_fooled']\n         with mock.patch.object(field, 'limit_choices_to') as today_callable_dict:\n             StumpJokeForm()\n",
  "django__django-13343": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex a5ab3a0..0d5942c 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -29,7 +29,7 @@ from django.test.utils import requires_tz_support\n from django.urls import NoReverseMatch, reverse_lazy\n from django.utils import timezone\n \n-from .models import Storage, temp_storage, temp_storage_location\n+from .models import Storage, temp_storage, temp_storage_location, callable_storage\n \n FILE_SUFFIX_REGEX = '[A-Za-z0-9]{7}'\n \n@@ -65,8 +65,24 @@ class GetStorageClassTests(SimpleTestCase):\n         with self.assertRaisesMessage(ImportError, \"No module named 'django.core.files.nonexistent_storage'\"):\n             get_storage_class('django.core.files.nonexistent_storage.NonexistentStorage')\n \n+class CallableStorageDeconstructionTests(TestCase):\n \n-class FileSystemStorageTests(unittest.TestCase):\n+    def test_deconstruction_returns_callable(self):\n+        \"\"\"Ensure deconstruction returns the original callable, not the evaluated value.\"\"\"\n+        obj = Storage()\n+        _, _, kwargs = obj._meta.get_field('storage_callable').deconstruct()\n+        storage = kwargs['storage']\n+        self.assertIs(storage, callable_storage)\n+\n+    def test_storage_not_evaluated_on_deconstruction(self):\n+        \"\"\"Ensure the callable storage is not evaluated during deconstruction.\"\"\"\n+        def dummy_callable():\n+            raise Exception(\"Callable should not be evaluated during deconstruction.\")\n+\n+        obj = Storage(storage_callable=dummy_callable)\n+        _, _, kwargs = obj._meta.get_field('storage_callable').deconstruct()\n+        storage = kwargs['storage']\n+        self.assertIs(storage, dummy_callable)\n \n     def test_deconstruction(self):\n         path, args, kwargs = temp_storage.deconstruct()\n",
  "django__django-13346": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex b918d5c..fa1cce1 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -623,7 +623,30 @@ class TestQuerying(TestCase):\n                     expected,\n                 )\n \n-    def test_key_iexact(self):\n+    def test_key_in_jsonfield(self):\n+        # Test case for the issue where __in lookup doesn't work on key transforms for JSONField\n+        # Expected to fail before the fix and pass after the fix\n+        objs = [\n+            NullableJSONModel.objects.create(value={'key': 0}),\n+            NullableJSONModel.objects.create(value={'key': 1}),\n+            NullableJSONModel.objects.create(value={'key': 2}),\n+            NullableJSONModel.objects.create(value={'key': 0}),\n+        ]\n+\n+        tests = [\n+            ('value__key__in', [0], [objs[0], objs[3]]),\n+            ('value__key__in', [1, 2], [objs[1], objs[2]]),\n+            ('value__key__in', [0, 2], [objs[0], objs[2], objs[3]]),\n+            ('value__key__in', [], []),\n+            ('value__key__in', [3], []),\n+        ]\n+\n+        for lookup, value, expected in tests:\n+            with self.subTest(lookup=lookup, value=value):\n+                self.assertSequenceEqual(\n+                    NullableJSONModel.objects.filter(**{lookup: value}),\n+                    expected,\n+                )\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__iexact='BaR').exists(), True)\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__iexact='\"BaR\"').exists(), False)\n \n",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..f61ca36 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -1121,6 +1121,10 @@ class DateFunctionWithTimeZoneTests(DateFunctionTests):\n         melb = pytz.timezone('Australia/Melbourne')\n         pacific = pytz.timezone('US/Pacific')\n \n+        from django.db.models import Count\n+        import pytz\n+        from datetime import datetime\n+\n         model = DTModel.objects.annotate(\n             melb_year=TruncYear('start_datetime', tzinfo=melb),\n             pacific_year=TruncYear('start_datetime', tzinfo=pacific),\n@@ -1133,6 +1137,54 @@ class DateFunctionWithTimeZoneTests(DateFunctionTests):\n         self.assertEqual(model.melb_year.year, 2016)\n         self.assertEqual(model.pacific_year.year, 2015)\n \n+    def test_truncdate_with_tzinfo(self):\n+        start_datetime = datetime(2023, 3, 10, 3, 45)\n+        start_datetime = timezone.make_aware(start_datetime, timezone=pytz.UTC)\n+\n+        new_york_tz = pytz.timezone(\"America/New_York\")\n+        london_tz = pytz.timezone(\"Europe/London\")\n+\n+        self.create_model(start_datetime, start_datetime)\n+\n+        from django.db.models import Count\n+        import pytz\n+        from datetime import datetime\n+\n+        model = DTModel.objects.annotate(\n+            new_york_date=TruncDate('start_datetime', tzinfo=new_york_tz),\n+            london_date=TruncDate('start_datetime', tzinfo=london_tz),\n+        ).get()\n+\n+        expected_new_york_date = start_datetime.astimezone(new_york_tz).date()\n+        expected_london_date = start_datetime.astimezone(london_tz).date()\n+\n+        self.assertEqual(model.new_york_date, expected_new_york_date)\n+        self.assertEqual(model.london_date, expected_london_date)\n+\n+    def test_trunctime_with_tzinfo(self):\n+        start_datetime = datetime(2023, 3, 10, 3, 45)\n+        start_datetime = timezone.make_aware(start_datetime, timezone=pytz.UTC)\n+\n+        new_york_tz = pytz.timezone(\"America/New_York\")\n+        london_tz = pytz.timezone(\"Europe/London\")\n+\n+        self.create_model(start_datetime, start_datetime)\n+\n+        from django.db.models import Count\n+        import pytz\n+        from datetime import datetime\n+\n+        model = DTModel.objects.annotate(\n+            new_york_time=TruncTime('start_datetime', tzinfo=new_york_tz),\n+            london_time=TruncTime('start_datetime', tzinfo=london_tz),\n+        ).get()\n+\n+        expected_new_york_time = start_datetime.astimezone(new_york_tz).time()\n+        expected_london_time = start_datetime.astimezone(london_tz).time()\n+\n+        self.assertEqual(model.new_york_time, expected_new_york_time)\n+        self.assertEqual(model.london_time, expected_london_time)\n+\n     def test_trunc_ambiguous_and_invalid_times(self):\n         sao = pytz.timezone('America/Sao_Paulo')\n         utc = pytz.timezone('UTC')\n",
  "django__django-13401": "",
  "django__django-13410": "",
  "django__django-13417": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 8130de5..2d61f59 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2084,6 +2084,23 @@ class QuerysetOrderedTests(unittest.TestCase):\n         self.assertIs(qs.ordered, False)\n         self.assertIs(qs.order_by('num_notes').ordered, True)\n \n+    def test_annotated_group_by_ordered(self):\n+        # This ensures that when using annotate without order_by, the queryset is not marked as ordered.\n+        qs = Annotation.objects.annotate(num_notes=Count('notes'))\n+        self.assertIs(qs.ordered, False)\n+        # Explicit ordering should set the ordered property to True.\n+        qs = qs.order_by('num_notes')\n+        self.assertIs(qs.ordered, True)\n+\n+    def test_group_by_with_default_ordering(self):\n+        # Create a queryset with a model that has a default ordering in its Meta class.\n+        # The queryset should not be marked as ordered if it's using GROUP BY without explicit order_by.\n+        qs = Annotation.objects.annotate(num_notes=Count('notes')).values('name')\n+        self.assertIs(qs.ordered, False)\n+        # Applying an explicit order_by should make the queryset ordered.\n+        qs = qs.order_by('name')\n+        self.assertIs(qs.ordered, True)\n+\n \n @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n class SubqueryTests(TestCase):\n",
  "django__django-13516": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 89f7c38..c44907c 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -341,8 +341,21 @@ class CommandTests(SimpleTestCase):\n         parser = BaseCommand().create_parser('prog_name', 'subcommand', epilog=epilog)\n         self.assertEqual(parser.epilog, epilog)\n \n+from django.core.management import call_command\n+from django.test import TestCase\n+from io import StringIO\n+from unittest import mock\n \n-class CommandRunTests(AdminScriptTestCase):\n+class CommandFlushTests(TestCase):\n+    def test_output_flush_during_migrate(self):\n+        # Simulate long-running migration command\n+        out = StringIO()\n+        with mock.patch('django.db.migrations.executor.MigrationExecutor.progress_callback') as mock_callback:\n+            call_command('migrate', stdout=out)\n+            # Simulate progress callback being called with migration steps\n+            mock_callback(\"apply_start\", mock.Mock(app_label='myapp', name='0002_auto_20200817_1030'), False)\n+            self.assertIn(\"Applying myapp.0002_auto_20200817_1030...\", out.getvalue())\n+            self.assertTrue(mock_callback.called)\n     \"\"\"\n     Tests that need to run by simulating the command line, not by call_command.\n     \"\"\"\n",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..2fcf262 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,10 +1,12 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n-from django.test.utils import ignore_warnings\n+from .models.with_custom_email_field import CustomEmailField\n+from .models import CustomEmailField, IntegerUsernameUser\n from django.utils.deprecation import RemovedInDjango40Warning\n \n \n@@ -37,7 +39,26 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n-    def test_timeout(self):\n+    def test_token_with_different_email(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                self.assertIs(p0.check_token(user, tk1), False)\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n         # the value of 'now'.\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..4913ae8 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,9 +1,11 @@\n+\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n from django.contrib.auth.models import AbstractBaseUser\n from django.core import checks\n from django.db import models\n+from django.db.models import Q, UniqueConstraint\n from django.test import (\n     SimpleTestCase, override_settings, override_system_checks,\n )\n@@ -85,7 +87,46 @@ class UserModelChecksTests(SimpleTestCase):\n                 ),\n             ])\n \n-    @override_settings(AUTH_USER_MODEL='auth_tests.BadUser')\n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserNonUniqueConstraint')\n+    def test_username_with_non_unique_constraint(self):\n+        class CustomUserNonUniqueConstraint(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(\n+                        fields=['username'],\n+                        name='username_non_unique',\n+                        condition=Q(password__isnull=True),\n+                    ),\n+                ]\n+\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [\n+            checks.Error(\n+                \"'CustomUserNonUniqueConstraint.username' must be unique \"\n+                \"because it is named as the 'USERNAME_FIELD'.\",\n+                obj=CustomUserNonUniqueConstraint,\n+                id='auth.E003',\n+            ),\n+        ])\n+        \n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserNoConstraints')\n+    def test_username_no_constraints(self):\n+        class CustomUserNoConstraints(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [\n+            checks.Error(\n+                \"'CustomUserNoConstraints.username' must be unique because \"\n+                \"it is named as the 'USERNAME_FIELD'.\",\n+                obj=CustomUserNoConstraints,\n+                id='auth.E003',\n+            ),\n+        ])\n     def test_is_anonymous_authenticated_methods(self):\n         \"\"\"\n         <User Model>.is_anonymous/is_authenticated must not be methods.\n",
  "django__django-13569": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex a44d0b6..9d514a0 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1314,4 +1314,11 @@ class AggregateTestCase(TestCase):\n         # non-multivalued JOINs, see Col.possibly_multivalued (refs #31150):\n         # with self.assertNumQueries(1) as ctx:\n         #     self.assertSequenceEqual(books_qs, [book])\n-        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n+        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n+\n+    def test_aggregation_random_ordering_with_related(self):\n+        \"\"\"Random() is not included in the GROUP BY when used for ordering with related objects.\"\"\"\n+        t = Thing.objects.create()\n+        rs = [Related.objects.create(thing=t) for _ in range(2)]\n+        things = Thing.objects.annotate(rc=Count('related')).order_by('?').values('id', 'rc')\n+        self.assertEqual(list(things), [{'id': t.id, 'rc': 2}])\n",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..35e7fab 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -815,7 +816,28 @@ class IterableLookupInnerExpressionsTests(TestCase):\n         Company.objects.create(name='5060 Ltd', num_employees=50, num_chairs=60, ceo=ceo)\n         Company.objects.create(name='99300 Ltd', num_employees=99, num_chairs=300, ceo=ceo)\n \n-    def test_in_lookup_allows_F_expressions_and_expressions_for_integers(self):\n+    def test_range_lookup_namedtuple(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n+    def test_range_lookup_namedtuple_edge_case(self):\n+        # Testing with an edge case where minimum equals maximum\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=99, maximum=99),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n+    def test_range_lookup_namedtuple_large_range(self):\n+        # Testing with a large range to ensure no errors occur\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=1, maximum=1000),\n+        )\n+        self.assertIn(self.c5, qs)\n         # __in lookups can use F() expressions for integers.\n         queryset = Company.objects.filter(num_employees__in=([F('num_chairs') - 10]))\n         self.assertQuerysetEqual(queryset, ['<Company: 5060 Ltd>'], ordered=False)\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..5b43360 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -10,6 +10,19 @@ import socket\n import subprocess\n import sys\n import tempfile\n+class ExecuteFromCommandLineTest(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Verify that the program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n import unittest\n from io import StringIO\n from unittest import mock\n@@ -19,18 +32,30 @@ from django.conf import settings\n from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n )\n+from django.core.management import execute_from_command_line\n+from django.test.utils import captured_stderr, captured_stdout\n+from unittest import mock\n from django.core.management.commands.loaddata import Command as LoaddataCommand\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n )\n+from django.core.management import execute_from_command_line\n+from django.test.utils import captured_stderr, captured_stdout\n+from unittest import mock\n from django.core.management.commands.testserver import (\n     Command as TestserverCommand,\n )\n+from django.core.management import execute_from_command_line\n+from django.test.utils import captured_stderr, captured_stdout\n+from unittest import mock\n from django.db import ConnectionHandler, connection\n from django.db.migrations.recorder import MigrationRecorder\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n+from django.core.management import execute_from_command_line\n+from django.test.utils import captured_stderr, captured_stdout\n+from unittest import mock\n \n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n \n",
  "django__django-13670": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 6f0b13f..e2f1a99 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -1,3 +1,4 @@\n+\n from datetime import date, datetime\n \n from django.test import SimpleTestCase, override_settings\n@@ -19,7 +20,23 @@ class DateFormatTests(SimpleTestCase):\n     def tearDown(self):\n         translation.activate(self._orig_lang)\n \n-    def test_date(self):\n+    def test_year_before_1000(self):\n+        tests = [\n+            (476, '76'),\n+            (42, '42'),\n+            (4, '04'),\n+            (999, '99'),\n+            (123, '23'),\n+            (12, '12'),\n+            (1, '01'),\n+            (0, '00'),\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n         d = date(2009, 5, 16)\n         self.assertEqual(date.fromtimestamp(int(format(d, 'U'))), d)\n \n@@ -164,4 +181,4 @@ class DateFormatTests(SimpleTestCase):\n             self.assertEqual(\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+            )\n",
  "django__django-13741": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex ca66cd5..0692df4 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1020,7 +1020,9 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n-    def test_readonly_field_has_changed(self):\n+    def test_readonly_password_hash_field_is_disabled(self):\n+        field = ReadOnlyPasswordHashField()\n+        self.assertIs(field.disabled, True)\n         field = ReadOnlyPasswordHashField()\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n \n",
  "django__django-13786": "",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..8018b0b 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,7 +1,9 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n from django.test import SimpleTestCase\n+from django.utils.translation import gettext_lazy, lazy\n \n from ..utils import setup\n \n@@ -41,7 +43,51 @@ class AddTests(SimpleTestCase):\n         output = self.engine.render_to_string('add06', {'t1': (3, 4), 't2': (1, 2)})\n         self.assertEqual(output, '(3, 4, 1, 2)')\n \n-    @setup({'add07': '{{ d|add:t }}'})\n+    @setup({'add08': '{{ s1|add:lazy_s2 }}'})\n+    def test_add08(self):\n+        output = self.engine.render_to_string(\n+            'add08',\n+            {'s1': 'string', 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    @setup({'add09': '{{ lazy_s1|add:lazy_s2 }}'})\n+    def test_add09(self):\n+        output = self.engine.render_to_string(\n+            'add09',\n+            {'lazy_s1': gettext_lazy('string'), 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    def test_lazy_add(self):\n+        lazy_4 = lazy(lambda: 4, int)\n+        lazy_5 = lazy(lambda: 5, int)\n+        self.assertEqual(lazy_4() + lazy_5(), 9)\n+\n+    @setup({'add10': '{{ s1|add:n }}'})\n+    def test_add10(self):\n+        output = self.engine.render_to_string(\n+            'add10',\n+            {'s1': 'string', 'n': 5},\n+        )\n+        self.assertEqual(output, 'string5')\n+\n+    @setup({'add11': '{{ lazy_s1|add:n }}'})\n+    def test_add11(self):\n+        output = self.engine.render_to_string(\n+            'add11',\n+            {'lazy_s1': gettext_lazy('string'), 'n': 5},\n+        )\n+        self.assertEqual(output, 'string5')\n+\n+    @setup({'add12': '{{ s1|add:lazy_n }}'})\n+    def test_add12(self):\n+        lazy_n = lazy(lambda: 5, int)\n+        output = self.engine.render_to_string(\n+            'add12',\n+            {'s1': 'string', 'lazy_n': lazy_n},\n+        )\n+        self.assertEqual(output, 'string5')\n     def test_add07(self):\n         output = self.engine.render_to_string('add07', {'d': date(2000, 1, 1), 't': timedelta(10)})\n         self.assertEqual(output, 'Jan. 11, 2000')\n",
  "django__django-13807": "diff --git a/tests/backends/tests.py b/tests/backends/tests.py\nindex 0aee2b6..781ed5b 100644\n--- a/tests/backends/tests.py\n+++ b/tests/backends/tests.py\n@@ -18,6 +18,8 @@ from django.test import (\n     skipUnlessDBFeature,\n )\n \n+from django.core.management import call_command\n+from django.db import connection, IntegrityError, transaction\n from .models import (\n     Article, Object, ObjectReference, Person, Post, RawData, Reporter,\n     ReporterProxy, SchoolClass, Square,\n@@ -625,8 +627,21 @@ class FkConstraintsTests(TransactionTestCase):\n                     connection.check_constraints()\n             transaction.set_rollback(True)\n \n+class LoaddataSQLKeywordTest(TransactionTestCase):\n+    available_apps = ['backends']\n+\n+    def setUp(self):\n+        # Set up any necessary data for the tests\n+        self.reporter = Reporter.objects.create(name=\"Test Reporter\")\n \n-class ThreadTests(TransactionTestCase):\n+    def test_loaddata_with_sql_keyword_table_name(self):\n+        # Use a fixture with a SQL keyword as the table name\n+        # Assume 'order_fixture.json' contains the necessary JSON data for SQLKeywordsModel\n+        with transaction.atomic():\n+            try:\n+                call_command('loaddata', 'order_fixture.json')\n+            except Exception as e:\n+                self.fail(f\"loaddata raised an exception: {e}\")\n \n     available_apps = ['backends']\n \n",
  "django__django-13809": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex d88ea78..80f1685 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1343,7 +1343,28 @@ class ManageRunserverMigrationWarning(TestCase):\n         )\n \n \n-class ManageRunserverEmptyAllowedHosts(AdminScriptTestCase):\n+from django.core.management import call_command\n+from django.core.management.commands.runserver import Command as RunserverCommand\n+from unittest import mock\n+from io import StringIO\n+\n+class ManageRunserverSkipChecksTests(TestCase):\n+\n+    def setUp(self):\n+        self.output = StringIO()\n+        self.runserver_command = RunserverCommand(stdout=self.output)\n+\n+    @mock.patch('django.core.management.base.BaseCommand.check')\n+    def test_runserver_with_skip_checks(self, mocked_check):\n+        call_command('runserver', use_reloader=False, skip_checks=True, stdout=self.output)\n+        self.assertNotIn('Performing system checks...', self.output.getvalue())\n+        mocked_check.assert_not_called()\n+\n+    @mock.patch('django.core.management.base.BaseCommand.check')\n+    def test_runserver_without_skip_checks(self, mocked_check):\n+        call_command('runserver', use_reloader=False, skip_checks=False, stdout=self.output)\n+        self.assertIn('Performing system checks...', self.output.getvalue())\n+        mocked_check.assert_called()\n     def setUp(self):\n         super().setUp()\n         self.write_settings('settings.py', sdict={\n",
  "django__django-13810": "diff --git a/tests/middleware_exceptions/tests.py b/tests/middleware_exceptions/tests.py\nindex bb82f7d..07a0877 100644\n--- a/tests/middleware_exceptions/tests.py\n+++ b/tests/middleware_exceptions/tests.py\n@@ -1,3 +1,6 @@\n+\n+import asyncio\n+\n from django.conf import settings\n from django.core.exceptions import MiddlewareNotUsed\n from django.http import HttpResponse\n@@ -187,6 +190,50 @@ class MiddlewareNotUsedTests(SimpleTestCase):\n     ROOT_URLCONF='middleware_exceptions.urls',\n )\n class MiddlewareSyncAsyncTests(SimpleTestCase):\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.AsyncOnlyMiddleware',\n+    ])\n+    async def test_async_only_middleware_in_chain(self):\n+        \"\"\"\n+        Ensure that the AsyncOnlyMiddleware correctly processes\n+        and doesn't get affected by Sync middleware or MiddlewareNotUsed.\n+        \"\"\"\n+        response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.AsyncOnlyMiddleware',\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+    ])\n+    async def test_mixed_middleware_chain_order_async(self):\n+        \"\"\"\n+        Test behavior of middleware chain when async and sync capable middlewares \n+        are in different order.\n+        \"\"\"\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.middleware.SyncAndAsyncMiddleware adapted.\",\n+        )\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.AsyncOnlyMiddleware',\n+    ])\n+    def test_mixed_middleware_chain_order_sync(self):\n+        \"\"\"\n+        Test behavior of middleware chain when async and sync capable middlewares \n+        are in different order in a synchronous call.\n+        \"\"\"\n+        response = self.client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.PaymentMiddleware',\n     ])\n@@ -194,6 +241,50 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n         response = self.client.get('/middleware_exceptions/view/')\n         self.assertEqual(response.status_code, 402)\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.AsyncOnlyMiddleware',\n+    ])\n+    async def test_async_only_middleware_in_chain(self):\n+        \"\"\"\n+        Ensure that the AsyncOnlyMiddleware correctly processes\n+        and doesn't get affected by Sync middleware or MiddlewareNotUsed.\n+        \"\"\"\n+        response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.AsyncOnlyMiddleware',\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+    ])\n+    async def test_mixed_middleware_chain_order_async(self):\n+        \"\"\"\n+        Test behavior of middleware chain when async and sync capable middlewares \n+        are in different order.\n+        \"\"\"\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.middleware.SyncAndAsyncMiddleware adapted.\",\n+        )\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.AsyncOnlyMiddleware',\n+    ])\n+    def test_mixed_middleware_chain_order_sync(self):\n+        \"\"\"\n+        Test behavior of middleware chain when async and sync capable middlewares \n+        are in different order in a synchronous call.\n+        \"\"\"\n+        response = self.client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.DecoratedPaymentMiddleware',\n     ])\n@@ -201,6 +292,50 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n         response = self.client.get('/middleware_exceptions/view/')\n         self.assertEqual(response.status_code, 402)\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.AsyncOnlyMiddleware',\n+    ])\n+    async def test_async_only_middleware_in_chain(self):\n+        \"\"\"\n+        Ensure that the AsyncOnlyMiddleware correctly processes\n+        and doesn't get affected by Sync middleware or MiddlewareNotUsed.\n+        \"\"\"\n+        response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.AsyncOnlyMiddleware',\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+    ])\n+    async def test_mixed_middleware_chain_order_async(self):\n+        \"\"\"\n+        Test behavior of middleware chain when async and sync capable middlewares \n+        are in different order.\n+        \"\"\"\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.middleware.SyncAndAsyncMiddleware adapted.\",\n+        )\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.AsyncOnlyMiddleware',\n+    ])\n+    def test_mixed_middleware_chain_order_sync(self):\n+        \"\"\"\n+        Test behavior of middleware chain when async and sync capable middlewares \n+        are in different order in a synchronous call.\n+        \"\"\"\n+        response = self.client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.async_payment_middleware',\n     ])\n@@ -215,6 +350,50 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n             \"adapted.\",\n         )\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.AsyncOnlyMiddleware',\n+    ])\n+    async def test_async_only_middleware_in_chain(self):\n+        \"\"\"\n+        Ensure that the AsyncOnlyMiddleware correctly processes\n+        and doesn't get affected by Sync middleware or MiddlewareNotUsed.\n+        \"\"\"\n+        response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.AsyncOnlyMiddleware',\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+    ])\n+    async def test_mixed_middleware_chain_order_async(self):\n+        \"\"\"\n+        Test behavior of middleware chain when async and sync capable middlewares \n+        are in different order.\n+        \"\"\"\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.middleware.SyncAndAsyncMiddleware adapted.\",\n+        )\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.AsyncOnlyMiddleware',\n+    ])\n+    def test_mixed_middleware_chain_order_sync(self):\n+        \"\"\"\n+        Test behavior of middleware chain when async and sync capable middlewares \n+        are in different order in a synchronous call.\n+        \"\"\"\n+        response = self.client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.NotSyncOrAsyncMiddleware',\n     ])\n@@ -227,6 +406,50 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n         with self.assertRaisesMessage(RuntimeError, msg):\n             self.client.get('/middleware_exceptions/view/')\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.AsyncOnlyMiddleware',\n+    ])\n+    async def test_async_only_middleware_in_chain(self):\n+        \"\"\"\n+        Ensure that the AsyncOnlyMiddleware correctly processes\n+        and doesn't get affected by Sync middleware or MiddlewareNotUsed.\n+        \"\"\"\n+        response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.AsyncOnlyMiddleware',\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+    ])\n+    async def test_mixed_middleware_chain_order_async(self):\n+        \"\"\"\n+        Test behavior of middleware chain when async and sync capable middlewares \n+        are in different order.\n+        \"\"\"\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.middleware.SyncAndAsyncMiddleware adapted.\",\n+        )\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.AsyncOnlyMiddleware',\n+    ])\n+    def test_mixed_middleware_chain_order_sync(self):\n+        \"\"\"\n+        Test behavior of middleware chain when async and sync capable middlewares \n+        are in different order in a synchronous call.\n+        \"\"\"\n+        response = self.client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.PaymentMiddleware',\n     ])\n@@ -240,6 +463,50 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n             \"middleware_exceptions.middleware.PaymentMiddleware adapted.\",\n         )\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.AsyncOnlyMiddleware',\n+    ])\n+    async def test_async_only_middleware_in_chain(self):\n+        \"\"\"\n+        Ensure that the AsyncOnlyMiddleware correctly processes\n+        and doesn't get affected by Sync middleware or MiddlewareNotUsed.\n+        \"\"\"\n+        response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.AsyncOnlyMiddleware',\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+    ])\n+    async def test_mixed_middleware_chain_order_async(self):\n+        \"\"\"\n+        Test behavior of middleware chain when async and sync capable middlewares \n+        are in different order.\n+        \"\"\"\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.middleware.SyncAndAsyncMiddleware adapted.\",\n+        )\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.AsyncOnlyMiddleware',\n+    ])\n+    def test_mixed_middleware_chain_order_sync(self):\n+        \"\"\"\n+        Test behavior of middleware chain when async and sync capable middlewares \n+        are in different order in a synchronous call.\n+        \"\"\"\n+        response = self.client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.async_payment_middleware',\n     ])\n@@ -266,6 +533,50 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             self.client.get('/middleware_exceptions/template_response/')\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.AsyncOnlyMiddleware',\n+    ])\n+    async def test_async_only_middleware_in_chain(self):\n+        \"\"\"\n+        Ensure that the AsyncOnlyMiddleware correctly processes\n+        and doesn't get affected by Sync middleware or MiddlewareNotUsed.\n+        \"\"\"\n+        response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.AsyncOnlyMiddleware',\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+    ])\n+    async def test_mixed_middleware_chain_order_async(self):\n+        \"\"\"\n+        Test behavior of middleware chain when async and sync capable middlewares \n+        are in different order.\n+        \"\"\"\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.middleware.SyncAndAsyncMiddleware adapted.\",\n+        )\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.AsyncOnlyMiddleware',\n+    ])\n+    def test_mixed_middleware_chain_order_sync(self):\n+        \"\"\"\n+        Test behavior of middleware chain when async and sync capable middlewares \n+        are in different order in a synchronous call.\n+        \"\"\"\n+        response = self.client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n     ])\n@@ -274,6 +585,50 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n         self.assertEqual(response.content, b'OK')\n         self.assertEqual(response.status_code, 200)\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.AsyncOnlyMiddleware',\n+    ])\n+    async def test_async_only_middleware_in_chain(self):\n+        \"\"\"\n+        Ensure that the AsyncOnlyMiddleware correctly processes\n+        and doesn't get affected by Sync middleware or MiddlewareNotUsed.\n+        \"\"\"\n+        response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.AsyncOnlyMiddleware',\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+    ])\n+    async def test_mixed_middleware_chain_order_async(self):\n+        \"\"\"\n+        Test behavior of middleware chain when async and sync capable middlewares \n+        are in different order.\n+        \"\"\"\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.middleware.SyncAndAsyncMiddleware adapted.\",\n+        )\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.AsyncOnlyMiddleware',\n+    ])\n+    def test_mixed_middleware_chain_order_sync(self):\n+        \"\"\"\n+        Test behavior of middleware chain when async and sync capable middlewares \n+        are in different order in a synchronous call.\n+        \"\"\"\n+        response = self.client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n     ])\n@@ -285,6 +640,50 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n \n @override_settings(ROOT_URLCONF='middleware_exceptions.urls')\n class AsyncMiddlewareTests(SimpleTestCase):\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.AsyncOnlyMiddleware',\n+    ])\n+    async def test_async_only_middleware_in_chain(self):\n+        \"\"\"\n+        Ensure that the AsyncOnlyMiddleware correctly processes\n+        and doesn't get affected by Sync middleware or MiddlewareNotUsed.\n+        \"\"\"\n+        response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.AsyncOnlyMiddleware',\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+    ])\n+    async def test_mixed_middleware_chain_order_async(self):\n+        \"\"\"\n+        Test behavior of middleware chain when async and sync capable middlewares \n+        are in different order.\n+        \"\"\"\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.middleware.SyncAndAsyncMiddleware adapted.\",\n+        )\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.AsyncOnlyMiddleware',\n+    ])\n+    def test_mixed_middleware_chain_order_sync(self):\n+        \"\"\"\n+        Test behavior of middleware chain when async and sync capable middlewares \n+        are in different order in a synchronous call.\n+        \"\"\"\n+        response = self.client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.AsyncTemplateResponseMiddleware',\n     ])\n",
  "django__django-13820": "",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..608ed82 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -9,6 +9,9 @@ from unittest import mock\n \n from django.core.exceptions import ImproperlyConfigured\n from django.db import NotSupportedError, connection, transaction\n+from unittest import mock\n+from django.core.exceptions import ImproperlyConfigured\n+from django.db import connection\n from django.db.models import Aggregate, Avg, CharField, StdDev, Sum, Variance\n from django.db.utils import ConnectionHandler\n from django.test import (\n@@ -36,7 +39,12 @@ class Tests(TestCase):\n                 self.assertRaisesMessage(ImproperlyConfigured, msg):\n             check_sqlite_version()\n \n-    def test_aggregation(self):\n+    def test_check_sqlite_version_3_8_11_1(self):\n+        msg = 'SQLite 3.9.0 or later is required (found 3.8.11.1).'\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 8, 11, 1)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.8.11.1'), \\\n+                self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            check_sqlite_version()\n         \"\"\"Raise NotSupportedError when aggregating on date/time fields.\"\"\"\n         for aggregate in (Sum, Avg, Variance, StdDev):\n             with self.assertRaises(NotSupportedError):\n",
  "django__django-13837": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 10ffa22..d73966c 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -173,6 +173,23 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-Werror', __file__, 'runserver']\n         )\n \n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver']\n+        )\n+\n+    @mock.patch('sys.argv', ['-m', 'pkg_other_than_django', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    @mock.patch.dict(sys.modules, {'__main__': mock.Mock(__spec__=mock.Mock(parent='pkg_other_than_django'))})\n+    def test_run_as_other_package_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'pkg_other_than_django', 'runserver']\n+        )\n+\n     @mock.patch('sys.warnoptions', [])\n     def test_exe_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..afe70f4 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -297,8 +297,18 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['INVALID CHOICE'], f.clean, '4')\n-\n-        # ModelMultipleChoiceField\n+        # Test that ModelChoiceField provides the value of an invalid choice\n+        f_invalid_choice = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            f_invalid_choice.clean,\n+            'invalid',\n+        )\n         e = {\n             'required': 'REQUIRED',\n             'invalid_choice': '%(value)s IS INVALID CHOICE',\n@@ -307,4 +317,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py\nindex 1078928..8031800 100644\n--- a/tests/many_to_one/models.py\n+++ b/tests/many_to_one/models.py\n@@ -63,6 +63,13 @@ class Third(models.Model):\n     third = models.ForeignKey('self', models.SET_NULL, null=True, related_name='child_set')\n \n \n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n+\n+\n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n+\n class Parent(models.Model):\n     name = models.CharField(max_length=20, unique=True)\n     bestchild = models.ForeignKey('Child', models.SET_NULL, null=True, related_name='favored_by')\n",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..6cc397c 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,7 +1,10 @@\n+\n from django.db import IntegrityError, transaction\n from django.test import TestCase, skipIfDBFeature\n \n-from .models import Bar, Business, Employee, Foo\n+from .models import Bar, Business, CustomAutoFieldModel, Employee, Foo\n+from .fields import MyWrapper\n+from django.test import skipUnlessDBFeature\n \n \n class BasicCustomPKTests(TestCase):\n@@ -220,7 +223,21 @@ class CustomPKTests(TestCase):\n         self.assertEqual(f, new_foo),\n         self.assertEqual(f.bar, new_bar)\n \n-    # SQLite lets objects be saved with an empty primary key, even though an\n+    def test_custom_auto_field_create(self):\n+        \"\"\"\n+        Test that MyAutoField correctly uses MyWrapper on object creation.\n+        \"\"\"\n+        obj = CustomAutoFieldModel.objects.create()\n+        self.assertIsInstance(obj.id, MyWrapper)\n+\n+    @skipUnlessDBFeature('can_return_rows_from_bulk_insert')\n+    def test_custom_auto_field_bulk_create(self):\n+        \"\"\"\n+        Test that MyAutoField correctly uses MyWrapper on bulk creation.\n+        \"\"\"\n+        obj = CustomAutoFieldModel()\n+        CustomAutoFieldModel.objects.bulk_create([obj])\n+        self.assertIsInstance(obj.id, MyWrapper)\n     # integer is expected. So we can't check for an error being raised in that\n     # case for SQLite. Remove it from the suite for this next bit.\n     @skipIfDBFeature('supports_unspecified_pk')\n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..4eb8e73 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -792,6 +792,32 @@ class BasicExpressionsTests(TestCase):\n                 output_field=BooleanField(),\n             ),\n         )\n+\n+    def test_commutative_behavior_of_q_and_exists(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+\n+        # Testing commutative property for AND\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(salary__gte=30) & Exists(is_ceo)),\n+            Employee.objects.filter(Exists(is_ceo) & Q(salary__gte=30)),\n+        )\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(salary__lt=15) & Exists(is_poc)),\n+            Employee.objects.filter(Exists(is_poc) & Q(salary__lt=15)),\n+        )\n+\n+        # Testing commutative property for OR\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(salary__gte=30) | Exists(is_ceo)),\n+            Employee.objects.filter(Exists(is_ceo) | Q(salary__gte=30)),\n+        )\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(salary__lt=15) | Exists(is_poc)),\n+            Employee.objects.filter(Exists(is_poc) | Q(salary__lt=15)),\n+        )\n         self.assertCountEqual(qs, [self.example_inc.ceo, self.foobar_ltd.ceo, self.max])\n \n     def test_boolean_expression_combined(self):\n@@ -803,19 +829,123 @@ class BasicExpressionsTests(TestCase):\n             Employee.objects.filter(Exists(is_ceo) | Exists(is_poc)),\n             [self.example_inc.ceo, self.foobar_ltd.ceo, self.max],\n         )\n+\n+    def test_commutative_behavior_of_q_and_exists(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+\n+        # Testing commutative property for AND\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(salary__gte=30) & Exists(is_ceo)),\n+            Employee.objects.filter(Exists(is_ceo) & Q(salary__gte=30)),\n+        )\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(salary__lt=15) & Exists(is_poc)),\n+            Employee.objects.filter(Exists(is_poc) & Q(salary__lt=15)),\n+        )\n+\n+        # Testing commutative property for OR\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(salary__gte=30) | Exists(is_ceo)),\n+            Employee.objects.filter(Exists(is_ceo) | Q(salary__gte=30)),\n+        )\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(salary__lt=15) | Exists(is_poc)),\n+            Employee.objects.filter(Exists(is_poc) | Q(salary__lt=15)),\n+        )\n         self.assertCountEqual(\n             Employee.objects.filter(Exists(is_ceo) & Exists(is_poc)),\n             [self.max],\n         )\n+\n+    def test_commutative_behavior_of_q_and_exists(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+\n+        # Testing commutative property for AND\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(salary__gte=30) & Exists(is_ceo)),\n+            Employee.objects.filter(Exists(is_ceo) & Q(salary__gte=30)),\n+        )\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(salary__lt=15) & Exists(is_poc)),\n+            Employee.objects.filter(Exists(is_poc) & Q(salary__lt=15)),\n+        )\n+\n+        # Testing commutative property for OR\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(salary__gte=30) | Exists(is_ceo)),\n+            Employee.objects.filter(Exists(is_ceo) | Q(salary__gte=30)),\n+        )\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(salary__lt=15) | Exists(is_poc)),\n+            Employee.objects.filter(Exists(is_poc) | Q(salary__lt=15)),\n+        )\n         self.assertCountEqual(\n             Employee.objects.filter(Exists(is_ceo) & Q(salary__gte=30)),\n             [self.max],\n         )\n+\n+    def test_commutative_behavior_of_q_and_exists(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+\n+        # Testing commutative property for AND\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(salary__gte=30) & Exists(is_ceo)),\n+            Employee.objects.filter(Exists(is_ceo) & Q(salary__gte=30)),\n+        )\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(salary__lt=15) & Exists(is_poc)),\n+            Employee.objects.filter(Exists(is_poc) & Q(salary__lt=15)),\n+        )\n+\n+        # Testing commutative property for OR\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(salary__gte=30) | Exists(is_ceo)),\n+            Employee.objects.filter(Exists(is_ceo) | Q(salary__gte=30)),\n+        )\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(salary__lt=15) | Exists(is_poc)),\n+            Employee.objects.filter(Exists(is_poc) | Q(salary__lt=15)),\n+        )\n         self.assertCountEqual(\n             Employee.objects.filter(Exists(is_poc) | Q(salary__lt=15)),\n             [self.example_inc.ceo, self.max],\n         )\n \n+    def test_commutative_behavior_of_q_and_exists(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+\n+        # Testing commutative property for AND\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(salary__gte=30) & Exists(is_ceo)),\n+            Employee.objects.filter(Exists(is_ceo) & Q(salary__gte=30)),\n+        )\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(salary__lt=15) & Exists(is_poc)),\n+            Employee.objects.filter(Exists(is_poc) & Q(salary__lt=15)),\n+        )\n+\n+        # Testing commutative property for OR\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(salary__gte=30) | Exists(is_ceo)),\n+            Employee.objects.filter(Exists(is_ceo) | Q(salary__gte=30)),\n+        )\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(salary__lt=15) | Exists(is_poc)),\n+            Employee.objects.filter(Exists(is_poc) | Q(salary__lt=15)),\n+        )\n+\n \n class IterableLookupInnerExpressionsTests(TestCase):\n     @classmethod\n",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..c0fbc4c 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -204,6 +204,16 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('cached', 'css', 'img', 'window.png'), stats['unmodified'])\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n+    def test_no_duplicate_yields_in_post_process(self):\n+        \"\"\"\n+        Test that no file is yielded multiple times during post_process.\n+        \"\"\"\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(clear=False, dry_run=False, post_process=True)\n+        stats = collectstatic_cmd.collect()\n+        \n+        # Assert no file is yielded more than once\n+        self.assertCountEqual(stats['post_processed'], set(stats['post_processed']))\n \n     def test_css_import_case_insensitive(self):\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n",
  "django__django-14089": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 7fb3d83..51c4a05 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,8 +1,10 @@\n+\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n \n import copy\n+import collections.abc\n import pickle\n \n from django.test import SimpleTestCase\n@@ -18,7 +20,30 @@ class OrderedSetTests(SimpleTestCase):\n         s = OrderedSet([1, 2, 3])\n         self.assertEqual(list(s.dict.keys()), [1, 2, 3])\n \n-    def test_remove(self):\n+    def test_reversed(self):\n+        # Test that an OrderedSet can be reversed successfully\n+        s = OrderedSet([1, 2, 3])\n+        reversed_s = reversed(s)\n+        self.assertIsInstance(reversed_s, collections.abc.Iterator)\n+        self.assertEqual(list(reversed_s), [3, 2, 1])\n+\n+        # Test reversing an empty OrderedSet\n+        s_empty = OrderedSet()\n+        reversed_empty_s = reversed(s_empty)\n+        self.assertIsInstance(reversed_empty_s, collections.abc.Iterator)\n+        self.assertEqual(list(reversed_empty_s), [])\n+\n+        # Test reversing an OrderedSet with one element\n+        s_single = OrderedSet([42])\n+        reversed_single_s = reversed(s_single)\n+        self.assertIsInstance(reversed_single_s, collections.abc.Iterator)\n+        self.assertEqual(list(reversed_single_s), [42])\n+\n+        # Test reversing an OrderedSet with different types of elements\n+        s_mixed = OrderedSet([\"a\", 1, True])\n+        reversed_mixed_s = reversed(s_mixed)\n+        self.assertIsInstance(reversed_mixed_s, collections.abc.Iterator)\n+        self.assertEqual(list(reversed_mixed_s), [True, 1, \"a\"])\n         s = OrderedSet()\n         self.assertEqual(len(s), 0)\n         s.add(1)\n",
  "django__django-14122": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 83089d9..e369898 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n from operator import attrgetter\n \n@@ -311,7 +312,23 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n-    def test_order_by_pk(self):\n+    def test_default_ordering_does_not_affect_group_by(self):\n+        \"\"\"\n+        Ensure that the default Meta.ordering does not affect the GROUP BY clause\n+        in aggregation queries.\n+        \"\"\"\n+        # Assign some articles to authors\n+        Article.objects.exclude(headline='Article 4').update(author=self.author_1)\n+        Article.objects.filter(headline='Article 4').update(author=self.author_2)\n+        \n+        # Perform a group by author and count articles\n+        articles = Article.objects.values('author').annotate(count=Count('author'))\n+        \n+        # Validate the result is as expected, i.e., each author has the correct count\n+        self.assertCountEqual(articles, [\n+            {'author': self.author_1.pk, 'count': 3},\n+            {'author': self.author_2.pk, 'count': 1},\n+        ])\n         \"\"\"\n         'pk' works as an ordering option in Meta.\n         \"\"\"\n@@ -483,4 +500,4 @@ class OrderingTests(TestCase):\n         )\n         ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n         articles = ChildArticle.objects.order_by('article_ptr')\n-        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n",
  "django__django-14140": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex c3db825..b639173 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -824,6 +824,14 @@ class BasicExpressionsTests(TestCase):\n             [self.example_inc.ceo, self.max],\n         )\n \n+    def test_deconstruct_exists_expression(self):\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        q = Q(Exists(is_poc))\n+        path, args, kwargs = q.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Q')\n+        self.assertEqual(args, (Exists(is_poc),))\n+        self.assertEqual(kwargs, {})\n+\n     def test_boolean_expression_combined_with_empty_Q(self):\n         is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n         self.gmbh.point_of_contact = self.max\n",
  "django__django-14238": "diff --git a/tests/model_fields/test_autofield.py b/tests/model_fields/test_autofield.py\nindex bfbf1e8..5cea35c 100644\n--- a/tests/model_fields/test_autofield.py\n+++ b/tests/model_fields/test_autofield.py\n@@ -24,7 +24,17 @@ class SmallAutoFieldTests(SmallIntegerFieldTests):\n \n class AutoFieldInheritanceTests(SimpleTestCase):\n \n-    def test_isinstance_of_autofield(self):\n+    def test_subclasscheck_of_autofield(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        # Testing subclasses\n+        for field in (MyBigAutoField, MySmallAutoField):\n+            with self.subTest(field.__name__):\n+                self.assertTrue(issubclass(field, models.AutoField))\n         for field in (models.BigAutoField, models.SmallAutoField):\n             with self.subTest(field.__name__):\n                 self.assertIsInstance(field(), models.AutoField)\n@@ -32,4 +42,4 @@ class AutoFieldInheritanceTests(SimpleTestCase):\n     def test_issubclass_of_autofield(self):\n         for field in (models.BigAutoField, models.SmallAutoField):\n             with self.subTest(field.__name__):\n-                self.assertTrue(issubclass(field, models.AutoField))\n+                self.assertTrue(issubclass(field, models.AutoField))\n",
  "django__django-14311": "",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..b943381 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -229,7 +229,13 @@ TEST_DATA = [\n     # Trailing newlines not accepted\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n-    # Trailing junk does not take forever to reject\n+    # Newlines, carriage returns, and tabs are not accepted.\n+    (URLValidator(), 'http://www.djangoproject.com/\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://www.django\\rproject.com/', ValidationError),\n+    (URLValidator(), 'http://[::\\rffff:192.9.5.5]', ValidationError),\n+    (URLValidator(), 'http://\\twww.djangoproject.com/', ValidationError),\n+    (URLValidator(), 'http://\\t[::ffff:192.9.5.5]', ValidationError),\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br ', ValidationError),\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br z', ValidationError),\n \n",
  "django__django-14351": "diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\nindex 79963c3..c425c12 100644\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -1526,6 +1526,55 @@ class AggregationTests(TestCase):\n         DistinctAggregate('foo', distinct=True)\n \n \n+from django.test import TestCase\n+from django.db.models import Q, Count\n+from .models import ThingManagerTicketRatingCumulativeMovingAverage, PropertyGroup, ManagementAgent\n+\n+class QObjectOrTests(TestCase):\n+    def setUp(self):\n+        # Set up initial data\n+        self.management_agent = ManagementAgent.objects.create(name='Agent 1')\n+        self.property_group1 = PropertyGroup.objects.create(name='Group 1', management_agent=self.management_agent)\n+        self.property_group2 = PropertyGroup.objects.create(name='Group 2', management_agent=self.management_agent)\n+        self.thing = ThingManagerTicketRatingCumulativeMovingAverage.objects.create(agent=self.management_agent)\n+\n+    def test_q_object_or_with_id_in(self):\n+        property_groups = PropertyGroup.objects.filter(management_agent=self.management_agent)\n+        queryset = ThingManagerTicketRatingCumulativeMovingAverage.objects.annotate(\n+            Count(\"agent__property_groups\")\n+        )\n+        result = queryset.filter(\n+            Q(agent__property_groups__id__in=property_groups.values_list(\"id\", flat=True))\n+            | Q(agent__property_groups__count=0)\n+        ).distinct()\n+        self.assertEqual(len(result), 1)\n+        self.assertEqual(result.first(), self.thing)\n+\n+    def test_q_object_or_with_in(self):\n+        property_groups = PropertyGroup.objects.filter(management_agent=self.management_agent)\n+        queryset = ThingManagerTicketRatingCumulativeMovingAverage.objects.annotate(\n+            Count(\"agent__property_groups\")\n+        )\n+        result = queryset.filter(\n+            Q(agent__property_groups__in=property_groups)\n+            | Q(agent__property_groups__count=0)\n+        ).distinct()\n+        self.assertEqual(len(result), 1)\n+        self.assertEqual(result.first(), self.thing)\n+\n+    def test_no_property_groups(self):\n+        # Test with no property groups related to the agent\n+        self.property_group1.delete()\n+        self.property_group2.delete()\n+        queryset = ThingManagerTicketRatingCumulativeMovingAverage.objects.annotate(\n+            Count(\"agent__property_groups\")\n+        )\n+        result = queryset.filter(\n+            Q(agent__property_groups__count=0)\n+        ).distinct()\n+        self.assertEqual(len(result), 1)\n+        self.assertEqual(result.first(), self.thing)\n+\n class JoinPromotionTests(TestCase):\n     def test_ticket_21150(self):\n         b = Bravo.objects.create()\n",
  "django__django-14373": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 2f7c68b..65f11fa 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -179,7 +179,35 @@ class DateFormatTests(SimpleTestCase):\n                     expected_date,\n                 )\n \n-    def test_twelve_hour_format(self):\n+    def test_y_format_year_before_1000(self):\n+        # Test cases for years before 1000 to check zero-padding for 'Y' format\n+        test_cases = [\n+            (1, '0001'),\n+            (9, '0009'),\n+            (10, '0010'),\n+            (99, '0099'),\n+            (100, '0100'),\n+            (999, '0999'),\n+        ]\n+        for year, expected in test_cases:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 1, 1), 'Y'),\n+                    expected,\n+                )\n+\n+    def test_Y_format_year_0_and_negative(self):\n+        # Test cases for edge years\n+        test_cases = [\n+            (0, '0000'),    # Assuming year 0 is handled, depends on the context\n+            (-1, '-0001'),  # Negative years, if supported, should also be zero-padded\n+        ]\n+        for year, expected in test_cases:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 1, 1), 'Y'),\n+                    expected,\n+                )\n         tests = [\n             (0, '12'),\n             (1, '1'),\n",
  "django__django-14376": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\nindex 643c2b6..4764a67 100644\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -68,6 +68,59 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_options_deprecated_vs_new_keys(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        \n+        # Test with new keys preferred\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'db': 'deprecatedoptiondbname',\n+                    'password': 'optionpassword',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'user': 'optionuser',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+        \n+        # Test fallback to deprecated keys if new keys are absent\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'db': 'optiondbname',\n+                    'passwd': 'optionpassword',\n+                    'user': 'optionuser',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n     def test_options_password(self):\n         expected_args = [\n             'mysql',\n",
  "django__django-14434": "",
  "django__django-14493": "diff --git a/tests/staticfiles_tests/storage.py b/tests/staticfiles_tests/storage.py\nindex dc966a1..81ece09 100644\n--- a/tests/staticfiles_tests/storage.py\n+++ b/tests/staticfiles_tests/storage.py\n@@ -93,7 +93,10 @@ class ExtraPatternsStorage(ManifestStaticFilesStorage):\n         ),\n     )\n \n+class NoPostProcessReplacedPathStorage(ManifestStaticFilesStorage):\n+    max_post_process_passes = 0\n+\n \n class NoneHashStorage(ManifestStaticFilesStorage):\n     def file_hash(self, name, content=None):\n-        return None\n+        return None\n",
  "django__django-14500": "diff --git a/tests/migrations/test_executor.py b/tests/migrations/test_executor.py\nindex d884fe4..a422834 100644\n--- a/tests/migrations/test_executor.py\n+++ b/tests/migrations/test_executor.py\n@@ -642,6 +642,37 @@ class ExecutorTests(MigrationTestBase):\n         # Record all replaced migrations as applied\n         recorder.record_applied(\"migrations\", \"0001_initial\")\n         recorder.record_applied(\"migrations\", \"0002_second\")\n+\n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_squashed'})\n+    def test_unapply_marks_squash_migration_unapplied(self):\n+        # Setup: Apply the squashed migration\n+        executor = MigrationExecutor(connection)\n+        executor.migrate([('migrations', '0001_squashed_0002')])\n+        \n+        # Verify that the squashed migration is marked as applied\n+        self.assertIn(\n+            ('migrations', '0001_squashed_0002'),\n+            executor.recorder.applied_migrations(),\n+        )\n+        \n+        # Unapply the squashed migration\n+        executor.migrate([('migrations', None)])\n+        \n+        # Verify that the squashed migration is marked as unapplied\n+        self.assertNotIn(\n+            ('migrations', '0001_squashed_0002'),\n+            executor.recorder.applied_migrations(),\n+        )\n+        \n+        # Also verify that the original migrations are marked as unapplied\n+        self.assertNotIn(\n+            ('migrations', '0001_initial'),\n+            executor.recorder.applied_migrations(),\n+        )\n+        self.assertNotIn(\n+            ('migrations', '0002_second'),\n+            executor.recorder.applied_migrations(),\n+        )\n         executor = MigrationExecutor(connection)\n         executor.migrate([(\"migrations\", \"0001_squashed_0002\")])\n \n",
  "django__django-14539": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 23a1e0a..bcd621f 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -250,10 +250,72 @@ class TestUtilsHtml(SimpleTestCase):\n                 'Search for google.com/?q=! and see.',\n                 'Search for <a href=\"http://google.com/?q=\">google.com/?q=</a>! and see.'\n             ),\n+            # Test case for verifying the issue with HTML-escaped characters and trailing punctuation\n+            (\n+                'Search for google.com/?q=1&lt! and see.',\n+                'Search for <a href=\"http://google.com/?q=1%3C\">google.com/?q=1&lt</a>! and see.'\n+            ),\n+            # Additional test cases\n+            # URL with HTML-escaped characters\n+            (\n+                'Click here: example.com/path?param=1%26param2=2&gt.',\n+                'Click here: <a href=\"http://example.com/path?param=1%26param2=2\">example.com/path?param=1&amp;param2=2</a>&gt.'\n+            ),\n+            # Email with HTML-escaped characters\n+            (\n+                'Send email to foo@example&lt;.com!',\n+                'Send email to <a href=\"mailto:foo@example&lt;.com\">foo@example&lt;.com</a>!'\n+            ),\n+            # URL with balanced punctuation\n+            (\n+                'Visit (example.com/?q=test).',\n+                'Visit (<a href=\"http://example.com/?q=test\">example.com/?q=test</a>).'\n+            ),\n+            # URL with unbalanced punctuation\n+            (\n+                'Check this link: example.com/?q=test).',\n+                'Check this link: <a href=\"http://example.com/?q=test\">example.com/?q=test</a>).'\n+            ),\n+            # URL with punctuation only at the end\n+            (\n+                'Secure site: https://secure.com/end.',\n+                'Secure site: <a href=\"https://secure.com/end\">secure.com/end</a>.'\n+            ),\n             (\n                 lazystr('Search for google.com/?q=!'),\n                 'Search for <a href=\"http://google.com/?q=\">google.com/?q=</a>!'\n             ),\n+            # Test case for verifying the issue with HTML-escaped characters and trailing punctuation\n+            (\n+                'Search for google.com/?q=1&lt! and see.',\n+                'Search for <a href=\"http://google.com/?q=1%3C\">google.com/?q=1&lt</a>! and see.'\n+            ),\n+            # Additional test cases\n+            # URL with HTML-escaped characters\n+            (\n+                'Click here: example.com/path?param=1%26param2=2&gt.',\n+                'Click here: <a href=\"http://example.com/path?param=1%26param2=2\">example.com/path?param=1&amp;param2=2</a>&gt.'\n+            ),\n+            # Email with HTML-escaped characters\n+            (\n+                'Send email to foo@example&lt;.com!',\n+                'Send email to <a href=\"mailto:foo@example&lt;.com\">foo@example&lt;.com</a>!'\n+            ),\n+            # URL with balanced punctuation\n+            (\n+                'Visit (example.com/?q=test).',\n+                'Visit (<a href=\"http://example.com/?q=test\">example.com/?q=test</a>).'\n+            ),\n+            # URL with unbalanced punctuation\n+            (\n+                'Check this link: example.com/?q=test).',\n+                'Check this link: <a href=\"http://example.com/?q=test\">example.com/?q=test</a>).'\n+            ),\n+            # URL with punctuation only at the end\n+            (\n+                'Secure site: https://secure.com/end.',\n+                'Secure site: <a href=\"https://secure.com/end\">secure.com/end</a>.'\n+            ),\n             ('foo@example.com', '<a href=\"mailto:foo@example.com\">foo@example.com</a>'),\n         )\n         for value, output in tests:\n",
  "django__django-14559": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex b579834..83a3ce6 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -115,6 +115,29 @@ class BulkUpdateTests(TestCase):\n \n     pk_fields_error = 'bulk_update() cannot be used with primary key fields.'\n \n+    def test_return_value_no_rows(self):\n+        rows_updated = Note.objects.bulk_update([], ['note'])\n+        self.assertEqual(rows_updated, 0)\n+\n+    def test_return_value_some_rows(self):\n+        Note.objects.bulk_create([\n+            Note(note='note{}'.format(i), misc='misc{}'.format(i))\n+            for i in range(0, 5)\n+        ])\n+        notes = list(Note.objects.all())\n+        for note in notes:\n+            note.note = 'updated-' + note.note\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 5)\n+\n+    def test_return_value_with_duplicates(self):\n+        note = Note.objects.create(note='test-note', misc='test')\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'])\n+        self.assertEqual(rows_updated, 1)\n+        # Duplicates in different batches.\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'], batch_size=1)\n+        self.assertEqual(rows_updated, 2)\n+\n     def test_update_primary_key(self):\n         with self.assertRaisesMessage(ValueError, self.pk_fields_error):\n             Note.objects.bulk_update([], ['id'])\n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..6bd2034 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -337,6 +337,10 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at most 1 form.'])\n+        \n+        # Check for the 'nonform' CSS class in non-form errors\n+        expected_html = '<ul class=\"errorlist nonform\"><li>Please submit at most 1 form.</li></ul>'\n+        self.assertHTMLEqual(str(formset.non_form_errors()), expected_html)\n \n     def test_formset_validate_min_flag(self):\n         \"\"\"\n@@ -359,6 +363,10 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])\n+        \n+        # Check for the 'nonform' CSS class in non-form errors\n+        expected_html = '<ul class=\"errorlist nonform\"><li>Please submit at least 3 forms.</li></ul>'\n+        self.assertHTMLEqual(str(formset.non_form_errors()), expected_html)\n \n     def test_formset_validate_min_unchanged_forms(self):\n         \"\"\"\n@@ -983,6 +991,10 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = FavoriteDrinksFormSet(data, prefix='drinks')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n+        \n+        # Check for the 'nonform' CSS class in non-form errors\n+        expected_html = '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>'\n+        self.assertHTMLEqual(str(formset.non_form_errors()), expected_html)\n \n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n",
  "django__django-14631": "",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..02e7bfa 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -1,9 +1,62 @@\n from datetime import date, datetime, timedelta\n from operator import attrgetter\n \n+class M2mThroughAdditionalTests(TestCase):\n+    def test_proxy_model_m2m_through_fields_list_hashable(self):\n+        class Parent(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class ProxyParent(Parent):\n+            class Meta:\n+                proxy = True\n+\n+        class Child(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE)\n+            many_to_many_field = models.ManyToManyField(\n+                to=Parent,\n+                through=\"ManyToManyModel\",\n+                through_fields=['child', 'parent'],\n+                related_name=\"something\"\n+            )\n+\n+        class ManyToManyModel(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')\n+            child = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')\n+            second_child = models.ForeignKey(Child, on_delete=models.CASCADE, null=True, default=None)\n+\n+        # Fetch the many_to_many_field and check its through_fields are hashable\n+        m2m_field = Child._meta.get_field('many_to_many_field')\n+        self.assertEqual(m2m_field.through_fields, ['child', 'parent'])\n+        # Ensure that hashing doesn't raise an error\n+        try:\n+            hash_value = hash(m2m_field)\n+            self.assertTrue(isinstance(hash_value, int))\n+        except TypeError:\n+            self.fail(\"Hashing ManyToManyRel with through_fields list should not raise TypeError.\")\n+\n+    def test_m2m_identity_hashing(self):\n+        class Event(models.Model):\n+            pass\n+\n+        class Invitation(models.Model):\n+            event = models.ForeignKey(Event, on_delete=models.CASCADE)\n+            invitee = models.ForeignKey(Person, on_delete=models.CASCADE)\n+\n+        class Person(models.Model):\n+            events = models.ManyToManyField(Event, through=Invitation, through_fields=['event', 'invitee'])\n+\n+        # Fetch the many-to-many field and check its identity can be hashed\n+        m2m_field = Person._meta.get_field('events')\n+        try:\n+            hash_value = hash(m2m_field)\n+            self.assertTrue(isinstance(hash_value, int))\n+        except TypeError:\n+            self.fail(\"Hashing ManyToManyRel identity should not raise TypeError.\")\n+\n from django.db import IntegrityError\n from django.test import TestCase\n-\n+from django.db import models\n+from django.core.checks import Error\n from .models import (\n     CustomMembership, Employee, Event, Friendship, Group, Ingredient,\n     Invitation, Membership, Person, PersonSelfRefM2M, Recipe, RecipeIngredient,\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..461cebc 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,3 +1,4 @@\n+\n import json\n from contextlib import contextmanager\n \n@@ -293,6 +294,27 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n             'pagination': {'more': False},\n         })\n \n+    def test_default_serialize_result(self):\n+        class DefaultAutocompleteJsonView(AutocompleteJsonView):\n+            pass\n+\n+        Question.objects.create(id=1, question='Default Question 1')\n+        Question.objects.create(id=2, question='Default Question 2')\n+        \n+        request = self.factory.get(self.url, {'term': 'default', **self.opts})\n+        request.user = self.superuser\n+        response = DefaultAutocompleteJsonView.as_view(**self.as_view_args)(request)\n+        \n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': [\n+                {'id': '1', 'text': 'Default Question 1'},\n+                {'id': '2', 'text': 'Default Question 2'}\n+            ],\n+            'pagination': {'more': False},\n+        })\n+\n \n @override_settings(ROOT_URLCONF='admin_views.urls')\n class SeleniumTests(AdminSeleniumTestCase):\n",
  "django__django-14765": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 11009e5..3e09eb0 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -924,6 +924,33 @@ class StateTests(SimpleTestCase):\n             1,\n         )\n \n+    def test_real_apps_is_set(self):\n+        \"\"\"\n+        Test that ProjectState initializes correctly when real_apps is a set.\n+        \"\"\"\n+        try:\n+            ProjectState(real_apps={'contenttypes', 'auth'})\n+        except Exception as e:\n+            self.fail(f\"ProjectState raised an unexpected exception: {e}\")\n+\n+    def test_real_apps_none(self):\n+        \"\"\"\n+        Test that ProjectState initializes correctly when real_apps is None.\n+        \"\"\"\n+        try:\n+            ProjectState(real_apps=None)\n+        except Exception as e:\n+            self.fail(f\"ProjectState raised an unexpected exception: {e}\")\n+\n+    def test_real_apps_empty_set(self):\n+        \"\"\"\n+        Test that ProjectState initializes correctly when real_apps is an empty set.\n+        \"\"\"\n+        try:\n+            ProjectState(real_apps=set())\n+        except Exception as e:\n+            self.fail(f\"ProjectState raised an unexpected exception: {e}\")\n+\n     def test_ignore_order_wrt(self):\n         \"\"\"\n         Makes sure ProjectState doesn't include OrderWrt fields when\n",
  "django__django-14771": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 1875424..14a537b 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -196,6 +196,12 @@ class TestChildArguments(SimpleTestCase):\n \n     @mock.patch('__main__.__spec__', None)\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n+    def test_xoptions_are_passed(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver']\n+        )\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n         self.assertEqual(\n@@ -236,6 +242,12 @@ class TestChildArguments(SimpleTestCase):\n             autoreload.get_child_arguments()\n \n     @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n+    def test_xoptions_are_passed(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver']\n+        )\n     @mock.patch('sys.warnoptions', [])\n     def test_module_no_spec(self):\n         module = types.ModuleType('test_module')\n",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..fe90d1d 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -271,7 +271,56 @@ class MethodDecoratorTests(SimpleTestCase):\n                 self.assertEqual(Test.method.__doc__, 'A method')\n                 self.assertEqual(Test.method.__name__, 'method')\n \n-    def test_new_attribute(self):\n+    def test_wrapper_assignments(self):\n+        \"\"\"@method_decorator preserves wrapper assignments.\"\"\"\n+        func_name = None\n+        func_module = None\n+\n+        def decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_name, func_module\n+                func_name = getattr(func, '__name__', None)\n+                func_module = getattr(func, '__module__', None)\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(decorator)\n+            def method(self):\n+                return 'tests'\n+\n+        Test().method()\n+        self.assertEqual(func_name, 'method')\n+        self.assertIsNotNone(func_module)\n+\n+    def test_partial_function_decorator(self):\n+        \"\"\"Test method_decorator with a partial function to ensure __name__ and __module__ are preserved.\"\"\"\n+        func_name = None\n+        func_module = None\n+\n+        def decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_name, func_module\n+                func_name = getattr(func, '__name__', None)\n+                func_module = getattr(func, '__module__', None)\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        def original_function(arg1, arg2, kwarg1=None):\n+            return \"Original function executed\"\n+\n+        partial_function = functools.partial(original_function, 1, kwarg1=\"test\")\n+\n+        class TestPartial:\n+            @method_decorator(decorator)\n+            def wrapped_partial(self):\n+                return partial_function()\n+\n+        TestPartial().wrapped_partial()\n+        self.assertEqual(func_name, 'wrapped_partial')\n+        self.assertIsNotNone(func_module)\n         \"\"\"A decorator that sets a new attribute on the method.\"\"\"\n         def decorate(func):\n             func.x = 1\n",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..9ae38ca 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5132,7 +5132,35 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         # Related ForeignKey object not registered in admin.\n         self.assertContains(response, '<div class=\"readonly\">Chapter 1</div>', html=True)\n \n-    def test_readonly_manytomany_backwards_ref(self):\n+    def _test_readonly_foreignkey_links(self, admin_site):\n+        \"\"\"\n+        Helper function to test if the readonly ForeignKey links are correctly\n+        generated for the specified admin site.\n+        \"\"\"\n+        chapter = Chapter.objects.create(\n+            title='Chapter 1',\n+            content='content',\n+            book=Book.objects.create(name='Book 1'),\n+        )\n+        language = Language.objects.create(iso='_40', name='Test')\n+        chapter.language = language\n+        chapter.save()\n+\n+        response = self.client.get(reverse(f'{admin_site}:admin_views_chapter_change', args=(chapter.pk,)))\n+        language_url = reverse(f'{admin_site}:admin_views_language_change', args=(quote(language.pk),))\n+        self.assertContains(response, f'<div class=\"readonly\"><a href=\"{language_url}\">_40</a></div>', html=True)\n+\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        \"\"\"\n+        Test that the readonly ForeignKey links are correct in the default admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('admin')\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test that the readonly ForeignKey links are correct in the custom admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('custom_admin')\n         \"\"\"\n         Regression test for #16433 - backwards references for related objects\n         broke if the related field is read-only due to the help_text attribute\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..c2ab953 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,10 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n+import json\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -341,7 +343,27 @@ class ModelChoiceFieldTests(TestCase):\n </div>\"\"\" % (self.c1.pk, self.c2.pk, self.c3.pk),\n         )\n \n-    def test_choices_not_fetched_when_not_rendering(self):\n+    def test_choice_value_hash(self):\n+        c1 = Category.objects.create(name='Test Category 1', slug='test-category-1')\n+        c2 = Category.objects.create(name='Test Category 2', slug='test-category-2')\n+        value_1 = ModelChoiceIteratorValue(c1.pk, c1)\n+        value_2 = ModelChoiceIteratorValue(c2.pk, c2)\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(c1.pk, None)))\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+\n+    def test_choice_value_usage_in_dict(self):\n+        c1 = Category.objects.create(name='Test Category 1', slug='test-category-1')\n+        value = ModelChoiceIteratorValue(c1.pk, c1)\n+        show_fields = {value: ['first_name', 'last_name']}\n+        self.assertIn(value, show_fields)\n+        self.assertEqual(show_fields[value], ['first_name', 'last_name'])\n+\n+    def test_choice_value_usage_in_json(self):\n+        c1 = Category.objects.create(name='Test Category 1', slug='test-category-1')\n+        value = ModelChoiceIteratorValue(c1.pk, c1)\n+        show_fields = {value: ['first_name', 'last_name']}\n+        json_data = json.dumps({str(k): v for k, v in show_fields.items()})\n+        self.assertIn(str(value), json_data)\n         with self.assertNumQueries(1):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n             self.assertEqual('Entertainment', field.clean(self.c1.pk).name)\n",
  "django__django-14999": "",
  "django__django-15022": "",
  "django__django-15037": "",
  "django__django-15103": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex b862331..13e7ec9 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -173,7 +173,18 @@ class TestUtilsHtml(SimpleTestCase):\n             with self.subTest(arg=arg):\n                 self.assertEqual(json_script(arg, 'test_id'), expected)\n \n-    def test_smart_urlquote(self):\n+    def test_json_script_no_id(self):\n+        tests = (\n+            # Basic JSON object without element_id\n+            ({'key': 'value'}, '<script type=\"application/json\">{\"key\": \"value\"}</script>'),\n+            # JSON string with special characters without element_id\n+            ('special & characters', '<script type=\"application/json\">\"special \\\\u0026 characters\"</script>'),\n+            # JSON array without element_id\n+            ([1, 2, 3], '<script type=\"application/json\">[1, 2, 3]</script>'),\n+        )\n+        for arg, expected in tests:\n+            with self.subTest(arg=arg):\n+                self.assertEqual(json_script(arg), expected)\n         items = (\n             ('http://\u00f6\u00e4\u00fc.com/', 'http://xn--4ca9at.com/'),\n             ('http://\u00f6\u00e4\u00fc.com/\u00f6\u00e4\u00fc/', 'http://xn--4ca9at.com/%C3%B6%C3%A4%C3%BC/'),\n@@ -276,4 +287,4 @@ class TestUtilsHtml(SimpleTestCase):\n         )\n         for value in tests:\n             with self.subTest(value=value):\n-                self.assertEqual(urlize(value), value)\n+                self.assertEqual(urlize(value), value)\n",
  "django__django-15104": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 04452fa..687559e 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2835,6 +2835,53 @@ class AutodetectorTests(TestCase):\n                 )\n \n \n+from django.db import models\n+from django.db.migrations.state import ModelState\n+from django.test import SimpleTestCase, TestCase\n+from django.db.migrations.autodetector import MigrationAutodetector\n+\n+class TestCustomForeignKeyField(TestCase):\n+    def test_add_custom_fk_with_hardcoded_to(self):\n+        class HardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.Author'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']\n+                return name, path, args, kwargs\n+\n+        book_hardcoded_fk_to = ModelState('testapp', 'Book', [\n+            ('author', HardcodedForeignKey(on_delete=models.CASCADE)),\n+        ])\n+        changes = self.get_changes(\n+            [self.author_empty],\n+            [self.author_empty, book_hardcoded_fk_to],\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='Book')\n+    \n+    def test_custom_fk_with_hardcoded_to_deconstruction(self):\n+        class AnotherHardcodedFK(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.Publisher'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']\n+                return name, path, args, kwargs\n+\n+        before = ModelState('testapp', 'Publisher', [])\n+        after = ModelState('testapp', 'Book', [\n+            ('publisher', AnotherHardcodedFK(on_delete=models.CASCADE)),\n+        ])\n+        autodetector = MigrationAutodetector(before, after)\n+        changes = autodetector._detect_changes()\n+        self.assertEqual(len(changes['testapp']), 1)\n+\n class MigrationSuggestNameTests(SimpleTestCase):\n     def test_no_operations(self):\n         class Migration(migrations.Migration):\n",
  "django__django-15127": "",
  "django__django-15128": "diff --git a/tests/queries/models.py b/tests/queries/models.py\nindex a7bb7e8..2148b00 100644\n--- a/tests/queries/models.py\n+++ b/tests/queries/models.py\n@@ -612,7 +612,21 @@ class OrderItem(models.Model):\n         return str(self.pk)\n \n \n+from django.db import models\n+from django.db.models import Q\n+\n+class Annotation(models.Model):\n+    tag = models.ForeignKey('queries.Tag', models.CASCADE)\n+\n+class Tag(models.Model):\n+    name = models.CharField(max_length=255)\n+    \n+class Note(models.Model):\n+    annotation = models.ForeignKey(Annotation, models.CASCADE, related_name='notes')\n+    tag = models.ForeignKey(Tag, models.CASCADE)\n+\n class BaseUser(models.Model):\n+    annotation = models.ForeignKey(Annotation, models.CASCADE)\n     pass\n \n \n",
  "django__django-15161": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 5fdccc5..2dc611b 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1764,6 +1764,13 @@ class ValueTests(TestCase):\n         value = Value('name')\n         path, args, kwargs = value.deconstruct()\n         self.assertEqual(path, 'django.db.models.expressions.Value')\n+\n+    def test_deconstruct_F(self):\n+        f_expression = F('some_field')\n+        path, args, kwargs = f_expression.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, ('some_field',))\n+        self.assertEqual(kwargs, {})\n         self.assertEqual(args, (value.value,))\n         self.assertEqual(kwargs, {})\n \n@@ -1771,6 +1778,13 @@ class ValueTests(TestCase):\n         value = Value('name', output_field=CharField())\n         path, args, kwargs = value.deconstruct()\n         self.assertEqual(path, 'django.db.models.expressions.Value')\n+\n+    def test_deconstruct_F(self):\n+        f_expression = F('some_field')\n+        path, args, kwargs = f_expression.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, ('some_field',))\n+        self.assertEqual(kwargs, {})\n         self.assertEqual(args, (value.value,))\n         self.assertEqual(len(kwargs), 1)\n         self.assertEqual(kwargs['output_field'].deconstruct(), CharField().deconstruct())\n",
  "django__django-15268": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a6c0858..d300749 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1561,6 +1561,30 @@ class AutodetectorTests(TestCase):\n         # Right number of migrations?\n         self.assertEqual(len(changes), 0)\n \n+    def test_optimize_alter_foo_together(self):\n+        \"\"\"\n+        Test that multiple AlterFooTogether operations are optimized into one.\n+        \"\"\"\n+        changes = self.get_changes(\n+            [self.author_empty, self.book_foo_together],\n+            [self.author_empty, self.book_foo_together_2]  # Simulate changes\n+        )\n+\n+        # Check if changes are optimized properly\n+        self.assertNumberMigrations(changes, \"otherapp\", 1)\n+        self.assertOperationTypes(changes, 'otherapp', 0, [\n+            'AlterUniqueTogether',\n+            'AlterIndexTogether',\n+        ])\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 0, name='book',\n+            unique_together={('title', 'author')},\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 1, name='book',\n+            index_together={('title', 'author')},\n+        )\n+\n     def test_foo_together_ordering(self):\n         \"\"\"\n         index/unique_together also triggers on ordering changes.\n",
  "django__django-15277": "",
  "django__django-15278": "",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..81d2127 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -80,7 +80,39 @@ class BasicFieldTests(SimpleTestCase):\n         f = Foo._meta.get_field('a')\n         self.assertEqual(str(f), 'model_fields.Foo.a')\n \n-    def test_field_ordering(self):\n+    def test_hash_immutability(self):\n+        field = models.IntegerField()\n+        field_hash = hash(field)\n+\n+        class MyModel(models.Model):\n+            rank = field\n+\n+        self.assertEqual(field_hash, hash(field))\n+\n+    def test_hash_immutability_after_assignment(self):\n+        field1 = models.CharField(max_length=100)\n+        field2 = models.CharField(max_length=100)\n+\n+        class ModelA(models.Model):\n+            field = field1\n+\n+        class ModelB(models.Model):\n+            field = field2\n+\n+        # Hash should be consistent even after assigning to different models\n+        self.assertEqual(hash(field1), hash(ModelA._meta.get_field('field')))\n+        self.assertEqual(hash(field2), hash(ModelB._meta.get_field('field')))\n+\n+    def test_field_as_dict_key_before_and_after_assignment(self):\n+        field = models.IntegerField()\n+        field_dict = {field: 'value'}\n+\n+        class MyModel(models.Model):\n+            number = field\n+\n+        # Ensure field is still accessible as dictionary key\n+        self.assertIn(field, field_dict)\n+        self.assertEqual(field_dict[field], 'value')\n         \"\"\"Fields are ordered based on their creation.\"\"\"\n         f1 = models.Field()\n         f2 = models.Field(auto_created=True)\n",
  "django__django-15368": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex 447c150..c072b3e 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -204,7 +204,22 @@ class BulkUpdateTests(TestCase):\n             [cat.special_name for cat in special_categories]\n         )\n \n-    def test_field_references(self):\n+from django.db.models import F\n+from exampleapp.models import SelfRef\n+\n+class TestBulkUpdate(TestCase):\n+    def test_f_expression_on_charfield(self):\n+        # Create test objects\n+        objects = [SelfRef.objects.create(c8='', name=f'name_{i}') for i in range(10)]\n+        # Assign F expression\n+        for obj in objects:\n+            obj.c8 = F('name')\n+        # Perform bulk update\n+        SelfRef.objects.bulk_update(objects, ['c8'])\n+        # Verify that c8 is updated to name\n+        for obj in objects:\n+            obj.refresh_from_db()\n+            self.assertEqual(obj.c8, obj.name)\n         numbers = [Number.objects.create(num=0) for _ in range(10)]\n         for number in numbers:\n             number.num = F('num') + 1\n",
  "django__django-15380": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex e2de333..362fdfa 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1049,6 +1049,27 @@ class AutodetectorTests(TestCase):\n             new_name='renamed_foo',\n         )\n \n+    def test_rename_field_with_renamed_model_and_field(self):\n+        \"\"\"Tests renaming a model and a field in a single operation.\"\"\"\n+        changes = self.get_changes(\n+            [self.author_name],\n+            [\n+                ModelState('testapp', 'RenamedAuthor', [\n+                    ('id', models.AutoField(primary_key=True)),\n+                    ('renamed_name', models.CharField(max_length=200)),\n+                ]),\n+            ],\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel', 'RenameField'])\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 0, old_name='Author', new_name='RenamedAuthor',\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 1, old_name='name', new_name='renamed_name',\n+        )\n+\n     def test_rename_model(self):\n         \"\"\"Tests autodetection of renamed models.\"\"\"\n         changes = self.get_changes(\n",
  "django__django-15382": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex bd890ac..93fe4b1 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1906,8 +1906,35 @@ class ExistsTests(TestCase):\n         self.assertNotIn('ORDER BY', captured_sql)\n \n \n+from django.test import TestCase\n+from django.db.models import Exists, Q\n+from myapp.models import Manager\n+\n class FieldTransformTests(TestCase):\n \n+    def test_negated_empty_exists_with_additional_conditions(self):\n+        manager1 = Manager.objects.create(name='test')\n+        manager2 = Manager.objects.create(name='another')\n+        qs = Manager.objects.filter(\n+            ~Exists(Manager.objects.none()) & Q(name='test')\n+        )\n+        self.assertSequenceEqual(qs, [manager1])\n+\n+    def test_negated_empty_exists_with_no_conditions(self):\n+        manager = Manager.objects.create()\n+        qs = Manager.objects.filter(\n+            ~Exists(Manager.objects.none())\n+        )\n+        self.assertSequenceEqual(qs, [manager])\n+\n+    def test_negated_empty_exists_with_multiple_objects(self):\n+        manager1 = Manager.objects.create(name='test1')\n+        manager2 = Manager.objects.create(name='test2')\n+        qs = Manager.objects.filter(\n+            ~Exists(Manager.objects.none())\n+        )\n+        self.assertSequenceEqual(qs, [manager1, manager2])\n+\n     @classmethod\n     def setUpTestData(cls):\n         cls.sday = sday = datetime.date(2010, 6, 25)\n",
  "django__django-15467": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex f5af59b..1d30284 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -27,6 +27,10 @@ from django.db.models import (\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n+from django.contrib import admin\n+from django.contrib.contenttypes.models import ContentType\n+from django.db import models\n+from django.test import RequestFactory\n \n from .models import (\n     Advisor,\n@@ -132,7 +136,42 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n             raw_id_fields=[\"main_band\"],\n         )\n \n-    def test_radio_fields_ForeignKey(self):\n+    def test_radio_fields_foreignkey_formfield_overrides_empty_label(self):\n+        class Parent(models.Model):\n+            name = models.CharField(max_length=100)\n+\n+        class Inventory(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE, blank=True)\n+\n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {\"parent\": admin.VERTICAL}\n+            formfield_overrides = {\n+                models.ForeignKey: {\"empty_label\": \"Custom empty label\"},\n+            }\n+\n+        ma = MyModelAdmin(Inventory, admin.site)\n+        ff = ma.formfield_for_dbfield(Inventory._meta.get_field(\"parent\"), request=None)\n+        self.assertEqual(ff.empty_label, \"Custom empty label\")\n+\n+    def test_radio_fields_foreignkey_with_custom_empty_label(self):\n+        class Parent(models.Model):\n+            name = models.CharField(max_length=100)\n+\n+        class Inventory(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE, blank=True)\n+\n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {\"parent\": admin.VERTICAL}\n+\n+            def formfield_for_foreignkey(self, db_field, request, **kwargs):\n+                if db_field.name == \"parent\":\n+                    kwargs[\"empty_label\"] = \"My Custom Empty Label\"\n+                return super().formfield_for_foreignkey(db_field, request, **kwargs)\n+\n+        ma = MyModelAdmin(Inventory, admin.site)\n+        request = RequestFactory().get('/')\n+        ff = ma.formfield_for_dbfield(Inventory._meta.get_field(\"parent\"), request=request)\n+        self.assertEqual(ff.empty_label, \"My Custom Empty Label\")\n         ff = self.assertFormfield(\n             Event,\n             \"main_band\",\n",
  "django__django-15499": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 5df1b06..a4cb6e8 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -129,6 +129,118 @@ class OptimizerTests(SimpleTestCase):\n             ],\n         )\n \n+    def test_create_alter_model_managers_with_options(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    options={\"verbose_name\": \"Bar\"},\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Bar\",\n+                    managers=[\n+                        (\"default\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    options={\"verbose_name\": \"Bar\"},\n+                    managers=[\n+                        (\"default\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n+    def test_create_alter_model_managers_multiple(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Baz\", fields=[]),\n+                migrations.AlterModelManagers(\n+                    name=\"Baz\",\n+                    managers=[\n+                        (\"custom\", models.Manager()),\n+                        (\"another\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\",\n+                    fields=[],\n+                    managers=[\n+                        (\"custom\", models.Manager()),\n+                        (\"another\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n+                ),\n+            ],\n+        )\n+\n+    def test_create_alter_model_managers_with_options(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    options={\"verbose_name\": \"Bar\"},\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Bar\",\n+                    managers=[\n+                        (\"default\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    options={\"verbose_name\": \"Bar\"},\n+                    managers=[\n+                        (\"default\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n+    def test_create_alter_model_managers_multiple(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Baz\", fields=[]),\n+                migrations.AlterModelManagers(\n+                    name=\"Baz\",\n+                    managers=[\n+                        (\"custom\", models.Manager()),\n+                        (\"another\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\",\n+                    fields=[],\n+                    managers=[\n+                        (\"custom\", models.Manager()),\n+                        (\"another\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n     def test_create_model_and_remove_model_options(self):\n         self.assertOptimizesTo(\n             [\n@@ -137,6 +249,62 @@ class OptimizerTests(SimpleTestCase):\n                     fields=[],\n                     options={\"verbose_name\": \"My Model\"},\n                 ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n+                ),\n+            ],\n+        )\n+\n+    def test_create_alter_model_managers_with_options(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    options={\"verbose_name\": \"Bar\"},\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Bar\",\n+                    managers=[\n+                        (\"default\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    options={\"verbose_name\": \"Bar\"},\n+                    managers=[\n+                        (\"default\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n+    def test_create_alter_model_managers_multiple(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Baz\", fields=[]),\n+                migrations.AlterModelManagers(\n+                    name=\"Baz\",\n+                    managers=[\n+                        (\"custom\", models.Manager()),\n+                        (\"another\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\",\n+                    fields=[],\n+                    managers=[\n+                        (\"custom\", models.Manager()),\n+                        (\"another\", models.Manager()),\n+                    ],\n+                ),\n                 migrations.AlterModelOptions(\"MyModel\", options={}),\n             ],\n             [migrations.CreateModel(\"MyModel\", fields=[])],\n",
  "django__django-15525": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 3640e99..9ae0bf0 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -791,7 +791,28 @@ class NaturalKeyFixtureTests(TestCase):\n         )\n \n \n-class M2MNaturalKeyFixtureTests(TestCase):\n+from django.core import management\n+from django.test import TestCase\n+from .models import NaturalKeyWithFKDependency, Person\n+\n+\n+class NaturalKeyFixtureOnOtherDatabaseTests(TestCase):\n+    databases = {\"other\"}\n+\n+    def test_natural_key_dependencies(self):\n+        \"\"\"\n+        Natural keys with foreign keys in dependencies work in a multiple\n+        database setup.\n+        \"\"\"\n+        management.call_command(\n+            \"loaddata\",\n+            \"nk_with_foreign_key.json\",\n+            database=\"other\",\n+            verbosity=0,\n+        )\n+        obj = NaturalKeyWithFKDependency.objects.using(\"other\").get()\n+        self.assertEqual(obj.name, \"The Lord of the Rings\")\n+        self.assertEqual(obj.author.name, \"J.R.R. Tolkien\")\n     \"\"\"Tests for ticket #14426.\"\"\"\n \n     def test_dependency_sorting_m2m_simple(self):\n",
  "django__django-15561": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex b8137da..ab18eb4 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -3961,6 +3961,24 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             editor.alter_field(Book, new_field, old_field, strict=True)\n \n+    def test_alter_field_choices_type_change_noop(self):\n+        # Create the table\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        # Get the old field\n+        old_field = Author._meta.get_field(\"name\")\n+        # Create a new field with different type but same choices\n+        new_field = TextField(\n+            choices=((\"Jane\", \"Jane\"), (\"Joe\", \"Joe\")),\n+        )\n+        new_field.set_attributes_from_name(\"name\")\n+        # Ensure no SQL is generated when altering field with choices change on SQLite\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+        # Revert back to original field to verify reverse operation is also no-op\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, new_field, old_field, strict=True)\n+\n     def test_add_textfield_unhashable_default(self):\n         # Create the table\n         with connection.schema_editor() as editor:\n",
  "django__django-15569": "diff --git a/tests/custom_lookups/tests.py b/tests/custom_lookups/tests.py\nindex 74c331a..6ebb63b 100644\n--- a/tests/custom_lookups/tests.py\n+++ b/tests/custom_lookups/tests.py\n@@ -312,6 +312,19 @@ class LookupTests(TestCase):\n         with register_lookup(models.Field, Exactly):\n             self.assertIsNone(field.get_lookup(\"exactly\"))\n \n+    def test_unregistration_clears_cache(self):\n+        field = Article._meta.get_field(\"author\")\n+\n+        # Register a lookup and ensure it's cached\n+        with register_lookup(models.ForeignObject, Exactly):\n+            self.assertIn(\"exactly\", field.get_lookups())\n+\n+        # Unregister the lookup\n+        models.ForeignObject._unregister_lookup(Exactly)\n+\n+        # Ensure the cache is cleared and the lookup is no longer available\n+        self.assertNotIn(\"exactly\", field.get_lookups())\n+\n     def test_lookups_caching(self):\n         field = Article._meta.get_field(\"author\")\n \n",
  "django__django-15572": "",
  "django__django-15731": "diff --git a/tests/basic/tests.py b/tests/basic/tests.py\nindex 902f114..6a74574 100644\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -1,3 +1,4 @@\n+\n import threading\n from datetime import datetime, timedelta\n from unittest import mock\n@@ -6,6 +7,7 @@ from django.core.exceptions import MultipleObjectsReturned, ObjectDoesNotExist\n from django.db import DEFAULT_DB_ALIAS, DatabaseError, connections, models\n from django.db.models.manager import BaseManager\n from django.db.models.query import MAX_GET_RESULTS, EmptyQuerySet\n+import inspect\n from django.test import (\n     SimpleTestCase,\n     TestCase,\n",
  "django__django-15741": "diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex c6dbc53..5022088 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -1,4 +1,7 @@\n+\n from datetime import datetime, time\n+from django.utils.translation import gettext_lazy as _\n+from django.utils.formats import get_format\n \n from django.template.defaultfilters import date\n from django.test import SimpleTestCase\n@@ -74,7 +77,15 @@ class DateTests(TimezoneTestCase):\n \n \n class FunctionTests(SimpleTestCase):\n-    def test_date(self):\n+    def test_get_format_lazy_format(self):\n+        # Test lazy translation handling in get_format\n+        self.assertEqual(get_format(_(\"DATE_FORMAT\")), \"N j, Y\")\n+\n+    @setup({\"datelazy\": '{{ t|date:_(\"H:i\") }}'})\n+    def test_date_lazy(self):\n+        # Test date filter with lazy translation\n+        output = self.engine.render_to_string(\"datelazy\", {\"t\": time(0, 0)})\n+        self.assertEqual(output, \"00:00\")\n         self.assertEqual(date(datetime(2005, 12, 29), \"d F Y\"), \"29 December 2005\")\n \n     def test_no_args(self):\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..70a5c7c 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -390,6 +390,19 @@ class ProxyModelTests(TestCase):\n             repr(resp), \"<ProxyImprovement: ProxyImprovement:improve that>\"\n         )\n \n+    def test_select_related_only_with_proxy(self):\n+        # Setup\n+        custom_model = CustomModel.objects.create(name=\"TestName\")\n+        proxy_model = ProxyCustomModel.objects.get(pk=custom_model.pk)\n+        another_model = AnotherModel.objects.create(custom=proxy_model)\n+\n+        # Test select_related with only on a proxy model\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        result = qs.get()\n+\n+        # Verify that the query does not raise an exception\n+        self.assertEqual(result.custom.name, \"TestName\")\n+\n     def test_proxy_load_from_fixture(self):\n         management.call_command(\"loaddata\", \"mypeople.json\", verbosity=0)\n         p = MyPerson.objects.get(pk=100)\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..ca03884 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -151,12 +151,26 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ),\n         )\n \n+    def test_psql_additional_parameters_before_dbname(self):\n+        # Test to verify additional parameters are passed before dbname\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n+        )\n+\n     def test_parameters(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n+    def test_psql_additional_parameters_before_dbname(self):\n+        # Test to verify additional parameters are passed before dbname\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n+        )\n+\n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n",
  "django__django-15863": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 08f08e1..5e9d192 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -31,6 +31,8 @@ class FloatformatTests(SimpleTestCase):\n         self.assertEqual(output, \"1.4 1.4\")\n \n \n+from decimal import Decimal\n+\n class FunctionTests(SimpleTestCase):\n     def test_inputs(self):\n         self.assertEqual(floatformat(7.7), \"7.7\")\n",
  "django__django-15930": "diff --git a/tests/expressions_case/tests.py b/tests/expressions_case/tests.py\nindex 696f4d0..65721ef 100644\n--- a/tests/expressions_case/tests.py\n+++ b/tests/expressions_case/tests.py\n@@ -415,7 +415,16 @@ class CaseExpressionTests(TestCase):\n         self.assertEqual(len(objects), CaseTestModel.objects.count())\n         self.assertTrue(all(obj.selected == \"not selected\" for obj in objects))\n \n-    def test_combined_expression(self):\n+    def test_annotate_with_inverse_condition(self):\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+                output_field=BooleanField()\n+            )\n+        )\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n         self.assertQuerysetEqual(\n             CaseTestModel.objects.annotate(\n                 test=Case(\n",
  "django__django-15987": "",
  "django__django-16032": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex bcf8df9..4a29695 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -989,6 +989,24 @@ class NonAggregateAnnotationTestCase(TestCase):\n             publisher_books_qs, [{\"name\": \"Sams\"}, {\"name\": \"Morgan Kaufmann\"}]\n         )\n \n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        self.assertCountEqual(\n+            publisher_books_qs, [{\"name\": \"Sams\"}, {\"name\": \"Morgan Kaufmann\"}]\n+        )\n+\n     def test_annotation_exists_aggregate_values_chaining(self):\n         qs = (\n             Book.objects.values(\"publisher\")\n@@ -1001,6 +1019,24 @@ class NonAggregateAnnotationTestCase(TestCase):\n             .values_list(\"max_pubdate\", flat=True)\n             .order_by(\"max_pubdate\")\n         )\n+        self.assertCountEqual(\n+            publisher_books_qs, [{\"name\": \"Sams\"}, {\"name\": \"Morgan Kaufmann\"}]\n+        )\n+\n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n         self.assertCountEqual(\n             qs,\n             [\n",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..e835479 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2406,6 +2406,11 @@ class CombinableTests(SimpleTestCase):\n             object() ^ Combinable()\n \n \n+from django.db.models import Expression, F, DecimalField, IntegerField, FloatField, AutoField\n+from django.db.models.expressions import CombinedExpression\n+from django.db.models.expressions import Combinable\n+from django.test import SimpleTestCase\n+\n class CombinedExpressionTests(SimpleTestCase):\n     def test_resolve_output_field_number(self):\n         tests = [\n@@ -2416,7 +2421,7 @@ class CombinedExpressionTests(SimpleTestCase):\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV, Combinable.MOD]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..f9d863d 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib import admin\n@@ -21,7 +22,10 @@ from django.db.models import F, Field, IntegerField\n from django.db.models.functions import Upper\n from django.db.models.lookups import Contains, Exact\n from django.template import Context, Template, TemplateSyntaxError\n-from django.test import TestCase, override_settings\n+from unittest import mock\n+from django.db import DatabaseError\n+from django.test import TestCase, override_settings, skipUnlessDBFeature\n+from django.urls import reverse\n from django.test.client import RequestFactory\n from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup\n from django.urls import reverse\n@@ -400,7 +404,52 @@ class ChangeListTests(TestCase):\n         with self.assertRaises(IncorrectLookupParameters):\n             m.get_changelist_instance(request)\n \n-    def test_custom_paginator(self):\n+    @skipUnlessDBFeature(\"supports_transactions\")\n+    def test_list_editable_atomicity(self):\n+        a = Swallow.objects.create(origin=\"Swallow A\", load=4, speed=1)\n+        b = Swallow.objects.create(origin=\"Swallow B\", load=2, speed=2)\n+\n+        self.client.force_login(self.superuser)\n+        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n+        data = {\n+            \"form-TOTAL_FORMS\": \"2\",\n+            \"form-INITIAL_FORMS\": \"2\",\n+            \"form-MIN_NUM_FORMS\": \"0\",\n+            \"form-MAX_NUM_FORMS\": \"1000\",\n+            \"form-0-uuid\": str(a.pk),\n+            \"form-1-uuid\": str(b.pk),\n+            \"form-0-load\": \"9.0\",\n+            \"form-0-speed\": \"3.0\",\n+            \"form-1-load\": \"5.0\",\n+            \"form-1-speed\": \"1.0\",\n+            \"_save\": \"Save\",\n+        }\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\", side_effect=DatabaseError\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Original values are preserved.\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\",\n+            side_effect=[None, DatabaseError],\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Original values are preserved.\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n         new_parent = Parent.objects.create(name=\"parent\")\n         for i in range(1, 201):\n             Child.objects.create(name=\"name %s\" % i, parent=new_parent)\n",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..d433c3e 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2400,6 +2400,18 @@ class MakeMigrationsTests(MigrationTestBase):\n         ):\n             call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n \n+    def test_makemigrations_check_no_dry_run(self):\n+        \"\"\"\n+        makemigrations --check should not create any migration files and should\n+        exit with a non-zero status when there are changes, even without --dry-run.\n+        \"\"\"\n+        out = io.StringIO()\n+        with self.temporary_migration_module() as tmpdir:\n+            with self.assertRaises(SystemExit):\n+                call_command(\"makemigrations\", \"--check\", \"migrations\", stdout=out)\n+            # Ensure no migration files are created\n+            self.assertFalse(os.listdir(tmpdir), \"No migration files should be created with --check.\")\n+\n     def test_makemigrations_migration_path_output(self):\n         \"\"\"\n         makemigrations should print the relative paths to the migrations unless\n",
  "django__django-16136": "diff --git a/tests/async/tests.py b/tests/async/tests.py\nindex 72e103e..eb38be5 100644\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -1,3 +1,4 @@\n+\n import asyncio\n import os\n from unittest import mock\n@@ -6,8 +7,9 @@ from asgiref.sync import async_to_sync\n \n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n-from django.http import HttpResponse\n-from django.test import SimpleTestCase\n+from django.http import HttpResponse, HttpResponseNotAllowed\n+from django.test import RequestFactory, SimpleTestCase\n+import asyncio\n from django.utils.asyncio import async_unsafe\n from django.views.generic.base import View\n \n@@ -119,7 +121,38 @@ class ViewTests(SimpleTestCase):\n \n                 self.assertIsInstance(response, HttpResponse)\n \n-    def test_base_view_class_is_sync(self):\n+class Demo(View):\n+    \"\"\"This basic view supports only POST requests\"\"\"\n+    async def post(self, request):\n+        return HttpResponse(\"ok\")\n+\n+class AsyncHttpMethodNotAllowedTest(SimpleTestCase):\n+    def test_http_method_not_allowed_responds_correctly(self):\n+        request_factory = RequestFactory()\n+        tests = [\n+            (self.SyncView, False),\n+            (self.AsyncView, True),\n+        ]\n+        for view_cls, is_coroutine in tests:\n+            with self.subTest(view_cls=view_cls, is_coroutine=is_coroutine):\n+                instance = view_cls()\n+                response = instance.http_method_not_allowed(request_factory.get(\"/\"))\n+                self.assertIs(\n+                    asyncio.iscoroutine(response),\n+                    is_coroutine,\n+                )\n+                if is_coroutine:\n+                    response = asyncio.run(response)\n+\n+                self.assertIsInstance(response, HttpResponseNotAllowed)\n+\n+    class SyncView(View):\n+        def post(self, request):\n+            return HttpResponse(\"ok\")\n+\n+    class AsyncView(View):\n+        async def post(self, request):\n+            return HttpResponse(\"ok\")\n         \"\"\"\n         View and by extension any subclasses that don't define handlers are\n         sync.\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..625cdd1 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -24,7 +25,8 @@ from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n-from django.utils.translation import gettext as _\n+from django.urls import reverse\n+import urllib.parse\n \n from .models.custom_user import (\n     CustomUser,\n@@ -883,8 +885,26 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         self.assertTrue(form.is_valid())\n         # original hashed password contains $\n         self.assertIn(\"$\", form.cleaned_data[\"password\"])\n+    \n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n \n-    def test_bug_19349_bound_password_field(self):\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n         user = User.objects.get(username=\"testclient\")\n         form = UserChangeForm(data={}, instance=user)\n         # When rendering the bound password field,\n",
  "django__django-16145": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex 04d2f0e..12bd836 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1600,6 +1600,21 @@ class ManageRunserver(SimpleTestCase):\n             \"2001:0db8:1234:5678::9\", \"7000\", ipv6=True, raw_ipv6=True\n         )\n \n+    @mock.patch(\"django.core.management.commands.runserver.run\")\n+    @mock.patch(\"django.core.management.base.BaseCommand.check_migrations\")\n+    def test_zero_ip_addr(self, *mocked_objects):\n+        call_command(\n+            self.cmd,\n+            addrport=\"0:8000\",\n+            use_reloader=False,\n+            skip_checks=True,\n+            stdout=self.output,\n+        )\n+        self.assertIn(\n+            \"Starting development server at http://0.0.0.0:8000/\",\n+            self.output.getvalue(),\n+        )\n+\n     def test_runner_hostname(self):\n         call_command(self.cmd, addrport=\"localhost:8000\")\n         self.assertServerSettings(\"localhost\", \"8000\")\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..7eeb65f 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -504,7 +504,19 @@ class HTTPSitemapTests(SitemapTestsBase):\n             \"<lastmod>2014-03-13</lastmod></url>\\n\"\n             \"</urlset>\"\n         )\n-        self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n+        \n+    def test_callable_lastmod_no_items(self):\n+        \"\"\"\n+        Test a sitemap where lastmod is callable but items() returns an empty list.\n+        \"\"\"\n+        response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", response)\n+        expected_content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/callable-lastmod-no-items/sitemap.xml</loc></sitemap>\n+        </sitemapindex>\n+        \"\"\"\n+        self.assertXMLEqual(response.content.decode(), expected_content)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n \n",
  "django__django-16315": "diff --git a/tests/bulk_create/models.py b/tests/bulk_create/models.py\nindex c5f5c07..7e99864 100644\n--- a/tests/bulk_create/models.py\n+++ b/tests/bulk_create/models.py\n@@ -59,6 +59,10 @@ class Pizzeria(Restaurant):\n     pass\n \n \n+class FieldsWithDbColumns(models.Model):\n+    rank = models.IntegerField(unique=True, db_column=\"rAnK\")\n+    name = models.CharField(max_length=15, null=True, db_column=\"oTheRNaMe\")\n+\n class State(models.Model):\n     two_letter_code = models.CharField(max_length=2, primary_key=True)\n \n",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..fa79566 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,63 @@\n+\n+class CustomUserCreationForm(UserCreationForm):\n+    class Meta(UserCreationForm.Meta):\n+        model = CustomUserWithM2M\n+        fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+class CustomUserWithM2MTests(TestCase):\n+    def test_custom_form_saves_many_to_many_field(self):\n+        organization = Organization.objects.create(name=\"organization 1\")\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization])\n+\n+    def test_custom_form_invalid_many_to_many_field(self):\n+        # Test with an invalid organization ID\n+        data = {\n+            \"username\": \"testclient2@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [\"9999\"],  # Assuming 9999 is not a valid PK\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), False)\n+\n+    def test_custom_form_no_many_to_many_field(self):\n+        # Test without providing any organizations\n+        data = {\n+            \"username\": \"testclient3@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [])\n+\n+    def test_custom_form_multiple_many_to_many_fields(self):\n+        # Test with multiple organizations\n+        org1 = Organization.objects.create(name=\"organization 1\")\n+        org2 = Organization.objects.create(name=\"organization 2\")\n+\n+        data = {\n+            \"username\": \"testclient4@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(org1.pk), str(org2.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [org1, org2])\n+\n import datetime\n import re\n import urllib.parse\n@@ -34,6 +94,7 @@ from .models.custom_user import (\n     ExtensionUser,\n )\n from .models.with_custom_email_field import CustomEmailField\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n from .models.with_integer_username import IntegerUsernameUser\n from .settings import AUTH_TEMPLATES\n \n",
  "django__django-16429": "",
  "django__django-16454": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 8d0729b..449f919 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -481,7 +481,51 @@ class UtilsTests(SimpleTestCase):\n         for char in key:\n             self.assertIn(char, \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)\")\n \n-    def test_is_ignored_path_true(self):\n+    def test_subparser_missing_argument_stacktrace(self):\n+        \"\"\"\n+        Test the incorrect behavior: missing argument to subparser should cause a stacktrace.\n+        This is to simulate the existing issue before applying the fix.\n+        \"\"\"\n+        class Command(BaseCommand):\n+            def add_arguments(self, parser):\n+                subparsers = parser.add_subparsers(required=True)\n+                create = subparsers.add_parser(\"create\")\n+                create.add_argument(\"name\")\n+\n+            def handle(self, *args, **options):\n+                pass\n+\n+        command = Command()\n+        parser = CommandParser(prog=\"manage.py\")\n+        command.add_arguments(parser)\n+\n+        with self.assertRaises(CommandError) as cm:\n+            parser.parse_args([\"create\"])\n+\n+        self.assertIn(\"Error: the following arguments are required: name\", str(cm.exception))\n+\n+    def test_subparser_missing_argument_error_message(self):\n+        \"\"\"\n+        Test the correct behavior: missing argument to subparser should provide a user-friendly error message.\n+        \"\"\"\n+        class Command(BaseCommand):\n+            def add_arguments(self, parser):\n+                subparsers = parser.add_subparsers(required=True)\n+                create = subparsers.add_parser(\"create\")\n+                create.add_argument(\"name\")\n+\n+            def handle(self, *args, **options):\n+                pass\n+\n+        command = Command()\n+        parser = CommandParser(prog=\"manage.py\")\n+        command.add_arguments(parser)\n+\n+        out, err = self.run_manage([\"your_command\", \"create\"])\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertEqual(len(err_lines), 2)\n+        self.assertIn(\"manage.py your_command create: error: the following arguments are required: name\", err_lines[1])\n         patterns = (\n             [\"foo/bar/baz\"],\n             [\"baz\"],\n",
  "django__django-16485": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 1623d39..f7d193a 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -104,6 +104,14 @@ class FunctionTests(SimpleTestCase):\n             # Invalid suffix.\n             self.assertEqual(floatformat(66666.666, \"u2\"), \"66666.666\")\n \n+    def test_issue_floatformat_on_zero_string(self):\n+        # Test cases for the specific issue described\n+        from decimal import Decimal\n+        from django.template.defaultfilters import floatformat\n+        \n+        self.assertEqual(floatformat(\"0.00\", 0), \"0\")\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), 0), \"0\")\n+\n     def test_zero_values(self):\n         self.assertEqual(floatformat(0, 6), \"0.000000\")\n         self.assertEqual(floatformat(0, 7), \"0.0000000\")\n",
  "django__django-16493": "",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..21a2b85 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,9 +1,12 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n from django.contrib.admin.templatetags.admin_list import date_hierarchy\n+from django.contrib.auth import get_permission_codename\n from django.contrib.admin.templatetags.admin_modify import submit_row\n from django.contrib.auth.admin import UserAdmin\n+from .tests import get_perm\n from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n from django.urls import reverse\n@@ -54,7 +57,40 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n                     template_context[\"show_save_and_add_another\"], expected_flag\n                 )\n \n-    def test_override_change_form_template_tags(self):\n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        \"\"\"\n+        Test that 'show_save_as_new' is only shown when the user has both\n+        'add' and 'change' permissions.\n+        \"\"\"\n+        # User with change permission only\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        # User with both add and change permissions\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n         \"\"\"\n         admin_modify template tags follow the standard search pattern\n         admin/app_label/model/template.html.\n",
  "django__django-16560": "diff --git a/tests/constraints/tests.py b/tests/constraints/tests.py\nindex 13854a9..1940995 100644\n--- a/tests/constraints/tests.py\n+++ b/tests/constraints/tests.py\n@@ -66,8 +66,16 @@ class BaseConstraintTests(SimpleTestCase):\n             name=\"base_name\", violation_error_message=\"custom %(name)s message\"\n         )\n         self.assertEqual(c.get_violation_error_message(), \"custom base_name message\")\n+    def test_violation_error_code_in_validation(self):\n+        constraint = BaseConstraint(\n+            name=\"base_name\",\n+            violation_error_code=\"custom_code\"\n+        )\n+        fake_instance = type('FakeInstance', (object,), {\"base_name\": \"test\"})\n \n-    def test_custom_violation_error_message_clone(self):\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(model=None, instance=fake_instance)\n+        self.assertEqual(cm.exception.code, \"custom_code\")\n         constraint = BaseConstraint(\n             name=\"base_name\",\n             violation_error_message=\"custom %(name)s message\",\n",
  "django__django-16569": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 55da562..bc87868 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1476,6 +1476,20 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertNotIn(\"DELETE\", formset.forms[1].fields)\n \n         formset = ChoiceFormFormset(initial=[{\"choice\": \"Zero\", \"votes\": \"1\"}])\n+\n+    def test_formset_empty_form_does_not_include_delete_field(self):\n+        # Test that the empty_form does not include DELETE field when \n+        # can_delete_extra is False and index is None.\n+        class MyForm(forms.Form):\n+            my_field = forms.CharField()\n+\n+        MyFormSet = forms.formset_factory(\n+            form=MyForm,\n+            can_delete=True,\n+            can_delete_extra=False,\n+        )\n+        formset = MyFormSet(initial=None)\n+        self.assertNotIn(\"DELETE\", formset.empty_form.fields)\n         self.assertEqual(len(formset), 3)\n         self.assertIn(\"DELETE\", formset.forms[0].fields)\n         self.assertNotIn(\"DELETE\", formset.forms[1].fields)\n",
  "django__django-16595": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3979e76..228c563 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -42,6 +42,31 @@ class OptimizerTests(SimpleTestCase):\n \n     def assertDoesNotOptimize(self, operations, **kwargs):\n         self.assertOptimizesTo(operations, operations, **kwargs)\n+    def test_alter_alter_field_reduction(self):\n+        # Test that multiple AlterField operations on the same field will reduce to the last one.\n+        operations = [\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=256, null=True)),\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True)),\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\")),\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\", default=None)),\n+        ]\n+        expected = [\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\", default=None)),\n+        ]\n+        self.assertOptimizesTo(operations, expected)\n+\n+    def test_alter_field_with_initial_add(self):\n+        # Test sequence with initial AddField, ensuring it optimizes correctly.\n+        operations = [\n+            migrations.AddField(\"book\", \"title\", models.CharField(max_length=256, null=True)),\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True)),\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\")),\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\", default=None)),\n+        ]\n+        expected = [\n+            migrations.AddField(\"book\", \"title\", models.CharField(max_length=256, null=True)),\n+        ]\n+        self.assertOptimizesTo(operations, expected)\n \n     def test_none_app_label(self):\n         optimizer = MigrationOptimizer()\n",
  "django__django-16612": "",
  "django__django-16642": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 499356e..8601b54 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -255,6 +255,8 @@ class FileResponseTests(SimpleTestCase):\n             (\".tar.gz\", \"application/gzip\"),\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n+            (\".tar.br\", \"application/x-brotli\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n         )\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n@@ -262,6 +264,12 @@ class FileResponseTests(SimpleTestCase):\n                     response = FileResponse(tmp)\n                 self.assertEqual(response.headers[\"Content-Type\"], mimetype)\n                 self.assertFalse(response.has_header(\"Content-Encoding\"))\n+        for extension, mimetype in test_tuples:\n+            with self.subTest(ext=extension):\n+                with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n+                    response = FileResponse(tmp)\n+                self.assertEqual(response.headers[\"Content-Type\"], mimetype)\n+                self.assertFalse(response.has_header(\"Content-Encoding\"))\n \n     def test_unicode_attachment(self):\n         response = FileResponse(\n",
  "django__django-16661": "diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py\nindex 8cb88da..e4f2be6 100644\n--- a/tests/modeladmin/tests.py\n+++ b/tests/modeladmin/tests.py\n@@ -154,6 +154,38 @@ class ModelAdminTests(TestCase):\n             ma.lookup_allowed(\"employee__department__code\", \"test_value\"), True\n         )\n \n+    @isolate_apps('modeladmin')\n+    def test_lookup_allowed_foreign_primary_extended(self):\n+        class Country(models.Model):\n+            name = models.CharField(max_length=256)\n+        \n+        class Place(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+        \n+        class Restaurant(models.Model):\n+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)\n+        \n+        class Waiter(models.Model):\n+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n+        \n+        class WaiterAdmin(ModelAdmin):\n+            list_filter = [\n+                'restaurant__place__country',\n+                'restaurant__place__country__name',\n+            ]\n+        \n+        ma = WaiterAdmin(Waiter, self.site)\n+        # Original test case\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country\", \"1\"), True)\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country__id__exact\", \"1\"), True)\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country__name\", \"test_value\"), True)\n+        \n+        # Additional test cases for more scenarios\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country__name__startswith\", \"A\"), True)\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country__name__exact\", \"USA\"), True)\n+        # Negative case where lookup should not be allowed\n+        self.assertIs(ma.lookup_allowed(\"restaurant__country\", \"1\"), False)\n+\n     def test_field_arguments(self):\n         # If fields is specified, fieldsets_add and fieldsets_change should\n         # just stick the fields into a formsets structure and return it.\n",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..c305790 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -922,7 +922,29 @@ class WriterTests(SimpleTestCase):\n             output,\n         )\n \n-    def test_migration_file_header_comments(self):\n+    def test_multiple_sorted_imports(self):\n+        \"\"\"\n+        Test that multiple imports are sorted correctly.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield\",\n+                        models.FloatField(default=time.time),\n+                    ),\n+                ]\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        self.assertIn(\n+            \"import datetime\\nimport time\\nfrom django.db import migrations, models\\n\",\n+            output,\n+        )\n         \"\"\"\n         Test comments at top of file.\n         \"\"\"\n",
  "django__django-16801": "diff --git a/tests/model_fields/test_imagefield.py b/tests/model_fields/test_imagefield.py\nindex 9bf7f7d..53c0bc1 100644\n--- a/tests/model_fields/test_imagefield.py\n+++ b/tests/model_fields/test_imagefield.py\n@@ -328,6 +328,30 @@ class ImageFieldNoDimensionsTests(ImageFieldTwoDimensionsTests):\n \n     PersonModel = Person\n \n+from django.db.models import signals\n+\n+@skipIf(Image is None, \"Pillow is required to test ImageField\")\n+class ImageFieldSignalTests(TestCase):\n+    \"\"\"\n+    Tests to ensure ImageField does not connect to post_init\n+    signal when width_field and height_field are not set.\n+    \"\"\"\n+\n+    def test_post_init_not_connected(self):\n+        # Assuming PersonModel has an ImageField with no width_field or height_field\n+        person_model_id = id(self.PersonModel)\n+        self.assertNotIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id), *_ in signals.post_init.receivers],\n+        )\n+\n+    def test_post_init_connected_with_dimensions(self):\n+        # Assuming PersonWithDimensionsModel has an ImageField with width_field and/or height_field set\n+        person_with_dimensions_model_id = id(PersonWithDimensionsModel)\n+        self.assertIn(\n+            person_with_dimensions_model_id,\n+            [sender_id for (_, sender_id), *_ in signals.post_init.receivers],\n+        )\n \n @skipIf(Image is None, \"Pillow is required to test ImageField\")\n class ImageFieldOneDimensionTests(ImageFieldTwoDimensionsTests):\n",
  "django__django-16819": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex ac93153..18b6ab2 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -1148,6 +1148,52 @@ class OptimizerTests(SimpleTestCase):\n             ],\n             [migrations.RenameIndex(\"Pony\", new_name=\"new_name\", old_name=\"old_name\")],\n         )\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"weight\", \"pink\"], name=\"idx_pony_weight_pink\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_weight_pink\"),\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"height\", \"green\"], name=\"idx_pony_height_green\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_height_green\"),\n+            ],\n+            [],\n+        )\n+\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"weight\"], name=\"idx_pony_weight\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_weight\"),\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"height\"], name=\"idx_pony_height\"\n+                    ),\n+                ),\n+            ],\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"height\"], name=\"idx_pony_height\"\n+                    ),\n+                ),\n+            ],\n+        )\n+\n         self.assertDoesNotOptimize(\n             [\n                 migrations.RenameIndex(\n@@ -1157,4 +1203,4 @@ class OptimizerTests(SimpleTestCase):\n                     \"Pony\", new_name=\"new_name\", old_fields=(\"weight\", \"pink\")\n                 ),\n             ]\n-        )\n+        )\n",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..30eff86 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -790,8 +790,21 @@ class SystemChecksTestCase(SimpleTestCase):\n \n         errors = SongAdmin(Song, AdminSite()).check()\n         self.assertEqual(errors, [])\n+    \n+    def test_nonexistent_field_with_name(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            readonly_fields = (\"title\", \"nonexistent\")\n \n-    def test_nonexistent_field(self):\n+        errors = SongAdmin(Song, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[1]' refers to 'nonexistent', which is \"\n+                \"not a callable, an attribute of 'SongAdmin', or an attribute of 'admin_checks.Song'.\",\n+                obj=SongAdmin,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n         class SongAdmin(admin.ModelAdmin):\n             readonly_fields = (\"title\", \"nonexistent\")\n \n@@ -805,8 +818,22 @@ class SystemChecksTestCase(SimpleTestCase):\n             )\n         ]\n         self.assertEqual(errors, expected)\n+    \n+    def test_nonexistent_field_on_inline_with_name(self):\n+        class CityInline(admin.TabularInline):\n+            model = City\n+            readonly_fields = [\"i_dont_exist\"]  # Missing attribute\n \n-    def test_nonexistent_field_on_inline(self):\n+        errors = CityInline(State, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' refers to 'i_dont_exist', which is \"\n+                \"not a callable, an attribute of 'CityInline', or an attribute of 'admin_checks.City'.\",\n+                obj=CityInline,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n         class CityInline(admin.TabularInline):\n             model = City\n             readonly_fields = [\"i_dont_exist\"]  # Missing attribute\n",
  "django__django-16901": "",
  "django__django-17029": "",
  "django__django-17084": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1e0d80c..31e00d8 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -28,8 +28,12 @@ from django.db.models import (\n     Value,\n     Variance,\n     When,\n+    Window,\n+    F,\n+    Avg,\n+    Count\n )\n-from django.db.models.expressions import Func, RawSQL\n+from django.db.models.expressions import Func, RawSQL, Window\n from django.db.models.functions import (\n     Cast,\n     Coalesce,\n@@ -2206,4 +2210,23 @@ class AggregateAnnotationPruningTests(TestCase):\n             )\n         sql = ctx.captured_queries[0][\"sql\"].lower()\n         self.assertEqual(sql.count(\"select\"), 3, \"Subquery wrapping required\")\n-        self.assertEqual(aggregate, {\"sum_total_books\": 3})\n+        self.assertEqual(aggregate, {\"sum_total_books\": 3})\n+\n+    @skipUnlessDBFeature(\"supports_over_clause\")\n+    def test_aggregate_over_window_function(self):\n+        # This test replicates the issue where an aggregate is used over a window function.\n+        queryset = Book.objects.annotate(\n+            cumul_DJR=Coalesce(\n+                Window(Sum(\"DJR\"), order_by=F(\"date\").asc()),\n+                0.0,\n+            )\n+        )\n+        with self.assertNumQueries(1) as ctx:\n+            aggregate = queryset.aggregate(\n+                DJR_total=Sum(\"DJR\"),\n+                cumul_DJR_total=Sum(\"cumul_DJR\"),\n+            )\n+        sql = ctx.captured_queries[0][\"sql\"].lower()\n+        self.assertIn(\"select\", sql, \"Expected a valid subquery\")\n+        self.assertIn(\"sum\", sql, \"Expected to see sum function in SQL\")\n+        # We can't assert against the actual value since this test is for a fix that might not yet be applied.\n",
  "django__django-17087": "",
  "django__django-7530": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex a74680b..65ff735 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -641,7 +641,29 @@ class MakeMigrationsTests(MigrationTestBase):\n                 allow_migrate.assert_called_with('other', 'migrations', model_name='UnicodeModel')\n                 self.assertEqual(ensure_schema.call_count, 4)\n \n-    def test_failing_migration(self):\n+    def test_makemigrations_respects_app_label_and_model_pairs(self):\n+        \"\"\"\n+        Test that makemigrations calls allow_migrate() only with models belonging\n+        to the app being migrated, not all models in the project.\n+        \"\"\"\n+        apps.register_model('migrations', UnicodeModel)\n+        apps.register_model('migrations2', UnserializableModel)\n+\n+        with self.temporary_migration_module('migrations') as migration_dir:\n+            with mock.patch('migrations.routers.TestRouter.allow_migrate', return_value=True) as allow_migrate:\n+                call_command('makemigrations', 'migrations', verbosity=0)\n+                \n+                # Assert allow_migrate is called with models from the 'migrations' app only\n+                allow_migrate.assert_any_call('default', 'migrations', model_name='UnicodeModel')\n+                allow_migrate.assert_any_call('other', 'migrations', model_name='UnicodeModel')\n+                \n+                # Ensure it is not called with models from 'migrations2'\n+                with self.assertRaises(AssertionError):\n+                    allow_migrate.assert_any_call('default', 'migrations2', model_name='UnserializableModel')\n+        \n+        # Clean up registered models\n+        apps.unregister_model('migrations', UnicodeModel)\n+        apps.unregister_model('migrations2', UnserializableModel)\n         # If a migration fails to serialize, it shouldn't generate an empty file. #21280\n         apps.register_model('migrations', UnserializableModel)\n \n",
  "django__django-9296": "diff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\nindex b9b5fbc..2a064d9 100644\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -309,7 +309,28 @@ class ModelPaginationTests(TestCase):\n             a = Article(headline='Article %s' % x, pub_date=datetime(2005, 7, 29))\n             a.save()\n \n-    def test_first_page(self):\n+    def test_paginator_iteration_empty_list(self):\n+        paginator = Paginator([], 2)\n+        page_iterator = iter(paginator)\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_paginator_iteration_single_element(self):\n+        paginator = Paginator([1], 2)\n+        page_iterator = iter(paginator)\n+        with self.subTest(page=1):\n+            self.assertEqual([1], list(next(page_iterator)))\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_paginator_iteration_more_elements_than_page_size(self):\n+        paginator = Paginator([1, 2, 3, 4, 5], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2], [3, 4], [5]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n         paginator = Paginator(Article.objects.order_by('id'), 5)\n         p = paginator.page(1)\n         self.assertEqual(\"<Page 1 of 2>\", str(p))\n",
  "matplotlib__matplotlib-13989": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5483eef..1e126eb 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6359,13 +6359,37 @@ def test_hist_auto_bins():\n \n def test_hist_nan_data():\n     fig, (ax1, ax2) = plt.subplots(2)\n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n+def test_hist_range_and_density():\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_density_false():\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=False)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_no_range():\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", density=True)\n+    assert bins[0] >= 0\n+    assert bins[-1] <= 1\n+\n+def test_hist_custom_bins():\n+    _, bins, _ = plt.hist(np.random.rand(10), bins=5, range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n \n-    data = [1, 2, 3]\n-    nan_data = data + [np.nan]\n+def test_hist_custom_bins_density_false():\n+    _, bins, _ = plt.hist(np.random.rand(10), bins=5, range=(0, 1), density=False)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n \n     bins, edges, _ = ax1.hist(data)\n     with np.errstate(invalid='ignore'):\n         nanbins, nanedges, _ = ax2.hist(nan_data)\n \n     assert np.allclose(bins, nanbins)\n-    assert np.allclose(edges, nanedges)\n+    assert np.allclose(edges, nanedges)\n",
  "matplotlib__matplotlib-14623": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c9ad946..b60d963 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -930,6 +930,27 @@ def test_inverted_limits():\n     assert ax.get_ylim() == (-3, 5)\n     plt.close()\n \n+def test_log_scale_inverted_axis():\n+    # Test inverting a log scale y-axis using set_ylim\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(10, 1)\n+    assert ax.get_ylim() == (10, 1)\n+    plt.close()\n+\n+    # Test inverting both axes using set_xlim and set_ylim\n+    x = np.linspace(0.1, 10, 100)\n+    y = np.linspace(1000e2, 1, 100)\n+    fig, ax = plt.subplots()\n+    ax.plot(x, y)\n+    ax.set_xscale('log')\n+    ax.set_yscale('log')\n+    ax.set_xlim(x.max(), x.min())\n+    ax.set_ylim(y.max(), y.min())\n+    assert ax.get_xlim() == (x.max(), x.min())\n+    assert ax.get_ylim() == (y.max(), y.min())\n+    plt.close()\n+\n     fig, ax = plt.subplots()\n     ax.invert_yaxis()\n     ax.plot([-5, -3, 2, 4], [1, 2, -3, 5])\n@@ -938,6 +959,27 @@ def test_inverted_limits():\n     assert ax.get_ylim() == (5, -3)\n     plt.close()\n \n+def test_log_scale_inverted_axis():\n+    # Test inverting a log scale y-axis using set_ylim\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(10, 1)\n+    assert ax.get_ylim() == (10, 1)\n+    plt.close()\n+\n+    # Test inverting both axes using set_xlim and set_ylim\n+    x = np.linspace(0.1, 10, 100)\n+    y = np.linspace(1000e2, 1, 100)\n+    fig, ax = plt.subplots()\n+    ax.plot(x, y)\n+    ax.set_xscale('log')\n+    ax.set_yscale('log')\n+    ax.set_xlim(x.max(), x.min())\n+    ax.set_ylim(y.max(), y.min())\n+    assert ax.get_xlim() == (x.max(), x.min())\n+    assert ax.get_ylim() == (y.max(), y.min())\n+    plt.close()\n+\n \n @image_comparison(baseline_images=['nonfinite_limits'])\n def test_nonfinite_limits():\n",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..746f571 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6960,8 +6960,25 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[3].hist(np.arange(10), color=color.reshape((1, -1)))\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n+from matplotlib.testing.decorators import check_figures_equal\n+import numpy as np\n+import matplotlib.pyplot as plt\n \n-def test_shared_axes_retick():\n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear(fig_test, fig_ref):\n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    # Reference figure\n+    axs_ref = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_ref.flat:\n+        ax.plot(x, y)\n+\n+    # Test figure with ax.clear()\n+    axs_test = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_test.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n \n     for ax in axs.flat:\n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "",
  "matplotlib__matplotlib-22865": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex 2c28713..3f49ec1 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -929,6 +929,28 @@ def test_negative_boundarynorm():\n     np.testing.assert_allclose(cb.ax.get_ylim(), [clevs[0], clevs[-1]])\n     np.testing.assert_allclose(cb.ax.get_yticks(), clevs)\n \n+\n+@pytest.mark.parametrize(\"extend, coloroffset, expected_segments\", [\n+    ('both', 1, [np.array([[0., 0.], [0., 1.]]), np.array([[1., 0.], [1., 1.]]), np.array([[2., 0.], [2., 1.]])]),\n+    ('min', 0, [np.array([[0., 0.], [0., 1.]]), np.array([[1., 0.], [1., 1.]])]),\n+    ('max', 0, [np.array([[1., 0.], [1., 1.]]), np.array([[2., 0.], [2., 1.]])]),\n+    ('neither', -1, [np.array([[1., 0.], [1., 1.]])])\n+])\n+def test_colorbar_extend_drawedges(extend, coloroffset, expected_segments):\n+    cmap = plt.get_cmap(\"viridis\")\n+    bounds = np.arange(3)\n+    nb_colors = len(bounds) + coloroffset\n+    colors = cmap(np.linspace(100, 255, nb_colors).astype(int))\n+    cmap, norm = mcolors.from_levels_and_colors(bounds, colors, extend=extend)\n+\n+    fig, ax = plt.subplots(figsize=(5, 1))\n+    cbar = mpl.colorbar.ColorbarBase(ax, cmap=cmap, norm=norm, orientation='horizontal', drawedges=True)\n+    result_segments = cbar.dividers.get_segments()\n+\n+    # Assert that the segments match the expected result\n+    for res, exp in zip(result_segments, expected_segments):\n+        np.testing.assert_allclose(res, exp)\n+\n     clevs = np.arange(85, 94)\n     norm = BoundaryNorm(clevs, cmap.N)\n     cb = fig.colorbar(cm.ScalarMappable(cmap=cmap, norm=norm), cax=ax)\n",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..b448909 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -490,13 +490,27 @@ def test_validate_fontstretch(stretch, parsed_stretch):\n         assert validate_fontstretch(stretch) == parsed_stretch\n \n \n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend, rc_context\n+import pytest\n+\n def test_keymaps():\n     key_list = [k for k in mpl.rcParams if 'keymap' in k]\n     for k in key_list:\n         assert isinstance(mpl.rcParams[k], list)\n \n-\n-def test_rcparams_reset_after_fail():\n+def test_get_backend_does_not_clear_figures_in_rc_context():\n+    # Test to ensure that calling get_backend does not clear figures created\n+    # within an rc_context.\n+    with rc_context():\n+        fig = plt.figure()\n+        # Capture the state before calling get_backend.\n+        before = (id(plt._pylab_helpers.Gcf), plt._pylab_helpers.Gcf.figs.copy())\n+        get_backend()\n+        # Capture the state after calling get_backend.\n+        after = (id(plt._pylab_helpers.Gcf), plt._pylab_helpers.Gcf.figs.copy())\n+        \n+        assert before == after, f\"Figures were cleared after get_backend call: \\nBefore: {before} \\nAfter: {after}\"\n     # There was previously a bug that meant that if rc_context failed and\n     # raised an exception due to issues in the supplied rc parameters, the\n     # global rc parameters were left in a modified state.\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..935ccaa 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -14,6 +14,7 @@ from matplotlib.collections import LineCollection, PolyCollection\n from matplotlib.patches import Circle\n \n import matplotlib.pyplot as plt\n+from matplotlib.testing.decorators import check_figures_equal\n import numpy as np\n \n \n@@ -21,7 +22,15 @@ mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n \n-def test_aspect_equal_error():\n+@check_figures_equal(extensions=[\"png\"])\n+def test_set_visible_3d(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot(projection='3d')\n+    ax_test.scatter(1, 1, 1)\n+    ax_test.set_visible(False)\n+\n+    ax_ref = fig_ref.add_subplot(projection='3d')\n+    ax_ref.scatter(1, 1, 1)\n+    ax_ref.set_visible(True)\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n     with pytest.raises(NotImplementedError):\n",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..2cf248f 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -148,6 +148,43 @@ def test_rotate_rect_draw(fig_test, fig_ref):\n     rect_test.set_angle(angle)\n     assert rect_test.get_angle() == angle\n \n+from matplotlib.patches import Rectangle\n+import matplotlib.pyplot as plt\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=['png'])\n+def test_dash_offset_patch_draw(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n+\n+    loc = (0.1, 0.1)\n+    width, height = (0.8, 0.8)\n+    rect_ref = Rectangle(loc, width, height, linewidth=3, edgecolor='b',\n+                                                linestyle=(0, [6, 6]))\n+    # fill the line gaps using a linestyle (0, [0, 6, 6, 0]), which is\n+    # equivalent to (6, [6, 6]) but has 0 dash offset\n+    rect_ref2 = Rectangle(loc, width, height, linewidth=3, edgecolor='r',\n+                                            linestyle=(0, [0, 6, 6, 0]))\n+    assert rect_ref.get_linestyle() == (0, [6, 6])\n+    assert rect_ref2.get_linestyle() == (0, [0, 6, 6, 0])\n+\n+    ax_ref.add_patch(rect_ref)\n+    ax_ref.add_patch(rect_ref2)\n+\n+    # Check that the dash offset of the rect is the same if we pass it in the\n+    # init method and if we create two rects with appropriate onoff sequence\n+    # of linestyle.\n+\n+    rect_test = Rectangle(loc, width, height, linewidth=3, edgecolor='b',\n+                                                    linestyle=(0, [6, 6]))\n+    rect_test2 = Rectangle(loc, width, height, linewidth=3, edgecolor='r',\n+                                                    linestyle=(6, [6, 6]))\n+    assert rect_test.get_linestyle() == (0, [6, 6])\n+    assert rect_test2.get_linestyle() == (6, [6, 6])\n+\n+    ax_test.add_patch(rect_test)\n+    ax_test.add_patch(rect_test2)\n+\n \n def test_negative_rect():\n     # These two rectangles have the same vertices, but starting from a\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..a28a870 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2866,8 +2866,33 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+import pytest\n \n-@image_comparison(['stackplot_test_baseline'], remove_text=True)\n+def test_stackplot_with_color_cycle():\n+    # Test if stackplot works without changing the property cycle\n+    x = np.array([1, 2, 3])\n+    y = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+\n+    fig, ax = plt.subplots()\n+    # Test initial property cycle\n+    initial_colors = [next(ax._get_lines.prop_cycler)['color'] for _ in range(3)]\n+    \n+    # Plot with stackplot using color cycle references\n+    ax.stackplot(x, y, colors=['C0', 'C1', 'C2'])\n+    \n+    # Check if stackplot colors were correctly applied and the cycle is unaffected\n+    stackplot_colors = [poly.get_facecolor()[0] for poly in ax.collections]\n+    expected_colors = [plt.get_cmap()(plt.colors.to_rgba('C0')),\n+                       plt.get_cmap()(plt.colors.to_rgba('C1')),\n+                       plt.get_cmap()(plt.colors.to_rgba('C2'))]\n+    \n+    assert all([np.allclose(stackplot_colors[i], expected_colors[i], atol=0.01) for i in range(3)])\n+    \n+    # Check if the property cycle has not been modified by stackplot\n+    final_colors = [next(ax._get_lines.prop_cycler)['color'] for _ in range(3)]\n+    assert initial_colors == final_colors\n def test_stackplot_baseline():\n     np.random.seed(0)\n \n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 45f9c04..fcaab95 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -13,7 +13,7 @@ from matplotlib.backend_bases import MouseButton, MouseEvent\n \n from matplotlib.offsetbox import (\n     AnchoredOffsetbox, AnnotationBbox, AnchoredText, DrawingArea, OffsetBox,\n-    OffsetImage, TextArea, _get_packed_offsets)\n+    OffsetImage, TextArea, _get_packed_offsets, HPacker, VPacker)\n \n \n @image_comparison(['offsetbox_clipping'], remove_text=True)\n@@ -334,4 +334,35 @@ def test_arrowprops_copied():\n                         boxcoords=\"axes fraction\", box_alignment=(0., .5),\n                         arrowprops=arrowprops)\n     assert ab.arrowprops is not ab\n-    assert arrowprops[\"relpos\"] == (.3, .7)\n+    assert arrowprops[\"relpos\"] == (.3, .7)\n+\n+@pytest.mark.parametrize(\"align\", [\"top\", \"bottom\"])\n+def test_hpacker_alignment_issue(align):\n+    # Create two DrawingArea objects with different heights\n+    da1 = DrawingArea(10, 20)\n+    da2 = DrawingArea(10, 30)\n+\n+    # Create rectangles for visual reference\n+    rect1 = mpatches.Rectangle((0, 0), 10, 20, facecolor=\"red\")\n+    rect2 = mpatches.Rectangle((0, 0), 10, 30, facecolor=\"blue\")\n+    da1.add_artist(rect1)\n+    da2.add_artist(rect2)\n+\n+    # Create HPacker with the specified alignment\n+    hpacker = HPacker(children=[da1, da2], pad=0, sep=0, align=align)\n+    fig, ax = plt.subplots()\n+    ax.add_artist(hpacker)\n+    ax.set_xlim(0, 40)\n+    ax.set_ylim(0, 40)\n+    ax.set_aspect('equal')\n+\n+    renderer = fig.canvas.get_renderer()\n+    \n+    # Validate alignment\n+    *_, offset_pairs = hpacker.get_extent_offsets(renderer)\n+    if align == \"bottom\":\n+        # In \"bottom\" alignment, the second element should be aligned at the same y as the first\n+        assert_allclose(offset_pairs[0][1], offset_pairs[1][1])\n+    elif align == \"top\":\n+        # In \"top\" alignment, the second element should be shifted up by the difference in height\n+        assert_allclose(offset_pairs[0][1], offset_pairs[1][1] + 10)  # 30-20=10\n",
  "matplotlib__matplotlib-24627": "",
  "matplotlib__matplotlib-24637": "",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..224bbf9 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -20,6 +20,24 @@ import matplotlib.scale as mscale\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n \n \n+import numpy as np\n+import pytest\n+from numpy.testing import assert_array_equal\n+import matplotlib as mpl\n+import matplotlib.colors as mcolors\n+\n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.float16, float])\n+def test_index_dtype_no_deprecation(dtype):\n+    \"\"\"\n+    Test to ensure no deprecation warnings are raised for dtype conversion.\n+    Specifically tests conversion of out-of-bound integers to uint8.\n+    \"\"\"\n+    cm = mpl.colormaps[\"viridis\"]\n+    with pytest.warns(None) as record:\n+        cm(dtype(0))\n+    # Ensure no warnings are captured\n+    assert len(record) == 0\n+\n @pytest.mark.parametrize('N, result', [\n     (5, [1, .6, .2, .1, 0]),\n     (2, [1, 0]),\n",
  "matplotlib__matplotlib-25122": "",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..8917528 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,6 +7801,9 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+import matplotlib.pyplot as plt\n+import pytest\n+\n def test_ytickcolor_is_not_yticklabelcolor():\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..cc6eca0 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -89,8 +90,28 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import pickletools\n \n @mpl.style.context(\"default\")\n+def test_pickle_figure_with_draggable_legend():\n+    fig, ax = plt.subplots()\n+    ax.plot([0, 1, 2], [0, 1, 0], label='Test')\n+    legend = ax.legend()\n+    legend.set_draggable(True)\n+\n+    # Pickle the figure\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+\n+    # Ensure \"FigureCanvasAgg\" or similar backend-specific canvas is not in the pickle stream\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+\n+    # Unpickle the figure to ensure it can be restored\n+    loaded_fig = pickle.loads(pkl)\n+    assert loaded_fig is not None\n+\n+    # Clean up\n+    plt.close(fig)\n+    plt.close(loaded_fig)\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..667aefc 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -44,6 +44,35 @@ def test_simple():\n     pickle.dump(fig, BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+import pickle\n+from io import BytesIO\n+\n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()  # Attempt to align labels before pickling\n+\n+    try:\n+        # Try to pickle the figure\n+        pickle_data = pickle.dumps(fig)\n+        print(\"Pickling succeeded\")\n+    except Exception as e:\n+        # If pickling fails, print the exception\n+        print(f\"Pickling failed: {e}\")\n+\n+    plt.close(fig)\n+\n def _generate_complete_test_figure(fig_ref):\n     fig_ref.set_size_inches((10, 6))\n     plt.figure(fig_ref)\n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..752fb16 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -991,8 +991,69 @@ def test_hexbin_linear():\n     ax.hexbin(x, y, gridsize=(10, 5), marginals=True,\n               reduce_C_function=np.sum)\n \n+from matplotlib.testing.decorators import check_figures_equal\n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_behavior_upon_C_parameter(fig_test, fig_ref):\n+    # see: gh:12926\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # without C parameter\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # with C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=[1] * len(X),\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n+\n+def test_hexbin_mincnt_with_C_zero():\n+    fig, ax = plt.subplots()\n+    X = [0, 0, 6]\n+    Y = [0, 6, 0]\n+    C = [1, 1, 1]\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (5, 5)\n+\n+    hb = ax.hexbin(X, Y, C=C, reduce_C_function=np.sum, mincnt=0, extent=extent, gridsize=gridsize)\n+    assert len(hb.get_array().compressed()) == len(X)\n+\n+def test_hexbin_mincnt_with_C_two():\n+    fig, ax = plt.subplots()\n+    X = [0, 0, 6]\n+    Y = [0, 6, 0]\n+    C = [1, 1, 1]\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (5, 5)\n \n-def test_hexbin_log_clim():\n+    hb = ax.hexbin(X, Y, C=C, reduce_C_function=np.sum, mincnt=2, extent=extent, gridsize=gridsize)\n+    assert len(hb.get_array().compressed()) == 1\n     x, y = np.arange(200).reshape((2, 100))\n     fig, ax = plt.subplots()\n     h = ax.hexbin(x, y, bins='log', vmin=2, vmax=100)\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/collections.py b/lib/matplotlib/collections.py\nindex 37c6dcb..8589ba2 100644\n--- a/lib/matplotlib/collections.py\n+++ b/lib/matplotlib/collections.py\n@@ -207,7 +207,7 @@ class Collection(artist.Artist, cm.ScalarMappable):\n         return self._paths\n \n     def set_paths(self, paths):\n-        raise NotImplementedError\n+        self._paths = paths\n \n     def get_transforms(self):\n         return self._transforms\n",
  "mwaskom__seaborn-3069": "",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..f37bf53 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -244,6 +244,23 @@ def test_default_static_max_age(app):\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n \n+def test_empty_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"\", __name__)\n+\n+def test_whitespace_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"   \", __name__)\n+\n+def test_valid_name_allowed(app, client):\n+    blueprint = flask.Blueprint(\"valid_name\", __name__)\n+    assert blueprint.name == \"valid_name\"\n+\n+import pytest\n+import flask\n+\n+...\n+\n def test_templates_list(test_apps):\n     from blueprintapp import app\n \n",
  "psf__requests-1142": "",
  "psf__requests-1724": "diff --git a/requests/api.py b/requests/api.py\nindex 66d7f21..fa6e8dd 100644\n--- a/requests/api.py\n+++ b/requests/api.py\n@@ -11,7 +11,11 @@ This module implements the Requests API.\n \n \"\"\"\n \n+import os\n+import pytest\n from . import sessions\n+from . import request\n+from .compat import is_py2\n \n \n def request(method, url, **kwargs):\n@@ -44,7 +48,29 @@ def request(method, url, **kwargs):\n     return session.request(method=method, url=url, **kwargs)\n \n \n-def get(url, **kwargs):\n+def test_unicode_method_name():\n+    files = {'file': open('test_requests.py', 'rb')}\n+    r = request(method=u'POST', url='http://httpbin.org/post', files=files)\n+    assert r.status_code == 200\n+\n+def test_unicode_get_method():\n+    r = request(method=u'GET', url='http://httpbin.org/get')\n+    assert r.status_code == 200\n+\n+def test_unicode_put_method():\n+    files = {'file': open('test_requests.py', 'rb')}\n+    r = request(method=u'PUT', url='http://httpbin.org/put', files=files)\n+    assert r.status_code == 200\n+\n+def test_unicode_delete_method():\n+    r = request(method=u'DELETE', url='http://httpbin.org/delete')\n+    assert r.status_code == 200\n+\n+def test_non_ascii_url():\n+    # Ensuring non-ASCII characters in URL do not cause an error\n+    if is_py2:\n+        r = request(method=u'GET', url=u'http://httpbin.org/get?param=\u043f\u0440\u0438\u0432\u0435\u0442')\n+        assert r.status_code == 200\n     \"\"\"Sends a GET request. Returns :class:`Response` object.\n \n     :param url: URL for the new :class:`Request` object.\n",
  "psf__requests-1766": "",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..29dc917 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,7 +81,13 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://.example.com'),  # Empty label\n         ))\n+        \n+    def test_invalid_label_error(self):\n+        # Specifically test for the InvalidURL error on invalid labels\n+        with pytest.raises(InvalidURL, match=\"URL has an invalid label.\"):\n+            requests.get('http://.example.com')\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n             requests.get(url)\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..5f92a5b 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2308,8 +2308,24 @@ class TestAsCompatibleData:\n         orig = Variable(dims=(\"x\"), data=array, attrs={\"foo\": \"bar\"})\n         assert isinstance(orig._data, CustomIndexable)\n \n+# Additional test cases for the issue with `__setitem__` coercing types on objects with a values property\n+def test_setitem_with_object_with_values_property():\n+    import numpy as np\n+    from xarray import DataArray\n \n-def test_raise_no_warning_for_nan_in_binary_ops():\n+    class HasValues:\n+        values = 5\n+\n+    # Test for correct behavior when assigning an object with a 'values' property\n+    good_indexed = DataArray([None])\n+    bad_indexed = DataArray([None])\n+\n+    good_indexed.loc[{'dim_0': 0}] = set()\n+    assert good_indexed.values[0] == set()\n+\n+    bad_indexed.loc[{'dim_0': 0}] = HasValues()\n+    # Check that the object itself is stored, not its 'values' property\n+    assert isinstance(bad_indexed.values[0], HasValues)\n     with pytest.warns(None) as record:\n         Variable(\"x\", [1, 2, np.NaN]) > 0\n     assert len(record) == 0\n",
  "pydata__xarray-3095": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex d6a4400..ed845a1 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -2107,6 +2107,18 @@ class TestDataset:\n \n         assert_identical(ds.coords['a'], expected_orig)\n \n+    def test_unicode_index_copy(self):\n+        ds = xr.Dataset(\n+            coords={'x': ['foo'], 'y': ('x', ['bar'])},\n+            data_vars={'z': ('x', ['baz'])})\n+\n+        ds_copy = ds.copy(deep=True)\n+\n+        assert ds.x.dtype == ds_copy.x.dtype\n+        assert ds.x.dtype == '<U3'\n+        assert ds_copy.x.dtype == '<U3'\n+        assert_identical(ds, ds_copy)\n+\n     def test_copy_with_data_errors(self):\n         orig = create_test_data()\n         new_var1 = np.arange(orig['var1'].size).reshape(orig['var1'].shape)\n",
  "pydata__xarray-3151": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 026dec9..a984865 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -611,7 +611,29 @@ class TestCombineAuto:\n         expected = Dataset({'x': 0, 'y': 1, 'z': 2})\n         assert_identical(expected, actual)\n \n-    def test_check_for_impossible_ordering(self):\n+    def test_non_monotonic_identical_coords(self):\n+        # Test that combine_by_coords can handle non-monotonic identical coordinates without raising errors\n+        yCoord = ['a', 'c', 'b']\n+        data1 = np.random.rand(3, 3)\n+        data2 = np.random.rand(4, 3)\n+\n+        ds1 = Dataset(\n+            data_vars=dict(data=(['x', 'y'], data1)),\n+            coords=dict(x=[1, 2, 3], y=yCoord)\n+        )\n+\n+        ds2 = Dataset(\n+            data_vars=dict(data=(['x', 'y'], data2)),\n+            coords=dict(x=[4, 5, 6, 7], y=yCoord)\n+        )\n+\n+        expected = Dataset(\n+            data_vars=dict(data=(['x', 'y'], np.vstack([data1, data2]))),\n+            coords=dict(x=[1, 2, 3, 4, 5, 6, 7], y=yCoord)\n+        )\n+\n+        actual = combine_by_coords([ds1, ds2])\n+        assert_identical(expected, actual)\n         ds0 = Dataset({'x': [0, 1, 5]})\n         ds1 = Dataset({'x': [2, 3]})\n         with raises_regex(ValueError, \"does not have monotonic global indexes\"\n",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..b730c63 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2310,6 +2310,22 @@ class TestDataArray:\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n \n+    def test_quantile_keep_attrs(self):\n+        # Test DataArray with attributes\n+        da = xr.DataArray([0, 0], dims=\"x\", attrs={'units': 'K'})\n+        quantile_result = da.quantile(0.9, dim='x', keep_attrs=True)\n+        \n+        # Check that the attributes are preserved\n+        assert quantile_result.attrs == da.attrs\n+\n+        # Also test when keep_attrs is False\n+        quantile_result_no_attrs = da.quantile(0.9, dim='x', keep_attrs=False)\n+        assert quantile_result_no_attrs.attrs == {}\n+\n+        # Test with multiple quantiles\n+        multiple_quantiles_result = da.quantile([0.1, 0.9], dim='x', keep_attrs=True)\n+        assert multiple_quantiles_result.attrs == da.attrs\n+\n     def test_reduce_keep_attrs(self):\n         # Test dropped attrs\n         vm = self.va.mean()\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..2bcedec 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,8 +1,10 @@\n+\n import numpy as np\n import pytest\n \n import xarray as xr\n from xarray.core import dtypes, merge\n+from xarray.testing import assert_identical\n \n from . import raises_regex\n from .test_dataset import create_test_data\n@@ -159,6 +161,19 @@ class TestMergeMethod:\n         with raises_regex(ValueError, \"should be coordinates or not\"):\n             data.merge(data.reset_coords())\n \n+    def test_merge_dataarray(self):\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+\n+        # Test merging using Dataset's merge method\n+        assert_identical(ds.merge(da), xr.merge([ds, da]))\n+\n+        # Additional test: merging with different dimensions\n+        ds2 = xr.Dataset({\"a\": (\"x\", [0, 1])})\n+        da2 = xr.DataArray(data=[1, 2], dims=\"x\", name=\"b\")\n+        expected = xr.Dataset({\"a\": (\"x\", [0, 1]), \"b\": (\"x\", [1, 2])})\n+        assert_identical(ds2.merge(da2), expected)\n+\n     def test_merge_broadcast_equals(self):\n         ds1 = xr.Dataset({\"x\": 0})\n         ds2 = xr.Dataset({\"x\": (\"y\", [0, 0])})\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..f3f0b51 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -109,6 +109,30 @@ class TestMergeFunction:\n             expected.attrs = expected_attrs\n             assert actual.identical(expected)\n \n+    def test_merge_attrs_override_copy(self):\n+        import xarray as xr\n+        ds1 = xr.Dataset(attrs={\"a\": 0})\n+        ds2 = xr.Dataset(attrs={\"a\": 1})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        \n+        # Modify the merged dataset's attributes\n+        ds3.attrs[\"a\"] = 2\n+        \n+        # Ensure the modification does not affect the original datasets\n+        assert ds1.attrs[\"a\"] == 0\n+        assert ds2.attrs[\"a\"] == 1\n+        assert ds3.attrs[\"a\"] == 2\n+\n+        # Ensure modifying ds1 does not affect ds3\n+        ds1.attrs[\"a\"] = 3\n+        assert ds1.attrs[\"a\"] == 3\n+        assert ds3.attrs[\"a\"] == 2\n+\n+        # Ensure modifying ds2 does not affect ds3\n+        ds2.attrs[\"a\"] = 4\n+        assert ds2.attrs[\"a\"] == 4\n+        assert ds3.attrs[\"a\"] == 2\n+\n     def test_merge_dicts_simple(self):\n         actual = xr.merge([{\"foo\": 0}, {\"bar\": \"one\"}, {\"baz\": 3.5}])\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..cbdb601 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1922,6 +1922,36 @@ def test_where() -> None:\n     assert_identical(expected, actual)\n \n \n+def test_where_attrs() -> None:\n+    # Basic test for attribute preservation\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    actual = xr.where(cond, x, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected, actual)\n+\n+    # Test when keep_attrs is False\n+    actual_no_attrs = xr.where(cond, x, y, keep_attrs=False)\n+    expected_no_attrs = xr.DataArray([1, 0], dims=\"x\")\n+    assert_identical(expected_no_attrs, actual_no_attrs)\n+\n+    # Test with scalar values and attribute preservation\n+    scalar_x = 5\n+    scalar_y = 0\n+    actual_scalar = xr.where(cond, scalar_x, scalar_y, keep_attrs=True)\n+    expected_scalar = xr.DataArray([5, 0], dims=\"x\")\n+    assert_identical(expected_scalar, actual_scalar)\n+\n+    # Test dtype preservation\n+    data = xr.DataArray(np.ones([10, 10], dtype=np.int8))\n+    data.attrs[\"attr_1\"] = \"test1\"\n+    data2 = xr.where(data == 1, 5, 0, keep_attrs=True)\n+    expected_data = xr.DataArray(np.full((10, 10), 5, dtype=np.int8), attrs={\"attr_1\": \"test1\"})\n+    assert data2.attrs == expected_data.attrs\n+    assert data2.dtype == expected_data.dtype\n+\n+\n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n def test_polyval(use_dask, use_datetime) -> None:\n",
  "pydata__xarray-4695": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex 3a4b8ad..a4cdbdf 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -1165,6 +1165,19 @@ class TestDataArray:\n         assert_identical(da[\"x\"], get_data()[\"x\"])\n         assert_identical(da[\"non-dim\"], get_data()[\"non-dim\"])\n \n+    def test_loc_dim_name_collision_with_sel_params(self):\n+        import numpy as np\n+        import xarray as xr\n+\n+        da = xr.DataArray(\n+            [[0, 0], [1, 1]],\n+            dims=[\"dim1\", \"method\"],\n+            coords={\"dim1\": [\"x\", \"y\"], \"method\": [\"a\", \"b\"]},\n+        )\n+        np.testing.assert_array_equal(\n+            da.loc[dict(dim1=[\"x\", \"y\"], method=[\"a\"])], [[0], [1]]\n+        )\n+\n     def test_loc_single_boolean(self):\n         data = DataArray([0, 1], coords=[[True, False]])\n         assert data.loc[True] == 0\n",
  "pydata__xarray-4966": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex 2dbb0b4..f2a89ff 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -10,6 +10,19 @@ from xarray.conventions import decode_cf_variable, encode_cf_variable\n \n from . import assert_allclose, assert_equal, assert_identical, requires_dask\n \n+@pytest.mark.parametrize(\"bits\", [1, 2, 4, 8])\n+def test_handle_unsigned_false_for_signed_bytes(bits):\n+    unsigned_dtype = np.dtype(f\"u{bits}\")\n+    signed_dtype = np.dtype(f\"i{bits}\")\n+    original_values = np.array([-1, -128, 0, 127], dtype=signed_dtype)\n+    encoded = xr.Variable(\n+        (\"x\",), original_values.astype(unsigned_dtype), attrs={\"_Unsigned\": \"false\"}\n+    )\n+    coder = variables.UnsignedIntegerCoder()\n+    decoded = coder.decode(encoded)\n+    assert decoded.dtype == signed_dtype\n+    assert np.array_equal(decoded.values, original_values)\n+\n with suppress(ImportError):\n     import dask.array as da\n \n",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..0e0cc2b 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1919,6 +1919,12 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n+    # ensure keep_attrs can handle scalar values\n+    cond = xr.DataArray([True, False, True], dims=\"x\")\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\")\n+    assert_identical(expected, actual)\n+\n \n def test_where_attrs() -> None:\n     cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n@@ -1928,6 +1934,12 @@ def test_where_attrs() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n     assert_identical(expected, actual)\n \n+    # ensure keep_attrs can handle scalar values\n+    cond = xr.DataArray([True, False, True], dims=\"x\")\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\")\n+    assert_identical(expected, actual)\n+\n \n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n",
  "pydata__xarray-6599": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f1ec005..73b35e9 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -2010,6 +2010,18 @@ def test_where_attrs() -> None:\n             ),\n             id=\"datetime\",\n         ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array([1000, 2000, 3000], dtype=\"timedelta64[ns]\"), dims=\"x\"\n+            ),\n+            xr.DataArray(\n+                [0.0, 1.0], dims=\"degree\", coords={\"degree\": [0, 1]}\n+            ),\n+            xr.DataArray(\n+                [1000.0, 2000.0, 3000.0], dims=\"x\"\n+            ),\n+            id=\"timedelta\",\n+        ),\n     ],\n )\n def test_polyval(\n",
  "pydata__xarray-6721": "",
  "pydata__xarray-6744": "diff --git a/xarray/tests/test_rolling.py b/xarray/tests/test_rolling.py\nindex 0a9ef75..3e0abfa 100644\n--- a/xarray/tests/test_rolling.py\n+++ b/xarray/tests/test_rolling.py\n@@ -27,6 +27,19 @@ pytestmark = [\n \n class TestDataArrayRolling:\n     @pytest.mark.parametrize(\"da\", (1, 2), indirect=True)\n+    @pytest.mark.parametrize(\"center\", [True, False])\n+    @pytest.mark.parametrize(\"size\", [3])\n+    def test_rolling_iter_center(self, da, center, size) -> None:\n+        rolling_obj = da.rolling(time=size, center=center)\n+        rolling_obj_mean = rolling_obj.mean()\n+\n+        expected = da.rolling(time=size, center=center).construct().mean(\"time\")\n+\n+        for i, (label, window_da) in enumerate(rolling_obj):\n+            actual = window_da.mean(\"time\")\n+\n+            # Check if the actual values align with the expected values\n+            np.testing.assert_allclose(actual.values, expected.isel(time=i).values, equal_nan=True)\n     def test_rolling_iter(self, da) -> None:\n         rolling_obj = da.rolling(time=7)\n         rolling_obj_mean = rolling_obj.mean()\n",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "diff --git a/xarray/tests/test_indexes.py b/xarray/tests/test_indexes.py\nindex fa8bd84..9c8b739 100644\n--- a/xarray/tests/test_indexes.py\n+++ b/xarray/tests/test_indexes.py\n@@ -688,12 +688,20 @@ def test_safe_cast_to_index_cftimeindex():\n         assert isinstance(actual, type(expected))\n \n \n-# Test that datetime.datetime objects are never used in a CFTimeIndex\n-@requires_cftime\n-def test_safe_cast_to_index_datetime_datetime():\n-    dates = [datetime(1, 1, day) for day in range(1, 20)]\n+import pytest\n+import numpy as np\n+import xarray as xr\n \n-    expected = pd.Index(dates)\n-    actual = safe_cast_to_index(np.array(dates))\n-    assert_array_equal(expected, actual)\n-    assert isinstance(actual, pd.Index)\n+@pytest.mark.parametrize(\"dtype\", [\"int32\", \"int64\", \"float32\", \"float64\"])\n+def test_stack_preserves_dtype(dtype: str) -> None:\n+    ds = xr.Dataset(coords={\"coord\": (\"coord\", np.array([0, 1, 2], dtype=dtype))})\n+    stacked_ds = ds.stack(stacked_coord=(\"coord\",))\n+    assert ds[\"coord\"].values.dtype == stacked_ds[\"coord\"].values.dtype\n+\n+@pytest.mark.parametrize(\"dtype\", [\"int32\", \"int64\", \"float32\", \"float64\"])\n+def test_stack_identity_with_unstack(dtype: str) -> None:\n+    original_ds = xr.Dataset(coords={\"coord\": (\"coord\", np.array([0, 1, 2], dtype=dtype))})\n+    stacked_ds = original_ds.stack(stacked_coord=(\"coord\",))\n+    unstacked_ds = stacked_ds.unstack()\n+    assert original_ds[\"coord\"].values.dtype == unstacked_ds[\"coord\"].values.dtype\n+    assert np.array_equal(original_ds[\"coord\"].values, unstacked_ds[\"coord\"].values)\n",
  "pylint-dev__pylint-4970": "",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..7e98fd4 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -94,9 +94,34 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+from pytest import CaptureFixture\n+from pylint.lint import Run\n+from pathlib import Path\n+\n+EMPTY_MODULE = Path(\"empty_module.py\")\n+\n+def test_short_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the -v flag without argument.\"\"\"\n+    Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n+def test_long_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the --verbose flag.\"\"\"\n+    Run([str(EMPTY_MODULE), \"--verbose\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n+def test_verbose_argument_error(capsys: CaptureFixture) -> None:\n+    \"\"\"Check error when -v is followed by a non-existing argument.\"\"\"\n+    with pytest.raises(SystemExit):\n+        Run([str(EMPTY_MODULE), \"-v\", \"unexpected_argument\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"argument --verbose/-v: expected one argument\" in output.err\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "",
  "pylint-dev__pylint-7277": "diff --git a/pylint/__init__.py b/pylint/__init__.py\nindex 79f7224..dcef42a 100644\n--- a/pylint/__init__.py\n+++ b/pylint/__init__.py\n@@ -96,7 +96,8 @@ def modify_sys_path() -> None:\n       if pylint is installed in an editable configuration (as the last item).\n       https://github.com/PyCQA/pylint/issues/4161\n     \"\"\"\n-    sys.path.pop(0)\n+    if sys.path and sys.path[0] in (\"\", \".\", os.getcwd()):\n+        sys.path.pop(0)\n     env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")\n     cwd = os.getcwd()\n     if env_pythonpath.startswith(\":\") and env_pythonpath not in (f\":{cwd}\", \":.\"):\n@@ -105,4 +106,4 @@ def modify_sys_path() -> None:\n         sys.path.pop(1)\n \n \n-version = __version__\n+version = __version__\n",
  "pytest-dev__pytest-10051": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex 26c4c15..0070a60 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -160,6 +160,8 @@ def logging_during_setup_and_teardown(caplog):\n     assert [x.message for x in caplog.get_records(\"teardown\")] == [\"a_teardown_log\"]\n \n \n+import logging\n+\n def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardown):\n     assert not caplog.records\n     assert not caplog.get_records(\"call\")\n@@ -172,6 +174,38 @@ def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardow\n     assert set(caplog._item.stash[caplog_records_key]) == {\"setup\", \"call\"}\n \n \n+def test_caplog_get_records_and_clear_behavior(caplog):\n+    \"\"\"\n+    Test to check the behavior of caplog.get_records and caplog.clear\n+    to ensure they work consistently without conflicts.\n+    \"\"\"\n+    def verify_consistency():\n+        assert caplog.get_records(\"call\") == caplog.records\n+\n+    # Initial consistency check\n+    verify_consistency()\n+\n+    # Log a message and verify consistency\n+    logging.warning(\"first warning\")\n+    verify_consistency()\n+\n+    # Clear caplog and check if both caplog.records and caplog.get_records(\"call\") are cleared\n+    caplog.clear()\n+    assert caplog.records == []\n+    assert caplog.get_records(\"call\") == []\n+\n+    # Log another message and verify both caplog.records and caplog.get_records(\"call\") are updated\n+    logging.warning(\"second warning\")\n+    assert caplog.records != []\n+    assert caplog.get_records(\"call\") != []\n+    verify_consistency()\n+\n+    # Clear again and verify\n+    caplog.clear()\n+    assert caplog.records == []\n+    assert caplog.get_records(\"call\") == []\n+\n+\n def test_ini_controls_global_log_level(pytester: Pytester) -> None:\n     pytester.makepyfile(\n         \"\"\"\n",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 561df7f..d9b517c 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -1271,6 +1271,32 @@ def test_pdb_teardown_skipped(\n     )\n     result = pytester.runpytest_inprocess(\"--pdb\")\n     result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n+\n+def test_pdb_teardown_skipped_for_class_with_unittest_skip(pytester: Pytester) -> None:\n+    \"\"\"Test that tearDown is not executed for skipped classes with --pdb.\"\"\"\n+    tracked: List[str] = []\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+        import pytest\n+\n+        @unittest.skip(\"skipped for reasons\")\n+        class MyTestCase(unittest.TestCase):\n+\n+            def setUp(self):\n+                pytest.track_pdb_teardown_skipped.append(\"setUp:\" + self.id())\n+\n+            def tearDown(self):\n+                pytest.track_pdb_teardown_skipped.append(\"tearDown:\" + self.id())\n+\n+            def test_1(self):\n+                pass\n+\n+    \"\"\"\n+    )\n+    result = pytester.runpytest_inprocess(\"--pdb\")\n+    result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n+    assert tracked == []\n     assert tracked == []\n \n \n",
  "pytest-dev__pytest-5262": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 1f092b0..e868d7a 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -1042,6 +1042,26 @@ class TestFDCapture(object):\n             os.write(1, b\"world\")\n             sys.stdout.write(\"qlwkej\")\n             assert not cap.snap()\n+\n+    def test_encoded_file_mode(self):\n+        from _pytest.capture import EncodedFile\n+        import io\n+\n+        buffer = io.StringIO()\n+        encoded_file = EncodedFile(buffer, encoding=\"utf-8\")\n+\n+        # EncodedFile should not advertise a binary mode\n+        assert \"b\" not in getattr(encoded_file.buffer, \"mode\", \"\")\n+\n+    def test_encoded_file_write_bytes(self):\n+        from _pytest.capture import EncodedFile\n+        import io\n+\n+        buffer = io.StringIO()\n+        encoded_file = EncodedFile(buffer, encoding=\"utf-8\")\n+\n+        with pytest.raises(TypeError, match=r\"write\\(\\) argument must be str, not bytes\"):\n+            encoded_file.write(b\"bytes data\")\n             cap.resume()\n             os.write(1, b\"but now\")\n             sys.stdout.write(\" yes\\n\")\n",
  "pytest-dev__pytest-5631": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex e422b03..7c1d463 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,6 +1,7 @@\n import os\n import pprint\n import sys\n+import numpy as np\n import textwrap\n \n import py\n@@ -18,7 +19,21 @@ class TestCollector:\n         assert not issubclass(Collector, Item)\n         assert not issubclass(Item, Collector)\n \n-    def test_check_equality(self, testdir):\n+    def test_mock_sentinel_check_with_numpy_array(self, testdir):\n+        \"\"\"Test that patching with a numpy array as 'new' doesn't raise a ValueError.\"\"\"\n+        testdir.makepyfile(\n+            \"\"\"\n+            from unittest.mock import patch\n+            import numpy as np\n+\n+            class TestNumpyPatch:\n+                @patch('numpy.array', new=np.array([-5.5, 3.0]))\n+                def test_patch_array(self):\n+                    assert isinstance(np.array([-5.5, 3.0]), np.ndarray)\n+            \"\"\"\n+        )\n+        reprec = testdir.inline_run()\n+        reprec.assertoutcome(passed=1)\n         modcol = testdir.getmodulecol(\n             \"\"\"\n             def test_pass(): pass\n",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..98781a2 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -120,14 +120,43 @@ class TestPaste(object):\n             monkeypatch.setattr(urllib.request, \"urlopen\", mocked)\n         return calls\n \n-    def test_create_new_paste(self, pastebin, mocked_urlopen):\n+    def test_create_new_paste_with_text_lexer(self, pastebin, mocked_urlopen):\n+        # Set the contents for the paste\n+        contents = b\"full-paste-contents\"\n+\n+        # Create a new paste using the pastebin\n+        result = pastebin.create_new_paste(contents)\n+\n+        # Verify the result URL is correct\n+        assert result == \"https://bpaste.net/show/3c0c6750bd\"\n+\n+        # Ensure only one request was made\n+        assert len(mocked_urlopen) == 1\n+\n+        # Extract the URL and data from the mocked request\n+        url, data = mocked_urlopen[0]\n+\n+        # Verify the data type\n+        assert type(data) is bytes\n+\n+        # Verify the URL\n+        assert url == \"https://bpaste.net\"\n+\n+        # Ensure the lexer is set to \"text\"\n+        assert \"lexer=text\" in data.decode()\n+\n+        # Verify the contents are correct\n+        assert \"code=full-paste-contents\" in data.decode()\n+\n+        # Verify the expiry is set correctly\n+        assert \"expiry=1week\" in data.decode()\n         result = pastebin.create_new_paste(b\"full-paste-contents\")\n         assert result == \"https://bpaste.net/show/3c0c6750bd\"\n         assert len(mocked_urlopen) == 1\n         url, data = mocked_urlopen[0]\n         assert type(data) is bytes\n-        lexer = \"python3\" if sys.version_info[0] >= 3 else \"python\"\n+        lexer = \"text\"\n         assert url == \"https://bpaste.net\"\n         assert \"lexer=%s\" % lexer in data.decode()\n         assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n",
  "pytest-dev__pytest-6202": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex fb6b260..e15173c 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -673,6 +673,20 @@ class Test_genitems:\n                 pass\n         \"\"\"\n         )\n+        \n+        p_test = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            \n+            @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+            def testmethod_two(arg0):\n+                pass\n+            \"\"\"\n+        )\n+        items_test, reprec_test = testdir.inline_genitems(p_test)\n+        assert len(items_test) == 1\n+        assert items_test[0].name == 'testmethod_two[.[]'\n+        assert items_test[0].getmodpath() == 'testmethod_two[.[]'\n         p.copy(p.dirpath(p.purebasename + \"2\" + \".py\"))\n         items, reprec = testdir.inline_genitems(p.dirpath())\n         assert len(items) == 4\n@@ -696,6 +710,20 @@ class Test_genitems:\n                 pass\n         \"\"\"\n         )\n+        \n+        p_test = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            \n+            @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+            def testmethod_two(arg0):\n+                pass\n+            \"\"\"\n+        )\n+        items_test, reprec_test = testdir.inline_genitems(p_test)\n+        assert len(items_test) == 1\n+        assert items_test[0].name == 'testmethod_two[.[]'\n+        assert items_test[0].getmodpath() == 'testmethod_two[.[]'\n         items, reprec = testdir.inline_genitems(p)\n         assert len(items) == 3\n         assert items[0].name == \"testone\"\n",
  "pytest-dev__pytest-7205": "",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..5f1a630 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,9 +1,11 @@\n+\n import sys\n \n import pytest\n from _pytest.runner import runtestprotocol\n from _pytest.skipping import evaluate_skip_marks\n from _pytest.skipping import evaluate_xfail_marks\n+from _pytest.pytester import Testdir\n from _pytest.skipping import pytest_runtest_setup\n \n \n@@ -203,6 +205,31 @@ class TestXFail:\n         callreport = reports[1]\n         assert callreport.wasxfail\n \n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n+\n     def test_xfail_xpassed_strict(self, testdir):\n         item = testdir.getitem(\n             \"\"\"\n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..9adbb1f 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -512,6 +512,28 @@ class TestCaptureFixture:\n                 capfd.close()\n             \"\"\"\n         )\n+\n+    @pytest.mark.parametrize(\"newline\", [\"\\n\", \"\\r\", \"\\r\\n\"])\n+    def test_capfd_preserves_newlines(self, capfd, newline):\n+        \"\"\"\n+        This test ensures that the capfd fixture preserves different types of newlines\n+        (\\n, \\r, \\r\\n) as they are, without converting them.\n+        \"\"\"\n+        print(\"test\", end=newline)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(newline)\n+        assert err == \"\"\n+        \n+    def test_capfd_combined_newlines(self, capfd):\n+        \"\"\"\n+        This test checks the behavior when there are combined newlines in the output.\n+        \"\"\"\n+        print(\"Line1\", end=\"\\r\\n\")\n+        print(\"Line2\", end=\"\\r\")\n+        print(\"Line3\", end=\"\\n\")\n+        out, err = capfd.readouterr()\n+        assert out == \"Line1\\r\\nLine2\\rLine3\\n\"\n+        assert err == \"\"\n         reprec.assertoutcome(passed=1)\n \n     def test_capfdbinary(self, testdir):\n@@ -526,6 +548,28 @@ class TestCaptureFixture:\n                 assert err == b''\n             \"\"\"\n         )\n+\n+    @pytest.mark.parametrize(\"newline\", [\"\\n\", \"\\r\", \"\\r\\n\"])\n+    def test_capfd_preserves_newlines(self, capfd, newline):\n+        \"\"\"\n+        This test ensures that the capfd fixture preserves different types of newlines\n+        (\\n, \\r, \\r\\n) as they are, without converting them.\n+        \"\"\"\n+        print(\"test\", end=newline)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(newline)\n+        assert err == \"\"\n+        \n+    def test_capfd_combined_newlines(self, capfd):\n+        \"\"\"\n+        This test checks the behavior when there are combined newlines in the output.\n+        \"\"\"\n+        print(\"Line1\", end=\"\\r\\n\")\n+        print(\"Line2\", end=\"\\r\")\n+        print(\"Line3\", end=\"\\n\")\n+        out, err = capfd.readouterr()\n+        assert out == \"Line1\\r\\nLine2\\rLine3\\n\"\n+        assert err == \"\"\n         reprec.assertoutcome(passed=1)\n \n     def test_capsysbinary(self, testdir):\n",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..a413166 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import pytest\n@@ -50,7 +51,29 @@ def test_change_level_undo(testdir):\n     result.stdout.no_fnmatch_line(\"*log from test2*\")\n \n \n-def test_with_statement(caplog):\n+def test_with_multiple_levels(testdir):\n+    \"\"\"Ensure that different log levels set by caplog do not persist across tests.\"\"\"\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test1(caplog):\n+            caplog.set_level(logging.WARNING)\n+            assert caplog.handler.level == logging.WARNING\n+\n+        def test2(caplog):\n+            # Ensure the log level is restored to 0 (NOTSET)\n+            assert caplog.handler.level == 0\n+            caplog.set_level(logging.ERROR)\n+            assert caplog.handler.level == logging.ERROR\n+\n+        def test3(caplog):\n+            # Ensure the log level is restored to 0 (NOTSET)\n+            assert caplog.handler.level == 0\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=3)\n     with caplog.at_level(logging.INFO):\n         logger.debug(\"handler DEBUG level\")\n         logger.info(\"handler INFO level\")\n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..ef14eba 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,3 +1,4 @@\n+\n import os\n import pprint\n import sys\n@@ -9,7 +10,7 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n-from _pytest.pytester import Testdir\n+from _pytest.pytester import Testdir, Pytester\n \n \n class TestCollector:\n@@ -1178,6 +1179,37 @@ def test_collect_symlink_out_of_tree(testdir):\n     assert result.ret == 0\n \n \n+def test_symlinked_directory_is_collected(pytester: Pytester) -> None:\n+    \"\"\"A symlinked directory in the test directory is collected and tests within are executed.\"\"\"\n+    # Create a real directory with a test file\n+    real_dir = pytester.mkdir(\"real_dir\")\n+    real_dir.joinpath(\"test_symlinked.py\").write_text(\"def test_symlinked(): pass\", \"utf-8\")\n+\n+    # Create a symlink to the real directory\n+    symlink_dir = pytester.path.joinpath(\"symlinked_dir\")\n+    symlink_dir.symlink_to(real_dir)\n+\n+    # Run pytest and check if the tests in the symlinked directory are collected\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+\n+def test_symlinked_directory_with_subdirectory(pytester: Pytester) -> None:\n+    \"\"\"A symlinked directory with a subdirectory containing tests is collected and executed.\"\"\"\n+    # Create a real directory structure with a subdirectory and a test file\n+    real_dir = pytester.mkdir(\"real_dir_with_sub\")\n+    sub_dir = real_dir.mkdir(\"sub_dir\")\n+    sub_dir.joinpath(\"test_sub.py\").write_text(\"def test_sub(): pass\", \"utf-8\")\n+\n+    # Create a symlink to the real directory\n+    symlink_dir_with_sub = pytester.path.joinpath(\"symlinked_dir_with_sub\")\n+    symlink_dir_with_sub.symlink_to(real_dir)\n+\n+    # Run pytest and check if the tests in the symlinked directory with subdirectory are collected\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+\n def test_collectignore_via_conftest(testdir):\n     \"\"\"collect_ignore in parent conftest skips importing child (issue #4592).\"\"\"\n     tests = testdir.mkpydir(\"tests\")\n",
  "pytest-dev__pytest-8399": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 2c720b0..8c3d91e 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -301,8 +301,35 @@ def test_setup_setUpClass(pytester: Pytester) -> None:\n     reprec = pytester.inline_run(testpath)\n     reprec.assertoutcome(passed=3)\n \n+def test_unittest_setUpClass_fixture_private(pytester: Pytester) -> None:\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+\n+        class MyTestCase(unittest.TestCase):\n+            @classmethod\n+            def setUpClass(cls):\n+                pass\n \n-def test_setup_class(pytester: Pytester) -> None:\n+            @classmethod\n+            def tearDownClass(cls):\n+                pass\n+\n+            def test_something(self):\n+                pass\n+        \"\"\"\n+    )\n+    # Run pytest with the --fixtures option\n+    result = pytester.runpytest(\"--fixtures\")\n+    assert result.ret == 0\n+    # Check that the setUpClass fixture is not shown without -v\n+    result.stdout.no_fnmatch_line(\"*unittest_setUpClass_fixture_MyTestCase*\")\n+\n+    # Run pytest with the --fixtures -v option\n+    result = pytester.runpytest(\"--fixtures\", \"-v\")\n+    assert result.ret == 0\n+    # Check that the setUpClass fixture is shown with -v\n+    result.stdout.fnmatch_lines([\"*unittest_setUpClass_fixture_MyTestCase*\"])\n     testpath = pytester.makepyfile(\n         \"\"\"\n         import unittest\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..3ff156d 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -597,6 +597,28 @@ def test_ridgecv_store_cv_values():\n     r.fit(x, y)\n     assert_equal(r.cv_values_.shape, (n_samples, n_responses, n_alphas))\n \n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    rng = np.random.RandomState(42)\n+\n+    n_samples = 8\n+    n_features = 5\n+    x = rng.randn(n_samples, n_features)\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+    # with len(y.shape) == 1\n+    y = rng.choice([-1, 1], size=n_samples)\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_alphas)\n+\n+    # with len(y.shape) == 2\n+    n_responses = 3\n+    y = rng.choice([-1, 1], size=(n_samples, n_responses))\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_responses, n_alphas)\n \n def test_ridgecv_sample_weight():\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..546e6c2 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -184,7 +184,14 @@ def test_int_overflow_mutual_info_score():\n     assert_all_finite(mutual_info_score(x.ravel(), y.ravel()))\n \n \n-def test_entropy():\n+def test_large_values_fowlkes_mallows_score():\n+    # Test case for potential overflow in fowlkes_mallows_score\n+    # Create labels with a large number of samples in each cluster\n+    labels_true = np.array([0] * 1000000 + [1] * 1000000)\n+    labels_pred = np.array([0] * 500000 + [1] * 500000 + [0] * 500000 + [1] * 500000)\n+\n+    score = fowlkes_mallows_score(labels_true, labels_pred)\n+    assert np.isfinite(score), \"The score should be finite even for large inputs\"\n     ent = entropy([0, 0, 42.])\n     assert_almost_equal(ent, 0.6365141, 5)\n     assert_almost_equal(entropy([]), 1)\n",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..b558de4 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -558,8 +558,22 @@ def test_feature_names():\n     for idx, name in enumerate(feature_names):\n         assert_equal(idx, cv.vocabulary_.get(name))\n \n+def test_countvectorizer_get_feature_names_with_vocabulary():\n+    # Set up a CountVectorizer with a custom vocabulary\n+    vocab = ['this', 'is', 'a', 'test']\n+    cv = CountVectorizer(vocabulary=vocab)\n \n-def test_vectorizer_max_features():\n+    # Check that get_feature_names does not raise an error\n+    feature_names = cv.get_feature_names()\n+    assert_array_equal(feature_names, vocab)\n+\n+    # Transform a sample corpus\n+    corpus = ['this is a test', 'this is another test']\n+    X = cv.transform(corpus)\n+    expected_output = [[1, 1, 1, 1], [1, 1, 0, 1]]\n+\n+    # Validate that the transformation output is as expected\n+    assert_array_equal(X.toarray(), expected_output)\n     vec_factories = (\n         CountVectorizer,\n         TfidfVectorizer,\n",
  "scikit-learn__scikit-learn-11310": "",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..40f6408 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -21,8 +21,10 @@ from sklearn.utils.testing import assert_true\n from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import ignore_warnings\n from sklearn.utils.testing import assert_warns_message\n-\n-from sklearn.exceptions import ConvergenceWarning\n+from sklearn.metrics.scorer import get_scorer\n+from sklearn.utils import shuffle\n+from sklearn.linear_model import _log_reg_scoring_path\n+from sklearn.preprocessing import LabelBinarizer\n from sklearn.exceptions import ChangedBehaviorWarning\n from sklearn.linear_model.logistic import (\n     LogisticRegression,\n@@ -491,8 +493,37 @@ def test_logistic_cv():\n     scores = np.asarray(list(lr_cv.scores_.values()))\n     assert_array_equal(scores.shape, (1, 3, 1))\n \n-\n-def test_multinomial_logistic_regression_string_inputs():\n+import pytest\n+from sklearn.utils._testing import assert_array_almost_equal\n+\n+\n+@pytest.mark.parametrize('scoring, multiclass_agg_list',\n+                         [('accuracy', ['']),\n+                          ('precision', ['_macro', '_weighted']),\n+                          ('f1', ['_macro', '_weighted']),\n+                          ('neg_log_loss', ['']),\n+                          ('recall', ['_macro', '_weighted'])])\n+def test_logistic_cv_multinomial_score(scoring, multiclass_agg_list):\n+    # Test that LogisticRegressionCV uses the right score to compute its\n+    # cross-validation scores when using a multinomial scoring\n+    # See: https://github.com/scikit-learn/scikit-learn/issues/8720\n+    \n+    X, y = make_classification(n_samples=100, random_state=0, n_classes=3,\n+                               n_informative=6)\n+    train, test = np.arange(80), np.arange(80, 100)\n+    lr = LogisticRegression(C=1., solver='lbfgs', multi_class='multinomial')\n+    # We use lbfgs to support multinomial\n+    params = lr.get_params()\n+    # We store the params to set them further in _log_reg_scoring_path\n+    for key in ['C', 'n_jobs', 'warm_start']:\n+        del params[key]\n+    lr.fit(X[train], y[train])\n+    for averaging in multiclass_agg_list:\n+        scorer = get_scorer(scoring + averaging)\n+        assert_array_almost_equal(\n+            _log_reg_scoring_path(X, y, train, test, Cs=[1.],\n+                                  scoring=scorer, **params)[2][0],\n+            scorer(lr, X[test], y[test]))\n     # Test with string labels for LogisticRegression(CV)\n     n_samples, n_features, n_classes = 50, 5, 3\n     X_ref, y = make_classification(n_samples=n_samples, n_features=n_features,\n",
  "scikit-learn__scikit-learn-12585": "diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 4752f9c..0abec3e 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -154,7 +154,23 @@ def test_clone_nan():\n     assert clf.empty is clf2.empty\n \n \n-def test_clone_sparse_matrices():\n+from sklearn.base import clone\n+from sklearn.preprocessing import StandardScaler\n+from sklearn.utils.estimator_checks import check_estimator\n+\n+def test_clone_estimator_types():\n+    # Check that clone works for parameters that are types rather than instances\n+    class MyEstimator:\n+        def __init__(self, empty=None):\n+            self.empty = empty\n+\n+        def get_params(self, deep=False):\n+            return {'empty': self.empty}\n+\n+    clf = MyEstimator(empty=StandardScaler)  # Use a class as a parameter\n+    clf_cloned = clone(clf)\n+\n+    assert clf.empty is clf_cloned.empty  # Ensure the class type is preserved\n     sparse_matrix_classes = [\n         getattr(sp, name)\n         for name in dir(sp) if name.endswith('_matrix')]\n",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..f8b6b15 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -18,7 +18,9 @@ from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import TempMemmap\n from sklearn.exceptions import ConvergenceWarning\n from sklearn import linear_model, datasets\n-from sklearn.linear_model.least_angle import _lars_path_residues\n+from sklearn.linear_model.least_angle import _lars_path_residues, LassoLarsIC\n+import numpy as np\n+from sklearn.utils.validation import check_X_y\n \n diabetes = datasets.load_diabetes()\n X, y = diabetes.data, diabetes.target\n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..ee8c18b 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -493,8 +493,35 @@ def test_shuffle_stratifiedkfold():\n         assert_not_equal(set(test0), set(test1))\n     check_cv_coverage(kf0, X_40, y, groups=None, expected_n_splits=5)\n \n+def test_shuffle_stratifiedkfold_random_state_effect():\n+    # Ensure that different random_state values produce different test sets\n+    X = np.arange(20)\n+    y = [0] * 10 + [1] * 10\n \n-def test_kfold_can_detect_dependent_samples_on_digits():  # see #2372\n+    kf_rs1 = StratifiedKFold(n_splits=5, shuffle=True, random_state=1)\n+    kf_rs2 = StratifiedKFold(n_splits=5, shuffle=True, random_state=2)\n+\n+    test_sets_rs1 = [test for _, test in kf_rs1.split(X, y)]\n+    test_sets_rs2 = [test for _, test in kf_rs2.split(X, y)]\n+\n+    # Check that the test sets differ when random_state is different\n+    for test_rs1, test_rs2 in zip(test_sets_rs1, test_sets_rs2):\n+        assert_not_equal(set(test_rs1), set(test_rs2))\n+\n+def test_shuffle_within_stratifiedkfold():\n+    # Ensure that shuffling affects the distribution within each class\n+    X = np.arange(20)\n+    y = [0] * 10 + [1] * 10\n+\n+    kf_no_shuffle = StratifiedKFold(n_splits=5, shuffle=False)\n+    kf_with_shuffle = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n+\n+    test_sets_no_shuffle = [test for _, test in kf_no_shuffle.split(X, y)]\n+    test_sets_with_shuffle = [test for _, test in kf_with_shuffle.split(X, y)]\n+\n+    # Check that the test sets differ between non-shuffled and shuffled folds\n+    for test_no_shuffle, test_with_shuffle in zip(test_sets_no_shuffle, test_sets_with_shuffle):\n+        assert_not_equal(set(test_no_shuffle), set(test_with_shuffle))\n     # The digits samples are dependent: they are apparently grouped by authors\n     # although we don't have any information on the groups segment locations\n     # for this data. We can highlight this fact by computing k-fold cross-\n",
  "scikit-learn__scikit-learn-13135": "diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py\nindex a18a1c5..aa1e6d0 100644\n--- a/sklearn/preprocessing/tests/test_discretization.py\n+++ b/sklearn/preprocessing/tests/test_discretization.py\n@@ -185,11 +185,11 @@ def test_invalid_strategy_option():\n \n \n @pytest.mark.parametrize(\n-    'strategy, expected_2bins, expected_3bins',\n-    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2]),\n-     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2]),\n-     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2])])\n-def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n+    'strategy, expected_2bins, expected_3bins, expected_5bins',\n+    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2], [0, 0, 1, 1, 4, 4]),\n+     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2], [0, 0, 1, 2, 3, 4]),\n+     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2], [0, 1, 2, 3, 4, 4])])\n+def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins, expected_5bins):\n     X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n \n     # with 2 bins\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..edb107e 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -597,8 +597,28 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_array_equal(Y_pred1, Y_pred2)\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n-\n-def test_gaussian_mixture_fit():\n+def test_gaussian_mixture_fit_predict_consistency():\n+    # Test consistency between fit_predict and predict with n_init > 1\n+    rng = np.random.RandomState(42)\n+    X = rng.randn(1000, 5)\n+\n+    # Test case with n_init=1\n+    gm = GaussianMixture(n_components=5, n_init=1, random_state=42)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n+\n+    # Test case with n_init=10\n+    gm = GaussianMixture(n_components=5, n_init=10, random_state=42)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n+\n+    # Test case without specifying random_state\n+    gm = GaussianMixture(n_components=5, n_init=5)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n     rand_data = RandomData(rng)\n",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "",
  "scikit-learn__scikit-learn-13496": "",
  "scikit-learn__scikit-learn-13779": "",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..347c66c 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -396,8 +396,32 @@ def test_export_text():\n     assert export_text(reg, decimals=1) == expected_report\n     assert export_text(reg, decimals=1, show_weights=True) == expected_report\n \n+def test_export_text_single_feature():\n+    # Test to ensure export_text works with a single feature without IndexError\n+    X_single_feature = [[-2], [-1], [-1], [1], [1], [2]]\n+    y_single_feature = [-1, -1, -1, 1, 1, 1]\n+    clf_single_feature = DecisionTreeClassifier(max_depth=2, random_state=0)\n+    clf_single_feature.fit(X_single_feature, y_single_feature)\n+\n+    expected_report_single_feature = dedent(\"\"\"\n+    |--- feature_0 <= 0.00\n+    |   |--- class: -1\n+    |--- feature_0 >  0.00\n+    |   |--- class: 1\n+    \"\"\").lstrip()\n+\n+    # Ensure the output is as expected and does not raise an error\n+    assert export_text(clf_single_feature) == expected_report_single_feature\n+\n+    # Verify with specific feature name\n+    expected_report_named_feature = dedent(\"\"\"\n+    |--- sepal_length <= 0.00\n+    |   |--- class: -1\n+    |--- sepal_length >  0.00\n+    |   |--- class: 1\n+    \"\"\").lstrip()\n \n-def test_plot_tree_entropy(pyplot):\n+    assert export_text(clf_single_feature, feature_names=['sepal_length']) == expected_report_named_feature\n     # mostly smoke tests\n     # Check correctness of export_graphviz for criterion = entropy\n     clf = DecisionTreeClassifier(max_depth=3,\n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..2b80e7a 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1531,9 +1531,33 @@ def test_LogisticRegressionCV_GridSearchCV_elastic_net_ovr():\n     assert (lrcv.predict(X_train) == gs.predict(X_train)).mean() >= .8\n     assert (lrcv.predict(X_test) == gs.predict(X_test)).mean() >= .8\n \n+import pytest\n+import numpy as np\n+from sklearn.linear_model import LogisticRegressionCV\n+from sklearn.datasets import make_classification\n \n-@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial'))\n-def test_LogisticRegressionCV_no_refit(multi_class):\n+@pytest.mark.parametrize('penalty', ('l2', 'elasticnet'))\n+@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial', 'auto'))\n+def test_LogisticRegressionCV_no_refit(penalty, multi_class):\n+    # Test LogisticRegressionCV with no refit\n+\n+    n_samples, n_features = 1000, 3\n+    X, y = make_classification(n_samples=n_samples, n_features=n_features, random_state=29)\n+\n+    if penalty == 'elasticnet':\n+        l1_ratios = np.linspace(0, 1, 2)\n+    else:\n+        l1_ratios = None\n+\n+    lrcv = LogisticRegressionCV(penalty=penalty, solver='saga', tol=1e-2, refit=False,\n+                                multi_class=multi_class, random_state=29, l1_ratios=l1_ratios)\n+    lrcv.fit(X, y)\n+\n+    # Ensure that the expected shapes are correct\n+    assert lrcv.C_.shape == (n_classes,)\n+    if penalty == 'elasticnet':\n+        assert lrcv.l1_ratio_.shape == (n_classes,)\n+    assert lrcv.coef_.shape == (len(np.unique(y)), n_features)\n     # Test LogisticRegressionCV attribute shapes when refit is False\n \n     n_classes = 3\n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/tests/test_show_versions.py b/sklearn/utils/tests/test_show_versions.py\nindex fa39255..8ccf849 100644\n--- a/sklearn/utils/tests/test_show_versions.py\n+++ b/sklearn/utils/tests/test_show_versions.py\n@@ -24,10 +24,13 @@ def test_get_deps_info():\n     assert 'pandas' in deps_info\n     assert 'matplotlib' in deps_info\n \n+def test_get_deps_info_includes_joblib():\n+    deps_info = _get_deps_info()\n+    assert 'joblib' in deps_info\n \n def test_show_versions_with_blas(capsys):\n     show_versions()\n     out, err = capsys.readouterr()\n     assert 'python' in out\n     assert 'numpy' in out\n-    assert 'BLAS' in out\n+    assert 'BLAS' in out\n",
  "scikit-learn__scikit-learn-14496": "diff --git a/sklearn/cluster/tests/test_optics.py b/sklearn/cluster/tests/test_optics.py\nindex 6c9dac3..9036ba2 100644\n--- a/sklearn/cluster/tests/test_optics.py\n+++ b/sklearn/cluster/tests/test_optics.py\n@@ -124,8 +124,34 @@ def test_extract_xi():\n                    xi=0.04).fit(X)\n     assert_array_equal(clust.labels_, expected_labels)\n \n+from sklearn.cluster import OPTICS\n+import numpy as np\n+from sklearn.utils import shuffle\n+from numpy.testing import assert_array_equal\n+\n+def test_optics_float_min_samples():\n+    # Generate synthetic data\n+    rng = np.random.RandomState(0)\n+    n_points_per_cluster = 5\n+\n+    C1 = [-5, -2] + .8 * rng.randn(n_points_per_cluster, 2)\n+    C2 = [4, -1] + .1 * rng.randn(n_points_per_cluster, 2)\n+    C3 = [1, -2] + .2 * rng.randn(n_points_per_cluster, 2)\n+    C4 = [-2, 3] + .3 * rng.randn(n_points_per_cluster, 2)\n+    C5 = [3, -2] + .6 * rng.randn(n_points_per_cluster, 2)\n+    C6 = [5, 6] + .2 * rng.randn(n_points_per_cluster, 2)\n+\n+    X = np.vstack((C1, C2, C3, C4, C5, np.array([[100, 100]]), C6))\n+    expected_labels = np.r_[[2] * 5, [0] * 5, [1] * 5, [3] * 5, [1] * 5,\n+                            -1, [4] * 5]\n+    X, expected_labels = shuffle(X, expected_labels, random_state=rng)\n \n-def test_cluster_hierarchy_():\n+    # Define the OPTICS instance with float min_samples\n+    clust = OPTICS(min_samples=0.1, min_cluster_size=0.08,\n+                   max_eps=20, cluster_method='xi',\n+                   xi=0.4).fit(X)\n+    # Check the clustering results\n+    assert_array_equal(clust.labels_, expected_labels)\n     rng = np.random.RandomState(0)\n     n_points_per_cluster = 100\n     C1 = [0, 0] + 2 * rng.randn(n_points_per_cluster, 2)\n",
  "scikit-learn__scikit-learn-14710": "",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..b1fa46c 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,7 +680,21 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n-def test_sparse_precomputed():\n+import numpy as np\n+from scipy import sparse\n+from sklearn import svm\n+\n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for issue #14893\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n     try:\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..15700ad 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -88,6 +88,27 @@ def test_strip_accents():\n     assert strip_accents_unicode(a) == expected\n \n     # check some arabic\n+\n+    # strings that are already decomposed\n+    a = \"o\\u0308\"  # o with diaresis\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # combining marks by themselves\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"  # combining grave, acute, circumflex, tilde\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Multiple combining marks on one character\n+    a = \"o\\u0308\\u0304\"  # o with diaresis and macron\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Testing for NFKD decomposition of '\u00f1'\n+    s1 = chr(241)  # \"LATIN SMALL LETTER N WITH TILDE\"\n+    s2 = chr(110) + chr(771)  # \"LATIN SMALL LETTER N\" followed by \"COMBINING TILDE\"\n+    assert strip_accents_unicode(s1) == \"n\"\n+    assert strip_accents_unicode(s2) == \"n\"\n     a = '\\u0625'  # alef with a hamza below: \u0625\n     expected = '\\u0627'  # simple alef: \u0627\n     assert strip_accents_unicode(a) == expected\n",
  "scikit-learn__scikit-learn-25102": "",
  "scikit-learn__scikit-learn-25232": "",
  "scikit-learn__scikit-learn-25931": "",
  "scikit-learn__scikit-learn-25973": "",
  "scikit-learn__scikit-learn-26323": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex b52e888..bbf26ef 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -22,6 +22,10 @@ from sklearn.compose import (\n from sklearn.exceptions import NotFittedError\n from sklearn.preprocessing import FunctionTransformer\n from sklearn.preprocessing import StandardScaler, Normalizer, OneHotEncoder\n+import pytest\n+import pandas as pd\n+import numpy as np\n+from sklearn.feature_selection import VarianceThreshold\n \n \n class Trans(TransformerMixin, BaseEstimator):\n@@ -2177,11 +2181,77 @@ def test_raise_error_if_index_not_aligned():\n             (\"num2\", reset_index_transformer, [\"b\"]),\n         ],\n     )\n+\n+def test_remainder_set_output():\n+    \"\"\"Check that the output is set for the remainder.\n+\n+    Non-regression test for ignoring remainder in set_output.\n+    \"\"\"\n+\n+    df = pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3]})\n+\n+    # Test when remainder is an estimator\n+    ct1 = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct1.set_output(transform=\"pandas\")\n+    out1 = ct1.fit_transform(df)\n+    pd.testing.assert_frame_equal(out1, df)\n+\n+    # Test when remainder is 'drop'\n+    ct2 = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=\"drop\",\n+        verbose_feature_names_out=False,\n+    )\n+    ct2.set_output(transform=\"pandas\")\n+    out2 = ct2.fit_transform(df)\n+    pd.testing.assert_frame_equal(out2, df[[\"a\"]])\n+\n+    # Test when transform is 'default'\n+    ct1.set_output(transform=\"default\")\n+    out3 = ct1.fit_transform(df)\n+    assert isinstance(out3, np.ndarray)\n     ct.set_output(transform=\"pandas\")\n     msg = (\n         \"Concatenating DataFrames from the transformer's output lead to\"\n         \" an inconsistent number of samples. The output may have Pandas\"\n         \" Indexes that do not match.\"\n     )\n+\n+def test_remainder_set_output():\n+    \"\"\"Check that the output is set for the remainder.\n+\n+    Non-regression test for ignoring remainder in set_output.\n+    \"\"\"\n+\n+    df = pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3]})\n+\n+    # Test when remainder is an estimator\n+    ct1 = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct1.set_output(transform=\"pandas\")\n+    out1 = ct1.fit_transform(df)\n+    pd.testing.assert_frame_equal(out1, df)\n+\n+    # Test when remainder is 'drop'\n+    ct2 = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=\"drop\",\n+        verbose_feature_names_out=False,\n+    )\n+    ct2.set_output(transform=\"pandas\")\n+    out2 = ct2.fit_transform(df)\n+    pd.testing.assert_frame_equal(out2, df[[\"a\"]])\n+\n+    # Test when transform is 'default'\n+    ct1.set_output(transform=\"default\")\n+    out3 = ct1.fit_transform(df)\n+    assert isinstance(out3, np.ndarray)\n     with pytest.raises(ValueError, match=msg):\n         ct.fit_transform(X)\n",
  "scikit-learn__scikit-learn-9288": "",
  "sphinx-doc__sphinx-10323": "diff --git a/tests/test_directive_code.py b/tests/test_directive_code.py\nindex 949c70e..d9ddac5 100644\n--- a/tests/test_directive_code.py\n+++ b/tests/test_directive_code.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the code-block directive.\"\"\"\n \n import os\n@@ -250,9 +251,20 @@ def test_LiteralIncludeReader_dedent(literal_inc_path):\n                        \"    pass\\n\"\n                        \"\\n\")\n \n-\n @pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n-def test_LiteralIncludeReader_tabwidth(testroot):\n+def test_LiteralIncludeReader_dedent_and_prepend_with_indentation(literal_inc_path):\n+    # This test checks if dedent affects only the included content and not the prepend content.\n+    options = {\n+        'lines': '17-19',\n+        'dedent': 6,\n+        'prepend': '      <plugin>\\n'\n+    }\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    assert content == (\"      <plugin>\\n\"\n+                       \"        <groupId>com.github.ekryd.sortpom</groupId>\\n\"\n+                       \"        <artifactId>sortpom-maven-plugin</artifactId>\\n\"\n+                       \"\\n\")\n     # tab-width: 4\n     options = {'tab-width': 4, 'pyobject': 'Qux'}\n     reader = LiteralIncludeReader(testroot / 'target.py', options, DUMMY_CONFIG)\n",
  "sphinx-doc__sphinx-10449": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 82ec43a..b318c8c 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1022,7 +1022,28 @@ def test_autodoc_typehints_description_no_undoc_doc_rtype(app):\n             '\\n'\n             '   Return type:\\n'\n             '      None\\n' == context)\n+import pytest\n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\"})\n+def test_autodoc_typehints_description_for_class(app):\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: target.typehints._Square\\n'\n+        '   :members:\\n',\n+        encoding='utf8'\n+    )\n+    # Simulate the class structure that was problematic in the issue\n+    (app.srcdir / 'target/typehints.py').write_text(\n+        'class _Square:\\n'\n+        '    \"\"\"A class representing a square figure.\"\"\"\\n'\n+        '    def __init__(self, width: int, height: int) -> None:\\n'\n+        '        self.width = width\\n'\n+        '        self.height = height\\n',\n+        encoding='utf8'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n+    assert 'Return type:\\n      None\\n' not in context\n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\"})\n@@ -1053,7 +1074,28 @@ def test_autodoc_typehints_description_with_documented_init(app):\n             '\\n'\n             '      Return type:\\n'\n             '         None\\n' == context)\n+import pytest\n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\"})\n+def test_autodoc_typehints_description_for_class(app):\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: target.typehints._Square\\n'\n+        '   :members:\\n',\n+        encoding='utf8'\n+    )\n+    # Simulate the class structure that was problematic in the issue\n+    (app.srcdir / 'target/typehints.py').write_text(\n+        'class _Square:\\n'\n+        '    \"\"\"A class representing a square figure.\"\"\"\\n'\n+        '    def __init__(self, width: int, height: int) -> None:\\n'\n+        '        self.width = width\\n'\n+        '        self.height = height\\n',\n+        encoding='utf8'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n+    assert 'Return type:\\n      None\\n' not in context\n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\",\n",
  "sphinx-doc__sphinx-10466": "diff --git a/tests/test_build_gettext.py b/tests/test_build_gettext.py\nindex a6fc946..4b20c09 100644\n--- a/tests/test_build_gettext.py\n+++ b/tests/test_build_gettext.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the build process with gettext builder with the test root.\"\"\"\n \n import gettext\n@@ -8,8 +9,35 @@ from subprocess import PIPE, CalledProcessError\n \n import pytest\n \n+from sphinx.builders.gettext import Catalog, MsgOrigin\n from sphinx.util.osutil import cd\n \n+def test_Catalog_no_duplicate_locations():\n+    catalog = Catalog()\n+    # Add a message with duplicate locations\n+    catalog.add('duplicate_test', MsgOrigin('/path/to/duplicate', 1))\n+    catalog.add('duplicate_test', MsgOrigin('/path/to/duplicate', 1))\n+    catalog.add('duplicate_test', MsgOrigin('/path/to/duplicate', 1))\n+    catalog.add('duplicate_test', MsgOrigin('/path/to/duplicate', 2))\n+    catalog.add('duplicate_test', MsgOrigin('/path/to/duplicate', 2))\n+    catalog.add('duplicate_test', MsgOrigin('/path/to/another', 3))\n+    catalog.add('duplicate_test', MsgOrigin('/path/to/another', 3))\n+    \n+    messages = list(catalog)\n+    \n+    assert len(messages) == 1, \"There should only be one message\"\n+    \n+    message = messages[0]\n+    assert message.text == 'duplicate_test'\n+    \n+    expected_locations = [\n+        ('/path/to/duplicate', 1),\n+        ('/path/to/duplicate', 2),\n+        ('/path/to/another', 3)\n+    ]\n+    assert sorted(message.locations) == sorted(expected_locations), \\\n+        \"Locations should be unique and match expected locations\"\n+\n \n @pytest.mark.sphinx('gettext', srcdir='root-gettext')\n def test_build_gettext(app):\n",
  "sphinx-doc__sphinx-10673": "diff --git a/tests/test_environment_toctree.py b/tests/test_environment_toctree.py\nindex d3bf6a2..7a20714 100644\n--- a/tests/test_environment_toctree.py\n+++ b/tests/test_environment_toctree.py\n@@ -337,6 +337,23 @@ def test_get_toctree_for_includehidden(app):\n                  [list_item, compact_paragraph, reference, \"foo.1\"],\n                  [list_item, compact_paragraph, reference, \"foo.2\"]))\n \n+    def test_toctree_with_genindex_modindex_search(app):\n+        \"\"\"\n+        Test that the toctree correctly handles entries for 'genindex', \n+        'modindex', and 'search' without raising warnings.\n+        \"\"\"\n+        app.build()\n+        toctree = app.env.tocs['index']\n+        assert_node(toctree,\n+                    [bullet_list, ([list_item, (compact_paragraph,  \n+                                                 [bullet_list, (addnodes.toctree,  \n+                                                                addnodes.toctree)])])])\n+        # Check that the entries are properly registered\n+        assert_node(toctree[0][1][1], addnodes.toctree,\n+                    caption=\"Indices\", glob=False, hidden=False,\n+                    titlesonly=False, maxdepth=-1, numbered=0,\n+                    entries=[(None, 'genindex'), (None, 'modindex'), (None, 'search')])\n+\n     assert_node(toctree[1][0][0][0], reference, refuri=\"foo\", secnumber=[1])\n     assert_node(toctree[1][0][1][0][0][0], reference, refuri=\"quux\", secnumber=[1, 1])\n     assert_node(toctree[1][0][1][1][0][0], reference, refuri=\"foo#foo-1\", secnumber=[1, 2])\n@@ -345,4 +362,4 @@ def test_get_toctree_for_includehidden(app):\n     assert_node(toctree[1][2][0][0], reference, refuri=\"http://sphinx-doc.org/\")\n \n     assert_node(toctree[2],\n-                [bullet_list, list_item, compact_paragraph, reference, \"baz\"])\n+                [bullet_list, list_item, compact_paragraph, reference, \"baz\"])\n",
  "sphinx-doc__sphinx-7440": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 975a00f..36d29b6 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -147,6 +147,35 @@ def test_glossary(app):\n     assert (\"term3\", \"term3\", \"term\", \"index\", \"term-term3\", -1) in objects\n     assert (\"term4\", \"term4\", \"term\", \"index\", \"term-term4\", -1) in objects\n \n+    # Additional test for case sensitivity in terms\n+    text_case_sensitive = (\".. glossary::\\n\"\n+                           \"\\n\"\n+                           \"   mysql\\n\"\n+                           \"       description for mysql\\n\"\n+                           \"\\n\"\n+                           \"   MySQL\\n\"\n+                           \"       description for MySQL\\n\")\n+\n+    # doctree for case-sensitive terms\n+    doctree_case_sensitive = restructuredtext.parse(app, text_case_sensitive)\n+    assert_node(doctree_case_sensitive, (\n+        [glossary, definition_list, ([definition_list_item, ([term, (\"mysql\",\n+                                                                     index)],\n+                                                             definition)],\n+                                     [definition_list_item, ([term, (\"MySQL\",\n+                                                                     index)],\n+                                                             definition)])],\n+    ))\n+    assert_node(doctree_case_sensitive[0][0][0][0][1],\n+                entries=[(\"single\", \"mysql\", \"term-mysql\", \"main\", None)])\n+    assert_node(doctree_case_sensitive[0][0][1][0][1],\n+                entries=[(\"single\", \"MySQL\", \"term-MySQL\", \"main\", None)])\n+\n+    # index for case-sensitive terms\n+    objects_case_sensitive = list(app.env.get_domain(\"std\").get_objects())\n+    assert (\"mysql\", \"mysql\", \"term\", \"index\", \"term-mysql\", -1) in objects_case_sensitive\n+    assert (\"MySQL\", \"MySQL\", \"term\", \"index\", \"term-MySQL\", -1) in objects_case_sensitive\n+\n \n def test_glossary_warning(app, status, warning):\n     # empty line between terms\n",
  "sphinx-doc__sphinx-7757": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex b3053d1..41de22c 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -341,7 +341,16 @@ def test_signature_from_str_positionaly_only_args():\n     assert sig.parameters['b'].kind == Parameter.POSITIONAL_OR_KEYWORD\n \n \n-def test_signature_from_str_invalid():\n+def test_signature_from_str_default_positional_only():\n+    # Test case to verify default values for positional-only arguments are preserved\n+    sig = inspect.signature_from_str('(a, b=0, /, c=1)')\n+    assert list(sig.parameters.keys()) == ['a', 'b', 'c']\n+    assert sig.parameters['a'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['a'].default == Parameter.empty\n+    assert sig.parameters['b'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['b'].default == '0'\n+    assert sig.parameters['c'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['c'].default == '1'\n     with pytest.raises(SyntaxError):\n         inspect.signature_from_str('')\n \n",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..6c591ce 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -15,6 +16,7 @@ from importlib import import_module\n import pytest\n \n from sphinx.ext.autodoc.mock import _MockModule, _MockObject, mock\n+from typing import TypeVar, Generic\n \n \n def test_MockModule():\n@@ -24,6 +26,22 @@ def test_MockModule():\n     assert isinstance(mock.attr1.attr2, _MockObject)\n     assert isinstance(mock.attr1.attr2.meth(), _MockObject)\n \n+    T = TypeVar('T')\n+\n+    class SubClass2(mock.SomeClass[T]):\n+        \"\"\"docstring of SubClass\"\"\"\n+\n+        def __init__(self, value: T):\n+            self.value = value\n+\n+        def get_value(self) -> T:\n+            return self.value\n+\n+    obj2 = SubClass2(\"test\")\n+    assert SubClass2.__doc__ == \"docstring of SubClass\"\n+    assert isinstance(obj2, SubClass2)\n+    assert obj2.get_value() == \"test\"\n+\n     assert repr(mock.some_attr) == 'mocked_module.some_attr'\n     assert repr(mock.some_method) == 'mocked_module.some_method'\n     assert repr(mock.attr1.attr2) == 'mocked_module.attr1.attr2'\n@@ -39,6 +57,22 @@ def test_MockObject():\n     assert isinstance(mock.attr1.attr2, _MockObject)\n     assert isinstance(mock.attr1.attr2.meth(), _MockObject)\n \n+    T = TypeVar('T')\n+\n+    class SubClass2(mock.SomeClass[T]):\n+        \"\"\"docstring of SubClass\"\"\"\n+\n+        def __init__(self, value: T):\n+            self.value = value\n+\n+        def get_value(self) -> T:\n+            return self.value\n+\n+    obj2 = SubClass2(\"test\")\n+    assert SubClass2.__doc__ == \"docstring of SubClass\"\n+    assert isinstance(obj2, SubClass2)\n+    assert obj2.get_value() == \"test\"\n+\n     class SubClass(mock.SomeClass):\n         \"\"\"docstring of SubClass\"\"\"\n \n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_napoleon.py b/tests/test_ext_napoleon.py\nindex 0676869..e3966fa 100644\n--- a/tests/test_ext_napoleon.py\n+++ b/tests/test_ext_napoleon.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_napoleon\n     ~~~~~~~~~~~~~\n@@ -9,9 +10,37 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+def simple_decorator(f):\n+    \"\"\"A simple decorator that does nothing, for tests to use.\"\"\"\n+    @functools.wraps(f)\n+    def wrapper(*args, **kwargs):\n+        return f(*args, **kwargs)\n+    return wrapper\n+\n+\n+class TestDecoratedInit(TestCase):\n+    def test_decorated_init(self):\n+        class SampleClass:\n+            @simple_decorator\n+            def __init__(self, value):\n+                \"\"\"Initialize with value\"\"\"\n+                self.value = value\n+\n+        app = mock.Mock()\n+        what = 'class'\n+        member = '__init__'\n+        obj = SampleClass.__init__\n+        skip = False\n+\n+        # Simulating the usage of sphinx.ext.napoleon to ensure the decorated __init__ is documented\n+        # Assuming _skip_member method from the issue is accessible here\n+        result = _skip_member(app, what, member, obj, skip, config=Config(napoleon_include_init_with_doc=True))\n+        self.assertFalse(result, \"Decorated __init__ should not be skipped in the documentation\")\n+\n import sys\n from collections import namedtuple\n from unittest import TestCase, mock\n+import functools\n \n from sphinx.application import Sphinx\n from sphinx.ext.napoleon import _process_docstring, _skip_member, Config, setup\n",
  "sphinx-doc__sphinx-7985": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 5b1b2ed..3c5ae95 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -13,9 +13,19 @@ import re\n from unittest import mock\n import pytest\n \n-\n @pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n-def test_defaults(app, status, warning):\n+def test_local_links(app, status, warning):\n+    app.builder.build_all()\n+\n+    assert (app.outdir / 'output.txt').exists()\n+    content = (app.outdir / 'output.txt').read_text()\n+\n+    # Check for valid local file (conf.py should exist)\n+    assert \"ok        conf.py\" in content\n+    # Check for invalid local link\n+    assert \"[broken] path/to/notfound\" in content\n+\n+    assert len(content.splitlines()) >= 2  # Ensure at least these two entries are tested\n     app.builder.build_all()\n \n     assert (app.outdir / 'output.txt').exists()\n",
  "sphinx-doc__sphinx-8035": "diff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex ad1d950..a30b5a1 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_private_members\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -14,6 +15,22 @@ from test_ext_autodoc import do_autodoc\n \n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_selective_private_members(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None,\n+               \"private-members\": \"_specific_private_function\"}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        '',\n+        '.. py:function:: _specific_private_function(name)',\n+        '   :module: target.private',\n+        '',\n+        '   specific_private_function is a docstring().',\n+        '',\n+    ]\n def test_private_field(app):\n     app.config.autoclass_content = 'class'\n     options = {\"members\": None}\n",
  "sphinx-doc__sphinx-8120": "",
  "sphinx-doc__sphinx-8269": "",
  "sphinx-doc__sphinx-8459": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex d1881df..5d35c24 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_configs\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -8,6 +9,43 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+import sys\n+import pytest\n+from sphinx.testing.util import SphinxTestApp\n+from pathlib import Path\n+\n+@pytest.mark.skipif(sys.version_info < (3, 7), reason='Python 3.7+ is required.')\n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                   srcdir='autodoc_typehints_description_and_type_aliases',\n+                   confoverrides={'autodoc_typehints': \"description\",\n+                                  'autodoc_type_aliases': {'JSONObject': 'types.JSONObject'}})\n+def test_autodoc_typehints_with_aliases(app: SphinxTestApp):\n+    source_content = \"\"\"\n+.. autofunction:: types.sphinx_doc\n+\"\"\"\n+    annotations_rst = app.srcdir / 'annotations.rst'\n+    annotations_rst.write_text(source_content)\n+    app.build()\n+    output_content = (app.outdir / 'annotations.txt').read_text()\n+\n+    expected_output = (\n+        \"types.sphinx_doc(data)\\n\"\n+        \"\\n\"\n+        \"   Does it work.\\n\"\n+        \"\\n\"\n+        \"   Parameters:\\n\"\n+        \"      * **data** (*types.JSONObject*) --\\n\"\n+        \"         Does it args.\\n\"\n+        \"\\n\"\n+        \"   Returns:\\n\"\n+        \"      Does it work in return.\\n\"\n+        \"\\n\"\n+        \"   Return type:\\n\"\n+        \"      types.JSONObject\\n\"\n+    )\n+    \n+    assert expected_output in output_content\n+\n import platform\n import sys\n \n",
  "sphinx-doc__sphinx-8475": "",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..4d2796c 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -29,8 +29,21 @@ try:\n except ImportError:\n     pyximport = None\n \n+from .test_ext_autodoc import do_autodoc\n \n-def do_autodoc(app, objtype, name, options=None):\n+def test_empty_all_module_behavior(app):\n+    \"\"\"\n+    Test that no members are documented when __all__ is empty.\n+    \"\"\"\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.empty_all',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+    ]\n     if options is None:\n         options = {}\n     app.env.temp_data.setdefault('docname', 'index')  # set dummy docname\n",
  "sphinx-doc__sphinx-8721": "",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex 3c31d3d..9a3829a 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -515,8 +515,16 @@ def test_dict_customtype():\n     # Type is unsortable, just check that it does not crash\n     assert \"<CustomType(2)>: 2\" in description\n \n-\n-def test_getslots():\n+def test_object_description_enum():\n+    import enum\n+    \n+    class MyEnum(enum.Enum):\n+        ValueA = 10\n+        ValueB = 20\n+    \n+    # Verify that the object_description shows the enum name without the value\n+    assert inspect.object_description(MyEnum.ValueA) == \"MyEnum.ValueA\"\n+    assert inspect.object_description(MyEnum.ValueB) == \"MyEnum.ValueB\"\n     class Foo:\n         pass\n \n",
  "sphinx-doc__sphinx-9320": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\nindex ff8df08..ab64596 100644\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -16,6 +16,7 @@ import pytest\n from sphinx import application\n from sphinx.cmd import quickstart as qs\n from sphinx.util.console import coloron, nocolor\n+from os import path\n \n warnfile = StringIO()\n \n@@ -241,6 +242,21 @@ def test_default_filename(tempdir):\n     exec(conffile.read_text(), ns)\n \n \n+def test_exits_when_existing_confpy(monkeypatch):\n+    # The code detects existing conf.py with path.isfile() \n+    # so we mock it as True with pytest's monkeypatch\n+    def mock_isfile(path):\n+        return True\n+    monkeypatch.setattr(path, 'isfile', mock_isfile)\n+\n+    qs.term_input = mock_input({\n+        'Please enter a new root path (or just Enter to exit)': ''\n+    })\n+    d = {}\n+    with pytest.raises(SystemExit):\n+        qs.ask_user(d)\n+\n+\n def test_extensions(tempdir):\n     qs.main(['-q', '-p', 'project_name', '-a', 'author',\n              '--extensions', 'foo,bar,baz', tempdir])\n",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..39071f6 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -54,6 +54,7 @@ from sphinx.pycode import ast\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n     (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n+    (\"(1,)\", \"(1,)\"),                             # Tuple (single item)\n     (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n",
  "sphinx-doc__sphinx-9591": "",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..c636965 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -756,7 +756,7 @@ def test_pymethod_options(app):\n \n     # :property:\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
  "sphinx-doc__sphinx-9711": "",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..66f6e9b 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -236,7 +236,28 @@ def test_Point2D():\n     assert p2.distance(p3) == sqrt(17)/2\n \n \n-def test_issue_9214():\n+def test_issue_11617():\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point2D(2, 0)\n+    assert p1.distance(p2) == sqrt(5)\n+\n+def test_distance_between_points_of_same_dimension():\n+    p1 = Point3D(1, 2, 3)\n+    p2 = Point3D(4, 6, 8)\n+    # Expected: sqrt((4-1)**2 + (6-2)**2 + (8-3)**2) = sqrt(50)\n+    assert p1.distance(p2) == sqrt(50)\n+\n+def test_distance_between_2d_points():\n+    p1 = Point2D(1, 2)\n+    p2 = Point2D(4, 6)\n+    # Expected: sqrt((4-1)**2 + (6-2)**2) = sqrt(25)\n+    assert p1.distance(p2) == 5\n+\n+def test_distance_mixed_dimensions():\n+    p1 = Point3D(1, 0, 0)\n+    p2 = Point2D(1, 4)\n+    # Expected: sqrt((1-1)**2 + (0-4)**2 + (0-0)**2) = sqrt(16)\n+    assert p1.distance(p2) == 4\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n     p3 = Point3D(7, 2, 3)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..56fa66d 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -741,6 +741,33 @@ def test_special_printers():\n     assert isinstance(func1(), mpi)\n     assert isinstance(func2(), mpi)\n \n+from sympy import Float\n+from sympy.utilities.lambdify import implemented_function\n+\n+def test_issue_12092():\n+    f = implemented_function('f', lambda x: x**2)\n+    g = implemented_function('g', lambda x: 2*x)\n+    \n+    # Original test case\n+    assert f(f(2)).evalf() == Float(16)\n+\n+    # New test cases\n+    # Test composition of f and g\n+    assert f(g(2)).evalf() == Float(16)  # g(2) = 4, f(4) = 16\n+    assert g(f(2)).evalf() == Float(8)   # f(2) = 4, g(4) = 8\n+\n+    # Test deeper compositions\n+    assert f(f(f(2))).evalf() == Float(256)  # f(f(2)) = 16, f(16) = 256\n+    assert g(g(g(2))).evalf() == Float(16)   # g(2) = 4, g(4) = 8, g(8) = 16\n+\n+    # Test case with mixed functions\n+    assert f(g(f(g(2)))).evalf() == Float(256)  # g(2) = 4, f(4) = 16, g(16) = 32, f(32) = 1024\n+\n+    # Edge cases\n+    assert f(0).evalf() == Float(0)\n+    assert g(0).evalf() == Float(0)\n+    assert f(g(0)).evalf() == Float(0)\n+\n def test_true_false():\n     # We want exact is comparison here, not just ==\n     assert lambdify([], true)() is True\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..7220ea9 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -90,8 +90,15 @@ def test_Identity_doit():\n     assert Inn.doit() == Identity(2*n)\n     assert isinstance(Inn.doit().rows, Mul)\n \n+def test_identity_matrix_sum():\n+    from sympy import MatrixSymbol, Identity, Sum, symbols\n \n-def test_addition():\n+    n = symbols('n', integer=True, positive=True)\n+    In = Identity(n)\n+\n+    # Verify that the sum of all the elements in the identity matrix is 'n'\n+    total_sum = Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit()\n+    assert total_sum == n\n     A = MatrixSymbol('A', n, m)\n     B = MatrixSymbol('B', n, m)\n \n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..7565c20 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -353,6 +353,15 @@ def test_args():\n     raises(ValueError, lambda: Permutation([4, 5], size=10))  # where are 0-3?\n     # but this is ok because cycles imply that only those listed moved\n     assert Permutation(4, 5) == Permutation([0, 1, 2, 3, 5, 4])\n+    \n+    # Test cases for non-disjoint cycles\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+    assert Permutation([[0, 1], [1, 2], [2, 3]]) == Permutation([0, 2, 3, 1])\n+    assert Permutation([[1, 2], [2, 3], [3, 1]]) == Permutation([0, 3, 1, 2])\n+    assert Permutation([[0, 1], [2, 3], [0, 2]]) == Permutation([2, 0, 3, 1])\n+    assert Permutation([[0, 1], [0,1,2]]) == Permutation([1, 2, 0])\n+    # Verify identity permutation with redundant cycles\n+    assert Permutation([[0, 1], [1, 0], [0, 1]]) == Permutation([0, 1])\n \n \n def test_Cycle():\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..c79b08f 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -502,8 +502,21 @@ def test_sparse_zeros_sparse_eye():\n     assert SparseMatrix.zeros(3) == zeros(3, cls=SparseMatrix)\n     assert len(SparseMatrix.zeros(3)._smat) == 0\n \n-\n-def test_copyin():\n+def test_sparse_stack_with_zero_dimensions():\n+    # Test horizontal stacking of matrices with zero rows\n+    sparse_matrices = [SparseMatrix.zeros(0, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*sparse_matrices).shape == (0, 6)\n+    \n+    # Test vertical stacking of matrices with zero columns\n+    sparse_matrices = [SparseMatrix.zeros(n, 0) for n in range(4)]\n+    assert SparseMatrix.vstack(*sparse_matrices).shape == (6, 0)\n+    \n+    # Additional tests for different scenarios\n+    sparse_matrices = [SparseMatrix.zeros(0, 2), SparseMatrix.zeros(0, 3)]\n+    assert SparseMatrix.hstack(*sparse_matrices).shape == (0, 5)\n+    \n+    sparse_matrices = [SparseMatrix.zeros(3, 0), SparseMatrix.zeros(2, 0)]\n+    assert SparseMatrix.vstack(*sparse_matrices).shape == (5, 0)\n     s = SparseMatrix(3, 3, {})\n     s[1, 0] = 1\n     assert s[:, 0] == SparseMatrix(Matrix([0, 1, 0]))\n",
  "sympy__sympy-13372": "diff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\nindex e95146a..8ebfee0 100644\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -224,6 +224,21 @@ def test_evalf_bugs():\n     assert as_mpmath(0.0, 10, {'chop': True}) == 0\n \n     #issue 5412\n+\n+    # issue 13076 original test patch\n+    assert NS(Mul(Max(0, y), x, evaluate=False).evalf()) == 'x*Max(0, y)'\n+\n+    # Additional test cases for issue 13076\n+    assert NS(Mul(2, Max(0, y), x, evaluate=False).evalf()) == '2*x*Max(0, y)'\n+    assert NS(Mul(Max(0, y), 2, x, evaluate=False).evalf()) == '2*x*Max(0, y)'\n+\n+    # Test with symbolic y\n+    z = Symbol('z')\n+    assert NS(Mul(Max(0, z), 2, x, evaluate=False).evalf()) == 'x*2*Max(0, z)'\n+\n+    # Test with zero in multiplication\n+    assert NS(Mul(0, Max(0, y), x, evaluate=False).evalf()) == '0'\n+    assert NS(Mul(Max(0, y), 0, x, evaluate=False).evalf()) == '0'\n     assert ((oo*I).n() == S.Infinity*I)\n     assert ((oo+oo*I).n() == S.Infinity + S.Infinity*I)\n \n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..d3e8aad 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -272,8 +272,16 @@ def test_coth():\n \n     assert coth(k*pi*I) == -cot(k*pi)*I\n \n-\n-def test_coth_series():\n+def test_coth_issue_subs():\n+    from sympy import coth, log, tan, Symbol\n+    \n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+    \n+    # Test substitution for values that previously caused an error\n+    for val in [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]:\n+        result = e.subs(x, val)\n+        assert result is not None, f\"Failed for x = {val}\"\n     x = Symbol('x')\n     assert coth(x).series(x, 0, 8) == \\\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..1dd6e78 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -155,7 +155,15 @@ def test_difference():\n         Union(Interval(0, 1, False, True), Interval(1, 2, True, False))\n \n     assert FiniteSet(1, 2, 3) - FiniteSet(2) == FiniteSet(1, 3)\n-    assert FiniteSet('ham', 'eggs') - FiniteSet('eggs') == FiniteSet('ham')\n+from sympy import Complement, FiniteSet, Interval, symbols, S\n+\n+x, y = symbols('x y')\n+\n+def test_issue_12712():\n+    assert Complement(FiniteSet(x, y, 2), Interval(-10, 10)) == FiniteSet(x, y)\n+    assert Complement(FiniteSet(x, 2, y, 5), Interval(-10, 3)) == FiniteSet(x, y, 5)\n+    assert Complement(FiniteSet(y), Interval(-10, 10)) == FiniteSet(y)\n+    assert Complement(FiniteSet(2), Interval(-10, 10)) == S.EmptySet\n     assert FiniteSet(1, 2, 3, 4) - Interval(2, 10, True, False) == \\\n         FiniteSet(1, 2)\n     assert FiniteSet(1, 2, 3, 4) - S.EmptySet == FiniteSet(1, 2, 3, 4)\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..793cbd4 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -195,6 +195,48 @@ def test_row_insert():\n         assert flatten(eye_Shaping(3).row_insert(i, r4).col(0).tolist()) == l\n \n def test_col_insert():\n+    # Test case for issue 13643\n+    from sympy import Matrix, eye, ones\n+    M = eye(6)\n+    V = 2 * ones(6, 2)\n+    expected_matrix = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    result_matrix = M.col_insert(3, V)\n+    assert result_matrix == expected_matrix\n+\n+    # Additional test cases to ensure correct behavior\n+    # Inserting at the start\n+    M = eye(3)\n+    V = Matrix([[1], [1], [1]])\n+    expected = Matrix([\n+        [1, 1, 0, 0],\n+        [1, 0, 1, 0],\n+        [1, 0, 0, 1]\n+    ])\n+    assert M.col_insert(0, V) == expected\n+\n+    # Inserting at the end\n+    expected_end = Matrix([\n+        [1, 0, 0, 1],\n+        [0, 1, 0, 1],\n+        [0, 0, 1, 1]\n+    ])\n+    assert M.col_insert(3, V) == expected_end\n+\n+    # Multiple column insertion\n+    V = Matrix([[1, 1], [1, 1], [1, 1]])\n+    expected_multiple = Matrix([\n+        [1, 0, 0, 1, 1],\n+        [0, 1, 0, 1, 1],\n+        [0, 0, 1, 1, 1]\n+    ])\n+    assert M.col_insert(3, V) == expected_multiple\n     c4 = Matrix([4, 4, 4])\n     for i in range(-4, 5):\n         l = [0, 0, 0]\n",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..e3c4747 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -665,8 +665,40 @@ def test_Poly_sub():\n def test_Poly_mul():\n     assert Poly(0, x).mul(Poly(0, x)) == Poly(0, x)\n     assert Poly(0, x) * Poly(0, x) == Poly(0, x)\n-\n-    assert Poly(2, x).mul(Poly(4, x)) == Poly(8, x)\n+from sympy import Poly, symbols, S\n+\n+def test_issue_13079():\n+    x = symbols('x')\n+    assert Poly(x)*x == Poly(x**2, x, domain='ZZ')\n+    assert x*Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert -2*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2)*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert Poly(x)*S(-2) == Poly(-2*x, x, domain='ZZ')\n+\n+# Additional test cases to check other aspects of multiplication\n+def test_Poly_multiplication_cases():\n+    x = symbols('x')\n+    y = symbols('y')\n+    \n+    # Testing integer multiplication on both sides\n+    assert Poly(x)*2 == Poly(2*x, x)\n+    assert 2*Poly(x) == Poly(2*x, x)\n+    \n+    # Testing with non-commutative elements\n+    assert Poly(x*y, x, y)*x == Poly(x**2*y, x, y)\n+    assert x*Poly(x*y, x, y) == Poly(x**2*y, x, y)\n+\n+    # Test multiplication by zero\n+    assert Poly(x, x) * 0 == Poly(0, x)\n+    assert 0 * Poly(x, x) == Poly(0, x)\n+\n+    # Testing with negative powers\n+    assert Poly(x**-1, x)*x == Poly(1, x)\n+    assert x*Poly(x**-1, x) == Poly(1, x)\n+\n+    # Check if multiplication with non-poly works\n+    assert Poly(x + 1, x)*x == Poly(x**2 + x, x)\n+    assert (x + 1)*Poly(x, x) == Poly(x**2 + x, x)\n     assert Poly(2, x, y) * Poly(4, x) == Poly(8, x, y)\n     assert Poly(4, x).mul(Poly(2, x, y)) == Poly(8, x, y)\n     assert Poly(4, x, y) * Poly(2, x, y) == Poly(8, x, y)\n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..782d11e 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -54,6 +54,18 @@ def test_printmethod():\n             return \"foo\"\n     assert latex(R(x)) == \"foo\"\n \n+def test_latex_mul_symbol_arbitrary():\n+    # Test with the custom thin space as mul_symbol\n+    assert latex(3*x**2*y, mul_symbol='\\\\,') == r\"3\\,x^{2}\\,y\"\n+    # Test with a custom symbol that is not predefined\n+    assert latex(3*x**2*y, mul_symbol='*') == r\"3*x^{2}*y\"\n+    # Verify the default behavior is unaffected\n+    assert latex(3*x**2*y) == \"3 x^{2} y\"\n+    # Test with an empty string as mul_symbol\n+    assert latex(3*x**2*y, mul_symbol='') == r\"3x^{2}y\"\n+    # Ensure numeric multiplication uses the custom symbol\n+    assert latex(1.5*3**x, mul_symbol='\\\\,') == r\"1.5\\,3^{x}\"\n+\n \n def test_latex_basic():\n     assert latex(1 + x) == \"x + 1\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..f5cc410 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -402,8 +402,26 @@ def test_determinant():\n     assert M.det(method=\"bareiss\") == z**2 - x*y\n     assert M.det(method=\"berkowitz\") == z**2 - x*y\n \n-\n-def test_det_LU_decomposition():\n+def test_issue_13835():\n+    from sympy import Matrix, symbols\n+    a = symbols('a')\n+    M = lambda n: Matrix([[i + a * j for i in range(n)] for j in range(n)])\n+    assert M(1).det() == 0\n+    assert M(2).det() == -a\n+\n+    # Test f(3) from the issue description\n+    det_f3 = 2 * a * (a + 2) + 2 * a * (2 * a + 1) - 3 * a * (2 * a + 2)\n+    assert M(3).det() == det_f3\n+\n+    # Test cases for verifying the fix\n+    # Originally, these would return 'nan' or raise an error\n+    assert M(5).det() == 0\n+    assert M(6).det() == 0\n+    assert M(7).det() == 0\n+\n+    # Check larger matrices to ensure no errors are raised\n+    assert isinstance(M(8).det(), (int, type(a)))  # Should not raise errors\n+    assert isinstance(M(9).det(), (int, type(a)))  # Should not raise errors\n \n     for M in [Matrix(), Matrix([[1]])]:\n         assert M.det(method=\"lu\") == 1\n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..c256e2d 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -708,23 +708,47 @@ def test_issue_10003():\n     G = Gamma('g', 1, 2)\n     assert P(X < -1) == S.Zero\n     assert P(G < -1) == S.Zero\n+from sympy import S, oo, Rational, sqrt, exp, pi, gamma, lowergamma, uppergamma\n+from sympy.stats import (Arcsin, Dagum, Erlang, Frechet, Gamma, GammaInverse,\n+                         Kumaraswamy, Laplace, Logistic, Nakagami, StudentT,\n+                         UniformSum, cdf)\n \n-def test_precomputed_cdf():\n+def test_precomputed_cdf_issue():\n     x = symbols(\"x\", real=True, finite=True)\n-    mu = symbols(\"mu\", real=True, finite=True)\n-    sigma, xm, alpha = symbols(\"sigma xm alpha\", positive=True, finite=True)\n-    n = symbols(\"n\", integer=True, positive=True, finite=True)\n-    distribs = [\n-            Normal(\"X\", mu, sigma),\n-            Pareto(\"P\", xm, alpha),\n-            ChiSquared(\"C\", n),\n-            Exponential(\"E\", sigma),\n-            # LogNormal(\"L\", mu, sigma),\n-    ]\n-    for X in distribs:\n-        compdiff = cdf(X)(x) - simplify(X.pspace.density.compute_cdf()(x))\n-        compdiff = simplify(compdiff.rewrite(erfc))\n-        assert compdiff == 0\n+\n+    # Test cases from the issue description\n+    assert cdf(Arcsin(\"x\", 0, 3))(1) == 2/pi * asin(sqrt(S(1)/3))\n+    \n+    dagum_cdf = cdf(Dagum(\"x\", S(1)/3, S(1)/5, 2))(3)\n+    assert dagum_cdf == (1 + (S(3)/S(1)/5)**(-S(1)/3))**(-2)\n+    \n+    erlang_cdf = cdf(Erlang(\"x\", 1, 1))(1)\n+    assert erlang_cdf == 1 - exp(-1)\n+\n+    assert cdf(Frechet(\"x\", S(4)/3, 1, 2))(3) == exp(-(1/1)**(-S(4)/3))\n+    \n+    gamma_cdf = cdf(Gamma(\"x\", 0.1, 2))(3)\n+    assert gamma_cdf == lowergamma(0.1, 1.5)/gamma(0.1)\n+\n+    gamma_inverse_cdf = cdf(GammaInverse(\"x\", S(5)/7, 2))(3)\n+    assert gamma_inverse_cdf == uppergamma(S(5)/7, 2/3)/gamma(S(5)/7)\n+\n+    assert cdf(Kumaraswamy(\"x\", S(1)/123, 5))(S(1)/3) == 1 - (1 - (S(1)/3)**(S(1)/123))**5\n+\n+    laplace_cdf = cdf(Laplace(\"x\", 2, 3))(5)\n+    assert laplace_cdf == 1 - exp(-(5 - 2)/3)/2\n+\n+    logistic_cdf = cdf(Logistic(\"x\", 1, 0.1))(2)\n+    assert logistic_cdf == 1/(1 + exp(-(2-1)/0.1))\n+\n+    nakagami_cdf = cdf(Nakagami(\"x\", S(7)/3, 1))(2)\n+    assert nakagami_cdf == lowergamma(7/3, 7*S(2)**2/3)/gamma(7/3)\n+\n+    student_t_cdf = cdf(StudentT(\"x\", 10))(2)\n+    assert student_t_cdf == S.Half + (S(2)*gamma(S(11)/2)*hyper([S.Half, S(11)/2], [S(3)/2], -S(2)**2/10))/(sqrt(10*pi)*gamma(5))\n+\n+    uniform_sum_cdf = cdf(UniformSum(\"x\", 5))(2)\n+    assert uniform_sum_cdf == Sum((-1)**k*binomial(5, k)*(2 - k)**5/120, (k, 0, floor(2)))\n \n def test_issue_13324():\n     X = Uniform('X', 0, 1)\n",
  "sympy__sympy-13974": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bd3e825..6d842af 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -48,8 +48,29 @@ def test_tensor_product_commutator():\n def test_tensor_product_simp():\n     assert tensor_product_simp(TP(A, B)*TP(B, C)) == TP(A*B, B*C)\n \n+from sympy import symbols, Symbol\n+from sympy.physics.quantum import TensorProduct as TP, tensor_product_simp\n+from sympy.physics.paulialgebra import Pauli\n \n-def test_issue_5923():\n+A, B, C, D, a = symbols('A B C D a', commutative=False)\n+\n+def test_tensor_product_powers():\n+    x = Symbol('x', commutative=True)\n+\n+    # Test cases based on the original issue examples\n+    t1 = TP(1, 1) * TP(1, 1)\n+    assert tensor_product_simp(t1) == TP(1, 1)**2\n+    assert tensor_product_simp(t1).subs(a, 1) == 1 * TP(1, 1)\n+\n+    t2 = TP(1, Pauli(3)) * TP(1, Pauli(3))\n+    assert tensor_product_simp(t2) == TP(1, Pauli(3))**2\n+    assert tensor_product_simp(t2).subs(a, Pauli(3)) == 1 * TP(1, 1)\n+\n+    # Verify behavior with symbolic powers\n+    assert tensor_product_simp(TP(A, B)**x) == TP(A**x, B**x)\n+    assert tensor_product_simp(x * TP(A, B)**2) == x * TP(A**2, B**2)\n+    assert tensor_product_simp(x * (TP(A, B)**2) * TP(C, D)) == x * TP(A**2 * C, B**2 * D)\n+    assert tensor_product_simp(TP(A, B) - TP(C, D)**x) == TP(A, B) - TP(C**x, D**x)\n     # most of the issue regarding sympification of args has been handled\n     # and is tested internally by the use of args_cnc through the quantum\n     # module, but the following is a test from the issue that used to raise.\n",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_python.py b/sympy/printing/tests/test_python.py\nindex 73fc070..7a5b2f2 100644\n--- a/sympy/printing/tests/test_python.py\n+++ b/sympy/printing/tests/test_python.py\n@@ -88,6 +88,15 @@ def test_python_relational():\n     assert python(Ne(x/(y + 1), y**2)) in [\"e = Ne(x/(1 + y), y**2)\", \"e = Ne(x/(y + 1), y**2)\"]\n \n \n+def test_python_fix():\n+    from sympy import Symbol, Eq\n+\n+    x = Symbol(\"x\")\n+    y = Symbol(\"y\")\n+\n+    # Testing if python correctly creates symbols for Eq\n+    assert python(Eq(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = Eq(x, y)\"\n+\n def test_python_functions():\n     # Simple\n     assert python((2*x + exp(x))) in \"x = Symbol('x')\\ne = 2*x + exp(x)\"\n",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..b30a99e 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -4,6 +4,21 @@ from sympy.abc import x, y, z\n from sympy.utilities.pytest import raises\n \n \n+def test_vector_addition_with_zero():\n+    N = ReferenceFrame('N')\n+    # Test case derived from the issue description\n+    result = sum([N.x, (0 * N.x)])\n+    assert result == N.x, \"Adding zero vector doesn't result in the original vector\"\n+    \n+    # Additional test cases for thorough verification\n+    assert N.x + 0 * N.x == N.x, \"Direct addition of zero should yield the original vector\"\n+    assert 0 * N.x + N.x == N.x, \"Direct addition of zero in reverse order should yield the original vector\"\n+    assert 0 * N.x == Vector(0), \"Zero times a vector should be a zero vector\"\n+    assert N.x + Vector(0) == N.x, \"Adding a zero vector should yield the original vector\"\n+    assert Vector(0) + N.x == N.x, \"Adding a zero vector in reverse order should yield the original vector\"\n+\n+from sympy.physics.vector import ReferenceFrame, Vector\n+\n Vector.simp = True\n A = ReferenceFrame('A')\n \n",
  "sympy__sympy-14976": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex fbe0d75..1422180 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import (absolute_import, division, print_function)\n \n@@ -38,6 +39,9 @@ def test_PythonCodePrinter():\n \n \n def test_MpmathPrinter():\n+    # Test that Rational numbers are converted properly\n+    assert p.doprint(Rational(1, 2)) == 'mpmath.mpf(1)/mpmath.mpf(2)'\n+    assert p.doprint(Rational(232, 3)) == 'mpmath.mpf(232)/mpmath.mpf(3)'\n     p = MpmathPrinter()\n     assert p.doprint(sign(x)) == 'mpmath.sign(x)'\n \n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..30fa00e 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -79,8 +80,17 @@ def test_ndim_array_initiation():\n     assert rank_zero_array[()] == x\n     raises(ValueError, lambda: rank_zero_array[0])\n \n+def test_rank_zero_array_length():\n+    from sympy import Array\n+\n+    # Test rank-0 array (scalar)\n+    scalar_array = Array(3)\n+    assert len(scalar_array) == 1  # Expected length for a scalar (rank-0 array)\n+    assert scalar_array.shape == ()\n+    assert scalar_array.rank() == 0\n \n-def test_reshape():\n+    # Additional test for consistency with list conversion\n+    assert len(list(scalar_array)) == 1\n     array = ImmutableDenseNDimArray(range(50), 50)\n     assert array.shape == (50,)\n     assert array.rank() == 1\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..e53c2b5 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n@@ -18,6 +19,23 @@ def test_Integer():\n def test_Rational():\n     assert mcode(Rational(3, 7)) == \"3/7\"\n     assert mcode(Rational(18, 9)) == \"2\"\n+\n+def test_Max_Min():\n+    # Original test case\n+    assert mcode(Max(x, y, z) * Min(y, z)) == \"Max[x, y, z]*Min[y, z]\"\n+    \n+    # New test cases to cover the issue\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[x, 2]\"  # Check commutativity\n+    assert mcode(Max(2, y)) == \"Max[2, y]\"\n+    assert mcode(Max(x, y, 2)) == \"Max[x, y, 2]\"\n+    assert mcode(Max(x, 2, 3)) == \"Max[x, 2, 3]\"\n+\n+    # Cases involving Min\n+    assert mcode(Min(x, 2)) == \"Min[x, 2]\"\n+    assert mcode(Min(2, x)) == \"Min[x, 2]\"  # Check commutativity\n+    assert mcode(Min(x, y, 2)) == \"Min[x, y, 2]\"\n+    assert mcode(Min(x, 2, 3)) == \"Min[x, 2, 3]\"\n     assert mcode(Rational(3, -7)) == \"-3/7\"\n     assert mcode(Rational(-3, -7)) == \"3/7\"\n     assert mcode(x + Rational(3, 7)) == \"x + 3/7\"\n",
  "sympy__sympy-15349": "diff --git a/sympy/algebras/tests/test_quaternion.py b/sympy/algebras/tests/test_quaternion.py\nindex c486cc1..ae35238 100644\n--- a/sympy/algebras/tests/test_quaternion.py\n+++ b/sympy/algebras/tests/test_quaternion.py\n@@ -112,6 +112,28 @@ def test_quaternion_conversions():\n                                                [sin(theta),  cos(theta), 0],\n                                                [0,           0,          1]])\n \n+def test_quaternion_to_rotation_matrix_issue1593():\n+    \"\"\"Test for issue #1593 to ensure Quaternion.to_rotation_matrix() returns the correct matrix.\"\"\"\n+    from sympy import symbols, cos, sin, Matrix, trigsimp\n+    from sympy.algebras.quaternion import Quaternion\n+    x = symbols('x')\n+    q1 = Quaternion(cos(x/2), sin(x/2), 0, 0)\n+    expected_matrix = Matrix([\n+        [1,      0,       0],\n+        [0, cos(x), -sin(x)],\n+        [0, sin(x),  cos(x)]\n+    ])\n+    assert trigsimp(q1.to_rotation_matrix()) == expected_matrix\n+\n+    # Additional test case\n+    q2 = Quaternion(cos(x/2), 0, sin(x/2), 0)\n+    expected_matrix2 = Matrix([\n+        [cos(x), 0, sin(x)],\n+        [     0, 1,      0],\n+        [-sin(x), 0, cos(x)]\n+    ])\n+    assert trigsimp(q2.to_rotation_matrix()) == expected_matrix2\n+\n     assert q2.to_axis_angle() == ((0, 0, sin(theta/2)/Abs(sin(theta/2))),\n                                    2*acos(cos(theta/2)))\n \n@@ -119,4 +141,4 @@ def test_quaternion_conversions():\n                [cos(theta), -sin(theta), 0, sin(theta) - cos(theta) + 1],\n                [sin(theta),  cos(theta), 0, -sin(theta) - cos(theta) + 1],\n                [0,           0,          1,  0],\n-               [0,           0,          0,  1]])\n+               [0,           0,          0,  1]])\n",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..bae4aa2 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1625,7 +1625,21 @@ def test_Mod():\n     assert (3*i*x) % (2*i*y) == i*Mod(3*x, 2*y)\n     assert Mod(4*i, 4) == 0\n \n-    # issue 8677\n+    # issue 15493\n+    i, j = symbols('i j', integer=True, positive=True)\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+    assert Mod(6*i, 2) == 0\n+    assert Mod(-3*i, 2) == Mod(i, 2)\n+    assert Mod(9*i, 2) == Mod(i, 2)\n+    assert Mod(3*i, 3) == 0\n+    assert Mod(3*i + 1, 2) == Mod(i + 1, 2)\n+    assert Mod(3*i + j, 2) == Mod(i + j, 2)\n+\n+    # Additional cases to ensure broader coverage\n+    assert Mod(2*(3*i), 2) == 0\n+    assert Mod(3*(4*i), 2) == Mod(2*i, 2)\n+    assert Mod(3*(5*i + 1), 2) == Mod(5*i + 1, 2)\n+    assert Mod(3*(i + j), 2) == Mod(i + j, 2)\n     n = Symbol('n', integer=True, positive=True)\n     assert factorial(n) % n == 0\n     assert factorial(n + 2) % n == 0\n",
  "sympy__sympy-15809": "diff --git a/sympy/functions/elementary/tests/test_miscellaneous.py b/sympy/functions/elementary/tests/test_miscellaneous.py\nindex 821fd0c..050d25b 100644\n--- a/sympy/functions/elementary/tests/test_miscellaneous.py\n+++ b/sympy/functions/elementary/tests/test_miscellaneous.py\n@@ -85,7 +85,7 @@ def test_Min():\n     assert Min(p, p_).func is Min\n \n     # lists\n-    raises(ValueError, lambda: Min())\n+    assert Min() == S.Infinity\n     assert Min(x, y) == Min(y, x)\n     assert Min(x, y, z) == Min(z, y, x)\n     assert Min(x, Min(y, z)) == Min(z, y, x)\n@@ -156,7 +156,7 @@ def test_Max():\n \n     # lists\n \n-    raises(ValueError, lambda: Max())\n+    assert Max() == S.NegativeInfinity\n     assert Max(x, y) == Max(y, x)\n     assert Max(x, y, z) == Max(z, y, x)\n     assert Max(x, Max(y, z)) == Max(z, y, x)\n",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..31769de 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1987,10 +1987,36 @@ def test_Add_is_zero():\n     assert (x + y).is_zero\n \n \n+def test_issue_15873():\n+    from sympy import I, simplify\n+    # Original test case from the issue:\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None  # is_zero should return None when undecidable\n+\n+    # Additional test case to ensure simplify affects is_zero correctly:\n+    simplified_e = simplify(e)\n+    assert simplified_e.is_zero is True  # After simplification, it should be zero\n+\n+    # Testing with purely imaginary expression:\n+    e_imag = 2*I - 2*I\n+    assert e_imag.is_zero is True  # Purely imaginary expression that is zero\n+\n+    # Testing with purely real expression:\n+    e_real = 3 - 3\n+    assert e_real.is_zero is True  # Purely real expression that is zero\n+\n+    # Test with a mixed real and imaginary expression\n+    e_mixed = x*I + x - x*I - x\n+    assert e_mixed.is_zero is None  # Indeterminate because of x being a symbol\n+\n+    # Test with a complex symbolic expression\n+    e_symbolic = x + y*I - x - y*I\n+    assert e_symbolic.is_zero is None  # Indeterminate because of x and y being symbols\n+\n def test_issue_14392():\n     assert (sin(zoo)**2).as_real_imag() == (nan, nan)\n \n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "",
  "sympy__sympy-16766": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 51a287f..7b8beba 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n \n@@ -12,6 +13,7 @@ from sympy.printing.pycode import (\n     MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter\n )\n from sympy.utilities.pytest import raises\n+from sympy.tensor import IndexedBase\n \n x, y, z = symbols('x y z')\n \n@@ -36,7 +38,16 @@ def test_PythonCodePrinter():\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n \n \n-def test_MpmathPrinter():\n+def test_Indexed_PythonCodePrinter():\n+    prntr = PythonCodePrinter()\n+    p = IndexedBase(\"p\")\n+    # Testing single index\n+    assert prntr.doprint(p[0]) == 'p[0]'\n+    # Testing multiple indices\n+    assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n+    # Testing symbolic indices\n+    i, j = symbols('i j')\n+    assert prntr.doprint(p[i, j]) == 'p[i, j]'\n     p = MpmathPrinter()\n     assert p.doprint(sign(x)) == 'mpmath.sign(x)'\n     assert p.doprint(Rational(1, 2)) == 'mpmath.mpf(1)/mpmath.mpf(2)'\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py\nindex 23fddca..f7dda80 100644\n--- a/sympy/utilities/tests/test_autowrap.py\n+++ b/sympy/utilities/tests/test_autowrap.py\n@@ -48,7 +48,17 @@ def test_cython_wrapper_scalar_function():\n     assert source == expected\n \n \n-def test_cython_wrapper_outarg():\n+def test_autowrap_cython_unused_array_arg():\n+    from sympy.utilities.autowrap import autowrap\n+    from sympy import MatrixSymbol\n+    import numpy as np\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0  # x does not appear in the expression\n+    f = autowrap(expr, args=(x,), backend='cython')\n+\n+    result = f(np.array([[1.0], [2.0]]))\n+    assert result == 1.0, \"The function should return 1.0 when the expression does not use the array argument\"\n     from sympy import Equality\n     x, y, z = symbols('x,y,z')\n     code_gen = CythonCodeWrapper(C99CodeGen())\n",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..999b24d 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -238,6 +238,9 @@ def test_decipher_kid_rsa():\n     assert decipher_kid_rsa(2, (7, 4)) == 1\n \n \n+from sympy.crypto.crypto import encode_morse, decode_morse\n+from sympy.testing.pytest import raises\n+\n def test_encode_morse():\n     assert encode_morse('ABC') == '.-|-...|-.-.'\n     assert encode_morse('SMS ') == '...|--|...||'\n@@ -249,7 +252,18 @@ def test_encode_morse():\n     assert encode_morse('!@#$%^&*()_+') == '-.-.--|.--.-.|...-..-|-.--.|-.--.-|..--.-|.-.-.'\n \n \n+def test_morse_number_encoding():\n+    # Test the encoding of Morse numbers with correct mapping for \"1\"\n+    assert encode_morse('1') == '.----'\n+    assert encode_morse('12345') == '.----|..---|...--|....-|.....'\n+    assert encode_morse('67890') == '-....|--...|---..|----.|-----'\n+    assert encode_morse('0123456789') == '-----|.----|..---|...--|....-|.....|-....|--...|---..|----.'\n+\n def test_decode_morse():\n+    # Extra tests to ensure decoding works as expected\n+    assert decode_morse('.----') == '1'\n+    assert decode_morse('.----|..---|...--|....-|.....') == '12345'\n+    assert decode_morse('-....|--...|---..|----.|-----') == '67890'\n     assert decode_morse('-.-|.|-.--') == 'KEY'\n     assert decode_morse('.-.|..-|-.||') == 'RUN'\n     raises(KeyError, lambda: decode_morse('.....----'))\n",
  "sympy__sympy-17139": "",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..b1bab98 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,3 +1,4 @@\n+\n from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n from sympy.simplify.sqrtdenest import _subsets as subsets\n from sympy.utilities.pytest import slow\n@@ -175,8 +176,16 @@ def test_subsets():\n         [0, 1, 1, 0], [1, 1, 1, 0], [0, 0, 0, 1], [1, 0, 0, 1], [0, 1, 0, 1],\n         [1, 1, 0, 1], [0, 0, 1, 1], [1, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]]\n \n+from sympy.simplify.sqrtdenest import _sqrt_match\n+from sympy.core.expr import unchanged\n \n-def test_issue_5653():\n+def test_issue_12420():\n+    I = S.ImaginaryUnit\n+    assert _sqrt_match(4 + I) == []  # Ensuring _sqrt_match handles this case\n+    expr = (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2\n+    assert sqrtdenest(expr) == expr  # Should return unchanged\n+    expr2 = 3 - sqrt(2)*sqrt(4 + I) + 3*I\n+    assert sqrtdenest(expr2) == expr2  # Should return unchanged\n     assert sqrtdenest(\n         sqrt(2 + sqrt(2 + sqrt(2)))) == sqrt(2 + sqrt(2 + sqrt(2)))\n \n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..4a68af4 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,5 @@\n-from sympy import I, Rational, Symbol, pi, sqrt, S\n+\n+from sympy import I, Rational, Symbol, pi, sqrt, S, sympify\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n@@ -28,6 +29,13 @@ def test_point():\n     assert (p2 - p1) == Point(y1 - x1, y2 - x2)\n     assert p4*5 == Point(5, 5)\n     assert -p2 == Point(-y1, -y2)\n+\n+    # Test multiplication with sympified numbers\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+    sym_number = sympify(2.0)\n+    assert point1 + point2 * sym_number == Point(2, 2)\n+    assert point1 + sym_number * point2 == Point(2, 2)\n     raises(ValueError, lambda: Point(3, I))\n     raises(ValueError, lambda: Point(2*I, I))\n     raises(ValueError, lambda: Point(3 + I, I))\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..c42c173 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -553,8 +553,22 @@ def test_diophantine():\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n     assert diophantine((y**2-x), t) == set([(t**2, -t)])\n \n-\n-def test_general_pythagorean():\n+def test_issue_18186():\n+    from sympy.abc import x, y\n+    from sympy.solvers.diophantine import diophantine\n+\n+    expr = x**4 + y**4 - 2**4 - 3**4\n+\n+    # Test with permute=True for both orders of symbols\n+    expected_solutions = set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), \n+                              (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(expr, syms=(x, y), permute=True) == expected_solutions\n+    assert diophantine(expr, syms=(y, x), permute=True) == expected_solutions\n+\n+    # Test with permute=False to ensure it returns the base solution\n+    base_solution = set([(2, 3)])\n+    assert diophantine(expr, syms=(x, y), permute=False) == base_solution\n+    assert diophantine(expr, syms=(y, x), permute=False) == base_solution\n     from sympy.abc import a, b, c, d, e\n \n     assert check_solutions(a**2 + b**2 + c**2 - d**2)\n",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..87b8994 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -675,6 +675,10 @@ def test_latex_derivatives():\n def test_latex_subs():\n     assert latex(Subs(x*y, (\n         x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n+    assert latex(3*Subs(-x+y, (x,), (1,))) == r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+    assert latex(Subs(-x+y, (x,), (1,))) == r'\\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+    # Additional test case with nested expressions\n+    assert latex(Subs(x*(y + z), (y,), (1,))) == r'\\left. x \\left(y + z\\right) \\right|_{\\substack{ y=1 }}'\n \n \n def test_latex_integrals():\n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..f46b3ae 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -513,8 +513,42 @@ def test_kernS():\n     one = kernS('x - (x - 1)')\n     assert one != 1 and one.expand() == 1\n \n+def test_kernS_unbound_local_error():\n+    # Test if kernS handles typical inputs correctly\n+    from sympy.abc import x, y\n+    assert kernS(\"(2*x)/(x-1)\") == 2*x/(x-1)  # Original test case\n \n-def test_issue_6540_6552():\n+    # Test edge cases and potential problematic inputs\n+    assert kernS(\"2*(3 + 4)\") == 2*(3 + 4)\n+    assert kernS(\"-(-x + 1/x)\") == -(-x + 1/x)\n+    assert kernS(\"E**(-x)\") == exp(-x)\n+\n+    # Additional tests based on the issue description\n+    assert kernS(\"-(x + 1)\") == -(x + 1)\n+    assert kernS(\"2*x/(x-1)\") == 2*x/(x-1)\n+\n+    # Ensuring the function does not throw an UnboundLocalError\n+    # when encountering a symbol named 'kern'\n+    assert kernS(\"kern\") == Symbol(\"kern\")\n+\n+    # Checking if it handles nested and complex expressions\n+    complex_expr = \"2*(x + y) + 3*(y + z)\"\n+    assert kernS(complex_expr) == 2*(x + y) + 3*(y + z)\n+\n+    # Check with numeric expressions\n+    assert kernS(\"1 + 2*(3 - 4)\") == 1 + 2*(3 - 4)\n+\n+    # Test with empty string\n+    try:\n+        kernS(\"\")\n+    except SympifyError:\n+        pass  # Expected to raise a SympifyError\n+\n+    # Test with unmatched parentheses\n+    try:\n+        kernS(\"(2*x + 3\")\n+    except SympifyError:\n+        pass  # Expected to raise a SympifyError\n     assert S('[[1/3,2], (2/5,)]') == [[Rational(1, 3), 2], (Rational(2, 5),)]\n     assert S('[[2/6,2], (2/4,)]') == [[Rational(1, 3), 2], (S.Half,)]\n     assert S('[[[2*(1)]]]') == [[[2]]]\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_operator.py b/sympy/physics/quantum/tests/test_operator.py\nindex 799aaae..848df98 100644\n--- a/sympy/physics/quantum/tests/test_operator.py\n+++ b/sympy/physics/quantum/tests/test_operator.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Derivative, diff, Function, Integer, Mul, pi, sin, Symbol,\n                    symbols)\n from sympy.physics.quantum.qexpr import QExpr\n@@ -105,8 +106,18 @@ def test_identity():\n     for n in [2, 3, 5]:\n         assert represent(IdentityOperator(n)) == eye(n)\n \n+def test_dagger_identity():\n+    O = Operator('O')\n+    I = IdentityOperator()\n+    D = Dagger(O)\n+\n+    # Test multiplication of Dagger with IdentityOperator\n+    assert D * I == D\n+    assert I * D == D\n \n-def test_outer_product():\n+    # Test the behavior with a more complex expression involving IdentityOperator\n+    assert (D * I) * O == D * O\n+    assert O * (I * D) == O * D\n     k = Ket('k')\n     b = Bra('b')\n     op = OuterProduct(k, b)\n",
  "sympy__sympy-19954": "",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..c810f9e 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -471,7 +471,34 @@ def test_multiset_permutations():\n         6\\n''')\n \n \n-def test_partitions():\n+from sympy.utilities.iterables import partitions\n+\n+def test_partitions_reuse_issue():\n+    # Test that partitions do not reuse the same dictionary object\n+    parts = list(partitions(6, k=2))\n+    assert all(p1 is not p2 for i, p1 in enumerate(parts) for p2 in parts[i+1:]), \\\n+        \"Partitions should not reuse the same dictionary object\"\n+\n+    parts = list(partitions(6, k=3))\n+    assert all(p1 is not p2 for i, p1 in enumerate(parts) for p2 in parts[i+1:]), \\\n+        \"Partitions should not reuse the same dictionary object\"\n+\n+    parts = list(partitions(8, k=4, m=3))\n+    assert all(p1 is not p2 for i, p1 in enumerate(parts) for p2 in parts[i+1:]), \\\n+        \"Partitions should not reuse the same dictionary object\"\n+\n+    parts = list(partitions(4, k=3))\n+    assert all(p1 is not p2 for i, p1 in enumerate(parts) for p2 in parts[i+1:]), \\\n+        \"Partitions should not reuse the same dictionary object\"\n+\n+    # Check that copying works as expected\n+    parts = [p.copy() for p in partitions(6, k=2)]\n+    assert parts == [{2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}], \\\n+        \"Partitions with copy should match expected output\"\n+    \n+    parts = [p.copy() for p in partitions(S(3), m=2)]\n+    assert parts == [{3: 1}, {1: 1, 2: 1}], \\\n+        \"Partitions with copy should match expected output\"\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n         assert list(partitions(0, size=i)) == ans[i]\n",
  "sympy__sympy-20801": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e1c7e2..278c687 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -582,9 +582,30 @@ def test_Float():\n     for i, a in zip(u, v):\n         assert Float(i) is a\n \n-\n-\n-@conserve_mpmath_dps\n+from sympy import S\n+\n+def test_zero_not_false():\n+    # Testing comparisons between zero and false\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n+    \n+    # Additional test cases for other types of comparisons\n+    assert (S(0.0) != S.false) is True\n+    assert (S.false != S(0.0)) is True\n+    assert (S(0) != S.false) is True\n+    assert (S.false != S(0)) is True\n+\n+    # Comparisons with True\n+    assert (S(1.0) == S.true) is True\n+    assert (S.true == S(1.0)) is True\n+    assert (S(1) == S.true) is True\n+    assert (S.true == S(1)) is True\n+\n+    # Check negative zero\n+    assert (S(-0.0) == S.false) is False\n+    assert (S.false == S(-0.0)) is False\n def test_float_mpf():\n     import mpmath\n     mpmath.mp.dps = 100\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..ea4f7db 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -19,6 +20,30 @@ def test_subs():\n     e = e.subs(x, n3)\n     assert e == Rational(6)\n \n+    # Additional test cases for issue with PolynomialError on subs with hyperbolic functions and piecewise\n+    from sympy.functions.elementary.trigonometric import sinh, cosh, tanh\n+    from sympy.core.cache import clear_cache\n+\n+    # Reproducing the issue with exp and sinh\n+    x_r, y_r, z_r = symbols('x_r y_r z_r', real=True)\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    expr.subs({1: 1.0})  # Should not raise PolynomialError\n+\n+    # Additional cases with cosh and tanh, which were mentioned as problematic\n+    expr_cosh = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    expr_cosh.subs({1: 1.0})  # Should not raise PolynomialError\n+\n+    expr_tanh = exp(tanh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    expr_tanh.subs({1: 1.0})  # Should not raise PolynomialError\n+\n+    # Check behavior without the division by z\n+    expr_no_div = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n+    expr_no_div.subs({1: 1.0})  # Should not raise PolynomialError\n+\n+    # Check behavior without exp\n+    expr_no_exp = sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r)\n+    expr_no_exp.subs({1: 1.0})  # Should not raise PolynomialError\n+\n \n def test_subs_Matrix():\n     z = zeros(2)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..8d9bc5d 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -12,6 +12,9 @@ from sympy.polys.monomials import (\n from sympy.polys.polyerrors import ExactQuotientFailed\n \n from sympy.abc import a, b, c, x, y, z\n+from sympy import symbols\n+from sympy.polys.monomials import itermonomials\n+from sympy.polys.orderings import monomial_key\n from sympy.core import S, symbols\n from sympy.testing.pytest import raises\n \n@@ -161,8 +164,19 @@ def test_monomials():\n                     j**2*k**2, x*j, x**2*k, x**2*j**2*k, j, x**2*j*k,\n                     x*j**2, x*k**2, x*j*k, x**2*j**2*k**2, x*j*k**2, x**2, x**2*j*k**2\n             }\n-\n-def test_monomial_count():\n+def test_issue_with_min_degrees():\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    states = [x1, x2, x3]\n+    max_degrees = 3\n+    min_degrees = 3\n+    monomials = set(itermonomials(states, max_degrees, min_degrees=min_degrees))\n+    expected_monomials = {x1**3, x2**3, x3**3, x1*x2*x2, x1*x3*x3, x2*x1**2, x2*x3*x3, x3*x1**2, x3*x2**2, x1*x2*x3, x1*x1*x2, x1*x1*x3, x2*x2*x3, x2*x1*x2, x3*x1*x3, x3*x2*x3, x1*x3*x2, x2*x3*x1, x3*x2*x1}\n+    assert monomials == expected_monomials\n+\n+    # Additional tests to verify behavior when increasing max_degrees beyond min_degrees\n+    max_degrees = 4\n+    monomials = set(itermonomials(states, max_degrees, min_degrees=min_degrees))\n+    assert {x1**3, x2**3, x3**3, x1*x2*x2, x1*x3*x3, x2*x1**2, x2*x3*x3, x3*x1**2, x3*x2**2, x1*x2*x3, x1*x1*x2, x1*x1*x3, x2*x2*x3, x2*x1*x2, x3*x1*x3, x3*x2*x3, x1*x3*x2, x2*x3*x1, x3*x2*x1}.issubset(monomials)\n     assert monomial_count(2, 2) == 6\n     assert monomial_count(2, 3) == 10\n \n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..17e4cf7 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -267,6 +267,7 @@ def test_String():\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n+    assert st.func(*st.args) == st  # Verify argument invariance for *args\n \n \n     class Signifier(String):\n@@ -279,7 +280,12 @@ def test_String():\n     assert str(s) == 'foo'\n     assert repr(s) == \"String('foo')\"\n \n-def test_Comment():\n+def test_QuotedString():\n+    qs = QuotedString('foobar')\n+    assert qs.is_Atom\n+    assert qs == QuotedString('foobar')\n+    assert qs.text == 'foobar'\n+    assert qs.func(*qs.args) == qs  # Verify argument invariance for *args\n     c = Comment('foobar')\n     assert c.text == 'foobar'\n     assert str(c) == 'foobar'\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..fefefac 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,5 @@\n+\n+from sympy.core.parameters import evaluate\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -452,7 +454,21 @@ def test__normalize_dimension():\n         Point(1, 2, 0), Point(3, 4, 0)]\n \n \n-def test_direction_cosine():\n+def test_issue_22684():\n+    # Testing Point2D creation with evaluate(False) and valid input\n+    with evaluate(False):\n+        p = Point2D(1, 2)\n+        assert isinstance(p, Point2D)\n+        assert p == Point2D(1, 2)\n+\n+    # Testing Point2D creation with evaluate(False) and invalid imaginary input\n+    with evaluate(False):\n+        raises(ValueError, lambda: Point2D(1 + I, 2))\n+\n+    # Testing Point2D creation without evaluate(False) to ensure normal behavior\n+    p_normal = Point2D(1, 2)\n+    assert isinstance(p_normal, Point2D)\n+    assert p_normal == Point2D(1, 2)\n     p1 = Point3D(0, 0, 0)\n     p2 = Point3D(1, 1, 1)\n \n",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..5278dc9 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n@@ -33,6 +34,18 @@ def test_PythonCodePrinter():\n     assert prntr.doprint(Mod(x, 2)) == 'x % 2'\n     assert prntr.doprint(-Mod(x, y)) == '-(x % y)'\n     assert prntr.doprint(Mod(-x, y)) == '(-x) % y'\n+\n+    # Test cases for Min and Max\n+    assert prntr.doprint(Min(x, y)) == \"min(x, y)\"\n+    assert prntr.doprint(Max(x, y)) == \"max(x, y)\"\n+\n+    # Additional test cases with multiple arguments\n+    assert prntr.doprint(Min(x, y, z)) == \"min(x, y, z)\"\n+    assert prntr.doprint(Max(x, y, z)) == \"max(x, y, z)\"\n+\n+    # Edge cases with constants\n+    assert prntr.doprint(Min(3, 1, 4)) == \"min(3, 1, 4)\"\n+    assert prntr.doprint(Max(3, 1, 4)) == \"max(3, 1, 4)\"\n     assert prntr.doprint(And(x, y)) == 'x and y'\n     assert prntr.doprint(Or(x, y)) == 'x or y'\n     assert not prntr.module_imports\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..d4f300f 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1182,7 +1182,12 @@ def test_lambdify_inspect():\n     assert 'x**2' in inspect.getsource(f)\n \n \n-def test_issue_14941():\n+def test_tuple_with_single_element():\n+    single_element_tuple = lambdify([], (1,))\n+    assert single_element_tuple() == (1,), \"Expected a tuple (1,) but got a different output.\"\n+    # Verify the source code to ensure the tuple is correctly represented with a comma\n+    source_code = inspect.getsource(single_element_tuple)\n+    assert \"return (1,)\" in source_code, f\"Source code does not have correct tuple representation: {source_code}\"\n     x, y = Dummy(), Dummy()\n \n     # test dict\n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..299ee96 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,7 +1,28 @@\n+\n+def test_symbols_with_extra_parentheses():\n+    # Test to verify issue with extra layer of parentheses\n+    q, u = symbols(('q:2', 'u:2'), cls=Function)\n+    assert type(q[0]) == UndefinedFunction\n+    assert type(u[0]) == UndefinedFunction\n+\n+    # Additional test cases to ensure correct behavior\n+    a, b = symbols('a b', cls=Function)\n+    assert type(a) == UndefinedFunction\n+    assert type(b) == UndefinedFunction\n+\n+    x, y = symbols(('x:2',), cls=Function)\n+    assert type(x[0]) == UndefinedFunction\n+    assert type(y[0]) == UndefinedFunction\n+\n+    c, d = symbols(('c:3',), cls=Function)\n+    assert len(c) == 3\n+    assert all(type(ci) == UndefinedFunction for ci in c)\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n from sympy.core.sympify import sympify  # can't import as S yet\n+from sympy.core.function import Function, UndefinedFunction\n from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n \n from sympy.testing.pytest import raises\n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..37ace0c 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -182,8 +182,43 @@ def execute_gamma_simplify_tests_for_function(tfunc, D):\n     st = tfunc(t)\n     assert _is_tensor_eq(st, t)\n \n+def test_kahane_leading_gamma_matrix_bug():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n+\n+    # Test case from the issue description\n+    t = G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    # Test case from the issue description\n+    t = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    # Additional test cases to ensure order preservation\n+    t = G(mu)*G(nu)*G(-nu)*G(-mu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(16*G(rho)*G(sigma))\n+\n+    t = G(rho)*G(sigma)*G(mu)*G(-mu)*G(nu)*G(-nu)\n+    r = kahane_simplify(t)\n+    assert r.equals(16*G(rho)*G(sigma))\n+\n+    t = G(mu)*G(-mu)*G(nu)*G(-nu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(16*G(rho)*G(sigma))\n+\n+    t = G(nu)*G(-nu)*G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(16*G(rho)*G(sigma))\n+\n+    t = G(nu)*G(-nu)*G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(16*G(rho)*G(sigma))\n \n-def test_kahane_algorithm():\n+    t = G(rho)*G(sigma)*G(nu)*G(-nu)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(16*G(rho)*G(sigma))\n     # Wrap this function to convert to and from TIDS:\n \n     def tfunc(e):\n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..508f6dc 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -30,6 +30,9 @@ def test_issue_10326():\n     assert Contains(-oo, Interval(-oo, oo)) == False\n \n \n+from sympy import Symbol, S, Contains, FiniteSet, Integers, Reals, Eq, Piecewise\n+from sympy.testing.pytest import raises\n+\n def test_binary_symbols():\n     x = Symbol('x')\n     y = Symbol('y')\n@@ -46,6 +49,22 @@ def test_as_set():\n     raises(NotImplementedError, lambda:\n            Contains(x, FiniteSet(y)).as_set())\n \n-def test_type_error():\n+def test_contains_as_set():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+\n+    # Test that Contains.as_set returns the expected set\n+    assert Contains(x, FiniteSet(y)).as_set() == FiniteSet(y)\n+    assert Contains(x, S.Integers).as_set() == S.Integers\n+    assert Contains(x, S.Reals).as_set() == S.Reals\n+\n+    # Test with Piecewise, ensuring no AttributeError is raised\n+    expr = Piecewise((6, Contains(x, S.Reals)), (7, True))\n+    assert expr.subs(x, 0) == 6\n+    assert expr.subs(x, float('inf')) == 6\n+    assert expr.subs(x, 1 + 1j) == 7\n+\n+    # Further assertions to verify working of Contains.as_set with Piecewise\n+    assert expr.as_expr_set_pairs() == [(6, S.Reals), (7, True)]\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..0e3ef85 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,6 +528,30 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second, Quantity\n+    from sympy.physics.units.systems.si import SI\n+    from sympy import exp\n+    from sympy.physics.units.dimensions import Dimension\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n+\n def test_issue_20288():\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..df68ca5 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -561,6 +561,28 @@ def test_issue_24062():\n     exp_expr = 1 + exp(expr)\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n+def test_issue_24211():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter, SI\n+\n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * meter / second)\n+\n+    a1 = Quantity('a1')\n+    SI.set_quantity_dimension(a1, acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)\n+\n+    t1 = Quantity('t1')\n+    SI.set_quantity_dimension(t1, time)\n+    SI.set_quantity_scale_factor(t1, 5 * second)\n+\n+    expr1 = a1 * t1 + v1\n+    # Should not raise ValueError\n+    factor, dimension = SI._collect_factor_and_dimension(expr1)\n+\n+    assert dimension == velocity\n+    assert factor == -9.8 * 5 + 2\n+\n \n def test_prefixed_property():\n     assert not meter.is_prefixed\n",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..3e68e6e 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,3 +1,4 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n@@ -57,7 +58,22 @@ def test_homomorphism():\n     assert T.codomain == D\n     assert T(a*b) == p\n \n-def test_isomorphisms():\n+def test_check_homomorphism_for_permutation_group():\n+    from sympy.combinatorics.named_groups import DihedralGroup\n+    from sympy.combinatorics.homomorphisms import homomorphism\n+\n+    D3 = DihedralGroup(3)\n+    # Homomorphism with direct generators\n+    T = homomorphism(D3, D3, D3.generators, D3.generators)\n+    assert T.is_isomorphism()\n+\n+    # Test with inverted generators\n+    inverted_generators = [gen**-1 for gen in D3.generators]\n+    try:\n+        T_inverted = homomorphism(D3, D3, D3.generators, inverted_generators)\n+        assert T_inverted.is_isomorphism()\n+    except ValueError:\n+        raise AssertionError(\"Homomorphism failed with inverted generators\")\n \n     F, a, b = free_group(\"a, b\")\n     E, c, d = free_group(\"c, d\")\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..dac72bf 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -249,6 +249,8 @@ def test_PolyElement_copy():\n     g[(1, 1, 1)] = 7\n     assert f != g\n \n+from sympy import symbols\n+\n def test_PolyElement_as_expr():\n     R, x, y, z = ring(\"x,y,z\", ZZ)\n     f = 3*x**2*y - x*y*z + 7*z**3 + 1\n@@ -267,7 +269,15 @@ def test_PolyElement_as_expr():\n \n     raises(ValueError, lambda: f.as_expr(X))\n \n-    R, = ring(\"\", ZZ)\n+    # Test with different symbols\n+    U, V, W = symbols(\"u,v,w\")\n+    g = 3*U**2*V - U*V*W + 7*W**3 + 1\n+    assert f.as_expr(U, V, W) == g\n+\n+    # Test with an incorrect number of symbols\n+    raises(ValueError, lambda: f.as_expr(U, V))\n+\n+    # Test with default ring and no symbols\n     assert R(3).as_expr() == 3\n \n def test_PolyElement_from_expr():\n",
  "sympy__sympy-24661": "diff --git a/sympy/parsing/tests/test_sympy_parser.py b/sympy/parsing/tests/test_sympy_parser.py\nindex 3723931..bf3b5bf 100644\n--- a/sympy/parsing/tests/test_sympy_parser.py\n+++ b/sympy/parsing/tests/test_sympy_parser.py\n@@ -274,6 +274,26 @@ def test_convert_equals_signs():\n         transformations=transformations) == Eq(Eq(2*y, x), False)\n \n \n+def test_parse_expr_relational_evaluate_false():\n+    relational_inputs = {\n+        \"1 < 2\": Lt(1, 2, evaluate=False),\n+        \"1 <= 2\": Le(1, 2, evaluate=False),\n+        \"1 > 2\": Gt(1, 2, evaluate=False),\n+        \"1 >= 2\": Ge(1, 2, evaluate=False),\n+        \"1 != 2\": Ne(1, 2, evaluate=False),\n+        \"1 == 2\": Eq(1, 2, evaluate=False),\n+        \"x < y\": Lt(Symbol('x'), Symbol('y'), evaluate=False),\n+        \"x <= y\": Le(Symbol('x'), Symbol('y'), evaluate=False),\n+        \"x > y\": Gt(Symbol('x'), Symbol('y'), evaluate=False),\n+        \"x >= y\": Ge(Symbol('x'), Symbol('y'), evaluate=False),\n+        \"x != y\": Ne(Symbol('x'), Symbol('y'), evaluate=False),\n+        \"x == y\": Eq(Symbol('x'), Symbol('y'), evaluate=False)\n+    }\n+    \n+    for expr_str, expected_result in relational_inputs.items():\n+        result = parse_expr(expr_str, evaluate=False)\n+        assert result == expected_result, f\"Failed for {expr_str}: got {result}, expected {expected_result}\"\n+\n def test_parse_function_issue_3539():\n     x = Symbol('x')\n     f = Function('f')\n",
  "astropy__astropy-14369": "diff --git a/astropy/units/tests/test_format.py b/astropy/units/tests/test_format.py\nindex 062b5f4..dc1643d 100644\n--- a/astropy/units/tests/test_format.py\n+++ b/astropy/units/tests/test_format.py\n@@ -32,6 +32,8 @@ from astropy.units.utils import is_effectively_unity\n         ([\"sqrt(m)\"], u.m**0.5),\n         ([\"dB(mW)\", \"dB (mW)\"], u.DecibelUnit(u.mW)),\n         ([\"mag\"], u.mag),\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.J / u.m / u.s / u.kpc**2)),\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.J / u.s / u.kpc**2)),\n         ([\"mag(ct/s)\"], u.MagUnit(u.ct / u.s)),\n         ([\"dex\"], u.dex),\n         ([\"dex(cm s**-2)\", \"dex(cm/s2)\"], u.DexUnit(u.cm / u.s**2)),\n",
  "astropy__astropy-14598": "",
  "django__django-11299": "",
  "django__django-11477": "diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex e4898b6..c91e282 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -163,6 +163,28 @@ class URLTranslationTests(URLTestCaseBase):\n             self.assertEqual(translate_url('/nl/gebruikers/', 'en'), '/en/users/')\n             self.assertEqual(translation.get_language(), 'nl')\n \n+    def test_translate_url_with_optional_parameters(self):\n+        with translation.override('en'):\n+            # URL with a missing optional parameter should still translate correctly\n+            self.assertEqual(\n+                translate_url('/en/with-arguments/regular-argument/', 'nl'),\n+                '/nl/with-arguments/regular-argument/'\n+            )\n+            # URL with an optional parameter included\n+            self.assertEqual(\n+                translate_url('/en/with-arguments/regular-argument/optional.html', 'nl'),\n+                '/nl/with-arguments/regular-argument/optional.html'\n+            )\n+            # URL with numeric optional parameters\n+            self.assertEqual(\n+                translate_url('/en/regex_optional/1/2/', 'nl'),\n+                '/nl/regex_optional/1/2/'\n+            )\n+            self.assertEqual(\n+                translate_url('/en/regex_optional/1/', 'nl'),\n+                '/nl/regex_optional/1/'\n+            )\n+\n \n class URLNamespaceTests(URLTestCaseBase):\n     \"\"\"\n",
  "django__django-12273": "diff --git a/tests/model_inheritance_regress/tests.py b/tests/model_inheritance_regress/tests.py\nindex d79faca..6653562 100644\n--- a/tests/model_inheritance_regress/tests.py\n+++ b/tests/model_inheritance_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Regression tests for Model inheritance behavior.\n \"\"\"\n@@ -18,7 +19,28 @@ from .models import (\n \n \n class ModelInheritanceTest(TestCase):\n-    def test_model_inheritance(self):\n+    def test_create_new_instance_with_pk_equals_none(self):\n+        derived_instance = Derived.objects.create(f=True)\n+        # Reset the pk to None, expecting a new instance creation\n+        derived_instance.pk = None\n+        derived_instance.f = False\n+        derived_instance.save()\n+\n+        self.assertEqual(Derived.objects.count(), 2)\n+        original_instance = Derived.objects.get(f=True)\n+        self.assertIsNotNone(original_instance)\n+        self.assertTrue(original_instance.f)\n+\n+    def test_reset_method_creates_new_instance(self):\n+        derived_instance = Derived.objects.create(f=True)\n+        # Use the reset method to set pk to None, expecting a new instance\n+        derived_instance.reset()\n+        derived_instance.save()\n+\n+        self.assertEqual(Derived.objects.count(), 2)\n+        original_instance = Derived.objects.get(f=True)\n+        self.assertIsNotNone(original_instance)\n+        self.assertTrue(original_instance.f)\n         # Regression for #7350, #7202\n         # When you create a Parent object with a specific reference to an\n         # existent child instance, saving the Parent doesn't duplicate the\n",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..a03496b 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -605,6 +605,15 @@ class DeletionTests(TestCase):\n \n \n class FastDeleteTests(TestCase):\n+    def test_fast_delete_all_no_subquery(self):\n+        \"\"\"\n+        Test that performing a full delete does not generate a subquery.\n+        \"\"\"\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        # Ensure no subqueries are used when performing a full delete.\n+        self.assertNotIn('SELECT', sql)\n \n     def test_fast_delete_fk(self):\n         u = User.objects.create(\n@@ -702,4 +711,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..a685fb3 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from decimal import Decimal\n \n@@ -24,8 +25,21 @@ class DecimalFieldTests(TestCase):\n         msg = '\u201cabc\u201d value must be a decimal number.'\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n-\n-    def test_default(self):\n+    def test_invalid_types_raise_validation_error(self):\n+        field = models.DecimalField(max_digits=4, decimal_places=2)\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        invalid_values = [\n+            {},  # dictionary type\n+            [],  # list type\n+            (),  # tuple type\n+            set(),  # set type\n+            object(),  # general object\n+            complex(1, 1),  # complex number\n+        ]\n+        for value in invalid_values:\n+            with self.subTest(value=value):\n+                with self.assertRaisesMessage(ValidationError, msg % value):\n+                    field.to_python(value)\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n \n",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..75e3ad3 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n \n@@ -5,7 +6,8 @@ import django\n from django.db import models\n from django.test import TestCase\n \n-from .models import Container, Event, Group, Happening, M2MModel, MyEvent\n+from .models import Container, Event, Group, Happening, M2MModel, MyEvent, Toy\n+from django.db.models import Sum\n \n \n class PickleabilityTestCase(TestCase):\n@@ -219,7 +221,43 @@ class PickleabilityTestCase(TestCase):\n         with self.assertNumQueries(0):\n             self.assert_pickles(groups)\n \n-    def test_annotation_with_callable_default(self):\n+    def test_pickle_queryset_values_annotate(self):\n+        \"\"\"\n+        Test for pickling/unpickling a queryset using values() and annotate().\n+        This addresses the issue where the queryset crashes on evaluation after\n+        being unpickled.\n+        \"\"\"\n+        Toy.objects.create(name='foo', price=10, material='wood')\n+        Toy.objects.create(name='bar', price=20, material='plastic')\n+        Toy.objects.create(name='baz', price=100, material='wood')\n+\n+        qs = Toy.objects.values('material').annotate(total_price=Sum('price'))\n+        reloaded = Toy.objects.all()\n+        reloaded.query = pickle.loads(pickle.dumps(qs.query))\n+        self.assertQuerysetEqual(\n+            reloaded.order_by('material'), \n+            [{'material': 'plastic', 'total_price': 20}, {'material': 'wood', 'total_price': 110}],\n+            lambda x: x\n+        )\n+\n+    def test_pickle_queryset_values_list_annotate(self):\n+        \"\"\"\n+        Test for pickling/unpickling a queryset using values_list() and annotate().\n+        This addresses the issue where the queryset crashes on evaluation after\n+        being unpickled.\n+        \"\"\"\n+        Toy.objects.create(name='foo', price=10, material='wood')\n+        Toy.objects.create(name='bar', price=20, material='plastic')\n+        Toy.objects.create(name='baz', price=100, material='wood')\n+\n+        qs = Toy.objects.values_list('material', 'price').annotate(total_price=Sum('price'))\n+        reloaded = Toy.objects.all()\n+        reloaded.query = pickle.loads(pickle.dumps(qs.query))\n+        self.assertQuerysetEqual(\n+            reloaded.order_by('material'), \n+            [('plastic', 20, 20), ('wood', 100, 110)],\n+            lambda x: (x['material'], x['price'], x['total_price'])\n+        )\n         # Happening.when has a callable default of datetime.datetime.now.\n         qs = Happening.objects.annotate(latest_time=models.Max('when'))\n         self.assert_pickles(qs)\n",
  "django__django-13449": "diff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\nindex 3f59cdf..e667281 100644\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -11,4 +11,6 @@ class Employee(models.Model):\n     department = models.CharField(max_length=40, blank=False, null=False)\n     hire_date = models.DateField(blank=False, null=False)\n     age = models.IntegerField(blank=False, null=False)\n-    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    # Adding a bonus field to test the DecimalField with Lag function\n+    bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\n",
  "django__django-13512": "diff --git a/tests/forms_tests/field_tests/test_jsonfield.py b/tests/forms_tests/field_tests/test_jsonfield.py\nindex e31bff4..9dac32b 100644\n--- a/tests/forms_tests/field_tests/test_jsonfield.py\n+++ b/tests/forms_tests/field_tests/test_jsonfield.py\n@@ -25,6 +25,15 @@ class JSONFieldTest(SimpleTestCase):\n             field.clean('{some badly formed: json}')\n \n     def test_prepare_value(self):\n+        # Added test cases to verify Unicode character handling in JSONField\n+        field = JSONField()\n+        self.assertEqual(field.prepare_value({'a': '\u4f60\u597d \u4e16\u754c'}), '{\"a\": \"\u4f60\u597d \u4e16\u754c\"}')\n+        self.assertEqual(field.prepare_value('\u4f60\u597d\uff0c\u4e16\u754c'), '\"\u4f60\u597d\uff0c\u4e16\u754c\"')\n+        self.assertEqual(field.prepare_value({'a': '\ud83d\ude00\ud83d\udc31'}), '{\"a\": \"\ud83d\ude00\ud83d\udc31\"}')\n+        self.assertEqual(\n+            field.prepare_value([\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]),\n+            '[\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]',\n+        )\n         field = JSONField()\n         self.assertEqual(field.prepare_value({'a': 'b'}), '{\"a\": \"b\"}')\n         self.assertEqual(field.prepare_value(None), 'null')\n",
  "django__django-14404": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 8fb91af..b53cf44 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -6602,6 +6602,10 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         response = self.client.get(known_url[:-1])\n         self.assertRedirects(response, known_url, status_code=301, target_status_code=403)\n \n+    from django.test import override_settings\n+    from django.contrib.auth.models import User\n+    from django.urls import reverse\n+\n     @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n         user = User.objects.create_user(\n@@ -6628,6 +6632,10 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         response = self.client.get(known_url[:-1])\n         self.assertEqual(response.status_code, 404)\n \n+    from django.test import override_settings\n+    from django.contrib.auth.models import User\n+    from django.urls import reverse\n+\n     @override_settings(APPEND_SLASH=True)\n     def test_single_model_no_append_slash(self):\n         superuser = User.objects.create_user(\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..6270bb7 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -691,6 +691,28 @@ class WriterTests(SimpleTestCase):\n         result = self.safe_exec(output)\n         self.assertIn(\"Migration\", result)\n \n+    def test_serialize_import_models(self):\n+        \"\"\"\n+        Test that models import is correctly added to the migration file.\n+        \"\"\"\n+        fields = {\n+            'name': models.TextField(),\n+        }\n+\n+        migration = type(\"Migration\", (migrations.Migration,), {\n+            \"operations\": [\n+                migrations.CreateModel(\"MyModel\", tuple(fields.items()), bases=(models.Model,)),\n+            ],\n+            \"dependencies\": [],\n+        })\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        # Check that 'from django.db import models' is in the output\n+        self.assertIn('from django.db import models', output)\n+        # Ensure the migration can be executed without import errors\n+        result = self.safe_exec(output)\n+        self.assertIn(\"Migration\", result)\n+\n     def test_migration_path(self):\n         test_apps = [\n             'migrations.migrations_test_apps.normal',\n",
  "django__django-15375": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1d4ef56..0a02e2b 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1630,7 +1630,10 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertAlmostEqual(result['value'], Decimal('61.72'), places=2)\n \n-    def test_exists_none_with_aggregate(self):\n+    def test_aggregate_with_default_after_annotation(self):\n+        # Test to ensure that annotate followed by aggregate with a default works without errors.\n+        result = Book.objects.annotate(idx=F(\"id\")).aggregate(Sum(\"id\", default=0))\n+        self.assertEqual(result['id__sum'], 4560)\n         qs = Book.objects.all().annotate(\n             count=Count('id'),\n             exists=Exists(Author.objects.none()),\n@@ -1642,4 +1645,4 @@ class AggregateTestCase(TestCase):\n             count=Count('id'),\n             exists=Exists(Author.objects.extra(where=['1=0'])),\n         )\n-        self.assertEqual(len(qs), 6)\n+        self.assertEqual(len(qs), 6)\n",
  "django__django-15695": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 99db46a..4ef716e 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -2984,13 +2984,33 @@ class OperationTests(OperationTestBase):\n         with connection.schema_editor() as editor:\n             operation.database_forwards(app_label, editor, project_state, new_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n-        # Reverse is a no-op.\n-        with connection.schema_editor() as editor, self.assertNumQueries(0):\n-            operation.database_backwards(app_label, editor, new_state, project_state)\n+        \n+        # Re-apply renaming, should not crash.\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+        \n+        # Reverse should restore auto-generated name without crashing.\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        self.assertIndexNameExists(table_name, \"auto_pony_test_idx\")  # Assuming the autogenerated name\n+\n         # Deconstruction.\n         definition = operation.deconstruct()\n         self.assertEqual(definition[0], \"RenameIndex\")\n+\n+        # Test backward and forward with unnamed index, moving index backward and forward.\n+        original_state = project_state.clone()\n+        \n+        # Simulate moving index backward\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, original_state)\n+        self.assertIndexNameExists(table_name, \"auto_pony_test_idx\")  # Check auto-generated name\n+        \n+        # Move forward again and ensure no crash\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, original_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n         self.assertEqual(definition[1], [])\n         self.assertEqual(\n             definition[2],\n",
  "django__django-15732": "",
  "django__django-15916": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex cc5e08c..742056a 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -3497,7 +3497,56 @@ class FormFieldCallbackTests(SimpleTestCase):\n             )\n \n \n-class LocalizedModelFormTest(TestCase):\n+from django.test import TestCase\n+from django import forms\n+from django.forms import modelform_factory\n+from .models import Person  # Assuming Person is a model defined in models.py\n+\n+\n+class ModelFormMetaCallbackTest(TestCase):\n+    def test_formfield_callback_in_meta(self):\n+        def callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea)\n+\n+        class TestForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = [\"id\", \"name\"]\n+                formfield_callback = callback\n+\n+        for field in TestForm.base_fields.values():\n+            self.assertEqual(type(field.widget), forms.Textarea)\n+\n+    def test_modelform_factory_with_callback_in_meta(self):\n+        def callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea)\n+\n+        class BaseForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = \"__all__\"\n+                formfield_callback = callback\n+\n+        FactoryForm = modelform_factory(model=Person, form=BaseForm)\n+\n+        for field in FactoryForm.base_fields.values():\n+            self.assertEqual(type(field.widget), forms.Textarea)\n+\n+    def test_inherited_form_uses_callback_from_meta(self):\n+        def callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea)\n+\n+        class BaseForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = \"__all__\"\n+                formfield_callback = callback\n+\n+        class InheritedForm(BaseForm):\n+            pass\n+\n+        for field in InheritedForm.base_fields.values():\n+            self.assertEqual(type(field.widget), forms.Textarea)\n     def test_model_form_applies_localize_to_some_fields(self):\n         class PartiallyLocalizedTripleForm(forms.ModelForm):\n             class Meta:\n",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..fee476c 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -9,13 +9,49 @@ from django.core.serializers.json import DjangoJSONEncoder\n from django.db import models\n from django.test import SimpleTestCase, TestCase, TransactionTestCase\n from django.test.utils import isolate_apps\n-from django.utils.translation import gettext_lazy, override\n+from django.core.exceptions import FieldError\n+from django.db import models\n+from django.core import serializers\n \n from .models import Score\n from .tests import SerializersTestBase, SerializersTransactionTestBase\n \n \n-class JsonSerializerTestCase(SerializersTestBase, TestCase):\n+class RelatedManagerSelectRelatedTestCase(TestCase):\n+    def setUp(self):\n+        class TestTagManager(models.Manager):\n+            def get_queryset(self):\n+                return super().get_queryset().select_related(\"master\")\n+\n+        class TestTagMaster(models.Model):\n+            name = models.CharField(max_length=120)\n+\n+        class TestTag(models.Model):\n+            objects = TestTagManager()\n+            name = models.CharField(max_length=120)\n+            master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)\n+\n+        class Test(models.Model):\n+            name = models.CharField(max_length=120)\n+            tags = models.ManyToManyField(TestTag, blank=True)\n+\n+        self.Test = Test\n+        self.TestTag = TestTag\n+        self.TestTagMaster = TestTagMaster\n+\n+    def test_serialization_with_select_related_raises_field_error(self):\n+        tag_master = self.TestTagMaster.objects.create(name=\"master\")\n+        tag = self.TestTag.objects.create(name=\"tag\", master=tag_master)\n+        test_instance = self.Test.objects.create(name=\"test\")\n+        test_instance.tags.add(tag)\n+\n+        with self.assertRaises(FieldError) as cm:\n+            serializers.serialize(\"json\", [test_instance])\n+\n+        self.assertIn(\n+            \"Field TestTag.master cannot be both deferred and traversed using select_related at the same time.\",\n+            str(cm.exception),\n+        )\n     serializer_name = \"json\"\n     pkless_str = \"\"\"[\n     {\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_backend_macosx.py b/lib/matplotlib/tests/test_backend_macosx.py\nindex 06d044f..0296162 100644\n--- a/lib/matplotlib/tests/test_backend_macosx.py\n+++ b/lib/matplotlib/tests/test_backend_macosx.py\n@@ -3,7 +3,9 @@ import os\n import pytest\n \n import matplotlib as mpl\n+import pickle\n import matplotlib.pyplot as plt\n+from matplotlib.figure import Figure\n try:\n     from matplotlib.backends import _macosx\n except ImportError:\n@@ -11,6 +13,18 @@ except ImportError:\n \n \n @pytest.mark.backend('macosx')\n+def test_dpi_after_unpickle():\n+    # Create a figure and set its DPI\n+    fig = plt.figure(dpi=200)\n+    original_dpi = fig.dpi\n+\n+    # Pickle and unpickle the figure\n+    fig_pickled = pickle.dumps(fig)\n+    fig_unpickled = pickle.loads(fig_pickled)\n+    \n+    # Check if the DPI is unchanged\n+    assert fig_unpickled.dpi == original_dpi, \\\n+        f\"Expected DPI {original_dpi}, but got {fig_unpickled.dpi}\"\n def test_cached_renderer():\n     # Make sure that figures have an associated renderer after\n     # a fig.canvas.draw() call\n@@ -24,6 +38,18 @@ def test_cached_renderer():\n \n \n @pytest.mark.backend('macosx')\n+def test_dpi_after_unpickle():\n+    # Create a figure and set its DPI\n+    fig = plt.figure(dpi=200)\n+    original_dpi = fig.dpi\n+\n+    # Pickle and unpickle the figure\n+    fig_pickled = pickle.dumps(fig)\n+    fig_unpickled = pickle.loads(fig_pickled)\n+    \n+    # Check if the DPI is unchanged\n+    assert fig_unpickled.dpi == original_dpi, \\\n+        f\"Expected DPI {original_dpi}, but got {fig_unpickled.dpi}\"\n def test_savefig_rcparam(monkeypatch, tmp_path):\n \n     def new_choose_save_file(title, directory, filename):\n",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 87375f2..905648d 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6586,7 +6586,12 @@ def test_integrate(dask):\n     assert isinstance(actual.data, type(da.data))\n \n     # along y\n-    actual = da.integrate(\"y\")\n+    # Test deprecation warning for using 'dim' in DataArray.integrate\n+    with pytest.warns(FutureWarning):\n+        da.integrate(dim=\"x\")\n+    \n+    # Test using 'coord' for both DataArray and Dataset\n+    actual = da.integrate(coord=\"y\")\n     expected_y = xr.DataArray(\n         np.trapz(da, da[\"y\"], axis=1),\n         dims=[\"x\"],\n",
  "pydata__xarray-4094": "",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..745d43a 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -114,6 +114,12 @@ def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     output = capsys.readouterr()\n     assert \"the-newest has an invalid format, should be a version string.\" in output.err\n \n+from typing import Any\n+import re\n+import pytest\n+from pylint.lint import Run\n+from pylint.testutils import EMPTY_MODULE\n+from typing import Sequence, Pattern\n \n def test_regex_error(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error when an an option is passed whose value is an invalid regular expression.\"\"\"\n@@ -130,8 +136,35 @@ def test_regex_error(capsys: CaptureFixture) -> None:\n     )\n     assert assertString in output.err\n \n-\n def test_csv_regex_error(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly parse a comma-separated regex when there are one\n+    or more commas within quantifier expressions, and handle errors correctly.\"\"\"\n+    valid_cases = [\n+        (\"foo\", [\"foo\"]),\n+        (\"foo,bar\", [\"foo\", \"bar\"]),\n+        (\"foo, bar\", [\"foo\", \"bar\"]),\n+        (\"foo, bar{1,3}\", [\"foo\", \"bar{1,3}\"]),\n+        (\"foo{1,3}\", [\"foo{1,3}\"]),\n+        (\"(foo{1,3})\", [\"(foo{1,3})\"]),\n+    ]\n+\n+    for in_string, expected in valid_cases:\n+        r = Run([str(EMPTY_MODULE), rf\"--bad-names-rgx={in_string}\"], exit=False)\n+        bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs\n+        assert bad_names_rgxs == [re.compile(regex) for regex in expected]\n+\n+    invalid_cases = [\n+        \"(foo{1,}, foo{1,3}})\"\n+    ]\n+\n+    for in_string in invalid_cases:\n+        with pytest.raises(SystemExit):\n+            Run([str(EMPTY_MODULE), rf\"--bad-names-rgx={in_string}\"], exit=False)\n+        output = capsys.readouterr()\n+        assert (\n+            f\"Error in provided regular expression: {in_string.split(',')[0]}\"\n+            in output.err\n+        )\n     \"\"\"Check that we correctly error when an option is passed and one\n     of its comma-separated regular expressions values is an invalid regular expression.\n     \"\"\"\n",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..3bfd2d6 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1156,6 +1156,9 @@ def test_summary_list_after_errors(testdir):\n     )\n \n \n+import pytest\n+from _pytest.main import ExitCode\n+\n def test_importorskip():\n     with pytest.raises(\n         pytest.skip.Exception,\n@@ -1184,4 +1187,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "diff --git a/testing/test_mark_expression.py b/testing/test_mark_expression.py\nindex 10b71e9..ea747e2 100644\n--- a/testing/test_mark_expression.py\n+++ b/testing/test_mark_expression.py\n@@ -133,11 +133,26 @@ def test_syntax_errors(expr: str, column: int, message: str) -> None:\n         \"if\",\n         \"else\",\n         \"while\",\n+        \"NoneExpression\",\n+        \"TrueExpression\",\n+        \"FalseExpression\",\n     ),\n )\n def test_valid_idents(ident: str) -> None:\n     assert evaluate(ident, {ident: True}.__getitem__)\n \n+@pytest.mark.parametrize(\n+    \"invalid_ident\",\n+    (\n+        \"None\",\n+        \"True\",\n+        \"False\",\n+    ),\n+)\n+def test_invalid_idents(invalid_ident: str) -> None:\n+    with pytest.raises(AssertionError):\n+        Expression.compile(invalid_ident)\n+\n \n @pytest.mark.parametrize(\n     \"ident\",\n",
  "scikit-learn__scikit-learn-25747": "",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex f07be18..bcbde36 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -10,7 +10,8 @@\n \n import pytest\n \n-from sphinx import addnodes\n+from sphinx import addnodes, nodes\n+from sphinx.ext.autodoc.typehints import merge_typehints\n \n \n @pytest.mark.sphinx('dummy', testroot='ext-autodoc')\n@@ -30,4 +31,4 @@ def test_autodoc(app, status, warning):\n my_name\n \n alias of bug2437.autodoc_dummy_foo.Foo\"\"\"\n-    assert warning.getvalue() == ''\n+    assert warning.getvalue() == ''\n",
  "sphinx-doc__sphinx-8056": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 1d6a8cf..799b3ee 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1317,6 +1317,60 @@ class NumpyDocstringTest(BaseDocstringTest):\n             expected = dedent(expected)\n             self.assertEqual(expected, actual)\n \n+    def test_multiple_parameters_combined(self):\n+        # Test with napoleon_use_param set to False\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like\n+    Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test with napoleon_use_param set to True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: :class:`array_like`\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: :class:`array_like`\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_combined_optional(self):\n+        # Test with napoleon_use_param set to False\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test with napoleon_use_param set to True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: :class:`array_like`, *optional*\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_parameters_with_class_reference(self):\n         docstring = \"\"\"\\\n Parameters\n",
  "sphinx-doc__sphinx-8551": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex fd4bdc4..9e844c7 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -773,9 +773,43 @@ def test_pydecoratormethod_signature(app):\n     assert 'deco' in domain.objects\n     assert domain.objects['deco'] == ('index', 'deco', 'method')\n \n-\n @pytest.mark.sphinx(freshenv=True)\n-def test_module_index(app):\n+def test_ambiguous_class_lookup_in_type_and_rtype(app):\n+    text = (\"\"\"\n+    .. py:module:: mod\n+\n+    .. py:class:: A\n+    .. py:module:: mod.submod\n+    .. py:class:: A\n+\n+    .. py:function:: f()\n+    \n+        :param A a: test parameter\n+        :param mod.A b: test parameter\n+        :param mod.submod.A c: test parameter\n+        :rtype: A\n+\n+    .. py:currentmodule:: mod.submod\n+\n+    .. py:function:: f()\n+    \n+        :param A a: test parameter\n+        :param mod.A b: test parameter\n+        :param mod.submod.A c: test parameter\n+        :rtype: A\n+    \"\"\")\n+\n+    # Parse the reStructuredText\n+    doctree = restructuredtext.parse(app, text)\n+\n+    # Check that the ambiguous warnings are resolved\n+    assert_node(doctree, (nodes.document, [addnodes.index, addnodes.index,\n+                                           [desc, ([desc_signature, ([desc_annotation, \"function \"],\n+                                                                     [desc_name, \"f\"])],\n+                                                   [desc_content, nodes.field_list])]]))\n+\n+    # Verify that the type references resolve correctly\n+    assert_node(doctree[2][1][0][1][0], pending_xref, refdomain=\"py\", reftype=\"class\", reftarget=\"mod.submod.A\")\n     text = (\".. py:module:: docutils\\n\"\n             \".. py:module:: sphinx\\n\"\n             \".. py:module:: sphinx.config\\n\"\n",
  "sphinx-doc__sphinx-8593": "diff --git a/tests/roots/test-ext-autodoc/target/private.py b/tests/roots/test-ext-autodoc/target/private.py\nindex 677b469..ec4b94e 100644\n--- a/tests/roots/test-ext-autodoc/target/private.py\n+++ b/tests/roots/test-ext-autodoc/target/private.py\n@@ -1,3 +1,6 @@\n+\n+_foo = None  #: :meta public:\n+\n def private_function(name):\n     \"\"\"private_function is a docstring().\n \n@@ -8,4 +11,4 @@ def _public_function(name):\n     \"\"\"public_function is a docstring().\n \n     :meta public:\n-    \"\"\"\n+    \"\"\"\n",
  "sphinx-doc__sphinx-9230": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex e86a758..6fe239c 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -983,6 +983,47 @@ def test_info_field_list(app):\n                 refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n+    # Test for dict(str, str) parameter rendering\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:class:: Class\\n\"\n+            \"\\n\"\n+            \"   :param dict(str, str) opc_meta: (optional)\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree, (nodes.target,\n+                          addnodes.index,\n+                          addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                                    [desc_addname, \"example.\"],\n+                                                    [desc_name, \"Class\"])],\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree[3][1][0][0],\n+                ([nodes.field_name, \"Parameters\"],\n+                 [nodes.field_body, nodes.bullet_list, [nodes.list_item, nodes.paragraph]]))\n+\n+    # :param dict(str, str) opc_meta:\n+    assert_node(doctree[3][1][0][0][1][0][0][0],\n+                ([addnodes.literal_strong, \"opc_meta\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"dict\"],\n+                 [addnodes.literal_emphasis, \"(\"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \", \"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \")\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"(optional)\"))\n+    assert_node(doctree[3][1][0][0][1][0][0][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"dict\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+\n \n def test_info_field_list_var(app):\n     text = (\".. py:class:: Class\\n\"\n",
  "sphinx-doc__sphinx-9258": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a7d51b6..30e24e6 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -1008,6 +1008,39 @@ def test_info_field_list(app):\n                 refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n+def test_info_field_list_piped_type(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:class:: Class\\n\"\n+            \"\\n\"\n+            \"   :param age: blah blah\\n\"\n+            \"   :type age: int | str\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree,\n+                (nodes.target,\n+                 addnodes.index,\n+                 addnodes.index,\n+                 [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                           [desc_addname, \"example.\"],\n+                                           [desc_name, \"Class\"])],\n+                         [desc_content, nodes.field_list, nodes.field, (nodes.field_name,\n+                                                                        nodes.field_body)])]))\n+    assert_node(doctree[3][1][0][0][1],\n+                ([nodes.paragraph, ([addnodes.literal_strong, \"age\"],\n+                                    \" (\",\n+                                    [pending_xref, addnodes.literal_emphasis, \"int\"],\n+                                    [addnodes.literal_emphasis, \" | \"],\n+                                    [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                                    \")\",\n+                                    \" -- \",\n+                                    \"blah blah\")],))\n+    assert_node(doctree[3][1][0][0][1][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"int\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+\n \n def test_info_field_list_var(app):\n     text = (\".. py:class:: Class\\n\"\n",
  "sphinx-doc__sphinx-9673": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex aa0401e..6e0b9ce 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -833,11 +833,47 @@ def test_autodoc_typehints_description(app):\n             '   docstring\\n'\n             in context)\n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\",\n+                                   'autodoc_typehints_description_target': 'documented',\n+                                   'napoleon_numpy_docstring': False})\n+def test_autodoc_typehints_description_with_napoleon(app):\n+    # Test case to verify that return types are documented when using Napoleon with Google style\n+    # and autodoc_typehints_description_target set to \"documented\".\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autofunction:: target.typehints.decr\\n'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text()\n+    assert ('target.typehints.decr(a: int, b: int = 1) -> int\\n'\n+            '\\n'\n+            '   Returns:\\n'\n+            '      decremented number\\n'\n+            '\\n'\n+            '   Return type:\\n'\n+            '      int\\n'\n+            in context)\n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\",\n-                                   'autodoc_typehints_description_target': 'documented'})\n-def test_autodoc_typehints_description_no_undoc(app):\n+                                   'autodoc_typehints_description_target': 'all',\n+                                   'napoleon_numpy_docstring': False})\n+def test_autodoc_typehints_description_with_napoleon_all(app):\n+    # Test case to verify that return types are documented when using Napoleon with Google style\n+    # and autodoc_typehints_description_target set to \"all\".\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autofunction:: target.typehints.decr\\n'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text()\n+    assert ('target.typehints.decr(a: int, b: int = 1) -> int\\n'\n+            '\\n'\n+            '   Returns:\\n'\n+            '      decremented number\\n'\n+            '\\n'\n+            '   Return type:\\n'\n+            '      int\\n'\n+            in context)\n     # No :type: or :rtype: will be injected for `incr`, which does not have\n     # a description for its parameters or its return. `tuple_args` does\n     # describe them, so :type: and :rtype: will be added.\n",
  "sympy__sympy-18211": "diff --git a/sympy/solvers/tests/test_solveset.py b/sympy/solvers/tests/test_solveset.py\nindex 7bd9e29..9c3aca3 100644\n--- a/sympy/solvers/tests/test_solveset.py\n+++ b/sympy/solvers/tests/test_solveset.py\n@@ -1069,6 +1069,17 @@ def test_conditionset():\n \n \n @XFAIL\n+def test_issue_18188():\n+    from sympy import Eq, cos, sin, ConditionSet, Reals, Symbol\n+    x = Symbol('x')\n+    # Test case from the issue description\n+    result1 = Eq(x*cos(x) - 3*sin(x), 0)\n+    assert result1.as_set() == ConditionSet(x, Eq(x*cos(x) - 3*sin(x), 0), Reals)\n+    \n+    # Additional test case for similar expression\n+    result2 = Eq(x**2 + sin(x), 0)\n+    assert result2.as_set() == ConditionSet(x, Eq(x**2 + sin(x), 0), Reals)\n+\n def test_conditionset_equality():\n     ''' Checking equality of different representations of ConditionSet'''\n     assert solveset(Eq(tan(x), y), x) == ConditionSet(x, Eq(tan(x), y), S.Complexes)\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..f3cd7e9 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -249,6 +249,8 @@ def test_Poly_from_poly():\n         h, gens=(x, y), field=True).rep == DMP([[QQ(1)], [QQ(1), QQ(0)]], QQ)\n \n \n+from sympy import symbols, expand, factor, I\n+\n def test_Poly_from_expr():\n     raises(GeneratorsNeeded, lambda: Poly.from_expr(S.Zero))\n     raises(GeneratorsNeeded, lambda: Poly.from_expr(S(7)))\n@@ -3255,7 +3257,16 @@ def test_issue_5786():\n         (x - I*y)*(z - I*t)), extension=[I])) == -I*t*x - t*y + x*z - I*y*z\n \n \n-def test_noncommutative():\n+def test_issue_18895_factor_with_extension():\n+    x, y = symbols('x y')\n+    z = expand((x - 1)*(y - 1))\n+\n+    # Without extension, the factorization should be (x - 1)*(y - 1)\n+    assert factor(z) == (x - 1)*(y - 1)\n+\n+    # With the extension, we expect the same factorization\n+    # The issue was that it dropped (y - 1), this should not happen\n+    assert factor(z, extension=[I]) == (x - 1)*(y - 1)\n     class foo(Expr):\n         is_commutative=False\n     e = x/(x + x*y)\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..fcd5abf 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"This tests sympy/core/basic.py with (ideally) no reference to subclasses\n of Basic or Atom.\"\"\"\n \n@@ -8,6 +9,7 @@ from sympy.core.basic import (Basic, Atom, preorder_traversal, as_Basic,\n from sympy.core.singleton import S\n from sympy.core.symbol import symbols, Symbol, Dummy\n from sympy.core.sympify import SympifyError\n+from sympy.core.symbol import Symbol\n from sympy.core.function import Function, Lambda\n from sympy.core.compatibility import default_sort_key\n \n",
  "sympy__sympy-24562": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 13e3235..04c6245 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -369,6 +369,22 @@ def test_Rational_new():\n     assert n.q == 4\n     assert n.p == -2\n \n+def test_issue_24543():\n+    from sympy import Rational\n+\n+    # Verify the specific issue is fixed\n+    assert Rational('0.5', '100') == Rational(1, 200)\n+    assert Rational(0.5, 100) == Rational(1, 200)\n+\n+    # Checking consistency with other similar cases\n+    assert Rational('1.5', '100') == Rational(3, 200)\n+    assert Rational('0.25', '4') == Rational(1, 16)\n+    assert Rational('2', '4') == Rational(1, 2)\n+\n+    # Testing with different types of inputs\n+    for p in ('1.5', 1.5, 2):\n+        for q in ('1.5', 1.5, 2):\n+            assert Rational(p, q).as_numer_denom() == Rational('%s/%s' % (p, q)).as_numer_denom()\n \n def test_Number_new():\n     \"\"\"\"\n",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..7af0cca 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,7 +3202,21 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n-    def test_boundfield_widget_type(self):\n+    def test_boundwidget_id_for_label_with_custom_id(self):\n+        \"\"\"\n+        Ensure that the BoundWidget.id_for_label returns the correct id\n+        when a custom id is provided via ChoiceWidget.options.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'custom_id_%s'}),\n+            )\n+\n+        form = SomeForm()\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_id_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_id_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "matplotlib__matplotlib-20676": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex b009975..b0fec1a 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -302,6 +302,66 @@ def test_tool_line_handle():\n     assert tool_line_handle.positions == positions\n \n \n+import matplotlib.pyplot as plt\n+import matplotlib.widgets as widgets\n+from matplotlib.testing.decorators import image_comparison\n+\n+@pytest.mark.parametrize('direction', (\"horizontal\", \"vertical\"))\n+def test_span_selector_bound(direction):\n+    fig, ax = plt.subplots(1, 1)\n+    ax.plot([10, 20], [10, 30])\n+    ax.figure.canvas.draw()\n+    x_bound = ax.get_xbound()\n+    y_bound = ax.get_ybound()\n+\n+    tool = widgets.SpanSelector(ax, print, direction, interactive=True)\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    bound = x_bound if direction == 'horizontal' else y_bound\n+    assert tool._edge_handles.positions == list(bound)\n+\n+    press_data = [10.5, 11.5]\n+    move_data = [11, 13]  # Updating selector is done in onmove\n+    release_data = move_data\n+    do_event(tool, 'press', xdata=press_data[0], ydata=press_data[1], button=1)\n+    do_event(tool, 'onmove', xdata=move_data[0], ydata=move_data[1], button=1)\n+\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    index = 0 if direction == 'horizontal' else 1\n+    handle_positions = [press_data[index], release_data[index]]\n+    assert tool._edge_handles.positions == handle_positions\n+\n+def test_span_selector_no_zero_inclusion():\n+    # Test case to ensure the axes limits do not include zero unless data requires it\n+    fig, ax = plt.subplots()\n+    ax.plot([10, 20], [30, 40])\n+    x_bound_initial = ax.get_xbound()\n+    y_bound_initial = ax.get_ybound()\n+\n+    ss = widgets.SpanSelector(ax, print, \"horizontal\", interactive=True)\n+    assert ax.get_xbound() == x_bound_initial\n+    assert ax.get_ybound() == y_bound_initial\n+\n+    ss.extents = (12, 18)\n+    ax.figure.canvas.draw()\n+\n+    assert ax.get_xbound() == x_bound_initial\n+    assert ax.get_ybound() == y_bound_initial\n+\n+    # Testing vertical direction\n+    ss_vertical = widgets.SpanSelector(ax, print, \"vertical\", interactive=True)\n+    assert ax.get_xbound() == x_bound_initial\n+    assert ax.get_ybound() == y_bound_initial\n+\n+    ss_vertical.extents = (32, 36)\n+    ax.figure.canvas.draw()\n+\n+    assert ax.get_xbound() == x_bound_initial\n+    assert ax.get_ybound() == y_bound_initial\n+\n def check_lasso_selector(**kwargs):\n     ax = get_ax()\n \n",
  "scikit-learn__scikit-learn-12682": "diff --git a/sklearn/decomposition/tests/test_dict_learning.py b/sklearn/decomposition/tests/test_dict_learning.py\nindex 35a43f8..7c8a5b6 100644\n--- a/sklearn/decomposition/tests/test_dict_learning.py\n+++ b/sklearn/decomposition/tests/test_dict_learning.py\n@@ -51,6 +51,85 @@ def test_dict_learning_shapes():\n     assert_equal(dico.transform(X).shape, (X.shape[0], n_components))\n \n \n+import pytest\n+import numpy as np\n+from sklearn.decomposition import SparseCoder\n+from sklearn.exceptions import ConvergenceWarning\n+\n+def test_max_iter_larger_than_default():\n+    def ricker_function(resolution, center, width):\n+        \"\"\"Discrete sub-sampled Ricker (Mexican hat) wavelet\"\"\"\n+        x = np.linspace(0, resolution - 1, resolution)\n+        x = ((2 / (np.sqrt(3 * width) * np.pi ** .25))\n+             * (1 - (x - center) ** 2 / width ** 2)\n+             * np.exp(-(x - center) ** 2 / (2 * width ** 2)))\n+        return x\n+\n+    def ricker_matrix(width, resolution, n_components):\n+        \"\"\"Dictionary of Ricker (Mexican hat) wavelets\"\"\"\n+        centers = np.linspace(0, resolution - 1, n_components)\n+        D = np.empty((n_components, resolution))\n+        for i, center in enumerate(centers):\n+            D[i] = ricker_function(resolution, center, width)\n+        D /= np.sqrt(np.sum(D ** 2, axis=1))[:, np.newaxis]\n+        return D\n+\n+    transform_algorithm = 'lasso_cd'\n+    resolution = 1024\n+    subsampling = 3  # subsampling factor\n+    n_components = resolution // subsampling\n+\n+    # Compute a wavelet dictionary\n+    D_multi = np.r_[tuple(ricker_matrix(width=w, resolution=resolution,\n+                          n_components=n_components // 5)\n+                          for w in (10, 50, 100, 500, 1000))]\n+\n+    X = np.linspace(0, resolution - 1, resolution)\n+    first_quarter = X < resolution / 4\n+    X[first_quarter] = 3.\n+    X[np.logical_not(first_quarter)] = -1.\n+    X = X.reshape(1, -1)\n+\n+    # check with max_iter significantly larger than default\n+    with pytest.warns(None) as record:\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=5000)\n+        model.fit_transform(X)\n+    assert not record.list\n+\n+def test_max_iter_convergence_warning():\n+    # This test checks that a warning is raised when max_iter is too low\n+    # to achieve convergence\n+    transform_algorithm = 'lasso_cd'\n+    resolution = 1024\n+    subsampling = 3  # subsampling factor\n+    n_components = resolution // subsampling\n+\n+    D_multi = np.random.rand(n_components, resolution)\n+    X = np.random.rand(1, resolution)\n+\n+    # Setting max_iter to 1 should raise a convergence warning\n+    with pytest.warns(ConvergenceWarning):\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=1)\n+        model.fit_transform(X)\n+\n+def test_max_iter_no_warning():\n+    # This test ensures no warning when max_iter is sufficient\n+    transform_algorithm = 'lasso_cd'\n+    resolution = 1024\n+    subsampling = 3  # subsampling factor\n+    n_components = resolution // subsampling\n+\n+    D_multi = np.random.rand(n_components, resolution)\n+    X = np.random.rand(1, resolution)\n+\n+    with pytest.warns(None) as record:\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=1000)\n+        model.fit_transform(X)\n+    assert not record.list\n+\n def test_dict_learning_overcomplete():\n     n_components = 12\n     dico = DictionaryLearning(n_components, random_state=0).fit(X)\n",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..9763895 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -148,6 +148,30 @@ def test_multi_target_sample_weights():\n     assert_almost_equal(rgr.predict(X_test), rgr_w.predict(X_test))\n \n \n+import pytest\n+import numpy as np\n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.model_selection import cross_val_predict\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+\n+def test_cross_val_predict_proba_with_multioutputclassifier():\n+    # Data generation\n+    X, Y = make_multilabel_classification()\n+    \n+    # MultiOutputClassifier with LinearDiscriminantAnalysis as base\n+    mo_lda = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+    \n+    # Testing cross_val_predict with method 'predict_proba'\n+    pred_proba = cross_val_predict(mo_lda, X, Y, cv=5, method='predict_proba')\n+    \n+    # Assert that we get a list of arrays (one for each output)\n+    assert isinstance(pred_proba, list)\n+    assert len(pred_proba) == Y.shape[1]\n+    for probs in pred_proba:\n+        assert isinstance(probs, np.ndarray)\n+        assert probs.shape[0] == X.shape[0]\n+\n # Import the data\n iris = datasets.load_iris()\n # create a multiple targets by randomized shuffling and concatenating y.\n",
  "sphinx-doc__sphinx-9658": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 072cdc7..613d8b3 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -170,7 +170,28 @@ def test_restify_broken_type_hints():\n     assert restify(BrokenType) == ':py:class:`tests.test_util_typing.BrokenType`'\n \n \n-def test_stringify():\n+def test_restify_mock_inherited_class():\n+    \"\"\"Test restify for inherited class from a mocked module.\"\"\"\n+    with mock(['torch.nn']):\n+        from torch.nn import Module\n+\n+        class MockedDeepKernel(Module):\n+            pass\n+\n+        # Here we simulate the `restify` behavior for the inherited class\n+        # and check if it shows the complete base class name.\n+        assert restify(MockedDeepKernel) == ':py:class:`torch.nn.Module`'\n+\n+def test_stringify_mock_inherited_class():\n+    \"\"\"Test stringify for inherited class from a mocked module.\"\"\"\n+    with mock(['torch.nn']):\n+        from torch.nn import Module\n+\n+        class MockedDeepKernel(Module):\n+            pass\n+\n+        # Checking the string representation of the class\n+        assert stringify(MockedDeepKernel) == 'tests.test_util_typing.MockedDeepKernel'\n     assert stringify(int) == \"int\"\n     assert stringify(str) == \"str\"\n     assert stringify(None) == \"None\"\n",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..1d1cb6a 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -348,6 +348,17 @@ def test_reverse_order():\n            Product(x*y, (x, b + 1, a - 1), (y, 6, 1))\n \n \n+def test_issue_13546():\n+    n = Symbol('n', integer=True)\n+    k = Symbol('k', integer=True)\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 2).doit() == S(15)/2\n+    # Additional test cases\n+    assert p.subs(n, 3).doit() == S(315)/32  # Expecting (3 + 1) * (3 + 1/2) * (3 + 1/4)\n+    assert p.subs(n, 1).doit() == S(3)  # Base case for n=1\n+    assert p.subs(n, 0).doit() == S(1)  # Edge case for n=0\n+\n+\n def test_issue_9983():\n     n = Symbol('n', integer=True, positive=True)\n     p = Product(1 + 1/n**(S(2)/3), (n, 1, oo))\n@@ -357,4 +368,4 @@ def test_issue_9983():\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}