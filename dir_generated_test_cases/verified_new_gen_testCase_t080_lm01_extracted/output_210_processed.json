{
  "astropy__astropy-12907": "",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "",
  "astropy__astropy-14508": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex 6bdf92c..c2d9b2f 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -137,6 +137,55 @@ class TestHeaderFunctions(FitsTestCase):\n         ):\n             assert str(c) == _pad(\"FLOATNUM= -4.6737463674763E+32\")\n \n+    def test_floating_point_string_representation_card(self):\n+        \"\"\"\n+        Ensures Card formats float values with the correct precision, avoiding\n+        comment truncation\n+\n+        Regression test for https://github.com/astropy/astropy/issues/14507\n+        \"\"\"\n+        k = \"HIERARCH ABC DEF GH IJKLMN\"\n+        com = \"[m] abcdef ghijklm nopqrstu vw xyzab\"\n+        c = fits.Card(k, 0.009125, com)\n+        expected_str = f\"{k} = 0.009125 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, 8.95, com)\n+        expected_str = f\"{k} = 8.95 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, -99.9, com)\n+        expected_str = f\"{k} = -99.9 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+    def test_floating_point_string_representation_various_cases(self):\n+        \"\"\"\n+        Additional test cases for various float values to ensure\n+        no unnecessary expansion in string representation.\n+        \"\"\"\n+        k = \"HIERARCH VAR TEST CASE\"\n+        com = \"check float precision handling\"\n+\n+        # Test with a float that has a long decimal representation\n+        c = fits.Card(k, 1.234567890123456, com)\n+        expected_str = f\"{k} = 1.234567890123456 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Test with a very small float\n+        c = fits.Card(k, 1e-10, com)\n+        expected_str = f\"{k} = 1.0E-10 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Test with a negative small float\n+        c = fits.Card(k, -1e-10, com)\n+        expected_str = f\"{k} = -1.0E-10 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Test with a very large float\n+        c = fits.Card(k, 1e+10, com)\n+        expected_str = f\"{k} = 1.0E+10 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n     def test_complex_value_card(self):\n         \"\"\"Test Card constructor with complex value\"\"\"\n \n",
  "astropy__astropy-14539": "diff --git a/astropy/io/fits/tests/test_diff.py b/astropy/io/fits/tests/test_diff.py\nindex 9bf4897..b5a1aff 100644\n--- a/astropy/io/fits/tests/test_diff.py\n+++ b/astropy/io/fits/tests/test_diff.py\n@@ -601,6 +601,26 @@ class TestDiff(FitsTestCase):\n         assert \"13 different table data element(s) found (65.00% different)\" in report\n         assert report.count(\"more indices\") == 1\n \n+    def test_vla_identical_files(self):\n+        \"\"\"\n+        Test that FITSDiff reports identical for files with VLAs compared to themselves.\n+        \"\"\"\n+\n+        # Create a BinTableHDU with a VLA column\n+        col = fits.Column('a', format='QD', array=[[0], [0, 0]])\n+        hdu = fits.BinTableHDU.from_columns([col])\n+        \n+        # Write to a test FITS file\n+        hdu.writeto('test_vla_identical.fits', overwrite=True)\n+\n+        # Compare the file to itself\n+        diff = fits.FITSDiff('test_vla_identical.fits', 'test_vla_identical.fits')\n+        assert diff.identical, \"The file should be identical to itself, even with a VLA.\"\n+\n+        # Clean up the test file\n+        import os\n+        os.remove('test_vla_identical.fits')\n+\n     def test_identical_files_basic(self):\n         \"\"\"Test identicality of two simple, extensionless files.\"\"\"\n \n",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..38f4e6c 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -88,8 +88,21 @@ def test_inherit_docstrings():\n         # TODO: Maybe if __doc__ is None this test should be skipped instead?\n         assert Subclass.__call__.__doc__ == \"FOO\"\n \n+def test_inherit_docstrings_properties():\n+    class Base(metaclass=misc.InheritDocstrings):\n+        @property\n+        def bar(self):\n+            \"BAR\"\n+            return 0\n+\n+    class Subclass(Base):\n+        @property\n+        def bar(self):\n+            return 42\n \n-def test_set_locale():\n+    if Base.bar.__doc__ is not None:\n+        # Verify that the docstring is inherited for property bar\n+        assert Subclass.bar.__doc__ == \"BAR\"\n     # First, test if the required locales are available\n     current = locale.setlocale(locale.LC_ALL)\n     try:\n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "",
  "astropy__astropy-7671": "diff --git a/astropy/utils/tests/test_introspection.py b/astropy/utils/tests/test_introspection.py\nindex 852d721..c953493 100644\n--- a/astropy/utils/tests/test_introspection.py\n+++ b/astropy/utils/tests/test_introspection.py\n@@ -68,8 +68,29 @@ def test_minversion():\n     test_module = ModuleType(str(\"test_module\"))\n     test_module.__version__ = '0.12.2'\n     good_versions = ['0.12', '0.12.1', '0.12.0.dev']\n-    bad_versions = ['1', '1.2rc1']\n+    bad_versions = ['1', '1.2rc1', '1.14dev']\n+\n+    # Additional test cases based on the issue description\n+    complex_versions = ['1.14.3', '1.14']\n+    for version in complex_versions:\n+        assert minversion(test_module, version) == (version != '1.14.3')\n+\n+    # Test minversion with '1.14dev' using a module version similar to numpy's case\n+    test_module.__version__ = '1.14.3'\n+    assert not minversion(test_module, '1.14dev')\n+\n+    test_module.__version__ = '1.14'\n+    assert minversion(test_module, '1.14dev') == False\n+\n+    test_module.__version__ = '0.12.0.dev'\n+    assert minversion(test_module, '0.12dev')\n+    \n+    test_module.__version__ = '0.12dev'\n+    assert minversion(test_module, '0.12.1') == False\n+\n+    # Reset version for other tests\n+    test_module.__version__ = '0.12.2'\n     for version in good_versions:\n         assert minversion(test_module, version)\n     for version in bad_versions:\n-        assert not minversion(test_module, version)\n+        assert not minversion(test_module, version)\n",
  "astropy__astropy-8707": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex a2103c6..7bb8d77 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -2329,8 +2329,45 @@ class TestHeaderFunctions(FitsTestCase):\n             else:\n                 c.verify('exception')\n \n-\n-class TestRecordValuedKeywordCards(FitsTestCase):\n+    def test_card_fromstring_with_bytes(self):\n+        \"\"\"Test Card.fromstring works with a bytes input.\"\"\"\n+        c = fits.Card.fromstring(b\"KEYWORD= 'value   ' / comment\")\n+        assert c.keyword == 'KEYWORD'\n+        assert c.value == 'value'\n+        assert c.comment == 'comment'\n+\n+    def test_card_fromstring_with_str(self):\n+        \"\"\"Test Card.fromstring works with a str input.\"\"\"\n+        c = fits.Card.fromstring(\"KEYWORD= 'value   ' / comment\")\n+        assert c.keyword == 'KEYWORD'\n+        assert c.value == 'value'\n+        assert c.comment == 'comment'\n+    \n+    def test_header_fromstring_with_bytes(self):\n+        \"\"\"Test Header.fromstring works with a bytes input.\"\"\"\n+        header_bytes = b\"SIMPLE  =                    T / file conforms to FITS standard\\n\" \\\n+                       b\"BITPIX  =                   8 / number of bits per data pixel\\n\" \\\n+                       b\"NAXIS   =                    0 / number of data axes\\n\" \\\n+                       b\"EXTEND  =                    T / FITS dataset may contain extensions\\n\" \\\n+                       b\"END\"\n+        hdr = fits.Header.fromstring(header_bytes)\n+        assert hdr['SIMPLE'] is True\n+        assert hdr['BITPIX'] == 8\n+        assert hdr['NAXIS'] == 0\n+        assert hdr['EXTEND'] is True\n+\n+    def test_header_fromstring_with_str(self):\n+        \"\"\"Test Header.fromstring works with a str input.\"\"\"\n+        header_str = \"SIMPLE  =                    T / file conforms to FITS standard\\n\" \\\n+                     \"BITPIX  =                   8 / number of bits per data pixel\\n\" \\\n+                     \"NAXIS   =                    0 / number of data axes\\n\" \\\n+                     \"EXTEND  =                    T / FITS dataset may contain extensions\\n\" \\\n+                     \"END\"\n+        hdr = fits.Header.fromstring(header_str)\n+        assert hdr['SIMPLE'] is True\n+        assert hdr['BITPIX'] == 8\n+        assert hdr['NAXIS'] == 0\n+        assert hdr['EXTEND'] is True\n     \"\"\"\n     Tests for handling of record-valued keyword cards as used by the\n     `FITS WCS distortion paper\n",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..7497583 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -142,7 +142,10 @@ class TestQuantityCreation:\n         a3 = np.array([1., 2.], dtype=np.float32)\n         q3 = u.Quantity(a3, u.yr)\n         assert q3.dtype == a3.dtype\n-        # items stored as objects by numpy should be converted to float\n+        # Test that np.float16 stays np.float16 and does not auto-upgrade to np.float64\n+        a3_16 = np.array([1., 2.], dtype=np.float16)\n+        q3_16 = u.Quantity(a3_16, u.yr)\n+        assert q3_16.dtype == a3_16.dtype\n         # by default\n         q4 = u.Quantity(decimal.Decimal('10.25'), u.m)\n         assert q4.dtype == float\n",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..4599025 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -217,6 +217,16 @@ TEST_DATA = [\n     (URLValidator(EXTENDED_SCHEMES), 'git://example.com/', None),\n     (URLValidator(EXTENDED_SCHEMES), 'git+ssh://git@github.com/example/hg-git.git', None),\n \n+    # Test cases for URLs with invalid characters in username and password\n+    # The following URLs should be invalid because the username or password contain ':', '@', or '/' without being percent-encoded\n+    (URLValidator(), 'http://foo@bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo/bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar@baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar/baz@example.com', ValidationError),\n+    (URLValidator(), 'http://user:pass@domain.com/?query=foo@example.com', None),  # Example with proper encoding in query\n+    (URLValidator(), 'http://user@example.com', None),  # Valid URL without password\n+\n     (URLValidator(EXTENDED_SCHEMES), 'git://-invalid.com', ValidationError),\n     # Trailing newlines not accepted\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..7cec07d 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,8 +1,10 @@\n+\n import datetime\n import re\n from decimal import Decimal\n \n from django.core.exceptions import FieldError\n+from django.db.models.expressions import Case, When\n from django.db import connection\n from django.db.models import (\n     Avg, Count, DecimalField, DurationField, F, FloatField, Func, IntegerField,\n@@ -389,6 +391,34 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n+    def test_count_distinct_expression(self):\n+        # Test with a case where pages are greater than 300\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=300, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n+\n+        # Test with a case where pages are less than 300\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__lt=300, then='rating')), distinct=True),\n+        )\n+        # Assuming the expected distinct ratings for this case\n+        self.assertEqual(aggs['distinct_ratings'], 2)\n+\n+        # Test with a case where rating is exactly 5\n+        aggs = Book.objects.aggregate(\n+            distinct_high_ratings=Count(Case(When(rating=5, then='rating')), distinct=True),\n+        )\n+        # Assuming the expected distinct high ratings for this case\n+        self.assertEqual(aggs['distinct_high_ratings'], 1)\n+\n+        # Test with no distinct applied, to see normal behavior\n+        aggs = Book.objects.aggregate(\n+            normal_count_ratings=Count(Case(When(pages__gt=300, then='rating'))),\n+        )\n+        # Assuming the normal count expected\n+        self.assertEqual(aggs['normal_count_ratings'], 4)\n+\n     def test_count_star(self):\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..e59e446 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1090,6 +1090,20 @@ class OverrideSettingsTests(SimpleTestCase):\n         base_url attribute of django.core.files.storage.default_storage.\n         \"\"\"\n         self.assertEqual(default_storage.base_location, '')\n+\n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        Ensure that the default FILE_UPLOAD_PERMISSIONS is set to 0o644.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n+\n+    def test_custom_file_upload_permissions(self):\n+        \"\"\"\n+        Test that a custom FILE_UPLOAD_PERMISSIONS setting is applied correctly.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=0o755):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o755)\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n \n",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..660e47a 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,3 +1,4 @@\n+\n import os\n import signal\n from unittest import mock\n@@ -101,7 +102,57 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n-    def test_sigint_handler(self):\n+    def test_pgpassword_environment(self):\n+        \"\"\"\n+        Test that the PGPASSWORD environment variable is set correctly\n+        when subprocess.run is used.\n+        \"\"\"\n+        def _mock_subprocess_run(command, env=None, *args, **kwargs):\n+            self.subprocess_args = command\n+            self.pgpassword = env.get('PGPASSWORD') if env else None\n+            return subprocess.CompletedProcess(command, 0)\n+        \n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            result_command, result_pgpassword = self._run_it({\n+                'database': 'dbname',\n+                'user': 'user',\n+                'password': 'securepassword',\n+                'host': 'localhost',\n+                'port': '5432',\n+            })\n+        \n+        self.assertEqual(\n+            result_command,\n+            ['psql', '-U', 'user', '-h', 'localhost', '-p', '5432', 'dbname']\n+        )\n+        self.assertEqual(\n+            result_pgpassword,\n+            'securepassword'\n+        )\n+\n+    def test_pgpassword_none(self):\n+        \"\"\"\n+        Test that the PGPASSWORD environment variable is not set when\n+        no password is provided.\n+        \"\"\"\n+        def _mock_subprocess_run(command, env=None, *args, **kwargs):\n+            self.subprocess_args = command\n+            self.pgpassword = env.get('PGPASSWORD') if env else None\n+            return subprocess.CompletedProcess(command, 0)\n+\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            result_command, result_pgpassword = self._run_it({\n+                'database': 'dbname',\n+                'user': 'user',\n+                'host': 'localhost',\n+                'port': '5432',\n+            })\n+\n+        self.assertEqual(\n+            result_command,\n+            ['psql', '-U', 'user', '-h', 'localhost', '-p', '5432', 'dbname']\n+        )\n+        self.assertIsNone(result_pgpassword)\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n         def _mock_subprocess_call(*args):\n             handler = signal.getsignal(signal.SIGINT)\n@@ -113,4 +164,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..5a6f4b4 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -2,6 +2,7 @@ from django.apps.registry import apps\n from django.conf import settings\n from django.contrib.contenttypes import management as contenttypes_management\n from django.contrib.contenttypes.models import ContentType\n+from django.contrib.contenttypes.models import ContentType\n from django.core.management import call_command\n from django.db import migrations, models\n from django.test import TransactionTestCase, override_settings\n@@ -38,7 +39,30 @@ class ContentTypeOperationsTests(TransactionTestCase):\n                     self.assertEqual(next_operation.old_model, operation.old_name_lower)\n                     self.assertEqual(next_operation.new_model, operation.new_name_lower)\n \n-    def test_existing_content_type_rename(self):\n+    class TestRouter:\n+        def db_for_write(self, model, **hints):\n+            return 'default'\n+\n+    @override_settings(DATABASE_ROUTERS=[TestRouter()])\n+    def test_existing_content_type_rename_other_database(self):\n+        # Create the content type in the 'other' database\n+        ContentType.objects.using('other').create(app_label='contenttypes_tests', model='foo')\n+\n+        other_content_types = ContentType.objects.using('other').filter(app_label='contenttypes_tests')\n+\n+        # Run the migrate command on the 'other' database\n+        call_command('migrate', 'contenttypes_tests', database='other', interactive=False, verbosity=0)\n+\n+        # Assert the content type has been renamed in the 'other' database\n+        self.assertFalse(other_content_types.filter(model='foo').exists())\n+        self.assertTrue(other_content_types.filter(model='renamedfoo').exists())\n+\n+        # Rollback the migration\n+        call_command('migrate', 'contenttypes_tests', 'zero', database='other', interactive=False, verbosity=0)\n+\n+        # Assert the content type has been rolled back to 'foo'\n+        self.assertTrue(other_content_types.filter(model='foo').exists())\n+        self.assertFalse(other_content_types.filter(model='renamedfoo').exists())\n         ContentType.objects.create(app_label='contenttypes_tests', model='foo')\n         call_command('migrate', 'contenttypes_tests', database='default', interactive=False, verbosity=0,)\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n@@ -63,4 +87,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "diff --git a/tests/generic_inline_admin/tests.py b/tests/generic_inline_admin/tests.py\nindex 9dd9fd9..38e5a08 100644\n--- a/tests/generic_inline_admin/tests.py\n+++ b/tests/generic_inline_admin/tests.py\n@@ -425,7 +425,44 @@ class GenericInlineModelAdminTest(SimpleTestCase):\n             inlines = [\n                 AlternateInline, MediaInline\n             ]\n+        def test_get_inlines_with_different_requests(self):\n+            class MediaInline(GenericTabularInline):\n+                model = Media\n+\n+            class AlternateInline(GenericTabularInline):\n+                model = Media\n+\n+            class EpisodeAdmin(admin.ModelAdmin):\n+                inlines = (AlternateInline, MediaInline)\n+\n+                def get_inlines(self, request, obj=None):\n+                    if hasattr(request, 'name'):\n+                        if request.name == 'alternate':\n+                            return self.inlines[:1]\n+                        elif request.name == 'media':\n+                            return self.inlines[1:2]\n+                    return []\n+\n+            ma = EpisodeAdmin(Episode, self.site)\n+\n+            request.name = 'alternate'\n+            self.assertEqual(ma.get_inlines(request, None), (AlternateInline,))\n+            self.assertEqual(type(ma.get_inline_instances(request)[0]), AlternateInline)\n+\n+            request.name = 'media'\n+            self.assertEqual(ma.get_inlines(request, None), (MediaInline,))\n+            self.assertEqual(type(ma.get_inline_instances(request)[0]), MediaInline)\n+\n+            request.name = 'unknown'\n+            self.assertEqual(ma.get_inlines(request, None), [])\n+            self.assertEqual(ma.get_inline_instances(request), [])\n+\n+            request.name = ''\n+            self.assertEqual(ma.get_inlines(request, None), [])\n+            self.assertEqual(ma.get_inline_instances(request), [])\n+\n+        # Original test case\n         ma = EpisodeAdmin(Episode, self.site)\n         inlines = ma.get_inline_instances(request)\n         for (formset, inline), other_inline in zip(ma.get_formsets_with_inlines(request), inlines):\n-            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..7bec399 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -248,7 +248,21 @@ class UsernameValidatorsTests(SimpleTestCase):\n                 with self.assertRaises(ValidationError):\n                     v(invalid)\n \n-    def test_ascii_validator(self):\n+    def test_unicode_validator_trailing_newline(self):\n+        invalid_usernames = ['username\\n', 'user\\r\\n']\n+        v = validators.UnicodeUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+\n+    def test_ascii_validator_trailing_newline(self):\n+        invalid_usernames = ['username\\n', 'user\\r\\n']\n+        v = validators.ASCIIUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n         invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n         v = validators.ASCIIUsernameValidator()\n@@ -258,4 +272,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..49d2ce8 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -1,7 +1,7 @@\n import os\n \n from django.core.exceptions import ImproperlyConfigured\n-from django.template import Context\n+from django.template import Context, Template\n from django.template.engine import Engine\n from django.test import SimpleTestCase, override_settings\n \n@@ -15,7 +15,19 @@ class RenderToStringTest(SimpleTestCase):\n     def setUp(self):\n         self.engine = Engine(dirs=[TEMPLATE_DIR])\n \n-    def test_basic_context(self):\n+    def test_autoescape_off(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:<script>\\n',\n+        )\n+\n+    def test_autoescape_on(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n         self.assertEqual(\n             self.engine.render_to_string('test_context.html', {'obj': 'test'}),\n             'obj:test\\n',\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..751e730 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -457,8 +457,26 @@ class HttpResponseTests(unittest.TestCase):\n             with self.assertRaises(DisallowedRedirect):\n                 HttpResponsePermanentRedirect(url)\n \n-\n-class HttpResponseSubclassesTests(SimpleTestCase):\n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n+    def test_empty_memoryview_content(self):\n+        r = HttpResponse(memoryview(b''))\n+        self.assertEqual(r.content, b'')\n+\n+    def test_memoryview_content_with_null_bytes(self):\n+        r = HttpResponse(memoryview(b'\\x00\\x01\\x02\\x03'))\n+        self.assertEqual(r.content, b'\\x00\\x01\\x02\\x03')\n+\n+    def test_memoryview_content_with_unicode(self):\n+        r = HttpResponse(memoryview('unicode'.encode('utf-8')))\n+        self.assertEqual(r.content, b'unicode')\n+\n+    def test_large_memoryview_content(self):\n+        large_content = b'a' * 10**6  # 1 MB of 'a'\n+        r = HttpResponse(memoryview(large_content))\n+        self.assertEqual(r.content, large_content)\n     def test_redirect(self):\n         response = HttpResponseRedirect('/redirected/')\n         self.assertEqual(response.status_code, 302)\n",
  "django__django-11141": "",
  "django__django-11149": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 296cfba..e155912 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -772,8 +772,45 @@ class TestInlinePermissions(TestCase):\n             html=True\n         )\n         self.assertContains(response, 'id=\"id_inner2_set-0-DELETE\"')\n+    def test_inline_add_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(reverse('admin:admin_inlines_author_add'))\n+        # View-only inlines. It should be non-editable.\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"0\" id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n \n-    def test_inline_change_fk_all_perms(self):\n+    def test_inline_change_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(self.author_change_url)\n+        # View-only inlines.\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"1\" id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        # The field in the inline is read-only.\n+        self.assertContains(response, '<p>%s</p>' % self.book)\n+        self.assertNotContains(\n+            response,\n+            '<input type=\"checkbox\" name=\"Author_books-0-DELETE\" id=\"id_Author_books-0-DELETE\">',\n+            html=True,\n+        )\n         permission = Permission.objects.get(codename='add_inner2', content_type=self.inner_ct)\n         self.user.user_permissions.add(permission)\n         permission = Permission.objects.get(codename='change_inner2', content_type=self.inner_ct)\n",
  "django__django-11163": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex b25d077..958319a 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2900,7 +2900,21 @@ class StrictAssignmentTests(SimpleTestCase):\n \n \n class ModelToDictTests(TestCase):\n-    def test_many_to_many(self):\n+    def test_model_to_dict_empty_fields(self):\n+        \"\"\"Test model_to_dict returns an empty dict when fields=[]\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(model_to_dict(bw, fields=[]), {})\n+\n+    def test_model_to_dict_specific_fields(self):\n+        \"\"\"Test model_to_dict returns only specified fields\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(sorted(model_to_dict(bw, fields=['id', 'name'])), ['id', 'name'])\n+\n+    def test_model_to_dict_exclude_fields(self):\n+        \"\"\"Test model_to_dict excludes specified fields\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(sorted(model_to_dict(bw, exclude=[])), ['id', 'name', 'score', 'writer_ptr'])\n+        self.assertEqual(sorted(model_to_dict(bw, exclude=['id', 'name'])), ['score', 'writer_ptr'])\n         \"\"\"Data for a ManyToManyField is a list rather than a lazy QuerySet.\"\"\"\n         blue = Colour.objects.create(name='blue')\n         red = Colour.objects.create(name='red')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..e931fd5 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,9 +1,11 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n+from django.db.models.deletion import Collector\n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n     M2MTo, MRNull, Parent, R, RChild, S, T, User, create_a, get_default_r,\n@@ -464,6 +466,15 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n+    def test_fast_delete_instance_set_pk_none(self):\n+        # Test that deleting a User instance sets its pk to None\n+        u = User.objects.create()\n+        # User can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n     def test_fast_delete_qs(self):\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n@@ -471,6 +482,21 @@ class FastDeleteTests(TestCase):\n         self.assertEqual(User.objects.count(), 1)\n         self.assertTrue(User.objects.filter(pk=u2.pk).exists())\n \n+    def test_fast_delete_without_dependencies(self):\n+        # Testing a model with no explicit dependencies\n+        a = Avatar.objects.create()\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(a))\n+        a.delete()\n+        self.assertIsNone(a.pk)\n+\n+    def test_delete_with_dependencies(self):\n+        # Testing a model with dependencies to ensure pk is not set to None\n+        u = User.objects.create()\n+        a = Avatar.objects.create(user=u)\n+        a.delete()\n+        self.assertIsNotNone(u.pk)\n+\n     def test_fast_delete_joined_qs(self):\n         a = Avatar.objects.create(desc='a')\n         User.objects.create(avatar=a)\n",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..1ceb653 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -95,6 +95,11 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+            ('1e-199', 2, '0.00'),\n+            ('1e-200', 2, '0.00'),\n+            ('5e-201', 5, '0.00000'),\n+            ('9.99e-201', 4, '0.0000'),\n+            ('1.234e-200', 3, '0.000'),\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-11211": "diff --git a/tests/prefetch_related/models.py b/tests/prefetch_related/models.py\nindex 3ce4b3f..8f62440 100644\n--- a/tests/prefetch_related/models.py\n+++ b/tests/prefetch_related/models.py\n@@ -1,3 +1,4 @@\n+\n import uuid\n \n from django.contrib.contenttypes.fields import (\n@@ -196,7 +197,17 @@ class Comment(models.Model):\n         ordering = ['id']\n \n \n-# Models for lookup ordering tests\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=50)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n \n class House(models.Model):\n     name = models.CharField(max_length=50)\n",
  "django__django-11239": "",
  "django__django-11265": "diff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py\nindex a587c22..3b5870e 100644\n--- a/tests/filtered_relation/tests.py\n+++ b/tests/filtered_relation/tests.py\n@@ -82,6 +82,48 @@ class FilteredRelationTests(TestCase):\n                     (self.book4, self.author1),\n                 ], lambda x: (x, x.author_join))\n \n+    def test_with_exclude(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2],\n+        )\n+\n+    def test_with_exclude_no_match(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='some non-existing title')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author1, self.author2],\n+        )\n+\n+    def test_with_exclude_complex_condition(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation(\n+                    'book', condition=Q(\n+                        Q(book__title__iexact='poem by alice') |\n+                        Q(book__state=Book.RENTED)\n+                    ),\n+                ),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2],\n+        )\n+\n+    def test_with_exclude_multiple_conditions(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation(\n+                    'book', condition=Q(\n+                        Q(book__title__iexact='poem by alice') &\n+                        Q(book__state=Book.AVAILABLE)\n+                    ),\n+                ),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2],\n+        )\n+\n     def test_without_join(self):\n         self.assertSequenceEqual(\n             Author.objects.annotate(\n",
  "django__django-11276": "",
  "django__django-11292": "",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..784c9c1 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,5 +1,7 @@\n+\n from django.test import SimpleTestCase\n-from django.urls.resolvers import RegexPattern, RoutePattern\n+from django.urls.resolvers import RegexPattern, RoutePattern, get_resolver\n+from django.test.utils import override_settings\n from django.utils.translation import gettext_lazy as _\n \n \n@@ -12,4 +14,4 @@ class RegexPatternTests(SimpleTestCase):\n class RoutePatternTests(SimpleTestCase):\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\nindex b010b42..7059d54 100644\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -227,6 +227,19 @@ class BaseModelBackendTest:\n         self.assertEqual(CountingMD5PasswordHasher.calls, 1)\n \n \n+from django.test import TestCase\n+from django.contrib.auth import authenticate, get_user_model\n+from django.test.utils import override_settings\n+\n+User = get_user_model()\n+\n+class CountingMD5PasswordHasher:\n+    calls = 0\n+\n+    @staticmethod\n+    def set_password(password):\n+        CountingMD5PasswordHasher.calls += 1\n+\n class ModelBackendTest(BaseModelBackendTest, TestCase):\n     \"\"\"\n     Tests for the ModelBackend using the default User model.\n@@ -241,8 +254,20 @@ class ModelBackendTest(BaseModelBackendTest, TestCase):\n             email='test2@example.com',\n             password='test',\n         )\n-\n-    def test_authenticate_inactive(self):\n+    \n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authentication_without_credentials(self):\n+        CountingMD5PasswordHasher.calls = 0\n+        test_credentials = [\n+            {},\n+            {'username': getattr(self.user, self.UserModel.USERNAME_FIELD)},\n+            {'password': 'test'},\n+        ]\n+        for credentials in test_credentials:\n+            with self.subTest(credentials=credentials):\n+                with self.assertNumQueries(0):\n+                    authenticate(**credentials)\n+                self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n         \"\"\"\n         An inactive user can't authenticate.\n         \"\"\"\n",
  "django__django-11490": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex e627a0d..ae80706 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -124,6 +124,20 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.union(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n+    def test_union_with_column_change_values_list(self):\n+        # Set up initial data\n+        ReservedName.objects.create(name='a', order=2)\n+\n+        # Get a QuerySet\n+        qs1 = ReservedName.objects.all()\n+\n+        # Test changing the list of columns with values_list\n+        reserved_name = qs1.union(qs1).values_list('name', 'order').get()\n+        self.assertEqual(reserved_name, ('a', 2))\n+\n+        reserved_order = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(reserved_order, (2,))\n+\n     def test_union_with_two_annotated_values_list(self):\n         qs1 = Number.objects.filter(num=1).annotate(\n             count=Value(0, IntegerField()),\n",
  "django__django-11532": "diff --git a/tests/mail/tests.py b/tests/mail/tests.py\nindex a6f0e17..2a367ad 100644\n--- a/tests/mail/tests.py\n+++ b/tests/mail/tests.py\n@@ -11,6 +11,7 @@ from email import charset, message_from_binary_file, message_from_bytes\n from email.header import Header\n from email.mime.text import MIMEText\n from email.utils import parseaddr\n+from unittest import mock\n from io import StringIO\n from smtplib import SMTP, SMTPAuthenticationError, SMTPException\n from ssl import SSLError\n@@ -360,6 +361,20 @@ class MailTests(HeadersCheckMixin, SimpleTestCase):\n         msg.attach('example.txt', 'Text file content', 'text/plain')\n         self.assertIn(html_content, msg.message().as_string())\n \n+    @mock.patch('socket.getfqdn', return_value='\u6f22\u5b57')\n+    def test_non_ascii_dns_non_unicode_email(self, mocked_getfqdn):\n+        delattr(mail.message.DNS_NAME, '_fqdn')\n+        email = EmailMessage('subject', 'content', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        self.assertIn('@xn--p8s937b>', email.message()['Message-ID'])\n+\n+    @mock.patch('socket.getfqdn', return_value='\u6b63\u5b97')\n+    def test_non_ascii_dns_unicode_email(self, mocked_getfqdn):\n+        delattr(mail.message.DNS_NAME, '_fqdn')\n+        email = EmailMessage('subject', 'content', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'utf-8'\n+        self.assertIn('@xn--fiq228c>', email.message()['Message-ID'])\n+\n     def test_none_body(self):\n         msg = EmailMessage('subject', None, 'from@example.com', ['to@example.com'])\n         self.assertEqual(msg.body, '')\n",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..378e0c6 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,9 +1,10 @@\n+\n from django import forms\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n-from django.db.models import F\n+from django.db.models import F, Field, Model\n from django.db.models.functions import Upper\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..5e4adf8 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -9,7 +9,8 @@ from django.db.models.functions import Upper\n from django.test import TestCase\n from django.utils.deprecation import RemovedInDjango31Warning\n \n-from .models import Article, Author, OrderedByFArticle, Reference\n+from .models import Article, Author, ChildArticle, OrderedByFArticle, Reference\n+from datetime import datetime\n \n \n class OrderingTests(TestCase):\n@@ -462,6 +463,32 @@ class OrderingTests(TestCase):\n             attrgetter('headline')\n         )\n \n+    def test_order_by_with_expression_in_ordering_meta(self):\n+        \"\"\"\n+        Test ordering on a child model with Meta.ordering containing expressions.\n+        This test ensures no crash occurs when using order_by on a parent field with expression-based ordering.\n+        \"\"\"\n+        ca1 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_2,\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca3 = ChildArticle.objects.create(\n+            headline='h3',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n+        \n+        # Attempt to order by the parent model's primary key (article_ptr)\n+        articles = ChildArticle.objects.order_by('article_ptr')\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+\n     def test_deprecated_values_annotate(self):\n         msg = (\n             \"Article QuerySet won't use Meta.ordering in Django 3.1. Add \"\n@@ -469,5 +496,31 @@ class OrderingTests(TestCase):\n             \"descending=False), OrderBy(F(second_author__name), \"\n             \"descending=False)) to retain the current query.\"\n         )\n+\n+    def test_order_by_with_expression_in_ordering_meta(self):\n+        \"\"\"\n+        Test ordering on a child model with Meta.ordering containing expressions.\n+        This test ensures no crash occurs when using order_by on a parent field with expression-based ordering.\n+        \"\"\"\n+        ca1 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_2,\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca3 = ChildArticle.objects.create(\n+            headline='h3',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n+        \n+        # Attempt to order by the parent model's primary key (article_ptr)\n+        articles = ChildArticle.objects.order_by('article_ptr')\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n         with self.assertRaisesMessage(RemovedInDjango31Warning, msg):\n             list(Article.objects.values('author').annotate(Count('headline')))\n",
  "django__django-11603": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 2b8f813..e973ecf 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -391,6 +391,22 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n+    def test_distinct_on_aggregate_avg(self):\n+        books = Book.objects.aggregate(ratings=Avg('rating', distinct=True))\n+        self.assertEqual(books['ratings'], 4.125)\n+\n+    def test_distinct_on_aggregate_sum(self):\n+        books = Book.objects.aggregate(ratings=Sum('rating', distinct=True))\n+        self.assertEqual(books['ratings'], 16.5)\n+\n+    def test_distinct_on_aggregate_min(self):\n+        books = Book.objects.aggregate(ratings=Min('rating', distinct=True))\n+        self.assertEqual(books['ratings'], 3.5)  # Use the correct expected value\n+\n+    def test_distinct_on_aggregate_max(self):\n+        books = Book.objects.aggregate(ratings=Max('rating', distinct=True))\n+        self.assertEqual(books['ratings'], 5.0)  # Use the correct expected value\n+\n     def test_count_star(self):\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n",
  "django__django-11740": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a98fff5..2bb651f 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -585,7 +585,29 @@ class AutodetectorTests(TestCase):\n             questioner,\n         )._detect_changes()\n \n-    def test_arrange_for_graph(self):\n+    def test_alter_uuid_to_fk_dependency(self):\n+        \"\"\"Test altering a UUIDField to a ForeignKey creates correct dependencies.\"\"\"\n+        app1_initial = ModelState(\"testapp1\", \"App1\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+            (\"another_app\", models.UUIDField(null=True, blank=True)),\n+        ])\n+        app2_initial = ModelState(\"testapp2\", \"App2\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+        ])\n+        app1_altered = ModelState(\"testapp1\", \"App1\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+            (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        changes = self.get_changes(\n+            [app1_initial, app2_initial],\n+            [app1_altered, app2_initial],\n+        )\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n         \"\"\"Tests auto-naming of migrations for graph matching.\"\"\"\n         # Make a fake graph\n         graph = MigrationGraph()\n@@ -2399,4 +2421,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-11749": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex a0e1530..bed9a1f 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -219,11 +219,55 @@ class CommandTests(SimpleTestCase):\n         management.call_command('subparser', 'foo', 12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n \n+    def test_mutually_exclusive_group_required_options_with_kwargs(self):\n+        from io import StringIO\n+        from django.core import management\n+        from django.core.management.base import CommandError\n+\n+        out = StringIO()\n+\n+        # Test: Passing 'foo_id' as kwargs should work.\n+        management.call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+\n+        # Test: Passing 'foo_name' as kwargs should work.\n+        out = StringIO()  # Reset the output\n+        management.call_command('mutually_exclusive_required', foo_name='test', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+\n+        # Test: Omitting both should raise an error.\n+        out = StringIO()  # Reset the output\n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            management.call_command('mutually_exclusive_required', stdout=out)\n+\n     def test_subparser_dest_args(self):\n         out = StringIO()\n         management.call_command('subparser_dest', 'foo', bar=12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n \n+    def test_mutually_exclusive_group_required_options_with_kwargs(self):\n+        from io import StringIO\n+        from django.core import management\n+        from django.core.management.base import CommandError\n+\n+        out = StringIO()\n+\n+        # Test: Passing 'foo_id' as kwargs should work.\n+        management.call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+\n+        # Test: Passing 'foo_name' as kwargs should work.\n+        out = StringIO()  # Reset the output\n+        management.call_command('mutually_exclusive_required', foo_name='test', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+\n+        # Test: Omitting both should raise an error.\n+        out = StringIO()  # Reset the output\n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            management.call_command('mutually_exclusive_required', stdout=out)\n+\n     def test_subparser_dest_required_args(self):\n         out = StringIO()\n         management.call_command('subparser_required', 'foo_1', 'foo_2', bar=12, stdout=out)\n",
  "django__django-11790": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 440150b..92cfb80 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -437,7 +437,24 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         self.assertEqual(form.fields['username'].max_length, 254)\n         self.assertEqual(form.errors, {})\n \n-    def test_username_field_label(self):\n+    def test_username_field_max_length_rendered(self):\n+        # Test case to ensure that maxlength is set in the widget attributes\n+        data = {\n+            'username': 'u' * 255,\n+            'password': 'pwd',\n+        }\n+        form = AuthenticationForm(None, data)\n+        # Check if maxlength attribute is set correctly in the rendered widget\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 255)\n+\n+    def test_username_field_default_max_length_rendered(self):\n+        # Test case to ensure that maxlength defaults to 254 if not set\n+        data = {\n+            'username': '0123456',\n+            'password': 'password',\n+        }\n+        form = AuthenticationForm(None, data)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 254)\n \n         class CustomAuthenticationForm(AuthenticationForm):\n             username = CharField(label=\"Name\", max_length=75)\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..b77b460 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -246,8 +246,27 @@ class WriterTests(SimpleTestCase):\n             [list, tuple, dict, set, frozenset],\n             (\"[list, tuple, dict, set, frozenset]\", set())\n         )\n+    def test_serialize_enum_names(self):\n+        class TranslatedEnum(enum.Enum):\n+            A = _('a-value')\n+            B = _('b-value')\n \n-    def test_serialize_lazy_objects(self):\n+        # Check the serialization when using the enum name instead of value\n+        field = models.CharField(default=TranslatedEnum.A, choices=[(m.name, m) for m in TranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('A', migrations.test_writer.TranslatedEnum('a-value')), \"\n+            \"('B', migrations.test_writer.TranslatedEnum('b-value'))], \"\n+            \"default=migrations.test_writer.TranslatedEnum('a-value'))\"\n+        )\n+        \n+        # Check the serialized result equal for enum name\n+        self.assertSerializedResultEqual(\n+            TranslatedEnum.A,\n+            (\"migrations.test_writer.TranslatedEnum('a-value')\", {'import migrations.test_writer'})\n+        )\n         pattern = re.compile(r'^foo$')\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n         self.assertEqual(self.serialize_round_trip(lazy_pattern), pattern)\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..01dcfa6 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,6 @@\n+\n import unittest\n-from datetime import datetime\n+from datetime import datetime, timedelta\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -324,6 +325,26 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun Nov  6 08:49:37 1994')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n+    def test_parsing_rfc850_with_two_digit_years(self):\n+        with mock.patch('django.utils.http.datetime.datetime') as mocked_datetime:\n+            current_year = 2023\n+            mocked_datetime.side_effect = datetime\n+            mocked_datetime.utcnow = mock.Mock()\n+            mocked_datetime.utcnow.return_value = datetime(current_year, 1, 1)\n+\n+            # Years before 50 years in the future should be in the past century\n+            tests = [\n+                ('Saturday, 31-Dec-73 23:59:59 GMT', datetime(1973, 12, 31, 23, 59, 59)),\n+                ('Monday, 01-Jan-74 00:00:00 GMT', datetime(1974, 1, 1, 0, 0, 0)),\n+                ('Friday, 31-Dec-99 23:59:59 GMT', datetime(1999, 12, 31, 23, 59, 59)),\n+                ('Saturday, 01-Jan-00 00:00:00 GMT', datetime(2000, 1, 1, 0, 0, 0)),\n+            ]\n+\n+            for rfc850str, expected_date in tests:\n+                with self.subTest(rfc850str=rfc850str):\n+                    parsed = parse_http_date(rfc850str)\n+                    self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n+\n     def test_parsing_year_less_than_70(self):\n         parsed = parse_http_date('Sun Nov  6 08:49:37 0037')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(2037, 11, 6, 8, 49, 37))\n",
  "django__django-11880": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 95afc0d..77f8267 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3672,7 +3672,51 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n             '<input type=\"hidden\" name=\"data\" id=\"id_data\"></td></tr>'\n         )\n \n-    def test_field_named_data(self):\n+import copy\n+from django.forms import Form, CharField\n+from django.test import SimpleTestCase\n+\n+class FormFieldDeepCopyTests(SimpleTestCase):\n+    \n+    def test_field_deep_copy_error_messages(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        self.assertIsInstance(field_copy, CustomCharField)\n+        self.assertIsNot(field_copy.error_messages, field.error_messages)\n+\n+    def test_field_deep_copy_error_messages_are_independent(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        \n+        # Modify the error messages in the original field\n+        field.error_messages['invalid'] = 'New error message.'\n+        \n+        # Ensure the copied field's error messages are unchanged\n+        self.assertEqual(field_copy.error_messages['invalid'], 'Form custom error message.')\n+        self.assertNotEqual(field_copy.error_messages['invalid'], field.error_messages['invalid'])\n+\n+    def test_field_deep_copy_error_messages_content(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'required': 'This field is required.', 'invalid': 'Invalid input.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        \n+        # Ensure both fields initially have the same error messages content\n+        self.assertEqual(field_copy.error_messages['required'], field.error_messages['required'])\n+        self.assertEqual(field_copy.error_messages['invalid'], field.error_messages['invalid'])\n         class DataForm(Form):\n             data = CharField(max_length=10)\n \n",
  "django__django-11951": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex f2f6bbd..f6a2792 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -1,3 +1,5 @@\n+\n+from math import ceil\n from operator import attrgetter\n \n from django.db import IntegrityError, NotSupportedError, connection\n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..ad6e9c2 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -32,6 +32,32 @@ class Vehicle(models.IntegerChoices):\n     __empty__ = _('(Unknown)')\n \n \n+from django.db import models\n+from django.test import TestCase\n+\n+class TestChoiceEnum(TestCase):\n+    def setUp(self):\n+        class MyChoice(models.TextChoices):\n+            FIRST_CHOICE = \"first\", \"The first choice\"\n+            SECOND_CHOICE = \"second\", \"The second choice\"\n+\n+        class MyObject(models.Model):\n+            my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+        \n+        self.MyChoice = MyChoice\n+        self.MyObject = MyObject\n+        self.my_object = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n+\n+    def test_created_object_is_str(self):\n+        my_object = self.my_object\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(my_object.my_str_value, \"first\")\n+\n+    def test_retrieved_object_is_str(self):\n+        my_object = self.MyObject.objects.last()\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(my_object.my_str_value, \"first\")\n+\n class Gender(models.TextChoices):\n     MALE = 'M'\n     FEMALE = 'F'\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..7dc81d2 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -168,6 +168,16 @@ class GetFieldDisplayTests(SimpleTestCase):\n         self.assertIsInstance(val, str)\n         self.assertEqual(val, 'translated')\n \n+    def test_overriding_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+\n     def test_iterator_choices(self):\n         \"\"\"\n         get_choices() works with Iterators.\n",
  "django__django-12039": "",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..c5b2445 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n@@ -12,6 +13,9 @@ from django.test import SimpleTestCase\n from django.test.utils import register_lookup\n \n from .models import Author, Item, ObjectC, Ranking\n+from django.db.models import Q\n+from django.db.models.lookups import Exact\n+from django.db.models.sql.query import Query\n \n \n class TestQuery(SimpleTestCase):\n@@ -107,6 +111,20 @@ class TestQuery(SimpleTestCase):\n         self.assertIsInstance(b_isnull.lhs, SimpleCol)\n         self.assertEqual(b_isnull.lhs.target, ObjectC._meta.get_field('objectb'))\n \n+    def test_iterable_lookup_value(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=['a', 'b']))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ['a', 'b'])\n+\n+    def test_iterable_lookup_value_with_tuple(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=('a', 'b')))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ('a', 'b'))\n+\n     def test_clone_select_related(self):\n         query = Query(Item)\n         query.add_select_related(['creator'])\n",
  "django__django-12125": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex e62f7b0..3c9a2b0 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -746,4 +746,30 @@ class WriterTests(SimpleTestCase):\n \n     def test_register_non_serializer(self):\n         with self.assertRaisesMessage(ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n+\n+    def test_serialize_inner_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class ModelWithInnerClass(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        migration = type(\"Migration\", (migrations.Migration,), {\n+            \"operations\": [\n+                migrations.CreateModel(\n+                    name=\"ModelWithInnerClass\",\n+                    fields=[\n+                        (\"id\", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n+                        (\"field\", Outer.Inner(max_length=20)),\n+                    ],\n+                ),\n+            ],\n+            \"dependencies\": []\n+        })\n+\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        expected_inner_class_path = \"testapp.Outer.Inner\"\n+        self.assertIn(expected_inner_class_path, output)\n",
  "django__django-12143": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 2d13234..2eb98bd 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -832,6 +832,69 @@ class ChangeListTests(TestCase):\n             '_save': 'Save',\n         }\n         superuser = self._create_superuser('superuser')\n+\n+    def test_get_list_editable_queryset_with_regex_chars_in_prefix(self):\n+        \"\"\"Test with regex special characters in formset prefix.\"\"\"\n+        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n+        Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n+        data = {\n+            'form$-TOTAL_FORMS': '2',\n+            'form$-INITIAL_FORMS': '2',\n+            'form$-MIN_NUM_FORMS': '0',\n+            'form$-MAX_NUM_FORMS': '1000',\n+            'form$-0-uuid': str(a.pk),\n+            'form$-0-load': '10',\n+            '_save': 'Save',\n+        }\n+        superuser = self._create_superuser('superuser')\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form$')\n+        self.assertEqual(queryset.count(), 1)\n+\n+    def test_get_list_editable_queryset_with_complex_regex_chars_in_prefix(self):\n+        \"\"\"Test with complex regex special characters in formset prefix.\"\"\"\n+        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n+        Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n+        data = {\n+            'form[1]-TOTAL_FORMS': '2',\n+            'form[1]-INITIAL_FORMS': '2',\n+            'form[1]-MIN_NUM_FORMS': '0',\n+            'form[1]-MAX_NUM_FORMS': '1000',\n+            'form[1]-0-uuid': str(a.pk),\n+            'form[1]-0-load': '10',\n+            '_save': 'Save',\n+        }\n+        superuser = self._create_superuser('superuser')\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form[1]')\n+        self.assertEqual(queryset.count(), 1)\n+\n+    def test_get_list_editable_queryset_with_escaped_chars_in_prefix(self):\n+        \"\"\"Test with escaped characters in formset prefix.\"\"\"\n+        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n+        Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n+        data = {\n+            'form\\\\.id-TOTAL_FORMS': '2',\n+            'form\\\\.id-INITIAL_FORMS': '2',\n+            'form\\\\.id-MIN_NUM_FORMS': '0',\n+            'form\\\\.id-MAX_NUM_FORMS': '1000',\n+            'form\\\\.id-0-uuid': str(a.pk),\n+            'form\\\\.id-0-load': '10',\n+            '_save': 'Save',\n+        }\n+        superuser = self._create_superuser('superuser')\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form\\\\.id')\n+        self.assertEqual(queryset.count(), 1)\n         self.client.force_login(superuser)\n         changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n         m = SwallowAdmin(Swallow, custom_site)\n",
  "django__django-12155": "",
  "django__django-12193": "diff --git a/tests/postgres_tests/test_array.py b/tests/postgres_tests/test_array.py\nindex 6228cbc..6942bc1 100644\n--- a/tests/postgres_tests/test_array.py\n+++ b/tests/postgres_tests/test_array.py\n@@ -1102,6 +1102,42 @@ class TestSplitFormWidget(PostgreSQLWidgetTestCase):\n                 }\n             }\n         )\n+    \n+    def test_splitarrayfield_checkbox_initial_data(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('name', [True, False, True])\n+        \n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{'checked': True}, {}, {'checked': True}]\n+        )\n+\n+    def test_splitarrayfield_checkbox_partial_true(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=4)\n+        context = widget.get_context('name', [False, True, False, True])\n+        \n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{}, {'checked': True}, {}, {'checked': True}]\n+        )\n+    \n+    def test_splitarrayfield_checkbox_all_false(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('name', [False, False, False])\n+        \n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{}, {}, {}]\n+        )\n+    \n+    def test_splitarrayfield_checkbox_empty(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('name', [])\n+        \n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{}, {}, {}]\n+        )\n \n     def test_render(self):\n         self.check_html(\n",
  "django__django-12209": "diff --git a/tests/serializers/test_data.py b/tests/serializers/test_data.py\nindex abbb3ab..1af4ce9 100644\n--- a/tests/serializers/test_data.py\n+++ b/tests/serializers/test_data.py\n@@ -14,6 +14,8 @@ from django.core import serializers\n from django.db import connection, models\n from django.test import TestCase\n \n+import uuid\n+from django.test import TestCase\n from .models import (\n     Anchor, AutoNowDateTimeData, BigIntegerData, BinaryData, BooleanData,\n     BooleanPKData, CharData, CharPKData, DateData, DatePKData, DateTimeData,\n@@ -26,13 +28,25 @@ from .models import (\n     ModifyingSaveData, NullBooleanData, O2OData, PositiveBigIntegerData,\n     PositiveIntegerData, PositiveIntegerPKData, PositiveSmallIntegerData,\n     PositiveSmallIntegerPKData, SlugData, SlugPKData, SmallData, SmallPKData,\n-    Tag, TextData, TimeData, UniqueAnchor, UUIDData,\n+    Tag, TextData, TimeData, UniqueAnchor, UUIDData, UUIDDefaultData,\n )\n from .tests import register_tests\n \n # A set of functions that can be used to recreate\n # test data objects of various kinds.\n-# The save method is a raw base model save, to make\n+class UUIDDefaultDataTestCase(TestCase):\n+    def test_save_with_explicit_pk(self):\n+        # Create a new instance\n+        s0 = UUIDDefaultData.objects.create()\n+        # Save a new instance with the same primary key but different data\n+        s1 = UUIDDefaultData(pk=s0.pk, data=uuid.uuid4())\n+        # Try to save s1, which should result in an update, not an insert\n+        s1.save()\n+\n+        # Fetch the object from the database\n+        db_s1 = UUIDDefaultData.objects.get(pk=s0.pk)\n+        # Ensure that the name was updated\n+        self.assertEqual(db_s1.data, s1.data)\n # sure that the data in the database matches the\n # exact test case.\n \n",
  "django__django-12262": "diff --git a/tests/template_tests/test_custom.py b/tests/template_tests/test_custom.py\nindex 8a8c535..daedbe4 100644\n--- a/tests/template_tests/test_custom.py\n+++ b/tests/template_tests/test_custom.py\n@@ -77,6 +77,15 @@ class SimpleTagTests(TagTestCase):\n                 'simple_only_unlimited_args - Expected result: 37, 42, 56, 89'),\n             ('{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 56 eggs=\"scrambled\" four=1|add:3 %}',\n                 'simple_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4'),\n+            # Test for keyword-only arguments with default value in simple tags\n+            ('{% load custom %}{% simple_keyword_only_default kwarg=37 %}',\n+                'simple_keyword_only_default - Expected result: 37'),\n+        ]\n+\n+        # Additional test cases for keyword-only arguments\n+        templates += [\n+            ('{% load inclusion %}{% inclusion_keyword_only_default kwarg=37 %}',\n+                'inclusion_keyword_only_default - Expected result: 37\\n'),\n         ]\n \n         for entry in templates:\n@@ -87,7 +96,33 @@ class SimpleTagTests(TagTestCase):\n             t = self.engine.from_string(\"%s as var %%}Result: {{ var }}\" % entry[0][0:-2])\n             self.assertEqual(t.render(c), \"Result: %s\" % entry[1])\n \n-    def test_simple_tag_errors(self):\n+    def test_keyword_only_argument_errors(self):\n+        errors = [\n+            # Attempting to provide multiple values for a keyword-only argument\n+            (\"'simple_keyword_only_param' received multiple values for keyword argument 'kwarg'\",\n+                '{% load custom %}{% simple_keyword_only_param kwarg=42 kwarg=37 %}'),\n+            (\"'simple_keyword_only_default' received multiple values for keyword argument 'kwarg'\",\n+                '{% load custom %}{% simple_keyword_only_default kwarg=42 kwarg=37 %}'),\n+            (\"'inclusion_keyword_only_default' received multiple values for keyword argument 'kwarg'\",\n+                '{% load inclusion %}{% inclusion_keyword_only_default kwarg=37 kwarg=42 %}'),\n+            # Test for keyword-only arguments with default value in simple tags\n+            ('{% load custom %}{% simple_keyword_only_default kwarg=37 %}',\n+                'simple_keyword_only_default - Expected result: 37'),\n+        ]\n+\n+        # Additional test cases for keyword-only arguments\n+        templates += [\n+            ('{% load inclusion %}{% inclusion_keyword_only_default kwarg=37 %}',\n+                'inclusion_keyword_only_default - Expected result: 37\\n'),\n+        ]\n+\n+        for entry in errors:\n+            with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n+                self.engine.from_string(entry[1])\n+\n+        for entry in errors:\n+            with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n+                self.engine.from_string(\"%s as var %%}\" % entry[1][0:-2])\n         errors = [\n             (\"'simple_one_default' received unexpected keyword argument 'three'\",\n                 '{% load custom %}{% simple_one_default 99 two=\"hello\" three=\"foo\" %}'),\n@@ -101,6 +136,15 @@ class SimpleTagTests(TagTestCase):\n                 '{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 eggs=\"scrambled\" 56 four=1|add:3 %}'),\n             (\"'simple_unlimited_args_kwargs' received multiple values for keyword argument 'eggs'\",\n                 '{% load custom %}{% simple_unlimited_args_kwargs 37 eggs=\"scrambled\" eggs=\"scrambled\" %}'),\n+            # Test for keyword-only arguments with default value in simple tags\n+            ('{% load custom %}{% simple_keyword_only_default kwarg=37 %}',\n+                'simple_keyword_only_default - Expected result: 37'),\n+        ]\n+\n+        # Additional test cases for keyword-only arguments\n+        templates += [\n+            ('{% load inclusion %}{% inclusion_keyword_only_default kwarg=37 %}',\n+                'inclusion_keyword_only_default - Expected result: 37\\n'),\n         ]\n \n         for entry in errors:\n@@ -190,6 +234,15 @@ class InclusionTagTests(TagTestCase):\n                 'inclusion_only_unlimited_args - Expected result: 37, 42, 56, 89\\n'),\n             ('{% load inclusion %}{% inclusion_unlimited_args_kwargs 37 40|add:2 56 eggs=\"scrambled\" four=1|add:3 %}',\n                 'inclusion_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4\\n'),\n+            # Test for keyword-only arguments with default value in simple tags\n+            ('{% load custom %}{% simple_keyword_only_default kwarg=37 %}',\n+                'simple_keyword_only_default - Expected result: 37'),\n+        ]\n+\n+        # Additional test cases for keyword-only arguments\n+        templates += [\n+            ('{% load inclusion %}{% inclusion_keyword_only_default kwarg=37 %}',\n+                'inclusion_keyword_only_default - Expected result: 37\\n'),\n         ]\n \n         for entry in templates:\n",
  "django__django-12276": "diff --git a/tests/forms_tests/widget_tests/test_fileinput.py b/tests/forms_tests/widget_tests/test_fileinput.py\nindex c3ea9d6..1e92160 100644\n--- a/tests/forms_tests/widget_tests/test_fileinput.py\n+++ b/tests/forms_tests/widget_tests/test_fileinput.py\n@@ -15,6 +15,19 @@ class FileInputTest(WidgetTest):\n         self.check_html(self.widget, 'email', '', html='<input type=\"file\" name=\"email\">')\n         self.check_html(self.widget, 'email', None, html='<input type=\"file\" name=\"email\">')\n \n+    def test_use_required_attribute_with_initial_value(self):\n+        \"\"\"\n+        Test that use_required_attribute returns False when initial data exists\n+        for FileInput, and True otherwise.\n+        \"\"\"\n+        widget = FileInput()\n+        \n+        # No initial data, should require the attribute\n+        self.assertTrue(widget.use_required_attribute(None))\n+\n+        # Initial data exists, should not require the attribute\n+        self.assertFalse(widget.use_required_attribute('existing_file.txt'))\n+\n     def test_value_omitted_from_data(self):\n         self.assertIs(self.widget.value_omitted_from_data({}, {}, 'field'), True)\n-        self.assertIs(self.widget.value_omitted_from_data({}, {'field': 'value'}, 'field'), False)\n+        self.assertIs(self.widget.value_omitted_from_data({}, {'field': 'value'}, 'field'), False)\n",
  "django__django-12304": "diff --git a/tests/template_tests/test_callables.py b/tests/template_tests/test_callables.py\nindex d71266b..55f1eaa 100644\n--- a/tests/template_tests/test_callables.py\n+++ b/tests/template_tests/test_callables.py\n@@ -1,6 +1,31 @@\n+\n from unittest import TestCase\n \n from django.template import Context, Engine\n+from django.utils.translation import gettext_lazy as _\n+from django.db import models\n+\n+class YearInSchool(models.TextChoices):\n+    FRESHMAN = 'FR', _('Freshman')\n+    SOPHOMORE = 'SO', _('Sophomore')\n+    JUNIOR = 'JR', _('Junior')\n+    SENIOR = 'SR', _('Senior')\n+\n+class EnumTemplatesTests(TestCase):\n+\n+    @classmethod\n+    def setUpClass(cls):\n+        cls.engine = Engine()\n+        super().setUpClass()\n+\n+    def test_enum_in_template(self):\n+        c = Context({\"YearInSchool\": YearInSchool})\n+        t = self.engine.from_string(\"{% if student.year_in_school == YearInSchool.FRESHMAN %}Yes{% else %}No{% endif %}\")\n+        output = t.render(Context({'student': {'year_in_school': YearInSchool.FRESHMAN}}))\n+        self.assertEqual(output, \"Yes\")\n+\n+        output = t.render(Context({'student': {'year_in_school': YearInSchool.SENIOR}}))\n+        self.assertEqual(output, \"No\")\n \n \n class CallableVariablesTests(TestCase):\n@@ -122,4 +147,4 @@ class CallableVariablesTests(TestCase):\n \n         # Double-check that the object was really never called during the\n         # template rendering.\n-        self.assertEqual(my_doodad.num_calls, 0)\n+        self.assertEqual(my_doodad.num_calls, 0)\n",
  "django__django-12308": "",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..7241d2b 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1015,7 +1015,28 @@ class OtherModelTests(SimpleTestCase):\n             class ParkingLot(Place):\n                 parent = models.OneToOneField(Place, models.CASCADE)\n \n-    def test_m2m_table_name_clash(self):\n+    def test_ordering_of_onetoone_fields(self):\n+        # This tests the issue where the order of OneToOneField definitions affects model configuration.\n+        # The following should raise ImproperlyConfigured due to incorrect field ordering.\n+        msg = 'Add parent_link=True to invalid_models_tests.Picking.origin.'\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            class Document(models.Model):\n+                pass\n+\n+            class Picking(Document):\n+                document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+                origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+\n+    def test_correct_order_of_onetoone_fields(self):\n+        # Test the correct order that avoids the ImproperlyConfigured error.\n+        class Document(models.Model):\n+            pass\n+\n+        class Picking(Document):\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+\n+        self.assertEqual(Picking.check(), [])\n         class Foo(models.Model):\n             bar = models.ManyToManyField('Bar', db_table='myapp_bar')\n \n",
  "django__django-12419": "diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py\nindex 7af62eb..8d7cabf 100644\n--- a/tests/middleware/test_security.py\n+++ b/tests/middleware/test_security.py\n@@ -231,7 +231,13 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         \"\"\"\n         self.assertNotIn('Referrer-Policy', self.process_response())\n \n-    def test_referrer_policy_on(self):\n+    @override_settings(SECURE_REFERRER_POLICY=None)\n+    def test_default_secure_referrer_policy(self):\n+        \"\"\"\n+        When SECURE_REFERRER_POLICY is not set, the default should be \"same-origin\".\n+        \"\"\"\n+        response = self.process_response()\n+        self.assertEqual(response['Referrer-Policy'], 'same-origin')\n         \"\"\"\n         With SECURE_REFERRER_POLICY set to a valid value, the middleware adds a\n         \"Referrer-Policy\" header to the response.\n@@ -254,4 +260,4 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         present in the response.\n         \"\"\"\n         response = self.process_response(headers={'Referrer-Policy': 'unsafe-url'})\n-        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n",
  "django__django-12663": "",
  "django__django-12708": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 2df48a2..c1643f5 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1759,7 +1759,25 @@ class OperationTests(OperationTestBase):\n         operation = migrations.AlterIndexTogether(\"Pony\", None)\n         self.assertEqual(operation.describe(), \"Alter index_together for Pony (0 constraint(s))\")\n \n-    @skipUnlessDBFeature('supports_table_check_constraints')\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_alter_index_together_with_unique_together(self):\n+        app_label = 'test_alter_index_with_unique_together'\n+        table_name = '%s_pony' % app_label\n+        # Set up initial model state with both unique_together and index_together\n+        project_state = self.set_up_test_model(app_label, unique_together=True, index_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+\n+        # Move the index_together to indexes option\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', None)\n+        operation.state_forwards(app_label, new_state)\n+        # Apply migration that moves the index to the indexes option\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        # Ensure the unique_together constraint still exists and index is recreated as expected\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n     def test_add_constraint(self):\n         project_state = self.set_up_test_model(\"test_addconstraint\")\n         gt_check = models.Q(pink__gt=2)\n",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..f4e6ac3 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -14,7 +14,7 @@ from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.auth.models import User\n from django.core.files.storage import default_storage\n from django.core.files.uploadedfile import SimpleUploadedFile\n-from django.db.models import CharField, DateField, DateTimeField, UUIDField\n+from django.db.models import CharField, DateField, DateTimeField, UUIDField, ManyToManyField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..cf6b118 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -166,6 +166,24 @@ class SqlFlushTests(TransactionTestCase):\n             self.assertIs(Author.objects.exists(), True)\n             self.assertIs(Book.objects.exists(), True)\n \n+        # Test execute_sql_flush without using argument\n+        sql_list = connection.ops.sql_flush(\n+            no_style(),\n+            [Author._meta.db_table, Book._meta.db_table],\n+            reset_sequences=True,\n+            allow_cascade=True,\n+        )\n+        connection.ops.execute_sql_flush(sql_list)  # Using the new signature\n+\n+        with transaction.atomic():\n+            self.assertIs(Author.objects.exists(), False)\n+            self.assertIs(Book.objects.exists(), False)\n+            if connection.features.supports_sequence_reset:\n+                author = Author.objects.create(name='F. Scott Fitzgerald')\n+                self.assertEqual(author.pk, 1)\n+                book = Book.objects.create(author=author)\n+                self.assertEqual(book.pk, 1)\n+\n         sql_list = connection.ops.sql_flush(\n             no_style(),\n             [Author._meta.db_table, Book._meta.db_table],\n@@ -181,4 +199,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 17e707b..06e9cf3 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2444,13 +2444,27 @@ class AutodetectorTests(TestCase):\n         self.assertNumberMigrations(changes, 'testapp', 1)\n         self.assertOperationTypes(changes, 'testapp', 0, [\"AddField\", \"AddField\"])\n         self.assertOperationAttributes(changes, 'testapp', 0, 0)\n-\n-    def test_mti_inheritance_model_removal(self):\n-        Animal = ModelState('app', 'Animal', [\n-            (\"id\", models.AutoField(primary_key=True)),\n-        ])\n-        Dog = ModelState('app', 'Dog', [], bases=('app.Animal',))\n-        changes = self.get_changes([Animal, Dog], [Animal])\n+    \n+    def test_add_model_with_field_removed_from_base_model(self):\n+        \"\"\"\n+        Test for issue resolution: Ensuring 'RemoveField' happens before 'CreateModel'.\n+        \"\"\"\n+        before = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('title', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        after = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+            ]),\n+            ModelState('app', 'book', [\n+                ('title', models.CharField(max_length=200)),\n+            ], bases=('app.readable',)),\n+        ]\n+        changes = self.get_changes(before, after)\n         self.assertNumberMigrations(changes, 'app', 1)\n-        self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationTypes(changes, 'app', 0, ['RemoveField', 'CreateModel'])\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='title', model_name='readable')\n+        self.assertOperationAttributes(changes, 'app', 0, 1, name='book')\n",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..ee820d9 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -6,6 +6,8 @@ from operator import attrgetter\n from django.core.exceptions import FieldError\n from django.db import connection\n from django.db.models import Exists, Max, OuterRef\n+from django.db import models\n+from django.test.utils import isolate_apps\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n from django.utils.deprecation import RemovedInDjango40Warning\n@@ -194,7 +196,58 @@ class LookupTests(TestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             Article.objects.in_bulk([self.au1], field_name='author')\n \n-    def test_values(self):\n+    @isolate_apps('lookup')\n+    def test_in_bulk_unique_constraint(self):\n+        class Article(models.Model):\n+            slug = models.CharField(max_length=255)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=[\"slug\"],\n+                        name=\"lookup_article_slug_unq\"\n+                    )\n+                ]\n+\n+        article_1 = Article.objects.create(slug='unique-slug-1')\n+        article_2 = Article.objects.create(slug='unique-slug-2')\n+\n+        self.assertEqual(\n+            Article.objects.in_bulk(\n+                [article_1.slug, article_2.slug],\n+                field_name='slug'\n+            ),\n+            {\n+                article_1.slug: article_1,\n+                article_2.slug: article_2,\n+            }\n+        )\n+\n+    @isolate_apps('lookup')\n+    def test_in_bulk_non_unique_meta_constraint(self):\n+        class Model(models.Model):\n+            ean = models.CharField(max_length=100)\n+            brand = models.CharField(max_length=100)\n+            name = models.CharField(max_length=80)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=['ean'],\n+                        name='partial_ean_unique',\n+                        condition=models.Q(brand='some_brand')\n+                    ),\n+                    models.UniqueConstraint(\n+                        fields=['brand', 'name'],\n+                        name='together_brand_name_unique',\n+                    ),\n+                ]\n+\n+        msg = \"in_bulk()'s field_name must be a unique field but '%s' isn't.\"\n+        for field_name in ['brand', 'ean']:\n+            with self.subTest(field_name=field_name):\n+                with self.assertRaisesMessage(ValueError, msg % field_name):\n+                    Model.objects.in_bulk(field_name=field_name)\n         # values() returns a list of dictionaries instead of object instances --\n         # and you can specify which fields you want to retrieve.\n         self.assertSequenceEqual(\n",
  "django__django-12858": "",
  "django__django-13012": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 87c0945..b9556c5 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1820,11 +1820,30 @@ class CombinableTests(SimpleTestCase):\n     def test_or(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             Combinable() | Combinable()\n-\n-    def test_reversed_and(self):\n+class ExpressionWrapperTests(SimpleTestCase):\n+    def test_empty_group_by(self):\n+        expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [])\n+\n+    def test_non_empty_group_by(self):\n+        expr = ExpressionWrapper(Lower(Value('f')), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [expr.expression])\n+\n+    def test_constant_value_group_by(self):\n+        \"\"\"Test to ensure constant values are not included in GROUP BY.\"\"\"\n+        expr = ExpressionWrapper(Value(42), output_field=IntegerField())\n+        group_by_cols = expr.get_group_by_cols(alias=None)\n+        self.assertEqual(group_by_cols, [])\n+\n+    def test_nested_expression_group_by(self):\n+        \"\"\"Test nested expressions to ensure inner expression is managed properly.\"\"\"\n+        nested_expr = ExpressionWrapper(Lower(Value('test')), output_field=IntegerField())\n+        outer_expr = ExpressionWrapper(nested_expr, output_field=IntegerField())\n+        group_by_cols = outer_expr.get_group_by_cols(alias=None)\n+        self.assertEqual(group_by_cols, [nested_expr.expression])\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             object() & Combinable()\n \n     def test_reversed_or(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n-            object() | Combinable()\n+            object() | Combinable()\n",
  "django__django-13028": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 70329a0..14c2126 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -1200,6 +1200,20 @@ class Queries1Tests(TestCase):\n         )\n         self.assertTrue(qs.first())\n \n+    def test_filter_with_filterable_false(self):\n+        # Create instances similar to the issue description\n+        metadata_type = ProductMetaDataType.objects.create(label=\"brand\", filterable=False)\n+        product_metadata = ProductMetaData.objects.create(\n+            product=Produit.objects.create(name=\"Sample Product\"),\n+            value=\"Dark Vador\",\n+            marketplace=Plateforme.objects.create(name=\"Sample Marketplace\"),\n+            metadata_type=metadata_type\n+        )\n+\n+        # Test filtering which initially raised NotSupportedError\n+        queryset = ProductMetaData.objects.filter(value=\"Dark Vador\", metadata_type=metadata_type)\n+        self.assertQuerysetEqual(queryset, [repr(product_metadata)], ordered=False)\n+\n     def test_excluded_intermediary_m2m_table_joined(self):\n         self.assertSequenceEqual(\n             Note.objects.filter(~Q(tag__annotation__name=F('note'))),\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..5fbd9a4 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,6 +343,46 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def setUp(self):\n+        # Setup for the tests; creating instances for OneModel and TwoModel\n+        self.one1 = OneModel.objects.create(oneval=1)\n+        self.one2 = OneModel.objects.create(oneval=2, root=self.one1)\n+        self.two1 = TwoModel.objects.create(record=self.one1, twoval=100)\n+        self.two2 = TwoModel.objects.create(record=self.one2, twoval=200)\n+\n+    def test_order_by_self_reference_fk_issue(self):\n+        # This test replicates the faulty behavior as described in the issue\n+        qs = TwoModel.objects.filter(record__oneval__in=[1, 2])\n+        ordered_qs = qs.order_by(\"record__root_id\")\n+        self.assertQuerysetEqual(\n+            ordered_qs,\n+            [self.two2, self.two1],  # expected order based on record__root_id ascending, but issue causes DESC\n+            lambda x: x,\n+            ordered=False\n+        )\n+\n+    def test_correct_order_by_self_reference_fk(self):\n+        # This test verifies the correct order using an alternative method\n+        qs = TwoModel.objects.filter(record__oneval__in=[1, 2])\n+        ordered_qs = qs.annotate(root_id=F(\"record__root_id\")).order_by(\"root_id\")\n+        self.assertQuerysetEqual(\n+            ordered_qs,\n+            [self.two1, self.two2],  # expected correct order based on root_id ascending\n+            lambda x: x,\n+            ordered=False\n+        )\n+\n+    def test_inverted_order_by_self_reference_fk_issue(self):\n+        # Testing the inverted order, which should be ASC due to the issue\n+        qs = TwoModel.objects.filter(record__oneval__in=[1, 2])\n+        ordered_qs = qs.order_by(\"-record__root_id\")\n+        self.assertQuerysetEqual(\n+            ordered_qs,\n+            [self.two1, self.two2],  # unexpected result due to the issue causing ASC\n+            lambda x: x,\n+            ordered=False\n+        )\n+\n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n@@ -353,6 +393,46 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n+\n+    def setUp(self):\n+        # Setup for the tests; creating instances for OneModel and TwoModel\n+        self.one1 = OneModel.objects.create(oneval=1)\n+        self.one2 = OneModel.objects.create(oneval=2, root=self.one1)\n+        self.two1 = TwoModel.objects.create(record=self.one1, twoval=100)\n+        self.two2 = TwoModel.objects.create(record=self.one2, twoval=200)\n+\n+    def test_order_by_self_reference_fk_issue(self):\n+        # This test replicates the faulty behavior as described in the issue\n+        qs = TwoModel.objects.filter(record__oneval__in=[1, 2])\n+        ordered_qs = qs.order_by(\"record__root_id\")\n+        self.assertQuerysetEqual(\n+            ordered_qs,\n+            [self.two2, self.two1],  # expected order based on record__root_id ascending, but issue causes DESC\n+            lambda x: x,\n+            ordered=False\n+        )\n+\n+    def test_correct_order_by_self_reference_fk(self):\n+        # This test verifies the correct order using an alternative method\n+        qs = TwoModel.objects.filter(record__oneval__in=[1, 2])\n+        ordered_qs = qs.annotate(root_id=F(\"record__root_id\")).order_by(\"root_id\")\n+        self.assertQuerysetEqual(\n+            ordered_qs,\n+            [self.two1, self.two2],  # expected correct order based on root_id ascending\n+            lambda x: x,\n+            ordered=False\n+        )\n+\n+    def test_inverted_order_by_self_reference_fk_issue(self):\n+        # Testing the inverted order, which should be ASC due to the issue\n+        qs = TwoModel.objects.filter(record__oneval__in=[1, 2])\n+        ordered_qs = qs.order_by(\"-record__root_id\")\n+        self.assertQuerysetEqual(\n+            ordered_qs,\n+            [self.two1, self.two2],  # unexpected result due to the issue causing ASC\n+            lambda x: x,\n+            ordered=False\n+        )\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline').asc()), [\n                 \"Article 1\",\n",
  "django__django-13089": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex e11856f..1d58324 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -614,6 +614,45 @@ class BaseCacheTests:\n             if cull_cache.has_key('cull%d' % i):\n                 count += 1\n         self.assertEqual(count, final_count)\n+    \n+    def test_cull_no_rows_returned(self):\n+        \"\"\"\n+        Test the _cull method when no rows are returned by the cursor after\n+        the cache_key_culling_sql execution, which previously could lead to a\n+        'NoneType' object is not subscriptable error.\n+        \"\"\"\n+        try:\n+            cull_cache = caches['cull']\n+        except InvalidCacheBackendError:\n+            self.skipTest(\"Culling isn't implemented.\")\n+\n+        # Simulate a situation where the cache is empty or the SQL execution returns no rows\n+        # Set max entries to a low number to trigger culling logic\n+        old_max_entries = cull_cache._max_entries\n+        cull_cache._max_entries = 1\n+        try:\n+            # Ensure the cache is empty\n+            cull_cache.clear()\n+            # Set an item to trigger the cull\n+            cull_cache.set('dummy_key', 'dummy_value', timeout=1000)\n+            # This should not raise an error even if no rows are returned\n+            self.assertTrue(cull_cache.has_key('dummy_key'))\n+        finally:\n+            cull_cache._max_entries = old_max_entries\n+\n+    def test_cull_with_no_entries(self):\n+        \"\"\"\n+        Test the _cull method when the cache is initially empty.\n+        \"\"\"\n+        try:\n+            cull_cache = caches['cull']\n+        except InvalidCacheBackendError:\n+            self.skipTest(\"Culling isn't implemented.\")\n+\n+        # Simulate a situation where the cache is empty\n+        cull_cache.clear()\n+        # Attempt to trigger culling; should not raise an error\n+        cull_cache._cull('default', connection.cursor(), datetime.now())\n \n     def test_cull(self):\n         self._perform_cull_test('cull', 50, 29)\n",
  "django__django-13109": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex d60d822..935e65c 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -1645,6 +1645,49 @@ class ModelFormBasicTests(TestCase):\n         obj.full_clean()\n \n \n+class ForeignKeyValidationTests(TestCase):\n+    def setUp(self):\n+        self.writer_archived = Writer.objects.create(name='Archived Writer', archived=True)\n+        self.writer_active = Writer.objects.create(name='Active Writer', archived=False)\n+\n+    def test_foreign_key_validation_with_default_manager(self):\n+        # Test using the default manager which filters out archived writers\n+        class ArticleForm(forms.ModelForm):\n+            class Meta:\n+                model = Article\n+                fields = '__all__'\n+        \n+        data = {\n+            'title': 'Sample Article',\n+            'writer': self.writer_archived.pk\n+        }\n+        form = ArticleForm(data)\n+        self.assertFalse(form.is_valid())\n+        self.assertEqual(\n+            form.errors,\n+            {'writer': ['Select a valid choice. That choice is not one of the available choices.']}\n+        )\n+\n+    def test_foreign_key_validation_with_base_manager(self):\n+        # Test using base manager which includes archived writers\n+        class ArticleForm(forms.ModelForm):\n+            class Meta:\n+                model = Article\n+                fields = '__all__'\n+            \n+            def __init__(self, *args, **kwargs):\n+                super().__init__(*args, **kwargs)\n+                self.fields['writer'].queryset = Writer._base_manager.all()\n+        \n+        data = {\n+            'title': 'Sample Article',\n+            'writer': self.writer_archived.pk\n+        }\n+        form = ArticleForm(data)\n+        self.assertTrue(form.is_valid())\n+        article = form.save()\n+        self.assertEqual(article.writer, self.writer_archived)\n+\n class ModelMultipleChoiceFieldTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-13112": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 081eff8..30e6726 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -867,7 +867,31 @@ class StateTests(SimpleTestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             project_state.apps\n \n-    def test_real_apps(self):\n+    def test_mixed_case_app_label(self):\n+        \"\"\"\n+        Test handling of mixed-case app labels in ForeignKey references.\n+        \"\"\"\n+        new_apps = Apps()\n+\n+        class MixedCaseCategory(models.Model):\n+            class Meta:\n+                app_label = 'MixedCaseApp'\n+                apps = new_apps\n+\n+        class MixedCaseContent(models.Model):\n+            category = models.ForeignKey(MixedCaseCategory, on_delete=models.CASCADE)\n+\n+            class Meta:\n+                app_label = 'MixedCaseApp'\n+                apps = new_apps\n+\n+        # Set up a project state and add models\n+        project_state = ProjectState()\n+        project_state.add_model(ModelState.from_model(MixedCaseCategory))\n+        project_state.add_model(ModelState.from_model(MixedCaseContent))\n+\n+        # Assert that the apps registry can properly reference both models\n+        self.assertEqual(len(project_state.apps.get_models()), 2)\n         \"\"\"\n         Including real apps can resolve dangling FK errors.\n         This test relies on the fact that contenttypes is always loaded.\n",
  "django__django-13121": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex a684d7e..2cb12e9 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1210,6 +1210,28 @@ class ExpressionOperatorTests(TestCase):\n         self.assertEqual(Number.objects.get(pk=self.n.pk).integer, 1764)\n         self.assertEqual(Number.objects.get(pk=self.n.pk).float, Approximate(61.02, places=2))\n \n+    from django.db import connection\n+    from django.db.models import F\n+    from datetime import timedelta\n+    from .models import Experiment\n+    \n+    def test_duration_expressions_extended(self):\n+        deltas = [timedelta(days=1), timedelta(hours=5), timedelta(minutes=30)]\n+        for delta in deltas:\n+            qs = Experiment.objects.annotate(duration=F('estimated_time') + delta)\n+            for obj in qs:\n+                self.assertEqual(obj.duration, obj.estimated_time + delta)\n+\n+        # Test subtraction of duration\n+        qs = Experiment.objects.annotate(duration=F('estimated_time') - timedelta(days=1))\n+        for obj in qs:\n+            self.assertEqual(obj.duration, obj.estimated_time - timedelta(days=1))\n+\n+        # Test multiplication (this is hypothetical and may not be directly supported)\n+        # qs = Experiment.objects.annotate(duration=F('estimated_time') * 2)\n+        # for obj in qs:\n+        #     self.assertEqual(obj.duration, obj.estimated_time * 2)\n+\n     @unittest.skipIf(connection.vendor == 'oracle', \"Oracle doesn't support bitwise XOR.\")\n     def test_lefthand_bitwise_xor(self):\n         Number.objects.update(integer=F('integer').bitxor(48))\n",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..60f381d 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1627,7 +1627,20 @@ class FTimeDeltaTests(TestCase):\n         for e in qs:\n             self.assertEqual(e.delta, delta)\n \n-    def test_duration_with_datetime(self):\n+    @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_without_expression_wrapper(self):\n+        # Create an Experiment instance to test temporal subtraction.\n+        e = Experiment.objects.create(\n+            name='test_experiment',\n+            start=datetime.datetime(2023, 10, 1, 12, 0, 0),\n+            end=datetime.datetime(2023, 10, 2, 12, 0, 0),\n+        )\n+        # Annotate with the subtraction result of end and start\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        # Ensure that subtraction works and returns the correct timedelta.\n+        self.assertEqual(queryset.get(id=e.id).delta, datetime.timedelta(days=1))\n         # Exclude e1 which has very high precision so we can test this on all\n         # backends regardless of whether or not it supports\n         # microsecond_precision.\n",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..6379ca2 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,5 +1,9 @@\n import operator\n \n+from django.forms import ModelForm, ModelMultipleChoiceField\n+\n+from .models import Number, ReservedName, Publication, Article\n+\n from django.db import DatabaseError, NotSupportedError, connection\n from django.db.models import Exists, F, IntegerField, OuterRef, Value\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..10bb387 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -34,6 +34,7 @@ from django.test import (\n     RequestFactory, TestCase, ignore_warnings, override_settings,\n )\n from django.utils import timezone\n+from django.utils.deprecation import RemovedInDjango40Warning\n \n from .models import SessionStore as CustomDatabaseSession\n \n@@ -312,6 +313,13 @@ class SessionTestsMixin:\n         self.assertEqual(self.session.decode(encoded), data)\n \n     @override_settings(SECRET_KEY='django_tests_secret_key')\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    @override_settings(DEFAULT_HASHING_ALGORITHM='sha1')\n+    def test_default_hashing_algorithm_legacy_decode(self):\n+        data = {'a test key': 'a test value'}\n+        encoded = self.session.encode(data)\n+        self.assertEqual(self.session._legacy_decode(encoded), data)\n+\n     def test_decode_legacy(self):\n         # RemovedInDjango40Warning: pre-Django 3.1 sessions will be invalid.\n         legacy_encoded = (\n@@ -323,6 +331,18 @@ class SessionTestsMixin:\n             {'a test key': 'a test value'},\n         )\n \n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    @override_settings(DEFAULT_HASHING_ALGORITHM='sha1')\n+    def test_legacy_decode_with_incorrect_hash(self):\n+        # Encode data with the correct hash\n+        data = {'a test key': 'a test value'}\n+        encoded = self.session.encode(data)\n+        # Manually modify the encoded data to simulate a bad hash\n+        bad_encoded = 'bad' + encoded[3:]\n+        with self.assertLogs('django.security.SuspiciousSession', 'WARNING') as cm:\n+            self.assertEqual(self.session._legacy_decode(bad_encoded), {})\n+        self.assertIn('corrupted', cm.output[0])\n+\n     def test_decode_failure_logged_to_security(self):\n         bad_encode = base64.b64encode(b'flaskdj:alkdjf').decode('ascii')\n         with self.assertLogs('django.security.SuspiciousSession', 'WARNING') as cm:\n",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..5ea30a0 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -2,6 +2,9 @@ import time\n \n from django.core.exceptions import ImproperlyConfigured\n from django.http import HttpResponse\n+from django.utils.functional import SimpleLazyObject\n+from django.shortcuts import get_object_or_404\n+from .models import Account  # Assuming Account is defined in models\n from django.test import (\n     RequestFactory, SimpleTestCase, ignore_warnings, override_settings,\n )\n@@ -572,7 +575,23 @@ class SingleObjectTemplateResponseMixinTest(SimpleTestCase):\n \n @override_settings(ROOT_URLCONF='generic_views.urls')\n class DeprecationTests(SimpleTestCase):\n-    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_template_params_with_simplelazyobject(self):\n+        \"\"\"Test that SimpleLazyObject in kwargs resolves correctly.\"\"\"\n+\n+        class OfferView(TemplateView):\n+            template_name = \"offers/offer.html\"\n+\n+            def get_context_data(self, **kwargs):\n+                offer_slug = kwargs.get(\"offer_slug\", \"\")\n+                offer = get_object_or_404(Account, slug=str(offer_slug))\n+                return {\"offer\": offer, \"offer_slug\": offer_slug}\n+\n+        account = Account.objects.create(slug='test-offer')\n+        # Simulate SimpleLazyObject by using a lazy evaluation\n+        lazy_slug = SimpleLazyObject(lambda: 'test-offer')\n+\n+        response = OfferView.as_view()(self.rf.get('/offers/test-offer/'), offer_slug=lazy_slug)\n+        self.assertEqual(response.context_data['offer'], account)\n     def test_template_params(self):\n         \"\"\"A generic template view passes kwargs as context.\"\"\"\n         response = self.client.get('/template/simple/bar/')\n@@ -580,7 +599,23 @@ class DeprecationTests(SimpleTestCase):\n         self.assertEqual(response.context['foo'], 'bar')\n         self.assertIsInstance(response.context['view'], View)\n \n-    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_template_params_with_simplelazyobject(self):\n+        \"\"\"Test that SimpleLazyObject in kwargs resolves correctly.\"\"\"\n+\n+        class OfferView(TemplateView):\n+            template_name = \"offers/offer.html\"\n+\n+            def get_context_data(self, **kwargs):\n+                offer_slug = kwargs.get(\"offer_slug\", \"\")\n+                offer = get_object_or_404(Account, slug=str(offer_slug))\n+                return {\"offer\": offer, \"offer_slug\": offer_slug}\n+\n+        account = Account.objects.create(slug='test-offer')\n+        # Simulate SimpleLazyObject by using a lazy evaluation\n+        lazy_slug = SimpleLazyObject(lambda: 'test-offer')\n+\n+        response = OfferView.as_view()(self.rf.get('/offers/test-offer/'), offer_slug=lazy_slug)\n+        self.assertEqual(response.context_data['offer'], account)\n     def test_extra_template_params(self):\n         \"\"\"A template view can be customized to return extra context.\"\"\"\n         response = self.client.get('/template/custom/bar1/bar2/')\n",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..2134421 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -15,6 +15,7 @@ from django.forms.models import (\n     modelform_factory,\n )\n from django.template import Context, Template\n+from django.test.utils import isolate_apps\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n \n from .models import (\n@@ -2830,6 +2831,73 @@ class LimitChoicesToTests(TestCase):\n             self.assertEqual(today_callable_dict.call_count, 3)\n \n \n+class ForeignKeyLimitChoicesTests(TestCase):\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates_with_foreign_key(self):\n+        # Characters\n+        marley = Character.objects.create(username='Marley', last_action='2023-10-01')\n+        threepwood = Character.objects.create(username='Threepwood', last_action='2023-10-02')\n+\n+        # Creating jokes\n+        joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=marley)\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=marley)\n+\n+        joke1.has_fooled_today.add(marley, threepwood)\n+        joke2.has_fooled_today.add(marley)\n+        joke3.has_fooled_today.add(marley, threepwood)\n+\n+        # Form model definition\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        # Form definition\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        # Instantiate the form and check for duplicates\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [marley, threepwood],\n+        )\n+\n class FormFieldCallbackTests(SimpleTestCase):\n \n     def test_baseform_with_widgets_in_meta(self):\n",
  "django__django-13343": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex a5ab3a0..fb77abc 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -29,7 +29,7 @@ from django.test.utils import requires_tz_support\n from django.urls import NoReverseMatch, reverse_lazy\n from django.utils import timezone\n \n-from .models import Storage, temp_storage, temp_storage_location\n+from .models import Storage, callable_storage, temp_storage, temp_storage_location\n \n FILE_SUFFIX_REGEX = '[A-Za-z0-9]{7}'\n \n@@ -906,7 +906,15 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         obj = FileField(storage=GetStorage)\n         self.assertIsInstance(obj.storage, BaseStorage)\n \n-    def test_callable_storage_file_field_in_model(self):\n+    def test_deconstruction_with_callable_storage(self):\n+        \"\"\"\n+        Verifies that a FileField with a callable storage returns the original\n+        callable on deconstruction, not the evaluated storage.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field('storage_callable').deconstruct()\n+        storage = kwargs['storage']\n+        self.assertIs(storage, callable_storage)\n         obj = Storage()\n         self.assertEqual(obj.storage_callable.storage, temp_storage)\n         self.assertEqual(obj.storage_callable.storage.location, temp_storage_location)\n",
  "django__django-13346": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex b918d5c..1ec71cd 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -623,6 +623,26 @@ class TestQuerying(TestCase):\n                     expected,\n                 )\n \n+    def test_key_in_with_jsonfield(self):\n+        # Test cases for the __in lookup on key transforms\n+        tests = [\n+            ('value__c__in', [14], self.objs[3:5]),\n+            ('value__c__in', [14, 15], self.objs[3:5]),\n+            ('value__0__in', [1], [self.objs[5]]),\n+            ('value__0__in', [1, 3], [self.objs[5]]),\n+            ('value__foo__in', ['bar'], [self.objs[7]]),\n+            ('value__foo__in', ['bar', 'baz'], [self.objs[7]]),\n+            ('value__bar__in', [['foo', 'bar']], [self.objs[7]]),\n+            ('value__bar__in', [['foo', 'bar'], ['a']], [self.objs[7]]),\n+            ('value__bax__in', [{'foo': 'bar'}, {'a': 'b'}], [self.objs[7]]),\n+        ]\n+        for lookup, value, expected in tests:\n+            with self.subTest(lookup=lookup, value=value):\n+                self.assertSequenceEqual(\n+                    NullableJSONModel.objects.filter(**{lookup: value}),\n+                    expected,\n+                )\n+\n     def test_key_iexact(self):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__iexact='BaR').exists(), True)\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__iexact='\"BaR\"').exists(), False)\n",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..9c24289 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -18,8 +18,68 @@ from django.test import (\n     TestCase, override_settings, skipIfDBFeature, skipUnlessDBFeature,\n )\n from django.utils import timezone\n+import pytz\n+from datetime import datetime\n+from django.db.models.aggregates import Count\n+from django.utils import timezone\n+from ..models import Author, DTModel, Fan, TimeSlots\n+\n+class TruncDateTimeTests(TestCase):\n+    def test_trunc_date_with_tzinfo(self):\n+        # Create a datetime object with UTC timezone\n+        start_datetime = datetime(2023, 10, 10, 12, 0, 0)\n+        start_datetime = timezone.make_aware(start_datetime, timezone.utc)\n+\n+        # Create a TimeSlots instance\n+        TimeSlots.objects.create(start_at=start_datetime)\n+\n+        # Define different time zones\n+        ny_tz = pytz.timezone(\"America/New_York\")\n+        utc_tz = timezone.utc\n+\n+        # Annotate using TruncDate with different tzinfo\n+        report = TimeSlots.objects.annotate(\n+            start_date_ny=TruncDate(\"start_at\", tzinfo=ny_tz),\n+            start_date_utc=TruncDate(\"start_at\", tzinfo=utc_tz),\n+        ).values(\"start_date_ny\", \"start_date_utc\").annotate(timeslot_count=Count(\"id\"))\n+\n+        # Fetch the annotated entry\n+        report_entry = report.first()\n+\n+        # Assert the results are as expected\n+        ny_date_expected = start_datetime.astimezone(ny_tz).date()\n+        utc_date_expected = start_datetime.date()\n+\n+        self.assertEqual(report_entry[\"start_date_ny\"], ny_date_expected)\n+        self.assertEqual(report_entry[\"start_date_utc\"], utc_date_expected)\n+\n+    def test_trunc_time_with_tzinfo(self):\n+        # Create a datetime object with UTC timezone\n+        start_datetime = datetime(2023, 10, 10, 12, 0, 0)\n+        start_datetime = timezone.make_aware(start_datetime, timezone.utc)\n+\n+        # Create a TimeSlots instance\n+        TimeSlots.objects.create(start_at=start_datetime)\n+\n+        # Define different time zones\n+        ny_tz = pytz.timezone(\"America/New_York\")\n+        utc_tz = timezone.utc\n+\n+        # Annotate using TruncTime with different tzinfo\n+        report = TimeSlots.objects.annotate(\n+            start_time_ny=TruncTime(\"start_at\", tzinfo=ny_tz),\n+            start_time_utc=TruncTime(\"start_at\", tzinfo=utc_tz),\n+        ).values(\"start_time_ny\", \"start_time_utc\").annotate(timeslot_count=Count(\"id\"))\n+\n+        # Fetch the annotated entry\n+        report_entry = report.first()\n+\n+        # Assert the results are as expected\n+        ny_time_expected = start_datetime.astimezone(ny_tz).time()\n+        utc_time_expected = start_datetime.time()\n \n-from ..models import Author, DTModel, Fan\n+        self.assertEqual(report_entry[\"start_time_ny\"], ny_time_expected)\n+        self.assertEqual(report_entry[\"start_time_utc\"], utc_time_expected)\n \n \n def truncate_to(value, kind, tzinfo=None):\n",
  "django__django-13401": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e39d03e..d9584cf 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -103,6 +103,44 @@ class BasicFieldTests(SimpleTestCase):\n         self.assertEqual(path, 'model_fields.tests.Nested.Field')\n \n \n+from django.db import models\n+\n+class AbstractFieldEqualityTests(SimpleTestCase):\n+    def test_abstract_inherited_fields_not_equal(self):\n+        \"\"\"Field instances from different models inheriting the same abstract model should not be equal.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n+        self.assertLess(abstract_model_field, inherit1_model_field)\n+        self.assertLess(abstract_model_field, inherit2_model_field)\n+        self.assertLess(inherit1_model_field, inherit2_model_field)\n+\n+    def test_abstract_same_model_fields_equal(self):\n+        \"\"\"Field instances from the same model should be equal.\"\"\"\n+        class ModelWithFields(models.Model):\n+            field1 = models.IntegerField()\n+            field2 = models.IntegerField()\n+\n+        field1 = ModelWithFields._meta.get_field('field1')\n+        field2 = ModelWithFields._meta.get_field('field2')\n+\n+        self.assertNotEqual(field1, field2)\n+\n class ChoicesTests(SimpleTestCase):\n \n     @classmethod\n",
  "django__django-13410": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 1285e22..234220e 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -1,3 +1,4 @@\n+\n import errno\n import gzip\n import os\n@@ -8,7 +9,7 @@ from io import BytesIO, StringIO, TextIOWrapper\n from pathlib import Path\n from unittest import mock\n \n-from django.core.files import File\n+from django.core.files import File, locks\n from django.core.files.base import ContentFile\n from django.core.files.move import file_move_safe\n from django.core.files.temp import NamedTemporaryFile\n@@ -170,6 +171,34 @@ class FileTests(unittest.TestCase):\n             self.assertEqual(test_file.read(), (content * 2).encode())\n \n \n+class LockingTestCase(unittest.TestCase):\n+    def test_exclusive_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'wb') as f:\n+            f.write(b'Test content')\n+            f.flush()\n+        with open(file_path) as f1, open(file_path) as f2:\n+            self.assertIs(locks.lock(f1, locks.LOCK_EX), True)\n+            self.assertIs(locks.lock(f2, locks.LOCK_EX | locks.LOCK_NB), False)\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), False)\n+            self.assertIs(locks.unlock(f1), True)\n+\n+    def test_shared_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path) as f1, open(file_path) as f2:\n+            self.assertIs(locks.lock(f1, locks.LOCK_SH), True)\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), True)\n+            self.assertIs(locks.unlock(f1), True)\n+            self.assertIs(locks.unlock(f2), True)\n+\n+    def test_lock_failure(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path) as f1:\n+            f1.close()  # Close to simulate an invalid file scenario\n+            self.assertIs(locks.lock(f1, locks.LOCK_EX), False)\n+\n+...\n+\n class NoNameFileTestCase(unittest.TestCase):\n     \"\"\"\n     Other examples of unnamed files may be tempfile.SpooledTemporaryFile or\n",
  "django__django-13417": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 8130de5..a395ab5 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2079,6 +2079,16 @@ class QuerysetOrderedTests(unittest.TestCase):\n     def test_order_by_extra(self):\n         self.assertIs(Annotation.objects.all().extra(order_by=['id']).ordered, True)\n \n+    def test_annotated_default_ordering(self):\n+        qs = Tag.objects.annotate(num_notes=Count('pk'))\n+        self.assertIs(qs.ordered, False)\n+        self.assertIs(qs.order_by('name').ordered, True)\n+\n+    def test_annotated_values_default_ordering(self):\n+        qs = Tag.objects.values('name').annotate(num_notes=Count('pk'))\n+        self.assertIs(qs.ordered, False)\n+        self.assertIs(qs.order_by('name').ordered, True)\n+\n     def test_annotated_ordering(self):\n         qs = Annotation.objects.annotate(num_notes=Count('notes'))\n         self.assertIs(qs.ordered, False)\n",
  "django__django-13516": "",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..7b3a7f1 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,11 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n+from .models.with_custom_email_field import CustomEmailField\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n@@ -37,7 +39,26 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n-    def test_timeout(self):\n+    def test_token_invalid_on_email_change(self):\n+        \"\"\"Test that updating the user's email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'changeemailuser@example.com'),\n+            (User, 'changeemailuser@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    username='changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                setattr(user, user.get_email_field_name(), 'newemail@example.com')\n+                user.save()\n+                self.assertIs(p0.check_token(user, tk1), False)\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n         # the value of 'now'.\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..0291e82 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,3 +1,4 @@\n+\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n@@ -7,6 +8,7 @@ from django.db import models\n from django.test import (\n     SimpleTestCase, override_settings, override_system_checks,\n )\n+from django.db.models import Q, UniqueConstraint\n from django.test.utils import isolate_apps\n \n from .models import CustomUserNonUniqueUsername\n@@ -85,7 +87,27 @@ class UserModelChecksTests(SimpleTestCase):\n                 ),\n             ])\n \n-    @override_settings(AUTH_USER_MODEL='auth_tests.BadUser')\n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserUniqueConstraint')\n+    def test_username_unique_constraint(self):\n+        \"\"\"\n+        Test case to verify that defining a UniqueConstraint on the USERNAME_FIELD\n+        does not trigger auth.E003.\n+        \"\"\"\n+        class CustomUserUniqueConstraint(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(fields=['username'], name='username_unique_constraint'),\n+                ]\n+\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [])\n+\n+        with self.settings(AUTHENTICATION_BACKENDS=['my.custom.backend']):\n+            errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+            self.assertEqual(errors, [])\n     def test_is_anonymous_authenticated_methods(self):\n         \"\"\"\n         <User Model>.is_anonymous/is_authenticated must not be methods.\n",
  "django__django-13569": "",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..0e96836 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -815,6 +816,13 @@ class IterableLookupInnerExpressionsTests(TestCase):\n         Company.objects.create(name='5060 Ltd', num_employees=50, num_chairs=60, ceo=ceo)\n         Company.objects.create(name='99300 Ltd', num_employees=99, num_chairs=300, ceo=ceo)\n \n+    def test_range_lookup_namedtuple(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertQuerysetEqual(qs, ['<Company: 99300 Ltd>'], ordered=False)\n+\n     def test_in_lookup_allows_F_expressions_and_expressions_for_integers(self):\n         # __in lookups can use F() expressions for integers.\n         queryset = Company.objects.filter(num_employees__in=([F('num_chairs') - 10]))\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..b9fb281 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -32,6 +32,8 @@ from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n \n+from django.test.utils import captured_stderr, captured_stdout\n+\n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n \n SYSTEM_CHECK_MSG = 'System check identified no issues'\n@@ -1867,7 +1869,40 @@ class ArgumentOrder(AdminScriptTestCase):\n         )\n \n \n-@override_settings(ROOT_URLCONF='admin_scripts.urls')\n+class ExecuteFromCommandLine(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_with_main(self):\n+        \"\"\"\n+        Program name '__main__.py' is handled and replaced with 'python -m django'.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['__main__.py'] + args):\n+                execute_from_command_line(['python -m django'] + args)\n+        self.assertIn('usage: python -m django shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_non_standard_sys_argv(self):\n+        \"\"\"\n+        Handle non-standard sys.argv[0] correctly.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['custom-prog'] + args)\n+        self.assertIn('usage: custom-prog shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n class StartProject(LiveServerTestCase, AdminScriptTestCase):\n \n     available_apps = [\n",
  "django__django-13670": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 6f0b13f..0d22545 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -1,3 +1,4 @@\n+\n from datetime import date, datetime\n \n from django.test import SimpleTestCase, override_settings\n@@ -145,8 +146,22 @@ class DateFormatTests(SimpleTestCase):\n \n         # Ticket #16924 -- We don't need timezone support to test this\n         self.assertEqual(dateformat.format(aware_dt, 'O'), '-0330')\n-\n-    def test_invalid_time_format_specifiers(self):\n+    def test_year_before_1000(self):\n+        tests = [\n+            (476, '76'),\n+            (42, '42'),\n+            (4, '04'),\n+            (999, '99'),\n+            (123, '23'),\n+            (11, '11'),\n+            (0, '00'),\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n         my_birthday = date(1984, 8, 7)\n \n         for specifier in ['a', 'A', 'f', 'g', 'G', 'h', 'H', 'i', 'P', 'r', 's', 'u']:\n@@ -164,4 +179,4 @@ class DateFormatTests(SimpleTestCase):\n             self.assertEqual(\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+            )\n",
  "django__django-13741": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex ca66cd5..ba90daf 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1020,7 +1020,9 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n-    def test_readonly_field_has_changed(self):\n+    def test_readonly_password_field_disabled(self):\n+        field = ReadOnlyPasswordHashField()\n+        self.assertIs(field.disabled, True)\n         field = ReadOnlyPasswordHashField()\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n \n",
  "django__django-13786": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3782589..90bf8e3 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -119,6 +119,51 @@ class OptimizerTests(SimpleTestCase):\n             ]\n         )\n \n+    def test_create_model_and_remove_multiple_model_options(self):\n+        \"\"\"\n+        Test that multiple options removal are correctly handled during squashing.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={\n+                        'verbose_name': 'My Model',\n+                        'verbose_name_plural': 'My Models',\n+                        'ordering': ['-pk'],\n+                    },\n+                ),\n+                migrations.AlterModelOptions('MyModel', options={'verbose_name': 'My Updated Model'}),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'verbose_name': 'My Updated Model'},\n+                ),\n+            ],\n+        )\n+\n+    def test_create_model_and_alter_to_empty_options(self):\n+        \"\"\"\n+        Test the scenario where AlterModelOptions is used to remove all options, \n+        ensuring that it results in a CreateModel with no options.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'verbose_name': 'My Model', 'ordering': ['-pk']},\n+                ),\n+                migrations.AlterModelOptions('MyModel', options={}),\n+            ],\n+            [\n+                migrations.CreateModel('MyModel', fields=[]),\n+            ],\n+        )\n+\n     def _test_create_alter_foo_delete_model(self, alter_foo):\n         \"\"\"\n         CreateModel, AlterModelTable, AlterUniqueTogether/AlterIndexTogether/\n@@ -134,6 +179,51 @@ class OptimizerTests(SimpleTestCase):\n             [],\n         )\n \n+    def test_create_model_and_remove_multiple_model_options(self):\n+        \"\"\"\n+        Test that multiple options removal are correctly handled during squashing.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={\n+                        'verbose_name': 'My Model',\n+                        'verbose_name_plural': 'My Models',\n+                        'ordering': ['-pk'],\n+                    },\n+                ),\n+                migrations.AlterModelOptions('MyModel', options={'verbose_name': 'My Updated Model'}),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'verbose_name': 'My Updated Model'},\n+                ),\n+            ],\n+        )\n+\n+    def test_create_model_and_alter_to_empty_options(self):\n+        \"\"\"\n+        Test the scenario where AlterModelOptions is used to remove all options, \n+        ensuring that it results in a CreateModel with no options.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'verbose_name': 'My Model', 'ordering': ['-pk']},\n+                ),\n+                migrations.AlterModelOptions('MyModel', options={}),\n+            ],\n+            [\n+                migrations.CreateModel('MyModel', fields=[]),\n+            ],\n+        )\n+\n     def test_create_alter_unique_delete_model(self):\n         self._test_create_alter_foo_delete_model(migrations.AlterUniqueTogether(\"Foo\", [[\"a\", \"b\"]]))\n \n",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..72d6d71 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,7 +1,9 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n from django.test import SimpleTestCase\n+from django.utils.translation import gettext_lazy, lazy\n \n from ..utils import setup\n \n",
  "django__django-13807": "diff --git a/tests/backends/tests.py b/tests/backends/tests.py\nindex 0aee2b6..8da8f63 100644\n--- a/tests/backends/tests.py\n+++ b/tests/backends/tests.py\n@@ -17,12 +17,18 @@ from django.test import (\n     TestCase, TransactionTestCase, override_settings, skipIfDBFeature,\n     skipUnlessDBFeature,\n )\n+from django.db import connection, IntegrityError, transaction\n+from django.test import TransactionTestCase\n+from .models import Reporter, SQLKeywordsModel\n \n from .models import (\n     Article, Object, ObjectReference, Person, Post, RawData, Reporter,\n     ReporterProxy, SchoolClass, Square,\n     VeryLongModelNameZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ,\n )\n+from django.db import connection, IntegrityError, transaction\n+from django.test import TransactionTestCase\n+from .models import Reporter, SQLKeywordsModel\n \n \n class DateQuotingTest(TestCase):\n@@ -626,6 +632,27 @@ class FkConstraintsTests(TransactionTestCase):\n             transaction.set_rollback(True)\n \n \n+class SQLKeywordsTest(TransactionTestCase):\n+\n+    available_apps = ['backends']\n+\n+    def test_check_constraints_sql_keywords(self):\n+        \"\"\"\n+        Test that table names that are SQL keywords are handled properly\n+        in constraint checks on SQLite.\n+        \"\"\"\n+        reporter = Reporter.objects.create(first_name=\"John\", last_name=\"Doe\")\n+        with transaction.atomic():\n+            obj = SQLKeywordsModel.objects.create(reporter=reporter)\n+            obj.refresh_from_db()\n+            obj.reporter_id = 30\n+            with connection.constraint_checks_disabled():\n+                obj.save()\n+                with self.assertRaises(IntegrityError):\n+                    connection.check_constraints(table_names=['order'])\n+            transaction.set_rollback(True)\n+\n+\n class ThreadTests(TransactionTestCase):\n \n     available_apps = ['backends']\n",
  "django__django-13809": "",
  "django__django-13810": "",
  "django__django-13820": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex 594c01e..d81bdee 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -1,3 +1,4 @@\n+\n import compileall\n import os\n \n@@ -6,6 +7,7 @@ from django.db.migrations.exceptions import (\n     AmbiguityError, InconsistentMigrationHistory, NodeNotFoundError,\n )\n from django.db.migrations.loader import MigrationLoader\n+from importlib import import_module\n from django.db.migrations.recorder import MigrationRecorder\n from django.test import TestCase, modify_settings, override_settings\n \n@@ -505,7 +507,32 @@ class LoaderTests(TestCase):\n     @override_settings(\n         MIGRATION_MODULES={'migrations': 'migrations.test_migrations_namespace_package'},\n     )\n-    def test_loading_namespace_package(self):\n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_no_file_attribute'})\n+    def test_loading_package_without_file_attribute(self):\n+        \"\"\"\n+        Test loading migrations from a package without the __file__ attribute,\n+        ensuring that migrations are correctly identified.\n+        \"\"\"\n+        test_module = import_module('migrations.test_migrations_no_file_attribute')\n+        loader = MigrationLoader(connection)\n+        module_file = test_module.__file__\n+        module_origin = test_module.__spec__.origin\n+        module_has_location = test_module.__spec__.has_location\n+        try:\n+            del test_module.__file__\n+            test_module.__spec__.origin = None\n+            test_module.__spec__.has_location = False\n+            loader.load_disk()\n+            migrations = [\n+                name\n+                for app, name in loader.disk_migrations\n+                if app == 'migrations'\n+            ]\n+            self.assertCountEqual(migrations, ['0001_initial', '0002_second'])\n+        finally:\n+            test_module.__file__ = module_file\n+            test_module.__spec__.origin = module_origin\n+            test_module.__spec__.has_location = module_has_location\n         \"\"\"Migration directories without an __init__.py file are ignored.\"\"\"\n         loader = MigrationLoader(connection)\n         loader.load_disk()\n",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..af54d9b 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -10,6 +10,9 @@ from unittest import mock\n from django.core.exceptions import ImproperlyConfigured\n from django.db import NotSupportedError, connection, transaction\n from django.db.models import Aggregate, Avg, CharField, StdDev, Sum, Variance\n+from unittest import mock\n+from django.core.exceptions import ImproperlyConfigured\n+from django.db.backends.sqlite3.base import dbapi2\n from django.db.utils import ConnectionHandler\n from django.test import (\n     TestCase, TransactionTestCase, override_settings, skipIfDBFeature,\n@@ -36,7 +39,21 @@ class Tests(TestCase):\n                 self.assertRaisesMessage(ImproperlyConfigured, msg):\n             check_sqlite_version()\n \n-    def test_aggregation(self):\n+    def test_check_sqlite_version_3_8_7(self):\n+        msg = 'SQLite 3.9.0 or later is required (found 3.8.7).'\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 8, 7)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.8.7'), \\\n+                self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            check_sqlite_version()\n+\n+    def test_check_sqlite_version_3_9_0(self):\n+        # This test should pass without raising an exception as the version is supported.\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 9, 0)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.9.0'):\n+            try:\n+                check_sqlite_version()\n+            except ImproperlyConfigured as e:\n+                self.fail(f\"check_sqlite_version() raised ImproperlyConfigured unexpectedly: {str(e)}\")\n         \"\"\"Raise NotSupportedError when aggregating on date/time fields.\"\"\"\n         for aggregate in (Sum, Avg, Variance, StdDev):\n             with self.assertRaises(NotSupportedError):\n",
  "django__django-13837": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 10ffa22..3b18644 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -172,6 +172,29 @@ class TestChildArguments(SimpleTestCase):\n             autoreload.get_child_arguments(),\n             [sys.executable, '-Werror', __file__, 'runserver']\n         )\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver']\n+        )\n+\n+    @mock.patch('sys.argv', ['directory/embedded_null_byte.py', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_directory(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'directory', 'runserver']\n+        )\n+\n+    @mock.patch('sys.argv', ['zipfile/embedded_null_byte.zip', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_zipfile(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'zipfile', 'runserver']\n+        )\n \n     @mock.patch('sys.warnoptions', [])\n     def test_exe_fallback(self):\n",
  "django__django-13925": "",
  "django__django-13933": "",
  "django__django-13964": "diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py\nindex 1078928..c062e2a 100644\n--- a/tests/many_to_one/models.py\n+++ b/tests/many_to_one/models.py\n@@ -63,6 +63,13 @@ class Third(models.Model):\n     third = models.ForeignKey('self', models.SET_NULL, null=True, related_name='child_set')\n \n \n+# Model for testing the issue with non-numeric primary keys\n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n+\n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n+\n class Parent(models.Model):\n     name = models.CharField(max_length=20, unique=True)\n     bestchild = models.ForeignKey('Child', models.SET_NULL, null=True, related_name='favored_by')\n",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..a90e834 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,5 +1,8 @@\n+\n from django.db import IntegrityError, transaction\n-from django.test import TestCase, skipIfDBFeature\n+from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from .fields import MyWrapper\n+from .models import CustomAutoFieldModel\n \n from .models import Bar, Business, Employee, Foo\n \n@@ -220,6 +223,16 @@ class CustomPKTests(TestCase):\n         self.assertEqual(f, new_foo),\n         self.assertEqual(f.bar, new_bar)\n \n+    def test_auto_field_subclass_create(self):\n+        obj = CustomAutoFieldModel.objects.create()\n+        self.assertIsInstance(obj.id, MyWrapper)\n+\n+    @skipUnlessDBFeature('can_return_rows_from_bulk_insert')\n+    def test_auto_field_subclass_bulk_create(self):\n+        obj = CustomAutoFieldModel()\n+        CustomAutoFieldModel.objects.bulk_create([obj])\n+        self.assertIsInstance(obj.id, MyWrapper)\n+\n     # SQLite lets objects be saved with an empty primary key, even though an\n     # integer is expected. So we can't check for an error being raised in that\n     # case for SQLite. Remove it from the suite for this next bit.\n",
  "django__django-14017": "",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..4f86dfd 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -205,6 +205,27 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yields_in_post_process(self):\n+        \"\"\"\n+        Ensure that no file is yielded more than once during post-processing.\n+        \"\"\"\n+        # Prepare the collectstatic command with necessary options\n+        collectstatic_args = {\n+            'clear': False,\n+            'dry_run': False,\n+            'post_process': True,\n+            'use_default_ignore_patterns': True,\n+            'ignore_patterns': ['*.ignoreme'],\n+        }\n+\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(**collectstatic_args)\n+        stats = collectstatic_cmd.collect()\n+\n+        # Assert that no file is yielded more than once\n+        post_processed_files = stats['post_processed']\n+        self.assertCountEqual(post_processed_files, set(post_processed_files))\n+\n     def test_css_import_case_insensitive(self):\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n         self.assertEqual(relpath, \"cached/styles_insensitive.3fa427592a53.css\")\n@@ -214,6 +235,27 @@ class TestHashedFiles:\n             self.assertIn(b\"other.d41d8cd98f00.css\", content)\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yields_in_post_process(self):\n+        \"\"\"\n+        Ensure that no file is yielded more than once during post-processing.\n+        \"\"\"\n+        # Prepare the collectstatic command with necessary options\n+        collectstatic_args = {\n+            'clear': False,\n+            'dry_run': False,\n+            'post_process': True,\n+            'use_default_ignore_patterns': True,\n+            'ignore_patterns': ['*.ignoreme'],\n+        }\n+\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(**collectstatic_args)\n+        stats = collectstatic_cmd.collect()\n+\n+        # Assert that no file is yielded more than once\n+        post_processed_files = stats['post_processed']\n+        self.assertCountEqual(post_processed_files, set(post_processed_files))\n+\n     @override_settings(\n         STATICFILES_DIRS=[os.path.join(TEST_ROOT, 'project', 'faulty')],\n         STATICFILES_FINDERS=['django.contrib.staticfiles.finders.FileSystemFinder'],\n",
  "django__django-14089": "",
  "django__django-14122": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 83089d9..50de846 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -1,9 +1,11 @@\n+\n from datetime import datetime\n from operator import attrgetter\n \n from django.db.models import (\n     CharField, DateTimeField, F, Max, OuterRef, Subquery, Value,\n )\n+from django.db.models import Count\n from django.db.models.functions import Upper\n from django.test import TestCase\n \n@@ -23,7 +25,17 @@ class OrderingTests(TestCase):\n         for i in range(2):\n             Author.objects.create()\n \n-    def test_default_ordering(self):\n+    def test_default_ordering_does_not_affect_group_by(self):\n+        \"\"\"\n+        Test that Meta.ordering fields are not incorrectly included in the GROUP BY clause.\n+        \"\"\"\n+        Article.objects.exclude(headline='Article 4').update(author=self.author_1)\n+        Article.objects.filter(headline='Article 4').update(author=self.author_2)\n+        articles = Article.objects.values('author').annotate(count=Count('author'))\n+        self.assertCountEqual(articles, [\n+            {'author': self.author_1.pk, 'count': 3},\n+            {'author': self.author_2.pk, 'count': 1},\n+        ])\n         \"\"\"\n         By default, Article.objects.all() orders by pub_date descending, then\n         headline ascending.\n@@ -483,4 +495,4 @@ class OrderingTests(TestCase):\n         )\n         ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n         articles = ChildArticle.objects.order_by('article_ptr')\n-        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n",
  "django__django-14140": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex c3db825..b605cd3 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -829,7 +829,7 @@ class BasicExpressionsTests(TestCase):\n         self.gmbh.point_of_contact = self.max\n         self.gmbh.save()\n         tests = [\n-            Exists(is_poc) & Q(),\n+            Exists(is_poc) & Q(),  # Ensure this doesn't raise an error\n             Q() & Exists(is_poc),\n             Exists(is_poc) | Q(),\n             Q() | Exists(is_poc),\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..5f3a977 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,5 +1,7 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n+from django.db import models\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n \n@@ -66,7 +68,27 @@ class TestDefaultPK(SimpleTestCase):\n             class Model(models.Model):\n                 pass\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -82,7 +104,27 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14311": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex b7e6f92..fd4f018 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -167,6 +167,24 @@ class TestChildArguments(SimpleTestCase):\n     @mock.patch.dict(sys.modules, {'__main__': django.__main__})\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main_module.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package_dotted_name(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', ['-m', 'foo.bar.baz', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_dotted_module_name(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'foo.bar.baz', 'runserver'],\n+        )\n     def test_run_as_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n@@ -176,6 +194,24 @@ class TestChildArguments(SimpleTestCase):\n     @mock.patch.dict(sys.modules, {'__main__': test_main})\n     @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main_module.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package_dotted_name(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', ['-m', 'foo.bar.baz', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_dotted_module_name(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'foo.bar.baz', 'runserver'],\n+        )\n     def test_run_as_non_django_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n@@ -191,6 +227,24 @@ class TestChildArguments(SimpleTestCase):\n         )\n \n     @mock.patch('sys.warnoptions', [])\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main_module.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package_dotted_name(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', ['-m', 'foo.bar.baz', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_dotted_module_name(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'foo.bar.baz', 'runserver'],\n+        )\n     def test_exe_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             exe_path = Path(tmpdir) / 'django-admin.exe'\n@@ -202,6 +256,24 @@ class TestChildArguments(SimpleTestCase):\n                 )\n \n     @mock.patch('sys.warnoptions', [])\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main_module.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package_dotted_name(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', ['-m', 'foo.bar.baz', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_dotted_module_name(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'foo.bar.baz', 'runserver'],\n+        )\n     def test_entrypoint_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             script_path = Path(tmpdir) / 'django-admin-script.py'\n",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..fdbe066 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -227,6 +227,13 @@ TEST_DATA = [\n     (URLValidator(), 56, ValidationError),\n     (URLValidator(), 'no_scheme', ValidationError),\n     # Trailing newlines not accepted\n+    # Newlines and tabs are not accepted.\n+    (URLValidator(), 'http://www.djangoproject.com/\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://www.django\\rproject.com/', ValidationError),\n+    (URLValidator(), 'http://[::\\rffff:192.9.5.5]', ValidationError),\n+    (URLValidator(), 'http://\\twww.djangoproject.com/', ValidationError),\n+    (URLValidator(), 'http://\\t[::ffff:192.9.5.5]', ValidationError),\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n     # Trailing junk does not take forever to reject\n",
  "django__django-14351": "diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\nindex 79963c3..265cf87 100644\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -1526,6 +1526,43 @@ class AggregationTests(TestCase):\n         DistinctAggregate('foo', distinct=True)\n \n \n+from django.db.models import Q, Count\n+from django.test import TestCase\n+from .models import Author, Book, PropertyGroup, ManagementAgent\n+\n+class SubqueryTestCase(TestCase):\n+    def setUp(self):\n+        # Create initial test data\n+        self.property_group_1 = PropertyGroup.objects.create(name=\"Group 1\")\n+        self.property_group_2 = PropertyGroup.objects.create(name=\"Group 2\")\n+        self.agent = ManagementAgent.objects.create(name=\"Agent 1\")\n+        self.agent.property_groups.set([self.property_group_1, self.property_group_2])\n+\n+    def test_q_object_or_with_id_in(self):\n+        # Test case for the working scenario\n+        property_groups = PropertyGroup.objects.all().values_list(\"id\", flat=True)\n+        queryset = ManagementAgent.objects.annotate(Count(\"property_groups\"))\n+        result = queryset.filter(\n+            Q(property_groups__id__in=property_groups) | Q(property_groups__count=0)\n+        ).distinct()\n+        self.assertTrue(result.exists())\n+\n+    def test_q_object_or_with_in(self):\n+        # Test case for the scenario that initially failed\n+        property_groups = PropertyGroup.objects.all()\n+        queryset = ManagementAgent.objects.annotate(Count(\"property_groups\"))\n+        result = queryset.filter(\n+            Q(property_groups__in=property_groups) | Q(property_groups__count=0)\n+        ).distinct()\n+        self.assertTrue(result.exists())\n+\n+    def test_having_subquery_select(self):\n+        authors = Author.objects.filter(pk=self.a1.pk)\n+        books = Book.objects.annotate(Count('authors')).filter(\n+            Q(authors__in=authors) | Q(authors__count__gt=2)\n+        )\n+        self.assertEqual(set(books), {self.b1, self.b4})\n+\n class JoinPromotionTests(TestCase):\n     def test_ticket_21150(self):\n         b = Bravo.objects.create()\n",
  "django__django-14373": "",
  "django__django-14376": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\nindex 643c2b6..128fb61 100644\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -38,7 +38,62 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n-    def test_options_override_settings_proper_values(self):\n+    def test_deprecated_kwargs_replacement(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        \n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+\n+        for keys in [('database', 'password'), ('db', 'passwd')]:\n+            with self.subTest(keys=keys):\n+                database, password = keys\n+                self.assertEqual(\n+                    self.settings_to_cmd_args_env({\n+                        'NAME': 'settingdbname',\n+                        'USER': 'settinguser',\n+                        'PASSWORD': 'settingpassword',\n+                        'HOST': 'settinghost',\n+                        'PORT': settings_port,\n+                        'OPTIONS': {\n+                            database: 'optiondbname',\n+                            'user': 'optionuser',\n+                            password: 'optionpassword',\n+                            'host': 'optionhost',\n+                            'port': options_port,\n+                        },\n+                    }),\n+                    (expected_args, expected_env),\n+                )\n+\n+    def test_options_non_deprecated_keys_preferred(self):\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=555',\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'db': 'deprecatedoptiondbname',\n+                    'password': 'optionpassword',\n+                    'passwd': 'deprecatedoptionpassword',\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n         settings_port = 444\n         options_port = 555\n         self.assertNotEqual(settings_port, options_port, 'test pre-req')\n",
  "django__django-14434": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex 39c82bf..82831ef 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -2198,6 +2198,22 @@ class SchemaTests(TransactionTestCase):\n             AuthorWithUniqueNameAndBirthday._meta.constraints = []\n             editor.remove_constraint(AuthorWithUniqueNameAndBirthday, constraint)\n \n+    def test_unique_constraint_references_column(self):\n+        # Test that a unique constraint correctly references the column.\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        constraint = UniqueConstraint(fields=['name'], name='name_uq')\n+        # Add constraint.\n+        with connection.schema_editor() as editor:\n+            editor.add_constraint(Author, constraint)\n+            sql = constraint.create_sql(Author, editor)\n+        table = Author._meta.db_table\n+        self.assertTrue(sql.references_column(table, 'name'))\n+        # Remove constraint.\n+        with connection.schema_editor() as editor:\n+            editor.remove_constraint(Author, constraint)\n+        self.assertNotIn(constraint.name, self.get_constraints(table))\n+\n     @skipUnlessDBFeature('supports_expression_indexes')\n     def test_func_unique_constraint(self):\n         with connection.schema_editor() as editor:\n",
  "django__django-14493": "diff --git a/tests/staticfiles_tests/storage.py b/tests/staticfiles_tests/storage.py\nindex dc966a1..ca30b4c 100644\n--- a/tests/staticfiles_tests/storage.py\n+++ b/tests/staticfiles_tests/storage.py\n@@ -92,8 +92,11 @@ class ExtraPatternsStorage(ManifestStaticFilesStorage):\n             ),\n         ),\n     )\n+from django.contrib.staticfiles.storage import ManifestStaticFilesStorage\n \n+class NoPostProcessReplacedPathStorage(ManifestStaticFilesStorage):\n+    max_post_process_passes = 0\n \n class NoneHashStorage(ManifestStaticFilesStorage):\n     def file_hash(self, name, content=None):\n-        return None\n+        return None\n",
  "django__django-14500": "",
  "django__django-14539": "",
  "django__django-14559": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex b579834..6336596 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -115,7 +115,35 @@ class BulkUpdateTests(TestCase):\n \n     pk_fields_error = 'bulk_update() cannot be used with primary key fields.'\n \n-    def test_update_primary_key(self):\n+from django.test import TestCase\n+\n+class BulkUpdateTests(TestCase):\n+\n+    def test_bulk_update_empty_list(self):\n+        rows_updated = Note.objects.bulk_update([], ['note'])\n+        self.assertEqual(rows_updated, 0, \"Expected 0 rows updated when bulk_update is called with an empty list.\")\n+\n+    def test_bulk_update_with_data(self):\n+        # Create 2000 Note instances\n+        Note.objects.bulk_create([\n+            Note(note=str(i), misc=str(i))\n+            for i in range(2000)\n+        ])\n+        notes = list(Note.objects.all())\n+        for note in notes:\n+            note.note = \"updated note\"\n+        \n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 2000, \"Expected 2000 rows to be updated.\")\n+\n+    def test_bulk_update_with_duplicates(self):\n+        note = Note.objects.create(note='test-note', misc='test')\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'])\n+        self.assertEqual(rows_updated, 1, \"Expected 1 row to be updated when bulk_update is called with duplicate objects.\")\n+\n+        # Duplicates in different batches.\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'], batch_size=1)\n+        self.assertEqual(rows_updated, 2, \"Expected 2 rows to be updated with duplicates in different batches.\")\n         with self.assertRaisesMessage(ValueError, self.pk_fields_error):\n             Note.objects.bulk_update([], ['id'])\n \n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..f50aecd 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -316,7 +316,23 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertTrue(formset.is_valid())\n         self.assertEqual([form.cleaned_data for form in formset.forms], [{'votes': 100, 'choice': 'Calexico'}, {}, {}])\n \n-    def test_formset_validate_max_flag(self):\n+    def test_formset_non_form_errors_css_class(self):\n+        \"\"\"\n+        Verify that non-form errors in FormSets include the 'nonform' CSS class.\n+        \"\"\"\n+        data = {\n+            'choices-TOTAL_FORMS': '3',\n+            'choices-INITIAL_FORMS': '0',\n+            'choices-MIN_NUM_FORMS': '0',\n+            'choices-MAX_NUM_FORMS': '0',\n+            'choices-0-choice': 'Duplicate',\n+            'choices-1-choice': 'Duplicate',\n+            'choices-2-choice': 'Duplicate',\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=1, max_num=2, validate_max=True)\n+        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        self.assertIn('nonform', str(formset.non_form_errors()))\n         \"\"\"\n         If validate_max is set and max_num is less than TOTAL_FORMS in the\n         data, a ValidationError is raised. MAX_NUM_FORMS in the data is\n",
  "django__django-14631": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex a48e4b6..82a6e99 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -2104,6 +2104,27 @@ Password: <input type=\"password\" name=\"password\" required></li>\n             hi_without_microsec = DateTimeField(initial=delayed_now, widget=HiddenInputWithoutMicrosec)\n             ti_without_microsec = DateTimeField(initial=delayed_now, widget=TextInputWithoutMicrosec)\n \n+    def test_clean_fields_access_boundfield(self):\n+        now = datetime.datetime(2006, 10, 25, 14, 30, 45, 123456)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now, disabled=True)\n+\n+        form = DateTimeForm({})\n+        form._clean_fields()\n+        bf = form['dt']\n+        self.assertEqual(form.cleaned_data['dt'], bf.initial)\n+\n+    def test_changed_data_uses_boundfield(self):\n+        now = datetime.datetime(2006, 10, 25, 14, 30, 45, 123456)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now, disabled=False)\n+\n+        form = DateTimeForm({'dt': '2006-10-25 14:30:46'})\n+        # Ensure form.changed_data uses BoundField's initial value\n+        self.assertEqual(form.changed_data, ['dt'])\n+\n         unbound = DateTimeForm()\n         self.assertEqual(unbound['auto_timestamp'].value(), now_no_ms)\n         self.assertEqual(unbound['auto_time_only'].value(), now_no_ms.time())\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..7b593fb 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -1,8 +1,54 @@\n from datetime import date, datetime, timedelta\n from operator import attrgetter\n \n-from django.db import IntegrityError\n+class ManyToManyRelTests(TestCase):\n+    def test_proxy_model_with_through_fields_list(self):\n+        class Parent(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class ProxyParent(Parent):\n+            class Meta:\n+                proxy = True\n+\n+        class Child(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE)\n+            many_to_many_field = models.ManyToManyField(\n+                to=Parent,\n+                through=\"ManyToManyModel\",\n+                through_fields=['child', 'parent'],\n+                related_name=\"something\"\n+            )\n+\n+        class ManyToManyModel(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')\n+            child = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')\n+            second_child = models.ForeignKey(Child, on_delete=models.CASCADE, null=True, default=None)\n+\n+        # No error should be raised if the issue is fixed.\n+        self.assertEqual(Child.check(), [])\n+\n+    def test_identity_hashable_with_through_fields(self):\n+        class Person(models.Model):\n+            name = models.CharField(max_length=100)\n+\n+        class Event(models.Model):\n+            participants = models.ManyToManyField(\n+                Person,\n+                through='Participation',\n+                through_fields=['event', 'person'],\n+            )\n+\n+        class Participation(models.Model):\n+            person = models.ForeignKey(Person, on_delete=models.CASCADE)\n+            event = models.ForeignKey(Event, on_delete=models.CASCADE)\n+\n+        # Testing if the hash is correctly computed for the through field relation\n+        m2m_rel = Event._meta.get_field('participants')\n+        self.assertTrue(isinstance(hash(m2m_rel), int))\n+\n+from django.db import IntegrityError, models\n from django.test import TestCase\n+from django.core.checks import Error\n \n from .models import (\n     CustomMembership, Employee, Event, Friendship, Group, Ingredient,\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..e988d8b 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,4 +1,6 @@\n+\n import json\n+import datetime\n from contextlib import contextmanager\n \n from django.contrib import admin\n@@ -7,7 +9,7 @@ from django.contrib.admin.views.autocomplete import AutocompleteJsonView\n from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n from django.core.exceptions import PermissionDenied\n-from django.http import Http404\n+from django.http import Http404, JsonResponse\n from django.test import RequestFactory, override_settings\n from django.urls import reverse, reverse_lazy\n \n",
  "django__django-14765": "",
  "django__django-14771": "",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..27478ff 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -199,6 +199,29 @@ class MethodDecoratorTests(SimpleTestCase):\n     \"\"\"\n     Tests for method_decorator\n     \"\"\"\n+    def test_wrapper_assignments(self):\n+        \"\"\"@method_decorator preserves wrapper assignments.\"\"\"\n+        func_name = None\n+        func_module = None\n+\n+        def decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_name, func_module\n+                func_name = getattr(func, '__name__', None)\n+                func_module = getattr(func, '__module__', None)\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(decorator)\n+            def method(self):\n+                return 'tests'\n+\n+        Test().method()\n+        self.assertEqual(func_name, 'method')\n+        self.assertIsNotNone(func_module)\n+\n     def test_preserve_signature(self):\n         class Test:\n             @simple_dec_m\n",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..f63037c 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5132,7 +5132,17 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         # Related ForeignKey object not registered in admin.\n         self.assertContains(response, '<div class=\"readonly\">Chapter 1</div>', html=True)\n \n-    def test_readonly_manytomany_backwards_ref(self):\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        \"\"\"\n+        Test ForeignKey readonly fields in the default admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('admin')\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test ForeignKey readonly fields in a custom admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('custom-admin')\n         \"\"\"\n         Regression test for #16433 - backwards references for related objects\n         broke if the related field is read-only due to the help_text attribute\n",
  "django__django-14915": "",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..9563db7 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -793,6 +793,56 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n \n+    def test_rename_model_with_db_table_noop_postgres(self):\n+        \"\"\"\n+        Test that RenameModel with db_table specified is a no-op in Postgres.\n+        \"\"\"\n+        app_label = 'test_rmwdbtn_pg'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        # Verify no SQL operations are performed\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n+    def test_rename_model_with_db_table_noop_sqlite(self):\n+        \"\"\"\n+        Test that RenameModel with db_table specified is a no-op in SQLite.\n+        \"\"\"\n+        app_label = 'test_rmwdbtn_sqlite'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        # Verify no SQL operations are performed\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n     def test_rename_m2m_target_model(self):\n         app_label = \"test_rename_m2m_target_model\"\n         project_state = self.apply_operations(app_label, ProjectState(), operations=[\n",
  "django__django-15022": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex e1920cd..15c0d05 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -144,8 +144,51 @@ class ChangeListTests(TestCase):\n         class GetListSelectRelatedAdmin(admin.ModelAdmin):\n             list_display = ('band', 'player')\n \n-            def get_list_select_related(self, request):\n-                return ('band', 'player')\n+from django.test import TestCase, RequestFactory\n+from django.contrib.auth.models import User\n+from django.contrib.admin.sites import AdminSite\n+from django.db import connection\n+from django.test.utils import CaptureQueriesContext\n+\n+...\n+class TestUnnecessaryJoins(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.superuser = User.objects.create_superuser('admin', 'admin@test.com', 'password')\n+        cls.factory = RequestFactory()\n+        cls.site = AdminSite()\n+\n+        # Creating test data\n+        parent = Parent.objects.create(name='John Smith')\n+        for i in range(5):\n+            Child.objects.create(parent=parent, name=f'Child {i}', age=i)\n+\n+    def test_excessive_joins_with_multiple_search_terms(self):\n+        parent_admin = ParentAdmin(Parent, self.site)\n+        request = self.factory.get('/parent/', data={SEARCH_VAR: 'Child 1'})\n+        request.user = self.superuser\n+        \n+        cl = parent_admin.get_changelist_instance(request)\n+        with CaptureQueriesContext(connection) as context:\n+            cl.queryset.count()\n+        \n+        # Verify that no excessive JOINs are present in the query\n+        # One join should be sufficient for the related `Child` model\n+        self.assertEqual(context.captured_queries[0]['sql'].count('JOIN'), 1)\n+\n+    def test_search_with_nonexistent_terms(self):\n+        parent_admin = ParentAdmin(Parent, self.site)\n+        request = self.factory.get('/parent/', data={SEARCH_VAR: 'Nonexistent Term'})\n+        request.user = self.superuser\n+        \n+        cl = parent_admin.get_changelist_instance(request)\n+        result_count = cl.queryset.count()\n+\n+        # Ensure that no results are returned and no extra joins are made\n+        self.assertEqual(result_count, 0)\n+        with CaptureQueriesContext(connection) as context:\n+            cl.queryset.count()\n+        self.assertEqual(context.captured_queries[0]['sql'].count('JOIN'), 0)\n \n         ia = GetListSelectRelatedAdmin(Invitation, custom_site)\n         request = self.factory.get('/invitation/')\n",
  "django__django-15037": "diff --git a/tests/inspectdb/tests.py b/tests/inspectdb/tests.py\nindex 19402bb..4b2c971 100644\n--- a/tests/inspectdb/tests.py\n+++ b/tests/inspectdb/tests.py\n@@ -204,7 +204,17 @@ class InspectDBTestCase(TestCase):\n             output,\n         )\n \n-    def test_digits_column_name_introspection(self):\n+    @skipUnlessDBFeature('can_introspect_foreign_keys')\n+    def test_foreign_key_to_specific_field_inspection(self):\n+        \"\"\"Test inspection of foreign keys to specific fields.\"\"\"\n+        out = StringIO()\n+        call_command('inspectdb', 'inspectdb_foreignkeytofield', stdout=out)\n+        output = out.getvalue()\n+        self.assertIn(\n+            \"to_field_fk = models.ForeignKey('InspectdbPeoplemoredata', \"\n+            \"models.CASCADE, to_field='people_unique')\",\n+            output\n+        )\n         \"\"\"Introspection of column names consist/start with digits (#16536/#17676)\"\"\"\n         char_field_type = connection.features.introspected_field_types['CharField']\n         out = StringIO()\n",
  "django__django-15103": "diff --git a/tests/template_tests/filter_tests/test_json_script.py b/tests/template_tests/filter_tests/test_json_script.py\nindex 607e24c..8284508 100644\n--- a/tests/template_tests/filter_tests/test_json_script.py\n+++ b/tests/template_tests/filter_tests/test_json_script.py\n@@ -1,5 +1,7 @@\n+\n from django.test import SimpleTestCase\n \n+from django.utils.html import json_script\n from ..utils import setup\n \n \n@@ -16,4 +18,4 @@ class JsonScriptTests(SimpleTestCase):\n             '<script id=\"test_id\" type=\"application/json\">'\n             '{\"a\": \"testing\\\\r\\\\njson \\'string\\\\\" \\\\u003Cb\\\\u003Eescaping\\\\u003C/b\\\\u003E\"}'\n             '</script>'\n-        )\n+        )\n",
  "django__django-15104": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 04452fa..0d87f8d 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2834,8 +2834,52 @@ class AutodetectorTests(TestCase):\n                     expected_number,\n                 )\n \n-\n-class MigrationSuggestNameTests(SimpleTestCase):\n+from django.db import models\n+from django.db.migrations.state import ModelState, ProjectState\n+from django.db.migrations.autodetector import MigrationAutodetector\n+from django.test import TestCase\n+\n+class MigrationAutodetectorTests(TestCase):\n+    def test_add_custom_fk_with_hardcoded_to(self):\n+        class HardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.Author'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']\n+                return name, path, args, kwargs\n+\n+        book_hardcoded_fk_to = ModelState('testapp', 'Book', [\n+            ('author', HardcodedForeignKey(on_delete=models.CASCADE)),\n+        ])\n+        changes = self.get_changes(\n+            [self.author_empty],\n+            [self.author_empty, book_hardcoded_fk_to],\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='Book')\n+\n+    def test_custom_fk_field_deconstruction(self):\n+        class CustomFKField(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.HardcodedModel'\n+                super().__init__(*args, **kwargs)\n+            \n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs[\"to\"]\n+                return name, path, args, kwargs\n+\n+        before = ProjectState()\n+        before.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after = ProjectState()\n+        after.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after.add_model(ModelState('testapp', 'TestModel', [('custom', CustomFKField(on_delete=models.CASCADE))]))\n+        changes = MigrationAutodetector(before, after)._detect_changes()\n+        self.assertEqual(len(changes['testapp']), 1)\n     def test_no_operations(self):\n         class Migration(migrations.Migration):\n             operations = []\n",
  "django__django-15127": "diff --git a/tests/messages_tests/base.py b/tests/messages_tests/base.py\nindex 85a7769..12506e9 100644\n--- a/tests/messages_tests/base.py\n+++ b/tests/messages_tests/base.py\n@@ -1,3 +1,4 @@\n+\n from django.contrib.messages import constants, get_level, set_level, utils\n from django.contrib.messages.api import MessageFailure\n from django.contrib.messages.constants import DEFAULT_LEVELS\n@@ -375,6 +376,37 @@ class BaseTests:\n         constants.ERROR: 'bad',\n         29: 'custom',\n     })\n+\n+    @override_settings_tags(MESSAGE_TAGS={\n+        constants.INFO: 'info',\n+        constants.DEBUG: 'low',\n+        constants.WARNING: 'warn',\n+        constants.ERROR: 'critical',\n+        15: 'custom_tag',\n+    })\n+    def test_override_settings_updates_level_tags(self):\n+        # Ensure that LEVEL_TAGS are updated to reflect the overridden settings\n+        self.assertEqual(base.LEVEL_TAGS[constants.INFO], 'info')\n+        self.assertEqual(base.LEVEL_TAGS[constants.DEBUG], 'low')\n+        self.assertEqual(base.LEVEL_TAGS[constants.WARNING], 'warn')\n+        self.assertEqual(base.LEVEL_TAGS[constants.ERROR], 'critical')\n+        self.assertEqual(base.LEVEL_TAGS[15], 'custom_tag')\n+\n+    def test_level_tag_after_override(self):\n+        # Test that messages get the correct level_tag after settings are overridden\n+        storage = self.get_storage()\n+        storage.level = 0\n+        add_level_messages(storage)\n+        with override_settings_tags(MESSAGE_TAGS={\n+            constants.INFO: 'info',\n+            constants.DEBUG: 'low',\n+            constants.WARNING: 'warn',\n+            constants.ERROR: 'critical',\n+            constants.SUCCESS: 'success',\n+            12: 'unique',\n+        }):\n+            tags = [msg.level_tag for msg in storage]\n+        self.assertEqual(tags, ['info', '', 'low', 'warn', 'critical', 'success', 'unique'])\n     def test_custom_tags(self):\n         storage = self.get_storage()\n         storage.level = 0\n",
  "django__django-15128": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex adde8a6..c1bcc9f 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2095,13 +2095,59 @@ class QuerySetBitwiseOperationTests(TestCase):\n         cls.room_3 = Classroom.objects.create(school=cls.school, has_blackboard=True, name='Room 3')\n         cls.room_4 = Classroom.objects.create(school=cls.school, has_blackboard=False, name='Room 4')\n \n-    @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n+    def test_conflicting_aliases_during_combine(self):\n+        from django.db.models import Q\n+        from queries.models import Foo, Bar, Baz, Qux\n+\n+        qux = Qux.objects.create()\n+        baz1 = Baz.objects.create()\n+        baz2 = Baz.objects.create()\n+        qux.bazes.add(baz1, baz2)\n+        \n+        foo1 = Foo.objects.create(qux=qux)\n+        foo2 = Foo.objects.create(qux=qux)\n+        \n+        bar1 = Bar.objects.create(foo=foo1, another_foo=foo2, baz=baz1)\n+        bar2 = Bar.objects.create(foo=foo2, another_foo=foo1, baz=baz2)\n+\n+        qs1 = qux.foos.all()\n+        qs2 = Foo.objects.filter(\n+            Q(bars__baz__in=qux.bazes.all()) | Q(other_bars__baz__in=qux.bazes.all())\n+        )\n+        \n+        # Assert both combinations do not raise an error and produce the same results\n+        self.assertCountEqual(qs1 | qs2, qs2 | qs1)\n+        # Assert the expected results are correct\n+        self.assertCountEqual(qs1 | qs2, [foo1, foo2])\n     def test_or_with_rhs_slice(self):\n         qs1 = Classroom.objects.filter(has_blackboard=True)\n         qs2 = Classroom.objects.filter(has_blackboard=False)[:1]\n         self.assertCountEqual(qs1 | qs2, [self.room_1, self.room_2, self.room_3])\n \n-    @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n+    def test_conflicting_aliases_during_combine(self):\n+        from django.db.models import Q\n+        from queries.models import Foo, Bar, Baz, Qux\n+\n+        qux = Qux.objects.create()\n+        baz1 = Baz.objects.create()\n+        baz2 = Baz.objects.create()\n+        qux.bazes.add(baz1, baz2)\n+        \n+        foo1 = Foo.objects.create(qux=qux)\n+        foo2 = Foo.objects.create(qux=qux)\n+        \n+        bar1 = Bar.objects.create(foo=foo1, another_foo=foo2, baz=baz1)\n+        bar2 = Bar.objects.create(foo=foo2, another_foo=foo1, baz=baz2)\n+\n+        qs1 = qux.foos.all()\n+        qs2 = Foo.objects.filter(\n+            Q(bars__baz__in=qux.bazes.all()) | Q(other_bars__baz__in=qux.bazes.all())\n+        )\n+        \n+        # Assert both combinations do not raise an error and produce the same results\n+        self.assertCountEqual(qs1 | qs2, qs2 | qs1)\n+        # Assert the expected results are correct\n+        self.assertCountEqual(qs1 | qs2, [foo1, foo2])\n     def test_or_with_lhs_slice(self):\n         qs1 = Classroom.objects.filter(has_blackboard=True)[:1]\n         qs2 = Classroom.objects.filter(has_blackboard=False)\n",
  "django__django-15161": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 5fdccc5..e00ac68 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1760,6 +1760,35 @@ class ValueTests(TestCase):\n         UUID.objects.update(uuid=Value(uuid.UUID('12345678901234567890123456789012'), output_field=UUIDField()))\n         self.assertEqual(UUID.objects.get().uuid, uuid.UUID('12345678901234567890123456789012'))\n \n+    def test_deconstruct_func(self):\n+        func = Func(F('field'), function='ABS')\n+        path, args, kwargs = func.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Func')\n+        self.assertEqual(args, (F('field'),))\n+        self.assertEqual(kwargs, {'function': 'ABS'})\n+\n+    def test_deconstruct_case(self):\n+        case = Case(When(condition=Value(True), then=Value('X')), default=Value('Y'))\n+        path, args, kwargs = case.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Case')\n+        self.assertEqual(len(args), 0)\n+        self.assertEqual(len(kwargs), 2)\n+        self.assertTrue(isinstance(kwargs['default'], Value))\n+\n+    def test_deconstruct_expression_wrapper(self):\n+        wrapper = ExpressionWrapper(F('field'), output_field=IntegerField())\n+        path, args, kwargs = wrapper.deconstruct()\n+        self.assertEqual(path, 'django.db.models.ExpressionWrapper')\n+        self.assertEqual(args, (F('field'),))\n+        self.assertEqual(kwargs, {'output_field': IntegerField()})\n+\n+    def test_deconstruct_order_by(self):\n+        order_by = OrderBy(F('field').desc())\n+        path, args, kwargs = order_by.deconstruct()\n+        self.assertEqual(path, 'django.db.models.OrderBy')\n+        self.assertEqual(args, (F('field').desc(),))\n+        self.assertEqual(kwargs, {})\n+\n     def test_deconstruct(self):\n         value = Value('name')\n         path, args, kwargs = value.deconstruct()\n",
  "django__django-15268": "",
  "django__django-15277": "",
  "django__django-15278": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex dd02aee..f75c821 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -618,7 +618,34 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor:\n             editor.add_field(Author, new_field)\n         # Ensure the field is there\n-        columns = self.column_classes(Author)\n+class Author(Model):\n+    id = IntegerField(primary_key=True)\n+\n+class Note(Model):\n+    id = IntegerField(primary_key=True)\n+\n+def column_classes(model):\n+    with connection.cursor() as cursor:\n+        cursor.execute(f\"PRAGMA table_info({model._meta.db_table})\")\n+        return {row[1]: (row[2], row) for row in cursor.fetchall()}\n+\n+    def test_add_field_o2o_nullable(self):\n+        \"\"\"\n+        Test adding a nullable OneToOneField does not crash on SQLite.\n+        \"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        \n+        new_field = OneToOneField(Note, CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n+\n+        columns = column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        self.assertTrue(columns['note_id'][1][3])  # Check if the field is nullable\n         field_type, field_info = columns['thing']\n         self.assertEqual(field_type, connection.features.introspected_field_types['IntegerField'])\n         # Make sure the values were transformed correctly\n@@ -636,7 +663,34 @@ class SchemaTests(TransactionTestCase):\n         new_field.set_attributes_from_name(\"bits\")\n         with connection.schema_editor() as editor:\n             editor.add_field(Author, new_field)\n-        columns = self.column_classes(Author)\n+class Author(Model):\n+    id = IntegerField(primary_key=True)\n+\n+class Note(Model):\n+    id = IntegerField(primary_key=True)\n+\n+def column_classes(model):\n+    with connection.cursor() as cursor:\n+        cursor.execute(f\"PRAGMA table_info({model._meta.db_table})\")\n+        return {row[1]: (row[2], row) for row in cursor.fetchall()}\n+\n+    def test_add_field_o2o_nullable(self):\n+        \"\"\"\n+        Test adding a nullable OneToOneField does not crash on SQLite.\n+        \"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        \n+        new_field = OneToOneField(Note, CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n+\n+        columns = column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        self.assertTrue(columns['note_id'][1][3])  # Check if the field is nullable\n         # MySQL annoyingly uses the same backend, so it'll come back as one of\n         # these two types.\n         self.assertIn(columns['bits'][0], (\"BinaryField\", \"TextField\"))\n",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..4d34400 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -97,7 +97,24 @@ class BasicFieldTests(SimpleTestCase):\n         field._get_default\n         pickle.dumps(field)\n \n-    def test_deconstruct_nested_field(self):\n+    def test_hash_immutability(self):\n+        field = models.IntegerField()\n+        field_hash = hash(field)\n+\n+        class MyModel(models.Model):\n+            rank = field\n+\n+        self.assertEqual(field_hash, hash(field))\n+\n+        # Test with reassignment to a new model\n+        class AnotherModel(models.Model):\n+            level = field\n+\n+        self.assertEqual(field_hash, hash(field))\n+\n+        # Test putting the field in a dictionary\n+        field_dict = {field: 'value'}\n+        self.assertIn(field, field_dict)\n         \"\"\"deconstruct() uses __qualname__ for nested class support.\"\"\"\n         name, path, args, kwargs = Nested.Field().deconstruct()\n         self.assertEqual(path, 'model_fields.tests.Nested.Field')\n",
  "django__django-15368": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex 447c150..425c3fd 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -204,6 +204,31 @@ class BulkUpdateTests(TestCase):\n             [cat.special_name for cat in special_categories]\n         )\n \n+from django.db.models import F\n+from .models import Note, SelfRef\n+\n+class BulkUpdateTests(TestCase):\n+    def test_f_expression(self):\n+        notes = [\n+            Note.objects.create(note='test_note', misc='test_misc')\n+            for _ in range(10)\n+        ]\n+        for note in notes:\n+            note.misc = F('note')\n+        Note.objects.bulk_update(notes, ['misc'])\n+        self.assertCountEqual(Note.objects.filter(misc='test_note'), notes)\n+\n+    def test_f_expression_with_selfref(self):\n+        # Creating instances of SelfRef\n+        objs = [\n+            SelfRef.objects.create(c8='', name='name_value')\n+            for _ in range(10)\n+        ]\n+        for obj in objs:\n+            obj.c8 = F('name')\n+        SelfRef.objects.bulk_update(objs, ['c8'])\n+        self.assertCountEqual(SelfRef.objects.filter(c8='name_value'), objs)\n+\n     def test_field_references(self):\n         numbers = [Number.objects.create(num=0) for _ in range(10)]\n         for number in numbers:\n",
  "django__django-15380": "",
  "django__django-15382": "",
  "django__django-15467": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex f5af59b..90a9369 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -141,7 +141,18 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n         )\n         self.assertIsNone(ff.empty_label)\n \n-    def test_many_to_many(self):\n+    def test_radio_fields_foreignkey_respects_empty_label(self):\n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {\"parent\": admin.VERTICAL}\n+\n+            def formfield_for_foreignkey(self, db_field, request=None, **kwargs):\n+                if db_field.name == 'parent':\n+                    kwargs['empty_label'] = \"I WANT TO SET MY OWN EMPTY LABEL\"\n+                return super().formfield_for_foreignkey(db_field, request, **kwargs)\n+\n+        ma = MyModelAdmin(Inventory, admin.site)\n+        ff = ma.formfield_for_dbfield(Inventory._meta.get_field(\"parent\"), request=None)\n+        self.assertEqual(ff.empty_label, \"I WANT TO SET MY OWN EMPTY LABEL\")\n         self.assertFormfield(Band, \"members\", forms.SelectMultiple)\n \n     def test_raw_id_many_to_many(self):\n",
  "django__django-15499": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 5df1b06..c4324d8 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -129,6 +129,56 @@ class OptimizerTests(SimpleTestCase):\n             ],\n         )\n \n+    def test_create_with_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\", fields=[], managers=[(\"objects\", models.Manager())]\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Bar\",\n+                    managers=[\n+                        (\"objects\", models.Manager()),\n+                        (\"extras\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    managers=[\n+                        (\"objects\", models.Manager()),\n+                        (\"extras\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n+    def test_create_and_alter_different_model(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\", fields=[], managers=[(\"default\", models.Manager())]\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Qux\",\n+                    managers=[(\"custom\", models.Manager())],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\",\n+                    fields=[],\n+                    managers=[(\"default\", models.Manager())],\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Qux\",\n+                    managers=[(\"custom\", models.Manager())],\n+                ),\n+            ],\n+        )\n+\n     def test_create_model_and_remove_model_options(self):\n         self.assertOptimizesTo(\n             [\n@@ -141,6 +191,56 @@ class OptimizerTests(SimpleTestCase):\n             ],\n             [migrations.CreateModel(\"MyModel\", fields=[])],\n         )\n+\n+    def test_create_with_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\", fields=[], managers=[(\"objects\", models.Manager())]\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Bar\",\n+                    managers=[\n+                        (\"objects\", models.Manager()),\n+                        (\"extras\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    managers=[\n+                        (\"objects\", models.Manager()),\n+                        (\"extras\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n+    def test_create_and_alter_different_model(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\", fields=[], managers=[(\"default\", models.Manager())]\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Qux\",\n+                    managers=[(\"custom\", models.Manager())],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\",\n+                    fields=[],\n+                    managers=[(\"default\", models.Manager())],\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Qux\",\n+                    managers=[(\"custom\", models.Manager())],\n+                ),\n+            ],\n+        )\n         self.assertOptimizesTo(\n             [\n                 migrations.CreateModel(\n",
  "django__django-15525": "",
  "django__django-15561": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex b8137da..8007458 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -3961,7 +3961,21 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             editor.alter_field(Book, new_field, old_field, strict=True)\n \n-    def test_add_textfield_unhashable_default(self):\n+    def test_alter_field_choices_noop_with_different_choices(self):\n+        # Create the table\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        # Initial field with choices\n+        old_field = Author._meta.get_field(\"name\")\n+        new_field = CharField(\n+            choices=((\"Alice\", \"Alice\"), (\"Bob\", \"Bob\")),\n+            max_length=255,\n+        )\n+        new_field.set_attributes_from_name(\"name\")\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, new_field, old_field, strict=True)\n         # Create the table\n         with connection.schema_editor() as editor:\n             editor.create_model(Author)\n",
  "django__django-15569": "diff --git a/tests/custom_lookups/tests.py b/tests/custom_lookups/tests.py\nindex 74c331a..d2ba119 100644\n--- a/tests/custom_lookups/tests.py\n+++ b/tests/custom_lookups/tests.py\n@@ -312,7 +312,16 @@ class LookupTests(TestCase):\n         with register_lookup(models.Field, Exactly):\n             self.assertIsNone(field.get_lookup(\"exactly\"))\n \n-    def test_lookups_caching(self):\n+    def test_lookup_unregister_clears_cache(self):\n+        field = Article._meta.get_field(\"author\")\n+\n+        # Register a lookup and ensure it's in the cache\n+        with register_lookup(models.ForeignObject, Exactly):\n+            self.assertIn(\"exactly\", field.get_lookups())\n+\n+        # Unregister the lookup and ensure it's cleared from the cache\n+        models.ForeignObject._unregister_lookup(Exactly)\n+        self.assertNotIn(\"exactly\", field.get_lookups())\n         field = Article._meta.get_field(\"author\")\n \n         # clear and re-cache\n",
  "django__django-15572": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 188dca4..be45e3b 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -76,7 +76,35 @@ class TemplateReloadTests(SimpleTestCase):\n             },\n         )\n \n-    @mock.patch(\"django.template.loaders.base.Loader.reset\")\n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"DIRS\": [\"\", str(ROOT) + \"/valid_dir\"],\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            }\n+        ]\n+    )\n+    def test_template_dirs_ignore_empty_and_include_valid_path(self):\n+        self.assertSetEqual(\n+            autoreload.get_template_directories(),\n+            {\n+                ROOT / \"valid_dir\",\n+            },\n+        )\n+\n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"DIRS\": [],\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            }\n+        ]\n+    )\n+    def test_template_dirs_with_no_dirs(self):\n+        self.assertSetEqual(\n+            autoreload.get_template_directories(),\n+            set(),\n+        )\n     def test_reset_all_loaders(self, mock_reset):\n         autoreload.reset_loaders()\n         self.assertEqual(mock_reset.call_count, 2)\n",
  "django__django-15731": "",
  "django__django-15741": "diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex c6dbc53..c19d0a2 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -1,6 +1,9 @@\n+\n from datetime import datetime, time\n \n from django.template.defaultfilters import date\n+from django.utils.formats import get_format\n+from django.utils.translation import gettext_lazy\n from django.test import SimpleTestCase\n from django.utils import timezone, translation\n \n@@ -74,6 +77,18 @@ class DateTests(TimezoneTestCase):\n \n \n class FunctionTests(SimpleTestCase):\n+    def test_get_format_lazy_date_format(self):\n+        # Test with lazy DATE_FORMAT\n+        self.assertEqual(get_format(gettext_lazy(\"DATE_FORMAT\")), \"N j, Y\")\n+\n+    def test_get_format_lazy_time_format(self):\n+        # Test with lazy TIME_FORMAT\n+        self.assertEqual(get_format(gettext_lazy(\"TIME_FORMAT\")), \"P\")\n+\n+    def test_get_format_lazy_datetime_format(self):\n+        # Test with lazy DATETIME_FORMAT\n+        self.assertEqual(get_format(gettext_lazy(\"DATETIME_FORMAT\")), \"N j, Y, P\")\n+\n     def test_date(self):\n         self.assertEqual(date(datetime(2005, 12, 29), \"d F Y\"), \"29 December 2005\")\n \n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..533a597 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -398,6 +398,20 @@ class ProxyModelTests(TestCase):\n     def test_eq(self):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n+    def test_select_related_only_on_proxy_model(self):\n+        # Setting up the test data\n+        custom_model_instance = CustomModel.objects.create(name=\"Test Name\")\n+        proxy_instance = ProxyCustomModel.objects.get(pk=custom_model_instance.pk)\n+        another_model_instance = AnotherModel.objects.create(custom=proxy_instance)\n+\n+        # Performing the test: select_related() followed by only() on a proxy model\n+        queryset = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        result_instance = queryset.get()\n+\n+        # Asserting the result\n+        self.assertEqual(result_instance, another_model_instance)\n+        self.assertEqual(result_instance.custom.name, \"Test Name\")\n+\n \n @override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n class ProxyModelAdminTests(TestCase):\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..6853b8f 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -157,7 +157,17 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n-    @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n+    def test_parameters_reordered(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None)\n+        )\n+\n+    def test_parameters_with_multiple_options(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\", \"-U\", \"user\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"-U\", \"user\", \"dbname\"], None)\n+        )\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n \n",
  "django__django-15863": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 08f08e1..0c161f6 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -73,8 +73,33 @@ class FunctionTests(SimpleTestCase):\n         self.assertEqual(floatformat(1.5e-15, 20), \"0.00000000000000150000\")\n         self.assertEqual(floatformat(1.5e-15, -20), \"0.00000000000000150000\")\n         self.assertEqual(floatformat(1.00000000000000015, 16), \"1.0000000000000002\")\n-\n-    def test_force_grouping(self):\n+    def test_decimal_precision(self):\n+        # Original test patch\n+        self.assertEqual(\n+            floatformat(Decimal(\"123456.123456789012345678901\"), 21),\n+            \"123456.123456789012345678901\",\n+        )\n+        # Additional test cases\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.12345678901234567890\"), 20),\n+            \"42.12345678901234567890\",\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"0.000000000000000000123456789\"), 27),\n+            \"0.000000000000000000123456789\",\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"-42.12345678901234567890\"), 20),\n+            \"-42.12345678901234567890\",\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"1.00000000000000000000\"), 20),\n+            \"1.00000000000000000000\",\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"1.10000000000000000000\"), 20),\n+            \"1.10000000000000000000\",\n+        )\n         with translation.override(\"en\"):\n             self.assertEqual(floatformat(10000, \"g\"), \"10,000\")\n             self.assertEqual(floatformat(66666.666, \"1g\"), \"66,666.7\")\n",
  "django__django-15930": "diff --git a/tests/expressions_case/tests.py b/tests/expressions_case/tests.py\nindex 696f4d0..0248f49 100644\n--- a/tests/expressions_case/tests.py\n+++ b/tests/expressions_case/tests.py\n@@ -415,7 +415,25 @@ class CaseExpressionTests(TestCase):\n         self.assertEqual(len(objects), CaseTestModel.objects.count())\n         self.assertTrue(all(obj.selected == \"not selected\" for obj in objects))\n \n-    def test_combined_expression(self):\n+    def test_annotate_with_full_when(self):\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+            )\n+        )\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n+\n+    def test_annotate_with_negated_condition(self):\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+            )\n+        )\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n         self.assertQuerysetEqual(\n             CaseTestModel.objects.annotate(\n                 test=Case(\n",
  "django__django-15987": "",
  "django__django-16032": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex bcf8df9..1770a1d 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -989,6 +989,54 @@ class NonAggregateAnnotationTestCase(TestCase):\n             publisher_books_qs, [{\"name\": \"Sams\"}, {\"name\": \"Morgan Kaufmann\"}]\n         )\n \n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        self.assertCountEqual(\n+            publisher_books_qs,\n+            [\n+                {'name': 'Apress'},\n+                {'name': 'Sams'},\n+                {'name': 'Prentice Hall'},\n+                {'name': 'Morgan Kaufmann'}\n+            ]\n+        )\n+        \n+    def test_annotation_and_alias_related_filter_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        self.assertCountEqual(\n+            publisher_books_qs,\n+            [\n+                {'name': 'Apress'},\n+                {'name': 'Sams'},\n+                {'name': 'Prentice Hall'},\n+                {'name': 'Morgan Kaufmann'}\n+            ]\n+        )\n+\n     def test_annotation_exists_aggregate_values_chaining(self):\n         qs = (\n             Book.objects.values(\"publisher\")\n",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..07a75a7 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2415,8 +2415,21 @@ class CombinedExpressionTests(SimpleTestCase):\n             (DecimalField, IntegerField, DecimalField),\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n+            (DecimalField, DecimalField, DecimalField),\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        connectors = [Combinable.MOD]\n+        for lhs, rhs, combined in tests:\n+            for connector in connectors:\n+                with self.subTest(\n+                    lhs=lhs, connector=connector, rhs=rhs, combined=combined\n+                ):\n+                    expr = CombinedExpression(\n+                        Expression(lhs()),\n+                        connector,\n+                        Expression(rhs()),\n+                    )\n+                    self.assertIsInstance(expr.output_field, combined)\n+        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV, Combinable.MOD]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..dc19edc 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib import admin\n@@ -21,7 +22,9 @@ from django.db.models import F, Field, IntegerField\n from django.db.models.functions import Upper\n from django.db.models.lookups import Contains, Exact\n from django.template import Context, Template, TemplateSyntaxError\n-from django.test import TestCase, override_settings\n+from unittest import mock\n+from django.db import DatabaseError, connection, models\n+from django.test import TestCase, override_settings, skipUnlessDBFeature\n from django.test.client import RequestFactory\n from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup\n from django.urls import reverse\n",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..b4a7be7 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2400,7 +2400,20 @@ class MakeMigrationsTests(MigrationTestBase):\n         ):\n             call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n \n-    def test_makemigrations_migration_path_output(self):\n+    def test_makemigrations_check_no_creations(self):\n+        \"\"\"\n+        makemigrations --check should exit with a non-zero status when\n+        there are changes to an app requiring migrations and should not\n+        create any migration files.\n+        \"\"\"\n+        with self.temporary_migration_module() as tmpdir:\n+            # Ensure the directory does not exist before running the command.\n+            self.assertFalse(os.path.exists(tmpdir))\n+            with self.assertRaises(SystemExit):\n+                call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+            # Check again that the directory still does not exist,\n+            # meaning no migrations were created.\n+            self.assertFalse(os.path.exists(tmpdir))\n         \"\"\"\n         makemigrations should print the relative paths to the migrations unless\n         they are outside of the current tree, in which case the absolute path\n",
  "django__django-16136": "diff --git a/tests/async/tests.py b/tests/async/tests.py\nindex 72e103e..af28d1b 100644\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -1,3 +1,4 @@\n+\n import asyncio\n import os\n from unittest import mock\n@@ -6,8 +7,9 @@ from asgiref.sync import async_to_sync\n \n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n-from django.http import HttpResponse\n-from django.test import SimpleTestCase\n+from django.http import HttpResponse, HttpResponseNotAllowed\n+from django.test import SimpleTestCase, RequestFactory\n+import asyncio\n from django.utils.asyncio import async_unsafe\n from django.views.generic.base import View\n \n@@ -15,6 +17,28 @@ from .models import SimpleModel\n \n \n class CacheTest(SimpleTestCase):\n+    def test_http_method_not_allowed_async(self):\n+        \"\"\"\n+        Test that HttpResponseNotAllowed works correctly with async views.\n+        \"\"\"\n+\n+        class AsyncDemoView(View):\n+            async def post(self, request):\n+                return HttpResponse(\"ok\")\n+\n+        request_factory = RequestFactory()\n+        instance = AsyncDemoView()\n+        response = instance.http_method_not_allowed(request_factory.get(\"/\"))\n+        \n+        # Check if the response is a coroutine\n+        self.assertTrue(asyncio.iscoroutine(response), \"Response should be a coroutine\")\n+\n+        # Run the coroutine to get actual HttpResponseNotAllowed instance\n+        response = asyncio.run(response)\n+        \n+        # Assert that the response is an instance of HttpResponseNotAllowed\n+        self.assertIsInstance(response, HttpResponseNotAllowed)\n+        \n     def test_caches_local(self):\n         @async_to_sync\n         async def async_cache():\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..5690075 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -884,6 +885,26 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # original hashed password contains $\n         self.assertIn(\"$\", form.cleaned_data[\"password\"])\n \n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n     def test_bug_19349_bound_password_field(self):\n         user = User.objects.get(username=\"testclient\")\n         form = UserChangeForm(data={}, instance=user)\n",
  "django__django-16145": "",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..114e82a 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -507,6 +507,34 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n+from django.test import TestCase, Client\n+from django.urls import path\n+from django.contrib.sitemaps import Sitemap\n+from django.contrib.sitemaps.views import index\n+\n+class CallableLastmodNoItemsSitemap(Sitemap):\n+    location = \"/location/\"\n+\n+    def items(self):\n+        return []\n+\n+    def lastmod(self, obj):\n+        return obj.lastmod\n+\n+class SitemapTests(TestCase):\n+    def setUp(self):\n+        self.client = Client()\n+\n+    def test_callable_lastmod_no_items(self):\n+        # Test the sitemap when there are no items, but a callable lastmod is defined\n+        response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", response)\n+        expected_content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\n+        </sitemapindex>\n+        \"\"\"\n+        self.assertXMLEqual(response.content.decode(), expected_content)\n \n # RemovedInDjango50Warning\n class DeprecatedTests(SitemapTestsBase):\n",
  "django__django-16315": "diff --git a/tests/bulk_create/models.py b/tests/bulk_create/models.py\nindex c5f5c07..7e99864 100644\n--- a/tests/bulk_create/models.py\n+++ b/tests/bulk_create/models.py\n@@ -59,6 +59,10 @@ class Pizzeria(Restaurant):\n     pass\n \n \n+class FieldsWithDbColumns(models.Model):\n+    rank = models.IntegerField(unique=True, db_column=\"rAnK\")\n+    name = models.CharField(max_length=15, null=True, db_column=\"oTheRNaMe\")\n+\n class State(models.Model):\n     two_letter_code = models.CharField(max_length=2, primary_key=True)\n \n",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..1f7401d 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n import urllib.parse\n@@ -15,6 +16,7 @@ from django.contrib.auth.forms import (\n     UserCreationForm,\n )\n from django.contrib.auth.models import User\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n from django.contrib.auth.signals import user_login_failed\n from django.contrib.sites.models import Site\n from django.core import mail\n",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..971c21f 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.test import TestCase\n@@ -160,6 +161,13 @@ class TimesinceTests(TestCase):\n         self.assertEqual(timesince(t + self.oneday, now), \"0\\xa0minutes\")\n         self.assertEqual(timeuntil(t - self.oneday, now), \"0\\xa0minutes\")\n \n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_long_interval_with_tz(self):\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=31)\n+        self.assertEqual(timesince(d, now), \"1\\xa0month\")\n+\n     def test_naive_datetime_with_tzinfo_attribute(self):\n         class naive(datetime.tzinfo):\n             def utcoffset(self, dt):\n@@ -167,6 +175,29 @@ class TimesinceTests(TestCase):\n \n         future = datetime.datetime(2080, 1, 1, tzinfo=naive())\n         self.assertEqual(timesince(future), \"0\\xa0minutes\")\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_timesince_with_aware_and_naive(self):\n+        aware_now = timezone.now()\n+        naive_past = aware_now.replace(tzinfo=None)\n+        with self.assertRaises(TypeError):\n+            timesince(naive_past, aware_now)\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_timesince_with_naive_and_aware(self):\n+        aware_past = timezone.make_aware(self.t, timezone.get_default_timezone())\n+        naive_now = datetime.datetime.now()\n+        with self.assertRaises(TypeError):\n+            timesince(aware_past, naive_now)\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_timesince_aware_datetimes(self):\n+        aware_now = timezone.now()\n+        aware_past = aware_now - datetime.timedelta(days=45)\n+        self.assertEqual(timesince(aware_past, aware_now), \"1\\xa0month, 2\\xa0weeks\")\n         past = datetime.datetime(1980, 1, 1, tzinfo=naive())\n         self.assertEqual(timeuntil(past), \"0\\xa0minutes\")\n \n",
  "django__django-16454": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 8d0729b..8a5fbea 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -470,7 +470,35 @@ class CommandRunTests(AdminScriptTestCase):\n \n \n class UtilsTests(SimpleTestCase):\n-    def test_no_existent_external_program(self):\n+    def test_subparser_missing_argument_error_formatting(self):\n+        # Simulate calling the management command with a missing subparser argument\n+        out = StringIO()\n+        err = StringIO()\n+        \n+        try:\n+            call_command('subparser', 'foo', stdout=out, stderr=err)\n+        except CommandError:\n+            pass\n+        \n+        # Check that the error output is correctly formatted\n+        err_lines = err.getvalue().splitlines()\n+        self.assertEqual(len(err_lines), 2)\n+        self.assertIn(\"manage.py subparser foo: error: the following arguments are required: bar\", err_lines[1])\n+\n+    def test_subparser_invalid_type_error_formatting(self):\n+        # Test for invalid type error in subparser argument\n+        out = StringIO()\n+        err = StringIO()\n+        \n+        try:\n+            call_command('subparser', 'foo', 'not_an_int', stdout=out, stderr=err)\n+        except CommandError:\n+            pass\n+        \n+        # Check that the error output is correctly formatted\n+        err_lines = err.getvalue().splitlines()\n+        self.assertEqual(len(err_lines), 2)\n+        self.assertIn(\"manage.py subparser foo: error: argument bar: invalid int value: 'not_an_int'\", err_lines[1])\n         msg = \"Error executing a_42_command_that_doesnt_exist_42\"\n         with self.assertRaisesMessage(CommandError, msg):\n             popen_wrapper([\"a_42_command_that_doesnt_exist_42\"])\n",
  "django__django-16485": "",
  "django__django-16493": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex 20567e7..c1e7d61 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -1018,8 +1018,15 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         storage = kwargs[\"storage\"]\n         self.assertIs(storage, callable_storage)\n \n-\n-# Tests for a race condition on file saving (#4948).\n+    def test_deconstruction_callable_default_storage(self):\n+        \"\"\"\n+        A callable that returns default_storage should not be omitted \n+        when deconstructing the FileField.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"storage_callable_default\").deconstruct()\n+        storage = kwargs[\"storage\"]\n+        self.assertIs(storage, callable_default_storage)\n # This is written in such a way that it'll always pass on platforms\n # without threading.\n \n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..6790e71 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n@@ -8,7 +9,9 @@ from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n from django.urls import reverse\n \n+from django.contrib.auth import get_permission_codename\n from .admin import ArticleAdmin, site\n+from .tests import get_perm\n from .models import Article, Question\n from .tests import AdminViewBasicTestCase\n \n",
  "django__django-16560": "diff --git a/tests/constraints/tests.py b/tests/constraints/tests.py\nindex 13854a9..c622ca9 100644\n--- a/tests/constraints/tests.py\n+++ b/tests/constraints/tests.py\n@@ -218,6 +218,18 @@ class CheckConstraintTests(TestCase):\n         self.assertIn(\"constraints_childmodel_adult\", constraints)\n \n     def test_validate(self):\n+        # Additional test for custom violation error code\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price\",\n+            violation_error_code=\"custom_code\",\n+        )\n+        # Invalid product.\n+        invalid_product = Product(price=10, discounted_price=42)\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(Product, invalid_product)\n+        self.assertEqual(cm.exception.code, \"custom_code\")\n         check = models.Q(price__gt=models.F(\"discounted_price\"))\n         constraint = models.CheckConstraint(check=check, name=\"price\")\n         # Invalid product.\n@@ -655,6 +667,18 @@ class UniqueConstraintTests(TestCase):\n             NoCodeErrorConstraintModel(name=\"test\").validate_constraints()\n \n     def test_validate(self):\n+        # Additional test for custom violation error code\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price\",\n+            violation_error_code=\"custom_code\",\n+        )\n+        # Invalid product.\n+        invalid_product = Product(price=10, discounted_price=42)\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(Product, invalid_product)\n+        self.assertEqual(cm.exception.code, \"custom_code\")\n         constraint = UniqueConstraintProduct._meta.constraints[0]\n         msg = \"Unique constraint product with this Name and Color already exists.\"\n         non_unique_product = UniqueConstraintProduct(\n",
  "django__django-16569": "",
  "django__django-16595": "",
  "django__django-16612": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 9120571..0a9840d 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -8481,7 +8481,40 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             fetch_redirect_response=False,\n         )\n \n-    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME=\"/prefix/\")\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_string_preserved(self):\n+        \"\"\"Test that query strings are preserved when appending slashes.\"\"\"\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=False)\n+    def test_no_append_slash_query_string_preserved(self):\n+        \"\"\"Test that query strings are preserved when APPEND_SLASH is False.\"\"\"\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url}?id=123\")\n+        self.assertEqual(response.status_code, 200)\n+\n+    @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_true_force_script_name(self):\n         superuser = User.objects.create_user(\n             username=\"staff\",\n",
  "django__django-16642": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 499356e..4ec37e6 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -256,6 +256,16 @@ class FileResponseTests(SimpleTestCase):\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n         )\n+        test_tuples = (\n+            (\".tar.br\", \"application/x-brotli\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n+        )\n+        for extension, mimetype in test_tuples:\n+            with self.subTest(ext=extension):\n+                with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n+                    response = FileResponse(tmp)\n+                self.assertEqual(response.headers[\"Content-Type\"], mimetype)\n+                self.assertFalse(response.has_header(\"Content-Encoding\"))\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n                 with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n",
  "django__django-16661": "diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py\nindex 8cb88da..781ada4 100644\n--- a/tests/modeladmin/tests.py\n+++ b/tests/modeladmin/tests.py\n@@ -154,6 +154,60 @@ class ModelAdminTests(TestCase):\n             ma.lookup_allowed(\"employee__department__code\", \"test_value\"), True\n         )\n \n+    @isolate_apps(\"modeladmin\")\n+    def test_lookup_allowed_with_foreign_key_as_primary_key(self):\n+        class Country(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class Place(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+\n+        class Restaurant(models.Model):\n+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)\n+\n+        class Waiter(models.Model):\n+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n+\n+        class WaiterAdmin(ModelAdmin):\n+            list_filter = [\n+                \"restaurant__place__country\",\n+                \"restaurant__place__country__name\",\n+            ]\n+\n+        ma = WaiterAdmin(Waiter, self.site)\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country\", \"1\"), True)\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__id__exact\", \"1\"), True\n+        )\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__name\", \"test_value\"), True\n+        )\n+\n+    @isolate_apps(\"modeladmin\")\n+    def test_lookup_disallowed_without_proper_list_filter(self):\n+        class Country(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class Place(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+\n+        class Restaurant(models.Model):\n+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)\n+\n+        class Waiter(models.Model):\n+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n+\n+        class WaiterAdmin(ModelAdmin):\n+            list_filter = [\n+                # Not including the lookups to cover disallowed scenario\n+            ]\n+\n+        ma = WaiterAdmin(Waiter, self.site)\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country\", \"1\"), False)\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__name\", \"test_value\"), False\n+        )\n+\n     def test_field_arguments(self):\n         # If fields is specified, fieldsets_add and fieldsets_change should\n         # just stick the fields into a formsets structure and return it.\n",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..555f3f7 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -885,6 +885,37 @@ class WriterTests(SimpleTestCase):\n                 \"dependencies\": [],\n             },\n         )\n+\n+    def test_additional_import_ordering(self):\n+        \"\"\"\n+        Test that imports are ordered correctly according to Django and isort coding style.\n+        This test case checks different import scenarios.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.RunPython(\n+                        \"custom_migration_function\",\n+                        reverse_code=migrations.RunPython.noop\n+                    ),\n+                    migrations.AddField(\n+                        \"anothermodel\",\n+                        \"anotherfield\",\n+                        models.CharField(default='default_value'),\n+                    ),\n+                ]\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+\n+        # Check that the output contains ordered imports\n+        self.assertIn(\n+            \"import datetime\\nimport time\\nfrom django.db import migrations, models\\n\",\n+            output,\n+        )\n         writer = MigrationWriter(migration)\n         output = writer.as_string()\n         result = self.safe_exec(output)\n@@ -894,6 +925,37 @@ class WriterTests(SimpleTestCase):\n             result[\"custom_migration_operations\"].more_operations.TestOperation,\n         )\n \n+    def test_additional_import_ordering(self):\n+        \"\"\"\n+        Test that imports are ordered correctly according to Django and isort coding style.\n+        This test case checks different import scenarios.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.RunPython(\n+                        \"custom_migration_function\",\n+                        reverse_code=migrations.RunPython.noop\n+                    ),\n+                    migrations.AddField(\n+                        \"anothermodel\",\n+                        \"anotherfield\",\n+                        models.CharField(default='default_value'),\n+                    ),\n+                ]\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+\n+        # Check that the output contains ordered imports\n+        self.assertIn(\n+            \"import datetime\\nimport time\\nfrom django.db import migrations, models\\n\",\n+            output,\n+        )\n+\n     def test_sorted_imports(self):\n         \"\"\"\n         #24155 - Tests ordering of imports.\n@@ -915,6 +977,37 @@ class WriterTests(SimpleTestCase):\n                 ]\n             },\n         )\n+\n+    def test_additional_import_ordering(self):\n+        \"\"\"\n+        Test that imports are ordered correctly according to Django and isort coding style.\n+        This test case checks different import scenarios.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.RunPython(\n+                        \"custom_migration_function\",\n+                        reverse_code=migrations.RunPython.noop\n+                    ),\n+                    migrations.AddField(\n+                        \"anothermodel\",\n+                        \"anotherfield\",\n+                        models.CharField(default='default_value'),\n+                    ),\n+                ]\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+\n+        # Check that the output contains ordered imports\n+        self.assertIn(\n+            \"import datetime\\nimport time\\nfrom django.db import migrations, models\\n\",\n+            output,\n+        )\n         writer = MigrationWriter(migration)\n         output = writer.as_string()\n         self.assertIn(\n@@ -922,6 +1015,37 @@ class WriterTests(SimpleTestCase):\n             output,\n         )\n \n+    def test_additional_import_ordering(self):\n+        \"\"\"\n+        Test that imports are ordered correctly according to Django and isort coding style.\n+        This test case checks different import scenarios.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.RunPython(\n+                        \"custom_migration_function\",\n+                        reverse_code=migrations.RunPython.noop\n+                    ),\n+                    migrations.AddField(\n+                        \"anothermodel\",\n+                        \"anotherfield\",\n+                        models.CharField(default='default_value'),\n+                    ),\n+                ]\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+\n+        # Check that the output contains ordered imports\n+        self.assertIn(\n+            \"import datetime\\nimport time\\nfrom django.db import migrations, models\\n\",\n+            output,\n+        )\n+\n     def test_migration_file_header_comments(self):\n         \"\"\"\n         Test comments at top of file.\n",
  "django__django-16801": "",
  "django__django-16819": "",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..46910a2 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -805,8 +805,36 @@ class SystemChecksTestCase(SimpleTestCase):\n             )\n         ]\n         self.assertEqual(errors, expected)\n+    def test_nonexistent_field_with_name_in_error(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            readonly_fields = (\"title\", \"nonexistent\")\n \n-    def test_nonexistent_field_on_inline(self):\n+        errors = SongAdmin(Song, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[1]' refers to 'nonexistent', which is not a callable, an attribute \"\n+                \"of 'SongAdmin', or an attribute of 'admin_checks.Song'.\",\n+                obj=SongAdmin,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n+\n+    def test_nonexistent_field_on_inline_with_name_in_error(self):\n+        class CityInline(admin.TabularInline):\n+            model = City\n+            readonly_fields = [\"i_dont_exist\"]  # Missing attribute\n+\n+        errors = CityInline(State, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' refers to 'i_dont_exist', which is not a callable, an attribute \"\n+                \"of 'CityInline', or an attribute of 'admin_checks.City'.\",\n+                obj=CityInline,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n         class CityInline(admin.TabularInline):\n             model = City\n             readonly_fields = [\"i_dont_exist\"]  # Missing attribute\n",
  "django__django-16901": "diff --git a/tests/xor_lookups/tests.py b/tests/xor_lookups/tests.py\nindex 389d908..7daf26b 100644\n--- a/tests/xor_lookups/tests.py\n+++ b/tests/xor_lookups/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import Q\n from django.test import TestCase\n \n@@ -53,8 +54,27 @@ class XorLookupsTests(TestCase):\n             numbers.filter(num__gt=0) ^ numbers.filter(num__lt=11),\n             [self.numbers[0]],\n         )\n+    def test_filter_parity(self):\n+        # Test with three conditions\n+        qs = Number.objects.filter(\n+            Q(num__gte=1) ^ Q(num__gte=3) ^ Q(num__gte=5)\n+        )\n+        expected = [self.numbers[1], self.numbers[2], self.numbers[4]]\n+        self.assertCountEqual(qs, expected)\n+\n+        # Test with four conditions\n+        qs = Number.objects.filter(\n+            Q(num__gte=1) ^ Q(num__gte=3) ^ Q(num__gte=5) ^ Q(num__gte=7)\n+        )\n+        expected = [self.numbers[1], self.numbers[2], self.numbers[4], self.numbers[6]]\n+        self.assertCountEqual(qs, expected)\n \n-    def test_pk_q(self):\n+        # Test with five conditions\n+        qs = Number.objects.filter(\n+            Q(num__gte=1) ^ Q(num__gte=3) ^ Q(num__gte=5) ^ Q(num__gte=7) ^ Q(num__gte=9)\n+        )\n+        expected = [self.numbers[1], self.numbers[2], self.numbers[4], self.numbers[6], self.numbers[8]]\n+        self.assertCountEqual(qs, expected)\n         self.assertCountEqual(\n             Number.objects.filter(Q(pk=self.numbers[0].pk) ^ Q(pk=self.numbers[1].pk)),\n             self.numbers[:2],\n@@ -64,4 +84,4 @@ class XorLookupsTests(TestCase):\n         self.assertCountEqual(\n             Number.objects.filter(Q(pk__in=[]) ^ Q(num__gte=5)),\n             self.numbers[5:],\n-        )\n+        )\n",
  "django__django-17029": "",
  "django__django-17084": "",
  "django__django-17087": "",
  "django__django-7530": "",
  "django__django-9296": "diff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\nindex b9b5fbc..87a1794 100644\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -298,6 +298,11 @@ class PaginationTests(SimpleTestCase):\n             paginator.get_page(1)\n \n \n+from django.core.paginator import Paginator, EmptyPage\n+from django.test import TestCase\n+from datetime import datetime\n+from .models import Article  # Ensure this import matches your models\n+\n class ModelPaginationTests(TestCase):\n     \"\"\"\n     Test pagination with Django model instances\n@@ -309,7 +314,24 @@ class ModelPaginationTests(TestCase):\n             a = Article(headline='Article %s' % x, pub_date=datetime(2005, 7, 29))\n             a.save()\n \n-    def test_first_page(self):\n+    def test_empty_paginator(self):\n+        \"\"\"Test iterating over an empty paginator.\"\"\"\n+        paginator = Paginator([], 2)\n+        pages = list(iter(paginator))\n+        self.assertEqual(pages, [])\n+\n+    def test_single_page_paginator(self):\n+        \"\"\"Test iterating over a paginator with a single page.\"\"\"\n+        paginator = Paginator([1], 2)\n+        pages = list(iter(paginator))\n+        self.assertEqual(pages, [[1]])\n+\n+    def test_multiple_pages_paginator(self):\n+        \"\"\"Test iterating over a paginator with multiple pages.\"\"\"\n+        paginator = Paginator([1, 2, 3, 4, 5, 6], 2)\n+        pages = list(iter(paginator))\n+        expected_pages = [[1, 2], [3, 4], [5, 6]]\n+        self.assertEqual(pages, expected_pages)\n         paginator = Paginator(Article.objects.order_by('id'), 5)\n         p = paginator.page(1)\n         self.assertEqual(\"<Page 1 of 2>\", str(p))\n",
  "matplotlib__matplotlib-13989": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5483eef..c9da9c4 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6359,8 +6359,33 @@ def test_hist_auto_bins():\n \n def test_hist_nan_data():\n     fig, (ax1, ax2) = plt.subplots(2)\n+import matplotlib.pyplot as plt\n+import numpy as np\n \n-    data = [1, 2, 3]\n+def test_hist_range_and_density():\n+    # Test case from the original issue description\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_and_density_with_more_bins():\n+    # Additional test case to check behavior with more bins\n+    _, bins, _ = plt.hist(np.random.rand(100), bins=20, range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_and_density_different_range():\n+    # Test case with a different range\n+    _, bins, _ = plt.hist(np.random.rand(100), bins=10, range=(-1, 1), density=True)\n+    assert bins[0] == -1\n+    assert bins[-1] == 1\n+\n+def test_hist_range_and_density_non_uniform_data():\n+    # Test with non-uniform data\n+    data = np.concatenate([np.random.rand(50) * 0.5, 0.5 + np.random.rand(50) * 0.5])\n+    _, bins, _ = plt.hist(data, bins=15, range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n     nan_data = data + [np.nan]\n \n     bins, edges, _ = ax1.hist(data)\n@@ -6368,4 +6393,4 @@ def test_hist_nan_data():\n         nanbins, nanedges, _ = ax2.hist(nan_data)\n \n     assert np.allclose(bins, nanbins)\n-    assert np.allclose(edges, nanedges)\n+    assert np.allclose(edges, nanedges)\n",
  "matplotlib__matplotlib-14623": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c9ad946..e9b71e6 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -930,6 +930,27 @@ def test_inverted_limits():\n     assert ax.get_ylim() == (-3, 5)\n     plt.close()\n \n+def test_invert_log_scale_axis():\n+    # Test inverting an axis with log scale using set_ylim\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(1000, 1)\n+    # Check that the limits were set correctly\n+    assert ax.get_ylim() == (1000, 1)\n+    plt.close()\n+\n+    # Additionally test with some plot data\n+    y = np.linspace(1000, 1, 100)\n+    x = np.exp(-np.linspace(0, 1, y.size))\n+    \n+    fig, ax = plt.subplots()\n+    ax.plot(x, y)\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(y.max(), y.min())\n+    # Check that the limits are set correctly after plotting\n+    assert ax.get_ylim() == (y.max(), y.min())\n+    plt.close()\n+\n     fig, ax = plt.subplots()\n     ax.invert_yaxis()\n     ax.plot([-5, -3, 2, 4], [1, 2, -3, 5])\n@@ -938,6 +959,27 @@ def test_inverted_limits():\n     assert ax.get_ylim() == (5, -3)\n     plt.close()\n \n+def test_invert_log_scale_axis():\n+    # Test inverting an axis with log scale using set_ylim\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(1000, 1)\n+    # Check that the limits were set correctly\n+    assert ax.get_ylim() == (1000, 1)\n+    plt.close()\n+\n+    # Additionally test with some plot data\n+    y = np.linspace(1000, 1, 100)\n+    x = np.exp(-np.linspace(0, 1, y.size))\n+    \n+    fig, ax = plt.subplots()\n+    ax.plot(x, y)\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(y.max(), y.min())\n+    # Check that the limits are set correctly after plotting\n+    assert ax.get_ylim() == (y.max(), y.min())\n+    plt.close()\n+\n \n @image_comparison(baseline_images=['nonfinite_limits'])\n def test_nonfinite_limits():\n",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..a44084c 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6960,6 +6960,30 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[3].hist(np.arange(10), color=color.reshape((1, -1)))\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear(fig_test, fig_ref):\n+    import numpy as np\n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    # Reference figure without clearing axes\n+    axs_ref = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_ref.flat:\n+        ax.plot(x, y)\n+\n+    # Test figure with axes cleared\n+    axs_test = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_test.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n+\n+    # Check that shared axis ticks are consistent\n+    for ax1, ax2 in zip(axs_ref.flat, axs_test.flat):\n+        assert ax1.get_xticks() == ax2.get_xticks(), \"X-ticks mismatch after ax.clear()\"\n+        assert ax1.get_yticks() == ax2.get_yticks(), \"Y-ticks mismatch after ax.clear()\"\n+        assert ax1.get_xticklabels() == ax2.get_xticklabels(), \"X-tick labels mismatch after ax.clear()\"\n+        assert ax1.get_yticklabels() == ax2.get_yticklabels(), \"Y-tick labels mismatch after ax.clear()\"\n+\n \n def test_shared_axes_retick():\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "diff --git a/lib/matplotlib/tests/test_category.py b/lib/matplotlib/tests/test_category.py\nindex 40c4dcf..3b3b5e4 100644\n--- a/lib/matplotlib/tests/test_category.py\n+++ b/lib/matplotlib/tests/test_category.py\n@@ -311,4 +311,21 @@ def test_hist():\n     fig, ax = plt.subplots()\n     n, bins, patches = ax.hist(['a', 'b', 'a', 'c', 'ff'])\n     assert n.shape == (10,)\n-    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n+\n+def test_no_deprecation_on_empty_data():\n+    \"\"\"\n+    Smoke test to check that no deprecation warning is emitted when plotting\n+    with empty data and unit converters.\n+    \"\"\"\n+    import warnings\n+    import matplotlib.pyplot as plt\n+    \n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        f, ax = plt.subplots()\n+        ax.xaxis.update_units([\"a\", \"b\"])\n+        ax.plot([], [])\n+        \n+        # Verify no deprecation warning is emitted\n+        assert not any(issubclass(warning.category, MatplotlibDeprecationWarning) for warning in w)\n+    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n",
  "matplotlib__matplotlib-22865": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex 2c28713..1d184e2 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -919,6 +919,41 @@ def test_proportional_colorbars():\n             fig.colorbar(CS3, spacing=spacings[j], ax=axs[i, j])\n \n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+import matplotlib.colors as mcolors\n+from matplotlib.colorbar import Colorbar\n+\n+@pytest.mark.parametrize(\"extend, coloroffset, expected_segments\", [\n+    ('both', 1, [np.array([[0., 0.], [0., 1.]]),\n+                 np.array([[1., 0.], [1., 1.]]),\n+                 np.array([[2., 0.], [2., 1.]])]),\n+    ('min', 0, [np.array([[0., 0.], [0., 1.]]),\n+                np.array([[1., 0.], [1., 1.]])]),\n+    ('max', 0, [np.array([[1., 0.], [1., 1.]]),\n+                np.array([[2., 0.], [2., 1.]])]),\n+    ('neither', -1, [np.array([[1., 0.], [1., 1.]])])\n+])\n+def test_colorbar_extend_drawedges(extend, coloroffset, expected_segments):\n+    # Create a colormap and normalize it based on specified bounds\n+    cmap = plt.get_cmap(\"viridis\")\n+    bounds = np.arange(3)\n+    nb_colors = len(bounds) + coloroffset\n+    colors = cmap(np.linspace(100, 255, nb_colors).astype(int))\n+    cmap, norm = mcolors.from_levels_and_colors(bounds, colors, extend=extend)\n+    \n+    # Initialize the figure and axis\n+    plt.figure(figsize=(5, 1))\n+    ax = plt.subplot(111)\n+    \n+    # Create a colorbar with drawedges=True\n+    cbar = Colorbar(ax, cmap=cmap, norm=norm, orientation='horizontal', drawedges=True)\n+    \n+    # Assert that the divider segments meet expected values\n+    assert np.all(np.equal(cbar.dividers.get_segments(), expected_segments))\n+    \n+    plt.close()  # Close the plot to free up memory\n+\n def test_negative_boundarynorm():\n     fig, ax = plt.subplots(figsize=(1, 3))\n     cmap = plt.get_cmap(\"viridis\")\n",
  "matplotlib__matplotlib-23299": "",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..1d874ad 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -11,6 +11,26 @@ from matplotlib import colors as mcolors\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n from matplotlib.testing.widgets import mock_event\n from matplotlib.collections import LineCollection, PolyCollection\n+@check_figures_equal(extensions=[\"png\"])\n+def test_3d_set_visible_false(fig_test, fig_ref):\n+    # Create a 3D subplot and set it to visible\n+    ax_test = fig_test.add_subplot(111, projection='3d')\n+    ax_test.scatter(1, 1, 1)\n+    ax_test.set_visible(False)\n+\n+    # Create a reference subplot without any plots\n+    fig_ref.add_subplot(111, projection='3d')\n+\n+\n+def test_3d_visibility_toggle():\n+    fig, ax = plt.subplots(subplot_kw={'projection': '3d'})\n+    ax.scatter(1, 1, 1)\n+    ax.set_visible(False)\n+    assert not ax.get_visible(), \"The 3D axis should be invisible after set_visible(False)\"\n+    ax.set_visible(True)\n+    assert ax.get_visible(), \"The 3D axis should be visible after set_visible(True)\"\n+\n+from matplotlib.testing.decorators import check_figures_equal\n from matplotlib.patches import Circle\n \n import matplotlib.pyplot as plt\n",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..f3d6457 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -149,6 +149,12 @@ def test_rotate_rect_draw(fig_test, fig_ref):\n     assert rect_test.get_angle() == angle\n \n \n+import matplotlib.pyplot as plt\n+from matplotlib.patches import Rectangle\n+import numpy as np\n+from matplotlib.testing.decorators import check_figures_equal\n+from numpy.testing import assert_array_equal\n+\n def test_negative_rect():\n     # These two rectangles have the same vertices, but starting from a\n     # different point.  (We also drop the last vertex, which is a duplicate.)\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..4c574ee 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2866,8 +2866,19 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n-\n-@image_comparison(['stackplot_test_baseline'], remove_text=True)\n+def test_stackplot_color_cycler():\n+    import matplotlib.pyplot as plt\n+    from matplotlib.patches import Rectangle\n+    import numpy as np\n+\n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    fig, ax = plt.subplots()\n+    ax.plot([1, 3], [1, 3], color='C0')  # Use a color from the cycler\n+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))\n+    ax.stackplot([1, 2, 3], my_data, colors=['C2', 'C3', 'C4'])  # Use stackplot with cycler colors\n+    assert ax.get_lines()[0].get_color() == 'C0', \"Line color should remain C0\"\n+    assert ax.patches[0].get_facecolor()[:3] == plt.get_cmap()(1)[:3], \"Rectangle color should remain C1\"\n+    assert len(ax.collections) == 1, \"One collection should be present from stackplot\"\n def test_stackplot_baseline():\n     np.random.seed(0)\n \n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 45f9c04..5eb8347 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -12,8 +12,10 @@ import matplotlib.lines as mlines\n from matplotlib.backend_bases import MouseButton, MouseEvent\n \n from matplotlib.offsetbox import (\n+    HPacker, VPacker,\n     AnchoredOffsetbox, AnnotationBbox, AnchoredText, DrawingArea, OffsetBox,\n     OffsetImage, TextArea, _get_packed_offsets)\n+import numpy as np\n \n \n @image_comparison(['offsetbox_clipping'], remove_text=True)\n",
  "matplotlib__matplotlib-24627": "",
  "matplotlib__matplotlib-24637": "",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..fedae57 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -20,6 +20,22 @@ import matplotlib.scale as mscale\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n \n \n+import pytest\n+import numpy as np\n+from numpy.testing import assert_array_equal, assert_array_almost_equal\n+import matplotlib as mpl\n+import matplotlib.colors as mcolors\n+\n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.float16, float])\n+def test_deprecation_handling(dtype):\n+    cm = mpl.colormaps[\"viridis\"]\n+    # Test with boundary indices\n+    assert_array_equal(cm(dtype(-1)), cm._lut[0])  # Check underflow handling\n+    assert_array_equal(cm(dtype(cm.N)), cm._lut[-1])  # Check exact upper bound\n+    assert_array_equal(cm(dtype(cm.N + 1)), cm._lut[-1])  # Check overflow handling\n+    # Test with NaN\n+    assert_array_equal(cm(np.nan), cm._lut[-1])  # NaN should map to _i_bad\n+\n @pytest.mark.parametrize('N, result', [\n     (5, [1, .6, .2, .1, 0]),\n     (2, [1, 0]),\n",
  "matplotlib__matplotlib-25122": "diff --git a/lib/matplotlib/tests/test_mlab.py b/lib/matplotlib/tests/test_mlab.py\nindex 51d0c35..419b2a9 100644\n--- a/lib/matplotlib/tests/test_mlab.py\n+++ b/lib/matplotlib/tests/test_mlab.py\n@@ -622,8 +622,30 @@ class TestSpectral:\n         # these should not be almost equal\n         with pytest.raises(AssertionError):\n             assert_allclose(spec_b, spec_c, atol=1e-08)\n-\n-    def test_psd_window_hanning_detrend_linear(self):\n+    def test_psd_window_flattop(self):\n+        # Test with flattop window to ensure correction is applied properly\n+        if self.NFFT_density is None:\n+            return\n+        ydata = np.arange(self.NFFT_density)\n+        windowVals = signal.windows.flattop(self.NFFT_density)\n+        spec, fsp = mlab.psd(x=ydata,\n+                             NFFT=self.NFFT_density,\n+                             Fs=self.Fs,\n+                             noverlap=0,\n+                             sides=self.sides,\n+                             window=windowVals,\n+                             scale_by_freq=True)\n+        spec_corrected, fsp_corrected = mlab.psd(x=ydata,\n+                                                 NFFT=self.NFFT_density,\n+                                                 Fs=self.Fs,\n+                                                 noverlap=0,\n+                                                 sides=self.sides,\n+                                                 window=windowVals,\n+                                                 scale_by_freq=False)\n+        # Check if the corrected spectrum matches the expected spectrum\n+        assert_allclose(spec * windowVals.sum()**2,\n+                        spec_corrected * self.Fs * (windowVals**2).sum(),\n+                        atol=1e-08)\n         if self.NFFT_density is None:\n             return\n         ydata = np.arange(self.NFFT_density)\n",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..b326d30 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7800,8 +7800,32 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.tick1line.get_color() == 'yellow'\n         assert tick.label1.get_color() == 'blue'\n \n+import matplotlib.pyplot as plt\n+\n+def test_xaxis_offsetText_color():\n+    plt.rcParams['xtick.labelcolor'] = 'blue'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.xaxis.offsetText.get_color() == 'blue'\n \n-def test_ytickcolor_is_not_yticklabelcolor():\n+    plt.rcParams['xtick.color'] = 'yellow'\n+    plt.rcParams['xtick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.xaxis.offsetText.get_color() == 'yellow'\n+\n+\n+def test_yaxis_offsetText_color():\n+    plt.rcParams['ytick.labelcolor'] = 'green'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.yaxis.offsetText.get_color() == 'green'\n+\n+    plt.rcParams['ytick.color'] = 'red'\n+    plt.rcParams['ytick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.yaxis.offsetText.get_color() == 'red'\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n     ax = plt.axes()\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..321722e 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -89,8 +90,22 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import pickletools\n \n @mpl.style.context(\"default\")\n+def test_pickle_figure_with_draggable_legend():\n+    fig, ax = plt.subplots()\n+    ax.plot([0, 1, 2], [10, 20, 10], label=\"Sample Data\")\n+    leg = ax.legend(draggable=True)\n+    \n+    # Check if the figure can be pickled without including non-picklable objects\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+    \n+    # Load the pickle and verify that it can be unpickled correctly\n+    loaded_fig = pickle.loads(pkl)\n+    assert isinstance(loaded_fig, mfigure.Figure)\n+    plt.close(loaded_fig)\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..f765436 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -44,7 +44,28 @@ def test_simple():\n     pickle.dump(fig, BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n \n-def _generate_complete_test_figure(fig_ref):\n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    # Align labels and attempt to pickle the figure\n+    fig.align_labels()\n+    \n+    try:\n+        # This should not raise an exception if the bug is fixed\n+        pickle_data = pickle.dumps(fig)\n+        loaded_fig = pickle.loads(pickle_data)\n+        loaded_fig.canvas.draw()\n+    except TypeError as e:\n+        assert False, f\"Pickling failed with error: {e}\"\n     fig_ref.set_size_inches((10, 6))\n     plt.figure(fig_ref)\n \n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..a90cc1b 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -991,6 +991,47 @@ def test_hexbin_linear():\n     ax.hexbin(x, y, gridsize=(10, 5), marginals=True,\n               reduce_C_function=np.sum)\n \n+from matplotlib.testing.decorators import check_figures_equal\n+import matplotlib.pyplot as plt\n+import numpy as np\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_behavior_upon_C_parameter(fig_test, fig_ref):\n+    # see: gh:12926\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # without C parameter\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # with C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=[1] * len(X),\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n \n def test_hexbin_log_clim():\n     x, y = np.arange(200).reshape((2, 100))\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex 700190c..0144a85 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -89,6 +89,55 @@ def test_contour_no_valid_levels():\n     ax.contour(np.ones((9, 9)))\n \n \n+from matplotlib.testing.decorators import check_figures_equal, image_comparison\n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.contour import QuadContourSet\n+from matplotlib.path import Path\n+from matplotlib import collections as mcoll\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths(fig_test, fig_ref):\n+    cs_test = fig_test.subplots().contour([[0, 1], [1, 2]])\n+    cs_ref = fig_ref.subplots().contour([[1, 0], [2, 1]])\n+\n+    # Using the new set_paths method\n+    cs_test.set_paths(cs_ref.get_paths())\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths_no_change(fig_test, fig_ref):\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+    data = [[0, 1], [1, 2]]\n+    cs_test = ax_test.contour(data)\n+    cs_ref = ax_ref.contour(data)\n+\n+    # Ensure paths are not changed when set to themselves\n+    cs_test.set_paths(cs_test.get_paths())\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths_empty(fig_test, fig_ref):\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+    data = [[0, 1], [1, 2]]\n+    cs_test = ax_test.contour(data)\n+    cs_ref = ax_ref.contour(data)\n+\n+    # Set paths to an empty list of paths\n+    cs_test.set_paths([])\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths_different_shapes(fig_test, fig_ref):\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+    data_test = [[0, 2], [2, 4]]\n+    data_ref = [[1, 0], [3, 2]]\n+    cs_test = ax_test.contour(data_test)\n+    cs_ref = ax_ref.contour(data_ref)\n+\n+    # Transform paths with different shapes\n+    cs_test.set_paths(cs_ref.get_paths())\n+\n def test_contour_Nlevels():\n     # A scalar levels arg or kwarg should trigger auto level generation.\n     # https://github.com/matplotlib/matplotlib/issues/11913\n",
  "mwaskom__seaborn-3069": "",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..459736d 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -244,6 +244,9 @@ def test_default_static_max_age(app):\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n \n+import pytest\n+import flask\n+\n def test_templates_list(test_apps):\n     from blueprintapp import app\n \n",
  "psf__requests-1142": "",
  "psf__requests-1724": "",
  "psf__requests-1766": "",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..58754ad 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -86,7 +86,14 @@ class TestRequests:\n         with pytest.raises(exception):\n             requests.get(url)\n \n-    def test_basic_building(self):\n+    @pytest.mark.parametrize(\n+        'exception, url', (\n+            (InvalidURL, 'http://*example.com'),\n+            (InvalidURL, 'http://.example.com'),\n+        ))\n+    def test_invalid_hostname(self, exception, url):\n+        with pytest.raises(exception):\n+            requests.get(url)\n         req = requests.Request()\n         req.url = 'http://kennethreitz.org/'\n         req.data = {'life': '42'}\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..1e820d3 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2308,8 +2308,34 @@ class TestAsCompatibleData:\n         orig = Variable(dims=(\"x\"), data=array, attrs={\"foo\": \"bar\"})\n         assert isinstance(orig._data, CustomIndexable)\n \n-\n-def test_raise_no_warning_for_nan_in_binary_ops():\n+def test_variable_setitem_with_values_attribute():\n+    import numpy as np\n+    from xarray import Variable\n+\n+    # Type with data stored in values attribute\n+    class CustomWithValuesAttr:\n+        def __init__(self, data):\n+            self.values = data\n+\n+    class HasValues:\n+        values = 5\n+\n+    # Test case for object with a 'values' attribute\n+    array = CustomWithValuesAttr(np.arange(3))\n+    orig = Variable(dims=(), data=array)\n+    assert isinstance(orig._data.item(), CustomWithValuesAttr)\n+\n+    # Test case for a simple object with a 'values' property\n+    v = Variable(dims=(\"x\"), data=[None])\n+    v[0] = HasValues()\n+    assert isinstance(v[0].item(), HasValues)\n+\n+    # Test case ensuring no coercion occurs on setitem\n+    # Expected behavior is to store the object itself, not the attribute\n+    v[0] = set()\n+    assert isinstance(v[0].item(), set)\n+    v[0] = HasValues()\n+    assert isinstance(v[0].item(), HasValues)\n     with pytest.warns(None) as record:\n         Variable(\"x\", [1, 2, np.NaN]) > 0\n     assert len(record) == 0\n",
  "pydata__xarray-3095": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex 274cb25..04e36d6 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -3480,7 +3480,16 @@ class TestDataArray:\n \n         assert_identical(da['a'], expected_orig)\n \n-    def test_real_and_imag(self):\n+    @pytest.mark.parametrize('deep', [True, False])\n+    def test_copy_unicode_indices_dataarray(self, deep):\n+        da = xr.DataArray(\n+            data=np.array(['baz'], dtype='<U3'),\n+            coords={'x': np.array(['foo'], dtype='<U3'), 'y': ('x', ['bar'])},\n+            dims='x'\n+        )\n+        da_copy = da.copy(deep=deep)\n+        assert da.x.dtype == da_copy.x.dtype\n+        assert_identical(da, da_copy)\n         array = DataArray(1 + 2j)\n         assert_identical(array.real, DataArray(1))\n         assert_identical(array.imag, DataArray(2))\n",
  "pydata__xarray-3151": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 026dec9..924c403 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -611,7 +611,41 @@ class TestCombineAuto:\n         expected = Dataset({'x': 0, 'y': 1, 'z': 2})\n         assert_identical(expected, actual)\n \n-    def test_check_for_impossible_ordering(self):\n+    def test_non_monotonic_identical_coordinates(self):\n+        # Test for non-monotonic identical coordinates\n+        ycoord = ['a', 'c', 'b']\n+\n+        data = np.random.rand(7, 3)\n+\n+        ds1 = Dataset(data_vars=dict(data=(['x', 'y'], data[:3, :])),\n+                      coords=dict(x=[1, 2, 3], y=ycoord))\n+\n+        ds2 = Dataset(data_vars=dict(data=(['x', 'y'], data[3:, :])),\n+                      coords=dict(x=[4, 5, 6, 7], y=ycoord))\n+\n+        expected = Dataset(data_vars=dict(data=(['x', 'y'], data)),\n+                           coords=dict(x=[1, 2, 3, 4, 5, 6, 7], y=ycoord))\n+\n+        actual = combine_by_coords((ds1, ds2))\n+        assert_identical(expected, actual)\n+\n+    def test_monotonic_identical_coordinates(self):\n+        # Test for monotonic identical coordinates\n+        ycoord = ['a', 'b', 'c']\n+\n+        data = np.random.rand(7, 3)\n+\n+        ds1 = Dataset(data_vars=dict(data=(['x', 'y'], data[:3, :])),\n+                      coords=dict(x=[1, 2, 3], y=ycoord))\n+\n+        ds2 = Dataset(data_vars=dict(data=(['x', 'y'], data[3:, :])),\n+                      coords=dict(x=[4, 5, 6, 7], y=ycoord))\n+\n+        expected = Dataset(data_vars=dict(data=(['x', 'y'], data)),\n+                           coords=dict(x=[1, 2, 3, 4, 5, 6, 7], y=ycoord))\n+\n+        actual = combine_by_coords((ds1, ds2))\n+        assert_identical(expected, actual)\n         ds0 = Dataset({'x': [0, 1, 5]})\n         ds1 = Dataset({'x': [2, 3]})\n         with raises_regex(ValueError, \"does not have monotonic global indexes\"\n",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..833d2a5 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2310,6 +2310,25 @@ class TestDataArray:\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n \n+    def test_quantile_keep_attrs(self):\n+        # Test quantile with keep_attrs=True\n+        da = DataArray([0, 0], dims=\"x\", attrs={'units': 'K'})\n+        quantiles = [0.25, 0.5, 0.75]\n+\n+        for q in quantiles:\n+            result = da.quantile(q, dim='x', keep_attrs=True)\n+            assert result.attrs == da.attrs, f\"Failed to keep attrs for quantile {q}\"\n+\n+        # Test quantile with keep_attrs=False\n+        for q in quantiles:\n+            result = da.quantile(q, dim='x', keep_attrs=False)\n+            assert result.attrs == {}, f\"Attributes not dropped for quantile {q}\"\n+\n+        # Test quantile without specifying keep_attrs (default is False)\n+        for q in quantiles:\n+            result = da.quantile(q, dim='x')\n+            assert result.attrs == {}, f\"Attributes not dropped by default for quantile {q}\"\n+\n     def test_reduce_keep_attrs(self):\n         # Test dropped attrs\n         vm = self.va.mean()\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..14ef4b1 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,8 +1,10 @@\n+\n import numpy as np\n import pytest\n \n import xarray as xr\n from xarray.core import dtypes, merge\n+from xarray.testing import assert_identical\n \n from . import raises_regex\n from .test_dataset import create_test_data\n@@ -159,7 +161,29 @@ class TestMergeMethod:\n         with raises_regex(ValueError, \"should be coordinates or not\"):\n             data.merge(data.reset_coords())\n \n-    def test_merge_broadcast_equals(self):\n+    def test_merge_dataarray(self):\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+\n+        # Basic test to see if merging DataArray into Dataset works\n+        assert_identical(ds.merge(da), xr.merge([ds, da]))\n+\n+        # Additional test cases\n+        # Test with more complex DataArray\n+        da_complex = xr.DataArray(data=[10, 20, 30], dims=\"x\", name=\"c\")\n+        expected = xr.merge([ds, da_complex])\n+        assert_identical(ds.merge(da_complex), expected)\n+\n+        # Test with DataArray that has different dimensions\n+        ds_with_dim = xr.Dataset({\"a\": (\"x\", [0, 1, 2])})\n+        da_diff_dim = xr.DataArray(data=[100, 200], dims=\"y\", name=\"d\")\n+        expected_diff_dim = xr.merge([ds_with_dim, da_diff_dim])\n+        assert_identical(ds_with_dim.merge(da_diff_dim), expected_diff_dim)\n+\n+        # Test with merging an empty DataArray\n+        da_empty = xr.DataArray(name=\"e\")\n+        expected_with_empty = xr.merge([ds_with_dim, da_empty])\n+        assert_identical(ds_with_dim.merge(da_empty), expected_with_empty)\n         ds1 = xr.Dataset({\"x\": 0})\n         ds2 = xr.Dataset({\"x\": (\"y\", [0, 0])})\n         actual = ds1.merge(ds2)\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..8df30a3 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -109,6 +109,22 @@ class TestMergeFunction:\n             expected.attrs = expected_attrs\n             assert actual.identical(expected)\n \n+    def test_merge_attrs_override_copy(self):\n+        ds1 = xr.Dataset(attrs={\"x\": 0})\n+        ds2 = xr.Dataset(attrs={\"x\": 1})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        \n+        # Check initial attributes\n+        assert ds3.attrs[\"x\"] == 0\n+        assert ds1.attrs[\"x\"] == 0\n+        assert ds2.attrs[\"x\"] == 1\n+        \n+        # Modify the merged dataset's attribute and ensure originals are unaffected\n+        ds3.attrs[\"x\"] = 2\n+        assert ds3.attrs[\"x\"] == 2\n+        assert ds1.attrs[\"x\"] == 0\n+        assert ds2.attrs[\"x\"] == 1\n+\n     def test_merge_dicts_simple(self):\n         actual = xr.merge([{\"foo\": 0}, {\"bar\": \"one\"}, {\"baz\": 3.5}])\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..420d14a 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1921,6 +1921,29 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n+def test_where_attrs_preserved() -> None:\n+    # Test for preserving attributes\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    actual = xr.where(cond, x, y)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected, actual)\n+\n+    # Test when x and y have different attributes\n+    x.attrs[\"extra\"] = \"extra_attr\"\n+    y.attrs[\"extra\"] = \"different_attr\"\n+    actual = xr.where(cond, x, y)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\", \"extra\": \"extra_attr\"})\n+    assert_identical(expected, actual)\n+\n+    # Test with scalar x and y\n+    cond = xr.DataArray([True, False], dims=\"x\")\n+    x = xr.DataArray(1, attrs={\"scalar_attr\": \"x_scalar\"})\n+    y = xr.DataArray(0, attrs={\"scalar_attr\": \"y_scalar\"})\n+    actual = xr.where(cond, x, y)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"scalar_attr\": \"x_scalar\"})\n+    assert_identical(expected, actual)\n \n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n",
  "pydata__xarray-4695": "",
  "pydata__xarray-4966": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex 2dbb0b4..da43440 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -13,8 +13,34 @@ from . import assert_allclose, assert_equal, assert_identical, requires_dask\n with suppress(ImportError):\n     import dask.array as da\n \n+import numpy as np\n \n-def test_CFMaskCoder_decode():\n+@pytest.mark.parametrize(\"bits\", [1, 2, 4, 8])\n+def test_decode_unsigned_to_signed(bits):\n+    unsigned_dtype = np.dtype(f\"u{bits}\")\n+    signed_dtype = np.dtype(f\"i{bits}\")\n+    original_values = np.array([-1], dtype=signed_dtype)\n+    encoded = xr.Variable(\n+        (\"x\",), original_values.astype(unsigned_dtype), attrs={\"_Unsigned\": \"false\"}\n+    )\n+    coder = variables.UnsignedIntegerCoder()\n+    decoded = coder.decode(encoded)\n+    assert decoded.dtype == signed_dtype\n+    assert np.array_equal(decoded.values, original_values)\n+\n+\n+@pytest.mark.parametrize(\"bits\", [1, 2, 4, 8])\n+def test_decode_signed_to_unsigned(bits):\n+    unsigned_dtype = np.dtype(f\"u{bits}\")\n+    signed_dtype = np.dtype(f\"i{bits}\")\n+    original_values = np.array([np.iinfo(unsigned_dtype).max], dtype=unsigned_dtype)\n+    encoded = xr.Variable(\n+        (\"x\",), original_values.astype(signed_dtype), attrs={\"_Unsigned\": \"true\"}\n+    )\n+    coder = variables.UnsignedIntegerCoder()\n+    decoded = coder.decode(encoded)\n+    assert decoded.dtype == unsigned_dtype\n+    assert np.array_equal(decoded.values, original_values)\n     original = xr.Variable((\"x\",), [0, -1, 1], {\"_FillValue\": -1})\n     expected = xr.Variable((\"x\",), [0, np.nan, 1])\n     coder = variables.CFMaskCoder()\n",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..1518948 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1919,6 +1919,17 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n+    # Test case with scalar as second argument and keep_attrs=True\n+    cond = xr.DataArray([True, False, True], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={})  # Scalars have no attrs\n+    assert_identical(expected, actual)\n+\n+    # Test case with scalar as second argument and keep_attrs=False\n+    actual = xr.where(cond, 1, 0, keep_attrs=False)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\")\n+    assert_identical(expected, actual)\n+\n \n def test_where_attrs() -> None:\n     cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n@@ -1928,6 +1939,17 @@ def test_where_attrs() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n     assert_identical(expected, actual)\n \n+    # Test case with scalar as second argument and keep_attrs=True\n+    cond = xr.DataArray([True, False, True], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={})  # Scalars have no attrs\n+    assert_identical(expected, actual)\n+\n+    # Test case with scalar as second argument and keep_attrs=False\n+    actual = xr.where(cond, 1, 0, keep_attrs=False)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\")\n+    assert_identical(expected, actual)\n+\n \n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n",
  "pydata__xarray-6599": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f1ec005..381ab8f 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -2010,6 +2010,14 @@ def test_where_attrs() -> None:\n             ),\n             id=\"datetime\",\n         ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array([1000, 2000, 3000], dtype=\"timedelta64[ns]\"), dims=\"x\"\n+            ),\n+            xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n+            xr.DataArray([1000.0, 2000.0, 3000.0], dims=\"x\"),\n+            id=\"timedelta\",\n+        ),\n     ],\n )\n def test_polyval(\n",
  "pydata__xarray-6721": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex cab9007..b6556d7 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -220,7 +220,33 @@ class InaccessibleVariableDataStore(backends.InMemoryDataStore):\n         return {k: lazy_inaccessible(k, v) for k, v in self._variables.items()}\n \n \n+from xarray.core.dataset import Dataset\n+from xarray.core.variable import Variable\n+from xarray.core.indexing import InaccessibleArray\n+from xarray.core.dataarray import DataArray\n+from xarray.core.indexes import Index\n+import xarray as xr\n+import pytest\n+import numpy as np\n+\n+\n class TestDataset:\n+    def test_chunks_does_not_load_data(self) -> None:\n+        store = InaccessibleVariableDataStore()\n+        create_test_data().dump_to_store(store)\n+        ds = open_dataset(store)\n+        # Ensure accessing chunks does not load data\n+        assert ds.chunks is None  # Since `ds` is not chunked, chunks should be None\n+\n+    def test_chunks_does_not_load_data_with_chunks(self) -> None:\n+        store = InaccessibleVariableDataStore()\n+        create_test_data().dump_to_store(store)\n+        ds = open_dataset(store).chunk({\"dim1\": 2, \"dim2\": 2})\n+        # Ensure accessing chunks does not load data\n+        assert ds.chunks is not None\n+        assert isinstance(ds.chunks, dict)\n+        expected_chunks = {\"dim1\": (2, 2, 2, 2), \"dim2\": (2, 2, 2, 2, 1)}\n+        assert ds.chunks == expected_chunks\n     def test_repr(self) -> None:\n         data = create_test_data(seed=123)\n         data.attrs[\"foo\"] = \"bar\"\n",
  "pydata__xarray-6744": "",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "diff --git a/xarray/tests/test_indexes.py b/xarray/tests/test_indexes.py\nindex fa8bd84..86c032e 100644\n--- a/xarray/tests/test_indexes.py\n+++ b/xarray/tests/test_indexes.py\n@@ -688,6 +688,29 @@ def test_safe_cast_to_index_cftimeindex():\n         assert isinstance(actual, type(expected))\n \n \n+import pytest\n+import xarray as xr\n+import numpy as np\n+\n+@pytest.mark.parametrize(\"dtype\", [\"int32\", \"float32\", \"int64\", \"float64\"])\n+def test_stack_dtype_preservation(dtype: str) -> None:\n+    ds = xr.Dataset(coords={\"a\": np.array([0, 1], dtype=dtype)})\n+    stacked_ds = ds.stack(baz=(\"a\",))\n+    assert str(ds[\"a\"].values.dtype) == str(stacked_ds[\"a\"].values.dtype), (\n+        f\"Original dtype {ds['a'].values.dtype} should match stacked dtype \"\n+        f\"{stacked_ds['a'].values.dtype}\"\n+    )\n+\n+@pytest.mark.parametrize(\"dtype\", [\"int32\", \"int64\"])\n+def test_stack_and_slice_int_dtype(dtype: str) -> None:\n+    ds = xr.Dataset(coords={\"a\": np.array([0, 1, 2], dtype=dtype)})\n+    stacked_ds = ds.stack(baz=(\"a\",))\n+    sliced_ds = stacked_ds.sel(baz=slice(1, 2))\n+    assert str(ds[\"a\"].values.dtype) == str(sliced_ds[\"a\"].values.dtype), (\n+        f\"Original dtype {ds['a'].values.dtype} should remain {sliced_ds['a'].values.dtype} \"\n+        f\"after slicing\"\n+    )\n+\n # Test that datetime.datetime objects are never used in a CFTimeIndex\n @requires_cftime\n def test_safe_cast_to_index_datetime_datetime():\n@@ -696,4 +719,4 @@ def test_safe_cast_to_index_datetime_datetime():\n     expected = pd.Index(dates)\n     actual = safe_cast_to_index(np.array(dates))\n     assert_array_equal(expected, actual)\n-    assert isinstance(actual, pd.Index)\n+    assert isinstance(actual, pd.Index)\n",
  "pylint-dev__pylint-4970": "",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..3b77602 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -94,9 +94,16 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+from pylint.lint import Run\n+import pytest\n+from _pytest.capture import CaptureFixture\n+from unittest.mock import patch\n+import sys\n+import os\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9123ae4..a6762ec 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1233,6 +1233,36 @@ class TestRunTC:\n             expected_output=\"No such file or directory\",\n         )\n \n+    def test_recursive_ignore_behavior(self):\n+        \"\"\"Test that recursive linting respects ignore options\"\"\"\n+\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore=ignored_subdirectory\",\n+            ],\n+            expected_output=\"No lint errors\"\n+        )\n+\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-patterns=ignored_.*\",\n+            ],\n+            expected_output=\"No lint errors\"\n+        )\n+\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-paths=.*ignored_subdirectory.*\",\n+            ],\n+            expected_output=\"No lint errors\"\n+        )\n+\n     def test_recursive(self):\n         self._runtest(\n             [join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"), \"--recursive=y\"],\n",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..a39fa3c 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1329,8 +1329,25 @@ class TestRunTC:\n                     [\".\", \"--recursive=y\"],\n                     code=0,\n                 )\n-\n-    def test_regression_recursive_current_dir(self):\n+    def test_ignore_paths_with_recursive_option(self):\n+        \"\"\"Test that `ignore-paths` are respected when using --recursive=y.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^ignored_subdirectory/.*\",\n+                        \"--ignore-paths=^another_ignored_directory/.*\",\n+                    ],\n+                    code=0,\n+                )\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n             # astroid to believe that directory is a package.\n",
  "pylint-dev__pylint-7277": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9f95f7b..a3d4b6c 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -765,6 +765,24 @@ a.py:1:4: E0001: Parsing failed: 'invalid syntax (<unknown>, line 1)' (syntax-er\n                 modify_sys_path()\n             assert sys.path == paths[1:]\n \n+            paths = [\"\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:], \"First item '' should be removed\"\n+\n+            paths = [\".\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath(\".\"):\n+                modify_sys_path()\n+            assert sys.path == paths[1:], \"First item '.' should be removed\"\n+\n+            paths = [\"/do_not_remove\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths, \"First item '/do_not_remove' should not be removed\"\n+\n             paths = [cwd, \"/custom_pythonpath\", *default_paths]\n             sys.path = copy(paths)\n             with _test_environ_pythonpath(\"/custom_pythonpath\"):\n",
  "pytest-dev__pytest-10051": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex 26c4c15..b3c2b19 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -160,6 +160,8 @@ def logging_during_setup_and_teardown(caplog):\n     assert [x.message for x in caplog.get_records(\"teardown\")] == [\"a_teardown_log\"]\n \n \n+import logging\n+\n def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardown):\n     assert not caplog.records\n     assert not caplog.get_records(\"call\")\n@@ -171,8 +173,19 @@ def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardow\n     # This reaches into private API, don't use this type of thing in real tests!\n     assert set(caplog._item.stash[caplog_records_key]) == {\"setup\", \"call\"}\n \n+def test_caplog_get_records_and_clear_consistency(caplog):\n+    \"\"\"Test to ensure caplog.get_records() and caplog.clear() work consistently.\"\"\"\n+    def verify_consistency():\n+        assert caplog.get_records(\"call\") == caplog.records\n \n-def test_ini_controls_global_log_level(pytester: Pytester) -> None:\n+    verify_consistency()\n+    logging.warning(\"First log message\")\n+    verify_consistency()\n+    caplog.clear()\n+    verify_consistency()  # Ensure the records are cleared\n+    logging.warning(\"Second log message\")\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"Second log message\"]\n+    verify_consistency()  # Ensure consistency after logging again\n     pytester.makepyfile(\n         \"\"\"\n         import pytest\n",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_debugging.py b/testing/test_debugging.py\nindex 912abd7..469066f 100644\n--- a/testing/test_debugging.py\n+++ b/testing/test_debugging.py\n@@ -192,7 +192,30 @@ class TestPDB:\n         child.sendeof()\n         self.flush(child)\n \n-    def test_pdb_print_captured_stdout_and_stderr(self, pytester: Pytester) -> None:\n+    def test_pdb_unittest_teardown_skipped(self, pytester: Pytester) -> None:\n+        \"\"\"Ensure tearDown is not called for skipped classes when using --pdb\"\"\"\n+        p1 = pytester.makepyfile(\n+            \"\"\"\n+            import unittest\n+            import pytest\n+\n+            @unittest.skip(\"Skipping the entire test class\")\n+            class MyTestCase(unittest.TestCase):\n+                def setUp(self):\n+                    print(\"setUp executed\")\n+\n+                def tearDown(self):\n+                    raise Exception(\"tearDown should not be called\")\n+                \n+                def test_one(self):\n+                    assert 0\n+            \"\"\"\n+        )\n+        child = pytester.spawn_pytest(f\"--pdb {p1}\")\n+        child.expect(\"Skipping the entire test class\")\n+        child.expect_exact(\"= 1 skipped in\")\n+        child.sendeof()\n+        self.flush(child)\n         p1 = pytester.makepyfile(\n             \"\"\"\n             def test_1():\n",
  "pytest-dev__pytest-5262": "",
  "pytest-dev__pytest-5631": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex e422b03..d927db8 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -6,7 +6,8 @@ import textwrap\n import py\n \n import pytest\n-from _pytest.main import _in_venv\n+import numpy as np\n+from unittest.mock import patch\n from _pytest.main import ExitCode\n from _pytest.main import Session\n \n@@ -18,7 +19,22 @@ class TestCollector:\n         assert not issubclass(Collector, Item)\n         assert not issubclass(Item, Collector)\n \n-    def test_check_equality(self, testdir):\n+    def test_patch_with_numpy_array(self, testdir):\n+        \"\"\"Test collection with a mock patch where 'new' is a numpy array.\"\"\"\n+        testdir.makepyfile(\n+            \"\"\"\n+            import numpy as np\n+            from unittest.mock import patch\n+\n+            @patch('dummy.FOO', new=np.array([-5.5, 3.0]))\n+            def test_dummy():\n+                import dummy\n+                assert dummy.FOO[0] == -5.5\n+                assert dummy.FOO[1] == 3.0\n+            \"\"\"\n+        )\n+        reprec = testdir.inline_run()\n+        reprec.assertoutcome(passed=1)\n         modcol = testdir.getmodulecol(\n             \"\"\"\n             def test_pass(): pass\n",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..5e4da7d 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -119,15 +119,27 @@ class TestPaste(object):\n \n             monkeypatch.setattr(urllib.request, \"urlopen\", mocked)\n         return calls\n-\n     def test_create_new_paste(self, pastebin, mocked_urlopen):\n         result = pastebin.create_new_paste(b\"full-paste-contents\")\n         assert result == \"https://bpaste.net/show/3c0c6750bd\"\n         assert len(mocked_urlopen) == 1\n         url, data = mocked_urlopen[0]\n         assert type(data) is bytes\n-        lexer = \"python3\" if sys.version_info[0] >= 3 else \"python\"\n+        lexer = \"text\"  # Updated to reflect the fix\n         assert url == \"https://bpaste.net\"\n         assert \"lexer=%s\" % lexer in data.decode()\n         assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n+\n+    def test_create_new_paste_with_non_python_content(self, pastebin, mocked_urlopen):\n+        # Test with content that is not Python code\n+        result = pastebin.create_new_paste(b\"some non-python content\")\n+        assert result == \"https://bpaste.net/show/3c0c6750bd\"\n+        assert len(mocked_urlopen) == 1\n+        url, data = mocked_urlopen[0]\n+        assert type(data) is bytes\n+        lexer = \"text\"  # Ensure that lexer is 'text' for non-python content\n+        assert url == \"https://bpaste.net\"\n+        assert \"lexer=%s\" % lexer in data.decode()\n+        assert \"code=some non-python content\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n",
  "pytest-dev__pytest-6202": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex fb6b260..ca5589f 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -703,6 +703,28 @@ class Test_genitems:\n         assert items[2].name == \"testmethod_one\"\n \n         # let's also test getmodpath here\n+\n+    def test_example_items_with_special_chars(self, testdir):\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            \n+            @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+            def testmethod_two(arg0):\n+                pass\n+\n+            class TestY:\n+                def testmethod_two(self, arg0):\n+                    pass\n+        \"\"\"\n+        )\n+        items, reprec = testdir.inline_genitems(p)\n+        assert len(items) == 2\n+        assert items[0].name == \"testmethod_two[.[]\"\n+        assert items[1].name == \"testmethod_two[.[]\"\n+        # Check if getmodpath correctly handles the special case\n+        assert items[0].getmodpath() == \"testmethod_two[.[]\"\n+        assert items[1].getmodpath() == \"TestY.testmethod_two[.[]\"\n         assert items[0].getmodpath() == \"testone\"\n         assert items[1].getmodpath() == \"TestX.testmethod_one\"\n         assert items[2].getmodpath() == \"TestY.testmethod_one\"\n",
  "pytest-dev__pytest-7205": "diff --git a/testing/test_setuponly.py b/testing/test_setuponly.py\nindex 8211d39..f36878f 100644\n--- a/testing/test_setuponly.py\n+++ b/testing/test_setuponly.py\n@@ -1,3 +1,4 @@\n+\n import pytest\n from _pytest.config import ExitCode\n \n@@ -141,6 +142,23 @@ def test_show_fixtures_with_parameters(testdir, mode):\n     '''\n     )\n \n+\n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue: BytesWarning when using --setup-show with bytes parameter\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n+\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n+\n     result = testdir.runpytest(mode, p)\n     assert result.ret == 0\n \n@@ -154,6 +172,23 @@ def test_show_fixtures_with_parameters(testdir, mode):\n     )\n \n \n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue: BytesWarning when using --setup-show with bytes parameter\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n+\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n+\n+\n def test_show_fixtures_with_parameter_ids(testdir, mode):\n     testdir.makeconftest(\n         '''\n@@ -175,6 +210,23 @@ def test_show_fixtures_with_parameter_ids(testdir, mode):\n     '''\n     )\n \n+\n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue: BytesWarning when using --setup-show with bytes parameter\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n+\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n+\n     result = testdir.runpytest(mode, p)\n     assert result.ret == 0\n \n@@ -183,6 +235,23 @@ def test_show_fixtures_with_parameter_ids(testdir, mode):\n     )\n \n \n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue: BytesWarning when using --setup-show with bytes parameter\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n+\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n+\n+\n def test_show_fixtures_with_parameter_ids_function(testdir, mode):\n     p = testdir.makepyfile(\n         \"\"\"\n@@ -195,6 +264,23 @@ def test_show_fixtures_with_parameter_ids_function(testdir, mode):\n     \"\"\"\n     )\n \n+\n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue: BytesWarning when using --setup-show with bytes parameter\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n+\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n+\n     result = testdir.runpytest(mode, p)\n     assert result.ret == 0\n \n@@ -291,4 +377,21 @@ def test_setup_show_with_KeyboardInterrupt_in_test(testdir):\n             \"*= no tests ran in *\",\n         ]\n     )\n+\n+\n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue: BytesWarning when using --setup-show with bytes parameter\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n+\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n     assert result.ret == ExitCode.INTERRUPTED\n",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..4febab0 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,10 +1,11 @@\n+\n import sys\n \n import pytest\n from _pytest.runner import runtestprotocol\n from _pytest.skipping import evaluate_skip_marks\n from _pytest.skipping import evaluate_xfail_marks\n-from _pytest.skipping import pytest_runtest_setup\n+from _pytest.pytester import Testdir\n \n \n class TestEvaluation:\n@@ -152,6 +153,32 @@ class TestEvaluation:\n         assert skipped\n         assert skipped.reason == \"condition: config._hackxyz\"\n \n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(\n+        self, testdir: Testdir\n+    ) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n \n class TestXFail:\n     @pytest.mark.parametrize(\"strict\", [True, False])\n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..b500a84 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -512,6 +512,12 @@ class TestCaptureFixture:\n                 capfd.close()\n             \"\"\"\n         )\n+\n+    @pytest.mark.parametrize(\"nl\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_cafd_preserves_newlines(self, capfd, nl):\n+        print(\"test\", end=nl)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(nl)\n         reprec.assertoutcome(passed=1)\n \n     def test_capfdbinary(self, testdir):\n@@ -526,6 +532,12 @@ class TestCaptureFixture:\n                 assert err == b''\n             \"\"\"\n         )\n+\n+    @pytest.mark.parametrize(\"nl\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_cafd_preserves_newlines(self, capfd, nl):\n+        print(\"test\", end=nl)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(nl)\n         reprec.assertoutcome(passed=1)\n \n     def test_capsysbinary(self, testdir):\n",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..53bd8bf 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import pytest\n@@ -50,6 +51,32 @@ def test_change_level_undo(testdir):\n     result.stdout.no_fnmatch_line(\"*log from test2*\")\n \n \n+def test_change_level_undos_handler_level(testdir: Testdir) -> None:\n+    \"\"\"Ensure that 'set_level' is undone after the end of the test (handler).\n+\n+    Issue #7569. Tests the handler level specifically.\n+    \"\"\"\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test1(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(41)\n+            assert caplog.handler.level == 41\n+\n+        def test2(caplog):\n+            assert caplog.handler.level == 0\n+\n+        def test3(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(43)\n+            assert caplog.handler.level == 43\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=3)\n+\n def test_with_statement(caplog):\n     with caplog.at_level(logging.INFO):\n         logger.debug(\"handler DEBUG level\")\n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..63b2705 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,4 +1,26 @@\n+\n import os\n+def test_collect_nested_symlink_dir(pytester: Pytester) -> None:\n+    \"\"\"A nested symlinked directory and symlink to a symlink are collected.\"\"\"\n+    # Create a directory with a test\n+    dir1 = pytester.mkdir(\"dir1\")\n+    dir1.joinpath(\"test_in_dir1.py\").write_text(\"def test_one(): pass\", \"utf-8\")\n+\n+    # Create a symlink to dir1\n+    symlink_to_dir1 = pytester.path.joinpath(\"symlink_to_dir1\")\n+    symlink_to_dir1.symlink_to(dir1)\n+\n+    # Create a second directory with a test\n+    dir2 = pytester.mkdir(\"dir2\")\n+    dir2.joinpath(\"test_in_dir2.py\").write_text(\"def test_two(): pass\", \"utf-8\")\n+\n+    # Create a nested symlink inside dir2 pointing to symlink_to_dir1\n+    nested_symlink = dir2.joinpath(\"nested_symlink\")\n+    nested_symlink.symlink_to(symlink_to_dir1)\n+\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=4)  # 2 tests in dir1, 1 in dir2, 1 through nested symlink\n+\n import pprint\n import sys\n import textwrap\n@@ -9,7 +31,7 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n-from _pytest.pytester import Testdir\n+from _pytest.pytester import Testdir, Pytester\n \n \n class TestCollector:\n",
  "pytest-dev__pytest-8399": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 2c720b0..31312c3 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -301,8 +301,29 @@ def test_setup_setUpClass(pytester: Pytester) -> None:\n     reprec = pytester.inline_run(testpath)\n     reprec.assertoutcome(passed=3)\n \n+def test_fixtures_unittest_setUpClass_visibility(pytester: Pytester) -> None:\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+\n+        class TestVisibility(unittest.TestCase):\n+            @classmethod\n+            def setUpClass(cls):\n+                pass\n \n-def test_setup_class(pytester: Pytester) -> None:\n+            def test_example(self):\n+                pass\n+        \"\"\"\n+    )\n+    # Run with --fixtures and check that the fixture is not listed without -v\n+    result = pytester.runpytest(\"--fixtures\")\n+    assert result.ret == 0\n+    result.stdout.no_fnmatch_line(\"*unittest_setUpClass_fixture_TestVisibility*\")\n+\n+    # Run with --fixtures -v and check that the fixture is listed\n+    result = pytester.runpytest(\"--fixtures\", \"-v\")\n+    assert result.ret == 0\n+    result.stdout.fnmatch_lines([\"*unittest_setUpClass_fixture_TestVisibility*\"])\n     testpath = pytester.makepyfile(\n         \"\"\"\n         import unittest\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..32673f4 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -574,6 +574,34 @@ def test_class_weights_cv():\n     assert_array_equal(reg.predict([[-.2, 2]]), np.array([-1]))\n \n \n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    rng = np.random.RandomState(42)\n+\n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-.8, -1.0],\n+                  [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+\n+    n_samples = x.shape[0]\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+    # with len(y.shape) == 1\n+    n_targets = 1\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_alphas)\n+\n+    # Extend to multi-target by transposing y\n+    y = np.array([[1, 1, 1, -1, -1],\n+                  [1, -1, 1, -1, 1],\n+                  [-1, -1, 1, -1, -1]]).transpose()\n+    n_targets = y.shape[1]\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n+\n+\n def test_ridgecv_store_cv_values():\n     # Test _RidgeCV's store_cv_values attribute.\n     rng = rng = np.random.RandomState(42)\n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..a735392 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -184,7 +184,18 @@ def test_int_overflow_mutual_info_score():\n     assert_all_finite(mutual_info_score(x.ravel(), y.ravel()))\n \n \n-def test_entropy():\n+from sklearn.metrics import fowlkes_mallows_score\n+import numpy as np\n+from sklearn.utils.testing import assert_all_finite\n+\n+def test_int_overflow_fowlkes_mallows_score():\n+    # Test overflow in fowlkes_mallows_score\n+    # Large clusters to trigger potential overflow if not handled correctly\n+    x = np.array([1] * (52632 + 2529) + [2] * (14660 + 793) + [3] * (3271 + 204) + [4] * (814 + 39) + [5] * (316 + 20))\n+    y = np.array([0] * 52632 + [1] * 2529 + [0] * 14660 + [1] * 793 + [0] * 3271 + [1] * 204 + [0] * 814 + [1] * 39 + [0] * 316 + [1] * 20)\n+\n+    score = fowlkes_mallows_score(x, y)\n+    assert_all_finite(score)\n     ent = entropy([0, 0, 42.])\n     assert_almost_equal(ent, 0.6365141, 5)\n     assert_almost_equal(entropy([]), 1)\n",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..1e84145 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -558,8 +558,32 @@ def test_feature_names():\n     for idx, name in enumerate(feature_names):\n         assert_equal(idx, cv.vocabulary_.get(name))\n \n-\n-def test_vectorizer_max_features():\n+def test_countvectorizer_with_provided_vocabulary():\n+    \"\"\"Test that get_feature_names and transform work without fitting\n+    when vocabulary is provided.\"\"\"\n+    vocab = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    vectorizer = CountVectorizer(vocabulary=vocab)\n+    \n+    # Check that get_feature_names() does not raise an error and returns the correct features\n+    feature_names = vectorizer.get_feature_names()\n+    assert_equal(feature_names, vocab)\n+    \n+    # Prepare a sample corpus\n+    corpus = [\n+        'This is the first document.',\n+        'This is the second second document.',\n+        'And the third one.',\n+        'Is this the first document?',\n+    ]\n+    \n+    # Transform the corpus\n+    X = vectorizer.transform(corpus)\n+    \n+    # Check the shape of the transformed matrix\n+    assert_equal(X.shape, (4, 9))\n+    \n+    # Check that vocabulary_ is set\n+    assert_true(hasattr(vectorizer, \"vocabulary_\"))\n     vec_factories = (\n         CountVectorizer,\n         TfidfVectorizer,\n",
  "scikit-learn__scikit-learn-11310": "diff --git a/sklearn/model_selection/tests/test_search.py b/sklearn/model_selection/tests/test_search.py\nindex 0b1d5f9..47437a1 100644\n--- a/sklearn/model_selection/tests/test_search.py\n+++ b/sklearn/model_selection/tests/test_search.py\n@@ -1168,6 +1168,10 @@ def test_search_cv_timing():\n             assert_true(np.all(search.cv_results_[key] < 1))\n \n         for key in ['mean_score_time', 'std_score_time']:\n+            # Check that the refit_time_ attribute is present and valid\n+            assert_true(hasattr(search, \"refit_time_\"))\n+            assert_true(isinstance(search.refit_time_, float))\n+            assert_greater_equal(search.refit_time_, 0)\n             assert_true(search.cv_results_[key][1] >= 0)\n             assert_true(search.cv_results_[key][0] == 0.0)\n             assert_true(np.all(search.cv_results_[key] < 1))\n",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..f86997e 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -21,8 +21,13 @@ from sklearn.utils.testing import assert_true\n from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import ignore_warnings\n from sklearn.utils.testing import assert_warns_message\n+from sklearn.metrics.scorer import get_scorer\n+from sklearn.linear_model.logistic import _log_reg_scoring_path\n+from sklearn.datasets import make_classification\n+from sklearn.preprocessing import LabelEncoder\n+from sklearn.utils._testing import assert_array_almost_equal\n \n-from sklearn.exceptions import ConvergenceWarning\n+import pytest\n from sklearn.exceptions import ChangedBehaviorWarning\n from sklearn.linear_model.logistic import (\n     LogisticRegression,\n@@ -491,8 +496,31 @@ def test_logistic_cv():\n     scores = np.asarray(list(lr_cv.scores_.values()))\n     assert_array_equal(scores.shape, (1, 3, 1))\n \n-\n-def test_multinomial_logistic_regression_string_inputs():\n+@pytest.mark.parametrize('scoring, multiclass_agg_list',\n+                         [('accuracy', ['']),\n+                          ('precision', ['_macro', '_weighted']),\n+                          ('f1', ['_macro', '_weighted']),\n+                          ('neg_log_loss', ['']),\n+                          ('recall', ['_macro', '_weighted'])])\n+def test_logistic_cv_multinomial_score(scoring, multiclass_agg_list):\n+    # Test that LogisticRegressionCV uses the right score to compute its\n+    # cross-validation scores when using a multinomial scoring\n+    # See issue #8720\n+    X, y = make_classification(n_samples=100, random_state=0, n_classes=3, n_informative=6)\n+    train, test = np.arange(80), np.arange(80, 100)\n+    lr = LogisticRegression(C=1., solver='lbfgs', multi_class='multinomial')\n+    # We use lbfgs to support multinomial\n+    params = lr.get_params()\n+    # We store the params to set them further in _log_reg_scoring_path\n+    for key in ['C', 'n_jobs', 'warm_start']:\n+        del params[key]\n+    lr.fit(X[train], y[train])\n+    for averaging in multiclass_agg_list:\n+        scorer = get_scorer(scoring + averaging)\n+        assert_array_almost_equal(\n+            _log_reg_scoring_path(X, y, train, test, Cs=[1.],\n+                                  scoring=scorer, **params)[2][0],\n+            scorer(lr, X[test], y[test]))\n     # Test with string labels for LogisticRegression(CV)\n     n_samples, n_features, n_classes = 50, 5, 3\n     X_ref, y = make_classification(n_samples=n_samples, n_features=n_features,\n",
  "scikit-learn__scikit-learn-12585": "diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 4752f9c..4b7e862 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -154,7 +154,35 @@ def test_clone_nan():\n     assert clf.empty is clf2.empty\n \n \n-def test_clone_sparse_matrices():\n+from sklearn.base import clone, BaseEstimator\n+from sklearn.utils.estimator_checks import check_estimator\n+\n+class MyEstimator(BaseEstimator):\n+    def __init__(self, empty=None):\n+        self.empty = empty\n+\n+def test_clone_estimator_types():\n+    # Check that clone works for parameters that are types rather than instances\n+    clf = MyEstimator(empty=MyEstimator)\n+    clf2 = clone(clf)\n+    assert clf.empty is clf2.empty\n+\n+def test_clone_with_estimator_instance():\n+    # Check that clone correctly handles an estimator instance as a parameter\n+    instance = MyEstimator()\n+    clf = MyEstimator(empty=instance)\n+    clf2 = clone(clf)\n+    assert clf.empty is not clf2.empty\n+    assert isinstance(clf2.empty, MyEstimator)\n+\n+def test_clone_mixed_estimator_type_and_instance():\n+    # Check behavior with a mix of estimator classes and instances\n+    instance = MyEstimator()\n+    clf = MyEstimator(empty=(MyEstimator, instance))\n+    clf2 = clone(clf)\n+    assert clf.empty[0] is clf2.empty[0]  # Class type should stay the same\n+    assert clf.empty[1] is not clf2.empty[1]  # Instance should be cloned\n+    assert isinstance(clf2.empty[1], MyEstimator)\n     sparse_matrix_classes = [\n         getattr(sp, name)\n         for name in dir(sp) if name.endswith('_matrix')]\n",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..0849944 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -5,6 +5,28 @@ from distutils.version import LooseVersion\n import numpy as np\n from scipy import linalg\n \n+@pytest.mark.parametrize('init_copy_X, fit_copy_X, expected', [\n+    (True, None, True),\n+    (False, None, False),\n+    (True, False, False),\n+    (False, True, True),\n+])\n+def test_lasso_lars_ic_copy_X_priority(init_copy_X, fit_copy_X, expected):\n+    \"\"\"Test that LassoLarsIC respects the priority of the copy_X parameter.\"\"\"\n+    lasso_lars = LassoLarsIC(copy_X=init_copy_X, precompute=False)\n+    rng = np.random.RandomState(0)\n+    X = rng.normal(0, 1, (100, 5))\n+    X_copy = X.copy()\n+    y = X[:, 2]\n+    \n+    # If fit_copy_X is None, do not pass it to fit, so it uses the default\n+    if fit_copy_X is None:\n+        lasso_lars.fit(X, y)\n+    else:\n+        lasso_lars.fit(X, y, copy_X=fit_copy_X)\n+    \n+    assert expected == np.array_equal(X, X_copy)\n+\n import pytest\n \n from sklearn.model_selection import train_test_split\n@@ -18,7 +40,9 @@ from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import TempMemmap\n from sklearn.exceptions import ConvergenceWarning\n from sklearn import linear_model, datasets\n-from sklearn.linear_model.least_angle import _lars_path_residues\n+from sklearn.linear_model.least_angle import _lars_path_residues, LassoLarsIC\n+import pytest\n+import numpy as np\n \n diabetes = datasets.load_diabetes()\n X, y = diabetes.data, diabetes.target\n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..7121da7 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -494,7 +494,33 @@ def test_shuffle_stratifiedkfold():\n     check_cv_coverage(kf0, X_40, y, groups=None, expected_n_splits=5)\n \n \n-def test_kfold_can_detect_dependent_samples_on_digits():  # see #2372\n+def test_shuffling_with_different_random_states():\n+    # Test to ensure different random states lead to different shuffles\n+    X = np.arange(20)\n+    y = [0] * 10 + [1] * 10\n+\n+    kf1 = StratifiedKFold(n_splits=10, shuffle=True, random_state=42)\n+    kf2 = StratifiedKFold(n_splits=10, shuffle=True, random_state=43)\n+\n+    test_set1 = [test_idx for _, test_idx in kf1.split(X, y)]\n+    test_set2 = [test_idx for _, test_idx in kf2.split(X, y)]\n+\n+    # Ensure that the test sets are not identical for different random states\n+    assert test_set1 != test_set2\n+\n+def test_no_shuffling_without_shuffle_flag():\n+    # Test to ensure no shuffling occurs when shuffle=False\n+    X = np.arange(20)\n+    y = [0] * 10 + [1] * 10\n+\n+    kf1 = StratifiedKFold(n_splits=10, shuffle=False)\n+    kf2 = StratifiedKFold(n_splits=10, shuffle=False)\n+\n+    test_set1 = [test_idx for _, test_idx in kf1.split(X, y)]\n+    test_set2 = [test_idx for _, test_idx in kf2.split(X, y)]\n+\n+    # Ensure that the test sets are identical when shuffle is False\n+    assert test_set1 == test_set2\n     # The digits samples are dependent: they are apparently grouped by authors\n     # although we don't have any information on the groups segment locations\n     # for this data. We can highlight this fact by computing k-fold cross-\n",
  "scikit-learn__scikit-learn-13135": "",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..4bd0cc5 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -597,8 +597,13 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_array_equal(Y_pred1, Y_pred2)\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n-\n-def test_gaussian_mixture_fit():\n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=10, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n     rand_data = RandomData(rng)\n",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..456fc64 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -6,6 +7,10 @@ Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n #          Alexandre Gramfort <alexandre.gramfort@telecom-paristech.fr>\n # License: BSD 3 clause\n \n+import numpy as np\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n+\n import pytest\n \n import numpy as np\n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..e622bcc 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -503,7 +503,48 @@ def test_transform():\n     assert_array_equal(eclf3.transform(X).shape, (3, 4, 2))\n     assert_array_almost_equal(eclf1.transform(X),\n                               eclf2.transform(X))\n+\n+@pytest.mark.parametrize(\n+    \"X, y, voter\",\n+    [(load_iris(return_X_y=True)[0], load_iris(return_X_y=True)[1], \n+      VotingClassifier(estimators=[\n+          ('lr', LogisticRegression()), \n+          ('rf', RandomForestClassifier(n_estimators=5))])\n+     ),\n+     (make_regression(n_samples=100, n_features=4, noise=0.1, random_state=42)[0], \n+      make_regression(n_samples=100, n_features=4, noise=0.1, random_state=42)[1],\n+      VotingRegressor(estimators=[\n+          ('lr', LinearRegression()), \n+          ('rf', RandomForestRegressor(n_estimators=5))])\n+     )]\n+)\n+def test_none_estimator_with_weights(X, y, voter):\n+    # Test that setting an estimator to None works with sample weights\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    voter.set_params(lr=None)\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    y_pred = voter.predict(X)\n+    assert y_pred.shape == y.shape\n+\n+def test_all_none_estimators_with_weights():\n+    # Test that setting all estimators to None raises an error\n+    with pytest.raises(ValueError, match=\"All estimators are None\"):\n+        X, y = load_iris(return_X_y=True)\n+        voter = VotingClassifier(\n+            estimators=[('lr', None), ('rf', None)]\n+        )\n+        voter.fit(X, y, sample_weight=np.ones(y.shape))\n+\n+def test_partial_none_estimators_with_weights():\n+    # Test that setting one of multiple estimators to None works with sample weights\n+    X, y = load_iris(return_X_y=True)\n+    voter = VotingClassifier(\n+        estimators=[('lr', LogisticRegression()), ('rf', None)]\n+    )\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    y_pred = voter.predict(X)\n+    assert y_pred.shape == y.shape\n     assert_array_almost_equal(\n             eclf3.transform(X).swapaxes(0, 1).reshape((4, 6)),\n             eclf2.transform(X)\n-    )\n+    )\n",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..eed23fc 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -396,6 +396,21 @@ def test_export_text():\n     assert export_text(reg, decimals=1) == expected_report\n     assert export_text(reg, decimals=1, show_weights=True) == expected_report\n \n+    # Test export_text with a single feature to ensure no IndexError\n+    X_single = [[-2], [-1], [-1], [1], [1], [2]]\n+    reg_single = DecisionTreeRegressor(max_depth=2, random_state=0)\n+    reg_single.fit(X_single, y_mo)\n+\n+    expected_report_single = dedent(\"\"\"\n+    |--- first <= 0.0\n+    |   |--- value: [-1.0, -1.0]\n+    |--- first >  0.0\n+    |   |--- value: [1.0, 1.0]\n+    \"\"\").lstrip()\n+\n+    assert export_text(reg_single, decimals=1, feature_names=['first']) == expected_report_single\n+    assert export_text(reg_single, decimals=1, show_weights=True, feature_names=['first']) == expected_report_single\n+\n \n def test_plot_tree_entropy(pyplot):\n     # mostly smoke tests\n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..00dbc0c 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1532,7 +1532,32 @@ def test_LogisticRegressionCV_GridSearchCV_elastic_net_ovr():\n     assert (lrcv.predict(X_test) == gs.predict(X_test)).mean() >= .8\n \n \n-@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial'))\n+@pytest.mark.parametrize('penalty', ('l2', 'elasticnet'))\n+@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial', 'auto'))\n+def test_LogisticRegressionCV_no_refit_issue(penalty, multi_class):\n+    # Test LogisticRegressionCV with refit=False to ensure no IndexError is raised\n+\n+    # Setup similar data to the issue description\n+    np.random.seed(29)\n+    X = np.random.normal(size=(1000, 3))\n+    beta = np.random.normal(size=3)\n+    intercept = np.random.normal(size=None)\n+    y = np.sign(intercept + X @ beta)\n+\n+    if penalty == 'elasticnet':\n+        l1_ratios = np.linspace(0, 1, 2)\n+    else:\n+        l1_ratios = None\n+\n+    # Reproduce the issue\n+    lrcv = LogisticRegressionCV(\n+        cv=5, solver='saga', tol=1e-2, refit=False,\n+        penalty=penalty, multi_class=multi_class, l1_ratios=l1_ratios\n+    )\n+    try:\n+        lrcv.fit(X, y)\n+    except IndexError:\n+        pytest.fail(\"IndexError was raised when calling fit with refit=False.\")\n def test_LogisticRegressionCV_no_refit(multi_class):\n     # Test LogisticRegressionCV attribute shapes when refit is False\n \n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/_show_versions.py b/sklearn/utils/_show_versions.py\nindex 72f054a..13bf362 100644\n--- a/sklearn/utils/_show_versions.py\n+++ b/sklearn/utils/_show_versions.py\n@@ -48,6 +48,7 @@ def _get_deps_info():\n         \"Cython\",\n         \"pandas\",\n         \"matplotlib\",\n+        \"joblib\",\n     ]\n \n     def get_version(module):\n",
  "scikit-learn__scikit-learn-14496": "diff --git a/sklearn/cluster/tests/test_optics.py b/sklearn/cluster/tests/test_optics.py\nindex 6c9dac3..5c135d6 100644\n--- a/sklearn/cluster/tests/test_optics.py\n+++ b/sklearn/cluster/tests/test_optics.py\n@@ -77,8 +77,30 @@ def test_the_extract_xi_labels(ordering, clusters, expected):\n \n     assert_array_equal(labels, expected)\n \n+import numpy as np\n+from sklearn.cluster import OPTICS\n+from sklearn.utils import shuffle\n+from numpy.testing import assert_array_equal\n+\n+def test_float_min_samples():\n+    # Create a small dataset\n+    rng = np.random.RandomState(42)\n+    n_points_per_cluster = 10\n+    C1 = rng.normal(loc=0.0, scale=0.5, size=(n_points_per_cluster, 2))\n+    C2 = rng.normal(loc=5.0, scale=0.5, size=(n_points_per_cluster, 2))\n+    X = np.vstack((C1, C2))\n+    expected_labels = np.array([0] * n_points_per_cluster + [1] * n_points_per_cluster)\n+\n+    # Shuffle the dataset\n+    X, expected_labels = shuffle(X, expected_labels, random_state=rng)\n+    \n+    # Initialize OPTICS with min_samples as a float\n+    clust = OPTICS(min_samples=0.1, min_cluster_size=0.08,\n+                   max_eps=20, cluster_method='xi',\n+                   xi=0.4).fit(X)\n \n-def test_extract_xi():\n+    # Verify the labels match the expected labels\n+    assert_array_equal(clust.labels_, expected_labels)\n     # small and easy test (no clusters around other clusters)\n     # but with a clear noise data.\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-14710": "",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..a8dd381 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,7 +680,21 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n-def test_sparse_precomputed():\n+from scipy import sparse\n+import numpy as np\n+from sklearn import svm\n+\n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for issue with ZeroDivisionError in _sparse_fit\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n     try:\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..a8e43fa 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -97,8 +97,26 @@ def test_strip_accents():\n     expected = 'this is a test'\n     assert strip_accents_unicode(a) == expected\n \n+def test_strip_accents_nfkd():\n+    # strings that are already decomposed (NFKD form)\n+    a = \"o\\u0308\"  # o with diaeresis\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # combining marks by themselves\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"  # various combining marks\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # multiple combining marks on one character\n+    a = \"o\\u0308\\u0304\"  # o with diaeresis and macron\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n \n-def test_to_ascii():\n+    # combining tilde on 'n'\n+    s2 = chr(110) + chr(771)  # 'n' followed by combining tilde\n+    expected_s2 = \"n\"\n+    assert strip_accents_unicode(s2) == expected_s2\n     # check some classical latin accentuated symbols\n     a = '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb'\n     expected = 'aaaaaaceeee'\n",
  "scikit-learn__scikit-learn-25102": "diff --git a/sklearn/feature_selection/tests/test_base.py b/sklearn/feature_selection/tests/test_base.py\nindex bf2d07e..e85be15 100644\n--- a/sklearn/feature_selection/tests/test_base.py\n+++ b/sklearn/feature_selection/tests/test_base.py\n@@ -108,9 +108,29 @@ def test_inverse_transform_sparse():\n     with pytest.raises(ValueError):\n         sel.inverse_transform(np.array([[1], [2]]))\n \n-\n-def test_get_support():\n+import numpy as np\n+import pytest\n+from sklearn.datasets import load_iris\n+from sklearn.feature_selection import SelectKBest, chi2\n+import pandas as pd\n+\n+def test_preserve_dtypes_after_transformation():\n+    \"\"\"Test that the dtypes are preserved after transformation.\"\"\"\n+    X, y = load_iris(return_X_y=True, as_frame=True)\n+    X = X.astype(\n+        {\n+            \"sepal length (cm)\": np.float32,\n+            \"sepal width (cm)\": np.float32,\n+        }\n+    )\n+    X[\"species_cat\"] = y.astype(\"category\")\n+\n+    selector = SelectKBest(chi2, k=2).set_output(transform=\"pandas\")\n+    X_out = selector.fit_transform(X, y)\n+\n+    for col in X_out.columns:\n+        assert X_out[col].dtype == X[col].dtype, f\"Mismatch in dtype for column {col}\"\n     sel = StepSelector()\n     sel.fit(X, y)\n     assert_array_equal(support, sel.get_support())\n-    assert_array_equal(support_inds, sel.get_support(indices=True))\n+    assert_array_equal(support_inds, sel.get_support(indices=True))\n",
  "scikit-learn__scikit-learn-25232": "",
  "scikit-learn__scikit-learn-25931": "",
  "scikit-learn__scikit-learn-25973": "",
  "scikit-learn__scikit-learn-26323": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex b52e888..f3adfee 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -22,9 +22,46 @@ from sklearn.compose import (\n from sklearn.exceptions import NotFittedError\n from sklearn.preprocessing import FunctionTransformer\n from sklearn.preprocessing import StandardScaler, Normalizer, OneHotEncoder\n+import pytest\n+import pandas as pd\n+import numpy as np\n+\n+def test_remainder_set_output():\n+    \"\"\"Check that the output is set for the remainder.\n+\n+    Non-regression test for issue with set_output for remainder.\"\"\"\n+    df = pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3]})\n+\n+    # Test with remainder as an estimator where set_output should be applied\n+    ct = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+\n+    out = ct.fit_transform(df)\n+    pd.testing.assert_frame_equal(out, df)\n+\n+    # Switching back to default output and verifying output type\n+    ct.set_output(transform=\"default\")\n+    out = ct.fit_transform(df)\n+    assert isinstance(out, np.ndarray)\n+    \n+    # Additional test case to ensure the fix works when remainder is not used\n+    ct2 = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        (VarianceThreshold(), make_column_selector(dtype_exclude=bool)),\n+        verbose_feature_names_out=False,\n+    )\n+    ct2.set_output(transform=\"pandas\")\n \n+    out2 = ct2.fit_transform(df)\n+    pd.testing.assert_frame_equal(out2, df)\n \n-class Trans(TransformerMixin, BaseEstimator):\n+    ct2.set_output(transform=\"default\")\n+    out2_default = ct2.fit_transform(df)\n+    assert isinstance(out2_default, np.ndarray)\n     def fit(self, X, y=None):\n         return self\n \n",
  "scikit-learn__scikit-learn-9288": "diff --git a/sklearn/cluster/tests/test_k_means.py b/sklearn/cluster/tests/test_k_means.py\nindex abeeff0..75b33b7 100644\n--- a/sklearn/cluster/tests/test_k_means.py\n+++ b/sklearn/cluster/tests/test_k_means.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for K-means\"\"\"\n import sys\n \n@@ -944,8 +945,39 @@ def test_k_means_empty_cluster_relocated():\n     assert len(set(km.labels_)) == 2\n     assert_allclose(km.cluster_centers_, [[-1], [1]])\n \n-\n-def test_minibatch_kmeans_partial_fit_int_data():\n+def test_result_of_kmeans_equal_in_diff_n_jobs():\n+    # Check consistency of KMeans results for different numbers of parallel jobs\n+    rnd = np.random.RandomState(0)\n+    X = rnd.normal(size=(50, 10))\n+\n+    # As `n_jobs` is deprecated, we use joblib parallel backend for parallel processing\n+    result_1 = KMeans(n_clusters=3, random_state=0).fit(X).labels_\n+    \n+    import joblib\n+    with joblib.parallel_backend('loky', n_jobs=2):\n+        result_2 = KMeans(n_clusters=3, random_state=0).fit(X).labels_\n+    \n+    assert_array_equal(result_1, result_2)\n+\n+def test_kmeans_inertia_consistency():\n+    # Test to ensure inertia consistency across parallel backends\n+    from sklearn.datasets import make_blobs\n+\n+    # Generate synthetic data\n+    X, _ = make_blobs(n_samples=1000, centers=5, n_features=2, random_state=42)\n+\n+    # Compute inertia for a single run without parallel backend\n+    kmeans_single = KMeans(n_clusters=5, random_state=42)\n+    kmeans_single.fit(X)\n+    inertia_single = kmeans_single.inertia_\n+\n+    # Compute inertia with parallel backend\n+    with joblib.parallel_backend('loky', n_jobs=2):\n+        kmeans_parallel = KMeans(n_clusters=5, random_state=42)\n+        kmeans_parallel.fit(X)\n+        inertia_parallel = kmeans_parallel.inertia_\n+\n+    assert_almost_equal(inertia_single, inertia_parallel, decimal=5)\n     # Issue GH #14314\n     X = np.array([[-1], [1]], dtype=np.int)\n     km = MiniBatchKMeans(n_clusters=2)\n",
  "sphinx-doc__sphinx-10323": "diff --git a/tests/test_directive_code.py b/tests/test_directive_code.py\nindex 949c70e..ca6c905 100644\n--- a/tests/test_directive_code.py\n+++ b/tests/test_directive_code.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the code-block directive.\"\"\"\n \n import os\n@@ -252,6 +253,24 @@ def test_LiteralIncludeReader_dedent(literal_inc_path):\n \n \n @pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n+def test_LiteralIncludeReader_prepend_indentation(literal_inc_path):\n+    # Test prepend with correct indentation\n+    options = {\n+        'lines': '9-13',\n+        'dedent': 4,\n+        'prepend': '    <plugin>',\n+        'append': '    </plugin>'\n+    }\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    assert content == (\"    <plugin>\\n\"\n+                       \"    <groupId>com.github.ekryd.sortpom</groupId>\\n\"\n+                       \"    <artifactId>sortpom-maven-plugin</artifactId>\\n\"\n+                       \"    <version>2.15.0</version>\\n\"\n+                       \"    <configuration>\\n\"\n+                       \"      <verifyFailOn>strict</verifyFailOn>\\n\"\n+                       \"    </configuration>\\n\"\n+                       \"    </plugin>\\n\")\n def test_LiteralIncludeReader_tabwidth(testroot):\n     # tab-width: 4\n     options = {'tab-width': 4, 'pyobject': 'Qux'}\n",
  "sphinx-doc__sphinx-10449": "",
  "sphinx-doc__sphinx-10466": "diff --git a/tests/test_build_gettext.py b/tests/test_build_gettext.py\nindex a6fc946..3a45652 100644\n--- a/tests/test_build_gettext.py\n+++ b/tests/test_build_gettext.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the build process with gettext builder with the test root.\"\"\"\n \n import gettext\n@@ -9,6 +10,7 @@ from subprocess import PIPE, CalledProcessError\n import pytest\n \n from sphinx.util.osutil import cd\n+from sphinx.builders.gettext import Catalog, MsgOrigin\n \n \n @pytest.mark.sphinx('gettext', srcdir='root-gettext')\n@@ -19,6 +21,44 @@ def test_build_gettext(app):\n     # Do messages end up in the correct location?\n     # top-level documents end up in a message catalog\n     assert (app.outdir / 'extapi.pot').isfile()\n+\n+\n+def test_Catalog_duplicated_locations():\n+    catalog = Catalog()\n+    # Adding messages with duplicate locations\n+    catalog.add('duplicate', MsgOrigin('/path/to/file', 1))\n+    catalog.add('duplicate', MsgOrigin('/path/to/file', 1))\n+    catalog.add('duplicate', MsgOrigin('/path/to/file', 2))\n+    catalog.add('duplicate', MsgOrigin('/another/path', 3))\n+\n+    # Ensure only unique locations are stored\n+    assert len(list(catalog)) == 1\n+\n+    message = list(catalog)[0]\n+    assert message.text == 'duplicate'\n+    assert message.locations == [('/path/to/file', 1),\n+                                 ('/path/to/file', 2),\n+                                 ('/another/path', 3)]\n+\n+def test_Catalog_no_duplicate_locations_for_different_messages():\n+    catalog = Catalog()\n+    # Add different messages with possibly overlapping locations\n+    catalog.add('first_message', MsgOrigin('/path/to/file', 1))\n+    catalog.add('first_message', MsgOrigin('/path/to/file', 2))\n+    catalog.add('second_message', MsgOrigin('/path/to/file', 1))\n+    catalog.add('second_message', MsgOrigin('/another/path', 3))\n+\n+    assert len(list(catalog)) == 2\n+\n+    msg1, msg2 = list(catalog)\n+\n+    assert msg1.text == 'first_message'\n+    assert msg1.locations == [('/path/to/file', 1),\n+                              ('/path/to/file', 2)]\n+\n+    assert msg2.text == 'second_message'\n+    assert msg2.locations == [('/path/to/file', 1),\n+                              ('/another/path', 3)]\n     # directory items are grouped into sections\n     assert (app.outdir / 'subdir.pot').isfile()\n \n",
  "sphinx-doc__sphinx-10673": "",
  "sphinx-doc__sphinx-7440": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 975a00f..3406d6a 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -95,6 +95,38 @@ def test_get_full_qualified_name():\n     assert domain.get_full_qualified_name(node) == 'ls.-l'\n \n \n+from sphinx import addnodes\n+from sphinx.util.docutils import new_document\n+from sphinx.testing.util import SphinxTestApp\n+from sphinx.util.nodes import document_from_doctree\n+from docutils import nodes\n+from sphinx.testing import restructuredtext\n+\n+# New test case for duplicate glossary terms with different cases\n+def test_glossary_case_sensitivity(app):\n+    text = (\".. glossary::\\n\"\n+            \"\\n\"\n+            \"   mysql\\n\"\n+            \"       description for lowercase mysql\\n\"\n+            \"\\n\"\n+            \"   MySQL\\n\"\n+            \"       description for capitalized MySQL\\n\")\n+\n+    # doctree\n+    doctree = restructuredtext.parse(app, text)\n+\n+    # Verify the terms are recognized and indexed correctly\n+    assert_node(doctree, (\n+        [glossary, definition_list, ([definition_list_item, ([term, (\"mysql\", index)],\n+                                                             definition)],\n+                                     [definition_list_item, ([term, (\"MySQL\", index)],\n+                                                             definition)])],\n+    ))\n+    # Check terms in index\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert (\"mysql\", \"mysql\", \"term\", \"index\", \"term-mysql\", -1) in objects\n+    assert (\"MySQL\", \"MySQL\", \"term\", \"index\", \"term-MySQL\", -1) in objects\n+\n def test_glossary(app):\n     text = (\".. glossary::\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-7757": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex b3053d1..6311ba1 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -331,6 +331,9 @@ def test_signature_from_str_kwonly_args():\n     assert sig.parameters['b'].kind == Parameter.KEYWORD_ONLY\n     assert sig.parameters['b'].default == Parameter.empty\n \n+import pytest\n+from sphinx.util import inspect\n+from sphinx.util.inspect import Parameter\n \n @pytest.mark.skipif(sys.version_info < (3, 8),\n                     reason='python-3.8 or above is required')\n@@ -341,7 +344,15 @@ def test_signature_from_str_positionaly_only_args():\n     assert sig.parameters['b'].kind == Parameter.POSITIONAL_OR_KEYWORD\n \n \n-def test_signature_from_str_invalid():\n+def test_signature_with_positional_only_defaults():\n+    sig = inspect.signature_from_str('(a, b=0, /, c=1)')\n+    assert list(sig.parameters.keys()) == ['a', 'b', 'c']\n+    assert sig.parameters['a'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['a'].default == Parameter.empty\n+    assert sig.parameters['b'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['b'].default == '0'\n+    assert sig.parameters['c'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['c'].default == '1'\n     with pytest.raises(SyntaxError):\n         inspect.signature_from_str('')\n \n",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..04b3dee 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -32,7 +33,19 @@ def test_MockModule():\n     assert repr(mock) == 'mocked_module'\n \n \n+from typing import TypeVar, Generic\n+\n def test_MockObject():\n+    # Test for generic-typed classes\n+\n+    T = TypeVar('T')\n+\n+    class GenericSubClass(Generic[T], mock.SomeClass):\n+        \"\"\"docstring of GenericSubClass\"\"\"\n+\n+    obj_generic = GenericSubClass()\n+    assert GenericSubClass.__doc__ == \"docstring of GenericSubClass\"\n+    assert isinstance(obj_generic, GenericSubClass)\n     mock = _MockObject()\n     assert isinstance(mock.some_attr, _MockObject)\n     assert isinstance(mock.some_method, _MockObject)\n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_napoleon.py b/tests/test_ext_napoleon.py\nindex 0676869..5335f46 100644\n--- a/tests/test_ext_napoleon.py\n+++ b/tests/test_ext_napoleon.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_napoleon\n     ~~~~~~~~~~~~~\n@@ -12,8 +13,9 @@\n import sys\n from collections import namedtuple\n from unittest import TestCase, mock\n-\n+import functools\n from sphinx.application import Sphinx\n+from sphinx.testing.util import simple_decorator\n from sphinx.ext.napoleon import _process_docstring, _skip_member, Config, setup\n \n \n@@ -165,11 +167,33 @@ class SkipMemberTest(TestCase):\n                         SampleClass.__special_doc__, False,\n                         'napoleon_include_special_with_doc')\n \n+    def test_decorated_init_doc(self):\n+        class SampleClassWithDecoratedInit:\n+            @simple_decorator\n+            def __init__(self):\n+                \"\"\"This is an init method with a decorator.\"\"\"\n+                pass\n+\n+        self.assertSkip('class', '__init__',\n+                        SampleClassWithDecoratedInit.__init__, False,\n+                        'napoleon_include_init_with_doc')\n+\n     def test_class_special_undoc(self):\n         self.assertSkip('class', '__special_undoc__',\n                         SampleClass.__special_undoc__, True,\n                         'napoleon_include_special_with_doc')\n \n+    def test_decorated_init_doc(self):\n+        class SampleClassWithDecoratedInit:\n+            @simple_decorator\n+            def __init__(self):\n+                \"\"\"This is an init method with a decorator.\"\"\"\n+                pass\n+\n+        self.assertSkip('class', '__init__',\n+                        SampleClassWithDecoratedInit.__init__, False,\n+                        'napoleon_include_init_with_doc')\n+\n     def test_exception_private_doc(self):\n         self.assertSkip('exception', '_private_doc',\n                         SampleError._private_doc, False,\n@@ -185,6 +209,17 @@ class SkipMemberTest(TestCase):\n                         SampleError.__special_doc__, False,\n                         'napoleon_include_special_with_doc')\n \n+    def test_decorated_init_doc(self):\n+        class SampleClassWithDecoratedInit:\n+            @simple_decorator\n+            def __init__(self):\n+                \"\"\"This is an init method with a decorator.\"\"\"\n+                pass\n+\n+        self.assertSkip('class', '__init__',\n+                        SampleClassWithDecoratedInit.__init__, False,\n+                        'napoleon_include_init_with_doc')\n+\n     def test_exception_special_undoc(self):\n         self.assertSkip('exception', '__special_undoc__',\n                         SampleError.__special_undoc__, True,\n",
  "sphinx-doc__sphinx-7985": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 5b1b2ed..acb3482 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -8,6 +8,8 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+import os\n+\n import json\n import re\n from unittest import mock\n",
  "sphinx-doc__sphinx-8035": "diff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex ad1d950..275fc7a 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_private_members\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -14,6 +15,49 @@ from test_ext_autodoc import do_autodoc\n \n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_private_members_specific_cases(app):\n+    app.config.autoclass_content = 'class'\n+    \n+    # Test case where no private members are specified\n+    options = {\"members\": None, \"private-members\": \"\"}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        # No private members documented\n+    ]\n+\n+    # Test case with multiple specific private members\n+    options = {\"members\": None, \"private-members\": \"_private_function1,_private_function2\"}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        '',\n+        '.. py:function:: _private_function1(name)',\n+        '   :module: target.private',\n+        '',\n+        '   _private_function1 is a docstring.',\n+        '',\n+        '.. py:function:: _private_function2(name)',\n+        '   :module: target.private',\n+        '',\n+        '   _private_function2 is a docstring.',\n+        '',\n+    ]\n+\n+    # Test case with a non-existent private member\n+    options = {\"members\": None, \"private-members\": \"_non_existent_function\"}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        # No private members documented because it does not exist\n+    ]\n+\n def test_private_field(app):\n     app.config.autoclass_content = 'class'\n     options = {\"members\": None}\n",
  "sphinx-doc__sphinx-8120": "diff --git a/tests/test_intl.py b/tests/test_intl.py\nindex 58339b1..36af736 100644\n--- a/tests/test_intl.py\n+++ b/tests/test_intl.py\n@@ -1286,6 +1286,36 @@ def test_image_glob_intl_using_figure_language_filename(app):\n                 candidates={'application/pdf': 'subdir/svgimg.pdf',\n                             'image/svg+xml': 'subdir/svgimg.svg'})\n \n-\n-def getwarning(warnings):\n-    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n+from babel.messages import pofile\n+from sphinx import locale\n+\n+def test_override_translation(make_app, app_params, sphinx_test_tempdir):\n+    try:\n+        # clear translators cache\n+        locale.translators.clear()\n+\n+        # prepare message catalog (.po)\n+        locale_dir = sphinx_test_tempdir / 'testroot' / 'locales' / 'da' / 'LC_MESSAGES'\n+        locale_dir.makedirs()\n+        with (locale_dir / 'sphinx.po').open('wb') as f:\n+            catalog = Catalog()\n+            catalog.add('Fig. %s', 'Foobar %s')\n+            catalog.add('Listing %s', 'Whatever %s')\n+            pofile.write_po(f, catalog)\n+\n+        # construct application and convert po file to .mo\n+        args, kwargs = app_params\n+        app = make_app(*args, **kwargs)\n+        assert (locale_dir / 'sphinx.mo').exists()\n+\n+        # Test translations\n+        assert app.translator.gettext('Fig. 1') == 'Foobar 1'\n+        assert app.translator.gettext('Listing 1') == 'Whatever 1'\n+\n+        app.build()\n+        content = (app.outdir / 'index.html').read_text()\n+        assert 'Foobar 1' in content\n+        assert 'Whatever 1' in content\n+    finally:\n+        locale.translators.clear()\n+    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n",
  "sphinx-doc__sphinx-8269": "",
  "sphinx-doc__sphinx-8459": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex d1881df..fed259d 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_configs\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -8,6 +9,45 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+@pytest.mark.skipif(sys.version_info < (3, 7), reason='python 3.7+ is required.')\n+@pytest.mark.sphinx('text', testroot='ext-autodoc', \n+                    srcdir='autodoc_typehints_description_and_type_aliases_test1',\n+                    confoverrides={'autodoc_typehints': \"description\",\n+                                   'autodoc_type_aliases': {'JSONObject': 'types.JSONObject'}})\n+def test_autodoc_typehints_description_and_type_aliases_jsonobject(app: SphinxTestApp):\n+    (app.srcdir / 'types.py').write_text(\n+        \"from __future__ import annotations\\n\"\n+        \"from typing import Any, Dict\\n\"\n+        \"\\n\"\n+        \"JSONObject = Dict[str, Any]\\n\"\n+        \"\\n\"\n+        \"def sphinx_doc(data: JSONObject) -> JSONObject:\\n\"\n+        \"    \\\"\\\"\\\"Does it work.\\n\"\n+        \"\\n\"\n+        \"    Args:\\n\"\n+        \"        data: Does it args.\\n\"\n+        \"\\n\"\n+        \"    Returns:\\n\"\n+        \"        Does it work in return.\\n\"\n+        \"    \\\"\\\"\\\"\\n\"\n+        \"    return {}\\n\"\n+    )\n+    (app.srcdir / 'conf.py').write_text(\n+        \"autodoc_typehints = 'description'\\n\"\n+        \"autodoc_type_aliases = {\\n\"\n+        \"    'JSONObject': 'types.JSONObject',\\n\"\n+        \"}\\n\"\n+    )\n+    app.build()\n+    output = (app.outdir / 'types.txt').read_text()\n+    assert 'types.sphinx_doc(data)' in output\n+    assert 'data (types.JSONObject)' in output\n+    assert 'Return type: types.JSONObject' in output\n+\n+import pytest\n+import sys\n+from sphinx.testing.util import SphinxTestApp\n+\n import platform\n import sys\n \n",
  "sphinx-doc__sphinx-8475": "",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8721": "",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex 3c31d3d..82fdd25 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -515,8 +515,15 @@ def test_dict_customtype():\n     # Type is unsortable, just check that it does not crash\n     assert \"<CustomType(2)>: 2\" in description\n \n+def test_object_description_enum():\n+    import enum\n \n-def test_getslots():\n+    class MyEnum(enum.Enum):\n+        ValueA = 10\n+        ValueB = 20\n+\n+    # Check if the object_description function renders the enum value as expected\n+    assert inspect.object_description(MyEnum.ValueA) == \"MyEnum.ValueA\"\n     class Foo:\n         pass\n \n",
  "sphinx-doc__sphinx-9320": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\nindex ff8df08..c2b9ef6 100644\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -10,6 +10,8 @@\n \n import time\n from io import StringIO\n+import sys\n+from unittest import mock\n \n import pytest\n \n@@ -241,6 +243,21 @@ def test_default_filename(tempdir):\n     exec(conffile.read_text(), ns)\n \n \n+def test_exit_on_existing_confpy(monkeypatch):\n+    # Mock path.isfile to simulate the existence of conf.py\n+    monkeypatch.setattr(path, 'isfile', lambda x: True)\n+\n+    # Mock input to simulate user pressing Enter\n+    with mock.patch('builtins.input', return_value=''):\n+        # Capture the sys.exit call to verify behavior\n+        with pytest.raises(SystemExit) as exit_info:\n+            qs.ask_user({})\n+\n+        # Check that it exits with status 1\n+        assert exit_info.type == SystemExit\n+        assert exit_info.value.code == 1\n+\n+\n def test_extensions(tempdir):\n     qs.main(['-q', '-p', 'project_name', '-a', 'author',\n              '--extensions', 'foo,bar,baz', tempdir])\n@@ -249,4 +266,19 @@ def test_extensions(tempdir):\n     assert conffile.isfile()\n     ns = {}\n     exec(conffile.read_text(), ns)\n+\n+\n+def test_exit_on_existing_confpy(monkeypatch):\n+    # Mock path.isfile to simulate the existence of conf.py\n+    monkeypatch.setattr(path, 'isfile', lambda x: True)\n+\n+    # Mock input to simulate user pressing Enter\n+    with mock.patch('builtins.input', return_value=''):\n+        # Capture the sys.exit call to verify behavior\n+        with pytest.raises(SystemExit) as exit_info:\n+            qs.ask_user({})\n+\n+        # Check that it exits with status 1\n+        assert exit_info.type == SystemExit\n+        assert exit_info.value.code == 1\n     assert ns['extensions'] == ['foo', 'bar', 'baz']\n",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..285ce81 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -54,6 +54,7 @@ from sphinx.pycode import ast\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n     (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n+    (\"(1,)\", \"(1,)\"),                             # Tuple (single element)\n     (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n",
  "sphinx-doc__sphinx-9591": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 29731ea..4fc211a 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -846,8 +846,31 @@ def test_pyproperty(app):\n     assert 'Class.prop2' in domain.objects\n     assert domain.objects['Class.prop2'] == ('index', 'Class.prop2', 'property', False)\n \n-\n-def test_pydecorator_signature(app):\n+def test_pyproperty_with_cross_reference(app):\n+    # Test case to verify cross-references in property type annotations\n+    text = (\".. py:class:: Square\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\"\n+            \"      \\n\"\n+            \"      Square's end position (bottom-right corner).\")\n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                                    [desc_name, \"Square\"])],\n+                                  [desc_content, (addnodes.index,\n+                                                  desc)])]))\n+    assert_node(doctree[1][1][0], addnodes.index,\n+                entries=[('single', 'end (Square property)', 'Square.end', '', None)])\n+    assert_node(doctree[1][1][1], ([desc_signature, ([desc_annotation, \"property \"],\n+                                                     [desc_name, \"end\"],\n+                                                     [desc_annotation, \": \",\n+                                                      pending_xref,\n+                                                      [desc_sig_name, \"Point\"]])],\n+                                   [desc_content, ()]))\n+    assert 'Square.end' in domain.objects\n+    assert domain.objects['Square.end'] == ('index', 'Square.end', 'property', False)\n     text = \".. py:decorator:: deco\"\n     domain = app.env.get_domain('py')\n     doctree = restructuredtext.parse(app, text)\n",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..fe71a10 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -756,7 +756,7 @@ def test_pymethod_options(app):\n \n     # :property:\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n@@ -783,8 +783,16 @@ def test_pymethod_options(app):\n     assert 'Class.meth7' in domain.objects\n     assert domain.objects['Class.meth7'] == ('index', 'Class.meth7', 'method', False)\n \n-\n-def test_pyclassmethod(app):\n+def test_property_index(app):\n+    text = \".. py:method:: Foo.bar\\n   :property:\\n\"\n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n+    \n+    # Assert the property is indexed without parentheses\n+    assert_node(doctree[0], addnodes.index,\n+                entries=[('single', 'bar (Foo property)', 'Foo.bar', '', None)])\n+    assert 'Foo.bar' in domain.objects\n+    assert domain.objects['Foo.bar'] == ('index', 'Foo.bar', 'method', False)\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n             \"   .. py:classmethod:: meth\\n\")\n",
  "sphinx-doc__sphinx-9711": "",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..a7e47b7 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -236,6 +236,44 @@ def test_Point2D():\n     assert p2.distance(p3) == sqrt(17)/2\n \n \n+from sympy.geometry import Point, Point2D, Point3D\n+from sympy import sqrt\n+\n+def test_issue_11617():\n+    # Original test case from the issue\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point2D(2, 0)\n+    assert p1.distance(p2) == sqrt(5)\n+\n+def test_distance_different_dimensions():\n+    # Test cases for 3D to 2D distance\n+    p1 = Point3D(1, 2, 3)\n+    p2 = Point2D(4, 5)\n+    assert p1.distance(p2) == sqrt((1-4)**2 + (2-5)**2 + 3**2)\n+\n+    # Test cases for 2D to 3D distance\n+    p3 = Point2D(6, 8)\n+    p4 = Point3D(2, 1, 3)\n+    assert p3.distance(p4) == sqrt((6-2)**2 + (8-1)**2 + 3**2)\n+\n+def test_same_dimension_points():\n+    # Points in the same dimension should work correctly\n+    p5 = Point2D(0, 0)\n+    p6 = Point2D(3, 4)\n+    assert p5.distance(p6) == 5\n+\n+    p7 = Point3D(1, 1, 1)\n+    p8 = Point3D(4, 5, 6)\n+    assert p7.distance(p8) == sqrt((4-1)**2 + (5-1)**2 + (6-1)**2)\n+\n+def test_zero_distance():\n+    # Distance from a point to itself should be zero\n+    p9 = Point2D(2, 3)\n+    assert p9.distance(p9) == 0\n+\n+    p10 = Point3D(1, 2, 3)\n+    assert p10.distance(p10) == 0\n+\n def test_issue_9214():\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n",
  "sympy__sympy-12096": "",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..06b2754 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,8 +83,23 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n+from sympy import MatrixSymbol, Identity, symbols, Sum\n \n-def test_Identity_doit():\n+def test_Identity_behavior():\n+    n = symbols('n', integer=True, positive=True)\n+    In = Identity(n)\n+\n+    # Verify the sum of all elements in the identity matrix\n+    total_sum = Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit()\n+    assert total_sum == n, f\"Expected sum to be {n}, but got {total_sum}\"\n+\n+    # Verify the sum of diagonal elements in the identity matrix\n+    diagonal_sum = Sum(In[i, i], (i, 0, n-1)).doit()\n+    assert diagonal_sum == n, f\"Expected diagonal sum to be {n}, but got {diagonal_sum}\"\n+\n+    # Additional check for a specific size\n+    total_sum_3x3 = Sum(Sum(In[i, j], (i, 0, 2)), (j, 0, 2)).doit()\n+    assert total_sum_3x3 == 3, f\"Expected sum to be 3, but got {total_sum_3x3}\"\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..a722d18 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -354,6 +354,13 @@ def test_args():\n     # but this is ok because cycles imply that only those listed moved\n     assert Permutation(4, 5) == Permutation([0, 1, 2, 3, 5, 4])\n \n+    # Additional test cases for non-disjoint cycles\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])  # Identity permutation since both cycles cancel each other\n+    assert Permutation([[0, 1, 2], [2, 3]]) == Permutation([0, 1, 3, 2])  # Non-disjoint cycles applied left-to-right\n+    assert Permutation([[0, 1], [1, 0]]) == Permutation([0, 1])  # Canceling cycles should result in identity\n+    assert Permutation([[1, 2], [2, 3]]) == Permutation([0, 2, 3, 1])  # Non-disjoint cycles resulting in a permutation\n+    assert Permutation([[0, 1], [1, 2], [2, 0]]) == Permutation([1, 2, 0])  # Cycles forming a complete permutation\n+\n \n def test_Cycle():\n     assert str(Cycle()) == '()'\n",
  "sympy__sympy-13031": "",
  "sympy__sympy-13372": "diff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\nindex e95146a..1f7ba1c 100644\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -230,8 +230,30 @@ def test_evalf_bugs():\n     #issue 11518\n     assert NS(2*x**2.5, 5) == '2.0000*x**2.5000'\n \n+from sympy import Mul, Max, symbols, NS\n \n-def test_evalf_integer_parts():\n+x, y, z = symbols('x y z')\n+\n+def test_issue_13076():\n+    # Original issue test case\n+    assert NS(Mul(Max(0, y), x, evaluate=False).evalf()) == 'x*Max(0, y)'\n+\n+    # Additional test cases to ensure robustness\n+    assert NS(Mul(x, Max(0, y), evaluate=False).evalf()) == 'x*Max(0, y)'\n+    assert NS(Mul(z, Max(0, y), x, evaluate=False).evalf()) == 'z*x*Max(0, y)'\n+    assert NS(Mul(Max(0, y), x, z, evaluate=False).evalf()) == 'z*x*Max(0, y)'\n+\n+    # Ensure other orderings don't cause issues\n+    assert NS(Mul(Max(0, y), z, Max(0, x), evaluate=False).evalf()) == 'z*Max(0, x)*Max(0, y)'\n+    assert NS(Mul(Max(0, x), Max(0, y), z, evaluate=False).evalf()) == 'z*Max(0, x)*Max(0, y)'\n+\n+    # Including numeric values\n+    assert NS(Mul(Max(0, y), 2, x, evaluate=False).evalf()) == '2*x*Max(0, y)'\n+    assert NS(Mul(2, Max(0, y), x, evaluate=False).evalf()) == '2*x*Max(0, y)'\n+\n+    # Edge case: Max with constant values\n+    assert NS(Mul(Max(0, 1), x, evaluate=False).evalf()) == 'x'\n+    assert NS(Mul(Max(0, -1), x, evaluate=False).evalf()) == '0'\n     a = floor(log(8)/log(2) - exp(-1000), evaluate=False)\n     b = floor(log(8)/log(2), evaluate=False)\n     assert a.evalf() == 3\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..c6dbe12 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -203,8 +203,20 @@ def test_tanh():\n \n     assert tanh(k*pi*I/2) == tan(k*pi/2)*I\n \n-\n-def test_tanh_series():\n+def test_issue_subs_coth_log_tan():\n+    from sympy import coth, log, tan, S\n+\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+    \n+    # Test known problematic integral values\n+    problematic_values = [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]\n+    for value in problematic_values:\n+        try:\n+            result = e.subs(x, value)\n+            assert not isinstance(result, NameError), f\"NameError for x = {value}\"\n+        except NameError:\n+            assert False, f\"NameError exception for x = {value}\"\n     x = Symbol('x')\n     assert tanh(x).series(x, 0, 10) == \\\n         x - x**3/3 + 2*x**5/15 - 17*x**7/315 + 62*x**9/2835 + O(x**10)\n",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..47d1da7 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -165,6 +165,34 @@ def test_difference():\n     assert -1 in S.Reals - S.Naturals\n \n \n+from sympy import Symbol, FiniteSet, Interval, Complement\n+\n+x = Symbol('x')\n+y = Symbol('y')\n+\n+def test_complement_with_symbols_and_numbers():\n+    # Original issue test case\n+    assert Complement(FiniteSet(x, y, 2), Interval(-10, 10)) == Complement(FiniteSet(x, y), Interval(-10, 10))\n+\n+    # Additional test cases\n+    # Case with multiple numeric values in the set, some in the interval, some out\n+    assert Complement(FiniteSet(x, y, 2, 15), Interval(-10, 10)) == Complement(FiniteSet(x, y, 15), Interval(-10, 10))\n+\n+    # Case where all numbers are within the interval, should return only symbols\n+    assert Complement(FiniteSet(x, 2, 3), Interval(-10, 10)) == Complement(FiniteSet(x), Interval(-10, 10))\n+\n+    # Case with no symbols, only numbers\n+    assert Complement(FiniteSet(2, 3, 15), Interval(-10, 10)) == FiniteSet(15)\n+\n+    # Case with no numbers, only symbols\n+    assert Complement(FiniteSet(x, y), Interval(-10, 10)) == FiniteSet(x, y)\n+\n+    # Case with numbers exactly at the endpoints of the interval\n+    assert Complement(FiniteSet(x, -10, 10), Interval(-10, 10)) == FiniteSet(x)\n+\n+    # Mixed set with symbols and numbers outside of interval\n+    assert Complement(FiniteSet(x, y, -15, 20), Interval(-10, 10)) == FiniteSet(x, y, -15, 20)\n+\n def test_Complement():\n     assert Complement(Interval(1, 3), Interval(1, 2)) == Interval(2, 3, True)\n     assert Complement(FiniteSet(1, 3, 4), FiniteSet(3, 4)) == FiniteSet(1)\n",
  "sympy__sympy-13647": "",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..1c28013 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -672,6 +672,12 @@ def test_Poly_mul():\n     assert Poly(4, x, y) * Poly(2, x, y) == Poly(8, x, y)\n \n     assert Poly(1, x) * x == Poly(x, x)\n+    assert x * Poly(1, x) == Poly(x, x)\n+    assert Poly(x) * x == Poly(x**2, x, domain='ZZ')\n+    assert x * Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert -2 * Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2) * Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert Poly(x) * S(-2) == Poly(-2*x, x, domain='ZZ')\n     assert Poly(1, x) * sin(x) == sin(x)\n \n     assert Poly(x, x) * 2 == Poly(2*x, x)\n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..f4f746a 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -54,6 +54,27 @@ def test_printmethod():\n             return \"foo\"\n     assert latex(R(x)) == \"foo\"\n \n+def test_latex_mul_symbol_custom():\n+    # Original test cases provided in the test patch\n+    assert latex(3*x**2*y, mul_symbol='\\\\\\\\,') == r\"3\\\\,x^{2}\\\\,y\"\n+    assert latex(1.5*3**x, mul_symbol='\\\\\\\\,') == r\"1.5 \\cdot 3^{x}\"\n+\n+    # Additional test cases\n+    # Using no symbol, should concatenate terms directly\n+    assert latex(x*y*z, mul_symbol='') == r\"x y z\"\n+\n+    # Using a custom symbol (asterisk for multiplication)\n+    assert latex(2*x*y, mul_symbol='*') == r\"2*x*y\"\n+\n+    # Using a custom symbol (double vertical bar)\n+    assert latex(4*x**2*y, mul_symbol='||') == r\"4||x^{2}||y\"\n+\n+    # Check default behavior for mul_symbol=None\n+    assert latex(2*x*y) == r\"2 x y\"\n+\n+    # Using a custom symbol that is not a LaTeX command\n+    assert latex(5*x**3, mul_symbol='?') == r\"5?x^{3}\"\n+\n \n def test_latex_basic():\n     assert latex(1 + x) == \"x + 1\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..e654bab 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -307,8 +307,27 @@ def test_tolist():\n     m = Matrix(lst)\n     assert m.tolist() == lst\n \n-\n-def test_as_mutable():\n+def test_issue_13835():\n+    from sympy import symbols, Matrix\n+    a = symbols('a')\n+    M = lambda n: Matrix([[i + a*j for i in range(n)] for j in range(n)])\n+    assert M(5).det() == 0\n+    assert M(6).det() == 0\n+    assert M(7).det() == 0\n+\n+    # Adding additional test cases to verify the reported issue\n+    assert M(1).det() == 0\n+    assert M(2).det() == -a\n+    assert M(3).det() == 2*a*(a + 2) + 2*a*(2*a + 1) - 3*a*(2*a + 2)\n+    assert M(4).det() == 0\n+\n+    # Ensure that the function does not return nan or raise TypeError\n+    # Checking for larger matrices where previous error was observed\n+    try:\n+        det_5 = M(5).det()\n+        det_6 = M(6).det()\n+    except TypeError as e:\n+        assert False, f\"TypeError was raised: {e}\"\n     assert zeros(0, 3).as_mutable() == zeros(0, 3)\n     assert zeros(0, 3).as_immutable() == ImmutableMatrix(zeros(0, 3))\n     assert zeros(3, 0).as_immutable() == ImmutableMatrix(zeros(3, 0))\n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..b5cc351 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -708,8 +708,65 @@ def test_issue_10003():\n     G = Gamma('g', 1, 2)\n     assert P(X < -1) == S.Zero\n     assert P(G < -1) == S.Zero\n+from sympy.utilities.randtest import verify_numerically as tn\n+from sympy import Piecewise, Symbol, simplify, atan, oo\n+from sympy.stats import (Arcsin, Dagum, Erlang, Frechet, Gamma, GammaInverse,\n+                         Kumaraswamy, Laplace, Logistic, Nakagami, StudentT,\n+                         UniformSum, cdf, density)\n \n def test_precomputed_cdf():\n+    x = Symbol(\"x\", real=True, finite=True)\n+\n+    # Test cases for distributions mentioned in the issue\n+    a, b = 0, 3\n+    X = Arcsin(\"x\", a, b)\n+    assert cdf(X)(x) == Piecewise((0, a > x), (2*atan(sqrt((-a + x)/(-a + b)))/pi, b >= x), (1, True))\n+\n+    p, a, b = S(1)/3, S(1)/5, 2\n+    X = Dagum(\"x\", p, a, b)\n+    assert cdf(X)(x) == Piecewise(((1 + (x/b)**(-a))**(-p), x >= 0), (0, True))\n+\n+    k, l = 1, 1\n+    X = Erlang(\"x\", k, l)\n+    assert cdf(X)(x) == Piecewise((lowergamma(k, l*x)/gamma(k), x > 0), (0, True))\n+\n+    a, s, m = S(4)/3, 1, 2\n+    X = Frechet(\"x\", a, s, m)\n+    assert cdf(X)(x) == Piecewise((exp(-((-m + x)/s)**(-a)), m <= x), (0, True))\n+\n+    k, theta = 0.1, 2\n+    X = Gamma(\"x\", k, theta)\n+    assert cdf(X)(x) == Piecewise((lowergamma(k, x/theta)/gamma(k), x >= 0), (0, True))\n+\n+    a, b = S(5)/7, 2\n+    X = GammaInverse(\"x\", a, b)\n+    assert cdf(X)(x) == Piecewise((uppergamma(a, b/x)/gamma(a), x > 0), (0, True))\n+\n+    a, b = S(1)/123, 5\n+    X = Kumaraswamy(\"x\", a, b)\n+    assert cdf(X)(x) == Piecewise((0, x < 0), (-(-x**a + 1)**b + 1, x <= 1), (1, True))\n+\n+    mu, b = 2, 3\n+    X = Laplace('x', mu, b)\n+    assert cdf(X)(x) == Piecewise((exp((-mu + x)/b)/2, mu > x), (-exp((mu - x)/b)/2 + 1, True))\n+\n+    mu, s = 1, 0.1\n+    X = Logistic(\"x\", mu, s)\n+    assert cdf(X)(x) == 1/(exp((mu - x)/s) + 1)\n+\n+    mu, omega = S(7)/3, 1\n+    X = Nakagami('x', mu, omega)\n+    assert cdf(X)(x) == Piecewise((lowergamma(mu, mu*x**2/omega)/gamma(mu), x > 0), (0, True))\n+\n+    nu = 10\n+    X = StudentT(\"x\", nu)\n+    assert cdf(X)(x) == (1 + x*gamma(nu/2 + S(1)/2) * hyper((S(1)/2, nu/2 + S(1)/2), (S(3)/2,), -x**2/nu) / (sqrt(pi)*sqrt(nu)*gamma(nu/2))) / 2\n+\n+    n = 5\n+    X = UniformSum(\"x\", n)\n+    pdf01 = density(X)(x).subs(floor(x), 0).doit()   # pdf on (0, 1)\n+    cdf01 = cdf(X, evaluate=False)(x).subs(floor(x), 0).doit()   # cdf on (0, 1)\n+    assert tn(diff(cdf01, x), pdf01, x, a=0, b=0, c=1, d=0)\n     x = symbols(\"x\", real=True, finite=True)\n     mu = symbols(\"mu\", real=True, finite=True)\n     sigma, xm, alpha = symbols(\"sigma xm alpha\", positive=True, finite=True)\n",
  "sympy__sympy-13974": "",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_python.py b/sympy/printing/tests/test_python.py\nindex 73fc070..56616d8 100644\n--- a/sympy/printing/tests/test_python.py\n+++ b/sympy/printing/tests/test_python.py\n@@ -79,6 +79,8 @@ def test_python_keyword_function_name_escaping():\n         5*Function(\"for\")(8)) == \"for_ = Function('for')\\ne = 5*for_(8)\"\n \n \n+from sympy import Symbol, Eq, Ne, Rational, Limit, sstr, python, S\n+\n def test_python_relational():\n     assert python(Eq(x, y)) == \"e = Eq(x, y)\"\n     assert python(Ge(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x >= y\"\n@@ -88,6 +90,14 @@ def test_python_relational():\n     assert python(Ne(x/(y + 1), y**2)) in [\"e = Ne(x/(1 + y), y**2)\", \"e = Ne(x/(y + 1), y**2)\"]\n \n \n+def test_sstr_sympy_integers():\n+    x = Symbol(\"x\")\n+    y = Symbol(\"y\")\n+    # Test for relational expression with sympy_integers=True\n+    assert sstr(Eq(x, Rational(1, 2)), sympy_integers=True) == \"Eq(x, S(1)/2)\"\n+    # Test for Limit with sympy_integers=True\n+    assert sstr(Limit(x, x, Rational(1, 2)), sympy_integers=True) == \"Limit(x, x, S(1)/2)\"\n+\n def test_python_functions():\n     # Simple\n     assert python((2*x + exp(x))) in \"x = Symbol('x')\\ne = 2*x + exp(x)\"\n",
  "sympy__sympy-14711": "",
  "sympy__sympy-14976": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..c0c253d 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1,3 +1,4 @@\n+\n from distutils.version import LooseVersion as V\n from itertools import product\n import math\n@@ -143,6 +144,20 @@ def test_mpmath_lambda():\n     raises(TypeError, lambda: f(x))\n            # if this succeeds, it can't be a mpmath function\n \n+def test_lambdify_mpmath_with_rational():\n+    from sympy.functions.combinatorial.factorials import rf\n+    from sympy.core.numbers import S\n+    eqn = Eq(rf(18, x), 77 + S(1)/3)\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    # Check if 232/3 is wrapped properly as mpmath.mpf\n+    assert 'mpmath.mpf(232)/mpmath.mpf(3)' in inspect.getsource(f)\n+\n+    # Perform a numeric solve to verify precision\n+    x0 = nsolve(eqn, Float('1.5', 64), prec=64)\n+    rf_value = rf(18, x0).evalf(64)\n+    expected_value = (77 + S(1)/3).evalf(64)\n+    assert abs(rf_value - expected_value) < 1e-60  # Check precision\n+\n \n @conserve_mpmath_dps\n def test_number_precision():\n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..7f2fdec 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -72,6 +73,13 @@ def test_ndim_array_initiation():\n     raises(ValueError, lambda: vector_with_long_shape[long(5)])\n \n     from sympy.abc import x\n+    # Test for len of rank-0 array should be 1\n+    rank_zero_array_corrected = ImmutableDenseNDimArray(x)\n+    assert len(rank_zero_array_corrected) == 1\n+    assert rank_zero_array_corrected.shape == ()\n+    assert rank_zero_array_corrected.rank() == 0\n+    assert rank_zero_array_corrected[()] == x\n+    raises(ValueError, lambda: rank_zero_array_corrected[0])\n     rank_zero_array = ImmutableDenseNDimArray(x)\n     assert len(rank_zero_array) == 0\n     assert rank_zero_array.shape == ()\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..d658f1b 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n@@ -23,6 +24,19 @@ def test_Rational():\n     assert mcode(x + Rational(3, 7)) == \"x + 3/7\"\n     assert mcode(Rational(3, 7)*x) == \"(3/7)*x\"\n \n+def test_Max_Min():\n+    # Testing the original issue with simple Max\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    # Testing Max with multiple arguments\n+    assert mcode(Max(x, y, 2)) == \"Max[x, y, 2]\"\n+    assert mcode(Max(2, y, x)) == \"Max[2, y, x]\"\n+    # Testing nested Max\n+    assert mcode(Max(Max(x, 2), y)) == \"Max[Max[x, 2], y]\"\n+    # Testing Min function\n+    assert mcode(Min(x, 2)) == \"Min[x, 2]\"\n+    assert mcode(Min(x, y, 2)) == \"Min[x, y, 2]\"\n+    assert mcode(Min(2, y, x)) == \"Min[2, y, x]\"\n+\n \n def test_Function():\n     assert mcode(f(x, y, z)) == \"f[x, y, z]\"\n",
  "sympy__sympy-15349": "diff --git a/sympy/algebras/tests/test_quaternion.py b/sympy/algebras/tests/test_quaternion.py\nindex c486cc1..28f4189 100644\n--- a/sympy/algebras/tests/test_quaternion.py\n+++ b/sympy/algebras/tests/test_quaternion.py\n@@ -112,6 +112,25 @@ def test_quaternion_conversions():\n                                                [sin(theta),  cos(theta), 0],\n                                                [0,           0,          1]])\n \n+def test_quaternion_rotation_iss1593():\n+    \"\"\"\n+    There was a sign mistake in the definition,\n+    of the rotation matrix. This tests that particular sign mistake.\n+    See issue 1593 for reference.\n+    See wikipedia\n+    https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation#Quaternion-derived_rotation_matrix\n+    for the correct definition\n+    \"\"\"\n+    from sympy.algebras.quaternion import Quaternion\n+    from sympy import symbols, trigsimp, cos, sin\n+\n+    x = symbols('x')\n+    q = Quaternion(cos(x/2), sin(x/2), 0, 0)\n+    assert(trigsimp(q.to_rotation_matrix()) == Matrix([\n+                [1,      0,      0],\n+                [0, cos(x), -sin(x)],\n+                [0, sin(x), cos(x)]]))\n+\n     assert q2.to_axis_angle() == ((0, 0, sin(theta/2)/Abs(sin(theta/2))),\n                                    2*acos(cos(theta/2)))\n \n@@ -119,4 +138,4 @@ def test_quaternion_conversions():\n                [cos(theta), -sin(theta), 0, sin(theta) - cos(theta) + 1],\n                [sin(theta),  cos(theta), 0, -sin(theta) - cos(theta) + 1],\n                [0,           0,          1,  0],\n-               [0,           0,          0,  1]])\n+               [0,           0,          0,  1]])\n",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..64ff868 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1625,7 +1625,17 @@ def test_Mod():\n     assert (3*i*x) % (2*i*y) == i*Mod(3*x, 2*y)\n     assert Mod(4*i, 4) == 0\n \n-    # issue 8677\n+    # issue 15493\n+    i, j = symbols('i j', integer=True, positive=True)\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+    assert Mod(8*i/j, 4) == 4*Mod(2*i/j, 1)\n+    assert Mod(8*i, 4) == 0\n+\n+    # Additional test cases for issue 15493\n+    assert Mod(6*i, 2) == 0\n+    assert Mod(3*i + 1, 2) == Mod(i + 1, 2)\n+    assert Mod(3*i*x + y, 2) == Mod(i*x + y, 2)\n+    assert Mod(3*i, 5) == 3*Mod(i, 5)  # Test with modulus different than 2\n     n = Symbol('n', integer=True, positive=True)\n     assert factorial(n) % n == 0\n     assert factorial(n + 2) % n == 0\n",
  "sympy__sympy-15809": "",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..6de905b 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1986,11 +1986,44 @@ def test_Add_is_zero():\n     x, y = symbols('x y', zero=True)\n     assert (x + y).is_zero\n \n+from sympy import I, simplify, symbols\n \n-def test_issue_14392():\n+def test_issue_15873():\n+    # Original test case from issue 15873\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None\n+\n+    # Additional test case to verify simplify works correctly\n+    assert simplify(e).is_zero\n+\n+    # Test cases for other complex expressions\n+    f = 3*I - (2 + I) + (1 - 2*I)\n+    assert f.is_zero is None\n+    assert simplify(f).is_zero is True\n+\n+    g = I*(2 - I) + I*(-2 + I)\n+    assert g.is_zero is None\n+    assert simplify(g).is_zero is True\n+\n+    h = (1 + I)*(1 - I) - 2\n+    assert h.is_zero is None\n+    assert simplify(h).is_zero is False\n+\n+    # Test with symbols\n+    x, y = symbols('x y', real=True)\n+    expr = x + y*I\n+    assert expr.is_zero is None\n+\n+    # Expression that should return True without simplify\n+    i = 3 + 2*I - 3 - 2*I\n+    assert i.is_zero is True\n+\n+    # Expression that should return False without simplify\n+    j = 3 + 2*I - 3 - 3*I\n+    assert j.is_zero is False\n     assert (sin(zoo)**2).as_real_imag() == (nan, nan)\n \n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..96ae1f9 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -477,6 +477,46 @@ def test_logcombine_complex_coeff():\n     assert logcombine(i + 2*log(x), force=True) == \\\n         i + log(x**2)\n \n+from sympy import Symbol, posify\n+\n+def test_issue_16438():\n+    # Original test for the issue\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0['finite'] == True\n+\n+def test_posify_finite_assumptions():\n+    # Test preservation of finite assumption\n+    x = Symbol('x', finite=True)\n+    xp, _ = posify(x)\n+    assert xp.assumptions0['finite'] == True\n+\n+def test_posify_integer_assumptions():\n+    # Test preservation of integer assumption\n+    x = Symbol('x', integer=True)\n+    xp, _ = posify(x)\n+    assert xp.assumptions0['integer'] == True\n+\n+def test_posify_rational_assumptions():\n+    # Test preservation of rational assumption\n+    x = Symbol('x', rational=True)\n+    xp, _ = posify(x)\n+    assert xp.assumptions0['rational'] == True\n+\n+def test_posify_prime_assumptions():\n+    # Test preservation of prime assumption\n+    x = Symbol('x', prime=True)\n+    xp, _ = posify(x)\n+    assert xp.assumptions0['prime'] == True\n+\n+def test_posify_even_odd_assumptions():\n+    # Test preservation of even and odd assumptions\n+    x_even = Symbol('x', even=True)\n+    x_odd = Symbol('x', odd=True)\n+    xp_even, _ = posify(x_even)\n+    xp_odd, _ = posify(x_odd)\n+    assert xp_even.assumptions0['even'] == True\n+    assert xp_odd.assumptions0['odd'] == True\n \n def test_issue_5950():\n     x, y = symbols(\"x,y\", positive=True)\n",
  "sympy__sympy-16766": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 51a287f..6956c9f 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n \n@@ -12,6 +13,7 @@ from sympy.printing.pycode import (\n     MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter\n )\n from sympy.utilities.pytest import raises\n+from sympy.tensor import IndexedBase\n \n x, y, z = symbols('x y z')\n \n@@ -35,6 +37,13 @@ def test_PythonCodePrinter():\n                                                         ' (3) if (x > 0) else None)'\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n \n+    # Additional tests for Indexed support in PythonCodePrinter\n+    p = IndexedBase(\"p\")\n+    assert prntr.doprint(p[0]) == 'p[0]'\n+    assert prntr.doprint(p[x]) == 'p[x]'\n+    assert prntr.doprint(p[x, 1]) == 'p[x, 1]'\n+    assert prntr.doprint(p[x, y, z]) == 'p[x, y, z]'\n+\n \n def test_MpmathPrinter():\n     p = MpmathPrinter()\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py\nindex 23fddca..6c0fe92 100644\n--- a/sympy/utilities/tests/test_autowrap.py\n+++ b/sympy/utilities/tests/test_autowrap.py\n@@ -48,7 +48,19 @@ def test_cython_wrapper_scalar_function():\n     assert source == expected\n \n \n-def test_cython_wrapper_outarg():\n+import numpy as np\n+from sympy.utilities.autowrap import autowrap\n+from sympy import MatrixSymbol\n+\n+def test_cython_autowrap_unused_array_arg():\n+    # Define a matrix symbol that is not used in the expression\n+    x = MatrixSymbol('x', 2, 1)\n+    # Expression does not depend on x\n+    expr = 1.0\n+    # Autowrap should handle the unused array argument correctly\n+    f = autowrap(expr, args=(x,), backend='cython')\n+    # The function should return 1.0 without errors\n+    assert f(np.array([[1.0], [2.0]])) == 1.0\n     from sympy import Equality\n     x, y, z = symbols('x,y,z')\n     code_gen = CythonCodeWrapper(C99CodeGen())\n",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..f05ed9d 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -237,8 +237,19 @@ def test_decipher_kid_rsa():\n     assert decipher_kid_rsa(3, (8, 3)) == 1\n     assert decipher_kid_rsa(2, (7, 4)) == 1\n \n+from sympy.crypto.crypto import encode_morse, decode_morse\n+from sympy.testing.pytest import raises\n \n def test_encode_morse():\n+    # Original test patch to verify fix\n+    assert encode_morse('12345') == '.----|..---|...--|....-|.....'\n+    assert encode_morse('67890') == '-....|--...|---..|----.|-----'\n+    \n+    # Additional test cases for thorough verification\n+    assert encode_morse('1') == '.----'\n+    assert encode_morse('0') == '-----'\n+    assert encode_morse('10') == '.----|-----'\n+    assert encode_morse('01') == '-----|.----'\n     assert encode_morse('ABC') == '.-|-...|-.-.'\n     assert encode_morse('SMS ') == '...|--|...||'\n     assert encode_morse('SMS\\n') == '...|--|...||'\n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_fu.py b/sympy/simplify/tests/test_fu.py\nindex 135b4cd..42c01a5 100644\n--- a/sympy/simplify/tests/test_fu.py\n+++ b/sympy/simplify/tests/test_fu.py\n@@ -67,8 +67,18 @@ def test_TR3():\n         j = TR3(i)\n         assert verify_numerically(i, j) and i.func != j.func\n \n-\n-def test__TR56():\n+def test_issue_17137():\n+    from sympy import simplify, I, cos, Symbol\n+    x = Symbol('x')\n+    # Test for the specific issue with cos(x)**I\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    # Test for more complex powers involving I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+    # Additional cases for robustness\n+    assert simplify(cos(x)**(I + 1)) == cos(x)**(I + 1)\n+    assert simplify(cos(x)**(I - 1)) == cos(x)**(I - 1)\n+    assert simplify(cos(x)**(-I)) == cos(x)**(-I)\n+    assert simplify(cos(x)**(5*I)) == cos(x)**(5*I)\n     h = lambda x: 1 - x\n     assert T(sin(x)**3, sin, cos, h, 4, False) == sin(x)**3\n     assert T(sin(x)**10, sin, cos, h, 4, False) == sin(x)**10\n",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..1caf6a2 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,4 +1,7 @@\n-from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n+\n+from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos, I\n+from sympy.simplify.sqrtdenest import _sqrt_match\n+from sympy.core.expr import unchanged\n from sympy.simplify.sqrtdenest import _subsets as subsets\n from sympy.utilities.pytest import slow\n \n@@ -175,8 +178,16 @@ def test_subsets():\n         [0, 1, 1, 0], [1, 1, 1, 0], [0, 0, 0, 1], [1, 0, 0, 1], [0, 1, 0, 1],\n         [1, 1, 0, 1], [0, 0, 1, 1], [1, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]]\n \n-\n-def test_issue_5653():\n+def test_issue_12420():\n+    I = S.ImaginaryUnit\n+    assert _sqrt_match(4 + I) == []\n+    # Check the expression is unchanged if it cannot be denested\n+    expr = (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2\n+    assert sqrtdenest(expr) == expr\n+    \n+    # Test with a simpler expression\n+    e = 3 - sqrt(2)*sqrt(4 + I) + 3*I\n+    assert sqrtdenest(e) == e\n     assert sqrtdenest(\n         sqrt(2 + sqrt(2 + sqrt(2)))) == sqrt(2 + sqrt(2 + sqrt(2)))\n \n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..c9f01b2 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n@@ -91,6 +92,20 @@ def test_point():\n     assert (-p3).__rsub__(p4) == p3.midpoint(p4).scale(2, 2)\n \n     assert p4 * 5 == Point(5, 5)\n+    # Testing the issue: Ensure both multiplication orders with a scalar work for Point2D\n+    assert 2.0 * p4 == Point(2.0, 2.0)\n+    assert p4 * 2.0 == Point(2.0, 2.0)\n+    \n+    # Test using sympy.sympify for real numbers\n+    assert sympy.sympify(2.0) * p4 == Point(2.0, 2.0)\n+    assert p4 * sympy.sympify(2.0) == Point(2.0, 2.0)\n+\n+    # Additional tests with other points\n+    assert 2 * p1 == Point(2*x1, 2*x2)\n+    assert p1 * 2 == Point(2*x1, 2*x2)\n+    \n+    assert sympy.sympify(3) * p4 == Point(3, 3)\n+    assert p4 * sympy.sympify(3) == Point(3, 3)\n     assert p4 / 5 == Point(0.2, 0.2)\n \n     raises(ValueError, lambda: Point(0, 0) + 10)\n@@ -168,6 +183,20 @@ def test_point3D():\n \n \n     assert p4 * 5 == Point3D(5, 5, 5)\n+    # Testing the issue: Ensure both multiplication orders with a scalar work for Point3D\n+    assert 2.0 * p4 == Point3D(2.0, 2.0, 2.0)\n+    assert p4 * 2.0 == Point3D(2.0, 2.0, 2.0)\n+    \n+    # Test using sympy.sympify for real numbers\n+    assert sympy.sympify(2.0) * p4 == Point3D(2.0, 2.0, 2.0)\n+    assert p4 * sympy.sympify(2.0) == Point3D(2.0, 2.0, 2.0)\n+\n+    # Additional tests with other points\n+    assert 2 * p1 == Point3D(2*x1, 2*x2, 2*x3)\n+    assert p1 * 2 == Point3D(2*x1, 2*x2, 2*x3)\n+    \n+    assert sympy.sympify(3) * p4 == Point3D(3, 3, 3)\n+    assert p4 * sympy.sympify(3) == Point3D(3, 3, 3)\n     assert p4 / 5 == Point3D(0.2, 0.2, 0.2)\n \n     raises(ValueError, lambda: Point3D(0, 0, 0) + 10)\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..e7db564 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -473,8 +473,20 @@ def test_descent():\n     # supposed to be square-free\n     raises(TypeError, lambda: descent(4, 3))\n \n+from sympy.abc import x, y, m, n\n+from sympy.solvers.diophantine import diophantine\n \n def test_diophantine():\n+    # Test issue 18186: check that diophantine gives consistent results\n+    # regardless of the order of symbols when permute=True.\n+    expr = n**4 + m**4 - 2**4 - 3**4\n+    expected_solution = set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    \n+    result_mn = diophantine(expr, syms=(m, n), permute=True)\n+    result_nm = diophantine(expr, syms=(n, m), permute=True)\n+    \n+    assert result_mn == expected_solution, f\"Expected {expected_solution}, got {result_mn}\"\n+    assert result_nm == expected_solution, f\"Expected {expected_solution}, got {result_nm}\"\n     assert check_solutions((x - y)*(y - z)*(z - x))\n     assert check_solutions((x - y)*(x**2 + y**2 - z**2))\n     assert check_solutions((x - 3*y + 7*z)*(x**2 + y**2 - z**2))\n",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..ac8ef99 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -671,6 +671,22 @@ def test_latex_derivatives():\n     assert latex(diff(f(x), (x, Max(n1, n2)))) == \\\n         r'\\frac{d^{\\max\\left(n_{1}, n_{2}\\right)}}{d x^{\\max\\left(n_{1}, n_{2}\\right)}} f{\\left(x \\right)}'\n \n+def test_issue_12345_incorrect_subs_parenthesizing():\n+    from sympy import Subs, latex\n+    from sympy.abc import x, y\n+\n+    # Original test case from the issue description\n+    assert latex(3*Subs(-x+y, (x,), (1,))) == \\\n+        r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+\n+    # Additional test cases to ensure various expressions are handled\n+    assert latex(2*Subs(x*y + y, (x,), (1,))) == \\\n+        r'2 \\left. \\left(x y + y\\right) \\right|_{\\substack{ x=1 }}'\n+    assert latex(5*Subs(x**2 - y, (y,), (2,))) == \\\n+        r'5 \\left. \\left(x^{2} - y\\right) \\right|_{\\substack{ y=2 }}'\n+    assert latex(-Subs(-x - y, (x, y), (1, 2))) == \\\n+        r'- \\left. \\left(- x - y\\right) \\right|_{\\substack{ x=1\\\\ y=2 }}'\n+\n \n def test_latex_subs():\n     assert latex(Subs(x*y, (\n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "diff --git a/sympy/sets/tests/test_conditionset.py b/sympy/sets/tests/test_conditionset.py\nindex 68ee5d6..482d9ad 100644\n--- a/sympy/sets/tests/test_conditionset.py\n+++ b/sympy/sets/tests/test_conditionset.py\n@@ -1,3 +1,4 @@\n+\n from sympy.sets import (ConditionSet, Intersection, FiniteSet,\n     EmptySet, Union, Contains)\n from sympy import (Symbol, Eq, S, Abs, sin, pi, Interval,\n@@ -122,8 +123,32 @@ def test_subs_CondSet():\n         x + 1, x < 1, S.Integers))\n     raises(ValueError, lambda: ConditionSet(\n         x + 1, x < 1, s))\n+    \n+    # Test for issue with subs in ConditionSet containing ImageSet\n+    k = Symbol('k')\n+    img1 = imageset(Lambda(k, 2*k*pi + asin(y)), S.Integers)\n+    img2 = imageset(Lambda(k, 2*k*pi + asin(S.One/3)), S.Integers)\n+    cond_set = ConditionSet(x, Contains(y, Interval(-1, 1)), img1)\n+    # Test subs with y replaced by 1/3\n+    assert cond_set.subs(y, S.One/3).dummy_eq(img2)\n+\n+    # Additional related test for subs on ImageSet directly\n+    assert img1.subs(y, S.One/3) == img2\n+\n     assert ConditionSet(\n         n, n < x, Interval(0, oo)).subs(x, p) == Interval(0, oo)\n+    \n+    # Test for issue with subs in ConditionSet containing ImageSet\n+    k = Symbol('k')\n+    img1 = imageset(Lambda(k, 2*k*pi + asin(y)), S.Integers)\n+    img2 = imageset(Lambda(k, 2*k*pi + asin(S.One/3)), S.Integers)\n+    cond_set = ConditionSet(x, Contains(y, Interval(-1, 1)), img1)\n+    # Test subs with y replaced by 1/3\n+    assert cond_set.subs(y, S.One/3).dummy_eq(img2)\n+\n+    # Additional related test for subs on ImageSet directly\n+    assert img1.subs(y, S.One/3) == img2\n+\n     assert ConditionSet(\n         n, n < x, Interval(-oo, 0)).subs(x, p) == S.EmptySet\n     assert ConditionSet(f(x), f(x) < 1, {w, z}\n",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..0d72bfc 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -483,7 +483,33 @@ def test_geometry():\n     assert L == Line((0, 1), (1, 0)) and isinstance(L, Line)\n \n \n+from sympy import symbols, Rational, Interval, exp\n+from sympy.core.sympify import kernS, SympifyError\n+from sympy.abc import x, y\n+\n def test_kernS():\n+    # Original test case for the issue\n+    assert kernS(\"(2*x)/(x-1)\") == 2*x/(x-1)\n+\n+    # Test case for a simple polynomial\n+    assert kernS(\"x**2 + 2*x + 1\") == x**2 + 2*x + 1\n+\n+    # Test case with negative number and parentheses\n+    assert kernS(\"-(x + 1)\") == -(x + 1)\n+\n+    # Test case with spaces and implied multiplication\n+    assert kernS(\"2 (x + 1)\") == 2*(x + 1)\n+\n+    # Test case with a complex nested expression\n+    assert kernS(\"(x + y)/(1 - x*(1-y))\") == (x + y)/(1 - x*(1-y))\n+\n+    # Test case with missing parentheses to raise an error\n+    try:\n+        kernS(\"((x + y)\")\n+    except SympifyError:\n+        pass\n+    else:\n+        raise AssertionError(\"Expected a SympifyError due to unmatched parentheses\")\n     s =   '-1 - 2*(-(-x + 1/x)/(x*(x - 1/x)**2) - 1/(x*(x - 1/x)))'\n     # when 1497 is fixed, this no longer should pass: the expression\n     # should be unchanged\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_operator.py b/sympy/physics/quantum/tests/test_operator.py\nindex 799aaae..60c1d84 100644\n--- a/sympy/physics/quantum/tests/test_operator.py\n+++ b/sympy/physics/quantum/tests/test_operator.py\n@@ -1,5 +1,7 @@\n+\n from sympy import (Derivative, diff, Function, Integer, Mul, pi, sin, Symbol,\n                    symbols)\n+from sympy.physics.quantum import IdentityOperator\n from sympy.physics.quantum.qexpr import QExpr\n from sympy.physics.quantum.dagger import Dagger\n from sympy.physics.quantum.hilbert import HilbertSpace\n@@ -83,8 +85,13 @@ def test_unitary():\n     assert U.is_commutative is False\n     assert Dagger(U).is_commutative is False\n \n+def test_dagger_identity_operator():\n+    A = Operator('A')\n+    I = IdentityOperator()\n+    D_A = Dagger(A)\n \n-def test_identity():\n+    assert A * I == A  # This should simplify to A\n+    assert D_A * I == D_A  # This should simplify to Dagger(A)\n     I = IdentityOperator()\n     O = Operator('O')\n     x = Symbol(\"x\")\n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..bb23d90 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -900,6 +900,18 @@ def test_sylow_subgroup():\n     assert G.order() % S.order() == 0\n     assert G.order()/S.order() % 3 > 0\n \n+    # Test cases from the reported issue\n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+    S = G.sylow_subgroup(3)\n+    assert G.order() % S.order() == 0\n+    assert G.order()/S.order() % 3 > 0\n+\n     G = AlternatingGroup(100)\n     S = G.sylow_subgroup(2)\n     assert G.order() % S.order() == 0\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..1029464 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -471,7 +471,21 @@ def test_multiset_permutations():\n         6\\n''')\n \n \n+from sympy.utilities.iterables import partitions, uniq, S\n+\n def test_partitions():\n+    # Verify that partitions are not reusing the same dictionary\n+    partition_list = list(partitions(6, k=2))\n+    assert all(id(p) != id(partition_list[0]) for p in partition_list[1:]), \"All partitions should be distinct objects\"\n+\n+    partition_list = list(partitions(6))\n+    assert all(id(p) != id(partition_list[0]) for p in partition_list[1:]), \"All partitions should be distinct objects\"\n+\n+    # Verify that modifications to one partition do not affect others\n+    partitions_10 = list(partitions(10, k=3))\n+    first_partition = partitions_10[0]\n+    first_partition[1] = 999  # Modify the first partition\n+    assert all(p.get(1) != 999 for p in partitions_10[1:]), \"Modification should not affect other partitions\"\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n         assert list(partitions(0, size=i)) == ans[i]\n",
  "sympy__sympy-20801": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e1c7e2..feb3ff6 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -583,8 +583,29 @@ def test_Float():\n         assert Float(i) is a\n \n \n-\n-@conserve_mpmath_dps\n+from sympy import S\n+\n+def test_zero_not_false():\n+    # https://github.com/sympy/sympy/issues/20796\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n+\n+def test_comparisons_with_false():\n+    # Ensure comparison of various number types with S.false\n+    assert (S(1.0) == S.false) is False\n+    assert (S.false == S(1.0)) is False\n+    assert (S(-1.0) == S.false) is False\n+    assert (S.false == S(-1.0)) is False\n+    assert (S(0.5) == S.false) is False\n+    assert (S.false == S(0.5)) is False\n+    assert (S(-0.5) == S.false) is False\n+    assert (S.false == S(-0.5)) is False\n+    assert (S(1) == S.false) is False\n+    assert (S.false == S(1)) is False\n+    assert (S(-1) == S.false) is False\n+    assert (S.false == S(-1)) is False\n def test_float_mpf():\n     import mpmath\n     mpmath.mp.dps = 100\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..08e04a8 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -8,7 +9,41 @@ from sympy.core.basic import _aresame\n from sympy.testing.pytest import XFAIL\n from sympy.abc import a, x, y, z, t\n \n+from sympy.functions.elementary.trigonometric import sinh, cosh, tanh\n+from sympy.core.cache import clear_cache\n+\n def test_subs():\n+    # Test for issue related to PolynomialError with Piecewise and subs\n+\n+    # Setup symbols\n+    x_r, y_r, z_r = symbols('x_r y_r z_r', real=True)\n+\n+    # Expression that should not raise PolynomialError\n+    expr1 = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    expr2 = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    expr3 = exp(tanh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+\n+    # Clear cache to mimic the original issue conditions\n+    clear_cache()\n+\n+    # Test subs that should not raise errors\n+    assert expr1.subs({1: 1.0}) is not None\n+    assert expr2.subs({1: 1.0}) is not None\n+    assert expr3.subs({1: 1.0}) is not None\n+\n+    # Tests without division by z to confirm no error is raised\n+    expr_no_div1 = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n+    expr_no_div2 = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n+    expr_no_div3 = exp(tanh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n+\n+    assert expr_no_div1.subs({1: 1.0}) is not None\n+    assert expr_no_div2.subs({1: 1.0}) is not None\n+    assert expr_no_div3.subs({1: 1.0}) is not None\n+\n+    # Ensure expressions without exp do not raise errors\n+    assert sinh(Piecewise((x_r, y_r > x_r), (y_r, True))).subs({1: 1.0}) is not None\n+    assert cosh(Piecewise((x_r, y_r > x_r), (y_r, True))).subs({1: 1.0}) is not None\n+    assert tanh(Piecewise((x_r, y_r > x_r), (y_r, True))).subs({1: 1.0}) is not None\n     n3 = Rational(3)\n     e = x\n     e = e.subs(x, n3)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..130b0b5 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -78,7 +78,10 @@ def test_monomials():\n                             x * i * j, x * j * i\n             }\n \n-    # degree_list tests\n+    # Test cases for issue with min_degrees in itermonomials\n+    assert set(itermonomials([x1, x2, x3], 3, 3)) == {x1**3, x2**3, x3**3, x1**2*x2, x1**2*x3, x1*x2**2, x1*x3**2, x1*x2*x3, x2**2*x3, x2*x3**2, x2**3}\n+    assert set(itermonomials([x1, x2, x3], 4, 3)) == {x1**3, x1**4, x2**3, x2**4, x3**3, x3**4, x1**2*x2, x1**2*x3, x1*x2**2, x1*x3**2, x1*x2*x3, x2**2*x3, x2*x3**2, x2**3, x1**2*x2**2, x1**2*x3**2, x1*x2**2*x3, x1*x2*x3**2, x2**2*x3**2, x2*x3**3, x1*x2**3, x1*x3**3, x2**3*x3, x1**3*x2, x1*x2**3, x1**3*x3, x1**2*x2*x3, x1*x2*x3**3}\n+    assert set(itermonomials([x, y], [3, 2], [1, 1])) == {x, x*y, x*y**2, x**2, x**2*y, x**2*y**2, x**3, x**3*y, x**3*y**2}\n     assert set(itermonomials([], [])) == {S.One}\n \n     raises(ValueError, lambda: set(itermonomials([], [0])))\n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..7375ee2 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -267,6 +267,19 @@ def test_String():\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n+    assert st.func(*st.args) == st  # Additional test for argument invariance\n+\n+    # Test with a subclass of String\n+    si = Signifier('foobar')\n+    assert si.func(*si.args) == si\n+\n+    # Test with a different string\n+    s2 = String('hello')\n+    assert s2.func(*s2.args) == s2\n+\n+    # Test with a QuotedString subclass\n+    qs = QuotedString('quoted text')\n+    assert qs.func(*qs.args) == qs\n \n \n     class Signifier(String):\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..30c9502 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -10,6 +11,8 @@ from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n from sympy.testing.pytest import raises, warns\n+from sympy.core.parameters import evaluate\n+from sympy.geometry import Point2D\n \n \n def test_point():\n@@ -440,7 +443,22 @@ def test_unit():\n     assert Point(1, 1).unit == Point(sqrt(2)/2, sqrt(2)/2)\n \n \n-def test_dot():\n+def test_issue_22684():\n+    # Used to give an error\n+    with evaluate(False):\n+        p = Point(1, 2)\n+        assert isinstance(p, Point2D)  # Verify that the instance is created\n+        assert p.x == 1 and p.y == 2   # Check coordinates are correct\n+\n+    # Ensure no imaginary coordinates allowed\n+    with raises(ValueError, match='Imaginary coordinates are not permitted.'):\n+        with evaluate(False):\n+            Point(1 + I, 2)\n+\n+    # Check Point2D directly with evaluate=False\n+    p2 = Point2D(1, 2, evaluate=False)\n+    assert isinstance(p2, Point2D)\n+    assert p2.x == 1 and p2.y == 2\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n \n",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..cc79062 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n@@ -56,6 +57,14 @@ def test_PythonCodePrinter():\n     assert prntr.doprint(KroneckerDelta(x,y)) == '(1 if x == y else 0)'\n \n     assert prntr.doprint((2,3)) == \"(2, 3)\"\n+\n+    # Test cases for Min and Max\n+    assert prntr.doprint(Min(x, y)) == \"min(x, y)\"\n+    assert prntr.doprint(Max(x, y)) == \"max(x, y)\"\n+    assert prntr.doprint(Min(x, y, z)) == \"min(x, y, z)\"\n+    assert prntr.doprint(Max(x, y, z)) == \"max(x, y, z)\"\n+    assert prntr.doprint(Min(x, 1)) == \"min(x, 1)\"\n+    assert prntr.doprint(Max(y, 1, 2)) == \"max(y, 1, 2)\"\n     assert prntr.doprint([2,3]) == \"[2, 3]\"\n \n \n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..e867eab 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,9 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+from sympy import lambdify\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n@@ -1182,7 +1185,21 @@ def test_lambdify_inspect():\n     assert 'x**2' in inspect.getsource(f)\n \n \n-def test_issue_14941():\n+def test_single_element_tuple():\n+    # Test for single-element tuple\n+    f_single = lambdify([], (1,))\n+    assert f_single() == (1,)\n+    # Verify using inspect to ensure the function source code contains the comma\n+    source_code = inspect.getsource(f_single)\n+    assert \"return (1,)\" in source_code\n+\n+def test_multi_element_tuple():\n+    # Test for multi-element tuple\n+    f_multi = lambdify([], (1, 2))\n+    assert f_multi() == (1, 2)\n+    # Verify using inspect to ensure the function source code contains the tuple correctly\n+    source_code = inspect.getsource(f_multi)\n+    assert \"return (1, 2)\" in source_code\n     x, y = Dummy(), Dummy()\n \n     # test dict\n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..1ff9ed1 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,8 +1,26 @@\n+\n+def test_symbols_with_functions():\n+    # Test with extra layer of parentheses\n+    q, u = symbols(('q:2', 'u:2'), cls=Function)\n+    assert type(q[0]) == UndefinedFunction\n+    assert type(u[1]) == UndefinedFunction\n+\n+    # Ensure it still works without extra parentheses\n+    q, u = symbols('q:2 u:2', cls=Function)\n+    assert type(q[0]) == UndefinedFunction\n+    assert type(u[1]) == UndefinedFunction\n+\n+    # Test without specifying cls to ensure default behavior\n+    x, y = symbols(('x:2', 'y:2'))\n+    assert type(x[0]) == Symbol\n+    assert type(y[1]) == Symbol\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n from sympy.core.sympify import sympify  # can't import as S yet\n from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n+from sympy.core.function import Function, UndefinedFunction\n \n from sympy.testing.pytest import raises\n from sympy.core.symbol import disambiguate\n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..2965f68 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -261,8 +261,26 @@ def test_kahane_simplify1():\n     r = kahane_simplify(t)\n     assert r.equals(-2*G(sigma)*G(rho)*G(nu))\n \n-\n-def test_gamma_matrix_class():\n+def test_kahane_simplify_leading_matrices():\n+    mu, nu, rho, sigma = tensor_indices(\"mu nu rho sigma\", LorentzIndex)\n+\n+    # Test case directly from the issue description\n+    t1 = G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r1 = kahane_simplify(t1)\n+    assert r1.equals(4*G(rho)*G(sigma))\n+\n+    t2 = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r2 = kahane_simplify(t2)\n+    assert r2.equals(4*G(rho)*G(sigma))\n+\n+    # Additional case to ensure robustness\n+    t3 = G(sigma)*G(rho)*G(mu)*G(-mu)\n+    r3 = kahane_simplify(t3)\n+    assert r3.equals(4*G(sigma)*G(rho))\n+\n+    t4 = G(rho)*G(mu)*G(-mu)*G(sigma)\n+    r4 = kahane_simplify(t4)\n+    assert r4.equals(4*G(rho)*G(sigma))\n     i, j, k = tensor_indices('i,j,k', LorentzIndex)\n \n     # define another type of TensorHead to see if exprs are correctly handled:\n",
  "sympy__sympy-23950": "",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..f90dff4 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -541,7 +541,29 @@ def test_issue_20288():\n     assert SI._collect_factor_and_dimension(expr) == (1 + E, Dimension(1))\n \n \n-def test_prefixed_property():\n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units import Quantity\n+    from sympy.physics.units.systems.si import SI\n+    from sympy import exp\n+    from sympy.physics.units.dimensions import Dimension\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n     assert not day.is_prefixed\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..a1f719c 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -562,6 +562,46 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n+from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+from sympy.physics.units.systems.si import SI\n+\n+\n+def test_issue_24211():\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+\n+def test_collect_factor_and_dimension_with_negative_scale():\n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * meter / second)\n+\n+    a1 = Quantity('a1')\n+    SI.set_quantity_dimension(a1, acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)\n+\n+    t1 = Quantity('t1')\n+    SI.set_quantity_dimension(t1, time)\n+    SI.set_quantity_scale_factor(t1, 5 * second)\n+\n+    expr1 = a1 * t1 + v1\n+    # This should not raise a ValueError\n+    factor, dimension = SI._collect_factor_and_dimension(expr1)\n+    assert dimension == SI.get_dimension_system().get_dimensional_expr(velocity)\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..bc60244 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,3 +1,4 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n@@ -57,7 +58,11 @@ def test_homomorphism():\n     assert T.codomain == D\n     assert T(a*b) == p\n \n-def test_isomorphisms():\n+def test_issue_check_homomorphism_permutation_group():\n+    # Test the issue described with _check_homomorphism on PermutationGroups\n+    D3 = DihedralGroup(3)\n+    T = homomorphism(D3, D3, D3.generators, D3.generators)\n+    assert T.is_isomorphism()\n \n     F, a, b = free_group(\"a, b\")\n     E, c, d = free_group(\"c, d\")\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..359f107 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -259,12 +259,26 @@ def test_PolyElement_as_expr():\n     assert f != g\n     assert f.as_expr() == g\n \n+    # Original test case, ensure it works as expected\n     X, Y, Z = symbols(\"x,y,z\")\n     g = 3*X**2*Y - X*Y*Z + 7*Z**3 + 1\n \n     assert f != g\n     assert f.as_expr(X, Y, Z) == g\n \n+    # New test case to verify the issue fix\n+    U, V, W = symbols(\"u,v,w\")\n+    g_uv = 3*U**2*V - U*V*W + 7*W**3 + 1\n+    assert f.as_expr(U, V, W) == g_uv\n+\n+    # Test with different numbers of symbols to ensure ValueError\n+    raises(ValueError, lambda: f.as_expr(U, V))\n+    raises(ValueError, lambda: f.as_expr(U, V, W, X))\n+    g = 3*X**2*Y - X*Y*Z + 7*Z**3 + 1\n+\n+    assert f != g\n+    assert f.as_expr(X, Y, Z) == g\n+\n     raises(ValueError, lambda: f.as_expr(X))\n \n     R, = ring(\"\", ZZ)\n",
  "sympy__sympy-24661": "diff --git a/sympy/parsing/tests/test_sympy_parser.py b/sympy/parsing/tests/test_sympy_parser.py\nindex 3723931..5f4c3f1 100644\n--- a/sympy/parsing/tests/test_sympy_parser.py\n+++ b/sympy/parsing/tests/test_sympy_parser.py\n@@ -274,7 +274,27 @@ def test_convert_equals_signs():\n         transformations=transformations) == Eq(Eq(2*y, x), False)\n \n \n-def test_parse_function_issue_3539():\n+def test_issue_24288():\n+    inputs = {\n+        \"1 < 2\": Lt(1, 2, evaluate=False),\n+        \"1 <= 2\": Le(1, 2, evaluate=False),\n+        \"1 > 2\": Gt(1, 2, evaluate=False),\n+        \"1 >= 2\": Ge(1, 2, evaluate=False),\n+        \"1 != 2\": Ne(1, 2, evaluate=False),\n+        \"1 == 2\": Eq(1, 2, evaluate=False)\n+    }\n+    for text, result in inputs.items():\n+        assert parse_expr(text, evaluate=False) == result\n+\n+def test_issue_24288_additional():\n+    # Test more complex expressions\n+    expressions = {\n+        \"(1 < 2) & (3 > 2)\": And(Lt(1, 2, evaluate=False), Gt(3, 2, evaluate=False), evaluate=False),\n+        \"(1 <= 2) | (2 >= 3)\": Or(Le(1, 2, evaluate=False), Ge(2, 3, evaluate=False), evaluate=False),\n+        \"~(1 == 2)\": Not(Eq(1, 2, evaluate=False), evaluate=False)\n+    }\n+    for expr_str, sympy_obj in expressions.items():\n+        assert parse_expr(expr_str, evaluate=False) == sympy_obj\n     x = Symbol('x')\n     f = Function('f')\n     assert parse_expr('f(x)') == f(x)\n",
  "astropy__astropy-14369": "",
  "astropy__astropy-14598": "",
  "django__django-11299": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex b3dc643..a0ba1ad 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1888,7 +1888,31 @@ class OperationTests(OperationTestBase):\n         operation = migrations.AddConstraint('Author', constraint)\n         from_state = to_state\n         to_state = from_state.clone()\n+from django.db import models, connection, transaction, IntegrityError\n+from django.db.models import Q, F\n+from django.test import skipUnlessDBFeature\n+\n+class MigrationTests(SimpleTestCase):\n+    ...\n+\n+    @skipUnlessDBFeature('supports_table_check_constraints')\n+    def test_check_constraint_or_operator(self):\n+        app_label = 'test_or_issue'\n+        constraint_name = 'check_constraint_or_issue'\n+        from_state = self.set_up_test_model(app_label)\n+        check = models.Q(flag__exact=True, field_1__isnull=False) | models.Q(flag__exact=False)\n+        constraint = models.CheckConstraint(check=check, name=constraint_name)\n+        operation = migrations.AddConstraint('TestConstraint', constraint)\n+        to_state = from_state.clone()\n         operation.state_forwards(app_label, to_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, from_state, to_state)\n+        TestConstraint = to_state.apps.get_model(app_label, 'TestConstraint')\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            TestConstraint.objects.create(flag=True, field_1=None)\n+        TestConstraint.objects.create(flag=False, field_1=None)\n+        TestConstraint.objects.create(flag=True, field_1=1)\n+        self.assertEqual(TestConstraint.objects.count(), 2)\n         Author = to_state.apps.get_model(app_label, 'Author')\n         with connection.schema_editor() as editor:\n             operation.database_forwards(app_label, editor, from_state, to_state)\n",
  "django__django-11477": "diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex e4898b6..53210b1 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -163,8 +163,18 @@ class URLTranslationTests(URLTestCaseBase):\n             self.assertEqual(translate_url('/nl/gebruikers/', 'en'), '/en/users/')\n             self.assertEqual(translation.get_language(), 'nl')\n \n+    def test_translate_url_with_optional_groups(self):\n+        # Additional test cases for optional named groups in URL patterns.\n+        with translation.override('en'):\n+            # Test URL with a missing optional parameter\n+            self.assertEqual(translate_url('/en/with-arguments/regular-argument/', 'nl'), '/nl/with-arguments/regular-argument/')\n+            # Test URL with present optional parameter\n+            self.assertEqual(translate_url('/en/with-arguments/regular-argument/optional.html', 'nl'), '/nl/with-arguments/regular-argument/optional.html')\n \n-class URLNamespaceTests(URLTestCaseBase):\n+        with translation.override('nl'):\n+            # Reverse test to ensure URL translation is bidirectional\n+            self.assertEqual(translate_url('/nl/with-arguments/regular-argument/', 'en'), '/en/with-arguments/regular-argument/')\n+            self.assertEqual(translate_url('/nl/with-arguments/regular-argument/optional.html', 'en'), '/en/with-arguments/regular-argument/optional.html')\n     \"\"\"\n     Tests if the translations are still working within namespaces.\n     \"\"\"\n",
  "django__django-12273": "",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..e4f504b 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -638,7 +638,12 @@ class FastDeleteTests(TestCase):\n         self.assertEqual(User.objects.count(), 1)\n         self.assertTrue(User.objects.filter(pk=u2.pk).exists())\n \n-    def test_fast_delete_instance_set_pk_none(self):\n+    def test_fast_delete_all_without_subquery(self):\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        # Ensure no subquery is used when performing a full delete.\n+        self.assertNotIn('SELECT', sql)\n         u = User.objects.create()\n         # User can be fast-deleted.\n         collector = Collector(using='default')\n@@ -702,4 +707,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..9348d7a 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from decimal import Decimal\n \n@@ -24,8 +25,11 @@ class DecimalFieldTests(TestCase):\n         msg = '\u201cabc\u201d value must be a decimal number.'\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n-\n-    def test_default(self):\n+    def test_dict_value_raises_validation_error(self):\n+        field = models.DecimalField(max_digits=4, decimal_places=2)\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        with self.assertRaisesMessage(ValidationError, msg % ({})):\n+            field.to_python({})\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n \n",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..90f0661 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,9 +1,11 @@\n+\n import datetime\n import pickle\n \n import django\n from django.db import models\n from django.test import TestCase\n+from django.db.models import Sum\n \n from .models import Container, Event, Group, Happening, M2MModel, MyEvent\n \n@@ -48,6 +50,15 @@ class PickleabilityTestCase(TestCase):\n         self.assertEqual(original.__class__, unpickled.__class__)\n         self.assertEqual(original.args, unpickled.args)\n \n+    def test_pickled_values_annotate_queryset(self):\n+        Toy.objects.create(name='foo', price=10, material='wood')\n+        Toy.objects.create(name='bar', price=20, material='plastic')\n+        Toy.objects.create(name='baz', price=100, material='wood')\n+        prices = Toy.objects.values('material').annotate(total_price=Sum('price'))\n+        prices2 = Toy.objects.all()\n+        prices2.query = pickle.loads(pickle.dumps(prices.query))\n+        self.assertEqual(list(prices), list(prices2))\n+\n     def test_doesnotexist_class(self):\n         klass = Event.DoesNotExist\n         self.assertIs(pickle.loads(pickle.dumps(klass)), klass)\n",
  "django__django-13449": "diff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\nindex 3f59cdf..d9c7568 100644\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -11,4 +11,5 @@ class Employee(models.Model):\n     department = models.CharField(max_length=40, blank=False, null=False)\n     hire_date = models.DateField(blank=False, null=False)\n     age = models.IntegerField(blank=False, null=False)\n-    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\n",
  "django__django-13512": "diff --git a/tests/forms_tests/field_tests/test_jsonfield.py b/tests/forms_tests/field_tests/test_jsonfield.py\nindex e31bff4..1d46bfb 100644\n--- a/tests/forms_tests/field_tests/test_jsonfield.py\n+++ b/tests/forms_tests/field_tests/test_jsonfield.py\n@@ -25,6 +25,15 @@ class JSONFieldTest(SimpleTestCase):\n             field.clean('{some badly formed: json}')\n \n     def test_prepare_value(self):\n+        field = JSONField()\n+        # Test unicode characters in JSONField\n+        self.assertEqual(field.prepare_value({'a': '\u4f60\u597d \u4e16\u754c'}), '{\"a\": \"\u4f60\u597d \u4e16\u754c\"}')\n+        self.assertEqual(field.prepare_value('\u4f60\u597d\uff0c\u4e16\u754c'), '\"\u4f60\u597d\uff0c\u4e16\u754c\"')\n+        self.assertEqual(field.prepare_value({'a': '\ud83d\ude00\ud83d\udc31'}), '{\"a\": \"\ud83d\ude00\ud83d\udc31\"}')\n+        self.assertEqual(\n+            field.prepare_value([\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]),\n+            '[\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]',\n+        )\n         field = JSONField()\n         self.assertEqual(field.prepare_value({'a': 'b'}), '{\"a\": \"b\"}')\n         self.assertEqual(field.prepare_value(None), 'null')\n",
  "django__django-14404": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 8fb91af..bc6dbac 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -6603,6 +6603,40 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         self.assertRedirects(response, known_url, status_code=301, target_status_code=403)\n \n     @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1], SCRIPT_NAME='/prefix/')\n+        self.assertRedirects(\n+            response,\n+            '/prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/prefix/')\n+    def test_missing_slash_append_slash_true_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n         user = User.objects.create_user(\n             username='user',\n@@ -6629,6 +6663,40 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         self.assertEqual(response.status_code, 404)\n \n     @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1], SCRIPT_NAME='/prefix/')\n+        self.assertRedirects(\n+            response,\n+            '/prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/prefix/')\n+    def test_missing_slash_append_slash_true_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n     def test_single_model_no_append_slash(self):\n         superuser = User.objects.create_user(\n             username='staff',\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..3074480 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -655,6 +655,13 @@ class WriterTests(SimpleTestCase):\n         self.assertEqual(result.args, value.args)\n         self.assertEqual(result.keywords, value.keywords)\n \n+    def test_serialize_type_model(self):\n+        self.assertSerializedEqual(models.Model)\n+        self.assertSerializedResultEqual(\n+            MigrationWriter.serialize(models.Model),\n+            (\"('models.Model', {'from django.db import models'})\", set()),\n+        )\n+\n     def test_serialize_type_none(self):\n         self.assertSerializedEqual(type(None))\n \n@@ -691,7 +698,39 @@ class WriterTests(SimpleTestCase):\n         result = self.safe_exec(output)\n         self.assertIn(\"Migration\", result)\n \n-    def test_migration_path(self):\n+    def test_generate_migration_with_mixin_and_abstract_base(self):\n+        \"\"\"\n+        Test generating a migration for a model with a mixin and abstract base class.\n+        This should ensure that all necessary imports are included.\n+        \"\"\"\n+        class MyMixin:\n+            pass\n+\n+        class MyBaseModel(models.Model):\n+            class Meta:\n+                abstract = True\n+\n+        class MyField(models.TextField):\n+            pass\n+\n+        fields = {\n+            'name': MyField(primary_key=True)\n+        }\n+\n+        migration = type(\"Migration\", (migrations.Migration,), {\n+            \"operations\": [\n+                migrations.CreateModel(\"MyModel\", fields=tuple(fields.items()), bases=(MyMixin, MyBaseModel)),\n+            ],\n+            \"dependencies\": [],\n+        })\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        \n+        # Ensure the migration can be executed and imports models\n+        result = self.safe_exec(output)\n+        self.assertIn(\"Migration\", result)\n+        self.assertIn(\"from django.db import models\", output)\n+        self.assertIn(\"import app.models\", output)\n         test_apps = [\n             'migrations.migrations_test_apps.normal',\n             'migrations.migrations_test_apps.with_package_model',\n",
  "django__django-15375": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1d4ef56..039c1ce 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1629,8 +1629,21 @@ class AggregateTestCase(TestCase):\n             value=Sum('price', filter=Q(rating__lt=3.0), default=Avg('pages') / 10.0),\n         )\n         self.assertAlmostEqual(result['value'], Decimal('61.72'), places=2)\n+    def test_aggregation_default_after_annotation(self):\n+        result = Book.objects.annotate(\n+            double_id=F('id') * 2,\n+        ).aggregate(value=Sum('double_id', default=0))\n+        self.assertEqual(result['value'], 9120)  # Assuming 95 books and sum of ids is 4560\n \n-    def test_exists_none_with_aggregate(self):\n+    def test_aggregation_with_default_on_empty_queryset(self):\n+        result = Book.objects.none().aggregate(default_sum=Sum('id', default=100))\n+        self.assertEqual(result['default_sum'], 100)\n+\n+    def test_aggregation_default_with_filter(self):\n+        result = Book.objects.annotate(high_rating=F('rating')).filter(rating__gte=5).aggregate(\n+            value=Sum('id', default=50)\n+        )\n+        self.assertEqual(result['value'], 50)  # Assuming no books with a rating >= 5\n         qs = Book.objects.all().annotate(\n             count=Count('id'),\n             exists=Exists(Author.objects.none()),\n@@ -1642,4 +1655,4 @@ class AggregateTestCase(TestCase):\n             count=Count('id'),\n             exists=Exists(Author.objects.extra(where=['1=0'])),\n         )\n-        self.assertEqual(len(qs), 6)\n+        self.assertEqual(len(qs), 6)\n",
  "django__django-15695": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 99db46a..7fd3078 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -2984,10 +2984,27 @@ class OperationTests(OperationTestBase):\n         with connection.schema_editor() as editor:\n             operation.database_forwards(app_label, editor, project_state, new_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n-        # Reverse is a no-op.\n-        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+        # Attempt renaming backward and forward.\n+        # Test renaming the index backward should not crash and should restore the original name.\n+        with connection.schema_editor() as editor:\n+            # Simulate a backward operation restoring the original index name.\n             operation.database_backwards(app_label, editor, new_state, project_state)\n+        self.assertIndexNameExists(table_name, \"original_pony_test_idx\")\n+        \n+        # Re-apply renaming forward again.\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+\n+        # Repeat the backward and forward renaming to ensure stability.\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        self.assertIndexNameExists(table_name, \"original_pony_test_idx\")\n+\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+\n         # Deconstruction.\n         definition = operation.deconstruct()\n         self.assertEqual(definition[0], \"RenameIndex\")\n",
  "django__django-15732": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 42e02c2..fc87389 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -594,8 +594,55 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n             and type(operation) is not type(self)\n         )\n \n+import unittest\n+from django.db import connection\n+from django.db import migrations, models\n+from django.test import TestCase\n+from django.test.utils import skipUnlessDBFeature\n+from django.db.migrations.state import ProjectState\n \n class AlterUniqueTogether(AlterTogetherOptionOperation):\n+    @skipUnlessDBFeature(\"supports_table_check_constraints\")\n+    def test_remove_unique_together_on_combined_constraints(self):\n+        \"\"\"\n+        Test removing unique_together when there are multiple constraints on the same field,\n+        specifically when there are combined unique_together constraints on different fields.\n+        \"\"\"\n+        app_label = \"test_rutocc\"\n+        project_state = self.apply_operations(\n+            app_label,\n+            ProjectState(),\n+            operations=[\n+                migrations.CreateModel(\n+                    \"Pony\",\n+                    fields=[\n+                        (\"id\", models.AutoField(primary_key=True)),\n+                        (\"name\", models.CharField(max_length=30, unique=True)),\n+                        (\"nickname\", models.CharField(max_length=30)),\n+                    ],\n+                    options={\n+                        \"unique_together\": {(\"name\", \"nickname\")},\n+                    },\n+                ),\n+            ],\n+        )\n+        table_name = f\"{app_label}_pony\"\n+        unique_constraint_name = f\"{table_name}_name_key\"\n+        unique_together_constraint_name = (\n+            f\"{table_name}_name_nickname_uniq\"\n+        )\n+        self.assertConstraintExists(table_name, unique_constraint_name, value=False)\n+        self.assertConstraintExists(\n+            table_name, unique_together_constraint_name, value=False\n+        )\n+\n+        new_state = project_state.clone()\n+        operation = migrations.AlterUniqueTogether(\"Pony\", set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertConstraintExists(table_name, unique_constraint_name, value=False)\n+        self.assertConstraintNotExists(table_name, unique_together_constraint_name)\n     \"\"\"\n     Change the value of unique_together to the target one.\n     Input value of unique_together must be a set of tuples.\n",
  "django__django-15916": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex cc5e08c..a8e0d58 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -3496,6 +3496,47 @@ class FormFieldCallbackTests(SimpleTestCase):\n                 type(NewForm.base_fields[name].widget),\n             )\n \n+    def test_modelform_factory_with_meta_formfield_callback(self):\n+        def callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea)\n+\n+        class MyModel(models.Model):\n+            active = models.BooleanField()\n+            name = models.CharField(max_length=64, blank=True, null=True)\n+\n+        class MyForm(forms.ModelForm):\n+            class Meta:\n+                model = MyModel\n+                fields = ['active', 'name']\n+                formfield_callback = callback\n+\n+        FactoryForm = modelform_factory(MyModel, form=MyForm)\n+\n+        for field in FactoryForm.base_fields.values():\n+            self.assertEqual(type(field.widget), forms.Textarea)\n+\n+    def test_formfield_callback_precedence(self):\n+        def meta_callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea)\n+\n+        def override_callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.HiddenInput)\n+\n+        class MyModel(models.Model):\n+            active = models.BooleanField()\n+            name = models.CharField(max_length=64, blank=True, null=True)\n+\n+        class MyForm(forms.ModelForm):\n+            class Meta:\n+                model = MyModel\n+                fields = ['active', 'name']\n+                formfield_callback = meta_callback\n+\n+        FactoryForm = modelform_factory(MyModel, form=MyForm, formfield_callback=override_callback)\n+\n+        for field in FactoryForm.base_fields.values():\n+            self.assertEqual(type(field.widget), forms.HiddenInput)\n+\n \n class LocalizedModelFormTest(TestCase):\n     def test_model_form_applies_localize_to_some_fields(self):\n",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..c3dbaf7 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -9,7 +9,10 @@ from django.core.serializers.json import DjangoJSONEncoder\n from django.db import models\n from django.test import SimpleTestCase, TestCase, TransactionTestCase\n from django.test.utils import isolate_apps\n-from django.utils.translation import gettext_lazy, override\n+from django.core.exceptions import FieldError\n+from django.test import TestCase\n+from django.db import models\n+from django.core import serializers\n \n from .models import Score\n from .tests import SerializersTestBase, SerializersTransactionTestBase\n@@ -258,7 +261,31 @@ class JsonSerializerTestCase(SerializersTestBase, TestCase):\n             for obj in serializers.deserialize(\"json\", test_string, ignore=False):\n                 obj.save()\n \n-    def test_helpful_error_message_for_many2many_not_iterable(self):\n+    def test_m2m_serialization_with_custom_manager_select_related(self):\n+        class TestTagMaster(models.Model):\n+            name = models.CharField(max_length=120)\n+\n+        class TestTagManager(models.Manager):\n+            def get_queryset(self):\n+                return super().get_queryset().select_related(\"master\")\n+\n+        class TestTag(models.Model):\n+            objects = TestTagManager()\n+            name = models.CharField(max_length=120)\n+            master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)\n+\n+        class Test(models.Model):\n+            name = models.CharField(max_length=120)\n+            tags = models.ManyToManyField(TestTag, blank=True)\n+\n+        tag_master = TestTagMaster.objects.create(name=\"master\")\n+        tag = TestTag.objects.create(name=\"tag\", master=tag_master)\n+        test_instance = Test.objects.create(name=\"test\")\n+        test_instance.tags.add(tag)\n+        test_instance.save()\n+\n+        serialized_data = serializers.serialize(\"json\", [test_instance])\n+        self.assertIn('\"model\": \"test\"', serialized_data)\n         \"\"\"\n         Not iterable many-to-many field value throws a helpful error message.\n         \"\"\"\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 53fdd55..54bb208 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -222,7 +222,24 @@ def test_mpl_toolkits():\n     assert type(pickle.loads(pickle.dumps(ax))) == parasite_axes.HostAxes\n \n \n-def test_standard_norm():\n+def test_unpickle_with_device_pixel_ratio():\n+    # This test is derived from the original test patch given in the issue\n+    fig = plt.figure(dpi=42)\n+    fig.canvas._set_device_pixel_ratio(7)\n+    assert fig.dpi == 42*7\n+    fig2 = pickle.loads(pickle.dumps(fig))\n+    assert fig2.dpi == 42\n+\n+def test_dpi_after_unpickle_on_m1_mac():\n+    # This test is to simulate the issue on M1 Mac\n+    if platform.system() == \"Darwin\" and platform.machine() == \"arm64\":\n+        initial_dpi = 200\n+        fig = plt.figure(dpi=initial_dpi)\n+        out = io.BytesIO()\n+        pickle.dump(fig, out)\n+        out.seek(0)\n+        fig2 = pickle.load(out)\n+        assert fig2.dpi == initial_dpi, f\"Expected {initial_dpi} but got {fig2.dpi}\"\n     assert type(pickle.loads(pickle.dumps(mpl.colors.LogNorm()))) \\\n         == mpl.colors.LogNorm\n \n",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 87375f2..9286b26 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6587,6 +6587,19 @@ def test_integrate(dask):\n \n     # along y\n     actual = da.integrate(\"y\")\n+\n+    # Test if using 'dim' raises FutureWarning\n+    with pytest.warns(FutureWarning):\n+        da.integrate(dim=\"x\")\n+\n+    # Test the new consistent API with 'coord'\n+    actual_coord = da.integrate(coord=\"x\")\n+    expected_coord = xr.DataArray(\n+        np.trapz(da, da[\"x\"], axis=0),\n+        dims=[\"y\"],\n+        coords={k: v for k, v in da.coords.items() if \"x\" not in v.dims},\n+    )\n+    assert_allclose(expected_coord, actual_coord.compute())\n     expected_y = xr.DataArray(\n         np.trapz(da, da[\"y\"], axis=1),\n         dims=[\"x\"],\n",
  "pydata__xarray-4094": "",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..eb641f3 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -130,6 +130,35 @@ def test_regex_error(capsys: CaptureFixture) -> None:\n     )\n     assert assertString in output.err\n \n+from typing import Any\n+import re\n+import pytest\n+from pylint.lint import Run\n+from pylint.testutils import EMPTY_MODULE\n+from typing import Any\n+\n+CSV_REGEX_COMMA_CASES = [\n+    (\"foo\", [\"foo\"]),\n+    (\"foo,bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar{1,3}\", [\"foo\", \"bar{1,3}\"]),\n+    (\"(foo{1,3})\", [\"(foo{1,3})\"]),\n+]\n+\n+@pytest.mark.parametrize(\"in_string,expected\", CSV_REGEX_COMMA_CASES)\n+def test_csv_regex_comma_in_quantifier(in_string: str, expected: list[str]) -> None:\n+    \"\"\"Check that we correctly parse a comma-separated regex when there are one\n+    or more commas within quantifier expressions.\n+    \"\"\"\n+    def _template_run(in_string: str) -> list[re.Pattern[Any]]:\n+        r = Run(\n+            [str(EMPTY_MODULE), rf\"--bad-names-rgx={in_string}\"],\n+            exit=False,\n+        )\n+        bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs\n+        return bad_names_rgxs\n+\n+    assert _template_run(in_string) == [re.compile(regex) for regex in expected]\n \n def test_csv_regex_error(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error when an option is passed and one\n",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..66f58c4 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1155,8 +1155,24 @@ def test_summary_list_after_errors(testdir):\n         ]\n     )\n \n+def test_does_not_eagerly_collect_packages(testdir):\n+    testdir.makepyfile(\"def test(): pass\")\n+    pydir = testdir.mkpydir(\"foopkg\")\n+    pydir.join(\"__init__.py\").write(\"assert False\")\n+    result = testdir.runpytest()\n+    assert result.ret == ExitCode.OK\n \n-def test_importorskip():\n+def test_does_not_put_src_on_path(testdir):\n+    # `src` is not on sys.path so it should not be importable\n+    testdir.tmpdir.join(\"src/nope/__init__.py\").ensure()\n+    testdir.makepyfile(\n+        \"import pytest\\n\"\n+        \"def test():\\n\"\n+        \"    with pytest.raises(ImportError):\\n\"\n+        \"        import nope\\n\"\n+    )\n+    result = testdir.runpytest()\n+    assert result.ret == ExitCode.OK\n     with pytest.raises(\n         pytest.skip.Exception,\n         match=\"^could not import 'doesnotexist': No module named .*\",\n@@ -1184,4 +1200,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "diff --git a/testing/test_mark_expression.py b/testing/test_mark_expression.py\nindex 10b71e9..a88b358 100644\n--- a/testing/test_mark_expression.py\n+++ b/testing/test_mark_expression.py\n@@ -139,6 +139,18 @@ def test_valid_idents(ident: str) -> None:\n     assert evaluate(ident, {ident: True}.__getitem__)\n \n \n+@pytest.mark.parametrize(\n+    \"restricted_ident\",\n+    (\n+        \"None\",\n+        \"True\",\n+        \"False\",\n+    ),\n+)\n+def test_compiler_nameop_restricted_idents(restricted_ident: str) -> None:\n+    with pytest.raises(AssertionError):\n+        Expression.compile(restricted_ident)\n+\n @pytest.mark.parametrize(\n     \"ident\",\n     (\n",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..59a0ee1 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,41 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+\n+def test_feature_union_with_pandas_output():\n+    \"\"\"Test FeatureUnion with a custom transformer and pandas output.\"\"\"\n+    import pandas as pd\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn.pipeline import FeatureUnion\n+    from sklearn import set_config\n+    from numpy.testing import assert_array_equal\n+\n+    # Create a custom transformer\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X, y=None, **kwargs):\n+            return self\n+\n+        def transform(self, X, y=None):\n+            return X[\"value\"].groupby(X[\"date\"]).sum().to_frame()\n+\n+    # Sample data\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    # Set pandas output\n+    set_config(transform_output=\"pandas\")\n+\n+    # Create the FeatureUnion with MyTransformer\n+    union = FeatureUnion([(\"my_trans\", MyTransformer())])\n+\n+    # Transform the data\n+    transformed_data = union.fit_transform(data)\n+\n+    # Group the original data to get the expected result\n+    expected_data = data.groupby(\"date\")[\"value\"].sum().to_frame()\n+\n+    # Check that the transformed data matches the expected data\n+    assert transformed_data.equals(expected_data)\n",
  "sphinx-doc__sphinx-7454": "",
  "sphinx-doc__sphinx-8056": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 1d6a8cf..94d3e82 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1307,7 +1307,55 @@ class NumpyDocstringTest(BaseDocstringTest):\n                       ).format(admonition)\n             self.assertEqual(expect, actual)\n \n-    def test_docstrings(self):\n+    def test_multiple_parameters(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like\n+            Input arrays, description of ``x1``, ``x2``.\n+        \"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of ``x1``, ``x2``.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of ``x1``, ``x2``.\n+        :type x1: :class:`array_like`\n+        :param x2: Input arrays, description of ``x1``, ``x2``.\n+        :type x2: :class:`array_like`\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_optional_parameters(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`, *optional*\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`, *optional*\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n         config = Config(\n             napoleon_use_param=False,\n             napoleon_use_rtype=False,\n",
  "sphinx-doc__sphinx-8551": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex fd4bdc4..a39f231 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -775,6 +775,41 @@ def test_pydecoratormethod_signature(app):\n \n \n @pytest.mark.sphinx(freshenv=True)\n+def test_type_and_rtype_class_resolution(app, status, warning):\n+    text = (\"\"\"\n+.. py:module:: mod\n+\n+.. py:class:: A\n+\n+.. py:module:: mod.submod\n+\n+.. py:class:: A\n+\n+.. py:currentmodule:: mod\n+\n+.. py:function:: f()\n+\n+    :param A a:\n+    :param mod.A b:\n+    :param mod.submod.A c:\n+    :rtype: A\n+    :rtype: mod.A\n+    :rtype: mod.submod.A\n+\n+.. py:currentmodule:: mod.submod\n+\n+.. py:function:: f()\n+\n+    :param A a: BUG: links to mod.A instead of mod.submod.A\n+    :param mod.A b:\n+    :param mod.submod.A c:\n+    :rtype: A\n+    :rtype: mod.A\n+    :rtype: mod.submod.A\n+\"\"\")\n+    restructuredtext.parse(app, text)\n+    warnings = warning.getvalue().strip()\n+    assert \"more than one target found for cross-reference 'A'\" not in warnings\n def test_module_index(app):\n     text = (\".. py:module:: docutils\\n\"\n             \".. py:module:: sphinx\\n\"\n",
  "sphinx-doc__sphinx-8593": "diff --git a/tests/roots/test-ext-autodoc/target/private.py b/tests/roots/test-ext-autodoc/target/private.py\nindex 677b469..808c903 100644\n--- a/tests/roots/test-ext-autodoc/target/private.py\n+++ b/tests/roots/test-ext-autodoc/target/private.py\n@@ -1,3 +1,7 @@\n+\n+_foo = None  #: :meta public:\n+PRIVATE_CONSTANT = None  #: :meta private:\n+\n def private_function(name):\n     \"\"\"private_function is a docstring().\n \n@@ -8,4 +12,4 @@ def _public_function(name):\n     \"\"\"public_function is a docstring().\n \n     :meta public:\n-    \"\"\"\n+    \"\"\"\n",
  "sphinx-doc__sphinx-9230": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex e86a758..401c7ca 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -984,6 +984,47 @@ def test_info_field_list(app):\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n \n+def test_param_rendering_with_dict(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:function:: example_function\\n\"\n+            \"\\n\"\n+            \"   :param dict(str, str) opc_meta: (optional)\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree, (nodes.target,\n+                          addnodes.index,\n+                          addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"function \"],\n+                                                    [desc_addname, \"example.\"],\n+                                                    [desc_name, \"example_function\"])],\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree[3][1][0][0],\n+                ([nodes.field_name, \"Parameters\"],\n+                 [nodes.field_body, nodes.bullet_list, ([nodes.list_item, nodes.paragraph])]))\n+\n+    # :param dict(str, str) opc_meta:\n+    assert_node(doctree[3][1][0][0][1][0][0][0],\n+                ([addnodes.literal_strong, \"opc_meta\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"dict\"],\n+                 [addnodes.literal_emphasis, \"(\"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \", \"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \")\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"(optional)\"))\n+    assert_node(doctree[3][1][0][0][1][0][0][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"dict\",\n+                **{\"py:module\": \"example\", \"py:class\": \"function\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"function\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"function\"})\n+\n def test_info_field_list_var(app):\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-9258": "",
  "sphinx-doc__sphinx-9673": "",
  "sympy__sympy-18211": "",
  "sympy__sympy-18698": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 38de6f6..3774206 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3265,6 +3265,10 @@ def test_noncommutative():\n     assert cancel(e*foo(c)) == c*foo(c)\n \n \n+from sympy import symbols, sqf_list\n+\n+x, y = symbols('x y')\n+\n def test_to_rational_coeffs():\n     assert to_rational_coeffs(\n         Poly(x**3 + y*x**2 + sqrt(y), x, domain='EX')) is None\n@@ -3330,6 +3334,30 @@ def test_issue_17988():\n     M = Matrix([[poly(x + 1), poly(x + 1)]])\n     assert p * M == M * p == Matrix([[poly(x**2 - 1), poly(x**2 - 1)]])\n \n-def test_issue_18205():\n+def test_issue_8695():\n+    # Original test case from the issue\n+    p1 = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3\n+    result1 = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\n+    assert sqf_list(p1) == result1\n+    \n+    # Additional test case 1: Simple polynomial with no multiplicities\n+    p2 = x**3 - 6*x**2 + 11*x - 6\n+    result2 = (1, [(x - 1, 1), (x - 2, 1), (x - 3, 1)])\n+    assert sqf_list(p2) == result2\n+\n+    # Additional test case 2: Polynomial with multiple distinct factors\n+    p3 = (x - 1)**2 * (x + 2)**2\n+    result3 = (1, [(x - 1, 2), (x + 2, 2)])\n+    assert sqf_list(p3) == result3\n+\n+    # Additional test case 3: Polynomial with higher multiplicity\n+    p4 = (x - 4)**3 * (x + 5)**3\n+    result4 = (1, [(x - 4, 3), (x + 5, 3)])\n+    assert sqf_list(p4) == result4\n+\n+    # Verify that the function handles polynomials with no roots\n+    p5 = x**2 + 1\n+    result5 = (1, [(x**2 + 1, 1)])\n+    assert sqf_list(p5) == result5\n     assert cancel((2 + I)*(3 - I)) == 7 + I\n     assert cancel((2 + I)*(2 - I)) == 5\n",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..f51de9f 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3241,8 +3241,13 @@ def test_keep_coeff():\n     assert _keep_coeff(x, 1/x) == 1\n     assert _keep_coeff(x + 1, S(2)) == u\n \n+from sympy import expand, factor, I\n+from sympy.abc import x, y\n \n-def test_poly_matching_consistency():\n+def test_factor_with_extension():\n+    z = expand((x - 1)*(y - 1))\n+    assert factor(z) == (x - 1)*(y - 1)\n+    assert factor(z, extension=[I]) == (x - 1)*(y - 1)\n     # Test for this issue:\n     # https://github.com/sympy/sympy/issues/5514\n     assert I * Poly(x, x) == Poly(I*x, x)\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..254e088 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -1,3 +1,12 @@\n+\n+from sympy.core.symbol import Symbol  # Ensure Symbol is imported for testing\n+\n+def test_symbol_no_dict():\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__'), \"SymPy Symbol should not have a __dict__\"\n+    assert hasattr(s, '__slots__'), \"SymPy Symbol should have __slots__ defined\"\n+    assert s.__slots__ == ('name',), \"SymPy Symbol __slots__ should be ('name',)\"\n+\n \"\"\"This tests sympy/core/basic.py with (ideally) no reference to subclasses\n of Basic or Atom.\"\"\"\n \n",
  "sympy__sympy-24562": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..e4a0327 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,7 +3202,23 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n-    def test_boundfield_widget_type(self):\n+    def test_boundwidget_id_for_label_with_choicewidget_options(self):\n+        \"\"\"\n+        Test that BoundWidget.id_for_label uses the ID set by ChoiceWidget.options.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+\n+        form = SomeForm(auto_id='prefix_%s')\n+        subwidgets = form['field'].subwidgets\n+        # Simulate the IDs set by ChoiceWidget.options\n+        subwidgets[0].data['attrs']['id'] = 'custom_id_a'\n+        subwidgets[1].data['attrs']['id'] = 'custom_id_b'\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_id_a')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_id_b')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "matplotlib__matplotlib-20676": "",
  "scikit-learn__scikit-learn-12682": "diff --git a/sklearn/decomposition/tests/test_dict_learning.py b/sklearn/decomposition/tests/test_dict_learning.py\nindex 35a43f8..2e9692d 100644\n--- a/sklearn/decomposition/tests/test_dict_learning.py\n+++ b/sklearn/decomposition/tests/test_dict_learning.py\n@@ -51,6 +51,59 @@ def test_dict_learning_shapes():\n     assert_equal(dico.transform(X).shape, (X.shape[0], n_components))\n \n \n+import numpy as np\n+import pytest\n+from sklearn.decomposition import SparseCoder\n+from sklearn.exceptions import ConvergenceWarning\n+from sklearn.decomposition import DictionaryLearning\n+\n+def test_sparse_coder_max_iter():\n+    def ricker_function(resolution, center, width):\n+        \"\"\"Discrete sub-sampled Ricker (Mexican hat) wavelet\"\"\"\n+        x = np.linspace(0, resolution - 1, resolution)\n+        x = ((2 / (np.sqrt(3 * width) * np.pi ** .25))\n+             * (1 - (x - center) ** 2 / width ** 2)\n+             * np.exp(-(x - center) ** 2 / (2 * width ** 2)))\n+        return x\n+\n+    def ricker_matrix(width, resolution, n_components):\n+        \"\"\"Dictionary of Ricker (Mexican hat) wavelets\"\"\"\n+        centers = np.linspace(0, resolution - 1, n_components)\n+        D = np.empty((n_components, resolution))\n+        for i, center in enumerate(centers):\n+            D[i] = ricker_function(resolution, center, width)\n+        D /= np.sqrt(np.sum(D ** 2, axis=1))[:, np.newaxis]\n+        return D\n+\n+    transform_algorithm = 'lasso_cd'\n+    resolution = 1024\n+    subsampling = 3  # subsampling factor\n+    n_components = resolution // subsampling\n+\n+    # Compute a wavelet dictionary\n+    D_multi = np.r_[tuple(ricker_matrix(width=w, resolution=resolution,\n+                                        n_components=n_components // 5)\n+                          for w in (10, 50, 100, 500, 1000))]\n+\n+    X = np.linspace(0, resolution - 1, resolution)\n+    first_quarter = X < resolution / 4\n+    X[first_quarter] = 3.\n+    X[np.logical_not(first_quarter)] = -1.\n+    X = X.reshape(1, -1)\n+\n+    # check that the underlying model fails to converge\n+    with pytest.warns(ConvergenceWarning):\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=1)\n+        model.fit_transform(X)\n+\n+    # check that the underlying model converges w/o warnings\n+    with pytest.warns(None) as record:\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=2000)\n+        model.fit_transform(X)\n+    assert not record.list\n+\n def test_dict_learning_overcomplete():\n     n_components = 12\n     dico = DictionaryLearning(n_components, random_state=0).fit(X)\n",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..8397e3e 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -148,6 +148,30 @@ def test_multi_target_sample_weights():\n     assert_almost_equal(rgr.predict(X_test), rgr_w.predict(X_test))\n \n \n+import pytest\n+import numpy as np\n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.model_selection import cross_val_predict\n+from sklearn.ensemble import RandomForestClassifier\n+from sklearn.utils._testing import assert_array_almost_equal\n+\n+def test_cross_val_predict_with_multi_output_classifier_predict_proba():\n+    # Create a toy multilabel classification dataset\n+    X, Y = make_multilabel_classification(n_samples=100, n_features=20, n_classes=3, n_labels=2, random_state=0)\n+\n+    # Define a MultiOutputClassifier with a base classifier that supports predict_proba\n+    mo_clf = MultiOutputClassifier(RandomForestClassifier(n_estimators=10, random_state=0))\n+\n+    # Use cross_val_predict with method='predict_proba'\n+    pred_proba = cross_val_predict(mo_clf, X, Y, cv=5, method='predict_proba')\n+\n+    # Assert that the prediction probabilities are correctly calculated\n+    assert isinstance(pred_proba, list)\n+    assert len(pred_proba) == Y.shape[1]\n+    for i in range(Y.shape[1]):\n+        assert pred_proba[i].shape == (X.shape[0], mo_clf.estimators_[i].n_classes_)\n+\n # Import the data\n iris = datasets.load_iris()\n # create a multiple targets by randomized shuffling and concatenating y.\n",
  "sphinx-doc__sphinx-9658": "",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..ebbd000 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -347,8 +347,15 @@ def test_reverse_order():\n     assert Product(x*y, (x, a, b), (y, 2, 5)).reverse_order(y, x) == \\\n            Product(x*y, (x, b + 1, a - 1), (y, 6, 1))\n \n-\n-def test_issue_9983():\n+def test_issue_13546():\n+    n = Symbol('n', integer=True)\n+    k = Symbol('k', integer=True)\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 2).doit() == S(15)/2\n+    # Additional test for n = 3\n+    assert p.subs(n, 3).doit() == S(77)/8\n+    # Additional test for n = 4\n+    assert p.subs(n, 4).doit() == Rational(1555, 128)\n     n = Symbol('n', integer=True, positive=True)\n     p = Product(1 + 1/n**(S(2)/3), (n, 1, oo))\n     assert p.is_convergent() is S.false\n@@ -357,4 +364,4 @@ def test_issue_9983():\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}