{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..1bfad5f 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -55,6 +55,24 @@ compound_models = {\n             )\n }\n \n+# New test case for verifying separability matrix of nested CompoundModels\n+def test_separability_matrix_nested_compound_model():\n+    from astropy.modeling import models as m\n+    from astropy.modeling.separable import separability_matrix\n+    import numpy as np\n+    from numpy.testing import assert_allclose\n+\n+    cm = m.Linear1D(10) & m.Linear1D(5)\n+    complex_model = m.Pix2Sky_TAN() & cm\n+    expected_matrix = np.array([[True,  True, False, False],\n+                                [True,  True, False, False],\n+                                [False, False, True,  False],\n+                                [False, False, False, True]])\n+    \n+    computed_matrix = separability_matrix(complex_model)\n+    \n+    assert_allclose(computed_matrix, expected_matrix, err_msg=\"Separability matrix for nested CompoundModels is incorrect.\")\n+\n \n def test_coord_matrix():\n     c = _coord_matrix(p2, 'left', 2)\n",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "diff --git a/astropy/io/fits/tests/test_connect.py b/astropy/io/fits/tests/test_connect.py\nindex 00deafe..1c91e21 100644\n--- a/astropy/io/fits/tests/test_connect.py\n+++ b/astropy/io/fits/tests/test_connect.py\n@@ -1,3 +1,4 @@\n+\n import gc\n import warnings\n \n@@ -7,7 +8,9 @@ from numpy.testing import assert_allclose, assert_array_equal\n \n from astropy import units as u\n from astropy.io import fits\n-from astropy.io.fits import BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu\n+from astropy.io.fits import BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu, connect\n+from astropy.io.registry import identify_format\n+from astropy.table import Table\n from astropy.io.fits.column import (\n     _fortran_to_python_format,\n     _parse_tdisp_format,\n",
  "astropy__astropy-14508": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex 6bdf92c..b08c152 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -137,6 +137,27 @@ class TestHeaderFunctions(FitsTestCase):\n         ):\n             assert str(c) == _pad(\"FLOATNUM= -4.6737463674763E+32\")\n \n+    def test_floating_point_string_representation_card(self):\n+        \"\"\"\n+        Ensures Card formats float values with correct precision, avoiding\n+        comment truncation\n+\n+        Regression test for https://github.com/astropy/astropy/issues/14507\n+        \"\"\"\n+        k = \"HIERARCH ABC DEF GH IJKLMN\"\n+        com = \"[m] abcdef ghijklm nopqrstu vw xyzab\"\n+        c = fits.Card(k, 0.009125, com)\n+        expected_str = f\"{k} = 0.009125 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, 8.95, com)\n+        expected_str = f\"{k} = 8.95 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, -99.9, com)\n+        expected_str = f\"{k} = -99.9 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n     def test_complex_value_card(self):\n         \"\"\"Test Card constructor with complex value\"\"\"\n \n",
  "astropy__astropy-14539": "",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..c59ffe6 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -88,8 +88,32 @@ def test_inherit_docstrings():\n         # TODO: Maybe if __doc__ is None this test should be skipped instead?\n         assert Subclass.__call__.__doc__ == \"FOO\"\n \n+def test_inherit_docstrings():\n+    class Base(metaclass=misc.InheritDocstrings):\n+        def __call__(self, *args):\n+            \"FOO\"\n+            pass\n+\n+        @property\n+        def bar(self):\n+            \"BAR\"\n+            return 42\n+\n+    class Subclass(Base):\n+        def __call__(self, *args):\n+            pass\n+\n+        @property\n+        def bar(self):\n+            return 42\n \n-def test_set_locale():\n+    if Base.__call__.__doc__ is not None:\n+        # TODO: Maybe if __doc__ is None this test should be skipped instead?\n+        assert Subclass.__call__.__doc__ == \"FOO\"\n+    \n+    # Check if the property docstring is inherited\n+    if Base.bar.__doc__ is not None:\n+        assert Subclass.bar.__doc__ == \"BAR\"\n     # First, test if the required locales are available\n     current = locale.setlocale(locale.LC_ALL)\n     try:\n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..ff0cdd4 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -196,6 +196,13 @@ def test_unknown_unit3():\n \n     with pytest.raises(TypeError):\n         unit5 = u.Unit(None)\n+    \n+    # Additional test cases for verifying the fix of the issue.\n+    # Ensure that comparing UnrecognizedUnit with None returns False instead of raising an error.\n+    unit_none = u.Unit('asdf', parse_strict='silent')\n+    assert unit_none != None  # noqa\n+    assert not (unit_none == None)\n+    assert unit_none not in (None, u.m)\n \n \n @raises(TypeError)\n",
  "astropy__astropy-7671": "diff --git a/astropy/utils/tests/test_introspection.py b/astropy/utils/tests/test_introspection.py\nindex 852d721..ff57098 100644\n--- a/astropy/utils/tests/test_introspection.py\n+++ b/astropy/utils/tests/test_introspection.py\n@@ -68,8 +68,16 @@ def test_minversion():\n     test_module = ModuleType(str(\"test_module\"))\n     test_module.__version__ = '0.12.2'\n     good_versions = ['0.12', '0.12.1', '0.12.0.dev']\n-    bad_versions = ['1', '1.2rc1']\n+    bad_versions = ['1', '1.2rc1', '1.14dev']\n+    \n+    # Test additional versions that exposed the LooseVersion issue\n+    additional_versions = ['1.14.3', '1.14dev', '1.14', '1.14.0']\n+    expected_results = [True, False, False, True]\n+\n+    # Test the specific case that caused the TypeError in the issue description\n+    for i, version in enumerate(additional_versions):\n+        assert minversion(test_module, version) == expected_results[i]\n     for version in good_versions:\n         assert minversion(test_module, version)\n     for version in bad_versions:\n-        assert not minversion(test_module, version)\n+        assert not minversion(test_module, version)\n",
  "astropy__astropy-8707": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex a2103c6..a488306 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -79,6 +79,52 @@ class TestHeaderFunctions(FitsTestCase):\n         assert header['B'] == 'B'\n         assert header.comments['B'] == 'C'\n \n+    def test_card_from_bytes(self):\n+        \"\"\"\n+        Test loading a Card from a `bytes` object (assuming latin-1 encoding).\n+        \"\"\"\n+\n+        c = fits.Card.fromstring(b\"ABC     = 'abc'\")\n+        assert c.keyword == 'ABC'\n+        assert c.value == 'abc'\n+\n+    def test_card_from_string(self):\n+        \"\"\"\n+        Test loading a Card from a `str` object.\n+        \"\"\"\n+\n+        c = fits.Card.fromstring(\"DEF     = 'def'\")\n+        assert c.keyword == 'DEF'\n+        assert c.value == 'def'\n+\n+    def test_header_fromstring_bytes(self):\n+        \"\"\"\n+        Test reading a Header from a `bytes` string.\n+\n+        See https://github.com/astropy/astropy/issues/8706\n+        \"\"\"\n+\n+        with open(self.data('test0.fits'), 'rb') as fobj:\n+            pri_hdr_from_bytes = fits.Header.fromstring(fobj.read())\n+\n+        pri_hdr = fits.getheader(self.data('test0.fits'))\n+        assert pri_hdr['NAXIS'] == pri_hdr_from_bytes['NAXIS']\n+        assert pri_hdr == pri_hdr_from_bytes\n+        assert pri_hdr.tostring() == pri_hdr_from_bytes.tostring()\n+\n+    def test_header_fromstring_str(self):\n+        \"\"\"\n+        Test reading a Header from a `str` string.\n+        \"\"\"\n+\n+        with open(self.data('test0.fits'), 'r') as fobj:\n+            pri_hdr_from_str = fits.Header.fromstring(fobj.read())\n+\n+        pri_hdr = fits.getheader(self.data('test0.fits'))\n+        assert pri_hdr['NAXIS'] == pri_hdr_from_str['NAXIS']\n+        assert pri_hdr == pri_hdr_from_str\n+        assert pri_hdr.tostring() == pri_hdr_from_str.tostring()\n+\n     def test_card_constructor_default_args(self):\n         \"\"\"Test Card constructor with default argument values.\"\"\"\n \n",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..74c05e8 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -142,7 +142,10 @@ class TestQuantityCreation:\n         a3 = np.array([1., 2.], dtype=np.float32)\n         q3 = u.Quantity(a3, u.yr)\n         assert q3.dtype == a3.dtype\n-        # items stored as objects by numpy should be converted to float\n+        # Test preservation of float16 dtype\n+        a3_16 = np.array([1., 2.], dtype=np.float16)\n+        q3_16 = u.Quantity(a3_16, u.yr)\n+        assert q3_16.dtype == a3_16.dtype\n         # by default\n         q4 = u.Quantity(decimal.Decimal('10.25'), u.m)\n         assert q4.dtype == float\n",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..f07c284 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -217,6 +217,21 @@ TEST_DATA = [\n     (URLValidator(EXTENDED_SCHEMES), 'git://example.com/', None),\n     (URLValidator(EXTENDED_SCHEMES), 'git+ssh://git@github.com/example/hg-git.git', None),\n \n+    # Test cases for invalid characters in the username and password fields of URLs\n+    (URLValidator(), 'http://foo@bar@example.com', ValidationError),  # @ in username\n+    (URLValidator(), 'http://foo/bar@example.com', ValidationError),  # / in username\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError),  # : in password\n+    (URLValidator(), 'http://foo:bar@baz@example.com', ValidationError),  # @ in password\n+    (URLValidator(), 'http://foo:bar/baz@example.com', ValidationError),  # / in password\n+    (URLValidator(), 'http://invalid-.com/?m=foo@example.com', ValidationError),  # @ in query string\n+    (URLValidator(), \"http://-.~_!$&'()*+,;=%40:80%2f@example.com\", ValidationError),  # encoded @ but invalid domain\n+    \n+    # Valid cases for comparison\n+    (URLValidator(), 'http://foo%40bar:pass@example.com', None),  # Encoded @ in username\n+    (URLValidator(), 'http://user:pass%40word@example.com', None),  # Encoded @ in password\n+    (URLValidator(), 'http://user:foo%2Fbar@example.com', None),  # Encoded / in username\n+    (URLValidator(), 'http://user:pass%2Fword@example.com', None),  # Encoded / in password\n+\n     (URLValidator(EXTENDED_SCHEMES), 'git://-invalid.com', ValidationError),\n     # Trailing newlines not accepted\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..47bce37 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -9,6 +10,7 @@ from django.db.models import (\n     Max, Min, Sum, Value,\n )\n from django.test import TestCase\n+from django.db.models.expressions import Case, When\n from django.test.utils import Approximate, CaptureQueriesContext\n from django.utils import timezone\n \n@@ -389,7 +391,33 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n-    def test_count_star(self):\n+    def test_count_distinct_expression(self):\n+        # Original test to verify COUNT with DISTINCT and CASE\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=300, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n+\n+    def test_count_distinct_expression_with_no_case(self):\n+        # New test to verify COUNT with DISTINCT without CASE\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count('rating', distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n+\n+    def test_count_case_expression_without_distinct(self):\n+        # New test to verify COUNT with CASE but without DISTINCT\n+        aggs = Book.objects.aggregate(\n+            ratings=Count(Case(When(pages__gt=300, then='rating'))),\n+        )\n+        self.assertEqual(aggs['ratings'], 3)  # Assuming there are 3 such books\n+\n+    def test_count_case_with_unrelated_condition(self):\n+        # New test to verify COUNT with CASE and DISTINCT with a different condition\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(price__gt=20, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 2)  # Assuming there are 2 such unique ratings\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n         sql = ctx.captured_queries[0]['sql']\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..2180da9 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1093,7 +1093,12 @@ class OverrideSettingsTests(SimpleTestCase):\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n \n-    def test_override_file_upload_permissions(self):\n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        The default FILE_UPLOAD_PERMISSIONS should be 0o644 if not explicitly set.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n         \"\"\"\n         Overriding the FILE_UPLOAD_PERMISSIONS setting should be reflected in\n         the file_permissions_mode attribute of\n",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..ebd6fab 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,5 +1,7 @@\n+\n import os\n import signal\n+import subprocess\n from unittest import mock\n \n from django.db.backends.postgresql.client import DatabaseClient\n@@ -101,7 +103,42 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n-    def test_sigint_handler(self):\n+    def test_pgpassword_environment_variable(self):\n+        \"\"\"\n+        Test that PGPASSWORD is set in the environment when password is provided.\n+        \"\"\"\n+        def _mock_subprocess_run(*args, env=None, **kwargs):\n+            self.pgpassword = env.get('PGPASSWORD')\n+            return subprocess.CompletedProcess(args, 0)\n+\n+        self.pgpassword = None\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            DatabaseClient.runshell_db({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'password': 'somepassword',\n+                'host': 'somehost',\n+                'port': '444',\n+            })\n+        self.assertEqual(self.pgpassword, 'somepassword')\n+\n+    def test_pgpassword_not_set_when_no_password(self):\n+        \"\"\"\n+        Test that PGPASSWORD is not set in the environment when no password is provided.\n+        \"\"\"\n+        def _mock_subprocess_run(*args, env=None, **kwargs):\n+            self.pgpassword = env.get('PGPASSWORD')\n+            return subprocess.CompletedProcess(args, 0)\n+\n+        self.pgpassword = None\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            DatabaseClient.runshell_db({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+            })\n+        self.assertIsNone(self.pgpassword)\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n         def _mock_subprocess_call(*args):\n             handler = signal.getsignal(signal.SIGINT)\n@@ -113,4 +150,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..b841ce1 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -3,6 +3,8 @@ from django.conf import settings\n from django.contrib.contenttypes import management as contenttypes_management\n from django.contrib.contenttypes.models import ContentType\n from django.core.management import call_command\n+from django.contrib.contenttypes.models import ContentType\n+from django.db import connections\n from django.db import migrations, models\n from django.test import TransactionTestCase, override_settings\n \n@@ -38,7 +40,27 @@ class ContentTypeOperationsTests(TransactionTestCase):\n                     self.assertEqual(next_operation.old_model, operation.old_name_lower)\n                     self.assertEqual(next_operation.new_model, operation.new_name_lower)\n \n-    def test_existing_content_type_rename(self):\n+    class TestRouter:\n+        def db_for_write(self, model, **hints):\n+            return 'default'\n+\n+    @override_settings(DATABASE_ROUTERS=[TestRouter()])\n+    def test_existing_content_type_rename_other_database(self):\n+        # Setup: Create the initial content type in the 'other' database.\n+        ContentType.objects.using('other').create(app_label='contenttypes_tests', model='foo')\n+        other_content_types = ContentType.objects.using('other').filter(app_label='contenttypes_tests')\n+        \n+        # Test the migration command with the specified database.\n+        call_command('migrate', 'contenttypes_tests', database='other', interactive=False, verbosity=0)\n+        \n+        # Verify that the rename occurred in the 'other' database.\n+        self.assertFalse(other_content_types.filter(model='foo').exists())\n+        self.assertTrue(other_content_types.filter(model='renamedfoo').exists())\n+        \n+        # Rollback migration.\n+        call_command('migrate', 'contenttypes_tests', 'zero', database='other', interactive=False, verbosity=0)\n+        self.assertTrue(other_content_types.filter(model='foo').exists())\n+        self.assertFalse(other_content_types.filter(model='renamedfoo').exists())\n         ContentType.objects.create(app_label='contenttypes_tests', model='foo')\n         call_command('migrate', 'contenttypes_tests', database='default', interactive=False, verbosity=0,)\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n@@ -63,4 +85,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "diff --git a/tests/generic_inline_admin/tests.py b/tests/generic_inline_admin/tests.py\nindex 9dd9fd9..356e710 100644\n--- a/tests/generic_inline_admin/tests.py\n+++ b/tests/generic_inline_admin/tests.py\n@@ -428,4 +428,41 @@ class GenericInlineModelAdminTest(SimpleTestCase):\n         ma = EpisodeAdmin(Episode, self.site)\n         inlines = ma.get_inline_instances(request)\n         for (formset, inline), other_inline in zip(ma.get_formsets_with_inlines(request), inlines):\n-            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+\n+    def test_get_inlines_method(self):\n+        class MediaInline(GenericTabularInline):\n+            model = Media\n+\n+        class AlternateInline(GenericTabularInline):\n+            model = Media\n+\n+        class EpisodeAdmin(admin.ModelAdmin):\n+            inlines = (AlternateInline, MediaInline)\n+\n+            def get_inlines(self, request, obj=None):\n+                if hasattr(request, 'name'):\n+                    if request.name == 'alternate':\n+                        return self.inlines[:1]\n+                    elif request.name == 'media':\n+                        return self.inlines[1:2]\n+                return []\n+\n+        request = type('Request', (object,), {})()\n+        ma = EpisodeAdmin(Episode, self.site)\n+        \n+        # Test with no name attribute\n+        self.assertEqual(ma.get_inlines(request, None), [])\n+        self.assertEqual(ma.get_inline_instances(request), [])\n+\n+        # Test with 'alternate' name\n+        request.name = 'alternate'\n+        self.assertEqual(ma.get_inlines(request, None), (AlternateInline,))\n+        self.assertEqual(len(ma.get_inline_instances(request)), 1)\n+        self.assertEqual(type(ma.get_inline_instances(request)[0]), AlternateInline)\n+\n+        # Test with 'media' name\n+        request.name = 'media'\n+        self.assertEqual(ma.get_inlines(request, None), (MediaInline,))\n+        self.assertEqual(len(ma.get_inline_instances(request)), 1)\n+        self.assertEqual(type(ma.get_inline_instances(request)[0]), MediaInline)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..4efa8c1 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -248,7 +248,21 @@ class UsernameValidatorsTests(SimpleTestCase):\n                 with self.assertRaises(ValidationError):\n                     v(invalid)\n \n-    def test_ascii_validator(self):\n+    def test_username_with_newlines(self):\n+        invalid_usernames = ['username\\n', 'username\\r', 'username\\r\\n']\n+        # Test with UnicodeUsernameValidator\n+        unicode_validator = validators.UnicodeUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    unicode_validator(invalid)\n+        \n+        # Test with ASCIIUsernameValidator\n+        ascii_validator = validators.ASCIIUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    ascii_validator(invalid)\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n         invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n         v = validators.ASCIIUsernameValidator()\n@@ -258,4 +272,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..b1670c2 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -3,6 +3,7 @@ import os\n from django.core.exceptions import ImproperlyConfigured\n from django.template import Context\n from django.template.engine import Engine\n+from django.template import Template\n from django.test import SimpleTestCase, override_settings\n \n from .utils import ROOT, TEMPLATE_DIR\n@@ -15,6 +16,22 @@ class RenderToStringTest(SimpleTestCase):\n     def setUp(self):\n         self.engine = Engine(dirs=[TEMPLATE_DIR])\n \n+    def test_autoescape_on(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        # The '<script>' should be escaped to '&lt;script&gt;'\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n+\n+    def test_autoescape_off_with_different_context(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        # The '<div>' should not be escaped\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<div>'}),\n+            'obj:<div>\\n',\n+        )\n+\n     def test_basic_context(self):\n         self.assertEqual(\n             self.engine.render_to_string('test_context.html', {'obj': 'test'}),\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..4376035 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -285,9 +285,28 @@ class QueryDictTests(SimpleTestCase):\n         with self.assertRaises(TypeError):\n             QueryDict.fromkeys(0)\n \n+from django.http import HttpResponse\n \n class HttpResponseTests(unittest.TestCase):\n \n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n+    def test_empty_memoryview_content(self):\n+        r = HttpResponse(memoryview(b''))\n+        self.assertEqual(r.content, b'')\n+\n+    def test_large_memoryview_content(self):\n+        large_content = memoryview(b'a' * 1000000)  # 1 million 'a's\n+        r = HttpResponse(large_content)\n+        self.assertEqual(r.content, b'a' * 1000000)\n+\n+    def test_memoryview_with_non_ascii_content(self):\n+        non_ascii_content = memoryview(\"caf\u00e9\".encode('utf-8'))\n+        r = HttpResponse(non_ascii_content)\n+        self.assertEqual(r.content, \"caf\u00e9\".encode('utf-8'))\n+\n     def test_headers_type(self):\n         r = HttpResponse()\n \n",
  "django__django-11141": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex b5a87e7..fc8e6e5 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -501,6 +501,17 @@ class LoaderTests(TestCase):\n         self.assertEqual(plan, expected_plan)\n \n     @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_private'})\n+    @override_settings(\n+        MIGRATION_MODULES={'migrations': 'migrations.test_migrations_namespace_package'},\n+    )\n+    def test_loading_namespace_package(self):\n+        \"\"\"Migration directories without an __init__.py file are loaded.\"\"\"\n+        migration_loader = MigrationLoader(connection)\n+        self.assertEqual(\n+            migration_loader.graph.forwards_plan(('migrations', '0001_initial')),\n+            [('migrations', '0001_initial')],\n+        )\n+\n     def test_ignore_files(self):\n         \"\"\"Files prefixed with underscore, tilde, or dot aren't loaded.\"\"\"\n         loader = MigrationLoader(connection)\n@@ -509,6 +520,10 @@ class LoaderTests(TestCase):\n         self.assertEqual(migrations, ['0001_initial'])\n \n \n+from django.test import override_settings\n+from django.db.migrations.loader import MigrationLoader\n+from django.db import connection\n+\n class PycLoaderTests(MigrationTestBase):\n \n     def test_valid(self):\n",
  "django__django-11149": "",
  "django__django-11163": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex b25d077..e69c452 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2900,7 +2900,23 @@ class StrictAssignmentTests(SimpleTestCase):\n \n \n class ModelToDictTests(TestCase):\n-    def test_many_to_many(self):\n+    def test_empty_fields(self):\n+        \"\"\"model_to_dict should return an empty dict when fields is an empty list.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        result = model_to_dict(bw, fields=[])\n+        self.assertEqual(result, {}, \"Expected an empty dict when fields=[]\")\n+\n+    def test_specific_fields(self):\n+        \"\"\"model_to_dict should return only the specified fields.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        result = model_to_dict(bw, fields=['id', 'name'])\n+        self.assertEqual(sorted(result.keys()), ['id', 'name'], \"Expected only 'id' and 'name' fields\")\n+\n+    def test_exclude_fields(self):\n+        \"\"\"model_to_dict should exclude specified fields correctly.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        result = model_to_dict(bw, exclude=['name', 'score'])\n+        self.assertEqual(sorted(result.keys()), ['id', 'writer_ptr'], \"Expected all fields except 'name' and 'score'\")\n         \"\"\"Data for a ManyToManyField is a list rather than a lazy QuerySet.\"\"\"\n         blue = Colour.objects.create(name='blue')\n         red = Colour.objects.create(name='red')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..a4d2853 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,9 +1,11 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n+from django.db.models.deletion import Collector\n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n     M2MTo, MRNull, Parent, R, RChild, S, T, User, create_a, get_default_r,\n",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..498cf0e 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -95,6 +95,14 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+\n+            # Test cases for extremely small numbers to ensure they are formatted correctly\n+            ('1e-199', 2, '0.00'),\n+            ('1e-200', 2, '0.00'),\n+            ('1e-201', 2, '0.00'),\n+            ('1e-199', 5, '0.00000'),\n+            ('1e-200', 5, '0.00000'),\n+            ('1e-201', 5, '0.00000'),\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-11211": "diff --git a/tests/prefetch_related/models.py b/tests/prefetch_related/models.py\nindex 3ce4b3f..5310254 100644\n--- a/tests/prefetch_related/models.py\n+++ b/tests/prefetch_related/models.py\n@@ -1,3 +1,4 @@\n+\n import uuid\n \n from django.contrib.contenttypes.fields import (\n@@ -185,7 +186,11 @@ class Bookmark(models.Model):\n \n \n class Comment(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n     comment = models.TextField()\n+    content_type_uuid = models.ForeignKey(ContentType, models.CASCADE, related_name='comments_uuid', null=True)\n+    object_pk_uuid = models.CharField(max_length=255, db_index=True)\n+    content_object_uuid = GenericForeignKey(ct_field='content_type_uuid', fk_field='object_pk_uuid')\n \n     # Content-object field\n     content_type = models.ForeignKey(ContentType, models.CASCADE)\n",
  "django__django-11239": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex b843072..b3c1aa0 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,4 +1,6 @@\n import os\n+import os\n+\n import signal\n import subprocess\n from unittest import mock\n@@ -81,7 +83,63 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n-    def test_sigint_handler(self):\n+    def test_ssl_certificate(self):\n+        self.assertEqual(\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+                'sslmode': 'verify-ca',\n+                'sslrootcert': 'root.crt',\n+                'sslcert': 'client.crt',\n+                'sslkey': 'client.key',\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                {\n+                    'PGSSLMODE': 'verify-ca',\n+                    'PGSSLROOTCERT': 'root.crt',\n+                    'PGSSLCERT': 'client.crt',\n+                    'PGSSLKEY': 'client.key',\n+                },\n+                None,\n+            )\n+        )\n+\n+    def test_missing_ssl_parameters(self):\n+        self.assertEqual(\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+                # Omitting SSL parameters\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                {},\n+                None,\n+            )\n+        )\n+\n+    def test_partial_ssl_parameters(self):\n+        self.assertEqual(\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+                'sslmode': 'verify-ca',\n+                'sslrootcert': 'root.crt',\n+                # Missing 'sslcert' and 'sslkey'\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                {\n+                    'PGSSLMODE': 'verify-ca',\n+                    'PGSSLROOTCERT': 'root.crt',\n+                },\n+                None,\n+            )\n+        )\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n         def _mock_subprocess_run(*args, **kwargs):\n             handler = signal.getsignal(signal.SIGINT)\n",
  "django__django-11265": "diff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py\nindex a587c22..b641191 100644\n--- a/tests/filtered_relation/tests.py\n+++ b/tests/filtered_relation/tests.py\n@@ -98,7 +98,34 @@ class FilteredRelationTests(TestCase):\n             [self.author1]\n         )\n \n-    def test_with_join_and_complex_condition(self):\n+    def test_with_exclude(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2],\n+        )\n+\n+    def test_with_exclude_no_books(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_empty=FilteredRelation('book', condition=Q(book__title__iexact='')),\n+            ).exclude(book_empty__isnull=False),\n+            [self.author1, self.author2],\n+        )\n+\n+    def test_with_exclude_multiple_conditions(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_special=FilteredRelation(\n+                    'book', condition=Q(\n+                        Q(book__title__iexact='poem by alice') &\n+                        Q(book__state=Book.AVAILABLE)\n+                    ),\n+                ),\n+            ).exclude(book_special__isnull=False),\n+            [self.author2],\n+        )\n         self.assertSequenceEqual(\n             Author.objects.annotate(\n                 book_alice=FilteredRelation(\n",
  "django__django-11276": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 4051a05..f80042c 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -27,7 +27,7 @@ class TestUtilsHtml(SimpleTestCase):\n             ('<', '&lt;'),\n             ('>', '&gt;'),\n             ('\"', '&quot;'),\n-            (\"'\", '&#39;'),\n+            (\"'\", '&#x27;'),\n         )\n         # Substitution patterns for testing the above items.\n         patterns = (\"%s\", \"asdf%sfdsa\", \"%s1\", \"1%sb\")\n@@ -37,7 +37,10 @@ class TestUtilsHtml(SimpleTestCase):\n                     with self.subTest(value=value, output=output, pattern=pattern):\n                         self.check_output(escape, pattern % value, pattern % output)\n                         self.check_output(escape, lazystr(pattern % value), pattern % output)\n-                # Check repeated values.\n+                # Test case to verify the change in behavior for single quotes\n+                test_input = \"Here's a test\"\n+                expected_output = \"Here&#x27;s a test\"\n+                self.check_output(escape, test_input, expected_output)\n                 self.check_output(escape, value * 2, output * 2)\n         # Verify it doesn't double replace &.\n         self.check_output(escape, '<&', '&lt;&amp;')\n",
  "django__django-11292": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex b016284..05717c6 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -254,7 +254,41 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertEqual(out.strip(), 'Set foo')\n \n \n-class UtilsTests(SimpleTestCase):\n+    def test_skip_checks_with_no_warnings(self):\n+        \"\"\"\n+        Ensure that when --skip-checks is used, checks are not run,\n+        and no warnings or errors appear.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['user_commands'])\n+        out, err = self.run_manage(['set_option', '--skip-checks', '--set', 'foo'])\n+        self.assertNoOutput(err)\n+        self.assertEqual(out.strip(), 'Set foo')\n+\n+    def test_skip_checks_with_warnings(self):\n+        \"\"\"\n+        Simulate a scenario where checks would normally produce warnings,\n+        and ensure that --skip-checks suppresses them.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            # This setting will normally produce a warning.\n+            'STATICFILES_DIRS': '\"foo\"',\n+        })\n+        out, err = self.run_manage(['set_option', '--skip-checks', '--set', 'foo'])\n+        self.assertNoOutput(err)\n+        self.assertEqual(out.strip(), 'Set foo')\n+\n+    def test_skip_checks_with_errors(self):\n+        \"\"\"\n+        Simulate a scenario where checks would normally produce errors,\n+        and ensure that --skip-checks suppresses them.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            # This setting will normally produce an error.\n+            'STATICFILES_DIRS': 123,\n+        })\n+        out, err = self.run_manage(['set_option', '--skip-checks', '--set', 'foo'])\n+        self.assertNoOutput(err)\n+        self.assertEqual(out.strip(), 'Set foo')\n \n     def test_no_existent_external_program(self):\n         msg = 'Error executing a_42_command_that_doesnt_exist_42'\n",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..60aaa1d 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,5 +1,7 @@\n+\n from django.test import SimpleTestCase\n-from django.urls.resolvers import RegexPattern, RoutePattern\n+from django.urls.resolvers import RegexPattern, RoutePattern, get_resolver\n+from django.test.utils import override_settings\n from django.utils.translation import gettext_lazy as _\n \n \n@@ -9,7 +11,27 @@ class RegexPatternTests(SimpleTestCase):\n         self.assertEqual(str(RegexPattern(_('^translated/$'))), '^translated/$')\n \n \n+class ResolverCacheTests(SimpleTestCase):\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_default_root_urlconf(self):\n+        # resolver for a default URLconf (passing no argument) and for the\n+        # settings.ROOT_URLCONF is the same cached object.\n+        self.assertIs(get_resolver(), get_resolver('urlpatterns.path_urls'))\n+        self.assertIsNot(get_resolver(), get_resolver('urlpatterns.path_dynamic_urls'))\n+    \n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_non_default_urlconf(self):\n+        # Test that when calling get_resolver with a URLconf different from ROOT_URLCONF,\n+        # a new resolver object is created rather than using the cached one.\n+        self.assertIsNot(get_resolver('urlpatterns.path_dynamic_urls'), get_resolver())\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_with_explicit_none(self):\n+        # Test that explicit calls with None are equivalent to using the ROOT_URLCONF\n+        self.assertIs(get_resolver(None), get_resolver())\n+        self.assertIs(get_resolver(None), get_resolver('urlpatterns.path_urls'))\n+\n class RoutePatternTests(SimpleTestCase):\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\nindex b010b42..e82f362 100644\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -241,8 +241,27 @@ class ModelBackendTest(BaseModelBackendTest, TestCase):\n             email='test2@example.com',\n             password='test',\n         )\n+    \n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authentication_with_none_username(self):\n+        \"\"\"\n+        Test that authenticate doesn't query the database when username is None.\n+        \"\"\"\n+        CountingMD5PasswordHasher.calls = 0\n+        with self.assertNumQueries(0):\n+            authenticate(username=None, password='test')\n+        self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n \n-    def test_authenticate_inactive(self):\n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authentication_with_none_password(self):\n+        \"\"\"\n+        Test that authenticate doesn't query the database when password is None.\n+        \"\"\"\n+        CountingMD5PasswordHasher.calls = 0\n+        username = getattr(self.user, self.UserModel.USERNAME_FIELD)\n+        with self.assertNumQueries(0):\n+            authenticate(username=username, password=None)\n+        self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n         \"\"\"\n         An inactive user can't authenticate.\n         \"\"\"\n",
  "django__django-11490": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex e627a0d..2fec7a2 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -124,6 +124,21 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.union(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n+    def test_changing_values_list_in_composed_query(self):\n+        ReservedName.objects.create(name='b', order=3)\n+        qs1 = ReservedName.objects.all()\n+        # Check the initial values_list with 'name' and 'order'\n+        result = qs1.union(qs1).values_list('name', 'order').get()\n+        self.assertEqual(result, ('b', 3))\n+        \n+        # Change values_list to only include 'order'\n+        result = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(result, (3,))\n+        \n+        # Change values_list to only include 'name'\n+        result = qs1.union(qs1).values_list('name').get()\n+        self.assertEqual(result, ('b',))\n+\n     def test_union_with_two_annotated_values_list(self):\n         qs1 = Number.objects.filter(num=1).annotate(\n             count=Value(0, IntegerField()),\n",
  "django__django-11532": "diff --git a/tests/mail/tests.py b/tests/mail/tests.py\nindex a6f0e17..9ab5087 100644\n--- a/tests/mail/tests.py\n+++ b/tests/mail/tests.py\n@@ -16,6 +16,7 @@ from smtplib import SMTP, SMTPAuthenticationError, SMTPException\n from ssl import SSLError\n \n from django.core import mail\n+from unittest import mock\n from django.core.mail import (\n     EmailMessage, EmailMultiAlternatives, mail_admins, mail_managers,\n     send_mail, send_mass_mail,\n@@ -360,7 +361,26 @@ class MailTests(HeadersCheckMixin, SimpleTestCase):\n         msg.attach('example.txt', 'Text file content', 'text/plain')\n         self.assertIn(html_content, msg.message().as_string())\n \n-    def test_none_body(self):\n+    @mock.patch('socket.getfqdn', return_value='\u6b63\u5b97')\n+    def test_unicode_hostname_non_unicode_email(self, mocked_getfqdn):\n+        delattr(mail.message.DNS_NAME, '_fqdn')\n+        email = EmailMessage('subject', 'content', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        self.assertIn('@xn--fiq228c>', email.message()['Message-ID'])\n+\n+    @mock.patch('socket.getfqdn', return_value='example.com')\n+    def test_ascii_hostname_non_unicode_email(self, mocked_getfqdn):\n+        delattr(mail.message.DNS_NAME, '_fqdn')\n+        email = EmailMessage('subject', 'content', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        self.assertIn('@example.com>', email.message()['Message-ID'])\n+\n+    @mock.patch('socket.getfqdn', return_value='\u6b63\u5b97')\n+    def test_unicode_hostname_utf8_email(self, mocked_getfqdn):\n+        delattr(mail.message.DNS_NAME, '_fqdn')\n+        email = EmailMessage('subject', 'content', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'utf-8'\n+        self.assertIn('@xn--fiq228c>', email.message()['Message-ID'])\n         msg = EmailMessage('subject', None, 'from@example.com', ['to@example.com'])\n         self.assertEqual(msg.body, '')\n         self.assertEqual(msg.message().get_payload(), '')\n",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..01770e7 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,9 +1,60 @@\n+\n+class TestModelAdminChecks(CheckTestCase):\n+\n+    def test_valid_field_accessible_via_instance(self):\n+        # Define a custom PositionField that is only accessible via an instance\n+        class PositionField(Field):\n+            \"\"\"Custom field accessible only via instance.\"\"\"\n+            def contribute_to_class(self, cls, name):\n+                super().contribute_to_class(cls, name)\n+                setattr(cls, self.name, self)\n+\n+            def __get__(self, instance, owner):\n+                if instance is None:\n+                    raise AttributeError()\n+\n+        # Define a model using the custom PositionField\n+        class TestModel(Model):\n+            field = PositionField()\n+\n+        # Define a ModelAdmin with list_display pointing to the PositionField\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('field',)\n+\n+        # Ensure that the ModelAdmin is valid with the custom field\n+        self.assertIsValid(TestModelAdmin, TestModel)\n+\n+    def test_invalid_field_not_in_model(self):\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('non_existing_field',)\n+\n+        self.assertIsInvalid(\n+            TestModelAdmin, ValidationTestModel, (\n+                \"The value of 'list_display[0]' refers to 'non_existing_field', \"\n+                \"which is not a callable, an attribute of 'TestModelAdmin', \"\n+                \"or an attribute or method on 'testapp.ValidationTestModel'.\"\n+            ), 'admin.E108'\n+        )\n+\n+    def test_many_to_many_field_in_list_display(self):\n+        class TestModel(Model):\n+            users = models.ManyToManyField(User)\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('users',)\n+\n+        self.assertIsInvalid(\n+            TestModelAdmin, TestModel, (\n+                \"The value of 'list_display[0]' must not be a ManyToManyField.\"\n+            ), 'admin.E109'\n+        )\n+\n from django import forms\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n-from django.db.models import F\n+from django.db.models import F, Field, Model\n from django.db.models.functions import Upper\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..b93a695 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -9,7 +9,8 @@ from django.db.models.functions import Upper\n from django.test import TestCase\n from django.utils.deprecation import RemovedInDjango31Warning\n \n-from .models import Article, Author, OrderedByFArticle, Reference\n+from .models import Article, Author, ChildArticle, OrderedByFArticle, Reference\n+from datetime import datetime\n \n \n class OrderingTests(TestCase):\n",
  "django__django-11603": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 2b8f813..7bd63db 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -390,6 +390,13 @@ class AggregateTestCase(TestCase):\n \n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n+    def test_distinct_on_avg_sum(self):\n+        books = Book.objects.aggregate(\n+            distinct_avg=Avg('rating', distinct=True),\n+            distinct_sum=Sum('rating', distinct=True)\n+        )\n+        self.assertAlmostEqual(books['distinct_avg'], 4.125)\n+        self.assertEqual(books['distinct_sum'], 16.5)\n \n     def test_count_star(self):\n         with self.assertNumQueries(1) as ctx:\n",
  "django__django-11740": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a98fff5..dcd65ac 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -35,6 +35,9 @@ class DeconstructibleObject:\n         )\n \n \n+import uuid\n+...\n+\n class AutodetectorTests(TestCase):\n     \"\"\"\n     Tests the migration autodetector.\n@@ -661,7 +664,29 @@ class AutodetectorTests(TestCase):\n         self.assertEqual([name for name, mgr in changes['otherapp'][0].operations[0].managers],\n                          ['food_qs', 'food_mgr', 'food_mgr_kwargs'])\n \n-    def test_old_model(self):\n+    def test_uuid_to_fk_dependency_creation(self):\n+        \"\"\"\n+        Test that changing a UUIDField to a ForeignKey creates the correct dependency.\n+        \"\"\"\n+        app1_model_before = ModelState(\"testapp1\", \"App1\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+            (\"another_app\", models.UUIDField(null=True, blank=True)),\n+        ])\n+        app1_model_after = ModelState(\"testapp1\", \"App1\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+            (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2_model = ModelState(\"testapp2\", \"App2\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+        ])\n+\n+        changes = self.get_changes([app1_model_before, app2_model], [app1_model_after, app2_model])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n         \"\"\"Tests deletion of old models.\"\"\"\n         changes = self.get_changes([self.author_empty], [])\n         # Right number/type of migrations?\n@@ -2399,4 +2424,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-11749": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex a0e1530..5cd9ea5 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -219,11 +219,43 @@ class CommandTests(SimpleTestCase):\n         management.call_command('subparser', 'foo', 12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n \n+    def test_mutually_exclusive_group_required_options_via_kwargs(self):\n+        out = StringIO()\n+        # Test that providing 'foo_id' via kwargs doesn't raise an error.\n+        management.call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+        \n+        # Test that providing 'foo_name' via kwargs doesn't raise an error.\n+        out = StringIO()\n+        management.call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+        \n+        # Test that not providing either 'foo_id' or 'foo_name' raises an error.\n+        with self.assertRaises(CommandError) as cm:\n+            management.call_command('mutually_exclusive_required', stdout=out)\n+        self.assertIn(\"Error: one of the arguments --foo-id --foo-name is required\", str(cm.exception))\n+\n     def test_subparser_dest_args(self):\n         out = StringIO()\n         management.call_command('subparser_dest', 'foo', bar=12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n \n+    def test_mutually_exclusive_group_required_options_via_kwargs(self):\n+        out = StringIO()\n+        # Test that providing 'foo_id' via kwargs doesn't raise an error.\n+        management.call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+        \n+        # Test that providing 'foo_name' via kwargs doesn't raise an error.\n+        out = StringIO()\n+        management.call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+        \n+        # Test that not providing either 'foo_id' or 'foo_name' raises an error.\n+        with self.assertRaises(CommandError) as cm:\n+            management.call_command('mutually_exclusive_required', stdout=out)\n+        self.assertIn(\"Error: one of the arguments --foo-id --foo-name is required\", str(cm.exception))\n+\n     def test_subparser_dest_required_args(self):\n         out = StringIO()\n         management.call_command('subparser_required', 'foo_1', 'foo_2', bar=12, stdout=out)\n",
  "django__django-11790": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 440150b..badc8bf 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -437,7 +437,28 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         self.assertEqual(form.fields['username'].max_length, 254)\n         self.assertEqual(form.errors, {})\n \n-    def test_username_field_label(self):\n+    def test_username_field_maxlength_attribute_present(self):\n+        \"\"\"\n+        Test that the maxlength attribute is correctly set for the username field.\n+        \"\"\"\n+        data = {\n+            'username': 'user123',\n+            'password': 'password123',\n+        }\n+        form = AuthenticationForm(None, data)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 255)\n+\n+    @override_settings(AUTH_USER_MODEL='auth_tests.IntegerUsernameUser')\n+    def test_username_field_maxlength_attribute_defaults_to_254(self):\n+        \"\"\"\n+        Test that the maxlength attribute defaults to 254 when not explicitly set.\n+        \"\"\"\n+        data = {\n+            'username': 'user123',\n+            'password': 'password123',\n+        }\n+        form = AuthenticationForm(None, data)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 254)\n \n         class CustomAuthenticationForm(AuthenticationForm):\n             username = CharField(label=\"Name\", max_length=75)\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..9fb83d1 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -306,7 +306,23 @@ class WriterTests(SimpleTestCase):\n             \"default=migrations.test_writer.IntEnum(1))\"\n         )\n \n-    def test_serialize_choices(self):\n+    def test_enum_translation_issue(self):\n+        from django.utils.translation import gettext_lazy as _\n+\n+        class TranslatedEnum(enum.Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+\n+        # We expect the serialized default to be by enum name, not the translated value.\n+        field = models.CharField(default=TranslatedEnum.GOOD, choices=[(m.value, m) for m in TranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('Good', migrations.test_writer.TranslatedEnum['GOOD']), \"\n+            \"('Bad', migrations.test_writer.TranslatedEnum['BAD'])], \"\n+            \"default=migrations.test_writer.TranslatedEnum['GOOD'])\"\n+        )\n         class TextChoices(models.TextChoices):\n             A = 'A', 'A value'\n             B = 'B', 'B value'\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..04fb638 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,6 @@\n+\n import unittest\n-from datetime import datetime\n+from datetime import datetime, timedelta\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -316,6 +317,37 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_with_mocked_current_year(self, mocked_datetime):\n+        \"\"\"\n+        Test parsing of RFC850 dates using mocked current year to test the\n+        correct logic for two-digit years.\n+        \"\"\"\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        # Test cases based on the current year\n+        current_year_cases = [\n+            # Case when the current year is 2019\n+            (datetime(2019, 11, 6, 8, 49, 37), 'Tuesday, 31-Dec-69 08:49:37 GMT', datetime(2069, 12, 31, 8, 49, 37)),\n+            (datetime(2019, 11, 6, 8, 49, 37), 'Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),\n+            (datetime(2019, 11, 6, 8, 49, 37), 'Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37)),\n+\n+            # Case when the current year is 2020\n+            (datetime(2020, 11, 6, 8, 49, 37), 'Wednesday, 31-Dec-70 08:49:37 GMT', datetime(1970, 12, 31, 8, 49, 37)),\n+            (datetime(2020, 11, 6, 8, 49, 37), 'Friday, 31-Dec-71 08:49:37 GMT', datetime(1971, 12, 31, 8, 49, 37)),\n+\n+            # Case when the current year is 2048\n+            (datetime(2048, 11, 6, 8, 49, 37), 'Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+            (datetime(2048, 11, 6, 8, 49, 37), 'Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+        ]\n+\n+        for utcnow, rfc850str, expected_date in current_year_cases:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = utcnow\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n+\n     def test_parsing_rfc850(self):\n         parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n",
  "django__django-11880": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 95afc0d..9613570 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3672,7 +3672,52 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n             '<input type=\"hidden\" name=\"data\" id=\"id_data\"></td></tr>'\n         )\n \n-    def test_field_named_data(self):\n+import copy\n+from django.forms import CharField, Form\n+from django.test import SimpleTestCase\n+\n+class FormFieldDeepCopyTests(SimpleTestCase):\n+\n+    def test_field_deep_copy_error_messages(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        self.assertIsInstance(field_copy, CustomCharField)\n+        self.assertIsNot(field_copy.error_messages, field.error_messages)\n+\n+    def test_deep_copy_with_modified_error_messages(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field.error_messages['invalid'] = 'Modified error message.'\n+        field_copy = copy.deepcopy(field)\n+        self.assertEqual(field.error_messages['invalid'], 'Modified error message.')\n+        self.assertEqual(field_copy.error_messages['invalid'], 'Form custom error message.')\n+        self.assertIsNot(field_copy.error_messages, field.error_messages)\n+\n+    def test_deep_copy_multiple_fields(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field1 = CustomCharField()\n+        field2 = CustomCharField()\n+        field1.error_messages['invalid'] = 'Field1 error message.'\n+        field2.error_messages['invalid'] = 'Field2 error message.'\n+        field1_copy = copy.deepcopy(field1)\n+        field2_copy = copy.deepcopy(field2)\n+        self.assertEqual(field1_copy.error_messages['invalid'], 'Field1 error message.')\n+        self.assertEqual(field2_copy.error_messages['invalid'], 'Field2 error message.')\n+        self.assertIsNot(field1_copy.error_messages, field1.error_messages)\n+        self.assertIsNot(field2_copy.error_messages, field2.error_messages)\n         class DataForm(Form):\n             data = CharField(max_length=10)\n \n",
  "django__django-11951": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex f2f6bbd..2f09e18 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -1,3 +1,5 @@\n+\n+from math import ceil\n from operator import attrgetter\n \n from django.db import IntegrityError, NotSupportedError, connection\n@@ -205,6 +207,20 @@ class BulkCreateTests(TestCase):\n         NoFields.objects.bulk_create([NoFields() for i in range(2)])\n         self.assertEqual(NoFields.objects.count(), 2)\n \n+    @skipUnlessDBFeature('has_bulk_insert')\n+    def test_explicit_batch_size_respects_max_batch_size(self):\n+        # Create Country objects\n+        objs = [Country() for i in range(1000)]\n+        # Define fields to be used in bulk operation\n+        fields = ['name', 'iso_two_letter', 'description']\n+        # Calculate the maximum batch size using the database's capabilities\n+        max_batch_size = max(connection.ops.bulk_batch_size(fields, objs), 1)\n+        # Assert that the number of queries executed does not exceed the expected count \n+        # when batch size is intentionally set above max_batch_size\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            # Execute bulk_create with a batch_size greater than max_batch_size\n+            Country.objects.bulk_create(objs, batch_size=max_batch_size + 1)\n+\n     @skipUnlessDBFeature('has_bulk_insert')\n     def test_explicit_batch_size_efficiency(self):\n         objs = [TwoFields(f1=i, f2=i) for i in range(0, 100)]\n@@ -214,6 +230,20 @@ class BulkCreateTests(TestCase):\n         with self.assertNumQueries(1):\n             TwoFields.objects.bulk_create(objs, len(objs))\n \n+    @skipUnlessDBFeature('has_bulk_insert')\n+    def test_explicit_batch_size_respects_max_batch_size(self):\n+        # Create Country objects\n+        objs = [Country() for i in range(1000)]\n+        # Define fields to be used in bulk operation\n+        fields = ['name', 'iso_two_letter', 'description']\n+        # Calculate the maximum batch size using the database's capabilities\n+        max_batch_size = max(connection.ops.bulk_batch_size(fields, objs), 1)\n+        # Assert that the number of queries executed does not exceed the expected count \n+        # when batch size is intentionally set above max_batch_size\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            # Execute bulk_create with a batch_size greater than max_batch_size\n+            Country.objects.bulk_create(objs, batch_size=max_batch_size + 1)\n+\n     @skipUnlessDBFeature('has_bulk_insert')\n     def test_bulk_insert_expressions(self):\n         Restaurant.objects.bulk_create([\n",
  "django__django-11964": "",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..d5f84ca 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -162,6 +162,19 @@ class GetFieldDisplayTests(SimpleTestCase):\n         self.assertEqual(Whiz(c='').get_c_display(), '')        # Empty value\n         self.assertEqual(WhizDelayed(c=0).get_c_display(), 'Other')  # Delayed choices\n \n+    def test_overriding_get_FIELD_display(self):\n+        \"\"\"\n+        Test that overriding get_FIELD_display works correctly in Django 2.2+.\n+        \"\"\"\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+\n     def test_get_FIELD_display_translated(self):\n         \"\"\"A translated display value is coerced to str.\"\"\"\n         val = Whiz(c=5).get_c_display()\n",
  "django__django-12039": "",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..cbb38a4 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n@@ -7,6 +8,9 @@ from django.db.models.fields.related_lookups import RelatedIsNull\n from django.db.models.functions import Lower\n from django.db.models.lookups import Exact, GreaterThan, IsNull, LessThan\n from django.db.models.sql.query import Query\n+from django.db.models import Q\n+from django.db.models.lookups import Exact\n+from .models import Item\n from django.db.models.sql.where import OR\n from django.test import SimpleTestCase\n from django.test.utils import register_lookup\n@@ -107,7 +111,14 @@ class TestQuery(SimpleTestCase):\n         self.assertIsInstance(b_isnull.lhs, SimpleCol)\n         self.assertEqual(b_isnull.lhs.target, ObjectC._meta.get_field('objectb'))\n \n-    def test_clone_select_related(self):\n+    def test_exact_lookup_with_list(self):\n+        # Test that Exact lookup retains list when list is provided\n+        query = Query(Item)\n+        where = query.build_where(Q(name=['a', 'b']))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ['a', 'b'])\n+        self.assertIsInstance(name_exact.rhs, list)\n         query = Query(Item)\n         query.add_select_related(['creator'])\n         clone = query.clone()\n",
  "django__django-12125": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex e62f7b0..737bb61 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -722,7 +722,29 @@ class WriterTests(SimpleTestCase):\n         output = writer.as_string()\n         self.assertIn(\"from django.db import migrations\\n\", output)\n \n-    def test_deconstruct_class_arguments(self):\n+    def test_serialize_inner_class(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        # Prepare the migration operation\n+        migration = migrations.CreateModel(\n+            name='A',\n+            fields=[\n+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n+                ('field', Outer.Inner(max_length=20)),\n+            ]\n+        )\n+\n+        # Serialize the migration operation\n+        writer = MigrationWriter(type('Migration', (migrations.Migration,), {'operations': [migration], 'dependencies': []}))\n+        output = writer.as_string()\n+\n+        # Check the output\n+        self.assertIn(\"('field', test_writer.Outer.Inner(max_length=20))\", output)\n         # Yes, it doesn't make sense to use a class as a default for a\n         # CharField. It does make sense for custom fields though, for example\n         # an enumfield that takes the enum class as an argument.\n@@ -746,4 +768,4 @@ class WriterTests(SimpleTestCase):\n \n     def test_register_non_serializer(self):\n         with self.assertRaisesMessage(ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "django__django-12143": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 2d13234..5d9e79e 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -844,6 +844,59 @@ class ChangeListTests(TestCase):\n         queryset = m._get_list_editable_queryset(request, prefix='form')\n         self.assertEqual(queryset.count(), 2)\n \n+    def test_get_list_editable_queryset_with_regex_chars_in_prefix(self):\n+        \"\"\"Test _get_list_editable_queryset with a prefix containing regex special characters.\"\"\"\n+        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n+        Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n+        data = {\n+            'form$-TOTAL_FORMS': '2',\n+            'form$-INITIAL_FORMS': '2',\n+            'form$-MIN_NUM_FORMS': '0',\n+            'form$-MAX_NUM_FORMS': '1000',\n+            'form$-0-uuid': str(a.pk),\n+            'form$-0-load': '10',\n+            '_save': 'Save',\n+        }\n+        superuser = self._create_superuser('superuser')\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form$')\n+        self.assertEqual(queryset.count(), 1)\n+\n+    def test_get_list_editable_queryset_with_multiple_special_chars(self):\n+        \"\"\"Test _get_list_editable_queryset with multiple regex special characters in prefix.\"\"\"\n+        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n+        Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n+        data = {\n+            'form$#-TOTAL_FORMS': '2',\n+            'form$#-INITIAL_FORMS': '2',\n+            'form$#-MIN_NUM_FORMS': '0',\n+            'form$#-MAX_NUM_FORMS': '1000',\n+            'form$#-0-uuid': str(a.pk),\n+            'form$#-0-load': '10',\n+            '_save': 'Save',\n+        }\n+        superuser = self._create_superuser('superuser')\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form$#')\n+        self.assertEqual(queryset.count(), 1)\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form')\n+        self.assertEqual(queryset.count(), 1)\n+        data['form-0-uuid'] = 'INVALD_PRIMARY_KEY'\n+        # The unfiltered queryset is returned if there's invalid data.\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form')\n+        self.assertEqual(queryset.count(), 2)\n+\n     def test_changelist_view_list_editable_changed_objects_uses_filter(self):\n         \"\"\"list_editable edits use a filtered queryset to limit memory usage.\"\"\"\n         a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n",
  "django__django-12155": "",
  "django__django-12193": "diff --git a/tests/forms_tests/widget_tests/test_checkboxinput.py b/tests/forms_tests/widget_tests/test_checkboxinput.py\nindex 5c5e45d..a285088 100644\n--- a/tests/forms_tests/widget_tests/test_checkboxinput.py\n+++ b/tests/forms_tests/widget_tests/test_checkboxinput.py\n@@ -82,10 +82,26 @@ class CheckboxInputTest(WidgetTest):\n         \"\"\"\n         self.assertFalse(self.widget.value_from_datadict({}, {}, 'testing'))\n \n+    def test_get_context_does_not_mutate_attrs(self):\n+        attrs = {'checked': False}\n+        self.widget.get_context('name', True, attrs)\n+        self.assertIs(attrs['checked'], False)\n+\n+    def test_checkbox_get_context_attrs(self):\n+        context = SplitArrayWidget(\n+            forms.CheckboxInput(),\n+            size=2,\n+        ).get_context('name', [True, False])\n+        self.assertEqual(context['widget']['value'], '[True, False]')\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{'checked': True}, {}]\n+        )\n+\n     def test_value_from_datadict_string_int(self):\n         value = self.widget.value_from_datadict({'testing': '0'}, {}, 'testing')\n         self.assertIs(value, True)\n \n     def test_value_omitted_from_data(self):\n         self.assertIs(self.widget.value_omitted_from_data({'field': 'value'}, {}, 'field'), False)\n-        self.assertIs(self.widget.value_omitted_from_data({}, {}, 'field'), False)\n+        self.assertIs(self.widget.value_omitted_from_data({}, {}, 'field'), False)\n",
  "django__django-12209": "diff --git a/tests/serializers/models/data.py b/tests/serializers/models/data.py\nindex 946715d..82c2883 100644\n--- a/tests/serializers/models/data.py\n+++ b/tests/serializers/models/data.py\n@@ -257,6 +257,11 @@ class UUIDData(models.Model):\n     data = models.UUIDField(primary_key=True)\n \n \n+import uuid\n+\n+class UUIDDefaultData(models.Model):\n+    data = models.UUIDField(primary_key=True, default=uuid.uuid4)\n+\n class FKToUUID(models.Model):\n     data = models.ForeignKey(UUIDData, models.CASCADE)\n \n",
  "django__django-12262": "diff --git a/tests/template_tests/templatetags/inclusion.py b/tests/template_tests/templatetags/inclusion.py\nindex da4058d..48ee630 100644\n--- a/tests/template_tests/templatetags/inclusion.py\n+++ b/tests/template_tests/templatetags/inclusion.py\n@@ -127,6 +127,14 @@ def inclusion_two_params_from_template(one, two):\n inclusion_two_params_from_template.anything = \"Expected inclusion_two_params_from_template __dict__\"\n \n \n+@register.simple_tag\n+def simple_keyword_only_default(*, kwarg=42):\n+    return f'simple_keyword_only_default - Expected result: {kwarg}'\n+\n+@register.simple_tag\n+def simple_keyword_only_param(*, kwarg):\n+    return f'simple_keyword_only_param - Expected result: {kwarg}'\n+\n @register.inclusion_tag('inclusion.html')\n def inclusion_one_default(one, two='hi'):\n     \"\"\"Expected inclusion_one_default __doc__\"\"\"\n@@ -145,6 +153,14 @@ def inclusion_one_default_from_template(one, two='hi'):\n inclusion_one_default_from_template.anything = \"Expected inclusion_one_default_from_template __dict__\"\n \n \n+@register.simple_tag\n+def simple_keyword_only_default(*, kwarg=42):\n+    return f'simple_keyword_only_default - Expected result: {kwarg}'\n+\n+@register.simple_tag\n+def simple_keyword_only_param(*, kwarg):\n+    return f'simple_keyword_only_param - Expected result: {kwarg}'\n+\n @register.inclusion_tag('inclusion.html')\n def inclusion_unlimited_args(one, two='hi', *args):\n     \"\"\"Expected inclusion_unlimited_args __doc__\"\"\"\n",
  "django__django-12276": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 61f7a13..c12abc0 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import copy\n import datetime\n import json\n@@ -2477,8 +2478,27 @@ Password: <input type=\"password\" name=\"password\" required>\n             f.as_table(),\n             '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n         )\n+    def test_filefield_with_initial_data(self):\n+        # Test that a FileField with initial data does not include the required attribute.\n+        class FileForm(Form):\n+            file1 = FileField(initial='resume.txt', widget=FileInput)\n+\n+        f = FileForm(auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n+        )\n \n-    def test_filefield_initial_callable(self):\n+    def test_filefield_with_initial_data_and_no_initial(self):\n+        # Test that a FileField with no initial data still includes the required attribute.\n+        class FileForm(Form):\n+            file1 = FileField(widget=FileInput)\n+\n+        f = FileForm(auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n+        )\n         class FileForm(forms.Form):\n             file1 = forms.FileField(initial=lambda: 'resume.txt')\n \n",
  "django__django-12304": "",
  "django__django-12308": "",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..092f852 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1006,7 +1006,31 @@ class OtherModelTests(SimpleTestCase):\n \n         self.assertEqual(ShippingMethod.check(), [])\n \n-    def test_missing_parent_link(self):\n+    @isolate_apps('invalid_models_tests')\n+    def test_onetoone_with_multiple_relations_order_one(self):\n+        class Document(models.Model):\n+            pass\n+\n+        class Picking(Document):\n+            document_ptr = models.OneToOneField(\n+                Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+            origin = models.OneToOneField(\n+                Document, related_name='picking', on_delete=models.PROTECT)\n+\n+        self.assertEqual(Picking.check(), [])\n+\n+    @isolate_apps('invalid_models_tests')\n+    def test_onetoone_with_multiple_relations_order_two(self):\n+        class Document(models.Model):\n+            pass\n+\n+        class Picking(Document):\n+            origin = models.OneToOneField(\n+                Document, related_name='picking', on_delete=models.PROTECT)\n+            document_ptr = models.OneToOneField(\n+                Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+\n+        self.assertEqual(Picking.check(), [])\n         msg = 'Add parent_link=True to invalid_models_tests.ParkingLot.parent.'\n         with self.assertRaisesMessage(ImproperlyConfigured, msg):\n             class Place(models.Model):\n",
  "django__django-12419": "diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py\nindex 7af62eb..10a0b6a 100644\n--- a/tests/middleware/test_security.py\n+++ b/tests/middleware/test_security.py\n@@ -231,6 +231,14 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         \"\"\"\n         self.assertNotIn('Referrer-Policy', self.process_response())\n \n+    @override_settings(SECURE_REFERRER_POLICY='same-origin')\n+    def test_default_referrer_policy(self):\n+        \"\"\"\n+        Tests that the default SECURE_REFERRER_POLICY is set to 'same-origin'\n+        when the setting is not explicitly defined.\n+        \"\"\"\n+        self.assertEqual(self.process_response()['Referrer-Policy'], 'same-origin')\n+\n     def test_referrer_policy_on(self):\n         \"\"\"\n         With SECURE_REFERRER_POLICY set to a valid value, the middleware adds a\n@@ -254,4 +262,4 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         present in the response.\n         \"\"\"\n         response = self.process_response(headers={'Referrer-Policy': 'unsafe-url'})\n-        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n",
  "django__django-12663": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 872551b..0aacdb1 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -13,12 +13,31 @@ from django.db.models import (\n     Func, IntegerField, Max, Min, Model, OrderBy, OuterRef, Q, StdDev,\n     Subquery, Sum, TimeField, UUIDField, Value, Variance, When,\n )\n+class SimpleLazyObjectSubqueryTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.manager = Manager.objects.create(name='Manager')\n+        cls.employee = Employee.objects.create(firstname='John', lastname='Doe', salary=50000)\n+        cls.company = Company.objects.create(name='Test Company', ceo=cls.employee)\n+\n+    def test_subquery_with_simple_lazy_object(self):\n+        lazy_manager = SimpleLazyObject(lambda: Manager.objects.get(pk=self.manager.pk))\n+        qs = Company.objects.annotate(\n+            ceo_manager=Subquery(\n+                Employee.objects.filter(\n+                    lastname=OuterRef('ceo__lastname'),\n+                ).values('pk'),\n+            ),\n+        ).filter(ceo_manager=lazy_manager.pk)\n+        self.assertEqual(qs.get(), self.company)\n+\n from django.db.models.expressions import Col, Combinable, Random, RawSQL, Ref\n from django.db.models.functions import (\n     Coalesce, Concat, Left, Length, Lower, Substr, Upper,\n )\n from django.db.models.sql import constants\n from django.db.models.sql.datastructures import Join\n+from django.utils.functional import SimpleLazyObject\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import Approximate, isolate_apps\n \n",
  "django__django-12708": "",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..f4e6ac3 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -14,7 +14,7 @@ from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.auth.models import User\n from django.core.files.storage import default_storage\n from django.core.files.uploadedfile import SimpleUploadedFile\n-from django.db.models import CharField, DateField, DateTimeField, UUIDField\n+from django.db.models import CharField, DateField, DateTimeField, UUIDField, ManyToManyField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..b0ffe95 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,7 +172,7 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n@@ -181,4 +181,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 17e707b..c828193 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2445,6 +2445,31 @@ class AutodetectorTests(TestCase):\n         self.assertOperationTypes(changes, 'testapp', 0, [\"AddField\", \"AddField\"])\n         self.assertOperationAttributes(changes, 'testapp', 0, 0)\n \n+    def test_add_model_with_field_removed_from_base_model(self):\n+        \"\"\"\n+        Removing a base field takes place before adding a new inherited model\n+        that has a field with the same name.\n+        \"\"\"\n+        before = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('title', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        after = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+            ]),\n+            ModelState('app', 'book', [\n+                ('title', models.CharField(max_length=200)),\n+            ], bases=('app.readable',)),\n+        ]\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'app', 1)\n+        self.assertOperationTypes(changes, 'app', 0, ['RemoveField', 'CreateModel'])\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='title', model_name='readable')\n+        self.assertOperationAttributes(changes, 'app', 0, 1, name='book')\n+\n     def test_mti_inheritance_model_removal(self):\n         Animal = ModelState('app', 'Animal', [\n             (\"id\", models.AutoField(primary_key=True)),\n@@ -2453,4 +2478,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..47ab69b 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -8,7 +8,7 @@ from django.db import connection\n from django.db.models import Exists, Max, OuterRef\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n-from django.utils.deprecation import RemovedInDjango40Warning\n+from django.test.utils import isolate_apps\n \n from .models import (\n     Article, Author, Freebie, Game, IsNullWithNoneAsRHS, Player, Season, Tag,\n@@ -194,7 +194,43 @@ class LookupTests(TestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             Article.objects.in_bulk([self.au1], field_name='author')\n \n-    def test_values(self):\n+    def test_in_bulk_meta_constraint(self):\n+        season_2011 = Season.objects.create(year=2011)\n+        season_2012 = Season.objects.create(year=2012)\n+        Season.objects.create(year=2013)\n+        self.assertEqual(\n+            Season.objects.in_bulk(\n+                [season_2011.year, season_2012.year],\n+                field_name='year',\n+            ),\n+            {season_2011.year: season_2011, season_2012.year: season_2012},\n+        )\n+\n+    @isolate_apps('lookup')\n+    def test_in_bulk_non_unique_meta_constraint(self):\n+        class Model(models.Model):\n+            ean = models.CharField(max_length=100)\n+            brand = models.CharField(max_length=100)\n+            name = models.CharField(max_length=80)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=['ean'],\n+                        name='partial_ean_unique',\n+                        condition=models.Q(),\n+                    ),\n+                    models.UniqueConstraint(\n+                        fields=['brand', 'name'],\n+                        name='together_brand_name_unique',\n+                    ),\n+                ]\n+\n+        msg = \"in_bulk()'s field_name must be a unique field but '%s' isn't.\"\n+        for field_name in ['brand', 'ean']:\n+            with self.subTest(field_name=field_name):\n+                with self.assertRaisesMessage(ValueError, msg % field_name):\n+                    Model.objects.in_bulk(field_name=field_name)\n         # values() returns a list of dictionaries instead of object instances --\n         # and you can specify which fields you want to retrieve.\n         self.assertSequenceEqual(\n",
  "django__django-12858": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 3b6974f..ab074c5 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -893,7 +893,21 @@ class OtherModelTests(SimpleTestCase):\n         with register_lookup(models.CharField, Lower):\n             self.assertEqual(Model.check(), [])\n \n-    def test_ordering_pointing_to_related_model_pk(self):\n+    def test_ordering_pointing_to_nonexistent_lookup(self):\n+        class Supply(models.Model):\n+            pass\n+\n+        class Product(models.Model):\n+            parent = models.ForeignKey('self', models.CASCADE, null=True)\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+        class Stock(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('supply__product__parent__isnull',)\n+\n+        self.assertEqual(Stock.check(), [])\n         class Parent(models.Model):\n             pass\n \n",
  "django__django-13012": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 87c0945..4b832f6 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1821,10 +1821,31 @@ class CombinableTests(SimpleTestCase):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             Combinable() | Combinable()\n \n-    def test_reversed_and(self):\n+class ExpressionWrapperTests(SimpleTestCase):\n+    def test_empty_group_by(self):\n+        expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [])\n+\n+    def test_non_empty_group_by(self):\n+        expr = ExpressionWrapper(Value('f').lower(), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [expr.expression])\n+\n+    def test_constant_expression_not_in_group_by(self):\n+        # Test for ensuring constant expressions are not incorrectly placed in GROUP BY\n+        expr = ExpressionWrapper(Value(42), output_field=IntegerField())\n+        query = Model.objects.annotate(expr_res=expr).values('expr_res', 'column_a').annotate(sum=Sum('column_b'))\n+        sql, params = query.query.sql_with_params()\n+        self.assertNotIn('GROUP BY \"model\".\"column_a\", 42', sql)\n+\n+    def test_non_constant_expression_in_group_by(self):\n+        # Test for non-constant expressions to ensure they are correctly in GROUP BY\n+        expr = ExpressionWrapper(Lower('column_a'), output_field=IntegerField())\n+        query = Model.objects.annotate(expr_res=expr).values('expr_res', 'column_a').annotate(sum=Sum('column_b'))\n+        sql, params = query.query.sql_with_params()\n+        self.assertIn('GROUP BY \"model\".\"column_a\",', sql)\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             object() & Combinable()\n \n     def test_reversed_or(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n-            object() | Combinable()\n+            object() | Combinable()\n",
  "django__django-13028": "diff --git a/tests/queries/models.py b/tests/queries/models.py\nindex a43cfb4..7cf65a1 100644\n--- a/tests/queries/models.py\n+++ b/tests/queries/models.py\n@@ -59,6 +59,40 @@ class Annotation(models.Model):\n         return self.name\n \n \n+from django.utils.translation import gettext_lazy as _\n+from django.db import models\n+\n+class ProductMetaDataType(models.Model):\n+    label = models.CharField(max_length=255, unique=True, blank=False, null=False)\n+    filterable = models.BooleanField(default=False, verbose_name=_(\"filterable\"))\n+\n+    class Meta:\n+        app_label = \"adminpricing\"\n+        verbose_name = _(\"product meta data type\")\n+        verbose_name_plural = _(\"product meta data types\")\n+\n+    def __str__(self):\n+        return self.label\n+\n+class ProductMetaData(models.Model):\n+    id = models.BigAutoField(primary_key=True)\n+    product = models.ForeignKey(\n+        'Produit', null=False, blank=False, on_delete=models.CASCADE\n+    )\n+    value = models.TextField(null=False, blank=False)\n+    marketplace = models.ForeignKey(\n+        'Plateforme', null=False, blank=False, on_delete=models.CASCADE\n+    )\n+    date_created = models.DateTimeField(null=True, default=timezone.now)\n+    metadata_type = models.ForeignKey(\n+        ProductMetaDataType, null=False, blank=False, on_delete=models.CASCADE\n+    )\n+\n+    class Meta:\n+        app_label = \"adminpricing\"\n+        verbose_name = _(\"product meta data\")\n+        verbose_name_plural = _(\"product meta datas\")\n+\n class DateTimePK(models.Model):\n     date = models.DateTimeField(primary_key=True, auto_now_add=True)\n \n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..a7dd655 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,6 +343,37 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_self_referencing_fk_order_by(self):\n+        # Create authors with self-referencing editors\n+        author1 = Author.objects.create(name='Author 1')\n+        author2 = Author.objects.create(name='Author 2', editor=author1)\n+\n+        # Create articles\n+        article1 = Article.objects.create(headline='Article 1', author=author1, pub_date='2023-01-01')\n+        article2 = Article.objects.create(headline='Article 2', author=author2, pub_date='2023-01-02')\n+\n+        # Test ordering by self-referencing foreign key\n+        qs = Article.objects.filter(author__isnull=False).order_by('author__editor')\n+        self.assertQuerysetEqual(\n+            qs,\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline'),\n+        )\n+\n+        qs = Article.objects.filter(author__isnull=False).order_by('author__editor_id')\n+        self.assertQuerysetEqual(\n+            qs,\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline'),\n+        )\n+\n+        qs = Article.objects.filter(author__isnull=False).order_by('-author__editor_id')\n+        self.assertQuerysetEqual(\n+            qs,\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline'),\n+        )\n+\n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n@@ -353,6 +384,37 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n+\n+    def test_self_referencing_fk_order_by(self):\n+        # Create authors with self-referencing editors\n+        author1 = Author.objects.create(name='Author 1')\n+        author2 = Author.objects.create(name='Author 2', editor=author1)\n+\n+        # Create articles\n+        article1 = Article.objects.create(headline='Article 1', author=author1, pub_date='2023-01-01')\n+        article2 = Article.objects.create(headline='Article 2', author=author2, pub_date='2023-01-02')\n+\n+        # Test ordering by self-referencing foreign key\n+        qs = Article.objects.filter(author__isnull=False).order_by('author__editor')\n+        self.assertQuerysetEqual(\n+            qs,\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline'),\n+        )\n+\n+        qs = Article.objects.filter(author__isnull=False).order_by('author__editor_id')\n+        self.assertQuerysetEqual(\n+            qs,\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline'),\n+        )\n+\n+        qs = Article.objects.filter(author__isnull=False).order_by('-author__editor_id')\n+        self.assertQuerysetEqual(\n+            qs,\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline'),\n+        )\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline').asc()), [\n                 \"Article 1\",\n",
  "django__django-13089": "",
  "django__django-13109": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex d60d822..aab8e57 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -1645,6 +1645,66 @@ class ModelFormBasicTests(TestCase):\n         obj.full_clean()\n \n \n+from django.test import TestCase\n+from django import forms\n+from .models import Writer, Article\n+from django.core.exceptions import ValidationError\n+import datetime\n+\n+class ForeignKeyValidationTests(TestCase):\n+    def test_foreign_key_validation_with_default_manager(self):\n+        class ArticleForm(forms.ModelForm):\n+            class Meta:\n+                model = Article\n+                fields = '__all__'\n+\n+        # Create an archived writer\n+        archived_writer = Writer.objects.create(name='Archived Writer', archived=True)\n+        \n+        # Data to be used in form submission\n+        data = {\n+            'headline': 'Test Article',\n+            'slug': 'test-article',\n+            'pub_date': datetime.date.today(),\n+            'writer': archived_writer.pk,\n+        }\n+        \n+        form = ArticleForm(data)\n+        # Form should not be valid because the default manager filters out the writer\n+        self.assertFalse(form.is_valid())\n+        self.assertEqual(\n+            form.errors,\n+            {'writer': ['Select a valid choice. That choice is not one of the available choices.']}\n+        )\n+\n+    def test_foreign_key_validation_with_base_manager(self):\n+        class ArticleForm(forms.ModelForm):\n+            class Meta:\n+                model = Article\n+                fields = '__all__'\n+\n+            def __init__(self, *args, **kwargs):\n+                super().__init__(*args, **kwargs)\n+                # Use the base manager to include archived writers\n+                self.fields['writer'].queryset = Writer._base_manager.all()\n+\n+        # Create an archived writer\n+        archived_writer = Writer.objects.create(name='Archived Writer', archived=True)\n+\n+        # Data to be used in form submission\n+        data = {\n+            'headline': 'Test Article',\n+            'slug': 'test-article',\n+            'pub_date': datetime.date.today(),\n+            'writer': archived_writer.pk,\n+        }\n+\n+        form = ArticleForm(data)\n+        # Form should be valid because we're using the base manager\n+        self.assertTrue(form.is_valid())\n+        article = form.save()\n+        self.assertEqual(article.writer, archived_writer)\n+\n class ModelMultipleChoiceFieldTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-13112": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 081eff8..6ba31a9 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -867,7 +867,30 @@ class StateTests(SimpleTestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             project_state.apps\n \n-    def test_real_apps(self):\n+    def test_mixed_case_foreign_key(self):\n+        \"\"\"\n+        Ensure that ForeignKey fields with mixed-case app labels do not cause errors.\n+        \"\"\"\n+        new_apps = Apps()\n+\n+        class Category(models.Model):\n+            title = models.CharField(max_length=100, db_index=True)\n+\n+            class Meta:\n+                app_label = 'MixedCaseApp'\n+                apps = new_apps\n+\n+        class Content(models.Model):\n+            category = models.ForeignKey(Category, models.CASCADE)\n+\n+            class Meta:\n+                app_label = 'MixedCaseApp'\n+                apps = new_apps\n+\n+        project_state = ProjectState()\n+        project_state.add_model(ModelState.from_model(Category))\n+        project_state.add_model(ModelState.from_model(Content))\n+        self.assertEqual(len(project_state.apps.get_models()), 2)\n         \"\"\"\n         Including real apps can resolve dangling FK errors.\n         This test relies on the fact that contenttypes is always loaded.\n",
  "django__django-13121": "",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..a366da1 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1518,7 +1518,23 @@ class FTimeDeltaTests(TestCase):\n             output_field=DateField(),\n         ))\n         self.assertIsNone(queryset.first().shifted)\n-\n+    @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_without_expression_wrapper(self):\n+        # Test subtraction between DateTimeField and DateTimeField\n+        queryset = Experiment.objects.annotate(delta=F('end') - F('start'))\n+        for obj in queryset:\n+            self.assertEqual(obj.delta, obj.end - obj.start)\n+\n+        # Test subtraction between TimeField and another time value without specifying output_field\n+        Time.objects.create(time=datetime.time(14, 30, 45))\n+        queryset = Time.objects.annotate(\n+            delta=F('time') - datetime.time(13, 15, 30)\n+        )\n+        self.assertEqual(\n+            queryset.get().delta,\n+            datetime.timedelta(hours=1, minutes=15, seconds=15)\n+        )\n+        \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n     def test_date_subquery_subtraction(self):\n         subquery = Experiment.objects.filter(pk=OuterRef('pk')).values('completed')\n",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..7832654 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,5 +1,8 @@\n import operator\n \n+from django.forms import ModelForm\n+from .models import Publication, Article\n+\n from django.db import DatabaseError, NotSupportedError, connection\n from django.db.models import Exists, F, IntegerField, OuterRef, Value\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..4fbbddc 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -312,6 +312,13 @@ class SessionTestsMixin:\n         self.assertEqual(self.session.decode(encoded), data)\n \n     @override_settings(SECRET_KEY='django_tests_secret_key')\n+    def test_default_hashing_algorithm_legacy_decode(self):\n+        # Test that legacy decode works with DEFAULT_HASHING_ALGORITHM set to 'sha1'.\n+        with override_settings(DEFAULT_HASHING_ALGORITHM='sha1'):\n+            data = {'a test key': 'a test value'}\n+            encoded = self.session.encode(data)\n+            self.assertEqual(self.session._legacy_decode(encoded), data)\n+\n     def test_decode_legacy(self):\n         # RemovedInDjango40Warning: pre-Django 3.1 sessions will be invalid.\n         legacy_encoded = (\n",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..19fbb4c 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -1,6 +1,8 @@\n import time\n \n from django.core.exceptions import ImproperlyConfigured\n+from django.shortcuts import get_object_or_404\n+from .models import Artist\n from django.http import HttpResponse\n from django.test import (\n     RequestFactory, SimpleTestCase, ignore_warnings, override_settings,\n@@ -590,7 +592,20 @@ class DeprecationTests(SimpleTestCase):\n         self.assertEqual(response.context['key'], 'value')\n         self.assertIsInstance(response.context['view'], View)\n \n-    def test_template_params_warning(self):\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_template_params_filtering(self):\n+        \"\"\"Test filtering with SimpleLazyObject in get_context_data.\"\"\"\n+        class ArtistView(TemplateView):\n+            template_name = 'generic_views/about.html'\n+            \n+            def get_context_data(self, *, artist_name, **kwargs):\n+                context = super().get_context_data(**kwargs)\n+                artist = Artist.objects.get(name=str(artist_name))\n+                return {**context, 'artist': artist}\n+        \n+        artist = Artist.objects.create(name='Vincent van Gogh')\n+        response = ArtistView.as_view()(self.rf.get('/'), artist_name=artist.name)\n+        self.assertEqual(response.context_data['artist'], artist)\n         response = self.client.get('/template/custom/bar1/bar2/')\n         self.assertEqual(response.status_code, 200)\n         msg = (\n",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..943bd81 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -16,6 +16,8 @@ from django.forms.models import (\n )\n from django.template import Context, Template\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n+from django.db.models import Q\n+from django.test.utils import isolate_apps\n \n from .models import (\n     Article, ArticleStatus, Author, Author1, Award, BetterWriter, BigInt, Book,\n@@ -2819,7 +2821,57 @@ class LimitChoicesToTests(TestCase):\n         fields = fields_for_model(StumpJoke, ['has_fooled_today'])\n         self.assertSequenceEqual(fields['has_fooled_today'].queryset, [self.threepwood])\n \n-    def test_callable_called_each_time_form_is_instantiated(self):\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates_for_foreignkey(self):\n+        marley = Character.objects.create(username=\"Marley\", last_action=\"2023-10-15\")\n+        threepwood = Character.objects.create(username=\"Threepwood\", last_action=\"2023-10-16\")\n+\n+        joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=marley)\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=marley)\n+\n+        joke1.has_fooled_today.add(marley, threepwood)\n+        joke2.has_fooled_today.add(marley)\n+        joke3.has_fooled_today.add(marley, threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=Q(jokes__funny=True, jokes_today__funny=True),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={'jokes__funny': True, 'jokes_today__funny': True},\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=Q(jokes__funny=True, jokes_today__funny=True),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [marley, threepwood],\n+        )\n         field = StumpJokeForm.base_fields['most_recently_fooled']\n         with mock.patch.object(field, 'limit_choices_to') as today_callable_dict:\n             StumpJokeForm()\n",
  "django__django-13343": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex a5ab3a0..c99f688 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -29,7 +29,7 @@ from django.test.utils import requires_tz_support\n from django.urls import NoReverseMatch, reverse_lazy\n from django.utils import timezone\n \n-from .models import Storage, temp_storage, temp_storage_location\n+from .models import Storage, callable_storage, temp_storage, temp_storage_location\n \n FILE_SUFFIX_REGEX = '[A-Za-z0-9]{7}'\n \n@@ -66,7 +66,19 @@ class GetStorageClassTests(SimpleTestCase):\n             get_storage_class('django.core.files.nonexistent_storage.NonexistentStorage')\n \n \n-class FileSystemStorageTests(unittest.TestCase):\n+class CallableStorageDeconstructionTests(TestCase):\n+    \n+    def test_filefield_with_callable_storage_deconstructs_correctly(self):\n+        \"\"\"\n+        FileField with callable storage should deconstruct to the original callable,\n+        not the evaluated storage.\n+        \"\"\"\n+        storage_field = Storage()._meta.get_field('storage_callable')\n+        _, _, kwargs = storage_field.deconstruct()\n+        storage = kwargs['storage']\n+        self.assertIs(storage, callable_storage)\n+\n+class FileSystemStorageTests(TestCase):\n \n     def test_deconstruction(self):\n         path, args, kwargs = temp_storage.deconstruct()\n",
  "django__django-13346": "",
  "django__django-13363": "",
  "django__django-13401": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e39d03e..3271faf 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -97,6 +97,39 @@ class BasicFieldTests(SimpleTestCase):\n         field._get_default\n         pickle.dumps(field)\n \n+    def test_abstract_inherited_fields(self):\n+        \"\"\"Field instances from abstract models are not equal.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        # Assert fields from different models are not equal\n+        self.assertNotEqual(abstract_model_field, inherit1_model_field)\n+        self.assertNotEqual(abstract_model_field, inherit2_model_field)\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+\n+        # Test ordering between different fields\n+        self.assertLess(abstract_model_field, inherit1_model_field)\n+        self.assertLess(abstract_model_field, inherit2_model_field)\n+        self.assertLess(inherit1_model_field, inherit2_model_field)\n+\n+        # Assert hashes are different\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit1_model_field))\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit2_model_field))\n+        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n+\n     def test_deconstruct_nested_field(self):\n         \"\"\"deconstruct() uses __qualname__ for nested class support.\"\"\"\n         name, path, args, kwargs = Nested.Field().deconstruct()\n",
  "django__django-13410": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 1285e22..497b894 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -1,3 +1,4 @@\n+\n import errno\n import gzip\n import os\n@@ -7,6 +8,8 @@ import unittest\n from io import BytesIO, StringIO, TextIOWrapper\n from pathlib import Path\n from unittest import mock\n+from django.core.files import locks\n+from pathlib import Path\n \n from django.core.files import File\n from django.core.files.base import ContentFile\n",
  "django__django-13417": "",
  "django__django-13516": "",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..55a4750 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n@@ -16,9 +17,33 @@ class MockedPasswordResetTokenGenerator(PasswordResetTokenGenerator):\n     def _now(self):\n         return self._now_val\n \n+from .models.with_custom_email_field import CustomEmailField\n \n class TokenGeneratorTest(TestCase):\n \n+    def test_token_invalid_after_email_change(self):\n+        \"\"\"Ensure that changing the user's email invalidates the password reset token.\"\"\"\n+        user_models = [\n+            (User, 'testuser1@example.com'),\n+            (CustomEmailField, 'testuser2@example.com'),\n+        ]\n+        \n+        for model, email in user_models:\n+            with self.subTest(model=model.__name__, email=email):\n+                user = model.objects.create_user('changeemailuser', email=email, password='testpw')\n+                token_generator = PasswordResetTokenGenerator()\n+                token = token_generator.make_token(user)\n+                \n+                # Token should be valid before the email change\n+                self.assertTrue(token_generator.check_token(user, token))\n+                \n+                # Change email\n+                setattr(user, user.get_email_field_name(), 'newemail@example.com')\n+                user.save()\n+                \n+                # Token should be invalid after the email change\n+                self.assertFalse(token_generator.check_token(user, token))\n+\n     def test_make_token(self):\n         user = User.objects.create_user('tokentestuser', 'test2@example.com', 'testpw')\n         p0 = PasswordResetTokenGenerator()\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..3ef081e 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,3 +1,4 @@\n+\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n@@ -138,7 +139,25 @@ class ModelsPermissionsChecksTests(SimpleTestCase):\n             ),\n         ])\n \n-    def test_non_clashing_custom_permissions(self):\n+    @override_settings(AUTH_USER_MODEL='auth_tests.UserWithTotalUniqueConstraint')\n+    def test_username_field_total_unique_constraint(self):\n+        class UserWithTotalUniqueConstraint(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(fields=['username'], name='username_total_unique'),\n+                ]\n+\n+        # Check for errors, expecting no auth.E003 error as the constraint should suffice\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [])\n+\n+        # Test with custom authentication backend\n+        with self.settings(AUTHENTICATION_BACKENDS=['my.custom.backend']):\n+            errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+            self.assertEqual(errors, [])\n         class Checked(models.Model):\n             class Meta:\n                 permissions = [\n",
  "django__django-13569": "",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..9497334 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -7,6 +8,7 @@ from decimal import Decimal\n from unittest import mock\n \n from django.core.exceptions import FieldError\n+from collections import namedtuple\n from django.db import DatabaseError, NotSupportedError, connection\n from django.db.models import (\n     AutoField, Avg, BinaryField, BooleanField, Case, CharField, Count,\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..be5e3f4 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -28,9 +28,33 @@ from django.core.management.commands.testserver import (\n )\n from django.db import ConnectionHandler, connection\n from django.db.migrations.recorder import MigrationRecorder\n+from django.test.utils import captured_stderr, captured_stdout\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n+class ExecuteFromCommandLine(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_none_in_argv(self):\n+        \"\"\"\n+        Program name is set to a default when sys.argv[0] is None.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line([None] + args)\n+        self.assertIn('usage: python -m django shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n \n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n \n",
  "django__django-13670": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 6f0b13f..9317b56 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -1,3 +1,4 @@\n+\n from datetime import date, datetime\n \n from django.test import SimpleTestCase, override_settings\n@@ -18,8 +19,22 @@ class DateFormatTests(SimpleTestCase):\n \n     def tearDown(self):\n         translation.activate(self._orig_lang)\n-\n-    def test_date(self):\n+    def test_year_before_1000(self):\n+        tests = [\n+            (476, '76'),\n+            (42, '42'),\n+            (4, '04'),\n+            (999, '99'),\n+            (1000, '00'),\n+            (123, '23'),\n+            (9, '09'),\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n         d = date(2009, 5, 16)\n         self.assertEqual(date.fromtimestamp(int(format(d, 'U'))), d)\n \n@@ -164,4 +179,4 @@ class DateFormatTests(SimpleTestCase):\n             self.assertEqual(\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+            )\n",
  "django__django-13741": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex ca66cd5..f4648a1 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1020,7 +1020,9 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n-    def test_readonly_field_has_changed(self):\n+    def test_readonly_password_hash_field_disabled(self):\n+        field = ReadOnlyPasswordHashField()\n+        self.assertIs(field.disabled, True)\n         field = ReadOnlyPasswordHashField()\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n \n",
  "django__django-13786": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3782589..161591a 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -119,6 +119,46 @@ class OptimizerTests(SimpleTestCase):\n             ]\n         )\n \n+    def test_create_model_and_clear_options(self):\n+        \"\"\"\n+        Test that CreateModel correctly optimizes with AlterModelOptions to clear options.\n+        \"\"\"\n+        # Test clearing options\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'TestModel',\n+                    fields=[],\n+                    options={'verbose_name': 'Test Model', 'ordering': ['name']},\n+                ),\n+                migrations.AlterModelOptions('TestModel', options={'ordering': ['name']}),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    'TestModel',\n+                    fields=[],\n+                    options={'ordering': ['name']},\n+                ),\n+            ]\n+        )\n+        # Test removing all options\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'SampleModel',\n+                    fields=[],\n+                    options={'verbose_name': 'Sample', 'permissions': [('can_view', 'Can View')]},\n+                ),\n+                migrations.AlterModelOptions('SampleModel', options={}),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    'SampleModel',\n+                    fields=[],\n+                ),\n+            ]\n+        )\n+\n     def _test_create_alter_foo_delete_model(self, alter_foo):\n         \"\"\"\n         CreateModel, AlterModelTable, AlterUniqueTogether/AlterIndexTogether/\n@@ -134,6 +174,46 @@ class OptimizerTests(SimpleTestCase):\n             [],\n         )\n \n+    def test_create_model_and_clear_options(self):\n+        \"\"\"\n+        Test that CreateModel correctly optimizes with AlterModelOptions to clear options.\n+        \"\"\"\n+        # Test clearing options\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'TestModel',\n+                    fields=[],\n+                    options={'verbose_name': 'Test Model', 'ordering': ['name']},\n+                ),\n+                migrations.AlterModelOptions('TestModel', options={'ordering': ['name']}),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    'TestModel',\n+                    fields=[],\n+                    options={'ordering': ['name']},\n+                ),\n+            ]\n+        )\n+        # Test removing all options\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'SampleModel',\n+                    fields=[],\n+                    options={'verbose_name': 'Sample', 'permissions': [('can_view', 'Can View')]},\n+                ),\n+                migrations.AlterModelOptions('SampleModel', options={}),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    'SampleModel',\n+                    fields=[],\n+                ),\n+            ]\n+        )\n+\n     def test_create_alter_unique_delete_model(self):\n         self._test_create_alter_foo_delete_model(migrations.AlterUniqueTogether(\"Foo\", [[\"a\", \"b\"]]))\n \n",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..62876bf 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,8 +1,11 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n from django.test import SimpleTestCase\n \n+from django.utils.translation import gettext_lazy\n+from django.utils.functional import lazy\n from ..utils import setup\n \n \n@@ -36,7 +39,34 @@ class AddTests(SimpleTestCase):\n         output = self.engine.render_to_string('add05', {'l1': [1, 2], 'l2': [3, 4]})\n         self.assertEqual(output, '[1, 2, 3, 4]')\n \n-    @setup({'add06': '{{ t1|add:t2 }}'})\n+    @setup({'add08': '{{ s1|add:lazy_s2 }}'})\n+    def test_add08(self):\n+        output = self.engine.render_to_string(\n+            'add08',\n+            {'s1': 'string', 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    @setup({'add09': '{{ lazy_s1|add:lazy_s2 }}'})\n+    def test_add09(self):\n+        output = self.engine.render_to_string(\n+            'add09',\n+            {'lazy_s1': gettext_lazy('string'), 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    def test_lazy_add(self):\n+        lazy_4 = lazy(lambda: 4, int)\n+        lazy_5 = lazy(lambda: 5, int)\n+        self.assertEqual(lazy_4() + lazy_5(), 9)\n+\n+    @setup({'add10': '{{ lazy_s1|add:s2 }}'})\n+    def test_add10(self):\n+        output = self.engine.render_to_string(\n+            'add10',\n+            {'lazy_s1': gettext_lazy('lazy'), 's2': 'string'},\n+        )\n+        self.assertEqual(output, 'lazystring')\n     def test_add06(self):\n         output = self.engine.render_to_string('add06', {'t1': (3, 4), 't2': (1, 2)})\n         self.assertEqual(output, '(3, 4, 1, 2)')\n",
  "django__django-13807": "diff --git a/tests/backends/tests.py b/tests/backends/tests.py\nindex 0aee2b6..7c2aed4 100644\n--- a/tests/backends/tests.py\n+++ b/tests/backends/tests.py\n@@ -11,6 +11,7 @@ from django.db import (\n )\n from django.db.backends.base.base import BaseDatabaseWrapper\n from django.db.backends.signals import connection_created\n+from django.db import IntegrityError, connection, transaction\n from django.db.backends.utils import CursorWrapper\n from django.db.models.sql.constants import CURSOR\n from django.test import (\n@@ -21,7 +22,7 @@ from django.test import (\n from .models import (\n     Article, Object, ObjectReference, Person, Post, RawData, Reporter,\n     ReporterProxy, SchoolClass, Square,\n-    VeryLongModelNameZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ,\n+    VeryLongModelNameZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ, Reporter,\n )\n \n \n",
  "django__django-13809": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex d88ea78..26e9728 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1314,6 +1314,12 @@ class ManageRunserver(SimpleTestCase):\n         self.assertIn('unapplied migration(s)', self.output.getvalue())\n \n \n+import mock\n+from django.core.management import call_command\n+from django.test import TestCase\n+from io import StringIO\n+from django.core.management.commands.runserver import Command as RunserverCommand\n+\n class ManageRunserverMigrationWarning(TestCase):\n \n     def setUp(self):\n",
  "django__django-13810": "diff --git a/tests/middleware_exceptions/tests.py b/tests/middleware_exceptions/tests.py\nindex bb82f7d..9315ccf 100644\n--- a/tests/middleware_exceptions/tests.py\n+++ b/tests/middleware_exceptions/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.conf import settings\n from django.core.exceptions import MiddlewareNotUsed\n from django.http import HttpResponse\n@@ -187,6 +188,22 @@ class MiddlewareNotUsedTests(SimpleTestCase):\n     ROOT_URLCONF='middleware_exceptions.urls',\n )\n class MiddlewareSyncAsyncTests(SimpleTestCase):\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+    ])\n+    async def test_dummy_middleware_async(self):\n+        \"\"\"\n+        Verify that DummyMiddleware does not affect async request handling\n+        when MiddlewareNotUsed is raised.\n+        \"\"\"\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.status_code, 500)\n+        self.assertIn(\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.DummyMiddleware'\",\n+            cm.output[0]\n+        )\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.PaymentMiddleware',\n     ])\n@@ -194,6 +211,22 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n         response = self.client.get('/middleware_exceptions/view/')\n         self.assertEqual(response.status_code, 402)\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+    ])\n+    async def test_dummy_middleware_async(self):\n+        \"\"\"\n+        Verify that DummyMiddleware does not affect async request handling\n+        when MiddlewareNotUsed is raised.\n+        \"\"\"\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.status_code, 500)\n+        self.assertIn(\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.DummyMiddleware'\",\n+            cm.output[0]\n+        )\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.DecoratedPaymentMiddleware',\n     ])\n@@ -201,6 +234,22 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n         response = self.client.get('/middleware_exceptions/view/')\n         self.assertEqual(response.status_code, 402)\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+    ])\n+    async def test_dummy_middleware_async(self):\n+        \"\"\"\n+        Verify that DummyMiddleware does not affect async request handling\n+        when MiddlewareNotUsed is raised.\n+        \"\"\"\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.status_code, 500)\n+        self.assertIn(\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.DummyMiddleware'\",\n+            cm.output[0]\n+        )\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.async_payment_middleware',\n     ])\n@@ -215,6 +264,22 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n             \"adapted.\",\n         )\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+    ])\n+    async def test_dummy_middleware_async(self):\n+        \"\"\"\n+        Verify that DummyMiddleware does not affect async request handling\n+        when MiddlewareNotUsed is raised.\n+        \"\"\"\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.status_code, 500)\n+        self.assertIn(\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.DummyMiddleware'\",\n+            cm.output[0]\n+        )\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.NotSyncOrAsyncMiddleware',\n     ])\n@@ -227,6 +292,22 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n         with self.assertRaisesMessage(RuntimeError, msg):\n             self.client.get('/middleware_exceptions/view/')\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+    ])\n+    async def test_dummy_middleware_async(self):\n+        \"\"\"\n+        Verify that DummyMiddleware does not affect async request handling\n+        when MiddlewareNotUsed is raised.\n+        \"\"\"\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.status_code, 500)\n+        self.assertIn(\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.DummyMiddleware'\",\n+            cm.output[0]\n+        )\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.PaymentMiddleware',\n     ])\n@@ -240,6 +321,22 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n             \"middleware_exceptions.middleware.PaymentMiddleware adapted.\",\n         )\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+    ])\n+    async def test_dummy_middleware_async(self):\n+        \"\"\"\n+        Verify that DummyMiddleware does not affect async request handling\n+        when MiddlewareNotUsed is raised.\n+        \"\"\"\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.status_code, 500)\n+        self.assertIn(\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.DummyMiddleware'\",\n+            cm.output[0]\n+        )\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.async_payment_middleware',\n     ])\n@@ -266,6 +363,22 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             self.client.get('/middleware_exceptions/template_response/')\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+    ])\n+    async def test_dummy_middleware_async(self):\n+        \"\"\"\n+        Verify that DummyMiddleware does not affect async request handling\n+        when MiddlewareNotUsed is raised.\n+        \"\"\"\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.status_code, 500)\n+        self.assertIn(\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.DummyMiddleware'\",\n+            cm.output[0]\n+        )\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n     ])\n@@ -274,6 +387,22 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n         self.assertEqual(response.content, b'OK')\n         self.assertEqual(response.status_code, 200)\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+    ])\n+    async def test_dummy_middleware_async(self):\n+        \"\"\"\n+        Verify that DummyMiddleware does not affect async request handling\n+        when MiddlewareNotUsed is raised.\n+        \"\"\"\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.status_code, 500)\n+        self.assertIn(\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.DummyMiddleware'\",\n+            cm.output[0]\n+        )\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n     ])\n@@ -285,6 +414,22 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n \n @override_settings(ROOT_URLCONF='middleware_exceptions.urls')\n class AsyncMiddlewareTests(SimpleTestCase):\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+    ])\n+    async def test_dummy_middleware_async(self):\n+        \"\"\"\n+        Verify that DummyMiddleware does not affect async request handling\n+        when MiddlewareNotUsed is raised.\n+        \"\"\"\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.status_code, 500)\n+        self.assertIn(\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.DummyMiddleware'\",\n+            cm.output[0]\n+        )\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.AsyncTemplateResponseMiddleware',\n     ])\n",
  "django__django-13820": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex 594c01e..dc7462d 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -1,3 +1,4 @@\n+\n import compileall\n import os\n \n@@ -8,6 +9,7 @@ from django.db.migrations.exceptions import (\n from django.db.migrations.loader import MigrationLoader\n from django.db.migrations.recorder import MigrationRecorder\n from django.test import TestCase, modify_settings, override_settings\n+from importlib import import_module\n \n from .test_base import MigrationTestBase\n \n@@ -512,8 +514,35 @@ class LoaderTests(TestCase):\n         migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n         self.assertEqual(migrations, [])\n \n-\n-class PycLoaderTests(MigrationTestBase):\n+class NonNamespacePackageTests(TestCase):\n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations'})\n+    def test_loading_regular_package_without__file__(self):\n+        \"\"\"\n+        To support frozen environments, MigrationLoader loads migrations from\n+        regular packages with no __file__ attribute.\n+        \"\"\"\n+        test_module = import_module('migrations.test_migrations')\n+        loader = MigrationLoader(connection)\n+        # __file__ == __spec__.origin or the latter is None and former is\n+        # undefined.\n+        module_file = test_module.__file__\n+        module_origin = test_module.__spec__.origin\n+        module_has_location = test_module.__spec__.has_location\n+        try:\n+            del test_module.__file__\n+            test_module.__spec__.origin = None\n+            test_module.__spec__.has_location = False\n+            loader.load_disk()\n+            migrations = [\n+                name\n+                for app, name in loader.disk_migrations\n+                if app == 'migrations'\n+            ]\n+            self.assertCountEqual(migrations, ['0001_initial', '0002_second'])\n+        finally:\n+            test_module.__file__ = module_file\n+            test_module.__spec__.origin = module_origin\n+            test_module.__spec__.has_location = module_has_location\n \n     def test_valid(self):\n         \"\"\"\n",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..85395fe 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -10,6 +10,8 @@ from unittest import mock\n from django.core.exceptions import ImproperlyConfigured\n from django.db import NotSupportedError, connection, transaction\n from django.db.models import Aggregate, Avg, CharField, StdDev, Sum, Variance\n+from unittest import mock\n+from django.core.exceptions import ImproperlyConfigured\n from django.db.utils import ConnectionHandler\n from django.test import (\n     TestCase, TransactionTestCase, override_settings, skipIfDBFeature,\n@@ -36,7 +38,20 @@ class Tests(TestCase):\n                 self.assertRaisesMessage(ImproperlyConfigured, msg):\n             check_sqlite_version()\n \n-    def test_aggregation(self):\n+    def test_check_sqlite_version_unsupported(self):\n+        msg = 'SQLite 3.9.0 or later is required (found 3.8.11.1).'\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 8, 11, 1)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.8.11.1'), \\\n+                self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            check_sqlite_version()\n+\n+    def test_check_sqlite_version_supported(self):\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 9, 0)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.9.0'):\n+            try:\n+                check_sqlite_version()\n+            except ImproperlyConfigured:\n+                self.fail(\"check_sqlite_version() raised ImproperlyConfigured unexpectedly!\")\n         \"\"\"Raise NotSupportedError when aggregating on date/time fields.\"\"\"\n         for aggregate in (Sum, Avg, Variance, StdDev):\n             with self.assertRaises(NotSupportedError):\n",
  "django__django-13837": "",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..43b7d66 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -282,14 +282,29 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n         )\n \n \n+from django.test import TestCase\n+from django.forms import ModelChoiceField, ModelMultipleChoiceField\n+from .models import ChoiceModel\n+\n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n     def test_modelchoicefield(self):\n         # Create choices for the model choice field tests below.\n         ChoiceModel.objects.create(pk=1, name='a')\n         ChoiceModel.objects.create(pk=2, name='b')\n         ChoiceModel.objects.create(pk=3, name='c')\n-\n-        # ModelChoiceField\n+    def test_modelchoicefield_value_placeholder(self):\n+        # This test verifies that the invalid choice value is included in the error message.\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            'invalid',\n+        )\n         e = {\n             'required': 'REQUIRED',\n             'invalid_choice': 'INVALID CHOICE',\n@@ -307,4 +322,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/tests.py b/tests/many_to_one/tests.py\nindex 8af1b8e..1b4b64e 100644\n--- a/tests/many_to_one/tests.py\n+++ b/tests/many_to_one/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n from copy import deepcopy\n \n@@ -549,7 +550,39 @@ class ManyToOneTests(TestCase):\n         self.assertEqual(child.parent, parent)\n         self.assertEqual(child.parent_id, parent.name)\n \n-    def test_fk_to_bigautofield(self):\n+    def test_save_fk_after_parent_with_non_numeric_pk_set_on_child(self):\n+        parent = ParentStringPrimaryKey()\n+        child = ChildStringPrimaryKeyParent(parent=parent)\n+        child.parent.name = 'jeff'\n+        parent.save()\n+        child.save()\n+        child.refresh_from_db()\n+        self.assertEqual(child.parent, parent)\n+        self.assertEqual(child.parent_id, parent.name)\n+    \n+    def test_save_fk_after_setting_unsaved_parent_without_primary_key(self):\n+        # This is the test for the issue described in the document.\n+        with transaction.atomic():\n+            parent = ParentStringPrimaryKey()\n+            child = ChildStringPrimaryKeyParent()\n+            child.parent = parent\n+            child.parent.name = 'jeff'\n+            parent.save()\n+            child.save()\n+            child.refresh_from_db()\n+            self.assertEqual(child.parent, parent)\n+            self.assertEqual(child.parent_id, parent.name)\n+\n+    def test_save_fk_after_setting_unsaved_parent_with_primary_key(self):\n+        # This is an additional test verifying the correct behavior.\n+        with transaction.atomic():\n+            parent = ParentStringPrimaryKey(name='jeff')\n+            child = ChildStringPrimaryKeyParent(parent=parent)\n+            parent.save()\n+            child.save()\n+            child.refresh_from_db()\n+            self.assertEqual(child.parent, parent)\n+            self.assertEqual(child.parent_id, parent.name)\n         ch = City.objects.create(name='Chicago')\n         District.objects.create(city=ch, name='Far South')\n         District.objects.create(city=ch, name='North')\n",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..0a5e38c 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,4 +1,6 @@\n-from django.db import IntegrityError, transaction\n+\n+from .fields import MyWrapper, MyAutoField\n+from .models import CustomAutoFieldModel\n from django.test import TestCase, skipIfDBFeature\n \n from .models import Bar, Business, Employee, Foo\n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..5b2bae1 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -818,6 +818,29 @@ class BasicExpressionsTests(TestCase):\n \n \n class IterableLookupInnerExpressionsTests(TestCase):\n+    def test_commutative_property_of_Q_and_Exists(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        \n+        # Test the commutative property of Q() & Exists()\n+        self.assertCountEqual(\n+            Employee.objects.filter(Exists(is_ceo) & Q()),\n+            Employee.objects.filter(Q() & Exists(is_ceo)),\n+        )\n+        self.assertCountEqual(\n+            Employee.objects.filter(Exists(is_poc) & Q(salary__gte=30)),\n+            Employee.objects.filter(Q(salary__gte=30) & Exists(is_poc)),\n+        )\n+        \n+        # Test the commutative property of Q() | Exists()\n+        self.assertCountEqual(\n+            Employee.objects.filter(Exists(is_ceo) | Q()),\n+            Employee.objects.filter(Q() | Exists(is_ceo)),\n+        )\n+        self.assertCountEqual(\n+            Employee.objects.filter(Exists(is_poc) | Q(salary__lt=15)),\n+            Employee.objects.filter(Q(salary__lt=15) | Exists(is_poc)),\n+        )\n     @classmethod\n     def setUpTestData(cls):\n         ceo = Employee.objects.create(firstname='Just', lastname='Doit', salary=30)\n",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..5f81abb 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -205,6 +205,22 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yields(self):\n+        \"\"\"\n+        Test that post_process does not yield the same file multiple times.\n+        \"\"\"\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(clear=True, dry_run=False, post_process=True)\n+        stats = collectstatic_cmd.collect()\n+\n+        # Check that no file is yielded more than once in post_processed\n+        post_processed_files = stats['post_processed']\n+        self.assertCountEqual(post_processed_files, set(post_processed_files))\n+\n+        # Check specific files to ensure they are processed correctly\n+        self.assertIn(os.path.join('admin', 'css', 'base.css'), post_processed_files)\n+        self.assertIn(os.path.join('admin', 'css', 'dashboard.css'), post_processed_files)\n+\n     def test_css_import_case_insensitive(self):\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n         self.assertEqual(relpath, \"cached/styles_insensitive.3fa427592a53.css\")\n@@ -214,6 +230,22 @@ class TestHashedFiles:\n             self.assertIn(b\"other.d41d8cd98f00.css\", content)\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yields(self):\n+        \"\"\"\n+        Test that post_process does not yield the same file multiple times.\n+        \"\"\"\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(clear=True, dry_run=False, post_process=True)\n+        stats = collectstatic_cmd.collect()\n+\n+        # Check that no file is yielded more than once in post_processed\n+        post_processed_files = stats['post_processed']\n+        self.assertCountEqual(post_processed_files, set(post_processed_files))\n+\n+        # Check specific files to ensure they are processed correctly\n+        self.assertIn(os.path.join('admin', 'css', 'base.css'), post_processed_files)\n+        self.assertIn(os.path.join('admin', 'css', 'dashboard.css'), post_processed_files)\n+\n     @override_settings(\n         STATICFILES_DIRS=[os.path.join(TEST_ROOT, 'project', 'faulty')],\n         STATICFILES_FINDERS=['django.contrib.staticfiles.finders.FileSystemFinder'],\n",
  "django__django-14089": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 7fb3d83..b6331cd 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n@@ -6,6 +7,7 @@ import copy\n import pickle\n \n from django.test import SimpleTestCase\n+import collections.abc\n from django.utils.datastructures import (\n     CaseInsensitiveMapping, DictWrapper, ImmutableList, MultiValueDict,\n     MultiValueDictKeyError, OrderedSet,\n@@ -18,7 +20,29 @@ class OrderedSetTests(SimpleTestCase):\n         s = OrderedSet([1, 2, 3])\n         self.assertEqual(list(s.dict.keys()), [1, 2, 3])\n \n-    def test_remove(self):\n+    def test_reversed(self):\n+        # Create an OrderedSet and reverse it\n+        s = reversed(OrderedSet([1, 2, 3]))\n+        # Assert that the result is an iterator\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        # Assert that the list obtained from the iterator is the reversed list\n+        self.assertEqual(list(s), [3, 2, 1])\n+\n+    def test_reversed_empty(self):\n+        # Test reversing an empty OrderedSet\n+        s = reversed(OrderedSet())\n+        # Assert that the result is an iterator\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        # Assert that the list obtained from the iterator is empty\n+        self.assertEqual(list(s), [])\n+\n+    def test_reversed_single_element(self):\n+        # Test reversing an OrderedSet with a single element\n+        s = reversed(OrderedSet([42]))\n+        # Assert that the result is an iterator\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        # Assert that the list obtained from the iterator has the single element\n+        self.assertEqual(list(s), [42])\n         s = OrderedSet()\n         self.assertEqual(len(s), 0)\n         s.add(1)\n",
  "django__django-14122": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 83089d9..f2b00f9 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -1,9 +1,11 @@\n+\n from datetime import datetime\n from operator import attrgetter\n \n from django.db.models import (\n     CharField, DateTimeField, F, Max, OuterRef, Subquery, Value,\n )\n+from django.db.models import Count\n from django.db.models.functions import Upper\n from django.test import TestCase\n \n@@ -23,6 +25,19 @@ class OrderingTests(TestCase):\n         for i in range(2):\n             Author.objects.create()\n \n+    def test_default_ordering_does_not_affect_group_by(self):\n+        \"\"\"\n+        Test that default Meta.ordering does not affect the GROUP BY clause,\n+        ensuring that no unnecessary fields are included for aggregation.\n+        \"\"\"\n+        Article.objects.exclude(headline='Article 4').update(author=self.author_1)\n+        Article.objects.filter(headline='Article 4').update(author=self.author_2)\n+        articles = Article.objects.values('author').annotate(count=Count('author'))\n+        self.assertCountEqual(articles, [\n+            {'author': self.author_1.pk, 'count': 3},\n+            {'author': self.author_2.pk, 'count': 1},\n+        ])\n+\n     def test_default_ordering(self):\n         \"\"\"\n         By default, Article.objects.all() orders by pub_date descending, then\n@@ -483,4 +498,4 @@ class OrderingTests(TestCase):\n         )\n         ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n         articles = ChildArticle.objects.order_by('article_ptr')\n-        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n",
  "django__django-14140": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex c3db825..d662acf 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -823,8 +823,22 @@ class BasicExpressionsTests(TestCase):\n             Employee.objects.filter(Q(salary__lt=15) | Exists(is_poc)),\n             [self.example_inc.ceo, self.max],\n         )\n+    def test_boolean_expression_with_exists_and_q(self):\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+\n+        # Test combining Q with Exists and check deconstruction\n+        q = Q(Exists(is_poc))\n+        path, args, kwargs = q.deconstruct()\n+        self.assertEqual(args, (Exists(is_poc),))\n+        self.assertEqual(kwargs, {})\n \n-    def test_boolean_expression_combined_with_empty_Q(self):\n+        # Test pickling and unpickling the combined query\n+        import pickle\n+        combined_query = Q(Exists(is_poc))\n+        unpickled_query = pickle.loads(pickle.dumps(combined_query))\n+        self.assertEqual(combined_query, unpickled_query)\n         is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n         self.gmbh.point_of_contact = self.max\n         self.gmbh.save()\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..9f7f769 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,3 +1,4 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n@@ -66,7 +67,27 @@ class TestDefaultPK(SimpleTestCase):\n             class Model(models.Model):\n                 pass\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -82,7 +103,27 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14311": "",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..73b3024 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -218,6 +218,14 @@ TEST_DATA = [\n \n     (MinLengthValidator(10), '', ValidationError),\n \n+    # URLs with CR, LF, and tab characters should raise ValidationError\n+    (URLValidator(), 'http://www.djangoproject.com/\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://www.django\\rproject.com/', ValidationError),\n+    (URLValidator(), 'http://[::\\rffff:192.9.5.5]', ValidationError),\n+    (URLValidator(), 'http://\\twww.djangoproject.com/', ValidationError),\n+    (URLValidator(), 'http://\\t[::ffff:192.9.5.5]', ValidationError),\n+\n     (URLValidator(EXTENDED_SCHEMES), 'file://localhost/path', None),\n     (URLValidator(EXTENDED_SCHEMES), 'git://example.com/', None),\n     (URLValidator(EXTENDED_SCHEMES), 'git+ssh://git@github.com/example/hg-git.git', None),\n",
  "django__django-14351": "diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\nindex 79963c3..ca6131b 100644\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -1526,7 +1526,37 @@ class AggregationTests(TestCase):\n         DistinctAggregate('foo', distinct=True)\n \n \n+from django.test import TestCase\n+from django.db.models import Q, Count\n+from .models import Author, Book, PropertyGroup, Agent\n+\n class JoinPromotionTests(TestCase):\n+    def setUp(self):\n+        # Set up models similar to those in the issue\n+        self.agent = Agent.objects.create(name=\"Test Agent\")\n+        self.property_group1 = PropertyGroup.objects.create(name=\"Group 1\")\n+        self.property_group2 = PropertyGroup.objects.create(name=\"Group 2\")\n+        self.agent.property_groups.add(self.property_group1, self.property_group2)\n+\n+    def test_subquery_in_group_by(self):\n+        property_groups = PropertyGroup.objects.filter(agent=self.agent)\n+        queryset = Agent.objects.annotate(Count(\"property_groups\"))\n+        result = queryset.filter(\n+            Q(property_groups__in=property_groups) | Q(property_groups__count=0)\n+        ).distinct()\n+        \n+        # Verify the queryset works without error\n+        self.assertTrue(result.exists())\n+\n+    def test_subquery_in_group_by_with_values_list(self):\n+        property_group_ids = PropertyGroup.objects.filter(agent=self.agent).values_list(\"id\", flat=True)\n+        queryset = Agent.objects.annotate(Count(\"property_groups\"))\n+        result = queryset.filter(\n+            Q(property_groups__id__in=property_group_ids) | Q(property_groups__count=0)\n+        ).distinct()\n+        \n+        # Verify the queryset works without error\n+        self.assertTrue(result.exists())\n     def test_ticket_21150(self):\n         b = Bravo.objects.create()\n         c = Charlie.objects.create(bravo=b)\n",
  "django__django-14373": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 2f7c68b..9a0fc8f 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -179,7 +179,20 @@ class DateFormatTests(SimpleTestCase):\n                     expected_date,\n                 )\n \n-    def test_twelve_hour_format(self):\n+    def test_y_format_year_before_1000(self):\n+        self.assertEqual(dateformat.format(datetime(1, 1, 1), 'Y'), '0001')\n+        self.assertEqual(dateformat.format(datetime(999, 1, 1), 'Y'), '0999')\n+    \n+    def test_Y_format_year_with_different_cases(self):\n+        # Test the year 0; although not valid, we want to see handling.\n+        with self.assertRaises(ValueError):  # Expecting ValueError for invalid date\n+            dateformat.format(datetime(0, 1, 1), 'Y')\n+        \n+        # Year exactly 1000\n+        self.assertEqual(dateformat.format(datetime(1000, 1, 1), 'Y'), '1000')\n+        \n+        # Year greater than 1000\n+        self.assertEqual(dateformat.format(datetime(2023, 1, 1), 'Y'), '2023')\n         tests = [\n             (0, '12'),\n             (1, '1'),\n",
  "django__django-14376": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\nindex 643c2b6..d10dabe 100644\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -38,6 +38,70 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_deprecated_and_preferred_keys(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        \n+        # Testing with both deprecated ('db', 'passwd') and preferred ('database', 'password') keys\n+        for keys in [('database', 'password'), ('db', 'passwd')]:\n+            with self.subTest(keys=keys):\n+                database, password = keys\n+                expected_args = [\n+                    'mysql',\n+                    '--user=optionuser',\n+                    '--host=optionhost',\n+                    '--port=%s' % options_port,\n+                    'optiondbname',\n+                ]\n+                expected_env = {'MYSQL_PWD': 'optionpassword'}\n+                self.assertEqual(\n+                    self.settings_to_cmd_args_env({\n+                        'NAME': 'settingdbname',\n+                        'USER': 'settinguser',\n+                        'PASSWORD': 'settingpassword',\n+                        'HOST': 'settinghost',\n+                        'PORT': settings_port,\n+                        'OPTIONS': {\n+                            database: 'optiondbname',\n+                            'user': 'optionuser',\n+                            password: 'optionpassword',\n+                            'host': 'optionhost',\n+                            'port': options_port,\n+                        },\n+                    }),\n+                    (expected_args, expected_env),\n+                )\n+\n+    def test_options_non_deprecated_keys_preferred(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'db': 'deprecatedoptiondbname',\n+                    'password': 'optionpassword',\n+                    'passwd': 'deprecatedoptionpassword',\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n     def test_options_override_settings_proper_values(self):\n         settings_port = 444\n         options_port = 555\n@@ -68,6 +132,70 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_deprecated_and_preferred_keys(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        \n+        # Testing with both deprecated ('db', 'passwd') and preferred ('database', 'password') keys\n+        for keys in [('database', 'password'), ('db', 'passwd')]:\n+            with self.subTest(keys=keys):\n+                database, password = keys\n+                expected_args = [\n+                    'mysql',\n+                    '--user=optionuser',\n+                    '--host=optionhost',\n+                    '--port=%s' % options_port,\n+                    'optiondbname',\n+                ]\n+                expected_env = {'MYSQL_PWD': 'optionpassword'}\n+                self.assertEqual(\n+                    self.settings_to_cmd_args_env({\n+                        'NAME': 'settingdbname',\n+                        'USER': 'settinguser',\n+                        'PASSWORD': 'settingpassword',\n+                        'HOST': 'settinghost',\n+                        'PORT': settings_port,\n+                        'OPTIONS': {\n+                            database: 'optiondbname',\n+                            'user': 'optionuser',\n+                            password: 'optionpassword',\n+                            'host': 'optionhost',\n+                            'port': options_port,\n+                        },\n+                    }),\n+                    (expected_args, expected_env),\n+                )\n+\n+    def test_options_non_deprecated_keys_preferred(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'db': 'deprecatedoptiondbname',\n+                    'password': 'optionpassword',\n+                    'passwd': 'deprecatedoptionpassword',\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n     def test_options_password(self):\n         expected_args = [\n             'mysql',\n@@ -89,6 +217,70 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_deprecated_and_preferred_keys(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        \n+        # Testing with both deprecated ('db', 'passwd') and preferred ('database', 'password') keys\n+        for keys in [('database', 'password'), ('db', 'passwd')]:\n+            with self.subTest(keys=keys):\n+                database, password = keys\n+                expected_args = [\n+                    'mysql',\n+                    '--user=optionuser',\n+                    '--host=optionhost',\n+                    '--port=%s' % options_port,\n+                    'optiondbname',\n+                ]\n+                expected_env = {'MYSQL_PWD': 'optionpassword'}\n+                self.assertEqual(\n+                    self.settings_to_cmd_args_env({\n+                        'NAME': 'settingdbname',\n+                        'USER': 'settinguser',\n+                        'PASSWORD': 'settingpassword',\n+                        'HOST': 'settinghost',\n+                        'PORT': settings_port,\n+                        'OPTIONS': {\n+                            database: 'optiondbname',\n+                            'user': 'optionuser',\n+                            password: 'optionpassword',\n+                            'host': 'optionhost',\n+                            'port': options_port,\n+                        },\n+                    }),\n+                    (expected_args, expected_env),\n+                )\n+\n+    def test_options_non_deprecated_keys_preferred(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'db': 'deprecatedoptiondbname',\n+                    'password': 'optionpassword',\n+                    'passwd': 'deprecatedoptionpassword',\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n     def test_options_charset(self):\n         expected_args = [\n             'mysql',\n",
  "django__django-14434": "",
  "django__django-14493": "",
  "django__django-14500": "",
  "django__django-14539": "",
  "django__django-14559": "",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..28a108c 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -337,6 +337,11 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at most 1 form.'])\n+        # Check for nonform CSS class presence\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at most 1 form.</li></ul>'\n+        )\n \n     def test_formset_validate_min_flag(self):\n         \"\"\"\n@@ -359,6 +364,11 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])\n+        # Check for nonform CSS class presence\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at least 3 forms.</li></ul>'\n+        )\n \n     def test_formset_validate_min_unchanged_forms(self):\n         \"\"\"\n@@ -983,6 +993,11 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = FavoriteDrinksFormSet(data, prefix='drinks')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n+        # Check for nonform CSS class presence\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>'\n+        )\n \n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n",
  "django__django-14631": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex a48e4b6..c40311a 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -2129,7 +2129,30 @@ Password: <input type=\"password\" name=\"password\" required></li>\n         form = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n         self.assertEqual(form.changed_data, [])\n \n-    def test_help_text(self):\n+    def test_datetime_clean_initial_callable_disabled_bound_field_consistency(self):\n+        now = datetime.datetime(2006, 10, 25, 14, 30, 45, 123456)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now, disabled=True)\n+\n+        form = DateTimeForm({})\n+        # Check if cleaned data matches the BoundField's initial value for a disabled field\n+        cleaned = form.cleaned_data['dt']\n+        bf = form['dt']\n+        self.assertEqual(cleaned, bf.initial)\n+\n+    def test_changed_data_with_callable_initial(self):\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: datetime.datetime(2006, 10, 25, 14, 30, 45, 123456))\n+\n+        form_same = DateTimeForm({'dt': '2006-10-25 14:30:45.123456'})\n+        form_changed = DateTimeForm({'dt': '2006-10-25 14:30:46.123456'})\n+\n+        # No change as the supplied data matches the initial value\n+        self.assertEqual(form_same.changed_data, [])\n+\n+        # Change detected as the supplied data differs from the initial value\n+        self.assertEqual(form_changed.changed_data, ['dt'])\n         # You can specify descriptive text for a field by using the 'help_text' argument)\n         class UserRegistration(Form):\n             username = CharField(max_length=10, help_text='e.g., user@example.com')\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..6682a4c 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -3,7 +3,8 @@ from operator import attrgetter\n \n from django.db import IntegrityError\n from django.test import TestCase\n-\n+from django.db import models\n+from django.core.checks import Error\n from .models import (\n     CustomMembership, Employee, Event, Friendship, Group, Ingredient,\n     Invitation, Membership, Person, PersonSelfRefM2M, Recipe, RecipeIngredient,\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..e5d2e40 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,3 +1,42 @@\n+\n+class AutocompleteJsonSerializeResultView(AutocompleteJsonView):\n+    def serialize_result(self, obj, to_field_name):\n+        return {\n+            **super().serialize_result(obj, to_field_name),\n+            'posted': str(obj.posted),\n+        }\n+\n+class AutocompleteJsonViewTests(TestCase):\n+    factory = RequestFactory()\n+    url = '/autocomplete/'  # Update with the correct URL for your test\n+    opts = {'app_label': 'your_app', 'model_name': 'question', 'field_name': 'your_field'}\n+    as_view_args = {'admin_site': 'default'}  # Adjust as needed\n+\n+    def setUp(self):\n+        self.superuser = User.objects.create_superuser(\n+            username='super', password='secret', email='super@example.com',\n+        )\n+        self.question1 = Question.objects.create(\n+            question='Question 1', posted=datetime.date(2021, 8, 9)\n+        )\n+        self.question2 = Question.objects.create(\n+            question='Question 2', posted=datetime.date(2021, 8, 7)\n+        )\n+\n+    def test_serialize_result(self):\n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+        request.user = self.superuser\n+        response = AutocompleteJsonSerializeResultView.as_view(**self.as_view_args)(request)\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': [\n+                {'id': str(q.pk), 'text': q.question, 'posted': str(q.posted)}\n+                for q in Question.objects.order_by('-posted')\n+            ],\n+            'pagination': {'more': False},\n+        })\n+\n import json\n from contextlib import contextmanager\n \n@@ -8,7 +47,8 @@ from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n from django.core.exceptions import PermissionDenied\n from django.http import Http404\n-from django.test import RequestFactory, override_settings\n+from django.test import RequestFactory, TestCase, override_settings\n+import datetime\n from django.urls import reverse, reverse_lazy\n \n from .admin import AnswerAdmin, QuestionAdmin\n",
  "django__django-14765": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 11009e5..41f4912 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -916,6 +916,31 @@ class StateTests(SimpleTestCase):\n             project_state.apps\n \n         # If we include the real app it should succeed\n+\n+    def test_real_apps_non_set(self):\n+        \"\"\"\n+        Test that an AssertionError is raised if real_apps is not a set.\n+        \"\"\"\n+        with self.assertRaises(AssertionError):\n+            ProjectState(real_apps=['contenttypes'])\n+\n+    def test_real_apps_none(self):\n+        \"\"\"\n+        Test that no error is raised if real_apps is None.\n+        \"\"\"\n+        try:\n+            ProjectState(real_apps=None)\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError unexpectedly with real_apps=None\")\n+\n+    def test_real_apps_set(self):\n+        \"\"\"\n+        Test that no error is raised if real_apps is a set.\n+        \"\"\"\n+        try:\n+            ProjectState(real_apps={'contenttypes'})\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError unexpectedly with real_apps as a set\")\n         project_state = ProjectState(real_apps={'contenttypes'})\n         project_state.add_model(ModelState.from_model(TestModel))\n         rendered_state = project_state.apps\n",
  "django__django-14771": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 1875424..d597faa 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -195,7 +195,29 @@ class TestChildArguments(SimpleTestCase):\n         )\n \n     @mock.patch('__main__.__spec__', None)\n+    @mock.patch('sys._xoptions', {'utf8': True})\n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver'],\n+        )\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions_with_spec(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', __file__, 'runserver'],\n+        )\n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver'],\n+        )\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n         self.assertEqual(\n@@ -204,6 +226,21 @@ class TestChildArguments(SimpleTestCase):\n         )\n \n     @mock.patch('__main__.__spec__', None)\n+    @mock.patch('sys._xoptions', {'utf8': True})\n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver'],\n+        )\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions_with_spec(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', __file__, 'runserver'],\n+        )\n     @mock.patch('sys.warnoptions', [])\n     def test_exe_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n@@ -216,6 +253,21 @@ class TestChildArguments(SimpleTestCase):\n                 )\n \n     @mock.patch('__main__.__spec__', None)\n+    @mock.patch('sys._xoptions', {'utf8': True})\n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver'],\n+        )\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions_with_spec(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', __file__, 'runserver'],\n+        )\n     @mock.patch('sys.warnoptions', [])\n     def test_entrypoint_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n@@ -228,6 +280,21 @@ class TestChildArguments(SimpleTestCase):\n                 )\n \n     @mock.patch('__main__.__spec__', None)\n+    @mock.patch('sys._xoptions', {'utf8': True})\n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver'],\n+        )\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions_with_spec(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', __file__, 'runserver'],\n+        )\n     @mock.patch('sys.argv', ['does-not-exist', 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n     def test_raises_runtimeerror(self):\n@@ -235,8 +302,15 @@ class TestChildArguments(SimpleTestCase):\n         with self.assertRaisesMessage(RuntimeError, msg):\n             autoreload.get_child_arguments()\n \n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_xoptions(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver'],\n+        )\n+    @mock.patch('sys.warnoptions', [])\n     def test_module_no_spec(self):\n         module = types.ModuleType('test_module')\n         del module.__spec__\n",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..2cfbd8d 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -199,6 +199,29 @@ class MethodDecoratorTests(SimpleTestCase):\n     \"\"\"\n     Tests for method_decorator\n     \"\"\"\n+    def test_wrapper_assignments(self):\n+        \"\"\"@method_decorator preserves wrapper assignments for function attributes.\"\"\"\n+        func_name = None\n+        func_module = None\n+\n+        def decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_name, func_module\n+                func_name = getattr(func, '__name__', None)\n+                func_module = getattr(func, '__module__', None)\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(decorator)\n+            def method(self):\n+                return 'tests'\n+\n+        Test().method()\n+        self.assertEqual(func_name, 'method')\n+        self.assertIsNotNone(func_module)\n+\n     def test_preserve_signature(self):\n         class Test:\n             @simple_dec_m\n",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..91c0489 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5085,6 +5085,44 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         response = self.client.get(reverse('admin2:auth_user_password_change', args=(su.pk,)))\n         self.assertEqual(response.status_code, 404)\n \n+    def _test_readonly_foreignkey_links(self, admin_site):\n+        \"\"\"\n+        Helper function to test readonly ForeignKey fields for different admin sites.\n+        \"\"\"\n+        chapter = Chapter.objects.create(\n+            title='Testing Chapter',\n+            content='Some Content',\n+            book=Book.objects.create(name='Testing Book'),\n+        )\n+        language = Language.objects.create(iso='XYZ', name='Test Language')\n+        chapter.language = language\n+        chapter.save()\n+\n+        # Retrieve URL for the chapter change form\n+        url = reverse(f'{admin_site}:admin_views_chapter_change', args=(chapter.pk,))\n+        response = self.client.get(url)\n+        self.assertEqual(response.status_code, 200)\n+\n+        # Check the link for the readonly ForeignKey field\n+        language_url = reverse(f'{admin_site}:admin_views_language_change', args=(quote(language.pk),))\n+        self.assertContains(\n+            response,\n+            f'<div class=\"readonly\"><a href=\"{language_url}\">XYZ</a></div>',\n+            html=True\n+        )\n+\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        \"\"\"\n+        Test ForeignKey readonly links in the default admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('admin')\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test ForeignKey readonly links in a custom admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('custom-admin')\n+\n     def test_change_form_renders_correct_null_choice_value(self):\n         \"\"\"\n         Regression test for #17911.\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..7b7b80a 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,10 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n+import json  # Ensure JSON is imported as it's used in the test\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..5167bca 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -793,6 +793,50 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n \n+    def test_rename_model_with_db_table_noop_postgres(self):\n+        app_label = 'test_rmwdbtn_pg'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n+    def test_rename_model_with_db_table_noop_sqlite(self):\n+        app_label = 'test_rmwdbtn_sqlite'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n     def test_rename_m2m_target_model(self):\n         app_label = \"test_rename_m2m_target_model\"\n         project_state = self.apply_operations(app_label, ProjectState(), operations=[\n",
  "django__django-15022": "",
  "django__django-15037": "diff --git a/tests/inspectdb/tests.py b/tests/inspectdb/tests.py\nindex 19402bb..cafd452 100644\n--- a/tests/inspectdb/tests.py\n+++ b/tests/inspectdb/tests.py\n@@ -195,15 +195,48 @@ class InspectDBTestCase(TestCase):\n             \"from_field = models.ForeignKey('InspectdbPeople', models.DO_NOTHING, db_column='from_id')\",\n             output,\n         )\n+\n+    @skipUnlessDBFeature('can_introspect_foreign_keys')\n+    def test_inspectdb_foreign_key_to_specific_field(self):\n+        \"\"\"Test foreign key introspection when referencing a specific field.\"\"\"\n+        out = StringIO()\n+        call_command('inspectdb', 'inspectdb_foreignkeytofield', stdout=out)\n+        output = out.getvalue()\n+        self.assertIn(\n+            \"to_field_fk = models.ForeignKey('InspectdbPeoplemoredata', models.CASCADE, to_field='people_unique')\",\n+            output,\n+        )\n         self.assertIn(\n             'people_pk = models.OneToOneField(InspectdbPeople, models.DO_NOTHING, primary_key=True)',\n             output,\n         )\n+\n+    @skipUnlessDBFeature('can_introspect_foreign_keys')\n+    def test_inspectdb_foreign_key_to_specific_field(self):\n+        \"\"\"Test foreign key introspection when referencing a specific field.\"\"\"\n+        out = StringIO()\n+        call_command('inspectdb', 'inspectdb_foreignkeytofield', stdout=out)\n+        output = out.getvalue()\n+        self.assertIn(\n+            \"to_field_fk = models.ForeignKey('InspectdbPeoplemoredata', models.CASCADE, to_field='people_unique')\",\n+            output,\n+        )\n         self.assertIn(\n             'people_unique = models.OneToOneField(InspectdbPeople, models.DO_NOTHING)',\n             output,\n         )\n \n+    @skipUnlessDBFeature('can_introspect_foreign_keys')\n+    def test_inspectdb_foreign_key_to_specific_field(self):\n+        \"\"\"Test foreign key introspection when referencing a specific field.\"\"\"\n+        out = StringIO()\n+        call_command('inspectdb', 'inspectdb_foreignkeytofield', stdout=out)\n+        output = out.getvalue()\n+        self.assertIn(\n+            \"to_field_fk = models.ForeignKey('InspectdbPeoplemoredata', models.CASCADE, to_field='people_unique')\",\n+            output,\n+        )\n+\n     def test_digits_column_name_introspection(self):\n         \"\"\"Introspection of column names consist/start with digits (#16536/#17676)\"\"\"\n         char_field_type = connection.features.introspected_field_types['CharField']\n",
  "django__django-15103": "",
  "django__django-15104": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 04452fa..887b12b 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2834,8 +2834,52 @@ class AutodetectorTests(TestCase):\n                     expected_number,\n                 )\n \n-\n-class MigrationSuggestNameTests(SimpleTestCase):\n+class MigrationAutodetectorKeyErrorTests(SimpleTestCase):\n+    def test_add_custom_fk_with_hardcoded_to(self):\n+        class HardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.Author'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']\n+                return name, path, args, kwargs\n+\n+        book_hardcoded_fk_to = ModelState('testapp', 'Book', [\n+            ('author', HardcodedForeignKey(on_delete=models.CASCADE)),\n+        ])\n+        changes = self.get_changes(\n+            [self.author_empty],\n+            [self.author_empty, book_hardcoded_fk_to],\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='Book')\n+\n+    def test_migration_autodetector_with_custom_fk(self):\n+        class HardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.HardcodedModel'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs[\"to\"]\n+                return name, path, args, kwargs\n+\n+        before = ProjectState()\n+        before.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after = ProjectState()\n+        after.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after.add_model(ModelState('testapp', 'TestModel', [('custom', HardcodedForeignKey(on_delete=models.CASCADE))]))\n+        \n+        autodetector = MigrationAutodetector(before, after)\n+        changes = autodetector._detect_changes()\n+        self.assertIn('testapp', changes)\n+        self.assertEqual(len(changes['testapp']), 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='TestModel')\n     def test_no_operations(self):\n         class Migration(migrations.Migration):\n             operations = []\n",
  "django__django-15127": "diff --git a/tests/messages_tests/base.py b/tests/messages_tests/base.py\nindex 85a7769..8348793 100644\n--- a/tests/messages_tests/base.py\n+++ b/tests/messages_tests/base.py\n@@ -1,3 +1,4 @@\n+\n from django.contrib.messages import constants, get_level, set_level, utils\n from django.contrib.messages.api import MessageFailure\n from django.contrib.messages.constants import DEFAULT_LEVELS\n@@ -368,6 +369,47 @@ class BaseTests:\n         tags = [msg.level_tag for msg in storage]\n         self.assertEqual(tags, ['info', '', 'debug', 'warning', 'error', 'success'])\n \n+    @override_settings_tags(MESSAGE_TAGS={\n+        constants.INFO: 'info',\n+        constants.DEBUG: '',\n+        constants.WARNING: '',\n+        constants.ERROR: 'bad',\n+        29: 'custom',\n+    })\n+    def test_custom_tags(self):\n+        storage = self.get_storage()\n+        storage.level = 0\n+        add_level_messages(storage)\n+        tags = [msg.level_tag for msg in storage]\n+        self.assertEqual(tags, ['info', '', 'debug', 'warning', 'bad', 'success', 'custom'])\n+\n+    def test_override_settings_level_tags(self):\n+        with override_settings(MESSAGE_TAGS={\n+            constants.INFO: 'info',\n+            constants.DEBUG: '',\n+            constants.WARNING: '',\n+            constants.ERROR: 'bad',\n+            constants.SUCCESS: '',\n+            12: 'custom',\n+        }):\n+            # Ensure that LEVEL_TAGS is updated properly\n+            self.assertEqual(base.LEVEL_TAGS, {\n+                constants.INFO: 'info',\n+                constants.DEBUG: '',\n+                constants.WARNING: '',\n+                constants.ERROR: 'bad',\n+                constants.SUCCESS: '',\n+                12: 'custom',\n+            })\n+        self.assertEqual(tags, ['info', '', 'extra-tag debug', 'warning', 'error', 'success', 'info'])\n+\n+    def test_level_tag(self):\n+        storage = self.get_storage()\n+        storage.level = 0\n+        add_level_messages(storage)\n+        tags = [msg.level_tag for msg in storage]\n+        self.assertEqual(tags, ['info', '', 'debug', 'warning', 'error', 'success'])\n+\n     @override_settings_tags(MESSAGE_TAGS={\n         constants.INFO: 'info',\n         constants.DEBUG: '',\n",
  "django__django-15128": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex adde8a6..7bef797 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -30,7 +30,7 @@ from .models import (\n     SharedConnection, SimpleCategory, SingleObject, SpecialCategory, Staff,\n     StaffUser, Student, Tag, Task, Teacher, Ticket21203Child,\n     Ticket21203Parent, Ticket23605A, Ticket23605B, Ticket23605C, TvChef, Valid,\n-    X,\n+    BaseUser, Task, X,\n )\n \n \n@@ -2095,13 +2095,77 @@ class QuerySetBitwiseOperationTests(TestCase):\n         cls.room_3 = Classroom.objects.create(school=cls.school, has_blackboard=True, name='Room 3')\n         cls.room_4 = Classroom.objects.create(school=cls.school, has_blackboard=False, name='Room 4')\n \n-    @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n+    def test_conflicting_aliases_during_combine(self):\n+        tag = Tag.objects.create()\n+        annotation_1 = Annotation.objects.create(tag=tag)\n+        annotation_2 = Annotation.objects.create(tag=tag)\n+        note = annotation_1.notes.create(tag=tag)\n+        base_user_1 = BaseUser.objects.create(annotation=annotation_1)\n+        base_user_2 = BaseUser.objects.create(annotation=annotation_2)\n+        task = Task.objects.create(\n+            owner=base_user_2, creator=base_user_2, note=note,\n+        )\n+        qs1 = annotation_1.baseuser_set.all()\n+        qs2 = BaseUser.objects.filter(\n+            Q(owner__note__in=annotation_1.notes.all()) |\n+            Q(creator__note__in=annotation_1.notes.all())\n+        )\n+        self.assertSequenceEqual(qs1, [base_user_1])\n+        self.assertSequenceEqual(qs2, [base_user_2])\n+        self.assertCountEqual(qs2 | qs1, qs1 | qs2)\n+        self.assertCountEqual(qs2 | qs1, [base_user_1, base_user_2])\n+\n+    def test_alias_ordering(self):\n+        # Additional test case to verify alias ordering doesn't affect results\n+        user_1 = BaseUser.objects.create()\n+        user_2 = BaseUser.objects.create()\n+        task_1 = Task.objects.create(owner=user_1, creator=user_2)\n+        task_2 = Task.objects.create(owner=user_2, creator=user_1)\n+        \n+        qs1 = Task.objects.filter(owner=user_1)\n+        qs2 = Task.objects.filter(creator=user_1)\n+        \n+        # Ensure the results are the same regardless of the order of qs1 and qs2\n+        self.assertCountEqual(qs1 | qs2, qs2 | qs1)\n+        self.assertCountEqual(qs1 | qs2, [task_1, task_2])\n     def test_or_with_rhs_slice(self):\n         qs1 = Classroom.objects.filter(has_blackboard=True)\n         qs2 = Classroom.objects.filter(has_blackboard=False)[:1]\n         self.assertCountEqual(qs1 | qs2, [self.room_1, self.room_2, self.room_3])\n \n-    @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n+    def test_conflicting_aliases_during_combine(self):\n+        tag = Tag.objects.create()\n+        annotation_1 = Annotation.objects.create(tag=tag)\n+        annotation_2 = Annotation.objects.create(tag=tag)\n+        note = annotation_1.notes.create(tag=tag)\n+        base_user_1 = BaseUser.objects.create(annotation=annotation_1)\n+        base_user_2 = BaseUser.objects.create(annotation=annotation_2)\n+        task = Task.objects.create(\n+            owner=base_user_2, creator=base_user_2, note=note,\n+        )\n+        qs1 = annotation_1.baseuser_set.all()\n+        qs2 = BaseUser.objects.filter(\n+            Q(owner__note__in=annotation_1.notes.all()) |\n+            Q(creator__note__in=annotation_1.notes.all())\n+        )\n+        self.assertSequenceEqual(qs1, [base_user_1])\n+        self.assertSequenceEqual(qs2, [base_user_2])\n+        self.assertCountEqual(qs2 | qs1, qs1 | qs2)\n+        self.assertCountEqual(qs2 | qs1, [base_user_1, base_user_2])\n+\n+    def test_alias_ordering(self):\n+        # Additional test case to verify alias ordering doesn't affect results\n+        user_1 = BaseUser.objects.create()\n+        user_2 = BaseUser.objects.create()\n+        task_1 = Task.objects.create(owner=user_1, creator=user_2)\n+        task_2 = Task.objects.create(owner=user_2, creator=user_1)\n+        \n+        qs1 = Task.objects.filter(owner=user_1)\n+        qs2 = Task.objects.filter(creator=user_1)\n+        \n+        # Ensure the results are the same regardless of the order of qs1 and qs2\n+        self.assertCountEqual(qs1 | qs2, qs2 | qs1)\n+        self.assertCountEqual(qs1 | qs2, [task_1, task_2])\n     def test_or_with_lhs_slice(self):\n         qs1 = Classroom.objects.filter(has_blackboard=True)[:1]\n         qs2 = Classroom.objects.filter(has_blackboard=False)\n",
  "django__django-15161": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 5fdccc5..0bf42c1 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1767,6 +1767,13 @@ class ValueTests(TestCase):\n         self.assertEqual(args, (value.value,))\n         self.assertEqual(kwargs, {})\n \n+    def test_deconstruct_F(self):\n+        f = F('field_name')\n+        path, args, kwargs = f.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, ('field_name',))\n+        self.assertEqual(kwargs, {})\n+\n     def test_deconstruct_output_field(self):\n         value = Value('name', output_field=CharField())\n         path, args, kwargs = value.deconstruct()\n",
  "django__django-15268": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a6c0858..51cf63e 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1731,6 +1731,29 @@ class AutodetectorTests(TestCase):\n             index_together={('name',), ('age',)},\n         )\n \n+    def test_optimization_of_foo_together(self):\n+        \"\"\"\n+        Test that multiple AlterFooTogether operations are optimized into a single operation.\n+        \"\"\"\n+        changes = self.get_changes(\n+            [self.author_empty, self.book_foo_together],\n+            [self.author_empty, self.book_foo_together_optimization]\n+        )\n+        # Ensure only one set of AlterFooTogether operations are present.\n+        self.assertNumberMigrations(changes, \"otherapp\", 1)\n+        self.assertOperationTypes(changes, 'otherapp', 0, [\n+            'AlterUniqueTogether', \n+            'AlterIndexTogether'\n+        ])\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 0, name='book',\n+            unique_together={('title', 'author')},\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 1, name='book',\n+            index_together={('title', 'author')},\n+        )\n+\n     def test_rename_field_and_foo_together(self):\n         \"\"\"Fields are renamed before updating index/unique_together.\"\"\"\n         changes = self.get_changes(\n",
  "django__django-15277": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 11f86ed..28f6c3e 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1847,6 +1847,34 @@ class ValueTests(TestCase):\n                 expr = Value(value)\n                 self.assertIsInstance(expr.output_field, output_field_type)\n \n+    def test_output_field_does_not_create_broken_validators(self):\n+        \"\"\"\n+        The output field for a given Value doesn't get cleaned & validated,\n+        however validators may still be instantiated for a given field type\n+        and this demonstrates that they don't throw an exception.\n+        \"\"\"\n+        import datetime\n+        from decimal import Decimal\n+        import uuid\n+\n+        value_types = [\n+            'str',\n+            True,\n+            42,\n+            3.14,\n+            datetime.date(2019, 5, 15),\n+            datetime.datetime(2019, 5, 15),\n+            datetime.time(3, 16),\n+            datetime.timedelta(1),\n+            Decimal('3.14'),\n+            b'',\n+            uuid.uuid4(),\n+        ]\n+        for value in value_types:\n+            with self.subTest(type=type(value)):\n+                field = Value(value)._resolve_output_field()\n+                field.clean(value, model_instance=None)\n+\n     def test_resolve_output_field_failure(self):\n         msg = 'Cannot resolve expression type, unknown output_field'\n         with self.assertRaisesMessage(FieldError, msg):\n",
  "django__django-15278": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex dd02aee..846ac25 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -631,7 +631,28 @@ class SchemaTests(TransactionTestCase):\n         # Create the table\n         with connection.schema_editor() as editor:\n             editor.create_model(Author)\n-        # Add the new field\n+        \n+    def test_add_field_o2o_nullable(self):\n+        \"\"\"\n+        Test adding a nullable OneToOneField to a model on SQLite.\n+        \"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        \n+        # Define the OneToOneField which is nullable\n+        new_field = OneToOneField(Note, on_delete=CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+        \n+        # Attempt to add the field using schema editor\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n+        \n+        # Check if the field was added correctly\n+        columns = self.column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        # Check if the field allows null values\n+        self.assertTrue(columns['note_id'][1][6])\n         new_field = BinaryField(blank=True)\n         new_field.set_attributes_from_name(\"bits\")\n         with connection.schema_editor() as editor:\n",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..24fcd03 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -74,7 +74,25 @@ class BasicFieldTests(SimpleTestCase):\n         form_field = field.formfield(disabled=True)\n         self.assertIs(form_field.disabled, True)\n \n-    def test_field_str(self):\n+    def test_hash_immutability(self):\n+        field = models.IntegerField()\n+        field_hash = hash(field)\n+\n+        class MyModel(models.Model):\n+            rank = field\n+\n+        self.assertEqual(field_hash, hash(field))\n+\n+    def test_hash_immutability_after_assignment(self):\n+        field = models.CharField(max_length=200)\n+        field_hash = hash(field)\n+        field_dict = {field: 'test_value'}\n+\n+        class Book(models.Model):\n+            title = field\n+\n+        self.assertEqual(field_hash, hash(field))\n+        self.assertIn(field, field_dict)\n         f = models.Field()\n         self.assertEqual(str(f), '<django.db.models.fields.Field>')\n         f = Foo._meta.get_field('a')\n",
  "django__django-15368": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex 447c150..028cb3d 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -204,14 +204,32 @@ class BulkUpdateTests(TestCase):\n             [cat.special_name for cat in special_categories]\n         )\n \n-    def test_field_references(self):\n+    def test_f_expression(self):\n+        # Create some Note instances for testing\n+        notes = [\n+            Note.objects.create(note='test_note', misc='test_misc')\n+            for _ in range(10)\n+        ]\n+        # Update 'misc' field to reference 'note' field using F expression\n+        for note in notes:\n+            note.misc = F('note')\n+        Note.objects.bulk_update(notes, ['misc'])\n+        # Verify that 'misc' field now contains the value of 'note' field\n+        self.assertCountEqual(Note.objects.filter(misc='test_note'), notes)\n         numbers = [Number.objects.create(num=0) for _ in range(10)]\n         for number in numbers:\n             number.num = F('num') + 1\n         Number.objects.bulk_update(numbers, ['num'])\n         self.assertCountEqual(Number.objects.filter(num=1), numbers)\n \n-    def test_booleanfield(self):\n+    def test_f_expression_with_different_field_types(self):\n+        # Test with a different model and fields\n+        individuals = [Individual.objects.create(age=20, name=\"John Doe\") for _ in range(10)]\n+        for individual in individuals:\n+            individual.age = F('age') + 1\n+        Individual.objects.bulk_update(individuals, ['age'])\n+        # Check if the age field was incremented by 1\n+        self.assertCountEqual(Individual.objects.filter(age=21), individuals)\n         individuals = [Individual.objects.create(alive=False) for _ in range(10)]\n         for individual in individuals:\n             individual.alive = True\n",
  "django__django-15380": "",
  "django__django-15382": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex bd890ac..af5ae2a 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1906,6 +1906,10 @@ class ExistsTests(TestCase):\n         self.assertNotIn('ORDER BY', captured_sql)\n \n \n+from django.db.models import Q, Exists\n+from django.test import TestCase\n+from .models import Manager\n+\n class FieldTransformTests(TestCase):\n \n     @classmethod\n",
  "django__django-15467": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex f5af59b..3749d02 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -28,6 +28,8 @@ from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n \n+from django.contrib import admin\n+from django.db.models import ForeignKey\n from .models import (\n     Advisor,\n     Album,\n@@ -141,7 +143,18 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n         )\n         self.assertIsNone(ff.empty_label)\n \n-    def test_many_to_many(self):\n+    def test_radio_fields_foreignkey_formfield_overrides_empty_label(self):\n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {\"main_band\": admin.VERTICAL}\n+\n+            def formfield_for_foreignkey(self, db_field, *args, **kwargs):\n+                if db_field.name == \"main_band\":\n+                    kwargs[\"empty_label\"] = \"Custom empty label\"\n+                return super().formfield_for_foreignkey(db_field, *args, **kwargs)\n+\n+        ma = MyModelAdmin(Event, admin.site)\n+        ff = ma.formfield_for_dbfield(Event._meta.get_field(\"main_band\"), request=None)\n+        self.assertEqual(ff.empty_label, \"Custom empty label\")\n         self.assertFormfield(Band, \"members\", forms.SelectMultiple)\n \n     def test_raw_id_many_to_many(self):\n",
  "django__django-15499": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 5df1b06..2ada907 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -129,6 +129,47 @@ class OptimizerTests(SimpleTestCase):\n             ],\n         )\n \n+    def test_create_model_with_no_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Foo\", fields=[]),\n+                migrations.AlterModelManagers(name=\"Foo\", managers=[]),\n+            ],\n+            [\n+                migrations.CreateModel(\"Foo\", fields=[]),\n+            ],\n+        )\n+\n+    def test_create_model_with_additional_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    managers=[\n+                        (\"default_manager\", models.Manager()),\n+                    ],\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Bar\",\n+                    managers=[\n+                        (\"default_manager\", models.Manager()),\n+                        (\"extra_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    managers=[\n+                        (\"default_manager\", models.Manager()),\n+                        (\"extra_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n     def test_create_model_and_remove_model_options(self):\n         self.assertOptimizesTo(\n             [\n@@ -141,6 +182,47 @@ class OptimizerTests(SimpleTestCase):\n             ],\n             [migrations.CreateModel(\"MyModel\", fields=[])],\n         )\n+\n+    def test_create_model_with_no_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Foo\", fields=[]),\n+                migrations.AlterModelManagers(name=\"Foo\", managers=[]),\n+            ],\n+            [\n+                migrations.CreateModel(\"Foo\", fields=[]),\n+            ],\n+        )\n+\n+    def test_create_model_with_additional_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    managers=[\n+                        (\"default_manager\", models.Manager()),\n+                    ],\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Bar\",\n+                    managers=[\n+                        (\"default_manager\", models.Manager()),\n+                        (\"extra_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    managers=[\n+                        (\"default_manager\", models.Manager()),\n+                        (\"extra_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n         self.assertOptimizesTo(\n             [\n                 migrations.CreateModel(\n",
  "django__django-15525": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 3640e99..3306c26 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -791,6 +791,32 @@ class NaturalKeyFixtureTests(TestCase):\n         )\n \n \n+class NaturalKeyFixtureOnOtherDatabaseTests(TestCase):\n+    databases = {\"default\", \"other\"}\n+\n+    def setUp(self):\n+        # Clear the database before each test\n+        Author.objects.all().delete()\n+        Book.objects.all().delete()\n+\n+    def test_loaddata_works_with_natural_keys_on_nondefault_db(self):\n+        \"\"\"Test loaddata works when using natural keys on a non-default database.\"\"\"\n+        management.call_command(\n+            \"loaddata\",\n+            \"books.json\",\n+            database=\"other\",\n+            verbosity=0,\n+        )\n+        author = Author.objects.using(\"other\").get()\n+        book = Book.objects.using(\"other\").get()\n+        self.assertEqual(author.name, \"JR Tolkien\")\n+        self.assertEqual(book.title, \"The Ring\")\n+        self.assertEqual(book.author.name, \"JR Tolkien\")\n+\n+from django.test import TestCase\n+from django.core import management\n+from fixtures_regress.models import Author, Book\n+\n class M2MNaturalKeyFixtureTests(TestCase):\n     \"\"\"Tests for ticket #14426.\"\"\"\n \n",
  "django__django-15561": "",
  "django__django-15569": "diff --git a/tests/custom_lookups/tests.py b/tests/custom_lookups/tests.py\nindex 74c331a..d19e6e1 100644\n--- a/tests/custom_lookups/tests.py\n+++ b/tests/custom_lookups/tests.py\n@@ -324,6 +324,27 @@ class LookupTests(TestCase):\n             # getting the lookups again should re-cache\n             self.assertIn(\"exactly\", field.get_lookups())\n \n+    def test_unregister_lookup_clears_cache(self):\n+        field = Article._meta.get_field(\"author\")\n+\n+        # Register a lookup and verify it's in the cache\n+        with register_lookup(models.ForeignObject, Exactly):\n+            self.assertIn(\"exactly\", field.get_lookups())\n+\n+        # Unregister the lookup and verify cache is cleared\n+        models.ForeignObject._unregister_lookup(Exactly)\n+        self.assertNotIn(\"exactly\", field.get_lookups())\n+        field = Article._meta.get_field(\"author\")\n+\n+        # clear and re-cache\n+        field.get_lookups.cache_clear()\n+        self.assertNotIn(\"exactly\", field.get_lookups())\n+\n+        # registration should bust the cache\n+        with register_lookup(models.ForeignObject, Exactly):\n+            # getting the lookups again should re-cache\n+            self.assertIn(\"exactly\", field.get_lookups())\n+\n \n class BilateralTransformTests(TestCase):\n     def test_bilateral_upper(self):\n",
  "django__django-15572": "",
  "django__django-15731": "diff --git a/tests/basic/tests.py b/tests/basic/tests.py\nindex 902f114..95bbdb0 100644\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -1,3 +1,4 @@\n+\n import threading\n from datetime import datetime, timedelta\n from unittest import mock\n@@ -5,6 +6,8 @@ from unittest import mock\n from django.core.exceptions import MultipleObjectsReturned, ObjectDoesNotExist\n from django.db import DEFAULT_DB_ALIAS, DatabaseError, connections, models\n from django.db.models.manager import BaseManager\n+import inspect\n+from django.db import models\n from django.db.models.query import MAX_GET_RESULTS, EmptyQuerySet\n from django.test import (\n     SimpleTestCase,\n@@ -737,6 +740,44 @@ class ManagerTest(SimpleTestCase):\n         )\n \n \n+class ManagerMethodSignatureTests(TestCase):\n+    def test_manager_method_attributes(self):\n+        self.assertEqual(Article.objects.get.__doc__, models.QuerySet.get.__doc__)\n+        self.assertEqual(Article.objects.count.__name__, models.QuerySet.count.__name__)\n+\n+    def test_manager_method_signature(self):\n+        self.assertEqual(\n+            str(inspect.signature(Article.objects.bulk_create)),\n+            \"(objs, batch_size=None, ignore_conflicts=False, update_conflicts=False, \"\n+            \"update_fields=None, unique_fields=None)\",\n+        )\n+\n+    def test_manager_method_signature_partial(self):\n+        # Ensure that inspect.signature correctly identifies partial method signatures\n+        self.assertEqual(\n+            str(inspect.signature(Article.objects.filter)),\n+            \"(*args, **kwargs)\"\n+        )\n+\n+    def test_manager_method_signature_with_custom_method(self):\n+        # Test with a custom queryset method\n+        class CustomQuerySet(models.QuerySet):\n+            def custom_method(self, param):\n+                pass\n+\n+        class CustomManager(models.Manager):\n+            def get_queryset(self):\n+                return CustomQuerySet(self.model, using=self._db)\n+        \n+        class CustomModel(models.Model):\n+            objects = CustomManager()\n+\n+        self.assertEqual(\n+            str(inspect.signature(CustomModel.objects.custom_method)),\n+            \"(param)\"\n+        )\n+\n+\n class SelectOnSaveTests(TestCase):\n     def test_select_on_save(self):\n         a1 = Article.objects.create(pub_date=datetime.now())\n",
  "django__django-15741": "diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex c6dbc53..4bc2878 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -1,6 +1,9 @@\n+\n from datetime import datetime, time\n \n from django.template.defaultfilters import date\n+from django.utils.translation import gettext_lazy as _\n+from django.utils.formats import get_format\n from django.test import SimpleTestCase\n from django.utils import timezone, translation\n \n@@ -74,7 +77,15 @@ class DateTests(TimezoneTestCase):\n \n \n class FunctionTests(SimpleTestCase):\n-    def test_date(self):\n+    def test_get_format_lazy_format(self):\n+        # Testing get_format with a lazy string\n+        self.assertEqual(get_format(_(\"DATE_FORMAT\")), \"N j, Y\")\n+\n+    @setup({\"datelazy\": '{{ t|date:_(\"H:i\") }}'})\n+    def test_date_lazy(self):\n+        # Testing template filter with lazy string\n+        output = self.engine.render_to_string(\"datelazy\", {\"t\": time(0, 0)})\n+        self.assertEqual(output, \"00:00\")\n         self.assertEqual(date(datetime(2005, 12, 29), \"d F Y\"), \"29 December 2005\")\n \n     def test_no_args(self):\n",
  "django__django-15814": "",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..64b761c 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -151,12 +151,24 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ),\n         )\n \n+    def test_parameters_order(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n+        )\n+\n     def test_parameters(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n+    def test_parameters_order(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n+        )\n+\n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n",
  "django__django-15863": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 08f08e1..8e05c68 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -73,8 +73,28 @@ class FunctionTests(SimpleTestCase):\n         self.assertEqual(floatformat(1.5e-15, 20), \"0.00000000000000150000\")\n         self.assertEqual(floatformat(1.5e-15, -20), \"0.00000000000000150000\")\n         self.assertEqual(floatformat(1.00000000000000015, 16), \"1.0000000000000002\")\n-\n-    def test_force_grouping(self):\n+    def test_decimal_precision_issue(self):\n+        # This test checks if floatformat maintains precision for Decimal numbers\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.12345678901234567890\"), 20),\n+            \"42.12345678901234567890\",\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"123456.123456789012345678901\"), 21),\n+            \"123456.123456789012345678901\",\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"0.000000000123456789012345678901\"), 30),\n+            \"0.000000000123456789012345678901\",\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"-99999.999999999999999999999\"), 24),\n+            \"-99999.999999999999999999999\",\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"1.0000000000000000000001\"), 25),\n+            \"1.0000000000000000000001\",\n+        )\n         with translation.override(\"en\"):\n             self.assertEqual(floatformat(10000, \"g\"), \"10,000\")\n             self.assertEqual(floatformat(66666.666, \"1g\"), \"66,666.7\")\n",
  "django__django-15930": "diff --git a/tests/expressions_case/tests.py b/tests/expressions_case/tests.py\nindex 696f4d0..3d9bd7d 100644\n--- a/tests/expressions_case/tests.py\n+++ b/tests/expressions_case/tests.py\n@@ -415,7 +415,17 @@ class CaseExpressionTests(TestCase):\n         self.assertEqual(len(objects), CaseTestModel.objects.count())\n         self.assertTrue(all(obj.selected == \"not selected\" for obj in objects))\n \n-    def test_combined_expression(self):\n+    def test_case_with_negated_empty_q(self):\n+        # Test the scenario described in the issue with ~Q(pk__in=[]) in Case()\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+            )\n+        )\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        # Since ~Q(pk__in=[]) should match all objects, they should all be \"selected\"\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n         self.assertQuerysetEqual(\n             CaseTestModel.objects.annotate(\n                 test=Case(\n",
  "django__django-15987": "",
  "django__django-16032": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex bcf8df9..e4f9e13 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -989,6 +989,30 @@ class NonAggregateAnnotationTestCase(TestCase):\n             publisher_books_qs, [{\"name\": \"Sams\"}, {\"name\": \"Morgan Kaufmann\"}]\n         )\n \n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        self.assertCountEqual(\n+            publisher_books_qs,\n+            [\n+                {\"name\": \"Apress\"},\n+                {\"name\": \"Sams\"},\n+                {\"name\": \"Prentice Hall\"},\n+                {\"name\": \"Morgan Kaufmann\"},\n+            ]\n+        )\n+\n     def test_annotation_exists_aggregate_values_chaining(self):\n         qs = (\n             Book.objects.values(\"publisher\")\n",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..c6202be 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2416,7 +2416,7 @@ class CombinedExpressionTests(SimpleTestCase):\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV, Combinable.MOD]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..0e799f9 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib import admin\n@@ -21,7 +22,10 @@ from django.db.models import F, Field, IntegerField\n from django.db.models.functions import Upper\n from django.db.models.lookups import Contains, Exact\n from django.template import Context, Template, TemplateSyntaxError\n-from django.test import TestCase, override_settings\n+from unittest import mock\n+from django.db import DatabaseError, connection, models\n+from django.test import TestCase, override_settings, skipUnlessDBFeature\n+from django.urls import reverse\n from django.test.client import RequestFactory\n from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup\n from django.urls import reverse\n@@ -400,7 +404,59 @@ class ChangeListTests(TestCase):\n         with self.assertRaises(IncorrectLookupParameters):\n             m.get_changelist_instance(request)\n \n-    def test_custom_paginator(self):\n+    @skipUnlessDBFeature(\"supports_transactions\")\n+    def test_list_editable_atomicity(self):\n+        # Create test data\n+        a = Swallow.objects.create(origin=\"Swallow A\", load=4, speed=1)\n+        b = Swallow.objects.create(origin=\"Swallow B\", load=2, speed=2)\n+\n+        # Log in as a superuser to access the admin\n+        self.client.force_login(self.superuser)\n+\n+        # Define the changelist URL and form data for list_editable case\n+        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n+        data = {\n+            \"form-TOTAL_FORMS\": \"2\",\n+            \"form-INITIAL_FORMS\": \"2\",\n+            \"form-MIN_NUM_FORMS\": \"0\",\n+            \"form-MAX_NUM_FORMS\": \"1000\",\n+            \"form-0-uuid\": str(a.pk),\n+            \"form-1-uuid\": str(b.pk),\n+            \"form-0-load\": \"9.0\",\n+            \"form-0-speed\": \"3.0\",\n+            \"form-1-load\": \"5.0\",\n+            \"form-1-speed\": \"1.0\",\n+            \"_save\": \"Save\",\n+        }\n+\n+        # Simulate a DatabaseError during the log_change call\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\", side_effect=DatabaseError\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Ensure original values are preserved\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+\n+        # Simulate a DatabaseError after the first successful log_change\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\",\n+            side_effect=[None, DatabaseError],\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Ensure original values are preserved\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n         new_parent = Parent.objects.create(name=\"parent\")\n         for i in range(1, 201):\n             Child.objects.create(name=\"name %s\" % i, parent=new_parent)\n",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..baec12e 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2379,6 +2379,45 @@ class MakeMigrationsTests(MigrationTestBase):\n             )\n             self.assertIn(\"operations=[]\" if HAS_BLACK else \"operations=[\\n]\", content)\n \n+    def test_makemigrations_check_no_changes(self):\n+        \"\"\"\n+        makemigrations --check should exit with a zero status when\n+        there are no changes to an app requiring migrations.\n+        \"\"\"\n+        with self.temporary_migration_module(\n+            module=\"migrations.test_migrations_no_changes\"\n+        ):\n+            with self.assertRaises(SystemExit) as cm:\n+                call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+            self.assertEqual(cm.exception.code, 0)\n+\n+    def test_makemigrations_check_with_dry_run(self):\n+        \"\"\"\n+        makemigrations --check --dry-run should exit with a non-zero status\n+        when there are changes to an app requiring migrations and should not\n+        write migration files.\n+        \"\"\"\n+        with self.temporary_migration_module() as tmpdir:\n+            with self.assertRaises(SystemExit) as cm:\n+                call_command(\n+                    \"makemigrations\", \"--check\", \"--dry-run\", \"migrations\", verbosity=0\n+                )\n+            self.assertFalse(os.path.exists(tmpdir))\n+            self.assertEqual(cm.exception.code, 1)\n+\n+    def test_makemigrations_check_no_app(self):\n+        \"\"\"\n+        makemigrations --check should gracefully handle the case where\n+        no app_labels are provided and exit with a zero status if no changes\n+        are detected globally.\n+        \"\"\"\n+        with self.temporary_migration_module(\n+            module=\"migrations.test_migrations_no_changes\"\n+        ):\n+            with self.assertRaises(SystemExit) as cm:\n+                call_command(\"makemigrations\", \"--check\", verbosity=0)\n+            self.assertEqual(cm.exception.code, 0)\n+\n     def test_makemigrations_with_invalid_custom_name(self):\n         msg = \"The migration name must be a valid Python identifier.\"\n         with self.assertRaisesMessage(CommandError, msg):\n",
  "django__django-16136": "diff --git a/tests/async/tests.py b/tests/async/tests.py\nindex 72e103e..c1b2907 100644\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -1,3 +1,4 @@\n+\n import asyncio\n import os\n from unittest import mock\n@@ -6,8 +7,10 @@ from asgiref.sync import async_to_sync\n \n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n-from django.http import HttpResponse\n-from django.test import SimpleTestCase\n+from django.http import HttpResponse, HttpResponseNotAllowed\n+import asyncio\n+from django.test import SimpleTestCase, RequestFactory\n+from django.views import View\n from django.utils.asyncio import async_unsafe\n from django.views.generic.base import View\n \n@@ -119,6 +122,35 @@ class ViewTests(SimpleTestCase):\n \n                 self.assertIsInstance(response, HttpResponse)\n \n+    def test_http_method_not_allowed_responds_correctly(self):\n+        \"\"\"Test that GET request to a View with only async POST method \n+        results in proper HttpResponseNotAllowed instance.\"\"\"\n+        class SyncView(View):\n+            def get(self, request, *args, **kwargs):\n+                return HttpResponse(\"GET\")\n+\n+        class AsyncView(View):\n+            async def post(self, request, *args, **kwargs):\n+                return HttpResponse(\"POST\")\n+\n+        request_factory = RequestFactory()\n+        tests = [\n+            (SyncView, False),\n+            (AsyncView, True),\n+        ]\n+        for view_cls, is_coroutine in tests:\n+            with self.subTest(view_cls=view_cls, is_coroutine=is_coroutine):\n+                instance = view_cls()\n+                response = instance.http_method_not_allowed(request_factory.post(\"/\"))\n+                self.assertIs(\n+                    asyncio.iscoroutine(response),\n+                    is_coroutine,\n+                )\n+                if is_coroutine:\n+                    response = asyncio.run(response)\n+\n+                self.assertIsInstance(response, HttpResponseNotAllowed)\n+\n     def test_base_view_class_is_sync(self):\n         \"\"\"\n         View and by extension any subclasses that don't define handlers are\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..252b85b 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -24,7 +25,9 @@ from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n+from django.urls import reverse\n from django.utils.translation import gettext as _\n+import urllib.parse\n \n from .models.custom_user import (\n     CustomUser,\n@@ -884,6 +887,27 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # original hashed password contains $\n         self.assertIn(\"$\", form.cleaned_data[\"password\"])\n \n+\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n     def test_bug_19349_bound_password_field(self):\n         user = User.objects.get(username=\"testclient\")\n         form = UserChangeForm(data={}, instance=user)\n",
  "django__django-16145": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex 04d2f0e..77e5080 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1600,6 +1600,22 @@ class ManageRunserver(SimpleTestCase):\n             \"2001:0db8:1234:5678::9\", \"7000\", ipv6=True, raw_ipv6=True\n         )\n \n+    @mock.patch(\"django.core.management.commands.runserver.run\")\n+    @mock.patch(\"django.core.management.base.BaseCommand.check_migrations\")\n+    def test_runner_zero_ip_addr(self, *mocked_objects):\n+        output = io.StringIO()\n+        call_command(\n+            self.cmd,\n+            addrport=\"0:8000\",\n+            use_reloader=False,\n+            skip_checks=True,\n+            stdout=output,\n+        )\n+        self.assertIn(\n+            \"Starting development server at http://0.0.0.0:8000/\",\n+            output.getvalue(),\n+        )\n+\n     def test_runner_hostname(self):\n         call_command(self.cmd, addrport=\"localhost:8000\")\n         self.assertServerSettings(\"localhost\", \"8000\")\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..27cee2c 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -507,9 +507,36 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n+from datetime import datetime\n+from django.contrib.sitemaps import Sitemap\n+from django.test import TestCase\n+from django.urls import path\n+from django.test.utils import override_settings\n+from django.contrib.sitemaps.views import index\n+\n+class CallableLastmodNoItemsSitemap(Sitemap):\n+    location = \"/location/\"\n+\n+    def items(self):\n+        return []\n+\n+    def lastmod(self, obj):\n+        return obj.lastmod\n \n-# RemovedInDjango50Warning\n-class DeprecatedTests(SitemapTestsBase):\n+\n+class SitemapTestsBase(TestCase):\n+    @override_settings(\n+        ROOT_URLCONF=\"tests.sitemaps_tests.urls.http\",\n+    )\n+    def test_callable_sitemod_no_items(self):\n+        index_response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", index_response)\n+        expected_content_index = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\n+        </sitemapindex>\n+        \"\"\"\n+        self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n     @override_settings(\n         TEMPLATES=[\n             {\n",
  "django__django-16315": "",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..556ab16 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,61 @@\n+\n+class UserCreationFormTests(TestCase):\n+    def test_custom_form_saves_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization = Organization.objects.create(name=\"organization 1\")\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization])\n+\n+    def test_custom_form_saves_multiple_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization1 = Organization.objects.create(name=\"organization 1\")\n+        organization2 = Organization.objects.create(name=\"organization 2\")\n+\n+        data = {\n+            \"username\": \"testclient2@example.com\",\n+            \"password1\": \"testclient2\",\n+            \"password2\": \"testclient2\",\n+            \"orgs\": [str(organization1.pk), str(organization2.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization1, organization2])\n+\n+    def test_custom_form_no_m2m_data(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        data = {\n+            \"username\": \"testclient3@example.com\",\n+            \"password1\": \"testclient3\",\n+            \"password2\": \"testclient3\",\n+            \"orgs\": [],  # No organizations added\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [])  # Should be empty\n+\n import datetime\n import re\n import urllib.parse\n@@ -34,6 +92,7 @@ from .models.custom_user import (\n     ExtensionUser,\n )\n from .models.with_custom_email_field import CustomEmailField\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n from .models.with_integer_username import IntegerUsernameUser\n from .settings import AUTH_TEMPLATES\n \n",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..bf98097 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.test import TestCase\n@@ -7,6 +8,8 @@ from django.utils.timesince import timesince, timeuntil\n from django.utils.translation import npgettext_lazy\n \n \n+from django.test.utils import override_settings, requires_tz_support\n+...\n class TimesinceTests(TestCase):\n     def setUp(self):\n         self.t = datetime.datetime(2007, 8, 14, 13, 46, 0)\n@@ -160,7 +163,30 @@ class TimesinceTests(TestCase):\n         self.assertEqual(timesince(t + self.oneday, now), \"0\\xa0minutes\")\n         self.assertEqual(timeuntil(t - self.oneday, now), \"0\\xa0minutes\")\n \n-    def test_naive_datetime_with_tzinfo_attribute(self):\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_long_interval_with_tz(self):\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=31)\n+        self.assertEqual(timesince(d), \"1\\xa0month\")\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_timesince_with_aware_datetime(self):\n+        # Create an aware datetime object 1 month and 5 days in the past\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=35)\n+        d = timezone.make_aware(d, timezone.get_default_timezone())\n+        self.assertEqual(timesince(d), \"1\\xa0month, 5\\xa0days\")\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_timesince_with_tz_transition(self):\n+        # Test to handle the transition between summer and winter time\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=31)\n+        d = timezone.make_aware(d, timezone.get_default_timezone())\n+        self.assertTrue(\"month\" in timesince(d))\n         class naive(datetime.tzinfo):\n             def utcoffset(self, dt):\n                 return None\n",
  "django__django-16454": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 8d0729b..3bcf8b9 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -470,6 +470,21 @@ class CommandRunTests(AdminScriptTestCase):\n \n \n class UtilsTests(SimpleTestCase):\n+    def test_subparser_argument_missing(self):\n+        \"\"\"\n+        Test that when a required argument for a subparser is missing,\n+        a user-friendly error message is shown instead of a stack trace.\n+        \"\"\"\n+        self.write_settings(\"settings.py\", apps=[\"user_commands\"])\n+        out, err = self.run_manage([\"subparser\", \"foo\"])\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertEqual(len(err_lines), 2)\n+        self.assertEqual(\n+            err_lines[1],\n+            \"manage.py subparser foo: error: the following arguments are required: bar\"\n+        )\n+\n     def test_no_existent_external_program(self):\n         msg = \"Error executing a_42_command_that_doesnt_exist_42\"\n         with self.assertRaisesMessage(CommandError, msg):\n",
  "django__django-16485": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 1623d39..4d9c6e2 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -104,6 +104,16 @@ class FunctionTests(SimpleTestCase):\n             # Invalid suffix.\n             self.assertEqual(floatformat(66666.666, \"u2\"), \"66666.666\")\n \n+    def test_floatformat_zero_string(self):\n+        self.assertEqual(floatformat(\"0.00\", 0), \"0\")\n+        self.assertEqual(floatformat(\"0.00\", 1), \"0.0\")\n+        self.assertEqual(floatformat(\"0.00\", 2), \"0.00\")\n+\n+    def test_floatformat_zero_decimal(self):\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), 0), \"0\")\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), 1), \"0.0\")\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), 2), \"0.00\")\n+\n     def test_zero_values(self):\n         self.assertEqual(floatformat(0, 6), \"0.000000\")\n         self.assertEqual(floatformat(0, 7), \"0.0000000\")\n",
  "django__django-16493": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex 20567e7..c2b792e 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -1018,6 +1018,15 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         storage = kwargs[\"storage\"]\n         self.assertIs(storage, callable_storage)\n \n+    def test_deconstruction_storage_callable_default(self):\n+        \"\"\"\n+        A callable that returns default_storage is not omitted when\n+        deconstructing.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"storage_callable_default\").deconstruct()\n+        self.assertIs(kwargs[\"storage\"], callable_default_storage)\n+\n \n # Tests for a race condition on file saving (#4948).\n # This is written in such a way that it'll always pass on platforms\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..11381db 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n@@ -8,7 +9,9 @@ from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n from django.urls import reverse\n \n+from django.contrib.auth import get_permission_codename\n from .admin import ArticleAdmin, site\n+from .tests import get_perm\n from .models import Article, Question\n from .tests import AdminViewBasicTestCase\n \n@@ -33,7 +36,38 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n         self.assertIs(template_context[\"extra\"], True)\n         self.assertIs(template_context[\"show_save\"], True)\n \n-    def test_override_show_save_and_add_another(self):\n+    def test_submit_row_save_as_new_permissions(self):\n+        \"\"\"\n+        Test that 'show_save_as_new' is correctly determined by permissions.\n+        \"\"\"\n+        # User with only change permission\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_permission = get_perm(User, get_permission_codename(\"change\", User._meta))\n+        change_user.user_permissions.add(change_permission)\n+\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        # User with both add and change permissions\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_permission = get_perm(User, get_permission_codename(\"add\", User._meta))\n+        add_user.user_permissions.add(add_permission, change_permission)\n+\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n         request = self.request_factory.get(\n             reverse(\"admin:auth_user_change\", args=[self.superuser.pk]),\n         )\n",
  "django__django-16560": "",
  "django__django-16569": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 55da562..987239e 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1470,6 +1470,27 @@ class FormsFormsetTestCase(SimpleTestCase):\n             can_delete_extra=False,\n             extra=2,\n         )\n+from django import forms\n+from django.forms import formset_factory\n+from django.test import SimpleTestCase\n+\n+class TestFormSetAddFields(SimpleTestCase):\n+    def test_add_fields_with_none_index(self):\n+        class MyForm(forms.Form):\n+            my_field = forms.CharField()\n+\n+        MyFormSet = formset_factory(\n+            form=MyForm,\n+            can_delete=True,\n+            can_delete_extra=False,\n+        )\n+        my_formset = MyFormSet(\n+            initial=None,\n+        )\n+        # The test is designed to ensure no exception is raised\n+        # and the \"DELETE\" field is not in the empty form's fields.\n+        self.assertNotIn(\"DELETE\", my_formset.empty_form.fields)\n+\n         formset = ChoiceFormFormset()\n         self.assertEqual(len(formset), 2)\n         self.assertNotIn(\"DELETE\", formset.forms[0].fields)\n",
  "django__django-16595": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3979e76..9d494fe 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -43,6 +43,48 @@ class OptimizerTests(SimpleTestCase):\n     def assertDoesNotOptimize(self, operations, **kwargs):\n         self.assertOptimizesTo(operations, operations, **kwargs)\n \n+    def test_alter_field_optimizations(self):\n+        # Add a field and then alter it multiple times\n+        add_field = migrations.AddField(\n+            model_name=\"book\",\n+            name=\"title\",\n+            field=models.CharField(max_length=256, null=True),\n+        )\n+        alter_field1 = migrations.AlterField(\n+            model_name=\"book\",\n+            name=\"title\",\n+            field=models.CharField(max_length=128, null=True),\n+        )\n+        alter_field2 = migrations.AlterField(\n+            model_name=\"book\",\n+            name=\"title\",\n+            field=models.CharField(max_length=128, null=True, help_text=\"help\"),\n+        )\n+        alter_field3 = migrations.AlterField(\n+            model_name=\"book\",\n+            name=\"title\",\n+            field=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+        )\n+\n+        # When all operations are together, only the last AlterField should remain\n+        self.assertOptimizesTo(\n+            [add_field, alter_field1, alter_field2, alter_field3],\n+            [add_field],\n+        )\n+\n+        # If AddField is separate, ensure multiple AlterFields are reduced to the last one\n+        self.assertOptimizesTo(\n+            [alter_field1, alter_field2, alter_field3],\n+            [alter_field3],\n+            app_label=\"books\"\n+        )\n+\n+        # If no optimization occurs, the test should fail\n+        self.assertDoesNotOptimize(\n+            [add_field, alter_field1, alter_field2, alter_field3],\n+            app_label=\"books\"\n+        )\n+\n     def test_none_app_label(self):\n         optimizer = MigrationOptimizer()\n         with self.assertRaisesMessage(TypeError, \"app_label must be a str\"):\n",
  "django__django-16612": "",
  "django__django-16642": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 499356e..87d2352 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -256,6 +256,10 @@ class FileResponseTests(SimpleTestCase):\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n         )\n+        test_tuples += (\n+            (\".tar.br\", \"application/x-brotli\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n+        )\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n                 with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n",
  "django__django-16661": "diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py\nindex 8cb88da..b4bf647 100644\n--- a/tests/modeladmin/tests.py\n+++ b/tests/modeladmin/tests.py\n@@ -154,6 +154,46 @@ class ModelAdminTests(TestCase):\n             ma.lookup_allowed(\"employee__department__code\", \"test_value\"), True\n         )\n \n+    @isolate_apps('modeladmin')\n+    def test_extended_lookup_allowed_foreign_primary(self):\n+        # Additional test to verify lookup with foreign key as primary key.\n+        class Country(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class Place(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+\n+        class Restaurant(models.Model):\n+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)\n+\n+        class Waiter(models.Model):\n+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n+\n+        class WaiterAdmin(ModelAdmin):\n+            list_filter = [\n+                \"restaurant__place__country\",\n+                \"restaurant__place__country__name\",\n+            ]\n+\n+        ma = WaiterAdmin(Waiter, self.site)\n+        # Check if lookups are correctly allowed\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country\", \"1\"), True)\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country__id__exact\", \"1\"), True)\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country__name\", \"test_value\"), True)\n+        # Add additional lookups for comprehensive testing\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country__name__exact\", \"test_value\"), True)\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country__name__icontains\", \"test\"), True)\n+\n+        ma = EmployeeProfileAdmin(EmployeeProfile, self.site)\n+        # Reverse OneToOneField\n+        self.assertIs(\n+            ma.lookup_allowed(\"employee__employeeinfo__description\", \"test_value\"), True\n+        )\n+        # OneToOneField and ForeignKey\n+        self.assertIs(\n+            ma.lookup_allowed(\"employee__department__code\", \"test_value\"), True\n+        )\n+\n     def test_field_arguments(self):\n         # If fields is specified, fieldsets_add and fieldsets_change should\n         # just stick the fields into a formsets structure and return it.\n",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..a924f51 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -922,7 +922,36 @@ class WriterTests(SimpleTestCase):\n             output,\n         )\n \n-    def test_migration_file_header_comments(self):\n+    def test_correct_order_of_imports(self):\n+        \"\"\"\n+        Test that migration files are generated with imports in the correct order.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield2\",\n+                        models.FloatField(default=datetime.datetime.now),\n+                    ),\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield3\",\n+                        models.FloatField(default=time.time),\n+                    ),\n+                ],\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        expected_import_order = (\n+            \"import datetime\\n\"\n+            \"import time\\n\"\n+            \"from django.db import migrations, models\\n\"\n+        )\n+        self.assertIn(expected_import_order, output)\n         \"\"\"\n         Test comments at top of file.\n         \"\"\"\n",
  "django__django-16801": "diff --git a/tests/model_fields/test_imagefield.py b/tests/model_fields/test_imagefield.py\nindex 9bf7f7d..09462a3 100644\n--- a/tests/model_fields/test_imagefield.py\n+++ b/tests/model_fields/test_imagefield.py\n@@ -328,6 +328,17 @@ class ImageFieldNoDimensionsTests(ImageFieldTwoDimensionsTests):\n \n     PersonModel = Person\n \n+    def test_post_init_not_connected(self):\n+        \"\"\"\n+        Test that the post_init signal handler is not connected when\n+        width_field and height_field are not set.\n+        \"\"\"\n+        person_model_id = id(self.PersonModel)\n+        self.assertNotIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id), *_ in signals.post_init.receivers],\n+        )\n+\n \n @skipIf(Image is None, \"Pillow is required to test ImageField\")\n class ImageFieldOneDimensionTests(ImageFieldTwoDimensionsTests):\n",
  "django__django-16819": "",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..737f325 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -790,8 +790,36 @@ class SystemChecksTestCase(SimpleTestCase):\n \n         errors = SongAdmin(Song, AdminSite()).check()\n         self.assertEqual(errors, [])\n+    def test_readonly_field_with_field_name_in_error(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            readonly_fields = (\"title\", \"nonexistent\")\n+\n+        errors = SongAdmin(Song, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[1]' refers to 'nonexistent', which is not a callable, \"\n+                \"an attribute of 'SongAdmin', or an attribute of 'admin_checks.Song'.\",\n+                obj=SongAdmin,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n \n-    def test_nonexistent_field(self):\n+    def test_readonly_field_on_inline_with_field_name_in_error(self):\n+        class CityInline(admin.TabularInline):\n+            model = City\n+            readonly_fields = [\"i_dont_exist\"]  # Missing attribute\n+\n+        errors = CityInline(State, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' refers to 'i_dont_exist', which is not a callable, \"\n+                \"an attribute of 'CityInline', or an attribute of 'admin_checks.City'.\",\n+                obj=CityInline,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n         class SongAdmin(admin.ModelAdmin):\n             readonly_fields = (\"title\", \"nonexistent\")\n \n",
  "django__django-16901": "diff --git a/tests/xor_lookups/tests.py b/tests/xor_lookups/tests.py\nindex 389d908..f51085b 100644\n--- a/tests/xor_lookups/tests.py\n+++ b/tests/xor_lookups/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import Q\n from django.test import TestCase\n \n@@ -19,6 +20,27 @@ class XorLookupsTests(TestCase):\n             self.numbers[:3] + self.numbers[8:],\n         )\n \n+    def test_filter_multiple(self):\n+        qs = Number.objects.filter(\n+            Q(num__gte=1)\n+            ^ Q(num__gte=3)\n+            ^ Q(num__gte=5)\n+            ^ Q(num__gte=7)\n+            ^ Q(num__gte=9)\n+        )\n+        self.assertCountEqual(\n+            qs,\n+            self.numbers[1:3] + self.numbers[5:7] + self.numbers[9:],\n+        )\n+        self.assertCountEqual(\n+            qs.values_list(\"num\", flat=True),\n+            [\n+                i\n+                for i in range(10)\n+                if (i >= 1) ^ (i >= 3) ^ (i >= 5) ^ (i >= 7) ^ (i >= 9)\n+            ],\n+        )\n+\n     def test_filter_negated(self):\n         self.assertCountEqual(\n             Number.objects.filter(Q(num__lte=7) ^ ~Q(num__lt=3)),\n@@ -64,4 +86,4 @@ class XorLookupsTests(TestCase):\n         self.assertCountEqual(\n             Number.objects.filter(Q(pk__in=[]) ^ Q(num__gte=5)),\n             self.numbers[5:],\n-        )\n+        )\n",
  "django__django-17029": "",
  "django__django-17084": "",
  "django__django-17087": "",
  "django__django-7530": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex a74680b..96524e3 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -641,7 +641,21 @@ class MakeMigrationsTests(MigrationTestBase):\n                 allow_migrate.assert_called_with('other', 'migrations', model_name='UnicodeModel')\n                 self.assertEqual(ensure_schema.call_count, 4)\n \n-    def test_failing_migration(self):\n+    def test_makemigrations_calls_allow_migrate_with_correct_args(self):\n+        \"\"\"\n+        Checks that makemigrations calls allow_migrate with correct (app_label, model) pairs.\n+        \"\"\"\n+        with mock.patch('migrations.routers.TestRouter.allow_migrate', return_value=True) as allow_migrate:\n+            with override_settings(DATABASE_ROUTERS=['migrations.routers.TestRouter']):\n+                call_command('makemigrations', 'migrations', verbosity=0)\n+                allow_migrate.assert_any_call('default', 'migrations', model_name='UnicodeModel')\n+                allow_migrate.assert_any_call('other', 'migrations', model_name='UnicodeModel')\n+                # No invalid (app_label, model_name) combinations should be called\n+                for call_args in allow_migrate.call_args_list:\n+                    db, app_label = call_args[0]\n+                    model_name = call_args[1].get('model_name')\n+                    self.assertIn(app_label, ['migrations', 'migrations2'])\n+                    self.assertIn(model_name, ['UnicodeModel', 'SomeOtherModel'])\n         # If a migration fails to serialize, it shouldn't generate an empty file. #21280\n         apps.register_model('migrations', UnserializableModel)\n \n",
  "django__django-9296": "",
  "matplotlib__matplotlib-13989": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5483eef..70ede43 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6359,8 +6359,34 @@ def test_hist_auto_bins():\n \n def test_hist_nan_data():\n     fig, (ax1, ax2) = plt.subplots(2)\n+import numpy as np\n+import matplotlib.pyplot as plt\n \n-    data = [1, 2, 3]\n+def test_hist_range_and_density():\n+    # Original test case\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_density_false():\n+    # Test case to ensure the behavior is correct with density=False\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=False)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_manual_bins_with_range_and_density():\n+    # Test case with manually specified bins and range\n+    data = np.random.rand(10)\n+    _, bins, _ = plt.hist(data, bins=[0, 0.25, 0.5, 0.75, 1.0], range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_large_data_range_density():\n+    # Test case with a larger dataset\n+    data = np.random.normal(loc=0.5, scale=0.1, size=1000)\n+    _, bins, _ = plt.hist(data, bins=\"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n     nan_data = data + [np.nan]\n \n     bins, edges, _ = ax1.hist(data)\n@@ -6368,4 +6394,4 @@ def test_hist_nan_data():\n         nanbins, nanedges, _ = ax2.hist(nan_data)\n \n     assert np.allclose(bins, nanbins)\n-    assert np.allclose(edges, nanedges)\n+    assert np.allclose(edges, nanedges)\n",
  "matplotlib__matplotlib-14623": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c9ad946..5dd9e9c 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -917,8 +917,23 @@ def test_hexbin_log():\n     h = ax.hexbin(x, y, yscale='log', bins='log')\n     plt.colorbar(h)\n \n+import numpy as np\n+import matplotlib.pyplot as plt\n \n def test_inverted_limits():\n+    # Test inverting nonlinear axes using set_ylim for log scale\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(10, 1)\n+    assert ax.get_ylim() == (10, 1)\n+    plt.close()\n+\n+    # Test the same for linear scale\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"linear\")\n+    ax.set_ylim(10, 1)\n+    assert ax.get_ylim() == (10, 1)\n+    plt.close()\n     # Test gh:1553\n     # Calling invert_xaxis prior to plotting should not disable autoscaling\n     # while still maintaining the inverted direction\n",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..bc953a8 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6959,9 +6959,40 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[2].step([1, 2], [1, 2], c=color.reshape((1, -1)))\n     axs[3].hist(np.arange(10), color=color.reshape((1, -1)))\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n+from matplotlib.testing.decorators import check_figures_equal\n \n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear(fig_test, fig_ref):\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    # Reference figure: Plot without clearing axes\n+    axs = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs.flat:\n+        ax.plot(x, y)\n+\n+    # Test figure: Plot with clearing axes\n+    axs = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n+\n+def test_shared_axes_clear_individual():\n+    fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    for ax in axs.flat:\n+        ax.plot(x, y)\n+    axs[0, 0].clear()  # Clear only one axes\n+    axs[0, 0].plot(x, y)\n \n-def test_shared_axes_retick():\n+    # Ensure tick visibility and limits are consistent across shared axes\n+    for ax in axs.flat:\n+        assert ax.get_xlim() == axs[0, 0].get_xlim()\n+        assert ax.get_ylim() == axs[0, 0].get_ylim()\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n \n     for ax in axs.flat:\n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "diff --git a/lib/matplotlib/tests/test_category.py b/lib/matplotlib/tests/test_category.py\nindex 40c4dcf..ac1f130 100644\n--- a/lib/matplotlib/tests/test_category.py\n+++ b/lib/matplotlib/tests/test_category.py\n@@ -311,4 +311,16 @@ def test_hist():\n     fig, ax = plt.subplots()\n     n, bins, patches = ax.hist(['a', 'b', 'a', 'c', 'ff'])\n     assert n.shape == (10,)\n-    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n+\n+def test_no_deprecation_on_empty_data_with_category_units():\n+    \"\"\"\n+    Validate no deprecation warning is emitted when passing empty data\n+    to axis methods using category units.\n+    \"\"\"\n+    f, ax = plt.subplots()\n+    ax.xaxis.update_units([\"a\", \"b\"])\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        ax.plot([], [])\n+        assert not any(issubclass(warning.category, MatplotlibDeprecationWarning) for warning in w)\n+    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n",
  "matplotlib__matplotlib-22865": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex 2c28713..87ba75e 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -918,8 +918,35 @@ def test_proportional_colorbars():\n                                      extend=extends[i])\n             fig.colorbar(CS3, spacing=spacings[j], ax=axs[i, j])\n \n+import matplotlib as mpl\n+import matplotlib.colors as mcolors\n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.colorbar import Colorbar\n+import pytest\n \n-def test_negative_boundarynorm():\n+@pytest.mark.parametrize(\"extend, coloroffset, res\", [\n+    ('both', 1, [np.array([[0., 0.], [0., 1.]]),\n+                 np.array([[1., 0.], [1., 1.]]),\n+                 np.array([[2., 0.], [2., 1.]])]),\n+    ('min', 0, [np.array([[0., 0.], [0., 1.]]),\n+                np.array([[1., 0.], [1., 1.]])]),\n+    ('max', 0, [np.array([[1., 0.], [1., 1.]]),\n+                np.array([[2., 0.], [2., 1.]])]),\n+    ('neither', -1, [np.array([[1., 0.], [1., 1.]])])\n+])\n+def test_colorbar_extend_drawedges(extend, coloroffset, res):\n+    cmap = plt.get_cmap(\"viridis\")\n+    bounds = np.arange(3)\n+    nb_colors = len(bounds) + coloroffset\n+    colors = cmap(np.linspace(100, 255, nb_colors).astype(int))\n+    cmap, norm = mcolors.from_levels_and_colors(bounds, colors, extend=extend)\n+\n+    plt.figure(figsize=(5, 1))\n+    ax = plt.subplot(111)\n+    cbar = Colorbar(ax, cmap=cmap, norm=norm, orientation='horizontal',\n+                    drawedges=True)\n+    assert np.all(np.equal(cbar.dividers.get_segments(), res))\n     fig, ax = plt.subplots(figsize=(1, 3))\n     cmap = plt.get_cmap(\"viridis\")\n \n",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..547a545 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -490,13 +490,26 @@ def test_validate_fontstretch(stretch, parsed_stretch):\n         assert validate_fontstretch(stretch) == parsed_stretch\n \n \n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend, rc_context\n+from matplotlib._pylab_helpers import Gcf\n+import pytest\n+\n def test_keymaps():\n     key_list = [k for k in mpl.rcParams if 'keymap' in k]\n     for k in key_list:\n         assert isinstance(mpl.rcParams[k], list)\n \n \n-def test_rcparams_reset_after_fail():\n+def test_get_backend_does_not_clear_gcf_figs():\n+    # Test to verify that get_backend() does not clear figures from Gcf.figs\n+    # when the first figure is created under rc_context\n+    with rc_context():\n+        fig = plt.figure()\n+    before = f'{id(Gcf)} {Gcf.figs!r}'\n+    get_backend()\n+    after = f'{id(Gcf)} {Gcf.figs!r}'\n+    assert before == after, f'Figures were cleared unexpectedly:\\nBefore: {before}\\nAfter: {after}'\n     # There was previously a bug that meant that if rc_context failed and\n     # raised an exception due to issues in the supplied rc parameters, the\n     # global rc parameters were left in a modified state.\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..5c953c4 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -14,6 +14,7 @@ from matplotlib.collections import LineCollection, PolyCollection\n from matplotlib.patches import Circle\n \n import matplotlib.pyplot as plt\n+from matplotlib.testing.decorators import check_figures_equal\n import numpy as np\n \n \n@@ -21,14 +22,26 @@ mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n \n-def test_aspect_equal_error():\n+@check_figures_equal(extensions=[\"png\"])\n+def test_set_visible_false_3d(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot(projection='3d')\n+    ax_test.set_visible(False)\n+\n+    ax_ref = fig_ref.add_subplot(projection='3d')\n+    ax_ref.set_axis_off()\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n     with pytest.raises(NotImplementedError):\n         ax.set_aspect('equal')\n \n \n-@mpl3d_image_comparison(['bar3d.png'])\n+@check_figures_equal(extensions=[\"png\"])\n+def test_set_visible_true_3d(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot(projection='3d')\n+    ax_test.set_visible(True)\n+\n+    ax_ref = fig_ref.add_subplot(projection='3d')\n+    # Leave ax_ref as default visible setting\n def test_bar3d():\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..beca174 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -148,8 +148,34 @@ def test_rotate_rect_draw(fig_test, fig_ref):\n     rect_test.set_angle(angle)\n     assert rect_test.get_angle() == angle\n \n+from matplotlib.testing.decorators import check_figures_equal\n+from matplotlib.patches import Rectangle\n \n-def test_negative_rect():\n+@check_figures_equal(extensions=['png'])\n+def test_dash_offset_patch_draw_with_offset(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n+\n+    loc = (0.1, 0.1)\n+    width, height = (0.8, 0.8)\n+    \n+    # Reference rectangles with expected behavior\n+    rect_ref = Rectangle(loc, width, height, linewidth=3, edgecolor='b',\n+                                                linestyle=(0, [6, 6]))\n+    rect_ref2 = Rectangle(loc, width, height, linewidth=3, edgecolor='r',\n+                                            linestyle=(10, [6, 6]))\n+                                            \n+    ax_ref.add_patch(rect_ref)\n+    ax_ref.add_patch(rect_ref2)\n+\n+    # Test rectangles with dash offset\n+    rect_test = Rectangle(loc, width, height, linewidth=3, edgecolor='b',\n+                                                    linestyle=(0, [6, 6]))\n+    rect_test2 = Rectangle(loc, width, height, linewidth=3, edgecolor='r',\n+                                                    linestyle=(10, [6, 6]))\n+                                                    \n+    ax_test.add_patch(rect_test)\n+    ax_test.add_patch(rect_test2)\n     # These two rectangles have the same vertices, but starting from a\n     # different point.  (We also drop the last vertex, which is a duplicate.)\n     pos_vertices = Rectangle((-3, -2), 3, 2).get_verts()[:-1]\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..fcb7049 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2866,8 +2866,29 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n-\n-@image_comparison(['stackplot_test_baseline'], remove_text=True)\n+def test_stackplot_color_cycler():\n+    import matplotlib.pyplot as plt\n+    import numpy as np\n+    from matplotlib.patches import Rectangle\n+\n+    # Data setup\n+    x = np.array([1, 2, 3])\n+    y = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    \n+    fig, ax = plt.subplots()\n+    \n+    # Plot a line and a rectangle with colors from the cycler\n+    ax.plot(x, [1, 3, 5], color='C0')\n+    ax.add_patch(Rectangle((1.5, 1.5), 0.5, 0.5, facecolor='C1'))\n+    \n+    # Verify stackplot does not error when using 'C' colors\n+    ax.stackplot(x, y, colors=['C2', 'C3', 'C4'])\n+    \n+    # Assertions to check color cycler state and ensure no exceptions\n+    current_cycler = ax._get_lines.prop_cycler\n+    colors_used = [next(current_cycler)['color'] for _ in range(3)]\n+    \n+    assert colors_used == ['C0', 'C1', 'C2'], \"Color cycler did not maintain expected sequence.\"\n def test_stackplot_baseline():\n     np.random.seed(0)\n \n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "",
  "matplotlib__matplotlib-24627": "",
  "matplotlib__matplotlib-24637": "",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..ef7e3bc 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -20,6 +20,20 @@ import matplotlib.scale as mscale\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n \n \n+import pytest\n+import numpy as np\n+import matplotlib as mpl\n+from numpy.testing import assert_array_equal\n+\n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.float16, float])\n+def test_index_dtype_no_deprecation(dtype):\n+    # Ensure conversion from out-of-bound integers to uint8 doesn't cause warnings.\n+    cm = mpl.colormaps[\"viridis\"]\n+    with pytest.warns(None) as record:\n+        assert_array_equal(cm(dtype(0)), cm(0))\n+    # Check that no warnings of type DeprecationWarning are raised\n+    assert not any(item.category == DeprecationWarning for item in record)\n+\n @pytest.mark.parametrize('N, result', [\n     (5, [1, .6, .2, .1, 0]),\n     (2, [1, 0]),\n",
  "matplotlib__matplotlib-25122": "diff --git a/lib/matplotlib/tests/test_mlab.py b/lib/matplotlib/tests/test_mlab.py\nindex 51d0c35..0bb5eab 100644\n--- a/lib/matplotlib/tests/test_mlab.py\n+++ b/lib/matplotlib/tests/test_mlab.py\n@@ -578,6 +578,26 @@ class TestSpectral:\n         assert_array_equal(fsp_b, fsp_c)\n         assert_allclose(spec_g, spec_c, atol=1e-08)\n         # these should not be almost equal\n+\n+    def test_psd_window_flattop(self):\n+        if self.NFFT_density is None:\n+            return\n+        # Generate a Flattop window, which can have negative values\n+        window = signal.windows.flattop(self.NFFT_density_real)\n+        y = np.random.randn(self.NFFT_density_real)\n+        # Compute the power spectral density using the Flattop window\n+        spec, fsp = mlab.psd(x=y,\n+                             NFFT=self.NFFT_density,\n+                             Fs=self.Fs,\n+                             noverlap=0,\n+                             sides=self.sides,\n+                             window=window,\n+                             scale_by_freq=True)\n+        # Compute manual correction without np.abs for verification\n+        spec_corrected = spec * window.sum()**2 / (window**2).sum()\n+\n+        # Verify that the manual correction produces a consistent result\n+        assert_allclose(spec_corrected, spec, atol=1e-8)\n         with pytest.raises(AssertionError):\n             assert_allclose(spec_b, spec_c, atol=1e-08)\n \n@@ -620,6 +640,26 @@ class TestSpectral:\n         assert_array_equal(fsp_b, fsp_c)\n         assert_allclose(spec_g, spec_c, atol=1e-08)\n         # these should not be almost equal\n+\n+    def test_psd_window_flattop(self):\n+        if self.NFFT_density is None:\n+            return\n+        # Generate a Flattop window, which can have negative values\n+        window = signal.windows.flattop(self.NFFT_density_real)\n+        y = np.random.randn(self.NFFT_density_real)\n+        # Compute the power spectral density using the Flattop window\n+        spec, fsp = mlab.psd(x=y,\n+                             NFFT=self.NFFT_density,\n+                             Fs=self.Fs,\n+                             noverlap=0,\n+                             sides=self.sides,\n+                             window=window,\n+                             scale_by_freq=True)\n+        # Compute manual correction without np.abs for verification\n+        spec_corrected = spec * window.sum()**2 / (window**2).sum()\n+\n+        # Verify that the manual correction produces a consistent result\n+        assert_allclose(spec_corrected, spec, atol=1e-8)\n         with pytest.raises(AssertionError):\n             assert_allclose(spec_b, spec_c, atol=1e-08)\n \n@@ -667,6 +707,26 @@ class TestSpectral:\n         assert_array_equal(fsp_b, fsp_c)\n         assert_allclose(spec_g, spec_c, atol=1e-08)\n         # these should not be almost equal\n+\n+    def test_psd_window_flattop(self):\n+        if self.NFFT_density is None:\n+            return\n+        # Generate a Flattop window, which can have negative values\n+        window = signal.windows.flattop(self.NFFT_density_real)\n+        y = np.random.randn(self.NFFT_density_real)\n+        # Compute the power spectral density using the Flattop window\n+        spec, fsp = mlab.psd(x=y,\n+                             NFFT=self.NFFT_density,\n+                             Fs=self.Fs,\n+                             noverlap=0,\n+                             sides=self.sides,\n+                             window=window,\n+                             scale_by_freq=True)\n+        # Compute manual correction without np.abs for verification\n+        spec_corrected = spec * window.sum()**2 / (window**2).sum()\n+\n+        # Verify that the manual correction produces a consistent result\n+        assert_allclose(spec_corrected, spec, atol=1e-8)\n         with pytest.raises(AssertionError):\n             assert_allclose(spec_b, spec_c, atol=1e-08)\n \n",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..7d484d1 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,6 +7801,85 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+def test_xaxis_offsetText_color():\n+    plt.rcParams['xtick.labelcolor'] = 'blue'\n+    ax = plt.axes()\n+    ax.xaxis.get_offset_text().set_visible(True)\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    plt.draw()  # Ensure the offset text is computed\n+    assert ax.xaxis.get_offset_text().get_color() == 'blue'\n+\n+    plt.rcParams['xtick.color'] = 'yellow'\n+    plt.rcParams['xtick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.xaxis.get_offset_text().set_visible(True)\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    plt.draw()\n+    assert ax.xaxis.get_offset_text().get_color() == 'yellow'\n+\n+\n+def test_yaxis_offsetText_color():\n+    plt.rcParams['ytick.labelcolor'] = 'green'\n+    ax = plt.axes()\n+    ax.yaxis.get_offset_text().set_visible(True)\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    plt.draw()  # Ensure the offset text is computed\n+    assert ax.yaxis.get_offset_text().get_color() == 'green'\n+\n+    plt.rcParams['ytick.color'] = 'red'\n+    plt.rcParams['ytick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.yaxis.get_offset_text().set_visible(True)\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    plt.draw()\n+    assert ax.yaxis.get_offset_text().get_color() == 'red'\n+\n+import matplotlib.pyplot as plt\n+\n+def test_ytickcolor_is_not_yticklabelcolor():\n+    plt.rcParams['ytick.color'] = 'yellow'\n+    plt.rcParams['ytick.labelcolor'] = 'blue'\n+    ax = plt.axes()\n+    ticks = ax.yaxis.get_major_ticks()\n+    for tick in ticks:\n+        assert tick.tick1line.get_color() == 'yellow'\n+        assert tick.label1.get_color() == 'blue'\n+\n+def test_xaxis_offsetText_color():\n+    plt.rcParams['xtick.labelcolor'] = 'blue'\n+    ax = plt.axes()\n+    ax.xaxis.get_offset_text().set_visible(True)\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    plt.draw()  # Ensure the offset text is computed\n+    assert ax.xaxis.get_offset_text().get_color() == 'blue'\n+\n+    plt.rcParams['xtick.color'] = 'yellow'\n+    plt.rcParams['xtick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.xaxis.get_offset_text().set_visible(True)\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    plt.draw()\n+    assert ax.xaxis.get_offset_text().get_color() == 'yellow'\n+\n+\n+def test_yaxis_offsetText_color():\n+    plt.rcParams['ytick.labelcolor'] = 'green'\n+    ax = plt.axes()\n+    ax.yaxis.get_offset_text().set_visible(True)\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    plt.draw()  # Ensure the offset text is computed\n+    assert ax.yaxis.get_offset_text().get_color() == 'green'\n+\n+    plt.rcParams['ytick.color'] = 'red'\n+    plt.rcParams['ytick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.yaxis.get_offset_text().set_visible(True)\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    plt.draw()\n+    assert ax.yaxis.get_offset_text().get_color() == 'red'\n+\n+import matplotlib.pyplot as plt\n+\n def test_ytickcolor_is_not_yticklabelcolor():\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..fea5131 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,18 @@\n+\n+def test_pickle_draggable_legend():\n+    fig, ax = plt.subplots()\n+    ax.plot([0, 1, 2], [3, 4, 5], label=\"label\")\n+    leg = ax.legend()\n+    leg.set_draggable(True)\n+    \n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+\n+    # Ensure that 'FigureCanvasAgg' is not in the pickle stream\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+    \n+    loaded = pickle.loads(pkl)\n+    assert loaded is not None  # Ensure that figure is loaded successfully\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -89,6 +104,7 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import pickletools\n \n @mpl.style.context(\"default\")\n @check_figures_equal(extensions=[\"png\"])\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..8cb6b79 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -44,6 +44,11 @@ def test_simple():\n     pickle.dump(fig, BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n \n+import matplotlib.pyplot as plt\n+import pickle\n+import numpy as np\n+from io import BytesIO\n+\n def _generate_complete_test_figure(fig_ref):\n     fig_ref.set_size_inches((10, 6))\n     plt.figure(fig_ref)\n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..a322656 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -991,8 +991,88 @@ def test_hexbin_linear():\n     ax.hexbin(x, y, gridsize=(10, 5), marginals=True,\n               reduce_C_function=np.sum)\n \n+from matplotlib.testing.decorators import check_figures_equal\n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_behavior_upon_C_parameter(fig_test, fig_ref):\n+    # see: gh:12926\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # without C parameter\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # with C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=C,\n+        reduce_C_function=np.sum,\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n+\n+def test_hexbin_mincnt_behavior_edge_cases():\n+    # Additional test cases for edge conditions\n+    datapoints = [\n+        # list of (x, y)\n+        (1, 1),\n+        (2, 2),\n+        (3, 3),\n+        (4, 4),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [2, 3, 4, 5]\n+    extent = [0., 5., 0., 5.]\n+    gridsize = (5, 5)\n+\n+    fig, ax = plt.subplots()\n \n-def test_hexbin_log_clim():\n+    # Test with mincnt=0, should show all points\n+    hexbin = ax.hexbin(\n+        X, Y,\n+        C=C,\n+        reduce_C_function=np.sum,\n+        mincnt=0,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    assert not np.any(np.isnan(hexbin.get_array()))\n+\n+    # Test with mincnt=2, should filter some hexagons\n+    hexbin = ax.hexbin(\n+        X, Y,\n+        C=C,\n+        reduce_C_function=np.sum,\n+        mincnt=2,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    # We expect some hexagons to be filtered out\n+    assert np.any(np.isnan(hexbin.get_array()))\n+\n+    plt.close(fig)\n     x, y = np.arange(200).reshape((2, 100))\n     fig, ax = plt.subplots()\n     h = ax.hexbin(x, y, bins='log', vmin=2, vmax=100)\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex 700190c..bb6fe86 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -89,6 +89,51 @@ def test_contour_no_valid_levels():\n     ax.contour(np.ones((9, 9)))\n \n \n+from matplotlib.testing.decorators import check_figures_equal, image_comparison\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths(fig_test, fig_ref):\n+    # Creating a contour set on the test figure\n+    cs_test = fig_test.subplots().contour([[0, 1], [1, 2]])\n+    # Creating a contour set on the reference figure\n+    cs_ref = fig_ref.subplots().contour([[1, 0], [2, 1]])\n+    # Setting the test paths to the reference paths\n+    cs_test.set_paths(cs_ref.get_paths())\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths_no_change(fig_test, fig_ref):\n+    # Generating contours without changing paths\n+    cs_test = fig_test.subplots().contour([[0, 1], [1, 2]])\n+    cs_ref = fig_ref.subplots().contour([[0, 1], [1, 2]])\n+    # Assert paths are unchanged\n+    assert cs_test.get_paths() == cs_ref.get_paths()\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths_different_shapes(fig_test, fig_ref):\n+    # Creating contours with different shapes\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+    cs_test = ax_test.contour([[0, 1, 2], [2, 3, 4]])\n+    cs_ref = ax_ref.contour([[1, 0, 2], [3, 2, 4]])\n+    # Set paths from reference to test\n+    cs_test.set_paths(cs_ref.get_paths())\n+    # Assert paths match after setting\n+    assert cs_test.get_paths() == cs_ref.get_paths()\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths_transformed(fig_test, fig_ref):\n+    import matplotlib.transforms as mtransforms\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+    # Create transformed contours\n+    transform = mtransforms.Affine2D().rotate_deg(45)\n+    cs_test = ax_test.contour([[0, 1], [1, 2]], transform=transform)\n+    cs_ref = ax_ref.contour([[0, 1], [1, 2]])\n+    # Set paths from reference to test\n+    cs_test.set_paths(cs_ref.get_paths())\n+    # Ensure the same number of paths\n+    assert len(cs_test.get_paths()) == len(cs_ref.get_paths())\n+\n def test_contour_Nlevels():\n     # A scalar levels arg or kwarg should trigger auto level generation.\n     # https://github.com/matplotlib/matplotlib/issues/11913\n",
  "mwaskom__seaborn-3069": "diff --git a/tests/_core/test_plot.py b/tests/_core/test_plot.py\nindex 3d202bc..cf7e01b 100644\n--- a/tests/_core/test_plot.py\n+++ b/tests/_core/test_plot.py\n@@ -646,6 +646,10 @@ class TestScaling:\n             p.plot()\n \n \n+import pytest\n+import matplotlib as mpl\n+from seaborn import Plot\n+\n class TestPlotting:\n \n     def test_matplotlib_object_creation(self):\n@@ -661,7 +665,39 @@ class TestPlotting:\n         Plot().plot()\n         assert m.n_splits == 0\n \n-    def test_single_split_single_layer(self, long_df):\n+    def test_nominal_x_axis_behavior(self):\n+        # Test that nominal scale on x-axis behaves like categorical\n+        p = Plot(x=[\"cat1\", \"cat2\", \"cat3\"], y=[1, 2, 3])\n+        ax = p.plot()._figure.axes[0]\n+        # Check x-axis limits are set correctly with a nominal scale\n+        assert ax.get_xlim() == (-0.5, 2.5)\n+        # Check that no gridlines are visible\n+        assert not any(line.get_visible() for line in ax.xaxis.get_gridlines())\n+\n+    def test_nominal_y_axis_behavior(self):\n+        # Test that nominal scale on y-axis behaves like categorical\n+        p = Plot(x=[1, 2, 3], y=[\"cat1\", \"cat2\", \"cat3\"])\n+        ax = p.plot()._figure.axes[0]\n+        # Check y-axis limits are set correctly with a nominal scale\n+        assert ax.get_ylim() == (2.5, -0.5)\n+        # Check that no gridlines are visible\n+        assert not any(line.get_visible() for line in ax.yaxis.get_gridlines())\n+\n+    def test_force_grid_on_nominal_x(self):\n+        # Test that user can force gridlines for nominal x-axis\n+        p = Plot(x=[\"cat1\", \"cat2\", \"cat3\"], y=[1, 2, 3])\n+        ax = p.plot()._figure.axes[0]\n+        ax.xaxis.grid(True)  # Force gridlines\n+        # Check if gridlines are visible when forced\n+        assert any(line.get_visible() for line in ax.xaxis.get_gridlines())\n+\n+    def test_force_grid_on_nominal_y(self):\n+        # Test that user can force gridlines for nominal y-axis\n+        p = Plot(x=[1, 2, 3], y=[\"cat1\", \"cat2\", \"cat3\"])\n+        ax = p.plot()._figure.axes[0]\n+        ax.yaxis.grid(True)  # Force gridlines\n+        # Check if gridlines are visible when forced\n+        assert any(line.get_visible() for line in ax.yaxis.get_gridlines())\n \n         m = MockMark()\n         p = Plot(long_df, x=\"f\", y=\"z\").add(m).plot()\n",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..3e29a7a 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -244,6 +244,13 @@ def test_default_static_max_age(app):\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n \n+import pytest\n+import flask\n+\n+def test_empty_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"\", __name__)\n+\n def test_templates_list(test_apps):\n     from blueprintapp import app\n \n",
  "psf__requests-1142": "",
  "psf__requests-1724": "diff --git a/requests/api.py b/requests/api.py\nindex 66d7f21..f785f04 100644\n--- a/requests/api.py\n+++ b/requests/api.py\n@@ -10,6 +10,10 @@ This module implements the Requests API.\n :license: Apache2, see LICENSE for more details.\n \n \"\"\"\n+import requests\n+import os\n+import unittest\n+import httpbin\n \n from . import sessions\n \n",
  "psf__requests-1766": "",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..ccc40e9 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -86,7 +86,14 @@ class TestRequests:\n         with pytest.raises(exception):\n             requests.get(url)\n \n-    def test_basic_building(self):\n+    @pytest.mark.parametrize(\n+        'exception, url', (\n+            (InvalidURL, 'http://*example.com'),\n+            (InvalidURL, 'http://.example.com'),\n+        ))\n+    def test_idna_invalid_labels(self, exception, url):\n+        with pytest.raises(exception):\n+            requests.get(url)\n         req = requests.Request()\n         req.url = 'http://kennethreitz.org/'\n         req.data = {'life': '42'}\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..ff006c3 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2308,8 +2308,27 @@ class TestAsCompatibleData:\n         orig = Variable(dims=(\"x\"), data=array, attrs={\"foo\": \"bar\"})\n         assert isinstance(orig._data, CustomIndexable)\n \n+import numpy as np\n+import pytest\n+from xarray import Variable, DataArray\n+\n+def test_setitem_no_coercion_on_values_property():\n+    # Test to ensure objects with a `values` property are not coerced\n+    class HasValues:\n+        values = 5\n+    \n+    good_indexed = DataArray([None], dims=['dim_0'])\n+    bad_indexed = DataArray([None], dims=['dim_0'])\n+\n+    good_indexed.loc[{'dim_0': 0}] = set()\n+    bad_indexed.loc[{'dim_0': 0}] = HasValues()\n+\n+    # Check that the assignment did not coerce the HasValues object\n+    assert isinstance(bad_indexed.values[0], HasValues)\n+    assert good_indexed.values[0] == set()\n \n-def test_raise_no_warning_for_nan_in_binary_ops():\n+    # Ensure that the 'values' property itself is not being accessed\n+    assert bad_indexed.values[0].values == 5\n     with pytest.warns(None) as record:\n         Variable(\"x\", [1, 2, np.NaN]) > 0\n     assert len(record) == 0\n",
  "pydata__xarray-3095": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex d6a4400..26fdd7e 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -2107,7 +2107,19 @@ class TestDataset:\n \n         assert_identical(ds.coords['a'], expected_orig)\n \n-    def test_copy_with_data_errors(self):\n+    def test_regression_unicode_index_copy(self):\n+        ds = xr.Dataset(\n+            coords={'x': ['foo'], 'y': ('x', ['bar'])},\n+            data_vars={'z': ('x', ['baz'])}\n+        )\n+        # Ensure the dtype is <U3 for the original indices\n+        assert ds.coords['x'].dtype == '<U3'\n+        assert ds.coords['y'].dtype == '<U3'\n+\n+        ds_copy = ds.copy(deep=True)\n+        # Verify that deep copy retains the unicode dtype\n+        assert ds_copy.coords['x'].dtype == '<U3'\n+        assert ds_copy.coords['y'].dtype == '<U3'\n         orig = create_test_data()\n         new_var1 = np.arange(orig['var1'].size).reshape(orig['var1'].shape)\n         with raises_regex(ValueError, 'Data must be dict-like'):\n",
  "pydata__xarray-3151": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 026dec9..41f8e97 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -574,7 +574,24 @@ class TestCombineAuto:\n         def test_empty_input(self):\n             assert_identical(Dataset(), combine_by_coords([]))\n \n-    def test_infer_order_from_coords(self):\n+    def test_non_monotonic_identical_coords(self):\n+        # Check that non-monotonic but identical coordinates do not raise an error\n+        ycoord = ['a', 'c', 'b']\n+        data1 = np.random.rand(3, 3)\n+        data2 = np.random.rand(4, 3)\n+\n+        ds1 = Dataset(data_vars=dict(data=(['x', 'y'], data1)),\n+                      coords=dict(x=[1, 2, 3], y=ycoord))\n+\n+        ds2 = Dataset(data_vars=dict(data=(['x', 'y'], data2)),\n+                      coords=dict(x=[4, 5, 6, 7], y=ycoord))\n+\n+        expected_data = np.concatenate([data1, data2], axis=0)\n+        expected = Dataset(data_vars=dict(data=(['x', 'y'], expected_data)),\n+                           coords=dict(x=[1, 2, 3, 4, 5, 6, 7], y=ycoord))\n+\n+        actual = combine_by_coords((ds1, ds2))\n+        assert_identical(expected, actual)\n         data = create_test_data()\n         objs = [data.isel(dim2=slice(4, 9)), data.isel(dim2=slice(4))]\n         actual = combine_by_coords(objs)\n",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..80b7dfd 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2309,8 +2309,20 @@ class TestDataArray:\n                     self.dv.values, np.array(q) * 100, axis=axis\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n-\n-    def test_reduce_keep_attrs(self):\n+    def test_quantile_keep_attrs(self):\n+        da = xr.DataArray([0, 0], dims=\"x\", attrs={'units': 'K'})\n+        out = da.quantile(.9, dim='x', keep_attrs=True)\n+        assert out.attrs == {'units': 'K'}\n+\n+        # Test with multi-dimensional array\n+        da_2d = xr.DataArray([[1, 2], [3, 4]], dims=(\"x\", \"y\"), attrs={'description': '2D array'})\n+        out_2d = da_2d.quantile(0.5, dim='x', keep_attrs=True)\n+        assert out_2d.attrs == {'description': '2D array'}\n+        \n+        # Test with multiple quantiles\n+        da_multi = xr.DataArray([0, 1, 2, 3, 4], dims=\"x\", attrs={'source': 'simulated'})\n+        out_multi = da_multi.quantile([0.25, 0.75], dim='x', keep_attrs=True)\n+        assert out_multi.attrs == {'source': 'simulated'}\n         # Test dropped attrs\n         vm = self.va.mean()\n         assert len(vm.attrs) == 0\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..cc46ead 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import pytest\n \n@@ -159,7 +160,27 @@ class TestMergeMethod:\n         with raises_regex(ValueError, \"should be coordinates or not\"):\n             data.merge(data.reset_coords())\n \n-    def test_merge_broadcast_equals(self):\n+    def test_merge_dataarray(self):\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+\n+        # Test merging Dataset with DataArray using ds.merge()\n+        actual = ds.merge(da)\n+        expected = xr.merge([ds, da])\n+        assert_identical(actual, expected)\n+\n+        # Test merging when DataArray has existing dimension in Dataset\n+        ds_with_dim = xr.Dataset({\"a\": (\"x\", [0, 1])}, coords={\"x\": [0, 1]})\n+        da_with_dim = xr.DataArray(data=[2, 3], dims=\"x\", name=\"b\")\n+        actual = ds_with_dim.merge(da_with_dim)\n+        expected = xr.merge([ds_with_dim, da_with_dim])\n+        assert_identical(actual, expected)\n+\n+        # Test merging when DataArray has new dimension\n+        da_new_dim = xr.DataArray(data=[4, 5, 6], dims=\"y\", name=\"c\")\n+        actual = ds_with_dim.merge(da_new_dim)\n+        expected = xr.merge([ds_with_dim, da_new_dim])\n+        assert_identical(actual, expected)\n         ds1 = xr.Dataset({\"x\": 0})\n         ds2 = xr.Dataset({\"x\": (\"y\", [0, 0])})\n         actual = ds1.merge(ds2)\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "diff --git a/xarray/tests/test_duck_array_ops.py b/xarray/tests/test_duck_array_ops.py\nindex 0c63f0f..d0a3385 100644\n--- a/xarray/tests/test_duck_array_ops.py\n+++ b/xarray/tests/test_duck_array_ops.py\n@@ -604,16 +604,42 @@ def test_min_count_dataset(func):\n     assert_allclose(actual, expected)\n \n \n-@pytest.mark.parametrize(\"dtype\", [float, int, np.float32, np.bool_])\n+from xarray import DataArray\n+import pytest\n+import numpy as np\n+from xarray.tests import assert_allclose, assert_dask_array, has_dask, construct_dataarray\n+from xarray.core import dtypes\n @pytest.mark.parametrize(\"dask\", [False, True])\n @pytest.mark.parametrize(\"func\", [\"sum\", \"prod\"])\n-def test_multiple_dims(dtype, dask, func):\n+def test_min_count_multiple_dims(dtype, dask, func):\n     if dask and not has_dask:\n         pytest.skip(\"requires dask\")\n+    da = DataArray(\n+        np.array([[1.0, 2.0, np.nan], [np.nan, 5.0, 6.0]]), dims=(\"x\", \"y\")\n+    )\n+    min_count = 1\n+    actual = getattr(da, func)(dim=[\"x\", \"y\"], skipna=True, min_count=min_count)\n+    expected = getattr(da, func)(dim=..., skipna=True, min_count=min_count)\n+    \n+    # Check that the operation does not raise an error and behaves as expected\n+    assert_allclose(actual, expected)\n+    assert_dask_array(actual, dask)\n+\n+from xarray import DataArray\n+import pytest\n+import numpy as np\n+from xarray.tests import assert_allclose, assert_dask_array, has_dask, construct_dataarray\n+from xarray.core import dtypes\n+@pytest.mark.parametrize(\"dask\", [False, True])\n+@pytest.mark.parametrize(\"func\", [\"sum\", \"prod\"])\n+def test_multiple_dims_with_nan(dtype, dask, func):\n+    if dask and not has_dask:\n+        pytest.skip(\"requires dask\")\n+\n     da = construct_dataarray(3, dtype, contains_nan=True, dask=dask)\n \n-    actual = getattr(da, func)((\"x\", \"y\"))\n-    expected = getattr(getattr(da, func)(\"x\"), func)(\"y\")\n+    actual = getattr(da, func)(dim=(\"x\", \"y\"))\n+    expected = getattr(getattr(da, func)(dim=\"x\"), func)(dim=\"y\")\n     assert_allclose(actual, expected)\n \n \n",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..64d0831 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -109,7 +109,31 @@ class TestMergeFunction:\n             expected.attrs = expected_attrs\n             assert actual.identical(expected)\n \n-    def test_merge_dicts_simple(self):\n+    def test_merge_attrs_override_copy(self):\n+        ds1 = xr.Dataset(attrs={\"x\": 0, \"y\": \"foo\"})\n+        ds2 = xr.Dataset(attrs={\"x\": 1, \"y\": \"bar\"})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        \n+        # Initial check: ds3 should have the attrs of ds1\n+        assert ds3.attrs == ds1.attrs\n+        assert ds3.attrs[\"x\"] == 0\n+        assert ds3.attrs[\"y\"] == \"foo\"\n+        \n+        # Modify ds3 attrs\n+        ds3.attrs[\"x\"] = 2\n+        ds3.attrs[\"y\"] = \"baz\"\n+        \n+        # Ensure ds1's attributes remain unchanged\n+        assert ds1.attrs[\"x\"] == 0\n+        assert ds1.attrs[\"y\"] == \"foo\"\n+        \n+        # Ensure that ds3 has the updated attributes\n+        assert ds3.attrs[\"x\"] == 2\n+        assert ds3.attrs[\"y\"] == \"baz\"\n+        \n+        # Ensure ds2 remains unchanged\n+        assert ds2.attrs[\"x\"] == 1\n+        assert ds2.attrs[\"y\"] == \"bar\"\n         actual = xr.merge([{\"foo\": 0}, {\"bar\": \"one\"}, {\"baz\": 3.5}])\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n         assert actual.identical(expected)\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..75e88f8 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1921,6 +1921,19 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n+def test_where_attrs() -> None:\n+    # Test for attribute preservation\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    actual = xr.where(cond, x, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected, actual)\n+\n+    # Test without keep_attrs to ensure attributes are dropped\n+    actual_no_attrs = xr.where(cond, x, y, keep_attrs=False)\n+    expected_no_attrs = xr.DataArray([1, 0], dims=\"x\")\n+    assert_identical(expected_no_attrs, actual_no_attrs)\n \n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n",
  "pydata__xarray-4695": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex 3a4b8ad..f918147 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -64,6 +64,34 @@ class TestDataArray:\n         )\n         self.mda = DataArray([0, 1, 2, 3], coords={\"x\": self.mindex}, dims=\"x\")\n \n+    def test_loc_dim_name_collision_with_sel_params(self):\n+        import numpy as np\n+        from xarray import DataArray\n+        empty = np.zeros((2, 2))\n+        D1 = DataArray(empty, dims=['dim1', 'dim2'], coords={'dim1': ['x', 'y'], 'dim2': ['a', 'b']})\n+        D2 = DataArray(empty, dims=['dim1', 'method'], coords={'dim1': ['x', 'y'], 'method': ['a', 'b']})\n+\n+        np.testing.assert_array_equal(D1.loc[dict(dim1='x', dim2='a')], [0.0])\n+        np.testing.assert_array_equal(D2.loc[dict(dim1='x', method='a')], [0.0])\n+\n+    def test_loc_with_different_type_dimensions(self):\n+        import numpy as np\n+        from xarray import DataArray\n+        empty = np.zeros((2, 2))\n+        D1 = DataArray(empty, dims=['time', 'method'], coords={'time': ['2023-01-01', '2023-01-02'], 'method': ['GET', 'POST']})\n+        D2 = DataArray(empty, dims=['lat', 'method'], coords={'lat': [10.0, 20.0], 'method': ['GET', 'POST']})\n+\n+        np.testing.assert_array_equal(D1.loc[dict(time='2023-01-01', method='GET')], [0.0])\n+        np.testing.assert_array_equal(D2.loc[dict(lat=10.0, method='GET')], [0.0])\n+\n+    def test_loc_with_integer_coordinates(self):\n+        import numpy as np\n+        from xarray import DataArray\n+        empty = np.zeros((2, 2))\n+        D1 = DataArray(empty, dims=['dim1', 'method'], coords={'dim1': [0, 1], 'method': [100, 200]})\n+\n+        np.testing.assert_array_equal(D1.loc[dict(dim1=0, method=100)], [0.0])\n+\n     def test_repr(self):\n         v = Variable([\"time\", \"x\"], [[1, 2, 3], [4, 5, 6]], {\"foo\": \"bar\"})\n         coords = {\"x\": np.arange(3, dtype=np.int64), \"other\": np.int64(0)}\n",
  "pydata__xarray-4966": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex 2dbb0b4..134b1b8 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -7,14 +7,38 @@ import pytest\n import xarray as xr\n from xarray.coding import variables\n from xarray.conventions import decode_cf_variable, encode_cf_variable\n+import numpy as np\n \n from . import assert_allclose, assert_equal, assert_identical, requires_dask\n \n with suppress(ImportError):\n     import dask.array as da\n \n-\n-def test_CFMaskCoder_decode():\n+@pytest.mark.parametrize(\"bits\", [1, 2, 4, 8])\n+def test_decode_unsigned_from_signed(bits):\n+    unsigned_dtype = np.dtype(f\"u{bits}\")\n+    signed_dtype = np.dtype(f\"i{bits}\")\n+    original_values = np.array([np.iinfo(unsigned_dtype).max], dtype=unsigned_dtype)\n+    encoded = xr.Variable(\n+        (\"x\",), original_values.astype(signed_dtype), attrs={\"_Unsigned\": \"true\"}\n+    )\n+    coder = variables.UnsignedIntegerCoder()\n+    decoded = coder.decode(encoded)\n+    assert decoded.dtype == unsigned_dtype\n+    assert np.array_equal(decoded.values, original_values)\n+\n+@pytest.mark.parametrize(\"bits\", [1, 2, 4, 8])\n+def test_decode_signed_from_unsigned(bits):\n+    unsigned_dtype = np.dtype(f\"u{bits}\")\n+    signed_dtype = np.dtype(f\"i{bits}\")\n+    original_values = np.array([-1], dtype=signed_dtype)\n+    encoded = xr.Variable(\n+        (\"x\",), original_values.astype(unsigned_dtype), attrs={\"_Unsigned\": \"false\"}\n+    )\n+    coder = variables.UnsignedIntegerCoder()\n+    decoded = coder.decode(encoded)\n+    assert decoded.dtype == signed_dtype\n+    assert np.array_equal(decoded.values, original_values)\n     original = xr.Variable((\"x\",), [0, -1, 1], {\"_FillValue\": -1})\n     expected = xr.Variable((\"x\",), [0, np.nan, 1])\n     coder = variables.CFMaskCoder()\n",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..3faf4c0 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1919,6 +1919,22 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n+    # ensure keep_attrs can handle scalar values\n+    actual_scalar_x = xr.where(cond, 1, 0, keep_attrs=True)\n+    assert actual_scalar_x.attrs == {}\n+\n+    actual_scalar_y = xr.where(cond, x, 0, keep_attrs=True)\n+    assert actual_scalar_y.attrs == {\"attr\": \"x\"}  # attrs should be from x\n+\n+    actual_scalar_y_2 = xr.where(cond, x, 1, keep_attrs=True)\n+    assert actual_scalar_y_2.attrs == {\"attr\": \"x\"}  # attrs should still be from x\n+\n+    # Test with a scalar condition and keep_attrs=True\n+    cond_scalar = True\n+    actual_with_scalar_cond = xr.where(cond_scalar, x, y, keep_attrs=True)\n+    expected_with_scalar_cond = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected_with_scalar_cond, actual_with_scalar_cond)\n+\n \n def test_where_attrs() -> None:\n     cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n@@ -1928,6 +1944,22 @@ def test_where_attrs() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n     assert_identical(expected, actual)\n \n+    # ensure keep_attrs can handle scalar values\n+    actual_scalar_x = xr.where(cond, 1, 0, keep_attrs=True)\n+    assert actual_scalar_x.attrs == {}\n+\n+    actual_scalar_y = xr.where(cond, x, 0, keep_attrs=True)\n+    assert actual_scalar_y.attrs == {\"attr\": \"x\"}  # attrs should be from x\n+\n+    actual_scalar_y_2 = xr.where(cond, x, 1, keep_attrs=True)\n+    assert actual_scalar_y_2.attrs == {\"attr\": \"x\"}  # attrs should still be from x\n+\n+    # Test with a scalar condition and keep_attrs=True\n+    cond_scalar = True\n+    actual_with_scalar_cond = xr.where(cond_scalar, x, y, keep_attrs=True)\n+    expected_with_scalar_cond = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected_with_scalar_cond, actual_with_scalar_cond)\n+\n \n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n",
  "pydata__xarray-6599": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f1ec005..bd48284 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -2010,6 +2010,32 @@ def test_where_attrs() -> None:\n             ),\n             id=\"datetime\",\n         ),\n+        # Test for timedelta64[ns] coordinates\n+        pytest.param(\n+            xr.DataArray(\n+                np.array([1000, 2000, 3000], dtype=\"timedelta64[ns]\"), dims=\"x\"\n+            ),\n+            xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n+            xr.DataArray([1000.0, 2000.0, 3000.0], dims=\"x\"),\n+            id=\"timedelta\",\n+        ),\n+        # Additional test case for more complex coefficients\n+        pytest.param(\n+            xr.DataArray(\n+                np.array([0, 10, 20, 30, 40, 50], dtype=\"timedelta64[ns]\"), dims=\"x\"\n+            ),\n+            xr.DataArray(\n+                [[1.0, 2.0, 3.0], [0.1, 0.01, 0.001]],\n+                dims=(\"degree\", \"axis\"),\n+                coords={\"degree\": [1, 0], \"axis\": [0, 1, 2]}\n+            ),\n+            xr.DataArray(\n+                [[1.0, 2.0, 3.0], [1.0, 2.1, 3.01], [2.0, 2.2, 3.02], \n+                 [3.0, 2.3, 3.03], [4.0, 2.4, 3.04], [5.0, 2.5, 3.05]],\n+                dims=(\"x\", \"axis\"),\n+            ),\n+            id=\"timedelta-complex\",\n+        ),\n     ],\n )\n def test_polyval(\n",
  "pydata__xarray-6721": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex cab9007..0a83972 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -220,8 +220,29 @@ class InaccessibleVariableDataStore(backends.InMemoryDataStore):\n         return {k: lazy_inaccessible(k, v) for k, v in self._variables.items()}\n \n \n+from xarray.backends.zarr import ZarrArray\n+import pytest\n+\n class TestDataset:\n-    def test_repr(self) -> None:\n+    def test_chunks_does_not_load_data(self) -> None:\n+        # Regression test for GH6538\n+        store = InaccessibleVariableDataStore()\n+        create_test_data().dump_to_store(store)\n+        ds = open_dataset(store, engine='zarr')\n+        \n+        # Ensure chunks property doesn't load data into memory\n+        original_data_loader = ZarrArray.__getitem__\n+        \n+        def mock_data_loader(self, item):\n+            raise RuntimeError(\"Data is being loaded unexpectedly!\")\n+\n+        try:\n+            ZarrArray.__getitem__ = mock_data_loader\n+            ds.chunks\n+        except RuntimeError:\n+            pytest.fail(\"Accessing chunks caused data to be loaded.\")\n+        finally:\n+            ZarrArray.__getitem__ = original_data_loader\n         data = create_test_data(seed=123)\n         data.attrs[\"foo\"] = \"bar\"\n         # need to insert str dtype at runtime to handle different endianness\n",
  "pydata__xarray-6744": "diff --git a/xarray/tests/test_rolling.py b/xarray/tests/test_rolling.py\nindex 0a9ef75..528c35a 100644\n--- a/xarray/tests/test_rolling.py\n+++ b/xarray/tests/test_rolling.py\n@@ -49,7 +49,33 @@ class TestDataArrayRolling:\n                     expected.values[expected.values.nonzero()],\n                 )\n \n-    @pytest.mark.parametrize(\"da\", (1,), indirect=True)\n+    @pytest.mark.parametrize(\"da\", (1, 2), indirect=True)\n+    @pytest.mark.parametrize(\"center\", [True, False])\n+    @pytest.mark.parametrize(\"size\", [1, 2, 3, 7])\n+    def test_rolling_iter_center(self, da, center: bool, size: int) -> None:\n+        rolling_obj = da.rolling(time=size, center=center)\n+        rolling_obj_mean = rolling_obj.mean()\n+\n+        assert len(rolling_obj.window_labels) == len(da[\"time\"])\n+        assert_identical(rolling_obj.window_labels, da[\"time\"])\n+\n+        for i, (label, window_da) in enumerate(rolling_obj):\n+            assert label == da[\"time\"].isel(time=i)\n+\n+            actual = rolling_obj_mean.isel(time=i)\n+            expected = window_da.mean(\"time\")\n+\n+            # Check if the manual iteration respects the 'center' parameter\n+            if center:\n+                mid_point = size // 2\n+                start = max(0, i - mid_point)\n+                end = min(len(da[\"time\"]), i - mid_point + size)\n+            else:\n+                start = max(0, i - size + 1)\n+                end = i + 1\n+\n+            expected_window = da.isel(time=slice(start, end)).mean(\"time\")\n+            np.testing.assert_allclose(actual.values, expected_window.values, equal_nan=True)\n     def test_rolling_repr(self, da) -> None:\n         rolling_obj = da.rolling(time=7)\n         assert repr(rolling_obj) == \"DataArrayRolling [time->7]\"\n",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "diff --git a/xarray/tests/test_indexes.py b/xarray/tests/test_indexes.py\nindex fa8bd84..fc3f56a 100644\n--- a/xarray/tests/test_indexes.py\n+++ b/xarray/tests/test_indexes.py\n@@ -688,12 +688,31 @@ def test_safe_cast_to_index_cftimeindex():\n         assert isinstance(actual, type(expected))\n \n \n-# Test that datetime.datetime objects are never used in a CFTimeIndex\n-@requires_cftime\n-def test_safe_cast_to_index_datetime_datetime():\n-    dates = [datetime(1, 1, day) for day in range(1, 20)]\n+import pytest\n+import numpy as np\n+import xarray as xr\n \n-    expected = pd.Index(dates)\n-    actual = safe_cast_to_index(np.array(dates))\n-    assert_array_equal(expected, actual)\n-    assert isinstance(actual, pd.Index)\n+@pytest.mark.parametrize(\"dtype\", [\"int32\", \"float32\"])\n+def test_restore_dtype_on_multiindexes(dtype: str) -> None:\n+    foo = xr.Dataset(coords={\"bar\": (\"bar\", np.array([0, 1], dtype=dtype))})\n+    foo = foo.stack(baz=(\"bar\",))\n+    assert str(foo[\"bar\"].values.dtype) == dtype\n+\n+def test_stack_int32_preserves_dtype():\n+    ds = xr.Dataset(coords={'a': np.array([0, 1, 2], dtype='int32')})\n+    stacked = ds.stack(b=('a',))\n+    assert ds['a'].values.dtype == stacked['a'].values.dtype\n+\n+def test_stack_float32_preserves_dtype():\n+    ds = xr.Dataset(coords={'a': np.array([0.1, 0.2, 0.3], dtype='float32')})\n+    stacked = ds.stack(b=('a',))\n+    assert ds['a'].values.dtype == stacked['a'].values.dtype\n+\n+def test_stack_with_multiple_dtypes():\n+    ds = xr.Dataset(coords={\n+        'int_coord': np.array([1, 2, 3], dtype='int32'),\n+        'float_coord': np.array([1.1, 2.2, 3.3], dtype='float32')\n+    })\n+    stacked = ds.stack(new_dim=('int_coord', 'float_coord'))\n+    assert ds['int_coord'].values.dtype == stacked['int_coord'].values.dtype\n+    assert ds['float_coord'].values.dtype == stacked['float_coord'].values.dtype\n",
  "pylint-dev__pylint-4970": "",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..ce38921 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -94,9 +94,26 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n-def test_unknown_py_version(capsys: CaptureFixture) -> None:\n+def test_short_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the -v flag.\"\"\"\n+    Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n+def test_long_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the --verbose flag.\"\"\"\n+    Run([str(EMPTY_MODULE), \"--verbose\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n+def test_verbose_without_argument(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that -v without argument does not fail.\"\"\"\n+    with pytest.raises(SystemExit):\n+        Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"expected one argument\" not in output.err\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9123ae4..b9c01d5 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1227,6 +1227,40 @@ class TestRunTC:\n         # Error code should not include bit-value 1 for crash\n         assert not ex.value.code % 2\n \n+    def test_recursive_ignore_parameters(self):\n+        \"\"\"Test that --ignore, --ignore-paths, and --ignore-patterns work in recursive mode.\"\"\"\n+        regrtest_directory = join(HERE, \"regrtest_data\", \"directory\")\n+\n+        # Test ignoring specific file\n+        self._runtest(\n+            [regrtest_directory, \"--recursive=y\", \"--ignore\", \"subdirectory/failing.py\"],\n+            code=0,\n+        )\n+\n+        # Test ignoring a directory\n+        self._runtest(\n+            [regrtest_directory, \"--recursive=y\", \"--ignore\", \"ignored_subdirectory\"],\n+            code=0,\n+        )\n+\n+        # Test ignore patterns for files\n+        self._runtest(\n+            [regrtest_directory, \"--recursive=y\", \"--ignore-patterns\", \"failing.*\"],\n+            code=0,\n+        )\n+\n+        # Test ignore patterns for directories\n+        self._runtest(\n+            [regrtest_directory, \"--recursive=y\", \"--ignore-patterns\", \"ignored_.*\"],\n+            code=0,\n+        )\n+\n+        # Test ignore paths\n+        self._runtest(\n+            [regrtest_directory, \"--recursive=y\", \"--ignore-paths\", \".*ignored.*\"],\n+            code=0,\n+        )\n+\n     def test_regression_recursive(self):\n         self._test_output(\n             [join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"), \"--recursive=n\"],\n",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..dcb2050 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,28 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_paths_respected_with_recursive(self):\n+        \"\"\"Tests that ignore-paths option is respected with --recursive=y.\"\"\"\n+        with _test_sys_path():\n+            # Adjust sys.path to prevent conflicts with regrtest_data\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                # Change directory to a test directory\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                # Run pylint with --recursive and ignore-paths options\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^ignored_subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7277": "",
  "pytest-dev__pytest-10051": "",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_debugging.py b/testing/test_debugging.py\nindex 912abd7..2d8b22b 100644\n--- a/testing/test_debugging.py\n+++ b/testing/test_debugging.py\n@@ -192,6 +192,28 @@ class TestPDB:\n         child.sendeof()\n         self.flush(child)\n \n+    def test_pdb_teardown_not_called_on_skip(self, pytester: Pytester) -> None:\n+        \"\"\"Test that tearDown is not called when class is skipped and --pdb is used\"\"\"\n+        p1 = pytester.makepyfile(\n+            \"\"\"\n+            import unittest\n+            @unittest.skip('Class is skipped')\n+            class TestSkipTearDown(unittest.TestCase):\n+                def setUp(self):\n+                    print(\"setUp called\")\n+                def tearDown(self):\n+                    print(\"tearDown called\")\n+                def test_method(self):\n+                    assert False\n+        \"\"\"\n+        )\n+        result = pytester.runpytest_inprocess(\"--pdb\", p1)\n+        result.stdout.fnmatch_lines([\n+            \"*Class is skipped*\",\n+            \"* 1 skipped *\",\n+        ])\n+        assert \"tearDown called\" not in result.stdout.str()\n+\n     def test_pdb_print_captured_stdout_and_stderr(self, pytester: Pytester) -> None:\n         p1 = pytester.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-5262": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 1f092b0..6b1b0f9 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -1051,15 +1051,30 @@ class TestFDCapture(object):\n             cap.done()\n             pytest.raises(AttributeError, cap.suspend)\n \n+import pytest\n+import sys\n \n-@contextlib.contextmanager\n-def saved_fd(fd):\n-    new_fd = os.dup(fd)\n+def test_capfd_sys_stdout_mode(capfd):\n+    out, err = capfd.readouterr()\n+    # Ensure that the mode of sys.stdout does not contain 'b'\n+    assert \"b\" not in sys.stdout.mode\n+\n+def test_encoded_file_write_str():\n+    from _pytest.capture import EncodedFile\n+    import io\n+\n+    # Create a buffer and an EncodedFile wrapping it\n+    buffer = io.StringIO()\n+    encoded_file = EncodedFile(buffer, encoding='utf-8')\n+\n+    # Try writing a string\n     try:\n-        yield\n-    finally:\n-        os.dup2(new_fd, fd)\n-        os.close(new_fd)\n+        encoded_file.write(\"This is a test string.\")\n+    except TypeError:\n+        pytest.fail(\"EncodedFile raised TypeError when writing a string\")\n+\n+    # Ensure the string was written\n+    assert buffer.getvalue() == \"This is a test string.\"\n \n \n class TestStdCapture(object):\n",
  "pytest-dev__pytest-5631": "diff --git a/testing/python/integration.py b/testing/python/integration.py\nindex 044a31a..826560d 100644\n--- a/testing/python/integration.py\n+++ b/testing/python/integration.py\n@@ -178,6 +178,22 @@ class TestMockDecoration:\n         reprec = testdir.inline_run()\n         reprec.assertoutcome(passed=2)\n \n+    def test_patch_with_numpy_array(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            import numpy as np\n+            from unittest.mock import patch\n+\n+            class TestNumpyPatch:\n+                @patch('os.urandom', new=np.array([1.0, 2.0, 3.0]))\n+                def test_patch_array(self):\n+                    import os\n+                    assert (os.urandom(3) == np.array([1.0, 2.0, 3.0])).all()\n+            \"\"\"\n+        )\n+        reprec = testdir.inline_run()\n+        reprec.assertoutcome(passed=1)\n+\n     def test_mock(self, testdir):\n         pytest.importorskip(\"mock\", \"1.0.1\")\n         testdir.makepyfile(\n",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..8e76592 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -116,8 +116,30 @@ class TestPaste(object):\n             monkeypatch.setattr(urllib, \"urlopen\", mocked)\n         else:\n             import urllib.request\n-\n             monkeypatch.setattr(urllib.request, \"urlopen\", mocked)\n+\n+    def test_create_new_paste_with_text_lexer(self, pastebin, mocked_urlopen):\n+        \"\"\"Test that the paste is created with lexer set to 'text'.\"\"\"\n+        # Create a mock response to simulate a successful paste creation\n+        def mocked_response(*args, **kwargs):\n+            class MockHTTPResponse:\n+                def read(self):\n+                    return b'<a href=\"/raw/3c0c6750bd\">'\n+                def decode(self, encoding):\n+                    return self.read().decode(encoding)\n+            return MockHTTPResponse()\n+\n+        monkeypatch.setattr(urllib.request, \"urlopen\", mocked_response)\n+\n+        result = pastebin.create_new_paste(b\"full-paste-contents\")\n+        assert result == \"https://bpaste.net/show/3c0c6750bd\"\n+        assert len(mocked_urlopen) == 1\n+        url, data = mocked_urlopen[0]\n+        assert type(data) is bytes\n+        assert url == \"https://bpaste.net\"\n+        assert \"lexer=text\" in data.decode()\n+        assert \"code=full-paste-contents\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n         return calls\n \n     def test_create_new_paste(self, pastebin, mocked_urlopen):\n@@ -130,4 +152,4 @@ class TestPaste(object):\n         assert url == \"https://bpaste.net\"\n         assert \"lexer=%s\" % lexer in data.decode()\n         assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n",
  "pytest-dev__pytest-6202": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex fb6b260..5d58328 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -702,6 +702,26 @@ class Test_genitems:\n         assert items[1].name == \"testmethod_one\"\n         assert items[2].name == \"testmethod_one\"\n \n+        # Additional test case for issue verification\n+        p2 = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+\n+            @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+            def testmethod_two(arg0):\n+                pass\n+\n+            class TestY(object):\n+                @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+                def testmethod_two(self, arg0):\n+                    pass\n+            \"\"\"\n+        )\n+        items2, _ = testdir.inline_genitems(p2)\n+        assert len(items2) == 2  # Ensure both function and class method tests are collected\n+        assert items2[0].name == 'testmethod_two[.[]'  # Verify correct test name for function\n+        assert items2[1].name == 'testmethod_two[.[]'  # Verify correct test name for class method\n+\n         # let's also test getmodpath here\n         assert items[0].getmodpath() == \"testone\"\n         assert items[1].getmodpath() == \"TestX.testmethod_one\"\n",
  "pytest-dev__pytest-7205": "diff --git a/testing/test_setuponly.py b/testing/test_setuponly.py\nindex 8211d39..e5a789a 100644\n--- a/testing/test_setuponly.py\n+++ b/testing/test_setuponly.py\n@@ -1,3 +1,4 @@\n+\n import pytest\n from _pytest.config import ExitCode\n \n@@ -200,8 +201,21 @@ def test_show_fixtures_with_parameter_ids_function(testdir, mode):\n \n     result.stdout.fnmatch_lines([\"*SETUP    F foobar?FOO?\", \"*SETUP    F foobar?BAR?\"])\n \n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue 7126, BytesWarning when using --setup-show with bytes parameter\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n \n-def test_dynamic_fixture_request(testdir):\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n     p = testdir.makepyfile(\n         \"\"\"\n         import pytest\n",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..eb79072 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -607,7 +607,19 @@ class TestSkip:\n         result = testdir.runpytest(\"-rs\")\n         result.stdout.fnmatch_lines([\"*unconditional skip*\", \"*1 skipped*\"])\n \n-    def test_skip_with_reason(self, testdir):\n+    def test_skip_location_reporting_with_runxfail(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            def test_skip_location() -> None:\n+                assert 0\n+            \"\"\"\n+        )\n+        # Run pytest with -rs and --runxfail\n+        result = testdir.runpytest(\"-rs\", \"--runxfail\")\n+        # Check that the SKIPPED message points to the correct test location\n+        result.stdout.fnmatch_lines([\"SKIPPED [1] test_skip_location_reporting_with_runxfail.py:3: unconditional skip\", \"*1 skipped*\"])\n         testdir.makepyfile(\n             \"\"\"\n             import pytest\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..89cbce0 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,7 +1,9 @@\n+\n import sys\n \n import pytest\n from _pytest.runner import runtestprotocol\n+from _pytest.pytester import Testdir\n from _pytest.skipping import evaluate_skip_marks\n from _pytest.skipping import evaluate_xfail_marks\n from _pytest.skipping import pytest_runtest_setup\n@@ -154,7 +156,30 @@ class TestEvaluation:\n \n \n class TestXFail:\n-    @pytest.mark.parametrize(\"strict\", [True, False])\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n     def test_xfail_simple(self, testdir, strict):\n         item = testdir.getitem(\n             \"\"\"\n@@ -463,7 +488,30 @@ class TestXFail:\n         result.stdout.fnmatch_lines([\"*XFAIL*\", \"*unsupported feature*\"])\n         assert result.ret == 0\n \n-    @pytest.mark.parametrize(\"strict\", [True, False])\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n     def test_strict_xfail(self, testdir, strict):\n         p = testdir.makepyfile(\n             \"\"\"\n@@ -490,7 +538,30 @@ class TestXFail:\n         assert result.ret == (1 if strict else 0)\n         assert testdir.tmpdir.join(\"foo_executed\").isfile()\n \n-    @pytest.mark.parametrize(\"strict\", [True, False])\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n     def test_strict_xfail_condition(self, testdir, strict):\n         p = testdir.makepyfile(\n             \"\"\"\n@@ -506,7 +577,30 @@ class TestXFail:\n         result.stdout.fnmatch_lines([\"*1 passed*\"])\n         assert result.ret == 0\n \n-    @pytest.mark.parametrize(\"strict\", [True, False])\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n     def test_xfail_condition_keyword(self, testdir, strict):\n         p = testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..37d06f0 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -514,6 +514,17 @@ class TestCaptureFixture:\n         )\n         reprec.assertoutcome(passed=1)\n \n+    @pytest.mark.parametrize(\"newline\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_cafd_preserves_newlines(self, capfd, newline):\n+        print(\"test\", end=newline)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(newline)\n+\n+    def test_capfd_carriage_return(self, capfd):\n+        print(\"text with carriage return\", end='\\r')\n+        out, err = capfd.readouterr()\n+        assert out == \"text with carriage return\\r\"\n+\n     def test_capfdbinary(self, testdir):\n         reprec = testdir.inline_runsource(\n             \"\"\"\\\n",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..56aa753 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import pytest\n@@ -28,6 +29,36 @@ def test_change_level(caplog):\n \n \n def test_change_level_undo(testdir):\n+    \"\"\"Ensure that 'set_level' is undone after the end of the test (both logger and handler levels).\"\"\"\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test1(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(logging.WARNING)\n+            assert caplog.handler.level == logging.WARNING\n+\n+        def test2(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(logging.ERROR, logger=\"some_logger\")\n+            logger = logging.getLogger(\"some_logger\")\n+            assert logger.level == logging.ERROR\n+\n+        def test3(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(logging.DEBUG)\n+            assert caplog.handler.level == logging.DEBUG\n+\n+        def test4(caplog):\n+            # This checks that both logger and handler are reset\n+            assert caplog.handler.level == 0\n+            logger = logging.getLogger(\"some_logger\")\n+            assert logger.level == logging.NOTSET\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=4)\n     \"\"\"Ensure that 'set_level' is undone after the end of the test\"\"\"\n     testdir.makepyfile(\n         \"\"\"\n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..1ddf3c0 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,4 +1,30 @@\n+\n import os\n+def test_collect_symlink_dir(pytester: Pytester) -> None:\n+    \"\"\"A symlinked directory is collected.\"\"\"\n+    dir = pytester.mkdir(\"dir\")\n+    dir.joinpath(\"test_it.py\").write_text(\"def test_it(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_dir\").symlink_to(dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+def test_collect_symlink_to_nonexistent_dir(pytester: Pytester) -> None:\n+    \"\"\"Ensure that a symlink to a non-existent directory is handled gracefully.\"\"\"\n+    symlink_path = pytester.path.joinpath(\"broken_symlink\")\n+    symlink_path.symlink_to(\"non_existent_dir\")\n+    result = pytester.runpytest()\n+    # Assert no errors occur, and no tests are collected from a non-existent directory\n+    result.assert_outcomes()\n+\n+def test_collect_symlink_dir_with_subdir(pytester: Pytester) -> None:\n+    \"\"\"A symlinked directory with a subdirectory should also be collected.\"\"\"\n+    dir = pytester.mkdir(\"dir_with_subdir\")\n+    subdir = dir.mkdir(\"subdir\")\n+    subdir.joinpath(\"test_sub.py\").write_text(\"def test_sub(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_with_sub\").symlink_to(dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n import pprint\n import sys\n import textwrap\n@@ -9,7 +35,7 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n-from _pytest.pytester import Testdir\n+from _pytest.pytester import Testdir, Pytester\n \n \n class TestCollector:\n",
  "pytest-dev__pytest-8399": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 2c720b0..5dd2f4e 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -300,9 +300,31 @@ def test_setup_setUpClass(pytester: Pytester) -> None:\n     )\n     reprec = pytester.inline_run(testpath)\n     reprec.assertoutcome(passed=3)\n+def test_unittest_setUpClass_fixture_visibility(pytester: Pytester) -> None:\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n \n+        class Tests(unittest.TestCase):\n+            @classmethod\n+            def setUpClass(cls):\n+                pass\n \n-def test_setup_class(pytester: Pytester) -> None:\n+            def test_1(self):\n+                pass\n+        \"\"\"\n+    )\n+    # Check without verbosity, the fixture should not be listed\n+    result = pytester.runpytest(\"--fixtures\")\n+    assert result.ret == 0\n+    result.stdout.no_fnmatch_line(\"*unittest_setUpClass_fixture_Tests*\")\n+\n+    # Check with verbosity, the fixture should be listed\n+    result = pytester.runpytest(\"--fixtures\", \"-v\")\n+    assert result.ret == 0\n+    result.stdout.fnmatch_lines(\n+        \"*unittest_setUpClass_fixture_Tests [class scope]*\"\n+    )\n     testpath = pytester.makepyfile(\n         \"\"\"\n         import unittest\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..1390fbc 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -597,8 +597,32 @@ def test_ridgecv_store_cv_values():\n     r.fit(x, y)\n     assert_equal(r.cv_values_.shape, (n_samples, n_responses, n_alphas))\n \n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    rng = np.random.RandomState(42)\n+\n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-0.8, -1.0],\n+                  [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+\n+    n_samples = x.shape[0]\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n \n-def test_ridgecv_sample_weight():\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+    # with len(y.shape) == 1\n+    n_targets = 1\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n+\n+    # with len(y.shape) == 2\n+    y = np.array([[1, 1, 1, -1, -1],\n+                  [1, -1, 1, -1, 1],\n+                  [-1, -1, 1, -1, -1]]).transpose()\n+    n_targets = y.shape[1]\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n     rng = np.random.RandomState(0)\n     alphas = (0.1, 1.0, 10.0)\n \n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..912d16b 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -183,8 +183,15 @@ def test_int_overflow_mutual_info_score():\n \n     assert_all_finite(mutual_info_score(x.ravel(), y.ravel()))\n \n-\n-def test_entropy():\n+from sklearn.metrics import fowlkes_mallows_score\n+from sklearn.utils.testing import assert_all_finite\n+\n+def test_fowlkes_mallows_score_no_overflow():\n+    # Test to ensure fowlkes_mallows_score does not overflow for large inputs\n+    labels_true = np.array([0] * 100000 + [1] * 100000)\n+    labels_pred = np.array([0] * 50000 + [1] * 50000 + [2] * 50000 + [3] * 50000)\n+    score = fowlkes_mallows_score(labels_true, labels_pred)\n+    assert_all_finite(score)\n     ent = entropy([0, 0, 42.])\n     assert_almost_equal(ent, 0.6365141, 5)\n     assert_almost_equal(entropy([]), 1)\n",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..b00bc0a 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -558,8 +558,43 @@ def test_feature_names():\n     for idx, name in enumerate(feature_names):\n         assert_equal(idx, cv.vocabulary_.get(name))\n \n+def test_countvectorizer_custom_vocabulary_get_feature_names():\n+    # Define a custom vocabulary\n+    custom_vocabulary = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+\n+    # Initialize CountVectorizer with a custom vocabulary\n+    vectorizer_with_vocab = CountVectorizer(vocabulary=custom_vocabulary)\n+\n+    # Test get_feature_names without fitting\n+    feature_names = vectorizer_with_vocab.get_feature_names()\n+    assert_array_equal(custom_vocabulary, feature_names)\n+\n+    # Transform the corpus\n+    corpus = [\n+        'This is the first document.',\n+        'This is the second second document.',\n+        'And the third one.',\n+        'Is this the first document?'\n+    ]\n+    X = vectorizer_with_vocab.transform(corpus)\n+\n+    # Ensure vocabulary is set and transform is successful\n+    assert_equal(X.shape, (4, 9))\n+    assert_true(hasattr(vectorizer_with_vocab, \"vocabulary_\"))\n+    assert_true(vectorizer_with_vocab.fixed_vocabulary_)\n+\n+    # Fit and transform using a default vocabulary\n+    vectorizer_without_vocab = CountVectorizer()\n+    X = vectorizer_without_vocab.fit_transform(corpus)\n+\n+    # Test get_feature_names after fitting\n+    n_samples, n_features = X.shape\n+    assert_equal(len(vectorizer_without_vocab.vocabulary_), n_features)\n+    feature_names = vectorizer_without_vocab.get_feature_names()\n+    assert_equal(len(feature_names), n_features)\n \n-def test_vectorizer_max_features():\n+    # Ensure transform output is valid\n+    assert_equal(X.shape[0], len(corpus))\n     vec_factories = (\n         CountVectorizer,\n         TfidfVectorizer,\n",
  "scikit-learn__scikit-learn-11310": "",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..a73244a 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -21,8 +21,8 @@ from sklearn.utils.testing import assert_true\n from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import ignore_warnings\n from sklearn.utils.testing import assert_warns_message\n-\n-from sklearn.exceptions import ConvergenceWarning\n+from sklearn.metrics.scorer import get_scorer\n+from sklearn.linear_model import _log_reg_scoring_path\n from sklearn.exceptions import ChangedBehaviorWarning\n from sklearn.linear_model.logistic import (\n     LogisticRegression,\n@@ -491,8 +491,32 @@ def test_logistic_cv():\n     scores = np.asarray(list(lr_cv.scores_.values()))\n     assert_array_equal(scores.shape, (1, 3, 1))\n \n-\n-def test_multinomial_logistic_regression_string_inputs():\n+@pytest.mark.parametrize('scoring, multiclass_agg_list',\n+                         [('accuracy', ['']),\n+                          ('precision', ['_macro', '_weighted']),\n+                          ('f1', ['_macro', '_weighted']),\n+                          ('neg_log_loss', ['']),\n+                          ('recall', ['_macro', '_weighted'])])\n+def test_logistic_cv_multinomial_score(scoring, multiclass_agg_list):\n+    # test that LogisticRegressionCV uses the right score to compute its\n+    # cross-validation scores when using a multinomial scoring\n+    # see https://github.com/scikit-learn/scikit-learn/issues/8720\n+    X, y = make_classification(n_samples=100, random_state=0, n_classes=3,\n+                               n_informative=6)\n+    train, test = np.arange(80), np.arange(80, 100)\n+    lr = LogisticRegression(C=1., solver='lbfgs', multi_class='multinomial')\n+    # we use lbfgs to support multinomial\n+    params = lr.get_params()\n+    # we store the params to set them further in _log_reg_scoring_path\n+    for key in ['C', 'n_jobs', 'warm_start']:\n+        del params[key]\n+    lr.fit(X[train], y[train])\n+    for averaging in multiclass_agg_list:\n+        scorer = get_scorer(scoring + averaging)\n+        assert_array_almost_equal(\n+            _log_reg_scoring_path(X, y, train, test, Cs=[1.],\n+                                  scoring=scorer, **params)[2][0],\n+            scorer(lr, X[test], y[test]))\n     # Test with string labels for LogisticRegression(CV)\n     n_samples, n_features, n_classes = 50, 5, 3\n     X_ref, y = make_classification(n_samples=n_samples, n_features=n_features,\n",
  "scikit-learn__scikit-learn-12585": "diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 4752f9c..ee97c8d 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -167,7 +167,21 @@ def test_clone_sparse_matrices():\n         assert_array_equal(clf.empty.toarray(), clf_cloned.empty.toarray())\n \n \n-def test_repr():\n+def test_clone_estimator_types():\n+    # Check that clone works for parameters that are types rather than\n+    # instances\n+    from sklearn.base import clone\n+    class MyEstimator:\n+        def __init__(self, empty=None):\n+            self.empty = empty\n+\n+        def get_params(self, deep=True):\n+            return {'empty': self.empty}\n+\n+    clf = MyEstimator(empty=MyEstimator)\n+    clf2 = clone(clf)\n+\n+    assert clf.empty is clf2.empty\n     # Smoke test the repr of the base estimator.\n     my_estimator = MyEstimator()\n     repr(my_estimator)\n",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..68de3f9 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -19,14 +19,33 @@ from sklearn.utils.testing import TempMemmap\n from sklearn.exceptions import ConvergenceWarning\n from sklearn import linear_model, datasets\n from sklearn.linear_model.least_angle import _lars_path_residues\n+from sklearn.linear_model.least_angle import LassoLarsIC\n+import numpy as np\n \n diabetes = datasets.load_diabetes()\n X, y = diabetes.data, diabetes.target\n \n # TODO: use another dataset that has multiple drops\n \n-\n-def test_simple():\n+@pytest.mark.parametrize('copy_X_init, copy_X_fit', [(True, None), (False, None), (True, True), (False, True), (True, False), (False, False)])\n+def test_lasso_lars_copyX_combined_behaviour(copy_X_init, copy_X_fit):\n+    \"\"\"\n+    Test that the LassoLarsIC respects the copy_X parameter from both the initializer and fit method.\n+    \"\"\"\n+    lasso_lars = LassoLarsIC(copy_X=copy_X_init, precompute=False)\n+    rng = np.random.RandomState(0)\n+    X = rng.normal(0, 1, (100, 5))\n+    X_copy = X.copy()\n+    y = X[:, 2]\n+    \n+    if copy_X_fit is not None:\n+        lasso_lars.fit(X, y, copy_X=copy_X_fit)\n+    else:\n+        lasso_lars.fit(X, y)\n+        \n+    # Determine the expected behaviour\n+    expected_copy_X = copy_X_fit if copy_X_fit is not None else copy_X_init\n+    assert expected_copy_X == np.array_equal(X, X_copy)\n     # Principle of Lars is to keep covariances tied and decreasing\n \n     # also test verbose output\n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..b18216f 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -493,8 +493,32 @@ def test_shuffle_stratifiedkfold():\n         assert_not_equal(set(test0), set(test1))\n     check_cv_coverage(kf0, X_40, y, groups=None, expected_n_splits=5)\n \n-\n-def test_kfold_can_detect_dependent_samples_on_digits():  # see #2372\n+def test_shuffle_stratifiedkfold_different_random_states():\n+    # Test that different random states result in different splits\n+    # when shuffling is enabled.\n+    X = np.arange(20)\n+    y = [0] * 10 + [1] * 10\n+    kf1 = StratifiedKFold(5, shuffle=True, random_state=42)\n+    kf2 = StratifiedKFold(5, shuffle=True, random_state=43)\n+    \n+    test_set1 = sorted([tuple(test_idx) for _, test_idx in kf1.split(X, y)])\n+    test_set2 = sorted([tuple(test_idx) for _, test_idx in kf2.split(X, y)])\n+    \n+    assert test_set1 != test_set2, \"Test sets should differ for different random states\"\n+    \n+def test_shuffle_stratifiedkfold_consistency_same_random_state():\n+    # Test that the same random state results in the same splits\n+    # when shuffling is enabled.\n+    X = np.arange(20)\n+    y = [0] * 10 + [1] * 10\n+    random_state = 42\n+    kf1 = StratifiedKFold(5, shuffle=True, random_state=random_state)\n+    kf2 = StratifiedKFold(5, shuffle=True, random_state=random_state)\n+    \n+    test_set1 = sorted([tuple(test_idx) for _, test_idx in kf1.split(X, y)])\n+    test_set2 = sorted([tuple(test_idx) for _, test_idx in kf2.split(X, y)])\n+    \n+    assert test_set1 == test_set2, \"Test sets should be the same for the same random state\"\n     # The digits samples are dependent: they are apparently grouped by authors\n     # although we don't have any information on the groups segment locations\n     # for this data. We can highlight this fact by computing k-fold cross-\n",
  "scikit-learn__scikit-learn-13135": "diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py\nindex a18a1c5..aa1e6d0 100644\n--- a/sklearn/preprocessing/tests/test_discretization.py\n+++ b/sklearn/preprocessing/tests/test_discretization.py\n@@ -185,11 +185,11 @@ def test_invalid_strategy_option():\n \n \n @pytest.mark.parametrize(\n-    'strategy, expected_2bins, expected_3bins',\n-    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2]),\n-     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2]),\n-     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2])])\n-def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n+    'strategy, expected_2bins, expected_3bins, expected_5bins',\n+    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2], [0, 0, 1, 1, 4, 4]),\n+     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2], [0, 0, 1, 2, 3, 4]),\n+     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2], [0, 1, 2, 3, 4, 4])])\n+def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins, expected_5bins):\n     X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n \n     # with 2 bins\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..7518de5 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -597,8 +597,14 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_array_equal(Y_pred1, Y_pred2)\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n-\n-def test_gaussian_mixture_fit():\n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    rng = np.random.RandomState(42)\n+    X = rng.randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=10, random_state=rng)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n     rand_data = RandomData(rng)\n",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..77f3b12 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -11,6 +12,8 @@ import pytest\n import numpy as np\n \n from sklearn.utils.testing import assert_array_equal\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_raises\n from sklearn.utils.testing import assert_raises_regex\n",
  "scikit-learn__scikit-learn-13779": "",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..b69df9c 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -396,8 +396,27 @@ def test_export_text():\n     assert export_text(reg, decimals=1) == expected_report\n     assert export_text(reg, decimals=1, show_weights=True) == expected_report\n \n+def test_export_single_feature():\n+    from sklearn.tree import DecisionTreeClassifier\n+    from sklearn.tree import export_text\n+    from sklearn.datasets import load_iris\n \n-def test_plot_tree_entropy(pyplot):\n+    # Load data and keep only one feature\n+    X, y = load_iris(return_X_y=True)\n+    X = X[:, 0].reshape(-1, 1)\n+\n+    # Train a decision tree classifier\n+    tree = DecisionTreeClassifier()\n+    tree.fit(X, y)\n+\n+    # Export the text representation of the tree\n+    expected_report = dedent(\"\"\"\n+    |--- class: 0\n+    \"\"\").lstrip()  # Replace with expected class based on the dataset used\n+\n+    # This will check if export_text does not raise an IndexError\n+    # when only one feature is used.\n+    assert export_text(tree, feature_names=['sepal_length']) == expected_report\n     # mostly smoke tests\n     # Check correctness of export_graphviz for criterion = entropy\n     clf = DecisionTreeClassifier(max_depth=3,\n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..b6c6122 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1554,7 +1554,30 @@ def test_LogisticRegressionCV_no_refit(multi_class):\n     assert lrcv.coef_.shape == (n_classes, n_features)\n \n \n-def test_LogisticRegressionCV_elasticnet_attribute_shapes():\n+@pytest.mark.parametrize('penalty', ('l2', 'elasticnet'))\n+@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial', 'auto'))\n+def test_LogisticRegressionCV_no_refit_issue(penalty, multi_class):\n+    # Test to ensure no IndexError is raised with LogisticRegressionCV and refit=False\n+\n+    n_classes = 2\n+    n_features = 3\n+    X, y = make_classification(n_samples=1000, n_classes=n_classes,\n+                               n_informative=n_classes, n_features=n_features,\n+                               random_state=29)\n+\n+    if penalty == 'elasticnet':\n+        l1_ratios = np.linspace(0, 1, 2)\n+    else:\n+        l1_ratios = None\n+\n+    lrcv = LogisticRegressionCV(penalty=penalty, solver='saga', tol=1e-2,\n+                                refit=False, multi_class=multi_class,\n+                                random_state=0)\n+    lrcv.fit(X, y)\n+\n+    # Check if C_ and coef_ are non-empty and have expected shapes\n+    assert lrcv.C_.shape[0] > 0\n+    assert lrcv.coef_.shape[1] == n_features\n     # Make sure the shapes of scores_ and coefs_paths_ attributes are correct\n     # when using elasticnet (added one dimension for l1_ratios)\n \n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/tests/test_show_versions.py b/sklearn/utils/tests/test_show_versions.py\nindex fa39255..2e8b243 100644\n--- a/sklearn/utils/tests/test_show_versions.py\n+++ b/sklearn/utils/tests/test_show_versions.py\n@@ -23,6 +23,17 @@ def test_get_deps_info():\n     assert 'Cython' in deps_info\n     assert 'pandas' in deps_info\n     assert 'matplotlib' in deps_info\n+    assert 'joblib' in deps_info  # Added assertion for joblib\n+    deps_info = _get_deps_info()\n+\n+    assert 'pip' in deps_info\n+    assert 'setuptools' in deps_info\n+    assert 'sklearn' in deps_info\n+    assert 'numpy' in deps_info\n+    assert 'scipy' in deps_info\n+    assert 'Cython' in deps_info\n+    assert 'pandas' in deps_info\n+    assert 'matplotlib' in deps_info\n \n \n def test_show_versions_with_blas(capsys):\n@@ -30,4 +41,10 @@ def test_show_versions_with_blas(capsys):\n     out, err = capsys.readouterr()\n     assert 'python' in out\n     assert 'numpy' in out\n-    assert 'BLAS' in out\n+    assert 'BLAS' in out\n+    assert 'joblib' in out  # Added assertion for joblib\n+    show_versions()\n+    out, err = capsys.readouterr()\n+    assert 'python' in out\n+    assert 'numpy' in out\n+    assert 'BLAS' in out\n",
  "scikit-learn__scikit-learn-14496": "diff --git a/sklearn/cluster/tests/test_optics.py b/sklearn/cluster/tests/test_optics.py\nindex 6c9dac3..297fbf3 100644\n--- a/sklearn/cluster/tests/test_optics.py\n+++ b/sklearn/cluster/tests/test_optics.py\n@@ -125,6 +125,40 @@ def test_extract_xi():\n     assert_array_equal(clust.labels_, expected_labels)\n \n \n+import numpy as np\n+from sklearn.utils import shuffle\n+from sklearn.cluster import OPTICS\n+from numpy.testing import assert_array_equal\n+\n+def test_float_min_samples():\n+    # Test with float min_samples\n+    rng = np.random.RandomState(0)\n+    n_points_per_cluster = 5\n+\n+    C1 = [-5, -2] + .8 * rng.randn(n_points_per_cluster, 2)\n+    C2 = [4, -1] + .1 * rng.randn(n_points_per_cluster, 2)\n+    C3 = [1, -2] + .2 * rng.randn(n_points_per_cluster, 2)\n+    C4 = [-2, 3] + .3 * rng.randn(n_points_per_cluster, 2)\n+    C5 = [3, -2] + .6 * rng.randn(n_points_per_cluster, 2)\n+    C6 = [5, 6] + .2 * rng.randn(n_points_per_cluster, 2)\n+\n+    X = np.vstack((C1, C2, C3, C4, C5, np.array([[100, 100]]), C6))\n+    expected_labels = np.r_[[2] * 5, [0] * 5, [1] * 5, [3] * 5, [1] * 5,\n+                            -1, [4] * 5]\n+    X, expected_labels = shuffle(X, expected_labels, random_state=rng)\n+\n+    # Use float for min_samples\n+    clust = OPTICS(min_samples=0.1, min_cluster_size=2,\n+                   max_eps=20, cluster_method='xi',\n+                   xi=0.4).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n+\n+    # Test with an edge case of min_samples as exactly 1/n_samples\n+    clust = OPTICS(min_samples=1/len(X), min_cluster_size=2,\n+                   max_eps=20, cluster_method='xi',\n+                   xi=0.4).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n+\n def test_cluster_hierarchy_():\n     rng = np.random.RandomState(0)\n     n_points_per_cluster = 100\n",
  "scikit-learn__scikit-learn-14710": "",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..2e357e5 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,6 +680,22 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n+from scipy import sparse\n+from sklearn import svm\n+import numpy as np\n+\n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for issue with empty support_vectors_ in sparse data\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..5675aaf 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -97,8 +97,30 @@ def test_strip_accents():\n     expected = 'this is a test'\n     assert strip_accents_unicode(a) == expected\n \n+    # strings that are already decomposed\n+    a = \"o\\u0308\"  # o with diaresis\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # combining marks by themselves\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Multiple combining marks on one character\n+    a = \"o\\u0308\\u0304\"\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Original issue test cases\n+    # This string contains one code point, \"LATIN SMALL LETTER N WITH TILDE\"\n+    s1 = chr(241)\n+    # This string contains two code points, \"LATIN SMALL LETTER N\" followed by \"COMBINING TILDE\"\n+    s2 = chr(110) + chr(771)\n \n-def test_to_ascii():\n+    # They should both be normalized to \"n\"\n+    assert strip_accents_unicode(s1) == \"n\"\n+    assert strip_accents_unicode(s2) == \"n\"\n     # check some classical latin accentuated symbols\n     a = '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb'\n     expected = 'aaaaaaceeee'\n",
  "scikit-learn__scikit-learn-25102": "diff --git a/sklearn/feature_selection/tests/test_base.py b/sklearn/feature_selection/tests/test_base.py\nindex bf2d07e..5e986e0 100644\n--- a/sklearn/feature_selection/tests/test_base.py\n+++ b/sklearn/feature_selection/tests/test_base.py\n@@ -108,9 +108,25 @@ def test_inverse_transform_sparse():\n     with pytest.raises(ValueError):\n         sel.inverse_transform(np.array([[1], [2]]))\n \n-\n-def test_get_support():\n+def test_preserve_dtypes():\n+    \"\"\"Test to ensure that transformer output preserves input dtypes.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    X = pd.DataFrame(\n+        {\n+            \"float16_col\": pd.Series([1.5, 2.5, 3.5], dtype=np.float16),\n+            \"category_col\": pd.Series([\"x\", \"y\", \"z\"], dtype=\"category\"),\n+        }\n+    )\n+    y = pd.Series([0, 1, 0], dtype=int)\n+\n+    selector = SelectKBest(score_func=chi2, k=1).set_output(transform=\"pandas\")\n+    selector.fit(X, y)\n+    output = selector.transform(X)\n+\n+    # Check that the dtypes are preserved\n+    for col in output.columns:\n+        assert output[col].dtype == X[col].dtype, f\"Dtype mismatch for column {col}\"\n     sel = StepSelector()\n     sel.fit(X, y)\n     assert_array_equal(support, sel.get_support())\n-    assert_array_equal(support_inds, sel.get_support(indices=True))\n+    assert_array_equal(support_inds, sel.get_support(indices=True))\n",
  "scikit-learn__scikit-learn-25232": "diff --git a/sklearn/impute/tests/test_impute.py b/sklearn/impute/tests/test_impute.py\nindex ee482a8..26434a5 100644\n--- a/sklearn/impute/tests/test_impute.py\n+++ b/sklearn/impute/tests/test_impute.py\n@@ -1511,7 +1511,10 @@ def test_most_frequent(expected, array, dtype, extra_value, n_repeat):\n )\n def test_iterative_imputer_keep_empty_features(initial_strategy):\n     \"\"\"Check the behaviour of the iterative imputer with different initial strategy\n-    and keeping empty features (i.e. features containing only missing values).\n+from sklearn.experimental import enable_iterative_imputer  # noqa\n+from sklearn.impute import IterativeImputer\n+from numpy.testing import assert_array_equal\n+import numpy as np\n     \"\"\"\n     X = np.array([[1, np.nan, 2], [3, np.nan, np.nan]])\n \n@@ -1524,7 +1527,22 @@ def test_iterative_imputer_keep_empty_features(initial_strategy):\n     assert_allclose(X_imputed[:, 1], 0)\n \n \n-@pytest.mark.parametrize(\"keep_empty_features\", [True, False])\n+def test_iterative_imputer_custom_fill_value():\n+    \"\"\"Check that the `fill_value` is applied correctly with `initial_strategy=\"constant\"`.\"\"\"\n+    X = np.array([[np.nan, 2, 3], [4, np.nan, 5], [6, 7, np.nan], [8, 9, 0]])\n+    fill_value = -1\n+    imputer = IterativeImputer(\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0\n+    )\n+    \n+    X_imputed = imputer.fit_transform(X)\n+    assert_array_equal(imputer.initial_imputer_.statistics_, [fill_value, 2, 3])\n+    assert_array_equal(X_imputed, np.array([[fill_value, 2, 3], \n+                                            [4, fill_value, 5],\n+                                            [6, 7, fill_value],\n+                                            [8, 9, 0]]))\n def test_knn_imputer_keep_empty_features(keep_empty_features):\n     \"\"\"Check the behaviour of `keep_empty_features` for `KNNImputer`.\"\"\"\n     X = np.array([[1, np.nan, 2], [3, np.nan, np.nan]])\n",
  "scikit-learn__scikit-learn-25931": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3714d1a..14c78cc 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -332,10 +332,31 @@ def test_base_estimator_property_deprecated():\n     y = np.array([1, 0])\n     model = IsolationForest()\n     model.fit(X, y)\n+import pytest\n+import warnings\n+import numpy as np\n+import pandas as pd\n \n+def test_iforest_preserve_feature_names():\n+    \"\"\"Check that feature names are preserved when contamination is not \"auto\".\n+\n+    Feature names are required for consistency checks during scoring.\n+\n+    Non-regression test for Issue #25844\n+    \"\"\"\n+    rng = np.random.RandomState(0)\n+\n+    # Create a DataFrame with random data\n+    X = pd.DataFrame(data=rng.randn(4, 1), columns=[\"a\"])\n+    model = IsolationForest(random_state=0, contamination=0.05)\n+\n+    with warnings.catch_warnings():\n+        # Error out on unexpected UserWarnings\n+        warnings.simplefilter(\"error\", UserWarning)\n+        model.fit(X)\n     warn_msg = (\n         \"Attribute `base_estimator_` was deprecated in version 1.2 and \"\n         \"will be removed in 1.4. Use `estimator_` instead.\"\n     )\n     with pytest.warns(FutureWarning, match=warn_msg):\n-        model.base_estimator_\n+        model.base_estimator_\n",
  "scikit-learn__scikit-learn-25973": "",
  "scikit-learn__scikit-learn-26323": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex b52e888..1c6786f 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -22,6 +22,10 @@ from sklearn.compose import (\n from sklearn.exceptions import NotFittedError\n from sklearn.preprocessing import FunctionTransformer\n from sklearn.preprocessing import StandardScaler, Normalizer, OneHotEncoder\n+from sklearn.feature_selection import VarianceThreshold\n+import pandas as pd\n+import pytest\n+import numpy as np\n \n \n class Trans(TransformerMixin, BaseEstimator):\n",
  "scikit-learn__scikit-learn-9288": "diff --git a/sklearn/cluster/tests/test_k_means.py b/sklearn/cluster/tests/test_k_means.py\nindex abeeff0..23e2d60 100644\n--- a/sklearn/cluster/tests/test_k_means.py\n+++ b/sklearn/cluster/tests/test_k_means.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for K-means\"\"\"\n import sys\n \n@@ -944,6 +945,19 @@ def test_k_means_empty_cluster_relocated():\n     assert len(set(km.labels_)) == 2\n     assert_allclose(km.cluster_centers_, [[-1], [1]])\n \n+def test_result_of_kmeans_equal_in_diff_n_jobs():\n+    # Test that KMeans results are invariant to n_jobs parameter\n+    rnd = np.random.RandomState(0)\n+    X = rnd.normal(size=(50, 10))\n+    \n+    result_1 = KMeans(n_clusters=3, random_state=0, n_jobs=1).fit(X).labels_\n+    result_2 = KMeans(n_clusters=3, random_state=0, n_jobs=2).fit(X).labels_\n+    result_3 = KMeans(n_clusters=3, random_state=0, n_jobs=3).fit(X).labels_\n+    result_4 = KMeans(n_clusters=3, random_state=0, n_jobs=4).fit(X).labels_\n+    \n+    assert_array_equal(result_1, result_2)\n+    assert_array_equal(result_1, result_3)\n+    assert_array_equal(result_1, result_4)\n \n def test_minibatch_kmeans_partial_fit_int_data():\n     # Issue GH #14314\n",
  "sphinx-doc__sphinx-10323": "diff --git a/tests/test_directive_code.py b/tests/test_directive_code.py\nindex 949c70e..06a5346 100644\n--- a/tests/test_directive_code.py\n+++ b/tests/test_directive_code.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the code-block directive.\"\"\"\n \n import os\n@@ -252,7 +253,36 @@ def test_LiteralIncludeReader_dedent(literal_inc_path):\n \n \n @pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n-def test_LiteralIncludeReader_tabwidth(testroot):\n+def test_LiteralIncludeReader_dedent_and_append_and_prepend(literal_inc_path):\n+    # Original test with prepend and append with dedent\n+    options = {'lines': '9-11', 'dedent': 2, 'prepend': 'class Foo:', 'append': '# comment'}\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    assert content == (\"class Foo:\\n\"\n+                       \"  def baz():\\n\"\n+                       \"      pass\\n\"\n+                       \"\\n\"\n+                       \"# comment\\n\")\n+\n+def test_LiteralIncludeReader_prepend_indentation(literal_inc_path):\n+    # Test case for prepend indentation\n+    options = {'lines': '9-11', 'prepend': '    <plugin>', 'dedent': None}\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    assert content == (\"    <plugin>\\n\"\n+                       \"def baz():\\n\"\n+                       \"    pass\\n\"\n+                       \"\\n\")\n+\n+def test_LiteralIncludeReader_prepend_and_dedent(literal_inc_path):\n+    # Test case to check prepend with dedent\n+    options = {'lines': '9-11', 'prepend': '    <plugin>', 'dedent': 4}\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    assert content == (\"<plugin>\\n\"\n+                       \"def baz():\\n\"\n+                       \"pass\\n\"\n+                       \"\\n\")\n     # tab-width: 4\n     options = {'tab-width': 4, 'pyobject': 'Qux'}\n     reader = LiteralIncludeReader(testroot / 'target.py', options, DUMMY_CONFIG)\n",
  "sphinx-doc__sphinx-10449": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 82ec43a..fbd68b7 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1023,6 +1023,28 @@ def test_autodoc_typehints_description_no_undoc_doc_rtype(app):\n             '   Return type:\\n'\n             '      None\\n' == context)\n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\"})\n+def test_autodoc_typehints_description_no_return_type(app):\n+    # This test checks that no 'Return type' is shown for classes\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: target.typehints.Square\\n'\n+        '   :members:\\n',\n+        encoding='utf8'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n+    assert ('class target.typehints.Square\\n'\n+            '\\n'\n+            '   A class representing a square figure.\\n'\n+            '\\n'\n+            '   __init__(width, height)\\n'\n+            '\\n'\n+            '      Parameters:\\n'\n+            '         **width** (*int*) --\\n'\n+            '         **height** (*int*) --\\n'\n+            in context)\n+    assert 'Return type:' not in context\n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\"})\n",
  "sphinx-doc__sphinx-10466": "",
  "sphinx-doc__sphinx-10673": "",
  "sphinx-doc__sphinx-7440": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 975a00f..9a52658 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -124,6 +124,42 @@ def test_glossary(app):\n                                                                      index)],\n                                                              definition)])],\n     ))\n+\n+    # Test for case sensitivity in glossary terms\n+    text_case_sensitive = (\".. glossary::\\n\"\n+                           \"\\n\"\n+                           \"   MySQL\\n\"\n+                           \"       A popular open-source database management system.\\n\"\n+                           \"\\n\"\n+                           \"   mysql\\n\"\n+                           \"       The command-line tool for interacting with MySQL databases.\\n\")\n+\n+    # Parse the new glossary text\n+    doctree_case_sensitive = restructuredtext.parse(app, text_case_sensitive)\n+\n+    assert_node(doctree_case_sensitive, (\n+        [glossary, definition_list, ([definition_list_item, ([term, (\"MySQL\",\n+                                                                     index)],\n+                                                             definition)],\n+                                     [definition_list_item, ([term, (\"mysql\",\n+                                                                     index)],\n+                                                             definition)])],\n+    ))\n+\n+    assert_node(doctree_case_sensitive[0][0][0][0][1],\n+                entries=[(\"single\", \"MySQL\", \"term-MySQL\", \"main\", None)])\n+    assert_node(doctree_case_sensitive[0][0][0][1],\n+                [definition, nodes.paragraph, \"A popular open-source database management system.\"])\n+    \n+    assert_node(doctree_case_sensitive[0][0][1][0][1],\n+                entries=[(\"single\", \"mysql\", \"term-mysql\", \"main\", None)])\n+    assert_node(doctree_case_sensitive[0][0][1][1],\n+                [definition, nodes.paragraph, \"The command-line tool for interacting with MySQL databases.\"])\n+\n+    # Index check\n+    objects_case_sensitive = list(app.env.get_domain(\"std\").get_objects())\n+    assert (\"MySQL\", \"MySQL\", \"term\", \"index\", \"term-MySQL\", -1) in objects_case_sensitive\n+    assert (\"mysql\", \"mysql\", \"term\", \"index\", \"term-mysql\", -1) in objects_case_sensitive\n     assert_node(doctree[0][0][0][0][1],\n                 entries=[(\"single\", \"term1\", \"term-term1\", \"main\", None)])\n     assert_node(doctree[0][0][0][1][1],\n",
  "sphinx-doc__sphinx-7757": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex b3053d1..358c865 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -325,6 +325,16 @@ def test_signature_from_str_complex_annotations():\n \n def test_signature_from_str_kwonly_args():\n     sig = inspect.signature_from_str('(a, *, b)')\n+\n+def test_signature_from_str_with_defaults_for_positional_only():\n+    sig = inspect.signature_from_str('(a, b=0, /, c=1)')\n+    assert list(sig.parameters.keys()) == ['a', 'b', 'c']\n+    assert sig.parameters['a'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['a'].default == Parameter.empty\n+    assert sig.parameters['b'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['b'].default == '0'\n+    assert sig.parameters['c'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['c'].default == '1'\n     assert list(sig.parameters.keys()) == ['a', 'b']\n     assert sig.parameters['a'].kind == Parameter.POSITIONAL_OR_KEYWORD\n     assert sig.parameters['a'].default == Parameter.empty\n",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..1dbe5ab 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -15,6 +16,7 @@ from importlib import import_module\n import pytest\n \n from sphinx.ext.autodoc.mock import _MockModule, _MockObject, mock\n+from typing import TypeVar, Generic\n \n \n def test_MockModule():\n@@ -47,6 +49,19 @@ def test_MockObject():\n \n     obj = SubClass()\n     assert SubClass.__doc__ == \"docstring of SubClass\"\n+\n+    # Test case for generically-typed classes\n+    T = TypeVar('T')\n+\n+    class GenericClass(Generic[T]):\n+        \"\"\"A generic class\"\"\"\n+\n+    class SubClassGeneric(GenericClass[T], mock.SomeClass):\n+        \"\"\"docstring of SubClassGeneric\"\"\"\n+\n+    obj_generic = SubClassGeneric()\n+    assert SubClassGeneric.__doc__ == \"docstring of SubClassGeneric\"\n+    assert isinstance(obj_generic, SubClassGeneric)\n     assert isinstance(obj, SubClass)\n     assert obj.method() == \"string\"\n     assert isinstance(obj.other_method(), SubClass)\n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_napoleon.py b/tests/test_ext_napoleon.py\nindex 0676869..c3980a6 100644\n--- a/tests/test_ext_napoleon.py\n+++ b/tests/test_ext_napoleon.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_napoleon\n     ~~~~~~~~~~~~~\n@@ -12,6 +13,7 @@\n import sys\n from collections import namedtuple\n from unittest import TestCase, mock\n+from sphinx.testing.util import simple_decorator\n \n from sphinx.application import Sphinx\n from sphinx.ext.napoleon import _process_docstring, _skip_member, Config, setup\n@@ -180,6 +182,18 @@ class SkipMemberTest(TestCase):\n                         SampleError._private_undoc, True,\n                         'napoleon_include_private_with_doc')\n \n+    def test_decorated_init_shows_in_docs(self):\n+        class SampleClass:\n+            @simple_decorator\n+            def __init__(self):\n+                \"\"\"SampleClass.__init__.DOCSTRING\"\"\"\n+                pass\n+\n+        # Assuming _skip_member is responsible for skipping members in docs\n+        # and the test checks that __init__ method should not be skipped.\n+        self.assertSkip('class', '__init__', SampleClass.__init__, False,\n+                        'napoleon_include_init_with_doc')\n+\n     def test_exception_special_doc(self):\n         self.assertSkip('exception', '__special_doc__',\n                         SampleError.__special_doc__, False,\n",
  "sphinx-doc__sphinx-7985": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 5b1b2ed..fc910c0 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -8,6 +8,10 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+import os\n+import pathlib\n+from sphinx.testing.path import path\n+\n import json\n import re\n from unittest import mock\n@@ -15,22 +19,24 @@ import pytest\n \n \n @pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n-def test_defaults(app, status, warning):\n+def test_local_links(app, status, warning):\n+    (app.srcdir / 'index.rst').write_text(\"\"\"\n+Example valid local file: `conf.py <conf.py>`_\n+\n+Example invalid local file: `notfound.file <notfound.file>`_\n+\"\"\")\n     app.builder.build_all()\n \n     assert (app.outdir / 'output.txt').exists()\n     content = (app.outdir / 'output.txt').read_text()\n \n     print(content)\n-    # looking for '#top' and '#does-not-exist' not found should fail\n-    assert \"Anchor 'top' not found\" in content\n-    assert \"Anchor 'does-not-exist' not found\" in content\n-    # looking for non-existent URL should fail\n-    assert \" Max retries exceeded with url: /doesnotexist\" in content\n-    # images should fail\n-    assert \"Not Found for url: https://www.google.com/image.png\" in content\n-    assert \"Not Found for url: https://www.google.com/image2.png\" in content\n-    assert len(content.splitlines()) == 5\n+    # local file link should succeed\n+    expected_local_file_path = path(app.srcdir / 'conf.py').abspath()\n+    assert f\"local   {expected_local_file_path}\" in content\n+    # non-existent local file should fail\n+    assert \"local   notfound.file\" in content\n+    assert \"[broken] notfound.file\" in content\n \n \n @pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n",
  "sphinx-doc__sphinx-8035": "diff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex ad1d950..2418b9e 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_private_members\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -10,8 +11,56 @@\n \n import pytest\n \n+from sphinx.ext.autodoc import Documenter\n from test_ext_autodoc import do_autodoc\n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_specific_private_members(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None,\n+               \"private-members\": \"_specific_private_function\"}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        '',\n+        '.. py:function:: _specific_private_function(name)',\n+        '   :module: target.private',\n+        '',\n+        '   specific_private_function is a docstring().',\n+        '',\n+        '   :meta private:',\n+        '',\n+    ]\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_combined_private_members(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None,\n+               \"private-members\": \"_specific_private_function,_another_private_function\"}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        '',\n+        '.. py:function:: _specific_private_function(name)',\n+        '   :module: target.private',\n+        '',\n+        '   specific_private_function is a docstring().',\n+        '',\n+        '   :meta private:',\n+        '',\n+        '.. py:function:: _another_private_function(name)',\n+        '   :module: target.private',\n+        '',\n+        '   another_private_function is a docstring().',\n+        '',\n+        '   :meta private:',\n+        '',\n+    ]\n+\n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_private_field(app):\n",
  "sphinx-doc__sphinx-8120": "diff --git a/tests/test_intl.py b/tests/test_intl.py\nindex 58339b1..360cea1 100644\n--- a/tests/test_intl.py\n+++ b/tests/test_intl.py\n@@ -1286,6 +1286,40 @@ def test_image_glob_intl_using_figure_language_filename(app):\n                 candidates={'application/pdf': 'subdir/svgimg.pdf',\n                             'image/svg+xml': 'subdir/svgimg.svg'})\n \n-\n-def getwarning(warnings):\n-    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n+from babel.messages import pofile\n+from babel.messages.catalog import Catalog\n+import pytest\n+from sphinx import locale\n+\n+@pytest.mark.sphinx('html', testroot='basic', confoverrides={'language': 'da'})\n+def test_custom_translation_overrides(make_app, app_params, sphinx_test_tempdir):\n+    \"\"\"Tests that custom .po translations properly override default translations.\"\"\"\n+    try:\n+        # Clear translators cache\n+        locale.translators.clear()\n+\n+        # Prepare custom message catalog (.po)\n+        locale_dir = sphinx_test_tempdir / 'basic' / 'locale' / 'da' / 'LC_MESSAGES'\n+        locale_dir.makedirs()\n+        with (locale_dir / 'sphinx.po').open('wb') as f:\n+            catalog = Catalog()\n+            catalog.add('Fig. %s', 'Foobar %s')\n+            catalog.add('Listing %s', 'Whatever %s')\n+            pofile.write_po(f, catalog)\n+\n+        # Construct application and convert .po file to .mo\n+        args, kwargs = app_params\n+        app = make_app(*args, **kwargs)\n+        assert (locale_dir / 'sphinx.mo').exists()\n+\n+        # Check if the custom translations are applied\n+        assert app.translator.gettext('Fig. 1') == 'Foobar 1'\n+        assert app.translator.gettext('Listing 1') == 'Whatever 1'\n+\n+        app.build()\n+        content = (app.outdir / 'index.html').read_text()\n+        assert 'Foobar 1' in content\n+        assert 'Whatever 1' in content\n+    finally:\n+        locale.translators.clear()\n+    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n",
  "sphinx-doc__sphinx-8269": "",
  "sphinx-doc__sphinx-8459": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex d1881df..42262a5 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_configs\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -8,6 +9,33 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+import pytest\n+import sys\n+from sphinx.testing.util import SphinxTestApp\n+\n+@pytest.mark.skipif(sys.version_info < (3, 7), reason='python 3.7+ is required.')\n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    srcdir='autodoc_typehints_description_and_type_aliases',\n+                    confoverrides={'autodoc_typehints': \"description\",\n+                                   'autodoc_type_aliases': {'JSONObject': 'types.JSONObject'}})\n+def test_autodoc_typehints_description_and_type_aliases_with_jsonobject(app: SphinxTestApp):\n+    (app.srcdir / 'annotations.rst').write_text('.. autofunction:: types.sphinx_doc')\n+    app.build()\n+    context = (app.outdir / 'annotations.txt').read_text()\n+    assert ('types.sphinx_doc(data)\\n'\n+            '\\n'\n+            '   Does it work.\\n'\n+            '\\n'\n+            '   Parameters:\\n'\n+            '      * **data** (*types.JSONObject*) --\\n'\n+            '         Does it args.\\n'\n+            '\\n'\n+            '   Returns:\\n'\n+            '      Does it work in return.\\n'\n+            '\\n'\n+            '   Return type:\\n'\n+            '      types.JSONObject\\n' in context)\n+\n import platform\n import sys\n \n",
  "sphinx-doc__sphinx-8475": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 41632e7..32e8c8c 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -372,6 +372,30 @@ def test_connect_to_selfsigned_nonexistent_cert_file(app):\n     with https_server(OKHandler):\n         app.builder.build_all()\n \n+import json\n+import http.server\n+import pytest\n+from sphinx.testing.util import SphinxTestApp\n+from sphinx.testing.fixtures import test_params\n+from sphinx.util import requests\n+\n+# Test case for Too Many Redirects exception on HEAD requests.\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_too_many_redirects_handling(app: SphinxTestApp):\n+    class TooManyRedirectsHandler(http.server.BaseHTTPRequestHandler):\n+        def do_HEAD(self):\n+            self.send_response(302, \"Found\")\n+            self.send_header(\"Location\", \"http://localhost:7777/\")\n+            self.end_headers()\n+\n+        def do_GET(self):\n+            self.send_response(200, \"OK\")\n+            self.end_headers()\n+            self.wfile.write(b\"ok\\n\")\n+\n+    with http_server(TooManyRedirectsHandler):\n+        app.builder.build_all()\n+\n     with open(app.outdir / 'output.json') as fp:\n         content = json.load(fp)\n     assert content == {\n@@ -381,4 +405,4 @@ def test_connect_to_selfsigned_nonexistent_cert_file(app):\n         \"lineno\": 1,\n         \"uri\": \"https://localhost:7777/\",\n         \"info\": \"Could not find a suitable TLS CA certificate bundle, invalid path: does/not/exist\",\n-    }\n+    }\n",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8721": "",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex 3c31d3d..dbe1f6a 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -515,6 +515,16 @@ def test_dict_customtype():\n     # Type is unsortable, just check that it does not crash\n     assert \"<CustomType(2)>: 2\" in description\n \n+def test_object_description_enum():\n+    import enum\n+\n+    class MyEnum(enum.Enum):\n+        FOO = 1\n+        BAR = 2\n+\n+    # Test the object description function to ensure it renders enums correctly\n+    assert inspect.object_description(MyEnum.FOO) == \"MyEnum.FOO\"\n+    assert inspect.object_description(MyEnum.BAR) == \"MyEnum.BAR\"\n \n def test_getslots():\n     class Foo:\n",
  "sphinx-doc__sphinx-9320": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\nindex ff8df08..b893f77 100644\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -17,6 +17,7 @@ from sphinx import application\n from sphinx.cmd import quickstart as qs\n from sphinx.util.console import coloron, nocolor\n \n+import sys\n warnfile = StringIO()\n \n \n@@ -241,6 +242,24 @@ def test_default_filename(tempdir):\n     exec(conffile.read_text(), ns)\n \n \n+def test_exit_when_enter_pressed_with_existing_confpy(monkeypatch, capsys):\n+    # Mock path.isfile to always return True, simulating existing conf.py\n+    def mock_isfile(path):\n+        return True\n+\n+    monkeypatch.setattr(path, 'isfile', mock_isfile)\n+\n+    # Mock input to simulate pressing 'Enter' at the prompt\n+    qs.term_input = lambda prompt: ''\n+\n+    with pytest.raises(SystemExit) as exit_info:\n+        d = {}\n+        qs.ask_user(d)\n+    \n+    # Verify that the program exits with status code 1\n+    assert exit_info.value.code == 1\n+\n+\n def test_extensions(tempdir):\n     qs.main(['-q', '-p', 'project_name', '-a', 'author',\n              '--extensions', 'foo,bar,baz', tempdir])\n@@ -249,4 +268,22 @@ def test_extensions(tempdir):\n     assert conffile.isfile()\n     ns = {}\n     exec(conffile.read_text(), ns)\n+\n+\n+def test_exit_when_enter_pressed_with_existing_confpy(monkeypatch, capsys):\n+    # Mock path.isfile to always return True, simulating existing conf.py\n+    def mock_isfile(path):\n+        return True\n+\n+    monkeypatch.setattr(path, 'isfile', mock_isfile)\n+\n+    # Mock input to simulate pressing 'Enter' at the prompt\n+    qs.term_input = lambda prompt: ''\n+\n+    with pytest.raises(SystemExit) as exit_info:\n+        d = {}\n+        qs.ask_user(d)\n+    \n+    # Verify that the program exits with status code 1\n+    assert exit_info.value.code == 1\n     assert ns['extensions'] == ['foo', 'bar', 'baz']\n",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..1dce1b9 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -53,7 +53,8 @@ from sphinx.pycode import ast\n     (\"+ a\", \"+ a\"),                             # UAdd\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n-    (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n+    (\"(1, 2, 3)\", \"(1, 2, 3)\"),                 # Tuple\n+    (\"(1,)\", \"(1,)\"),                           # Tuple (single element)\n     (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n",
  "sphinx-doc__sphinx-9591": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 29731ea..196f5b9 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -847,7 +847,46 @@ def test_pyproperty(app):\n     assert domain.objects['Class.prop2'] == ('index', 'Class.prop2', 'property', False)\n \n \n-def test_pydecorator_signature(app):\n+def test_cross_reference_in_property_type_annotation(app):\n+    text = (\".. py:class:: Square\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\"\n+            \"      :rtype: Point\\n\"\n+            \"\\n\"\n+            \"   .. py:class:: Rectangle\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\"\n+            \"      :rtype: Point\\n\")\n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                                    [desc_name, \"Square\"])],\n+                                  [desc_content, (addnodes.index,\n+                                                  desc,\n+                                                  addnodes.index,\n+                                                  desc)])]))\n+    assert_node(doctree[1][1][0], addnodes.index,\n+                entries=[('single', 'end (Square property)', 'Square.end', '', None)])\n+    assert_node(doctree[1][1][1], ([desc_signature, ([desc_annotation, \"property \"],\n+                                                     [desc_name, \"end\"],\n+                                                     [pending_xref, \"Point\"],\n+                                                     [desc_annotation, \": Point\"])],\n+                                   [desc_content, ()]))\n+    assert 'Square.end' in domain.objects\n+    assert domain.objects['Square.end'] == ('index', 'Square.end', 'property', False)\n+\n+    assert_node(doctree[1][1][2], addnodes.index,\n+                entries=[('single', 'end (Rectangle property)', 'Rectangle.end', '', None)])\n+    assert_node(doctree[1][1][3], ([desc_signature, ([desc_annotation, \"property \"],\n+                                                     [desc_name, \"end\"],\n+                                                     [pending_xref, \"Point\"],\n+                                                     [desc_annotation, \": Point\"])],\n+                                   [desc_content, ()]))\n+    assert 'Rectangle.end' in domain.objects\n+    assert domain.objects['Rectangle.end'] == ('index', 'Rectangle.end', 'property', False)\n     text = \".. py:decorator:: deco\"\n     domain = app.env.get_domain('py')\n     doctree = restructuredtext.parse(app, text)\n",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..c636965 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -756,7 +756,7 @@ def test_pymethod_options(app):\n \n     # :property:\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
  "sphinx-doc__sphinx-9711": "",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..b762311 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -236,6 +236,31 @@ def test_Point2D():\n     assert p2.distance(p3) == sqrt(17)/2\n \n \n+from sympy import sqrt\n+from sympy.geometry import Point3D, Point2D, Point\n+\n+def test_issue_11617():\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point2D(2, 0)\n+    assert p1.distance(p2) == sqrt(5)\n+\n+def test_point_distance_different_dimensions():\n+    # Testing the distance between a 2D point and a 3D point\n+    p1 = Point(2, 0)\n+    p2 = Point(1, 0, 2)\n+    assert p1.distance(p2) == sqrt(5)\n+\n+    # Additional case: 3D and 2D swapped\n+    p3 = Point(1, 0, 2)\n+    p4 = Point(2, 0)\n+    assert p3.distance(p4) == sqrt(5)\n+\n+    # Ensure zero distance for identical points of different dimensions\n+    p5 = Point(1, 1, 0)\n+    p6 = Point(1, 1)\n+    assert p5.distance(p6) == 0\n+    assert p6.distance(p5) == 0\n+\n def test_issue_9214():\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..565f16f 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -741,7 +741,16 @@ def test_special_printers():\n     assert isinstance(func1(), mpi)\n     assert isinstance(func2(), mpi)\n \n-def test_true_false():\n+from sympy.utilities.lambdify import implemented_function\n+from sympy import Float\n+\n+def test_issue_12092():\n+    f = implemented_function('f', lambda x: x**2)\n+    g = implemented_function('g', lambda x: 2 * x)\n+    \n+    assert f(2).evalf() == Float(4)\n+    assert g(2).evalf() == Float(4)\n+    assert f(g(2)).evalf() == Float(16)\n     # We want exact is comparison here, not just ==\n     assert lambdify([], true)() is True\n     assert lambdify([], false)() is False\n",
  "sympy__sympy-12419": "",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..6118763 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -337,6 +337,12 @@ def test_args():\n     assert Permutation([[1, 2]]) == Permutation([0, 2, 1])\n     assert Permutation([[1], [4, 2]]) == Permutation([0, 1, 4, 3, 2])\n     assert Permutation([[1], [4, 2]], size=1) == Permutation([0, 1, 4, 3, 2])\n+\n+    # Additional test cases for non-disjoint cycles\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])  # Identity permutation\n+    assert Permutation([[0, 1, 2], [2, 3]]) == Permutation([0, 3, 1, 2])  # Apply cycles left-to-right\n+    assert Permutation([[0, 1], [1, 2], [2, 0]]) == Permutation([1, 2, 0])  # Should resolve correctly\n+    assert Permutation([[0, 2], [2, 0]]) == Permutation([0, 1, 2])  # Identity from non-disjoint cycles\n     assert Permutation(\n         [[1], [4, 2]], size=6) == Permutation([0, 1, 4, 3, 2, 5])\n     assert Permutation([], size=3) == Permutation([0, 1, 2])\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..0aebba1 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -1,4 +1,6 @@\n from sympy import Abs, S, Symbol, I, Rational, PurePoly\n+from sympy import Matrix\n+\n from sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\n from sympy.utilities.pytest import raises\n \n@@ -490,7 +492,16 @@ def test_errors():\n         lambda: SparseMatrix(1, 2, [1, 2]) + SparseMatrix(2, 1, [2, 1]))\n \n \n-def test_len():\n+def test_sparse_hstack_vstack_with_empty_matrices():\n+    # Test for hstack with 0 x n matrices, where n varies\n+    sparse_matrices_h = [SparseMatrix.zeros(0, n) for n in range(4)]\n+    result_h = SparseMatrix.hstack(*sparse_matrices_h)\n+    assert result_h.shape == (0, 6), f\"Expected shape (0, 6), got {result_h.shape}\"\n+\n+    # Test for hstack with n x 0 matrices, where n varies\n+    sparse_matrices_v = [SparseMatrix.zeros(n, 0) for n in range(4)]\n+    result_v = SparseMatrix.vstack(*sparse_matrices_v)\n+    assert result_v.shape == (6, 0), f\"Expected shape (6, 0), got {result_v.shape}\"\n     assert not SparseMatrix()\n     assert SparseMatrix() == SparseMatrix([])\n     assert SparseMatrix() == SparseMatrix([[]])\n",
  "sympy__sympy-13372": "",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..da46b0c 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -209,8 +209,18 @@ def test_tanh_series():\n     assert tanh(x).series(x, 0, 10) == \\\n         x - x**3/3 + 2*x**5/15 - 17*x**7/315 + 62*x**9/2835 + O(x**10)\n \n-\n-def test_coth():\n+from sympy import coth, log, tan, Symbol\n+\n+def test_coth_subs_issue():\n+    x = Symbol('x')\n+    expr = coth(log(tan(x)))\n+    # Test with integral values that were problematic\n+    for value in [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]:\n+        try:\n+            result = expr.subs(x, value)\n+            print(f\"coth(log(tan({value}))) = {result}\")\n+        except Exception as e:\n+            print(f\"Exception for coth(log(tan({value}))): {e}\")\n     x, y = symbols('x,y')\n \n     k = Symbol('k', integer=True)\n",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..b0a72ba 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -173,6 +173,14 @@ def test_Complement():\n         Union(Interval(0, 1, False, True), FiniteSet(4))\n \n     assert not 3 in Complement(Interval(0, 5), Interval(1, 4), evaluate=False)\n+\n+    # Test for issue 12712\n+    a = FiniteSet(x, y, 2)\n+    b = Interval(-10, 10)\n+    assert Complement(a, b) == Complement(FiniteSet(x, y), b)\n+    assert Complement(FiniteSet(x, 1, 2), Interval(0, 5)) == Complement(FiniteSet(x), Interval(0, 5))\n+    assert Complement(FiniteSet(x, y, -5), Interval(-10, -1)) == Complement(FiniteSet(x, y), Interval(-10, -1))\n+    assert Complement(FiniteSet(x, y, 0), Interval(-5, 5)) == Complement(FiniteSet(x, y), Interval(-5, 5))\n     assert -1 in Complement(S.Reals, S.Naturals, evaluate=False)\n     assert not 1 in Complement(S.Reals, S.Naturals, evaluate=False)\n \n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..88e5adb 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -187,6 +187,8 @@ def test_col_join():\n                    [0, 0, 1],\n                    [7, 7, 7]])\n \n+from sympy import Matrix, eye, ones\n+\n def test_row_insert():\n     r4 = Matrix([[4, 4, 4]])\n     for i in range(-4, 5):\n@@ -201,7 +203,24 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643_col_insert():\n+    # Initial 6x6 identity matrix\n+    M = eye(6)\n+    # 6x2 matrix of twos\n+    V = 2 * ones(6, 2)\n+    \n+    # Expected output after column insertion\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    \n+    result = M.col_insert(3, V)\n+    assert result == expected, f\"Expected {expected}, got {result}\"\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..c7f7dd5 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -678,6 +678,29 @@ def test_Poly_mul():\n     assert 2 * Poly(x, x) == Poly(2*x, x)\n \n \n+from sympy import symbols, Poly, S\n+\n+def test_issue_13079():\n+    x = symbols('x')\n+    assert Poly(x)*x == Poly(x**2, x, domain='ZZ')\n+    assert x*Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert -2*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2)*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert Poly(x)*S(-2) == Poly(-2*x, x, domain='ZZ')\n+\n+def test_extended_poly_multiplications():\n+    x, y = symbols('x y')\n+    # Test with a different symbol\n+    assert Poly(x)*y == x*Poly(y, y, domain='ZZ')\n+    assert y*Poly(x) == Poly(y*x, x, domain='ZZ')\n+    # Test with multiple symbols\n+    assert Poly(x + y)*x == Poly((x + y)*x, x, y, domain='ZZ')\n+    assert x*Poly(x + y) == Poly(x*(x + y), x, y, domain='ZZ')\n+    # Test with symbolic coefficients\n+    a = symbols('a')\n+    assert Poly(a*x)*x == Poly(a*x**2, x, domain='ZZ')\n+    assert x*Poly(a*x) == Poly(a*x**2, x, domain='ZZ')\n+\n def test_Poly_sqr():\n     assert Poly(x*y, x, y).sqr() == Poly(x**2*y**2, x, y)\n \n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..1165c6d 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -54,6 +54,21 @@ def test_printmethod():\n             return \"foo\"\n     assert latex(R(x)) == \"foo\"\n \n+def test_latex_mul_symbol():\n+    # Test arbitrary mul_symbol\n+    assert latex(3*x**2*y, mul_symbol='\\\\,') == r\"3\\,x^{2}\\,y\"\n+    assert latex(1.5*3**x, mul_symbol='\\\\,') == r\"1.5\\,3^{x}\"\n+    \n+    # Ensure backward compatibility with predefined symbols\n+    assert latex(2*x*y, mul_symbol='dot') == r\"2 \\cdot x \\cdot y\"\n+    assert latex(2*x*y, mul_symbol='times') == r\"2 \\times x \\times y\"\n+    assert latex(2*x*y, mul_symbol='ldot') == r\"2 \\,.\\, x \\,.\\, y\"\n+    assert latex(2*x*y, mul_symbol=None) == r\"2 x y\"\n+\n+    # Additional test for integrals with differentials\n+    assert latex(Integral(2*x**2*y, x)) == r'\\int 2 x^{2} y\\, dx'\n+    assert latex(Integral(2*x**2*y, x), mul_symbol='\\\\,') == r'\\int 2\\,x^{2}\\,y\\, dx'\n+\n \n def test_latex_basic():\n     assert latex(1 + x) == \"x + 1\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..0c08272 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -307,8 +307,26 @@ def test_tolist():\n     m = Matrix(lst)\n     assert m.tolist() == lst\n \n-\n-def test_as_mutable():\n+def test_issue_13835_determinant_of_symbolic_matrices():\n+    # Import necessary functions\n+    from sympy import Matrix, symbols\n+\n+    a = symbols('a')\n+    M = lambda n: Matrix([[i + a*j for i in range(n)] for j in range(n)])\n+\n+    # Test cases from the original issue\n+    assert M(1).det() == 0\n+    assert M(2).det() == -a\n+    \n+    # Test cases that were problematic in the issue\n+    assert M(3).det() == 0  # Simplified manually or using SymPy\n+    assert M(4).det() == 0  # Confirmed zero for size 4\n+    assert M(5).det() == 0  # Previously NaN, should be zero\n+    assert M(6).det() == 0  # Previously error, should be zero\n+\n+    # Verify no determinant calculation raises an error\n+    for n in range(7, 10):  # Extend to larger sizes\n+        assert M(n).det() == 0  # Expect zero based on pattern\n     assert zeros(0, 3).as_mutable() == zeros(0, 3)\n     assert zeros(0, 3).as_immutable() == ImmutableMatrix(zeros(0, 3))\n     assert zeros(3, 0).as_immutable() == ImmutableMatrix(zeros(3, 0))\n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..7813698 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -708,8 +708,23 @@ def test_issue_10003():\n     G = Gamma('g', 1, 2)\n     assert P(X < -1) == S.Zero\n     assert P(G < -1) == S.Zero\n-\n-def test_precomputed_cdf():\n+def test_precomputed_cdf_issue():\n+    from sympy import Rational, sqrt, asin, pi, exp, lowergamma, uppergamma, gamma, hyper, beta, erf, log\n+    from sympy.stats import cdf, density, Arcsin, Dagum, Erlang, Frechet, Gamma, GammaInverse, Kumaraswamy, Laplace, Logistic, Nakagami, StudentT, UniformSum\n+\n+    # Test cases for the issue described\n+    assert cdf(Arcsin(\"x\", 0, 3))(1) == 2*asin(sqrt(Rational(1, 3)))/pi\n+    assert cdf(Dagum(\"x\", Rational(1, 3), Rational(1, 5), 2))(3) == (1 + (3/2)**(-Rational(1, 3)))**(-Rational(1, 5))\n+    assert cdf(Erlang(\"x\", 1, 1))(1) == 1 - exp(-1)\n+    assert cdf(Frechet(\"x\", Rational(4, 3), 1, 2))(3) == exp(-1)\n+    assert cdf(Gamma(\"x\", 0.1, 2))(3).evalf() == cdf(Gamma(\"x\", 0.1, 2))(3).n()\n+    assert cdf(GammaInverse(\"x\", Rational(5, 7), 2))(3) == uppergamma(Rational(5, 7), Rational(2, 3))/gamma(Rational(5, 7))\n+    assert cdf(Kumaraswamy(\"x\", Rational(1, 123), 5))(Rational(1, 3)) == Rational(1, 3)**(Rational(1, 123))\n+    assert cdf(Laplace(\"x\", 2, 3))(5) == 1 - exp(-1)\n+    assert cdf(Logistic(\"x\", 1, 0.1))(2) == 1/(1 + exp(-10))\n+    assert cdf(Nakagami(\"x\", Rational(7, 3), 1))(2).evalf() == (1 - gamma(Rational(7, 3), 4/3)/gamma(Rational(7, 3))).evalf()\n+    assert cdf(StudentT(\"x\", 10))(2).evalf() == (0.9522670168678332).evalf()\n+    assert cdf(UniformSum(\"x\", 5))(2).is_number\n     x = symbols(\"x\", real=True, finite=True)\n     mu = symbols(\"mu\", real=True, finite=True)\n     sigma, xm, alpha = symbols(\"sigma xm alpha\", positive=True, finite=True)\n",
  "sympy__sympy-13974": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bd3e825..f76982f 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -45,7 +45,24 @@ def test_tensor_product_commutator():\n         TP(A, B)*TP(B, C) - TP(B, C)*TP(A, B)\n \n \n+from sympy import symbols, Symbol\n+from sympy.physics.quantum import TensorProduct as TP\n+from sympy.physics.quantum import tensor_product_simp as tps\n+from sympy.physics.paulialgebra import Pauli\n+\n+A, B, C, D = symbols('A,B,C,D', commutative=False)\n+\n def test_tensor_product_simp():\n+    # Tests for issue in TensorProduct powers\n+    x = Symbol('x')\n+    \n+    # Testing powers of tensor products\n+    assert tps(TP(1, 1)**2) == TP(1, 1)\n+    assert tps(TP(1, Pauli(3))**2) == TP(1, 1)\n+    assert tps(TP(1, 1)*TP(1, A)).subs(A, 1) == TP(1, 1)\n+    assert tps(TP(1, Pauli(3))*TP(1, A)).subs(A, Pauli(3)) == TP(1, 1)\n+    \n+    # Original test cases\n     assert tensor_product_simp(TP(A, B)*TP(B, C)) == TP(A*B, B*C)\n \n \n",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_str.py b/sympy/printing/tests/test_str.py\nindex 29c7fd2..d5675ad 100644\n--- a/sympy/printing/tests/test_str.py\n+++ b/sympy/printing/tests/test_str.py\n@@ -490,6 +490,8 @@ def test_Rational():\n     assert str(2**Rational(1, 10**10)) == \"2**(1/10000000000)\"\n \n     assert sstr(Rational(2, 3), sympy_integers=True) == \"S(2)/3\"\n+    assert sstr(Eq(x, S(1)/2), sympy_integers=True) == \"Eq(x, S(1)/2)\"\n+    assert sstr(Limit(x, x, S(1)/2), sympy_integers=True) == \"Limit(x, x, S(1)/2)\"\n     assert sstr(Symbol(\"x\")**Rational(2, 3), sympy_integers=True) == \"x**(S(2)/3)\"\n \n \n",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..2071ce4 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -3,12 +3,20 @@ from sympy.physics.vector import ReferenceFrame, Vector, dynamicsymbols, dot\n from sympy.abc import x, y, z\n from sympy.utilities.pytest import raises\n \n+from sympy.physics.vector import ReferenceFrame\n \n Vector.simp = True\n A = ReferenceFrame('A')\n \n \n-def test_Vector():\n+def test_vector_addition_with_zero():\n+    N = ReferenceFrame('N')\n+    # Test addition with the integer zero\n+    assert N.x + 0 == N.x\n+    # Test addition with an expression that evaluates to zero\n+    assert N.x + (0 * N.x) == N.x\n+    # Test addition of vectors explicitly zero\n+    assert N.x + N.x - 2 * N.x == N.x * 0\n     assert A.x != A.y\n     assert A.y != A.z\n     assert A.z != A.x\n",
  "sympy__sympy-14976": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..329fe12 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1,3 +1,4 @@\n+\n from distutils.version import LooseVersion as V\n from itertools import product\n import math\n@@ -145,6 +146,19 @@ def test_mpmath_lambda():\n \n \n @conserve_mpmath_dps\n+def test_rational_wrapping_mpmath():\n+    mpmath.mp.dps = 50\n+    x = symbols('x')\n+    eqn = Eq(x**2, 77 + Rational(1, 3))\n+    f = lambdify(x, eqn.lhs - eqn.rhs, modules='mpmath')\n+    source = inspect.getsource(f)\n+    assert 'mpmath.mpf(1)/mpmath.mpf(3)' in source\n+\n+    # Ensure the calculation is performed with full precision\n+    x0 = nsolve(eqn, Float('1.5', 64), prec=64)\n+    calculated_value = (x0**2).evalf(64) - (77 + Rational(1, 3)).evalf(64)\n+    assert calculated_value < 1e-60  # Check if the difference is negligible\n+\n def test_number_precision():\n     mpmath.mp.dps = 50\n     sin02 = mpmath.mpf(\"0.19866933079506121545941262711838975037020672954020\")\n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..1747155 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -79,8 +80,14 @@ def test_ndim_array_initiation():\n     assert rank_zero_array[()] == x\n     raises(ValueError, lambda: rank_zero_array[0])\n \n-\n-def test_reshape():\n+def test_rank_zero_array_length():\n+    from sympy import Array\n+    # Create a rank-0 array\n+    rank_zero_array = Array(3)\n+    # Check that len returns 1\n+    assert len(rank_zero_array) == 1\n+    # Check that the array can be iterated to produce one element\n+    assert len(list(rank_zero_array)) == 1\n     array = ImmutableDenseNDimArray(range(50), 50)\n     assert array.shape == (50,)\n     assert array.rank() == 1\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..76c4542 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n@@ -23,6 +24,10 @@ def test_Rational():\n     assert mcode(x + Rational(3, 7)) == \"x + 3/7\"\n     assert mcode(Rational(3, 7)*x) == \"(3/7)*x\"\n \n+def test_Max_Min():\n+    assert mcode(Max(x, y, z)*Min(y, z)) == \"Max[x, y, z]*Min[y, z]\"\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+\n \n def test_Function():\n     assert mcode(f(x, y, z)) == \"f[x, y, z]\"\n",
  "sympy__sympy-15349": "",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..4ba6b24 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1625,6 +1625,21 @@ def test_Mod():\n     assert (3*i*x) % (2*i*y) == i*Mod(3*x, 2*y)\n     assert Mod(4*i, 4) == 0\n \n+    # Additional test cases for issue #15493\n+    # Simplification case\n+    assert Mod(3*i, 2) == Mod(i, 2)  # direct test of the fix\n+    # Scale factor with positive integer\n+    assert Mod(6*i, 2) == 0  # 6 is multiple of 2, so result should be 0\n+    # Scale factor with negative integer\n+    assert Mod(-3*i, 2) == Mod(-i, 2)  # should reduce similar to positive\n+    # Larger scale factor\n+    assert Mod(9*i, 2) == Mod(i, 2)  # 9 is also a multiple of 3\n+    # Different modulus\n+    assert Mod(3*i, 3) == 0  # 3 is a multiple of itself, so result should be 0\n+    # Complex case\n+    j = Symbol('j', integer=True)\n+    assert Mod(3*i + 4*j, 2) == Mod(i + 2*j, 2)  # checking with multiple terms\n+\n     # issue 8677\n     n = Symbol('n', integer=True, positive=True)\n     assert factorial(n) % n == 0\n",
  "sympy__sympy-15809": "",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..5d3b751 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1986,6 +1986,32 @@ def test_Add_is_zero():\n     x, y = symbols('x y', zero=True)\n     assert (x + y).is_zero\n \n+    # Issue 15873 test cases\n+    e1 = -2*I + (1 + I)**2\n+    assert e1.is_zero is None  # The original issue case\n+    \n+    # Additional test cases\n+    e2 = I - I  # This should be zero\n+    assert e2.is_zero is True\n+    \n+    e3 = -I + I  # This should also be zero\n+    assert e3.is_zero is True\n+    \n+    e4 = 1 - 1 + I - I  # This should be zero\n+    assert e4.is_zero is True\n+    \n+    e5 = (1 + I) + (-1 - I)  # This should be zero\n+    assert e5.is_zero is True\n+    \n+    e6 = x + I - I  # x is zero, so the whole expression should be zero\n+    assert e6.is_zero is True\n+    \n+    e7 = 2*x + 3*y + I - I  # x and y are zero, so the whole expression should be zero\n+    assert e7.is_zero is True\n+    \n+    e8 = 3 + 4*I - 3 - 4*I  # This should be zero\n+    assert e8.is_zero is True\n+\n \n def test_issue_14392():\n     assert (sin(zoo)**2).as_real_imag() == (nan, nan)\n@@ -1993,4 +2019,4 @@ def test_issue_14392():\n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..5c00a15 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -511,8 +511,46 @@ def test_posify():\n     assert str(Sum(posify(1/x**n)[0], (n,1,3)).expand()) == \\\n         'Sum(_x**(-n), (n, 1, 3))'\n \n-\n-def test_issue_4194():\n+def test_issue_16438():\n+    # issue 16438, posify should preserve the finite assumption\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0 == {\n+        'positive': True,\n+        'zero': False,\n+        'imaginary': False,\n+        'nonpositive': False,\n+        'commutative': True,\n+        'hermitian': True,\n+        'real': True,\n+        'nonzero': True,\n+        'nonnegative': True,\n+        'negative': False,\n+        'complex': True,\n+        'finite': True,\n+        'infinite': False\n+    }\n+    \n+    # Additional test cases to ensure other attributes are preserved\n+    m = Symbol('m', finite=True, integer=True, rational=True)\n+    eq_m, rep_m = posify(m)\n+    assert eq_m.assumptions0 == {\n+        'positive': True,\n+        'zero': False,\n+        'imaginary': False,\n+        'nonpositive': False,\n+        'commutative': True,\n+        'hermitian': True,\n+        'real': True,\n+        'nonzero': True,\n+        'nonnegative': True,\n+        'negative': False,\n+        'complex': True,\n+        'finite': True,\n+        'infinite': False,\n+        'integer': True,\n+        'rational': True\n+    }\n     # simplify should call cancel\n     from sympy.abc import x, y\n     f = Function('f')\n",
  "sympy__sympy-16766": "",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py\nindex 23fddca..046ebbd 100644\n--- a/sympy/utilities/tests/test_autowrap.py\n+++ b/sympy/utilities/tests/test_autowrap.py\n@@ -66,11 +66,18 @@ def test_cython_wrapper_outarg():\n         \"    return z\")\n     assert source == expected\n \n-\n-def test_cython_wrapper_inoutarg():\n-    from sympy import Equality\n-    x, y, z = symbols('x,y,z')\n-    code_gen = CythonCodeWrapper(C99CodeGen())\n+def test_cython_wrapper_unused_array_argument():\n+    from sympy.utilities.autowrap import autowrap\n+    from sympy import MatrixSymbol\n+    import numpy as np\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0\n+    f = autowrap(expr, args=(x,), backend='cython')\n+\n+    # This should return 1.0 without any error even though x is not used in expr\n+    result = f(np.array([[1.0], [2.0]]))\n+    assert result == 1.0\n     routine = make_routine(\"test\", Equality(z, x + y + z))\n     source = get_string(code_gen.dump_pyx, [routine])\n     expected = (\n",
  "sympy__sympy-16886": "",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..e361d94 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -799,6 +799,15 @@ def test_nc_simplify():\n     expr = b**-1*(a**-1*b**-1 - a**-1*c*b**-1)**-1*a**-1\n     assert nc_simplify(expr) == (1-c)**-1\n     # commutative expressions should be returned without an error\n+\n+def test_issue_17137():\n+    from sympy import Symbol, I, simplify, cos\n+    x = Symbol('x')\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+    assert simplify(cos(x)**(-I)) == cos(x)**(-I)\n+    assert simplify(cos(x)**(I + 1)) == cos(x)**(I + 1)\n+    assert simplify(cos(x)**(1 - I)) == cos(x)**(1 - I)\n     assert nc_simplify(2*x**2) == 2*x**2\n \n def test_issue_15965():\n@@ -814,4 +823,4 @@ def test_issue_15965():\n def test_issue_7971():\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..9718d63 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,5 +1,7 @@\n+\n from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n-from sympy.simplify.sqrtdenest import _subsets as subsets\n+from sympy.simplify.sqrtdenest import _subsets as subsets, _sqrt_match\n+from sympy.core.expr import unchanged\n from sympy.utilities.pytest import slow\n \n r2, r3, r5, r6, r7, r10, r15, r29 = [sqrt(x) for x in [2, 3, 5, 6, 7, 10,\n@@ -176,7 +178,18 @@ def test_subsets():\n         [1, 1, 0, 1], [0, 0, 1, 1], [1, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]]\n \n \n-def test_issue_5653():\n+def test_issue_12420():\n+    I = S.ImaginaryUnit\n+    # Test the expression that originally raised an IndexError\n+    expr = (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2\n+    assert sqrtdenest(expr) == expr\n+\n+    # Additional test to verify that expressions that can't be denested remain unchanged\n+    expr2 = 5 - sqrt(3)*sqrt(5 + 2*I) + I\n+    assert sqrtdenest(expr2) == expr2\n+\n+    # Test for _sqrt_match function\n+    assert _sqrt_match(4 + I) == []\n     assert sqrtdenest(\n         sqrt(2 + sqrt(2 + sqrt(2)))) == sqrt(2 + sqrt(2 + sqrt(2)))\n \n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..7d6e188 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n@@ -90,6 +91,16 @@ def test_point():\n     assert p1.__radd__(p2) == p1.midpoint(p2).scale(2, 2)\n     assert (-p3).__rsub__(p4) == p3.midpoint(p4).scale(2, 2)\n \n+    # Test scalar multiplication with Point, both orders\n+    assert p4 * 2 == Point(2, 2)\n+    assert 2 * p4 == Point(2, 2)\n+\n+    # Additional test for scalar multiplication in both orders with sympify\n+    from sympy import sympify\n+    scalar = sympify(2.0)\n+    assert scalar * p4 == Point(2, 2)\n+    assert p4 * scalar == Point(2, 2)\n+\n     assert p4 * 5 == Point(5, 5)\n     assert p4 / 5 == Point(0.2, 0.2)\n \n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..fb70b46 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -501,7 +501,13 @@ def test_diophantine():\n     assert diophantine(eq, permute=True) == complete_soln\n \n     assert diophantine(x**2 + x*Rational(15, 14) - 3) == set()\n-    # test issue 11049\n+    # test issue 18186\n+    from sympy import symbols\n+    x, y = symbols('x y', integer=True)\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True) == \\\n+        {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True) == \\\n+        {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n     eq = 92*x**2 - 99*y**2 - z**2\n     coeff = eq.as_coefficients_dict()\n     assert _diop_ternary_quadratic_normal((x, y, z), coeff) == \\\n",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..559b7e8 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -677,6 +677,20 @@ def test_latex_subs():\n         x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n \n \n+def test_latex_subs():\n+    # Original test case to check current behavior\n+    assert latex(Subs(x*y, (x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n+\n+    # Test case from the issue description\n+    assert latex(3*Subs(-x+y, (x,), (1,))) == r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+\n+    # Additional test cases for more complex expressions\n+    assert latex(Subs(x*y + z, (x, y), (1, 2))) == r'\\left. \\left(x y + z\\right) \\right|_{\\substack{ x=1\\\\ y=2 }}'\n+    assert latex(2*Subs(x**2 + x*y + y**2, (x, y), (1, 2))) == r'2 \\left. \\left(x^{2} + x y + y^{2}\\right) \\right|_{\\substack{ x=1\\\\ y=2 }}'\n+\n+    # Test for nested substitution\n+    assert latex(Subs(Subs(x*y, x, z), y, 1)) == r'\\left. \\left( \\left. x y \\right|_{\\substack{ x=z }} \\right) \\right|_{\\substack{ y=1 }}'\n+\n def test_latex_integrals():\n     assert latex(Integral(log(x), x)) == r\"\\int \\log{\\left(x \\right)}\\, dx\"\n     assert latex(Integral(x**2, (x, 0, 1))) == \\\n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "diff --git a/sympy/sets/tests/test_conditionset.py b/sympy/sets/tests/test_conditionset.py\nindex 68ee5d6..95b578f 100644\n--- a/sympy/sets/tests/test_conditionset.py\n+++ b/sympy/sets/tests/test_conditionset.py\n@@ -1,6 +1,7 @@\n+\n from sympy.sets import (ConditionSet, Intersection, FiniteSet,\n-    EmptySet, Union, Contains)\n-from sympy import (Symbol, Eq, S, Abs, sin, pi, Interval,\n+    EmptySet, Union, Contains, imageset)\n+from sympy import (Symbol, Eq, S, Abs, sin, asin, pi, Interval,\n     And, Mod, oo, Function)\n from sympy.testing.pytest import raises, XFAIL, warns_deprecated_sympy\n \n@@ -130,6 +131,22 @@ def test_subs_CondSet():\n         ).subs(f(x), y) == ConditionSet(y, y < 1, {w, z})\n \n \n+def test_subs_imageset_conditionset():\n+    k = Symbol('k')\n+    img1 = imageset(Lambda(k, 2*k*pi + asin(y)), S.Integers)\n+    img2 = imageset(Lambda(k, 2*k*pi + asin(S.One/3)), S.Integers)\n+    cond_set = ConditionSet(x, Contains(y, Interval(-1, 1)), img1)\n+    \n+    # Test substitution in ConditionSet with ImageSet\n+    assert cond_set.subs(y, S.One/3) == ConditionSet(x, Contains(S.One/3, Interval(-1, 1)), img2)\n+    assert cond_set.subs(y, S.One/3).dummy_eq(img2)\n+\n+    # Test substitution with simultaneous=True\n+    assert cond_set.subs({y: S.One/3}, simultaneous=True) == img2\n+\n+    # Test xreplace with ConditionSet and ImageSet\n+    assert cond_set.xreplace({y: S.One/3}) == img2\n+\n def test_subs_CondSet_tebr():\n     with warns_deprecated_sympy():\n         assert ConditionSet((x, y), {x + 1, x + y}, S.Reals) == \\\n",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..c8c65b3 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -484,6 +484,27 @@ def test_geometry():\n \n \n def test_kernS():\n+    from sympy.abc import x, y\n+    from sympy.core.sympify import kernS\n+    from sympy import Symbol, Interval, Add, Mul, exp\n+\n+    # Original test case from the issue\n+    assert kernS(\"(2*x)/(x-1)\") == 2*x/(x-1)\n+\n+    # Test simple expressions\n+    assert kernS(\"x + 1\") == x + 1\n+    assert kernS(\"2*(x + y)\") == 2*(x + y)\n+\n+    # Test parentheses\n+    assert kernS(\"-(x + 1)\") == -(x + 1)\n+    assert kernS(\"2*(x + (1 + y))\") == 2*(x + (1 + y))\n+\n+    # Test with symbols that might trigger 'kern' error\n+    assert kernS(\"x - (x - 1)\") == (x - (x - 1))\n+    assert kernS(\"a*b + c/d\") == Symbol('a')*Symbol('b') + Symbol('c')/Symbol('d')\n+\n+    # Test negative numbers with parentheses\n+    assert kernS(\"-(3*x + 4)\") == -(3*x + 4)\n     s =   '-1 - 2*(-(-x + 1/x)/(x*(x - 1/x)**2) - 1/(x*(x - 1/x)))'\n     # when 1497 is fixed, this no longer should pass: the expression\n     # should be unchanged\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_operator.py b/sympy/physics/quantum/tests/test_operator.py\nindex 799aaae..9813759 100644\n--- a/sympy/physics/quantum/tests/test_operator.py\n+++ b/sympy/physics/quantum/tests/test_operator.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Derivative, diff, Function, Integer, Mul, pi, sin, Symbol,\n                    symbols)\n from sympy.physics.quantum.qexpr import QExpr\n@@ -13,6 +14,7 @@ from sympy.physics.quantum.represent import represent\n from sympy.core.trace import Tr\n from sympy.physics.quantum.spin import JzKet, JzBra\n from sympy.matrices import eye\n+from sympy import Mul\n \n \n class CustomKet(Ket):\n@@ -84,6 +86,17 @@ def test_unitary():\n     assert Dagger(U).is_commutative is False\n \n \n+def test_dagger_mul():\n+    O = Operator('O')\n+    I = IdentityOperator()\n+    assert Dagger(O) * O == Dagger(O) * O  # Basic test, should remain unchanged\n+    assert Dagger(O) * O * I == Dagger(O) * O  # Ensure multiplication with IdentityOperator\n+    assert Dagger(O) * Dagger(O) == Dagger(O)**2  # Check if dagger operation simplifies correctly\n+    assert Dagger(O) * Dagger(I) == Dagger(O)  # Dagger of IdentityOperator should be itself\n+\n+    assert I * Dagger(O) == Dagger(O)  # Identity should simplify when on left\n+    assert Dagger(O) * I == Dagger(O)  # Identity should simplify when on right\n+\n def test_identity():\n     I = IdentityOperator()\n     O = Operator('O')\n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..8e5b646 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -877,6 +877,14 @@ def test_sylow_subgroup():\n     S = P.sylow_subgroup(5)\n     assert S.order() == 25\n \n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n     # the length of the lower central series\n     # of a p-Sylow subgroup of Sym(n) grows with\n     # the highest exponent exp of p such\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..d98952d 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -471,7 +471,24 @@ def test_multiset_permutations():\n         6\\n''')\n \n \n+from sympy.utilities.iterables import partitions\n+\n def test_partitions():\n+    # Test to ensure dictionaries are not reused\n+    parts = list(partitions(5, k=2))\n+    parts_copy = [p.copy() for p in parts]\n+    # Verify that modifying one dictionary does not affect the others\n+    parts[0][2] = 99  # Arbitrary modification\n+    assert parts != parts_copy, \"Partitions are being reused; dictionaries are not independent.\"\n+    assert parts_copy == [{2: 2, 1: 1}, {2: 1, 1: 3}, {1: 5}], \"Unexpected partition results after modification.\"\n+\n+    # Test simple generation and ensure list works fine without copy\n+    assert list(partitions(3)) == [{3: 1}, {1: 1, 2: 1}, {1: 3}]\n+    assert list(partitions(4)) == [{4: 1}, {1: 1, 3: 1}, {2: 2}, {1: 2, 2: 1}, {1: 4}]\n+\n+    # Testing with m and k parameters\n+    assert list(partitions(4, m=2)) == [{4: 1}, {1: 1, 3: 1}, {2: 2}]\n+    assert list(partitions(4, k=2)) == [{2: 2}, {1: 2, 2: 1}, {1: 4}]\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n         assert list(partitions(0, size=i)) == ans[i]\n",
  "sympy__sympy-20801": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e1c7e2..941536b 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -583,8 +583,20 @@ def test_Float():\n         assert Float(i) is a\n \n \n-\n-@conserve_mpmath_dps\n+def test_zero_not_false_additional():\n+    # Verify different order and types\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0.0) == S.false) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n+    \n+    # Test negation\n+    assert not (S(0.0) == S.false)\n+    assert not (S(0) == S.false)\n+    \n+    # Test inequality\n+    assert (S(0.0) != S.false) is True\n+    assert (S(0) != S.false) is True\n def test_float_mpf():\n     import mpmath\n     mpmath.mp.dps = 100\n",
  "sympy__sympy-21379": "",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..0735520 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -120,6 +120,23 @@ def test_monomials():\n     assert set(itermonomials([x, y], [0, 2], [0, 1])) == {y, y**2}\n     assert set(itermonomials([x, y], [0, 2], [0, 2])) == {y**2}\n \n+    # Test cases for verifying the fix of the issue with min_degrees\n+    assert set(itermonomials([x, y], 3, 3)) == {x**3, x**2*y, x*y**2, y**3}\n+    assert set(itermonomials([x, y], 3, 2)) == {x**2, x*y, y**2, x**3, x**2*y, x*y**2, y**3}\n+    \n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    assert set(itermonomials([x1, x2, x3], 3, 3)) == {\n+        x1**3, x2**3, x3**3, \n+        x1**2*x2, x1**2*x3, x1*x2**2, x2**2*x3, x1*x3**2, x2*x3**2,\n+        x1*x2*x3\n+    }\n+    assert set(itermonomials([x1, x2, x3], 3, 2)) == {\n+        x1**2, x2**2, x3**2, x1*x2, x1*x3, x2*x3,\n+        x1**3, x2**3, x3**3, \n+        x1**2*x2, x1**2*x3, x2**2*x3, x1*x2**2, x2*x3**2,\n+        x1*x3**2, x1*x2*x3, x1*x2**2, x2*x3, x1*x2\n+    }\n+\n     assert set(itermonomials([x, y], [1, 0])) == {S.One, x}\n     assert set(itermonomials([x, y], [1, 1])) == {S.One, x, y, x*y}\n     assert set(itermonomials([x, y], [1, 2])) == {S.One, x, y, x*y, y**2, x*y**2}\n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..b73b1a1 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -267,6 +267,7 @@ def test_String():\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n+    assert st.func(*st.args) == st  # Test for argument invariance\n \n \n     class Signifier(String):\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..32da698 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -11,8 +12,37 @@ from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n from sympy.testing.pytest import raises, warns\n \n-\n-def test_point():\n+from sympy.core.parameters import evaluate\n+\n+def test_issue_imaginary_coordinates():\n+    # This test checks if the issue with evaluate(False) has been resolved\n+    with evaluate(False):\n+        # Create a Point2D with integer coordinates\n+        p = Point2D(1, 2)\n+        assert p == Point2D(1, 2)\n+        \n+        # Create a Point2D with rational coordinates\n+        p = Point2D(Rational(1, 2), Rational(2, 3))\n+        assert p == Point2D(Rational(1, 2), Rational(2, 3))\n+        \n+        # Check that no error is raised and return type is correct with evaluate(False)\n+        p = Point2D(1, 2, evaluate=False)\n+        assert isinstance(p, Point2D)\n+        assert p.args == (1, 2)\n+\n+    # Test that imaginary coordinates still raise an error, even with evaluate(False)\n+    with raises(ValueError, match='Imaginary coordinates are not permitted.'):\n+        with evaluate(False):\n+            Point2D(1 + I, 2)\n+\n+    # Test that creating Point2D normally without evaluate(False) works well\n+    p = Point2D(1, 2)\n+    assert p == Point2D(1, 2)\n+\n+    # Test that Point2D creation with evaluate=False directly also works\n+    p = Point2D(1, 2, evaluate=False)\n+    assert isinstance(p, Point2D)\n+    assert p.args == (1, 2)\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     x1 = Symbol('x1', real=True)\n",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..5a4c2a5 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n@@ -52,6 +53,16 @@ def test_PythonCodePrinter():\n                         (3, Gt(x, 0)), evaluate=False)) == '((2) if (x <= 0) else'\\\n                                                         ' (3) if (x > 0) else None)'\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n+    assert prntr.doprint(Min(x, y)) == \"min(x, y)\"\n+    assert prntr.doprint(Max(x, y)) == \"max(x, y)\"\n+    assert prntr.doprint(Min(x, y, z)) == \"min(x, y, z)\"\n+    assert prntr.doprint(Max(x, y, z)) == \"max(x, y, z)\"\n+    assert prntr.doprint(Min(x + 1, y - 1)) == \"min(x + 1, y - 1)\"\n+    assert prntr.doprint(Max(x**2, y**2)) == \"max(x**2, y**2)\"\n+    assert prntr.doprint(Min(x, 0)) == \"min(x, 0)\"\n+    assert prntr.doprint(Max(0, y)) == \"max(0, y)\"\n+    assert prntr.doprint(Min(x, Min(y, z))) == \"min(x, min(y, z))\"\n+    assert prntr.doprint(Max(Max(x, y), z)) == \"max(max(x, y), z)\"\n     assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n     assert prntr.doprint(KroneckerDelta(x,y)) == '(1 if x == y else 0)'\n \n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..7ada509 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1174,6 +1174,19 @@ def test_scipy_polys():\n                     )\n \n \n+import inspect\n+\n+def test_tuple_with_single_element():\n+    f2b = lambdify([], (1,))  # Test that a single element tuple is handled correctly\n+    source = inspect.getsource(f2b)\n+    assert 'return (1,)' in source\n+    assert f2b() == (1,)\n+\n+def test_tuple_with_multiple_elements():\n+    f2c = lambdify([], (1, 2))  # Test that a multiple element tuple is handled correctly\n+    source = inspect.getsource(f2c)\n+    assert 'return (1, 2)' in source\n+    assert f2c() == (1, 2)\n \n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..a460a9e 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,6 +1,20 @@\n+\n+def test_symbols_cls_function_with_extra_parentheses():\n+    from sympy.core.function import UndefinedFunction\n+    q, u = symbols(('q:2', 'u:2'), cls=Function)\n+    assert isinstance(q[0], UndefinedFunction), \"Expected q[0] to be an instance of UndefinedFunction\"\n+    assert isinstance(u[1], UndefinedFunction), \"Expected u[1] to be an instance of UndefinedFunction\"\n+\n+def test_symbols_cls_function_without_extra_parentheses():\n+    from sympy.core.function import UndefinedFunction\n+    q, u = symbols('q:2 u:2', cls=Function)\n+    assert isinstance(q, UndefinedFunction), \"Expected q to be an instance of UndefinedFunction\"\n+    assert isinstance(u, UndefinedFunction), \"Expected u to be an instance of UndefinedFunction\"\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n+from sympy.core.function import Function, UndefinedFunction\n from sympy.core.sympify import sympify  # can't import as S yet\n from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n \n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..f94f0e0 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -261,8 +261,46 @@ def test_kahane_simplify1():\n     r = kahane_simplify(t)\n     assert r.equals(-2*G(sigma)*G(rho)*G(nu))\n \n+def test_kahane_leading_gamma_matrix_bug():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n+\n+    # Original test cases for the issue\n+    t = G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    t = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    # Additional test cases to check for various orders and combinations\n+    # Test with different indices\n+    t = G(rho)*G(mu)*G(sigma)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    t = G(mu)*G(-mu)*G(sigma)*G(rho)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(sigma)*G(rho))\n \n-def test_gamma_matrix_class():\n+    # Test with additional leading gammas\n+    t = G(alpha)*G(beta)*G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(alpha)*G(beta)*G(rho)*G(sigma))\n+\n+    t = G(rho)*G(sigma)*G(alpha)*G(beta)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma)*G(alpha)*G(beta))\n+\n+    # Test with no contraction\n+    t = G(alpha)*G(beta)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(t)\n+\n+    # Test with contracted gammas only\n+    t = G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*eye(4))\n     i, j, k = tensor_indices('i,j,k', LorentzIndex)\n \n     # define another type of TensorHead to see if exprs are correctly handled:\n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..c50936f 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -29,8 +29,13 @@ def test_issue_10326():\n     assert Contains(oo, Interval(-oo, oo)) == False\n     assert Contains(-oo, Interval(-oo, oo)) == False\n \n-\n-def test_binary_symbols():\n+def test_as_set_not_implemented():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    # Test Contains with various sets and ensure NotImplementedError is raised\n+    raises(NotImplementedError, lambda: Contains(x, FiniteSet(y)).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, S.Integers).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, S.Reals).as_set())\n     x = Symbol('x')\n     y = Symbol('y')\n     z = Symbol('z')\n@@ -48,4 +53,4 @@ def test_as_set():\n \n def test_type_error():\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..8901c55 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,6 +528,31 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units import Quantity\n+    from sympy.physics.units.systems.si import SI\n+    from sympy import exp\n+    from sympy.physics.units.dimensions import Dimension\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+    \n def test_issue_20288():\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..adb1db6 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -561,6 +561,31 @@ def test_issue_24062():\n     exp_expr = 1 + exp(expr)\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n+def test_issue_collect_factor_and_dimension_equivalent_dimensions():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+    # Setting up the quantities\n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * meter / second)\n+\n+    a1 = Quantity('a1')\n+    SI.set_quantity_dimension(a1, acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)\n+\n+    t1 = Quantity('t1')\n+    SI.set_quantity_dimension(t1, time)\n+    SI.set_quantity_scale_factor(t1, 5 * second)\n+\n+    # Expression that should be correctly simplified as equivalent dimensions\n+    expr1 = a1 * t1 + v1\n+\n+    # Ensuring no ValueError is raised, and dimensions are correctly identified\n+    try:\n+        scale_factor, dimension = SI._collect_factor_and_dimension(expr1)\n+        assert dimension == SI.get_quantity_dimension(v1)\n+    except ValueError as e:\n+        assert False, f\"Test failed, unexpected ValueError: {e}\"\n+\n \n def test_prefixed_property():\n     assert not meter.is_prefixed\n",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..964f382 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,9 +1,11 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n from sympy.combinatorics.free_groups import free_group\n from sympy.combinatorics.fp_groups import FpGroup\n from sympy.combinatorics.named_groups import AlternatingGroup, DihedralGroup, CyclicGroup\n+from sympy.combinatorics.named_groups import DihedralGroup\n from sympy.testing.pytest import raises\n \n def test_homomorphism():\n@@ -56,8 +58,11 @@ def test_homomorphism():\n     assert T.domain == F\n     assert T.codomain == D\n     assert T(a*b) == p\n-\n-def test_isomorphisms():\n+def test_check_homomorphism_on_permutation_groups():\n+    # This test checks the issue described: `_check_homomorphism` with PermutationGroups\n+    D3 = DihedralGroup(3)\n+    T = homomorphism(D3, D3, D3.generators, D3.generators)\n+    assert T.is_isomorphism()\n \n     F, a, b = free_group(\"a, b\")\n     E, c, d = free_group(\"c, d\")\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..a82d6b1 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -267,6 +267,17 @@ def test_PolyElement_as_expr():\n \n     raises(ValueError, lambda: f.as_expr(X))\n \n+    # Additional test case to ensure as_expr uses provided symbols correctly\n+    U, V, W = symbols(\"u,v,w\")\n+    g_custom_symbols = 3*U**2*V - U*V*W + 7*W**3 + 1\n+    assert f.as_expr(U, V, W) == g_custom_symbols\n+\n+    # Test case with a different number of symbols should raise an error\n+    raises(ValueError, lambda: f.as_expr(U, V))\n+\n+    # Test with no symbols provided should default to ring's symbols\n+    assert f.as_expr() == g\n+\n     R, = ring(\"\", ZZ)\n     assert R(3).as_expr() == 3\n \n",
  "sympy__sympy-24661": "",
  "astropy__astropy-14369": "diff --git a/astropy/units/tests/test_format.py b/astropy/units/tests/test_format.py\nindex 062b5f4..dab2704 100644\n--- a/astropy/units/tests/test_format.py\n+++ b/astropy/units/tests/test_format.py\n@@ -61,6 +61,8 @@ def test_unit_grammar_fail(string):\n         ([\"mW/(m2)\"], u.Unit(u.erg / u.cm**2 / u.s)),\n         ([\"km/s\", \"km.s-1\"], u.km / u.s),\n         ([\"10pix/nm\"], u.Unit(10 * u.pix / u.nm)),\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.W / (u.m * u.s * u.kpc**2))),\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.J / (u.s * u.kpc**2))),\n         ([\"1.5x10+11m\"], u.Unit(1.5e11 * u.m)),\n         ([\"1.5\u00d710+11m\"], u.Unit(1.5e11 * u.m)),\n         ([\"m2\"], u.m**2),\n",
  "astropy__astropy-14598": "",
  "django__django-11299": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex b3dc643..d5ed20b 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1897,8 +1897,37 @@ class OperationTests(OperationTestBase):\n             Author.objects.create(name='Albert', rebate='10$')\n         author = Author.objects.create(name='Albert', rebate='10%')\n         self.assertEqual(Author.objects.get(), author)\n+    from django.db import connection, transaction\n+    from django.db.utils import IntegrityError\n+    from django.test import skipUnlessDBFeature\n+    from django.db import models\n+    from django.db.models import Q, F\n+    from .test_base import BaseMigrationTestCase\n+\n+    class TestMigrationsOperations(BaseMigrationTestCase):\n+        @skipUnlessDBFeature('supports_table_check_constraints')\n+        def test_check_constraint_with_or_malformed_sql(self):\n+            app_label = 'test_malformed_constraint'\n+            constraint_name = 'malformed_constraint_or'\n+            field_1 = 'field_1'\n+            flag = 'flag'\n+            \n+            # Setting up test model\n+            from_state = self.set_up_test_model(app_label)\n+            check = models.Q(flag__exact=True, field_1__isnull=False) | models.Q(flag__exact=False,)\n+            constraint = models.CheckConstraint(check=check, name=constraint_name)\n+            operation = migrations.AddConstraint('TestConstraint', constraint)\n+            to_state = from_state.clone()\n+            operation.state_forwards(app_label, to_state)\n+            with connection.schema_editor() as editor:\n+                operation.database_forwards(app_label, editor, from_state, to_state)\n \n-    @skipUnlessDBFeature('supports_table_check_constraints')\n+            TestConstraint = to_state.apps.get_model(app_label, 'TestConstraint')\n+            # Testing check constraint behavior\n+            with self.assertRaises(IntegrityError), transaction.atomic():\n+                TestConstraint.objects.create(field_1=None, flag=True)\n+            TestConstraint.objects.create(field_1=1, flag=True)\n+            TestConstraint.objects.create(field_1=None, flag=False)\n     def test_remove_constraint(self):\n         project_state = self.set_up_test_model(\"test_removeconstraint\", constraints=[\n             models.CheckConstraint(check=models.Q(pink__gt=2), name=\"test_remove_constraint_pony_pink_gt_2\"),\n",
  "django__django-11477": "diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex e4898b6..e51f7df 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -164,6 +164,43 @@ class URLTranslationTests(URLTestCaseBase):\n             self.assertEqual(translation.get_language(), 'nl')\n \n \n+import unittest\n+from django.urls import resolve, re_path, path\n+from django.utils.translation import gettext_lazy as _\n+from . import views\n+\n+...\n+\n+class URLTranslationTests(unittest.TestCase):\n+\n+    def test_translate_url_with_optional_parameters(self):\n+        # Test case for URL without optional argument present\n+        self.assertEqual(\n+            translate_url('/en/with-arguments/regular-argument/', 'nl'),\n+            '/nl/with-arguments/regular-argument/'\n+        )\n+        # Test case for URL with optional argument present\n+        self.assertEqual(\n+            translate_url('/en/with-arguments/regular-argument/optional.html', 'nl'),\n+            '/nl/with-arguments/regular-argument/optional.html'\n+        )\n+\n+    def test_resolve_with_optional_parameters(self):\n+        # Test resolving URLs with optional parameters\n+        url_patterns = [\n+            ('/regex_optional/1/2/', {'arg1': '1', 'arg2': '2'}),\n+            ('/regex_optional/1/', {'arg1': '1'}),\n+        ]\n+        for url, expected_kwargs in url_patterns:\n+            with self.subTest(url=url):\n+                match = resolve(url)\n+                self.assertEqual(match.url_name, 'regex_optional')\n+                self.assertEqual(match.kwargs, expected_kwargs)\n+                self.assertEqual(\n+                    match.route,\n+                    r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?'\n+                )\n+\n class URLNamespaceTests(URLTestCaseBase):\n     \"\"\"\n     Tests if the translations are still working within namespaces.\n",
  "django__django-12273": "diff --git a/tests/model_inheritance_regress/tests.py b/tests/model_inheritance_regress/tests.py\nindex d79faca..4e5fdab 100644\n--- a/tests/model_inheritance_regress/tests.py\n+++ b/tests/model_inheritance_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Regression tests for Model inheritance behavior.\n \"\"\"\n@@ -14,11 +15,27 @@ from .models import (\n     MessyBachelorParty, ParkingLot, ParkingLot3, ParkingLot4A, ParkingLot4B,\n     Person, Place, Profile, QualityControl, Restaurant, SelfRefChild,\n     SelfRefParent, Senator, Supplier, TrainStation, User, Wholesaler,\n+    Derived,\n )\n \n \n class ModelInheritanceTest(TestCase):\n-    def test_model_inheritance(self):\n+    def test_reset_primary_key_for_derived_model(self):\n+        derived_instance = Derived.objects.create(f=True)\n+        # Get the original primary key\n+        original_pk = derived_instance.pk\n+        # Reset the primary key\n+        derived_instance.reset()\n+        derived_instance.save()\n+        \n+        # Ensure that the original object still exists\n+        original_object = Derived.objects.get(pk=original_pk)\n+        self.assertTrue(original_object.f)\n+        \n+        # Ensure that a new object is created\n+        self.assertEqual(Derived.objects.count(), 2)\n+        new_object = Derived.objects.exclude(pk=original_pk).get()\n+        self.assertFalse(new_object.f)\n         # Regression for #7350, #7202\n         # When you create a Parent object with a specific reference to an\n         # existent child instance, saving the Parent doesn't duplicate the\n",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..bdfd8a6 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -606,6 +606,13 @@ class DeletionTests(TestCase):\n \n class FastDeleteTests(TestCase):\n \n+    def test_fast_delete_all_no_subquery(self):\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        # Ensure no subqueries are used in the delete SQL.\n+        self.assertNotIn('SELECT', sql)\n+    \n     def test_fast_delete_fk(self):\n         u = User.objects.create(\n             avatar=Avatar.objects.create()\n@@ -702,4 +709,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..3641c00 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from decimal import Decimal\n \n@@ -25,7 +26,16 @@ class DecimalFieldTests(TestCase):\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n \n-    def test_default(self):\n+    def test_invalid_value(self):\n+        field = models.DecimalField(max_digits=4, decimal_places=2)\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        tests = [\n+            {},\n+        ]\n+        for value in tests:\n+            with self.subTest(value=value):\n+                with self.assertRaisesMessage(ValidationError, msg % (value,)):\n+                    field.to_python(value)\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n \n",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..064a2c5 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n \n@@ -5,7 +6,7 @@ import django\n from django.db import models\n from django.test import TestCase\n \n-from .models import Container, Event, Group, Happening, M2MModel, MyEvent\n+from .models import Container, Event, Group, Happening, M2MModel, MyEvent, Toy\n \n \n class PickleabilityTestCase(TestCase):\n@@ -87,6 +88,16 @@ class PickleabilityTestCase(TestCase):\n         self.assertEqual(original, reloaded)\n         self.assertEqual(original.somefield, reloaded.somefield)\n \n+    def test_pickle_values_annotate(self):\n+        \"\"\"\n+        Test pickling of a queryset using values() and annotate().\n+        \"\"\"\n+        Toy.objects.create(name='foo', price=10, material='wood')\n+        Toy.objects.create(name='bar', price=20, material='plastic')\n+        Toy.objects.create(name='baz', price=100, material='wood')\n+        prices = Toy.objects.values('material').annotate(total_price=models.Sum('price'))\n+        self.assert_pickles(prices)\n+\n     def test_model_pickle_m2m(self):\n         \"\"\"\n         Test intentionally the automatically created through model.\n",
  "django__django-13449": "diff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\nindex 3f59cdf..d9c7568 100644\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -11,4 +11,5 @@ class Employee(models.Model):\n     department = models.CharField(max_length=40, blank=False, null=False)\n     hire_date = models.DateField(blank=False, null=False)\n     age = models.IntegerField(blank=False, null=False)\n-    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\n",
  "django__django-13512": "diff --git a/tests/forms_tests/field_tests/test_jsonfield.py b/tests/forms_tests/field_tests/test_jsonfield.py\nindex e31bff4..b33c9d1 100644\n--- a/tests/forms_tests/field_tests/test_jsonfield.py\n+++ b/tests/forms_tests/field_tests/test_jsonfield.py\n@@ -30,7 +30,15 @@ class JSONFieldTest(SimpleTestCase):\n         self.assertEqual(field.prepare_value(None), 'null')\n         self.assertEqual(field.prepare_value('foo'), '\"foo\"')\n \n-    def test_widget(self):\n+    def test_prepare_value_unicode(self):\n+        field = JSONField()\n+        self.assertEqual(field.prepare_value({'a': '\u4f60\u597d \u4e16\u754c'}), '{\"a\": \"\u4f60\u597d \u4e16\u754c\"}')\n+        self.assertEqual(field.prepare_value('\u4f60\u597d\uff0c\u4e16\u754c'), '\"\u4f60\u597d\uff0c\u4e16\u754c\"')\n+        self.assertEqual(field.prepare_value({'a': '\ud83d\ude00\ud83d\udc31'}), '{\"a\": \"\ud83d\ude00\ud83d\udc31\"}')\n+        self.assertEqual(\n+            field.prepare_value([\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]),\n+            '[\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]',\n+        )\n         field = JSONField()\n         self.assertIsInstance(field.widget, Textarea)\n \n",
  "django__django-14404": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 8fb91af..f13af69 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -6603,6 +6603,55 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         self.assertRedirects(response, known_url, status_code=301, target_status_code=403)\n \n     @override_settings(APPEND_SLASH=True)\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/prefix/')\n+    def test_missing_slash_with_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=False, FORCE_SCRIPT_NAME='/prefix/')\n+    def test_no_append_slash_with_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertEqual(response.status_code, 404)\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/prefix/')\n+    def test_append_slash_true_script_name_different_user(self):\n+        user = User.objects.create_user(\n+            username='user',\n+            password='secret',\n+            email='user@example.com',\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/prefix/test_admin/admin/login/?next=/prefix/test_admin/admin/admin_views/article',\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n         user = User.objects.create_user(\n             username='user',\n@@ -6629,6 +6678,55 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         self.assertEqual(response.status_code, 404)\n \n     @override_settings(APPEND_SLASH=True)\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/prefix/')\n+    def test_missing_slash_with_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=False, FORCE_SCRIPT_NAME='/prefix/')\n+    def test_no_append_slash_with_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertEqual(response.status_code, 404)\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/prefix/')\n+    def test_append_slash_true_script_name_different_user(self):\n+        user = User.objects.create_user(\n+            username='user',\n+            password='secret',\n+            email='user@example.com',\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/prefix/test_admin/admin/login/?next=/prefix/test_admin/admin/admin_views/article',\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n     def test_single_model_no_append_slash(self):\n         superuser = User.objects.create_user(\n             username='staff',\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..053fdb2 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -691,7 +691,36 @@ class WriterTests(SimpleTestCase):\n         result = self.safe_exec(output)\n         self.assertIn(\"Migration\", result)\n \n-    def test_migration_path(self):\n+    def test_migration_with_custom_field_and_mixin(self):\n+        \"\"\"\n+        Test that a migration involving a custom field and mixin includes the required imports.\n+        \"\"\"\n+        # Define the model structure similar to the issue description\n+        model_structure = {\n+            \"name\": models.TextField(primary_key=True)\n+        }\n+\n+        # Define the migration\n+        migration = type(\"Migration\", (migrations.Migration,), {\n+            \"operations\": [\n+                migrations.CreateModel(\n+                    name=\"MyModel\",\n+                    fields=list(model_structure.items()),\n+                    bases=(\"app.models.MyMixin\", models.Model),\n+                ),\n+            ],\n+            \"dependencies\": []\n+        })\n+\n+        # Serialize the migration and check for import of 'models'\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        self.assertIn(\"from django.db import models\", output)\n+        self.assertIn(\"class Migration(migrations.Migration)\", output)\n+\n+        # Execute the migration code to ensure it runs without NameError\n+        result = self.safe_exec(output)\n+        self.assertIn(\"Migration\", result)\n         test_apps = [\n             'migrations.migrations_test_apps.normal',\n             'migrations.migrations_test_apps.with_package_model',\n",
  "django__django-15375": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1d4ef56..5799ec9 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1630,6 +1630,13 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertAlmostEqual(result['value'], Decimal('61.72'), places=2)\n \n+    def test_aggregation_default_after_annotation_with_sum(self):\n+        result = Book.objects.annotate(\n+            idx=F('id'),\n+        ).aggregate(total=Sum('id', default=0))\n+        # Verify that no errors occur and the output is as expected\n+        self.assertEqual(result['total'], Book.objects.aggregate(Sum('id'))['id__sum'])\n+\n     def test_exists_none_with_aggregate(self):\n         qs = Book.objects.all().annotate(\n             count=Count('id'),\n@@ -1642,4 +1649,4 @@ class AggregateTestCase(TestCase):\n             count=Count('id'),\n             exists=Exists(Author.objects.extra(where=['1=0'])),\n         )\n-        self.assertEqual(len(qs), 6)\n+        self.assertEqual(len(qs), 6)\n",
  "django__django-15695": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 99db46a..aa145a7 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -2988,7 +2988,15 @@ class OperationTests(OperationTestBase):\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             operation.database_backwards(app_label, editor, new_state, project_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n-        # Deconstruction.\n+        # Ensure RenameIndex operation doesn't crash on re-apply when moving backward.\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        self.assertIndexNameExists(table_name, \"Pony_weight_pink_idx\")  # Ensure old name is restored.\n+\n+        # Re-apply renaming.\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n         definition = operation.deconstruct()\n         self.assertEqual(definition[0], \"RenameIndex\")\n         self.assertEqual(definition[1], [])\n",
  "django__django-15732": "",
  "django__django-15916": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex cc5e08c..d525ac7 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -3497,7 +3497,76 @@ class FormFieldCallbackTests(SimpleTestCase):\n             )\n \n \n-class LocalizedModelFormTest(TestCase):\n+from django.test import TestCase\n+from django import forms\n+from django.forms import modelform_factory\n+from .models import Person\n+\n+class FormFieldCallbackTest(TestCase):\n+    def test_custom_callback_in_meta(self):\n+        def callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea)\n+\n+        class NewForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = [\"id\", \"name\"]\n+                formfield_callback = callback\n+\n+        for field in NewForm.base_fields.values():\n+            self.assertEqual(type(field.widget), forms.Textarea)\n+\n+    def test_custom_callback_from_base_form_meta(self):\n+        def callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea)\n+\n+        class BaseForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = \"__all__\"\n+                formfield_callback = callback\n+\n+        NewForm = modelform_factory(model=Person, form=BaseForm)\n+\n+        class InheritedForm(NewForm):\n+            pass\n+\n+        for name, field in NewForm.base_fields.items():\n+            self.assertEqual(type(field.widget), forms.Textarea)\n+            self.assertEqual(\n+                type(field.widget),\n+                type(InheritedForm.base_fields[name].widget),\n+            )\n+\n+    def test_modelform_factory_respects_callback(self):\n+        def callback(db_field, **kwargs):\n+            formfield = db_field.formfield(**kwargs)\n+            formfield.widget = forms.Textarea()\n+            return formfield\n+\n+        class BaseForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = ['name']\n+                formfield_callback = callback\n+\n+        FactoryForm = modelform_factory(Person, form=BaseForm)\n+        for field in FactoryForm.base_fields.values():\n+            self.assertEqual(type(field.widget), forms.Textarea)\n+\n+    def test_modelform_factory_callback_not_overwritten(self):\n+        def callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea)\n+\n+        class MyForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = [\"name\"]\n+                formfield_callback = callback\n+\n+        FactoryForm = modelform_factory(Person, form=MyForm)\n+        for field in FactoryForm.base_fields.values():\n+            self.assertEqual(type(field.widget), forms.Textarea)\n     def test_model_form_applies_localize_to_some_fields(self):\n         class PartiallyLocalizedTripleForm(forms.ModelForm):\n             class Meta:\n",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..35c1d0d 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -9,7 +9,9 @@ from django.core.serializers.json import DjangoJSONEncoder\n from django.db import models\n from django.test import SimpleTestCase, TestCase, TransactionTestCase\n from django.test.utils import isolate_apps\n-from django.utils.translation import gettext_lazy, override\n+from django.core.exceptions import FieldError\n+from django.db import models\n+from django.core import serializers\n \n from .models import Score\n from .tests import SerializersTestBase, SerializersTransactionTestBase\n@@ -67,7 +69,39 @@ class JsonSerializerTestCase(SerializersTestBase, TestCase):\n             if field_name in obj_dict[\"fields\"]\n         ]\n \n-    def test_indentation_whitespace(self):\n+    def test_m2m_custom_manager_select_related_raises(self):\n+        \"\"\"\n+        Test serialization of a many-to-many relation with a custom manager\n+        using select_related to verify the FieldError is raised.\n+        \"\"\"\n+        class TestTagMaster(models.Model):\n+            name = models.CharField(max_length=120)\n+\n+        class TestTagManager(models.Manager):\n+            def get_queryset(self):\n+                return super().get_queryset().select_related(\"master\")\n+\n+        class TestTag(models.Model):\n+            objects = TestTagManager()\n+            name = models.CharField(max_length=120)\n+            master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)\n+\n+        class Test(models.Model):\n+            name = models.CharField(max_length=120)\n+            tags = models.ManyToManyField(TestTag, blank=True)\n+\n+        tag_master = TestTagMaster.objects.create(name=\"master\")\n+        tag = TestTag.objects.create(name=\"tag\", master=tag_master)\n+        test_instance = Test.objects.create(name=\"test\")\n+        test_instance.tags.add(tag)\n+\n+        with self.assertRaises(FieldError) as context:\n+            serializers.serialize(\"json\", [test_instance])\n+        \n+        self.assertIn(\n+            \"Field TestTag.master cannot be both deferred and traversed using select_related at the same time\",\n+            str(context.exception)\n+        )\n         s = serializers.json.Serializer()\n         json_data = s.serialize([Score(score=5.0), Score(score=6.0)], indent=2)\n         for line in json_data.splitlines():\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 53fdd55..b7de4eb 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -217,7 +217,23 @@ def test_unpickle_canvas():\n     assert fig2.canvas is not None\n \n \n-def test_mpl_toolkits():\n+@pytest.mark.skipif(platform.system() != 'Darwin' or platform.machine() != 'arm64',\n+                    reason=\"Test is for macOS M1 platforms only\")\n+def test_unpickle_dpi_doubling():\n+    fig = plt.figure(dpi=200)\n+    out = BytesIO()\n+    pickle.dump(fig, out)\n+    out.seek(0)\n+    fig2 = pickle.load(out)\n+    assert fig2.dpi == 200, \"DPI should remain the same after unpickling\"\n+\n+    # Simulate multiple pickle/unpickle cycles\n+    for _ in range(5):\n+        out.seek(0)\n+        pickle.dump(fig2, out)\n+        out.seek(0)\n+        fig2 = pickle.load(out)\n+        assert fig2.dpi == 200, \"DPI should remain the same in repeated cycles\"\n     ax = parasite_axes.host_axes([0, 0, 1, 1])\n     assert type(pickle.loads(pickle.dumps(ax))) == parasite_axes.HostAxes\n \n",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 87375f2..f096b40 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6586,7 +6586,12 @@ def test_integrate(dask):\n     assert isinstance(actual.data, type(da.data))\n \n     # along y\n-    actual = da.integrate(\"y\")\n+    # Verify that using `dim` raises a FutureWarning\n+    with pytest.warns(FutureWarning):\n+        da.integrate(dim=\"x\")\n+\n+    # Test the new API using `coord`\n+    actual = da.integrate(coord=\"y\")\n     expected_y = xr.DataArray(\n         np.trapz(da, da[\"y\"], axis=1),\n         dims=[\"x\"],\n",
  "pydata__xarray-4094": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex a2826fa..396f23b 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -3045,7 +3045,13 @@ class TestDataset:\n         d0 = D.isel(x=0)\n         assert_identical(d0, x0)\n \n-    def test_to_stacked_array_to_unstacked_dataset_different_dimension(self):\n+    def test_to_stacked_array_to_unstacked_dataset_single_dim(self):\n+        # single dimension: regression test for GH4049\n+        arr = xr.DataArray(np.arange(3), coords=[(\"x\", [0, 1, 2])])\n+        data = xr.Dataset({\"a\": arr, \"b\": arr})\n+        stacked = data.to_stacked_array(\"y\", sample_dims=[\"x\"])\n+        unstacked = stacked.to_unstacked_dataset(\"y\")\n+        assert_identical(unstacked, data)\n         # test when variables have different dimensionality\n         a, b = create_test_stacked_array()\n         sample_dims = [\"x\"]\n",
  "pylint-dev__pylint-8898": "",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..3bfd2d6 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1156,6 +1156,9 @@ def test_summary_list_after_errors(testdir):\n     )\n \n \n+import pytest\n+from _pytest.main import ExitCode\n+\n def test_importorskip():\n     with pytest.raises(\n         pytest.skip.Exception,\n@@ -1184,4 +1187,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "diff --git a/testing/test_mark_expression.py b/testing/test_mark_expression.py\nindex 10b71e9..b8fa489 100644\n--- a/testing/test_mark_expression.py\n+++ b/testing/test_mark_expression.py\n@@ -139,6 +139,9 @@ def test_valid_idents(ident: str) -> None:\n     assert evaluate(ident, {ident: True}.__getitem__)\n \n \n+import pytest\n+from _pytest.mark.expression import Expression\n+\n @pytest.mark.parametrize(\n     \"ident\",\n     (\n",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..96d70a0 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,32 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+def test_feature_union_with_pandas_output():\n+    import pandas as pd\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn.pipeline import FeatureUnion\n+    import pytest\n+    from numpy.testing import assert_array_equal\n+\n+    # Define a custom transformer\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X, y=None):\n+            return self\n+\n+        def transform(self, X):\n+            return X[\"value\"].groupby(X[\"date\"]).sum()\n+\n+    # Create test data\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    # Initialize FeatureUnion with the custom transformer\n+    union = FeatureUnion([(\"my_transformer\", MyTransformer())])\n+    union.set_output(transform=\"pandas\")\n+\n+    # Use pytest to catch the expected ValueError\n+    with pytest.raises(ValueError, match=\"Length mismatch\"):\n+        union.fit_transform(data)\n",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a32a965..e1ce23b 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -266,6 +266,10 @@ def test_parse_annotation():\n                           [pending_xref, \"int\"],\n                           [desc_sig_punctuation, \"]\"]))\n \n+def test_parse_annotation_none():\n+    doctree = _parse_annotation(\"None\")\n+    assert_node(doctree, ([pending_xref, \"None\"],))\n+    assert_node(doctree[0], pending_xref, refdomain=\"py\", reftype=\"obj\", reftarget=\"None\")\n \n def test_pyfunction_signature(app):\n     text = \".. py:function:: hello(name: str) -> str\"\n@@ -742,4 +746,3 @@ def test_modindex_common_prefix(app):\n                 IndexEntry('sphinx_intl', 0, 'index', 'module-sphinx_intl', '', '', '')])],\n         True\n     )\n-\n",
  "sphinx-doc__sphinx-8056": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 1d6a8cf..27352bf 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1317,7 +1317,42 @@ class NumpyDocstringTest(BaseDocstringTest):\n             expected = dedent(expected)\n             self.assertEqual(expected, actual)\n \n-    def test_parameters_with_class_reference(self):\n+    def test_multiple_parameters(self):\n+        # Test for the issue described\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like\n+    Input arrays, description of x1, x2.\n+\n+x3, x4, x5 : int, optional\n+    Optional integer parameters.\n+\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: * **x1, x2** (:class:`array_like`) -- Input arrays, description of x1, x2.\n+             * **x3, x4, x5** (:class:`int`, *optional*) -- Optional integer parameters.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of x1, x2.\n+:type x1: :class:`array_like`\n+:param x2: Input arrays, description of x1, x2.\n+:type x2: :class:`array_like`\n+:param x3: Optional integer parameters.\n+:type x3: :class:`int`, *optional*\n+:param x4: Optional integer parameters.\n+:type x4: :class:`int`, *optional*\n+:param x5: Optional integer parameters.\n+:type x5: :class:`int`, *optional*\n+\"\"\"\n+        self.assertEqual(expected, actual)\n         docstring = \"\"\"\\\n Parameters\n ----------\n",
  "sphinx-doc__sphinx-8551": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex fd4bdc4..57bc07b 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -773,8 +773,61 @@ def test_pydecoratormethod_signature(app):\n     assert 'deco' in domain.objects\n     assert domain.objects['deco'] == ('index', 'deco', 'method')\n \n+import pytest\n+from sphinx.testing.util import assert_node\n+from sphinx import addnodes\n+from sphinx.util.docutils import restructuredtext\n \n @pytest.mark.sphinx(freshenv=True)\n+def test_type_and_rtype_resolution(app):\n+    text = (\n+        \".. py:module:: mod\\n\"\n+        \"\\n\"\n+        \".. py:class:: A\\n\"\n+        \".. py:class:: submod.A\\n\"\n+        \"\\n\"\n+        \".. py:function:: f()\\n\"\n+        \"    :param A a: should link to mod.A\\n\"\n+        \"    :param submod.A b: should link to mod.submod.A\\n\"\n+        \"    :rtype: A\\n\"\n+        \"\\n\"\n+        \".. py:currentmodule:: mod.submod\\n\"\n+        \"\\n\"\n+        \".. py:function:: g()\\n\"\n+        \"    :param A a: should link to mod.submod.A\\n\"\n+        \"    :rtype: A\\n\"\n+    )\n+    doctree = restructuredtext.parse(app, text)\n+\n+    # Verify that :param A a: correctly resolves to mod.A in mod module\n+    assert_node(\n+        doctree[2][1][0][0][0],  # Descendant path to the parameter xref\n+        pending_xref, reftarget=\"mod.A\", refdomain=\"py\", reftype=\"class\"\n+    )\n+\n+    # Verify that :param submod.A b: correctly resolves to mod.submod.A\n+    assert_node(\n+        doctree[2][1][0][1][0],\n+        pending_xref, reftarget=\"mod.submod.A\", refdomain=\"py\", reftype=\"class\"\n+    )\n+\n+    # Verify that :rtype: A correctly resolves to mod.A\n+    assert_node(\n+        doctree[2][1][0][2][0],\n+        pending_xref, reftarget=\"mod.A\", refdomain=\"py\", reftype=\"class\"\n+    )\n+\n+    # Verify that :param A a: correctly resolves to mod.submod.A in submod module\n+    assert_node(\n+        doctree[5][1][0][0][0],\n+        pending_xref, reftarget=\"mod.submod.A\", refdomain=\"py\", reftype=\"class\"\n+    )\n+\n+    # Verify that :rtype: A correctly resolves to mod.submod.A\n+    assert_node(\n+        doctree[5][1][0][1][0],\n+        pending_xref, reftarget=\"mod.submod.A\", refdomain=\"py\", reftype=\"class\"\n+    )\n def test_module_index(app):\n     text = (\".. py:module:: docutils\\n\"\n             \".. py:module:: sphinx\\n\"\n",
  "sphinx-doc__sphinx-8593": "",
  "sphinx-doc__sphinx-9230": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex e86a758..3dd0fca 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -913,6 +913,47 @@ def test_canonical_duplicated(app, warning):\n     restructuredtext.parse(app, text)\n     assert warning.getvalue() != \"\"\n \n+def test_docstring_dict_param_rendering(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:class:: Class\\n\"\n+            \"\\n\"\n+            \"   :param dict(str, str) opc_meta: (optional)\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree, (nodes.target,\n+                          addnodes.index,\n+                          addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                                    [desc_addname, \"example.\"],\n+                                                    [desc_name, \"Class\"])],\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree[3][1][0][0],\n+                ([nodes.field_name, \"Parameters\"],\n+                 [nodes.field_body, nodes.bullet_list, [nodes.list_item, nodes.paragraph]]))\n+\n+    # :param dict(str, str) opc_meta:\n+    assert_node(doctree[3][1][0][0][1][0][0][0],\n+                ([addnodes.literal_strong, \"opc_meta\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"dict\"],\n+                 [addnodes.literal_emphasis, \"(\"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \", \"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \")\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"(optional)\"))\n+    assert_node(doctree[3][1][0][0][1][0][0][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"dict\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+\n \n def test_info_field_list(app):\n     text = (\".. py:module:: example\\n\"\n",
  "sphinx-doc__sphinx-9258": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a7d51b6..ab45ff9 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -998,6 +998,28 @@ def test_info_field_list(app):\n                  \")\",\n                  \" -- \",\n                  \"blah blah\"))\n+\n+def test_info_field_union_type(app):\n+    text = (\".. py:function:: foo(text)\\n\"\n+            \"\\n\"\n+            \"   :param text: a text\\n\"\n+            \"   :type text: bytes | str\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+    \n+    assert_node(doctree, (addnodes.index,\n+                          [desc, (desc_signature,\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree[1][1][0][0], ([nodes.field_name, \"Parameters\"],\n+                                      [nodes.field_body, nodes.paragraph,\n+                                       [addnodes.literal_strong, \"text\"],\n+                                       \" (\", [pending_xref, addnodes.literal_emphasis, \"bytes\"],\n+                                       [addnodes.literal_emphasis, \" | \"],\n+                                       [pending_xref, addnodes.literal_emphasis, \"str\"], \")\",\n+                                       \" -- \", \"a text\"]))\n+    assert_node(doctree[1][1][0][0][1][1], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"bytes\")\n+    assert_node(doctree[1][1][0][0][1][3], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\")\n     assert_node(doctree[3][1][0][0][1][0][3][0][2], pending_xref,\n                 refdomain=\"py\", reftype=\"class\", reftarget=\"Dict\",\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n",
  "sphinx-doc__sphinx-9673": "",
  "sympy__sympy-18211": "diff --git a/sympy/solvers/tests/test_solveset.py b/sympy/solvers/tests/test_solveset.py\nindex 7bd9e29..f48f869 100644\n--- a/sympy/solvers/tests/test_solveset.py\n+++ b/sympy/solvers/tests/test_solveset.py\n@@ -1048,6 +1048,16 @@ def test__solveset_multi():\n             ImageSet(Lambda(((theta,),), (0, theta)), ImageSet(Lambda(theta, (theta,)), Interval(0, pi))))\n \n \n+from sympy import Eq, cos, sin, ConditionSet, Reals, solveset, S, Symbol\n+\n+def test_conditionset_issue_18188():\n+    n = Symbol('n', real=True)\n+    # Test the specific issue Eq(n*cos(n) - 3*sin(n), 0)\n+    expr = Eq(n*cos(n) - 3*sin(n), 0)\n+    result = solveset(expr, n, domain=S.Reals)\n+    expected = ConditionSet(n, expr, S.Reals)\n+    assert result == expected\n+\n def test_conditionset():\n     assert solveset(Eq(sin(x)**2 + cos(x)**2, 1), x, domain=S.Reals) == \\\n         ConditionSet(x, True, S.Reals)\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..19dddfe 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3254,8 +3254,15 @@ def test_issue_5786():\n     assert expand(factor(expand(\n         (x - I*y)*(z - I*t)), extension=[I])) == -I*t*x - t*y + x*z - I*y*z\n \n-\n-def test_noncommutative():\n+def test_factor_with_extension():\n+    # Test for issue described where factor with extension drops a factor\n+    z = expand((x-1)*(y-1))\n+    \n+    # Without extension, should factor correctly\n+    assert factor(z) == (x - 1)*(y - 1)\n+    \n+    # With extension, should still factor into (x-1)*(y-1) and not drop any factors\n+    assert factor(z, extension=[I]) == (x - 1)*(y - 1)\n     class foo(Expr):\n         is_commutative=False\n     e = x/(x + x*y)\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..380a837 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"This tests sympy/core/basic.py with (ideally) no reference to subclasses\n of Basic or Atom.\"\"\"\n \n@@ -11,7 +12,7 @@ from sympy.core.sympify import SympifyError\n from sympy.core.function import Function, Lambda\n from sympy.core.compatibility import default_sort_key\n \n-from sympy import sin, Q, cos, gamma, Tuple, Integral, Sum\n+from sympy import sin, Q, cos, gamma, Tuple, Integral, Sum, Symbol\n from sympy.functions.elementary.exponential import exp\n from sympy.testing.pytest import raises\n from sympy.core import I, pi\n@@ -28,7 +29,11 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n-def test_structure():\n+def test_symbol_no_dict():\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__')\n+    with raises(AttributeError):\n+        _ = s.__dict__\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n     assert bool(b1)\n",
  "sympy__sympy-24562": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 13e3235..5dcd1c1 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -369,8 +369,24 @@ def test_Rational_new():\n     assert n.q == 4\n     assert n.p == -2\n \n-\n-def test_Number_new():\n+def test_issue_24543():\n+    import sympy\n+    from sympy import Rational\n+    \n+    # Test case for the specific issue\n+    assert Rational('0.5', '100') == Rational(1, 200), \"Rational('0.5', '100') should equal 1/200\"\n+\n+    # Retaining original test to ensure no regression\n+    for p in ('1.5', 1.5, 2):\n+        for q in ('1.5', 1.5, 2):\n+            assert Rational(p, q).as_numer_denom() == Rational('%s/%s'%(p,q)).as_numer_denom()\n+\n+    # Additional test cases with variations\n+    assert Rational('0.25', '100') == Rational(1, 400), \"Rational('0.25', '100') should equal 1/400\"\n+    assert Rational('1', '100') == Rational(1, 100), \"Rational('1', '100') should equal 1/100\"\n+    assert Rational('0.33', '100') != Rational(1, 300), \"Rational('0.33', '100') should not equal 1/300\"\n+    assert Rational('0.5', 100) == Rational(1, 200), \"Rational('0.5', 100) should equal 1/200\"\n+    assert Rational(0.5, '100') == Rational(1, 200), \"Rational(0.5, '100') should equal 1/200\"\n     \"\"\"\"\n     Test for Number constructor\n     \"\"\"\n",
  "django__django-14534": "",
  "matplotlib__matplotlib-20676": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex b009975..16f52e7 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -301,6 +301,31 @@ def test_tool_line_handle():\n \n     assert tool_line_handle.positions == positions\n \n+@pytest.mark.parametrize('direction', (\"horizontal\", \"vertical\"))\n+def test_span_selector_does_not_include_zero(direction):\n+    fig, ax = plt.subplots()\n+    ax.plot([10, 20], [10, 20])\n+    initial_xbound = ax.get_xbound()\n+    initial_ybound = ax.get_ybound()\n+    \n+    # Create a SpanSelector\n+    ss = widgets.SpanSelector(ax, print, direction, interactive=True)\n+    \n+    # Assert that the initial bounds have not been altered\n+    assert ax.get_xbound() == initial_xbound\n+    assert ax.get_ybound() == initial_ybound\n+\n+    # Simulate a press and release within the plot area\n+    if direction == \"horizontal\":\n+        do_event(ss, 'press', xdata=15, ydata=15, button=1)\n+        do_event(ss, 'release', xdata=18, ydata=15, button=1)\n+    else:\n+        do_event(ss, 'press', xdata=15, ydata=15, button=1)\n+        do_event(ss, 'release', xdata=15, ydata=18, button=1)\n+    \n+    # Check again that the bounds have not been expanded to include 0\n+    assert ax.get_xbound() == initial_xbound\n+    assert ax.get_ybound() == initial_ybound\n \n def check_lasso_selector(**kwargs):\n     ax = get_ax()\n",
  "scikit-learn__scikit-learn-12682": "",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..e2b4f49 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -148,6 +148,29 @@ def test_multi_target_sample_weights():\n     assert_almost_equal(rgr.predict(X_test), rgr_w.predict(X_test))\n \n \n+import numpy as np\n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+from sklearn.model_selection import cross_val_predict\n+import pytest\n+from sklearn.utils._testing import assert_array_equal\n+\n+@pytest.mark.parametrize(\n+    'estimator',\n+    [MultiOutputClassifier(LinearDiscriminantAnalysis())]\n+)\n+def test_cross_val_predict_with_multioutputclassifier(estimator):\n+    # Test cross_val_predict with predict_proba on MultiOutputClassifier\n+    X, Y = make_multilabel_classification(n_samples=100, n_features=20, n_classes=3, n_labels=2, random_state=42)\n+    preds = cross_val_predict(estimator, X, Y, cv=5, method='predict_proba')\n+    \n+    # Ensure we get a list of arrays each with shape (n_samples, n_classes)\n+    assert isinstance(preds, list)\n+    assert len(preds) == Y.shape[1]\n+    for pred, y in zip(preds, Y.T):\n+        assert pred.shape == (X.shape[0], len(np.unique(y)))\n+\n # Import the data\n iris = datasets.load_iris()\n # create a multiple targets by randomized shuffling and concatenating y.\n",
  "sphinx-doc__sphinx-9658": "",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..d95f22b 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -348,6 +348,26 @@ def test_reverse_order():\n            Product(x*y, (x, b + 1, a - 1), (y, 6, 1))\n \n \n+def test_issue_13546():\n+    from sympy import Symbol, Product, S\n+    n = Symbol('n', integer=True)\n+    k = Symbol('k', integer=True)\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    # Test the provided n=2 case\n+    assert p.subs(n, 2).doit() == S(15)/2\n+\n+    # Additional test case for n=3\n+    assert p.subs(n, 3).doit() == S(147)/8\n+\n+    # Additional test case for n=4\n+    assert p.subs(n, 4).doit() == S(11025)/128\n+\n+    # Ensure the expression involves q-Pochhammer symbol for symbolic computation\n+    from sympy import q_pochhammer\n+    q_poch = q_pochhammer(2**-1, 2**-1, n)\n+    assert simplify(p) == simplify(q_poch * 2**(n*(n-1)/2))\n+\n+\n def test_issue_9983():\n     n = Symbol('n', integer=True, positive=True)\n     p = Product(1 + 1/n**(S(2)/3), (n, 1, oo))\n@@ -357,4 +377,4 @@ def test_issue_9983():\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}