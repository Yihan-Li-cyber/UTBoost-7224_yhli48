{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..ba6479b 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -55,6 +55,24 @@ compound_models = {\n             )\n }\n \n+def test_separability_matrix_nested_compound_models():\n+    from astropy.modeling import models as m\n+    from astropy.modeling.separable import separability_matrix\n+    import numpy as np\n+    \n+    cm = m.Linear1D(10) & m.Linear1D(5)\n+    expected_matrix = np.array([[ True,  True, False, False],\n+                                [ True,  True, False, False],\n+                                [False, False,  True,  True],\n+                                [False, False,  True,  True]])\n+    \n+    nested_cm = m.Pix2Sky_TAN() & cm\n+    result_matrix = separability_matrix(nested_cm)\n+    \n+    assert np.array_equal(result_matrix, expected_matrix), (\n+        f\"Expected: {expected_matrix}, but got: {result_matrix}\"\n+    )\n+\n \n def test_coord_matrix():\n     c = _coord_matrix(p2, 'left', 2)\n",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "diff --git a/astropy/io/fits/tests/test_connect.py b/astropy/io/fits/tests/test_connect.py\nindex 00deafe..1c91e21 100644\n--- a/astropy/io/fits/tests/test_connect.py\n+++ b/astropy/io/fits/tests/test_connect.py\n@@ -1,3 +1,4 @@\n+\n import gc\n import warnings\n \n@@ -7,7 +8,9 @@ from numpy.testing import assert_allclose, assert_array_equal\n \n from astropy import units as u\n from astropy.io import fits\n-from astropy.io.fits import BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu\n+from astropy.io.fits import BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu, connect\n+from astropy.io.registry import identify_format\n+from astropy.table import Table\n from astropy.io.fits.column import (\n     _fortran_to_python_format,\n     _parse_tdisp_format,\n",
  "astropy__astropy-14508": "",
  "astropy__astropy-14539": "",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..09c4c68 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -74,7 +74,26 @@ def test_JsonCustomEncoder():\n     assert newd == tmpd\n \n \n+import pytest\n+import inspect\n+\n+...\n+\n def test_inherit_docstrings():\n+    class BaseWithProperty(metaclass=misc.InheritDocstrings):\n+        @property\n+        def bar(self):\n+            \"BAR\"\n+            return 42\n+\n+    class SubclassWithProperty(BaseWithProperty):\n+        @property\n+        def bar(self):\n+            return 84\n+\n+    # Test if the docstring is inherited in properties\n+    if BaseWithProperty.bar.__doc__ is not None:\n+        assert SubclassWithProperty.bar.__doc__ == \"BAR\"\n     class Base(metaclass=misc.InheritDocstrings):\n         def __call__(self, *args):\n             \"FOO\"\n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..09b728a 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -197,6 +197,12 @@ def test_unknown_unit3():\n     with pytest.raises(TypeError):\n         unit5 = u.Unit(None)\n \n+    # Test cases for the issue: Unit equality comparison with None\n+    unit_asdf = u.Unit('asdf', parse_strict='silent')\n+    assert not (unit_asdf == None)  # Should be False\n+    assert unit_asdf != None  # Should be True\n+    assert unit_asdf not in (None, u.m)\n+\n \n @raises(TypeError)\n def test_invalid_scale():\n",
  "astropy__astropy-7671": "diff --git a/astropy/utils/tests/test_introspection.py b/astropy/utils/tests/test_introspection.py\nindex 852d721..fa222a4 100644\n--- a/astropy/utils/tests/test_introspection.py\n+++ b/astropy/utils/tests/test_introspection.py\n@@ -68,8 +68,12 @@ def test_minversion():\n     test_module = ModuleType(str(\"test_module\"))\n     test_module.__version__ = '0.12.2'\n     good_versions = ['0.12', '0.12.1', '0.12.0.dev']\n-    bad_versions = ['1', '1.2rc1']\n-    for version in good_versions:\n+    bad_versions = ['1', '1.2rc1', '1.14dev']\n+    # Test with a version that LooseVersion has difficulty with\n+    test_module.__version__ = '1.14.3'\n+    special_versions = ['1.14dev', '1.14']\n+    for version in special_versions:\n+        assert not minversion(test_module, version), f\"Version {version} incorrectly marked as met.\"\n         assert minversion(test_module, version)\n     for version in bad_versions:\n-        assert not minversion(test_module, version)\n+        assert not minversion(test_module, version)\n",
  "astropy__astropy-8707": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex a2103c6..758006c 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -79,6 +79,51 @@ class TestHeaderFunctions(FitsTestCase):\n         assert header['B'] == 'B'\n         assert header.comments['B'] == 'C'\n \n+    def test_card_from_bytes(self):\n+        \"\"\"\n+        Test loading a Card from a `bytes` object (assuming latin-1 encoding).\n+        \"\"\"\n+        c = fits.Card.fromstring(b\"ABC     = 'abc'\")\n+        assert c.keyword == 'ABC'\n+        assert c.value == 'abc'\n+\n+    def test_header_fromstring_bytes(self):\n+        \"\"\"\n+        Test reading a Header from a `bytes` string.\n+        \n+        See https://github.com/astropy/astropy/issues/8706\n+        \"\"\"\n+        with open(self.data('test0.fits'), 'rb') as fobj:\n+            pri_hdr_from_bytes = fits.Header.fromstring(fobj.read())\n+\n+        pri_hdr = fits.getheader(self.data('test0.fits'))\n+        assert pri_hdr['NAXIS'] == pri_hdr_from_bytes['NAXIS']\n+        assert pri_hdr == pri_hdr_from_bytes\n+        assert pri_hdr.tostring() == pri_hdr_from_bytes.tostring()\n+\n+    def test_header_fromstring_unicode(self):\n+        \"\"\"\n+        Test reading a Header from a `str` (unicode in Python 3) string.\n+        \"\"\"\n+        header_str = (\n+            \"SIMPLE  =                    T / conforms to FITS standard\\n\"\n+            \"BITPIX  =                    8 / array data type\\n\"\n+            \"NAXIS   =                    0 / number of array dimensions\\n\"\n+            \"END\"\n+        )\n+        header = fits.Header.fromstring(header_str)\n+        assert header['SIMPLE'] is True\n+        assert header['BITPIX'] == 8\n+        assert header['NAXIS'] == 0\n+\n+    def test_card_from_unicode(self):\n+        \"\"\"\n+        Test loading a Card from a `str` (unicode in Python 3) object.\n+        \"\"\"\n+        c = fits.Card.fromstring(\"ABC     = 'abc'\")\n+        assert c.keyword == 'ABC'\n+        assert c.value == 'abc'\n+\n     def test_card_constructor_default_args(self):\n         \"\"\"Test Card constructor with default argument values.\"\"\"\n \n",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..abdb9b4 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -142,7 +142,22 @@ class TestQuantityCreation:\n         a3 = np.array([1., 2.], dtype=np.float32)\n         q3 = u.Quantity(a3, u.yr)\n         assert q3.dtype == a3.dtype\n-        # items stored as objects by numpy should be converted to float\n+        \n+        # Ensure float16 is preserved\n+        a3_16 = np.array([1., 2.], dtype=np.float16)\n+        q3_16 = u.Quantity(a3_16, u.yr)\n+        assert q3_16.dtype == a3_16.dtype\n+\n+        # Test float64 behavior for consistency\n+        a3_64 = np.array([1., 2.], dtype=np.float64)\n+        q3_64 = u.Quantity(a3_64, u.yr)\n+        assert q3_64.dtype == a3_64.dtype\n+\n+        # Test float128 behavior for completeness\n+        if hasattr(np, 'float128'):\n+            a3_128 = np.array([1., 2.], dtype=np.float128)\n+            q3_128 = u.Quantity(a3_128, u.yr)\n+            assert q3_128.dtype == a3_128.dtype\n         # by default\n         q4 = u.Quantity(decimal.Decimal('10.25'), u.m)\n         assert q4.dtype == float\n",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..f7e3af5 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -226,6 +226,15 @@ TEST_DATA = [\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br z', ValidationError),\n \n     (BaseValidator(True), True, None),\n+\n+    # New test cases for URLValidator rejecting invalid username/password characters\n+    (URLValidator(), 'http://foo@bar@example.com', ValidationError),  # Invalid: Unencoded '@' in username\n+    (URLValidator(), 'http://foo:bar@example.com', ValidationError),  # Invalid: Unencoded ':' in username/password\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError),  # Invalid: Unencoded ':' in password\n+    (URLValidator(), 'http://foo:bar@baz@example.com', ValidationError),  # Invalid: Unencoded '@' in password\n+    (URLValidator(), 'http://foo:bar/baz@example.com', ValidationError),  # Invalid: Unencoded '/' in password\n+    (URLValidator(), 'http://invalid-.com/?m=foo@example.com', ValidationError),  # Invalid: '@' in query string\n+    (URLValidator(), 'http://-.~_!$&\\'()*+,;=%40:80%2f@example.com', ValidationError),  # Invalid: unencoded complex characters\n     (BaseValidator(True), False, ValidationError),\n \n     (RegexValidator(), '', None),\n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..ae722ee 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -8,6 +9,7 @@ from django.db.models import (\n     Avg, Count, DecimalField, DurationField, F, FloatField, Func, IntegerField,\n     Max, Min, Sum, Value,\n )\n+from django.db.models.expressions import Case, When\n from django.test import TestCase\n from django.test.utils import Approximate, CaptureQueriesContext\n from django.utils import timezone\n@@ -389,7 +391,38 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n-    def test_count_star(self):\n+    def test_count_distinct_expression(self):\n+        # Original test case from the patch to verify issue resolution\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=300, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n+\n+    def test_count_distinct_expression_with_no_matches(self):\n+        # Case where no books have pages greater than 1000\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=1000, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 0)\n+\n+    def test_count_distinct_expression_with_multiple_conditions(self):\n+        # Multiple conditions in Case, should still work correctly\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(\n+                When(pages__gt=300, then='rating'),\n+                When(pages__lt=100, then='rating')\n+            ), distinct=True),\n+        )\n+        # Assuming there are distinct ratings for books with pages > 300 and < 100\n+        self.assertGreaterEqual(aggs['distinct_ratings'], 4)\n+\n+    def test_count_distinct_expression_with_other_field(self):\n+        # Using a different field for the Case condition\n+        aggs = Book.objects.aggregate(\n+            distinct_authors=Count(Case(When(rating__gt=4.0, then='author_id')), distinct=True),\n+        )\n+        # Assuming there are books with distinct authors having a rating greater than 4.0\n+        self.assertGreaterEqual(aggs['distinct_authors'], 1)\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n         sql = ctx.captured_queries[0]['sql']\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..01c9b40 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1090,6 +1090,13 @@ class OverrideSettingsTests(SimpleTestCase):\n         base_url attribute of django.core.files.storage.default_storage.\n         \"\"\"\n         self.assertEqual(default_storage.base_location, '')\n+\n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        Default FILE_UPLOAD_PERMISSIONS should be 0o644.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n \n",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..c8befbb 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,3 +1,4 @@\n+\n import os\n import signal\n from unittest import mock\n@@ -28,8 +29,24 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db(dbinfo)\n         return self.subprocess_args, self.pgpass\n+    def test_pgpassword_environment_variable(self):\n+        \"\"\"\n+        Test if the PGPASSWORD environment variable is correctly set when using subprocess.run.\n+        \"\"\"\n+        def _mock_subprocess_run(*args, env=None, **kwargs):\n+            self.assertIn('PGPASSWORD', env)\n+            self.assertEqual(env['PGPASSWORD'], 'somepassword')\n+            return subprocess.CompletedProcess(args, 0)\n \n-    def test_basic(self):\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            result = DatabaseClient.runshell_db({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'password': 'somepassword',\n+                'host': 'somehost',\n+                'port': '444',\n+            })\n+            self.assertIsNone(result)\n         self.assertEqual(\n             self._run_it({\n                 'database': 'dbname',\n@@ -113,4 +130,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..0371cc7 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -3,6 +3,7 @@ from django.conf import settings\n from django.contrib.contenttypes import management as contenttypes_management\n from django.contrib.contenttypes.models import ContentType\n from django.core.management import call_command\n+from django.contrib.contenttypes.models import ContentType\n from django.db import migrations, models\n from django.test import TransactionTestCase, override_settings\n \n@@ -37,8 +38,28 @@ class ContentTypeOperationsTests(TransactionTestCase):\n                     self.assertEqual(next_operation.app_label, migration.app_label)\n                     self.assertEqual(next_operation.old_model, operation.old_name_lower)\n                     self.assertEqual(next_operation.new_model, operation.new_name_lower)\n+    \n+    def test_existing_content_type_rename_other_database(self):\n+        class TestRouter:\n+            def db_for_write(self, model, **hints):\n+                return 'other'\n+        \n+        with override_settings(DATABASE_ROUTERS=[TestRouter()]):\n+            # Ensure the content type is created in the 'other' database\n+            ContentType.objects.using('other').create(app_label='contenttypes_tests', model='foo')\n+            other_content_types = ContentType.objects.using('other').filter(app_label='contenttypes_tests')\n+\n+            # Run the migration against the 'other' database\n+            call_command('migrate', 'contenttypes_tests', database='other', interactive=False, verbosity=0)\n \n-    def test_existing_content_type_rename(self):\n+            # Check that the rename was successful in the 'other' database\n+            self.assertFalse(other_content_types.filter(model='foo').exists())\n+            self.assertTrue(other_content_types.filter(model='renamedfoo').exists())\n+\n+            # Rollback the migration and check again\n+            call_command('migrate', 'contenttypes_tests', 'zero', database='other', interactive=False, verbosity=0)\n+            self.assertTrue(other_content_types.filter(model='foo').exists())\n+            self.assertFalse(other_content_types.filter(model='renamedfoo').exists())\n         ContentType.objects.create(app_label='contenttypes_tests', model='foo')\n         call_command('migrate', 'contenttypes_tests', database='default', interactive=False, verbosity=0,)\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n@@ -63,4 +84,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "diff --git a/tests/generic_inline_admin/tests.py b/tests/generic_inline_admin/tests.py\nindex 9dd9fd9..d61fd31 100644\n--- a/tests/generic_inline_admin/tests.py\n+++ b/tests/generic_inline_admin/tests.py\n@@ -428,4 +428,73 @@ class GenericInlineModelAdminTest(SimpleTestCase):\n         ma = EpisodeAdmin(Episode, self.site)\n         inlines = ma.get_inline_instances(request)\n         for (formset, inline), other_inline in zip(ma.get_formsets_with_inlines(request), inlines):\n-            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+\n+    def test_get_inlines_with_no_request_name(self):\n+        class MediaInline(GenericTabularInline):\n+            model = Media\n+\n+        class AlternateInline(GenericTabularInline):\n+            model = Media\n+\n+        class EpisodeAdmin(admin.ModelAdmin):\n+            inlines = (AlternateInline, MediaInline)\n+\n+            def get_inlines(self, request, obj):\n+                if hasattr(request, 'name'):\n+                    if request.name == 'alternate':\n+                        return self.inlines[:1]\n+                    elif request.name == 'media':\n+                        return self.inlines[1:2]\n+                return []\n+\n+        ma = EpisodeAdmin(Episode, self.site)\n+        request = type('Request', (object,), {})()  # Creating a simple object to mock request\n+        self.assertEqual(ma.get_inlines(request, None), [])\n+        self.assertEqual(ma.get_inline_instances(request), [])\n+\n+    def test_get_inlines_with_alternate_request_name(self):\n+        class MediaInline(GenericTabularInline):\n+            model = Media\n+\n+        class AlternateInline(GenericTabularInline):\n+            model = Media\n+\n+        class EpisodeAdmin(admin.ModelAdmin):\n+            inlines = (AlternateInline, MediaInline)\n+\n+            def get_inlines(self, request, obj):\n+                if hasattr(request, 'name'):\n+                    if request.name == 'alternate':\n+                        return self.inlines[:1]\n+                    elif request.name == 'media':\n+                        return self.inlines[1:2]\n+                return []\n+\n+        ma = EpisodeAdmin(Episode, self.site)\n+        request = type('Request', (object,), {'name': 'alternate'})  # Mock request with 'name' attribute\n+        self.assertEqual(ma.get_inlines(request, None), (AlternateInline,))\n+        self.assertEqual(type(ma.get_inline_instances(request)[0]), AlternateInline)\n+\n+    def test_get_inlines_with_media_request_name(self):\n+        class MediaInline(GenericTabularInline):\n+            model = Media\n+\n+        class AlternateInline(GenericTabularInline):\n+            model = Media\n+\n+        class EpisodeAdmin(admin.ModelAdmin):\n+            inlines = (AlternateInline, MediaInline)\n+\n+            def get_inlines(self, request, obj):\n+                if hasattr(request, 'name'):\n+                    if request.name == 'alternate':\n+                        return self.inlines[:1]\n+                    elif request.name == 'media':\n+                        return self.inlines[1:2]\n+                return []\n+\n+        ma = EpisodeAdmin(Episode, self.site)\n+        request = type('Request', (object,), {'name': 'media'})  # Mock request with 'name' attribute\n+        self.assertEqual(ma.get_inlines(request, None), (MediaInline,))\n+        self.assertEqual(type(ma.get_inline_instances(request)[0]), MediaInline)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..e17f355 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -238,6 +238,9 @@ class UsernameValidatorsTests(SimpleTestCase):\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n             \"en\\u2013dash\",\n+            'trailingnewline\\n',  # Test for trailing newline\n+            'newlineinmiddle\\nname',  # Test for newline in the middle\n+            'twonewlines\\n\\n',  # Test for two trailing newlines\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -258,4 +261,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..11beae8 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -21,8 +21,26 @@ class RenderToStringTest(SimpleTestCase):\n             'obj:test\\n',\n         )\n \n+    def test_autoescape_on(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n \n-class GetDefaultTests(SimpleTestCase):\n+    def test_autoescape_off_with_different_content(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<div>'}),\n+            'obj:<div>\\n',\n+        )\n+\n+    def test_autoescape_on_with_different_content(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<div>'}),\n+            'obj:&lt;div&gt;\\n',\n+        )\n \n     @override_settings(TEMPLATES=[])\n     def test_no_engines_configured(self):\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..110e06e 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -413,6 +413,10 @@ class HttpResponseTests(unittest.TestCase):\n         self.assertEqual(list(i), [b'abc'])\n         self.assertEqual(list(i), [])\n \n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n     def test_lazy_content(self):\n         r = HttpResponse(lazystr('helloworld'))\n         self.assertEqual(r.content, b'helloworld')\n",
  "django__django-11141": "",
  "django__django-11149": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 296cfba..0449676 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -773,7 +773,45 @@ class TestInlinePermissions(TestCase):\n         )\n         self.assertContains(response, 'id=\"id_inner2_set-0-DELETE\"')\n \n-    def test_inline_change_fk_all_perms(self):\n+    def test_inline_add_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(reverse('admin:admin_inlines_author_add'))\n+        # View-only inlines.\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"0\" id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n+\n+    def test_inline_change_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(self.author_change_url)\n+        # View-only inlines.\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"1\" id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        # The field in the inline is read-only.\n+        self.assertContains(response, '<p>The inline Book</p>')\n+        self.assertNotContains(\n+            response,\n+            '<input type=\"checkbox\" name=\"Author_books-0-DELETE\" id=\"id_Author_books-0-DELETE\">',\n+            html=True,\n+        )\n         permission = Permission.objects.get(codename='add_inner2', content_type=self.inner_ct)\n         self.user.user_permissions.add(permission)\n         permission = Permission.objects.get(codename='change_inner2', content_type=self.inner_ct)\n",
  "django__django-11163": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex b25d077..07f46eb 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -1813,6 +1813,12 @@ class ModelOneToOneFieldTests(TestCase):\n                 fields = '__all__'\n \n         bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+\n+        # Test case for the issue: model_to_dict with empty fields should return an empty dict\n+        self.assertEqual(model_to_dict(bw, fields={}), {})\n+        self.assertEqual(model_to_dict(bw, fields=[]), {})\n+\n+        # Test case for model_to_dict with selected fields\n         self.assertEqual(sorted(model_to_dict(bw)), ['id', 'name', 'score', 'writer_ptr'])\n \n         form = BetterWriterForm({'name': 'Some Name', 'score': 12})\n@@ -2900,6 +2906,15 @@ class StrictAssignmentTests(SimpleTestCase):\n \n \n class ModelToDictTests(TestCase):\n+    def test_model_to_dict_exclude_and_fields(self):\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        \n+        # Exclude id and name, should return other fields\n+        self.assertEqual(sorted(model_to_dict(bw, exclude=['id', 'name'])), ['score', 'writer_ptr'])\n+\n+        # Provide specific fields, should return only those fields\n+        self.assertEqual(sorted(model_to_dict(bw, fields=['id', 'name'])), ['id', 'name'])\n+\n     def test_many_to_many(self):\n         \"\"\"Data for a ManyToManyField is a list rather than a lazy QuerySet.\"\"\"\n         blue = Colour.objects.create(name='blue')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..6de79b7 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,9 +1,12 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n+from django.db.models.deletion import Collector\n+\n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n     M2MTo, MRNull, Parent, R, RChild, S, T, User, create_a, get_default_r,\n",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..62ddbd2 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -95,6 +95,14 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+            # New test cases for small decimals with decimal_pos\n+            ('1e-199', 2, '0.00'),\n+            ('1e-200', 2, '0.00'),\n+            ('1e-201', 2, '0.00'),\n+            # Verify behavior without decimal_pos for comparison\n+            ('1e-199', None, '1e-199'),\n+            ('1e-200', None, '1e-200'),\n+            ('1e-201', None, '1e-201'),\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-11211": "diff --git a/tests/prefetch_related/models.py b/tests/prefetch_related/models.py\nindex 3ce4b3f..6da913f 100644\n--- a/tests/prefetch_related/models.py\n+++ b/tests/prefetch_related/models.py\n@@ -1,3 +1,4 @@\n+\n import uuid\n \n from django.contrib.contenttypes.fields import (\n@@ -196,9 +197,17 @@ class Comment(models.Model):\n         ordering = ['id']\n \n \n-# Models for lookup ordering tests\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=50)\n \n-class House(models.Model):\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n     name = models.CharField(max_length=50)\n     address = models.CharField(max_length=255)\n     owner = models.ForeignKey('Person', models.SET_NULL, null=True)\n",
  "django__django-11239": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex b843072..d728ef7 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -81,7 +81,28 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n-    def test_sigint_handler(self):\n+    def test_ssl_certificate(self):\n+        self.assertEqual(\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+                'sslmode': 'verify-ca',\n+                'sslrootcert': 'root.crt',\n+                'sslcert': 'client.crt',\n+                'sslkey': 'client.key',\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                {\n+                    'PGSSLCERT': 'client.crt',\n+                    'PGSSLKEY': 'client.key',\n+                    'PGSSLMODE': 'verify-ca',\n+                    'PGSSLROOTCERT': 'root.crt',\n+                },\n+                None,\n+            )\n+        )\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n         def _mock_subprocess_run(*args, **kwargs):\n             handler = signal.getsignal(signal.SIGINT)\n",
  "django__django-11265": "",
  "django__django-11276": "",
  "django__django-11292": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex b016284..3f106d9 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -243,7 +243,31 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertNoOutput(err)\n         self.assertEqual(out.strip(), '/PREFIX/some/url/')\n \n-    def test_disallowed_abbreviated_options(self):\n+    def test_skip_checks(self):\n+        \"\"\"\n+        Test that the --skip-checks option allows a command to execute without performing system checks.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            # (staticfiles.E001) The STATICFILES_DIRS setting is not a tuple or\n+            # list.\n+            'STATICFILES_DIRS': '\"foo\"',\n+        })\n+        out, err = self.run_manage(['set_option', '--skip-checks', '--set', 'foo'])\n+        self.assertNoOutput(err)\n+        self.assertEqual(out.strip(), 'Set foo')\n+\n+    def test_without_skip_checks(self):\n+        \"\"\"\n+        Test that without the --skip-checks option, system checks are performed and errors are reported.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            # (staticfiles.E001) The STATICFILES_DIRS setting is not a tuple or\n+            # list.\n+            'STATICFILES_DIRS': '\"foo\"',\n+        })\n+        out, err = self.run_manage(['set_option', '--set', 'foo'])\n+        self.assertIn(\"staticfiles.E001\", err)\n+        self.assertNotIn(\"Set foo\", out)\n         \"\"\"\n         To avoid conflicts with custom options, commands don't allow\n         abbreviated forms of the --setting and --pythonpath options.\n",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..784c9c1 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,5 +1,7 @@\n+\n from django.test import SimpleTestCase\n-from django.urls.resolvers import RegexPattern, RoutePattern\n+from django.urls.resolvers import RegexPattern, RoutePattern, get_resolver\n+from django.test.utils import override_settings\n from django.utils.translation import gettext_lazy as _\n \n \n@@ -12,4 +14,4 @@ class RegexPatternTests(SimpleTestCase):\n class RoutePatternTests(SimpleTestCase):\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\nindex b010b42..2db4eab 100644\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -241,8 +241,18 @@ class ModelBackendTest(BaseModelBackendTest, TestCase):\n             email='test2@example.com',\n             password='test',\n         )\n-\n-    def test_authenticate_inactive(self):\n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_no_db_query_when_username_or_password_none(self):\n+        CountingMD5PasswordHasher.calls = 0\n+        for credentials in (\n+            {'username': None, 'password': 'test'},\n+            {'username': 'test', 'password': None},\n+            {'username': None, 'password': None},\n+        ):\n+            with self.subTest(credentials=credentials):\n+                with self.assertNumQueries(0):  # Expecting zero database queries\n+                    authenticate(**credentials)\n+                self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n         \"\"\"\n         An inactive user can't authenticate.\n         \"\"\"\n",
  "django__django-11490": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex e627a0d..a024978 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -124,7 +124,17 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.union(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n-    def test_union_with_two_annotated_values_list(self):\n+    def test_change_column_list_in_values_list(self):\n+        # Setup: create a ReservedName object\n+        ReservedName.objects.create(name='a', order=2)\n+        qs1 = ReservedName.objects.all()\n+        \n+        # Test: change from two columns to one column in values_list\n+        reserved_name = qs1.union(qs1).values_list('name', 'order').get()\n+        self.assertEqual(reserved_name, ('a', 2))\n+        \n+        reserved_order = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(reserved_order, (2,))\n         qs1 = Number.objects.filter(num=1).annotate(\n             count=Value(0, IntegerField()),\n         ).values_list('num', 'count')\n",
  "django__django-11532": "diff --git a/tests/mail/tests.py b/tests/mail/tests.py\nindex a6f0e17..d429e7d 100644\n--- a/tests/mail/tests.py\n+++ b/tests/mail/tests.py\n@@ -8,6 +8,7 @@ import sys\n import tempfile\n import threading\n from email import charset, message_from_binary_file, message_from_bytes\n+from unittest import mock\n from email.header import Header\n from email.mime.text import MIMEText\n from email.utils import parseaddr\n@@ -360,7 +361,27 @@ class MailTests(HeadersCheckMixin, SimpleTestCase):\n         msg.attach('example.txt', 'Text file content', 'text/plain')\n         self.assertIn(html_content, msg.message().as_string())\n \n-    def test_none_body(self):\n+    @mock.patch('socket.getfqdn', return_value='\u6f22\u5b57')\n+    def test_non_ascii_dns_non_unicode_email(self, mocked_getfqdn):\n+        \"\"\"\n+        Test handling of non-ASCII domain names in email headers when encoding is non-Unicode.\n+        \"\"\"\n+        from django.core.mail.utils import DNS_NAME\n+        delattr(DNS_NAME, '_fqdn')  # Reset the cached DNS name\n+        email = EmailMessage('subject', 'content', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        self.assertIn('@xn--p8s937b', email.message()['Message-ID'])\n+\n+    @mock.patch('socket.getfqdn', return_value='\u6b63\u5b97')\n+    def test_non_ascii_dns_with_another_unicode_email(self, mocked_getfqdn):\n+        \"\"\"\n+        Test handling of another non-ASCII domain name in email headers when encoding is non-Unicode.\n+        \"\"\"\n+        from django.core.mail.utils import DNS_NAME\n+        delattr(DNS_NAME, '_fqdn')\n+        email = EmailMessage('subject', '', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        self.assertIn('@xn--2s2b7y', email.message()['Message-ID'])\n         msg = EmailMessage('subject', None, 'from@example.com', ['to@example.com'])\n         self.assertEqual(msg.body, '')\n         self.assertEqual(msg.message().get_payload(), '')\n",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..c4567a7 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,9 +1,10 @@\n+\n from django import forms\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n-from django.db.models import F\n+from django.db.models import F, Field, Model, IntegerField\n from django.db.models.functions import Upper\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..c69c7ae 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -9,7 +9,7 @@ from django.db.models.functions import Upper\n from django.test import TestCase\n from django.utils.deprecation import RemovedInDjango31Warning\n \n-from .models import Article, Author, OrderedByFArticle, Reference\n+from .models import Article, Author, ChildArticle, OrderedByFArticle, Reference\n \n \n class OrderingTests(TestCase):\n@@ -462,7 +462,64 @@ class OrderingTests(TestCase):\n             attrgetter('headline')\n         )\n \n-    def test_deprecated_values_annotate(self):\n+    def test_order_by_ptr_field_with_default_ordering_by_expression(self):\n+        ca1 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_2,\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca3 = ChildArticle.objects.create(\n+            headline='h3',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n+        articles = ChildArticle.objects.order_by('article_ptr')\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+\n+    def test_order_by_ptr_field_with_custom_ordering_expression(self):\n+        ca1 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='h1',\n+            pub_date=datetime(2005, 7, 26),\n+            author=self.author_2,\n+        )\n+        ca3 = ChildArticle.objects.create(\n+            headline='h3',\n+            pub_date=datetime(2005, 7, 28),\n+            author=self.author_1,\n+        )\n+        # Order by author with nulls first as specified in OrderedByFArticle's Meta\n+        articles = OrderedByFArticle.objects.order_by('pk')\n+        self.assertSequenceEqual(articles, [ca1, ca3, ca2])\n+\n+    def test_order_by_with_expression_and_filter(self):\n+        ca1 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='h1',\n+            pub_date=datetime(2005, 7, 26),\n+            author=self.author_2,\n+        )\n+        ca3 = ChildArticle.objects.create(\n+            headline='h3',\n+            pub_date=datetime(2005, 7, 28),\n+            author=self.author_1,\n+        )\n+        articles = OrderedByFArticle.objects.filter(author=self.author_1).order_by('-headline')\n+        self.assertSequenceEqual(articles, [ca3, ca1])\n         msg = (\n             \"Article QuerySet won't use Meta.ordering in Django 3.1. Add \"\n             \".order_by('-pub_date', 'headline', OrderBy(F(author__name), \"\n",
  "django__django-11603": "",
  "django__django-11740": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a98fff5..9c66e78 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2365,18 +2365,32 @@ class AutodetectorTests(TestCase):\n         self.assertNumberMigrations(changes, 'a', 1)\n         self.assertOperationTypes(changes, 'a', 0, ['CreateModel', 'CreateModel', 'CreateModel', 'AddField'])\n \n-    @mock.patch('django.db.migrations.questioner.MigrationQuestioner.ask_not_null_addition',\n-                side_effect=AssertionError(\"Should not have prompted for not null addition\"))\n-    def test_add_blank_textfield_and_charfield(self, mocked_ask_method):\n+    def test_alter_uuid_to_fk_creates_dependency(self):\n         \"\"\"\n-        #23405 - Adding a NOT NULL and blank `CharField` or `TextField`\n-        without default should not prompt for a default.\n+        Test that altering a UUIDField to a ForeignKeyField creates the correct dependency.\n         \"\"\"\n-        changes = self.get_changes([self.author_empty], [self.author_with_biography_blank])\n-        # Right number/type of migrations?\n-        self.assertNumberMigrations(changes, 'testapp', 1)\n-        self.assertOperationTypes(changes, 'testapp', 0, [\"AddField\", \"AddField\"])\n-        self.assertOperationAttributes(changes, 'testapp', 0, 0)\n+        app1_initial = ModelState(\"testapp1\", \"App1\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+            (\"another_app\", models.UUIDField(null=True, blank=True)),\n+        ])\n+        app1_altered = ModelState(\"testapp1\", \"App1\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+            (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState(\"testapp2\", \"App2\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+        ])\n+        \n+        changes = self.get_changes([app1_initial, app2], [app1_altered, app2])\n+        # Check that a migration is created for testapp1\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        # Check that the operation is an AlterField\n+        self.assertOperationTypes(changes, 'testapp1', 0, [\"AlterField\"])\n+        # Check that the migration includes a dependency on testapp2\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n \n     @mock.patch('django.db.migrations.questioner.MigrationQuestioner.ask_not_null_addition')\n     def test_add_non_blank_textfield_and_charfield(self, mocked_ask_method):\n@@ -2399,4 +2413,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-11749": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex a0e1530..f1ba9ba 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -219,11 +219,53 @@ class CommandTests(SimpleTestCase):\n         management.call_command('subparser', 'foo', 12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n \n+    def test_mutually_exclusive_group_with_kwargs(self):\n+        \"\"\"Test mutually exclusive group behavior with call_command and kwargs.\"\"\"\n+        from django.core.management import call_command\n+        from django.core.management.base import CommandError\n+        from io import StringIO\n+\n+        out = StringIO()\n+        # Test with foo_id via kwargs\n+        call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+\n+        out = StringIO()\n+        # Test with foo_name via kwargs\n+        call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+\n+        # Test that providing neither raises a CommandError\n+        with self.assertRaises(CommandError) as cm:\n+            call_command('mutually_exclusive_required', stdout=out)\n+        self.assertIn('one of the arguments --foo-id --foo-name is required', str(cm.exception))\n+\n     def test_subparser_dest_args(self):\n         out = StringIO()\n         management.call_command('subparser_dest', 'foo', bar=12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n \n+    def test_mutually_exclusive_group_with_kwargs(self):\n+        \"\"\"Test mutually exclusive group behavior with call_command and kwargs.\"\"\"\n+        from django.core.management import call_command\n+        from django.core.management.base import CommandError\n+        from io import StringIO\n+\n+        out = StringIO()\n+        # Test with foo_id via kwargs\n+        call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+\n+        out = StringIO()\n+        # Test with foo_name via kwargs\n+        call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+\n+        # Test that providing neither raises a CommandError\n+        with self.assertRaises(CommandError) as cm:\n+            call_command('mutually_exclusive_required', stdout=out)\n+        self.assertIn('one of the arguments --foo-id --foo-name is required', str(cm.exception))\n+\n     def test_subparser_dest_required_args(self):\n         out = StringIO()\n         management.call_command('subparser_required', 'foo_1', 'foo_2', bar=12, stdout=out)\n",
  "django__django-11790": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 440150b..0507b87 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -437,7 +437,25 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         self.assertEqual(form.fields['username'].max_length, 254)\n         self.assertEqual(form.errors, {})\n \n-    def test_username_field_label(self):\n+    def test_username_field_max_length_html_attribute(self):\n+        data = {\n+            'username': 'u' * 255,\n+            'password': 'pwd',\n+            'email': 'test@example.com',\n+        }\n+        CustomEmailField.objects.create_user(**data)\n+        form = AuthenticationForm(None, data)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), '255')\n+\n+    @override_settings(AUTH_USER_MODEL='auth_tests.IntegerUsernameUser')\n+    def test_username_field_html_max_length_defaults_to_254(self):\n+        data = {\n+            'username': '0123456',\n+            'password': 'password',\n+        }\n+        IntegerUsernameUser.objects.create_user(**data)\n+        form = AuthenticationForm(None, data)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), '254')\n \n         class CustomAuthenticationForm(AuthenticationForm):\n             username = CharField(label=\"Name\", max_length=75)\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..3868433 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -247,6 +247,30 @@ class WriterTests(SimpleTestCase):\n             (\"[list, tuple, dict, set, frozenset]\", set())\n         )\n \n+    def test_serialize_translated_enum(self):\n+        class TranslatedEnum(enum.Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+\n+        self.assertSerializedResultEqual(\n+            TranslatedEnum.GOOD,\n+            (\"migrations.test_writer.TranslatedEnum['GOOD']\", {'import migrations.test_writer'})\n+        )\n+        self.assertSerializedResultEqual(\n+            TranslatedEnum.BAD,\n+            (\"migrations.test_writer.TranslatedEnum['BAD']\", {'import migrations.test_writer'})\n+        )\n+\n+        field = models.CharField(default=TranslatedEnum.GOOD, choices=[(m.name, m) for m in TranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('GOOD', migrations.test_writer.TranslatedEnum['GOOD']), \"\n+            \"('BAD', migrations.test_writer.TranslatedEnum['BAD'])], \"\n+            \"default=migrations.test_writer.TranslatedEnum['GOOD'])\"\n+        )\n+\n     def test_serialize_lazy_objects(self):\n         pattern = re.compile(r'^foo$')\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n@@ -269,15 +293,87 @@ class WriterTests(SimpleTestCase):\n             TextEnum.A,\n             (\"migrations.test_writer.TextEnum('a-value')\", {'import migrations.test_writer'})\n         )\n+\n+    def test_serialize_translated_enum(self):\n+        class TranslatedEnum(enum.Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+\n+        self.assertSerializedResultEqual(\n+            TranslatedEnum.GOOD,\n+            (\"migrations.test_writer.TranslatedEnum['GOOD']\", {'import migrations.test_writer'})\n+        )\n+        self.assertSerializedResultEqual(\n+            TranslatedEnum.BAD,\n+            (\"migrations.test_writer.TranslatedEnum['BAD']\", {'import migrations.test_writer'})\n+        )\n+\n+        field = models.CharField(default=TranslatedEnum.GOOD, choices=[(m.name, m) for m in TranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('GOOD', migrations.test_writer.TranslatedEnum['GOOD']), \"\n+            \"('BAD', migrations.test_writer.TranslatedEnum['BAD'])], \"\n+            \"default=migrations.test_writer.TranslatedEnum['GOOD'])\"\n+        )\n         self.assertSerializedResultEqual(\n             BinaryEnum.A,\n             (\"migrations.test_writer.BinaryEnum(b'a-value')\", {'import migrations.test_writer'})\n         )\n+\n+    def test_serialize_translated_enum(self):\n+        class TranslatedEnum(enum.Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+\n+        self.assertSerializedResultEqual(\n+            TranslatedEnum.GOOD,\n+            (\"migrations.test_writer.TranslatedEnum['GOOD']\", {'import migrations.test_writer'})\n+        )\n+        self.assertSerializedResultEqual(\n+            TranslatedEnum.BAD,\n+            (\"migrations.test_writer.TranslatedEnum['BAD']\", {'import migrations.test_writer'})\n+        )\n+\n+        field = models.CharField(default=TranslatedEnum.GOOD, choices=[(m.name, m) for m in TranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('GOOD', migrations.test_writer.TranslatedEnum['GOOD']), \"\n+            \"('BAD', migrations.test_writer.TranslatedEnum['BAD'])], \"\n+            \"default=migrations.test_writer.TranslatedEnum['GOOD'])\"\n+        )\n         self.assertSerializedResultEqual(\n             IntEnum.B,\n             (\"migrations.test_writer.IntEnum(2)\", {'import migrations.test_writer'})\n         )\n \n+    def test_serialize_translated_enum(self):\n+        class TranslatedEnum(enum.Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+\n+        self.assertSerializedResultEqual(\n+            TranslatedEnum.GOOD,\n+            (\"migrations.test_writer.TranslatedEnum['GOOD']\", {'import migrations.test_writer'})\n+        )\n+        self.assertSerializedResultEqual(\n+            TranslatedEnum.BAD,\n+            (\"migrations.test_writer.TranslatedEnum['BAD']\", {'import migrations.test_writer'})\n+        )\n+\n+        field = models.CharField(default=TranslatedEnum.GOOD, choices=[(m.name, m) for m in TranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('GOOD', migrations.test_writer.TranslatedEnum['GOOD']), \"\n+            \"('BAD', migrations.test_writer.TranslatedEnum['BAD'])], \"\n+            \"default=migrations.test_writer.TranslatedEnum['GOOD'])\"\n+        )\n+\n         field = models.CharField(default=TextEnum.B, choices=[(m.value, m) for m in TextEnum])\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n@@ -287,6 +383,30 @@ class WriterTests(SimpleTestCase):\n             \"('value-b', migrations.test_writer.TextEnum('value-b'))], \"\n             \"default=migrations.test_writer.TextEnum('value-b'))\"\n         )\n+\n+    def test_serialize_translated_enum(self):\n+        class TranslatedEnum(enum.Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+\n+        self.assertSerializedResultEqual(\n+            TranslatedEnum.GOOD,\n+            (\"migrations.test_writer.TranslatedEnum['GOOD']\", {'import migrations.test_writer'})\n+        )\n+        self.assertSerializedResultEqual(\n+            TranslatedEnum.BAD,\n+            (\"migrations.test_writer.TranslatedEnum['BAD']\", {'import migrations.test_writer'})\n+        )\n+\n+        field = models.CharField(default=TranslatedEnum.GOOD, choices=[(m.name, m) for m in TranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('GOOD', migrations.test_writer.TranslatedEnum['GOOD']), \"\n+            \"('BAD', migrations.test_writer.TranslatedEnum['BAD'])], \"\n+            \"default=migrations.test_writer.TranslatedEnum['GOOD'])\"\n+        )\n         field = models.CharField(default=BinaryEnum.B, choices=[(m.value, m) for m in BinaryEnum])\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n@@ -296,6 +416,30 @@ class WriterTests(SimpleTestCase):\n             \"(b'value-b', migrations.test_writer.BinaryEnum(b'value-b'))], \"\n             \"default=migrations.test_writer.BinaryEnum(b'value-b'))\"\n         )\n+\n+    def test_serialize_translated_enum(self):\n+        class TranslatedEnum(enum.Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+\n+        self.assertSerializedResultEqual(\n+            TranslatedEnum.GOOD,\n+            (\"migrations.test_writer.TranslatedEnum['GOOD']\", {'import migrations.test_writer'})\n+        )\n+        self.assertSerializedResultEqual(\n+            TranslatedEnum.BAD,\n+            (\"migrations.test_writer.TranslatedEnum['BAD']\", {'import migrations.test_writer'})\n+        )\n+\n+        field = models.CharField(default=TranslatedEnum.GOOD, choices=[(m.name, m) for m in TranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('GOOD', migrations.test_writer.TranslatedEnum['GOOD']), \"\n+            \"('BAD', migrations.test_writer.TranslatedEnum['BAD'])], \"\n+            \"default=migrations.test_writer.TranslatedEnum['GOOD'])\"\n+        )\n         field = models.IntegerField(default=IntEnum.A, choices=[(m.value, m) for m in IntEnum])\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n@@ -306,6 +450,30 @@ class WriterTests(SimpleTestCase):\n             \"default=migrations.test_writer.IntEnum(1))\"\n         )\n \n+    def test_serialize_translated_enum(self):\n+        class TranslatedEnum(enum.Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+\n+        self.assertSerializedResultEqual(\n+            TranslatedEnum.GOOD,\n+            (\"migrations.test_writer.TranslatedEnum['GOOD']\", {'import migrations.test_writer'})\n+        )\n+        self.assertSerializedResultEqual(\n+            TranslatedEnum.BAD,\n+            (\"migrations.test_writer.TranslatedEnum['BAD']\", {'import migrations.test_writer'})\n+        )\n+\n+        field = models.CharField(default=TranslatedEnum.GOOD, choices=[(m.name, m) for m in TranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('GOOD', migrations.test_writer.TranslatedEnum['GOOD']), \"\n+            \"('BAD', migrations.test_writer.TranslatedEnum['BAD'])], \"\n+            \"default=migrations.test_writer.TranslatedEnum['GOOD'])\"\n+        )\n+\n     def test_serialize_choices(self):\n         class TextChoices(models.TextChoices):\n             A = 'A', 'A value'\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..c50cd7a 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,6 @@\n+\n import unittest\n-from datetime import datetime\n+from datetime import datetime, timedelta\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -316,9 +317,31 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_rfc850(self):\n-        parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n-        self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        # Current UTC time mocks for testing\n+        utcnow_1 = datetime(2019, 11, 6, 8, 49, 37)\n+        utcnow_2 = datetime(2020, 11, 6, 8, 49, 37)\n+        utcnow_3 = datetime(2048, 11, 6, 8, 49, 37)\n+\n+        tests = (\n+            (utcnow_1, 'Tuesday, 31-Dec-69 08:49:37 GMT', datetime(2069, 12, 31, 8, 49, 37)),\n+            (utcnow_1, 'Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),\n+            (utcnow_1, 'Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37)),\n+            (utcnow_2, 'Wednesday, 31-Dec-70 08:49:37 GMT', datetime(2070, 12, 31, 8, 49, 37)),\n+            (utcnow_2, 'Friday, 31-Dec-71 08:49:37 GMT', datetime(1971, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+        )\n+\n+        for utcnow, rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = utcnow\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n \n     def test_parsing_asctime(self):\n         parsed = parse_http_date('Sun Nov  6 08:49:37 1994')\n",
  "django__django-11880": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 95afc0d..162566b 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3672,7 +3672,48 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n             '<input type=\"hidden\" name=\"data\" id=\"id_data\"></td></tr>'\n         )\n \n-    def test_field_named_data(self):\n+import copy\n+from django import forms\n+from django.test import SimpleTestCase\n+\n+class FormFieldDeepCopyTests(SimpleTestCase):\n+    def test_field_deep_copy_error_messages(self):\n+        class CustomCharField(forms.CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        self.assertIsInstance(field_copy, CustomCharField)\n+        self.assertIsNot(field_copy.error_messages, field.error_messages)\n+\n+    def test_field_deep_copy_error_messages_modification(self):\n+        class CustomCharField(forms.CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+\n+        field_copy.error_messages['invalid'] = 'Changed error message'\n+        self.assertEqual(field.error_messages['invalid'], 'Form custom error message.')\n+        self.assertEqual(field_copy.error_messages['invalid'], 'Changed error message')\n+\n+    def test_deepcopy_with_custom_error_messages(self):\n+        class CustomErrorField(forms.CharField):\n+            default_error_messages = {\n+                'required': 'Custom required message.',\n+                'invalid': 'Custom invalid message.'\n+            }\n+        \n+        field = CustomErrorField()\n+        field_copy = copy.deepcopy(field)\n+        \n+        self.assertIsInstance(field_copy, CustomErrorField)\n+        self.assertIsNot(field.error_messages, field_copy.error_messages)\n+        self.assertEqual(field_copy.error_messages['required'], 'Custom required message.')\n         class DataForm(Form):\n             data = CharField(max_length=10)\n \n",
  "django__django-11951": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex f2f6bbd..f6a2792 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -1,3 +1,5 @@\n+\n+from math import ceil\n from operator import attrgetter\n \n from django.db import IntegrityError, NotSupportedError, connection\n",
  "django__django-11964": "",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..c5102f9 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -148,8 +148,24 @@ class ChoicesTests(SimpleTestCase):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n \n+from django.test import SimpleTestCase\n+from django.db import models\n+\n class GetFieldDisplayTests(SimpleTestCase):\n \n+    def test_overriding_get_FIELD_display(self):\n+        \"\"\"\n+        Test that overriding the get_FIELD_display method works correctly.\n+        \"\"\"\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+\n     def test_choices_and_field_display(self):\n         \"\"\"\n         get_choices() interacts with get_FIELD_display() to return the expected\n",
  "django__django-12039": "diff --git a/tests/indexes/tests.py b/tests/indexes/tests.py\nindex 700f574..bce2134 100644\n--- a/tests/indexes/tests.py\n+++ b/tests/indexes/tests.py\n@@ -9,12 +9,16 @@ from django.db.models.query_utils import Q\n from django.test import (\n     TestCase, TransactionTestCase, skipIfDBFeature, skipUnlessDBFeature,\n )\n+from django.db import connection\n+from django.db.models import Index\n from django.test.utils import override_settings\n from django.utils import timezone\n \n from .models import (\n     Article, ArticleTranslation, IndexedArticle2, IndexTogetherSingleList,\n )\n+from django.db import connection\n+from django.db.models import Index\n \n \n class SchemaIndexesTests(TestCase):\n@@ -22,7 +26,45 @@ class SchemaIndexesTests(TestCase):\n     Test index handling by the db.backends.schema infrastructure.\n     \"\"\"\n \n-    def test_index_name_hash(self):\n+    def test_columns_list_sql(self):\n+        index = Index(fields=['headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_descending_columns_list_sql(self):\n+        index = Index(fields=['-headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s DESC)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_ops_class_columns_lists_sql(self):\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_ops_class_descending_columns_list_sql(self):\n+        index = Index(\n+            fields=['-headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops DESC)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n         \"\"\"\n         Index names should be deterministic.\n         \"\"\"\n",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..50bac1b 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n@@ -6,6 +7,7 @@ from django.db.models.expressions import SimpleCol\n from django.db.models.fields.related_lookups import RelatedIsNull\n from django.db.models.functions import Lower\n from django.db.models.lookups import Exact, GreaterThan, IsNull, LessThan\n+from django.db.models.sql.where import WhereNode\n from django.db.models.sql.query import Query\n from django.db.models.sql.where import OR\n from django.test import SimpleTestCase\n",
  "django__django-12125": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex e62f7b0..f73119d 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -180,6 +180,23 @@ class OperationWriterTests(SimpleTestCase):\n         )\n \n \n+import enum\n+from django.db import models\n+from django.utils.functional import SimpleLazyObject\n+from django.utils.translation import gettext_lazy as _\n+from django.test import SimpleTestCase\n+from django.conf import settings\n+from django.db.migrations.writer import MigrationWriter\n+from django.db.models.fields import Field\n+import datetime\n+import decimal\n+import functools\n+import math\n+import os\n+import re\n+import uuid\n+from unittest import mock\n+\n class WriterTests(SimpleTestCase):\n     \"\"\"\n     Tests the migration writer (makes migration files from Migration instances)\n@@ -746,4 +763,4 @@ class WriterTests(SimpleTestCase):\n \n     def test_register_non_serializer(self):\n         with self.assertRaisesMessage(ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "django__django-12143": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 2d13234..79c3736 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -838,7 +838,53 @@ class ChangeListTests(TestCase):\n         request = self.factory.post(changelist_url, data=data)\n         queryset = m._get_list_editable_queryset(request, prefix='form')\n         self.assertEqual(queryset.count(), 1)\n-        data['form-0-uuid'] = 'INVALD_PRIMARY_KEY'\n+        data['form-0-uuid'] = 'INVALID_PRIMARY_KEY'\n+        # The unfiltered queryset is returned if there's invalid data.\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form')\n+        self.assertEqual(queryset.count(), 2)\n+\n+    def test_get_list_editable_queryset_with_special_chars_in_prefix(self):\n+        \"\"\"Test _get_list_editable_queryset with a prefix containing regex special characters.\"\"\"\n+        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n+        Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n+        special_prefix_data = {\n+            'form$-TOTAL_FORMS': '2',\n+            'form$-INITIAL_FORMS': '2',\n+            'form$-MIN_NUM_FORMS': '0',\n+            'form$-MAX_NUM_FORMS': '1000',\n+            'form$-0-uuid': str(a.pk),\n+            'form$-0-load': '10',\n+            '_save': 'Save',\n+        }\n+        superuser = self._create_superuser('superuser')\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n+        request = self.factory.post(changelist_url, data=special_prefix_data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form$')\n+        self.assertEqual(queryset.count(), 1)\n+\n+    def test_get_list_editable_queryset_with_escape_chars_in_prefix(self):\n+        \"\"\"Test _get_list_editable_queryset with a prefix that should be escaped.\"\"\"\n+        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n+        Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n+        escape_prefix_data = {\n+            'form[0]-TOTAL_FORMS': '2',\n+            'form[0]-INITIAL_FORMS': '2',\n+            'form[0]-MIN_NUM_FORMS': '0',\n+            'form[0]-MAX_NUM_FORMS': '1000',\n+            'form[0]-0-uuid': str(a.pk),\n+            'form[0]-0-load': '10',\n+            '_save': 'Save',\n+        }\n+        superuser = self._create_superuser('superuser')\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n+        request = self.factory.post(changelist_url, data=escape_prefix_data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form[0]')\n+        self.assertEqual(queryset.count(), 1)\n         # The unfiltered queryset is returned if there's invalid data.\n         request = self.factory.post(changelist_url, data=data)\n         queryset = m._get_list_editable_queryset(request, prefix='form')\n",
  "django__django-12155": "",
  "django__django-12193": "diff --git a/tests/postgres_tests/test_array.py b/tests/postgres_tests/test_array.py\nindex 6228cbc..ac6da78 100644\n--- a/tests/postgres_tests/test_array.py\n+++ b/tests/postgres_tests/test_array.py\n@@ -1103,6 +1103,16 @@ class TestSplitFormWidget(PostgreSQLWidgetTestCase):\n             }\n         )\n \n+    def test_splitarrayfield_booleanfield_widget_checked(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('name', [True, False, False])\n+        subwidgets = context['widget']['subwidgets']\n+        # Assert that the first widget is checked\n+        self.assertEqual(subwidgets[0]['attrs'], {'checked': True})\n+        # Assert that the second and third widgets are not checked\n+        self.assertNotIn('checked', subwidgets[1]['attrs'])\n+        self.assertNotIn('checked', subwidgets[2]['attrs'])\n+\n     def test_render(self):\n         self.check_html(\n             SplitArrayWidget(forms.TextInput(), size=2), 'array', None,\n",
  "django__django-12209": "diff --git a/tests/serializers/models/data.py b/tests/serializers/models/data.py\nindex 946715d..ef1c532 100644\n--- a/tests/serializers/models/data.py\n+++ b/tests/serializers/models/data.py\n@@ -260,6 +260,10 @@ class UUIDData(models.Model):\n class FKToUUID(models.Model):\n     data = models.ForeignKey(UUIDData, models.CASCADE)\n \n+import uuid\n+\n+class UUIDDefaultData(models.Model):\n+    data = models.UUIDField(primary_key=True, default=uuid.uuid4)\n \n # Tests for handling fields with pre_save functions, or\n # models with save functions that modify data\n",
  "django__django-12262": "diff --git a/tests/template_tests/test_custom.py b/tests/template_tests/test_custom.py\nindex 8a8c535..adb3ebc 100644\n--- a/tests/template_tests/test_custom.py\n+++ b/tests/template_tests/test_custom.py\n@@ -111,7 +111,35 @@ class SimpleTagTests(TagTestCase):\n             with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n                 self.engine.from_string(\"%s as var %%}\" % entry[1][0:-2])\n \n-    def test_simple_tag_escaping_autoescape_off(self):\n+    def test_simple_tag_keyword_only_args(self):\n+        # Test cases for keyword-only arguments in simple tags\n+\n+        # Test with a keyword argument that has a default value\n+        t = self.engine.from_string(\"{% load custom %}{% hello %}\")\n+        self.assertEqual(t.render(Context()), \"hello world\")\n+\n+        # Test by overriding the default value\n+        t = self.engine.from_string(\"{% load custom %}{% hello greeting='hi' %}\")\n+        self.assertEqual(t.render(Context()), \"hi world\")\n+\n+        # Test for multiple values for the same keyword argument\n+        with self.assertRaisesMessage(TemplateSyntaxError, \"'hello' received multiple values for keyword argument 'greeting'\"):\n+            self.engine.from_string(\"{% load custom %}{% hello greeting='hi' greeting='hello' %}\").render(Context())\n+\n+    def test_inclusion_tag_keyword_only_args(self):\n+        # Test cases for keyword-only arguments in inclusion tags\n+\n+        # Test with a keyword argument that has a default value\n+        t = self.engine.from_string(\"{% load inclusion %}{% inclusion_keyword_only_default %}\")\n+        self.assertEqual(t.render(Context()), \"inclusion_keyword_only_default - Expected result: 42\\n\")\n+\n+        # Test by overriding the default value\n+        t = self.engine.from_string(\"{% load inclusion %}{% inclusion_keyword_only_default kwarg=37 %}\")\n+        self.assertEqual(t.render(Context()), \"inclusion_keyword_only_default - Expected result: 37\\n\")\n+\n+        # Test for multiple values for the same keyword argument\n+        with self.assertRaisesMessage(TemplateSyntaxError, \"'inclusion_keyword_only_default' received multiple values for keyword argument 'kwarg'\"):\n+            self.engine.from_string(\"{% load inclusion %}{% inclusion_keyword_only_default kwarg=42 kwarg=37 %}\").render(Context())\n         c = Context({'name': \"Jack & Jill\"}, autoescape=False)\n         t = self.engine.from_string(\"{% load custom %}{% escape_naive %}\")\n         self.assertEqual(t.render(c), \"Hello Jack & Jill!\")\n",
  "django__django-12276": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 61f7a13..5462950 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import copy\n import datetime\n import json\n@@ -2486,6 +2487,24 @@ Password: <input type=\"password\" name=\"password\" required>\n         self.assertEqual(f.errors, {})\n         self.assertEqual(f.cleaned_data['file1'], 'resume.txt')\n \n+    def test_filefield_with_fileinput_no_required_with_initial(self):\n+        class FileForm(Form):\n+            file1 = forms.FileField(widget=FileInput)\n+\n+        # Initial form without initial data should have the required attribute.\n+        f = FileForm(auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n+        )\n+\n+        # Form with initial data should not have the required attribute.\n+        f = FileForm(initial={'file1': 'resume.txt'}, auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n+        )\n+\n     def test_basic_processing_in_view(self):\n         class UserRegistration(Form):\n             username = CharField(max_length=10)\n",
  "django__django-12304": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 6cabf01..4d62833 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -1,4 +1,6 @@\n+\n import datetime\n+from django.template import Context, Template\n import decimal\n import ipaddress\n import uuid\n@@ -137,7 +139,27 @@ class ChoicesTests(SimpleTestCase):\n                 # A string is not permitted as the second argument to int().\n                 ONE = 1, 'X', 'Invalid'\n \n-        msg = \"duplicate values found in <enum 'Fruit'>: PINEAPPLE -> APPLE\"\n+    def test_enum_in_template(self):\n+        template = Template('{% if student.year_in_school == YearInSchool.FRESHMAN %}Freshman{% endif %}')\n+        output = template.render(Context({\n+            'student': type('Student', (object,), {'year_in_school': YearInSchool.FRESHMAN}),\n+            'YearInSchool': YearInSchool,\n+        }))\n+        self.assertEqual(output, 'Freshman')\n+\n+    def test_enum_label_value_in_template(self):\n+        template = Template('{{ Suit.DIAMOND.label }}|{{ Suit.DIAMOND.value }}')\n+        output = template.render(Context({'Suit': Suit}))\n+        self.assertEqual(output, 'Diamond|1')\n+\n+    def test_enum_comparison_in_template(self):\n+        template = Template('{% if Suit.DIAMOND == 1 %}Correct{% endif %}')\n+        output = template.render(Context({'Suit': Suit}))\n+        self.assertEqual(output, 'Correct')\n+\n+        template = Template('{% if Suit.SPADE == 2 %}Correct{% endif %}')\n+        output = template.render(Context({'Suit': Suit}))\n+        self.assertEqual(output, 'Correct')\n         with self.assertRaisesMessage(ValueError, msg):\n             class Fruit(models.IntegerChoices):\n                 APPLE = 1, 'Apple'\n",
  "django__django-12308": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex acbcf33..86c3c4b 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -176,7 +176,26 @@ class UtilsTests(SimpleTestCase):\n         display_value = display_for_field(None, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, self.empty_value)\n \n-    def test_number_formats_display_for_field(self):\n+    def test_json_display_for_field_readonly(self):\n+        \"\"\"\n+        Test that JSONField values are correctly displayed as JSON strings\n+        when they are readonly in the admin interface.\n+        \"\"\"\n+        tests = [\n+            ({\"foo\": \"bar\"}, '{\"foo\": \"bar\"}'),\n+            ({\"a\": {\"b\": \"c\"}}, '{\"a\": {\"b\": \"c\"}}'),\n+            ([\"a\", \"b\"], '[\"a\", \"b\"]'),\n+            (\"a\", '\"a\"'),\n+            # Include a case with an invalid JSON input to verify it displays as expected.\n+            ({('a', 'b'): 'c'}, \"{('a', 'b'): 'c'}\"),\n+        ]\n+        for value, expected_display in tests:\n+            with self.subTest(value=value):\n+                display_value = display_for_field(value, models.JSONField(), self.empty_value)\n+                if isinstance(value, dict) and all(isinstance(k, str) for k in value.keys()):\n+                    # When all keys are strings, we can expect valid JSON output\n+                    self.assertEqual(json.loads(display_value), value)\n+                self.assertEqual(display_value, expected_display)\n         display_value = display_for_field(12345.6789, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, '12345.6789')\n \n",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..a9c3929 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1014,8 +1014,28 @@ class OtherModelTests(SimpleTestCase):\n \n             class ParkingLot(Place):\n                 parent = models.OneToOneField(Place, models.CASCADE)\n+    @isolate_apps('invalid_models_tests')\n+    def test_onetoone_mti_with_parent_link_and_multiple_references(self):\n+        class Document(models.Model):\n+            pass\n+\n+        class Picking(Document):\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+\n+        # Check should pass without errors\n+        self.assertEqual(Picking.check(), [])\n+\n+    @isolate_apps('invalid_models_tests')\n+    def test_onetoone_mti_without_parent_link_first(self):\n+        msg = 'Add parent_link=True to invalid_models_tests.Picking.origin.'\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            class Document(models.Model):\n+                pass\n \n-    def test_m2m_table_name_clash(self):\n+            class Picking(Document):\n+                origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+                document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n         class Foo(models.Model):\n             bar = models.ManyToManyField('Bar', db_table='myapp_bar')\n \n",
  "django__django-12419": "diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py\nindex 7af62eb..f74688b 100644\n--- a/tests/middleware/test_security.py\n+++ b/tests/middleware/test_security.py\n@@ -247,11 +247,18 @@ class SecurityMiddlewareTest(SimpleTestCase):\n             with self.subTest(value=value), override_settings(SECURE_REFERRER_POLICY=value):\n                 self.assertEqual(self.process_response()['Referrer-Policy'], expected)\n \n-    @override_settings(SECURE_REFERRER_POLICY='strict-origin')\n+    @override_settings(SECURE_REFERRER_POLICY=None)\n+    def test_referrer_policy_default(self):\n+        \"\"\"\n+        With SECURE_REFERRER_POLICY set to None, the middleware sets the\n+        \"Referrer-Policy\" header to the default value of \"same-origin\".\n+        \"\"\"\n+        response = self.process_response()\n+        self.assertEqual(response['Referrer-Policy'], 'same-origin')\n     def test_referrer_policy_already_present(self):\n         \"\"\"\n         The middleware will not override a \"Referrer-Policy\" header already\n         present in the response.\n         \"\"\"\n         response = self.process_response(headers={'Referrer-Policy': 'unsafe-url'})\n-        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n",
  "django__django-12663": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 872551b..ce3b3f0 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -20,6 +20,7 @@ from django.db.models.functions import (\n from django.db.models.sql import constants\n from django.db.models.sql.datastructures import Join\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n+from django.utils.functional import SimpleLazyObject\n from django.test.utils import Approximate, isolate_apps\n \n from .models import (\n@@ -35,6 +36,21 @@ class BasicExpressionsTests(TestCase):\n             name=\"Example Inc.\", num_employees=2300, num_chairs=5,\n             ceo=Employee.objects.create(firstname=\"Joe\", lastname=\"Smith\", salary=10)\n         )\n+\n+    def test_subquery_with_simplelazyobject(self):\n+        manager = Manager.objects.create(name='Lazy Manager')\n+        lazy_manager = SimpleLazyObject(lambda: Manager.objects.get(pk=manager.pk))\n+\n+        # Setting up a nested subquery situation\n+        qs = Company.objects.annotate(\n+            ceo_manager=Subquery(\n+                Employee.objects.filter(\n+                    lastname=OuterRef('ceo__lastname'),\n+                ).values('manager'),\n+            ),\n+        ).filter(ceo_manager=lazy_manager)\n+\n+        self.assertEqual(qs.count(), 0)  # Assuming no match since no managers are set\n         cls.foobar_ltd = Company.objects.create(\n             name=\"Foobar Ltd.\", num_employees=3, num_chairs=4, based_in_eu=True,\n             ceo=Employee.objects.create(firstname=\"Frank\", lastname=\"Meyer\", salary=20)\n",
  "django__django-12708": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 2df48a2..b4baa53 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1759,6 +1759,29 @@ class OperationTests(OperationTestBase):\n         operation = migrations.AlterIndexTogether(\"Pony\", None)\n         self.assertEqual(operation.describe(), \"Alter index_together for Pony (0 constraint(s))\")\n \n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_alter_index_together_remove_with_unique_together(self):\n+        app_label = 'test_alintoremove_wunto'\n+        table_name = '%s_pony' % app_label\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        # Add index together.\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        # Remove index together.\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+\n     @skipUnlessDBFeature('supports_table_check_constraints')\n     def test_add_constraint(self):\n         project_state = self.set_up_test_model(\"test_addconstraint\")\n",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..30d744f 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -4,6 +4,45 @@ import re\n from datetime import datetime, timedelta\n from importlib import import_module\n \n+class TestFormFieldOverrides(TestCase):\n+    def test_formfield_overrides_m2m_filter_widget(self):\n+        \"\"\"\n+        The autocomplete_fields, raw_id_fields, filter_vertical, and\n+        filter_horizontal widgets for ManyToManyFields may be overridden by\n+        specifying a widget in formfield_overrides.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            filter_vertical = ['members']\n+            formfield_overrides = {\n+                ManyToManyField: {'widget': forms.CheckboxSelectMultiple},\n+            }\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, forms.CheckboxSelectMultiple)\n+\n+    def test_formfield_for_manytomany_custom_widget(self):\n+        \"\"\"\n+        Test formfield_for_manytomany to ensure custom widget overrides are respected.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            formfield_overrides = {\n+                ManyToManyField: {'widget': forms.CheckboxSelectMultiple},\n+            }\n+            autocomplete_fields = ['members']\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_manytomany(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, forms.CheckboxSelectMultiple)\n+\n+    def test_formfield_for_manytomany_default_widget(self):\n+        \"\"\"\n+        Test formfield_for_manytomany to ensure default widget is used when no overrides are present.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            pass\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_manytomany(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, widgets.FilteredSelectMultiple)\n+\n import pytz\n \n from django import forms\n@@ -14,7 +53,7 @@ from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.auth.models import User\n from django.core.files.storage import default_storage\n from django.core.files.uploadedfile import SimpleUploadedFile\n-from django.db.models import CharField, DateField, DateTimeField, UUIDField\n+from django.db.models import CharField, DateField, DateTimeField, UUIDField, ManyToManyField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..8a3100f 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,8 +172,9 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)  # Updated call without 'using' argument\n \n+        # Verify that execute_sql_flush executes correctly without using argument\n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n             self.assertIs(Book.objects.exists(), False)\n@@ -181,4 +182,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..c55d19e 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -9,6 +9,8 @@ from django.db.models import Exists, Max, OuterRef\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n from django.utils.deprecation import RemovedInDjango40Warning\n+from django.db import models\n+from django.test.utils import isolate_apps\n \n from .models import (\n     Article, Author, Freebie, Game, IsNullWithNoneAsRHS, Player, Season, Tag,\n@@ -194,7 +196,45 @@ class LookupTests(TestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             Article.objects.in_bulk([self.au1], field_name='author')\n \n-    def test_values(self):\n+    def test_in_bulk_meta_constraint(self):\n+        # Test with a model that has a unique constraint on the 'year' field.\n+        season_2011 = Season.objects.create(year=2011)\n+        season_2012 = Season.objects.create(year=2012)\n+        Season.objects.create(year=2013)\n+        self.assertEqual(\n+            Season.objects.in_bulk(\n+                [season_2011.year, season_2012.year],\n+                field_name='year',\n+            ),\n+            {season_2011.year: season_2011, season_2012.year: season_2012},\n+        )\n+\n+    @isolate_apps('lookup')\n+    def test_in_bulk_non_unique_meta_constraint(self):\n+        # Test with a model having non-unique constraints and verify failure.\n+        class Model(models.Model):\n+            ean = models.CharField(max_length=100)\n+            brand = models.CharField(max_length=100)\n+            name = models.CharField(max_length=80)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=['ean'],\n+                        name='partial_ean_unique',\n+                        condition=models.Q(is_active=True)\n+                    ),\n+                    models.UniqueConstraint(\n+                        fields=['brand', 'name'],\n+                        name='together_brand_name_unique',\n+                    ),\n+                ]\n+\n+        msg = \"in_bulk()'s field_name must be a unique field but '%s' isn't.\"\n+        for field_name in ['brand', 'ean']:\n+            with self.subTest(field_name=field_name):\n+                with self.assertRaisesMessage(ValueError, msg % field_name):\n+                    Model.objects.in_bulk(field_name=field_name)\n         # values() returns a list of dictionaries instead of object instances --\n         # and you can specify which fields you want to retrieve.\n         self.assertSequenceEqual(\n",
  "django__django-12858": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 3b6974f..909b21c 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -893,7 +893,24 @@ class OtherModelTests(SimpleTestCase):\n         with register_lookup(models.CharField, Lower):\n             self.assertEqual(Model.check(), [])\n \n-    def test_ordering_pointing_to_related_model_pk(self):\n+    def test_ordering_using_isnull_lookup_across_related_models(self):\n+        class Parent(models.Model):\n+            pass\n+\n+        class Product(models.Model):\n+            parent = models.ForeignKey(Parent, models.CASCADE, null=True)\n+\n+        class Supply(models.Model):\n+            product = models.ForeignKey(Product, models.CASCADE)\n+\n+        class Stock(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('supply__product__parent__isnull',)\n+\n+        # Ensure the check passes without errors\n+        self.assertEqual(Stock.check(), [])\n         class Parent(models.Model):\n             pass\n \n",
  "django__django-13012": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 87c0945..5524982 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1821,10 +1821,26 @@ class CombinableTests(SimpleTestCase):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             Combinable() | Combinable()\n \n-    def test_reversed_and(self):\n+class ExpressionWrapperTests(SimpleTestCase):\n+    def test_empty_group_by(self):\n+        expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [])\n+\n+    def test_non_empty_group_by(self):\n+        expr = ExpressionWrapper(Lower(Value('f')), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [expr.expression])\n+        \n+    def test_sql_generation_with_constant_expression(self):\n+        expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+        # Assuming we have a mock or fixture to test SQL generation\n+        # This is a conceptual test case to check SQL generation logic\n+        sql = str(SomeModel.objects.annotate(expr_res=expr).values('expr_res', 'column_a').query)\n+        expected_sql_part = 'GROUP BY \"model\".\"column_a\"'\n+        self.assertIn(expected_sql_part, sql)\n+        self.assertNotIn('3', sql)\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             object() & Combinable()\n \n     def test_reversed_or(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n-            object() | Combinable()\n+            object() | Combinable()\n",
  "django__django-13028": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 70329a0..d914b67 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -1211,12 +1211,31 @@ class Queries1Tests(TestCase):\n         )\n \n \n-class Queries2Tests(TestCase):\n+class ProductMetaDataFilterTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n-        Number.objects.create(num=4)\n-        Number.objects.create(num=8)\n-        Number.objects.create(num=12)\n+        cls.brand_metadata = ProductMetaDataType.objects.create(label='Brand', filterable=False)\n+        cls.product_metadata = ProductMetaData.objects.create(\n+            id=1,\n+            product=None,  # Assume a valid Produit instance or mock\n+            value='Dark Vador',\n+            marketplace=None,  # Assume a valid Plateforme instance or mock\n+            date_created=timezone.now(),\n+            metadata_type=cls.brand_metadata\n+        )\n+\n+    def test_filter_metadata_type_not_supported(self):\n+        with self.assertRaises(NotSupportedError):\n+            list(ProductMetaData.objects.filter(value=\"Dark Vador\", metadata_type=self.brand_metadata))\n+\n+    def test_changing_filterable_name_works(self):\n+        other_metadata = ProductMetaDataType.objects.create(label='filterable_test', filterable=False)\n+        # Replace metadata_type and test if it works\n+        self.product_metadata.metadata_type = other_metadata\n+        self.product_metadata.save()\n+        # This should run without raising NotSupportedError\n+        filtered = ProductMetaData.objects.filter(value=\"Dark Vador\", metadata_type=other_metadata)\n+        self.assertEqual(list(filtered), [self.product_metadata])\n \n     def test_ticket4289(self):\n         # A slight variation on the restricting the filtering choices by the\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..36b4407 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,6 +343,32 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_order_by_self_referential_fk(self):\n+        author_1 = Author.objects.create(name='Author 1')\n+        author_2 = Author.objects.create(name='Author 2')\n+\n+        # Articles with authors\n+        article_1 = Article.objects.create(headline=\"Article 1\", author=author_1, pub_date=\"2023-01-01\")\n+        article_2 = Article.objects.create(headline=\"Article 2\", author=author_2, pub_date=\"2023-01-02\")\n+        \n+        # Assign self-referential editor links\n+        author_1.editor = author_2\n+        author_1.save()\n+        author_2.editor = author_1\n+        author_2.save()\n+        \n+        # Test order by self-referential field\n+        self.assertQuerysetEqual(\n+            Article.objects.order_by('author__editor'), \n+            [\"Article 2\", \"Article 1\"], \n+            attrgetter('headline')\n+        )\n+        self.assertQuerysetEqual(\n+            Article.objects.order_by('author__editor_id'), \n+            [\"Article 1\", \"Article 2\"], \n+            attrgetter('headline')\n+        )\n+\n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n",
  "django__django-13089": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex e11856f..3cd2267 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -617,8 +617,27 @@ class BaseCacheTests:\n \n     def test_cull(self):\n         self._perform_cull_test('cull', 50, 29)\n-\n-    def test_zero_cull(self):\n+    def test_cull_no_keys_to_delete(self):\n+        \"\"\"\n+        Test _cull method when there are no keys eligible for deletion.\n+        This simulates cursor.fetchone() returning None.\n+        \"\"\"\n+        try:\n+            cull_cache = caches['cull']\n+        except InvalidCacheBackendError:\n+            self.skipTest(\"Culling isn't implemented.\")\n+        \n+        with connection.cursor() as cursor:\n+            # Clear the cache to simulate no keys available\n+            cull_cache.clear()\n+            # Force culling frequency and maximum entries\n+            cull_cache._cull_frequency = 2\n+            cull_cache._max_entries = 1\n+            # Attempt to cull when the cache is empty\n+            cull_cache.set('single_key', 'value', 1000)\n+            cull_cache._cull(cursor.db.alias, cursor, timezone.now())\n+            # Ensure the key remains since no culling should occur\n+            self.assertTrue(cull_cache.has_key('single_key'))\n         self._perform_cull_test('zero_cull', 50, 19)\n \n     def _perform_invalid_key_test(self, key, expected_warning):\n",
  "django__django-13109": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex d60d822..0b129c0 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -1645,7 +1645,45 @@ class ModelFormBasicTests(TestCase):\n         obj.full_clean()\n \n \n-class ModelMultipleChoiceFieldTests(TestCase):\n+from django.test import TestCase\n+from django import forms\n+from .models import Article, Writer\n+\n+class ForeignKeyValidationTests(TestCase):\n+    def test_foreign_key_validation_with_default_manager(self):\n+        class FavoriteArticlesForm(forms.ModelForm):\n+            class Meta:\n+                model = Article\n+                fields = '__all__'\n+\n+        # Create an archived article\n+        archived_article = Article.objects.create(title='Archived Article', archived=True)\n+        \n+        form = FavoriteArticlesForm({'title': 'Selecting Archived Article', 'article': archived_article.pk})\n+        # Form should not be valid since default manager doesn't include archived articles\n+        self.assertFalse(form.is_valid())\n+        self.assertIn('article', form.errors)\n+        self.assertEqual(form.errors['article'], ['Select a valid choice. That choice is not one of the available choices.'])\n+\n+    def test_foreign_key_validation_with_base_manager(self):\n+        class FavoriteArticlesForm(forms.ModelForm):\n+            class Meta:\n+                model = Article\n+                fields = '__all__'\n+\n+            def __init__(self, *args, **kwargs):\n+                super().__init__(*args, **kwargs)\n+                # Use the base manager to include archived articles in the queryset\n+                self.fields['article'].queryset = Article._base_manager.all()\n+\n+        # Create an archived article\n+        archived_article = Article.objects.create(title='Archived Article', archived=True)\n+\n+        form = FavoriteArticlesForm({'title': 'Selecting Archived Article', 'article': archived_article.pk})\n+        # Form should be valid since base manager includes archived articles\n+        self.assertTrue(form.is_valid())\n+        article_instance = form.save()\n+        self.assertEqual(article_instance.article, archived_article)\n     @classmethod\n     def setUpTestData(cls):\n         cls.c1 = Category.objects.create(name='Entertainment', slug='entertainment', url='entertainment')\n",
  "django__django-13112": "",
  "django__django-13121": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex a684d7e..4a0697e 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1210,12 +1210,54 @@ class ExpressionOperatorTests(TestCase):\n         self.assertEqual(Number.objects.get(pk=self.n.pk).integer, 1764)\n         self.assertEqual(Number.objects.get(pk=self.n.pk).float, Approximate(61.02, places=2))\n \n+    def test_duration_expressions_with_timedelta(self):\n+        from django.db.models import F\n+        import datetime\n+        from .models import Experiment\n+        # Create test data\n+        Experiment.objects.create(estimated_time=datetime.timedelta(days=1))\n+        Experiment.objects.create(estimated_time=datetime.timedelta(hours=2))\n+        \n+        # Define several timedelta values to test\n+        test_deltas = [\n+            datetime.timedelta(days=1),\n+            datetime.timedelta(hours=1),\n+            datetime.timedelta(minutes=30),\n+            datetime.timedelta(seconds=1),\n+        ]\n+\n+        for delta in test_deltas:\n+            qs = Experiment.objects.annotate(duration=F('estimated_time') + delta)\n+            for obj in qs:\n+                self.assertEqual(obj.duration, obj.estimated_time + delta)\n+\n     @unittest.skipIf(connection.vendor == 'oracle', \"Oracle doesn't support bitwise XOR.\")\n     def test_lefthand_bitwise_xor(self):\n         Number.objects.update(integer=F('integer').bitxor(48))\n         self.assertEqual(Number.objects.get(pk=self.n.pk).integer, 26)\n         self.assertEqual(Number.objects.get(pk=self.n1.pk).integer, -26)\n \n+    def test_duration_expressions_with_timedelta(self):\n+        from django.db.models import F\n+        import datetime\n+        from .models import Experiment\n+        # Create test data\n+        Experiment.objects.create(estimated_time=datetime.timedelta(days=1))\n+        Experiment.objects.create(estimated_time=datetime.timedelta(hours=2))\n+        \n+        # Define several timedelta values to test\n+        test_deltas = [\n+            datetime.timedelta(days=1),\n+            datetime.timedelta(hours=1),\n+            datetime.timedelta(minutes=30),\n+            datetime.timedelta(seconds=1),\n+        ]\n+\n+        for delta in test_deltas:\n+            qs = Experiment.objects.annotate(duration=F('estimated_time') + delta)\n+            for obj in qs:\n+                self.assertEqual(obj.duration, obj.estimated_time + delta)\n+\n     @unittest.skipIf(connection.vendor == 'oracle', \"Oracle doesn't support bitwise XOR.\")\n     def test_lefthand_bitwise_xor_null(self):\n         employee = Employee.objects.create(firstname='John', lastname='Doe')\n",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..6e0825b 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1627,7 +1627,18 @@ class FTimeDeltaTests(TestCase):\n         for e in qs:\n             self.assertEqual(e.delta, delta)\n \n-    def test_duration_with_datetime(self):\n+    @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_without_expression_wrapper(self):\n+        # Test direct subtraction of DateTimeField\n+        experiments = Experiment.objects.annotate(delta=F('end') - F('start'))\n+        \n+        for experiment in experiments:\n+            expected_delta = experiment.end - experiment.start\n+            self.assertEqual(experiment.delta, expected_delta)\n+\n+        # Ensure that the subtraction is correctly annotated as a DurationField\n+        queryset = Experiment.objects.annotate(delta=F('end') - F('start'))\n+        self.assertIsInstance(queryset.first().delta, datetime.timedelta)\n         # Exclude e1 which has very high precision so we can test this on all\n         # backends regardless of whether or not it supports\n         # microsecond_precision.\n",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..c72d73c 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -39,7 +39,12 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.intersection(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n-    @skipUnlessDBFeature('supports_select_difference')\n+    def test_union_with_none(self):\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        union_qs = qs1.union(qs2)\n+        self.assertSequenceEqual(union_qs.none(), [])\n+        self.assertNumbersEqual(union_qs, [0, 1, 8, 9], ordered=False)\n     def test_simple_difference(self):\n         qs1 = Number.objects.filter(num__lte=5)\n         qs2 = Number.objects.filter(num__lte=4)\n",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..d16d21a 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -25,6 +25,8 @@ from django.contrib.sessions.models import Session\n from django.contrib.sessions.serializers import (\n     JSONSerializer, PickleSerializer,\n )\n+from django.utils.deprecation import RemovedInDjango40Warning\n+from django.test import override_settings\n from django.core import management\n from django.core.cache import caches\n from django.core.cache.backends.base import InvalidCacheBackendError\n@@ -33,6 +35,8 @@ from django.http import HttpResponse\n from django.test import (\n     RequestFactory, TestCase, ignore_warnings, override_settings,\n )\n+from django.utils.deprecation import RemovedInDjango40Warning\n+from django.test import override_settings\n from django.utils import timezone\n \n from .models import SessionStore as CustomDatabaseSession\n@@ -312,7 +316,21 @@ class SessionTestsMixin:\n         self.assertEqual(self.session.decode(encoded), data)\n \n     @override_settings(SECRET_KEY='django_tests_secret_key')\n-    def test_decode_legacy(self):\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    @override_settings(DEFAULT_HASHING_ALGORITHM='sha1')\n+    def test_legacy_encode_and_decode(self):\n+        data = {'key1': 'value1', 'key2': 'value2'}\n+        encoded = self.session.encode(data)\n+        self.assertEqual(self.session._legacy_decode(encoded), data)\n+\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    @override_settings(DEFAULT_HASHING_ALGORITHM='sha1')\n+    def test_legacy_decode_corrupted_data(self):\n+        # Intentionally corrupt the data\n+        corrupted_data = base64.b64encode(b'sha1:corrupted').decode('ascii')\n+        with self.assertLogs('django.security.SuspiciousSession', 'WARNING') as cm:\n+            self.assertEqual({}, self.session._legacy_decode(corrupted_data))\n+        self.assertIn('corrupted', cm.output[0])\n         # RemovedInDjango40Warning: pre-Django 3.1 sessions will be invalid.\n         legacy_encoded = (\n             'OWUzNTNmNWQxNTBjOWExZmM4MmQ3NzNhMDRmMjU4NmYwNDUyNGI2NDp7ImEgdGVzd'\n",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..b888914 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -9,6 +9,11 @@ from django.test.utils import require_jinja2\n from django.urls import resolve\n from django.utils.deprecation import RemovedInDjango40Warning\n from django.views.generic import RedirectView, TemplateView, View\n+from .models import Artist  # Import necessary model for test\n+from django.shortcuts import get_object_or_404\n+from django.http import Http404\n+from django.urls import path\n+from django.utils.functional import SimpleLazyObject\n \n from . import views\n \n@@ -590,7 +595,40 @@ class DeprecationTests(SimpleTestCase):\n         self.assertEqual(response.context['key'], 'value')\n         self.assertIsInstance(response.context['view'], View)\n \n-    def test_template_params_warning(self):\n+    def test_lazy_object_in_kwargs(self):\n+        \"\"\"Test that SimpleLazyObject in kwargs resolves correctly.\"\"\"\n+        class OfferView(TemplateView):\n+            template_name = 'generic_views/about.html'\n+\n+            def get_context_data(self, **kwargs):\n+                offer_slug = kwargs.get(\"offer_slug\", \"\")\n+                # Explicitly converting to string to resolve SimpleLazyObject\n+                offer = get_object_or_404(Artist, name=str(offer_slug))\n+                return {\"offer\": offer, \"offer_slug\": offer_slug}\n+\n+        artist = Artist.objects.create(name='SimpleLazyArtist')\n+        lazy_slug = SimpleLazyObject(lambda: artist.name)\n+        \n+        response = OfferView.as_view()(self.rf.get('/offers/SimpleLazyArtist/'), offer_slug=lazy_slug)\n+        self.assertEqual(response.context_data['offer'], artist)\n+        self.assertEqual(response.context_data['offer_slug'], 'SimpleLazyArtist')\n+        \n+    def test_lazy_object_without_conversion(self):\n+        \"\"\"Test that SimpleLazyObject in kwargs without explicit conversion raises.\"\"\"\n+        class OfferView(TemplateView):\n+            template_name = 'generic_views/about.html'\n+\n+            def get_context_data(self, **kwargs):\n+                # Here we intentionally do not resolve the SimpleLazyObject\n+                offer_slug = kwargs.get(\"offer_slug\", \"\")\n+                offer = get_object_or_404(Artist, name=offer_slug)\n+                return {\"offer\": offer, \"offer_slug\": offer_slug}\n+\n+        artist = Artist.objects.create(name='SimpleLazyArtist')\n+        lazy_slug = SimpleLazyObject(lambda: artist.name)\n+\n+        with self.assertRaises(Http404):\n+            OfferView.as_view()(self.rf.get('/offers/SimpleLazyArtist/'), offer_slug=lazy_slug)\n         response = self.client.get('/template/custom/bar1/bar2/')\n         self.assertEqual(response.status_code, 200)\n         msg = (\n",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..687d10b 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -14,7 +14,11 @@ from django.forms.models import (\n     ModelFormMetaclass, construct_instance, fields_for_model, model_to_dict,\n     modelform_factory,\n )\n+from django import forms\n+from django.db import models\n from django.template import Context, Template\n+from django.test.utils import isolate_apps\n+from .models import Character, StumpJoke\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n \n from .models import (\n@@ -2809,7 +2813,85 @@ class LimitChoicesToTests(TestCase):\n \n     def test_custom_field_with_queryset_but_no_limit_choices_to(self):\n         \"\"\"\n-        A custom field with a `queryset` attribute but no `limit_choices_to`\n+    def test_limit_choices_to_no_duplicates(self):\n+        threepwood = Character.objects.create(username='threepwood', last_action=timezone.now())\n+        marley = Character.objects.create(username='marley', last_action=timezone.now())\n+\n+        joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=marley)\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=marley)\n+\n+        joke1.has_fooled_today.add(marley, threepwood)\n+        joke2.has_fooled_today.add(marley)\n+        joke3.has_fooled_today.add(marley, threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [marley, threepwood],\n+        )\n+\n+        # Additional test case for cross-checking duplicates on complex relationships\n+        class ComplexCharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        complex_form = ComplexCharacterDetailsForm()\n+        self.assertCountEqual(\n+            complex_form.fields['character1'].queryset.distinct(),\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            complex_form.fields['character2'].queryset.distinct(),\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            complex_form.fields['character3'].queryset.distinct(),\n+            [marley, threepwood],\n+        )\n         works (#23795).\n         \"\"\"\n         f = StumpJokeWithCustomFieldForm()\n",
  "django__django-13343": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex a5ab3a0..deb8745 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -21,6 +21,7 @@ from django.core.files.uploadedfile import (\n     InMemoryUploadedFile, SimpleUploadedFile, TemporaryUploadedFile,\n )\n from django.db.models import FileField\n+from .models import callable_storage\n from django.db.models.fields.files import FileDescriptor\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n",
  "django__django-13346": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex b918d5c..9ae08de 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -623,7 +623,20 @@ class TestQuerying(TestCase):\n                     expected,\n                 )\n \n-    def test_key_iexact(self):\n+    def test_key_in(self):\n+        # Test cases to check if the __in lookup works with JSON key transforms\n+        tests = [\n+            ('value__key1__in', [0], [self.objs[0]]),  # assuming objs[0] has key1=0\n+            ('value__key1__in', [1, 2], [self.objs[1], self.objs[2]]),  # assuming objs[1] has key1=1 and objs[2] has key1=2\n+            ('value__key2__in', ['a', 'b'], [self.objs[3], self.objs[4]]),  # assuming objs[3] has key2='a' and objs[4] has key2='b'\n+            ('value__key3__in', [{'nested': 'value'}], [self.objs[5]]),  # assuming objs[5] has key3={'nested': 'value'}\n+        ]\n+        for lookup, value, expected in tests:\n+            with self.subTest(lookup=lookup, value=value):\n+                self.assertSequenceEqual(\n+                    NullableJSONModel.objects.filter(**{lookup: value}),\n+                    expected,\n+                )\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__iexact='BaR').exists(), True)\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__iexact='\"BaR\"').exists(), False)\n \n",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..636556b 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -17,7 +17,10 @@ from django.db.models.functions import (\n from django.test import (\n     TestCase, override_settings, skipIfDBFeature, skipUnlessDBFeature,\n )\n+import pytz\n+from datetime import datetime\n from django.utils import timezone\n+from .models import DTModel\n \n from ..models import Author, DTModel, Fan\n \n@@ -1133,7 +1136,41 @@ class DateFunctionWithTimeZoneTests(DateFunctionTests):\n         self.assertEqual(model.melb_year.year, 2016)\n         self.assertEqual(model.pacific_year.year, 2015)\n \n-    def test_trunc_ambiguous_and_invalid_times(self):\n+    def test_truncdate_with_tzinfo(self):\n+        melb = pytz.timezone('Australia/Melbourne')\n+        pacific = pytz.timezone('US/Pacific')\n+        start_datetime = datetime(2023, 3, 29, 15, 0, 0)\n+        start_datetime = timezone.make_aware(start_datetime, timezone.utc)\n+        self.create_model(start_datetime, start_datetime)\n+\n+        model = DTModel.objects.annotate(\n+            melb_date=TruncDate('start_datetime', tzinfo=melb),\n+            pacific_date=TruncDate('start_datetime', tzinfo=pacific)\n+        ).get()\n+\n+        melb_start_datetime = start_datetime.astimezone(melb)\n+        pacific_start_datetime = start_datetime.astimezone(pacific)\n+        \n+        self.assertEqual(model.melb_date, melb_start_datetime.date())\n+        self.assertEqual(model.pacific_date, pacific_start_datetime.date())\n+\n+    def test_trunctime_with_tzinfo(self):\n+        melb = pytz.timezone('Australia/Melbourne')\n+        pacific = pytz.timezone('US/Pacific')\n+        start_datetime = datetime(2023, 3, 29, 15, 0, 0)\n+        start_datetime = timezone.make_aware(start_datetime, timezone.utc)\n+        self.create_model(start_datetime, start_datetime)\n+\n+        model = DTModel.objects.annotate(\n+            melb_time=TruncTime('start_datetime', tzinfo=melb),\n+            pacific_time=TruncTime('start_datetime', tzinfo=pacific)\n+        ).get()\n+\n+        melb_start_datetime = start_datetime.astimezone(melb)\n+        pacific_start_datetime = start_datetime.astimezone(pacific)\n+        \n+        self.assertEqual(model.melb_time, melb_start_datetime.time())\n+        self.assertEqual(model.pacific_time, pacific_start_datetime.time())\n         sao = pytz.timezone('America/Sao_Paulo')\n         utc = pytz.timezone('UTC')\n         start_datetime = utc.localize(datetime(2016, 10, 16, 13))\n",
  "django__django-13401": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e39d03e..116feca 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -103,6 +103,39 @@ class BasicFieldTests(SimpleTestCase):\n         self.assertEqual(path, 'model_fields.tests.Nested.Field')\n \n \n+from django.test import TestCase\n+from django.db import models\n+from django.db.models.fields import IntegerField\n+\n+class FieldEqualityTests(TestCase):\n+\n+    def test_fields_from_different_models_not_equal(self):\n+        \"\"\"Fields from different models inheriting from the same abstract model should not be equal.\"\"\"\n+\n+        class AbstractBaseModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class ModelOne(AbstractBaseModel):\n+            pass\n+\n+        class ModelTwo(AbstractBaseModel):\n+            pass\n+\n+        field_one = ModelOne._meta.get_field('field')\n+        field_two = ModelTwo._meta.get_field('field')\n+\n+        # Test for inequality\n+        self.assertNotEqual(field_one, field_two)\n+\n+        # Test for hash inequality\n+        self.assertNotEqual(hash(field_one), hash(field_two))\n+\n+        # Test for field ordering\n+        self.assertLess(field_one, field_two)\n+\n class ChoicesTests(SimpleTestCase):\n \n     @classmethod\n",
  "django__django-13410": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 1285e22..b552198 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -1,3 +1,4 @@\n+\n import errno\n import gzip\n import os\n@@ -17,6 +18,8 @@ from django.core.files.uploadedfile import (\n     UploadedFile,\n )\n from django.test import override_settings\n+from django.core.files import locks\n+from pathlib import Path\n \n try:\n     from PIL import Image\n@@ -172,7 +175,44 @@ class FileTests(unittest.TestCase):\n \n class NoNameFileTestCase(unittest.TestCase):\n     \"\"\"\n-    Other examples of unnamed files may be tempfile.SpooledTemporaryFile or\n+    def test_exclusive_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'w') as f:\n+            f.write('test content\\n')\n+\n+        with open(file_path) as f1, open(file_path) as f2:\n+            self.assertIs(locks.lock(f1, locks.LOCK_EX), True)\n+            self.assertIs(locks.lock(f2, locks.LOCK_EX | locks.LOCK_NB), False)\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), False)\n+            self.assertIs(locks.unlock(f1), True)\n+\n+    def test_shared_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'w') as f:\n+            f.write('test content\\n')\n+\n+        with open(file_path) as f1, open(file_path) as f2:\n+            self.assertIs(locks.lock(f1, locks.LOCK_SH), True)\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), True)\n+            self.assertIs(locks.unlock(f1), True)\n+            self.assertIs(locks.unlock(f2), True)\n+\n+    def test_unlock_already_unlocked_file(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'w') as f:\n+            f.write('test content\\n')\n+\n+        with open(file_path) as f1:\n+            self.assertIs(locks.unlock(f1), True)\n+\n+    def test_lock_with_invalid_flags(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'w') as f:\n+            f.write('test content\\n')\n+\n+        with open(file_path) as f1:\n+            with self.assertRaises(ValueError):\n+                locks.lock(f1, 12345)  # Invalid flag\n     urllib.urlopen()\n     \"\"\"\n     def test_noname_file_default_name(self):\n",
  "django__django-13417": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 8130de5..bccd981 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2076,6 +2076,28 @@ class QuerysetOrderedTests(unittest.TestCase):\n     def test_empty_queryset(self):\n         self.assertIs(Annotation.objects.none().ordered, True)\n \n+    def test_annotated_default_ordering(self):\n+        qs = Annotation.objects.annotate(num_notes=Count('notes'))\n+        self.assertIs(qs.ordered, False)  # Annotating without order_by should not be ordered\n+        self.assertIs(qs.order_by('notes').ordered, True)  # Adding an order_by should make it ordered\n+\n+    def test_annotated_values_default_ordering(self):\n+        qs = Annotation.objects.values('notes').annotate(num_notes=Count('notes'))\n+        self.assertIs(qs.ordered, False)  # Values query with annotate and no order_by should not be ordered\n+        self.assertIs(qs.order_by('notes').ordered, True)  # Adding order_by should make it ordered\n+\n+    def test_annotated_with_explicit_ordering(self):\n+        qs = Annotation.objects.annotate(num_notes=Count('notes')).order_by('notes')\n+        self.assertIs(qs.ordered, True)  # Annotating with explicit order_by should be ordered\n+\n+    def test_values_annotated_with_explicit_ordering(self):\n+        qs = Annotation.objects.values('notes').annotate(num_notes=Count('notes')).order_by('notes')\n+        self.assertIs(qs.ordered, True)  # Values query with annotate and explicit order_by should be ordered\n+\n+    def test_annotated_without_order_by(self):\n+        qs = Annotation.objects.annotate(num_notes=Count('notes'))\n+        self.assertIs(qs.order_by().ordered, False)  # Clearing order_by should result in not ordered\n+\n     def test_order_by_extra(self):\n         self.assertIs(Annotation.objects.all().extra(order_by=['id']).ordered, True)\n \n",
  "django__django-13516": "",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..17a2952 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,11 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n+from .with_custom_email_field import CustomEmailField\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n@@ -15,9 +17,25 @@ class MockedPasswordResetTokenGenerator(PasswordResetTokenGenerator):\n \n     def _now(self):\n         return self._now_val\n-\n-\n-class TokenGeneratorTest(TestCase):\n+    def test_token_invalid_after_email_change(self):\n+        \"\"\"Ensure the token is invalidated after changing the user's email.\"\"\"\n+        tests = [\n+            (User, 'test4@example.com'),\n+            (CustomEmailField, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertTrue(p0.check_token(user, tk1))\n+                setattr(user, user.get_email_field_name(), 'newemail@example.com')\n+                user.save()\n+                self.assertFalse(p0.check_token(user, tk1))\n \n     def test_make_token(self):\n         user = User.objects.create_user('tokentestuser', 'test2@example.com', 'testpw')\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..7922ce0 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,3 +1,4 @@\n+\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n@@ -9,7 +10,7 @@ from django.test import (\n )\n from django.test.utils import isolate_apps\n \n-from .models import CustomUserNonUniqueUsername\n+from django.db.models import Q, UniqueConstraint\n \n \n @isolate_apps('auth_tests', attr_name='apps')\n@@ -138,7 +139,51 @@ class ModelsPermissionsChecksTests(SimpleTestCase):\n             ),\n         ])\n \n-    def test_non_clashing_custom_permissions(self):\n+    @override_settings(AUTH_USER_MODEL='auth_tests.UserWithUniqueConstraint')\n+    def test_username_unique_constraint(self):\n+        \"\"\"\n+        Test that a UniqueConstraint on the USERNAME_FIELD does not raise auth.E003.\n+        \"\"\"\n+        class UserWithUniqueConstraint(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = \"username\"\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(fields=[\"username\"], name=\"user_username_unique_constraint\")\n+                ]\n+\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [])\n+\n+    @override_settings(AUTH_USER_MODEL='auth_tests.UserWithPartialUniqueConstraint')\n+    def test_username_partial_unique_constraint(self):\n+        \"\"\"\n+        Test that a partial UniqueConstraint on the USERNAME_FIELD results in warning, not error.\n+        \"\"\"\n+        class UserWithPartialUniqueConstraint(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = \"username\"\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(\n+                        fields=[\"username\"],\n+                        name=\"partial_user_username_unique_constraint\",\n+                        condition=Q(password__isnull=False)\n+                    )\n+                ]\n+\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [\n+            checks.Warning(\n+                \"'UserWithPartialUniqueConstraint.username' is named as the \"\n+                \"'USERNAME_FIELD', but it is not unique.\",\n+                hint='Ensure that your authentication backend(s) can handle non-unique usernames.',\n+                obj=UserWithPartialUniqueConstraint,\n+                id='auth.W004',\n+            ),\n+        ])\n         class Checked(models.Model):\n             class Meta:\n                 permissions = [\n",
  "django__django-13569": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex a44d0b6..999138f 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1314,4 +1314,20 @@ class AggregateTestCase(TestCase):\n         # non-multivalued JOINs, see Col.possibly_multivalued (refs #31150):\n         # with self.assertNumQueries(1) as ctx:\n         #     self.assertSequenceEqual(books_qs, [book])\n-        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n+        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n+\n+    def test_aggregation_order_by_random_no_group_by_random(self):\n+        \"\"\"Test that order_by('?') does not wrongly introduce RANDOM() in GROUP BY.\"\"\"\n+        thing = Thing.objects.create()\n+        related_objects = [Related.objects.create(thing=thing) for _ in range(2)]\n+        queryset = Thing.objects.annotate(rc=Count('related')).order_by('?').values('id', 'rc')\n+        self.assertEqual(queryset.count(), 1)\n+        self.assertEqual(queryset[0]['rc'], 2)\n+\n+    def test_aggregation_with_explicit_values_and_random_ordering(self):\n+        \"\"\"Ensure order_by('?') with explicit values() doesn't break aggregation.\"\"\"\n+        thing = Thing.objects.create()\n+        related_objects = [Related.objects.create(thing=thing) for _ in range(3)]\n+        queryset = Thing.objects.values('id').annotate(rc=Count('related')).order_by('?')\n+        self.assertEqual(queryset.count(), 1)\n+        self.assertEqual(queryset[0]['rc'], 3)\n",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..dc3e4b1 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -8,6 +9,7 @@ from unittest import mock\n \n from django.core.exceptions import FieldError\n from django.db import DatabaseError, NotSupportedError, connection\n+from collections import namedtuple\n from django.db.models import (\n     AutoField, Avg, BinaryField, BooleanField, Case, CharField, Count,\n     DateField, DateTimeField, DecimalField, DurationField, Exists, Expression,\n@@ -815,7 +817,40 @@ class IterableLookupInnerExpressionsTests(TestCase):\n         Company.objects.create(name='5060 Ltd', num_employees=50, num_chairs=60, ceo=ceo)\n         Company.objects.create(name='99300 Ltd', num_employees=99, num_chairs=300, ceo=ceo)\n \n-    def test_in_lookup_allows_F_expressions_and_expressions_for_integers(self):\n+    def test_range_lookup_namedtuple(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertQuerysetEqual(qs, ['<Company: 99300 Ltd>'], ordered=False)\n+\n+    def test_range_lookup_namedtuple_with_exact_boundaries(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=50, maximum=50),\n+        )\n+        self.assertQuerysetEqual(\n+            qs,\n+            [\n+                '<Company: 5020 Ltd>', '<Company: 5040 Ltd>',\n+                '<Company: 5050 Ltd>', '<Company: 5060 Ltd>'\n+            ],\n+            ordered=False\n+        )\n+\n+    def test_range_lookup_namedtuple_with_out_of_range(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=100, maximum=200),\n+        )\n+        self.assertQuerysetEqual(qs, [], ordered=False)\n+\n+    def test_range_lookup_namedtuple_with_reversed_boundaries(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['maximum', 'minimum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(maximum=100, minimum=51),\n+        )\n+        self.assertQuerysetEqual(qs, ['<Company: 99300 Ltd>'], ordered=False)\n         # __in lookups can use F() expressions for integers.\n         queryset = Company.objects.filter(num_employees__in=([F('num_chairs') - 10]))\n         self.assertQuerysetEqual(queryset, ['<Company: 5060 Ltd>'], ordered=False)\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..beaa4f1 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -19,18 +19,26 @@ from django.conf import settings\n from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n )\n+from django.core.management import execute_from_command_line\n+from django.test.utils import captured_stderr, captured_stdout\n from django.core.management.commands.loaddata import Command as LoaddataCommand\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n )\n+from django.core.management import execute_from_command_line\n+from django.test.utils import captured_stderr, captured_stdout\n from django.core.management.commands.testserver import (\n     Command as TestserverCommand,\n )\n+from django.core.management import execute_from_command_line\n+from django.test.utils import captured_stderr, captured_stdout\n from django.db import ConnectionHandler, connection\n from django.db.migrations.recorder import MigrationRecorder\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n+from django.core.management import execute_from_command_line\n+from django.test.utils import captured_stderr, captured_stdout\n \n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n \n@@ -1867,7 +1875,40 @@ class ArgumentOrder(AdminScriptTestCase):\n         )\n \n \n-@override_settings(ROOT_URLCONF='admin_scripts.urls')\n+class ExecuteFromCommandLineTests(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_prog_name_with_python_m(self):\n+        \"\"\"\n+        Program name should be 'python -m django' when the program name is '__main__.py'.\n+        \"\"\"\n+        args = ['help']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['__main__.py'] + args):\n+                execute_from_command_line(['python -m django'] + args)\n+        self.assertIn('usage: python -m django help', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_prog_name_with_custom_script(self):\n+        \"\"\"\n+        Custom script name should be reflected in the usage output.\n+        \"\"\"\n+        args = ['help']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['custom_script_name.py'] + args):\n+                execute_from_command_line(['custom_script_name'] + args)\n+        self.assertIn('usage: custom_script_name help', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n class StartProject(LiveServerTestCase, AdminScriptTestCase):\n \n     available_apps = [\n",
  "django__django-13670": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 6f0b13f..43ae1a4 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -1,3 +1,4 @@\n+\n from datetime import date, datetime\n \n from django.test import SimpleTestCase, override_settings\n@@ -146,7 +147,24 @@ class DateFormatTests(SimpleTestCase):\n         # Ticket #16924 -- We don't need timezone support to test this\n         self.assertEqual(dateformat.format(aware_dt, 'O'), '-0330')\n \n-    def test_invalid_time_format_specifiers(self):\n+    def test_year_before_1000(self):\n+        tests = [\n+            (476, '76'),\n+            (42, '42'),\n+            (4, '04'),\n+            (999, '99'),\n+            (1000, '00'),\n+            (2000, '00'),\n+            (2019, '19'),\n+            (9, '09'),\n+            (0, '00'),  # Edge case for year 0, if applicable\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n         my_birthday = date(1984, 8, 7)\n \n         for specifier in ['a', 'A', 'f', 'g', 'G', 'h', 'H', 'i', 'P', 'r', 's', 'u']:\n@@ -164,4 +182,4 @@ class DateFormatTests(SimpleTestCase):\n             self.assertEqual(\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+            )\n",
  "django__django-13741": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex ca66cd5..0aed0c3 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1020,6 +1020,10 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n+    def test_readonly_password_hash_field_disabled(self):\n+        field = ReadOnlyPasswordHashField()\n+        self.assertIs(field.disabled, True, \"The ReadOnlyPasswordHashField should be disabled by default\")\n+\n     def test_readonly_field_has_changed(self):\n         field = ReadOnlyPasswordHashField()\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n",
  "django__django-13786": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3782589..d204a19 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -119,6 +119,46 @@ class OptimizerTests(SimpleTestCase):\n             ]\n         )\n \n+        # Test case for squashing CreateModel with AlterModelOptions that empties options.\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'verbose_name': 'My Model', 'permissions': [('can_view', 'Can View')]},\n+                ),\n+                migrations.AlterModelOptions('MyModel', options={}),\n+            ],\n+            [\n+                migrations.CreateModel('MyModel', fields=[], options={}),\n+            ]\n+        )\n+        \n+        # Test case for squashing CreateModel with AlterModelOptions that partially alters options.\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={\n+                        'verbose_name': 'My Model',\n+                        'permissions': [('can_view', 'Can View')],\n+                    },\n+                ),\n+                migrations.AlterModelOptions(\n+                    'MyModel',\n+                    options={'verbose_name': 'My Model Updated'},\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'verbose_name': 'My Model Updated'},\n+                ),\n+            ]\n+        )\n+\n     def _test_create_alter_foo_delete_model(self, alter_foo):\n         \"\"\"\n         CreateModel, AlterModelTable, AlterUniqueTogether/AlterIndexTogether/\n@@ -134,6 +174,46 @@ class OptimizerTests(SimpleTestCase):\n             [],\n         )\n \n+        # Test case for squashing CreateModel with AlterModelOptions that empties options.\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'verbose_name': 'My Model', 'permissions': [('can_view', 'Can View')]},\n+                ),\n+                migrations.AlterModelOptions('MyModel', options={}),\n+            ],\n+            [\n+                migrations.CreateModel('MyModel', fields=[], options={}),\n+            ]\n+        )\n+        \n+        # Test case for squashing CreateModel with AlterModelOptions that partially alters options.\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={\n+                        'verbose_name': 'My Model',\n+                        'permissions': [('can_view', 'Can View')],\n+                    },\n+                ),\n+                migrations.AlterModelOptions(\n+                    'MyModel',\n+                    options={'verbose_name': 'My Model Updated'},\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'verbose_name': 'My Model Updated'},\n+                ),\n+            ]\n+        )\n+\n     def test_create_alter_unique_delete_model(self):\n         self._test_create_alter_foo_delete_model(migrations.AlterUniqueTogether(\"Foo\", [[\"a\", \"b\"]]))\n \n",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..77e4450 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,7 +1,10 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n from django.test import SimpleTestCase\n+from django.utils.functional import lazy\n+from django.utils.translation import gettext_lazy\n \n from ..utils import setup\n \n",
  "django__django-13807": "diff --git a/tests/backends/tests.py b/tests/backends/tests.py\nindex 0aee2b6..ad10f06 100644\n--- a/tests/backends/tests.py\n+++ b/tests/backends/tests.py\n@@ -17,12 +17,14 @@ from django.test import (\n     TestCase, TransactionTestCase, override_settings, skipIfDBFeature,\n     skipUnlessDBFeature,\n )\n+from django.db import IntegrityError, connection, transaction\n \n from .models import (\n     Article, Object, ObjectReference, Person, Post, RawData, Reporter,\n     ReporterProxy, SchoolClass, Square,\n     VeryLongModelNameZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ,\n )\n+from django.db import IntegrityError, connection, transaction\n \n \n class DateQuotingTest(TestCase):\n",
  "django__django-13809": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex d88ea78..723ac9b 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1314,6 +1314,11 @@ class ManageRunserver(SimpleTestCase):\n         self.assertIn('unapplied migration(s)', self.output.getvalue())\n \n \n+from django.core.management import call_command\n+from django.core.management.commands.runserver import Command as RunserverCommand\n+from unittest import mock\n+from io import StringIO\n+\n class ManageRunserverMigrationWarning(TestCase):\n \n     def setUp(self):\n",
  "django__django-13810": "",
  "django__django-13820": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex 594c01e..c6650a9 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -1,3 +1,4 @@\n+\n import compileall\n import os\n \n@@ -8,6 +9,7 @@ from django.db.migrations.exceptions import (\n from django.db.migrations.loader import MigrationLoader\n from django.db.migrations.recorder import MigrationRecorder\n from django.test import TestCase, modify_settings, override_settings\n+from importlib import import_module\n \n from .test_base import MigrationTestBase\n \n@@ -512,6 +514,38 @@ class LoaderTests(TestCase):\n         migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n         self.assertEqual(migrations, [])\n \n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_no_file'})\n+    def test_loading_package_without_file(self):\n+        \"\"\"\n+        To support frozen environments, MigrationLoader loads migrations from\n+        regular packages with no __file__ attribute.\n+        \"\"\"\n+        test_module = import_module('migrations.test_migrations_no_file')\n+        loader = MigrationLoader(connection)\n+\n+        # Save original state\n+        module_file = getattr(test_module, '__file__', None)\n+        module_origin = test_module.__spec__.origin\n+        module_has_location = test_module.__spec__.has_location\n+\n+        try:\n+            # Simulate a frozen environment by removing __file__ and adjusting the module's spec\n+            delattr(test_module, '__file__')\n+            test_module.__spec__.origin = None\n+            test_module.__spec__.has_location = False\n+\n+            loader.load_disk()\n+            migrations = [\n+                name for app, name in loader.disk_migrations if app == 'migrations'\n+            ]\n+            self.assertCountEqual(migrations, ['0001_initial', '0002_second'])\n+        finally:\n+            # Restore original state\n+            if module_file is not None:\n+                test_module.__file__ = module_file\n+            test_module.__spec__.origin = module_origin\n+            test_module.__spec__.has_location = module_has_location\n+\n \n class PycLoaderTests(MigrationTestBase):\n \n",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..f70acdf 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -10,6 +10,11 @@ from unittest import mock\n from django.core.exceptions import ImproperlyConfigured\n from django.db import NotSupportedError, connection, transaction\n from django.db.models import Aggregate, Avg, CharField, StdDev, Sum, Variance\n+import unittest\n+from unittest import mock\n+from django.core.exceptions import ImproperlyConfigured\n+from django.db import connection\n+from django.db.backends.sqlite3.base import Database as dbapi2\n from django.db.utils import ConnectionHandler\n from django.test import (\n     TestCase, TransactionTestCase, override_settings, skipIfDBFeature,\n@@ -36,7 +41,21 @@ class Tests(TestCase):\n                 self.assertRaisesMessage(ImproperlyConfigured, msg):\n             check_sqlite_version()\n \n-    def test_aggregation(self):\n+    def test_check_sqlite_version_3_8_11_1(self):\n+        msg = 'SQLite 3.9.0 or later is required (found 3.8.11.1).'\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 8, 11, 1)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.8.11.1'), \\\n+                self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            check_sqlite_version()\n+    \n+    def test_check_sqlite_version_3_9_0(self):\n+        # This should not raise an exception as the version is supported.\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 9, 0)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.9.0'):\n+            try:\n+                check_sqlite_version()\n+            except ImproperlyConfigured:\n+                self.fail(\"check_sqlite_version() raised ImproperlyConfigured unexpectedly!\")\n         \"\"\"Raise NotSupportedError when aggregating on date/time fields.\"\"\"\n         for aggregate in (Sum, Avg, Variance, StdDev):\n             with self.assertRaises(NotSupportedError):\n",
  "django__django-13837": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 10ffa22..4eb44bf 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -155,10 +155,31 @@ class TestIterModulesAndFiles(SimpleTestCase):\n                     frozenset(),\n                 )\n \n+from .test_module import __main__ as test_main\n+import mock\n+import sys\n+import django\n+import tempfile\n+from pathlib import Path\n \n class TestChildArguments(SimpleTestCase):\n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver']\n+        )\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', ['-m', 'pkg_other_than_django', 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_other_package(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'pkg_other_than_django', 'runserver']\n+        )\n     def test_run_as_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n@@ -173,7 +194,14 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-Werror', __file__, 'runserver']\n         )\n \n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', ['-m', 'pkg_other_than_django', 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_other_package(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'pkg_other_than_django', 'runserver']\n+        )\n     def test_exe_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             exe_path = Path(tmpdir) / 'django-admin.exe'\n",
  "django__django-13925": "",
  "django__django-13933": "",
  "django__django-13964": "diff --git a/tests/many_to_one/tests.py b/tests/many_to_one/tests.py\nindex 8af1b8e..9a2ba58 100644\n--- a/tests/many_to_one/tests.py\n+++ b/tests/many_to_one/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n from copy import deepcopy\n \n@@ -10,6 +11,7 @@ from .models import (\n     Article, Category, Child, ChildNullableParent, City, Country, District,\n     First, Parent, Record, Relation, Reporter, School, Student, Third,\n     ToFieldChild,\n+    ParentStringPrimaryKey, ChildStringPrimaryKeyParent\n )\n \n \n@@ -549,7 +551,37 @@ class ManyToOneTests(TestCase):\n         self.assertEqual(child.parent, parent)\n         self.assertEqual(child.parent_id, parent.name)\n \n-    def test_fk_to_bigautofield(self):\n+    def test_save_fk_after_parent_with_non_numeric_pk_set_on_child(self):\n+        parent = ParentStringPrimaryKey()\n+        child = ChildStringPrimaryKeyParent(parent=parent)\n+        child.parent.name = 'jeff'\n+        parent.save()\n+        child.save()\n+        child.refresh_from_db()\n+        self.assertEqual(child.parent, parent)\n+        self.assertEqual(child.parent_id, parent.name)\n+\n+    def test_save_fk_with_delayed_primary_key_assignment(self):\n+        # This will test the incorrect behavior as described that needs to be fixed.\n+        with transaction.atomic():\n+            parent = ParentStringPrimaryKey()  # Create parent without PK.\n+            child = ChildStringPrimaryKeyParent(parent=parent)\n+            child.parent.name = 'foo'  # Assign PK after setting to child.\n+            parent.save()\n+            child.save()\n+            # Check if the child is saved with the correct foreign key\n+            self.assertFalse(ChildStringPrimaryKeyParent.objects.filter(parent_id=\"\").exists())\n+            self.assertTrue(ChildStringPrimaryKeyParent.objects.filter(parent=parent).exists())\n+\n+    def test_save_fk_with_initial_primary_key_assignment(self):\n+        # This is the correct behavior as mentioned in the issue.\n+        with transaction.atomic():\n+            parent = ParentStringPrimaryKey(name='foo')  # Create parent with PK.\n+            child = ChildStringPrimaryKeyParent(parent=parent)\n+            parent.save()\n+            child.save()\n+            # Check if the child is saved with the correct foreign key\n+            self.assertTrue(ChildStringPrimaryKeyParent.objects.filter(parent=parent).exists())\n         ch = City.objects.create(name='Chicago')\n         District.objects.create(city=ch, name='Far South')\n         District.objects.create(city=ch, name='North')\n",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..9e86e80 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,7 +1,9 @@\n+\n from django.db import IntegrityError, transaction\n from django.test import TestCase, skipIfDBFeature\n \n-from .models import Bar, Business, Employee, Foo\n+from .models import Bar, Business, Employee, Foo, CustomAutoFieldModel\n+from .fields import MyWrapper\n \n \n class BasicCustomPKTests(TestCase):\n",
  "django__django-14017": "",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..ad1cd82 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -205,6 +205,18 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n \n+    def test_post_process_no_duplicate_yields(self):\n+        \"\"\"\n+        Test that post_process does not yield the same file more than once.\n+        \"\"\"\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(clear=False, dry_run=False, post_process=True)\n+        stats = collectstatic_cmd.collect()\n+        post_processed_files = stats['post_processed']\n+\n+        # Ensure no file is yielded more than once\n+        self.assertCountEqual(post_processed_files, set(post_processed_files))\n+\n     def test_css_import_case_insensitive(self):\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n         self.assertEqual(relpath, \"cached/styles_insensitive.3fa427592a53.css\")\n",
  "django__django-14089": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 7fb3d83..d9d0dc8 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n@@ -40,6 +41,24 @@ class OrderedSetTests(SimpleTestCase):\n         s.add(1)\n         self.assertIn(1, s)\n \n+    def test_reversed(self):\n+        import collections.abc\n+        s = reversed(OrderedSet([1, 2, 3]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [3, 2, 1])\n+\n+    def test_reversed_empty_set(self):\n+        s = OrderedSet()\n+        self.assertEqual(list(reversed(s)), [])\n+\n+    def test_reversed_single_element(self):\n+        s = OrderedSet([42])\n+        self.assertEqual(list(reversed(s)), [42])\n+\n+    def test_reversed_preserve_order(self):\n+        s = OrderedSet(['a', 'b', 'c', 'd'])\n+        self.assertEqual(list(reversed(s)), ['d', 'c', 'b', 'a'])\n+\n     def test_bool(self):\n         # Refs #23664\n         s = OrderedSet()\n",
  "django__django-14122": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 83089d9..0c03375 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -1,10 +1,11 @@\n+\n from datetime import datetime\n from operator import attrgetter\n \n from django.db.models import (\n     CharField, DateTimeField, F, Max, OuterRef, Subquery, Value,\n )\n-from django.db.models.functions import Upper\n+from django.db.models.functions import Upper, Random\n from django.test import TestCase\n \n from .models import Article, Author, ChildArticle, OrderedByFArticle, Reference\n@@ -483,4 +484,4 @@ class OrderingTests(TestCase):\n         )\n         ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n         articles = ChildArticle.objects.order_by('article_ptr')\n-        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n",
  "django__django-14140": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex c3db825..686c970 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -839,6 +839,28 @@ class BasicExpressionsTests(TestCase):\n                 self.assertCountEqual(Employee.objects.filter(conditions), [self.max])\n \n \n+class ExpressionBooleanTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.max = Employee.objects.create(firstname='Max', lastname='Mustermann')\n+        cls.gmbh = Company.objects.create(name='GmbH', point_of_contact=cls.max)\n+\n+    def test_boolean_expression_deconstruction(self):\n+        tagged = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        q = Q(Exists(tagged))\n+        _, args, kwargs = q.deconstruct()\n+        self.assertEqual(args, (Exists(tagged),))\n+        self.assertEqual(kwargs, {})\n+\n+    def test_pickle_boolean_expression(self):\n+        group = Group.objects.create(name='group')\n+        Event.objects.create(title='event', group=group)\n+        groups = Group.objects.filter(\n+            Q(Exists(Event.objects.filter(group_id=OuterRef('id')))),\n+        )\n+        groups2 = pickle.loads(pickle.dumps(groups))\n+        self.assertSequenceEqual(groups2, [group])\n+\n class IterableLookupInnerExpressionsTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..21db8ca 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,3 +1,4 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n@@ -66,7 +67,25 @@ class TestDefaultPK(SimpleTestCase):\n             class Model(models.Model):\n                 pass\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -82,7 +101,25 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14311": "",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..931f905 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -226,7 +226,15 @@ TEST_DATA = [\n     (URLValidator(), None, ValidationError),\n     (URLValidator(), 56, ValidationError),\n     (URLValidator(), 'no_scheme', ValidationError),\n-    # Trailing newlines not accepted\n+    # Trailing newlines and other forbidden characters are not accepted.\n+    (URLValidator(), 'http://www.djangoproject.com/\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://www.djangoproject.com/\\t', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\t', ValidationError),\n+    (URLValidator(), 'http://www.django\\rproject.com/', ValidationError),\n+    (URLValidator(), 'http://[::\\rffff:192.9.5.5]', ValidationError),\n+    (URLValidator(), 'http://\\twww.djangoproject.com/', ValidationError),\n+    (URLValidator(), 'http://\\t[::ffff:192.9.5.5]', ValidationError),\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n     # Trailing junk does not take forever to reject\n",
  "django__django-14351": "diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\nindex 79963c3..094751b 100644\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -1527,7 +1527,26 @@ class AggregationTests(TestCase):\n \n \n class JoinPromotionTests(TestCase):\n-    def test_ticket_21150(self):\n+    def test_q_object_or_behavior(self):\n+        property_groups = PropertyGroup.objects.filter(management_agent=self.a1)\n+        queryset = self.a1.annotate(Count(\"agent__property_groups\"))\n+        \n+        # This should work and not raise ProgrammingError\n+        try:\n+            result = queryset.filter(\n+                Q(agent__property_groups__id__in=property_groups.values_list(\"id\", flat=True))\n+                | Q(agent__property_groups__count=0)\n+            ).distinct()\n+            self.assertIsNotNone(result)\n+        except ProgrammingError:\n+            self.fail(\"Q object with __or__ raised ProgrammingError unexpectedly\")\n+        \n+        # This is the original problematic query\n+        with self.assertRaises(ProgrammingError):\n+            queryset.filter(\n+                Q(agent__property_groups__in=property_groups)\n+                | Q(agent__property_groups__count=0)\n+            ).distinct()\n         b = Bravo.objects.create()\n         c = Charlie.objects.create(bravo=b)\n         qs = Charlie.objects.select_related('alfa').annotate(Count('bravo__charlie'))\n",
  "django__django-14373": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 2f7c68b..9789f18 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -179,7 +179,13 @@ class DateFormatTests(SimpleTestCase):\n                     expected_date,\n                 )\n \n-    def test_twelve_hour_format(self):\n+    def test_y_format_year_before_1000(self):\n+        self.assertEqual(dateformat.format(datetime(1, 1, 1), 'Y'), '0001')\n+        self.assertEqual(dateformat.format(datetime(999, 1, 1), 'Y'), '0999')\n+\n+    def test_Y_format_year_before_1000(self):\n+        self.assertEqual(dateformat.format(datetime(1, 1, 1), 'Y'), '0001')\n+        self.assertEqual(dateformat.format(datetime(999, 1, 1), 'Y'), '0999')\n         tests = [\n             (0, '12'),\n             (1, '1'),\n",
  "django__django-14376": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\nindex 643c2b6..d2abbb8 100644\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -38,7 +38,98 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n-    def test_options_override_settings_proper_values(self):\n+    def test_deprecated_vs_non_deprecated_kwargs(self):\n+        \"\"\"\n+        Test that both deprecated ('db', 'passwd') and non-deprecated\n+        ('database', 'password') keywords are supported, but prefer\n+        non-deprecated ones when both are provided.\n+        \"\"\"\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        \n+        # Test with non-deprecated kwargs\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'user': 'optionuser',\n+                    'password': 'optionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+        \n+        # Test with deprecated kwargs\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'deprecatedoptiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'deprecatedoptionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'db': 'deprecatedoptiondbname',\n+                    'user': 'optionuser',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+        \n+        # Test with both deprecated and non-deprecated kwargs\n+        # Non-deprecated should take precedence\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'db': 'deprecatedoptiondbname',\n+                    'password': 'optionpassword',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n         settings_port = 444\n         options_port = 555\n         self.assertNotEqual(settings_port, options_port, 'test pre-req')\n",
  "django__django-14434": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex 39c82bf..37a6652 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -2197,8 +2197,40 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor:\n             AuthorWithUniqueNameAndBirthday._meta.constraints = []\n             editor.remove_constraint(AuthorWithUniqueNameAndBirthday, constraint)\n+    def test_unique_constraint_no_field(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        constraint = UniqueConstraint(fields=[], name='no_field_uq')\n+        # Add constraint.\n+        with connection.schema_editor() as editor:\n+            with self.assertRaises(ValueError):\n+                editor.add_constraint(Author, constraint)\n \n-    @skipUnlessDBFeature('supports_expression_indexes')\n+    def test_unique_constraint_invalid_field(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        constraint = UniqueConstraint(fields=['invalid_field'], name='invalid_field_uq')\n+        # Attempt to add constraint with non-existent field.\n+        with connection.schema_editor() as editor:\n+            with self.assertRaises(FieldDoesNotExist):\n+                editor.add_constraint(Author, constraint)\n+\n+    def test_unique_constraint_with_expression(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        constraint = UniqueConstraint(Upper('name'), name='expression_uq')\n+        # Add constraint.\n+        with connection.schema_editor() as editor:\n+            editor.add_constraint(Author, constraint)\n+            sql = constraint.create_sql(Author, editor)\n+        table = Author._meta.db_table\n+        self.assertIs(sql.references_table(table), True)\n+        # Even though an expression is used, ensure it doesn't reference a specific column incorrectly\n+        self.assertIs(sql.references_column(table, 'name'), False)\n+        # Remove constraint.\n+        with connection.schema_editor() as editor:\n+            editor.remove_constraint(Author, constraint)\n+        self.assertNotIn(constraint.name, self.get_constraints(table))\n     def test_func_unique_constraint(self):\n         with connection.schema_editor() as editor:\n             editor.create_model(Author)\n",
  "django__django-14493": "diff --git a/tests/staticfiles_tests/storage.py b/tests/staticfiles_tests/storage.py\nindex dc966a1..9b78095 100644\n--- a/tests/staticfiles_tests/storage.py\n+++ b/tests/staticfiles_tests/storage.py\n@@ -94,6 +94,8 @@ class ExtraPatternsStorage(ManifestStaticFilesStorage):\n     )\n \n \n+from django.contrib.staticfiles.storage import ManifestStaticFilesStorage\n+\n class NoneHashStorage(ManifestStaticFilesStorage):\n     def file_hash(self, name, content=None):\n-        return None\n+        return None\n",
  "django__django-14500": "diff --git a/tests/migrations/test_executor.py b/tests/migrations/test_executor.py\nindex d884fe4..61d7069 100644\n--- a/tests/migrations/test_executor.py\n+++ b/tests/migrations/test_executor.py\n@@ -640,7 +640,38 @@ class ExecutorTests(MigrationTestBase):\n         \"\"\"\n         recorder = MigrationRecorder(connection)\n         # Record all replaced migrations as applied\n-        recorder.record_applied(\"migrations\", \"0001_initial\")\n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_squashed'})\n+    def test_migrate_unapplies_squash_and_replacements(self):\n+        \"\"\"\n+        Test that unapplying a squashed migration correctly marks it and its replaced migrations as unapplied.\n+        \"\"\"\n+        executor = MigrationExecutor(connection)\n+        executor.migrate([('migrations', '0001_squashed_0002')])\n+        \n+        # Ensure the squashed migration is applied\n+        self.assertIn(\n+            ('migrations', '0001_squashed_0002'),\n+            executor.recorder.applied_migrations(),\n+        )\n+\n+        # Unapply the squashed migration\n+        executor.migrate([('migrations', None)])\n+\n+        # Verify that the squashed migration is now unapplied\n+        self.assertNotIn(\n+            ('migrations', '0001_squashed_0002'),\n+            executor.recorder.applied_migrations(),\n+        )\n+\n+        # Verify that its replacements are also unapplied\n+        self.assertNotIn(\n+            ('migrations', '0001_initial'),\n+            executor.recorder.applied_migrations(),\n+        )\n+        self.assertNotIn(\n+            ('migrations', '0002_second'),\n+            executor.recorder.applied_migrations(),\n+        )\n         recorder.record_applied(\"migrations\", \"0002_second\")\n         executor = MigrationExecutor(connection)\n         executor.migrate([(\"migrations\", \"0001_squashed_0002\")])\n",
  "django__django-14539": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 23a1e0a..7716d05 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -255,6 +255,22 @@ class TestUtilsHtml(SimpleTestCase):\n                 'Search for <a href=\"http://google.com/?q=\">google.com/?q=</a>!'\n             ),\n             ('foo@example.com', '<a href=\"mailto:foo@example.com\">foo@example.com</a>'),\n+            (\n+                'Search for google.com/?q=1&lt! and see.',\n+                'Search for <a href=\"http://google.com/?q=1%3C\">google.com/?q=1&lt</a>! and see.'\n+            ),\n+            (\n+                'Check example.org/path?name=foo&amp;age=20!.',\n+                'Check <a href=\"http://example.org/path?name=foo&amp;age=20\">example.org/path?name=foo&amp;age=20</a>!.'\n+            ),\n+            (\n+                'Visit https://example.com/?a=1&amp;b=2.',\n+                'Visit <a href=\"https://example.com/?a=1&amp;b=2\">https://example.com/?a=1&amp;b=2</a>.'\n+            ),\n+            (\n+                'Go to www.example.com?param=1&gt.',\n+                'Go to <a href=\"http://www.example.com?param=1%3E\">www.example.com?param=1&gt</a>.'\n+            ),\n         )\n         for value, output in tests:\n             with self.subTest(value=value):\n",
  "django__django-14559": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex b579834..d317a8a 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -115,7 +115,31 @@ class BulkUpdateTests(TestCase):\n \n     pk_fields_error = 'bulk_update() cannot be used with primary key fields.'\n \n-    def test_update_primary_key(self):\n+    def test_bulk_update_return_value(self):\n+        # Test with no updates\n+        rows_updated = Note.objects.bulk_update([], ['note'])\n+        self.assertEqual(rows_updated, 0)\n+\n+        # Test updating a large number of rows\n+        Note.objects.bulk_create([\n+            Note(note=str(i), misc=str(i))\n+            for i in range(0, 2000)\n+        ])\n+        notes = list(Note.objects.all())\n+        for note in notes:\n+            note.note = \"updated\"\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 2000)\n+\n+        # Test updating with duplicate notes\n+        note1 = Note.objects.create(note='duplicate-note', misc='test1')\n+        note2 = Note.objects.create(note='duplicate-note', misc='test2')\n+        rows_updated = Note.objects.bulk_update([note1, note1], ['note'])\n+        self.assertEqual(rows_updated, 1)\n+\n+        # Test updating with duplicates in different batches\n+        rows_updated = Note.objects.bulk_update([note1, note1], ['note'], batch_size=1)\n+        self.assertEqual(rows_updated, 2)\n         with self.assertRaisesMessage(ValueError, self.pk_fields_error):\n             Note.objects.bulk_update([], ['id'])\n \n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..8adae7c 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -984,7 +984,48 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n \n-    def test_formset_iteration(self):\n+    def test_formset_nonform_css_class(self):\n+        \"\"\"\n+        Verify that non-form errors in a formset include the 'nonform' CSS class.\n+        \"\"\"\n+        data = {\n+            'drinks-TOTAL_FORMS': '2',  # the number of forms rendered\n+            'drinks-INITIAL_FORMS': '0',  # the number of forms with initial data\n+            'drinks-MIN_NUM_FORMS': '0',  # min number of forms\n+            'drinks-MAX_NUM_FORMS': '0',  # max number of forms\n+            'drinks-0-name': 'Gin and Tonic',\n+            'drinks-1-name': 'Gin and Tonic',\n+        }\n+        formset = FavoriteDrinksFormSet(data, prefix='drinks')\n+        self.assertFalse(formset.is_valid())\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>'\n+        )\n+\n+    def test_formset_nonform_css_class_max_validation(self):\n+        \"\"\"\n+        Ensure that max validation errors in a formset include the 'nonform' CSS class.\n+        \"\"\"\n+        data = {\n+            'choices-TOTAL_FORMS': '3',  # the number of forms rendered\n+            'choices-INITIAL_FORMS': '0',  # the number of forms with initial data\n+            'choices-MIN_NUM_FORMS': '0',  # min number of forms\n+            'choices-MAX_NUM_FORMS': '2',  # max number of forms - should be ignored\n+            'choices-0-choice': 'Zero',\n+            'choices-0-votes': '0',\n+            'choices-1-choice': 'One',\n+            'choices-1-votes': '1',\n+            'choices-2-choice': 'Two',\n+            'choices-2-votes': '2',\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=1, max_num=2, validate_max=True)\n+        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at most 2 forms.</li></ul>'\n+        )\n         \"\"\"Formset instances are iterable.\"\"\"\n         ChoiceFormset = formset_factory(Choice, extra=3)\n         formset = ChoiceFormset()\n",
  "django__django-14631": "",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..19b4e5c 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -2,6 +2,8 @@ from datetime import date, datetime, timedelta\n from operator import attrgetter\n \n from django.db import IntegrityError\n+from django.db import models\n+from django.core.checks import Error\n from django.test import TestCase\n \n from .models import (\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..80ad3ea 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,3 +1,37 @@\n+\n+class AutocompleteJsonViewTestCase(TestCase):\n+    def setUp(self):\n+        self.factory = RequestFactory()\n+        self.superuser = User.objects.create_superuser(\n+            username='super', password='secret', email='super@example.com',\n+        )\n+        self.url = reverse('admin:your_autocomplete_view')\n+        self.opts = {'app_label': 'your_app', 'model_name': 'question', 'field_name': 'field'}\n+\n+    def test_serialize_result_with_extra_fields(self):\n+        # Setup test data\n+        q1 = Question.objects.create(question='Question 1', posted=date(2021, 8, 9))\n+        q2 = Question.objects.create(question='Question 2', posted=date(2021, 8, 7))\n+\n+        class CustomAutocompleteJsonView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return super().serialize_result(obj, to_field_name) | {'posted': str(obj.posted)}\n+\n+        request = self.factory.get(self.url, {'term': 'Question', **self.opts})\n+        request.user = self.superuser\n+        response = CustomAutocompleteJsonView.as_view(admin_site=admin.site)(request)\n+        \n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        expected_data = {\n+            'results': [\n+                {'id': str(q1.pk), 'text': q1.question, 'posted': str(q1.posted)},\n+                {'id': str(q2.pk), 'text': q2.question, 'posted': str(q2.posted)}\n+            ],\n+            'pagination': {'more': False},\n+        }\n+        self.assertEqual(data, expected_data)\n+\n import json\n from contextlib import contextmanager\n \n@@ -6,6 +40,9 @@ from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.admin.views.autocomplete import AutocompleteJsonView\n from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n+from django.test import TestCase\n+from datetime import date\n+from .models import Question\n from django.core.exceptions import PermissionDenied\n from django.http import Http404\n from django.test import RequestFactory, override_settings\n",
  "django__django-14765": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 11009e5..1417ab5 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -923,8 +923,35 @@ class StateTests(SimpleTestCase):\n             len([x for x in rendered_state.get_models() if x._meta.app_label == \"migrations\"]),\n             1,\n         )\n+    def test_real_apps_set(self):\n+        \"\"\"\n+        Test ProjectState with real_apps as a set (should not raise an error).\n+        \"\"\"\n+        try:\n+            ProjectState(real_apps={'contenttypes'})\n+        except AssertionError:\n+            self.fail(\"AssertionError raised when 'real_apps' is a set\")\n+\n+    def test_real_apps_non_set(self):\n+        \"\"\"\n+        Test ProjectState with real_apps as a non-set (should raise an AssertionError).\n+        \"\"\"\n+        with self.assertRaises(AssertionError):\n+            ProjectState(real_apps=['contenttypes'])\n \n-    def test_ignore_order_wrt(self):\n+    def test_real_apps_with_tuple(self):\n+        \"\"\"\n+        Test ProjectState with real_apps as a tuple (should raise an AssertionError).\n+        \"\"\"\n+        with self.assertRaises(AssertionError):\n+            ProjectState(real_apps=('contenttypes',))\n+\n+    def test_real_apps_with_dict(self):\n+        \"\"\"\n+        Test ProjectState with real_apps as a dict (should raise an AssertionError).\n+        \"\"\"\n+        with self.assertRaises(AssertionError):\n+            ProjectState(real_apps={'contenttypes': True})\n         \"\"\"\n         Makes sure ProjectState doesn't include OrderWrt fields when\n         making from existing models.\n",
  "django__django-14771": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 1875424..b969f64 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -196,6 +196,36 @@ class TestChildArguments(SimpleTestCase):\n \n     @mock.patch('__main__.__spec__', None)\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys._xoptions', {'utf8': True, 'dev': 'True'})\n+    def test_xoptions_utf8_and_dev(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xdev=True', __file__, 'runserver']\n+        )\n+\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys._xoptions', {'utf8': True})\n+    def test_xoptions_utf8_only(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', __file__, 'runserver']\n+        )\n+\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys._xoptions', {'a': '1', 'b': '2'})\n+    def test_xoptions_multiple(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xa=1', '-Xb=2', __file__, 'runserver']\n+        )\n+\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys._xoptions', {})\n+    def test_xoptions_empty(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, __file__, 'runserver']\n+        )\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n         self.assertEqual(\n@@ -236,6 +266,36 @@ class TestChildArguments(SimpleTestCase):\n             autoreload.get_child_arguments()\n \n     @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys._xoptions', {'utf8': True, 'dev': 'True'})\n+    def test_xoptions_utf8_and_dev(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xdev=True', __file__, 'runserver']\n+        )\n+\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys._xoptions', {'utf8': True})\n+    def test_xoptions_utf8_only(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', __file__, 'runserver']\n+        )\n+\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys._xoptions', {'a': '1', 'b': '2'})\n+    def test_xoptions_multiple(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xa=1', '-Xb=2', __file__, 'runserver']\n+        )\n+\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys._xoptions', {})\n+    def test_xoptions_empty(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, __file__, 'runserver']\n+        )\n     @mock.patch('sys.warnoptions', [])\n     def test_module_no_spec(self):\n         module = types.ModuleType('test_module')\n",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..61d4401 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -271,7 +271,28 @@ class MethodDecoratorTests(SimpleTestCase):\n                 self.assertEqual(Test.method.__doc__, 'A method')\n                 self.assertEqual(Test.method.__name__, 'method')\n \n-    def test_new_attribute(self):\n+    def test_wrapper_assignments(self):\n+        \"\"\"@method_decorator preserves wrapper assignments.\"\"\"\n+        func_name = None\n+        func_module = None\n+\n+        def decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_name, func_module\n+                func_name = getattr(func, '__name__', None)\n+                func_module = getattr(func, '__module__', None)\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(decorator)\n+            def method(self):\n+                return 'tests'\n+\n+        Test().method()\n+        self.assertEqual(func_name, 'method')\n+        self.assertIsNotNone(func_module)\n         \"\"\"A decorator that sets a new attribute on the method.\"\"\"\n         def decorate(func):\n             func.x = 1\n@@ -426,6 +447,10 @@ class MethodDecoratorTests(SimpleTestCase):\n                     return \"tests\"\n \n \n+from functools import wraps\n+from django.utils.decorators import method_decorator\n+from unittest import TestCase\n+\n class XFrameOptionsDecoratorsTests(TestCase):\n     \"\"\"\n     Tests for the X-Frame-Options decorators.\n",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..c399470 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5092,6 +5092,33 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         choice = Choice.objects.create(choice=None)\n         response = self.client.get(reverse('admin:admin_views_choice_change', args=(choice.pk,)))\n         self.assertContains(response, '<div class=\"readonly\">No opinion</div>', html=True)\n+    def _test_readonly_foreignkey_links(self, admin_site_name):\n+        # Create a model instance with a ForeignKey and ensure the correct URL is generated.\n+        chapter = Chapter.objects.create(\n+            title='Chapter 2',\n+            content='content',\n+            book=Book.objects.create(name='Book 2'),\n+        )\n+        language = Language.objects.create(iso='LNG', name='Language Test')\n+        chapter.language = language\n+        chapter.save()\n+\n+        response = self.client.get(reverse(f'{admin_site_name}:admin_views_chapter_change', args=(chapter.pk,)))\n+        language_url = reverse(f'{admin_site_name}:admin_views_language_change', args=(quote(language.pk),))\n+\n+        # Check that the readonly field renders a link with the correct admin site prefix.\n+        self.assertContains(\n+            response,\n+            '<div class=\"readonly\"><a href=\"%s\">LNG</a></div>' % language_url,\n+            html=True,\n+        )\n+\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        self._test_readonly_foreignkey_links('admin')\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        # Assuming 'namespaced_admin' is the name for the custom admin site.\n+        self._test_readonly_foreignkey_links('namespaced_admin')\n \n     def test_readonly_foreignkey_links(self):\n         \"\"\"\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..8bb77cc 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..e7fbb86 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -793,6 +793,33 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n \n+    def test_rename_model_with_db_table_noop(self):\n+        app_label = 'test_rmwdbtn'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+\n+        # Cloning the project state to simulate the rename operation\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            # Check that there are no queries executed during the forward operation\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            # Check that there are no queries executed during the backward operation\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n     def test_rename_m2m_target_model(self):\n         app_label = \"test_rename_m2m_target_model\"\n         project_state = self.apply_operations(app_label, ProjectState(), operations=[\n",
  "django__django-15022": "",
  "django__django-15037": "diff --git a/tests/inspectdb/tests.py b/tests/inspectdb/tests.py\nindex 19402bb..4cb0509 100644\n--- a/tests/inspectdb/tests.py\n+++ b/tests/inspectdb/tests.py\n@@ -203,8 +203,20 @@ class InspectDBTestCase(TestCase):\n             'people_unique = models.OneToOneField(InspectdbPeople, models.DO_NOTHING)',\n             output,\n         )\n-\n-    def test_digits_column_name_introspection(self):\n+    def test_foreign_key_to_specific_field(self):\n+        \"\"\"\n+        Test that a foreign key to a specific field (non-primary key) is correctly\n+        introspected and maps to the correct field in the referenced model.\n+        \"\"\"\n+        out = StringIO()\n+        call_command('inspectdb', 'inspectdb_foo_bar', stdout=out)\n+        output = out.getvalue()\n+        \n+        # Verify that the foreign key field in 'bar' references the correct unique field in 'foo'\n+        self.assertIn(\n+            \"other_id = models.ForeignKey('InspectdbFoo', models.DO_NOTHING, to_field='other_id')\",\n+            output\n+        )\n         \"\"\"Introspection of column names consist/start with digits (#16536/#17676)\"\"\"\n         char_field_type = connection.features.introspected_field_types['CharField']\n         out = StringIO()\n",
  "django__django-15103": "",
  "django__django-15104": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 04452fa..7d83710 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2834,8 +2834,46 @@ class AutodetectorTests(TestCase):\n                     expected_number,\n                 )\n \n-\n-class MigrationSuggestNameTests(SimpleTestCase):\n+class TestCustomForeignKeyMigration(SimpleTestCase):\n+    def test_add_custom_fk_with_hardcoded_to(self):\n+        class HardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.Author'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']\n+                return name, path, args, kwargs\n+\n+        book_hardcoded_fk_to = ModelState('testapp', 'Book', [\n+            ('author', HardcodedForeignKey(on_delete=models.CASCADE)),\n+        ])\n+        changes = self.get_changes(\n+            [self.author_empty],\n+            [self.author_empty, book_hardcoded_fk_to],\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='Book')\n+\n+    def test_custom_fk_field_with_missing_to(self):\n+        class HardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.Author'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']\n+                return name, path, args, kwargs\n+        \n+        # Reproduce the scenario where the 'to' field is missing\n+        changes = MigrationAutodetector(\n+            ProjectState(),\n+            ProjectState()\n+        )._detect_changes()\n+        self.assertEqual(len(changes), 0)\n     def test_no_operations(self):\n         class Migration(migrations.Migration):\n             operations = []\n",
  "django__django-15127": "",
  "django__django-15128": "diff --git a/tests/queries/models.py b/tests/queries/models.py\nindex a7bb7e8..1b44df0 100644\n--- a/tests/queries/models.py\n+++ b/tests/queries/models.py\n@@ -613,7 +613,17 @@ class OrderItem(models.Model):\n \n \n class BaseUser(models.Model):\n-    pass\n+    annotation = models.ForeignKey('Annotation', models.CASCADE, null=True, blank=True)\n+\n+class Annotation(models.Model):\n+    tag = models.ForeignKey('Tag', models.CASCADE)\n+\n+class Note(models.Model):\n+    tag = models.ForeignKey('Tag', models.CASCADE)\n+    annotation = models.ForeignKey(Annotation, models.CASCADE, related_name='notes')\n+\n+class Tag(models.Model):\n+    name = models.CharField(max_length=50)\n \n \n class Task(models.Model):\n",
  "django__django-15161": "",
  "django__django-15268": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a6c0858..9c7435a 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1626,8 +1626,28 @@ class AutodetectorTests(TestCase):\n             changes, 'otherapp', 0,\n             ['CreateModel', 'AddField', 'AlterUniqueTogether', 'AlterIndexTogether']\n         )\n+    def test_optimization_of_redundant_foo_together(self):\n+        \"\"\"\n+        Redundant AlterFooTogether operations should be optimized into a single operation.\n+        \"\"\"\n+        initial_state = [self.author_empty, self.book_foo_together]\n+        final_state = [self.author_empty, self.book_foo_together_optimized]\n \n-    def test_remove_field_and_foo_together(self):\n+        changes = self.get_changes(initial_state, final_state)\n+        self.assertNumberMigrations(changes, \"otherapp\", 1)\n+        # Check that only one AlterUniqueTogether and one AlterIndexTogether are generated\n+        self.assertOperationTypes(changes, 'otherapp', 0, [\n+            'AlterUniqueTogether',\n+            'AlterIndexTogether',\n+        ])\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 0, name='book',\n+            unique_together={('title', 'author')},\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 1, name='book',\n+            index_together={('title', 'author')},\n+        )\n         \"\"\"\n         Removed fields will be removed after updating index/unique_together.\n         \"\"\"\n",
  "django__django-15277": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 11f86ed..378b7eb 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1847,6 +1847,41 @@ class ValueTests(TestCase):\n                 expr = Value(value)\n                 self.assertIsInstance(expr.output_field, output_field_type)\n \n+    def test_resolve_output_field_does_not_create_broken_validators(self):\n+        \"\"\"\n+        Test that the output field for a Value object does not create broken\n+        validators when max_length is None.\n+        \"\"\"\n+        from decimal import Decimal\n+        import datetime\n+        import uuid\n+        from django.db.models import Value\n+\n+        value_types = [\n+            'str',\n+            True,\n+            42,\n+            3.14,\n+            datetime.date(2019, 5, 15),\n+            datetime.datetime(2019, 5, 15),\n+            datetime.time(3, 16),\n+            datetime.timedelta(1),\n+            Decimal('3.14'),\n+            b'',\n+            uuid.uuid4(),\n+        ]\n+\n+        for value in value_types:\n+            with self.subTest(type=type(value)):\n+                field = Value(value)._resolve_output_field()\n+                try:\n+                    field.clean(value, model_instance=None)\n+                except TypeError:\n+                    self.fail(f\"TypeError raised for value {value} of type {type(value)}\")\n+            with self.subTest(type=type(value)):\n+                expr = Value(value)\n+                self.assertIsInstance(expr.output_field, output_field_type)\n+\n     def test_resolve_output_field_failure(self):\n         msg = 'Cannot resolve expression type, unknown output_field'\n         with self.assertRaisesMessage(FieldError, msg):\n",
  "django__django-15278": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex dd02aee..e5e8c9c 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -618,7 +618,29 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor:\n             editor.add_field(Author, new_field)\n         # Ensure the field is there\n+from django.db import connection\n+from django.db.models import Model, OneToOneField, CASCADE\n+from django.test import TestCase\n+\n+class Author(Model):\n+    pass\n+\n+class Note(Model):\n+    pass\n+\n+class SchemaTests(TestCase):\n+\n+    def test_add_field_o2o_nullable(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        new_field = OneToOneField(Note, CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n         columns = self.column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        self.assertTrue(columns['note_id'][1][6])\n         field_type, field_info = columns['thing']\n         self.assertEqual(field_type, connection.features.introspected_field_types['IntegerField'])\n         # Make sure the values were transformed correctly\n@@ -636,7 +658,29 @@ class SchemaTests(TransactionTestCase):\n         new_field.set_attributes_from_name(\"bits\")\n         with connection.schema_editor() as editor:\n             editor.add_field(Author, new_field)\n+from django.db import connection\n+from django.db.models import Model, OneToOneField, CASCADE\n+from django.test import TestCase\n+\n+class Author(Model):\n+    pass\n+\n+class Note(Model):\n+    pass\n+\n+class SchemaTests(TestCase):\n+\n+    def test_add_field_o2o_nullable(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        new_field = OneToOneField(Note, CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n         columns = self.column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        self.assertTrue(columns['note_id'][1][6])\n         # MySQL annoyingly uses the same backend, so it'll come back as one of\n         # these two types.\n         self.assertIn(columns['bits'][0], (\"BinaryField\", \"TextField\"))\n",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..11819bc 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -90,7 +90,41 @@ class BasicFieldTests(SimpleTestCase):\n         self.assertIsNotNone(f1)\n         self.assertNotIn(f2, (None, 1, ''))\n \n-    def test_field_instance_is_picklable(self):\n+    def test_hash_immutability(self):\n+        field = models.IntegerField()\n+        field_hash = hash(field)\n+\n+        class MyModel(models.Model):\n+            rank = field\n+\n+        self.assertEqual(field_hash, hash(field))\n+\n+    def test_hash_immutability_before_and_after_assignment(self):\n+        \"\"\"Test that a field's hash remains the same before and after assignment to a model.\"\"\"\n+        f = models.CharField(max_length=200)\n+        initial_hash = hash(f)\n+        d = {f: 1}\n+\n+        class Book(models.Model):\n+            title = f\n+\n+        self.assertEqual(initial_hash, hash(f))\n+        self.assertIn(f, d)\n+        \n+    def test_hash_with_multiple_fields(self):\n+        \"\"\"Test hash immutability when multiple fields are involved.\"\"\"\n+        f1 = models.CharField(max_length=100)\n+        f2 = models.IntegerField()\n+        \n+        initial_hash_f1 = hash(f1)\n+        initial_hash_f2 = hash(f2)\n+\n+        class Author(models.Model):\n+            name = f1\n+            age = f2\n+\n+        self.assertEqual(initial_hash_f1, hash(f1))\n+        self.assertEqual(initial_hash_f2, hash(f2))\n         \"\"\"Field instances can be pickled.\"\"\"\n         field = models.Field(max_length=100, default='a string')\n         # Must be picklable with this cached property populated (#28188).\n",
  "django__django-15368": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex 447c150..ac34e84 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -211,7 +211,20 @@ class BulkUpdateTests(TestCase):\n         Number.objects.bulk_update(numbers, ['num'])\n         self.assertCountEqual(Number.objects.filter(num=1), numbers)\n \n-    def test_booleanfield(self):\n+    def test_f_expression_on_charfield(self):\n+        # Create objects with a 'name' field\n+        objects = [SelfRef.objects.create(name=f'name_{i}', c8='') for i in range(10)]\n+        for obj in objects:\n+            # Assigning an F() expression to be resolved\n+            obj.c8 = F('name')\n+        SelfRef.objects.bulk_update(objects, ['c8'])\n+        \n+        # Verify that the 'c8' field was updated to match the 'name' field\n+        for obj in objects:\n+            obj.refresh_from_db()\n+            self.assertEqual(obj.c8, obj.name)\n+\n+    def test_f_expression(self):\n         individuals = [Individual.objects.create(alive=False) for _ in range(10)]\n         for individual in individuals:\n             individual.alive = True\n",
  "django__django-15380": "",
  "django__django-15382": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex bd890ac..299f65c 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1906,6 +1906,42 @@ class ExistsTests(TestCase):\n         self.assertNotIn('ORDER BY', captured_sql)\n \n \n+from django.db import models\n+from django.test import TestCase\n+from django.db.models import Exists, Q\n+from .models import Manager\n+\n+class ExistsSubqueryTests(TestCase):\n+\n+    def test_negated_empty_exists(self):\n+        manager = Manager.objects.create(name=\"John Doe\")\n+        qs = Manager.objects.filter(\n+            ~Exists(Manager.objects.none()) & Q(pk=manager.pk)\n+        )\n+        self.assertSequenceEqual(qs, [manager])\n+\n+    def test_non_negated_empty_exists(self):\n+        manager = Manager.objects.create(name=\"Jane Doe\")\n+        qs = Manager.objects.filter(\n+            Exists(Manager.objects.none()) & Q(pk=manager.pk)\n+        )\n+        self.assertSequenceEqual(qs, [])\n+\n+    def test_negated_exists_with_non_empty_queryset(self):\n+        manager = Manager.objects.create(name=\"Alice Doe\")\n+        other_manager = Manager.objects.create(name=\"Bob Doe\")\n+        qs = Manager.objects.filter(\n+            ~Exists(Manager.objects.filter(pk=other_manager.pk)) & Q(pk=manager.pk)\n+        )\n+        self.assertSequenceEqual(qs, [manager])\n+\n+    def test_negated_exists_with_self_queryset(self):\n+        manager = Manager.objects.create(name=\"Charlie Doe\")\n+        qs = Manager.objects.filter(\n+            ~Exists(Manager.objects.filter(pk=manager.pk)) & Q(pk=manager.pk)\n+        )\n+        self.assertSequenceEqual(qs, [])\n+\n class FieldTransformTests(TestCase):\n \n     @classmethod\n",
  "django__django-15467": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex f5af59b..32db12c 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -141,7 +141,17 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n         )\n         self.assertIsNone(ff.empty_label)\n \n-    def test_many_to_many(self):\n+    def test_radio_fields_foreignkey_formfield_overrides_empty_label(self):\n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {\"main_band\": admin.VERTICAL}\n+            def formfield_for_foreignkey(self, db_field, request=None, **kwargs):\n+                if db_field.name == \"main_band\":\n+                    kwargs[\"empty_label\"] = \"Custom empty label\"\n+                return super().formfield_for_foreignkey(db_field, request, **kwargs)\n+\n+        ma = MyModelAdmin(Event, admin.site)\n+        ff = ma.formfield_for_dbfield(Event._meta.get_field(\"main_band\"), request=None)\n+        self.assertEqual(ff.empty_label, \"Custom empty label\")\n         self.assertFormfield(Band, \"members\", forms.SelectMultiple)\n \n     def test_raw_id_many_to_many(self):\n",
  "django__django-15499": "",
  "django__django-15525": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 3640e99..65fc5da 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -791,6 +791,28 @@ class NaturalKeyFixtureTests(TestCase):\n         )\n \n \n+from django.test import TestCase\n+from django.core import management\n+from .models import NaturalKeyWithFKDependency, Person\n+\n+class NaturalKeyFixtureOnOtherDatabaseTests(TestCase):\n+    databases = {\"other\"}\n+\n+    def test_natural_key_dependencies(self):\n+        \"\"\"\n+        Natural keys with foreign keys in dependencies should work in a multiple\n+        database setup.\n+        \"\"\"\n+        management.call_command(\n+            \"loaddata\",\n+            \"nk_with_foreign_key.json\",\n+            database=\"other\",\n+            verbosity=0,\n+        )\n+        obj = NaturalKeyWithFKDependency.objects.using(\"other\").get()\n+        self.assertEqual(obj.name, \"The Lord of the Rings\")\n+        self.assertEqual(obj.author.name, \"J.R.R. Tolkien\")\n+\n class M2MNaturalKeyFixtureTests(TestCase):\n     \"\"\"Tests for ticket #14426.\"\"\"\n \n",
  "django__django-15561": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex b8137da..495dfcd 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -3961,7 +3961,24 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             editor.alter_field(Book, new_field, old_field, strict=True)\n \n-    def test_add_textfield_unhashable_default(self):\n+    def test_alter_field_choices_noop(self):\n+        # Create the table\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        # Original field with no choices\n+        old_field = Author._meta.get_field(\"name\")\n+        # New field with added choices\n+        new_field = CharField(\n+            choices=((\"Jane\", \"Jane\"), (\"Joe\", \"Joe\")),\n+            max_length=255,\n+        )\n+        new_field.set_attributes_from_name(\"name\")\n+        # Assert that altering the field does not result in any schema change queries\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+        # Assert that reverting the field also does not result in any schema change queries\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, new_field, old_field, strict=True)\n         # Create the table\n         with connection.schema_editor() as editor:\n             editor.create_model(Author)\n",
  "django__django-15569": "diff --git a/tests/custom_lookups/tests.py b/tests/custom_lookups/tests.py\nindex 74c331a..5e88fab 100644\n--- a/tests/custom_lookups/tests.py\n+++ b/tests/custom_lookups/tests.py\n@@ -324,8 +324,17 @@ class LookupTests(TestCase):\n             # getting the lookups again should re-cache\n             self.assertIn(\"exactly\", field.get_lookups())\n \n+    def test_unregister_lookup_clears_cache(self):\n+        field = Article._meta.get_field(\"author\")\n+\n+        # Register a lookup and confirm it's cached\n+        with register_lookup(models.ForeignObject, Exactly):\n+            self.assertIn(\"exactly\", field.get_lookups())\n \n-class BilateralTransformTests(TestCase):\n+        # Unregister the lookup and check that the cache is cleared\n+        models.ForeignObject._unregister_lookup(Exactly)\n+        field.get_lookups.cache_clear()\n+        self.assertNotIn(\"exactly\", field.get_lookups())\n     def test_bilateral_upper(self):\n         with register_lookup(models.CharField, UpperBilateralTransform):\n             author1 = Author.objects.create(name=\"Doe\")\n",
  "django__django-15572": "",
  "django__django-15731": "diff --git a/tests/basic/tests.py b/tests/basic/tests.py\nindex 902f114..391d7b9 100644\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -1,3 +1,4 @@\n+\n import threading\n from datetime import datetime, timedelta\n from unittest import mock\n@@ -736,6 +737,18 @@ class ManagerTest(SimpleTestCase):\n             sorted(self.QUERYSET_PROXY_METHODS),\n         )\n \n+    def test_manager_method_signature_bulk_create(self):\n+        # Verify that the signature of the bulk_create() method on the manager reflects the actual method signature\n+        expected_signature = \"(objs, batch_size=None, ignore_conflicts=False, update_conflicts=False, update_fields=None, unique_fields=None)\"\n+        actual_signature = str(inspect.signature(Article.objects.bulk_create))\n+        self.assertEqual(actual_signature, expected_signature)\n+\n+    def test_manager_method_signature_get(self):\n+        # Additional test to verify signature of another queryset method copied to manager\n+        expected_signature = \"(*args, **kwargs)\"\n+        actual_signature = str(inspect.signature(Article.objects.get))\n+        self.assertEqual(actual_signature, expected_signature)\n+\n \n class SelectOnSaveTests(TestCase):\n     def test_select_on_save(self):\n",
  "django__django-15741": "diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex c6dbc53..29d4c74 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -1,6 +1,9 @@\n+\n from datetime import datetime, time\n \n from django.template.defaultfilters import date\n+from django.utils.translation import gettext_lazy\n+from django.utils.formats import get_format\n from django.test import SimpleTestCase\n from django.utils import timezone, translation\n \n@@ -73,7 +76,16 @@ class DateTests(TimezoneTestCase):\n         self.assertEqual(output, \"00:00\")\n \n \n-class FunctionTests(SimpleTestCase):\n+class LazyFormatTests(SimpleTestCase):\n+    def test_get_format_lazy_format(self):\n+        # Test get_format with a lazy string for DATE_FORMAT\n+        self.assertEqual(get_format(gettext_lazy(\"DATE_FORMAT\")), \"N j, Y\")\n+\n+    @setup({\"datelazy\": '{{ t|date:_(\"H:i\") }}'})\n+    def test_date_lazy(self):\n+        # Test lazy string with the date filter and template rendering\n+        output = self.engine.render_to_string(\"datelazy\", {\"t\": time(0, 0)})\n+        self.assertEqual(output, \"00:00\")\n     def test_date(self):\n         self.assertEqual(date(datetime(2005, 12, 29), \"d F Y\"), \"29 December 2005\")\n \n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..5a2c215 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -398,6 +398,34 @@ class ProxyModelTests(TestCase):\n     def test_eq(self):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n+    def test_select_related_only_proxy_model(self):\n+        # Set up the models\n+        class CustomModel(models.Model):\n+            name = models.CharField(max_length=16)\n+\n+        class ProxyCustomModel(CustomModel):\n+            class Meta:\n+                proxy = True\n+\n+        class AnotherModel(models.Model):\n+            custom = models.ForeignKey(\n+                ProxyCustomModel,\n+                on_delete=models.SET_NULL,\n+                null=True,\n+                blank=True\n+            )\n+\n+        # Create test data\n+        custom_instance = ProxyCustomModel.objects.create(name=\"Test Name\")\n+        AnotherModel.objects.create(custom=custom_instance)\n+\n+        # Test QuerySet with select_related() and only() on proxy model\n+        try:\n+            objs = list(AnotherModel.objects.select_related(\"custom\").only(\"custom__name\").all())\n+            self.assertEqual(len(objs), 1)\n+        except ValueError as e:\n+            self.fail(f'select_related().only() on proxy model raised an unexpected exception: {e}')\n+\n \n @override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n class ProxyModelAdminTests(TestCase):\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..45fd0cd 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -151,12 +151,26 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ),\n         )\n \n+    def test_order_of_parameters(self):\n+        # This test checks whether additional parameters are correctly placed before the database name.\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n+        )\n+\n     def test_parameters(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n+    def test_order_of_parameters(self):\n+        # This test checks whether additional parameters are correctly placed before the database name.\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n+        )\n+\n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n",
  "django__django-15863": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 08f08e1..5e9d192 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -31,6 +31,8 @@ class FloatformatTests(SimpleTestCase):\n         self.assertEqual(output, \"1.4 1.4\")\n \n \n+from decimal import Decimal\n+\n class FunctionTests(SimpleTestCase):\n     def test_inputs(self):\n         self.assertEqual(floatformat(7.7), \"7.7\")\n",
  "django__django-15930": "diff --git a/tests/expressions_case/tests.py b/tests/expressions_case/tests.py\nindex 696f4d0..0224ee5 100644\n--- a/tests/expressions_case/tests.py\n+++ b/tests/expressions_case/tests.py\n@@ -415,6 +415,17 @@ class CaseExpressionTests(TestCase):\n         self.assertEqual(len(objects), CaseTestModel.objects.count())\n         self.assertTrue(all(obj.selected == \"not selected\" for obj in objects))\n \n+    def test_annotate_with_negated_empty_in_clause(self):\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+            )\n+        )\n+        # All objects should have \"selected\" annotated since ~Q(pk__in=[]) should always be True.\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n+\n     def test_combined_expression(self):\n         self.assertQuerysetEqual(\n             CaseTestModel.objects.annotate(\n",
  "django__django-15987": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 5ac9ab9..c68dec2 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -1,9 +1,11 @@\n+\n # Unittests for fixtures.\n import json\n import os\n import re\n from io import StringIO\n from pathlib import Path\n+from pathlib import Path\n \n from django.core import management, serializers\n from django.core.exceptions import ImproperlyConfigured\n@@ -556,7 +558,22 @@ class TestFixtures(TestCase):\n             management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n \n     @override_settings(FIXTURE_DIRS=[os.path.join(_cur_dir, \"fixtures\")])\n-    def test_fixture_dirs_with_default_fixture_path(self):\n+    @override_settings(\n+        FIXTURE_DIRS=[Path(_cur_dir) / \"fixtures\"]\n+    )\n+    def test_fixture_dirs_with_path_instance(self):\n+        \"\"\"\n+        Test that settings.FIXTURE_DIRS cannot contain a default fixtures directory\n+        for application (app/fixtures) when using Path instances in order to avoid\n+        repeated fixture loading.\n+        \"\"\"\n+        msg = (\n+            \"'%s' is a default fixture directory for the '%s' app \"\n+            \"and cannot be listed in settings.FIXTURE_DIRS.\"\n+            % (os.path.join(_cur_dir, \"fixtures\"), \"fixtures_regress\")\n+        )\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n         \"\"\"\n         settings.FIXTURE_DIRS cannot contain a default fixtures directory\n         for application (app/fixtures) in order to avoid repeated fixture loading.\n",
  "django__django-16032": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex bcf8df9..29638e8 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -989,6 +989,30 @@ class NonAggregateAnnotationTestCase(TestCase):\n             publisher_books_qs, [{\"name\": \"Sams\"}, {\"name\": \"Morgan Kaufmann\"}]\n         )\n \n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        self.assertCountEqual(\n+            publisher_books_qs,\n+            [\n+                {'name': 'Apress'},\n+                {'name': 'Sams'},\n+                {'name': 'Prentice Hall'},\n+                {'name': 'Morgan Kaufmann'}\n+            ]\n+        )\n+\n     def test_annotation_exists_aggregate_values_chaining(self):\n         qs = (\n             Book.objects.values(\"publisher\")\n",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..56d9dcb 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2416,7 +2416,13 @@ class CombinedExpressionTests(SimpleTestCase):\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        connectors = [\n+            Combinable.ADD,\n+            Combinable.SUB,\n+            Combinable.MUL,\n+            Combinable.DIV,\n+            Combinable.MOD,  # Adding MOD operator to test\n+        ]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..2d5fb58 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib import admin\n@@ -21,7 +22,9 @@ from django.db.models import F, Field, IntegerField\n from django.db.models.functions import Upper\n from django.db.models.lookups import Contains, Exact\n from django.template import Context, Template, TemplateSyntaxError\n-from django.test import TestCase, override_settings\n+from unittest import mock\n+from django.db import DatabaseError, connection\n+from django.test import TestCase, override_settings, skipUnlessDBFeature\n from django.test.client import RequestFactory\n from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup\n from django.urls import reverse\n@@ -400,7 +403,52 @@ class ChangeListTests(TestCase):\n         with self.assertRaises(IncorrectLookupParameters):\n             m.get_changelist_instance(request)\n \n-    def test_custom_paginator(self):\n+    @skipUnlessDBFeature(\"supports_transactions\")\n+    def test_list_editable_atomicity(self):\n+        a = Swallow.objects.create(origin=\"Swallow A\", load=4, speed=1)\n+        b = Swallow.objects.create(origin=\"Swallow B\", load=2, speed=2)\n+\n+        self.client.force_login(self.superuser)\n+        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n+        data = {\n+            \"form-TOTAL_FORMS\": \"2\",\n+            \"form-INITIAL_FORMS\": \"2\",\n+            \"form-MIN_NUM_FORMS\": \"0\",\n+            \"form-MAX_NUM_FORMS\": \"1000\",\n+            \"form-0-uuid\": str(a.pk),\n+            \"form-1-uuid\": str(b.pk),\n+            \"form-0-load\": \"9.0\",\n+            \"form-0-speed\": \"3.0\",\n+            \"form-1-load\": \"5.0\",\n+            \"form-1-speed\": \"1.0\",\n+            \"_save\": \"Save\",\n+        }\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\", side_effect=DatabaseError\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Original values are preserved.\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\",\n+            side_effect=[None, DatabaseError],\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Original values are preserved.\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n         new_parent = Parent.objects.create(name=\"parent\")\n         for i in range(1, 201):\n             Child.objects.create(name=\"name %s\" % i, parent=new_parent)\n",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..cce627d 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2388,6 +2388,13 @@ class MakeMigrationsTests(MigrationTestBase):\n \n     def test_makemigrations_check(self):\n         \"\"\"\n+        Ensure that makemigrations --check does not create migration files.\n+        \"\"\"\n+        with self.temporary_migration_module() as tmpdir:\n+            call_command('makemigrations', '--check', 'migrations', verbosity=0)\n+            # Verify that no migration files were created.\n+            self.assertFalse(os.listdir(tmpdir))\n+        \"\"\"\n         makemigrations --check should exit with a non-zero status when\n         there are changes to an app requiring migrations.\n         \"\"\"\n",
  "django__django-16136": "diff --git a/tests/async/tests.py b/tests/async/tests.py\nindex 72e103e..6fd6206 100644\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -1,10 +1,51 @@\n+\n+class Demo(View):\n+    \"\"\"This basic view supports only POST requests\"\"\"\n+    async def post(self, request):\n+        return HttpResponse(\"ok\")\n+\n+class HttpMethodNotAllowedTests(SimpleTestCase):\n+\n+    def test_http_method_not_allowed_responds_correctly(self):\n+        request_factory = RequestFactory()\n+        tests = [\n+            (SyncView, False),\n+            (AsyncView, True),\n+        ]\n+        for view_cls, is_coroutine in tests:\n+            with self.subTest(view_cls=view_cls, is_coroutine=is_coroutine):\n+                instance = view_cls()\n+                response = instance.http_method_not_allowed(request_factory.post(\"/\"))\n+                self.assertIs(\n+                    asyncio.iscoroutine(response),\n+                    is_coroutine,\n+                )\n+                if is_coroutine:\n+                    response = asyncio.run(response)\n+                self.assertIsInstance(response, HttpResponseNotAllowed)\n+\n+    def test_async_view_with_get_request(self):\n+        \"\"\"\n+        Test that an async view that only implements POST returns a 405\n+        Method Not Allowed response for a GET request.\n+        \"\"\"\n+        request_factory = RequestFactory()\n+        instance = Demo()\n+        response = instance.http_method_not_allowed(request_factory.get(\"/demo\"))\n+        self.assertIsInstance(response, HttpResponseNotAllowed)\n+\n import asyncio\n import os\n from unittest import mock\n \n from asgiref.sync import async_to_sync\n \n+import asyncio\n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n+from django.http import HttpResponseNotAllowed\n+from django.test import RequestFactory\n+from django.urls import path\n+from django.views import View\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n from django.http import HttpResponse\n from django.test import SimpleTestCase\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..3c683af 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -24,6 +25,7 @@ from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n+from django.urls import reverse\n from django.utils.translation import gettext as _\n \n from .models.custom_user import (\n@@ -892,6 +894,26 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field_with_uuid(self):\n+        user = User.objects.create_user(username=\"uuid_test\", password=\"secret\", uuid=\"22222222-3333-4444-5555-666677778888\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.uuid,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n     def test_custom_form(self):\n         class CustomUserChangeForm(UserChangeForm):\n             class Meta(UserChangeForm.Meta):\n",
  "django__django-16145": "",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..4a65b5f 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -508,6 +508,46 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n \n+from django.contrib.sitemaps import Sitemap\n+from django.urls import path\n+from django.test import TestCase, override_settings\n+from django.test import Client\n+\n+class CallableLastmodNoItemsSitemap(Sitemap):\n+    location = \"/location/\"\n+\n+    def items(self):\n+        return []\n+\n+    def lastmod(self, obj):\n+        return obj.lastmod\n+\n+callable_lastmod_no_items_sitemap = {\n+    \"callable-lastmod\": CallableLastmodNoItemsSitemap,\n+}\n+\n+urlpatterns = [\n+    path(\n+        \"callable-lastmod-no-items/index.xml\",\n+        views.index,\n+        {\"sitemaps\": callable_lastmod_no_items_sitemap},\n+    ),\n+]\n+\n+class SitemapTestsBase(TestCase):\n+    client = Client()\n+\n+class TestCallableLastmodNoItems(SitemapTestsBase):\n+    def test_callable_sitemod_no_items(self):\n+        index_response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", index_response)\n+        expected_content_index = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\n+        </sitemapindex>\n+        \"\"\"\n+        self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n+\n # RemovedInDjango50Warning\n class DeprecatedTests(SitemapTestsBase):\n     @override_settings(\n",
  "django__django-16315": "diff --git a/tests/bulk_create/models.py b/tests/bulk_create/models.py\nindex c5f5c07..fbff43b 100644\n--- a/tests/bulk_create/models.py\n+++ b/tests/bulk_create/models.py\n@@ -58,6 +58,10 @@ class Restaurant(Place):\n class Pizzeria(Restaurant):\n     pass\n \n+class FieldsWithDbColumns(models.Model):\n+    rank = models.IntegerField(unique=True, db_column=\"rAnK\")\n+    name = models.CharField(max_length=15, null=True, db_column=\"oTheRNaMe\")\n+\n \n class State(models.Model):\n     two_letter_code = models.CharField(max_length=2, primary_key=True)\n@@ -78,6 +82,10 @@ class UpsertConflict(models.Model):\n class NoFields(models.Model):\n     pass\n \n+class FieldsWithDbColumns(models.Model):\n+    rank = models.IntegerField(unique=True, db_column=\"rAnK\")\n+    name = models.CharField(max_length=15, null=True, db_column=\"oTheRNaMe\")\n+\n \n class SmallAutoFieldModel(models.Model):\n     id = models.SmallAutoField(primary_key=True)\n",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..be2d7f0 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n import urllib.parse\n@@ -34,6 +35,7 @@ from .models.custom_user import (\n     ExtensionUser,\n )\n from .models.with_custom_email_field import CustomEmailField\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n from .models.with_integer_username import IntegerUsernameUser\n from .settings import AUTH_TEMPLATES\n \n@@ -252,7 +254,58 @@ class UserCreationFormTest(TestDataMixin, TestCase):\n         form = CustomUserCreationForm(data)\n         self.assertTrue(form.is_valid())\n \n-    def test_password_whitespace_not_stripped(self):\n+    def test_custom_form_saves_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization = Organization.objects.create(name=\"organization 1\")\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization])\n+\n+    def test_custom_form_no_many_to_many_data(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [])\n+\n+    def test_custom_form_invalid_many_to_many_data(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization = Organization.objects.create(name=\"organization 1\")\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [\"nonexistent_id\"],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), False)\n         data = {\n             \"username\": \"testuser\",\n             \"password1\": \"   testpassword   \",\n",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..514faaf 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.test import TestCase\n@@ -160,6 +161,13 @@ class TimesinceTests(TestCase):\n         self.assertEqual(timesince(t + self.oneday, now), \"0\\xa0minutes\")\n         self.assertEqual(timeuntil(t - self.oneday, now), \"0\\xa0minutes\")\n \n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_long_interval_with_tz(self):\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=31)\n+        self.assertEqual(timesince(d), \"1\\xa0month\")\n+\n     def test_naive_datetime_with_tzinfo_attribute(self):\n         class naive(datetime.tzinfo):\n             def utcoffset(self, dt):\n",
  "django__django-16454": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 8d0729b..7eed717 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -469,7 +469,47 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertEqual(out.strip(), \"Set foo\")\n \n \n-class UtilsTests(SimpleTestCase):\n+from django.core.management.base import BaseCommand, CommandError\n+from django.test import SimpleTestCase\n+from django.core.management import call_command\n+import io\n+\n+class SubparserCommandTests(SimpleTestCase):\n+    def test_subparser_missing_argument(self):\n+        class Command(BaseCommand):\n+            def add_arguments(self, parser):\n+                subparsers = parser.add_subparsers(required=True)\n+                create = subparsers.add_parser(\"create\")\n+                create.add_argument(\"name\")\n+\n+            def handle(self, *args, **options):\n+                pass\n+\n+        out = io.StringIO()\n+        err = io.StringIO()\n+\n+        with self.assertRaises(CommandError) as cm:\n+            call_command(\"cheeses\", \"create\", stdout=out, stderr=err)\n+        \n+        self.assertIn(\"manage.py cheeses create: error: the following arguments are required: name\", str(cm.exception))\n+\n+    def test_subparser_invalid_argument_type(self):\n+        class Command(BaseCommand):\n+            def add_arguments(self, parser):\n+                subparsers = parser.add_subparsers(parser_class=argparse.ArgumentParser)\n+                parser_foo = subparsers.add_parser(\"foo\")\n+                parser_foo.add_argument(\"bar\", type=int)\n+\n+            def handle(self, *args, **options):\n+                pass\n+\n+        out = io.StringIO()\n+        err = io.StringIO()\n+\n+        with self.assertRaises(CommandError) as cm:\n+            call_command(\"subparser\", \"foo\", \"twelve\", stdout=out, stderr=err)\n+\n+        self.assertIn(\"manage.py subparser foo: error: argument bar: invalid int value: 'twelve'\", str(cm.exception))\n     def test_no_existent_external_program(self):\n         msg = \"Error executing a_42_command_that_doesnt_exist_42\"\n         with self.assertRaisesMessage(CommandError, msg):\n",
  "django__django-16485": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 1623d39..294b4f3 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -112,7 +112,16 @@ class FunctionTests(SimpleTestCase):\n             floatformat(0.000000000000000000015, 20), \"0.00000000000000000002\"\n         )\n \n-    def test_negative_zero_values(self):\n+    def test_issue_with_zero_string_and_decimal(self):\n+        # Test cases that address the issue with '0.00' and Decimal('0.00')\n+        self.assertEqual(floatformat(\"0.00\", 0), \"0\")\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), 0), \"0\")\n+        self.assertEqual(floatformat(\"0.00\", -1), \"0\")\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), -1), \"0\")\n+        self.assertEqual(floatformat(\"0.00\", 2), \"0.00\")\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), 2), \"0.00\")\n+        self.assertEqual(floatformat(\"0.00\", -2), \"0\")\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), -2), \"0\")\n         tests = [\n             (-0.01, -1, \"0.0\"),\n             (-0.001, 2, \"0.00\"),\n",
  "django__django-16493": "",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..ae688e3 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n@@ -9,7 +10,9 @@ from django.test import RequestFactory, TestCase\n from django.urls import reverse\n \n from .admin import ArticleAdmin, site\n+from django.contrib.auth import get_permission_codename\n from .models import Article, Question\n+from .tests import get_perm\n from .tests import AdminViewBasicTestCase\n \n \n@@ -54,7 +57,45 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n                     template_context[\"show_save_and_add_another\"], expected_flag\n                 )\n \n-    def test_override_change_form_template_tags(self):\n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        \"\"\"\n+        Test that 'show_save_as_new' is only shown when the user has \n+        both 'add' and 'change' permissions.\n+        \"\"\"\n+        # User with only change permission\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False, \n+                      \"Users without 'add' permission should not see 'Save as new'.\")\n+\n+        # User with both add and change permissions\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True,\n+                      \"Users with 'add' permission should see 'Save as new'.\")\n         \"\"\"\n         admin_modify template tags follow the standard search pattern\n         admin/app_label/model/template.html.\n",
  "django__django-16560": "diff --git a/tests/constraints/tests.py b/tests/constraints/tests.py\nindex 13854a9..273e037 100644\n--- a/tests/constraints/tests.py\n+++ b/tests/constraints/tests.py\n@@ -108,7 +108,32 @@ class BaseConstraintTests(SimpleTestCase):\n         self.assertEqual(c.get_violation_error_message(), \"custom name message\")\n \n \n-class CheckConstraintTests(TestCase):\n+class BaseConstraintTests(TestCase):\n+    def test_custom_violation_error_code(self):\n+        constraint = BaseConstraint(\n+            name=\"base_name\",\n+            violation_error_message=\"custom %(name)s message\",\n+            violation_error_code=\"custom_code\"\n+        )\n+        self.assertEqual(constraint.violation_error_code, \"custom_code\")\n+        self.assertEqual(\n+            constraint.get_violation_error_message(),\n+            \"custom base_name message\",\n+        )\n+\n+    def test_validate_raises_custom_code(self):\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price\",\n+            violation_error_message=\"discount is fake\",\n+            violation_error_code=\"fake_discount\",\n+        )\n+        invalid_product = Product(price=10, discounted_price=42)\n+        msg = \"discount is fake\"\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n+            constraint.validate(Product, invalid_product)\n+        self.assertEqual(cm.exception.code, \"fake_discount\")\n     def test_eq(self):\n         check1 = models.Q(price__gt=models.F(\"discounted_price\"))\n         check2 = models.Q(price__lt=models.F(\"discounted_price\"))\n",
  "django__django-16569": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 55da562..960da90 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1474,6 +1474,18 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertEqual(len(formset), 2)\n         self.assertNotIn(\"DELETE\", formset.forms[0].fields)\n         self.assertNotIn(\"DELETE\", formset.forms[1].fields)\n+        # Test the resolution of the issue where add_fields() fails if index is None\n+        class MyForm(forms.Form):\n+            my_field = forms.CharField()\n+\n+        MyFormSet = forms.formset_factory(\n+            form=MyForm,\n+            can_delete=True,\n+            can_delete_extra=False,\n+        )\n+\n+        my_formset = MyFormSet(initial=None)\n+        self.assertNotIn(\"DELETE\", my_formset.empty_form.fields)\n \n         formset = ChoiceFormFormset(initial=[{\"choice\": \"Zero\", \"votes\": \"1\"}])\n         self.assertEqual(len(formset), 3)\n",
  "django__django-16595": "",
  "django__django-16612": "",
  "django__django-16642": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 499356e..a109945 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -256,6 +256,16 @@ class FileResponseTests(SimpleTestCase):\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n         )\n+        additional_test_tuples = (\n+            (\".tar.br\", \"application/x-brotli\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n+        )\n+        for extension, mimetype in additional_test_tuples:\n+            with self.subTest(ext=extension):\n+                with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n+                    response = FileResponse(tmp)\n+                self.assertEqual(response.headers[\"Content-Type\"], mimetype)\n+                self.assertFalse(response.has_header(\"Content-Encoding\"))\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n                 with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n",
  "django__django-16661": "diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py\nindex 8cb88da..d4b1363 100644\n--- a/tests/modeladmin/tests.py\n+++ b/tests/modeladmin/tests.py\n@@ -154,6 +154,40 @@ class ModelAdminTests(TestCase):\n             ma.lookup_allowed(\"employee__department__code\", \"test_value\"), True\n         )\n \n+        # Additional tests for ModelAdmin.lookup_allowed handling foreign keys as primary keys\n+        @isolate_apps('modeladmin')\n+        def test_lookup_allowed_foreign_primary(self):\n+            class Country(models.Model):\n+                name = models.CharField(max_length=256)\n+            class Place(models.Model):\n+                country = models.ForeignKey(Country, models.CASCADE)\n+            class Restaurant(models.Model):\n+                place = models.OneToOneField(Place, models.CASCADE, primary_key=True)\n+            class Waiter(models.Model):\n+                restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n+            class WaiterAdmin(ModelAdmin):\n+                list_filter = [\n+                    \"restaurant__place__country\",\n+                    \"restaurant__place__country__name\",\n+                ]\n+\n+            ma = WaiterAdmin(Waiter, self.site)\n+            # Ensure that the original issue is resolved\n+            self.assertIs(ma.lookup_allowed(\"restaurant__place__country\", \"1\"), True)\n+            self.assertIs(\n+                ma.lookup_allowed(\"restaurant__place__country__id__exact\", \"1\"), True\n+            )\n+            self.assertIs(\n+                ma.lookup_allowed(\"restaurant__place__country__name\", \"test_value\"), True\n+            )\n+            # Additional checks for robustness\n+            self.assertIs(\n+                ma.lookup_allowed(\"restaurant__place__country__nonexistentfield\", \"test_value\"), False\n+            )\n+            self.assertIs(\n+                ma.lookup_allowed(\"restaurant__place__nonexistentrelation__name\", \"test_value\"), False\n+            )\n+\n     def test_field_arguments(self):\n         # If fields is specified, fieldsets_add and fieldsets_change should\n         # just stick the fields into a formsets structure and return it.\n",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..99e0be6 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -922,7 +922,29 @@ class WriterTests(SimpleTestCase):\n             output,\n         )\n \n-    def test_migration_file_header_comments(self):\n+    def test_import_ordering_conforms_to_django_style(self):\n+        \"\"\"\n+        Test that the import ordering in migration files conforms to Django's coding style guide.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield2\",\n+                        models.FloatField(default=time.time),\n+                    ),\n+                ]\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        self.assertIn(\n+            \"import datetime\\nimport time\\nfrom django.db import migrations, models\\n\",\n+            output,\n+        )\n         \"\"\"\n         Test comments at top of file.\n         \"\"\"\n",
  "django__django-16801": "diff --git a/tests/model_fields/test_imagefield.py b/tests/model_fields/test_imagefield.py\nindex 9bf7f7d..bd749bc 100644\n--- a/tests/model_fields/test_imagefield.py\n+++ b/tests/model_fields/test_imagefield.py\n@@ -319,6 +319,30 @@ class ImageFieldTwoDimensionsTests(ImageFieldTestMixin, TestCase):\n         # Dimensions were recalculated, and hence file should have opened.\n         self.assertIs(p.mugshot.was_opened, True)\n \n+    def test_post_init_not_connected(self):\n+        # Test that the post_init signal is not connected for a model with no dimensions\n+        person_model_id = id(self.PersonModel)\n+        self.assertNotIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id), *_ in signals.post_init.receivers],\n+        )\n+\n+    def test_post_init_connected_with_one_dimension(self):\n+        # Test that the post_init signal is connected when one dimension field is used\n+        person_with_height_model_id = id(PersonWithHeight)\n+        self.assertIn(\n+            person_with_height_model_id,\n+            [sender_id for (_, sender_id), *_ in signals.post_init.receivers],\n+        )\n+\n+    def test_post_init_connected_with_both_dimensions(self):\n+        # Test that the post_init signal is connected when both dimensions fields are used\n+        person_with_dimensions_model_id = id(PersonWithDimensions)\n+        self.assertIn(\n+            person_with_dimensions_model_id,\n+            [sender_id for (_, sender_id), *_ in signals.post_init.receivers],\n+        )\n+\n \n @skipIf(Image is None, \"Pillow is required to test ImageField\")\n class ImageFieldNoDimensionsTests(ImageFieldTwoDimensionsTests):\n",
  "django__django-16819": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex ac93153..434598d 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -1157,4 +1157,41 @@ class OptimizerTests(SimpleTestCase):\n                     \"Pony\", new_name=\"new_name\", old_fields=(\"weight\", \"pink\")\n                 ),\n             ]\n-        )\n+        )\n+\n+    def test_consecutive_add_remove_index(self):\n+        # Test that consecutive add and remove index operations are optimized away.\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AddIndex(\n+                    \"Horse\",\n+                    models.Index(\n+                        fields=[\"height\", \"brown\"], name=\"idx_horse_height_brown\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Horse\", \"idx_horse_height_brown\"),\n+            ],\n+            [],\n+        )\n+\n+    def test_multiple_add_remove_indices(self):\n+        # Test that multiple consecutive add and remove index operations are optimized away.\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AddIndex(\n+                    \"Dragon\",\n+                    models.Index(\n+                        fields=[\"fire\", \"wingspan\"], name=\"idx_dragon_fire_wingspan\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Dragon\", \"idx_dragon_fire_wingspan\"),\n+                migrations.AddIndex(\n+                    \"Phoenix\",\n+                    models.Index(\n+                        fields=[\"rebirth\", \"flame\"], name=\"idx_phoenix_rebirth_flame\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Phoenix\", \"idx_phoenix_rebirth_flame\"),\n+            ],\n+            [],\n+        )\n",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex b568a3a..b61aab7 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -771,10 +771,11 @@ class BaseModelAdminChecks:\n             except FieldDoesNotExist:\n                 return [\n                     checks.Error(\n-                        \"The value of '%s' is not a callable, an attribute of \"\n+                        \"The value of '%s' refers to '%s', which is not a callable, an attribute of \"\n                         \"'%s', or an attribute of '%s'.\"\n                         % (\n                             label,\n+                            field_name,\n                             obj.__class__.__name__,\n                             obj.model._meta.label,\n                         ),\n",
  "django__django-16901": "diff --git a/tests/xor_lookups/tests.py b/tests/xor_lookups/tests.py\nindex 389d908..10843f3 100644\n--- a/tests/xor_lookups/tests.py\n+++ b/tests/xor_lookups/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import Q\n from django.test import TestCase\n \n@@ -19,6 +20,27 @@ class XorLookupsTests(TestCase):\n             self.numbers[:3] + self.numbers[8:],\n         )\n \n+    def test_filter_multiple_conditions(self):\n+        # Test XOR with an odd number of conditions\n+        queryset = Number.objects.filter(\n+            Q(num__gte=1) ^ Q(num__gte=3) ^ Q(num__gte=5)\n+        )\n+        expected_numbers = [\n+            self.numbers[1], self.numbers[2],  # 1, 2 are >= 1 and < 3\n+            self.numbers[5], self.numbers[6], self.numbers[7], self.numbers[8], self.numbers[9]  # 5, 6, 7, 8, 9 are >= 5 and < 7\n+        ]\n+        self.assertCountEqual(queryset, expected_numbers)\n+\n+        # Test XOR with an even number of conditions\n+        queryset = Number.objects.filter(\n+            Q(num__gte=1) ^ Q(num__gte=3) ^ Q(num__gte=5) ^ Q(num__gte=7)\n+        )\n+        expected_numbers = [\n+            self.numbers[2], self.numbers[3], self.numbers[4],  # 2, 3, 4 are >= 3 and < 5\n+            self.numbers[7], self.numbers[8], self.numbers[9]  # 7, 8, 9 are >= 7\n+        ]\n+        self.assertCountEqual(queryset, expected_numbers)\n+\n     def test_filter_negated(self):\n         self.assertCountEqual(\n             Number.objects.filter(Q(num__lte=7) ^ ~Q(num__lt=3)),\n@@ -64,4 +86,4 @@ class XorLookupsTests(TestCase):\n         self.assertCountEqual(\n             Number.objects.filter(Q(pk__in=[]) ^ Q(num__gte=5)),\n             self.numbers[5:],\n-        )\n+        )\n",
  "django__django-17029": "diff --git a/tests/apps/tests.py b/tests/apps/tests.py\nindex f7c2c67..426dcfa 100644\n--- a/tests/apps/tests.py\n+++ b/tests/apps/tests.py\n@@ -24,6 +24,22 @@ SOME_INSTALLED_APPS = [\n     \"django.contrib.staticfiles\",\n ]\n \n+from django.test import override_settings\n+from django.apps import apps\n+from django.contrib.admin.models import LogEntry\n+from django.apps.registry import Apps\n+from django.core.exceptions import ImproperlyConfigured\n+from django.db import models\n+from django.apps import AppConfig\n+from django.apps import apps as new_apps\n+from django.db.models.base import AppRegistryNotReady\n+from apps.models import TotallyNormal, SoAlternative\n+from django.test import SimpleTestCase, isolate_apps\n+from django.apps import AppConfig as OneConfig\n+from apps.no_config_app.apps import NoConfigApp as NoConfigApp\n+from apps.two_configs_app.apps import TwoConfig as TwoConfig\n+from apps.two_configs_one_default_app.apps import TwoConfig as TwoConfig\n+\n SOME_INSTALLED_APPS_NAMES = [\n     \"django.contrib.admin\",\n     \"django.contrib.auth\",\n",
  "django__django-17084": "",
  "django__django-17087": "",
  "django__django-7530": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex a74680b..776fd2e 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -641,7 +641,21 @@ class MakeMigrationsTests(MigrationTestBase):\n                 allow_migrate.assert_called_with('other', 'migrations', model_name='UnicodeModel')\n                 self.assertEqual(ensure_schema.call_count, 4)\n \n-    def test_failing_migration(self):\n+    def test_makemigrations_router_allow_migrate_calls(self):\n+        \"\"\"\n+        Test that makemigrations calls allow_migrate() with the correct (app_label, model) pairs.\n+        \"\"\"\n+        with self.settings(INSTALLED_APPS=['migrations', 'migrations2']):\n+            apps.register_model('migrations', UnicodeModel)\n+            apps.register_model('migrations2', UnicodeModel)\n+\n+            with mock.patch('migrations.routers.TestRouter.allow_migrate', return_value=True) as allow_migrate:\n+                call_command('makemigrations', 'migrations', verbosity=0)\n+                # Check that allow_migrate is called for the appropriate models of each app\n+                allow_migrate.assert_any_call('default', 'migrations', model_name='UnicodeModel')\n+                allow_migrate.assert_any_call('default', 'migrations2', model_name='UnicodeModel')\n+\n+            # Further assertions can be added to ensure no incorrect calls are made\n         # If a migration fails to serialize, it shouldn't generate an empty file. #21280\n         apps.register_model('migrations', UnserializableModel)\n \n",
  "django__django-9296": "diff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\nindex b9b5fbc..6393dc8 100644\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -297,6 +297,41 @@ class PaginationTests(SimpleTestCase):\n         with self.assertRaises(EmptyPage):\n             paginator.get_page(1)\n \n+    def test_paginator_iteration(self):\n+        paginator = Paginator([1, 2, 3], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2], [3]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+\n+    def test_paginator_iteration_empty(self):\n+        paginator = Paginator([], 2)\n+        page_iterator = iter(paginator)\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_paginator_iteration_single_page(self):\n+        paginator = Paginator([1], 2)\n+        page_iterator = iter(paginator)\n+        self.assertEqual([1], list(next(page_iterator)))\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_paginator_iteration_multiple_pages(self):\n+        paginator = Paginator(range(1, 11), 3)\n+        page_iterator = iter(paginator)\n+        expected_pages = [\n+            [1, 2, 3],\n+            [4, 5, 6],\n+            [7, 8, 9],\n+            [10]\n+        ]\n+        for expected in expected_pages:\n+            with self.subTest(expected=expected):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n \n class ModelPaginationTests(TestCase):\n     \"\"\"\n",
  "matplotlib__matplotlib-13989": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5483eef..b58d017 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6359,8 +6359,35 @@ def test_hist_auto_bins():\n \n def test_hist_nan_data():\n     fig, (ax1, ax2) = plt.subplots(2)\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import pytest\n \n-    data = [1, 2, 3]\n+def test_hist_range_and_density():\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_and_density_edge_cases():\n+    # Test with a single value in data\n+    _, bins, _ = plt.hist([0.5], bins=5, range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+    \n+    # Test with empty data\n+    _, bins, _ = plt.hist([], bins=5, range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+    \n+    # Test with negative range\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(-1, 1), density=True)\n+    assert bins[0] == -1\n+    assert bins[-1] == 1\n+\n+    # Testing with density False should also respect range\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=False)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n     nan_data = data + [np.nan]\n \n     bins, edges, _ = ax1.hist(data)\n@@ -6368,4 +6395,4 @@ def test_hist_nan_data():\n         nanbins, nanedges, _ = ax2.hist(nan_data)\n \n     assert np.allclose(bins, nanbins)\n-    assert np.allclose(edges, nanedges)\n+    assert np.allclose(edges, nanedges)\n",
  "matplotlib__matplotlib-14623": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c9ad946..ada8514 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -930,6 +930,21 @@ def test_inverted_limits():\n     assert ax.get_ylim() == (-3, 5)\n     plt.close()\n \n+def test_invert_log_scale_axis():\n+    # Test inverting the y-axis on a log scale\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(10, 1)\n+    assert ax.get_ylim() == (10, 1), \"Failed to invert log scale y-axis using set_ylim\"\n+\n+    # Plotting to ensure the axis remains inverted after plotting\n+    x = np.linspace(1, 10, 100)\n+    y = np.exp(x)\n+    ax.plot(x, y)\n+    \n+    assert ax.get_ylim() == (10, 1), \"Log scale y-axis did not remain inverted after plotting\"\n+    plt.close()\n+\n     fig, ax = plt.subplots()\n     ax.invert_yaxis()\n     ax.plot([-5, -3, 2, 4], [1, 2, -3, 5])\n@@ -938,6 +953,21 @@ def test_inverted_limits():\n     assert ax.get_ylim() == (5, -3)\n     plt.close()\n \n+def test_invert_log_scale_axis():\n+    # Test inverting the y-axis on a log scale\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(10, 1)\n+    assert ax.get_ylim() == (10, 1), \"Failed to invert log scale y-axis using set_ylim\"\n+\n+    # Plotting to ensure the axis remains inverted after plotting\n+    x = np.linspace(1, 10, 100)\n+    y = np.exp(x)\n+    ax.plot(x, y)\n+    \n+    assert ax.get_ylim() == (10, 1), \"Log scale y-axis did not remain inverted after plotting\"\n+    plt.close()\n+\n \n @image_comparison(baseline_images=['nonfinite_limits'])\n def test_nonfinite_limits():\n",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..cecea94 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6960,6 +6960,24 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[3].hist(np.arange(10), color=color.reshape((1, -1)))\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n+from matplotlib.testing.decorators import check_figures_equal\n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear(fig_test, fig_ref):\n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    axs = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs.flat:\n+        ax.plot(x, y)\n+\n+    axs = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n+\n \n def test_shared_axes_retick():\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "diff --git a/lib/matplotlib/tests/test_category.py b/lib/matplotlib/tests/test_category.py\nindex 40c4dcf..5948834 100644\n--- a/lib/matplotlib/tests/test_category.py\n+++ b/lib/matplotlib/tests/test_category.py\n@@ -311,4 +311,17 @@ def test_hist():\n     fig, ax = plt.subplots()\n     n, bins, patches = ax.hist(['a', 'b', 'a', 'c', 'ff'])\n     assert n.shape == (10,)\n-    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n+\n+\n+def test_no_deprecation_on_empty_data():\n+    \"\"\"Test that no deprecation warning is emitted on empty data.\"\"\"\n+    import matplotlib.pyplot as plt\n+    f, ax = plt.subplots()\n+    ax.xaxis.update_units([\"a\", \"b\"])\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        ax.plot([], [])\n+        assert len(w) == 0, \"Expected no warnings, but got: {}\".format(\n+            [str(warning.message) for warning in w]\n+        )\n+    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n",
  "matplotlib__matplotlib-22865": "",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..b524b34 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -490,6 +490,26 @@ def test_validate_fontstretch(stretch, parsed_stretch):\n         assert validate_fontstretch(stretch) == parsed_stretch\n \n \n+import matplotlib.pyplot as plt\n+import matplotlib as mpl\n+import pytest\n+\n+def test_get_backend_preserves_figures_created_in_rc_context():\n+    # Create a figure within an rc_context\n+    with plt.rc_context():\n+        fig1 = plt.figure()\n+        # Capture the state of Gcf before calling get_backend\n+        before_backend_call = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+        \n+        # Call get_backend, which previously caused the issue\n+        plt.get_backend()\n+        \n+        # Capture the state of Gcf after calling get_backend\n+        after_backend_call = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+        \n+        # Assert that the state of Gcf.figs is unchanged by get_backend call\n+        assert before_backend_call == after_backend_call, '\\n' + before_backend_call + '\\n' + after_backend_call\n+\n def test_keymaps():\n     key_list = [k for k in mpl.rcParams if 'keymap' in k]\n     for k in key_list:\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..cb22925 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -11,7 +11,7 @@ from matplotlib import colors as mcolors\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n from matplotlib.testing.widgets import mock_event\n from matplotlib.collections import LineCollection, PolyCollection\n-from matplotlib.patches import Circle\n+from matplotlib.testing.decorators import check_figures_equal\n \n import matplotlib.pyplot as plt\n import numpy as np\n@@ -21,7 +21,18 @@ mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n \n-def test_aspect_equal_error():\n+@check_figures_equal(extensions=[\"png\"])\n+def test_set_visible_3d(fig_test, fig_ref):\n+    ax1 = fig_test.add_subplot(121, projection='3d')\n+    ax2 = fig_test.add_subplot(122, projection='3d')\n+    ax1.scatter(1, 1, 1)\n+    ax2.scatter(1, 1, 1, c='r')\n+    ax1.set_visible(False)\n+\n+    ax1_ref = fig_ref.add_subplot(121, projection='3d')\n+    ax2_ref = fig_ref.add_subplot(122, projection='3d')\n+    ax2_ref.scatter(1, 1, 1, c='r')\n+    # ax1_ref is not supposed to be visible as per expected outcome\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n     with pytest.raises(NotImplementedError):\n",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..f079eda 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -148,6 +148,48 @@ def test_rotate_rect_draw(fig_test, fig_ref):\n     rect_test.set_angle(angle)\n     assert rect_test.get_angle() == angle\n \n+import matplotlib.pyplot as plt\n+import matplotlib.patches as patches\n+import pytest\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=['png'])\n+def test_dash_offset_patch_rectangle(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n+\n+    loc = (0.1, 0.1)\n+    width, height = (0.8, 0.8)\n+    rect_ref = patches.Rectangle(loc, width, height, linewidth=3, edgecolor='b', linestyle=(0, [6, 6]))\n+    rect_ref2 = patches.Rectangle(loc, width, height, linewidth=3, edgecolor='r', linestyle=(0, [0, 6, 6, 0]))\n+\n+    ax_ref.add_patch(rect_ref)\n+    ax_ref.add_patch(rect_ref2)\n+\n+    rect_test = patches.Rectangle(loc, width, height, linewidth=3, edgecolor='b', linestyle=(0, [6, 6]))\n+    rect_test2 = patches.Rectangle(loc, width, height, linewidth=3, edgecolor='r', linestyle=(6, [6, 6]))\n+\n+    ax_test.add_patch(rect_test)\n+    ax_test.add_patch(rect_test2)\n+\n+@check_figures_equal(extensions=['png'])\n+def test_dash_offset_patch_ellipse(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n+\n+    center = (0.5, 0.5)\n+    width, height = (0.6, 0.4)\n+    ellipse_ref = patches.Ellipse(center, width, height, linewidth=3, edgecolor='g', linestyle=(0, [6, 6]))\n+    ellipse_ref2 = patches.Ellipse(center, width, height, linewidth=3, edgecolor='y', linestyle=(3, [6, 6]))\n+\n+    ax_ref.add_patch(ellipse_ref)\n+    ax_ref.add_patch(ellipse_ref2)\n+\n+    ellipse_test = patches.Ellipse(center, width, height, linewidth=3, edgecolor='g', linestyle=(0, [6, 6]))\n+    ellipse_test2 = patches.Ellipse(center, width, height, linewidth=3, edgecolor='y', linestyle=(3, [6, 6]))\n+\n+    ax_test.add_patch(ellipse_test)\n+    ax_test.add_patch(ellipse_test2)\n \n def test_negative_rect():\n     # These two rectangles have the same vertices, but starting from a\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..7040458 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2866,8 +2866,30 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.patches import Rectangle\n+\n+def test_stackplot_color_cycle():\n+    # Test to ensure that stackplot does not alter the Axes color cycler\n+    x = [1, 2, 3]\n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+\n+    fig, ax = plt.subplots()\n+    \n+    ax.plot([1, 3], [1, 3], color='C0')  # Uses the first color from color cycle\n+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))  # Uses the next color\n+    ax.stackplot(x, my_data, colors=['C2', 'C3', 'C4'])  # Should use specified colors without error\n+\n+    # Assert that the line and rectangle have colors C0 and C1 respectively\n+    line_color = ax.get_lines()[0].get_color()\n+    rect_color = ax.patches[0].get_facecolor()\n+    assert line_color == plt.rcParams['axes.prop_cycle'].by_key()['color'][0]\n+    assert rect_color == plt.rcParams['axes.prop_cycle'].by_key()['color'][1]\n \n-@image_comparison(['stackplot_test_baseline'], remove_text=True)\n+    # Ensure Axes color cycler has not moved ahead\n+    next_color = next(ax._get_lines.prop_cycler)['color']\n+    assert next_color == plt.rcParams['axes.prop_cycle'].by_key()['color'][2]  # Should be 'C2'\n def test_stackplot_baseline():\n     np.random.seed(0)\n \n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 45f9c04..b78992b 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -13,7 +13,7 @@ from matplotlib.backend_bases import MouseButton, MouseEvent\n \n from matplotlib.offsetbox import (\n     AnchoredOffsetbox, AnnotationBbox, AnchoredText, DrawingArea, OffsetBox,\n-    OffsetImage, TextArea, _get_packed_offsets)\n+    OffsetImage, TextArea, _get_packed_offsets, HPacker, VPacker)\n \n \n @image_comparison(['offsetbox_clipping'], remove_text=True)\n@@ -327,7 +327,39 @@ def test_zorder():\n     assert OffsetBox(zorder=42).zorder == 42\n \n \n-def test_arrowprops_copied():\n+@pytest.mark.parametrize(\"align\", [\"bottom\", \"top\"])\n+def test_hpacker_align_top_bottom(align):\n+    # Create a figure\n+    fig, ax = plt.subplots()\n+\n+    # Create two DrawingAreas with different heights\n+    da1 = DrawingArea(10, 20)\n+    rect1 = mpatches.Rectangle((0, 0), 10, 20, facecolor=\"red\")\n+    da1.add_artist(rect1)\n+\n+    da2 = DrawingArea(10, 30)\n+    rect2 = mpatches.Rectangle((0, 0), 10, 30, facecolor=\"blue\")\n+    da2.add_artist(rect2)\n+\n+    # Create an HPacker with the specified 'align'\n+    pack = HPacker(children=[da1, da2], pad=0, sep=0, align=align)\n+\n+    # Add the packer to the axis\n+    ax.add_artist(pack)\n+    pack.set_offset((0.5, 0.5))\n+\n+    # Trigger a draw operation (necessary for some backends)\n+    fig.canvas.draw()\n+\n+    # Check the correct alignment visually by saving the plot\n+    fig.savefig(f'test_hpacker_align_{align}.png')\n+\n+    plt.close(fig)\n+\n+\n+@pytest.mark.parametrize(\"align\", [\"baseline\", \"bottom\", \"top\",\n+                                   \"left\", \"right\", \"center\"])\n+def test_packers(align):\n     da = DrawingArea(20, 20, 0, 0, clip=True)\n     arrowprops = {\"arrowstyle\": \"->\", \"relpos\": (.3, .7)}\n     ab = AnnotationBbox(da, [.5, .5], xybox=(-0.2, 0.5), xycoords='data',\n",
  "matplotlib__matplotlib-24627": "",
  "matplotlib__matplotlib-24637": "diff --git a/lib/matplotlib/tests/test_backend_svg.py b/lib/matplotlib/tests/test_backend_svg.py\nindex 8817464..1733ef3 100644\n--- a/lib/matplotlib/tests/test_backend_svg.py\n+++ b/lib/matplotlib/tests/test_backend_svg.py\n@@ -578,6 +578,65 @@ def test_svg_font_string(font_str, include_generic):\n     plt.rcParams[\"font.size\"] = size\n     plt.rcParams[\"svg.fonttype\"] = \"none\"\n \n+def test_annotationbbox_gid():\n+    # Test that object gid appears in the AnnotationBbox\n+    # in output svg.\n+    fig, ax = plt.subplots()\n+    arr_img = np.ones((32, 32))\n+    xy = (0.3, 0.55)\n+\n+    imagebox = OffsetImage(arr_img, zoom=0.1)\n+    imagebox.image.axes = ax\n+\n+    ab = AnnotationBbox(imagebox, xy,\n+                        xybox=(120., -80.),\n+                        xycoords='data',\n+                        boxcoords=\"offset points\",\n+                        pad=0.5,\n+                        arrowprops=dict(\n+                            arrowstyle=\"->\",\n+                            connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                        )\n+    ab.set_gid(\"a test for issue 20044\")\n+    ax.add_artist(ab)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n+\n+    expected = '<g id=\"a test for issue 20044\">'\n+    assert expected in buf\n+\n+def test_annotationbbox_gid_multiple():\n+    # Test multiple AnnotationBbox with different gids\n+    fig, ax = plt.subplots()\n+    arr_img = np.ones((32, 32))\n+\n+    for i in range(3):\n+        xy = (0.3 + i*0.1, 0.55)\n+        imagebox = OffsetImage(arr_img, zoom=0.1)\n+        imagebox.image.axes = ax\n+\n+        ab = AnnotationBbox(imagebox, xy,\n+                            xybox=(120., -80. + i*10),\n+                            xycoords='data',\n+                            boxcoords=\"offset points\",\n+                            pad=0.5,\n+                            arrowprops=dict(\n+                                arrowstyle=\"->\",\n+                                connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                            )\n+        ab.set_gid(f\"test_gid_{i}\")\n+        ax.add_artist(ab)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n+\n+    for i in range(3):\n+        expected = f'<g id=\"test_gid_{i}\">'\n+        assert expected in buf\n+\n     fig, ax = plt.subplots()\n     if generic == \"sans-serif\":\n         generic_options = [\"sans\", \"sans-serif\", \"sans serif\"]\n",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..c09db4f 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -20,6 +20,23 @@ import matplotlib.scale as mscale\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n \n \n+import numpy as np\n+import matplotlib as mpl\n+import matplotlib.pyplot as plt\n+import warnings\n+from numpy.testing import assert_array_equal, assert_array_almost_equal\n+\n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.float16, float])\n+def test_index_dtype_no_warnings(dtype):\n+    # Check that using various dtypes does not produce any warnings\n+    # due to numpy deprecation issues related to integer overflows.\n+    cm = mpl.colormaps[\"viridis\"]\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        assert_array_equal(cm(dtype(0)), cm(0))\n+        # Verify that no warnings of DeprecationWarning category are raised\n+        assert not any(item.category == DeprecationWarning for item in w)\n+\n @pytest.mark.parametrize('N, result', [\n     (5, [1, .6, .2, .1, 0]),\n     (2, [1, 0]),\n",
  "matplotlib__matplotlib-25122": "",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..b877b69 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,6 +7801,9 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+import matplotlib.pyplot as plt\n+import matplotlib as mpl\n+\n def test_ytickcolor_is_not_yticklabelcolor():\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n",
  "matplotlib__matplotlib-25311": "",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..989f0b1 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -34,7 +34,32 @@ def test_simple():\n #    pickle.dump(ax, BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n     plt.figure()\n-    plt.bar(x=np.arange(10), height=np.arange(10))\n+import matplotlib.pyplot as plt\n+import numpy as np\n+import pickle\n+from io import BytesIO\n+\n+def test_pickle_after_align_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    # Call align_labels and then attempt to pickle the figure\n+    fig.align_labels()\n+\n+    # Test that pickling does not raise an exception\n+    pickle_data = pickle.dumps(fig)\n+\n+    # Unpickle the data and ensure the object is a figure\n+    loaded_fig = pickle.loads(pickle_data)\n+    assert isinstance(loaded_fig, plt.Figure)\n     pickle.dump(plt.gca(), BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n     fig = plt.figure()\n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..4332d7d 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -991,6 +991,47 @@ def test_hexbin_linear():\n     ax.hexbin(x, y, gridsize=(10, 5), marginals=True,\n               reduce_C_function=np.sum)\n \n+from matplotlib.testing.decorators import check_figures_equal\n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_behavior_upon_C_parameter(fig_test, fig_ref):\n+    # see: gh:12926\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # without C parameter\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # with C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=C,\n+        reduce_C_function=np.sum,\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n \n def test_hexbin_log_clim():\n     x, y = np.arange(200).reshape((2, 100))\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex 700190c..88ffef2 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -89,6 +89,10 @@ def test_contour_no_valid_levels():\n     ax.contour(np.ones((9, 9)))\n \n \n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.path import Path\n+\n def test_contour_Nlevels():\n     # A scalar levels arg or kwarg should trigger auto level generation.\n     # https://github.com/matplotlib/matplotlib/issues/11913\n",
  "mwaskom__seaborn-3069": "diff --git a/tests/_core/test_plot.py b/tests/_core/test_plot.py\nindex 3d202bc..ea0d576 100644\n--- a/tests/_core/test_plot.py\n+++ b/tests/_core/test_plot.py\n@@ -645,8 +645,43 @@ class TestScaling:\n         with pytest.raises(RuntimeError, match=err):\n             p.plot()\n \n+import pytest\n+import matplotlib as mpl\n+from seaborn import Plot\n+from seaborn._core.scales import Nominal\n \n class TestPlotting:\n+    def test_nominal_x_axis_limits(self):\n+        p = Plot(x=[\"A\", \"B\", \"C\"], y=[1, 2, 3]).scale(x=Nominal())\n+        ax = p.plot()._figure.axes[0]\n+        assert ax.get_xlim() == (-0.5, 2.5), \"X-axis limits should be extended by +/- 0.5\"\n+\n+    def test_nominal_y_axis_limits(self):\n+        p = Plot(x=[1, 2, 3], y=[\"A\", \"B\", \"C\"]).scale(y=Nominal())\n+        ax = p.plot()._figure.axes[0]\n+        assert ax.get_ylim() == (2.5, -0.5), \"Y-axis limits should be inverted and extended by +/- 0.5\"\n+\n+    def test_nominal_x_axis_no_grid(self):\n+        p = Plot(x=[\"A\", \"B\", \"C\"], y=[1, 2, 3]).scale(x=Nominal())\n+        ax = p.plot()._figure.axes[0]\n+        assert not any(line.get_visible() for line in ax.xaxis.get_gridlines()), \"X-axis gridlines should not be visible\"\n+\n+    def test_nominal_y_axis_no_grid(self):\n+        p = Plot(x=[1, 2, 3], y=[\"A\", \"B\", \"C\"]).scale(y=Nominal())\n+        ax = p.plot()._figure.axes[0]\n+        assert not any(line.get_visible() for line in ax.yaxis.get_gridlines()), \"Y-axis gridlines should not be visible\"\n+\n+    def test_nominal_x_axis_with_limits(self):\n+        lim = (-1, 2.1)\n+        p = Plot(x=[\"A\", \"B\", \"C\"], y=[1, 2, 3]).limit(x=lim).scale(x=Nominal())\n+        ax = p.plot()._figure.axes[0]\n+        assert ax.get_xlim() == lim, \"X-axis limits should respect explicit limits\"\n+\n+    def test_nominal_y_axis_with_limits(self):\n+        lim = (-1, 2.1)\n+        p = Plot(x=[1, 2, 3], y=[\"A\", \"B\", \"C\"]).limit(y=lim).scale(y=Nominal())\n+        ax = p.plot()._figure.axes[0]\n+        assert ax.get_ylim() == lim, \"Y-axis limits should respect explicit limits\"\n \n     def test_matplotlib_object_creation(self):\n \n",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..161513a 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -244,7 +244,30 @@ def test_default_static_max_age(app):\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n \n-def test_templates_list(test_apps):\n+def test_empty_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"\", __name__)\n+\n+def test_valid_name_allowed(app, client):\n+    # Test that a valid non-empty name does not raise an error\n+    try:\n+        blueprint = flask.Blueprint(\"valid_name\", __name__)\n+    except ValueError:\n+        pytest.fail(\"Blueprint with a non-empty name raised ValueError unexpectedly.\")\n+\n+def test_space_in_name_allowed(app, client):\n+    # Test that a name with spaces does not raise an error\n+    try:\n+        blueprint = flask.Blueprint(\"name with spaces\", __name__)\n+    except ValueError:\n+        pytest.fail(\"Blueprint with a non-empty name containing spaces raised ValueError unexpectedly.\")\n+\n+def test_special_characters_in_name_allowed(app, client):\n+    # Test that a name with special characters does not raise an error\n+    try:\n+        blueprint = flask.Blueprint(\"name_with_special_chars!@#$\", __name__)\n+    except ValueError:\n+        pytest.fail(\"Blueprint with a non-empty name containing special characters raised ValueError unexpectedly.\")\n     from blueprintapp import app\n \n     templates = sorted(app.jinja_env.list_templates())\n",
  "psf__requests-1142": "",
  "psf__requests-1724": "",
  "psf__requests-1766": "",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..eb6e186 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,6 +81,12 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://.example.com'),\n+            (InvalidURL, 'http://..example.com'),  # another example with invalid labels\n+            (InvalidURL, 'http://example..com'),  # invalid label in the middle\n+            (InvalidURL, 'http://example.com..'),  # invalid label at the end\n+            (InvalidURL, 'http://-example.com'),  # invalid because of leading dash in host\n+            (InvalidURL, 'http://example-.com'),  # invalid because of trailing dash in host\n         ))\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n",
  "pydata__xarray-2905": "",
  "pydata__xarray-3095": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex 9329f73..b92226d 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -492,7 +492,14 @@ class VariableSubclassobjects:\n                         source_ndarray(w.values))\n         assert_identical(v, copy(v))\n \n-    def test_copy_index(self):\n+    @pytest.mark.parametrize(\"dtype\", [\"<U3\", \"str\"])\n+    def test_copy_unicode_index(self, dtype):\n+        v = self.cls('x', np.array(['foo'], dtype=dtype))\n+        for deep in [True, False]:\n+            w = v.copy(deep=deep)\n+            assert_identical(v, w)\n+            assert v.dtype == w.dtype\n+            assert w.dtype.kind == 'U'\n         midx = pd.MultiIndex.from_product([['a', 'b'], [1, 2], [-1, -2]],\n                                           names=('one', 'two', 'three'))\n         v = self.cls('x', midx)\n",
  "pydata__xarray-3151": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 026dec9..316be2b 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -571,7 +571,33 @@ class TestCombineAuto:\n         with raises_regex(ValueError, 'Every dimension needs a coordinate'):\n             combine_by_coords(objs)\n \n-        def test_empty_input(self):\n+    def test_combine_with_non_monotonic_identical_coords(self):\n+        # Test that non-monotonic but identical coordinate dimensions do not raise an error\n+        yCoord = ['a', 'c', 'b']  # non-monotonic but identical in both datasets\n+\n+        data1 = np.random.rand(3, 3)\n+        data2 = np.random.rand(4, 3)\n+\n+        ds1 = Dataset(\n+            data_vars=dict(data=(['x', 'y'], data1)),\n+            coords=dict(x=[1, 2, 3], y=yCoord)\n+        )\n+\n+        ds2 = Dataset(\n+            data_vars=dict(data=(['x', 'y'], data2)),\n+            coords=dict(x=[4, 5, 6, 7], y=yCoord)\n+        )\n+\n+        expected_data = np.concatenate((data1, data2), axis=0)\n+        expected = Dataset(\n+            data_vars=dict(data=(['x', 'y'], expected_data)),\n+            coords=dict(x=[1, 2, 3, 4, 5, 6, 7], y=yCoord)\n+        )\n+\n+        actual = combine_by_coords((ds1, ds2))\n+        assert_identical(expected, actual)\n+\n+    def test_empty_input(self):\n             assert_identical(Dataset(), combine_by_coords([]))\n \n     def test_infer_order_from_coords(self):\n",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..bd9dfdd 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2310,6 +2310,26 @@ class TestDataArray:\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n \n+    def test_quantile_keep_attrs(self):\n+        import xarray as xr\n+        import numpy as np\n+        from collections import OrderedDict\n+\n+        # Create a DataArray with attributes\n+        da = xr.DataArray([0, 0], dims=\"x\", attrs={'units': 'K'})\n+        \n+        # Calculate the quantile with keep_attrs=True\n+        out = da.quantile(0.9, dim='x', keep_attrs=True)\n+        \n+        # Assert the attributes are retained\n+        assert out.attrs == {'units': 'K'}\n+        \n+        # Calculate the quantile with keep_attrs=False (default)\n+        out_no_attrs = da.quantile(0.9, dim='x')\n+        \n+        # Assert the attributes are not retained\n+        assert out_no_attrs.attrs == {}\n+\n     def test_reduce_keep_attrs(self):\n         # Test dropped attrs\n         vm = self.va.mean()\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..ae851d3 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,8 +1,10 @@\n+\n import numpy as np\n import pytest\n \n import xarray as xr\n from xarray.core import dtypes, merge\n+from xarray.testing import assert_identical\n \n from . import raises_regex\n from .test_dataset import create_test_data\n@@ -159,6 +161,36 @@ class TestMergeMethod:\n         with raises_regex(ValueError, \"should be coordinates or not\"):\n             data.merge(data.reset_coords())\n \n+    def test_merge_dataarray(self):\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+\n+        # Test the original scenario\n+        assert_identical(ds.merge(da), xr.merge([ds, da]))\n+\n+        # Test adding a DataArray with a different dimension\n+        da_with_dim = xr.DataArray([1, 2, 3], dims=\"x\", name=\"c\")\n+        ds_with_dim = xr.Dataset({\"a\": (\"x\", [0, 0, 0])})\n+        expected_with_dim = xr.Dataset({\"a\": (\"x\", [0, 0, 0]), \"c\": (\"x\", [1, 2, 3])})\n+        assert_identical(ds_with_dim.merge(da_with_dim), expected_with_dim)\n+\n+        # Test merging with a DataArray that has a conflicting variable name\n+        da_conflict = xr.DataArray(1, name=\"a\")\n+        with pytest.raises(ValueError):\n+            ds.merge(da_conflict)\n+\n+        # Test merging with different compat and join options\n+        da_compat = xr.DataArray([1, 2], dims=\"x\", name=\"b\")\n+        ds_compat = xr.Dataset({\"a\": (\"x\", [0, 0]), \"b\": (\"x\", [0, 0])})\n+        expected_no_conflicts = xr.Dataset({\"a\": (\"x\", [0, 0]), \"b\": (\"x\", [1, 2])})\n+        assert_identical(ds_compat.merge(da_compat, compat=\"no_conflicts\"), expected_no_conflicts)\n+\n+        # Test join operation\n+        da_join = xr.DataArray([3, 4], dims=\"x\", name=\"d\")\n+        ds_join = xr.Dataset({\"a\": (\"x\", [1, 2]), \"b\": (\"x\", [5, 6])})\n+        expected_join = xr.Dataset({\"a\": (\"x\", [1, 2]), \"b\": (\"x\", [5, 6]), \"d\": (\"x\", [3, 4])})\n+        assert_identical(ds_join.merge(da_join, join=\"outer\"), expected_join)\n+\n     def test_merge_broadcast_equals(self):\n         ds1 = xr.Dataset({\"x\": 0})\n         ds2 = xr.Dataset({\"x\": (\"y\", [0, 0])})\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "diff --git a/xarray/tests/test_duck_array_ops.py b/xarray/tests/test_duck_array_ops.py\nindex 0c63f0f..ad584eb 100644\n--- a/xarray/tests/test_duck_array_ops.py\n+++ b/xarray/tests/test_duck_array_ops.py\n@@ -607,14 +607,35 @@ def test_min_count_dataset(func):\n @pytest.mark.parametrize(\"dtype\", [float, int, np.float32, np.bool_])\n @pytest.mark.parametrize(\"dask\", [False, True])\n @pytest.mark.parametrize(\"func\", [\"sum\", \"prod\"])\n-def test_multiple_dims(dtype, dask, func):\n+@pytest.mark.parametrize(\"min_count\", [0, 1, 5])\n+def test_min_count_multiple_dims(dtype, dask, func, min_count):\n     if dask and not has_dask:\n         pytest.skip(\"requires dask\")\n-    da = construct_dataarray(3, dtype, contains_nan=True, dask=dask)\n \n-    actual = getattr(da, func)((\"x\", \"y\"))\n-    expected = getattr(getattr(da, func)(\"x\"), func)(\"y\")\n+    # Constructing a 3D DataArray with potential NaN values\n+    da = DataArray(np.array([[[1, 2, 3], [4, np.nan, 6]], [[7, 8, 9], [np.nan, np.nan, 12]]]), \n+                   dims=(\"x\", \"y\", \"z\"), dtype=dtype)\n+\n+    # Compute the reduction across multiple dimensions with min_count\n+    actual = getattr(da, func)(dim=(\"x\", \"y\"), skipna=True, min_count=min_count)\n+\n+    # Manually computing the expected result\n+    if func == \"sum\":\n+        expected_data = np.nansum(da, axis=(0, 1))\n+    else:  # func == \"prod\"\n+        expected_data = np.nanprod(da, axis=(0, 1))\n+\n+    expected = DataArray(expected_data, dims=(\"z\",))\n+\n+    # Adjust expected data based on min_count condition\n+    valid_counts = np.sum(~np.isnan(da), axis=(0, 1))\n+    for i in range(len(valid_counts)):\n+        if valid_counts[i] < min_count:\n+            expected[i] = np.nan\n+\n     assert_allclose(actual, expected)\n+    if dask:\n+        assert_dask_array(actual, dask)\n \n \n def test_docs():\n",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..f2c890b 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -109,6 +109,27 @@ class TestMergeFunction:\n             expected.attrs = expected_attrs\n             assert actual.identical(expected)\n \n+    def test_merge_attrs_override_copy(self):\n+        import xarray as xr\n+        ds1 = xr.Dataset(attrs={\"x\": 0})\n+        ds2 = xr.Dataset(attrs={\"x\": 1})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"x\"] = 2\n+        assert ds1.attrs[\"x\"] == 0\n+        assert ds2.attrs[\"x\"] == 1\n+        assert ds3.attrs[\"x\"] == 2\n+\n+    def test_merge_attrs_override_multiple(self):\n+        import xarray as xr\n+        ds1 = xr.Dataset(attrs={\"y\": 5})\n+        ds2 = xr.Dataset(attrs={\"z\": 10})\n+        ds3 = xr.Dataset(attrs={\"y\": 15})\n+        ds_merged = xr.merge([ds1, ds2, ds3], combine_attrs=\"override\")\n+        ds_merged.attrs[\"y\"] = 20\n+        assert ds1.attrs[\"y\"] == 5\n+        assert ds3.attrs[\"y\"] == 15\n+        assert ds_merged.attrs[\"y\"] == 20\n+\n     def test_merge_dicts_simple(self):\n         actual = xr.merge([{\"foo\": 0}, {\"bar\": \"one\"}, {\"baz\": 3.5}])\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..3a76979 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1921,6 +1921,20 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n+def test_where_attrs() -> None:\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\", \"description\": \"input array x\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    \n+    # Test with keep_attrs=True\n+    actual = xr.where(cond, x, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\", \"description\": \"input array x\"})\n+    xr.testing.assert_identical(expected, actual)\n+\n+    # Test with keep_attrs=False (default behavior)\n+    actual_no_attrs = xr.where(cond, x, y)\n+    expected_no_attrs = xr.DataArray([1, 0], dims=\"x\")\n+    xr.testing.assert_identical(expected_no_attrs, actual_no_attrs)\n \n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n",
  "pydata__xarray-4695": "",
  "pydata__xarray-4966": "",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..38a2dda 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1920,6 +1920,27 @@ def test_where() -> None:\n     assert_identical(expected, actual)\n \n \n+def test_where_scalar_with_keep_attrs_true() -> None:\n+    # Test with a scalar as the second argument and keep_attrs=True\n+    cond = xr.DataArray([True, False, True], dims=\"x\")\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\")\n+    assert_identical(expected, actual)\n+\n+def test_where_scalar_both() -> None:\n+    # Test with scalars as both the second and third arguments and keep_attrs=True\n+    cond = xr.DataArray([False, True, False], dims=\"x\")\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([0, 1, 0], dims=\"x\")\n+    assert_identical(expected, actual)\n+\n+def test_where_scalar_no_attrs() -> None:\n+    # Test with scalars and without explicit attributes to confirm default behavior\n+    cond = xr.DataArray([False, True, True], dims=\"x\")\n+    actual = xr.where(cond, 2, 3, keep_attrs=True)\n+    expected = xr.DataArray([3, 2, 2], dims=\"x\")\n+    assert_identical(expected, actual)\n+\n def test_where_attrs() -> None:\n     cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n     x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n",
  "pydata__xarray-6599": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f1ec005..427a2ac 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -2010,6 +2010,14 @@ def test_where_attrs() -> None:\n             ),\n             id=\"datetime\",\n         ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array([1000, 2000, 3000], dtype=\"timedelta64[ns]\"), dims=\"x\"\n+            ),\n+            xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n+            xr.DataArray([0.0, 1e3, 2e3], dims=\"x\"),\n+            id=\"timedelta\",\n+        ),\n     ],\n )\n def test_polyval(\n",
  "pydata__xarray-6721": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex cab9007..7dea72d 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -220,7 +220,28 @@ class InaccessibleVariableDataStore(backends.InMemoryDataStore):\n         return {k: lazy_inaccessible(k, v) for k, v in self._variables.items()}\n \n \n+from xarray import open_dataset\n+import pytest\n+import zarr\n+from fsspec.implementations.memory import MemoryFileSystem\n+\n class TestDataset:\n+    def test_chunks_does_not_load_data_zarr(self) -> None:\n+        # Setup a fake file system and zarr store\n+        fs = MemoryFileSystem()\n+        store = fs.get_mapper(\"/test.zarr\")\n+        zarr_array = zarr.ones((100, 100), chunks=(10, 10), store=store, overwrite=True)\n+        zarr_array.attrs[\"_ARRAY_DIMENSIONS\"] = [\"dim1\", \"dim2\"]\n+\n+        # Open the dataset using xarray\n+        ds = open_dataset(store, engine=\"zarr\", backend_kwargs={\"consolidated\": False})\n+\n+        # Check that accessing chunks does not trigger a load\n+        assert ds.chunks == {\"dim1\": (10, 10, 10, 10, 10, 10, 10, 10, 10, 10), \"dim2\": (10, 10, 10, 10, 10, 10, 10, 10, 10, 10)}\n+        with pytest.raises(KeyError):\n+            # This should raise because we should not have accessed the data itself\n+            _ = store[\"/0.0\"]\n+\n     def test_repr(self) -> None:\n         data = create_test_data(seed=123)\n         data.attrs[\"foo\"] = \"bar\"\n",
  "pydata__xarray-6744": "diff --git a/xarray/tests/test_rolling.py b/xarray/tests/test_rolling.py\nindex 0a9ef75..502d005 100644\n--- a/xarray/tests/test_rolling.py\n+++ b/xarray/tests/test_rolling.py\n@@ -49,7 +49,22 @@ class TestDataArrayRolling:\n                     expected.values[expected.values.nonzero()],\n                 )\n \n-    @pytest.mark.parametrize(\"da\", (1,), indirect=True)\n+    @pytest.mark.parametrize(\"da\", (1, 2), indirect=True)\n+    @pytest.mark.parametrize(\"center\", [True, False])\n+    @pytest.mark.parametrize(\"size\", [1, 2, 3, 7])\n+    def test_rolling_iter_center(self, da, center: bool, size: int) -> None:\n+        # Create a rolling object with specific size and center\n+        rolling_obj = da.rolling(time=size, center=center)\n+        rolling_obj_mean = rolling_obj.mean()\n+        \n+        # Manually iterate over the rolling object\n+        manual_result = [window.mean().values for label, window in rolling_obj]\n+\n+        # Get the result directly from the rolling mean\n+        direct_result = rolling_obj_mean.values\n+\n+        # Compare the manually iterated result with the direct result\n+        np.testing.assert_allclose(manual_result, direct_result, equal_nan=True)\n     def test_rolling_repr(self, da) -> None:\n         rolling_obj = da.rolling(time=7)\n         assert repr(rolling_obj) == \"DataArrayRolling [time->7]\"\n",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "diff --git a/xarray/tests/test_indexes.py b/xarray/tests/test_indexes.py\nindex fa8bd84..54e1e0c 100644\n--- a/xarray/tests/test_indexes.py\n+++ b/xarray/tests/test_indexes.py\n@@ -688,12 +688,19 @@ def test_safe_cast_to_index_cftimeindex():\n         assert isinstance(actual, type(expected))\n \n \n-# Test that datetime.datetime objects are never used in a CFTimeIndex\n-@requires_cftime\n-def test_safe_cast_to_index_datetime_datetime():\n-    dates = [datetime(1, 1, day) for day in range(1, 20)]\n+import pytest\n+import xarray as xr\n+import numpy as np\n \n-    expected = pd.Index(dates)\n-    actual = safe_cast_to_index(np.array(dates))\n-    assert_array_equal(expected, actual)\n-    assert isinstance(actual, pd.Index)\n+@pytest.mark.parametrize(\"dtype\", [\"int32\", \"float32\", \"int64\", \"float64\", \"int16\"])\n+def test_restore_dtype_on_multiindexes(dtype: str) -> None:\n+    foo = xr.Dataset(coords={\"bar\": (\"bar\", np.array([0, 1], dtype=dtype))})\n+    foo = foo.stack(baz=(\"bar\",))\n+    assert str(foo[\"bar\"].values.dtype) == dtype\n+\n+@pytest.mark.parametrize(\"dtype\", [\"int32\", \"float32\", \"int64\", \"float64\", \"int16\"])\n+def test_dtype_consistency_after_stack_unstack(dtype: str) -> None:\n+    foo = xr.Dataset(coords={\"bar\": (\"bar\", np.array([0, 1], dtype=dtype))})\n+    stacked = foo.stack(baz=(\"bar\",))\n+    unstacked = stacked.unstack(\"baz\")\n+    assert str(unstacked[\"bar\"].values.dtype) == dtype\n",
  "pylint-dev__pylint-4970": "diff --git a/tests/checkers/unittest_similar.py b/tests/checkers/unittest_similar.py\nindex 97cd4d0..649a2d6 100644\n--- a/tests/checkers/unittest_similar.py\n+++ b/tests/checkers/unittest_similar.py\n@@ -494,11 +494,35 @@ def test_get_map_data() -> None:\n         # The map bit, can you tell? ;)\n         data.extend(sim.get_map_data())\n \n-    assert len(expected_linelists) == len(data)\n+from io import StringIO\n+from contextlib import redirect_stdout\n+import pytest\n+from pylint.checkers.similar import Run\n+\n+def test_set_duplicate_lines_to_zero() -> None:\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        Run([\"--duplicates=0\", \"file1.py\", \"file2.py\"])\n+    assert ex.value.code == 0\n+    assert output.getvalue() == \"\"\n+\n+def test_set_duplicate_lines_to_non_zero() -> None:\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        Run([\"--duplicates=5\", \"file1.py\", \"file2.py\"])\n+    assert ex.value.code == 0\n+    assert \"Some duplicates found\" in output.getvalue()\n+\n+def test_no_arguments() -> None:\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        Run([])\n+    assert ex.value.code == 1\n+    assert \"Usage: symilar\" in output.getvalue()\n     for source_fname, expected_lines, lineset_obj in zip(\n         source_streams, expected_linelists, data\n     ):\n         assert source_fname == lineset_obj.name\n         # There doesn't seem to be a faster way of doing this, yet.\n         lines = (linespec.text for linespec in lineset_obj.stripped_lines)\n-        assert tuple(expected_lines) == tuple(lines)\n+        assert tuple(expected_lines) == tuple(lines)\n",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..54e0fa0 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -94,9 +94,32 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+from pylint.lint.run import Run\n+import pytest\n+from _pytest.capture import CaptureFixture\n+\n+def test_short_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the -v flag.\"\"\"\n+    Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n+def test_long_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the --verbose flag.\"\"\"\n+    Run([str(EMPTY_MODULE), \"--verbose\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n+def test_invalid_verbose_argument(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that providing an argument to -v raises an error.\"\"\"\n+    with pytest.raises(SystemExit):\n+        Run([str(EMPTY_MODULE), \"-v\", \"extra\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"error: argument --verbose/-v: expected one argument\" not in output.err\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9123ae4..201a5e5 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1233,6 +1233,66 @@ class TestRunTC:\n             expected_output=\"No such file or directory\",\n         )\n \n+    def test_ignore_in_recursive_mode(self):\n+        # Test that files in ignored directories are not linted when using --recursive=y\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore=ignored_subdirectory\",\n+            ],\n+            code=0,\n+        )\n+\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore=failing.py\",\n+            ],\n+            code=0,\n+        )\n+\n+    def test_ignore_patterns_in_recursive_mode(self):\n+        # Test that files matching ignore patterns are not linted when using --recursive=y\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-patterns=ignored_.*\",\n+            ],\n+            code=0,\n+        )\n+\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-patterns=failing.*\",\n+            ],\n+            code=0,\n+        )\n+\n+    def test_ignore_paths_in_recursive_mode(self):\n+        # Test that files in ignored paths are not linted when using --recursive=y\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-paths=.*ignored.*\",\n+            ],\n+            code=0,\n+        )\n+\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-paths=.*failing.*\",\n+            ],\n+            code=0,\n+        )\n+\n     def test_recursive(self):\n         self._runtest(\n             [join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"), \"--recursive=y\"],\n",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..6e09069 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,36 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_paths_with_recursive_option(self):\n+        \"\"\"Test that the --recursive=y option respects ignore-paths in pyproject.toml\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                # Create a mock pyproject.toml with ignore-paths configuration\n+                with open(\"pyproject.toml\", \"w\") as f:\n+                    f.write(\"\"\"\n+                    [tool.pylint.MASTER]\n+                    ignore-paths = [\n+                      \"^ignored_subdirectory/.*$\",\n+                    ]\n+                    \"\"\")\n+                try:\n+                    self._runtest(\n+                        [\n+                            \".\", \n+                            \"--recursive=y\", \n+                            \"--ignore-paths=^ignored_subdirectory/.*\"\n+                        ],\n+                        code=0,\n+                    )\n+                finally:\n+                    os.remove(\"pyproject.toml\")\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7277": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9f95f7b..970147a 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -765,6 +765,24 @@ a.py:1:4: E0001: Parsing failed: 'invalid syntax (<unknown>, line 1)' (syntax-er\n                 modify_sys_path()\n             assert sys.path == paths[1:]\n \n+            paths = [\"\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:], \"Failed to remove empty string from sys.path\"\n+\n+            paths = [\".\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:], \"Failed to remove '.' from sys.path\"\n+\n+            paths = [\"/do_not_remove\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths, \"Incorrectly removed non-cwd path from sys.path\"\n+\n             paths = [cwd, \"/custom_pythonpath\", *default_paths]\n             sys.path = copy(paths)\n             with _test_environ_pythonpath(\"/custom_pythonpath\"):\n",
  "pytest-dev__pytest-10051": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex 26c4c15..4d40122 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -160,6 +160,37 @@ def logging_during_setup_and_teardown(caplog):\n     assert [x.message for x in caplog.get_records(\"teardown\")] == [\"a_teardown_log\"]\n \n \n+import logging\n+from _pytest.logging import caplog_records_key\n+\n+...\n+\n+def test_caplog_get_records_consistency(caplog):\n+    def verify_consistency():\n+        assert caplog.get_records(\"call\") == caplog.records\n+\n+    verify_consistency()\n+    logging.warning(\"test message\")\n+    verify_consistency()\n+    caplog.clear()\n+    verify_consistency()\n+\n+def test_caplog_clear_consistency_with_handler(caplog):\n+    logger = logging.getLogger()\n+    logger.setLevel(logging.DEBUG)\n+\n+    logger.debug(\"Initial message\")\n+    assert len(caplog.records) == 1\n+    assert len(caplog.get_records(\"call\")) == 1\n+\n+    caplog.clear()\n+    assert len(caplog.records) == 0\n+    assert len(caplog.get_records(\"call\")) == 0\n+\n+    logger.info(\"Post-clear message\")\n+    assert len(caplog.records) == 1\n+    assert len(caplog.get_records(\"call\")) == 1\n+\n def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardown):\n     assert not caplog.records\n     assert not caplog.get_records(\"call\")\n",
  "pytest-dev__pytest-10081": "",
  "pytest-dev__pytest-5262": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 1f092b0..299b99e 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -1051,8 +1051,34 @@ class TestFDCapture(object):\n             cap.done()\n             pytest.raises(AttributeError, cap.suspend)\n \n+import pytest\n+import sys\n+import contextlib\n \n-@contextlib.contextmanager\n+def test_encoded_file_str_write():\n+    from _pytest.capture import EncodedFile\n+    import io\n+\n+    buffer = io.StringIO()\n+    encoded_file = EncodedFile(buffer, encoding='utf-8')\n+\n+    test_string = \"Hello, pytest!\"\n+    encoded_file.write(test_string)\n+    assert buffer.getvalue() == test_string\n+\n+def test_encoded_file_bytes_write_error():\n+    from _pytest.capture import EncodedFile\n+    import io\n+\n+    buffer = io.StringIO()\n+    encoded_file = EncodedFile(buffer, encoding='utf-8')\n+\n+    test_bytes = b\"Hello, pytest!\"\n+    with pytest.raises(TypeError, match=\"write\\(\\) argument must be str, not bytes\"):\n+        encoded_file.write(test_bytes)\n+\n+def test_capfd_sys_stdout_mode(capfd):\n+    assert \"b\" not in sys.stdout.mode\n def saved_fd(fd):\n     new_fd = os.dup(fd)\n     try:\n",
  "pytest-dev__pytest-5631": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex e422b03..5e24475 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -8,7 +8,8 @@ import py\n import pytest\n from _pytest.main import _in_venv\n from _pytest.main import ExitCode\n-from _pytest.main import Session\n+from unittest.mock import patch\n+import numpy as np\n \n \n class TestCollector:\n@@ -46,7 +47,22 @@ class TestCollector:\n             assert [1, 2, 3] != fn\n             assert modcol != fn\n \n-    def test_getparent(self, testdir):\n+    def test_patch_with_numpy_array(self, testdir):\n+        \"\"\"Test that using a numpy array in a patch decorator does not raise a ValueError.\"\"\"\n+        testdir.makepyfile(\n+            \"\"\"\n+            import numpy as np\n+            from unittest.mock import patch\n+\n+            class TestNumpyPatch:\n+                @patch(\"numpy.array\", new=np.array([1, 2, 3]))\n+                def test_array_patch(self):\n+                    import numpy as np\n+                    assert (np.array([1, 2, 3]) == np.array([1, 2, 3])).all()\n+            \"\"\"\n+        )\n+        reprec = testdir.inline_run()\n+        reprec.assertoutcome(passed=1)\n         modcol = testdir.getmodulecol(\n             \"\"\"\n             class TestClass(object):\n",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..50639bf 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -119,8 +119,25 @@ class TestPaste(object):\n \n             monkeypatch.setattr(urllib.request, \"urlopen\", mocked)\n         return calls\n+    def test_create_new_paste_with_text_lexer(self, pastebin, mocked_urlopen, monkeypatch):\n+        def mock_urlopen(url, data):\n+            class MockResponse:\n+                def read(self):\n+                    return b'href=\"/raw/3c0c6750bd\"'\n+            # Simulate the server accepting \"text\" lexer without error\n+            assert b\"lexer=text\" in data\n+            return MockResponse()\n+        \n+        # Patch urlopen to use the mock\n+        monkeypatch.setattr(urllib.request, \"urlopen\", mock_urlopen)\n+        \n+        result = pastebin.create_new_paste(b\"full-paste-contents\")\n+        assert result == \"https://bpaste.net/show/3c0c6750bd\"\n \n-    def test_create_new_paste(self, pastebin, mocked_urlopen):\n+        # Ensure the mock was called and the correct data was sent\n+        assert len(mocked_urlopen) == 0  # Since we're using a different mock here\n+        assert \"code=full-paste-contents\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n         result = pastebin.create_new_paste(b\"full-paste-contents\")\n         assert result == \"https://bpaste.net/show/3c0c6750bd\"\n         assert len(mocked_urlopen) == 1\n@@ -130,4 +147,4 @@ class TestPaste(object):\n         assert url == \"https://bpaste.net\"\n         assert \"lexer=%s\" % lexer in data.decode()\n         assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n",
  "pytest-dev__pytest-6202": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex fb6b260..56cc169 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -703,6 +703,28 @@ class Test_genitems:\n         assert items[2].name == \"testmethod_one\"\n \n         # let's also test getmodpath here\n+\n+        # Test case for the issue with parameterized test names\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+\n+            @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+            def testmethod_two(arg0):\n+                pass\n+\n+            class TestY:\n+                @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+                def testmethod_two(self, arg0):\n+                    pass\n+            \"\"\"\n+        )\n+        items, reprec = testdir.inline_genitems(p)\n+        assert len(items) == 2\n+        assert items[0].name == \"testmethod_two[.[]\"\n+        assert items[1].name == \"testmethod_two[.[]\"\n+        assert items[0].getmodpath() == \"testmethod_two[.[]\"\n+        assert items[1].getmodpath() == \"TestY.testmethod_two[.[]\"\n         assert items[0].getmodpath() == \"testone\"\n         assert items[1].getmodpath() == \"TestX.testmethod_one\"\n         assert items[2].getmodpath() == \"TestY.testmethod_one\"\n",
  "pytest-dev__pytest-7205": "diff --git a/testing/test_setuponly.py b/testing/test_setuponly.py\nindex 8211d39..0aee5c4 100644\n--- a/testing/test_setuponly.py\n+++ b/testing/test_setuponly.py\n@@ -1,3 +1,4 @@\n+\n import pytest\n from _pytest.config import ExitCode\n \n@@ -200,6 +201,21 @@ def test_show_fixtures_with_parameter_ids_function(testdir, mode):\n \n     result.stdout.fnmatch_lines([\"*SETUP    F foobar?FOO?\", \"*SETUP    F foobar?BAR?\"])\n \n+def test_show_fixture_action_with_bytes(testdir):\n+    # Test to ensure no BytesWarning is raised when using --setup-show with bytes parameter\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n+\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n \n def test_dynamic_fixture_request(testdir):\n     p = testdir.makepyfile(\n",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..3b7561b 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -607,6 +607,23 @@ class TestSkip:\n         result = testdir.runpytest(\"-rs\")\n         result.stdout.fnmatch_lines([\"*unconditional skip*\", \"*1 skipped*\"])\n \n+    def test_xfail_run_with_skip_mark(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            def test_skip_location() -> None:\n+                assert 0\n+            \"\"\"\n+        )\n+        # Run with -rs only\n+        result = testdir.runpytest(\"-rs\")\n+        result.stdout.fnmatch_lines([\"SKIPPED [1] test_sample.py:3: unconditional skip\", \"*1 skipped*\"])\n+\n+        # Run with -rs and --runxfail\n+        result = testdir.runpytest(\"-rs\", \"--runxfail\")\n+        result.stdout.fnmatch_lines([\"SKIPPED [1] test_sample.py:3: unconditional skip\", \"*1 skipped*\"])\n+\n     def test_skip_with_reason(self, testdir):\n         testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..bbd1ec1 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,7 +1,9 @@\n+\n import sys\n \n import pytest\n from _pytest.runner import runtestprotocol\n+from _pytest.pytester import Testdir\n from _pytest.skipping import evaluate_skip_marks\n from _pytest.skipping import evaluate_xfail_marks\n from _pytest.skipping import pytest_runtest_setup\n@@ -203,7 +205,31 @@ class TestXFail:\n         callreport = reports[1]\n         assert callreport.wasxfail\n \n-    def test_xfail_xpassed_strict(self, testdir):\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Issue similar to #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_dynamic_xfail(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"dynamic xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Issue similar to #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_dynamic_xfail(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"dynamic xfail\", strict=True))\n+                assert 1\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n         item = testdir.getitem(\n             \"\"\"\n             import pytest\n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..26020c8 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -514,6 +514,12 @@ class TestCaptureFixture:\n         )\n         reprec.assertoutcome(passed=1)\n \n+    @pytest.mark.parametrize(\"nl\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_cafd_preserves_newlines(self, capfd, nl):\n+        print(\"test\", end=nl)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(nl)\n+\n     def test_capfdbinary(self, testdir):\n         reprec = testdir.inline_runsource(\n             \"\"\"\\\n",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..2002d14 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import pytest\n@@ -49,8 +50,27 @@ def test_change_level_undo(testdir):\n     result.stdout.fnmatch_lines([\"*log from test1*\", \"*2 failed in *\"])\n     result.stdout.no_fnmatch_line(\"*log from test2*\")\n \n+def test_caplog_restores_log_level(testdir):\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test_change_log_level(caplog):\n+            original_level = logging.getLogger().level\n+            caplog.set_level(logging.DEBUG)\n+            assert logging.getLogger().level == logging.DEBUG\n+            caplog.set_level(logging.INFO)\n+            assert logging.getLogger().level == logging.INFO\n+\n+        def test_log_level_restored(caplog):\n+            assert logging.getLogger().level == logging.WARNING\n \n-def test_with_statement(caplog):\n+        def test_check_restored_again(caplog):\n+            assert logging.getLogger().level == logging.WARNING\n+        \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=3)\n     with caplog.at_level(logging.INFO):\n         logger.debug(\"handler DEBUG level\")\n         logger.info(\"handler INFO level\")\n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..48288af 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,3 +1,4 @@\n+\n import os\n import pprint\n import sys\n@@ -9,7 +10,7 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n-from _pytest.pytester import Testdir\n+from _pytest.pytester import Testdir, Pytester\n \n \n class TestCollector:\n@@ -1177,8 +1178,39 @@ def test_collect_symlink_out_of_tree(testdir):\n     )\n     assert result.ret == 0\n \n-\n-def test_collectignore_via_conftest(testdir):\n+def test_collect_symlink_dir(pytester: Pytester) -> None:\n+    \"\"\"A symlinked directory is collected.\"\"\"\n+    dir = pytester.mkdir(\"dir\")\n+    dir.joinpath(\"test_it.py\").write_text(\"def test_it(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_dir\").symlink_to(dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+def test_collect_symlink_to_non_test_dir(pytester: Pytester) -> None:\n+    \"\"\"A symlink to a non-test directory should not collect tests.\"\"\"\n+    non_test_dir = pytester.mkdir(\"non_test_dir\")\n+    pytester.path.joinpath(\"symlink_to_non_test\").symlink_to(non_test_dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes()  # No test should be collected\n+\n+def test_collect_symlink_to_file(pytester: Pytester) -> None:\n+    \"\"\"A symlink directly to a test file is collected.\"\"\"\n+    test_file = pytester.mkdir(\"test_dir\").joinpath(\"test_file.py\")\n+    test_file.write_text(\"def test_file(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_to_file.py\").symlink_to(test_file)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=1)\n+\n+def test_collect_symlink_loop(pytester: Pytester) -> None:\n+    \"\"\"Ensure that symlink loops do not cause infinite recursion.\"\"\"\n+    loop_dir1 = pytester.mkdir(\"loop_dir1\")\n+    loop_dir2 = pytester.mkdir(\"loop_dir2\")\n+    loop_dir1.joinpath(\"test_loop1.py\").write_text(\"def test_loop1(): pass\", \"utf-8\")\n+    loop_dir2.joinpath(\"test_loop2.py\").write_text(\"def test_loop2(): pass\", \"utf-8\")\n+    loop_dir1.joinpath(\"symlink_to_loop_dir2\").symlink_to(loop_dir2)\n+    loop_dir2.joinpath(\"symlink_to_loop_dir1\").symlink_to(loop_dir1)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n     \"\"\"collect_ignore in parent conftest skips importing child (issue #4592).\"\"\"\n     tests = testdir.mkpydir(\"tests\")\n     tests.ensure(\"conftest.py\").write(\"collect_ignore = ['ignore_me']\")\n",
  "pytest-dev__pytest-8399": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 2c720b0..08ec301 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -301,8 +301,40 @@ def test_setup_setUpClass(pytester: Pytester) -> None:\n     reprec = pytester.inline_run(testpath)\n     reprec.assertoutcome(passed=3)\n \n+def test_unittest_setUpClass_fixture_visibility(pytester: Pytester) -> None:\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n \n-def test_setup_class(pytester: Pytester) -> None:\n+        class MyTestCase1(unittest.TestCase):\n+            @classmethod\n+            def setUpClass(cls):\n+                pass\n+\n+            def test_one(self):\n+                pass\n+\n+        class MyTestCase2(unittest.TestCase):\n+            @classmethod\n+            def setUpClass(cls):\n+                pass\n+\n+            def test_two(self):\n+                pass\n+        \"\"\"\n+    )\n+    # Run without -v flag and check no fixture name is visible\n+    result = pytester.runpytest(\"--fixtures\")\n+    assert result.ret == 0\n+    result.stdout.no_fnmatch_line(\"*unittest_setUpClass_fixture*\")\n+\n+    # Run with -v flag and check fixture names are visible\n+    result = pytester.runpytest(\"--fixtures\", \"-v\")\n+    assert result.ret == 0\n+    result.stdout.fnmatch_lines([\n+        \"*unittest_setUpClass_fixture_MyTestCase1*\",\n+        \"*unittest_setUpClass_fixture_MyTestCase2*\"\n+    ])\n     testpath = pytester.makepyfile(\n         \"\"\"\n         import unittest\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..718f6d6 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -574,6 +574,32 @@ def test_class_weights_cv():\n     assert_array_equal(reg.predict([[-.2, 2]]), np.array([-1]))\n \n \n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    rng = np.random.RandomState(42)\n+\n+    n_samples = 8\n+    n_features = 5\n+    x = rng.randn(n_samples, n_features)\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+    # with len(y.shape) == 1\n+    y = np.array([1, 1, 1, -1, -1, 1, -1, -1])\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_alphas)\n+\n+    # with len(y.shape) == 2, simulate multi-class classification\n+    y_multiclass = np.array([[1, 1, 1, -1, -1, 1, -1, -1],\n+                             [1, -1, 1, -1, 1, -1, 1, 1],\n+                             [-1, -1, 1, -1, -1, 1, -1, 1]]).T\n+    n_targets = y_multiclass.shape[1]\n+    r.fit(x, y_multiclass)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n+\n+\n def test_ridgecv_store_cv_values():\n     # Test _RidgeCV's store_cv_values attribute.\n     rng = rng = np.random.RandomState(42)\n",
  "scikit-learn__scikit-learn-10844": "",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..65229ce 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -558,8 +558,14 @@ def test_feature_names():\n     for idx, name in enumerate(feature_names):\n         assert_equal(idx, cv.vocabulary_.get(name))\n \n+def test_countvectorizer_vocabulary_get_feature_names():\n+    # Test when vocabulary is provided, get_feature_names should not raise an error\n+    vocab = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    cv = CountVectorizer(vocabulary=vocab)\n \n-def test_vectorizer_max_features():\n+    # Since vocabulary is provided, get_feature_names should work without fitting\n+    feature_names = cv.get_feature_names()\n+    assert_array_equal(vocab, feature_names)\n     vec_factories = (\n         CountVectorizer,\n         TfidfVectorizer,\n",
  "scikit-learn__scikit-learn-11310": "",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..b2a2a31 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -21,6 +21,9 @@ from sklearn.utils.testing import assert_true\n from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import ignore_warnings\n from sklearn.utils.testing import assert_warns_message\n+from sklearn.metrics.scorer import get_scorer\n+from sklearn.utils._testing import assert_array_almost_equal\n+from sklearn.datasets import make_classification\n \n from sklearn.exceptions import ConvergenceWarning\n from sklearn.exceptions import ChangedBehaviorWarning\n",
  "scikit-learn__scikit-learn-12585": "diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 4752f9c..a000b43 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -154,6 +154,24 @@ def test_clone_nan():\n     assert clf.empty is clf2.empty\n \n \n+from sklearn.preprocessing import StandardScaler\n+from sklearn.base import clone\n+from sklearn.utils.estimator_checks import check_estimator\n+\n+class MyEstimatorWithClassParameter:\n+    def __init__(self, empty=None):\n+        self.empty = empty\n+\n+    def get_params(self, deep=True):\n+        return {\"empty\": self.empty}\n+\n+def test_clone_estimator_types():\n+    # Check that clone works for parameters that are types rather than instances\n+    clf = MyEstimatorWithClassParameter(empty=StandardScaler)\n+    clf2 = clone(clf)\n+\n+    assert clf.empty is clf2.empty\n+\n def test_clone_sparse_matrices():\n     sparse_matrix_classes = [\n         getattr(sp, name)\n",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..b1aa27e 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -19,14 +19,48 @@ from sklearn.utils.testing import TempMemmap\n from sklearn.exceptions import ConvergenceWarning\n from sklearn import linear_model, datasets\n from sklearn.linear_model.least_angle import _lars_path_residues\n-\n-diabetes = datasets.load_diabetes()\n+from sklearn.linear_model.least_angle import LassoLarsIC\n X, y = diabetes.data, diabetes.target\n \n # TODO: use another dataset that has multiple drops\n \n \n-def test_simple():\n+def test_lasso_larsic_copy_X_init_vs_fit():\n+    \"\"\"\n+    Test that `copy_X` parameter in `__init__` is not overwritten by default in `fit`.\n+    Also, verify that `copy_X` passed to `fit` overrides the `__init__` parameter.\n+    \"\"\"\n+    rng = np.random.RandomState(0)\n+    X = rng.normal(0, 1, (100, 5))\n+    X_copy = X.copy()\n+    y = X[:, 2]\n+\n+    # Test with copy_X=False in __init__, default in fit\n+    lasso_lars = LassoLarsIC(copy_X=False, precompute=False)\n+    lasso_lars.fit(X, y)\n+    assert not np.array_equal(X, X_copy), \\\n+        \"copy_X=False in init should modify original X\"\n+\n+    # Test with copy_X=True in __init__, default in fit\n+    X_copy = X.copy()  # reset the copy\n+    lasso_lars = LassoLarsIC(copy_X=True, precompute=False)\n+    lasso_lars.fit(X, y)\n+    assert np.array_equal(X, X_copy), \\\n+        \"copy_X=True in init should not modify original X\"\n+\n+    # Test with override: copy_X=False in fit\n+    X_copy = X.copy()  # reset the copy\n+    lasso_lars = LassoLarsIC(copy_X=True, precompute=False)\n+    lasso_lars.fit(X, y, copy_X=False)\n+    assert not np.array_equal(X, X_copy), \\\n+        \"copy_X=False in fit should modify original X even if init has copy_X=True\"\n+\n+    # Test with override: copy_X=True in fit\n+    X_copy = X.copy()  # reset the copy\n+    lasso_lars = LassoLarsIC(copy_X=False, precompute=False)\n+    lasso_lars.fit(X, y, copy_X=True)\n+    assert np.array_equal(X, X_copy), \\\n+        \"copy_X=True in fit should not modify original X even if init has copy_X=False\"\n     # Principle of Lars is to keep covariances tied and decreasing\n \n     # also test verbose output\n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..35d616d 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -481,7 +481,37 @@ def test_shuffle_kfold_stratifiedkfold_reproducibility():\n                     np.testing.assert_array_equal(test_a, test_b)\n \n \n+import numpy as np\n+from sklearn.model_selection import StratifiedKFold\n+\n def test_shuffle_stratifiedkfold():\n+    # Test to ensure that with different random states, StratifiedKFold \n+    # produces different test sets when shuffle is True.\n+    X = np.arange(20)\n+    y = [0] * 10 + [1] * 10\n+\n+    skf1 = StratifiedKFold(n_splits=5, shuffle=True, random_state=0)\n+    skf2 = StratifiedKFold(n_splits=5, shuffle=True, random_state=1)\n+\n+    test_indices1 = [test_idx for _, test_idx in skf1.split(X, y)]\n+    test_indices2 = [test_idx for _, test_idx in skf2.split(X, y)]\n+\n+    assert not all(np.array_equal(t1, t2) for t1, t2 in zip(test_indices1, test_indices2)), \\\n+        \"Test indices from different random states should not be equal\"\n+\n+def test_stratifiedkfold_no_shuffle():\n+    # When shuffle=False, test indices should remain the same for the same random state\n+    X = np.arange(20)\n+    y = [0] * 10 + [1] * 10\n+\n+    skf1 = StratifiedKFold(n_splits=5, shuffle=False, random_state=0)\n+    skf2 = StratifiedKFold(n_splits=5, shuffle=False, random_state=0)\n+\n+    test_indices1 = [test_idx for _, test_idx in skf1.split(X, y)]\n+    test_indices2 = [test_idx for _, test_idx in skf2.split(X, y)]\n+\n+    assert all(np.array_equal(t1, t2) for t1, t2 in zip(test_indices1, test_indices2)), \\\n+        \"Test indices should be the same when shuffle is False and random state is the same\"\n     # Check that shuffling is happening when requested, and for proper\n     # sample coverage\n     X_40 = np.ones(40)\n",
  "scikit-learn__scikit-learn-13135": "",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..e430310 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -598,6 +598,14 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n \n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n+\n def test_gaussian_mixture_fit():\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\nindex 318940e..f050a33 100644\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -1058,7 +1058,30 @@ def test_pipeline_memory():\n         shutil.rmtree(cachedir)\n \n \n-def test_make_pipeline_memory():\n+def test_pipeline_length():\n+    from sklearn.pipeline import Pipeline\n+    from sklearn.svm import SVC\n+    from sklearn.feature_selection import SelectKBest\n+    from sklearn.feature_selection import f_classif\n+\n+    # Define a pipeline with two steps\n+    pipeline = Pipeline([\n+        ('feature_selection', SelectKBest(score_func=f_classif, k=10)),\n+        ('classification', SVC(kernel='linear'))\n+    ])\n+\n+    # Check that the length of the pipeline is 2\n+    assert len(pipeline) == 2\n+\n+    # Define a pipeline with three steps\n+    pipeline = Pipeline([\n+        ('feature_selection', SelectKBest(score_func=f_classif, k=10)),\n+        ('classification', SVC(kernel='linear')),\n+        ('another_step', SelectKBest(score_func=f_classif, k=5))\n+    ])\n+\n+    # Check that the length of the pipeline is 3\n+    assert len(pipeline) == 3\n     cachedir = mkdtemp()\n     if LooseVersion(joblib_version) < LooseVersion('0.12'):\n         # Deal with change of API in joblib\n@@ -1070,4 +1093,4 @@ def test_make_pipeline_memory():\n     pipeline = make_pipeline(DummyTransf(), SVC())\n     assert pipeline.memory is None\n \n-    shutil.rmtree(cachedir)\n+    shutil.rmtree(cachedir)\n",
  "scikit-learn__scikit-learn-13496": "",
  "scikit-learn__scikit-learn-13779": "",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..d27c5b9 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -397,7 +397,40 @@ def test_export_text():\n     assert export_text(reg, decimals=1, show_weights=True) == expected_report\n \n \n-def test_plot_tree_entropy(pyplot):\n+def test_export_text_single_feature():\n+    # Test export_text with a decision tree that has only one feature\n+    from sklearn.tree import DecisionTreeClassifier\n+    from sklearn.tree import export_text\n+    from sklearn.datasets import load_iris\n+\n+    # Load iris dataset and select only one feature\n+    X, y = load_iris(return_X_y=True)\n+    X_single_feature = X[:, 0].reshape(-1, 1)\n+\n+    # Train decision tree classifier\n+    tree = DecisionTreeClassifier(random_state=0)\n+    tree.fit(X_single_feature, y)\n+\n+    # Expected output format for single-feature tree\n+    expected_report = (\n+        \"|--- sepal_length <= ...\\n\"  # The exact value depends on the trained tree\n+        \"|   |--- class: ...\\n\"       # Actual class prediction\n+        \"|--- sepal_length >  ...\\n\"\n+        \"|   |--- class: ...\\n\"\n+    ).split('\\n')[0]  # Just check we don't get an IndexError\n+\n+    # Test export_text function with single feature\n+    tree_text = export_text(tree, feature_names=['sepal_length'])\n+    assert expected_report in tree_text\n+\n+    # Ensure no IndexError occurs\n+    try:\n+        export_text(tree, feature_names=['sepal_length'])\n+        no_index_error = True\n+    except IndexError:\n+        no_index_error = False\n+    \n+    assert no_index_error, \"IndexError was raised with a single-feature tree\"\n     # mostly smoke tests\n     # Check correctness of export_graphviz for criterion = entropy\n     clf = DecisionTreeClassifier(max_depth=3,\n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..7b0a96f 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1531,8 +1531,36 @@ def test_LogisticRegressionCV_GridSearchCV_elastic_net_ovr():\n     assert (lrcv.predict(X_train) == gs.predict(X_train)).mean() >= .8\n     assert (lrcv.predict(X_test) == gs.predict(X_test)).mean() >= .8\n \n+import pytest\n+import numpy as np\n+from sklearn.linear_model import LogisticRegressionCV\n+from sklearn.datasets import make_classification\n \n+@pytest.mark.parametrize('penalty', ('l2', 'elasticnet'))\n @pytest.mark.parametrize('multi_class', ('ovr', 'multinomial'))\n+def test_LogisticRegressionCV_no_refit(penalty, multi_class):\n+    # Test LogisticRegressionCV attribute shapes when refit is False\n+    n_classes = 3\n+    n_features = 20\n+    X, y = make_classification(n_samples=200, n_classes=n_classes,\n+                               n_informative=n_classes, n_features=n_features,\n+                               random_state=0)\n+    Cs = np.logspace(-4, 4, 3)\n+    if penalty == 'elasticnet':\n+        l1_ratios = np.linspace(0, 1, 2)\n+    else:\n+        l1_ratios = None\n+\n+    lrcv = LogisticRegressionCV(penalty=penalty, Cs=Cs, solver='saga',\n+                                l1_ratios=l1_ratios, random_state=0,\n+                                multi_class=multi_class, refit=False)\n+    lrcv.fit(X, y)\n+    if penalty == 'elasticnet':\n+        assert lrcv.C_.shape == (n_classes,)\n+        assert lrcv.l1_ratio_.shape == (n_classes,)\n+    else:\n+        assert lrcv.C_.shape == (n_classes,)\n+    assert lrcv.coef_.shape == (n_classes, n_features)\n def test_LogisticRegressionCV_no_refit(multi_class):\n     # Test LogisticRegressionCV attribute shapes when refit is False\n \n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/tests/test_show_versions.py b/sklearn/utils/tests/test_show_versions.py\nindex fa39255..887a234 100644\n--- a/sklearn/utils/tests/test_show_versions.py\n+++ b/sklearn/utils/tests/test_show_versions.py\n@@ -24,10 +24,18 @@ def test_get_deps_info():\n     assert 'pandas' in deps_info\n     assert 'matplotlib' in deps_info\n \n+def test_joblib_in_deps_info():\n+    deps_info = _get_deps_info()\n+    assert 'joblib' in deps_info, \"'joblib' should be included in the dependencies info\"\n+\n+def test_show_versions_includes_joblib(capsys):\n+    show_versions()\n+    out, err = capsys.readouterr()\n+    assert 'joblib' in out, \"'joblib' should be listed in the output of show_versions\"\n \n def test_show_versions_with_blas(capsys):\n     show_versions()\n     out, err = capsys.readouterr()\n     assert 'python' in out\n     assert 'numpy' in out\n-    assert 'BLAS' in out\n+    assert 'BLAS' in out\n",
  "scikit-learn__scikit-learn-14496": "diff --git a/sklearn/cluster/tests/test_optics.py b/sklearn/cluster/tests/test_optics.py\nindex 6c9dac3..91958f6 100644\n--- a/sklearn/cluster/tests/test_optics.py\n+++ b/sklearn/cluster/tests/test_optics.py\n@@ -78,7 +78,50 @@ def test_the_extract_xi_labels(ordering, clusters, expected):\n     assert_array_equal(labels, expected)\n \n \n+from sklearn.cluster import OPTICS\n+from sklearn.utils import shuffle\n+import numpy as np\n+from numpy.testing import assert_array_equal\n+\n def test_extract_xi():\n+    # Test for float min_samples\n+    rng = np.random.RandomState(0)\n+    n_points_per_cluster = 5\n+\n+    C1 = [-5, -2] + .8 * rng.randn(n_points_per_cluster, 2)\n+    C2 = [4, -1] + .1 * rng.randn(n_points_per_cluster, 2)\n+    C3 = [1, -2] + .2 * rng.randn(n_points_per_cluster, 2)\n+    C4 = [-2, 3] + .3 * rng.randn(n_points_per_cluster, 2)\n+    C5 = [3, -2] + .6 * rng.randn(n_points_per_cluster, 2)\n+    C6 = [5, 6] + .2 * rng.randn(n_points_per_cluster, 2)\n+\n+    X = np.vstack((C1, C2, C3, C4, C5, np.array([[100, 100]]), C6))\n+    expected_labels = np.r_[[2] * 5, [0] * 5, [1] * 5, [3] * 5, [1] * 5,\n+                            -1, [4] * 5]\n+    X, expected_labels = shuffle(X, expected_labels, random_state=rng)\n+\n+    # Check float min_samples and min_cluster_size\n+    clust = OPTICS(min_samples=0.1, min_cluster_size=0.08,\n+                   max_eps=20, cluster_method='xi',\n+                   xi=0.4).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n+\n+    # Additional test cases with different float values and edge cases\n+    clust = OPTICS(min_samples=0.05, min_cluster_size=0.05,\n+                   max_eps=20, cluster_method='xi',\n+                   xi=0.3).fit(X)\n+    assert clust is not None  # Verify no exception and a model is created\n+\n+    clust = OPTICS(min_samples=1.0, min_cluster_size=1.0,\n+                   max_eps=20, cluster_method='xi',\n+                   xi=0.2).fit(X)\n+    assert len(clust.labels_) == len(X)  # Verify all points are labeled\n+\n+    # Test the lower bound for very small min_samples, should be treated as min_samples=2\n+    clust = OPTICS(min_samples=0.01, min_cluster_size=0.01,\n+                   max_eps=20, cluster_method='xi',\n+                   xi=0.2).fit(X)\n+    assert clust is not None  # Ensure no exceptions occur\n     # small and easy test (no clusters around other clusters)\n     # but with a clear noise data.\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-14710": "",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..981d95d 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,6 +680,22 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n+from scipy import sparse\n+import numpy as np\n+from sklearn import svm\n+\n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for #14893\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size  # No support vectors\n+    assert not model.dual_coef_.data.size  # dual_coef_ should also be empty\n+\n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..36651cb 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -96,9 +96,37 @@ def test_strip_accents():\n     a = \"this is \u00e0 test\"\n     expected = 'this is a test'\n     assert strip_accents_unicode(a) == expected\n+def test_strip_accents_nfkd():\n+    # strings that are already decomposed\n+    a = \"o\\u0308\"  # o with diaresis\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # combining marks by themselves\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"  # combining grave, acute, circumflex, tilde\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Multiple combining marks on one character\n+    a = \"o\\u0308\\u0304\"  # o with diaresis and macron\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Test with the example from the issue description\n+    s1 = chr(241)  # LATIN SMALL LETTER N WITH TILDE\n+    s2 = chr(110) + chr(771)  # LATIN SMALL LETTER N followed by COMBINING TILDE\n+\n+    # They should both be normalized to \"n\"\n+    assert strip_accents_unicode(s1) == \"n\"\n+    assert strip_accents_unicode(s2) == \"n\"\n \n+    # Test with characters in NFC and NFD forms\n+    nfc = \"\u00e9\"  # NFC: LATIN SMALL LETTER E WITH ACUTE\n+    nfd = \"e\\u0301\"  # NFD: LATIN SMALL LETTER E followed by COMBINING ACUTE ACCENT\n \n-def test_to_ascii():\n+    # Both should be normalized to \"e\"\n+    assert strip_accents_unicode(nfc) == \"e\"\n+    assert strip_accents_unicode(nfd) == \"e\"\n     # check some classical latin accentuated symbols\n     a = '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb'\n     expected = 'aaaaaaceeee'\n",
  "scikit-learn__scikit-learn-25102": "",
  "scikit-learn__scikit-learn-25232": "",
  "scikit-learn__scikit-learn-25931": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3714d1a..46e1078 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -332,10 +332,62 @@ def test_base_estimator_property_deprecated():\n     y = np.array([1, 0])\n     model = IsolationForest()\n     model.fit(X, y)\n+import warnings\n+import pytest\n+import numpy as np\n+from sklearn.ensemble import IsolationForest\n+\n+def test_iforest_preserve_feature_names():\n+    \"\"\"Check that feature names are preserved when contamination is not \"auto\".\n+    \n+    Feature names are required for consistency checks during scoring.\n+    \n+    Non-regression test for Issue #25844\n+    \"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    rng = np.random.RandomState(0)\n \n+    X = pd.DataFrame(data=rng.randn(4, 1), columns=[\"a\"])\n+    model = IsolationForest(random_state=0, contamination=0.05)\n+\n+    with warnings.catch_warnings():\n+        warnings.simplefilter(\"error\", UserWarning)\n+        model.fit(X)\n+\n+def test_iforest_ndarray_input_with_contamination():\n+    \"\"\"Check that no warning is raised when using ndarray with contamination.\"\"\"\n+    rng = np.random.RandomState(0)\n+    X = rng.randn(4, 1)\n+    model = IsolationForest(random_state=0, contamination=0.05)\n+    \n+    with warnings.catch_warnings():\n+        warnings.simplefilter(\"error\", UserWarning)\n+        model.fit(X)\n+\n+def test_iforest_dataframe_input_with_auto_contamination():\n+    \"\"\"Check that no warning is raised when using DataFrame with auto contamination.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    rng = np.random.RandomState(0)\n+\n+    X = pd.DataFrame(data=rng.randn(4, 1), columns=[\"a\"])\n+    model = IsolationForest(random_state=0, contamination='auto')\n+\n+    with warnings.catch_warnings():\n+        warnings.simplefilter(\"error\", UserWarning)\n+        model.fit(X)\n+\n+def test_iforest_ndarray_input_with_auto_contamination():\n+    \"\"\"Check that no warning is raised when using ndarray with auto contamination.\"\"\"\n+    rng = np.random.RandomState(0)\n+    X = rng.randn(4, 1)\n+    model = IsolationForest(random_state=0, contamination='auto')\n+\n+    with warnings.catch_warnings():\n+        warnings.simplefilter(\"error\", UserWarning)\n+        model.fit(X)\n     warn_msg = (\n         \"Attribute `base_estimator_` was deprecated in version 1.2 and \"\n         \"will be removed in 1.4. Use `estimator_` instead.\"\n     )\n     with pytest.warns(FutureWarning, match=warn_msg):\n-        model.base_estimator_\n+        model.base_estimator_\n",
  "scikit-learn__scikit-learn-25973": "",
  "scikit-learn__scikit-learn-26323": "",
  "scikit-learn__scikit-learn-9288": "",
  "sphinx-doc__sphinx-10323": "diff --git a/tests/test_directive_code.py b/tests/test_directive_code.py\nindex 949c70e..156abab 100644\n--- a/tests/test_directive_code.py\n+++ b/tests/test_directive_code.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the code-block directive.\"\"\"\n \n import os\n@@ -250,6 +251,26 @@ def test_LiteralIncludeReader_dedent(literal_inc_path):\n                        \"    pass\\n\"\n                        \"\\n\")\n \n+@pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n+def test_LiteralIncludeReader_prepend_indentation(literal_inc_path):\n+    # Start and end lines for the content to include\n+    options = {\n+        'start-at': '<groupId>com.github.ekryd.sortpom</groupId>',\n+        'end-at': '</plugin>',\n+        'prepend': '      <plugin>',\n+        'language': 'xml'\n+    }\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    assert content == (\"      <plugin>\\n\"\n+                       \"        <groupId>com.github.ekryd.sortpom</groupId>\\n\"\n+                       \"        <artifactId>sortpom-maven-plugin</artifactId>\\n\"\n+                       \"        <version>2.15.0</version>\\n\"\n+                       \"        <configuration>\\n\"\n+                       \"          <verifyFailOn>strict</verifyFailOn>\\n\"\n+                       \"        </configuration>\\n\"\n+                       \"      </plugin>\\n\")\n+\n \n @pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n def test_LiteralIncludeReader_tabwidth(testroot):\n",
  "sphinx-doc__sphinx-10449": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 82ec43a..84adbc9 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1024,6 +1024,24 @@ def test_autodoc_typehints_description_no_undoc_doc_rtype(app):\n             '      None\\n' == context)\n \n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\"})\n+def test_autodoc_typehints_description_class_return_type(app):\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: target.typehints.Square\\n',\n+        encoding='utf8'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n+    assert ('class target.typehints.Square\\n'\n+            '\\n'\n+            '   A class representing a square figure.\\n'\n+            '\\n'\n+            '   __init__(width, height)\\n'\n+            '\\n'\n+            '      Initialize self.  See help(type(self)) for accurate signature.\\n' not in context)\n+\n+\n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\"})\n def test_autodoc_typehints_description_with_documented_init(app):\n",
  "sphinx-doc__sphinx-10466": "diff --git a/tests/test_build_gettext.py b/tests/test_build_gettext.py\nindex a6fc946..3b8218f 100644\n--- a/tests/test_build_gettext.py\n+++ b/tests/test_build_gettext.py\n@@ -1,10 +1,31 @@\n+\n+def test_catalog_no_duplicates():\n+    \"\"\"Test that the catalog does not contain duplicate locations.\"\"\"\n+    \n+    catalog = Catalog()\n+    \n+    # Add duplicate and unique messages\n+    catalog.add(\"Type\", MsgOrigin('manual/modeling/hair.rst', 0))\n+    catalog.add(\"Type\", MsgOrigin('manual/modeling/hair.rst', 0))\n+    catalog.add(\"Type\", MsgOrigin('manual/render/shader_nodes/vector/vector_rotate.rst', 38))\n+    \n+    # Verify that duplicates are removed and unique locations remain\n+    assert len(list(catalog)) == 1\n+    \n+    msg = list(catalog)[0]\n+    assert msg.text == \"Type\"\n+    assert msg.locations == [\n+        ('manual/modeling/hair.rst', 0),\n+        ('manual/render/shader_nodes/vector/vector_rotate.rst', 38)\n+    ]\n+\n \"\"\"Test the build process with gettext builder with the test root.\"\"\"\n \n import gettext\n import os\n import re\n import subprocess\n-from subprocess import PIPE, CalledProcessError\n+from sphinx.builders.gettext import Catalog, MsgOrigin\n \n import pytest\n \n",
  "sphinx-doc__sphinx-10673": "diff --git a/tests/test_environment_toctree.py b/tests/test_environment_toctree.py\nindex d3bf6a2..10b4da3 100644\n--- a/tests/test_environment_toctree.py\n+++ b/tests/test_environment_toctree.py\n@@ -337,6 +337,20 @@ def test_get_toctree_for_includehidden(app):\n                  [list_item, compact_paragraph, reference, \"foo.1\"],\n                  [list_item, compact_paragraph, reference, \"foo.2\"]))\n \n+@pytest.mark.sphinx('html', testroot='toctree-index')\n+def test_toctree_includes_indices(app):\n+    app.build()\n+    toctree = app.env.tocs['index']\n+    assert_node(toctree,\n+                [bullet_list, list_item, compact_paragraph, \n+                 [bullet_list, (addnodes.toctree, \n+                                addnodes.toctree, \n+                                addnodes.toctree)]])\n+    assert_node(toctree[0][0][0], addnodes.toctree,\n+                caption=None, glob=False, hidden=False,\n+                titlesonly=False, maxdepth=-1, numbered=0,\n+                entries=[(None, 'genindex'), (None, 'modindex'), (None, 'search')])\n+\n     assert_node(toctree[1][0][0][0], reference, refuri=\"foo\", secnumber=[1])\n     assert_node(toctree[1][0][1][0][0][0], reference, refuri=\"quux\", secnumber=[1, 1])\n     assert_node(toctree[1][0][1][1][0][0], reference, refuri=\"foo#foo-1\", secnumber=[1, 2])\n@@ -345,4 +359,4 @@ def test_get_toctree_for_includehidden(app):\n     assert_node(toctree[1][2][0][0], reference, refuri=\"http://sphinx-doc.org/\")\n \n     assert_node(toctree[2],\n-                [bullet_list, list_item, compact_paragraph, reference, \"baz\"])\n+                [bullet_list, list_item, compact_paragraph, reference, \"baz\"])\n",
  "sphinx-doc__sphinx-7440": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 975a00f..f856ffd 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -156,6 +156,36 @@ def test_glossary_warning(app, status, warning):\n             \"\\n\"\n             \"   term2\\n\")\n     restructuredtext.parse(app, text, \"case1\")\n+\n+\n+def test_glossary_case_sensitivity(app):\n+    text = (\".. glossary::\\n\"\n+            \"\\n\"\n+            \"   mysql\\n\"\n+            \"       A relational database management system (RDBMS).\\n\"\n+            \"\\n\"\n+            \"   MySQL\\n\"\n+            \"       A popular open-source RDBMS.\\n\")\n+\n+    # parse the document\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (\n+        [glossary, definition_list, ([definition_list_item, ([term, (\"mysql\", index)],\n+                                                             definition)],\n+                                     [definition_list_item, ([term, (\"MySQL\", index)],\n+                                                             definition)])],\n+    ))\n+    \n+    # check index entries and ensure they consider case sensitivity\n+    assert_node(doctree[0][0][0][0][1],\n+                entries=[(\"single\", \"mysql\", \"term-mysql\", \"main\", None)])\n+    assert_node(doctree[0][0][1][0][1],\n+                entries=[(\"single\", \"MySQL\", \"term-MySQL\", \"main\", None)])\n+\n+    # index\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert (\"mysql\", \"mysql\", \"term\", \"index\", \"term-mysql\", -1) in objects\n+    assert (\"MySQL\", \"MySQL\", \"term\", \"index\", \"term-MySQL\", -1) in objects\n     assert (\"case1.rst:4: WARNING: glossary terms must not be separated by empty lines\"\n             in warning.getvalue())\n \n",
  "sphinx-doc__sphinx-7757": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex b3053d1..e2eda6e 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -325,6 +325,17 @@ def test_signature_from_str_complex_annotations():\n \n def test_signature_from_str_kwonly_args():\n     sig = inspect.signature_from_str('(a, *, b)')\n+    assert sig.parameters['b'].default == Parameter.empty  # Ensure no default for keyword-only without default\n+\n+@pytest.mark.parametrize(\"signature_str, expected_params, expected_defaults\", [\n+    (\"(a, b=0, /, c=1)\", ['a', 'b', 'c'], [Parameter.empty, '0', '1']),\n+    (\"(x, y=2, /)\", ['x', 'y'], [Parameter.empty, '2']),\n+])\n+def test_signature_from_str_positional_only_defaults(signature_str, expected_params, expected_defaults):\n+    sig = inspect.signature_from_str(signature_str)\n+    assert list(sig.parameters.keys()) == expected_params\n+    for i, param in enumerate(expected_params):\n+        assert sig.parameters[param].default == expected_defaults[i]\n     assert list(sig.parameters.keys()) == ['a', 'b']\n     assert sig.parameters['a'].kind == Parameter.POSITIONAL_OR_KEYWORD\n     assert sig.parameters['a'].default == Parameter.empty\n",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..8c0a9a1 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -52,7 +53,27 @@ def test_MockObject():\n     assert isinstance(obj.other_method(), SubClass)\n \n \n-def test_mock():\n+def test_generic_typed_class_mock():\n+    from typing import TypeVar, Generic\n+    \n+    T = TypeVar('T')\n+\n+    class SomeGenericClass(Generic[T]):\n+        \"\"\"A generic class\"\"\"\n+\n+        def __init__(self, value: T):\n+            self.value = value\n+\n+        def get_value(self) -> T:\n+            return self.value\n+\n+    class SubClass3(SomeGenericClass[int]):\n+        \"\"\"A subclass of a generic class with int type\"\"\"\n+\n+    obj3 = SubClass3(10)\n+    assert SubClass3.__doc__ == \"A subclass of a generic class with int type\"\n+    assert isinstance(obj3, SubClass3)\n+    assert obj3.get_value() == 10\n     modname = 'sphinx.unknown'\n     submodule = modname + '.submodule'\n     assert modname not in sys.modules\n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex 464108d..2c4205b 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -1261,6 +1261,13 @@ def test_automethod_for_builtin(app):\n         '',\n     ]\n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_decorated_init_method(app):\n+    actual = do_autodoc(app, 'class', 'target.decorator.Foo')\n+    assert '.. py:method:: __init__' in actual\n+    assert '   :module: target.decorator' in actual\n+    assert '   docstring of decorated __init__' in actual\n+\n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_automethod_for_decorated(app):\n@@ -1272,6 +1279,13 @@ def test_automethod_for_decorated(app):\n         '',\n     ]\n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_decorated_init_method(app):\n+    actual = do_autodoc(app, 'class', 'target.decorator.Foo')\n+    assert '.. py:method:: __init__' in actual\n+    assert '   :module: target.decorator' in actual\n+    assert '   docstring of decorated __init__' in actual\n+\n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_abstractmethods(app):\n",
  "sphinx-doc__sphinx-7985": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 5b1b2ed..72af7e7 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -30,7 +30,9 @@ def test_defaults(app, status, warning):\n     # images should fail\n     assert \"Not Found for url: https://www.google.com/image.png\" in content\n     assert \"Not Found for url: https://www.google.com/image2.png\" in content\n-    assert len(content.splitlines()) == 5\n+    # looking for local file should fail\n+    assert \"[local] doesntexist\" in content  # Check for the local link 'doesntexist'\n+    assert len(content.splitlines()) == 6\n \n \n @pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n@@ -47,7 +49,14 @@ def test_defaults_json(app, status, warning):\n                  \"info\"]:\n         assert attr in row\n \n-    assert len(content.splitlines()) == 8\n+    # looking for local file should fail\n+    dnelocalrow = next(row for row in rows if row['uri'] == 'doesntexist')\n+    assert dnelocalrow['filename'] == 'links.txt'\n+    assert dnelocalrow['lineno'] > 0  # Local line number check\n+    assert dnelocalrow['status'] == 'local'\n+    assert dnelocalrow['code'] == 0\n+    assert dnelocalrow['uri'] == 'doesntexist'\n+    assert len(content.splitlines()) == 9\n     assert len(rows) == 8\n     # the output order of the rows is not stable\n     # due to possible variance in network latency\n",
  "sphinx-doc__sphinx-8035": "",
  "sphinx-doc__sphinx-8120": "diff --git a/tests/test_intl.py b/tests/test_intl.py\nindex 58339b1..6e489f6 100644\n--- a/tests/test_intl.py\n+++ b/tests/test_intl.py\n@@ -1286,6 +1286,36 @@ def test_image_glob_intl_using_figure_language_filename(app):\n                 candidates={'application/pdf': 'subdir/svgimg.pdf',\n                             'image/svg+xml': 'subdir/svgimg.svg'})\n \n-\n-def getwarning(warnings):\n-    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n+from babel.messages import pofile\n+from sphinx import locale\n+\n+def test_custom_locale_override(make_app, app_params, sphinx_test_tempdir):\n+    \"\"\"Test that custom translations override default translations.\"\"\"\n+    try:\n+        # clear translators cache\n+        locale.translators.clear()\n+\n+        # prepare message catalog (.po)\n+        locale_dir = sphinx_test_tempdir / 'basic' / 'locales' / 'da' / 'LC_MESSAGES'\n+        locale_dir.makedirs()\n+        with (locale_dir / 'sphinx.po').open('wb') as f:\n+            catalog = Catalog()\n+            catalog.add('Fig. %s', 'Foobar %s')\n+            catalog.add('Listing %s', 'Whatever %s')\n+            pofile.write_po(f, catalog)\n+\n+        # construct application and convert po file to .mo\n+        args, kwargs = app_params\n+        app = make_app(*args, **kwargs)\n+        assert (locale_dir / 'sphinx.mo').exists()\n+        assert app.translator.gettext('Fig. %s') == 'Foobar %s'\n+        assert app.translator.gettext('Listing %s') == 'Whatever %s'\n+\n+        app.build()\n+        content = (app.outdir / 'index.html').read_text()\n+        \n+        assert 'Foobar 1' in content\n+        assert 'Whatever 1' in content\n+    finally:\n+        locale.translators.clear()\n+    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n",
  "sphinx-doc__sphinx-8269": "",
  "sphinx-doc__sphinx-8459": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex d1881df..cb7fda2 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_configs\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -8,6 +9,58 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+from sphinx.testing.path import path\n+from sphinx.testing.util import SphinxTestApp\n+from sphinx.util import logging\n+import pytest\n+import sys\n+\n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    srcdir='autodoc_typehints_description_and_type_aliases_bugfix',\n+                    confoverrides={'autodoc_typehints': \"description\",\n+                                   'autodoc_type_aliases': {'JSONObject': 'types.JSONObject'}})\n+def test_autodoc_typehints_description_and_type_aliases_bugfix(app: SphinxTestApp):\n+    (app.srcdir / 'types.py').write_text('''\n+from typing import Any, Dict\n+\n+JSONObject = Dict[str, Any]\n+\n+def sphinx_doc(data: JSONObject) -> JSONObject:\n+    \"\"\"Does it work.\n+\n+    Args:\n+        data: Does it args.\n+\n+    Returns:\n+        Does it work in return.\n+    \"\"\"\n+    return {}\n+''')\n+    (app.srcdir / 'conf.py').write_text('''\n+autodoc_typehints = 'description'\n+autodoc_type_aliases = {\n+    'JSONObject': 'types.JSONObject',\n+}\n+''')\n+    (app.srcdir / 'index.rst').write_text('.. automodule:: types\\n   :members:\\n')\n+\n+    app.build()\n+    content = (app.outdir / 'index.txt').read_text()\n+    expected_output = (\n+        \"types.sphinx_doc(data)\\n\"\n+        \"Does it work.\\n\"\n+        \"\\n\"\n+        \"Parameters\\n\"\n+        \"data (types.JSONObject) -- Does it args.\\n\"\n+        \"\\n\"\n+        \"Returns\\n\"\n+        \"Does it work in return.\\n\"\n+        \"\\n\"\n+        \"Return type\\n\"\n+        \"types.JSONObject\\n\"\n+    )\n+    assert expected_output in content\n+\n import platform\n import sys\n \n",
  "sphinx-doc__sphinx-8475": "",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8721": "diff --git a/tests/test_ext_viewcode.py b/tests/test_ext_viewcode.py\nindex d4fba47..6484d76 100644\n--- a/tests/test_ext_viewcode.py\n+++ b/tests/test_ext_viewcode.py\n@@ -60,6 +60,13 @@ def test_linkcode(app, status, warning):\n     assert 'http://foobar/c/' in stuff\n     assert 'http://foobar/cpp/' in stuff\n \n+import pytest\n+from pathlib import Path\n+\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode', confoverrides={'viewcode_enable_epub': False})\n+def test_viewcode_epub_disabled(app, status, warning):\n+    app.builder.build_all()\n+    assert not (Path(app.outdir) / '_modules/spam/mod1.xhtml').exists()\n \n @pytest.mark.sphinx(testroot='ext-viewcode-find')\n def test_local_source_files(app, status, warning):\n",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex 3c31d3d..ca368ce 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -515,6 +515,16 @@ def test_dict_customtype():\n     # Type is unsortable, just check that it does not crash\n     assert \"<CustomType(2)>: 2\" in description\n \n+def test_object_description_enum():\n+    import enum\n+\n+    class MyEnum(enum.Enum):\n+        ValueA = 10\n+        ValueB = 20\n+\n+    assert inspect.object_description(MyEnum.ValueA) == \"MyEnum.ValueA\"\n+    assert inspect.object_description(MyEnum.ValueB) == \"MyEnum.ValueB\"\n+\n \n def test_getslots():\n     class Foo:\n",
  "sphinx-doc__sphinx-9320": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\nindex ff8df08..1c922b5 100644\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -12,7 +12,7 @@ import time\n from io import StringIO\n \n import pytest\n-\n+from os import path\n from sphinx import application\n from sphinx.cmd import quickstart as qs\n from sphinx.util.console import coloron, nocolor\n@@ -241,6 +241,22 @@ def test_default_filename(tempdir):\n     exec(conffile.read_text(), ns)\n \n \n+def test_exits_when_existing_confpy(monkeypatch):\n+    # Mock path.isfile to always return True, simulating an existing conf.py\n+    def mock_isfile(file_path):\n+        return True\n+\n+    monkeypatch.setattr(path, 'isfile', mock_isfile)\n+\n+    # Simulate user pressing 'Enter' to exit\n+    qs.term_input = {\n+        'Please enter a new root path (or just Enter to exit)': ''\n+    }\n+\n+    d = {}\n+    with pytest.raises(SystemExit):\n+        qs.ask_user(d)\n+\n def test_extensions(tempdir):\n     qs.main(['-q', '-p', 'project_name', '-a', 'author',\n              '--extensions', 'foo,bar,baz', tempdir])\n",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..39071f6 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -54,6 +54,7 @@ from sphinx.pycode import ast\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n     (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n+    (\"(1,)\", \"(1,)\"),                             # Tuple (single item)\n     (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n",
  "sphinx-doc__sphinx-9591": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 29731ea..7920f53 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -847,7 +847,39 @@ def test_pyproperty(app):\n     assert domain.objects['Class.prop2'] == ('index', 'Class.prop2', 'property', False)\n \n \n-def test_pydecorator_signature(app):\n+def test_pyproperty_type_cross_reference(app):\n+    text = (\".. py:class:: Square\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\"\n+            \"\\n\"\n+            \"   .. py:class:: Rectangle\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\")\n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n+\n+    # Check if the 'end' property in Square is properly cross-referenced\n+    assert_node(doctree[0][1][0], addnodes.index,\n+                entries=[('single', 'end (Square property)', 'Square.end', '', None)])\n+    assert_node(doctree[0][1][1], ([desc_signature, ([desc_annotation, \"property \"],\n+                                                     [desc_name, \"end\"],\n+                                                     [pending_xref, \"Point\"])],\n+                                   [desc_content, ()]))\n+\n+    # Check if the 'end' property in Rectangle is properly cross-referenced\n+    assert_node(doctree[1][1][0], addnodes.index,\n+                entries=[('single', 'end (Rectangle property)', 'Rectangle.end', '', None)])\n+    assert_node(doctree[1][1][1], ([desc_signature, ([desc_annotation, \"property \"],\n+                                                     [desc_name, \"end\"],\n+                                                     [pending_xref, \"Point\"])],\n+                                   [desc_content, ()]))\n+\n+    assert 'Square.end' in domain.objects\n+    assert domain.objects['Square.end'] == ('index', 'Square.end', 'property', False)\n+    assert 'Rectangle.end' in domain.objects\n+    assert domain.objects['Rectangle.end'] == ('index', 'Rectangle.end', 'property', False)\n     text = \".. py:decorator:: deco\"\n     domain = app.env.get_domain('py')\n     doctree = restructuredtext.parse(app, text)\n",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..0eecd42 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -754,9 +754,9 @@ def test_pymethod_options(app):\n     assert 'Class.meth4' in domain.objects\n     assert domain.objects['Class.meth4'] == ('index', 'Class.meth4', 'method', False)\n \n-    # :property:\n+    # :property: (Test for correct behavior without parentheses)\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])  # Ensure no parens\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
  "sphinx-doc__sphinx-9711": "",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..4d27413 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -236,6 +236,33 @@ def test_Point2D():\n     assert p2.distance(p3) == sqrt(17)/2\n \n \n+def test_issue_11617():\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point2D(2, 0)\n+    \n+    # Test distance between 3D and 2D point\n+    assert p1.distance(p2) == sqrt(5)\n+\n+    # Additional test: distance between two 3D points\n+    p3 = Point3D(4, 0, 6)\n+    assert p1.distance(p3) == sqrt((1 - 4)**2 + (0 - 0)**2 + (2 - 6)**2)\n+\n+    # Additional test: distance between two 2D points\n+    p4 = Point2D(4, 3)\n+    p5 = Point2D(0, 0)\n+    assert p4.distance(p5) == 5\n+\n+    # Additional test: distance between a 3D and 3D point (same point)\n+    assert p1.distance(p1) == 0\n+\n+    # Edge case: testing with a 2D point and a 3D point with a zero in the third dimension\n+    p6 = Point2D(1, 2)\n+    p7 = Point3D(3, 4, 0)\n+    assert p6.distance(p7) == sqrt((1 - 3)**2 + (2 - 4)**2 + 0**2)\n+\n+from sympy import sqrt\n+from sympy.geometry import Point, Point2D, Point3D\n+\n def test_issue_9214():\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..4b30788 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -741,7 +741,16 @@ def test_special_printers():\n     assert isinstance(func1(), mpi)\n     assert isinstance(func2(), mpi)\n \n-def test_true_false():\n+from sympy.utilities.lambdify import implemented_function\n+from sympy.core.numbers import Float\n+\n+def test_issue_12092():\n+    f = implemented_function('f', lambda x: x**2)\n+    g = implemented_function('g', lambda x: 2 * x)\n+    assert f(f(2)).evalf() == Float(16)\n+    assert f(g(2)).evalf() == Float(16)\n+    assert g(f(2)).evalf() == Float(8)\n+    assert f(g(f(2))).evalf() == Float(64)\n     # We want exact is comparison here, not just ==\n     assert lambdify([], true)() is True\n     assert lambdify([], false)() is False\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..ac4a1ec 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -84,6 +84,15 @@ def test_Identity():\n     assert In.inverse() == In\n     assert In.conjugate() == In\n \n+from sympy import symbols, Identity, Sum\n+\n+def test_Identity_sum():\n+    n = symbols('n', integer=True, positive=True)\n+    In = Identity(n)\n+\n+    # Check element-wise that the sum of an identity matrix results in n\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n+\n def test_Identity_doit():\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..68d34e8 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -353,6 +353,17 @@ def test_args():\n     raises(ValueError, lambda: Permutation([4, 5], size=10))  # where are 0-3?\n     # but this is ok because cycles imply that only those listed moved\n     assert Permutation(4, 5) == Permutation([0, 1, 2, 3, 5, 4])\n+    \n+    # Test for non-disjoint cycles\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([0, 2, 1])\n+    assert Permutation([[0, 1], [2, 3], [1, 2]]) == Permutation([0, 2, 3, 1])\n+    assert Permutation([[0, 1], [0, 1], [0, 1]]) == Permutation([0, 1])\n+    assert Permutation([[1, 2], [0, 1], [0, 2]]) == Permutation([0, 1, 2])\n+    # Testing the identity permutation with self loops\n+    assert Permutation([[0, 1], [0, 1], [1, 0]]) == Permutation([0, 1])\n+    assert Permutation([[0, 1], [2, 3], [3, 2]]) == Permutation([0, 1, 2, 3])\n+    assert Permutation([[0], [1], [2], [3]]) == Permutation([0, 1, 2, 3])\n \n \n def test_Cycle():\n",
  "sympy__sympy-13031": "",
  "sympy__sympy-13372": "",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..4cec2f8 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -203,6 +203,14 @@ def test_tanh():\n \n     assert tanh(k*pi*I/2) == tan(k*pi/2)*I\n \n+def test_coth_log_tan_issue():\n+    x = Symbol('x')\n+    expr = coth(log(tan(x)))\n+    # Test for known problematic integral values\n+    problematic_values = [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]\n+    for value in problematic_values:\n+        assert expr.subs(x, value) != S.ComplexInfinity\n+\n \n def test_tanh_series():\n     x = Symbol('x')\n",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..05ce298 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -164,8 +164,32 @@ def test_difference():\n \n     assert -1 in S.Reals - S.Naturals\n \n+from sympy import symbols, FiniteSet, Interval, Complement\n+\n+x, y, z = symbols('x y z')\n \n def test_Complement():\n+    # Original test case from the issue\n+    assert Complement(FiniteSet(x, y, 2), Interval(-10, 10)) == \\\n+           Complement(FiniteSet(x, y), Interval(-10, 10))\n+\n+    # Additional test case: mix of symbols and multiple numbers\n+    assert Complement(FiniteSet(x, y, 2, 3, 5), Interval(-10, 4)) == \\\n+           Complement(FiniteSet(x, y, 5), Interval(-10, 4))\n+\n+    # Additional test case: no overlap with interval\n+    assert Complement(FiniteSet(x, y, -20, 15), Interval(-10, 10)) == \\\n+           FiniteSet(x, y, -20, 15)\n+\n+    # Additional test case: all numbers inside the interval\n+    assert Complement(FiniteSet(x, y, 0, 1), Interval(-10, 10)) == \\\n+           FiniteSet(x, y)\n+\n+    # Additional test case: only symbols\n+    assert Complement(FiniteSet(x, y), Interval(-10, 10)) == FiniteSet(x, y)\n+\n+    # Additional test case: only numbers\n+    assert Complement(FiniteSet(1, 2, 3), Interval(-10, 10)) == EmptySet()\n     assert Complement(Interval(1, 3), Interval(1, 2)) == Interval(2, 3, True)\n     assert Complement(FiniteSet(1, 3, 4), FiniteSet(3, 4)) == FiniteSet(1)\n     assert Complement(Union(Interval(0, 2),\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..864fbeb 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,29 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643_col_insert():\n+    from sympy import Matrix, eye, ones\n+\n+    # Initial matrix (identity matrix 6x6)\n+    M = eye(6)\n+\n+    # Vector to insert (6x2 matrix of twos)\n+    V = 2 * ones(6, 2)\n+\n+    # Expected result after insertion at column index 3\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+\n+    result = M.col_insert(3, V)\n+    assert result == expected\n+\n+# Existing test case\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..5b58ac5 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -678,7 +678,12 @@ def test_Poly_mul():\n     assert 2 * Poly(x, x) == Poly(2*x, x)\n \n \n-def test_Poly_sqr():\n+def test_issue_13079():\n+    assert Poly(x)*x == Poly(x**2, x, domain='ZZ')\n+    assert x*Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert -2*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2)*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert Poly(x)*S(-2) == Poly(-2*x, x, domain='ZZ')\n     assert Poly(x*y, x, y).sqr() == Poly(x**2*y**2, x, y)\n \n \n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..971723b 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -54,6 +54,14 @@ def test_printmethod():\n             return \"foo\"\n     assert latex(R(x)) == \"foo\"\n \n+def test_latex_mul_symbol_arbitrary():\n+    assert latex(3*x**2*y, mul_symbol='\\\\\\\\,') == r\"3\\\\,x^{2}\\\\,y\"\n+    assert latex(3*x**2*y, mul_symbol='*') == r\"3 * x^{2} * y\"\n+    assert latex(3*x**2*y, mul_symbol='@') == r\"3@x^{2}@y\"\n+    assert latex(1.5*3**x, mul_symbol='\\\\\\\\,') == r\"1.5\\\\,3^{x}\"\n+    assert latex(1.5*3**x, mul_symbol='*') == r\"1.5 * 3^{x}\"\n+    assert latex(1.5*3**x, mul_symbol='@') == r\"1.5@3^{x}\"\n+\n \n def test_latex_basic():\n     assert latex(1 + x) == \"x + 1\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..863723f 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -313,8 +313,21 @@ def test_as_mutable():\n     assert zeros(0, 3).as_immutable() == ImmutableMatrix(zeros(0, 3))\n     assert zeros(3, 0).as_immutable() == ImmutableMatrix(zeros(3, 0))\n \n+from sympy import symbols, Matrix\n+from sympy.abc import a\n \n def test_determinant():\n+    # Additional test cases for issue 13835\n+    M = lambda n: Matrix([[i + a*j for i in range(n)] for j in range(n)])\n+    \n+    # Test determinant for 5x5 matrix\n+    assert M(5).det() == 0\n+    \n+    # Test determinant for 6x6 matrix\n+    assert M(6).det() == 0\n+\n+    # Test determinant for 7x7 matrix (extend if needed)\n+    assert M(7).det() == 0\n \n     for M in [Matrix(), Matrix([[1]])]:\n         assert (\n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..2899ab6 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -710,6 +710,54 @@ def test_issue_10003():\n     assert P(G < -1) == S.Zero\n \n def test_precomputed_cdf():\n+    x = symbols(\"x\", real=True, finite=True)\n+    # Test for Arcsin\n+    X = Arcsin('x', 0, 3)\n+    assert cdf(X)(1) == 2*asin(sqrt(1/3))/pi\n+\n+    # Test for Dagum\n+    X = Dagum('x', Rational(1, 3), Rational(1, 5), 2)\n+    assert cdf(X)(3) == ((1 + (3/2)**(-Rational(1, 3)))**(-Rational(1, 5)))\n+\n+    # Test for Erlang\n+    X = Erlang('x', 1, 1)\n+    assert cdf(X)(1) == 1 - exp(-1)\n+\n+    # Test for Frechet\n+    X = Frechet('x', Rational(4, 3), 1, 2)\n+    assert cdf(X)(3) == exp(-1/(3**Rational(4, 3)))\n+\n+    # Test for Gamma\n+    X = Gamma('x', 0.1, 2)\n+    assert cdf(X)(3) == lowergamma(0.1, 1.5)/gamma(0.1)\n+\n+    # Test for GammaInverse\n+    X = GammaInverse('x', Rational(5, 7), 2)\n+    assert cdf(X)(3) == uppergamma(Rational(5, 7), 2/3)/gamma(Rational(5, 7))\n+\n+    # Test for Kumaraswamy\n+    X = Kumaraswamy('x', Rational(1, 123), 5)\n+    assert cdf(X)(Rational(1, 3)) == 1 - (1 - (Rational(1, 3)**Rational(1, 123)))**5\n+\n+    # Test for Laplace\n+    X = Laplace('x', 2, 3)\n+    assert cdf(X)(5) == 1 - exp(-1)\n+\n+    # Test for Logistic\n+    X = Logistic('x', 1, 0.1)\n+    assert cdf(X)(2) == 1/(1 + exp(-10))\n+\n+    # Test for Nakagami\n+    X = Nakagami('x', Rational(7, 3), 1)\n+    assert cdf(X)(2) == lowergamma(Rational(7, 3), 28/9)/gamma(Rational(7, 3))\n+\n+    # Test for StudentT\n+    X = StudentT('x', 10)\n+    assert cdf(X)(2) == 0.949456\n+\n+    # Test for UniformSum\n+    X = UniformSum('x', 5)\n+    assert cdf(X)(2) == Piecewise((0, x < 1), (x**5/120, x < 2), (1, x >= 5))\n     x = symbols(\"x\", real=True, finite=True)\n     mu = symbols(\"mu\", real=True, finite=True)\n     sigma, xm, alpha = symbols(\"sigma xm alpha\", positive=True, finite=True)\n",
  "sympy__sympy-13974": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bd3e825..dc2ef0d 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -44,12 +44,39 @@ def test_tensor_product_commutator():\n     assert Comm(TP(A, B), TP(B, C)).doit() == \\\n         TP(A, B)*TP(B, C) - TP(B, C)*TP(A, B)\n \n+from sympy import symbols\n+from sympy.physics.quantum import TensorProduct as TP\n+from sympy.physics.quantum import tensor_product_simp\n+from sympy.physics.paulialgebra import Pauli\n+\n+A, B, C, D = symbols('A,B,C,D', commutative=False)\n \n def test_tensor_product_simp():\n+    # Original test cases:\n     assert tensor_product_simp(TP(A, B)*TP(B, C)) == TP(A*B, B*C)\n \n+def test_tensor_product_powers():\n+    # Test cases to verify the fix for TensorProduct power evaluation\n+\n+    # Test power of a simple tensor product\n+    a = symbols('a', commutative=False)\n+    tp1 = TP(1, 1) * TP(1, 1)\n+    assert tensor_product_simp(tp1) == TP(1, 1)\n+\n+    # Test power of a tensor product with a Pauli matrix\n+    tp2 = TP(1, Pauli(3)) * TP(1, Pauli(3))\n+    assert tensor_product_simp(tp2) == TP(1, Pauli(3)**2)\n+\n+    # Test tensor product with substitution that should simplify correctly\n+    assert tensor_product_simp(TP(1, 1) * TP(1, a)).subs(a, 1) == TP(1, 1)\n+    assert tensor_product_simp(TP(1, Pauli(3)) * TP(1, a)).subs(a, Pauli(3)) == TP(1, 1)\n \n-def test_issue_5923():\n+    # Additional tests for powers and combinations\n+    x = symbols('x')\n+    assert tensor_product_simp(TP(A, B)**x) == TP(A**x, B**x)\n+    assert tensor_product_simp(x * TP(A, B)**2) == x * TP(A**2, B**2)\n+    assert tensor_product_simp(x * (TP(A, B)**2) * TP(C, D)) == x * TP(A**2 * C, B**2 * D)\n+    assert tensor_product_simp(TP(A, B) - TP(C, D)**x) == TP(A, B) - TP(C**x, D**x)\n     # most of the issue regarding sympification of args has been handled\n     # and is tested internally by the use of args_cnc through the quantum\n     # module, but the following is a test from the issue that used to raise.\n",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_str.py b/sympy/printing/tests/test_str.py\nindex 29c7fd2..4b38ee5 100644\n--- a/sympy/printing/tests/test_str.py\n+++ b/sympy/printing/tests/test_str.py\n@@ -493,7 +493,12 @@ def test_Rational():\n     assert sstr(Symbol(\"x\")**Rational(2, 3), sympy_integers=True) == \"x**(S(2)/3)\"\n \n \n-def test_Float():\n+def test_issue_respects_sympy_integers():\n+    x = Symbol('x')\n+    assert sstr(Eq(x, Rational(1, 2)), sympy_integers=True) == \"Eq(x, S(1)/2)\"\n+    assert sstr(Eq(x, S(1)/2), sympy_integers=True) == \"Eq(x, S(1)/2)\"\n+    assert sstr(Limit(x, x, S(1)/2), sympy_integers=True) == \"Limit(x, x, S(1)/2)\"\n+    assert sstr(Limit(x, x, Rational(1, 2)), sympy_integers=True) == \"Limit(x, x, S(1)/2)\"\n     # NOTE dps is the whole number of decimal digits\n     assert str(Float('1.23', dps=1 + 2)) == '1.23'\n     assert str(Float('1.23456789', dps=1 + 8)) == '1.23456789'\n",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..f65cc37 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -4,11 +4,21 @@ from sympy.abc import x, y, z\n from sympy.utilities.pytest import raises\n \n \n+from sympy.physics.vector import ReferenceFrame, Vector\n+\n Vector.simp = True\n A = ReferenceFrame('A')\n \n-\n-def test_Vector():\n+def test_vector_addition_with_zero():\n+    N = ReferenceFrame('N')\n+    # Test adding a vector and zero should return the same vector\n+    assert N.x + 0 == N.x\n+    # Test adding zero to a vector should return the same vector\n+    assert 0 + N.x == N.x\n+    # Test sum of a list of vectors with a zero vector\n+    assert sum([N.x, 0 * N.x]) == N.x\n+    # Test vector addition with multiple zero vectors\n+    assert sum([N.x, 0 * N.x, 0 * N.y]) == N.x\n     assert A.x != A.y\n     assert A.y != A.z\n     assert A.z != A.x\n",
  "sympy__sympy-14976": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex fbe0d75..d1fad99 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import (absolute_import, division, print_function)\n \n@@ -38,6 +39,13 @@ def test_PythonCodePrinter():\n \n \n def test_MpmathPrinter():\n+    x = symbols('x')\n+    p = MpmathPrinter()\n+    \n+    # Test for the issue: lambdify(modules='mpmath') doesn't wrap rationals\n+    eqn = Eq(x, Rational(77, 3))  # 77 + S(1)/3 is equivalent to Rational(232, 3)\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    assert \"mpmath.mpf(232)/mpmath.mpf(3)\" in inspect.getsource(f)\n     p = MpmathPrinter()\n     assert p.doprint(sign(x)) == 'mpmath.sign(x)'\n \n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..f71cdbd 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -79,8 +80,25 @@ def test_ndim_array_initiation():\n     assert rank_zero_array[()] == x\n     raises(ValueError, lambda: rank_zero_array[0])\n \n+def test_rank_zero_array_length():\n+    from sympy import ImmutableDenseNDimArray\n+    from sympy.abc import x\n+\n+    # Create a rank-0 array\n+    rank_zero_array = ImmutableDenseNDimArray(x)\n+    \n+    # Test that its length should be 1\n+    assert len(rank_zero_array) == 1, \"Rank-0 array length should be 1\"\n+    assert rank_zero_array.shape == ()\n+    assert rank_zero_array.rank() == 0\n+    assert rank_zero_array[()] == x\n \n-def test_reshape():\n+    # Test with a numerical scalar\n+    scalar_array = ImmutableDenseNDimArray(42)\n+    assert len(scalar_array) == 1, \"Rank-0 scalar array length should be 1\"\n+    assert scalar_array.shape == ()\n+    assert scalar_array.rank() == 0\n+    assert scalar_array[()] == 42\n     array = ImmutableDenseNDimArray(range(50), 50)\n     assert array.shape == (50,)\n     assert array.rank() == 1\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..8acd940 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n@@ -18,6 +19,24 @@ def test_Integer():\n def test_Rational():\n     assert mcode(Rational(3, 7)) == \"3/7\"\n     assert mcode(Rational(18, 9)) == \"2\"\n+\n+def test_Max_Min():\n+    # Original test case to ensure it still works\n+    assert mcode(Max(x, y, z) * Min(y, z)) == \"Max[x, y, z]*Min[y, z]\"\n+    \n+    # New test cases based on the issue\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[x, 2]\"  # Different order to test commutativity\n+    assert mcode(Max(x, y)) == \"Max[x, y]\"\n+    assert mcode(Max(y, x)) == \"Max[y, x]\"  # Different order to see if order is preserved\n+\n+    # Testing with more than two arguments\n+    assert mcode(Max(x, 2, y)) == \"Max[x, 2, y]\"\n+    assert mcode(Max(2, y, x)) == \"Max[2, y, x]\"\n+    \n+    # Ensure Min is still working correctly\n+    assert mcode(Min(x, 2)) == \"Min[x, 2]\"\n+    assert mcode(Min(2, x)) == \"Min[x, 2]\"\n     assert mcode(Rational(3, -7)) == \"-3/7\"\n     assert mcode(Rational(-3, -7)) == \"3/7\"\n     assert mcode(x + Rational(3, 7)) == \"x + 3/7\"\n",
  "sympy__sympy-15349": "",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..417d60f 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1625,7 +1625,18 @@ def test_Mod():\n     assert (3*i*x) % (2*i*y) == i*Mod(3*x, 2*y)\n     assert Mod(4*i, 4) == 0\n \n-    # issue 8677\n+    # issue 15493\n+    i, j = symbols('i j', integer=True, positive=True)\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+    assert Mod(8*i/j, 4) == 4*Mod(2*i/j, 1)\n+    assert Mod(8*i, 4) == 0\n+\n+    # Additional test cases to cover more scenarios\n+    assert Mod(6*i, 3) == 0  # direct divisibility\n+    assert Mod(9*i, 2) == Mod(i, 2)  # similar pattern reduction\n+    assert Mod(5*i + 3, 2) == Mod(i + 1, 2)  # linear expression\n+    assert Mod(3*i*x + 2*j, x) == 3*i + Mod(2*j, x)  # expression with multiple variables\n+    assert Mod(3*i, 4) == 3*i % 4  # ensure no unintended simplification\n     n = Symbol('n', integer=True, positive=True)\n     assert factorial(n) % n == 0\n     assert factorial(n + 2) % n == 0\n",
  "sympy__sympy-15809": "diff --git a/sympy/functions/elementary/tests/test_miscellaneous.py b/sympy/functions/elementary/tests/test_miscellaneous.py\nindex 821fd0c..df59349 100644\n--- a/sympy/functions/elementary/tests/test_miscellaneous.py\n+++ b/sympy/functions/elementary/tests/test_miscellaneous.py\n@@ -85,7 +85,8 @@ def test_Min():\n     assert Min(p, p_).func is Min\n \n     # lists\n-    raises(ValueError, lambda: Min())\n+    assert Min() == S.Infinity\n+    assert Min(x) == x\n     assert Min(x, y) == Min(y, x)\n     assert Min(x, y, z) == Min(z, y, x)\n     assert Min(x, Min(y, z)) == Min(z, y, x)\n@@ -156,7 +157,8 @@ def test_Max():\n \n     # lists\n \n-    raises(ValueError, lambda: Max())\n+    assert Max() == S.NegativeInfinity\n+    assert Max(x) == x\n     assert Max(x, y) == Max(y, x)\n     assert Max(x, y, z) == Max(z, y, x)\n     assert Max(x, Max(y, z)) == Max(z, y, x)\n",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..a5a8eca 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1982,7 +1982,30 @@ def test_issue_8247_8354():\n     assert z.is_positive is False  # it's 0 (and a single _mexpand isn't enough)\n \n \n+from sympy import I, simplify\n+\n def test_Add_is_zero():\n+    # Test for issue 15873\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None  # 'is_zero' should not incorrectly return False\n+    assert simplify(e).is_zero  # Simplifying should reveal it is zero\n+\n+    # Additional tests for similar scenarios\n+    f = I*(1 - I) + (1 + I)*(1 + I)\n+    assert f.is_zero is None\n+    assert simplify(f).is_zero\n+\n+    g = 3 + 4*I - 3 - 4*I\n+    assert g.is_zero is True\n+\n+    h = (1 + I)*(1 - I) - 2\n+    assert h.is_zero is None\n+    assert simplify(h).is_zero\n+\n+    # Test with symbolic expressions that could be zero\n+    x, y = symbols('x y', zero=True)\n+    expr = x + y + I\n+    assert expr.is_zero is None\n     x, y = symbols('x y', zero=True)\n     assert (x + y).is_zero\n \n@@ -1993,4 +2016,4 @@ def test_issue_14392():\n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..e576148 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -511,8 +511,54 @@ def test_posify():\n     assert str(Sum(posify(1/x**n)[0], (n,1,3)).expand()) == \\\n         'Sum(_x**(-n), (n, 1, 3))'\n \n-\n-def test_issue_4194():\n+def test_issue_finite_preservation():\n+    from sympy import Symbol, posify\n+\n+    # Test preservation of 'finite' assumption\n+    k = Symbol('k', finite=True)\n+    eq, _ = posify(k)\n+    assert eq._assumptions['finite'] == True\n+    assert eq._assumptions['infinite'] == False\n+\n+def test_issue_integer_preservation():\n+    from sympy import Symbol, posify\n+\n+    # Test preservation of 'integer' assumption\n+    k = Symbol('k', integer=True)\n+    eq, _ = posify(k)\n+    assert eq._assumptions['integer'] == True\n+\n+def test_issue_rational_preservation():\n+    from sympy import Symbol, posify\n+\n+    # Test preservation of 'rational' assumption\n+    k = Symbol('k', rational=True)\n+    eq, _ = posify(k)\n+    assert eq._assumptions['rational'] == True\n+\n+def test_issue_prime_preservation():\n+    from sympy import Symbol, posify\n+\n+    # Test preservation of 'prime' assumption\n+    k = Symbol('k', prime=True)\n+    eq, _ = posify(k)\n+    assert eq._assumptions['prime'] == True\n+\n+def test_issue_even_preservation():\n+    from sympy import Symbol, posify\n+\n+    # Test preservation of 'even' assumption\n+    k = Symbol('k', even=True)\n+    eq, _ = posify(k)\n+    assert eq._assumptions['even'] == True\n+\n+def test_issue_odd_preservation():\n+    from sympy import Symbol, posify\n+\n+    # Test preservation of 'odd' assumption\n+    k = Symbol('k', odd=True)\n+    eq, _ = posify(k)\n+    assert eq._assumptions['odd'] == True\n     # simplify should call cancel\n     from sympy.abc import x, y\n     f = Function('f')\n",
  "sympy__sympy-16766": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 51a287f..beb2fb3 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n \n@@ -12,6 +13,7 @@ from sympy.printing.pycode import (\n     MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter\n )\n from sympy.utilities.pytest import raises\n+from sympy.tensor import IndexedBase\n \n x, y, z = symbols('x y z')\n \n@@ -35,6 +37,12 @@ def test_PythonCodePrinter():\n                                                         ' (3) if (x > 0) else None)'\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n \n+    # Test case for Indexed support in PythonCodePrinter\n+    p = IndexedBase(\"p\")\n+    assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n+    assert prntr.doprint(p[x, y, z]) == 'p[x, y, z]'\n+    assert prntr.doprint(p[0]) == 'p[0]'\n+\n \n def test_MpmathPrinter():\n     p = MpmathPrinter()\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py\nindex 23fddca..99489c9 100644\n--- a/sympy/utilities/tests/test_autowrap.py\n+++ b/sympy/utilities/tests/test_autowrap.py\n@@ -48,7 +48,18 @@ def test_cython_wrapper_scalar_function():\n     assert source == expected\n \n \n-def test_cython_wrapper_outarg():\n+def test_unused_array_argument():\n+    from sympy.utilities.autowrap import autowrap\n+    from sympy import MatrixSymbol\n+    import numpy as np\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0  # The expression does not depend on 'x'\n+    \n+    # This should not fail and should return 1.0\n+    f = autowrap(expr, args=(x,), backend='cython')\n+    result = f(np.array([[1.0], [2.0]]))\n+    assert result == 1.0\n     from sympy import Equality\n     x, y, z = symbols('x,y,z')\n     code_gen = CythonCodeWrapper(C99CodeGen())\n",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..a657f95 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -237,8 +237,11 @@ def test_decipher_kid_rsa():\n     assert decipher_kid_rsa(3, (8, 3)) == 1\n     assert decipher_kid_rsa(2, (7, 4)) == 1\n \n+from sympy.crypto.crypto import encode_morse\n \n def test_encode_morse():\n+    # Added test case to specifically check the encoding for \"1\"\n+    assert encode_morse('1') == '.----'\n     assert encode_morse('ABC') == '.-|-...|-.-.'\n     assert encode_morse('SMS ') == '...|--|...||'\n     assert encode_morse('SMS\\n') == '...|--|...||'\n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..f343a59 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -810,8 +810,20 @@ def test_issue_15965():\n     assert simplify(A) == anew\n     assert simplify(B) == bnew\n \n+def test_issue_17137():\n+    x = Symbol('x')\n+    # Original test cases\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+    # Additional test cases\n+    assert simplify(sin(x)**I) == sin(x)**I\n+    assert simplify(exp(I*x)) == exp(I*x)\n+    assert simplify((cos(x) + sin(x))**I) == (cos(x) + sin(x))**I\n+    assert simplify((cos(x)*sin(x))**I) == (cos(x)*sin(x))**I\n+    assert simplify(log(x)**I) == log(x)**I\n+\n \n def test_issue_7971():\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..2c41d05 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,4 +1,7 @@\n-from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n+\n+from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos, I\n+from sympy.simplify.sqrtdenest import _sqrt_match\n+from sympy.core.expr import unchanged\n from sympy.simplify.sqrtdenest import _subsets as subsets\n from sympy.utilities.pytest import slow\n \n@@ -175,8 +178,19 @@ def test_subsets():\n         [0, 1, 1, 0], [1, 1, 1, 0], [0, 0, 0, 1], [1, 0, 0, 1], [0, 1, 0, 1],\n         [1, 1, 0, 1], [0, 0, 1, 1], [1, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]]\n \n-\n-def test_issue_5653():\n+def test_issue_12420():\n+    # Test case directly from the issue\n+    assert sqrtdenest((3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2) == (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2\n+    \n+    # Test with a slightly modified expression to ensure correct handling\n+    assert sqrtdenest((3 - sqrt(2)*sqrt(4 + 2*I) + 3*I)/2) == (3 - sqrt(2)*sqrt(4 + 2*I) + 3*I)/2\n+    \n+    # Check that the internal _sqrt_match function handles the case correctly\n+    assert _sqrt_match(4 + I) == []\n+\n+    # Unchanged test for a different sqrtdenest situation\n+    e = 3 - sqrt(2)*sqrt(4 + I) + 3*I\n+    assert sqrtdenest(e) == e\n     assert sqrtdenest(\n         sqrt(2 + sqrt(2 + sqrt(2)))) == sqrt(2 + sqrt(2 + sqrt(2)))\n \n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..ba5341b 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,12 +1,29 @@\n-from sympy import I, Rational, Symbol, pi, sqrt, S\n+\n+from sympy import I, Rational, Symbol, pi, sqrt, S, sympify\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.pytest import raises, warns\n \n+def test_point_operations_with_sympify():\n+    # Test multiplying Point by a sympy number in both orders\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+    number = sympify(2.0)\n+\n+    # Original working multiplication order\n+    result1 = point1 + point2 * number\n+    assert result1 == Point(2, 2)\n+\n+    # Previously failing multiplication order\n+    result2 = point1 + number * point2\n+    assert result2 == Point(2, 2)\n \n-def test_point():\n+    # Ensure the commutative property of multiplication with sympy number\n+    # This ensures that both order of multiplication give the same result\n+    assert point2 * number == number * point2\n+    assert point2 * number == Point(2, 2)\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     x1 = Symbol('x1', real=True)\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..a9f47cf 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -554,7 +554,19 @@ def test_diophantine():\n     assert diophantine((y**2-x), t) == set([(t**2, -t)])\n \n \n-def test_general_pythagorean():\n+def test_issue_18186():\n+    from sympy.abc import m, n\n+\n+    # Testing the equation with different symbol orders and permute=True\n+    eq = n**4 + m**4 - 2**4 - 3**4\n+    expected_solution = set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), \n+                            (2, -3), (2, 3), (3, -2), (3, 2)])\n+    \n+    # Test with symbols (m, n)\n+    assert diophantine(eq, syms=(m, n), permute=True) == expected_solution\n+    \n+    # Test with symbols (n, m)\n+    assert diophantine(eq, syms=(n, m), permute=True) == expected_solution\n     from sympy.abc import a, b, c, d, e\n \n     assert check_solutions(a**2 + b**2 + c**2 - d**2)\n",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..07c76c8 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -683,6 +683,7 @@ def test_latex_integrals():\n         r\"\\int\\limits_{0}^{1} x^{2}\\, dx\"\n     assert latex(Integral(x**2, (x, 10, 20))) == \\\n         r\"\\int\\limits_{10}^{20} x^{2}\\, dx\"\n+    assert latex(3*Subs(-x+y, (x,),(1,))) == r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n     assert latex(Integral(y*x**2, (x, 0, 1), y)) == \\\n         r\"\\int\\int\\limits_{0}^{1} x^{2} y\\, dx\\, dy\"\n     assert latex(Integral(y*x**2, (x, 0, 1), y), mode='equation*') == \\\n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "diff --git a/sympy/sets/tests/test_conditionset.py b/sympy/sets/tests/test_conditionset.py\nindex 68ee5d6..ad0daf2 100644\n--- a/sympy/sets/tests/test_conditionset.py\n+++ b/sympy/sets/tests/test_conditionset.py\n@@ -1,6 +1,7 @@\n+\n from sympy.sets import (ConditionSet, Intersection, FiniteSet,\n-    EmptySet, Union, Contains)\n-from sympy import (Symbol, Eq, S, Abs, sin, pi, Interval,\n+    EmptySet, Union, Contains, imageset)\n+from sympy import (Symbol, Eq, S, Abs, sin, asin, pi, Interval,\n     And, Mod, oo, Function)\n from sympy.testing.pytest import raises, XFAIL, warns_deprecated_sympy\n \n@@ -78,6 +79,27 @@ def test_simplified_FiniteSet_in_CondSet():\n         Union(FiniteSet(1, 4), ConditionSet(x, Eq(Mod(x, 3), 1), FiniteSet(y))))\n \n \n+def test_issue_17341():\n+    k = Symbol('k')\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    \n+    # Test with ImageSet and ConditionSet\n+    img1 = imageset(Lambda(k, 2*k*pi + asin(y)), S.Integers)\n+    img2 = imageset(Lambda(k, 2*k*pi + asin(S.One/3)), S.Integers)\n+    cond_set = ConditionSet(x, Contains(y, Interval(-1,1)), img1)\n+    assert cond_set.subs(y, S.One/3).dummy_eq(img2)\n+\n+    # Additional test: direct subs on ImageSet\n+    assert img1.subs(y, S.One/3) == img2\n+\n+    # Test substitution does not misinterpret variables\n+    cond_set2 = ConditionSet(x, Contains(y, Interval(-1, 1)), FiniteSet(-y, y))\n+    assert cond_set2.subs(y, S.One/3) == FiniteSet(-S.One/3, S.One/3)\n+\n+    # Test with simultaneous substitution\n+    assert cond_set.subs({y: S.One/3}, simultaneous=True) == img2\n+\n def test_free_symbols():\n     assert ConditionSet(x, Eq(y, 0), FiniteSet(z)\n         ).free_symbols == {y, z}\n",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..06e7bf4 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -484,6 +484,41 @@ def test_geometry():\n \n \n def test_kernS():\n+    # Test for the original issue of UnboundLocalError\n+    # caused by the incorrect handling of kern variable\n+    from sympy.core.sympify import kernS\n+    from sympy import Symbol, exp, Interval, Add, Mul, sin, cos\n+    from sympy.abc import x, y\n+\n+    # A test case that could previously trigger the issue\n+    # by trying to ensure kern is handled correctly\n+    text = \"(2*x)/(x-1)\"\n+    expected_expr = 2*x/(x-1)\n+    assert kernS(text) == expected_expr\n+\n+    # Additional test cases to ensure the fix is robust\n+    # Verifying with different variations of input expressions\n+    assert kernS('-(-x + 1/x)/(x*(x - 1/x)**2) - 1/(x*(x - 1/x))') != -1\n+    assert kernS('2*(x + y)') == 2*(x + y)\n+    assert kernS('-(x + 1)') == -(x + 1)\n+\n+    # Additional test for nested parentheses and unbalanced parentheses\n+    try:\n+        kernS('((x + 1)')  # unbalanced\n+    except Exception as e:\n+        assert isinstance(e, SympifyError)\n+\n+    # Test for expressions with symbols like '_kern'\n+    assert kernS('_kern') == Symbol('_kern')\n+    assert kernS('E**-(x)') == exp(-x)\n+    assert kernS('Interval(-1,-2 - 4*(-3))') == Interval(-1, Add(-2, Mul(12, 1, evaluate=False), evaluate=False))\n+    \n+    # Test for evaluating more complex strings\n+    complex_expr = '2*(3*(x + y) + 1)/(x + 1)'\n+    assert kernS(complex_expr) == 2*(3*(x + y) + 1)/(x + 1)\n+    \n+    # Ensuring no unnecessary simplifications\n+    assert kernS('2*sin(x)**2 + 2*sin(x)*cos(x)') == 2*sin(x)**2 + 2*sin(x)*cos(x)\n     s =   '-1 - 2*(-(-x + 1/x)/(x*(x - 1/x)**2) - 1/(x*(x - 1/x)))'\n     # when 1497 is fixed, this no longer should pass: the expression\n     # should be unchanged\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_operator.py b/sympy/physics/quantum/tests/test_operator.py\nindex 799aaae..5575b4d 100644\n--- a/sympy/physics/quantum/tests/test_operator.py\n+++ b/sympy/physics/quantum/tests/test_operator.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Derivative, diff, Function, Integer, Mul, pi, sin, Symbol,\n                    symbols)\n from sympy.physics.quantum.qexpr import QExpr\n@@ -90,6 +91,18 @@ def test_identity():\n     x = Symbol(\"x\")\n \n     assert isinstance(I, IdentityOperator)\n+    \n+    # Additional test cases for Dagger and IdentityOperator multiplication\n+    B = Dagger(O)\n+    # Verify the simplification of Dagger(O) * IdentityOperator()\n+    assert B * I == B\n+    assert I * B == B\n+\n+    # Test other combinations to ensure correctness and no regressions\n+    assert (Dagger(O) * I) * O == B * O\n+    assert O * (I * Dagger(O)) == O * B\n+    assert Dagger(O * I) == B\n+    assert Dagger(I * O) == B\n     assert isinstance(I, Operator)\n \n     assert I * O == O\n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..6d6f146 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -906,7 +906,18 @@ def test_sylow_subgroup():\n     assert G.order()/S.order() % 2 > 0\n \n \n-@slow\n+def test_dihedral_group_sylow_subgroup_issue():\n+    from sympy.combinatorics import DihedralGroup\n+\n+    # Test case for DihedralGroup(18) with Sylow subgroup for p=2\n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n+    # Test case for DihedralGroup(50) with Sylow subgroup for p=2\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n def test_presentation():\n     def _test(P):\n         G = P.presentation()\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..52bb007 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -481,6 +481,25 @@ def test_partitions():\n         assert list(partitions(6, None, 2, size=i)) != ans[i]\n         assert list(partitions(6, 2, 0, size=i)) == ans[i]\n \n+    # New test cases to ensure that partitions() yields fresh dictionaries\n+    # each time a partition is generated.\n+    \n+    def partition_lists_are_distinct():\n+        # Check for distinct objects in partitions\n+        distinct_checks = [\n+            list(partitions(6, k=2)),\n+            list(partitions(6, k=3)),\n+            list(partitions(8, k=4, m=3)),\n+            list(partitions(S(3), m=2)),\n+            list(partitions(4, k=3))\n+        ]\n+        for partition_list in distinct_checks:\n+            dict_ids = list(map(id, partition_list))\n+            assert len(set(dict_ids)) == len(dict_ids), \"Dictionaries are not distinct objects!\"\n+\n+    partition_lists_are_distinct()\n+\n+    # Original test cases checking correctness after fix\n     assert [p.copy() for p in partitions(6, k=2)] == [\n         {2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]\n \n",
  "sympy__sympy-20801": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e1c7e2..b6d1b54 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -583,8 +583,12 @@ def test_Float():\n         assert Float(i) is a\n \n \n-\n-@conserve_mpmath_dps\n+def test_zero_not_false():\n+    # Verify comparisons involving S.false and numerical zero\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n def test_float_mpf():\n     import mpmath\n     mpmath.mp.dps = 100\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..40dfbbd 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -19,6 +20,30 @@ def test_subs():\n     e = e.subs(x, n3)\n     assert e == Rational(6)\n \n+    # Test case for issue with PolynomialError on subs\n+    from sympy.functions.elementary.hyperbolic import sinh\n+    from sympy.functions.elementary.piecewise import Piecewise\n+\n+    # Clear the cache and redefine symbols with real assumption\n+    clear_cache()\n+    x_r, y_r, z_r = symbols('x_r y_r z_r', real=True)\n+\n+    # Define the expression as described in the issue\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+\n+    # This should not raise an error\n+    expr_subs = expr.subs({1: 1.0})\n+    assert expr_subs is not None\n+\n+    # Additional test cases to ensure related functions are not affected\n+    expr2 = exp(sinh(x / z))\n+    expr2_subs = expr2.subs({1: 1.0})\n+    assert expr2_subs is not None\n+\n+    expr3 = exp(log(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    expr3_subs = expr3.subs({1: 1.0})\n+    assert expr3_subs is not None\n+\n \n def test_subs_Matrix():\n     z = zeros(2)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..cf4dcfb 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -11,7 +11,8 @@ from sympy.polys.monomials import (\n \n from sympy.polys.polyerrors import ExactQuotientFailed\n \n-from sympy.abc import a, b, c, x, y, z\n+from sympy.abc import a, b, c, x, y, z, x1, x2, x3\n+from sympy import symbols\n from sympy.core import S, symbols\n from sympy.testing.pytest import raises\n \n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..424ad92 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -267,6 +267,8 @@ def test_String():\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n+    # New test case to verify argument invariance\n+    assert st.func(*st.args) == st\n \n \n     class Signifier(String):\n",
  "sympy__sympy-22714": "",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..ca0a249 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n@@ -56,6 +57,20 @@ def test_PythonCodePrinter():\n     assert prntr.doprint(KroneckerDelta(x,y)) == '(1 if x == y else 0)'\n \n     assert prntr.doprint((2,3)) == \"(2, 3)\"\n+\n+    # Test cases for Min and Max functions\n+    assert prntr.doprint(Min(x, y)) == \"min(x, y)\"\n+    assert prntr.doprint(Max(x, y)) == \"max(x, y)\"\n+    # Testing with three arguments\n+    assert prntr.doprint(Min(x, y, z)) == \"min(x, y, z)\"\n+    assert prntr.doprint(Max(x, y, z)) == \"max(x, y, z)\"\n+    # Testing with nested Min and Max\n+    assert prntr.doprint(Min(Max(x, y), z)) == \"min(max(x, y), z)\"\n+    assert prntr.doprint(Max(Min(x, y), z)) == \"max(min(x, y), z)\"\n+    # Testing with numeric values\n+    a, b, c = symbols('a b c')\n+    assert prntr.doprint(Min(3, a, b, 2)) == \"min(3, a, b, 2)\"\n+    assert prntr.doprint(Max(3, a, b, 2)) == \"max(3, a, b, 2)\"\n     assert prntr.doprint([2,3]) == \"[2, 3]\"\n \n \n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..c3cd9a6 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,26 @@ def test_scipy_polys():\n \n \n \n+def test_issue_tuple_with_one_element():\n+    # Test for a tuple with one element\n+    f_single = lambdify([], (1,))\n+    assert f_single() == (1,), \"Failed to handle tuple with one element correctly.\"\n+    \n+    # Verify the source code and ensure the comma is present\n+    source_code_single = inspect.getsource(f_single)\n+    assert 'return (1,)' in source_code_single, \"Source code does not correctly represent a tuple with one element.\"\n+\n+    # Additional case for completeness: Test for a tuple with multiple elements\n+    f_multiple = lambdify([], (1, 2))\n+    assert f_multiple() == (1, 2), \"Failed to handle tuple with multiple elements correctly.\"\n+    \n+    # Verify the source code and ensure it is correctly formatted for tuples with multiple elements\n+    source_code_multiple = inspect.getsource(f_multiple)\n+    assert 'return (1, 2)' in source_code_multiple, \"Source code does not correctly represent a tuple with multiple elements.\"\n+\n+import inspect\n+from sympy import lambdify\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..a3a50e4 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n@@ -6,6 +7,7 @@ from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n \n from sympy.testing.pytest import raises\n from sympy.core.symbol import disambiguate\n+from sympy.core.function import Function, UndefinedFunction\n \n def test_Str():\n     a1 = Str('a')\n@@ -294,6 +296,10 @@ def test_symbols():\n     assert symbols('aa:d,x:z') == (aa, ab, ac, ad, x, y, z)\n     assert symbols(('aa:d','x:z')) == ((aa, ab, ac, ad), (x, y, z))\n \n+    # Test case for issue 23532\n+    q, u = symbols(('q:2', 'u:2'), cls=Function)\n+    assert type(q[0]) == UndefinedFunction  # issue 23532\n+\n \n     # issue 6675\n     def sym(s):\n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..9c1e5e3 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -183,6 +183,10 @@ def execute_gamma_simplify_tests_for_function(tfunc, D):\n     assert _is_tensor_eq(st, t)\n \n \n+import sympy\n+from sympy.physics.hep.gamma_matrices import GammaMatrix as G, kahane_simplify, LorentzIndex\n+from sympy.tensor.tensor import tensor_indices\n+\n def test_kahane_algorithm():\n     # Wrap this function to convert to and from TIDS:\n \n@@ -262,7 +266,34 @@ def test_kahane_simplify1():\n     assert r.equals(-2*G(sigma)*G(rho)*G(nu))\n \n \n-def test_gamma_matrix_class():\n+def test_kahane_leading_gamma_matrix_bug():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n+    \n+    # Test 1: contraction at the start\n+    t = G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    # Test 2: contraction at the end\n+    t = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    # Additional tests\n+    # Test 3: multiple contractions\n+    t = G(mu)*G(-mu)*G(rho)*G(-rho)*G(sigma)*G(-sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(64*eye(4))\n+\n+    # Test 4: no contractions, order should remain the same\n+    t = G(rho)*G(sigma)*G(mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(G(rho)*G(sigma)*G(mu))\n+\n+    # Test 5: contraction in the middle\n+    t = G(rho)*G(mu)*G(-mu)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n     i, j, k = tensor_indices('i,j,k', LorentzIndex)\n \n     # define another type of TensorHead to see if exprs are correctly handled:\n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..ebf8400 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -30,6 +30,9 @@ def test_issue_10326():\n     assert Contains(-oo, Interval(-oo, oo)) == False\n \n \n+from sympy import Symbol, S, FiniteSet, Integers, Reals, Contains, Piecewise, Eq\n+from sympy.testing.pytest import raises\n+\n def test_binary_symbols():\n     x = Symbol('x')\n     y = Symbol('y')\n@@ -46,6 +49,17 @@ def test_as_set():\n     raises(NotImplementedError, lambda:\n            Contains(x, FiniteSet(y)).as_set())\n \n-def test_type_error():\n+def test_invalid_as_set():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    # Test that Contains raises NotImplementedError when calling as_set\n+    raises(NotImplementedError, lambda: Contains(x, FiniteSet(y)).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, S.Integers).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, S.Reals).as_set())\n+\n+def test_piecewise_error():\n+    x = Symbol('x')\n+    # Test the error in Piecewise with Contains conditions\n+    raises(AttributeError, lambda: Piecewise((6, Contains(x, S.Reals)), (7, True)))\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..9a87bbc 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -547,6 +547,36 @@ def test_prefixed_property():\n     assert not day.is_prefixed\n     assert not second.is_prefixed\n     assert not volt.is_prefixed\n+\n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units import Quantity\n+    from sympy import exp\n+    from sympy.physics.units.systems.si import SI\n+    from sympy.core.dimension import Dimension\n+\n+    # Define quantities and their dimensions\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+\n+    # Create expression to test\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+\n+    # Assert that the dimension of the expression is dimensionless\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    # Create expression with exp() and test\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n     assert not ohm.is_prefixed\n     assert centimeter.is_prefixed\n     assert kilometer.is_prefixed\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..a6391eb 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -562,7 +562,56 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n-def test_prefixed_property():\n+def test_issue_24211():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+    from sympy.physics.units.systems.si import SI\n+\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+def test_issue_24211_extended():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+    from sympy.physics.units.systems.si import SI\n+\n+    # Additional test case with different scale factors\n+    V2 = Quantity('V2')\n+    SI.set_quantity_dimension(V2, velocity)\n+    SI.set_quantity_scale_factor(V2, 3 * meter / second)\n+\n+    A2 = Quantity('A2')\n+    SI.set_quantity_dimension(A2, acceleration)\n+    SI.set_quantity_scale_factor(A2, 2 * meter / second**2)\n+\n+    T2 = Quantity('T2')\n+    SI.set_quantity_dimension(T2, time)\n+    SI.set_quantity_scale_factor(T2, 1.5 * second)\n+\n+    expr2 = A2*T2 + V2\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr2)\n+\n+    # Another test to verify it handles zero acceleration correctly\n+    A3 = Quantity('A3')\n+    SI.set_quantity_dimension(A3, acceleration)\n+    SI.set_quantity_scale_factor(A3, 0 * meter / second**2)\n+\n+    expr3 = A3*T1 + V1  # should yield the velocity term directly\n+    factor, dimension = SI._collect_factor_and_dimension(expr3)\n+    assert factor == 1 * meter / second\n+    assert dimension == SI.get_quantity_dimension(V1)\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n     assert not day.is_prefixed\n",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..99dd844 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,3 +1,4 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n@@ -57,7 +58,11 @@ def test_homomorphism():\n     assert T.codomain == D\n     assert T(a*b) == p\n \n-def test_isomorphisms():\n+def test_issue_12345_homomorphism_permutation_group():\n+    # Test for the issue in _check_homomorphism with PermutationGroups\n+    D3 = DihedralGroup(3)\n+    T = homomorphism(D3, D3, D3.generators, D3.generators)\n+    assert T.is_isomorphism()\n \n     F, a, b = free_group(\"a, b\")\n     E, c, d = free_group(\"c, d\")\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..fd00ec1 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -249,6 +249,19 @@ def test_PolyElement_copy():\n     g[(1, 1, 1)] = 7\n     assert f != g\n \n+    # Original test case to verify the issue fix\n+    U, V, W = symbols(\"u,v,w\")\n+    g = 3*U**2*V - U*V*W + 7*W**3 + 1\n+    assert f.as_expr(U, V, W) == g\n+\n+    # Additional test case with different symbols and order\n+    A, B, C = symbols(\"a,b,c\")\n+    g = 3*A**2*B - A*B*C + 7*C**3 + 1\n+    assert f.as_expr(A, B, C) == g\n+\n+    # Test with mismatched number of symbols\n+    raises(ValueError, lambda: f.as_expr(U, V))\n+\n def test_PolyElement_as_expr():\n     R, x, y, z = ring(\"x,y,z\", ZZ)\n     f = 3*x**2*y - x*y*z + 7*z**3 + 1\n@@ -257,12 +270,38 @@ def test_PolyElement_as_expr():\n     g = 3*X**2*Y - X*Y*Z + 7*Z**3 + 1\n \n     assert f != g\n+\n+    # Original test case to verify the issue fix\n+    U, V, W = symbols(\"u,v,w\")\n+    g = 3*U**2*V - U*V*W + 7*W**3 + 1\n+    assert f.as_expr(U, V, W) == g\n+\n+    # Additional test case with different symbols and order\n+    A, B, C = symbols(\"a,b,c\")\n+    g = 3*A**2*B - A*B*C + 7*C**3 + 1\n+    assert f.as_expr(A, B, C) == g\n+\n+    # Test with mismatched number of symbols\n+    raises(ValueError, lambda: f.as_expr(U, V))\n     assert f.as_expr() == g\n \n     X, Y, Z = symbols(\"x,y,z\")\n     g = 3*X**2*Y - X*Y*Z + 7*Z**3 + 1\n \n     assert f != g\n+\n+    # Original test case to verify the issue fix\n+    U, V, W = symbols(\"u,v,w\")\n+    g = 3*U**2*V - U*V*W + 7*W**3 + 1\n+    assert f.as_expr(U, V, W) == g\n+\n+    # Additional test case with different symbols and order\n+    A, B, C = symbols(\"a,b,c\")\n+    g = 3*A**2*B - A*B*C + 7*C**3 + 1\n+    assert f.as_expr(A, B, C) == g\n+\n+    # Test with mismatched number of symbols\n+    raises(ValueError, lambda: f.as_expr(U, V))\n     assert f.as_expr(X, Y, Z) == g\n \n     raises(ValueError, lambda: f.as_expr(X))\n",
  "sympy__sympy-24661": "diff --git a/sympy/parsing/tests/test_sympy_parser.py b/sympy/parsing/tests/test_sympy_parser.py\nindex 3723931..42cbc98 100644\n--- a/sympy/parsing/tests/test_sympy_parser.py\n+++ b/sympy/parsing/tests/test_sympy_parser.py\n@@ -270,6 +270,33 @@ def test_convert_equals_signs():\n     y = Symbol('y')\n     assert parse_expr(\"1*2=x\", transformations=transformations) == Eq(2, x)\n     assert parse_expr(\"y = x\", transformations=transformations) == Eq(y, x)\n+\n+from sympy.core import Symbol, Function, Float, Rational, Integer, I, Mul, Pow, Eq, Lt, Le, Gt, Ge, Ne\n+from sympy.parsing.sympy_parser import parse_expr\n+\n+def test_issue_24288():\n+    inputs = {\n+        \"1 < 2\": Lt(1, 2, evaluate=False),\n+        \"1 <= 2\": Le(1, 2, evaluate=False),\n+        \"1 > 2\": Gt(1, 2, evaluate=False),\n+        \"1 >= 2\": Ge(1, 2, evaluate=False),\n+        \"1 != 2\": Ne(1, 2, evaluate=False),\n+        \"1 == 2\": Eq(1, 2, evaluate=False)\n+    }\n+    for text, result in inputs.items():\n+        assert parse_expr(text, evaluate=False) == result\n+\n+def test_additional_relational_cases():\n+    inputs = {\n+        \"3 < 4\": Lt(3, 4, evaluate=False),\n+        \"3 <= 4\": Le(3, 4, evaluate=False),\n+        \"5 > 4\": Gt(5, 4, evaluate=False),\n+        \"6 >= 4\": Ge(6, 4, evaluate=False),\n+        \"3 != 3\": Ne(3, 3, evaluate=False),\n+        \"3 == 3\": Eq(3, 3, evaluate=False)\n+    }\n+    for text, result in inputs.items():\n+        assert parse_expr(text, evaluate=False) == result\n     assert parse_expr(\"(2*y = x) = False\",\n         transformations=transformations) == Eq(Eq(2*y, x), False)\n \n",
  "astropy__astropy-14369": "diff --git a/astropy/units/tests/test_format.py b/astropy/units/tests/test_format.py\nindex 062b5f4..d331a48 100644\n--- a/astropy/units/tests/test_format.py\n+++ b/astropy/units/tests/test_format.py\n@@ -35,6 +35,53 @@ from astropy.units.utils import is_effectively_unity\n         ([\"mag(ct/s)\"], u.MagUnit(u.ct / u.s)),\n         ([\"dex\"], u.dex),\n         ([\"dex(cm s**-2)\", \"dex(cm/s2)\"], u.DexUnit(u.cm / u.s**2)),\n+        # Original test patch cases\n+        ([\"km/s/Mpc\"], u.km / u.s / u.Mpc),\n+        ([\"km/(s.Mpc)\"], u.km / u.s / u.Mpc),\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.W / (u.m * u.kpc**2))),\n+        ([\"1.5\u00d710+11/m\"], u.Unit(1.5e11 / u.m)),\n+        ([\"/s\"], u.s**-1),\n+        \"km/s.Mpc-1\",\n+        \"/s.Mpc\",\n+    ],\n+)\n+def test_unit_grammar(strings, unit):\n+    for s in strings:\n+        print(s)\n+        unit2 = u_format.Generic.parse(s)\n+        assert unit2 == unit\n+\n+\n+@pytest.mark.parametrize(\n+    \"string\", [\"sin( /pixel /s)\", \"mag(mag)\", \"dB(dB(mW))\", \"dex()\"]\n+)\n+def test_unit_grammar_fail(string):\n+    with pytest.raises(ValueError):\n+        print(string)\n+        u_format.Generic.parse(string)\n+\n+\n+@pytest.mark.parametrize(\n+    \"strings, unit\",\n+    [\n+        ([\"0.1nm\"], u.AA),\n+        ([\"mW/m2\"], u.Unit(u.erg / u.cm**2 / u.s)),\n+        ([\"mW/(m2)\"], u.Unit(u.erg / u.cm**2 / u.s)),\n+        ([\"km/s\", \"km.s-1\"], u.km / u.s),\n+        ([\"10pix/nm\"], u.Unit(10 * u.pix / u.nm)),\n+        ([\"1.5x10+11m\"], u.Unit(1.5e11 * u.m)),\n+        ([\"1.5\u00d710+11m\"], u.Unit(1.5e11 * u.m)),\n+        ([\"m2\"], u.m**2),\n+        ([\"10+21m\"], u.Unit(u.m * 1e21)),\n+        ([\"2.54cm\"], u.Unit(u.cm * 2.54)),\n+        ([\"20%\"], 0.20 * u.dimensionless_unscaled),\n+        ([\"10+9\"], 1.0e9 * u.dimensionless_unscaled),\n+        ([\"2x10-9\"], 2.0e-9 * u.dimensionless_unscaled),\n+        # Additional cases for the issue\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.W / (u.m * u.kpc**2))),\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.W / u.kpc**2 / u.s)),\n+        ([\"m/s/kpc\"], u.Unit(u.m / u.s / u.kpc)),\n+        ([\"erg/AA/s/kpc2\"], u.Unit(u.erg / u.AA / u.s / u.kpc**2)),\n     ],\n )\n def test_unit_grammar(strings, unit):\n@@ -90,6 +137,53 @@ def test_unit_grammar_fail(string):\n         ([\"[cm/s2]\"], dex(u.cm / u.s**2)),\n         ([\"[K]\"], dex(u.K)),\n         ([\"[-]\"], dex(u.dimensionless_unscaled)),\n+        # Original test patch cases\n+        ([\"km/s/Mpc\"], u.km / u.s / u.Mpc),\n+        ([\"km/(s.Mpc)\"], u.km / u.s / u.Mpc),\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.W / (u.m * u.kpc**2))),\n+        ([\"1.5\u00d710+11/m\"], u.Unit(1.5e11 / u.m)),\n+        ([\"/s\"], u.s**-1),\n+        \"km/s.Mpc-1\",\n+        \"/s.Mpc\",\n+    ],\n+)\n+def test_unit_grammar(strings, unit):\n+    for s in strings:\n+        print(s)\n+        unit2 = u_format.Generic.parse(s)\n+        assert unit2 == unit\n+\n+\n+@pytest.mark.parametrize(\n+    \"string\", [\"sin( /pixel /s)\", \"mag(mag)\", \"dB(dB(mW))\", \"dex()\"]\n+)\n+def test_unit_grammar_fail(string):\n+    with pytest.raises(ValueError):\n+        print(string)\n+        u_format.Generic.parse(string)\n+\n+\n+@pytest.mark.parametrize(\n+    \"strings, unit\",\n+    [\n+        ([\"0.1nm\"], u.AA),\n+        ([\"mW/m2\"], u.Unit(u.erg / u.cm**2 / u.s)),\n+        ([\"mW/(m2)\"], u.Unit(u.erg / u.cm**2 / u.s)),\n+        ([\"km/s\", \"km.s-1\"], u.km / u.s),\n+        ([\"10pix/nm\"], u.Unit(10 * u.pix / u.nm)),\n+        ([\"1.5x10+11m\"], u.Unit(1.5e11 * u.m)),\n+        ([\"1.5\u00d710+11m\"], u.Unit(1.5e11 * u.m)),\n+        ([\"m2\"], u.m**2),\n+        ([\"10+21m\"], u.Unit(u.m * 1e21)),\n+        ([\"2.54cm\"], u.Unit(u.cm * 2.54)),\n+        ([\"20%\"], 0.20 * u.dimensionless_unscaled),\n+        ([\"10+9\"], 1.0e9 * u.dimensionless_unscaled),\n+        ([\"2x10-9\"], 2.0e-9 * u.dimensionless_unscaled),\n+        # Additional cases for the issue\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.W / (u.m * u.kpc**2))),\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.W / u.kpc**2 / u.s)),\n+        ([\"m/s/kpc\"], u.Unit(u.m / u.s / u.kpc)),\n+        ([\"erg/AA/s/kpc2\"], u.Unit(u.erg / u.AA / u.s / u.kpc**2)),\n     ],\n )\n def test_cds_grammar(strings, unit):\n",
  "astropy__astropy-14598": "",
  "django__django-11299": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex b3dc643..6c1917f 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1899,6 +1899,20 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Author.objects.get(), author)\n \n     @skipUnlessDBFeature('supports_table_check_constraints')\n+    def test_or_and_constraint_sql_generation(self):\n+        app_label = 'test_or_and_constraint'\n+        constraint_name = 'or_and_constraint_check'\n+        from_state = self.set_up_test_model(app_label)\n+        check = models.Q(field_1__isnull=False, flag__exact=True) | models.Q(flag__exact=False)\n+        constraint = models.CheckConstraint(check=check, name=constraint_name)\n+        operation = migrations.AddConstraint('TestConstraint', constraint)\n+        to_state = from_state.clone()\n+        operation.state_forwards(app_label, to_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, from_state, to_state)\n+            # Checking the generated SQL (pseudo code, adjust based on the actual test framework)\n+            # sql_statements = editor.collected_sql\n+            # self.assertIn('CHECK (((\"field_1\" IS NOT NULL AND \"flag\" = 1) OR \"flag\" = 0))', sql_statements)\n     def test_remove_constraint(self):\n         project_state = self.set_up_test_model(\"test_removeconstraint\", constraints=[\n             models.CheckConstraint(check=models.Q(pink__gt=2), name=\"test_remove_constraint_pony_pink_gt_2\"),\n",
  "django__django-11477": "diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex e4898b6..05f6d3a 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -163,8 +163,19 @@ class URLTranslationTests(URLTestCaseBase):\n             self.assertEqual(translate_url('/nl/gebruikers/', 'en'), '/en/users/')\n             self.assertEqual(translation.get_language(), 'nl')\n \n+    def test_translate_url_with_optional_parameters(self):\n+        with translation.override('en'):\n+            # Test URL with both required and optional parameters present\n+            self.assertEqual(translate_url('/en/regex_optional/1/2/', 'nl'), '/nl/regex_optional/1/2/')\n+            # Test URL with the optional parameter absent\n+            self.assertEqual(translate_url('/en/regex_optional/1/', 'nl'), '/nl/regex_optional/1/')\n+            self.assertEqual(translation.get_language(), 'en')\n \n-class URLNamespaceTests(URLTestCaseBase):\n+        with translation.override('nl'):\n+            # Reverse translation test\n+            self.assertEqual(translate_url('/nl/regex_optional/1/2/', 'en'), '/en/regex_optional/1/2/')\n+            self.assertEqual(translate_url('/nl/regex_optional/1/', 'en'), '/en/regex_optional/1/')\n+            self.assertEqual(translation.get_language(), 'nl')\n     \"\"\"\n     Tests if the translations are still working within namespaces.\n     \"\"\"\n",
  "django__django-12273": "",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..f0e9015 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -605,6 +605,12 @@ class DeletionTests(TestCase):\n \n \n class FastDeleteTests(TestCase):\n+    def test_fast_delete_all_no_subquery(self):\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        # No subqueries should be used when performing a full delete.\n+        self.assertNotIn('SELECT', sql)\n \n     def test_fast_delete_fk(self):\n         u = User.objects.create(\n@@ -702,4 +708,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..b1a30e4 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from decimal import Decimal\n \n@@ -24,8 +25,23 @@ class DecimalFieldTests(TestCase):\n         msg = '\u201cabc\u201d value must be a decimal number.'\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n-\n-    def test_default(self):\n+    def test_invalid_value(self):\n+        field = models.DecimalField(max_digits=4, decimal_places=2)\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        tests = [\n+            (),\n+            [],\n+            {},\n+            set(),\n+            object(),\n+            complex(),\n+            'non-numeric string',\n+            b'non-numeric byte-string',\n+        ]\n+        for value in tests:\n+            with self.subTest(value=value):\n+                with self.assertRaisesMessage(ValidationError, msg % (value,)):\n+                    field.clean(value, None)\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n \n",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..1b34b3f 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n \n@@ -68,7 +69,34 @@ class PickleabilityTestCase(TestCase):\n         klass = Event.happening.RelatedObjectDoesNotExist\n         self.assertIs(pickle.loads(pickle.dumps(klass)), klass)\n \n-    def test_manager_pickle(self):\n+    def test_pickle_values_annotation(self):\n+        # Creating test data\n+        Happening.objects.create(name='test_happening', when=datetime.datetime.now())\n+        \n+        # Annotating and using values\n+        qs = Happening.objects.values('name').annotate(latest_time=models.Max('when'))\n+        reloaded = Happening.objects.all()\n+        reloaded.query = pickle.loads(pickle.dumps(qs.query))\n+        self.assertEqual(\n+            reloaded.get(),\n+            {'name': 'test_happening', 'latest_time': self.happening.when},\n+        )\n+\n+    def test_pickle_values_list(self):\n+        # Creating test data\n+        Happening.objects.create(name='test_happening')\n+        \n+        # Using values_list with different options and ensuring pickle works\n+        tests = [\n+            Happening.objects.values_list('name'),\n+            Happening.objects.values_list('name', flat=True),\n+            Happening.objects.values_list('name', named=True),\n+        ]\n+        for qs in tests:\n+            with self.subTest(qs._iterable_class.__name__):\n+                reloaded = Happening.objects.all()\n+                reloaded.query = pickle.loads(pickle.dumps(qs.query))\n+                self.assertEqual(reloaded.get(), {'name': 'test_happening'})\n         pickle.loads(pickle.dumps(Happening.objects))\n \n     def test_model_pickle(self):\n",
  "django__django-13449": "diff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\nindex 3f59cdf..d9c7568 100644\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -11,4 +11,5 @@ class Employee(models.Model):\n     department = models.CharField(max_length=40, blank=False, null=False)\n     hire_date = models.DateField(blank=False, null=False)\n     age = models.IntegerField(blank=False, null=False)\n-    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\n",
  "django__django-13512": "diff --git a/tests/forms_tests/field_tests/test_jsonfield.py b/tests/forms_tests/field_tests/test_jsonfield.py\nindex e31bff4..09bdb0a 100644\n--- a/tests/forms_tests/field_tests/test_jsonfield.py\n+++ b/tests/forms_tests/field_tests/test_jsonfield.py\n@@ -25,6 +25,13 @@ class JSONFieldTest(SimpleTestCase):\n             field.clean('{some badly formed: json}')\n \n     def test_prepare_value(self):\n+        # Additional test cases for handling Unicode in JSONField\n+        field = JSONField()\n+        self.assertEqual(field.prepare_value({'language': '\u4e2d\u6587'}), '{\"language\": \"\u4e2d\u6587\"}')\n+        self.assertEqual(field.prepare_value({'emoji': '\ud83d\ude00\ud83d\udc31'}), '{\"emoji\": \"\ud83d\ude00\ud83d\udc31\"}')\n+        self.assertEqual(field.prepare_value({'special_chars': '\\\\n\\\\t\\\\b'}), '{\"special_chars\": \"\\\\\\\\n\\\\\\\\t\\\\\\\\b\"}')\n+        self.assertEqual(field.prepare_value(['\u65e5\u672c\u8a9e', '\ud55c\uad6d\uc5b4', '\u0440\u0443\u0441\u0441\u043a\u0438\u0439']), '[\"\u65e5\u672c\u8a9e\", \"\ud55c\uad6d\uc5b4\", \"\u0440\u0443\u0441\u0441\u043a\u0438\u0439\"]')\n+        self.assertEqual(field.prepare_value({'nested': {'key': 'val', 'arr': [1, '\u4e8c', 3]}}), '{\"nested\": {\"key\": \"val\", \"arr\": [1, \"\u4e8c\", 3]}}')\n         field = JSONField()\n         self.assertEqual(field.prepare_value({'a': 'b'}), '{\"a\": \"b\"}')\n         self.assertEqual(field.prepare_value(None), 'null')\n",
  "django__django-14404": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 8fb91af..2bef324 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -6615,7 +6615,41 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         response = self.client.get(known_url[:-1])\n         self.assertRedirects(response, '/test_admin/admin/login/?next=/test_admin/admin/admin_views/article')\n \n-    @override_settings(APPEND_SLASH=False)\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/prefix/')\n+    def test_redirect_with_force_script_name_and_append_slash(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])  # Request without trailing slash\n+        self.assertRedirects(\n+            response,\n+            '/prefix' + known_url,  # Ensure FORCE_SCRIPT_NAME is included in the redirect\n+            status_code=301,\n+            fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/another_prefix/')\n+    def test_redirect_with_different_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])  # Request without trailing slash\n+        self.assertRedirects(\n+            response,\n+            '/another_prefix' + known_url,  # Ensure the different FORCE_SCRIPT_NAME is respected\n+            status_code=301,\n+            fetch_redirect_response=False\n+        )\n     def test_missing_slash_append_slash_false(self):\n         superuser = User.objects.create_user(\n             username='staff',\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..4fc5abd 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -691,7 +691,37 @@ class WriterTests(SimpleTestCase):\n         result = self.safe_exec(output)\n         self.assertIn(\"Migration\", result)\n \n-    def test_migration_path(self):\n+    def test_migration_with_custom_field_and_mixin(self):\n+        \"\"\"\n+        Test that migration serialization includes necessary imports when custom fields and mixins are used.\n+        \"\"\"\n+        class MyField(models.TextField):\n+            pass\n+\n+        class MyMixin:\n+            pass\n+        \n+        migration = type(\"Migration\", (migrations.Migration,), {\n+            \"operations\": [\n+                migrations.CreateModel(\n+                    name=\"MyModel\",\n+                    fields=[\n+                        ('name', MyField(primary_key=True))\n+                    ],\n+                    options={\n+                        'abstract': False,\n+                    },\n+                    bases=(MyMixin, models.Model),\n+                ),\n+            ],\n+            \"dependencies\": [],\n+        })\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        self.assertIn(\"from django.db import models\", output)\n+        self.assertIn(\"class MyModel\", output)\n+        self.assertIn(\"MyField(primary_key=True)\", output)\n+        self.assertIn(\"bases=(MyMixin, models.Model)\", output)\n         test_apps = [\n             'migrations.migrations_test_apps.normal',\n             'migrations.migrations_test_apps.with_package_model',\n",
  "django__django-15375": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1d4ef56..b29e3a4 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1637,9 +1637,51 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertEqual(len(qs), 6)\n \n+    def test_aggregate_with_default_after_annotate(self):\n+        result = Book.objects.annotate(\n+            idx=F('id')\n+        ).aggregate(Sum('id', default=0))\n+        self.assertEqual(result['id__sum'], Book.objects.aggregate(Sum('id'))['id__sum'])\n+\n+    def test_aggregate_with_default_long_form(self):\n+        result = Book.objects.annotate(\n+            idx=F('id')\n+        ).aggregate(x=Coalesce(Sum('id'), 0))\n+        self.assertEqual(result['x'], Book.objects.aggregate(Sum('id'))['id__sum'])\n+\n+    def test_aggregate_with_complex_annotation_and_default(self):\n+        result = Book.objects.annotate(\n+            double_price=F('price') * 2\n+        ).aggregate(total=Sum('double_price', default=Decimal('0.00')))\n+        expected_total = Book.objects.annotate(\n+            double_price=F('price') * 2\n+        ).aggregate(Sum('double_price'))['double_price__sum']\n+        self.assertEqual(result['total'], expected_total)\n+\n     def test_exists_extra_where_with_aggregate(self):\n         qs = Book.objects.all().annotate(\n             count=Count('id'),\n             exists=Exists(Author.objects.extra(where=['1=0'])),\n         )\n-        self.assertEqual(len(qs), 6)\n+        self.assertEqual(len(qs), 6)\n+\n+    def test_aggregate_with_default_after_annotate(self):\n+        result = Book.objects.annotate(\n+            idx=F('id')\n+        ).aggregate(Sum('id', default=0))\n+        self.assertEqual(result['id__sum'], Book.objects.aggregate(Sum('id'))['id__sum'])\n+\n+    def test_aggregate_with_default_long_form(self):\n+        result = Book.objects.annotate(\n+            idx=F('id')\n+        ).aggregate(x=Coalesce(Sum('id'), 0))\n+        self.assertEqual(result['x'], Book.objects.aggregate(Sum('id'))['id__sum'])\n+\n+    def test_aggregate_with_complex_annotation_and_default(self):\n+        result = Book.objects.annotate(\n+            double_price=F('price') * 2\n+        ).aggregate(total=Sum('double_price', default=Decimal('0.00')))\n+        expected_total = Book.objects.annotate(\n+            double_price=F('price') * 2\n+        ).aggregate(Sum('double_price'))['double_price__sum']\n+        self.assertEqual(result['total'], expected_total)\n",
  "django__django-15695": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 99db46a..29f8a7c 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -3000,6 +3000,46 @@ class OperationTests(OperationTestBase):\n                 \"old_fields\": (\"weight\", \"pink\"),\n             },\n         )\n+    \n+    def test_rename_index_with_unnamed_index(self):\n+        \"\"\"\n+        Test RenameIndex on an unnamed index to ensure it handles moving\n+        backward and forward without crashing.\n+        \"\"\"\n+        app_label = 'test_app'\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        new_state = project_state.clone()\n+        \n+        # Initial index name (auto-generated).\n+        old_index_name = self.get_auto_generated_index_name('pony', ['weight', 'pink'])\n+        \n+        # Rename operation.\n+        operation = migrations.RenameIndex(\n+            model_name='pony',\n+            old_name=old_index_name,\n+            new_name='new_pony_test_idx',\n+        )\n+        \n+        # Rename index forwards.\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        \n+        # Check that the new index name exists.\n+        self.assertIndexNameExists('pony', 'new_pony_test_idx')\n+        \n+        # Move backward (should restore the old auto-generated name).\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        \n+        # Check that the old index name exists again.\n+        self.assertIndexNameExists('pony', old_index_name)\n+        \n+        # Re-apply renaming (should not crash).\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        \n+        # Ensure the new index name exists.\n+        self.assertIndexNameExists('pony', 'new_pony_test_idx')\n \n     def test_rename_index_unknown_unnamed_index(self):\n         app_label = \"test_rninuui\"\n",
  "django__django-15732": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 42e02c2..a12a3e7 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -594,6 +594,67 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n             and type(operation) is not type(self)\n         )\n \n+class TestUniqueTogetherConstraints(TestCase):\n+    \n+    @skipUnlessDBFeature(\"allows_multiple_constraints_on_same_fields\")\n+    def test_remove_unique_together_with_existing_unique(self):\n+        \"\"\"\n+        Test removing unique_together on a field that also has a unique constraint.\n+        \"\"\"\n+        app_label = \"test_rutoue\"\n+        project_state = self.apply_operations(\n+            app_label,\n+            ProjectState(),\n+            operations=[\n+                migrations.CreateModel(\n+                    \"Pony\",\n+                    fields=[\n+                        (\"id\", models.AutoField(primary_key=True)),\n+                        (\"serial_number\", models.CharField(max_length=30, unique=True)),\n+                    ],\n+                    options={\"unique_together\": {(\"serial_number\",)}},\n+                ),\n+            ],\n+        )\n+        table_name = f\"{app_label}_pony\"\n+        unique_constraint_name = f\"{table_name}_serial_number_key\"\n+        unique_together_constraint_name = f\"{table_name}_serial_number_uniq\"\n+\n+        # Ensure both constraints exist initially\n+        self.assertConstraintExists(table_name, unique_constraint_name, value=False)\n+        self.assertConstraintExists(table_name, unique_together_constraint_name, value=False)\n+\n+        new_state = project_state.clone()\n+        operation = migrations.AlterUniqueTogether(\"Pony\", set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+\n+        # Ensure only the unique_together constraint is removed\n+        self.assertConstraintExists(table_name, unique_constraint_name, value=False)\n+        self.assertConstraintNotExists(table_name, unique_together_constraint_name)\n+\n+    def assertConstraintExists(self, table_name, constraint_name, value=True):\n+        with connection.cursor() as cursor:\n+            cursor.execute(\"\"\"\n+                SELECT COUNT(*) FROM pg_constraint\n+                WHERE conname = %s AND conrelid = %s::regclass\n+                \"\"\", [constraint_name, table_name])\n+            exists = cursor.fetchone()[0]\n+            self.assertEqual(bool(exists), value)\n+\n+    def assertConstraintNotExists(self, table_name, constraint_name):\n+        self.assertConstraintExists(table_name, constraint_name, value=False)\n+        return super().can_reduce_through(operation, app_label) or (\n+            isinstance(operation, AlterTogetherOptionOperation)\n+            and type(operation) is not type(self)\n+        )\n+\n+\n+from django.test import TestCase\n+from django.db import connection, migrations, models\n+from django.db.migrations.state import ProjectState\n+from django.test.utils import skipUnlessDBFeature\n \n class AlterUniqueTogether(AlterTogetherOptionOperation):\n     \"\"\"\n",
  "django__django-15916": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex cc5e08c..2a38681 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -3498,7 +3498,60 @@ class FormFieldCallbackTests(SimpleTestCase):\n \n \n class LocalizedModelFormTest(TestCase):\n-    def test_model_form_applies_localize_to_some_fields(self):\n+    def test_custom_callback_in_meta(self):\n+        def callback(db_field, **kwargs):\n+            # Ensure callback returns a Textarea widget for all fields\n+            return forms.CharField(widget=forms.Textarea)\n+\n+        class NewForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = [\"id\", \"name\"]\n+                formfield_callback = callback\n+\n+        for field in NewForm.base_fields.values():\n+            self.assertEqual(type(field.widget), forms.Textarea)\n+\n+    def test_custom_callback_from_base_form_meta(self):\n+        def callback(db_field, **kwargs):\n+            # Ensure callback returns a Textarea widget for all fields\n+            return forms.CharField(widget=forms.Textarea)\n+\n+        class BaseForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = \"__all__\"\n+                formfield_callback = callback\n+\n+        NewForm = modelform_factory(model=Person, form=BaseForm)\n+        \n+        class InheritedForm(NewForm):\n+            pass\n+\n+        for name, field in NewForm.base_fields.items():\n+            self.assertEqual(type(field.widget), forms.Textarea)\n+            self.assertEqual(\n+                type(field.widget),\n+                type(InheritedForm.base_fields[name].widget),\n+            )\n+\n+    def test_modelform_factory_uses_formfield_callback(self):\n+        def all_required(db_field, **kwargs):\n+            formfield = db_field.formfield(**kwargs)\n+            formfield.required = True\n+            return formfield\n+\n+        class MyModelForm(forms.ModelForm):\n+            class Meta:\n+                model = MyModel\n+                fields = [\"active\", \"name\"]\n+                formfield_callback = all_required\n+\n+        FactoryForm = modelform_factory(MyModel, form=MyModelForm)\n+        form_instance = FactoryForm()\n+\n+        for field in form_instance.fields.values():\n+            self.assertTrue(field.required)\n         class PartiallyLocalizedTripleForm(forms.ModelForm):\n             class Meta:\n                 model = Triple\n",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..0654c2b 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -5,13 +5,49 @@ import re\n \n from django.core import serializers\n from django.core.serializers.base import DeserializationError\n-from django.core.serializers.json import DjangoJSONEncoder\n+from django.core import serializers\n+from django.db import models\n+from django.db.models import Manager\n from django.db import models\n from django.test import SimpleTestCase, TestCase, TransactionTestCase\n from django.test.utils import isolate_apps\n from django.utils.translation import gettext_lazy, override\n \n-from .models import Score\n+class TestTagMaster(models.Model):\n+    name = models.CharField(max_length=120)\n+\n+class TestTagManager(Manager):\n+    def get_queryset(self):\n+        qs = super().get_queryset()\n+        qs = qs.select_related(\"master\")\n+        return qs\n+\n+class TestTag(models.Model):\n+    objects = TestTagManager()\n+    name = models.CharField(max_length=120)\n+    master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)\n+\n+class Test(models.Model):\n+    name = models.CharField(max_length=120)\n+    tags = models.ManyToManyField(TestTag, blank=True)\n+\n+class JsonSerializerTestCase(SerializersTestBase, TestCase):\n+    serializer_name = \"json\"\n+\n+    # Original test cases...\n+    \n+    def test_custom_manager_m2m_serialization(self):\n+        tag_master = TestTagMaster.objects.create(name=\"master\")\n+        tag = TestTag.objects.create(name=\"tag\", master=tag_master)\n+        test = Test.objects.create(name=\"test\")\n+        test.tags.add(tag)\n+        test.save()\n+        \n+        # Attempt to serialize, expecting no exceptions if issue is fixed\n+        try:\n+            serializers.serialize(\"json\", [test])\n+        except Exception as e:\n+            self.fail(f\"Serialization of m2m relation with select_related failed: {e}\")\n from .tests import SerializersTestBase, SerializersTransactionTestBase\n \n \n",
  "matplotlib__matplotlib-23476": "",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 87375f2..3543291 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6587,6 +6587,14 @@ def test_integrate(dask):\n \n     # along y\n     actual = da.integrate(\"y\")\n+\n+    # New test case for using coordinate 'coord' argument\n+    actual_coord = da.integrate(coord=\"y\")\n+    assert_equal(actual, actual_coord)  # Ensure consistent results with dim and coord\n+\n+    # Test that using 'dim' raises a FutureWarning\n+    with pytest.warns(FutureWarning):\n+        da.integrate(dim=\"y\")\n     expected_y = xr.DataArray(\n         np.trapz(da, da[\"y\"], axis=1),\n         dims=[\"x\"],\n",
  "pydata__xarray-4094": "",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..e496f6a 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -130,6 +130,34 @@ def test_regex_error(capsys: CaptureFixture) -> None:\n     )\n     assert assertString in output.err\n \n+from typing import Any\n+import re\n+import pytest\n+from pylint.lint import Run\n+from tests.config.conftest import EMPTY_MODULE\n+from pytest import CaptureFixture\n+\n+CSV_REGEX_COMMA_CASES = [\n+    (\"foo\", [\"foo\"]),\n+    (\"foo,bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar{1,3}\", [\"foo\", \"bar{1,3}\"]),\n+    (\"foo{1,3},bar{2,4}\", [\"foo{1,3}\", \"bar{2,4}\"]),\n+    (\"(foo{1,3}),bar\", [\"(foo{1,3})\", \"bar\"]),\n+]\n+\n+@pytest.mark.parametrize(\"in_string,expected\", CSV_REGEX_COMMA_CASES)\n+def test_csv_regex_comma_in_quantifier(in_string: str, expected: list[str]) -> None:\n+    \"\"\"Check that we correctly parse a comma-separated regex when there are one or more commas within quantifier expressions.\"\"\"\n+    def _template_run(in_string: str) -> list[re.Pattern[Any]]:\n+        r = Run(\n+            [str(EMPTY_MODULE), rf\"--bad-names-rgx={in_string}\"],\n+            exit=False,\n+        )\n+        bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs\n+        return bad_names_rgxs\n+\n+    assert _template_run(in_string) == [re.compile(regex) for regex in expected]\n \n def test_csv_regex_error(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error when an option is passed and one\n",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..3bfd2d6 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1156,6 +1156,9 @@ def test_summary_list_after_errors(testdir):\n     )\n \n \n+import pytest\n+from _pytest.main import ExitCode\n+\n def test_importorskip():\n     with pytest.raises(\n         pytest.skip.Exception,\n@@ -1184,4 +1187,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "diff --git a/testing/test_mark_expression.py b/testing/test_mark_expression.py\nindex 10b71e9..ccafa0a 100644\n--- a/testing/test_mark_expression.py\n+++ b/testing/test_mark_expression.py\n@@ -128,6 +128,7 @@ def test_syntax_errors(expr: str, column: int, message: str) -> None:\n         \"not[and]or\",\n         \"1234+5678\",\n         \"123.232\",\n+        \"None\",\n         \"True\",\n         \"False\",\n         \"if\",\n",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..50a61e2 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,37 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+\n+def test_feature_union_with_custom_transformer_pandas_output():\n+    \"\"\"Test FeatureUnion with a custom transformer and pandas output.\"\"\"\n+    import pandas as pd\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn.pipeline import FeatureUnion, make_union\n+    from sklearn import set_config\n+\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y: pd.Series | None = None, **kwargs):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y: pd.Series | None = None) -> pd.DataFrame:\n+            return X[\"value\"].groupby(X[\"date\"]).sum().reset_index(drop=True)\n+\n+    # Set pandas output\n+    set_config(transform_output=\"pandas\")\n+    union = make_union(MyTransformer())\n+    result = union.fit_transform(data)\n+\n+    # Check if the result is a DataFrame\n+    assert isinstance(result, pd.DataFrame)\n+    # Check the shape of the result\n+    assert result.shape[0] == 4  # 4 unique dates\n+    assert result.shape[1] == 1  # 1 column after aggregation\n+\n+    # Reset to default output\n+    set_config(transform_output=\"default\")\n",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a32a965..a64d3ec 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -266,6 +266,11 @@ def test_parse_annotation():\n                           [pending_xref, \"int\"],\n                           [desc_sig_punctuation, \"]\"]))\n \n+def test_parse_annotation_none():\n+    # Test that None as a type hint generates an object-reference\n+    doctree = _parse_annotation(\"None\")\n+    assert_node(doctree, ([pending_xref, \"None\"],))\n+    assert_node(doctree[0], pending_xref, refdomain=\"py\", reftype=\"obj\", reftarget=\"None\")\n \n def test_pyfunction_signature(app):\n     text = \".. py:function:: hello(name: str) -> str\"\n@@ -742,4 +747,3 @@ def test_modindex_common_prefix(app):\n                 IndexEntry('sphinx_intl', 0, 'index', 'module-sphinx_intl', '', '', '')])],\n         True\n     )\n-\n",
  "sphinx-doc__sphinx-8056": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 1d6a8cf..ef7edbf 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1317,7 +1317,35 @@ class NumpyDocstringTest(BaseDocstringTest):\n             expected = dedent(expected)\n             self.assertEqual(expected, actual)\n \n-    def test_parameters_with_class_reference(self):\n+    def test_multiple_parameters(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like\n+            Input arrays, description of ``x1``, ``x2``.\n+        x3 : array_like, optional\n+            Description of x3.\n+        \"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of ``x1``, ``x2``.\n+                     **x3** (:class:`array_like`, *optional*) -- Description of x3.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of ``x1``, ``x2``.\n+        :type x1: :class:`array_like`\n+        :param x2: Input arrays, description of ``x1``, ``x2``.\n+        :type x2: :class:`array_like`\n+        :param x3: Description of x3.\n+        :type x3: :class:`array_like`, *optional*\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n         docstring = \"\"\"\\\n Parameters\n ----------\n",
  "sphinx-doc__sphinx-8551": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex fd4bdc4..2dfc067 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -767,6 +767,45 @@ def test_pydecoratormethod_signature(app):\n                           [desc, ([desc_signature, ([desc_addname, \"@\"],\n                                                     [desc_name, \"deco\"])],\n                                   desc_content)]))\n+\n+@pytest.mark.sphinx('html', testroot='basic')\n+def test_type_and_rtype_xref_resolution(app, status, warning):\n+    text = \"\"\"\n+    .. py:class:: mod.A\n+    .. py:class:: mod.submod.A\n+\n+    .. py:function:: f()\n+\n+        :param mod.A a:\n+        :param mod.submod.A b:\n+        :rtype: mod.A\n+        :rtype: mod.submod.A\n+\n+    .. py:currentmodule:: mod\n+\n+    .. py:function:: f()\n+\n+        :param A a:\n+        :param mod.A b:\n+        :param mod.submod.A c:\n+        :rtype: A\n+        :rtype: mod.A\n+        :rtype: mod.submod.A\n+\n+    .. py:currentmodule:: mod.submod\n+\n+    .. py:function:: f()\n+\n+        :param A a: BUG: links to mod.A instead of mod.submod.A\n+        :param mod.A b:\n+        :param mod.submod.A c:\n+        :rtype: A\n+        :rtype: mod.A\n+        :rtype: mod.submod.A\n+    \"\"\"\n+    restructuredtext.parse(app, text)\n+    warnings = warning.getvalue()\n+    assert \"more than one target found for cross-reference 'A'\" not in warnings\n     assert_node(doctree[1], addnodes.desc, desctype=\"method\",\n                 domain=\"py\", objtype=\"method\", noindex=False)\n \n",
  "sphinx-doc__sphinx-8593": "diff --git a/tests/roots/test-ext-autodoc/target/private.py b/tests/roots/test-ext-autodoc/target/private.py\nindex 677b469..ee0619a 100644\n--- a/tests/roots/test-ext-autodoc/target/private.py\n+++ b/tests/roots/test-ext-autodoc/target/private.py\n@@ -1,11 +1,14 @@\n+\n def private_function(name):\n     \"\"\"private_function is a docstring().\n \n     :meta private:\n     \"\"\"\n \n+_foo = None  #: :meta public:\n+\n def _public_function(name):\n     \"\"\"public_function is a docstring().\n \n     :meta public:\n-    \"\"\"\n+    \"\"\"\n",
  "sphinx-doc__sphinx-9230": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex e86a758..155560d 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -984,7 +984,46 @@ def test_info_field_list(app):\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n \n-def test_info_field_list_var(app):\n+def test_dict_param_rendering(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:class:: Class\\n\"\n+            \"\\n\"\n+            \"   :param dict(str, str) opc_meta: (optional)\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree, (nodes.target,\n+                          addnodes.index,\n+                          addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                                    [desc_addname, \"example.\"],\n+                                                    [desc_name, \"Class\"])],\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree[3][1][0][0],\n+                ([nodes.field_name, \"Parameters\"],\n+                 [nodes.field_body, nodes.bullet_list, [nodes.list_item, nodes.paragraph]]))\n+\n+    # :param dict(str, str) opc_meta:\n+    assert_node(doctree[3][1][0][0][1][0][0][0],\n+                ([addnodes.literal_strong, \"opc_meta\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"dict\"],\n+                 [addnodes.literal_emphasis, \"(\"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \", \"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \")\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"(optional)\"))\n+    assert_node(doctree[3][1][0][0][1][0][0][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"dict\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n             \"   :var int attr: blah blah\\n\")\n",
  "sphinx-doc__sphinx-9258": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a7d51b6..e04e199 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -1008,8 +1008,34 @@ def test_info_field_list(app):\n                 refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n+def test_info_field_list_piped_union_type(app):\n+    text = (\".. py:function:: foo(text)\\n\"\n+            \"\\n\"\n+            \"   :param text: a text\\n\"\n+            \"   :type text: bytes | str\\n\")\n+    doctree = restructuredtext.parse(app, text)\n \n-def test_info_field_list_var(app):\n+    # Ensure that the docstring is parsed correctly with union types\n+    assert_node(doctree, \n+                (addnodes.index,\n+                 [desc, (desc_signature, \n+                         [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree[1][1][0][0], \n+                ([nodes.field_name, \"Parameters\"],\n+                 [nodes.field_body, nodes.paragraph, \n+                  ([addnodes.literal_strong, \"text\"], \n+                   \" (\", \n+                   [pending_xref, addnodes.literal_emphasis, \"bytes\"], \n+                   [addnodes.literal_emphasis, \" | \"], \n+                   [pending_xref, addnodes.literal_emphasis, \"str\"], \n+                   \")\", \n+                   \" -- a text\")]))\n+    assert_node(doctree[1][1][0][0][1][0][2], pending_xref, \n+                refdomain=\"py\", reftype=\"class\", reftarget=\"bytes\", \n+                **{\"py:module\": \"example\", \"py:function\": \"foo\"})\n+    assert_node(doctree[1][1][0][0][1][0][4], pending_xref, \n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\", \n+                **{\"py:module\": \"example\", \"py:function\": \"foo\"})\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n             \"   :var int attr: blah blah\\n\")\n",
  "sphinx-doc__sphinx-9673": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex aa0401e..4a6664d 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -833,6 +833,28 @@ def test_autodoc_typehints_description(app):\n             '   docstring\\n'\n             in context)\n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\",\n+                                   'autodoc_typehints_description_target': 'documented'})\n+def test_autodoc_typehints_with_napoleon(app):\n+    # This test verifies that return types are correctly documented with Napoleon\n+    # when autodoc_typehints_description_target is set to \"documented\".\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autofunction:: target.typehints.decr\\n'\n+        '\\n'\n+        '   :returns: decremented number\\n'\n+        '\\n'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text()\n+    assert ('target.typehints.decr(a, b=1)\\n'\n+            '\\n'\n+            '   Returns:\\n'\n+            '      decremented number\\n'\n+            '\\n'\n+            '   Return type:\\n'\n+            '      int\\n'\n+            in context)\n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\",\n",
  "sympy__sympy-18211": "diff --git a/sympy/solvers/tests/test_solveset.py b/sympy/solvers/tests/test_solveset.py\nindex 7bd9e29..f77e159 100644\n--- a/sympy/solvers/tests/test_solveset.py\n+++ b/sympy/solvers/tests/test_solveset.py\n@@ -1048,7 +1048,14 @@ def test__solveset_multi():\n             ImageSet(Lambda(((theta,),), (0, theta)), ImageSet(Lambda(theta, (theta,)), Interval(0, pi))))\n \n \n-def test_conditionset():\n+def test_issue_solved_conditionset():\n+    n = Symbol('n')\n+    assert solveset(Eq(n*cos(n) - 3*sin(n), 0), n, domain=Reals) == \\\n+        ConditionSet(n, Eq(n*cos(n) - 3*sin(n), 0), Reals)\n+\n+    x = Symbol('x')\n+    assert solveset(Eq(x**2 + sqrt(x*2) + sin(x), 0), x, domain=Reals) == \\\n+        ConditionSet(x, Eq(sqrt(2)*sqrt(x) + x**2 + sin(x), 0), Reals)\n     assert solveset(Eq(sin(x)**2 + cos(x)**2, 1), x, domain=S.Reals) == \\\n         ConditionSet(x, True, S.Reals)\n \n",
  "sympy__sympy-18698": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 38de6f6..ff00184 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3260,7 +3260,37 @@ def test_noncommutative():\n         is_commutative=False\n     e = x/(x + x*y)\n     c = 1/( 1 + y)\n-    assert cancel(foo(e)) == foo(c)\n+from sympy import Symbol, sqf_list\n+\n+def test_issue_sqf_list():\n+    x = Symbol('x')\n+    # Test case from issue description with incorrect behavior\n+    p = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3\n+    expected_result = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\n+    assert sqf_list(p) == expected_result\n+    \n+    # Another test case with different factorization\n+    q = x**5 - 2*x**4 - 2*x**3 + 4*x**2 + x - 2\n+    expected_result_q = (1, [(x - 2, 1), (x**2 - 1, 2)])\n+    assert sqf_list(q) == expected_result_q\n+\n+    # Additional test cases\n+    r = (x - 1)**4 * (x + 2)**2 * (x**2 + x + 1)\n+    expected_result_r = (1, [(x - 1, 4), (x + 2, 2), (x**2 + x + 1, 1)])\n+    assert sqf_list(r) == expected_result_r\n+\n+    s = (x**3 - 3*x + 2)**2 * (x - 4)\n+    expected_result_s = (1, [(x**3 - 3*x + 2, 2), (x - 4, 1)])\n+    assert sqf_list(s) == expected_result_s\n+\n+    t = (x**2 - 4)**3  # should give (x - 2)**3 * (x + 2)**3\n+    expected_result_t = (1, [(x - 2, 3), (x + 2, 3)])\n+    assert sqf_list(t) == expected_result_t\n+\n+    # Regression test for a single factor\n+    u = x**2 + 2*x + 1  # (x + 1)**2\n+    expected_result_u = (1, [(x + 1, 2)])\n+    assert sqf_list(u) == expected_result_u\n     assert cancel(e + foo(e)) == c + foo(c)\n     assert cancel(e*foo(c)) == c*foo(c)\n \n",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..de3fd4b 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3254,8 +3254,9 @@ def test_issue_5786():\n     assert expand(factor(expand(\n         (x - I*y)*(z - I*t)), extension=[I])) == -I*t*x - t*y + x*z - I*y*z\n \n-\n-def test_noncommutative():\n+def test_issue_18895():\n+    z = expand((x - 1)*(y - 1))\n+    assert factor(z, extension=[I]) == (x - 1)*(y - 1)\n     class foo(Expr):\n         is_commutative=False\n     e = x/(x + x*y)\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..a881f96 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -1,3 +1,15 @@\n+\n+# Test to ensure Symbol instances do not have a __dict__ when __slots__ are used\n+def test_symbol_no_dict():\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__')\n+    with raises(AttributeError):\n+        s.__dict__\n+\n+def test_symbol_slots():\n+    s = Symbol('s')\n+    assert s.__slots__ == ('name',)\n+\n \"\"\"This tests sympy/core/basic.py with (ideally) no reference to subclasses\n of Basic or Atom.\"\"\"\n \n@@ -14,6 +26,7 @@ from sympy.core.compatibility import default_sort_key\n from sympy import sin, Q, cos, gamma, Tuple, Integral, Sum\n from sympy.functions.elementary.exponential import exp\n from sympy.testing.pytest import raises\n+from sympy import Symbol\n from sympy.core import I, pi\n \n b1 = Basic()\n",
  "sympy__sympy-24562": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 13e3235..fa3118c 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -369,8 +369,23 @@ def test_Rational_new():\n     assert n.q == 4\n     assert n.p == -2\n \n-\n-def test_Number_new():\n+def test_issue_rational_string_handling():\n+    # Ensure string representations are interpreted correctly\n+    assert Rational('0.25', '100') == Rational(1, 400)\n+    assert Rational('0.5', '100') == Rational(1, 200)\n+    assert Rational('1.5', '300') == Rational(1, 200)\n+    assert Rational('3.75', '500') == Rational(3, 400)\n+\n+    # Test with more complex string fractions\n+    assert Rational('0.001', '1000') == Rational(1, 1000000)\n+    assert Rational('2.5', '100') == Rational(1, 40)\n+    assert Rational('4.0', '200') == Rational(1, 50)\n+\n+    # Direct number input should match the behavior\n+    assert Rational(0.25, 100) == Rational('0.25', '100')\n+    assert Rational(0.5, 100) == Rational('0.5', '100')\n+    assert Rational(1.5, 300) == Rational('1.5', '300')\n+    assert Rational(3.75, 500) == Rational('3.75', '500')\n     \"\"\"\"\n     Test for Number constructor\n     \"\"\"\n",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..97409d3 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,7 +3202,21 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n-    def test_boundfield_widget_type(self):\n+    def test_boundwidget_id_for_label_uses_widget_attrs_id(self):\n+        \"\"\"\n+        The id_for_label should use the id provided in the widget's attrs when it exists.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'Option A'), ('b', 'Option B')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'custom_id'}),\n+            )\n+        \n+        form = SomeForm(auto_id='auto_%s')\n+        subwidgets = form['field'].subwidgets\n+        # Since 'id' is specified in attrs, it should be used in place of auto-generated ID\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_id_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_id_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "matplotlib__matplotlib-20676": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex b009975..5662f1d 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -301,8 +301,32 @@ def test_tool_line_handle():\n \n     assert tool_line_handle.positions == positions\n \n+import matplotlib.pyplot as plt\n+import pytest\n+from matplotlib import widgets\n+\n+@pytest.mark.parametrize('direction', [\"horizontal\", \"vertical\"])\n+def test_span_selector_direction_limits(direction):\n+    # Set up a plot with specific axis limits\n+    fig, ax = plt.subplots()\n+    ax.plot([10, 20], [10, 30])\n+    initial_xlim = ax.get_xlim()\n+    initial_ylim = ax.get_ylim()\n+\n+    # Add a SpanSelector to the axes\n+    span = widgets.SpanSelector(ax, lambda vmin, vmax: None, direction=direction, interactive=True)\n+\n+    # Perform a mouse press and release event with the span selector\n+    if direction == \"horizontal\":\n+        do_event(span, 'press', xdata=12, ydata=15, button=1)\n+        do_event(span, 'release', xdata=18, ydata=15, button=1)\n+    else:\n+        do_event(span, 'press', xdata=15, ydata=12, button=1)\n+        do_event(span, 'release', xdata=15, ydata=18, button=1)\n \n-def check_lasso_selector(**kwargs):\n+    # Assert the axes limits remain unchanged after interaction\n+    assert ax.get_xlim() == initial_xlim\n+    assert ax.get_ylim() == initial_ylim\n     ax = get_ax()\n \n     def onselect(verts):\n",
  "scikit-learn__scikit-learn-12682": "",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..b68b468 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -148,6 +148,29 @@ def test_multi_target_sample_weights():\n     assert_almost_equal(rgr.predict(X_test), rgr_w.predict(X_test))\n \n \n+import pytest\n+import numpy as np\n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+from sklearn.model_selection import cross_val_predict\n+from sklearn.utils._testing import assert_array_almost_equal\n+\n+def test_cross_val_predict_multioutputclassifier_predict_proba():\n+    X, Y = make_multilabel_classification(n_samples=100, n_features=20, n_classes=3, n_labels=2, random_state=42)\n+\n+    mo_clf = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+    \n+    # This should work without raising AttributeError\n+    pred_proba = cross_val_predict(mo_clf, X, Y, cv=5, method='predict_proba')\n+\n+    # Check that the predictions are probabilities\n+    for pred in pred_proba:\n+        assert isinstance(pred, np.ndarray)\n+        assert pred.ndim == 2\n+        assert np.all(pred >= 0) and np.all(pred <= 1)\n+        assert_array_almost_equal(pred.sum(axis=1), np.ones(pred.shape[0]))\n+\n # Import the data\n iris = datasets.load_iris()\n # create a multiple targets by randomized shuffling and concatenating y.\n",
  "sphinx-doc__sphinx-9658": "",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..21a7901 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -348,6 +348,20 @@ def test_reverse_order():\n            Product(x*y, (x, b + 1, a - 1), (y, 6, 1))\n \n \n+def test_issue_13546():\n+    n = Symbol('n')\n+    k = Symbol('k')\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    # Verify for n=2\n+    assert p.subs(n, 2).doit() == S(15)/2\n+    # Verify for n=3\n+    assert p.subs(n, 3).doit() == S(35)/4\n+    # Verify for a symbolic simplification that should match expected structure\n+    from sympy import QPochhammer\n+    q_pochhammer_exp = QPochhammer(1/2, 1/2, n)\n+    assert simplify(p) == simplify(q_pochhammer_exp)\n+\n+\n def test_issue_9983():\n     n = Symbol('n', integer=True, positive=True)\n     p = Product(1 + 1/n**(S(2)/3), (n, 1, oo))\n@@ -357,4 +371,4 @@ def test_issue_9983():\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}