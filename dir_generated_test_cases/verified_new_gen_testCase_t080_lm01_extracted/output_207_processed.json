{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..937a329 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -55,6 +55,29 @@ compound_models = {\n             )\n }\n \n+@pytest.mark.parametrize(('compound_model', 'expected_matrix'), [\n+    (m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5),\n+     np.array([[True, True, False, False],\n+               [True, True, False, False],\n+               [False, False, True, False],\n+               [False, False, False, True]])),\n+\n+    ((m.Pix2Sky_TAN() & m.Linear1D(10)) & m.Linear1D(5),\n+     np.array([[True, True, False, False],\n+               [True, True, False, False],\n+               [False, False, True, False],\n+               [False, False, False, True]])),\n+\n+    (m.Pix2Sky_TAN() & (m.Linear1D(10) & m.Linear1D(5)),\n+     np.array([[True, True, False, False],\n+               [True, True, False, False],\n+               [False, False, True, True],\n+               [False, False, True, True]]))\n+])\n+def test_separability_matrix_nested(compound_model, expected_matrix):\n+    matrix = separability_matrix(compound_model)\n+    assert np.array_equal(matrix, expected_matrix)\n+\n \n def test_coord_matrix():\n     c = _coord_matrix(p2, 'left', 2)\n",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "diff --git a/astropy/io/fits/tests/test_connect.py b/astropy/io/fits/tests/test_connect.py\nindex 00deafe..ba528aa 100644\n--- a/astropy/io/fits/tests/test_connect.py\n+++ b/astropy/io/fits/tests/test_connect.py\n@@ -1,3 +1,4 @@\n+\n import gc\n import warnings\n \n@@ -7,7 +8,7 @@ from numpy.testing import assert_allclose, assert_array_equal\n \n from astropy import units as u\n from astropy.io import fits\n-from astropy.io.fits import BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu\n+from astropy.io.fits import BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu, connect\n from astropy.io.fits.column import (\n     _fortran_to_python_format,\n     _parse_tdisp_format,\n",
  "astropy__astropy-14508": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex 6bdf92c..7315ff2 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -137,6 +137,30 @@ class TestHeaderFunctions(FitsTestCase):\n         ):\n             assert str(c) == _pad(\"FLOATNUM= -4.6737463674763E+32\")\n \n+    def test_floating_point_string_representation_card(self):\n+        \"\"\"\n+        Ensures Card formats float values with the correct precision, avoiding\n+        comment truncation\n+\n+        Regression test for https://github.com/astropy/astropy/issues/14507\n+        \"\"\"\n+        k = \"HIERARCH ABC DEF GH IJKLMN\"\n+        com = \"[m] abcdef ghijklm nopqrstu vw xyzab\"\n+        \n+        # Original problematic case\n+        c = fits.Card(k, 0.009125, com)\n+        expected_str = f\"{k} = 0.009125 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Additional cases to ensure proper formatting\n+        c = fits.Card(k, 8.95, com)\n+        expected_str = f\"{k} = 8.95 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, -99.9, com)\n+        expected_str = f\"{k} = -99.9 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n     def test_complex_value_card(self):\n         \"\"\"Test Card constructor with complex value\"\"\"\n \n",
  "astropy__astropy-14539": "diff --git a/astropy/io/fits/tests/test_diff.py b/astropy/io/fits/tests/test_diff.py\nindex 9bf4897..7554b39 100644\n--- a/astropy/io/fits/tests/test_diff.py\n+++ b/astropy/io/fits/tests/test_diff.py\n@@ -418,8 +418,16 @@ class TestDiff(FitsTestCase):\n         assert diff.common_column_names == set(\"abcdefghij\")\n         assert diff.diff_ratio == 0\n         assert diff.diff_total == 0\n+    def test_vla_diff_bug(self):\n+        \"\"\"\n+        Test for the issue where FITSDiff reports differences for identical files with VLA columns.\n+        \"\"\"\n \n-    def test_diff_empty_tables(self):\n+        col = fits.Column('a', format='QD', array=[[0], [0, 0]])\n+        hdu = fits.BinTableHDU.from_columns([col])\n+        with fits.open(hdu.writeto('diffbug.fits', overwrite=True)) as hdul:\n+            diff = fits.FITSDiff('diffbug.fits', 'diffbug.fits')\n+            assert diff.identical, f\"Expected files to be identical, found differences: {diff.diff_total}\"\n         \"\"\"\n         Regression test for https://aeon.stsci.edu/ssb/trac/pyfits/ticket/178\n \n",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..e44fb0f 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -88,8 +88,20 @@ def test_inherit_docstrings():\n         # TODO: Maybe if __doc__ is None this test should be skipped instead?\n         assert Subclass.__call__.__doc__ == \"FOO\"\n \n+def test_inherit_docstrings_properties():\n+    class Base(metaclass=misc.InheritDocstrings):\n+        @property\n+        def bar(self):\n+            \"BAR\"\n+            pass\n+\n+    class Subclass(Base):\n+        @property\n+        def bar(self):\n+            return 42\n \n-def test_set_locale():\n+    if Base.bar.__doc__ is not None:\n+        assert Subclass.bar.__doc__ == \"BAR\"\n     # First, test if the required locales are available\n     current = locale.setlocale(locale.LC_ALL)\n     try:\n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..bb928e9 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -172,6 +172,15 @@ def test_multiple_solidus():\n         u.Unit(\"m/s/kg\", format=\"vounit\")\n \n \n+import astropy.units as u\n+import pytest\n+\n+def test_unit_equality_with_none():\n+    unit = u.Unit('asdf', parse_strict='silent')\n+    assert not unit == None  # noqa: E711\n+    assert unit != None  # noqa: E711\n+    assert unit not in (None, u.m)\n+\n def test_unknown_unit3():\n     unit = u.Unit(\"FOO\", parse_strict='silent')\n     assert isinstance(unit, u.UnrecognizedUnit)\n",
  "astropy__astropy-7671": "diff --git a/astropy/utils/tests/test_introspection.py b/astropy/utils/tests/test_introspection.py\nindex 852d721..dc727ee 100644\n--- a/astropy/utils/tests/test_introspection.py\n+++ b/astropy/utils/tests/test_introspection.py\n@@ -69,7 +69,17 @@ def test_minversion():\n     test_module.__version__ = '0.12.2'\n     good_versions = ['0.12', '0.12.1', '0.12.0.dev']\n     bad_versions = ['1', '1.2rc1']\n+\n+    # Add additional test cases for LooseVersion comparison issue\n+    test_module.__version__ = '1.14.3'\n+    edge_case_versions = ['1.14dev', '1.14.2', '1.14', '1.13.9']\n+    for version in edge_case_versions:\n+        assert minversion(test_module, version)\n+    \n+    edge_case_versions_bad = ['1.15', '2.0']\n+    for version in edge_case_versions_bad:\n+        assert not minversion(test_module, version)\n     for version in good_versions:\n         assert minversion(test_module, version)\n     for version in bad_versions:\n-        assert not minversion(test_module, version)\n+        assert not minversion(test_module, version)\n",
  "astropy__astropy-8707": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex a2103c6..5b70ce9 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -79,6 +79,28 @@ class TestHeaderFunctions(FitsTestCase):\n         assert header['B'] == 'B'\n         assert header.comments['B'] == 'C'\n \n+    def test_card_from_string(self):\n+        \"\"\"\n+        Test loading a Card from a `str` object.\n+        \"\"\"\n+        c = fits.Card.fromstring(\"ABC     = 'abc'\")\n+        assert c.keyword == 'ABC'\n+        assert c.value == 'abc'\n+\n+    def test_header_fromstring_str(self):\n+        \"\"\"\n+        Test reading a Header from a `str` string.\n+\n+        This ensures `Header.fromstring` can handle `str` input.\n+        \"\"\"\n+        with open(self.data('test0.fits'), 'r', encoding='ascii') as fobj:\n+            pri_hdr_from_str = fits.Header.fromstring(fobj.read())\n+\n+        pri_hdr = fits.getheader(self.data('test0.fits'))\n+        assert pri_hdr['NAXIS'] == pri_hdr_from_str['NAXIS']\n+        assert pri_hdr == pri_hdr_from_str\n+        assert pri_hdr.tostring() == pri_hdr_from_str.tostring()\n+\n     def test_card_constructor_default_args(self):\n         \"\"\"Test Card constructor with default argument values.\"\"\"\n \n",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..a645801 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -125,6 +125,14 @@ class TestQuantityCreation:\n             q1.unit = u.cm\n \n     def test_preserve_dtype(self):\n+        \"\"\"Test if creating a Quantity from a float16 preserves the dtype\"\"\"\n+        a_scalar_16 = np.float16(1.0)\n+        q_scalar_16 = u.Quantity(a_scalar_16, u.km)\n+        assert q_scalar_16.dtype == a_scalar_16.dtype, \"Scalar float16 dtype not preserved\"\n+\n+        a_array_16 = np.array([1.0, 2.0], dtype=np.float16)\n+        q_array_16 = u.Quantity(a_array_16, u.km)\n+        assert q_array_16.dtype == a_array_16.dtype, \"Array float16 dtype not preserved\"\n         \"\"\"Test that if an explicit dtype is given, it is used, while if not,\n         numbers are converted to float (including decimal.Decimal, which\n         numpy converts to an object; closes #1419)\n",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..8d8283a 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -217,6 +217,15 @@ TEST_DATA = [\n     (URLValidator(EXTENDED_SCHEMES), 'git://example.com/', None),\n     (URLValidator(EXTENDED_SCHEMES), 'git+ssh://git@github.com/example/hg-git.git', None),\n \n+    # Test cases to verify URLValidator rejects invalid characters in username and password\n+    (URLValidator(), 'http://foo@bar@example.com', ValidationError),    # Multiple '@' characters\n+    (URLValidator(), 'http://foo:bar@baz@example.com', ValidationError), # '@' in password\n+    (URLValidator(), 'http://foo:bar/baz@example.com', ValidationError), # '/' in password\n+    (URLValidator(), 'http://foo/bar@example.com', ValidationError),     # Single '@' but in path\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError), # Multiple ':' in password\n+    (URLValidator(), 'http://invalid-.com/?m=foo@example.com', ValidationError), # '@' in query string\n+    (URLValidator(), \"http://-.~_!$&'()*+,;=%40:80%2f@example.com\", ValidationError), # Encoded '@' and '/'\n+\n     (URLValidator(EXTENDED_SCHEMES), 'git://-invalid.com', ValidationError),\n     # Trailing newlines not accepted\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..7bb30da 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -12,6 +13,7 @@ from django.test import TestCase\n from django.test.utils import Approximate, CaptureQueriesContext\n from django.utils import timezone\n \n+from django.db.models.expressions import Case, When\n from .models import Author, Book, Publisher, Store\n \n \n@@ -389,6 +391,13 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n+    def test_count_distinct_expression(self):\n+        # Test the fix for the syntax error when using a Case condition with distinct=True\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=300, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n+\n     def test_count_star(self):\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n",
  "django__django-10914": "",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..53e1835 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,3 +1,4 @@\n+\n import os\n import signal\n from unittest import mock\n@@ -15,7 +16,9 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         - The command line list\n         - The content of the file pointed by environment PGPASSFILE, or None.\n         \"\"\"\n-        def _mock_subprocess_call(*args):\n+        def _mock_subprocess_run(*args, env=os.environ, **kwargs):\n+            self.pgpassword = env.get('PGPASSWORD')\n+            return subprocess.CompletedProcess(args, 0)\n             self.subprocess_args = list(*args)\n             if 'PGPASSFILE' in os.environ:\n                 with open(os.environ['PGPASSFILE']) as f:\n@@ -25,11 +28,38 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             return 0\n         self.subprocess_args = None\n         self.pgpass = None\n-        with mock.patch('subprocess.call', new=_mock_subprocess_call):\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n             DatabaseClient.runshell_db(dbinfo)\n         return self.subprocess_args, self.pgpass\n \n-    def test_basic(self):\n+    def test_subprocess_run_with_password(self):\n+        with mock.patch('subprocess.run', new=self._mock_subprocess_run):\n+            self.assertEqual(\n+                self._run_it({\n+                    'database': 'dbname',\n+                    'user': 'someuser',\n+                    'password': 'somepassword',\n+                    'host': 'somehost',\n+                    'port': '444',\n+                }), (\n+                    ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                    'somepassword',\n+                )\n+            )\n+\n+    def test_subprocess_run_without_password(self):\n+        with mock.patch('subprocess.run', new=self._mock_subprocess_run):\n+            self.assertEqual(\n+                self._run_it({\n+                    'database': 'dbname',\n+                    'user': 'someuser',\n+                    'host': 'somehost',\n+                    'port': '444',\n+                }), (\n+                    ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                    None,\n+                )\n+            )\n         self.assertEqual(\n             self._run_it({\n                 'database': 'dbname',\n@@ -103,7 +133,9 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n \n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n-        def _mock_subprocess_call(*args):\n+        def _mock_subprocess_run(*args, env=os.environ, **kwargs):\n+            self.pgpassword = env.get('PGPASSWORD')\n+            return subprocess.CompletedProcess(args, 0)\n             handler = signal.getsignal(signal.SIGINT)\n             self.assertEqual(handler, signal.SIG_IGN)\n \n@@ -113,4 +145,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..e8c5716 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -3,6 +3,7 @@ from django.conf import settings\n from django.contrib.contenttypes import management as contenttypes_management\n from django.contrib.contenttypes.models import ContentType\n from django.core.management import call_command\n+from django.contrib.contenttypes.models import ContentType\n from django.db import migrations, models\n from django.test import TransactionTestCase, override_settings\n \n@@ -47,6 +48,17 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n \n+    @override_settings(DATABASE_ROUTERS=[TestRouter()])\n+    def test_existing_content_type_rename_other_database(self):\n+        ContentType.objects.using('other').create(app_label='contenttypes_tests', model='foo')\n+        other_content_types = ContentType.objects.using('other').filter(app_label='contenttypes_tests')\n+        call_command('migrate', 'contenttypes_tests', database='other', interactive=False, verbosity=0)\n+        self.assertFalse(other_content_types.filter(model='foo').exists())\n+        self.assertTrue(other_content_types.filter(model='renamedfoo').exists())\n+        call_command('migrate', 'contenttypes_tests', 'zero', database='other', interactive=False, verbosity=0)\n+        self.assertTrue(other_content_types.filter(model='foo').exists())\n+        self.assertFalse(other_content_types.filter(model='renamedfoo').exists())\n+\n     def test_missing_content_type_rename_ignore(self):\n         call_command('migrate', 'contenttypes_tests', database='default', interactive=False, verbosity=0,)\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n@@ -63,4 +75,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..b736d3a 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -237,7 +237,8 @@ class UsernameValidatorsTests(SimpleTestCase):\n         invalid_usernames = [\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n-            \"en\\u2013dash\",\n+            \"en\\u2013dash\", 'trailingnewline\\n',\n+            \"en\\u2013dash\", 'trailingnewline\\n'\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -248,6 +249,26 @@ class UsernameValidatorsTests(SimpleTestCase):\n                 with self.assertRaises(ValidationError):\n                     v(invalid)\n \n+    def test_ascii_validator_with_newline(self):\n+        valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n+        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\", 'trailingnewline\\n']\n+        v = validators.ASCIIUsernameValidator()\n+        for valid in valid_usernames:\n+            with self.subTest(valid=valid):\n+                v(valid)\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+        v = validators.UnicodeUsernameValidator()\n+        for valid in valid_usernames:\n+            with self.subTest(valid=valid):\n+                v(valid)\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+\n     def test_ascii_validator(self):\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n         invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n@@ -258,4 +279,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..653a8d7 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -1,5 +1,6 @@\n import os\n \n+import os\n from django.core.exceptions import ImproperlyConfigured\n from django.template import Context\n from django.template.engine import Engine\n@@ -22,6 +23,32 @@ class RenderToStringTest(SimpleTestCase):\n         )\n \n \n+class RenderToStringTest(SimpleTestCase):\n+\n+    def setUp(self):\n+        self.engine = Engine(dirs=[TEMPLATE_DIR])\n+\n+    def test_basic_context(self):\n+        self.assertEqual(\n+            self.engine.render_to_string('test_context.html', {'obj': 'test'}),\n+            'obj:test\\n',\n+        )\n+\n+    def test_autoescape_off(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:<script>\\n',\n+        )\n+\n+    def test_autoescape_on(self):\n+        # This test is added to verify that when autoescape is True, escaping occurs.\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',  # Expecting the HTML to be escaped\n+        )\n+\n class GetDefaultTests(SimpleTestCase):\n \n     @override_settings(TEMPLATES=[])\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..566218d 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -457,8 +457,29 @@ class HttpResponseTests(unittest.TestCase):\n             with self.assertRaises(DisallowedRedirect):\n                 HttpResponsePermanentRedirect(url)\n \n-\n-class HttpResponseSubclassesTests(SimpleTestCase):\n+    def test_memoryview_content(self):\n+        # Original test case\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n+        # Additional test cases\n+        # Test empty memoryview\n+        r = HttpResponse(memoryview(b''))\n+        self.assertEqual(r.content, b'')\n+\n+        # Test memoryview slice\n+        content = b'hello world'\n+        r = HttpResponse(memoryview(content)[0:5])  # hello\n+        self.assertEqual(r.content, b'hello')\n+\n+        r = HttpResponse(memoryview(content)[6:])  # world\n+        self.assertEqual(r.content, b'world')\n+\n+        # Test memoryview of non-bytes like array\n+        import array\n+        arr = array.array('b', [104, 101, 108, 108, 111])\n+        r = HttpResponse(memoryview(arr))\n+        self.assertEqual(r.content, b'hello')\n     def test_redirect(self):\n         response = HttpResponseRedirect('/redirected/')\n         self.assertEqual(response.status_code, 302)\n",
  "django__django-11141": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex b5a87e7..71901e3 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -521,7 +521,33 @@ class PycLoaderTests(MigrationTestBase):\n             for name in os.listdir(migration_dir):\n                 if name.endswith('.py'):\n                     os.remove(os.path.join(migration_dir, name))\n-            loader = MigrationLoader(connection)\n+\n+    @override_settings(\n+        MIGRATION_MODULES={'migrations': 'migrations.test_migrations_namespace_package'},\n+    )\n+    def test_loading_namespace_package(self):\n+        \"\"\"Migration directories without an __init__.py file are loaded.\"\"\"\n+        migration_loader = MigrationLoader(connection)\n+        self.assertEqual(\n+            migration_loader.graph.forwards_plan(('migrations', '0001_initial')),\n+            [('migrations', '0001_initial')],\n+        )\n+\n+    @override_settings(\n+        MIGRATION_MODULES={'migrations': 'migrations.empty_namespace_package'},\n+    )\n+    def test_empty_namespace_package(self):\n+        \"\"\"An empty namespace package should not cause errors and be recognized as unmigrated.\"\"\"\n+        migration_loader = MigrationLoader(connection)\n+        self.assertIn('migrations', migration_loader.unmigrated_apps)\n+\n+    @override_settings(\n+        MIGRATION_MODULES={'migrations': 'migrations.nonexistent_namespace_package'},\n+    )\n+    def test_nonexistent_namespace_package(self):\n+        \"\"\"A nonexistent namespace package should raise an ImportError.\"\"\"\n+        with self.assertRaises(ImportError):\n+            MigrationLoader(connection)\n             self.assertIn(('migrations', '0001_initial'), loader.disk_migrations)\n \n     def test_invalid(self):\n",
  "django__django-11149": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 296cfba..a01bc74 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -635,8 +635,39 @@ class TestInlinePermissions(TestCase):\n         self.assertNotContains(response, '<h2>Inner2s</h2>')\n         self.assertNotContains(response, 'Add another Inner2')\n         self.assertNotContains(response, 'id=\"id_inner2_set-TOTAL_FORMS\"')\n+    def test_inline_add_m2m_view_only_perm(self):\n+        # Grant view permission on books\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(reverse('admin:admin_inlines_author_add'))\n+        # Verify that the inline is visible but not editable\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"0\" id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True\n+        )\n+        self.assertNotContains(response, 'id=\"id_Author_books-0-DELETE\"')\n \n-    def test_inline_add_m2m_add_perm(self):\n+    def test_inline_change_m2m_view_only_perm(self):\n+        # Grant view permission on books\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(self.author_change_url)\n+        # Verify that the inline is visible but not editable\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"1\" id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True\n+        )\n+        self.assertContains(response, '<p>The inline Book</p>')\n+        self.assertNotContains(\n+            response,\n+            '<input type=\"checkbox\" name=\"Author_books-0-DELETE\" id=\"id_Author_books-0-DELETE\">',\n+            html=True\n+        )\n         permission = Permission.objects.get(codename='add_book', content_type=self.book_ct)\n         self.user.user_permissions.add(permission)\n         response = self.client.get(reverse('admin:admin_inlines_author_add'))\n",
  "django__django-11163": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex b25d077..82aac07 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2900,7 +2900,37 @@ class StrictAssignmentTests(SimpleTestCase):\n \n \n class ModelToDictTests(TestCase):\n-    def test_many_to_many(self):\n+    def test_model_to_dict_empty_fields(self):\n+        \"\"\"\n+        Test that model_to_dict returns an empty dictionary when fields is an empty list.\n+        \"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        result = model_to_dict(bw, fields=[])\n+        self.assertEqual(result, {})\n+\n+    def test_model_to_dict_specific_fields(self):\n+        \"\"\"\n+        Test that model_to_dict returns only the specified fields.\n+        \"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        result = model_to_dict(bw, fields=['id', 'name'])\n+        self.assertEqual(sorted(result.keys()), ['id', 'name'])\n+\n+    def test_model_to_dict_empty_exclude(self):\n+        \"\"\"\n+        Test that model_to_dict returns all fields when exclude is an empty list.\n+        \"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        result = model_to_dict(bw, exclude=[])\n+        self.assertEqual(sorted(result.keys()), ['id', 'name', 'score', 'writer_ptr'])\n+\n+    def test_model_to_dict_non_empty_exclude(self):\n+        \"\"\"\n+        Test that model_to_dict returns fields excluding the specified fields.\n+        \"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        result = model_to_dict(bw, exclude=['id', 'name'])\n+        self.assertEqual(sorted(result.keys()), ['score', 'writer_ptr'])\n         \"\"\"Data for a ManyToManyField is a list rather than a lazy QuerySet.\"\"\"\n         blue = Colour.objects.create(name='blue')\n         red = Colour.objects.create(name='red')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..3d15dd4 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,3 +1,5 @@\n+\n+from django.db.models.deletion import Collector\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n@@ -471,6 +473,32 @@ class FastDeleteTests(TestCase):\n         self.assertEqual(User.objects.count(), 1)\n         self.assertTrue(User.objects.filter(pk=u2.pk).exists())\n \n+    def test_fast_delete_instance_set_pk_none(self):\n+        u = User.objects.create()\n+        # Ensure User can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        # After delete, the primary key should be set to None.\n+        self.assertIsNone(u.pk)\n+\n+    def test_delete_instance_with_no_dependencies(self):\n+        class IndependentModel(models.Model):\n+            field = models.CharField(max_length=10)\n+\n+        independent_instance = IndependentModel.objects.create(field='test')\n+        independent_instance.delete()\n+        self.assertIsNone(independent_instance.pk)\n+\n+    def test_delete_instance_with_foreign_key(self):\n+        parent_instance = Parent.objects.create()\n+        child_instance = Child.objects.create(parent=parent_instance)\n+        child_instance.delete()\n+        # The child instance should have its PK set to None after deletion\n+        self.assertIsNone(child_instance.pk)\n+        # Ensure parent instance still exists\n+        self.assertTrue(Parent.objects.filter(pk=parent_instance.pk).exists())\n+\n     def test_fast_delete_joined_qs(self):\n         a = Avatar.objects.create(desc='a')\n         User.objects.create(avatar=a)\n@@ -481,6 +509,32 @@ class FastDeleteTests(TestCase):\n         self.assertEqual(User.objects.count(), 1)\n         self.assertTrue(User.objects.filter(pk=u2.pk).exists())\n \n+    def test_fast_delete_instance_set_pk_none(self):\n+        u = User.objects.create()\n+        # Ensure User can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        # After delete, the primary key should be set to None.\n+        self.assertIsNone(u.pk)\n+\n+    def test_delete_instance_with_no_dependencies(self):\n+        class IndependentModel(models.Model):\n+            field = models.CharField(max_length=10)\n+\n+        independent_instance = IndependentModel.objects.create(field='test')\n+        independent_instance.delete()\n+        self.assertIsNone(independent_instance.pk)\n+\n+    def test_delete_instance_with_foreign_key(self):\n+        parent_instance = Parent.objects.create()\n+        child_instance = Child.objects.create(parent=parent_instance)\n+        child_instance.delete()\n+        # The child instance should have its PK set to None after deletion\n+        self.assertIsNone(child_instance.pk)\n+        # Ensure parent instance still exists\n+        self.assertTrue(Parent.objects.filter(pk=parent_instance.pk).exists())\n+\n     def test_fast_delete_inheritance(self):\n         c = Child.objects.create()\n         p = Parent.objects.create()\n",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..5fc351b 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -95,6 +95,12 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+            ('1e-199', 2, '0.00'),\n+            ('1e-200', 2, '0.00'),\n+            ('1e-201', 2, '0.00'),\n+            ('1e-202', 3, '0.000'),\n+            ('1e-250', 4, '0.0000'),\n+            ('1e-300', 5, '0.00000'),\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-11211": "diff --git a/tests/prefetch_related/tests.py b/tests/prefetch_related/tests.py\nindex 1dc206f..ae5d2b9 100644\n--- a/tests/prefetch_related/tests.py\n+++ b/tests/prefetch_related/tests.py\n@@ -1,9 +1,14 @@\n+\n from django.contrib.contenttypes.models import ContentType\n from django.core.exceptions import ObjectDoesNotExist\n from django.db import connection\n from django.db.models import Prefetch, QuerySet\n from django.db.models.query import get_prefetcher, prefetch_related_objects\n+import uuid\n from django.test import TestCase, override_settings\n+from django.contrib.contenttypes.fields import GenericForeignKey\n+from django.contrib.contenttypes.models import ContentType\n+from django.db import models\n from django.test.utils import CaptureQueriesContext\n \n from .models import (\n@@ -11,8 +16,33 @@ from .models import (\n     BookReview, BookWithYear, Comment, Department, Employee, FavoriteAuthors,\n     House, LessonEntry, ModelIterableSubclass, Person, Qualification, Reader,\n     Room, TaggedItem, Teacher, WordEntry,\n+    Bar, Comment\n )\n \n+# Models for testing the GFK issue with UUID as PK\n+\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=100)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n+\n+class UUIDGFKTests(TestCase):\n+    def test_prefetch_related_GFK_with_UUID_PK(self):\n+        foo_instance = Foo.objects.create(name='Test Foo')\n+        bar_instance = Bar.objects.create(foo=foo_instance)\n+\n+        with self.assertNumQueries(2):\n+            qs = Bar.objects.prefetch_related('foo')\n+            prefetched_foo = [b.foo for b in qs]\n+            self.assertEqual(prefetched_foo, [foo_instance])\n+\n \n class TestDataMixin:\n     @classmethod\n",
  "django__django-11239": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex b843072..dbd54a2 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,4 +1,6 @@\n import os\n+import os\n+\n import signal\n import subprocess\n from unittest import mock\n@@ -81,7 +83,40 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n-    def test_sigint_handler(self):\n+    def test_ssl_certificate(self):\n+        self.assertEqual(\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+                'sslmode': 'verify-ca',\n+                'sslrootcert': 'root.crt',\n+                'sslcert': 'client.crt',\n+                'sslkey': 'client.key',\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                None,\n+            )\n+        )\n+\n+    def test_ssl_certificate_with_password(self):\n+        self.assertEqual(\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'password': 'somepassword',\n+                'host': 'somehost',\n+                'port': '444',\n+                'sslmode': 'verify-full',\n+                'sslrootcert': 'ca.crt',\n+                'sslcert': 'client_full.crt',\n+                'sslkey': 'client_full.key',\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                'somepassword',\n+            )\n+        )\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n         def _mock_subprocess_run(*args, **kwargs):\n             handler = signal.getsignal(signal.SIGINT)\n",
  "django__django-11265": "",
  "django__django-11276": "",
  "django__django-11292": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex b016284..21e0d4c 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -254,6 +254,29 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertEqual(out.strip(), 'Set foo')\n \n \n+    def test_command_runs_checks_by_default(self):\n+        \"\"\"\n+        Test that system checks are run by default when executing a management command.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            'STATICFILES_DIRS': '\"foo\"',\n+        })\n+        out, err = self.run_manage(['set_option', '--set', 'foo'])\n+        # Expect an error because STATICFILES_DIRS is not a tuple or list.\n+        self.assertIn(\"E001\", err)\n+\n+    def test_skip_checks_with_option(self):\n+        \"\"\"\n+        Test that the --skip-checks option prevents system checks from running.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            'STATICFILES_DIRS': '\"foo\"',\n+        })\n+        out, err = self.run_manage(['set_option', '--skip-checks', '--set', 'foo'])\n+        # No error should be present since checks are skipped.\n+        self.assertNoOutput(err)\n+        self.assertEqual(out.strip(), 'Set foo')\n+\n class UtilsTests(SimpleTestCase):\n \n     def test_no_existent_external_program(self):\n",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..1edf938 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,8 +1,36 @@\n+\n from django.test import SimpleTestCase\n-from django.urls.resolvers import RegexPattern, RoutePattern\n+from django.urls.resolvers import RegexPattern, RoutePattern, get_resolver\n+from django.test.utils import override_settings\n from django.utils.translation import gettext_lazy as _\n \n \n+class ResolverCacheTests(SimpleTestCase):\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_default_root_urlconf(self):\n+        # resolver for a default URLconf (passing no argument) and for the\n+        # settings.ROOT_URLCONF is the same cached object.\n+        self.assertIs(get_resolver(), get_resolver('urlpatterns.path_urls'))\n+        self.assertIsNot(get_resolver(), get_resolver('urlpatterns.path_dynamic_urls'))\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_with_explicit_root_urlconf(self):\n+        # Ensure that explicitly passing settings.ROOT_URLCONF gives the same object\n+        self.assertIs(get_resolver('urlpatterns.path_urls'), get_resolver('urlpatterns.path_urls'))\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_different_urlconfs(self):\n+        # Check that different URLconfs don't return the same object\n+        resolver1 = get_resolver('urlpatterns.path_urls')\n+        resolver2 = get_resolver('urlpatterns.other_urls')\n+        self.assertIsNot(resolver1, resolver2)\n+\n+    def test_resolver_cache_without_urlconf_and_none(self):\n+        # When no URLconf is set (both urlconf and ROOT_URLCONF are None), it should still cache properly\n+        initial_resolver = get_resolver(None)\n+        self.assertIs(initial_resolver, get_resolver(None))\n+\n class RegexPatternTests(SimpleTestCase):\n \n     def test_str(self):\n@@ -12,4 +40,4 @@ class RegexPatternTests(SimpleTestCase):\n class RoutePatternTests(SimpleTestCase):\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\nindex b010b42..6744121 100644\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -226,8 +226,29 @@ class BaseModelBackendTest:\n         authenticate(username='no_such_user', password='test')\n         self.assertEqual(CountingMD5PasswordHasher.calls, 1)\n \n+from django.test import override_settings\n+from django.contrib.auth import authenticate\n+from django.contrib.auth.models import User\n+from auth_tests.test_auth_backends import CountingMD5PasswordHasher\n \n class ModelBackendTest(BaseModelBackendTest, TestCase):\n+    \n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authentication_without_credentials(self):\n+        \"\"\"\n+        Test that authenticate() doesn't perform any database queries\n+        when username or password is None.\n+        \"\"\"\n+        CountingMD5PasswordHasher.calls = 0\n+        for credentials in (\n+            {},\n+            {'username': getattr(self.user, self.UserModel.USERNAME_FIELD)},\n+            {'password': 'test'},\n+        ):\n+            with self.subTest(credentials=credentials):\n+                with self.assertNumQueries(0):\n+                    authenticate(**credentials)\n+                self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n     \"\"\"\n     Tests for the ModelBackend using the default User model.\n     \"\"\"\n",
  "django__django-11490": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex e627a0d..81444b9 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -124,6 +124,17 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.union(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n+    def test_composed_query_values_list_column_change(self):\n+        # Setup initial data\n+        ReservedName.objects.create(name='a', order=2)\n+        \n+        # Perform the composed query with union and change the columns in values_list\n+        qs1 = ReservedName.objects.all()\n+        result = qs1.union(qs1).values_list('order').get()\n+        \n+        # Assert that the column change is respected\n+        self.assertEqual(result, (2,))\n+\n     def test_union_with_two_annotated_values_list(self):\n         qs1 = Number.objects.filter(num=1).annotate(\n             count=Value(0, IntegerField()),\n",
  "django__django-11532": "",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..1183ae1 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,10 +1,11 @@\n+\n from django import forms\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n from django.db.models import F\n-from django.db.models.functions import Upper\n+from django.db.models import Field, Model\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n \n@@ -509,8 +510,55 @@ class ListDisplayTests(CheckTestCase):\n \n         self.assertIsValid(TestModelAdmin, ValidationTestModel)\n \n+class FieldAccessibleViaInstanceCheckTests(CheckTestCase):\n+\n+    def test_valid_field_accessible_via_instance(self):\n+        class PositionField(Field):\n+            \"\"\"Custom field accessible only via instance.\"\"\"\n+            def contribute_to_class(self, cls, name):\n+                super().contribute_to_class(cls, name)\n+                setattr(cls, self.name, self)\n+\n+            def __get__(self, instance, owner):\n+                if instance is None:\n+                    raise AttributeError()\n+\n+        class TestModel(Model):\n+            field = PositionField()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('field',)\n+\n+        self.assertIsValid(TestModelAdmin, TestModel)\n+\n+    def test_invalid_field_not_in_list_display(self):\n+        class TestModel(Model):\n+            field = Field()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('non_existent_field',)\n \n-class ListDisplayLinksCheckTests(CheckTestCase):\n+        self.assertIsInvalid(\n+            TestModelAdmin, TestModel,\n+            \"The value of 'list_display[0]' refers to 'non_existent_field', which is not a callable, an attribute of 'TestModelAdmin', or an attribute or method on 'app.TestModel'.\",\n+            'admin.E108'\n+        )\n+\n+    def test_m2m_field_in_list_display(self):\n+        class ManyToManyField(Field):\n+            pass\n+\n+        class TestModel(Model):\n+            field = ManyToManyField()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('field',)\n+\n+        self.assertIsInvalid(\n+            TestModelAdmin, TestModel,\n+            \"The value of 'list_display' must not be a ManyToManyField.\",\n+            'admin.E109'\n+        )\n \n     def test_not_iterable(self):\n         class TestModelAdmin(ModelAdmin):\n",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..c77f6e4 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -6,6 +6,7 @@ from django.db.models import (\n     CharField, Count, DateTimeField, F, Max, OuterRef, Subquery, Value,\n )\n from django.db.models.functions import Upper\n+from datetime import datetime\n from django.test import TestCase\n from django.utils.deprecation import RemovedInDjango31Warning\n \n@@ -462,7 +463,42 @@ class OrderingTests(TestCase):\n             attrgetter('headline')\n         )\n \n-    def test_deprecated_values_annotate(self):\n+    def test_order_by_ptr_field_with_default_ordering_by_expression(self):\n+        ca1 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_2,\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca3 = ChildArticle.objects.create(\n+            headline='h3',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n+        articles = ChildArticle.objects.order_by('article_ptr')\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+\n+    def test_ordering_with_expression_in_meta(self):\n+        o_article1 = OrderedByFArticle.objects.create(\n+            headline='Ordered Article 1',\n+            pub_date=datetime(2005, 7, 26),\n+            author=self.author_1,\n+        )\n+        o_article2 = OrderedByFArticle.objects.create(\n+            headline='Ordered Article 2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_2,\n+        )\n+        articles = OrderedByFArticle.objects.all()\n+        self.assertQuerysetEqual(\n+            articles, [o_article2, o_article1],\n+            transform=lambda x: x\n+        )\n         msg = (\n             \"Article QuerySet won't use Meta.ordering in Django 3.1. Add \"\n             \".order_by('-pub_date', 'headline', OrderBy(F(author__name), \"\n",
  "django__django-11603": "",
  "django__django-11740": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a98fff5..7c5ebd5 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -718,7 +718,25 @@ class AutodetectorTests(TestCase):\n         self.assertOperationTypes(changes, 'testapp', 0, [\"RemoveField\"])\n         self.assertOperationAttributes(changes, \"testapp\", 0, 0, name=\"name\")\n \n-    def test_alter_field(self):\n+    def test_foreign_key_dependency_creation(self):\n+        \"\"\"Test altering a UUIDField to a ForeignKey creates a correct dependency.\"\"\"\n+        app1_initial = ModelState(\"app1\", \"Model1\", [\n+            (\"id\", models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)),\n+            (\"related\", models.UUIDField(null=True, blank=True)),\n+        ])\n+        app2 = ModelState(\"app2\", \"Model2\", [\n+            (\"id\", models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)),\n+        ])\n+        app1_altered = ModelState(\"app1\", \"Model1\", [\n+            (\"id\", models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)),\n+            (\"related\", models.ForeignKey(\"app2.Model2\", null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        changes = self.get_changes([app1_initial, app2], [app1_altered, app2])\n+        # Right number/type of migrations?\n+        self.assertNumberMigrations(changes, 'app1', 1)\n+        self.assertOperationTypes(changes, 'app1', 0, [\"AlterField\"])\n+        # Check if the dependency on app2 is correctly added\n+        self.assertMigrationDependencies(changes, 'app1', 0, [(\"app2\", \"__first__\")])\n         \"\"\"Tests autodetection of new fields.\"\"\"\n         changes = self.get_changes([self.author_name], [self.author_name_longer])\n         # Right number/type of migrations?\n@@ -2399,4 +2417,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-11749": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex a0e1530..7b9bf51 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -209,6 +209,20 @@ class CommandTests(SimpleTestCase):\n         self.assertIn('need_me', out.getvalue())\n         self.assertIn('needme2', out.getvalue())\n \n+    def test_mutually_exclusive_group_required_kwargs(self):\n+        out = StringIO()\n+        # Test calling command with keyword arguments for mutually exclusive group\n+        management.call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+\n+        management.call_command('mutually_exclusive_required', foo_name='test', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+\n+        # Test calling command without required group arguments should raise an error\n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            management.call_command('mutually_exclusive_required', stdout=out)\n+\n     def test_command_add_arguments_after_common_arguments(self):\n         out = StringIO()\n         management.call_command('common_args', stdout=out)\n",
  "django__django-11790": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 440150b..19c9333 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -437,7 +437,15 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         self.assertEqual(form.fields['username'].max_length, 254)\n         self.assertEqual(form.errors, {})\n \n-    def test_username_field_label(self):\n+    def test_username_field_max_length_rendered_correctly(self):\n+        # Test with a custom user model that has a max_length of 255\n+        form = AuthenticationForm()\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 255)\n+\n+        with override_settings(AUTH_USER_MODEL='auth_tests.IntegerUsernameUser'):\n+            # Test with a user model that defaults to 254\n+            form = AuthenticationForm()\n+            self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 254)\n \n         class CustomAuthenticationForm(AuthenticationForm):\n             username = CharField(label=\"Name\", max_length=75)\n",
  "django__django-11815": "",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..d5b9dc6 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,6 @@\n+\n import unittest\n-from datetime import datetime\n+from datetime import datetime, timedelta\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -312,7 +313,25 @@ class HttpDateProcessingTests(unittest.TestCase):\n         t = 1167616461.0\n         self.assertEqual(http_date(t), 'Mon, 01 Jan 2007 01:54:21 GMT')\n \n-    def test_parsing_rfc1123(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_two_digit_year(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+        \n+        # 2023 is the current year for this example\n+        utcnow = datetime(2023, 11, 6, 8, 49, 37)\n+        \n+        tests = (\n+            (utcnow, 'Monday, 01-Jan-50 08:49:37 GMT', datetime(2050, 1, 1, 8, 49, 37)),  # 50 years in the future -> 2050\n+            (utcnow, 'Saturday, 31-Dec-49 08:49:37 GMT', datetime(2049, 12, 31, 8, 49, 37)),  # Within 50 years\n+            (utcnow, 'Sunday, 01-Jan-24 08:49:37 GMT', datetime(2024, 1, 1, 8, 49, 37)),  # Future year within 50\n+        )\n+        \n+        for utcnow, rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = utcnow\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n",
  "django__django-11880": "",
  "django__django-11951": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex f2f6bbd..ddda1e0 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -1,3 +1,5 @@\n+\n+from math import ceil\n from operator import attrgetter\n \n from django.db import IntegrityError, NotSupportedError, connection\n@@ -205,6 +207,28 @@ class BulkCreateTests(TestCase):\n         NoFields.objects.bulk_create([NoFields() for i in range(2)])\n         self.assertEqual(NoFields.objects.count(), 2)\n \n+    @skipUnlessDBFeature('has_bulk_insert')\n+    def test_explicit_batch_size_respects_max_batch_size(self):\n+        objs = [Country() for i in range(1000)]\n+        fields = ['name', 'iso_two_letter', 'description']\n+        max_batch_size = max(connection.ops.bulk_batch_size(fields, objs), 1)\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            Country.objects.bulk_create(objs, batch_size=max_batch_size + 1)\n+\n+    @skipUnlessDBFeature('has_bulk_insert')\n+    def test_none_batch_size_defaults_to_max_batch_size(self):\n+        objs = [Country() for i in range(1000)]\n+        fields = ['name', 'iso_two_letter', 'description']\n+        max_batch_size = max(connection.ops.bulk_batch_size(fields, objs), 1)\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            Country.objects.bulk_create(objs, batch_size=None)\n+\n+    @skipUnlessDBFeature('has_bulk_insert')\n+    def test_zero_batch_size_raises_value_error(self):\n+        objs = [Country() for i in range(100)]\n+        with self.assertRaises(ValueError):\n+            Country.objects.bulk_create(objs, batch_size=0)\n+\n     @skipUnlessDBFeature('has_bulk_insert')\n     def test_explicit_batch_size_efficiency(self):\n         objs = [TwoFields(f1=i, f2=i) for i in range(0, 100)]\n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..1c2f485 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -32,6 +32,31 @@ class Vehicle(models.IntegerChoices):\n     __empty__ = _('(Unknown)')\n \n \n+from django.utils.translation import gettext_lazy as _\n+from django.test import TestCase\n+from django.db import models\n+\n+class MyChoice(models.TextChoices):\n+    FIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n+    SECOND_CHOICE = \"second\", _(\"The second choice, it is\")\n+\n+class MyObject(models.Model):\n+    my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n+class EnumTest(TestCase):\n+    def setUp(self) -> None:\n+        self.my_object = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n+\n+    def test_created_object_is_str(self):\n+        my_object = self.my_object\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(str(my_object.my_str_value), \"first\")\n+\n+    def test_retrieved_object_is_str(self):\n+        my_object = MyObject.objects.last()\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(str(my_object.my_str_value), \"first\")\n+\n class Gender(models.TextChoices):\n     MALE = 'M'\n     FEMALE = 'F'\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..ae62e1f 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -150,6 +150,19 @@ class ChoicesTests(SimpleTestCase):\n \n class GetFieldDisplayTests(SimpleTestCase):\n \n+    def test_overriding_get_FIELD_display(self):\n+        \"\"\"\n+        Test that overriding get_FIELD_display works correctly.\n+        \"\"\"\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something else'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something else')\n+\n     def test_choices_and_field_display(self):\n         \"\"\"\n         get_choices() interacts with get_FIELD_display() to return the expected\n",
  "django__django-12039": "diff --git a/tests/indexes/tests.py b/tests/indexes/tests.py\nindex 700f574..c83b9da 100644\n--- a/tests/indexes/tests.py\n+++ b/tests/indexes/tests.py\n@@ -11,7 +11,8 @@ from django.test import (\n )\n from django.test.utils import override_settings\n from django.utils import timezone\n-\n+from django.db.models import Index\n+from django.db import connection\n from .models import (\n     Article, ArticleTranslation, IndexedArticle2, IndexTogetherSingleList,\n )\n@@ -75,8 +76,45 @@ class SchemaIndexesTests(TestCase):\n         index_sql = connection.schema_editor()._model_indexes_sql(IndexTogetherSingleList)\n         self.assertEqual(len(index_sql), 1)\n \n+    def test_columns_list_sql(self):\n+        index = Index(fields=['headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_descending_columns_list_sql(self):\n+        index = Index(fields=['-headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s DESC)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_ops_class_columns_lists_sql(self):\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n \n-@skipIf(connection.vendor == 'postgresql', 'opclasses are PostgreSQL only')\n+    def test_ops_class_descending_columns_list_sql(self):\n+        index = Index(\n+            fields=['-headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops DESC)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n class SchemaIndexesNotPostgreSQLTests(TransactionTestCase):\n     available_apps = ['indexes']\n \n",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..cec14dd 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n@@ -12,6 +13,7 @@ from django.test import SimpleTestCase\n from django.test.utils import register_lookup\n \n from .models import Author, Item, ObjectC, Ranking\n+from django.db.models.lookups import Exact\n \n \n class TestQuery(SimpleTestCase):\n@@ -107,7 +109,12 @@ class TestQuery(SimpleTestCase):\n         self.assertIsInstance(b_isnull.lhs, SimpleCol)\n         self.assertEqual(b_isnull.lhs.target, ObjectC._meta.get_field('objectb'))\n \n-    def test_clone_select_related(self):\n+    def test_iterable_lookup_value(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=['a', 'b']))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ['a', 'b'])\n         query = Query(Item)\n         query.add_select_related(['creator'])\n         clone = query.clone()\n",
  "django__django-12125": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex e62f7b0..9476b63 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -180,6 +180,47 @@ class OperationWriterTests(SimpleTestCase):\n         )\n \n \n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test to ensure that inner class fields are correctly referenced in migrations.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = A._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the inner class\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner\", string)\n+\n+    def test_serialize_model_with_enum_field(self):\n+        \"\"\"\n+        Test to ensure that enum fields within a model are correctly referenced.\n+        \"\"\"\n+        import enum\n+        from enumfields import Enum, EnumField\n+\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the enum class within the model\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State\", string)\n+\n+\n class WriterTests(SimpleTestCase):\n     \"\"\"\n     Tests the migration writer (makes migration files from Migration instances)\n@@ -229,12 +270,94 @@ class WriterTests(SimpleTestCase):\n             (\"Decimal('1.3')\", {'from decimal import Decimal'})\n         )\n \n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test to ensure that inner class fields are correctly referenced in migrations.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = A._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the inner class\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner\", string)\n+\n+    def test_serialize_model_with_enum_field(self):\n+        \"\"\"\n+        Test to ensure that enum fields within a model are correctly referenced.\n+        \"\"\"\n+        import enum\n+        from enumfields import Enum, EnumField\n+\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the enum class within the model\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State\", string)\n+\n         self.assertSerializedEqual(Money('1.3'))\n         self.assertSerializedResultEqual(\n             Money('1.3'),\n             (\"migrations.test_writer.Money('1.3')\", {'import migrations.test_writer'})\n         )\n \n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test to ensure that inner class fields are correctly referenced in migrations.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = A._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the inner class\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner\", string)\n+\n+    def test_serialize_model_with_enum_field(self):\n+        \"\"\"\n+        Test to ensure that enum fields within a model are correctly referenced.\n+        \"\"\"\n+        import enum\n+        from enumfields import Enum, EnumField\n+\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the enum class within the model\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State\", string)\n+\n     def test_serialize_constants(self):\n         self.assertSerializedEqual(None)\n         self.assertSerializedEqual(True)\n@@ -270,6 +393,47 @@ class WriterTests(SimpleTestCase):\n             (\"[list, tuple, dict, set, frozenset]\", set())\n         )\n \n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test to ensure that inner class fields are correctly referenced in migrations.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = A._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the inner class\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner\", string)\n+\n+    def test_serialize_model_with_enum_field(self):\n+        \"\"\"\n+        Test to ensure that enum fields within a model are correctly referenced.\n+        \"\"\"\n+        import enum\n+        from enumfields import Enum, EnumField\n+\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the enum class within the model\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State\", string)\n+\n     def test_serialize_lazy_objects(self):\n         pattern = re.compile(r'^foo$')\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n@@ -280,18 +444,182 @@ class WriterTests(SimpleTestCase):\n             TextEnum.A,\n             (\"migrations.test_writer.TextEnum['A']\", {'import migrations.test_writer'})\n         )\n+\n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test to ensure that inner class fields are correctly referenced in migrations.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = A._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the inner class\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner\", string)\n+\n+    def test_serialize_model_with_enum_field(self):\n+        \"\"\"\n+        Test to ensure that enum fields within a model are correctly referenced.\n+        \"\"\"\n+        import enum\n+        from enumfields import Enum, EnumField\n+\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the enum class within the model\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State\", string)\n         self.assertSerializedResultEqual(\n             TextTranslatedEnum.A,\n             (\"migrations.test_writer.TextTranslatedEnum['A']\", {'import migrations.test_writer'})\n         )\n+\n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test to ensure that inner class fields are correctly referenced in migrations.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = A._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the inner class\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner\", string)\n+\n+    def test_serialize_model_with_enum_field(self):\n+        \"\"\"\n+        Test to ensure that enum fields within a model are correctly referenced.\n+        \"\"\"\n+        import enum\n+        from enumfields import Enum, EnumField\n+\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the enum class within the model\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State\", string)\n         self.assertSerializedResultEqual(\n             BinaryEnum.A,\n             (\"migrations.test_writer.BinaryEnum['A']\", {'import migrations.test_writer'})\n         )\n+\n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test to ensure that inner class fields are correctly referenced in migrations.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = A._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the inner class\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner\", string)\n+\n+    def test_serialize_model_with_enum_field(self):\n+        \"\"\"\n+        Test to ensure that enum fields within a model are correctly referenced.\n+        \"\"\"\n+        import enum\n+        from enumfields import Enum, EnumField\n+\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the enum class within the model\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State\", string)\n         self.assertSerializedResultEqual(\n             IntEnum.B,\n             (\"migrations.test_writer.IntEnum['B']\", {'import migrations.test_writer'})\n         )\n+\n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test to ensure that inner class fields are correctly referenced in migrations.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = A._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the inner class\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner\", string)\n+\n+    def test_serialize_model_with_enum_field(self):\n+        \"\"\"\n+        Test to ensure that enum fields within a model are correctly referenced.\n+        \"\"\"\n+        import enum\n+        from enumfields import Enum, EnumField\n+\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the enum class within the model\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State\", string)\n         self.assertSerializedResultEqual(\n             self.NestedEnum.A,\n             (\n@@ -299,6 +627,47 @@ class WriterTests(SimpleTestCase):\n                 {'import migrations.test_writer'},\n             ),\n         )\n+\n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test to ensure that inner class fields are correctly referenced in migrations.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = A._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the inner class\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner\", string)\n+\n+    def test_serialize_model_with_enum_field(self):\n+        \"\"\"\n+        Test to ensure that enum fields within a model are correctly referenced.\n+        \"\"\"\n+        import enum\n+        from enumfields import Enum, EnumField\n+\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the enum class within the model\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State\", string)\n         self.assertSerializedEqual(self.NestedEnum.A)\n \n         field = models.CharField(default=TextEnum.B, choices=[(m.value, m) for m in TextEnum])\n@@ -310,10 +679,92 @@ class WriterTests(SimpleTestCase):\n             \"('value-b', migrations.test_writer.TextEnum['B'])], \"\n             \"default=migrations.test_writer.TextEnum['B'])\"\n         )\n+\n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test to ensure that inner class fields are correctly referenced in migrations.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = A._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the inner class\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner\", string)\n+\n+    def test_serialize_model_with_enum_field(self):\n+        \"\"\"\n+        Test to ensure that enum fields within a model are correctly referenced.\n+        \"\"\"\n+        import enum\n+        from enumfields import Enum, EnumField\n+\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the enum class within the model\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State\", string)\n         field = models.CharField(\n             default=TextTranslatedEnum.A,\n             choices=[(m.value, m) for m in TextTranslatedEnum],\n         )\n+\n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test to ensure that inner class fields are correctly referenced in migrations.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = A._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the inner class\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner\", string)\n+\n+    def test_serialize_model_with_enum_field(self):\n+        \"\"\"\n+        Test to ensure that enum fields within a model are correctly referenced.\n+        \"\"\"\n+        import enum\n+        from enumfields import Enum, EnumField\n+\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the enum class within the model\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State\", string)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n             string,\n@@ -322,6 +773,47 @@ class WriterTests(SimpleTestCase):\n             \"('value-b', migrations.test_writer.TextTranslatedEnum['B'])], \"\n             \"default=migrations.test_writer.TextTranslatedEnum['A'])\"\n         )\n+\n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test to ensure that inner class fields are correctly referenced in migrations.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = A._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the inner class\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner\", string)\n+\n+    def test_serialize_model_with_enum_field(self):\n+        \"\"\"\n+        Test to ensure that enum fields within a model are correctly referenced.\n+        \"\"\"\n+        import enum\n+        from enumfields import Enum, EnumField\n+\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the enum class within the model\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State\", string)\n         field = models.CharField(default=BinaryEnum.B, choices=[(m.value, m) for m in BinaryEnum])\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n@@ -331,6 +823,47 @@ class WriterTests(SimpleTestCase):\n             \"(b'value-b', migrations.test_writer.BinaryEnum['B'])], \"\n             \"default=migrations.test_writer.BinaryEnum['B'])\"\n         )\n+\n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test to ensure that inner class fields are correctly referenced in migrations.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = A._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the inner class\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner\", string)\n+\n+    def test_serialize_model_with_enum_field(self):\n+        \"\"\"\n+        Test to ensure that enum fields within a model are correctly referenced.\n+        \"\"\"\n+        import enum\n+        from enumfields import Enum, EnumField\n+\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the enum class within the model\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State\", string)\n         field = models.IntegerField(default=IntEnum.A, choices=[(m.value, m) for m in IntEnum])\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n@@ -341,6 +874,47 @@ class WriterTests(SimpleTestCase):\n             \"default=migrations.test_writer.IntEnum['A'])\"\n         )\n \n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test to ensure that inner class fields are correctly referenced in migrations.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = A._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the inner class\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner\", string)\n+\n+    def test_serialize_model_with_enum_field(self):\n+        \"\"\"\n+        Test to ensure that enum fields within a model are correctly referenced.\n+        \"\"\"\n+        import enum\n+        from enumfields import Enum, EnumField\n+\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the enum class within the model\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State\", string)\n+\n     def test_serialize_choices(self):\n         class TextChoices(models.TextChoices):\n             A = 'A', 'A value'\n@@ -360,6 +934,47 @@ class WriterTests(SimpleTestCase):\n             DateChoices.DATE_1,\n             ('datetime.date(1969, 7, 20)', {'import datetime'}),\n         )\n+\n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test to ensure that inner class fields are correctly referenced in migrations.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = A._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the inner class\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner\", string)\n+\n+    def test_serialize_model_with_enum_field(self):\n+        \"\"\"\n+        Test to ensure that enum fields within a model are correctly referenced.\n+        \"\"\"\n+        import enum\n+        from enumfields import Enum, EnumField\n+\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the enum class within the model\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State\", string)\n         field = models.CharField(default=TextChoices.B, choices=TextChoices.choices)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n@@ -367,12 +982,94 @@ class WriterTests(SimpleTestCase):\n             \"models.CharField(choices=[('A', 'A value'), ('B', 'B value')], \"\n             \"default='B')\",\n         )\n+\n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test to ensure that inner class fields are correctly referenced in migrations.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = A._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the inner class\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner\", string)\n+\n+    def test_serialize_model_with_enum_field(self):\n+        \"\"\"\n+        Test to ensure that enum fields within a model are correctly referenced.\n+        \"\"\"\n+        import enum\n+        from enumfields import Enum, EnumField\n+\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the enum class within the model\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State\", string)\n         field = models.IntegerField(default=IntegerChoices.B, choices=IntegerChoices.choices)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n             string,\n             \"models.IntegerField(choices=[(1, 'One'), (2, 'Two')], default=2)\",\n         )\n+\n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test to ensure that inner class fields are correctly referenced in migrations.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = A._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the inner class\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner\", string)\n+\n+    def test_serialize_model_with_enum_field(self):\n+        \"\"\"\n+        Test to ensure that enum fields within a model are correctly referenced.\n+        \"\"\"\n+        import enum\n+        from enumfields import Enum, EnumField\n+\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the enum class within the model\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State\", string)\n         field = models.DateField(default=DateChoices.DATE_2, choices=DateChoices.choices)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n@@ -383,6 +1080,47 @@ class WriterTests(SimpleTestCase):\n             \"default=datetime.date(1969, 11, 19))\"\n         )\n \n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test to ensure that inner class fields are correctly referenced in migrations.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = A._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the inner class\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner\", string)\n+\n+    def test_serialize_model_with_enum_field(self):\n+        \"\"\"\n+        Test to ensure that enum fields within a model are correctly referenced.\n+        \"\"\"\n+        import enum\n+        from enumfields import Enum, EnumField\n+\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the enum class within the model\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State\", string)\n+\n     def test_serialize_uuid(self):\n         self.assertSerializedEqual(uuid.uuid1())\n         self.assertSerializedEqual(uuid.uuid4())\n@@ -393,11 +1131,93 @@ class WriterTests(SimpleTestCase):\n             uuid_a,\n             (\"uuid.UUID('5c859437-d061-4847-b3f7-e6b78852f8c8')\", {'import uuid'})\n         )\n+\n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test to ensure that inner class fields are correctly referenced in migrations.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = A._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the inner class\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner\", string)\n+\n+    def test_serialize_model_with_enum_field(self):\n+        \"\"\"\n+        Test to ensure that enum fields within a model are correctly referenced.\n+        \"\"\"\n+        import enum\n+        from enumfields import Enum, EnumField\n+\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the enum class within the model\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State\", string)\n         self.assertSerializedResultEqual(\n             uuid_b,\n             (\"uuid.UUID('c7853ec1-2ea3-4359-b02d-b54e8f1bcee2')\", {'import uuid'})\n         )\n \n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test to ensure that inner class fields are correctly referenced in migrations.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = A._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the inner class\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner\", string)\n+\n+    def test_serialize_model_with_enum_field(self):\n+        \"\"\"\n+        Test to ensure that enum fields within a model are correctly referenced.\n+        \"\"\"\n+        import enum\n+        from enumfields import Enum, EnumField\n+\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the enum class within the model\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State\", string)\n+\n         field = models.UUIDField(choices=((uuid_a, 'UUID A'), (uuid_b, 'UUID B')), default=uuid_a)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n@@ -408,6 +1228,47 @@ class WriterTests(SimpleTestCase):\n             \"default=uuid.UUID('5c859437-d061-4847-b3f7-e6b78852f8c8'))\"\n         )\n \n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test to ensure that inner class fields are correctly referenced in migrations.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = A._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the inner class\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner\", string)\n+\n+    def test_serialize_model_with_enum_field(self):\n+        \"\"\"\n+        Test to ensure that enum fields within a model are correctly referenced.\n+        \"\"\"\n+        import enum\n+        from enumfields import Enum, EnumField\n+\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the enum class within the model\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State\", string)\n+\n     def test_serialize_functions(self):\n         with self.assertRaisesMessage(ValueError, 'Cannot serialize function: lambda'):\n             self.assertSerializedEqual(lambda x: 42)\n@@ -430,6 +1291,47 @@ class WriterTests(SimpleTestCase):\n             datetime.datetime(2014, 1, 1, 1, 1),\n             (\"datetime.datetime(2014, 1, 1, 1, 1)\", {'import datetime'})\n         )\n+\n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test to ensure that inner class fields are correctly referenced in migrations.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = A._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the inner class\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner\", string)\n+\n+    def test_serialize_model_with_enum_field(self):\n+        \"\"\"\n+        Test to ensure that enum fields within a model are correctly referenced.\n+        \"\"\"\n+        import enum\n+        from enumfields import Enum, EnumField\n+\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the enum class within the model\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State\", string)\n         self.assertSerializedResultEqual(\n             datetime.datetime(2012, 1, 1, 1, 1, tzinfo=utc),\n             (\n@@ -438,18 +1340,141 @@ class WriterTests(SimpleTestCase):\n             )\n         )\n \n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test to ensure that inner class fields are correctly referenced in migrations.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = A._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the inner class\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner\", string)\n+\n+    def test_serialize_model_with_enum_field(self):\n+        \"\"\"\n+        Test to ensure that enum fields within a model are correctly referenced.\n+        \"\"\"\n+        import enum\n+        from enumfields import Enum, EnumField\n+\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the enum class within the model\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State\", string)\n+\n     def test_serialize_fields(self):\n         self.assertSerializedFieldEqual(models.CharField(max_length=255))\n         self.assertSerializedResultEqual(\n             models.CharField(max_length=255),\n             (\"models.CharField(max_length=255)\", {\"from django.db import models\"})\n         )\n+\n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test to ensure that inner class fields are correctly referenced in migrations.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = A._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the inner class\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner\", string)\n+\n+    def test_serialize_model_with_enum_field(self):\n+        \"\"\"\n+        Test to ensure that enum fields within a model are correctly referenced.\n+        \"\"\"\n+        import enum\n+        from enumfields import Enum, EnumField\n+\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the enum class within the model\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State\", string)\n         self.assertSerializedFieldEqual(models.TextField(null=True, blank=True))\n         self.assertSerializedResultEqual(\n             models.TextField(null=True, blank=True),\n             (\"models.TextField(blank=True, null=True)\", {'from django.db import models'})\n         )\n \n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test to ensure that inner class fields are correctly referenced in migrations.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = A._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the inner class\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner\", string)\n+\n+    def test_serialize_model_with_enum_field(self):\n+        \"\"\"\n+        Test to ensure that enum fields within a model are correctly referenced.\n+        \"\"\"\n+        import enum\n+        from enumfields import Enum, EnumField\n+\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the enum class within the model\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State\", string)\n+\n     def test_serialize_settings(self):\n         self.assertSerializedEqual(SettingsReference(settings.AUTH_USER_MODEL, \"AUTH_USER_MODEL\"))\n         self.assertSerializedResultEqual(\n@@ -457,12 +1482,94 @@ class WriterTests(SimpleTestCase):\n             (\"settings.AUTH_USER_MODEL\", {\"from django.conf import settings\"})\n         )\n \n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test to ensure that inner class fields are correctly referenced in migrations.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = A._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the inner class\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner\", string)\n+\n+    def test_serialize_model_with_enum_field(self):\n+        \"\"\"\n+        Test to ensure that enum fields within a model are correctly referenced.\n+        \"\"\"\n+        import enum\n+        from enumfields import Enum, EnumField\n+\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the enum class within the model\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State\", string)\n+\n     def test_serialize_iterators(self):\n         self.assertSerializedResultEqual(\n             ((x, x * x) for x in range(3)),\n             (\"((0, 0), (1, 1), (2, 4))\", set())\n         )\n \n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test to ensure that inner class fields are correctly referenced in migrations.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = A._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the inner class\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner\", string)\n+\n+    def test_serialize_model_with_enum_field(self):\n+        \"\"\"\n+        Test to ensure that enum fields within a model are correctly referenced.\n+        \"\"\"\n+        import enum\n+        from enumfields import Enum, EnumField\n+\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the enum class within the model\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State\", string)\n+\n     def test_serialize_compiled_regex(self):\n         \"\"\"\n         Make sure compiled regex can be serialized.\n@@ -558,6 +1665,47 @@ class WriterTests(SimpleTestCase):\n             FoodQuerySet.as_manager(),\n             ('migrations.models.FoodQuerySet.as_manager()', {'import migrations.models'})\n         )\n+\n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test to ensure that inner class fields are correctly referenced in migrations.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = A._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the inner class\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner\", string)\n+\n+    def test_serialize_model_with_enum_field(self):\n+        \"\"\"\n+        Test to ensure that enum fields within a model are correctly referenced.\n+        \"\"\"\n+        import enum\n+        from enumfields import Enum, EnumField\n+\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the enum class within the model\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State\", string)\n         self.assertSerializedEqual(FoodManager('a', 'b'))\n         self.assertSerializedEqual(FoodManager('x', 'y', c=3, d=4))\n \n@@ -661,6 +1809,47 @@ class WriterTests(SimpleTestCase):\n             result['custom_migration_operations'].more_operations.TestOperation\n         )\n \n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test to ensure that inner class fields are correctly referenced in migrations.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = A._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the inner class\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner\", string)\n+\n+    def test_serialize_model_with_enum_field(self):\n+        \"\"\"\n+        Test to ensure that enum fields within a model are correctly referenced.\n+        \"\"\"\n+        import enum\n+        from enumfields import Enum, EnumField\n+\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the enum class within the model\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State\", string)\n+\n     def test_sorted_imports(self):\n         \"\"\"\n         #24155 - Tests ordering of imports.\n@@ -681,6 +1870,47 @@ class WriterTests(SimpleTestCase):\n             output\n         )\n \n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test to ensure that inner class fields are correctly referenced in migrations.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = A._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the inner class\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner\", string)\n+\n+    def test_serialize_model_with_enum_field(self):\n+        \"\"\"\n+        Test to ensure that enum fields within a model are correctly referenced.\n+        \"\"\"\n+        import enum\n+        from enumfields import Enum, EnumField\n+\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+\n+        # Check that the path includes the full reference to the enum class within the model\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State\", string)\n+\n     def test_migration_file_header_comments(self):\n         \"\"\"\n         Test comments at top of file.\n@@ -746,4 +1976,4 @@ class WriterTests(SimpleTestCase):\n \n     def test_register_non_serializer(self):\n         with self.assertRaisesMessage(ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "django__django-12143": "",
  "django__django-12155": "diff --git a/tests/admin_docs/test_utils.py b/tests/admin_docs/test_utils.py\nindex 6cae16b..4e1003f 100644\n--- a/tests/admin_docs/test_utils.py\n+++ b/tests/admin_docs/test_utils.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n \n from django.contrib.admindocs.utils import (\n@@ -95,6 +96,26 @@ class TestUtils(AdminDocsSimpleTestCase):\n         output = parse_rst(header, 'header')\n         self.assertIn('<h3>Header</h3>', output)\n \n+    def test_trim_docstring_with_first_line(self):\n+        \"\"\"\n+        Test that trim_docstring works properly when the first line is not empty.\n+        \"\"\"\n+        docstring = \"\"\"First line\n+        Second line\n+        Third line\"\"\"\n+        expected_output = \"First line\\nSecond line\\nThird line\"\n+        self.assertEqual(trim_docstring(docstring), expected_output)\n+\n+    def test_trim_docstring_with_first_line_indented(self):\n+        \"\"\"\n+        Test that trim_docstring works properly when the first line is indented.\n+        \"\"\"\n+        docstring = \"\"\"    First line\n+        Second line\n+        Third line\"\"\"\n+        expected_output = \"First line\\nSecond line\\nThird line\"\n+        self.assertEqual(trim_docstring(docstring), expected_output)\n+\n     def test_parse_rst(self):\n         \"\"\"\n         parse_rst() should use `cmsreference` as the default role.\n",
  "django__django-12193": "diff --git a/tests/forms_tests/widget_tests/test_checkboxinput.py b/tests/forms_tests/widget_tests/test_checkboxinput.py\nindex 5c5e45d..0b21f0b 100644\n--- a/tests/forms_tests/widget_tests/test_checkboxinput.py\n+++ b/tests/forms_tests/widget_tests/test_checkboxinput.py\n@@ -82,10 +82,23 @@ class CheckboxInputTest(WidgetTest):\n         \"\"\"\n         self.assertFalse(self.widget.value_from_datadict({}, {}, 'testing'))\n \n+    def test_get_context_does_not_mutate_attrs(self):\n+        # Test that CheckboxInput does not mutate the attrs dict\n+        attrs = {'checked': False}\n+        self.widget.get_context('name', True, attrs)\n+        self.assertIs(attrs['checked'], False)\n+\n+    def test_get_context_multiple_checkboxes(self):\n+        # Test multiple boolean values in SplitArrayWidget\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('name', [False, True, False])\n+        subwidgets_attrs = [subwidget['attrs'] for subwidget in context['widget']['subwidgets']]\n+        self.assertEqual(subwidgets_attrs, [{}, {'checked': True}, {}])\n+\n     def test_value_from_datadict_string_int(self):\n         value = self.widget.value_from_datadict({'testing': '0'}, {}, 'testing')\n         self.assertIs(value, True)\n \n     def test_value_omitted_from_data(self):\n         self.assertIs(self.widget.value_omitted_from_data({'field': 'value'}, {}, 'field'), False)\n-        self.assertIs(self.widget.value_omitted_from_data({}, {}, 'field'), False)\n+        self.assertIs(self.widget.value_omitted_from_data({}, {}, 'field'), False)\n",
  "django__django-12209": "",
  "django__django-12262": "diff --git a/tests/template_tests/test_custom.py b/tests/template_tests/test_custom.py\nindex 8a8c535..0d3d8ae 100644\n--- a/tests/template_tests/test_custom.py\n+++ b/tests/template_tests/test_custom.py\n@@ -77,8 +77,36 @@ class SimpleTagTests(TagTestCase):\n                 'simple_only_unlimited_args - Expected result: 37, 42, 56, 89'),\n             ('{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 56 eggs=\"scrambled\" four=1|add:3 %}',\n                 'simple_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4'),\n+            (\"'hello' received multiple values for keyword argument 'greeting'\",\n+                '{% load custom %}{% hello greeting=\"hi\" greeting=\"hello\" %}'),\n+            (\"'hi' received multiple values for keyword argument 'greeting'\",\n+                '{% load custom %}{% hi greeting=\"hi\" greeting=\"hello\" %}'),\n+            (\n+                '{% load custom %}{% hello greeting=\"hi\" %}',\n+                'hello - Expected result: hi world'\n+            ),\n+            (\n+                '{% load custom %}{% hello %}',\n+                'hello - Expected result: hello world'\n+            ),\n+            (\n+                '{% load custom %}{% hi greeting=\"hi\" %}',\n+                'hi - Expected result: hi world'\n+            ),\n         ]\n \n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n+        for entry in errors:\n+            with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n+                self.engine.from_string(entry[1])\n+\n+        for entry in errors:\n+            with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n+                self.engine.from_string(\"%s as var %%}\" % entry[1][0:-2])\n+\n         for entry in templates:\n             t = self.engine.from_string(entry[0])\n             self.assertEqual(t.render(c), entry[1])\n@@ -101,8 +129,36 @@ class SimpleTagTests(TagTestCase):\n                 '{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 eggs=\"scrambled\" 56 four=1|add:3 %}'),\n             (\"'simple_unlimited_args_kwargs' received multiple values for keyword argument 'eggs'\",\n                 '{% load custom %}{% simple_unlimited_args_kwargs 37 eggs=\"scrambled\" eggs=\"scrambled\" %}'),\n+            (\"'hello' received multiple values for keyword argument 'greeting'\",\n+                '{% load custom %}{% hello greeting=\"hi\" greeting=\"hello\" %}'),\n+            (\"'hi' received multiple values for keyword argument 'greeting'\",\n+                '{% load custom %}{% hi greeting=\"hi\" greeting=\"hello\" %}'),\n+            (\n+                '{% load custom %}{% hello greeting=\"hi\" %}',\n+                'hello - Expected result: hi world'\n+            ),\n+            (\n+                '{% load custom %}{% hello %}',\n+                'hello - Expected result: hello world'\n+            ),\n+            (\n+                '{% load custom %}{% hi greeting=\"hi\" %}',\n+                'hi - Expected result: hi world'\n+            ),\n         ]\n \n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n+        for entry in errors:\n+            with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n+                self.engine.from_string(entry[1])\n+\n+        for entry in errors:\n+            with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n+                self.engine.from_string(\"%s as var %%}\" % entry[1][0:-2])\n+\n         for entry in errors:\n             with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n                 self.engine.from_string(entry[1])\n@@ -190,12 +246,40 @@ class InclusionTagTests(TagTestCase):\n                 'inclusion_only_unlimited_args - Expected result: 37, 42, 56, 89\\n'),\n             ('{% load inclusion %}{% inclusion_unlimited_args_kwargs 37 40|add:2 56 eggs=\"scrambled\" four=1|add:3 %}',\n                 'inclusion_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4\\n'),\n+            (\"'hello' received multiple values for keyword argument 'greeting'\",\n+                '{% load custom %}{% hello greeting=\"hi\" greeting=\"hello\" %}'),\n+            (\"'hi' received multiple values for keyword argument 'greeting'\",\n+                '{% load custom %}{% hi greeting=\"hi\" greeting=\"hello\" %}'),\n+            (\n+                '{% load custom %}{% hello greeting=\"hi\" %}',\n+                'hello - Expected result: hi world'\n+            ),\n+            (\n+                '{% load custom %}{% hello %}',\n+                'hello - Expected result: hello world'\n+            ),\n+            (\n+                '{% load custom %}{% hi greeting=\"hi\" %}',\n+                'hi - Expected result: hi world'\n+            ),\n         ]\n \n         for entry in templates:\n             t = self.engine.from_string(entry[0])\n             self.assertEqual(t.render(c), entry[1])\n \n+        for entry in errors:\n+            with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n+                self.engine.from_string(entry[1])\n+\n+        for entry in errors:\n+            with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n+                self.engine.from_string(\"%s as var %%}\" % entry[1][0:-2])\n+\n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n     def test_inclusion_tag_errors(self):\n         errors = [\n             (\"'inclusion_one_default' received unexpected keyword argument 'three'\",\n",
  "django__django-12276": "diff --git a/tests/forms_tests/widget_tests/test_fileinput.py b/tests/forms_tests/widget_tests/test_fileinput.py\nindex c3ea9d6..cf7dc50 100644\n--- a/tests/forms_tests/widget_tests/test_fileinput.py\n+++ b/tests/forms_tests/widget_tests/test_fileinput.py\n@@ -17,4 +17,30 @@ class FileInputTest(WidgetTest):\n \n     def test_value_omitted_from_data(self):\n         self.assertIs(self.widget.value_omitted_from_data({}, {}, 'field'), True)\n-        self.assertIs(self.widget.value_omitted_from_data({}, {'field': 'value'}, 'field'), False)\n+        self.assertIs(self.widget.value_omitted_from_data({}, {'field': 'value'}, 'field'), False)\n+\n+    def test_fileinput_required_attribute_no_initial(self):\n+        \"\"\"\n+        Test FileInput to ensure 'required' attribute is present when there is no initial data.\n+        \"\"\"\n+        class FileForm(forms.Form):\n+            file1 = forms.FileField(widget=forms.FileInput)\n+\n+        form = FileForm(auto_id=False)\n+        self.assertHTMLEqual(\n+            form.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n+        )\n+\n+    def test_fileinput_required_attribute_with_initial(self):\n+        \"\"\"\n+        Test FileInput to ensure 'required' attribute is not present when there is initial data.\n+        \"\"\"\n+        class FileForm(forms.Form):\n+            file1 = forms.FileField(widget=forms.FileInput)\n+\n+        form = FileForm(initial={'file1': 'resume.txt'}, auto_id=False)\n+        self.assertHTMLEqual(\n+            form.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n+        )\n",
  "django__django-12304": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 6cabf01..2b1d0fa 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -1,3 +1,23 @@\n+\n+class YearInSchool(models.TextChoices):\n+    FRESHMAN = 'FR', _('Freshman')\n+    SOPHOMORE = 'SO', _('Sophomore')\n+    JUNIOR = 'JR', _('Junior')\n+    SENIOR = 'SR', _('Senior')\n+\n+\n+class EnumerationTypesTemplateTests(SimpleTestCase):\n+\n+    def test_enum_in_template(self):\n+        template = Template('{% if student.year_in_school == YearInSchool.FRESHMAN %}Yes{% else %}No{% endif %}')\n+        output = template.render(Context({'YearInSchool': YearInSchool, 'student': {'year_in_school': YearInSchool.FRESHMAN}}))\n+        self.assertEqual(output, 'Yes')\n+\n+    def test_enum_label_value_template(self):\n+        template = Template('{{ YearInSchool.FRESHMAN.label }}|{{ YearInSchool.FRESHMAN.value }}')\n+        output = template.render(Context({'YearInSchool': YearInSchool}))\n+        self.assertEqual(output, 'Freshman|FR')\n+\n import datetime\n import decimal\n import ipaddress\n@@ -6,6 +26,7 @@ import uuid\n from django.db import models\n from django.test import SimpleTestCase\n from django.utils.functional import Promise\n+from django.template import Context, Template\n from django.utils.translation import gettext_lazy as _\n \n \n",
  "django__django-12308": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex acbcf33..d028782 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -167,6 +167,22 @@ class UtilsTests(SimpleTestCase):\n         self.assertHTMLEqual(display_value, expected)\n \n         display_value = display_for_field(None, models.BooleanField(null=True), self.empty_value)\n+\n+    def test_json_display_for_field_readonly(self):\n+        \"\"\"\n+        Test display_for_field correctly handles JSONField when readonly.\n+        \"\"\"\n+        tests = [\n+            ({\"foo\": \"bar\"}, '{\"foo\": \"bar\"}'),  # Valid JSON\n+            ({\"a\": {\"b\": \"c\"}}, '{\"a\": {\"b\": \"c\"}}'),  # Nested JSON\n+            ([\"a\", \"b\"], '[\"a\", \"b\"]'),  # JSON array\n+            ('a', '\"a\"'),  # JSON string\n+            ({('a', 'b'): 'c'}, \"{('a', 'b'): 'c'}\"),  # Invalid JSON case\n+        ]\n+        for value, expected_display in tests:\n+            with self.subTest(value=value):\n+                display_value = display_for_field(value, models.JSONField(), self.empty_value)\n+                self.assertEqual(display_value, expected_display)\n         expected = '<img src=\"%sadmin/img/icon-unknown.svg\" alt=\"None\" />' % settings.STATIC_URL\n         self.assertHTMLEqual(display_value, expected)\n \n",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..d33acf6 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1005,8 +1005,32 @@ class OtherModelTests(SimpleTestCase):\n             from_country = models.ForeignKey(Country, models.CASCADE)\n \n         self.assertEqual(ShippingMethod.check(), [])\n+    def test_onetoone_with_multiple_references(self):\n+        \"\"\"\n+        Test to ensure that a model with multiple OneToOneField references including a parent_link field\n+        does not raise an ImproperlyConfigured exception.\n+        \"\"\"\n+        class Document(models.Model):\n+            pass\n+\n+        class Picking(Document):\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+\n+        self.assertEqual(Picking.check(), [])\n+\n+    def test_onetoone_with_multiple_references_order_swap(self):\n+        \"\"\"\n+        Test to ensure that swapping the order of OneToOneField references maintains proper configuration.\n+        \"\"\"\n+        class Document(models.Model):\n+            pass\n+\n+        class Picking(Document):\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n \n-    def test_missing_parent_link(self):\n+        self.assertEqual(Picking.check(), [])\n         msg = 'Add parent_link=True to invalid_models_tests.ParkingLot.parent.'\n         with self.assertRaisesMessage(ImproperlyConfigured, msg):\n             class Place(models.Model):\n",
  "django__django-12419": "diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py\nindex 7af62eb..c9cc294 100644\n--- a/tests/middleware/test_security.py\n+++ b/tests/middleware/test_security.py\n@@ -247,11 +247,18 @@ class SecurityMiddlewareTest(SimpleTestCase):\n             with self.subTest(value=value), override_settings(SECURE_REFERRER_POLICY=value):\n                 self.assertEqual(self.process_response()['Referrer-Policy'], expected)\n \n-    @override_settings(SECURE_REFERRER_POLICY='strict-origin')\n+    @override_settings(SECURE_REFERRER_POLICY=None)\n+    def test_default_referrer_policy(self):\n+        \"\"\"\n+        When SECURE_REFERRER_POLICY is not set, the default \"Referrer-Policy\"\n+        header should be \"same-origin\".\n+        \"\"\"\n+        response = self.process_response()\n+        self.assertEqual(response['Referrer-Policy'], 'same-origin')\n     def test_referrer_policy_already_present(self):\n         \"\"\"\n         The middleware will not override a \"Referrer-Policy\" header already\n         present in the response.\n         \"\"\"\n         response = self.process_response(headers={'Referrer-Policy': 'unsafe-url'})\n-        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n",
  "django__django-12663": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 872551b..e22ed34 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -22,6 +22,7 @@ from django.db.models.sql.datastructures import Join\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import Approximate, isolate_apps\n \n+from django.utils.functional import SimpleLazyObject\n from .models import (\n     UUID, UUIDPK, Company, Employee, Experiment, Number, RemoteEmployee,\n     Result, SimulationRun, Time,\n",
  "django__django-12708": "",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..f4e6ac3 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -14,7 +14,7 @@ from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.auth.models import User\n from django.core.files.storage import default_storage\n from django.core.files.uploadedfile import SimpleUploadedFile\n-from django.db.models import CharField, DateField, DateTimeField, UUIDField\n+from django.db.models import CharField, DateField, DateTimeField, UUIDField, ManyToManyField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..b0ffe95 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,7 +172,7 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n@@ -181,4 +181,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 17e707b..66b2d11 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2444,6 +2444,30 @@ class AutodetectorTests(TestCase):\n         self.assertNumberMigrations(changes, 'testapp', 1)\n         self.assertOperationTypes(changes, 'testapp', 0, [\"AddField\", \"AddField\"])\n         self.assertOperationAttributes(changes, 'testapp', 0, 0)\n+    def test_add_model_with_field_removed_from_base_model(self):\n+        \"\"\"\n+        Removing a base field takes place before adding a new inherited model\n+        that has a field with the same name.\n+        \"\"\"\n+        before = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('title', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        after = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+            ]),\n+            ModelState('app', 'book', [\n+                ('title', models.CharField(max_length=200)),\n+            ], bases=('app.readable',)),\n+        ]\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'app', 1)\n+        self.assertOperationTypes(changes, 'app', 0, ['RemoveField', 'CreateModel'])\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='title', model_name='readable')\n+        self.assertOperationAttributes(changes, 'app', 0, 1, name='book')\n \n     def test_mti_inheritance_model_removal(self):\n         Animal = ModelState('app', 'Animal', [\n@@ -2453,4 +2477,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..57de6a1 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -9,6 +9,8 @@ from django.db.models import Exists, Max, OuterRef\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n from django.utils.deprecation import RemovedInDjango40Warning\n+from django.db import models\n+from django.test.utils import isolate_apps\n \n from .models import (\n     Article, Author, Freebie, Game, IsNullWithNoneAsRHS, Player, Season, Tag,\n@@ -194,7 +196,52 @@ class LookupTests(TestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             Article.objects.in_bulk([self.au1], field_name='author')\n \n-    def test_values(self):\n+    @isolate_apps('lookup')\n+    def test_in_bulk_meta_constraint(self):\n+        class Season(models.Model):\n+            year = models.PositiveSmallIntegerField()\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(fields=['year'], name='season_year_unique'),\n+                ]\n+\n+        season_2011 = Season.objects.create(year=2011)\n+        season_2012 = Season.objects.create(year=2012)\n+        Season.objects.create(year=2013)\n+        self.assertEqual(\n+            Season.objects.in_bulk(\n+                [season_2011.year, season_2012.year],\n+                field_name='year',\n+            ),\n+            {season_2011.year: season_2011, season_2012.year: season_2012},\n+        )\n+\n+    @isolate_apps('lookup')\n+    def test_in_bulk_non_unique_meta_constraint(self):\n+        class Model(models.Model):\n+            ean = models.CharField(max_length=100)\n+            brand = models.CharField(max_length=100)\n+            name = models.CharField(max_length=80)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=['ean'],\n+                        name='partial_ean_unique',\n+                        condition=models.Q(is_active=True)\n+                    ),\n+                    models.UniqueConstraint(\n+                        fields=['brand', 'name'],\n+                        name='together_brand_name_unique',\n+                    ),\n+                ]\n+\n+        msg = \"in_bulk()'s field_name must be a unique field but '%s' isn't.\"\n+        for field_name in ['brand', 'ean']:\n+            with self.subTest(field_name=field_name):\n+                with self.assertRaisesMessage(ValueError, msg % field_name):\n+                    Model.objects.in_bulk(field_name=field_name)\n         # values() returns a list of dictionaries instead of object instances --\n         # and you can specify which fields you want to retrieve.\n         self.assertSequenceEqual(\n",
  "django__django-12858": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 3b6974f..5b959d0 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -892,6 +892,23 @@ class OtherModelTests(SimpleTestCase):\n \n         with register_lookup(models.CharField, Lower):\n             self.assertEqual(Model.check(), [])\n+    def test_ordering_uses_non_transform_lookup(self):\n+        class Parent(models.Model):\n+            pass\n+\n+        class Product(models.Model):\n+            parent = models.ForeignKey(Parent, models.CASCADE, null=True)\n+\n+        class Supply(models.Model):\n+            product = models.ForeignKey(Product, models.CASCADE)\n+\n+        class Stock(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('supply__product__parent__isnull',)\n+\n+        self.assertEqual(Stock.check(), [])\n \n     def test_ordering_pointing_to_related_model_pk(self):\n         class Parent(models.Model):\n",
  "django__django-13012": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 87c0945..b0c5ff7 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1821,10 +1821,22 @@ class CombinableTests(SimpleTestCase):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             Combinable() | Combinable()\n \n-    def test_reversed_and(self):\n+class ExpressionWrapperTests(SimpleTestCase):\n+    def test_empty_group_by(self):\n+        expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [])\n+\n+    def test_non_empty_group_by(self):\n+        expr = ExpressionWrapper(Lower(Value('f')), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [expr.expression])\n+\n+    def test_constant_expression_not_in_group_by(self):\n+        # This tests that a constant wrapped in ExpressionWrapper doesn't result in a GROUP BY clause\n+        expr = ExpressionWrapper(Value(5), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [])\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             object() & Combinable()\n \n     def test_reversed_or(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n-            object() | Combinable()\n+            object() | Combinable()\n",
  "django__django-13028": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 70329a0..94ff3de 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -1200,6 +1200,19 @@ class Queries1Tests(TestCase):\n         )\n         self.assertTrue(qs.first())\n \n+    def test_filter_with_non_filterable_field(self):\n+        \"\"\"\n+        Test filtering with a field that has filterable=False\n+        \"\"\"\n+        # Try filtering with the `ExtraInfo` model's field `filterable=False`\n+        try:\n+            result = Author.objects.filter(extra__filterable=False)\n+            self.assertIsNotNone(result)\n+            # Check if the queryset is empty or not, which should not raise an error\n+            self.assertTrue(result.exists())\n+        except Exception as e:\n+            self.fail(f\"Filtering on a non-filterable field raised an error: {e}\")\n+\n     def test_excluded_intermediary_m2m_table_joined(self):\n         self.assertSequenceEqual(\n             Note.objects.filter(~Q(tag__annotation__name=F('note'))),\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..dfae35d 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,6 +343,54 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_order_by_self_referential_fk_id(self):\n+        self.a1.author = Author.objects.create(editor=self.author_1)\n+        self.a1.save()\n+        self.a2.author = Author.objects.create(editor=self.author_2)\n+        self.a2.save()\n+        # Test ordering by self-referential foreign key id\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline'),\n+        )\n+\n+    def test_order_by_self_referential_fk(self):\n+        self.a1.author = Author.objects.create(editor=self.author_1)\n+        self.a1.save()\n+        self.a2.author = Author.objects.create(editor=self.author_2)\n+        self.a2.save()\n+        # Test ordering by self-referential foreign key\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline'),\n+        )\n+\n+    def test_order_by_reversed_self_referential_fk(self):\n+        self.a1.author = Author.objects.create(editor=self.author_1)\n+        self.a1.save()\n+        self.a2.author = Author.objects.create(editor=self.author_2)\n+        self.a2.save()\n+        # Test reversed ordering by self-referential foreign key\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__editor'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline'),\n+        )\n+\n+    def test_order_by_reversed_self_referential_fk_id(self):\n+        self.a1.author = Author.objects.create(editor=self.author_1)\n+        self.a1.save()\n+        self.a2.author = Author.objects.create(editor=self.author_2)\n+        self.a2.save()\n+        # Test reversed ordering by self-referential foreign key id\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__editor_id'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline'),\n+        )\n+\n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n@@ -353,6 +401,54 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n+\n+    def test_order_by_self_referential_fk_id(self):\n+        self.a1.author = Author.objects.create(editor=self.author_1)\n+        self.a1.save()\n+        self.a2.author = Author.objects.create(editor=self.author_2)\n+        self.a2.save()\n+        # Test ordering by self-referential foreign key id\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline'),\n+        )\n+\n+    def test_order_by_self_referential_fk(self):\n+        self.a1.author = Author.objects.create(editor=self.author_1)\n+        self.a1.save()\n+        self.a2.author = Author.objects.create(editor=self.author_2)\n+        self.a2.save()\n+        # Test ordering by self-referential foreign key\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline'),\n+        )\n+\n+    def test_order_by_reversed_self_referential_fk(self):\n+        self.a1.author = Author.objects.create(editor=self.author_1)\n+        self.a1.save()\n+        self.a2.author = Author.objects.create(editor=self.author_2)\n+        self.a2.save()\n+        # Test reversed ordering by self-referential foreign key\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__editor'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline'),\n+        )\n+\n+    def test_order_by_reversed_self_referential_fk_id(self):\n+        self.a1.author = Author.objects.create(editor=self.author_1)\n+        self.a1.save()\n+        self.a2.author = Author.objects.create(editor=self.author_2)\n+        self.a2.save()\n+        # Test reversed ordering by self-referential foreign key id\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__editor_id'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline'),\n+        )\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline').asc()), [\n                 \"Article 1\",\n",
  "django__django-13089": "",
  "django__django-13109": "diff --git a/tests/model_forms/models.py b/tests/model_forms/models.py\nindex ff8ad74..098b15b 100644\n--- a/tests/model_forms/models.py\n+++ b/tests/model_forms/models.py\n@@ -21,6 +21,8 @@ class Category(models.Model):\n     slug = models.SlugField(max_length=20)\n     url = models.CharField('The URL', max_length=40)\n \n+    archived = models.BooleanField(default=False, editable=False)\n+\n     def __str__(self):\n         return self.name\n \n@@ -34,6 +36,8 @@ class Writer(models.Model):\n     class Meta:\n         ordering = ('name',)\n \n+    archived = models.BooleanField(default=False, editable=False)\n+\n     def __str__(self):\n         return self.name\n \n",
  "django__django-13112": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 081eff8..e78c4b8 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -867,6 +867,30 @@ class StateTests(SimpleTestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             project_state.apps\n \n+    def test_mixed_case_foreign_key_resolution(self):\n+        \"\"\"\n+        Test that a ForeignKey can be resolved when the app name\n+        is mixed-case.\n+        \"\"\"\n+        new_apps = Apps()\n+\n+        class Category(models.Model):\n+            class Meta:\n+                app_label = 'MiXedCaSeApp'\n+                apps = new_apps\n+\n+        class Content(models.Model):\n+            category = models.ForeignKey(Category, models.CASCADE)\n+\n+            class Meta:\n+                app_label = 'MiXedCaSeApp'\n+                apps = new_apps\n+\n+        project_state = ProjectState()\n+        project_state.add_model(ModelState.from_model(Category))\n+        project_state.add_model(ModelState.from_model(Content))\n+        self.assertEqual(len(project_state.apps.get_models()), 2)\n+\n     def test_real_apps(self):\n         \"\"\"\n         Including real apps can resolve dangling FK errors.\n",
  "django__django-13121": "",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..b99c16d 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1618,7 +1618,14 @@ class FTimeDeltaTests(TestCase):\n         self.assertTrue(queryset.exists())\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n-    def test_datetime_subtraction_microseconds(self):\n+    def test_temporal_subtraction_without_expression_wrapper(self):\n+        # Test direct subtraction of DateTimeFields without ExpressionWrapper.\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+\n+        for e in queryset:\n+            self.assertEqual(e.delta, e.end - e.start)\n         delta = datetime.timedelta(microseconds=8999999999999999)\n         Experiment.objects.update(end=F('start') + delta)\n         qs = Experiment.objects.annotate(\n",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..747e22e 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,5 +1,7 @@\n import operator\n \n+from django.db.models.query import QuerySet\n+\n from django.db import DatabaseError, NotSupportedError, connection\n from django.db.models import Exists, F, IntegerField, OuterRef, Value\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n@@ -39,7 +41,31 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.intersection(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n-    @skipUnlessDBFeature('supports_select_difference')\n+    def test_union_none_method(self):\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        qs3 = qs1.union(qs2)\n+        # Test that calling none() on a union queryset results in no results\n+        self.assertEqual(list(qs3.none()), [])\n+\n+        # Ensure that calling none() doesn't affect the original queryset\n+        self.assertNumbersEqual(qs3, [0, 1, 8, 9], ordered=False)\n+\n+    def test_union_empty_form_submission(self):\n+        class NumberForm(forms.Form):\n+            numbers = forms.ModelMultipleChoiceField(\n+                Number.objects.filter(num__lte=1).union(\n+                    Number.objects.filter(num__gte=8)\n+                ),\n+                required=False,\n+            )\n+\n+        form = NumberForm(data={'numbers': []})\n+        self.assertTrue(form.is_valid())\n+        self.assertEqual(list(form.cleaned_data['numbers']), [])\n+\n+        # Ensuring that the form submission does not inadvertently select all objects\n+        self.assertNumbersEqual(Number.objects.none(), [])\n     def test_simple_difference(self):\n         qs1 = Number.objects.filter(num__lte=5)\n         qs2 = Number.objects.filter(num__lte=4)\n",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..76df09b 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -38,7 +38,33 @@ from django.utils import timezone\n from .models import SessionStore as CustomDatabaseSession\n \n \n+from django.utils.deprecation import RemovedInDjango40Warning\n+from django.test import override_settings, ignore_warnings\n+\n class SessionTestsMixin:\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    @override_settings(DEFAULT_HASHING_ALGORITHM='sha1')\n+    def test_legacy_encode_and_decode(self):\n+        # Test that data encoded with the legacy method can be decoded.\n+        data = {'key1': 'value1', 'key2': 'value2'}\n+        encoded = self.session.encode(data)\n+        decoded = self.session._legacy_decode(encoded)\n+        self.assertEqual(decoded, data)\n+\n+    def test_non_sha1_encoded_data(self):\n+        # Test that data encoded with a different hashing algorithm\n+        # does not get decoded by the legacy method.\n+        self.session.encode = lambda d: 'non_sha1_encoded_data'\n+        with self.assertRaises(Exception):\n+            self.session._legacy_decode('non_sha1_encoded_data')\n+\n+    def test_corrupted_data_handling(self):\n+        # Test that corrupted data returns an empty dictionary and logs a warning.\n+        corrupted_data = base64.b64encode(b'bad:data').decode('ascii')\n+        with self.assertLogs('django.security.SuspiciousSession', 'WARNING') as cm:\n+            decoded = self.session.decode(corrupted_data)\n+            self.assertEqual(decoded, {})\n+        self.assertIn('corrupted', cm.output[0])\n     # This does not inherit from TestCase to avoid any tests being run with this\n     # class, which wouldn't work, and to allow different TestCase subclasses to\n     # be used.\n",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..841c660 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -8,6 +8,9 @@ from django.test import (\n from django.test.utils import require_jinja2\n from django.urls import resolve\n from django.utils.deprecation import RemovedInDjango40Warning\n+from .models import Account  # Assuming Account is defined in the models module\n+from django.shortcuts import get_object_or_404\n+from django.utils.functional import SimpleLazyObject\n from django.views.generic import RedirectView, TemplateView, View\n \n from . import views\n@@ -590,7 +593,21 @@ class DeprecationTests(SimpleTestCase):\n         self.assertEqual(response.context['key'], 'value')\n         self.assertIsInstance(response.context['view'], View)\n \n-    def test_template_params_warning(self):\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_template_params_filtering(self):\n+        class OfferView(TemplateView):\n+            template_name = \"generic_views/offers/offer.html\"\n+\n+            def get_context_data(self, *, offer_slug, **kwargs):\n+                context = super().get_context_data(**kwargs)\n+                # Simulating SimpleLazyObject behavior for offer_slug\n+                lazy_offer_slug = SimpleLazyObject(lambda: offer_slug)\n+                offer = get_object_or_404(Account, slug=str(lazy_offer_slug))\n+                return {**context, 'offer': offer}\n+\n+        account = Account.objects.create(slug='sample-slug')\n+        response = OfferView.as_view()(self.rf.get('/offers/sample-slug/'), offer_slug=account.slug)\n+        self.assertEqual(response.context_data['offer'], account)\n         response = self.client.get('/template/custom/bar1/bar2/')\n         self.assertEqual(response.status_code, 200)\n         msg = (\n",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..61bd5be 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -16,6 +16,10 @@ from django.forms.models import (\n )\n from django.template import Context, Template\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n+from django.test.utils import isolate_apps\n+from .models import StumpJoke, Character\n+from django.db.models import Q\n+from django.forms import ModelForm\n \n from .models import (\n     Article, ArticleStatus, Author, Author1, Award, BetterWriter, BigInt, Book,\n@@ -2819,7 +2823,41 @@ class LimitChoicesToTests(TestCase):\n         fields = fields_for_model(StumpJoke, ['has_fooled_today'])\n         self.assertSequenceEqual(fields['has_fooled_today'].queryset, [self.threepwood])\n \n-    def test_callable_called_each_time_form_is_instantiated(self):\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        # Create character instances\n+        threepwood = Character.objects.create(username='Threepwood', last_action='2023-01-01')\n+        marley = Character.objects.create(username='Marley', last_action='2023-01-01')\n+\n+        # Create StumpJoke instances\n+        joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=marley)\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=marley)\n+\n+        # Add relationships\n+        joke1.has_fooled_today.add(marley, threepwood)\n+        joke2.has_fooled_today.add(marley)\n+        joke3.has_fooled_today.add(marley, threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=Q(jokes__funny=True, jokes_today__funny=True),\n+                related_name='details_fk',\n+            )\n+\n+        class CharacterDetailsForm(ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character'].queryset,\n+            [marley, threepwood],\n+        )\n         field = StumpJokeForm.base_fields['most_recently_fooled']\n         with mock.patch.object(field, 'limit_choices_to') as today_callable_dict:\n             StumpJokeForm()\n",
  "django__django-13343": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex a5ab3a0..789f95e 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -29,7 +29,7 @@ from django.test.utils import requires_tz_support\n from django.urls import NoReverseMatch, reverse_lazy\n from django.utils import timezone\n \n-from .models import Storage, temp_storage, temp_storage_location\n+from .models import Storage, callable_storage, temp_storage, temp_storage_location\n \n FILE_SUFFIX_REGEX = '[A-Za-z0-9]{7}'\n \n@@ -82,7 +82,25 @@ class FileSystemStorageTests(unittest.TestCase):\n         path, args, kwargs = storage.deconstruct()\n         self.assertEqual(kwargs, kwargs_orig)\n \n-    def test_lazy_base_url_init(self):\n+    def test_deconstruction_with_callable_storage(self):\n+        \"\"\"\n+        Ensure that a FileField with a callable storage does not evaluate the callable during deconstruction.\n+        \"\"\"\n+        obj = Storage()\n+        field = obj._meta.get_field('storage_callable')\n+        name, path, args, kwargs = field.deconstruct()\n+        storage = kwargs['storage']\n+        self.assertIs(storage, callable_storage)\n+\n+    def test_deconstruction_with_non_callable_storage(self):\n+        \"\"\"\n+        Ensure that a FileField with a non-callable storage deconstructs correctly.\n+        \"\"\"\n+        obj = Storage()\n+        field = obj._meta.get_field('storage_non_callable')\n+        name, path, args, kwargs = field.deconstruct()\n+        storage = kwargs['storage']\n+        self.assertIs(storage, temp_storage)\n         \"\"\"\n         FileSystemStorage.__init__() shouldn't evaluate base_url.\n         \"\"\"\n",
  "django__django-13346": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex b918d5c..34e1ca3 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -632,6 +632,22 @@ class TestQuerying(TestCase):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='ar').exists(), False)\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='bar').exists(), True)\n \n+\n+    def test_key_in(self):\n+        tests = [\n+            # Test scenarios based on the issue report\n+            ('value__key__in', [0], self.objs[:3]),  # These should match as per the issue example\n+            ('value__key__in', [1], self.objs[3:]),  # Add more range of test data to ensure varied cases\n+            ('value__key__in', [0, 1], self.objs),   # Test with multiple possible matches\n+            ('value__key__in', [], []),              # Test with no values in the list\n+        ]\n+        for lookup, value, expected in tests:\n+            with self.subTest(lookup=lookup, value=value):\n+                self.assertSequenceEqual(\n+                    NullableJSONModel.objects.filter(**{lookup: value}),\n+                    expected,\n+                )\n+\n     def test_key_icontains(self):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__icontains='Ar').exists(), True)\n \n",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..d070f34 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -18,7 +18,10 @@ from django.test import (\n     TestCase, override_settings, skipIfDBFeature, skipUnlessDBFeature,\n )\n from django.utils import timezone\n-\n+import pytz\n+from datetime import datetime\n+from django.db.models import Count\n+from django.utils import timezone\n from ..models import Author, DTModel, Fan\n \n \n@@ -1133,7 +1136,43 @@ class DateFunctionWithTimeZoneTests(DateFunctionTests):\n         self.assertEqual(model.melb_year.year, 2016)\n         self.assertEqual(model.pacific_year.year, 2015)\n \n-    def test_trunc_ambiguous_and_invalid_times(self):\n+    def test_trunc_date_with_tzinfo(self):\n+        start_datetime = datetime(2023, 10, 1, 12, 0, 0)\n+        start_datetime = timezone.make_aware(start_datetime, timezone.utc)\n+        self.create_model(start_datetime, start_datetime)\n+\n+        melb = pytz.timezone('Australia/Melbourne')\n+        ny = pytz.timezone('America/New_York')\n+\n+        model = DTModel.objects.annotate(\n+            melb_date=TruncDate('start_datetime', tzinfo=melb),\n+            ny_date=TruncDate('start_datetime', tzinfo=ny),\n+        ).get()\n+\n+        melb_start_datetime = start_datetime.astimezone(melb)\n+        ny_start_datetime = start_datetime.astimezone(ny)\n+\n+        self.assertEqual(model.melb_date, melb_start_datetime.date())\n+        self.assertEqual(model.ny_date, ny_start_datetime.date())\n+\n+    def test_trunc_time_with_tzinfo(self):\n+        start_datetime = datetime(2023, 10, 1, 12, 0, 0)\n+        start_datetime = timezone.make_aware(start_datetime, timezone.utc)\n+        self.create_model(start_datetime, start_datetime)\n+\n+        melb = pytz.timezone('Australia/Melbourne')\n+        ny = pytz.timezone('America/New_York')\n+\n+        model = DTModel.objects.annotate(\n+            melb_time=TruncTime('start_datetime', tzinfo=melb),\n+            ny_time=TruncTime('start_datetime', tzinfo=ny),\n+        ).get()\n+\n+        melb_start_datetime = start_datetime.astimezone(melb)\n+        ny_start_datetime = start_datetime.astimezone(ny)\n+\n+        self.assertEqual(model.melb_time, melb_start_datetime.time())\n+        self.assertEqual(model.ny_time, ny_start_datetime.time())\n         sao = pytz.timezone('America/Sao_Paulo')\n         utc = pytz.timezone('UTC')\n         start_datetime = utc.localize(datetime(2016, 10, 16, 13))\n",
  "django__django-13401": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e39d03e..220e636 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -102,8 +102,43 @@ class BasicFieldTests(SimpleTestCase):\n         name, path, args, kwargs = Nested.Field().deconstruct()\n         self.assertEqual(path, 'model_fields.tests.Nested.Field')\n \n+class AbstractModelFieldsTests(TestCase):\n+    def test_abstract_model_fields_equality(self):\n+        \"\"\"Field instances from different models should not be equal.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n \n-class ChoicesTests(SimpleTestCase):\n+            class Meta:\n+                abstract = True\n+\n+        class Model1(AbstractModel):\n+            pass\n+\n+        class Model2(AbstractModel):\n+            pass\n+\n+        field1 = Model1._meta.get_field('field')\n+        field2 = Model2._meta.get_field('field')\n+\n+        self.assertNotEqual(field1, field2)\n+        self.assertNotEqual(hash(field1), hash(field2))\n+\n+    def test_abstract_model_fields_ordering(self):\n+        \"\"\"Check that field ordering respects creation_counter.\"\"\"\n+        class AbstractModel(models.Model):\n+            field1 = models.IntegerField()\n+            field2 = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class ConcreteModel(AbstractModel):\n+            pass\n+\n+        field1 = ConcreteModel._meta.get_field('field1')\n+        field2 = ConcreteModel._meta.get_field('field2')\n+\n+        self.assertLess(field1, field2)\n \n     @classmethod\n     def setUpClass(cls):\n",
  "django__django-13410": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 1285e22..eed78ce 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -1,3 +1,37 @@\n+\n+class LockTestCase(unittest.TestCase):\n+    def test_exclusive_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'wb') as f1, open(file_path, 'rb') as f2:\n+            # Test exclusive lock\n+            self.assertIs(locks.lock(f1, locks.LOCK_EX), True)\n+            self.assertIs(locks.lock(f2, locks.LOCK_EX | locks.LOCK_NB), False)\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), False)\n+            self.assertIs(locks.unlock(f1), True)\n+\n+    def test_shared_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'wb') as f1, open(file_path, 'rb') as f2:\n+            # Test shared lock\n+            self.assertIs(locks.lock(f1, locks.LOCK_SH), True)\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), True)\n+            self.assertIs(locks.unlock(f1), True)\n+            self.assertIs(locks.unlock(f2), True)\n+\n+    def test_lock_unlock_cycle(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'wb') as f:\n+            # Test locking and unlocking cycle\n+            for _ in range(10):\n+                self.assertIs(locks.lock(f, locks.LOCK_EX), True)\n+                self.assertIs(locks.unlock(f), True)\n+\n+    def test_unlock_without_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'wb') as f:\n+            # Test unlocking a file that is not locked\n+            self.assertIs(locks.unlock(f), True)\n+\n import errno\n import gzip\n import os\n@@ -6,6 +40,7 @@ import tempfile\n import unittest\n from io import BytesIO, StringIO, TextIOWrapper\n from pathlib import Path\n+from django.core.files import locks\n from unittest import mock\n \n from django.core.files import File\n",
  "django__django-13417": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 8130de5..8b0c808 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2084,6 +2084,31 @@ class QuerysetOrderedTests(unittest.TestCase):\n         self.assertIs(qs.ordered, False)\n         self.assertIs(qs.order_by('num_notes').ordered, True)\n \n+    def test_annotated_default_ordering(self):\n+        qs = Annotation.objects.annotate(num_notes=Count('notes'))\n+        self.assertIs(qs.ordered, False)\n+        self.assertIs(qs.order_by('notes').ordered, True)\n+\n+    def test_annotated_values_default_ordering(self):\n+        qs = Annotation.objects.values('name').annotate(num_notes=Count('notes'))\n+        self.assertIs(qs.ordered, False)\n+        self.assertIs(qs.order_by('name').ordered, True)\n+\n+    def test_group_by_default_ordering_with_meta(self):\n+        # Assuming Foo has a Meta class with `ordering = ['name']`\n+        qs = Foo.objects.annotate(num_notes=Count('pk'))\n+        self.assertIs(qs.ordered, False)\n+        qs_with_order = qs.order_by('name')\n+        self.assertIs(qs_with_order.ordered, True)\n+        # Check SQL\n+        self.assertIn('ORDER BY', str(qs_with_order.query))\n+\n+    def test_group_by_without_ordering(self):\n+        qs = Foo.objects.values('name').annotate(num_notes=Count('pk'))\n+        self.assertIs(qs.ordered, False)\n+        # Ensure the query doesn't have ORDER BY in its SQL\n+        self.assertNotIn('ORDER BY', str(qs.query))\n+\n \n @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n class SubqueryTests(TestCase):\n",
  "django__django-13516": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 89f7c38..807e35f 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -335,6 +335,37 @@ class CommandTests(SimpleTestCase):\n             with self.assertRaisesMessage(TypeError, msg):\n                 management.call_command('subparser_dest', subcommand='foo', bar=12)\n \n+    def test_outputwrapper_flush(self):\n+        out = StringIO()\n+        with mock.patch.object(out, 'flush') as mocked_flush:\n+            management.call_command('outputwrapper', stdout=out)\n+        self.assertIn('Working...', out.getvalue())\n+        self.assertIs(mocked_flush.called, True)\n+\n+    def test_flush_on_stderr(self):\n+        err = StringIO()\n+        with mock.patch.object(err, 'flush') as mocked_flush:\n+            management.call_command('outputwrapper', stderr=err)\n+        # Verify that flushing stderr doesn't affect the command output on stdout\n+        self.assertNotIn('Working...', err.getvalue())\n+        self.assertIs(mocked_flush.called, True)\n+\n+    def test_migration_flush_progress(self):\n+        out = StringIO()\n+        \n+        class MockExecutor:\n+            def __init__(self, stdout):\n+                self.stdout = stdout\n+\n+            def progress_callback(self, action, migration, fake):\n+                if action == \"apply_start\":\n+                    self.stdout.write(f'Applying {migration}...')\n+                    self.stdout.flush()\n+\n+        mock_executor = MockExecutor(out)\n+        mock_executor.progress_callback('apply_start', '0001_initial', False)\n+        self.assertIn('Applying 0001_initial...', out.getvalue())\n+\n     def test_create_parser_kwargs(self):\n         \"\"\"BaseCommand.create_parser() passes kwargs to CommandParser.\"\"\"\n         epilog = 'some epilog text'\n",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..38d2d5b 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,11 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n+from .models import CustomEmailField\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..d882989 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,9 +1,11 @@\n+\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n from django.contrib.auth.models import AbstractBaseUser\n from django.core import checks\n from django.db import models\n+from django.db.models import Q, UniqueConstraint\n from django.test import (\n     SimpleTestCase, override_settings, override_system_checks,\n )\n@@ -138,7 +140,43 @@ class ModelsPermissionsChecksTests(SimpleTestCase):\n             ),\n         ])\n \n-    def test_non_clashing_custom_permissions(self):\n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserUniqueConstraintWithCondition')\n+    def test_username_unique_with_condition_constraint(self):\n+        \"\"\"\n+        Ensure no auth.E003 error is raised when USERNAME_FIELD is part of a UniqueConstraint with a condition.\n+        \"\"\"\n+        class CustomUserUniqueConstraintWithCondition(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(\n+                        fields=['username'],\n+                        name='username_unique_with_condition',\n+                        condition=Q(password__isnull=False),\n+                    ),\n+                ]\n+\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [])\n+\n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserUniqueConstraintWithoutCondition')\n+    def test_username_unique_without_condition_constraint(self):\n+        \"\"\"\n+        Ensure no auth.E003 error is raised when USERNAME_FIELD is part of an unconditional UniqueConstraint.\n+        \"\"\"\n+        class CustomUserUniqueConstraintWithoutCondition(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(fields=['username'], name='username_unique'),\n+                ]\n+\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [])\n         class Checked(models.Model):\n             class Meta:\n                 permissions = [\n",
  "django__django-13569": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex a44d0b6..31564a5 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1314,4 +1314,40 @@ class AggregateTestCase(TestCase):\n         # non-multivalued JOINs, see Col.possibly_multivalued (refs #31150):\n         # with self.assertNumQueries(1) as ctx:\n         #     self.assertSequenceEqual(books_qs, [book])\n-        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n+        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n+\n+    def test_aggregation_random_ordering(self):\n+        \"\"\"Random() is not included in the GROUP BY when used for ordering.\"\"\"\n+        authors = Author.objects.annotate(contact_count=Count('book')).order_by('?')\n+        self.assertQuerysetEqual(authors, [\n+            ('Adrian Holovaty', 1),\n+            ('Jacob Kaplan-Moss', 1),\n+            ('Brad Dayley', 1),\n+            ('James Bennett', 1),\n+            ('Jeffrey Forcier', 1),\n+            ('Paul Bissex', 1),\n+            ('Wesley J. Chun', 1),\n+            ('Stuart Russell', 1),\n+            ('Peter Norvig', 2),\n+        ], lambda a: (a.name, a.contact_count), ordered=False)\n+\n+    def test_random_order_not_affecting_aggregation(self):\n+        \"\"\"Ensure Random() ordering does not affect aggregation counts.\"\"\"\n+        thing = Thing.objects.create()\n+        Related.objects.create(thing=thing)\n+        Related.objects.create(thing=thing)\n+        queryset = Thing.objects.annotate(rc=Count('related')).order_by('?').values('id', 'rc')\n+        self.assertEqual(len(queryset), 1)\n+        self.assertEqual(queryset[0]['rc'], 2)\n+\n+    def test_random_order_with_multiple_objects(self):\n+        \"\"\"Test Random() ordering with multiple annotated objects.\"\"\"\n+        thing1 = Thing.objects.create()\n+        thing2 = Thing.objects.create()\n+        Related.objects.create(thing=thing1)\n+        Related.objects.create(thing=thing1)\n+        Related.objects.create(thing=thing2)\n+        queryset = Thing.objects.annotate(rc=Count('related')).order_by('?').values('id', 'rc')\n+        self.assertEqual(len(queryset), 2)\n+        expected_results = [{'id': thing1.id, 'rc': 2}, {'id': thing2.id, 'rc': 1}]\n+        self.assertCountEqual(queryset, expected_results)\n",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..26d8bc8 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -8,6 +9,7 @@ from unittest import mock\n \n from django.core.exceptions import FieldError\n from django.db import DatabaseError, NotSupportedError, connection\n+from collections import namedtuple\n from django.db.models import (\n     AutoField, Avg, BinaryField, BooleanField, Case, CharField, Count,\n     DateField, DateTimeField, DecimalField, DurationField, Exists, Expression,\n@@ -815,7 +817,13 @@ class IterableLookupInnerExpressionsTests(TestCase):\n         Company.objects.create(name='5060 Ltd', num_employees=50, num_chairs=60, ceo=ceo)\n         Company.objects.create(name='99300 Ltd', num_employees=99, num_chairs=300, ceo=ceo)\n \n-    def test_in_lookup_allows_F_expressions_and_expressions_for_integers(self):\n+    def test_range_lookup_namedtuple(self):\n+        # This test verifies that named tuples can be used as parameters for __range lookups.\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertQuerysetEqual(qs, ['<Company: 99300 Ltd>'], ordered=False)\n         # __in lookups can use F() expressions for integers.\n         queryset = Company.objects.filter(num_employees__in=([F('num_chairs') - 10]))\n         self.assertQuerysetEqual(queryset, ['<Company: 5060 Ltd>'], ordered=False)\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..7f80228 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -11,6 +11,7 @@ import subprocess\n import sys\n import tempfile\n import unittest\n+import os\n from io import StringIO\n from unittest import mock\n \n@@ -28,10 +29,47 @@ from django.core.management.commands.testserver import (\n )\n from django.db import ConnectionHandler, connection\n from django.db.migrations.recorder import MigrationRecorder\n+from django.test.utils import captured_stderr, captured_stdout\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n \n+class ExecuteFromCommandLineTests(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Verify that the program name is computed from the execute_from_command_line()'s\n+        argv argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_prog_name_with_different_argv(self):\n+        \"\"\"\n+        Test that a different argv list is respected by execute_from_command_line\n+        for the program name.\n+        \"\"\"\n+        args = ['help', 'check']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['incorrect-prog'] + args):\n+                execute_from_command_line(['my-django-admin'] + args)\n+        self.assertIn('usage: my-django-admin check', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_sys_argv_used_when_no_argv_passed(self):\n+        \"\"\"\n+        Test that sys.argv[0] is used when no argv is explicitly passed.\n+        \"\"\"\n+        args = ['help', 'migrate']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['default-prog'] + args):\n+                execute_from_command_line()\n+        self.assertIn('usage: default-prog migrate', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n \n SYSTEM_CHECK_MSG = 'System check identified no issues'\n",
  "django__django-13670": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 6f0b13f..e1ca32c 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -1,3 +1,4 @@\n+\n from datetime import date, datetime\n \n from django.test import SimpleTestCase, override_settings\n@@ -112,7 +113,21 @@ class DateFormatTests(SimpleTestCase):\n \n         self.assertEqual(dateformat.format(my_birthday, r'jS \\o\\f F'), '8th of July')\n \n-    def test_futuredates(self):\n+    def test_year_before_1000(self):\n+        tests = [\n+            (476, '76'),\n+            (42, '42'),\n+            (4, '04'),\n+            (999, '99'),\n+            (99, '99'),\n+            (9, '09'),\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n         the_future = datetime(2100, 10, 25, 0, 00)\n         self.assertEqual(dateformat.format(the_future, r'Y'), '2100')\n \n@@ -164,4 +179,4 @@ class DateFormatTests(SimpleTestCase):\n             self.assertEqual(\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+            )\n",
  "django__django-13741": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex ca66cd5..84fd66f 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1024,8 +1024,9 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n         field = ReadOnlyPasswordHashField()\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n \n-\n-class AdminPasswordChangeFormTest(TestDataMixin, TestCase):\n+    def test_readonly_password_hash_field_disabled(self):\n+        field = ReadOnlyPasswordHashField()\n+        self.assertIs(field.disabled, True)\n \n     @mock.patch('django.contrib.auth.password_validation.password_changed')\n     def test_success(self, password_changed):\n",
  "django__django-13786": "",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..2bcfe29 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,8 +1,10 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n from django.test import SimpleTestCase\n \n+from django.utils.translation import gettext_lazy, lazy\n from ..utils import setup\n \n \n",
  "django__django-13807": "diff --git a/tests/backends/tests.py b/tests/backends/tests.py\nindex 0aee2b6..681c60f 100644\n--- a/tests/backends/tests.py\n+++ b/tests/backends/tests.py\n@@ -11,7 +11,9 @@ from django.db import (\n )\n from django.db.backends.base.base import BaseDatabaseWrapper\n from django.db.backends.signals import connection_created\n-from django.db.backends.utils import CursorWrapper\n+from django.db import connection, transaction, IntegrityError\n+from django.test import TestCase, TransactionTestCase, override_settings, skipIfDBFeature, skipUnlessDBFeature\n+from .models import Reporter, SQLKeywordsModel\n from django.db.models.sql.constants import CURSOR\n from django.test import (\n     TestCase, TransactionTestCase, override_settings, skipIfDBFeature,\n",
  "django__django-13809": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex d88ea78..3ac580a 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1314,6 +1314,29 @@ class ManageRunserver(SimpleTestCase):\n         self.assertIn('unapplied migration(s)', self.output.getvalue())\n \n \n+import mock\n+from django.core.management import call_command\n+from django.test import TestCase\n+from io import StringIO\n+from django.core.management.commands.runserver import Command as RunserverCommand\n+\n+class TestRunserverSkipChecks(TestCase):\n+    def setUp(self):\n+        self.output = StringIO()\n+        self.runserver_command = RunserverCommand(stdout=self.output)\n+\n+    @mock.patch('django.core.management.base.BaseCommand.check')\n+    def test_runserver_with_skip_checks(self, mocked_check):\n+        call_command('runserver', use_reloader=False, skip_checks=True, stdout=self.output)\n+        self.assertNotIn('Performing system checks...', self.output.getvalue())\n+        mocked_check.assert_not_called()\n+\n+    @mock.patch('django.core.management.base.BaseCommand.check')\n+    def test_runserver_without_skip_checks(self, mocked_check):\n+        call_command('runserver', use_reloader=False, skip_checks=False, stdout=self.output)\n+        self.assertIn('Performing system checks...', self.output.getvalue())\n+        mocked_check.assert_called()\n+\n class ManageRunserverMigrationWarning(TestCase):\n \n     def setUp(self):\n",
  "django__django-13810": "",
  "django__django-13820": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex 594c01e..39598b7 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -1,3 +1,4 @@\n+\n import compileall\n import os\n \n@@ -7,6 +8,7 @@ from django.db.migrations.exceptions import (\n )\n from django.db.migrations.loader import MigrationLoader\n from django.db.migrations.recorder import MigrationRecorder\n+from importlib import import_module\n from django.test import TestCase, modify_settings, override_settings\n \n from .test_base import MigrationTestBase\n@@ -502,6 +504,35 @@ class LoaderTests(TestCase):\n         migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n         self.assertEqual(migrations, ['0001_initial'])\n \n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations'})\n+    def test_loading_package_without__file__(self):\n+        \"\"\"\n+        To support frozen environments, MigrationLoader loads migrations from\n+        regular packages with no __file__ attribute.\n+        \"\"\"\n+        test_module = import_module('migrations.test_migrations')\n+        loader = MigrationLoader(connection)\n+        # __file__ == __spec__.origin or the latter is None and former is\n+        # undefined.\n+        module_file = test_module.__file__\n+        module_origin = test_module.__spec__.origin\n+        module_has_location = test_module.__spec__.has_location\n+        try:\n+            del test_module.__file__\n+            test_module.__spec__.origin = None\n+            test_module.__spec__.has_location = False\n+            loader.load_disk()\n+            migrations = [\n+                name\n+                for app, name in loader.disk_migrations\n+                if app == 'migrations'\n+            ]\n+            self.assertCountEqual(migrations, ['0001_initial', '0002_second'])\n+        finally:\n+            test_module.__file__ = module_file\n+            test_module.__spec__.origin = module_origin\n+            test_module.__spec__.has_location = module_has_location\n+\n     @override_settings(\n         MIGRATION_MODULES={'migrations': 'migrations.test_migrations_namespace_package'},\n     )\n",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..36d5a93 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -9,7 +9,9 @@ from unittest import mock\n \n from django.core.exceptions import ImproperlyConfigured\n from django.db import NotSupportedError, connection, transaction\n+import mock\n from django.db.models import Aggregate, Avg, CharField, StdDev, Sum, Variance\n+from django.core.exceptions import ImproperlyConfigured\n from django.db.utils import ConnectionHandler\n from django.test import (\n     TestCase, TransactionTestCase, override_settings, skipIfDBFeature,\n@@ -36,7 +38,12 @@ class Tests(TestCase):\n                 self.assertRaisesMessage(ImproperlyConfigured, msg):\n             check_sqlite_version()\n \n-    def test_aggregation(self):\n+    def test_check_sqlite_version_3_8_11_1(self):\n+        msg = 'SQLite 3.9.0 or later is required (found 3.8.11.1).'\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 8, 11, 1)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.8.11.1'), \\\n+                self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            check_sqlite_version()\n         \"\"\"Raise NotSupportedError when aggregating on date/time fields.\"\"\"\n         for aggregate in (Sum, Avg, Variance, StdDev):\n             with self.assertRaises(NotSupportedError):\n",
  "django__django-13837": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 10ffa22..63437ec 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -448,6 +448,27 @@ class RestartWithReloaderTests(SimpleTestCase):\n         mock_call = self.patch_autoreload(argv)\n         with mock.patch('django.__main__.__file__', main):\n             autoreload.restart_with_reloader()\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver']\n+        )\n+\n+    @mock.patch('sys.argv', ['-m', 'pkg_other_than_django', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_other_package(self):\n+        class MockSpec:\n+            parent = 'pkg_other_than_django'\n+        \n+        with mock.patch('sys.modules.__main__.__spec__', MockSpec()):\n+            self.assertEqual(\n+                autoreload.get_child_arguments(),\n+                [sys.executable, '-m', 'pkg_other_than_django', 'runserver']\n+            )\n             self.assertEqual(mock_call.call_count, 1)\n             self.assertEqual(mock_call.call_args[0][0], [self.executable, '-Wall', '-m', 'django'] + argv[1:])\n \n",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..f737810 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -283,6 +283,24 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n \n \n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n+    def test_modelchoicefield_value_placeholder(self):\n+        # Create choices for the model choice field tests below.\n+        ChoiceModel.objects.create(pk=1, name='a')\n+        ChoiceModel.objects.create(pk=2, name='b')\n+        ChoiceModel.objects.create(pk=3, name='c')\n+\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            'invalid',\n+        )\n+\n     def test_modelchoicefield(self):\n         # Create choices for the model choice field tests below.\n         ChoiceModel.objects.create(pk=1, name='a')\n@@ -307,4 +325,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..e029e1f 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,7 +1,10 @@\n+\n from django.db import IntegrityError, transaction\n from django.test import TestCase, skipIfDBFeature\n \n-from .models import Bar, Business, Employee, Foo\n+from .models import Bar, Business, CustomAutoFieldModel, Employee, Foo\n+from .fields import MyWrapper\n+from django.test import skipUnlessDBFeature\n \n \n class BasicCustomPKTests(TestCase):\n",
  "django__django-14017": "",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..bfca2d8 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -205,6 +205,25 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yielding_in_post_process(self):\n+        \"\"\"\n+        Ensure that each file is yielded at most once during post_process.\n+        \"\"\"\n+        collectstatic_args = {\n+            'clear': False,\n+            'dry_run': False,\n+            'post_process': True,\n+            'use_default_ignore_patterns': True,\n+            'ignore_patterns': ['*.ignoreme'],\n+        }\n+\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(**collectstatic_args)\n+        stats = collectstatic_cmd.collect()\n+        \n+        # Assert that no file is yielded more than once.\n+        self.assertCountEqual(stats['post_processed'], set(stats['post_processed']))\n+\n     def test_css_import_case_insensitive(self):\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n         self.assertEqual(relpath, \"cached/styles_insensitive.3fa427592a53.css\")\n@@ -214,6 +233,25 @@ class TestHashedFiles:\n             self.assertIn(b\"other.d41d8cd98f00.css\", content)\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yielding_in_post_process(self):\n+        \"\"\"\n+        Ensure that each file is yielded at most once during post_process.\n+        \"\"\"\n+        collectstatic_args = {\n+            'clear': False,\n+            'dry_run': False,\n+            'post_process': True,\n+            'use_default_ignore_patterns': True,\n+            'ignore_patterns': ['*.ignoreme'],\n+        }\n+\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(**collectstatic_args)\n+        stats = collectstatic_cmd.collect()\n+        \n+        # Assert that no file is yielded more than once.\n+        self.assertCountEqual(stats['post_processed'], set(stats['post_processed']))\n+\n     @override_settings(\n         STATICFILES_DIRS=[os.path.join(TEST_ROOT, 'project', 'faulty')],\n         STATICFILES_FINDERS=['django.contrib.staticfiles.finders.FileSystemFinder'],\n",
  "django__django-14089": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 7fb3d83..62b4c0b 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n@@ -18,7 +19,32 @@ class OrderedSetTests(SimpleTestCase):\n         s = OrderedSet([1, 2, 3])\n         self.assertEqual(list(s.dict.keys()), [1, 2, 3])\n \n-    def test_remove(self):\n+    def test_reversed(self):\n+        # Test the basic functionality of reversed on an OrderedSet\n+        s = reversed(OrderedSet([1, 2, 3]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [3, 2, 1])\n+\n+    def test_reversed_empty(self):\n+        # Test reversed on an empty OrderedSet\n+        s = OrderedSet()\n+        reversed_s = reversed(s)\n+        self.assertIsInstance(reversed_s, collections.abc.Iterator)\n+        self.assertEqual(list(reversed_s), [])\n+\n+    def test_reversed_single_element(self):\n+        # Test reversed on an OrderedSet with a single element\n+        s = OrderedSet([42])\n+        reversed_s = reversed(s)\n+        self.assertIsInstance(reversed_s, collections.abc.Iterator)\n+        self.assertEqual(list(reversed_s), [42])\n+\n+    def test_reversed_with_duplicates(self):\n+        # Test reversed on an OrderedSet initialized with duplicates\n+        s = OrderedSet([1, 2, 2, 3, 1])\n+        reversed_s = reversed(s)\n+        self.assertIsInstance(reversed_s, collections.abc.Iterator)\n+        self.assertEqual(list(reversed_s), [3, 2, 1])\n         s = OrderedSet()\n         self.assertEqual(len(s), 0)\n         s.add(1)\n",
  "django__django-14122": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 83089d9..0c03375 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -1,10 +1,11 @@\n+\n from datetime import datetime\n from operator import attrgetter\n \n from django.db.models import (\n     CharField, DateTimeField, F, Max, OuterRef, Subquery, Value,\n )\n-from django.db.models.functions import Upper\n+from django.db.models.functions import Upper, Random\n from django.test import TestCase\n \n from .models import Article, Author, ChildArticle, OrderedByFArticle, Reference\n@@ -483,4 +484,4 @@ class OrderingTests(TestCase):\n         )\n         ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n         articles = ChildArticle.objects.order_by('article_ptr')\n-        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n",
  "django__django-14140": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex c3db825..213dcdd 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -839,7 +839,13 @@ class BasicExpressionsTests(TestCase):\n                 self.assertCountEqual(Employee.objects.filter(conditions), [self.max])\n \n \n-class IterableLookupInnerExpressionsTests(TestCase):\n+    def test_deconstruct_single_non_subscriptable(self):\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        q = Q(Exists(is_poc))\n+        path, args, kwargs = q.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Q')\n+        self.assertEqual(args, (Exists(is_poc),))\n+        self.assertEqual(kwargs, {})\n     @classmethod\n     def setUpTestData(cls):\n         ceo = Employee.objects.create(firstname='Just', lastname='Doit', salary=30)\n",
  "django__django-14238": "",
  "django__django-14311": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex b7e6f92..ab944fb 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -166,7 +166,23 @@ class TestIterModulesAndFiles(SimpleTestCase):\n class TestChildArguments(SimpleTestCase):\n     @mock.patch.dict(sys.modules, {'__main__': django.__main__})\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', ['-m', 'foo.bar.baz', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_with_dotted_module_name(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'foo.bar.baz', 'runserver'],\n+        )\n     def test_run_as_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n@@ -175,7 +191,23 @@ class TestChildArguments(SimpleTestCase):\n \n     @mock.patch.dict(sys.modules, {'__main__': test_main})\n     @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', ['-m', 'foo.bar.baz', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_with_dotted_module_name(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'foo.bar.baz', 'runserver'],\n+        )\n     def test_run_as_non_django_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n@@ -190,7 +222,23 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-Werror', __file__, 'runserver']\n         )\n \n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', ['-m', 'foo.bar.baz', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_with_dotted_module_name(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'foo.bar.baz', 'runserver'],\n+        )\n     def test_exe_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             exe_path = Path(tmpdir) / 'django-admin.exe'\n@@ -201,7 +249,23 @@ class TestChildArguments(SimpleTestCase):\n                     [exe_path, 'runserver']\n                 )\n \n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', ['-m', 'foo.bar.baz', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_with_dotted_module_name(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'foo.bar.baz', 'runserver'],\n+        )\n     def test_entrypoint_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             script_path = Path(tmpdir) / 'django-admin-script.py'\n",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..2619669 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -233,6 +233,18 @@ TEST_DATA = [\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br ', ValidationError),\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br z', ValidationError),\n \n+    # Newlines and tabs are not accepted.\n+    (URLValidator(), 'http://www.djangoproject.com/\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://www.django\\rproject.com/', ValidationError),\n+    (URLValidator(), 'http://[::\\rffff:192.9.5.5]', ValidationError),\n+    (URLValidator(), 'http://\\twww.djangoproject.com/', ValidationError),\n+    (URLValidator(), 'http://\\t[::ffff:192.9.5.5]', ValidationError),\n+\n+    # Test valid URLs that should not raise a ValidationError.\n+    (URLValidator(), 'http://www.djangoproject.com/', None),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]', None),\n+\n     (BaseValidator(True), True, None),\n     (BaseValidator(True), False, ValidationError),\n \n",
  "django__django-14351": "diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\nindex 79963c3..a3e73a2 100644\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -1523,6 +1523,43 @@ class AggregationTests(TestCase):\n \n         class DistinctAggregate(Aggregate):\n             allow_distinct = True\n+\n+class QObjectSubqueryTests(TestCase):\n+    def setUp(self):\n+        # Setup initial data for testing\n+        self.agent1 = ManagementAgent.objects.create(name=\"Agent 1\")\n+        self.agent2 = ManagementAgent.objects.create(name=\"Agent 2\")\n+        self.property_group1 = PropertyGroup.objects.create(name=\"Group 1\")\n+        self.property_group2 = PropertyGroup.objects.create(name=\"Group 2\")\n+        self.agent1.property_groups.add(self.property_group1)\n+        self.agent2.property_groups.add(self.property_group2)\n+        self.agent2.property_groups.add(self.property_group1)\n+\n+    def test_q_object_or_subquery(self):\n+        property_groups = PropertyGroup.objects.filter(name=\"Group 1\")\n+        queryset = ManagementAgent.objects.annotate(Count(\"property_groups\"))\n+\n+        # This should not raise a ProgrammingError\n+        result = queryset.filter(\n+            Q(property_groups__in=property_groups) |\n+            Q(property_groups__count=0)\n+        ).distinct()\n+\n+        # Make assertions\n+        self.assertEqual(set(result), {self.agent1, self.agent2})\n+\n+    def test_q_object_id_in_subquery(self):\n+        property_groups = PropertyGroup.objects.filter(name=\"Group 1\").values_list(\"id\", flat=True)\n+        queryset = ManagementAgent.objects.annotate(Count(\"property_groups\"))\n+\n+        # This should not raise a ProgrammingError\n+        result = queryset.filter(\n+            Q(property_groups__id__in=property_groups) |\n+            Q(property_groups__count=0)\n+        ).distinct()\n+\n+        # Make assertions\n+        self.assertEqual(set(result), {self.agent1, self.agent2})\n         DistinctAggregate('foo', distinct=True)\n \n \n",
  "django__django-14373": "",
  "django__django-14376": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\nindex 643c2b6..3343f90 100644\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -37,6 +37,63 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             }),\n             (expected_args, expected_env),\n         )\n+    def test_options_deprecated_keys_supported(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        for keys in [('database', 'password'), ('db', 'passwd')]:\n+            with self.subTest(keys=keys):\n+                database, password = keys\n+                self.assertEqual(\n+                    self.settings_to_cmd_args_env({\n+                        'NAME': 'settingdbname',\n+                        'USER': 'settinguser',\n+                        'PASSWORD': 'settingpassword',\n+                        'HOST': 'settinghost',\n+                        'PORT': settings_port,\n+                        'OPTIONS': {\n+                            database: 'optiondbname',\n+                            'user': 'optionuser',\n+                            password: 'optionpassword',\n+                            'host': 'optionhost',\n+                            'port': options_port,\n+                        },\n+                    }),\n+                    (expected_args, expected_env),\n+                )\n+\n+    def test_options_non_deprecated_keys_preferred(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'db': 'deprecatedoptiondbname',\n+                    'password': 'optionpassword',\n+                    'passwd': 'deprecatedoptionpassword',\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n \n     def test_options_override_settings_proper_values(self):\n         settings_port = 444\n",
  "django__django-14434": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex 39c82bf..f799604 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -2198,6 +2198,44 @@ class SchemaTests(TransactionTestCase):\n             AuthorWithUniqueNameAndBirthday._meta.constraints = []\n             editor.remove_constraint(AuthorWithUniqueNameAndBirthday, constraint)\n \n+    def test_constraint_sql_references_table(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        constraint = UniqueConstraint(fields=['name'], name='name_uq')\n+        sql = constraint.create_sql(Author, editor)\n+        table = Author._meta.db_table\n+        # Verify that references_table works as expected\n+        self.assertIs(sql.references_table(table), True)\n+    \n+    def test_constraint_sql_references_column_with_table_instance(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        constraint = UniqueConstraint(fields=['name'], name='name_uq')\n+        sql = constraint.create_sql(Author, editor)\n+        table = Author._meta.db_table\n+        # Verify that references_column works with table instance\n+        self.assertIs(sql.references_column(table, 'name'), True)\n+\n+    def test_constraint_sql_references_column_with_wrong_name(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        constraint = UniqueConstraint(fields=['name'], name='name_uq')\n+        sql = constraint.create_sql(Author, editor)\n+        table = Author._meta.db_table\n+        # Verify that references_column returns False for wrong column name\n+        self.assertIs(sql.references_column(table, 'wrong_name'), False)\n+        constraints = self.get_constraints(AuthorWithUniqueNameAndBirthday._meta.db_table)\n+        self.assertIn(custom_constraint_name, constraints)\n+        other_constraints = [\n+            name for name, details in constraints.items()\n+            if details['columns'] == ['name', 'birthday'] and details['unique'] and name != custom_constraint_name\n+        ]\n+        self.assertEqual(len(other_constraints), 1)\n+        # Drop the unique constraint\n+        with connection.schema_editor() as editor:\n+            AuthorWithUniqueNameAndBirthday._meta.constraints = []\n+            editor.remove_constraint(AuthorWithUniqueNameAndBirthday, constraint)\n+\n     @skipUnlessDBFeature('supports_expression_indexes')\n     def test_func_unique_constraint(self):\n         with connection.schema_editor() as editor:\n",
  "django__django-14493": "diff --git a/tests/staticfiles_tests/storage.py b/tests/staticfiles_tests/storage.py\nindex dc966a1..9b78095 100644\n--- a/tests/staticfiles_tests/storage.py\n+++ b/tests/staticfiles_tests/storage.py\n@@ -94,6 +94,8 @@ class ExtraPatternsStorage(ManifestStaticFilesStorage):\n     )\n \n \n+from django.contrib.staticfiles.storage import ManifestStaticFilesStorage\n+\n class NoneHashStorage(ManifestStaticFilesStorage):\n     def file_hash(self, name, content=None):\n-        return None\n+        return None\n",
  "django__django-14500": "diff --git a/tests/migrations/test_executor.py b/tests/migrations/test_executor.py\nindex d884fe4..324a32d 100644\n--- a/tests/migrations/test_executor.py\n+++ b/tests/migrations/test_executor.py\n@@ -640,7 +640,60 @@ class ExecutorTests(MigrationTestBase):\n         \"\"\"\n         recorder = MigrationRecorder(connection)\n         # Record all replaced migrations as applied\n-        recorder.record_applied(\"migrations\", \"0001_initial\")\n+from django.test import TestCase, override_settings\n+from django.db import connection\n+from django.db.migrations.executor import MigrationExecutor\n+from django.db.migrations import recorder\n+from django.db.migrations.recorder import MigrationRecorder\n+\n+class TestSquashedMigration(TestCase):\n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_squashed'})\n+    def test_migrate_marks_replacement_unapplied(self):\n+        executor = MigrationExecutor(connection)\n+        executor.migrate([('migrations', '0001_squashed_0002')])\n+        try:\n+            self.assertIn(\n+                ('migrations', '0001_squashed_0002'),\n+                executor.recorder.applied_migrations(),\n+            )\n+        finally:\n+            executor.loader.build_graph()\n+            executor.migrate([('migrations', None)])\n+            self.assertNotIn(\n+                ('migrations', '0001_squashed_0002'),\n+                executor.recorder.applied_migrations(),\n+            )\n+    \n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_squashed'})\n+    def test_unapply_squashed_migration_with_replacements(self):\n+        # Apply squashed migration\n+        executor = MigrationExecutor(connection)\n+        executor.migrate([('migrations', '0001_squashed_0002')])\n+\n+        # Ensure squashed migration is recorded as applied\n+        self.assertIn(\n+            ('migrations', '0001_squashed_0002'),\n+            executor.recorder.applied_migrations(),\n+        )\n+\n+        # Unapply the squashed migration\n+        executor.migrate([('migrations', None)])\n+\n+        # Ensure it's marked as unapplied\n+        self.assertNotIn(\n+            ('migrations', '0001_squashed_0002'),\n+            executor.recorder.applied_migrations(),\n+        )\n+        \n+        # Also check that replaced migrations are marked as unapplied\n+        self.assertNotIn(\n+            ('migrations', '0001_initial'),\n+            executor.recorder.applied_migrations(),\n+        )\n+        self.assertNotIn(\n+            ('migrations', '0002_second'),\n+            executor.recorder.applied_migrations(),\n+        )\n         recorder.record_applied(\"migrations\", \"0002_second\")\n         executor = MigrationExecutor(connection)\n         executor.migrate([(\"migrations\", \"0001_squashed_0002\")])\n",
  "django__django-14539": "",
  "django__django-14559": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex b579834..6b36ed7 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -115,6 +115,33 @@ class BulkUpdateTests(TestCase):\n \n     pk_fields_error = 'bulk_update() cannot be used with primary key fields.'\n \n+    def test_bulk_update_returns_correct_row_count(self):\n+        # Test with empty list\n+        rows_updated = Note.objects.bulk_update([], ['note'])\n+        self.assertEqual(rows_updated, 0)\n+\n+        # Prepare test data\n+        Note.objects.bulk_create([\n+            Note(note=str(i), misc='misc')\n+            for i in range(2000)\n+        ])\n+        notes = list(Note.objects.all())\n+\n+        # Test with multiple updates\n+        for note in notes:\n+            note.note = 'updated'\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 2000)\n+\n+        # Test with duplicates\n+        note = Note.objects.create(note='duplicate-test', misc='test')\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'])\n+        self.assertEqual(rows_updated, 1)\n+\n+        # Test duplicates with batch_size\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'], batch_size=1)\n+        self.assertEqual(rows_updated, 2)\n+\n     def test_update_primary_key(self):\n         with self.assertRaisesMessage(ValueError, self.pk_fields_error):\n             Note.objects.bulk_update([], ['id'])\n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..392efc9 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -984,7 +984,27 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n \n-    def test_formset_iteration(self):\n+    def test_formset_non_form_error_class(self):\n+        \"\"\"\n+        Test that the 'nonform' CSS class is applied to non-form errors of the formset.\n+        \"\"\"\n+        data = {\n+            'choices-TOTAL_FORMS': '2',\n+            'choices-INITIAL_FORMS': '0',\n+            'choices-MIN_NUM_FORMS': '0',\n+            'choices-MAX_NUM_FORMS': '0',\n+            'choices-0-choice': 'Tea',\n+            'choices-0-votes': '1',\n+            'choices-1-choice': 'Tea',\n+            'choices-1-votes': '2',\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=1, validate_min=True)\n+        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>'\n+        )\n         \"\"\"Formset instances are iterable.\"\"\"\n         ChoiceFormset = formset_factory(Choice, extra=3)\n         formset = ChoiceFormset()\n",
  "django__django-14631": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex a48e4b6..7f92a5d 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -2104,6 +2104,27 @@ Password: <input type=\"password\" name=\"password\" required></li>\n             hi_without_microsec = DateTimeField(initial=delayed_now, widget=HiddenInputWithoutMicrosec)\n             ti_without_microsec = DateTimeField(initial=delayed_now, widget=TextInputWithoutMicrosec)\n \n+    def test_clean_fields_uses_bound_field_initial(self):\n+        now = datetime.datetime(2006, 10, 25, 14, 30, 45)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now, disabled=True)\n+\n+        form = DateTimeForm({})\n+        cleaned_value = form.cleaned_data['dt']\n+        bound_field_initial = form['dt'].initial\n+        self.assertEqual(cleaned_value, bound_field_initial)\n+\n+    def test_changed_data_uses_bound_field_logic(self):\n+        class DateTimeForm(forms.Form):\n+            dt1 = DateTimeField(initial=lambda: datetime.datetime(2006, 10, 25, 14, 30, 45), disabled=False)\n+            dt2 = DateTimeField(initial=lambda: datetime.datetime(2006, 10, 25, 14, 30, 45), disabled=False)\n+\n+        form = DateTimeForm({'dt1': '2006-10-25 14:30:46', 'dt2': '2006-10-25 14:30:45'})\n+        changed_fields = form.changed_data\n+        self.assertIn('dt1', changed_fields)\n+        self.assertNotIn('dt2', changed_fields)\n+\n         unbound = DateTimeForm()\n         self.assertEqual(unbound['auto_timestamp'].value(), now_no_ms)\n         self.assertEqual(unbound['auto_time_only'].value(), now_no_ms.time())\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..0c5be38 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -1,7 +1,8 @@\n from datetime import date, datetime, timedelta\n from operator import attrgetter\n \n-from django.db import IntegrityError\n+from django.core.checks import Error\n+from django.db import IntegrityError, models\n from django.test import TestCase\n \n from .models import (\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..2023af4 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,3 +1,4 @@\n+\n import json\n from contextlib import contextmanager\n \n@@ -8,7 +9,11 @@ from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n from django.core.exceptions import PermissionDenied\n from django.http import Http404\n+import datetime\n from django.test import RequestFactory, override_settings\n+from django.contrib.admin.views.autocomplete import AutocompleteJsonView\n+from django.http import JsonResponse\n+from .models import Question\n from django.urls import reverse, reverse_lazy\n \n from .admin import AnswerAdmin, QuestionAdmin\n",
  "django__django-14765": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 11009e5..703205e 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -24,7 +24,34 @@ class StateTests(SimpleTestCase):\n \n     def test_create(self):\n         \"\"\"\n-        Tests making a ProjectState from an Apps\n+from django.db.migrations.state import ProjectState\n+from django.test import TestCase\n+\n+\n+class ProjectStateTests(TestCase):\n+    def test_real_apps_non_set(self):\n+        with self.assertRaises(AssertionError):\n+            ProjectState(real_apps=['contenttypes'])\n+\n+    def test_real_apps_tuple(self):\n+        with self.assertRaises(AssertionError):\n+            ProjectState(real_apps=('contenttypes',))\n+\n+    def test_real_apps_dict(self):\n+        with self.assertRaises(AssertionError):\n+            ProjectState(real_apps={'contenttypes': True})\n+\n+    def test_real_apps_none(self):\n+        try:\n+            ProjectState(real_apps=None)\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError unexpectedly with None.\")\n+\n+    def test_real_apps_set(self):\n+        try:\n+            ProjectState(real_apps={'contenttypes'})\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError unexpectedly with a set.\")\n         \"\"\"\n \n         new_apps = Apps([\"migrations\"])\n",
  "django__django-14771": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 1875424..7d927ce 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -195,6 +195,14 @@ class TestChildArguments(SimpleTestCase):\n         )\n \n     @mock.patch('__main__.__spec__', None)\n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    def test_xoptions_passed(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver']\n+        )\n+\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n@@ -235,6 +243,14 @@ class TestChildArguments(SimpleTestCase):\n         with self.assertRaisesMessage(RuntimeError, msg):\n             autoreload.get_child_arguments()\n \n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    def test_xoptions_passed(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver']\n+        )\n+\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n     def test_module_no_spec(self):\n",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..3d9e36d 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -271,7 +271,28 @@ class MethodDecoratorTests(SimpleTestCase):\n                 self.assertEqual(Test.method.__doc__, 'A method')\n                 self.assertEqual(Test.method.__name__, 'method')\n \n-    def test_new_attribute(self):\n+    def test_wrapper_assignments(self):\n+        \"\"\"@method_decorator preserves wrapper assignments.\"\"\"\n+        func_name = None\n+        func_module = None\n+\n+        def decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_name, func_module\n+                func_name = getattr(func, '__name__', None)\n+                func_module = getattr(func, '__module__', None)\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(decorator)\n+            def method(self):\n+                return 'tests'\n+\n+        Test().method()\n+        self.assertEqual(func_name, 'method')\n+        self.assertIsNotNone(func_module)\n         \"\"\"A decorator that sets a new attribute on the method.\"\"\"\n         def decorate(func):\n             func.x = 1\n@@ -426,6 +447,8 @@ class MethodDecoratorTests(SimpleTestCase):\n                     return \"tests\"\n \n \n+from functools import wraps\n+\n class XFrameOptionsDecoratorsTests(TestCase):\n     \"\"\"\n     Tests for the X-Frame-Options decorators.\n",
  "django__django-14855": "",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..8bb77cc 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..f52a57f 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -793,6 +793,73 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n \n+    def test_rename_model_with_db_table_noop_foreign_key(self):\n+        app_label = 'test_rmwdbtn_fk'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        \n+        # Cloning original project state\n+        new_state = project_state.clone()\n+        \n+        # Attempt to rename model with db_table defined\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+        \n+        # Testing forwards operation\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        \n+        # Testing backwards operation\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+        \n+        # Confirming no changes to foreign key constraint\n+        Pony = project_state.apps.get_model(app_label, \"Pony\")\n+        self.assertTrue(Pony._meta.get_field('rider').related_model._meta.db_table == 'rider')\n+\n+    def test_rename_model_with_db_table_noop_m2m(self):\n+        app_label = 'test_rmwdbtn_m2m'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('riders', models.ManyToManyField('Rider')),\n+            ]),\n+        ])\n+        \n+        # Cloning original project state\n+        new_state = project_state.clone()\n+        \n+        # Attempt to rename model with db_table defined\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+        \n+        # Testing forwards operation\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        \n+        # Testing backwards operation\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n+        # Confirming the M2M table remains unchanged\n+        Pony = project_state.apps.get_model(app_label, \"Pony\")\n+        rider_m2m_table = Pony._meta.get_field('riders').remote_field.through._meta.db_table\n+        self.assertTrue(rider_m2m_table == 'rider_pony')  # assuming Django's default naming convention\n+\n     def test_rename_m2m_target_model(self):\n         app_label = \"test_rename_m2m_target_model\"\n         project_state = self.apply_operations(app_label, ProjectState(), operations=[\n",
  "django__django-15022": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex e1920cd..c46c0a9 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -144,7 +144,57 @@ class ChangeListTests(TestCase):\n         class GetListSelectRelatedAdmin(admin.ModelAdmin):\n             list_display = ('band', 'player')\n \n-            def get_list_select_related(self, request):\n+import unittest\n+from django.contrib.admin.views.main import SEARCH_VAR\n+from django.test.utils import CaptureQueriesContext\n+from django.db import connection\n+from .admin import site as custom_site\n+from .models import Client, ClientOffice\n+\n+class ClientAdminTest(unittest.TestCase):\n+    def setUp(self):\n+        self.factory = RequestFactory()\n+        self.superuser = User.objects.create_superuser('admin', 'admin@example.com', 'password')\n+    \n+    def test_large_search_query(self):\n+        \"\"\"\n+        Test to ensure that a large number of search terms does not cause unnecessary joins.\n+        \"\"\"\n+        client = Client.objects.create(name='Client A', name2='Alias A', contact_person='Person A')\n+        ClientOffice.objects.create(client=client, name='Office A')\n+        \n+        m = ClientAdmin(Client, custom_site)\n+        search_query = 'office ' * 80  # Large search query with repeated terms\n+        request = self.factory.get('/client/', data={SEARCH_VAR: search_query})\n+        request.user = self.superuser\n+        \n+        cl = m.get_changelist_instance(request)\n+        with CaptureQueriesContext(connection) as context:\n+            object_count = cl.queryset.count()\n+        \n+        self.assertEqual(object_count, 1)\n+        self.assertEqual(context.captured_queries[0]['sql'].count('JOIN'), 1)\n+    \n+    def test_search_on_related_field(self):\n+        \"\"\"\n+        Test that searching on related fields only performs necessary joins.\n+        \"\"\"\n+        client = Client.objects.create(name='Client B', name2='Alias B', contact_person='Person B')\n+        ClientOffice.objects.create(client=client, name='Office B1')\n+        ClientOffice.objects.create(client=client, name='Office B2')\n+        \n+        m = ClientAdmin(Client, custom_site)\n+        request = self.factory.get('/client/', data={SEARCH_VAR: 'Office B'})\n+        request.user = self.superuser\n+        \n+        cl = m.get_changelist_instance(request)\n+        with CaptureQueriesContext(connection) as context:\n+            object_count = cl.queryset.count()\n+        \n+        self.assertGreaterEqual(object_count, 1)\n+        self.assertEqual(context.captured_queries[0]['sql'].count('JOIN'), 1)\n+    \n+        def get_list_select_related(self, request):\n                 return ('band', 'player')\n \n         ia = GetListSelectRelatedAdmin(Invitation, custom_site)\n",
  "django__django-15037": "",
  "django__django-15103": "",
  "django__django-15104": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 04452fa..7263559 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2827,6 +2827,28 @@ class AutodetectorTests(TestCase):\n             ('0002_custom_name_20380101_1112_squashed_0003_model', 3),\n             ('2_squashed_4', 4),\n         ]\n+\n+    def test_add_custom_fk_with_hardcoded_to(self):\n+        class HardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.Author'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']\n+                return name, path, args, kwargs\n+        \n+        book_hardcoded_fk_to = ModelState('testapp', 'Book', [\n+            ('author', HardcodedForeignKey(on_delete=models.CASCADE)),\n+        ])\n+        changes = self.get_changes(\n+            [self.author_empty],\n+            [self.author_empty, book_hardcoded_fk_to],\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='Book')\n         for migration_name, expected_number in tests:\n             with self.subTest(migration_name=migration_name):\n                 self.assertEqual(\n@@ -2835,6 +2857,9 @@ class AutodetectorTests(TestCase):\n                 )\n \n \n+from django.db import models\n+from django.db.migrations.state import ModelState\n+\n class MigrationSuggestNameTests(SimpleTestCase):\n     def test_no_operations(self):\n         class Migration(migrations.Migration):\n",
  "django__django-15127": "diff --git a/tests/messages_tests/base.py b/tests/messages_tests/base.py\nindex 85a7769..41cefce 100644\n--- a/tests/messages_tests/base.py\n+++ b/tests/messages_tests/base.py\n@@ -1,3 +1,4 @@\n+\n from django.contrib.messages import constants, get_level, set_level, utils\n from django.contrib.messages.api import MessageFailure\n from django.contrib.messages.constants import DEFAULT_LEVELS\n@@ -368,6 +369,30 @@ class BaseTests:\n         tags = [msg.level_tag for msg in storage]\n         self.assertEqual(tags, ['info', '', 'debug', 'warning', 'error', 'success'])\n \n+    @override_settings_tags(MESSAGE_TAGS={\n+        constants.INFO: 'information',\n+        constants.DEBUG: 'debugging',\n+        constants.WARNING: 'warn',\n+        constants.ERROR: 'error',\n+        29: 'custom',\n+    })\n+    def test_override_settings_applies_correctly(self):\n+        storage = self.get_storage()\n+        storage.level = 0\n+        add_level_messages(storage)\n+        tags = [msg.level_tag for msg in storage]\n+        self.assertEqual(tags, ['information', 'debugging', 'warn', 'error', 'success', 'custom'])\n+\n+    def test_reset_to_default_tags(self):\n+        # Check if LEVEL_TAGS resets to default after overriding\n+        override = override_settings_tags(MESSAGE_TAGS={\n+            constants.INFO: 'temp_info',\n+        })\n+        override.enable()\n+        self.assertEqual(base.LEVEL_TAGS[constants.INFO], 'temp_info')\n+        override.disable()\n+        self.assertEqual(base.LEVEL_TAGS[constants.INFO], 'info')\n+\n     @override_settings_tags(MESSAGE_TAGS={\n         constants.INFO: 'info',\n         constants.DEBUG: '',\n",
  "django__django-15128": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex adde8a6..743877b 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -30,7 +30,7 @@ from .models import (\n     SharedConnection, SimpleCategory, SingleObject, SpecialCategory, Staff,\n     StaffUser, Student, Tag, Task, Teacher, Ticket21203Child,\n     Ticket21203Parent, Ticket23605A, Ticket23605B, Ticket23605C, TvChef, Valid,\n-    X,\n+    X, BaseUser, Task,\n )\n \n \n@@ -2095,13 +2095,59 @@ class QuerySetBitwiseOperationTests(TestCase):\n         cls.room_3 = Classroom.objects.create(school=cls.school, has_blackboard=True, name='Room 3')\n         cls.room_4 = Classroom.objects.create(school=cls.school, has_blackboard=False, name='Room 4')\n \n-    @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n+    def test_conflicting_aliases_during_combine(self):\n+        # Create initial data for the test\n+        tag = Tag.objects.create()\n+        annotation_1 = Annotation.objects.create(tag=tag)\n+        annotation_2 = Annotation.objects.create(tag=tag)\n+        note = annotation_1.notes.create(tag=tag)\n+        base_user_1 = BaseUser.objects.create(annotation=annotation_1)\n+        base_user_2 = BaseUser.objects.create(annotation=annotation_2)\n+        Task.objects.create(\n+            owner=base_user_2, creator=base_user_2, note=note,\n+        )\n+        \n+        # Construct the querysets that could previously trigger AssertionError\n+        qs1 = annotation_1.baseuser_set.all()\n+        qs2 = BaseUser.objects.filter(\n+            Q(owner__note__in=annotation_1.notes.all()) |\n+            Q(creator__note__in=annotation_1.notes.all())\n+        )\n+        \n+        # Test that the combined querysets do not raise errors and return the correct result\n+        self.assertCountEqual(qs1, [base_user_1])\n+        self.assertCountEqual(qs2, [base_user_2])\n+        self.assertCountEqual(qs2 | qs1, qs1 | qs2)\n+        self.assertCountEqual(qs2 | qs1, [base_user_1, base_user_2])\n     def test_or_with_rhs_slice(self):\n         qs1 = Classroom.objects.filter(has_blackboard=True)\n         qs2 = Classroom.objects.filter(has_blackboard=False)[:1]\n         self.assertCountEqual(qs1 | qs2, [self.room_1, self.room_2, self.room_3])\n \n-    @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n+    def test_conflicting_aliases_during_combine(self):\n+        # Create initial data for the test\n+        tag = Tag.objects.create()\n+        annotation_1 = Annotation.objects.create(tag=tag)\n+        annotation_2 = Annotation.objects.create(tag=tag)\n+        note = annotation_1.notes.create(tag=tag)\n+        base_user_1 = BaseUser.objects.create(annotation=annotation_1)\n+        base_user_2 = BaseUser.objects.create(annotation=annotation_2)\n+        Task.objects.create(\n+            owner=base_user_2, creator=base_user_2, note=note,\n+        )\n+        \n+        # Construct the querysets that could previously trigger AssertionError\n+        qs1 = annotation_1.baseuser_set.all()\n+        qs2 = BaseUser.objects.filter(\n+            Q(owner__note__in=annotation_1.notes.all()) |\n+            Q(creator__note__in=annotation_1.notes.all())\n+        )\n+        \n+        # Test that the combined querysets do not raise errors and return the correct result\n+        self.assertCountEqual(qs1, [base_user_1])\n+        self.assertCountEqual(qs2, [base_user_2])\n+        self.assertCountEqual(qs2 | qs1, qs1 | qs2)\n+        self.assertCountEqual(qs2 | qs1, [base_user_1, base_user_2])\n     def test_or_with_lhs_slice(self):\n         qs1 = Classroom.objects.filter(has_blackboard=True)[:1]\n         qs2 = Classroom.objects.filter(has_blackboard=False)\n",
  "django__django-15161": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 5fdccc5..759eb37 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1775,7 +1775,12 @@ class ValueTests(TestCase):\n         self.assertEqual(len(kwargs), 1)\n         self.assertEqual(kwargs['output_field'].deconstruct(), CharField().deconstruct())\n \n-    def test_repr(self):\n+    def test_deconstruct_f_expression(self):\n+        f_expression = F('field_name')\n+        path, args, kwargs = f_expression.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, ('field_name',))\n+        self.assertEqual(kwargs, {})\n         tests = [\n             (None, 'Value(None)'),\n             ('str', \"Value('str')\"),\n",
  "django__django-15268": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a6c0858..0ba7d93 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1627,7 +1627,26 @@ class AutodetectorTests(TestCase):\n             ['CreateModel', 'AddField', 'AlterUniqueTogether', 'AlterIndexTogether']\n         )\n \n-    def test_remove_field_and_foo_together(self):\n+    def test_optimize_alter_foo_together_operations(self):\n+        \"\"\"\n+        Test that multiple AlterFooTogether operations are optimized into one.\n+        \"\"\"\n+        changes = self.get_changes(\n+            [self.author_empty, self.book_foo_together_3],\n+            [self.author_empty, self.book_foo_together_3_optimized]\n+        )\n+        # Right number/type of migrations?\n+        self.assertNumberMigrations(changes, \"otherapp\", 1)\n+        self.assertOperationTypes(changes, \"otherapp\", 0, [\n+            'AlterUniqueTogether',\n+            'AlterIndexTogether',\n+        ])\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 0, name='book', unique_together={('col',)},\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 1, name='book', index_together={('col',)},\n+        )\n         \"\"\"\n         Removed fields will be removed after updating index/unique_together.\n         \"\"\"\n",
  "django__django-15277": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 11f86ed..2d98f85 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1847,7 +1847,29 @@ class ValueTests(TestCase):\n                 expr = Value(value)\n                 self.assertIsInstance(expr.output_field, output_field_type)\n \n-    def test_resolve_output_field_failure(self):\n+    def test_output_field_does_not_create_broken_validators(self):\n+        \"\"\"\n+        The output field for a given Value doesn't get cleaned & validated,\n+        however validators may still be instantiated for a given field type\n+        and this demonstrates that they don't throw an exception.\n+        \"\"\"\n+        value_types = [\n+            'str',\n+            True,\n+            42,\n+            3.14,\n+            datetime.date(2019, 5, 15),\n+            datetime.datetime(2019, 5, 15, 12, 0),\n+            datetime.time(3, 16),\n+            datetime.timedelta(1),\n+            Decimal('3.14'),\n+            b'',\n+            uuid.uuid4(),\n+        ]\n+        for value in value_types:\n+            with self.subTest(type=type(value)):\n+                field = Value(value)._resolve_output_field()\n+                field.clean(value, model_instance=None)\n         msg = 'Cannot resolve expression type, unknown output_field'\n         with self.assertRaisesMessage(FieldError, msg):\n             Value(object()).output_field\n",
  "django__django-15278": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex dd02aee..3581d9c 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -618,7 +618,62 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor:\n             editor.add_field(Author, new_field)\n         # Ensure the field is there\n+from django.db import models\n+from django.db.models import CASCADE, OneToOneField\n+from django.db import connection\n+from django.test import TestCase\n+\n+class SchemaTests(TestCase):\n+    def column_classes(self, model):\n+        with connection.cursor() as cursor:\n+            cursor.execute(f\"PRAGMA table_info({model._meta.db_table})\")\n+            return {row[1]: row for row in cursor.fetchall()}\n+\n+    def test_add_field_o2o_nullable(self):\n+        # Create initial models\n+        class Note(models.Model):\n+            pass\n+\n+        class Author(models.Model):\n+            pass\n+\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+\n+        # Add nullable OneToOneField\n+        new_field = OneToOneField(Note, CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n+\n+        # Verify the field is added correctly\n         columns = self.column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        self.assertTrue(columns['note_id'][5])  # Ensure the column is NULLABLE\n+\n+    def test_add_nullable_o2o_field_existing_table(self):\n+        # Create initial table with existing models\n+        class Book(models.Model):\n+            title = models.CharField(max_length=100)\n+\n+        class Publisher(models.Model):\n+            pass\n+\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Book)\n+            editor.create_model(Publisher)\n+\n+        # Add nullable OneToOneField to an existing table\n+        new_field = OneToOneField(Publisher, CASCADE, null=True)\n+        new_field.set_attributes_from_name('publisher')\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Book, new_field)\n+\n+        # Verify the field is added correctly\n+        columns = self.column_classes(Book)\n+        self.assertIn('publisher_id', columns)\n+        self.assertTrue(columns['publisher_id'][5])  # Ensure the column is NULLABLE\n         field_type, field_info = columns['thing']\n         self.assertEqual(field_type, connection.features.introspected_field_types['IntegerField'])\n         # Make sure the values were transformed correctly\n@@ -636,7 +691,62 @@ class SchemaTests(TransactionTestCase):\n         new_field.set_attributes_from_name(\"bits\")\n         with connection.schema_editor() as editor:\n             editor.add_field(Author, new_field)\n+from django.db import models\n+from django.db.models import CASCADE, OneToOneField\n+from django.db import connection\n+from django.test import TestCase\n+\n+class SchemaTests(TestCase):\n+    def column_classes(self, model):\n+        with connection.cursor() as cursor:\n+            cursor.execute(f\"PRAGMA table_info({model._meta.db_table})\")\n+            return {row[1]: row for row in cursor.fetchall()}\n+\n+    def test_add_field_o2o_nullable(self):\n+        # Create initial models\n+        class Note(models.Model):\n+            pass\n+\n+        class Author(models.Model):\n+            pass\n+\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+\n+        # Add nullable OneToOneField\n+        new_field = OneToOneField(Note, CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n+\n+        # Verify the field is added correctly\n         columns = self.column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        self.assertTrue(columns['note_id'][5])  # Ensure the column is NULLABLE\n+\n+    def test_add_nullable_o2o_field_existing_table(self):\n+        # Create initial table with existing models\n+        class Book(models.Model):\n+            title = models.CharField(max_length=100)\n+\n+        class Publisher(models.Model):\n+            pass\n+\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Book)\n+            editor.create_model(Publisher)\n+\n+        # Add nullable OneToOneField to an existing table\n+        new_field = OneToOneField(Publisher, CASCADE, null=True)\n+        new_field.set_attributes_from_name('publisher')\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Book, new_field)\n+\n+        # Verify the field is added correctly\n+        columns = self.column_classes(Book)\n+        self.assertIn('publisher_id', columns)\n+        self.assertTrue(columns['publisher_id'][5])  # Ensure the column is NULLABLE\n         # MySQL annoyingly uses the same backend, so it'll come back as one of\n         # these two types.\n         self.assertIn(columns['bits'][0], (\"BinaryField\", \"TextField\"))\n",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..9b9da3f 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -80,7 +80,42 @@ class BasicFieldTests(SimpleTestCase):\n         f = Foo._meta.get_field('a')\n         self.assertEqual(str(f), 'model_fields.Foo.a')\n \n-    def test_field_ordering(self):\n+    def test_hash_immutability(self):\n+        # Original test patched to check hash immutability\n+        field = models.IntegerField()\n+        field_hash = hash(field)\n+\n+        class MyModel(models.Model):\n+            rank = field\n+\n+        self.assertEqual(field_hash, hash(field))\n+\n+    def test_hash_with_different_classes(self):\n+        # Ensure that hash values stay the same for fields across different model classes\n+        field = models.CharField(max_length=100)\n+        initial_hash = hash(field)\n+\n+        class ModelOne(models.Model):\n+            name = field\n+\n+        # Hash should remain unchanged\n+        self.assertEqual(initial_hash, hash(field))\n+\n+        # Reuse the same field in another model\n+        class ModelTwo(models.Model):\n+            alias = field\n+\n+        # Hash should still remain unchanged\n+        self.assertEqual(initial_hash, hash(field))\n+\n+    def test_hash_with_field_deepcopy(self):\n+        # Ensure that deepcopy of a field retains the original hash\n+        import copy\n+        field = models.CharField(max_length=100)\n+        initial_hash = hash(field)\n+\n+        field_copy = copy.deepcopy(field)\n+        self.assertEqual(initial_hash, hash(field_copy))\n         \"\"\"Fields are ordered based on their creation.\"\"\"\n         f1 = models.Field()\n         f2 = models.Field(auto_created=True)\n",
  "django__django-15368": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex 447c150..9325b57 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -204,7 +204,21 @@ class BulkUpdateTests(TestCase):\n             [cat.special_name for cat in special_categories]\n         )\n \n-    def test_field_references(self):\n+    def test_f_expression_with_bulk_update(self):\n+        # Create instances of SelfRef with different 'name' values\n+        instances = [\n+            SelfRef.objects.create(name=f'name_{i}', c8='')\n+            for i in range(10)\n+        ]\n+        # Assign F('name') to c8 for each instance\n+        for instance in instances:\n+            instance.c8 = F('name')\n+        # Perform bulk update\n+        SelfRef.objects.bulk_update(instances, ['c8'])\n+        # Refresh from DB and assert that c8 matches name\n+        for instance in instances:\n+            instance.refresh_from_db()\n+            self.assertEqual(instance.c8, instance.name)\n         numbers = [Number.objects.create(num=0) for _ in range(10)]\n         for number in numbers:\n             number.num = F('num') + 1\n",
  "django__django-15380": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex e2de333..a66e595 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1049,6 +1049,46 @@ class AutodetectorTests(TestCase):\n             new_name='renamed_foo',\n         )\n \n+    def test_rename_field_with_renamed_model(self):\n+        changes = self.get_changes(\n+            [self.author_name],\n+            [\n+                ModelState('testapp', 'RenamedAuthor', [\n+                    ('id', models.AutoField(primary_key=True)),\n+                    ('renamed_name', models.CharField(max_length=200)),\n+                ]),\n+            ],\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel', 'RenameField'])\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 0, old_name='Author', new_name='RenamedAuthor',\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 1, old_name='name', new_name='renamed_name',\n+        )\n+\n+    def test_rename_field_and_model_simultaneously(self):\n+        \"\"\"Test renaming a model and a field at the same time.\"\"\"\n+        changes = self.get_changes(\n+            [ModelState('testapp', 'OldModel', [('old_field', models.CharField(max_length=100))])],\n+            [ModelState('testapp', 'NewModel', [('new_field', models.CharField(max_length=100))])],\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        # Check that one migration is created\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        # Check that both RenameModel and RenameField operations are present\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel', 'RenameField'])\n+        # Verify the RenameModel operation\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 0, old_name='OldModel', new_name='NewModel',\n+        )\n+        # Verify the RenameField operation\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 1, old_name='old_field', new_name='new_field',\n+        )\n+\n     def test_rename_model(self):\n         \"\"\"Tests autodetection of renamed models.\"\"\"\n         changes = self.get_changes(\n",
  "django__django-15382": "",
  "django__django-15467": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex f5af59b..6d33ca6 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -132,7 +132,48 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n             raw_id_fields=[\"main_band\"],\n         )\n \n-    def test_radio_fields_ForeignKey(self):\n+    from django.contrib import admin\n+    from django.test import TestCase\n+    from .models import Inventory  # Assuming Inventory is defined in models\n+    from django.db.models import ForeignKey\n+\n+    class ForeignKeyEmptyLabelTest(TestCase):\n+        def test_radio_fields_foreignkey_formfield_overrides_empty_label(self):\n+            class MyModelAdmin(admin.ModelAdmin):\n+                radio_fields = {\"parent\": admin.VERTICAL}\n+                formfield_overrides = {\n+                    ForeignKey: {\"empty_label\": \"Custom empty label\"},\n+                }\n+\n+            ma = MyModelAdmin(Inventory, admin.site)\n+            ff = ma.formfield_for_dbfield(Inventory._meta.get_field(\"parent\"), request=None)\n+            self.assertEqual(ff.empty_label, \"Custom empty label\")\n+\n+        def test_radio_fields_foreignkey_empty_label_with_blank(self):\n+            class MyModelAdmin(admin.ModelAdmin):\n+                radio_fields = {\"parent\": admin.VERTICAL}\n+\n+                def formfield_for_foreignkey(self, db_field, *args, **kwargs):\n+                    if db_field.name == \"parent\":\n+                        kwargs[\"empty_label\"] = \"Custom empty label when blank\"\n+                    return super().formfield_for_foreignkey(db_field, *args, **kwargs)\n+\n+            ma = MyModelAdmin(Inventory, admin.site)\n+            ff = ma.formfield_for_dbfield(Inventory._meta.get_field(\"parent\"), request=None)\n+            self.assertEqual(ff.empty_label, \"Custom empty label when blank\")\n+\n+        def test_radio_fields_foreignkey_empty_label_without_blank(self):\n+            class MyModelAdmin(admin.ModelAdmin):\n+                radio_fields = {\"parent\": admin.VERTICAL}\n+\n+                def formfield_for_foreignkey(self, db_field, *args, **kwargs):\n+                    if db_field.name == \"parent\":\n+                        kwargs[\"empty_label\"] = \"Custom empty label\"\n+                    return super().formfield_for_foreignkey(db_field, *args, **kwargs)\n+\n+            ma = MyModelAdmin(Inventory, admin.site)\n+            ff = ma.formfield_for_dbfield(Inventory._meta.get_field(\"parent\"), request=None)\n+            self.assertEqual(ff.empty_label, \"Custom empty label\")\n         ff = self.assertFormfield(\n             Event,\n             \"main_band\",\n",
  "django__django-15499": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 5df1b06..cd41c4b 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -129,6 +129,68 @@ class OptimizerTests(SimpleTestCase):\n             ],\n         )\n \n+    def test_create_model_with_initial_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    managers=[\n+                        (\"default\", models.Manager()),\n+                    ],\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Bar\",\n+                    managers=[\n+                        (\"special\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    managers=[\n+                        (\"special\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n+    def test_create_model_multiple_alter_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\",\n+                    fields=[],\n+                    managers=[\n+                        (\"default\", models.Manager()),\n+                    ],\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Baz\",\n+                    managers=[\n+                        (\"custom1\", models.Manager()),\n+                    ],\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Baz\",\n+                    managers=[\n+                        (\"custom2\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\",\n+                    fields=[],\n+                    managers=[\n+                        (\"custom2\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n     def test_create_model_and_remove_model_options(self):\n         self.assertOptimizesTo(\n             [\n@@ -141,6 +203,68 @@ class OptimizerTests(SimpleTestCase):\n             ],\n             [migrations.CreateModel(\"MyModel\", fields=[])],\n         )\n+\n+    def test_create_model_with_initial_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    managers=[\n+                        (\"default\", models.Manager()),\n+                    ],\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Bar\",\n+                    managers=[\n+                        (\"special\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    managers=[\n+                        (\"special\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n+    def test_create_model_multiple_alter_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\",\n+                    fields=[],\n+                    managers=[\n+                        (\"default\", models.Manager()),\n+                    ],\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Baz\",\n+                    managers=[\n+                        (\"custom1\", models.Manager()),\n+                    ],\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Baz\",\n+                    managers=[\n+                        (\"custom2\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\",\n+                    fields=[],\n+                    managers=[\n+                        (\"custom2\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n         self.assertOptimizesTo(\n             [\n                 migrations.CreateModel(\n",
  "django__django-15525": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 3640e99..c46486d 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -791,6 +791,63 @@ class NaturalKeyFixtureTests(TestCase):\n         )\n \n \n+import os\n+from django.core import management\n+from django.test import TestCase\n+from django.conf import settings\n+from fixtures_regress.models import NaturalKeyWithFKDependency\n+\n+class NaturalKeyFixtureOnOtherDatabaseTests(TestCase):\n+    databases = {\"default\", \"other\"}\n+    \n+    def test_load_data_with_natural_keys_on_other_db(self):\n+        \"\"\"\n+        Test loading fixtures with natural keys that contain foreign key dependencies on a non-default database.\n+        \"\"\"\n+        # Ensure the 'other' database is in the settings and configured.\n+        self.assertIn('other', settings.DATABASES)\n+        \n+        # Create a fixture file with natural keys\n+        fixture_data = [\n+            {\n+                \"model\": \"fixtures_regress.person\",\n+                \"fields\": {\n+                    \"name\": \"J.R.R. Tolkien\"\n+                }\n+            },\n+            {\n+                \"model\": \"fixtures_regress.naturalkeywithfkdependency\",\n+                \"fields\": {\n+                    \"name\": \"The Lord of the Rings\",\n+                    \"author\": [\"J.R.R. Tolkien\"]\n+                }\n+            }\n+        ]\n+        \n+        fixture_file_path = os.path.join(settings.BASE_DIR, 'temp_nk_fixture.json')\n+        \n+        # Write fixture data to a temporary file\n+        with open(fixture_file_path, 'w') as fixture_file:\n+            json.dump(fixture_data, fixture_file)\n+        \n+        try:\n+            # Load the data into the 'other' database\n+            management.call_command(\n+                'loaddata', \n+                fixture_file_path, \n+                database='other', \n+                verbosity=0\n+            )\n+            \n+            # Retrieve and test the object from the 'other' database\n+            obj = NaturalKeyWithFKDependency.objects.using('other').get()\n+            self.assertEqual(obj.name, \"The Lord of the Rings\")\n+            self.assertEqual(obj.author.name, \"J.R.R. Tolkien\")\n+        \n+        finally:\n+            # Clean up the temporary fixture file\n+            os.remove(fixture_file_path)\n+\n class M2MNaturalKeyFixtureTests(TestCase):\n     \"\"\"Tests for ticket #14426.\"\"\"\n \n",
  "django__django-15561": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex b8137da..e4bcc05 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -3961,7 +3961,31 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             editor.alter_field(Book, new_field, old_field, strict=True)\n \n-    def test_add_textfield_unhashable_default(self):\n+    def test_alter_field_choices_noop_additional(self):\n+        \"\"\"Test no-op alter field behavior when modifying choices on SQLite.\"\"\"\n+        if connection.vendor != \"sqlite\":\n+            self.skipTest(\"SQLite specific test\")\n+\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        \n+        # Initial field without choices\n+        old_field = Author._meta.get_field(\"name\")\n+        \n+        # New field with a different set of choices\n+        new_field = CharField(\n+            choices=((\"Alice\", \"Alice\"), (\"Bob\", \"Bob\")),\n+            max_length=255,\n+        )\n+        new_field.set_attributes_from_name(\"name\")\n+        \n+        # Altering the field should not generate any SQL\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+\n+        # Reverting the field should also not generate any SQL\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, new_field, old_field, strict=True)\n         # Create the table\n         with connection.schema_editor() as editor:\n             editor.create_model(Author)\n",
  "django__django-15569": "diff --git a/tests/custom_lookups/tests.py b/tests/custom_lookups/tests.py\nindex 74c331a..4a74306 100644\n--- a/tests/custom_lookups/tests.py\n+++ b/tests/custom_lookups/tests.py\n@@ -315,6 +315,14 @@ class LookupTests(TestCase):\n     def test_lookups_caching(self):\n         field = Article._meta.get_field(\"author\")\n \n+        # Unregistration should clear the cache\n+        with register_lookup(models.ForeignObject, Exactly):\n+            self.assertIn(\"exactly\", field.get_lookups())\n+        models.ForeignObject._unregister_lookup(Exactly)\n+        field.get_lookups.cache_clear()\n+        self.assertNotIn(\"exactly\", field.get_lookups())\n+        field = Article._meta.get_field(\"author\")\n+\n         # clear and re-cache\n         field.get_lookups.cache_clear()\n         self.assertNotIn(\"exactly\", field.get_lookups())\n",
  "django__django-15572": "",
  "django__django-15731": "diff --git a/tests/basic/tests.py b/tests/basic/tests.py\nindex 902f114..8ccc1b8 100644\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -1,9 +1,11 @@\n+\n import threading\n from datetime import datetime, timedelta\n from unittest import mock\n \n from django.core.exceptions import MultipleObjectsReturned, ObjectDoesNotExist\n from django.db import DEFAULT_DB_ALIAS, DatabaseError, connections, models\n+import inspect\n from django.db.models.manager import BaseManager\n from django.db.models.query import MAX_GET_RESULTS, EmptyQuerySet\n from django.test import (\n@@ -724,7 +726,33 @@ class ManagerTest(SimpleTestCase):\n \n     def test_manager_methods(self):\n         \"\"\"\n-        This test ensures that the correct set of methods from `QuerySet`\n+    def test_manager_method_signature_with_wraps(self):\n+        # Ensure that the signature of the manager method matches the expected signature\n+        expected_signature = \"(objs, batch_size=None, ignore_conflicts=False, update_conflicts=False, update_fields=None, unique_fields=None)\"\n+        \n+        # Using inspect.signature to get the actual signature of the method\n+        actual_signature = str(inspect.signature(Article.objects.bulk_create))\n+        \n+        self.assertEqual(actual_signature, expected_signature, \"The signature of the manager method does not match the expected signature.\")\n+\n+class SelectOnSaveTests(TestCase):\n+    def test_select_on_save(self):\n+        a1 = Article.objects.create(pub_date=datetime.now())\n+        with self.assertNumQueries(1):\n+            a1.save()\n+        asos = ArticleSelectOnSave.objects.create(pub_date=datetime.now())\n+        with self.assertNumQueries(2):\n+            asos.save()\n+        with self.assertNumQueries(1):\n+            asos.save(force_update=True)\n+        Article.objects.all().delete()\n+        with self.assertRaisesMessage(\n+            DatabaseError, \"Forced update did not affect any rows.\"\n+        ):\n+            with self.assertNumQueries(1):\n+                asos.save(force_update=True)\n+\n+# Existing test\n         are copied onto `Manager`.\n \n         It's particularly useful to prevent accidentally leaking new methods\n",
  "django__django-15741": "diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex c6dbc53..3b204d6 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -1,8 +1,10 @@\n+\n from datetime import datetime, time\n \n from django.template.defaultfilters import date\n from django.test import SimpleTestCase\n from django.utils import timezone, translation\n+from django.utils.translation import gettext_lazy\n \n from ..utils import setup\n from .timezone_utils import TimezoneTestCase\n@@ -77,6 +79,17 @@ class FunctionTests(SimpleTestCase):\n     def test_date(self):\n         self.assertEqual(date(datetime(2005, 12, 29), \"d F Y\"), \"29 December 2005\")\n \n+    def test_lazy_string_format(self):\n+        # Verify that get_format can handle lazy strings\n+        lazy_format = gettext_lazy('DATE_FORMAT')\n+        self.assertEqual(get_format(lazy_format), \"N j, Y\")\n+\n+    @setup({\"datelazylong\": '{{ t|date:_(\"Y-m-d\") }}'})\n+    def test_date_lazy_long_format(self):\n+        # Verify that the date filter can handle lazy strings with a long format\n+        output = self.engine.render_to_string(\"datelazylong\", {\"t\": datetime(2023, 10, 25)})\n+        self.assertEqual(output, \"2023-10-25\")\n+\n     def test_no_args(self):\n         self.assertEqual(date(\"\"), \"\")\n         self.assertEqual(date(None), \"\")\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..8b8f97a 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -382,7 +382,19 @@ class ProxyModelTests(TestCase):\n             repr(resp), \"<ProxyImprovement: ProxyImprovement:improve that>\"\n         )\n \n-        # Select related + filter on a related proxy of proxy field\n+    def test_select_related_only_with_proxy(self):\n+        \"\"\"Test for select_related followed by only on proxy models.\"\"\"\n+        # Set up data\n+        custom_model = ProxyCustomModel.objects.create(name=\"Test Proxy\")\n+        another_model = AnotherModel.objects.create(custom=custom_model)\n+        \n+        # Attempt to use select_related and only\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        \n+        # Verify that it does not raise an error and behaves correctly\n+        result = qs.first()\n+        self.assertIsNotNone(result)\n+        self.assertEqual(result.custom.name, \"Test Proxy\")\n         resp = ProxyImprovement.objects.select_related().get(\n             associated_bug__summary__icontains=\"fix\"\n         )\n@@ -399,6 +411,10 @@ class ProxyModelTests(TestCase):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n \n+from django.test import TestCase\n+from django.core.management import call_command\n+from .models import ProxyCustomModel, AnotherModel\n+\n @override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n class ProxyModelAdminTests(TestCase):\n     @classmethod\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..7a0146e 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -151,12 +151,26 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ),\n         )\n \n+    def test_dbshell_parameters_order(self):\n+        # Test that additional parameters are placed before the database name.\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n+        )\n+\n     def test_parameters(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n+    def test_dbshell_parameters_order(self):\n+        # Test that additional parameters are placed before the database name.\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n+        )\n+\n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n",
  "django__django-15863": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 08f08e1..be3637a 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -31,6 +31,53 @@ class FloatformatTests(SimpleTestCase):\n         self.assertEqual(output, \"1.4 1.4\")\n \n \n+from decimal import Decimal\n+from django.test import SimpleTestCase\n+from django.utils.translation import override as translation_override\n+from django.utils.safestring import mark_safe\n+from django.utils.formats import floatformat\n+\n+\n+class FloatFormatPrecisionTests(SimpleTestCase):\n+    def test_floatformat_with_high_precision_decimal(self):\n+        # Test to ensure precision is not lost for high precision Decimal numbers\n+        self.assertEqual(\n+            floatformat(Decimal(\"123456.123456789012345678901\"), 21),\n+            \"123456.123456789012345678901\",\n+        )\n+\n+    def test_floatformat_with_edge_case_precision(self):\n+        # Test with a number that could be tricky for float conversions\n+        self.assertEqual(\n+            floatformat(Decimal(\"0.00000000000000000001234567890123456789012345\"), 45),\n+            \"0.000000000000000000012345678901234567890123450000000\",\n+        )\n+\n+    def test_floatformat_with_negative_precision(self):\n+        # Ensure behavior remains consistent with negative precision\n+        self.assertEqual(\n+            floatformat(Decimal(\"123456.654321\"), -2),\n+            \"123456.65\",\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"123456.654321\"), -8),\n+            \"123456.65432100\",\n+        )\n+\n+    def test_floatformat_with_zero_precision(self):\n+        # Test a decimal with precision specifier as zero\n+        self.assertEqual(\n+            floatformat(Decimal(\"123456.654321\"), 0),\n+            \"123457\",\n+        )\n+\n+    def test_floatformat_with_no_specified_precision(self):\n+        # Test default behavior without specifying precision\n+        self.assertEqual(\n+            floatformat(Decimal(\"123456.654321\")),\n+            \"123456.7\",\n+        )\n+\n class FunctionTests(SimpleTestCase):\n     def test_inputs(self):\n         self.assertEqual(floatformat(7.7), \"7.7\")\n",
  "django__django-15930": "diff --git a/tests/expressions_case/tests.py b/tests/expressions_case/tests.py\nindex 696f4d0..2785164 100644\n--- a/tests/expressions_case/tests.py\n+++ b/tests/expressions_case/tests.py\n@@ -415,6 +415,17 @@ class CaseExpressionTests(TestCase):\n         self.assertEqual(len(objects), CaseTestModel.objects.count())\n         self.assertTrue(all(obj.selected == \"not selected\" for obj in objects))\n \n+    def test_annotate_with_negated_empty_when(self):\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+            )\n+        )\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        # Since ~Q(pk__in=[]) is always True, all objects should be \"selected\"\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n+\n     def test_combined_expression(self):\n         self.assertQuerysetEqual(\n             CaseTestModel.objects.annotate(\n",
  "django__django-15987": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 5ac9ab9..964c956 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -1,10 +1,11 @@\n+\n # Unittests for fixtures.\n import json\n import os\n import re\n from io import StringIO\n from pathlib import Path\n-\n+from pathlib import Path\n from django.core import management, serializers\n from django.core.exceptions import ImproperlyConfigured\n from django.core.serializers.base import DeserializationError\n@@ -556,7 +557,24 @@ class TestFixtures(TestCase):\n             management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n \n     @override_settings(FIXTURE_DIRS=[os.path.join(_cur_dir, \"fixtures\")])\n-    def test_fixture_dirs_with_default_fixture_path(self):\n+    @override_settings(\n+        FIXTURE_DIRS=[\n+            Path(os.path.join(_cur_dir, \"fixtures\")),\n+            Path(os.path.join(_cur_dir, \"fixtures\")),\n+        ]\n+    )\n+    def test_fixture_dirs_with_duplicate_path_instances(self):\n+        \"\"\"\n+        settings.FIXTURE_DIRS should not contain duplicate directories,\n+        even when using Path instances.\n+        \"\"\"\n+        msg = (\n+            \"'%s' is a default fixture directory for the '%s' app \"\n+            \"and cannot be listed in settings.FIXTURE_DIRS multiple times.\"\n+            % (os.path.join(_cur_dir, \"fixtures\"), \"fixtures_regress\")\n+        )\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n         \"\"\"\n         settings.FIXTURE_DIRS cannot contain a default fixtures directory\n         for application (app/fixtures) in order to avoid repeated fixture loading.\n",
  "django__django-16032": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex bcf8df9..e8f3619 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -989,6 +989,49 @@ class NonAggregateAnnotationTestCase(TestCase):\n             publisher_books_qs, [{\"name\": \"Sams\"}, {\"name\": \"Morgan Kaufmann\"}]\n         )\n \n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        self.assertCountEqual(\n+            publisher_books_qs,\n+            [\n+                {'name': 'Apress'},\n+                {'name': 'Sams'},\n+                {'name': 'Prentice Hall'},\n+                {'name': 'Morgan Kaufmann'}\n+            ]\n+        )\n+\n+    def test_annotation_and_alias_filter_related_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(pages__gt=400)\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = Publisher.objects.filter(\n+            book__in=long_books_qs,\n+        ).values(\"name\")\n+        self.assertCountEqual(\n+            publisher_books_qs,\n+            [\n+                {\"name\": \"Apress\"},\n+                {\"name\": \"Sams\"},\n+                {\"name\": \"Prentice Hall\"},\n+                {\"name\": \"Morgan Kaufmann\"},\n+            ],\n+        )\n+\n     def test_annotation_exists_aggregate_values_chaining(self):\n         qs = (\n             Book.objects.values(\"publisher\")\n",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..0da18b6 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2406,6 +2406,9 @@ class CombinableTests(SimpleTestCase):\n             object() ^ Combinable()\n \n \n+from django.db.models import IntegerField, DecimalField, FloatField, AutoField\n+from django.db.models.expressions import Expression, CombinedExpression, Combinable\n+\n class CombinedExpressionTests(SimpleTestCase):\n     def test_resolve_output_field_number(self):\n         tests = [\n@@ -2416,7 +2419,7 @@ class CombinedExpressionTests(SimpleTestCase):\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV, Combinable.MOD]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..83c0bca 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib import admin\n@@ -21,7 +22,9 @@ from django.db.models import F, Field, IntegerField\n from django.db.models.functions import Upper\n from django.db.models.lookups import Contains, Exact\n from django.template import Context, Template, TemplateSyntaxError\n-from django.test import TestCase, override_settings\n+from unittest import mock\n+from django.db import DatabaseError\n+from django.test import TestCase, override_settings, skipUnlessDBFeature\n from django.test.client import RequestFactory\n from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup\n from django.urls import reverse\n@@ -400,7 +403,75 @@ class ChangeListTests(TestCase):\n         with self.assertRaises(IncorrectLookupParameters):\n             m.get_changelist_instance(request)\n \n-    def test_custom_paginator(self):\n+    @skipUnlessDBFeature(\"supports_transactions\")\n+    def test_list_editable_atomicity_network_issue(self):\n+        # Setup\n+        a = Swallow.objects.create(origin=\"Swallow A\", load=4, speed=1)\n+        b = Swallow.objects.create(origin=\"Swallow B\", load=2, speed=2)\n+\n+        self.client.force_login(self.superuser)\n+        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n+        data = {\n+            \"form-TOTAL_FORMS\": \"2\",\n+            \"form-INITIAL_FORMS\": \"2\",\n+            \"form-MIN_NUM_FORMS\": \"0\",\n+            \"form-MAX_NUM_FORMS\": \"1000\",\n+            \"form-0-uuid\": str(a.pk),\n+            \"form-1-uuid\": str(b.pk),\n+            \"form-0-load\": \"9.0\",\n+            \"form-0-speed\": \"3.0\",\n+            \"form-1-load\": \"5.0\",\n+            \"form-1-speed\": \"1.0\",\n+            \"_save\": \"Save\",\n+        }\n+        \n+        # Simulate a network issue by raising an exception\n+        with mock.patch(\"django.contrib.admin.ModelAdmin.log_change\", side_effect=ConnectionError):\n+            with self.assertRaises(ConnectionError):\n+                self.client.post(changelist_url, data)\n+        \n+        # Ensure original values are preserved after the simulated network issue\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+\n+    @skipUnlessDBFeature(\"supports_transactions\")\n+    def test_list_editable_atomicity_unexpected_exception(self):\n+        # Setup\n+        a = Swallow.objects.create(origin=\"Swallow A\", load=4, speed=1)\n+        b = Swallow.objects.create(origin=\"Swallow B\", load=2, speed=2)\n+\n+        self.client.force_login(self.superuser)\n+        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n+        data = {\n+            \"form-TOTAL_FORMS\": \"2\",\n+            \"form-INITIAL_FORMS\": \"2\",\n+            \"form-MIN_NUM_FORMS\": \"0\",\n+            \"form-MAX_NUM_FORMS\": \"1000\",\n+            \"form-0-uuid\": str(a.pk),\n+            \"form-1-uuid\": str(b.pk),\n+            \"form-0-load\": \"9.0\",\n+            \"form-0-speed\": \"3.0\",\n+            \"form-1-load\": \"5.0\",\n+            \"form-1-speed\": \"1.0\",\n+            \"_save\": \"Save\",\n+        }\n+        \n+        # Simulate an unexpected exception\n+        with mock.patch(\"django.contrib.admin.ModelAdmin.log_change\", side_effect=RuntimeError):\n+            with self.assertRaises(RuntimeError):\n+                self.client.post(changelist_url, data)\n+        \n+        # Ensure original values are preserved after the unexpected exception\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n         new_parent = Parent.objects.create(name=\"parent\")\n         for i in range(1, 201):\n             Child.objects.create(name=\"name %s\" % i, parent=new_parent)\n",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..4113da6 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2400,7 +2400,17 @@ class MakeMigrationsTests(MigrationTestBase):\n         ):\n             call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n \n-    def test_makemigrations_migration_path_output(self):\n+    def test_makemigrations_check_no_dry_run(self):\n+        \"\"\"\n+        makemigrations --check should not create migration files\n+        and should behave consistently without requiring --dry-run.\n+        \"\"\"\n+        with self.temporary_migration_module() as tmpdir:\n+            self.assertFalse(os.path.exists(tmpdir))\n+            with self.assertRaises(SystemExit):\n+                call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+            # Ensure no migrations were created\n+            self.assertFalse(os.path.exists(tmpdir))\n         \"\"\"\n         makemigrations should print the relative paths to the migrations unless\n         they are outside of the current tree, in which case the absolute path\n",
  "django__django-16136": "diff --git a/tests/async/tests.py b/tests/async/tests.py\nindex 72e103e..f6b34fe 100644\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -1,3 +1,4 @@\n+\n import asyncio\n import os\n from unittest import mock\n@@ -6,7 +7,9 @@ from asgiref.sync import async_to_sync\n \n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n-from django.http import HttpResponse\n+from django.http import HttpResponse, HttpResponseNotAllowed\n+import asyncio\n+from django.test import RequestFactory\n from django.test import SimpleTestCase\n from django.utils.asyncio import async_unsafe\n from django.views.generic.base import View\n@@ -15,7 +18,24 @@ from .models import SimpleModel\n \n \n class CacheTest(SimpleTestCase):\n-    def test_caches_local(self):\n+    def test_http_method_not_allowed_responds_correctly(self):\n+        request_factory = RequestFactory()\n+        tests = [\n+            (SyncView, False),\n+            (AsyncView, True),\n+        ]\n+        for view_cls, is_coroutine in tests:\n+            with self.subTest(view_cls=view_cls, is_coroutine=is_coroutine):\n+                instance = view_cls()\n+                response = instance.http_method_not_allowed(request_factory.post(\"/\"))\n+                self.assertIs(\n+                    asyncio.iscoroutine(response),\n+                    is_coroutine,\n+                )\n+                if is_coroutine:\n+                    response = asyncio.run(response)\n+\n+                self.assertIsInstance(response, HttpResponseNotAllowed)\n         @async_to_sync\n         async def async_cache():\n             return caches[DEFAULT_CACHE_ALIAS]\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..7a8d0bd 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,7 +1,10 @@\n+\n import datetime\n import re\n+import urllib.parse\n from unittest import mock\n \n+from django.urls import reverse\n from django.contrib.auth.forms import (\n     AdminPasswordChangeForm,\n     AuthenticationForm,\n@@ -884,7 +887,45 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # original hashed password contains $\n         self.assertIn(\"$\", form.cleaned_data[\"password\"])\n \n-    def test_bug_19349_bound_password_field(self):\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_with_pk(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via pk.\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.pk,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n         user = User.objects.get(username=\"testclient\")\n         form = UserChangeForm(data={}, instance=user)\n         # When rendering the bound password field,\n",
  "django__django-16145": "",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..e256aa9 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -507,9 +507,42 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n+from django.test import TestCase\n+from django.contrib.sitemaps import Sitemap\n+from django.urls import path\n+from django.utils.decorators import override_settings\n+from django.test import Client\n+from django.contrib.sitemaps.views import index\n+\n+class CallableLastmodNoItemsSitemap(Sitemap):\n+    location = \"/location/\"\n+\n+    def items(self):\n+        return []\n+\n+    def lastmod(self, obj):\n+        return obj.lastmod\n \n-# RemovedInDjango50Warning\n-class DeprecatedTests(SitemapTestsBase):\n+class SitemapTestsBase(TestCase):\n+    client = Client()\n+\n+class SitemapCallableLastmodNoItemsTests(SitemapTestsBase):\n+    def test_callable_sitemod_no_items(self):\n+        response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", response)\n+        expected_content_index = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\n+        </sitemapindex>\n+        \"\"\"\n+        self.assertXMLEqual(response.content.decode(), expected_content_index)\n+\n+    def test_callable_no_items_sitemap_index(self):\n+        response = self.client.get(\"/callable-lastmod-no-items/sitemap.xml\")\n+        expected_content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        </urlset>\"\"\"\n+        self.assertXMLEqual(response.content.decode(), expected_content)\n     @override_settings(\n         TEMPLATES=[\n             {\n",
  "django__django-16315": "diff --git a/tests/bulk_create/models.py b/tests/bulk_create/models.py\nindex c5f5c07..de865a8 100644\n--- a/tests/bulk_create/models.py\n+++ b/tests/bulk_create/models.py\n@@ -74,6 +74,10 @@ class UpsertConflict(models.Model):\n     rank = models.IntegerField()\n     name = models.CharField(max_length=15)\n \n+class FieldsWithDbColumns(models.Model):\n+    rank = models.IntegerField(unique=True, db_column=\"rAnK\")\n+    name = models.CharField(max_length=15, null=True, db_column=\"oTheRNaMe\")\n+\n \n class NoFields(models.Model):\n     pass\n",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..e721486 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n import urllib.parse\n@@ -28,6 +29,7 @@ from django.utils import translation\n from django.utils.text import capfirst\n from django.utils.translation import gettext as _\n \n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n from .models.custom_user import (\n     CustomUser,\n     CustomUserWithoutIsActiveField,\n@@ -252,7 +254,61 @@ class UserCreationFormTest(TestDataMixin, TestCase):\n         form = CustomUserCreationForm(data)\n         self.assertTrue(form.is_valid())\n \n-    def test_password_whitespace_not_stripped(self):\n+    def test_custom_form_saves_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization = Organization.objects.create(name=\"organization 1\")\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization])\n+\n+    def test_custom_form_saves_multiple_many_to_many_fields(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization1 = Organization.objects.create(name=\"organization 1\")\n+        organization2 = Organization.objects.create(name=\"organization 2\")\n+\n+        data = {\n+            \"username\": \"testclient2@example.com\",\n+            \"password1\": \"testclient2\",\n+            \"password2\": \"testclient2\",\n+            \"orgs\": [str(organization1.pk), str(organization2.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization1, organization2])\n+\n+    def test_custom_form_no_many_to_many_field_data(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        data = {\n+            \"username\": \"testclient3@example.com\",\n+            \"password1\": \"testclient3\",\n+            \"password2\": \"testclient3\",\n+            \"orgs\": [],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [])\n         data = {\n             \"username\": \"testuser\",\n             \"password1\": \"   testpassword   \",\n",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..60065de 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.test import TestCase\n@@ -160,6 +161,22 @@ class TimesinceTests(TestCase):\n         self.assertEqual(timesince(t + self.oneday, now), \"0\\xa0minutes\")\n         self.assertEqual(timeuntil(t - self.oneday, now), \"0\\xa0minutes\")\n \n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_timesince_one_month_with_tz(self):\n+        # Test with an interval of exactly one month\n+        now = timezone.now()\n+        one_month_ago = now - datetime.timedelta(days=31)\n+        self.assertEqual(timesince(one_month_ago), \"1\\xa0month\")\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_timesince_over_one_month_with_tz(self):\n+        # Test with an interval of over one month\n+        now = timezone.now()\n+        over_one_month_ago = now - datetime.timedelta(days=45)\n+        self.assertIn(\"1\\xa0month\", timesince(over_one_month_ago))\n+\n     def test_naive_datetime_with_tzinfo_attribute(self):\n         class naive(datetime.tzinfo):\n             def utcoffset(self, dt):\n",
  "django__django-16454": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 8d0729b..6e1ad28 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -469,7 +469,42 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertEqual(out.strip(), \"Set foo\")\n \n \n-class UtilsTests(SimpleTestCase):\n+class CommandTests(SimpleTestCase):\n+    def test_subparser_required_argument_error(self):\n+        # Write settings for testing\n+        self.write_settings(\"settings.py\", apps=[\"user_commands\"])\n+        \n+        # Run management command with missing required subparser argument\n+        out, err = self.run_manage([\"subparser\", \"foo\"])\n+        \n+        # Assert no standard output\n+        self.assertNoOutput(out)\n+        \n+        # Check error message formatting\n+        err_lines = err.splitlines()\n+        self.assertEqual(len(err_lines), 2)\n+        self.assertEqual(\n+            err_lines[1],\n+            \"manage.py subparser foo: error: the following arguments are required: bar\",\n+        )\n+\n+    def test_invalid_subparser_argument_type(self):\n+        # Write settings for testing\n+        self.write_settings(\"settings.py\", apps=[\"user_commands\"])\n+        \n+        # Run management command with invalid type for subparser argument\n+        out, err = self.run_manage([\"subparser\", \"foo\", \"invalid_int\"])\n+        \n+        # Assert no standard output\n+        self.assertNoOutput(out)\n+        \n+        # Check error message formatting\n+        err_lines = err.splitlines()\n+        self.assertEqual(len(err_lines), 2)\n+        self.assertEqual(\n+            err_lines[1],\n+            \"manage.py subparser foo: error: argument bar: invalid int value: 'invalid_int'\",\n+        )\n     def test_no_existent_external_program(self):\n         msg = \"Error executing a_42_command_that_doesnt_exist_42\"\n         with self.assertRaisesMessage(CommandError, msg):\n",
  "django__django-16485": "",
  "django__django-16493": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex 20567e7..bc9d535 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -1018,6 +1018,29 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         storage = kwargs[\"storage\"]\n         self.assertIs(storage, callable_storage)\n \n+    def test_deconstruction_storage_callable_default(self):\n+        \"\"\"\n+        A callable that returns default_storage is not omitted when deconstructing.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"storage_callable_default\").deconstruct()\n+        self.assertIs(kwargs[\"storage\"], callable_default_storage)\n+\n+    def test_deconstruction_random_choice_storage(self):\n+        \"\"\"\n+        Ensure deconstruction works for a callable returning random choice between storages.\n+        \"\"\"\n+        def random_choice_storage():\n+            return random.choice([default_storage, temp_storage])\n+\n+        # Temporary model for testing\n+        class RandomStorageModel(models.Model):\n+            file = models.FileField(storage=random_choice_storage)\n+\n+        obj = RandomStorageModel()\n+        *_, kwargs = obj._meta.get_field(\"file\").deconstruct()\n+        self.assertIs(kwargs[\"storage\"], random_choice_storage)\n+\n \n # Tests for a race condition on file saving (#4948).\n # This is written in such a way that it'll always pass on platforms\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..ec89f0c 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,8 +1,11 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n from django.contrib.admin.templatetags.admin_list import date_hierarchy\n from django.contrib.admin.templatetags.admin_modify import submit_row\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n@@ -33,6 +36,41 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n         self.assertIs(template_context[\"extra\"], True)\n         self.assertIs(template_context[\"show_save\"], True)\n \n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        \"\"\"\n+        Test that \"show_save_as_new\" is only shown when the user has both\n+        the add and change permissions.\n+        \"\"\"\n+        # User with only change permission\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        # User with both add and change permissions\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n+\n     def test_override_show_save_and_add_another(self):\n         request = self.request_factory.get(\n             reverse(\"admin:auth_user_change\", args=[self.superuser.pk]),\n",
  "django__django-16560": "diff --git a/tests/constraints/tests.py b/tests/constraints/tests.py\nindex 13854a9..c6b0f19 100644\n--- a/tests/constraints/tests.py\n+++ b/tests/constraints/tests.py\n@@ -217,6 +217,18 @@ class CheckConstraintTests(TestCase):\n         constraints = get_constraints(ChildModel._meta.db_table)\n         self.assertIn(\"constraints_childmodel_adult\", constraints)\n \n+    def test_custom_violation_code_message(self):\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price\",\n+            violation_error_code=\"fake_discount\",\n+        )\n+        invalid_product = Product(price=10, discounted_price=42)\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(Product, invalid_product)\n+        self.assertEqual(cm.exception.code, \"fake_discount\")\n+\n     def test_validate(self):\n         check = models.Q(price__gt=models.F(\"discounted_price\"))\n         constraint = models.CheckConstraint(check=check, name=\"price\")\n@@ -654,6 +666,18 @@ class UniqueConstraintTests(TestCase):\n         with self.assertRaisesMessage(ValidationError, msg):\n             NoCodeErrorConstraintModel(name=\"test\").validate_constraints()\n \n+    def test_custom_violation_code_message(self):\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price\",\n+            violation_error_code=\"fake_discount\",\n+        )\n+        invalid_product = Product(price=10, discounted_price=42)\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(Product, invalid_product)\n+        self.assertEqual(cm.exception.code, \"fake_discount\")\n+\n     def test_validate(self):\n         constraint = UniqueConstraintProduct._meta.constraints[0]\n         msg = \"Unique constraint product with this Name and Color already exists.\"\n",
  "django__django-16569": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 55da562..2ddfe31 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1476,6 +1476,19 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertNotIn(\"DELETE\", formset.forms[1].fields)\n \n         formset = ChoiceFormFormset(initial=[{\"choice\": \"Zero\", \"votes\": \"1\"}])\n+\n+    def test_formset_add_fields_with_none_index(self):\n+        class MyForm(forms.Form):\n+            my_field = forms.CharField()\n+\n+        MyFormSet = forms.formset_factory(\n+            form=MyForm,\n+            can_delete=True,\n+            can_delete_extra=False,\n+        )\n+\n+        formset = MyFormSet(initial=None)\n+        self.assertNotIn(\"DELETE\", formset.empty_form.fields)\n         self.assertEqual(len(formset), 3)\n         self.assertIn(\"DELETE\", formset.forms[0].fields)\n         self.assertNotIn(\"DELETE\", formset.forms[1].fields)\n",
  "django__django-16595": "",
  "django__django-16612": "",
  "django__django-16642": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 499356e..5a3220c 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -255,6 +255,8 @@ class FileResponseTests(SimpleTestCase):\n             (\".tar.gz\", \"application/gzip\"),\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n+            (\".tar.br\", \"application/x-brotli\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n         )\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n",
  "django__django-16661": "",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..e488433 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -922,7 +922,30 @@ class WriterTests(SimpleTestCase):\n             output,\n         )\n \n-    def test_migration_file_header_comments(self):\n+    def test_import_ordering(self):\n+        \"\"\"\n+        Test that imports in migration files are ordered according to\n+        Django coding style and isort defaults.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield2\",\n+                        models.FloatField(default=time.time),\n+                    ),\n+                ]\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        self.assertIn(\n+            \"import datetime\\nimport time\\nfrom django.db import migrations, models\\n\",\n+            output,\n+        )\n         \"\"\"\n         Test comments at top of file.\n         \"\"\"\n",
  "django__django-16801": "diff --git a/tests/model_fields/test_imagefield.py b/tests/model_fields/test_imagefield.py\nindex 9bf7f7d..fc89f65 100644\n--- a/tests/model_fields/test_imagefield.py\n+++ b/tests/model_fields/test_imagefield.py\n@@ -320,6 +320,8 @@ class ImageFieldTwoDimensionsTests(ImageFieldTestMixin, TestCase):\n         self.assertIs(p.mugshot.was_opened, True)\n \n \n+from django.db.models import signals\n+\n @skipIf(Image is None, \"Pillow is required to test ImageField\")\n class ImageFieldNoDimensionsTests(ImageFieldTwoDimensionsTests):\n     \"\"\"\n@@ -327,6 +329,24 @@ class ImageFieldNoDimensionsTests(ImageFieldTwoDimensionsTests):\n     \"\"\"\n \n     PersonModel = Person\n+    \n+    def test_post_init_not_connected(self):\n+        person_model_id = id(self.PersonModel)\n+        self.assertNotIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id) in signals.post_init.receivers],\n+        )\n+\n+    def test_image_field_without_dimensions(self):\n+        \"\"\"\n+        Ensure that ImageField without dimensions does not connect to post_init.\n+        \"\"\"\n+        person_model_id = id(self.PersonModel)\n+        self.assertNotIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id) in signals.post_init.receivers],\n+            \"post_init signal should not be connected for models without dimensions\"\n+        )\n \n \n @skipIf(Image is None, \"Pillow is required to test ImageField\")\n",
  "django__django-16819": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex ac93153..ad0cf2e 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -1148,6 +1148,17 @@ class OptimizerTests(SimpleTestCase):\n             ],\n             [migrations.RenameIndex(\"Pony\", new_name=\"new_name\", old_name=\"old_name\")],\n         )\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(fields=[\"color\"], name=\"idx_pony_color\"),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_color\"),\n+            ],\n+            [],\n+        )\n+\n         self.assertDoesNotOptimize(\n             [\n                 migrations.RenameIndex(\n@@ -1157,4 +1168,4 @@ class OptimizerTests(SimpleTestCase):\n                     \"Pony\", new_name=\"new_name\", old_fields=(\"weight\", \"pink\")\n                 ),\n             ]\n-        )\n+        )\n",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..839f09c 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -806,7 +806,21 @@ class SystemChecksTestCase(SimpleTestCase):\n         ]\n         self.assertEqual(errors, expected)\n \n-    def test_nonexistent_field_on_inline(self):\n+    def test_readonly_fields_includes_field_name(self):\n+        class MyAdmin(admin.ModelAdmin):\n+            readonly_fields = [\"nonexistent_field\"]\n+\n+        errors = MyAdmin(Song, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' refers to 'nonexistent_field', \"\n+                \"which is not a callable, an attribute of 'MyAdmin', or an attribute \"\n+                \"of 'admin_checks.Song'.\",\n+                obj=MyAdmin,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n         class CityInline(admin.TabularInline):\n             model = City\n             readonly_fields = [\"i_dont_exist\"]  # Missing attribute\n@@ -814,7 +828,7 @@ class SystemChecksTestCase(SimpleTestCase):\n         errors = CityInline(State, AdminSite()).check()\n         expected = [\n             checks.Error(\n-                \"The value of 'readonly_fields[0]' is not a callable, an attribute \"\n+                \"The value of 'readonly_fields[0]' refers to 'i_dont_exist', which is \"\n                 \"of 'CityInline', or an attribute of 'admin_checks.City'.\",\n                 obj=CityInline,\n                 id=\"admin.E035\",\n",
  "django__django-16901": "",
  "django__django-17029": "",
  "django__django-17084": "",
  "django__django-17087": "",
  "django__django-7530": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex a74680b..88f0e25 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -588,7 +588,19 @@ class MakeMigrationsTests(MigrationTestBase):\n     def test_makemigrations_empty_connections(self):\n         empty_connections = ConnectionHandler({'default': {}})\n         with mock.patch('django.core.management.commands.makemigrations.connections', new=empty_connections):\n-            # with no apps\n+            # Test correct behavior of allow_migrate() call with specific app and models\n+            with self.settings(DATABASE_ROUTERS=['migrations.routers.CustomTestRouter']):\n+                with mock.patch('migrations.routers.CustomTestRouter.allow_migrate', return_value=True) as allow_migrate:\n+                    call_command('makemigrations', 'migrations', verbosity=0)\n+                    allow_migrate.assert_any_call('default', 'migrations', model_name='UnicodeModel')\n+                    allow_migrate.assert_any_call('default', 'migrations', model_name='SomeOtherModel')\n+                    self.assertEqual(allow_migrate.call_count, len(apps.get_app_config('migrations').get_models()))\n+                    \n+                with mock.patch('migrations.routers.CustomTestRouter.allow_migrate', return_value=False) as allow_migrate:\n+                    call_command('makemigrations', 'migrations', verbosity=0)\n+                    allow_migrate.assert_any_call('default', 'migrations', model_name='UnicodeModel')\n+                    allow_migrate.assert_any_call('default', 'migrations', model_name='SomeOtherModel')\n+                    self.assertEqual(allow_migrate.call_count, len(apps.get_app_config('migrations').get_models()))\n             out = six.StringIO()\n             call_command('makemigrations', stdout=out)\n             self.assertIn('No changes detected', out.getvalue())\n",
  "django__django-9296": "diff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\nindex b9b5fbc..5978c03 100644\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -298,6 +298,9 @@ class PaginationTests(SimpleTestCase):\n             paginator.get_page(1)\n \n \n+from django.core.paginator import Paginator, EmptyPage\n+from django.test import TestCase\n+\n class ModelPaginationTests(TestCase):\n     \"\"\"\n     Test pagination with Django model instances\n@@ -309,7 +312,26 @@ class ModelPaginationTests(TestCase):\n             a = Article(headline='Article %s' % x, pub_date=datetime(2005, 7, 29))\n             a.save()\n \n-    def test_first_page(self):\n+    def test_paginator_iteration(self):\n+        paginator = Paginator([1, 2, 3], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2], [3]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+\n+    def test_paginator_complete_iteration(self):\n+        # Test iteration over all pages and handle StopIteration at the end\n+        paginator = Paginator([1, 2, 3, 4, 5], 2)\n+        all_pages = []\n+        for page in paginator:\n+            all_pages.append(list(page))\n+        self.assertEqual(all_pages, [[1, 2], [3, 4], [5]])\n+\n+    def test_paginator_empty_iteration(self):\n+        # Test iteration on an empty paginator\n+        paginator = Paginator([], 2)\n+        all_pages = [page for page in paginator]\n+        self.assertEqual(all_pages, [])  # Should be an empty list\n         paginator = Paginator(Article.objects.order_by('id'), 5)\n         p = paginator.page(1)\n         self.assertEqual(\"<Page 1 of 2>\", str(p))\n",
  "matplotlib__matplotlib-13989": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5483eef..077f5a3 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6359,8 +6359,34 @@ def test_hist_auto_bins():\n \n def test_hist_nan_data():\n     fig, (ax1, ax2) = plt.subplots(2)\n+import matplotlib.pyplot as plt\n+import numpy as np\n \n-    data = [1, 2, 3]\n+def test_hist_range_and_density():\n+    # Test case from the issue\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_fixed_bins_density_true():\n+    # Fixed number of bins with density=True\n+    _, bins, _ = plt.hist(np.random.rand(10), bins=5, range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+    assert len(bins) == 6  # 5 bins means 6 edges\n+\n+def test_hist_fixed_bins_density_false():\n+    # Fixed number of bins with density=False\n+    _, bins, _ = plt.hist(np.random.rand(10), bins=5, range=(0, 1), density=False)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+    assert len(bins) == 6\n+\n+def test_hist_auto_bins_density_false():\n+    # Auto bins with density=False\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=False)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n     nan_data = data + [np.nan]\n \n     bins, edges, _ = ax1.hist(data)\n@@ -6368,4 +6394,4 @@ def test_hist_nan_data():\n         nanbins, nanedges, _ = ax2.hist(nan_data)\n \n     assert np.allclose(bins, nanbins)\n-    assert np.allclose(edges, nanedges)\n+    assert np.allclose(edges, nanedges)\n",
  "matplotlib__matplotlib-14623": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c9ad946..33eea97 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -918,7 +918,24 @@ def test_hexbin_log():\n     plt.colorbar(h)\n \n \n-def test_inverted_limits():\n+def test_invert_log_scale_axis():\n+    # Test inverting log scale axis using its limits\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(10, 1)  # Attempt to invert the y-axis\n+    assert ax.get_ylim() == (10, 1), \"Y-axis should be inverted for log scale.\"\n+\n+    ax.set_xscale(\"log\")\n+    ax.set_xlim(10, 1)  # Attempt to invert the x-axis\n+    assert ax.get_xlim() == (10, 1), \"X-axis should be inverted for log scale.\"\n+    plt.close(fig)\n+\n+    # Additional test for linear scale to ensure behavior consistency\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"linear\")\n+    ax.set_ylim(10, 1)  # Invert the y-axis\n+    assert ax.get_ylim() == (10, 1), \"Y-axis should be inverted for linear scale.\"\n+    plt.close(fig)\n     # Test gh:1553\n     # Calling invert_xaxis prior to plotting should not disable autoscaling\n     # while still maintaining the inverted direction\n",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..8465f50 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6961,6 +6961,22 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n \n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear(fig_test, fig_ref):\n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    axs_ref = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_ref.flat:\n+        ax.plot(x, y)\n+\n+    axs_test = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_test.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n+\n def test_shared_axes_retick():\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n \n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "diff --git a/lib/matplotlib/tests/test_category.py b/lib/matplotlib/tests/test_category.py\nindex 40c4dcf..5fb139b 100644\n--- a/lib/matplotlib/tests/test_category.py\n+++ b/lib/matplotlib/tests/test_category.py\n@@ -307,8 +307,39 @@ def test_overriding_units_in_plot(fig_test, fig_ref):\n         assert y_units is ax.yaxis.units\n \n \n-def test_hist():\n+def test_no_deprecation_on_empty_data():\n+    \"\"\"\n+    Test to ensure no deprecation warning is emitted with empty data\n+    and category units.\n+    \"\"\"\n+    f, ax = plt.subplots()\n+    ax.xaxis.update_units([\"a\", \"b\"])\n+    with pytest.warns(None) as record:\n+        ax.plot([], [])\n+    assert not record  # Ensure no warnings are emitted\n+\n+def test_no_deprecation_on_partial_empty_data():\n+    \"\"\"\n+    Test to ensure no deprecation warning is emitted with partially empty data\n+    and category units.\n+    \"\"\"\n+    f, ax = plt.subplots()\n+    ax.xaxis.update_units([\"a\", \"b\"])\n+    with pytest.warns(None) as record:\n+        ax.plot([], [1, 2, 3])\n+    assert not record  # Ensure no warnings are emitted\n+\n+def test_no_deprecation_on_nonempty_data():\n+    \"\"\"\n+    Test to ensure no deprecation warning is emitted with non-empty data\n+    and category units.\n+    \"\"\"\n+    f, ax = plt.subplots()\n+    ax.xaxis.update_units([\"a\", \"b\"])\n+    with pytest.warns(None) as record:\n+        ax.plot([1, 2], [3, 4])\n+    assert not record  # Ensure no warnings are emitted\n     fig, ax = plt.subplots()\n     n, bins, patches = ax.hist(['a', 'b', 'a', 'c', 'ff'])\n     assert n.shape == (10,)\n-    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n+    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n",
  "matplotlib__matplotlib-22865": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex 2c28713..b9fa4f5 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -912,13 +912,43 @@ def test_proportional_colorbars():\n     extends = ['neither', 'both']\n     spacings = ['uniform', 'proportional']\n     fig, axs = plt.subplots(2, 2)\n-    for i in range(2):\n+@pytest.mark.parametrize(\"extend, expected_segments\", [\n+    ('both', [np.array([[0., 0.], [0., 1.]]),\n+              np.array([[1., 0.], [1., 1.]]),\n+              np.array([[2., 0.], [2., 1.]])]),\n+    ('min', [np.array([[0., 0.], [0., 1.]]),\n+             np.array([[1., 0.], [1., 1.]])]),\n+    ('max', [np.array([[1., 0.], [1., 1.]]),\n+             np.array([[2., 0.], [2., 1.]])]),\n+    ('neither', [np.array([[1., 0.], [1., 1.]])])\n+])\n+def test_colorbar_extend_drawedges(extend, expected_segments):\n+    cmap = plt.get_cmap(\"viridis\")\n+    bounds = np.arange(3)\n+    nb_colors = len(bounds) + 1\n+    colors = cmap(np.linspace(100, 255, nb_colors).astype(int))\n+    cmap, norm = mcolors.from_levels_and_colors(bounds, colors, extend=extend)\n+\n+    plt.figure(figsize=(5, 1))\n+    ax = plt.subplot(111)\n+    cbar = Colorbar(ax, cmap=cmap, norm=norm, orientation='horizontal',\n+                    drawedges=True)\n+    actual_segments = cbar.dividers.get_segments()\n+    assert len(actual_segments) == len(expected_segments)\n+    for actual, expected in zip(actual_segments, expected_segments):\n+        np.testing.assert_array_equal(actual, expected)\n         for j in range(2):\n             CS3 = axs[i, j].contourf(X, Y, Z, levels, cmap=cmap, norm=norm,\n                                      extend=extends[i])\n             fig.colorbar(CS3, spacing=spacings[j], ax=axs[i, j])\n \n \n+import pytest\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import matplotlib.colors as mcolors\n+from matplotlib.colorbar import Colorbar\n+\n def test_negative_boundarynorm():\n     fig, ax = plt.subplots(figsize=(1, 3))\n     cmap = plt.get_cmap(\"viridis\")\n",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..3a195d1 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -490,7 +490,34 @@ def test_validate_fontstretch(stretch, parsed_stretch):\n         assert validate_fontstretch(stretch) == parsed_stretch\n \n \n-def test_keymaps():\n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend, rc_context\n+from matplotlib._pylab_helpers import Gcf\n+import pytest\n+\n+def test_no_backend_reset_rccontext():\n+    assert mpl.rcParams['backend'] != 'module://aardvark'\n+    with mpl.rc_context():\n+        mpl.rcParams['backend'] = 'module://aardvark'\n+    assert mpl.rcParams['backend'] == 'module://aardvark'\n+\n+def test_get_backend_does_not_clear_figs():\n+    # The test replicates the issue and ensures it is fixed.\n+    # Create a figure under an rc_context\n+    with rc_context():\n+        fig = plt.figure()\n+\n+    # Capture the Gcf state before calling get_backend\n+    before = f'{id(Gcf)} {Gcf.figs!r}'\n+\n+    # Call get_backend\n+    get_backend()\n+\n+    # Capture the Gcf state after calling get_backend\n+    after = f'{id(Gcf)} {Gcf.figs!r}'\n+\n+    # Ensure that the figures are not cleared\n+    assert before == after, f'Figures were cleared: \\nBefore: {before}\\nAfter: {after}'\n     key_list = [k for k in mpl.rcParams if 'keymap' in k]\n     for k in key_list:\n         assert isinstance(mpl.rcParams[k], list)\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..2770063 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -14,6 +14,7 @@ from matplotlib.collections import LineCollection, PolyCollection\n from matplotlib.patches import Circle\n \n import matplotlib.pyplot as plt\n+from matplotlib.testing.decorators import check_figures_equal\n import numpy as np\n \n \n@@ -28,6 +29,16 @@ def test_aspect_equal_error():\n         ax.set_aspect('equal')\n \n \n+@check_figures_equal(extensions=[\"png\"])\n+def test_3d_axes_set_visible_false(fig_test, fig_ref):\n+    ax = fig_test.add_subplot(projection='3d')\n+    ax.scatter([1], [1], [1], c='b')\n+    ax.set_visible(False)\n+\n+    ax_ref = fig_ref.add_subplot(projection='3d')\n+    ax_ref.scatter([1], [1], [1], c='b')\n+    ax_ref.set_visible(True)\n+\n @mpl3d_image_comparison(['bar3d.png'])\n def test_bar3d():\n     fig = plt.figure()\n",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..3397d14 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -139,14 +139,33 @@ def test_rotate_rect_draw(fig_test, fig_ref):\n     rect_ref = Rectangle(loc, width, height, angle=angle)\n     ax_ref.add_patch(rect_ref)\n     assert rect_ref.get_angle() == angle\n+import matplotlib.pyplot as plt\n+import matplotlib.patches as patches\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=['png'])\n+def test_patch_dash_offset():\n+    fig_test, fig_ref = plt.figure(), plt.figure()\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n+\n+    loc = (0.1, 0.1)\n+    width, height = (0.8, 0.8)\n \n-    # Check that when the angle is updated after adding to an Axes, that the\n-    # patch is marked stale and redrawn in the correct location\n-    rect_test = Rectangle(loc, width, height)\n-    assert rect_test.get_angle() == 0\n+    # Expected reference using Line2D\n+    ax_ref.plot([0, 1], [0, 0], linestyle=(0, (10, 10)), color='b', linewidth=3)\n+    ax_ref.plot([0, 1], [0.1, 0.1], linestyle=(10, (10, 10)), color='r', linewidth=3)\n+\n+    # Test patches with dash offset\n+    rect_test = patches.Rectangle(loc, width, height, linewidth=3, edgecolor='b', linestyle=(0, (10, 10)))\n+    rect_test2 = patches.Rectangle(loc, width, height, linewidth=3, edgecolor='r', linestyle=(10, (10, 10)))\n+    \n     ax_test.add_patch(rect_test)\n-    rect_test.set_angle(angle)\n-    assert rect_test.get_angle() == angle\n+    ax_test.add_patch(rect_test2)\n+\n+    # Assertions\n+    assert rect_test.get_linestyle() == (0, (10, 10))\n+    assert rect_test2.get_linestyle() == (10, (10, 10))\n \n \n def test_negative_rect():\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..896bf13 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2866,8 +2866,33 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.patches import Rectangle\n+\n+def test_stackplot_color_cycle():\n+    # Test case to ensure stackplot handles color cycle references correctly\n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    fig, ax = plt.subplots()\n+\n+    # Use color cycle with plot and patch\n+    ax.plot([1, 3], [1, 3], color='C0')\n+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))\n+\n+    # Use stackplot with color cycle references\n+    ax.stackplot([1, 2, 3], my_data, colors=['C2', 'C3', 'C4'])\n+\n+    # Check colors used\n+    line_color = ax.lines[0].get_color()\n+    patch_color = ax.patches[0].get_facecolor()\n+    stackplot_colors = [poly.get_facecolor()[0] for poly in ax.collections]\n \n-@image_comparison(['stackplot_test_baseline'], remove_text=True)\n+    assert line_color == plt.cm.get_cmap('tab10')(0)\n+    assert patch_color == plt.cm.get_cmap('tab10')(1)\n+    # The colors for stackplot should match C2, C3, C4 from the tab10 colormap\n+    assert stackplot_colors[0] == plt.cm.get_cmap('tab10')(2)\n+    assert stackplot_colors[1] == plt.cm.get_cmap('tab10')(3)\n+    assert stackplot_colors[2] == plt.cm.get_cmap('tab10')(4)\n def test_stackplot_baseline():\n     np.random.seed(0)\n \n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "",
  "matplotlib__matplotlib-24627": "",
  "matplotlib__matplotlib-24637": "diff --git a/lib/matplotlib/tests/test_backend_svg.py b/lib/matplotlib/tests/test_backend_svg.py\nindex 8817464..fd11db9 100644\n--- a/lib/matplotlib/tests/test_backend_svg.py\n+++ b/lib/matplotlib/tests/test_backend_svg.py\n@@ -578,7 +578,41 @@ def test_svg_font_string(font_str, include_generic):\n     plt.rcParams[\"font.size\"] = size\n     plt.rcParams[\"svg.fonttype\"] = \"none\"\n \n+    from matplotlib.offsetbox import AnnotationBbox, OffsetImage\n+    import numpy as np\n+    \n     fig, ax = plt.subplots()\n+\n+    def test_annotationbbox_gid():\n+        # Test that object gid appears in the AnnotationBbox in output svg.\n+        fig = plt.figure()\n+        ax = fig.add_subplot()\n+        arr_img = np.ones((32, 32))\n+        xy = (0.3, 0.55)\n+\n+        imagebox = OffsetImage(arr_img, zoom=0.1)\n+        imagebox.image.axes = ax\n+\n+        ab = AnnotationBbox(imagebox, xy,\n+                            xybox=(120., -80.),\n+                            xycoords='data',\n+                            boxcoords=\"offset points\",\n+                            pad=0.5,\n+                            arrowprops=dict(\n+                                arrowstyle=\"->\",\n+                                connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                            )\n+        ab.set_gid(\"a test for issue 20044\")\n+        ax.add_artist(ab)\n+\n+        with BytesIO() as fd:\n+            fig.savefig(fd, format='svg')\n+            buf = fd.getvalue().decode('utf-8')\n+\n+        expected = '<g id=\"a test for issue 20044\">'\n+        assert expected in buf\n+\n+    test_annotationbbox_gid()\n     if generic == \"sans-serif\":\n         generic_options = [\"sans\", \"sans-serif\", \"sans serif\"]\n     else:\n",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..3efe481 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -20,6 +20,21 @@ import matplotlib.scale as mscale\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n \n \n+import pytest\n+import numpy as np\n+import matplotlib as mpl\n+from numpy.testing import assert_array_equal, assert_array_almost_equal\n+import matplotlib.colors as mcolors\n+\n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.float16, float])\n+def test_index_dtype_no_warnings(dtype):\n+    cm = mpl.colormaps[\"viridis\"]\n+    with pytest.warns(None) as record:\n+        assert_array_equal(cm(dtype(0)), cm(0))\n+    assert len(record) == 0, f\"Unexpected warnings: {record}\"\n+\n+...\n+\n @pytest.mark.parametrize('N, result', [\n     (5, [1, .6, .2, .1, 0]),\n     (2, [1, 0]),\n",
  "matplotlib__matplotlib-25122": "diff --git a/lib/matplotlib/tests/test_mlab.py b/lib/matplotlib/tests/test_mlab.py\nindex 51d0c35..e31e947 100644\n--- a/lib/matplotlib/tests/test_mlab.py\n+++ b/lib/matplotlib/tests/test_mlab.py\n@@ -581,6 +581,24 @@ class TestSpectral:\n         with pytest.raises(AssertionError):\n             assert_allclose(spec_b, spec_c, atol=1e-08)\n \n+    def test_psd_with_flattop_window(self):\n+        # Test using a flattop window to ensure window correction is correct\n+        from scipy import signal\n+        y = np.random.rand(1024)\n+        NFFT = 512\n+        Fs = 1.0\n+        window = signal.windows.flattop(NFFT)\n+\n+        # Compute PSD using mlab with flattop window\n+        spec_mlab, fsp_mlab = mlab.psd(x=y, NFFT=NFFT, Fs=Fs, window=window)\n+\n+        # Compute reference PSD manually without using abs in window correction\n+        spec_manual, _ = mlab.psd(x=y, NFFT=NFFT, Fs=Fs, window=window, scale_by_freq=False)\n+        spec_manual /= (window**2).sum()\n+\n+        # Assert that both methods give the same result\n+        assert_allclose(spec_mlab, spec_manual, atol=1e-08)\n+\n     def test_psd_window_hanning(self):\n         if self.NFFT_density is None:\n             return\n",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..49dad2c 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,6 +7801,9 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+import matplotlib.pyplot as plt\n+import pytest\n+\n def test_ytickcolor_is_not_yticklabelcolor():\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n@@ -7825,7 +7828,30 @@ def test_relative_ticklabel_sizes(size):\n             assert tick.label1.get_size() == axis._get_tick_label_size(name)\n \n \n-def test_multiplot_autoscale():\n+def test_xaxis_offsetText_color():\n+    plt.rcParams['xtick.labelcolor'] = 'blue'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.xaxis.offsetText.get_color() == 'blue'\n+\n+    plt.rcParams['xtick.color'] = 'yellow'\n+    plt.rcParams['xtick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.xaxis.offsetText.get_color() == 'yellow'\n+\n+\n+def test_yaxis_offsetText_color():\n+    plt.rcParams['ytick.labelcolor'] = 'green'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.yaxis.offsetText.get_color() == 'green'\n+\n+    plt.rcParams['ytick.color'] = 'red'\n+    plt.rcParams['ytick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.yaxis.offsetText.get_color() == 'red'\n     fig = plt.figure()\n     ax1, ax2 = fig.subplots(2, 1, sharex='all')\n     ax1.scatter([1, 2, 3, 4], [2, 3, 2, 3])\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..393b556 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -89,8 +90,22 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n-\n @mpl.style.context(\"default\")\n+def test_pickling_draggable_legend():\n+    fig, ax = plt.subplots()\n+    ax.plot([0, 1, 2], [0, 1, 0], label='Test Line')\n+    legend = ax.legend()\n+    legend.set_draggable(True)\n+\n+    # Ensure pickling does not raise any TypeError\n+    pkl = pickle.dumps(fig, protocol=pickle.HIGHEST_PROTOCOL)\n+\n+    # Verify that the string \"FigureCanvasQTAgg\" is not present in the pickled data\n+    assert \"FigureCanvasQTAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+\n+    # Unpickle the figure to ensure it can be loaded back\n+    loaded_fig = pickle.loads(pkl)\n+    assert loaded_fig is not None\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..5589fb1 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -37,6 +37,30 @@ def test_simple():\n     plt.bar(x=np.arange(10), height=np.arange(10))\n     pickle.dump(plt.gca(), BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n+    # Test for pickling after aligning labels\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()\n+\n+    # Attempt to pickle the figure\n+    try:\n+        pickle_data = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+        fig_loaded = pickle.loads(pickle_data)\n+        fig_loaded.canvas.draw()\n+        print(\"Pickling succeeded after aligning labels.\")\n+    except Exception as e:\n+        print(f\"Pickling failed: {e}\")\n+    pickle.dump(plt.gca(), BytesIO(), pickle.HIGHEST_PROTOCOL)\n+\n     fig = plt.figure()\n     ax = plt.axes()\n     plt.plot(np.arange(10))\n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..5500a15 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -991,8 +991,46 @@ def test_hexbin_linear():\n     ax.hexbin(x, y, gridsize=(10, 5), marginals=True,\n               reduce_C_function=np.sum)\n \n+from matplotlib.testing.decorators import check_figures_equal\n+import numpy as np\n \n-def test_hexbin_log_clim():\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_behavior_upon_C_parameter(fig_test, fig_ref):\n+    # Test for consistent behavior when C is supplied.\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # without C parameter\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # with C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=C,\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n     x, y = np.arange(200).reshape((2, 100))\n     fig, ax = plt.subplots()\n     h = ax.hexbin(x, y, bins='log', vmin=2, vmax=100)\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex 700190c..e0a6dc5 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -89,6 +89,42 @@ def test_contour_no_valid_levels():\n     ax.contour(np.ones((9, 9)))\n \n \n+from matplotlib.testing.decorators import check_figures_equal\n+from matplotlib import pyplot as plt\n+import numpy as np\n+import pytest\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths(fig_test, fig_ref):\n+    # Create a contour plot in fig_test\n+    ax_test = fig_test.subplots()\n+    Z = np.array([[0, 1], [1, 2]])\n+    cs_test = ax_test.contour(Z)\n+    \n+    # Create a reference contour plot with different data\n+    ax_ref = fig_ref.subplots()\n+    Z_ref = np.array([[1, 0], [2, 1]])\n+    cs_ref = ax_ref.contour(Z_ref)\n+\n+    # Use the new set_paths method to set the paths in cs_test\n+    cs_test.set_paths(cs_ref.get_paths())\n+    \n+    # The test will pass if the figures are equal, indicating that set_paths\n+    # correctly transferred the paths from cs_ref to cs_test.\n+    \n+@pytest.mark.parametrize(\"split_collections\", [False, True])\n+@image_comparison(['contour_manual_labels'], remove_text=True, style='mpl20', tol=0.26)\n+def test_contour_manual_labels(split_collections):\n+    x, y = np.meshgrid(np.arange(0, 10), np.arange(0, 10))\n+    z = np.max(np.dstack([abs(x), abs(y)]), 2)\n+\n+    plt.figure(figsize=(6, 2), dpi=200)\n+    cs = plt.contour(x, y, z)\n+    pts = np.array([(1.0, 3.0), (1.0, 4.4), (1.0, 6.0)])\n+    plt.clabel(cs, manual=pts)\n+    pts = np.array([(2.0, 3.0), (2.0, 4.4), (2.0, 6.0)])\n+    plt.clabel(cs, manual=pts, fontsize='small', colors=('r', 'g'))\n+\n def test_contour_Nlevels():\n     # A scalar levels arg or kwarg should trigger auto level generation.\n     # https://github.com/matplotlib/matplotlib/issues/11913\n",
  "mwaskom__seaborn-3069": "diff --git a/tests/_core/test_plot.py b/tests/_core/test_plot.py\nindex 3d202bc..7e1a4dd 100644\n--- a/tests/_core/test_plot.py\n+++ b/tests/_core/test_plot.py\n@@ -646,6 +646,53 @@ class TestScaling:\n             p.plot()\n \n \n+import pytest\n+import matplotlib as mpl\n+from seaborn import Plot\n+\n+class TestNominalScale:\n+\n+    def test_nominal_x_axis_tweaks(self):\n+        p = Plot(x=[\"a\", \"b\", \"c\"], y=[1, 2, 3])\n+        ax1 = p.plot()._figure.axes[0]\n+        assert ax1.get_xlim() == (-.5, 2.5)\n+        assert not any(x.get_visible() for x in ax1.xaxis.get_gridlines())\n+\n+        lim = (-1, 2.1)\n+        ax2 = p.limit(x=lim).plot()._figure.axes[0]\n+        assert ax2.get_xlim() == lim\n+\n+    def test_nominal_y_axis_tweaks(self):\n+        p = Plot(x=[1, 2, 3], y=[\"a\", \"b\", \"c\"])\n+        ax1 = p.plot()._figure.axes[0]\n+        assert ax1.get_ylim() == (2.5, -.5)\n+        assert not any(y.get_visible() for y in ax1.yaxis.get_gridlines())\n+\n+        lim = (-1, 2.1)\n+        ax2 = p.limit(y=lim).plot()._figure.axes[0]\n+        assert ax2.get_ylim() == lim\n+\n+    def test_nominal_scale_with_inferred_order(self):\n+        # This test checks that the nominal scale handles inferred orders correctly\n+        data = [\"cat\", \"dog\", \"fish\"]\n+        p = Plot(x=data, y=[1, 2, 3])\n+        ax = p.plot()._figure.axes[0]\n+        assert ax.get_xlim() == (-0.5, 2.5)\n+\n+    def test_nominal_scale_inversion_on_y_axis(self):\n+        # This test checks that the y-axis is inverted correctly\n+        data = [\"low\", \"medium\", \"high\"]\n+        p = Plot(x=[1, 2, 3], y=data)\n+        ax = p.plot()._figure.axes[0]\n+        assert ax.get_ylim() == (2.5, -0.5)\n+\n+    def test_nominal_scale_grid_logic(self):\n+        # This test checks that the grid is turned off for nominal scales\n+        p = Plot(x=[1, 2, 3], y=[\"apple\", \"banana\", \"cherry\"])\n+        ax = p.plot()._figure.axes[0]\n+        assert not any(x.get_visible() for x in ax.xaxis.get_gridlines())\n+        assert not any(y.get_visible() for y in ax.yaxis.get_gridlines())\n+\n class TestPlotting:\n \n     def test_matplotlib_object_creation(self):\n",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..857636b 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -244,6 +244,15 @@ def test_default_static_max_age(app):\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n \n+import pytest\n+import flask\n+\n+...\n+\n+def test_empty_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"\", __name__)\n+\n def test_templates_list(test_apps):\n     from blueprintapp import app\n \n",
  "psf__requests-1142": "",
  "psf__requests-1724": "",
  "psf__requests-1766": "",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..1c5db74 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,6 +81,7 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://.example.com'),  # Test for issue with invalid label\n         ))\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..5c13dce 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2308,6 +2308,26 @@ class TestAsCompatibleData:\n         orig = Variable(dims=(\"x\"), data=array, attrs={\"foo\": \"bar\"})\n         assert isinstance(orig._data, CustomIndexable)\n \n+def test_variable_setitem_object_with_values():\n+    import numpy as np\n+    from xarray import Variable\n+\n+    # Define a class with a 'values' property\n+    class HasValues:\n+        values = 5\n+\n+    # Create a Variable of object dtype\n+    var = Variable(dims=(\"x\"), data=[None], dtype=object)\n+\n+    # Set an instance of HasValues into the variable\n+    var[0] = HasValues()\n+\n+    # Check if the object was stored directly\n+    assert isinstance(var.values[0], HasValues)\n+\n+    # Check that the value inside the object has not been altered\n+    assert var.values[0].values == 5\n+\n \n def test_raise_no_warning_for_nan_in_binary_ops():\n     with pytest.warns(None) as record:\n",
  "pydata__xarray-3095": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex 274cb25..5025fae 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -3485,6 +3485,16 @@ class TestDataArray:\n         assert_identical(array.real, DataArray(1))\n         assert_identical(array.imag, DataArray(2))\n \n+    def test_copy_unicode_indices(self):\n+        # Test for ensuring unicode indices are not cast to object dtype in DataArray\n+        da = xr.DataArray(\n+            np.array(['baz']),\n+            coords={'x': ['foo']},\n+            dims=['x']\n+        )\n+        da_copy = da.copy(deep=True)\n+        assert da_copy.coords['x'].dtype == '<U3', \"Deep copy should maintain unicode dtype\"\n+\n     def test_setattr_raises(self):\n         array = DataArray(0, coords={'scalar': 1}, attrs={'foo': 'bar'})\n         with raises_regex(AttributeError, 'cannot set attr'):\n",
  "pydata__xarray-3151": "",
  "pydata__xarray-3305": "",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..3b09eb8 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import pytest\n \n@@ -159,6 +160,11 @@ class TestMergeMethod:\n         with raises_regex(ValueError, \"should be coordinates or not\"):\n             data.merge(data.reset_coords())\n \n+    def test_merge_dataarray(self):\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+        assert_identical(ds.merge(da), xr.merge([ds, da]))\n+\n     def test_merge_broadcast_equals(self):\n         ds1 = xr.Dataset({\"x\": 0})\n         ds2 = xr.Dataset({\"x\": (\"y\", [0, 0])})\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..789d3a4 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -114,6 +114,15 @@ class TestMergeFunction:\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n         assert actual.identical(expected)\n \n+    def test_merge_attrs_override_copy(self):\n+        ds1 = xr.Dataset(attrs={\"x\": 0})\n+        ds2 = xr.Dataset(attrs={\"x\": 1})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"x\"] = 2\n+        assert ds1.attrs[\"x\"] == 0\n+        assert ds3.attrs[\"x\"] == 2\n+        assert ds2.attrs[\"x\"] == 1\n+\n     def test_merge_dicts_dims(self):\n         actual = xr.merge([{\"y\": (\"x\", [13])}, {\"x\": [12]}])\n         expected = xr.Dataset({\"x\": [12], \"y\": (\"x\", [13])})\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..25b87e4 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1921,8 +1921,30 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n+def test_where_attrs() -> None:\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    actual = xr.where(cond, x, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected, actual)\n \n-@pytest.mark.parametrize(\"use_dask\", [True, False])\n+def test_where_no_attrs() -> None:\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    actual = xr.where(cond, x, y)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={})  # No attributes expected\n+    assert_identical(expected, actual)\n+\n+def test_where_preserve_all_attrs() -> None:\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\", \"common_attr\": \"common\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\", \"common_attr\": \"common\"})\n+    actual = xr.where(cond, x, y, keep_attrs=True)\n+    expected_attrs = {\"attr\": \"x\", \"common_attr\": \"common\"}\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs=expected_attrs)\n+    assert_identical(expected, actual)\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n def test_polyval(use_dask, use_datetime) -> None:\n     if use_dask and not has_dask:\n",
  "pydata__xarray-4695": "",
  "pydata__xarray-4966": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex 2dbb0b4..5fc2ab5 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -13,6 +13,18 @@ from . import assert_allclose, assert_equal, assert_identical, requires_dask\n with suppress(ImportError):\n     import dask.array as da\n \n+@pytest.mark.parametrize(\"signed_input, expected_output\", [\n+    (np.array([128, 255, 0, 1, 2, np.nan, 127], dtype=np.uint8), \n+     np.array([-128, -1, 0, 1, 2, np.nan, 127], dtype=np.int8)),\n+    (np.array([0, 1, 2, 3, 4, 5, 6], dtype=np.uint8),\n+     np.array([0, 1, 2, 3, 4, 5, 6], dtype=np.int8)),\n+])\n+def test_decode_signed_from_unsigned_bytes(signed_input, expected_output):\n+    encoded = xr.Variable((\"x\",), signed_input, attrs={\"_Unsigned\": \"false\"})\n+    coder = variables.UnsignedIntegerCoder()\n+    decoded = coder.decode(encoded)\n+    assert decoded.dtype == expected_output.dtype\n+    assert np.array_equal(decoded.values, expected_output)\n \n def test_CFMaskCoder_decode():\n     original = xr.Variable((\"x\",), [0, -1, 1], {\"_FillValue\": -1})\n",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..6669c79 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1920,6 +1920,11 @@ def test_where() -> None:\n     assert_identical(expected, actual)\n \n \n+import numpy as np\n+import pytest\n+import xarray as xr\n+from xarray.testing import assert_identical\n+\n def test_where_attrs() -> None:\n     cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n     x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n@@ -1929,6 +1934,32 @@ def test_where_attrs() -> None:\n     assert_identical(expected, actual)\n \n \n+def test_where_with_scalars() -> None:\n+    # Test with scalar x and y, keep_attrs=True\n+    cond = xr.DataArray([True, False, True], dims=\"x\")\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={})\n+    assert_identical(expected, actual)\n+\n+    # Test with scalar x and non-scalar y, keep_attrs=True\n+    cond = xr.DataArray([True, False, True], dims=\"x\")\n+    y = xr.DataArray([0, 0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    actual = xr.where(cond, 1, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={\"attr\": \"y\"})\n+    assert_identical(expected, actual)\n+\n+    # Test with non-scalar x and scalar y, keep_attrs=True\n+    cond = xr.DataArray([True, False, True], dims=\"x\")\n+    x = xr.DataArray([1, 1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    actual = xr.where(cond, x, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected, actual)\n+\n+    # Ensure that the workaround with keep_attrs=False doesn't raise errors\n+    actual_no_attrs = xr.where(cond, 1, 0, keep_attrs=False)\n+    expected_no_attrs = xr.DataArray([1, 0, 1], dims=\"x\")\n+    assert_identical(expected_no_attrs, actual_no_attrs)\n+\n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n def test_polyval(use_dask, use_datetime) -> None:\n",
  "pydata__xarray-6599": "",
  "pydata__xarray-6721": "",
  "pydata__xarray-6744": "diff --git a/xarray/tests/test_rolling.py b/xarray/tests/test_rolling.py\nindex 0a9ef75..2524595 100644\n--- a/xarray/tests/test_rolling.py\n+++ b/xarray/tests/test_rolling.py\n@@ -48,8 +48,28 @@ class TestDataArrayRolling:\n                     actual.values[actual.values.nonzero()],\n                     expected.values[expected.values.nonzero()],\n                 )\n-\n+    \n     @pytest.mark.parametrize(\"da\", (1,), indirect=True)\n+    @pytest.mark.parametrize(\"center\", [True, False])\n+    def test_rolling_iter_center(self, da, center) -> None:\n+        size = 3\n+        rolling_obj = da.rolling(time=size, center=center)\n+        rolling_obj_mean = rolling_obj.mean()\n+\n+        manual_result = [\n+            window_da.mean(\"time\") for _, window_da in rolling_obj\n+        ]\n+\n+        # Convert the manual results to a DataArray to compare\n+        manual_result_da = xr.concat(manual_result, dim=\"time\")\n+        \n+        # Ensure that the manually iterated result matches the rolling mean\n+        assert_array_equal(manual_result_da.isnull(), rolling_obj_mean.isnull())\n+        if (~manual_result_da.isnull()).sum() > 0:\n+            np.allclose(\n+                manual_result_da.values[manual_result_da.values.nonzero()],\n+                rolling_obj_mean.values[rolling_obj_mean.values.nonzero()],\n+            )\n     def test_rolling_repr(self, da) -> None:\n         rolling_obj = da.rolling(time=7)\n         assert repr(rolling_obj) == \"DataArrayRolling [time->7]\"\n",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "",
  "pylint-dev__pylint-4970": "",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..03b5d18 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -94,9 +94,29 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+from pylint.lint import Run\n+import pytest\n+from _pytest.capture import CaptureFixture\n+import pathlib\n+\n+# Assuming EMPTY_MODULE is defined as a temporary empty module for testing\n+EMPTY_MODULE = pathlib.Path.cwd() / \"empty_module.py\"\n+\n+def test_short_verbose_no_argument(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that the -v option doesn't expect an argument and behaves like --verbose.\"\"\"\n+    Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n+def test_long_verbose_no_argument(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that the --verbose option behaves correctly.\"\"\"\n+    Run([str(EMPTY_MODULE), \"--verbose\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex d5ccd91..6b9ca8e 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -864,6 +864,49 @@ def test_by_module_statement_value(initialized_linter: PyLinter) -> None:\n         assert module_stats[\"statement\"] == linter2.stats.statement\n \n \n+import os\n+from pylint.lint import Run\n+from os.path import join\n+import pytest\n+\n+@pytest.mark.parametrize(\n+    \"ignore_parameter,ignore_parameter_value\",\n+    [\n+        (\"--ignore\", \"ignored_subdirectory\"),\n+        (\"--ignore-patterns\", \"ignored_.*\"),\n+        (\"--ignore-paths\", \".*ignored.*\"),\n+    ],\n+)\n+def test_recursive_ignore(ignore_parameter, ignore_parameter_value) -> None:\n+    run = Run(\n+        [\n+            \"--recursive=y\",\n+            ignore_parameter,\n+            ignore_parameter_value,\n+            join(\"tests\", \"regrtest_data\", \"directory\"),\n+        ],\n+        exit=False,\n+    )\n+\n+    linted_files = run.linter._iterate_file_descrs(\n+        tuple(run.linter._discover_files([join(\"tests\", \"regrtest_data\", \"directory\")]))\n+    )\n+    linted_file_paths = [file_item.filepath for file_item in linted_files]\n+\n+    ignored_file = os.path.abspath(\n+        join(\"tests\", \"regrtest_data\", \"directory\", \"ignored_subdirectory\", \"failing.py\")\n+    )\n+    assert ignored_file not in linted_file_paths\n+\n+    for regrtest_data_module in (\n+        (\"directory\", \"subdirectory\", \"subsubdirectory\", \"module.py\"),\n+        (\"directory\", \"subdirectory\", \"module.py\"),\n+        (\"directory\", \"package\", \"module.py\"),\n+        (\"directory\", \"package\", \"subpackage\", \"module.py\"),\n+    ):\n+        module = os.path.abspath(join(\"tests\", \"regrtest_data\", *regrtest_data_module))\n+        assert module in linted_file_paths\n+\n def test_import_sibling_module_from_namespace(initialized_linter: PyLinter) -> None:\n     \"\"\"If the parent directory above `namespace` is on sys.path, ensure that\n     modules under `namespace` can import each other without raising `import-error`.\"\"\"\n",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..dc93cf6 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,49 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_path_recursive_different_patterns(self) -> None:\n+        \"\"\"Tests different ignore-paths patterns with --recursive=y.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                \n+                # Test with full path pattern\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^regrtest_data/directory/ignored_subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n+                \n+                # Test with different directory\n+                os.chdir(join(HERE, \"regrtest_data\", \"other_directory\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^ignored_subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n+\n+                # Test with multiple patterns\n+                os.chdir(join(HERE, \"regrtest_data\", \"multi_pattern_test\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^(ignored_subdirectory|another_ignored)/.*\",\n+                    ],\n+                    code=0,\n+                )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7277": "",
  "pytest-dev__pytest-10051": "",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_debugging.py b/testing/test_debugging.py\nindex 912abd7..f4629a0 100644\n--- a/testing/test_debugging.py\n+++ b/testing/test_debugging.py\n@@ -174,8 +174,26 @@ class TestPDB:\n         rest = child.read().decode(\"utf8\")\n         assert \"debug.me\" in rest\n         self.flush(child)\n+    def test_pdb_unittest_skip_with_teardown(self, pytester: Pytester) -> None:\n+        \"\"\"Test for issue when tearDown should not execute on skipped classes\"\"\"\n+        p1 = pytester.makepyfile(\n+            \"\"\"\n+            import unittest\n+            @unittest.skip(\"Skip test class with pdb active\")\n+            class MyTestCase(unittest.TestCase):\n+                def setUp(self):\n+                    raise Exception(\"setUp should not be called\")\n+\n+                def tearDown(self):\n+                    raise Exception(\"tearDown should not be called\")\n \n-    def test_pdb_unittest_skip(self, pytester: Pytester) -> None:\n+                def test_one(self):\n+                    assert 0\n+            \"\"\"\n+        )\n+        result = pytester.runpytest(\"-rs --pdb\", p1)\n+        result.stdout.fnmatch_lines(\"*Skip test class with pdb active*\")\n+        result.stdout.fnmatch_lines(\"*1 skipped in*\")\n         \"\"\"Test for issue #2137\"\"\"\n         p1 = pytester.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-5262": "",
  "pytest-dev__pytest-5631": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex e422b03..3cb2b52 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -6,7 +6,8 @@ import textwrap\n import py\n \n import pytest\n-from _pytest.main import _in_venv\n+import numpy as np\n+from unittest.mock import patch\n from _pytest.main import ExitCode\n from _pytest.main import Session\n \n",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..f705b25 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -119,6 +119,20 @@ class TestPaste(object):\n \n             monkeypatch.setattr(urllib.request, \"urlopen\", mocked)\n         return calls\n+    def test_create_new_paste_text_lexer(self, pastebin, monkeypatch):\n+        # Mock the urlopen function to prevent actual HTTP requests\n+        def mocked_urlopen(url, data=None):\n+            assert url == \"https://bpaste.net\"\n+            payload = data.decode()\n+            assert \"lexer=text\" in payload\n+            assert \"code=full-paste-contents\" in payload\n+            assert \"expiry=1week\" in payload\n+            return MockResponse()\n+\n+        monkeypatch.setattr(urllib.request, \"urlopen\", mocked_urlopen)\n+        \n+        result = pastebin.create_new_paste(b\"full-paste-contents\")\n+        assert result == \"https://bpaste.net/show/mockresponse\"\n \n     def test_create_new_paste(self, pastebin, mocked_urlopen):\n         result = pastebin.create_new_paste(b\"full-paste-contents\")\n@@ -130,4 +144,4 @@ class TestPaste(object):\n         assert url == \"https://bpaste.net\"\n         assert \"lexer=%s\" % lexer in data.decode()\n         assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n",
  "pytest-dev__pytest-6202": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex fb6b260..3ef0046 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -686,21 +686,33 @@ class Test_genitems:\n         p = testdir.makepyfile(\n             \"\"\"\n             def testone():\n-                pass\n+                import pytest\n+                \n+                @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+                def testmethod_two(self, arg0):\n+                    pass\n \n             class TestX(object):\n                 def testmethod_one(self):\n                     pass\n \n             class TestY(TestX):\n-                pass\n+                import pytest\n+                \n+                @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+                def testmethod_two(self, arg0):\n+                    pass\n         \"\"\"\n         )\n         items, reprec = testdir.inline_genitems(p)\n-        assert len(items) == 3\n+        assert len(items) == 4\n         assert items[0].name == \"testone\"\n         assert items[1].name == \"testmethod_one\"\n         assert items[2].name == \"testmethod_one\"\n+        assert items[3].name == \"testmethod_two[.[]\"\n+\n+        # PR #6202: Fix incorrect result of getmodpath method. (Resolves issue #6189)\n+        assert items[3].getmodpath() == \"TestY.testmethod_two[.[]\"\n \n         # let's also test getmodpath here\n         assert items[0].getmodpath() == \"testone\"\n",
  "pytest-dev__pytest-7205": "diff --git a/testing/test_setuponly.py b/testing/test_setuponly.py\nindex 8211d39..8a5685e 100644\n--- a/testing/test_setuponly.py\n+++ b/testing/test_setuponly.py\n@@ -1,3 +1,4 @@\n+\n import pytest\n from _pytest.config import ExitCode\n \n@@ -201,7 +202,22 @@ def test_show_fixtures_with_parameter_ids_function(testdir, mode):\n     result.stdout.fnmatch_lines([\"*SETUP    F foobar?FOO?\", \"*SETUP    F foobar?BAR?\"])\n \n \n-def test_dynamic_fixture_request(testdir):\n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue 7126, BytesWarning when using --setup-show with bytes parameter\n+    import sys\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n+\n+        @pytest.mark.parametrize('data', [b'Hello World', b'Another Test'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n     p = testdir.makepyfile(\n         \"\"\"\n         import pytest\n",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..8dafc75 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -397,7 +398,31 @@ class TestXFail:\n         result = testdir.runpytest(p, \"-rxX\")\n         result.stdout.fnmatch_lines([\"*XFAIL*test_this*\", \"*XPASS*test_that*\"])\n \n-    def test_dynamic_xfail_no_run(self, testdir):\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir):\n+        # Issue #7486: Test dynamically adding an xfail marker during a test and it fails.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir):\n+        # Issue #7486: Test dynamically adding an xfail marker during a test with strict=True.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+                assert 1\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n         p = testdir.makepyfile(\n             \"\"\"\n             import pytest\n",
  "pytest-dev__pytest-7521": "",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..b584ac2 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import pytest\n@@ -27,6 +28,33 @@ def test_change_level(caplog):\n     assert \"CRITICAL\" in caplog.text\n \n \n+def test_change_level_undo_handler_level(testdir: Testdir) -> None:\n+    \"\"\"Ensure that 'set_level' is undone after the end of the test (handler).\n+\n+    Issue #7569. Tests the handler level specifically.\n+    \"\"\"\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test1(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(41)\n+            assert caplog.handler.level == 41\n+\n+        def test2(caplog):\n+            assert caplog.handler.level == 0\n+\n+        def test3(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(43)\n+            assert caplog.handler.level == 43\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=3)\n+\n+\n def test_change_level_undo(testdir):\n     \"\"\"Ensure that 'set_level' is undone after the end of the test\"\"\"\n     testdir.makepyfile(\n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..4f8b185 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,3 +1,4 @@\n+\n import os\n import pprint\n import sys\n@@ -9,7 +10,7 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n-from _pytest.pytester import Testdir\n+from _pytest.pytester import Testdir, Pytester\n \n \n class TestCollector:\n@@ -1175,6 +1176,15 @@ def test_collect_symlink_out_of_tree(testdir):\n             \"test_real.py::test_nodeid PASSED\"\n         ]\n     )\n+    \n+def test_nested_symlink_dir(pytester: Pytester) -> None:\n+    \"\"\"A nested symlinked directory is collected.\"\"\"\n+    outer_dir = pytester.mkdir(\"outer\")\n+    nested_dir = outer_dir.mkdir(\"nested\")\n+    nested_dir.joinpath(\"test_nested.py\").write_text(\"def test_nested(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_outer\").symlink_to(outer_dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n     assert result.ret == 0\n \n \n",
  "pytest-dev__pytest-8399": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 2c720b0..6fa19cf 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -301,8 +301,28 @@ def test_setup_setUpClass(pytester: Pytester) -> None:\n     reprec = pytester.inline_run(testpath)\n     reprec.assertoutcome(passed=3)\n \n+def test_unittest_setUpClass_fixture_is_private(pytester: Pytester) -> None:\n+    \"\"\"Test that unittest setUpClass fixture is private and hidden by default.\"\"\"\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+        class MyTestCase(unittest.TestCase):\n+            @classmethod\n+            def setUpClass(cls):\n+                pass\n+            def test_func(self):\n+                pass\n+        \"\"\"\n+    )\n+    # Run pytest with --fixtures to check if the fixture is hidden by default\n+    result = pytester.runpytest(\"--fixtures\")\n+    assert result.ret == 0\n+    result.stdout.no_fnmatch_line(\"*unittest_setUpClass_fixture_MyTestCase*\")\n \n-def test_setup_class(pytester: Pytester) -> None:\n+    # Run pytest with --fixtures -v to check if the fixture is visible in verbose mode\n+    result = pytester.runpytest(\"--fixtures\", \"-v\")\n+    assert result.ret == 0\n+    result.stdout.fnmatch_lines([\"*unittest_setUpClass_fixture_MyTestCase*\"])\n     testpath = pytester.makepyfile(\n         \"\"\"\n         import unittest\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..4101e34 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -598,7 +598,34 @@ def test_ridgecv_store_cv_values():\n     assert_equal(r.cv_values_.shape, (n_samples, n_responses, n_alphas))\n \n \n-def test_ridgecv_sample_weight():\n+def test_ridge_classifier_cv_store_cv_values():\n+    from numpy.testing import assert_array_equal\n+    from sklearn.linear_model import RidgeClassifierCV\n+    import numpy as np\n+\n+    # Test that RidgeClassifierCV correctly handles store_cv_values parameter\n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-.8, -1.0],\n+                  [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+\n+    n_samples = x.shape[0]\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+    # with len(y.shape) == 1\n+    n_targets = 1\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_alphas)\n+\n+    # with len(y.shape) == 2\n+    y = np.array([[1, 1, 1, -1, -1],\n+                  [1, -1, 1, -1, 1],\n+                  [-1, -1, 1, -1, -1]]).transpose()\n+    n_targets = y.shape[1]\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n     rng = np.random.RandomState(0)\n     alphas = (0.1, 1.0, 10.0)\n \n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..1d3b411 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -184,7 +184,16 @@ def test_int_overflow_mutual_info_score():\n     assert_all_finite(mutual_info_score(x.ravel(), y.ravel()))\n \n \n-def test_entropy():\n+def test_fowlkes_mallows_score_overflow():\n+    # Test case to check overflow in fowlkes_mallows_score\n+    # Construct labels such that pk and qk are large\n+    labels_true = np.array([0] * 100000 + [1] * 100000)\n+    labels_pred = np.array([0] * 50000 + [1] * 50000 + [0] * 50000 + [1] * 50000)\n+\n+    # Call fowlkes_mallows_score and ensure it doesn't produce a RuntimeWarning\n+    score = fowlkes_mallows_score(labels_true, labels_pred)\n+    assert_all_finite(score)\n+    assert 0 <= score <= 1\n     ent = entropy([0, 0, 42.])\n     assert_almost_equal(ent, 0.6365141, 5)\n     assert_almost_equal(entropy([]), 1)\n",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..29a7ab4 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -558,8 +558,24 @@ def test_feature_names():\n     for idx, name in enumerate(feature_names):\n         assert_equal(idx, cv.vocabulary_.get(name))\n \n-\n-def test_vectorizer_max_features():\n+def test_countvectorizer_custom_vocabulary_get_feature_names():\n+    vocab = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    cv = CountVectorizer(vocabulary=vocab)\n+    \n+    # get_feature_names should not raise an error since vocabulary is provided\n+    feature_names = cv.get_feature_names()\n+    assert_array_equal(vocab, feature_names)\n+\n+    # Ensure that the vocabulary_ attribute is set correctly after transformation\n+    corpus = [\n+        'This is the first document.',\n+        'This is the second second document.',\n+        'And the third one.',\n+        'Is this the first document?',\n+    ]\n+    result = cv.transform(corpus)\n+    assert result.shape == (4, 9)\n+    assert hasattr(cv, \"vocabulary_\")\n     vec_factories = (\n         CountVectorizer,\n         TfidfVectorizer,\n",
  "scikit-learn__scikit-learn-11310": "diff --git a/sklearn/model_selection/tests/test_search.py b/sklearn/model_selection/tests/test_search.py\nindex 0b1d5f9..c01cc38 100644\n--- a/sklearn/model_selection/tests/test_search.py\n+++ b/sklearn/model_selection/tests/test_search.py\n@@ -1161,17 +1161,27 @@ def test_search_cv_timing():\n \n     for search in (gs, rs):\n         search.fit(X, y)\n-        for key in ['mean_fit_time', 'std_fit_time']:\n+        for key in ['mean_fit_time', 'std_fit_time', 'refit_time_']:\n             # NOTE The precision of time.time in windows is not high\n             # enough for the fit/score times to be non-zero for trivial X and y\n             assert_true(np.all(search.cv_results_[key] >= 0))\n             assert_true(np.all(search.cv_results_[key] < 1))\n \n+        # Check the refit_time_ attribute\n+        assert_true(hasattr(search, \"refit_time_\"))\n+        assert_true(isinstance(search.refit_time_, float))\n+        assert_greater_equal(search.refit_time_, 0)\n+\n         for key in ['mean_score_time', 'std_score_time']:\n             assert_true(search.cv_results_[key][1] >= 0)\n             assert_true(search.cv_results_[key][0] == 0.0)\n             assert_true(np.all(search.cv_results_[key] < 1))\n \n+        # Check the refit_time_ attribute\n+        assert_true(hasattr(search, \"refit_time_\"))\n+        assert_true(isinstance(search.refit_time_, float))\n+        assert_greater_equal(search.refit_time_, 0)\n+\n \n def test_grid_search_correct_score_results():\n     # test that correct scores are used\n",
  "scikit-learn__scikit-learn-11578": "",
  "scikit-learn__scikit-learn-12585": "diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 4752f9c..5e74f8c 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -154,6 +154,22 @@ def test_clone_nan():\n     assert clf.empty is clf2.empty\n \n \n+from sklearn.base import clone\n+\n+class MyEstimator:\n+    def __init__(self, empty=None):\n+        self.empty = empty\n+\n+    def get_params(self, deep=True):\n+        return {\"empty\": self.empty}\n+\n+def test_clone_estimator_types():\n+    # Check that clone works for parameters that are types rather than instances\n+    clf = MyEstimator(empty=MyEstimator)\n+    clf2 = clone(clf)\n+\n+    assert clf.empty is clf2.empty\n+\n def test_clone_sparse_matrices():\n     sparse_matrix_classes = [\n         getattr(sp, name)\n",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..db1ce4a 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -5,6 +5,28 @@ from distutils.version import LooseVersion\n import numpy as np\n from scipy import linalg\n \n+import numpy as np\n+\n+@pytest.mark.parametrize('init_copy_X, fit_copy_X', [(True, None), (False, None), (True, True), (True, False), (False, True), (False, False)])\n+def test_lasso_lars_copyX_combined_behaviour(init_copy_X, fit_copy_X):\n+    \"\"\"\n+    Test the combined behavior of copy_X set during initialization and in fit method.\n+    If fit method has copy_X=None, the initialization value is used; otherwise, fit value overrides.\n+    \"\"\"\n+    lasso_lars = LassoLarsIC(copy_X=init_copy_X, precompute=False)\n+    rng = np.random.RandomState(42)\n+    X = rng.normal(0, 1, (100, 5))\n+    X_copy = X.copy()\n+    y = X[:, 2]\n+\n+    kwargs = {}\n+    if fit_copy_X is not None:\n+        kwargs['copy_X'] = fit_copy_X\n+\n+    lasso_lars.fit(X, y, **kwargs)\n+    expected_copy_X = init_copy_X if fit_copy_X is None else fit_copy_X\n+    assert expected_copy_X == np.array_equal(X, X_copy)\n+\n import pytest\n \n from sklearn.model_selection import train_test_split\n@@ -18,7 +40,7 @@ from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import TempMemmap\n from sklearn.exceptions import ConvergenceWarning\n from sklearn import linear_model, datasets\n-from sklearn.linear_model.least_angle import _lars_path_residues\n+from sklearn.linear_model.least_angle import _lars_path_residues, LassoLarsIC\n \n diabetes = datasets.load_diabetes()\n X, y = diabetes.data, diabetes.target\n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..b870ebc 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -494,7 +494,35 @@ def test_shuffle_stratifiedkfold():\n     check_cv_coverage(kf0, X_40, y, groups=None, expected_n_splits=5)\n \n \n-def test_kfold_can_detect_dependent_samples_on_digits():  # see #2372\n+def test_stratifiedkfold_shuffle_effectiveness():\n+    # Ensure that shuffling with different random states produces different splits\n+    X = np.arange(20)\n+    y = [0] * 10 + [1] * 10\n+\n+    kf1 = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n+    kf2 = StratifiedKFold(n_splits=5, shuffle=True, random_state=43)\n+\n+    all_test_idx_1 = [test_idx for _, test_idx in kf1.split(X, y)]\n+    all_test_idx_2 = [test_idx for _, test_idx in kf2.split(X, y)]\n+\n+    for test_idx_1, test_idx_2 in zip(all_test_idx_1, all_test_idx_2):\n+        assert set(test_idx_1) != set(test_idx_2), \\\n+            \"Shuffling should produce different test sets for different random states\"\n+\n+def test_stratifiedkfold_no_shuffle():\n+    # Ensure that when shuffle is False, the splits are the same regardless of random_state\n+    X = np.arange(20)\n+    y = [0] * 10 + [1] * 10\n+\n+    kf1 = StratifiedKFold(n_splits=5, shuffle=False, random_state=42)\n+    kf2 = StratifiedKFold(n_splits=5, shuffle=False, random_state=43)\n+\n+    all_test_idx_1 = [test_idx for _, test_idx in kf1.split(X, y)]\n+    all_test_idx_2 = [test_idx for _, test_idx in kf2.split(X, y)]\n+\n+    for test_idx_1, test_idx_2 in zip(all_test_idx_1, all_test_idx_2):\n+        assert set(test_idx_1) == set(test_idx_2), \\\n+            \"Without shuffling, test sets should be the same regardless of random state\"\n     # The digits samples are dependent: they are apparently grouped by authors\n     # although we don't have any information on the groups segment locations\n     # for this data. We can highlight this fact by computing k-fold cross-\n",
  "scikit-learn__scikit-learn-13135": "diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py\nindex a18a1c5..aa1e6d0 100644\n--- a/sklearn/preprocessing/tests/test_discretization.py\n+++ b/sklearn/preprocessing/tests/test_discretization.py\n@@ -185,11 +185,11 @@ def test_invalid_strategy_option():\n \n \n @pytest.mark.parametrize(\n-    'strategy, expected_2bins, expected_3bins',\n-    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2]),\n-     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2]),\n-     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2])])\n-def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n+    'strategy, expected_2bins, expected_3bins, expected_5bins',\n+    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2], [0, 0, 1, 1, 4, 4]),\n+     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2], [0, 0, 1, 2, 3, 4]),\n+     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2], [0, 1, 2, 3, 4, 4])])\n+def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins, expected_5bins):\n     X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n \n     # with 2 bins\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..3f3a0c6 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -597,6 +597,14 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_array_equal(Y_pred1, Y_pred2)\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n+\n \n def test_gaussian_mixture_fit():\n     # recover the ground truth\n",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\nindex 318940e..9ce7065 100644\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -1057,8 +1057,32 @@ def test_pipeline_memory():\n     finally:\n         shutil.rmtree(cachedir)\n \n-\n-def test_make_pipeline_memory():\n+def test_pipeline_len():\n+    from sklearn import svm\n+    from sklearn.datasets import make_classification\n+    from sklearn.feature_selection import SelectKBest\n+    from sklearn.feature_selection import f_regression\n+    from sklearn.pipeline import Pipeline\n+    \n+    # Generate some data\n+    X, y = make_classification(n_informative=5, n_redundant=0, random_state=42)\n+    \n+    # Create a pipeline with two steps\n+    anova_filter = SelectKBest(f_regression, k=5)\n+    clf = svm.SVC(kernel='linear')\n+    pipe = Pipeline([('anova', anova_filter), ('svc', clf)])\n+    \n+    # Test that the length of the pipeline is correct\n+    assert len(pipe) == 2\n+    \n+    # Test that indexing works properly\n+    sub_pipeline = pipe[:1]\n+    assert len(sub_pipeline) == 1\n+    assert sub_pipeline[0] == anova_filter\n+\n+    # Test a pipeline with no steps\n+    empty_pipe = Pipeline([])\n+    assert len(empty_pipe) == 0\n     cachedir = mkdtemp()\n     if LooseVersion(joblib_version) < LooseVersion('0.12'):\n         # Deal with change of API in joblib\n@@ -1070,4 +1094,4 @@ def test_make_pipeline_memory():\n     pipeline = make_pipeline(DummyTransf(), SVC())\n     assert pipeline.memory is None\n \n-    shutil.rmtree(cachedir)\n+    shutil.rmtree(cachedir)\n",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..f4289c2 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -9,6 +10,8 @@ Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n import pytest\n \n import numpy as np\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n \n from sklearn.utils.testing import assert_array_equal\n from sklearn.utils.testing import assert_array_almost_equal\n",
  "scikit-learn__scikit-learn-13779": "",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..fd08cc1 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -381,7 +381,21 @@ def test_export_text():\n     \"\"\").lstrip()\n     assert export_text(clf, max_depth=0) == expected_report\n \n-    X_mo = [[-2, -1], [-1, -1], [-1, -2], [1, 1], [1, 2], [2, 1]]\n+    # Test for single feature tree\n+    X_single = [[-2], [-1], [-1], [1], [1], [2]]\n+    y_single = [-1, -1, -1, 1, 1, 1]\n+    clf_single = DecisionTreeClassifier(max_depth=2, random_state=0)\n+    clf_single.fit(X_single, y_single)\n+\n+    expected_report_single = dedent(\"\"\"\n+    |--- feature_0 <= 0.00\n+    |   |--- class: -1\n+    |--- feature_0 >  0.00\n+    |   |--- class: 1\n+    \"\"\").lstrip()\n+\n+    assert export_text(clf_single) == expected_report_single\n+    assert export_text(clf_single, feature_names=['single_feature']) == expected_report_single\n     y_mo = [[-1, -1], [-1, -1], [-1, -1], [1, 1], [1, 1], [1, 1]]\n \n     reg = DecisionTreeRegressor(max_depth=2, random_state=0)\n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..be34ba3 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1532,7 +1532,27 @@ def test_LogisticRegressionCV_GridSearchCV_elastic_net_ovr():\n     assert (lrcv.predict(X_test) == gs.predict(X_test)).mean() >= .8\n \n \n-@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial'))\n+@pytest.mark.parametrize('penalty', ('l2', 'elasticnet'))\n+@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial', 'auto'))\n+def test_LogisticRegressionCV_no_refit_edge_cases(penalty, multi_class):\n+    # Additional test cases for LogisticRegressionCV with refit=False\n+    n_samples = 100\n+    n_features = 10\n+    n_classes = 2\n+    X, y = make_classification(n_samples=n_samples, n_features=n_features, n_classes=n_classes, n_informative=5, random_state=42)\n+\n+    if penalty == 'elasticnet':\n+        l1_ratios = np.linspace(0, 1, 3)\n+    else:\n+        l1_ratios = None\n+\n+    lrcv = LogisticRegressionCV(penalty=penalty, Cs=[0.1, 1, 10], solver='saga', l1_ratios=l1_ratios, multi_class=multi_class, refit=False, random_state=0)\n+    lrcv.fit(X, y)\n+    \n+    assert lrcv.C_.shape == (n_classes,)\n+    if l1_ratios is not None:\n+        assert lrcv.l1_ratio_.shape == (n_classes,)\n+    assert lrcv.coef_.shape == (n_classes, n_features)\n def test_LogisticRegressionCV_no_refit(multi_class):\n     # Test LogisticRegressionCV attribute shapes when refit is False\n \n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/tests/test_show_versions.py b/sklearn/utils/tests/test_show_versions.py\nindex fa39255..cdaeb3f 100644\n--- a/sklearn/utils/tests/test_show_versions.py\n+++ b/sklearn/utils/tests/test_show_versions.py\n@@ -13,6 +13,12 @@ def test_get_sys_info():\n \n \n def test_get_deps_info():\n+    assert 'joblib' in deps_info, \"joblib should be listed in dependencies\"\n+\n+def test_show_versions_contains_joblib(capsys):\n+    show_versions()\n+    out, err = capsys.readouterr()\n+    assert 'joblib' in out, \"joblib should be included in the output of show_versions\"\n     deps_info = _get_deps_info()\n \n     assert 'pip' in deps_info\n@@ -30,4 +36,4 @@ def test_show_versions_with_blas(capsys):\n     out, err = capsys.readouterr()\n     assert 'python' in out\n     assert 'numpy' in out\n-    assert 'BLAS' in out\n+    assert 'BLAS' in out\n",
  "scikit-learn__scikit-learn-14496": "diff --git a/sklearn/cluster/tests/test_optics.py b/sklearn/cluster/tests/test_optics.py\nindex 6c9dac3..f3b757e 100644\n--- a/sklearn/cluster/tests/test_optics.py\n+++ b/sklearn/cluster/tests/test_optics.py\n@@ -125,6 +125,32 @@ def test_extract_xi():\n     assert_array_equal(clust.labels_, expected_labels)\n \n \n+def test_optics_float_min_samples():\n+    # Test with min_samples as a float to ensure it converts to int properly\n+\n+    rng = np.random.RandomState(0)\n+    n_points_per_cluster = 5\n+\n+    # Create example data\n+    C1 = [-5, -2] + .8 * rng.randn(n_points_per_cluster, 2)\n+    C2 = [4, -1] + .1 * rng.randn(n_points_per_cluster, 2)\n+    C3 = [1, -2] + .2 * rng.randn(n_points_per_cluster, 2)\n+    X = np.vstack((C1, C2, C3))\n+    expected_labels = np.r_[[0] * 5, [1] * 5, [2] * 5]\n+    X, expected_labels = shuffle(X, expected_labels, random_state=rng)\n+\n+    # Run OPTICS with float min_samples\n+    clust = OPTICS(min_samples=0.1, min_cluster_size=0.08,\n+                   max_eps=20, cluster_method='xi', xi=0.4).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n+\n+    # Check if the adjustment to min_samples (should be >= 2) is maintained\n+    assert clust.min_samples_ >= 2\n+\n+    # Check if min_samples is properly converted to an integer\n+    assert isinstance(clust.min_samples_, int)\n+\n+\n def test_cluster_hierarchy_():\n     rng = np.random.RandomState(0)\n     n_points_per_cluster = 100\n",
  "scikit-learn__scikit-learn-14710": "",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..1f8c890 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,6 +680,22 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n+from scipy import sparse\n+import numpy as np\n+from sklearn import svm\n+\n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for SVR with sparse input having empty support_vectors_\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size, \"Support vectors should be empty\"\n+    assert not model.dual_coef_.data.size, \"Dual coefficients should be empty\"\n+\n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..0f7ff80 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -97,8 +97,26 @@ def test_strip_accents():\n     expected = 'this is a test'\n     assert strip_accents_unicode(a) == expected\n \n-\n-def test_to_ascii():\n+    # Additional test cases for strings in NFKD form\n+    \n+    # Single character with combining accent\n+    s1 = '\u00f1'  # LATIN SMALL LETTER N WITH TILDE\n+    expected = 'n'\n+    assert strip_accents_unicode(s1) == expected\n+\n+    # Decomposed form: n + combining tilde\n+    s2 = 'n\\u0303'\n+    assert strip_accents_unicode(s2) == expected\n+\n+    # String with multiple combining accents\n+    s3 = 'o\\u0308\\u0304'  # o with diaeresis and macron\n+    expected = 'o'\n+    assert strip_accents_unicode(s3) == expected\n+\n+    # Combining marks by themselves\n+    combining_marks = '\\u0300\\u0301\\u0302\\u0303'  # grave, acute, circumflex, tilde\n+    expected = ''\n+    assert strip_accents_unicode(combining_marks) == expected\n     # check some classical latin accentuated symbols\n     a = '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb'\n     expected = 'aaaaaaceeee'\n",
  "scikit-learn__scikit-learn-25102": "diff --git a/sklearn/feature_selection/tests/test_base.py b/sklearn/feature_selection/tests/test_base.py\nindex bf2d07e..e2ef2c3 100644\n--- a/sklearn/feature_selection/tests/test_base.py\n+++ b/sklearn/feature_selection/tests/test_base.py\n@@ -108,9 +108,102 @@ def test_inverse_transform_sparse():\n     with pytest.raises(ValueError):\n         sel.inverse_transform(np.array([[1], [2]]))\n \n-\n-def test_get_support():\n+def test_output_dataframe():\n+    \"\"\"Check output dtypes for dataframes is consistent with the input dtypes.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+\n+    # Create a DataFrame with various dtypes\n+    X = pd.DataFrame(\n+        {\n+            \"a\": pd.Series([1.0, 2.4, 4.5], dtype=np.float32),\n+            \"b\": pd.Series([\"a\", \"b\", \"a\"], dtype=\"category\"),\n+            \"c\": pd.Series([\"j\", \"b\", \"b\"], dtype=\"category\"),\n+            \"d\": pd.Series([3.0, 2.4, 1.2], dtype=np.float64),\n+        }\n+    )\n+\n+    for step in [2, 3]:\n+        sel = StepSelector(step=step).set_output(transform=\"pandas\")\n+        sel.fit(X)\n+\n+        output = sel.transform(X)\n+        for name, dtype in output.dtypes.items():\n+            assert dtype == X.dtypes[name]\n+\n+    # step=0 will select nothing\n+    sel0 = StepSelector(step=0).set_output(transform=\"pandas\")\n+    sel0.fit(X)\n+\n+    msg = \"No features were selected\"\n+    with pytest.warns(UserWarning, match=msg):\n+        output0 = sel0.transform(X)\n+\n+    assert_array_equal(output0.index, X.index)\n+    assert output0.shape == (X.shape[0], 0)\n+\n+def test_dataframe_output_dtypes():\n+    \"\"\"Check that the output dataframe dtypes are the same as the input.\n+\n+    Non-regression test for gh-24860.\n+    \"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+\n+    X, y = load_iris(return_X_y=True, as_frame=True)\n+    X = X.astype(\n+        {\n+            \"petal length (cm)\": np.float32,\n+            \"petal width (cm)\": np.float64,\n+        }\n+    )\n+    X[\"petal_width_binned\"] = pd.cut(X[\"petal width (cm)\"], bins=10)\n+\n+    column_order = X.columns\n+\n+    def selector(X, y):\n+        ranking = {\n+            \"sepal length (cm)\": 1,\n+            \"sepal width (cm)\": 2,\n+            \"petal length (cm)\": 3,\n+            \"petal width (cm)\": 4,\n+            \"petal_width_binned\": 5,\n+        }\n+        return np.asarray([ranking[name] for name in column_order])\n+\n+    univariate_filter = SelectKBest(selector, k=3).set_output(transform=\"pandas\")\n+    output = univariate_filter.fit_transform(X, y)\n+\n+    assert_array_equal(\n+        output.columns, [\"petal length (cm)\", \"petal width (cm)\", \"petal_width_binned\"]\n+    )\n+    for name, dtype in output.dtypes.items():\n+        assert dtype == X.dtypes[name]\n+\n+# Additional test to cover more dtype cases\n+def test_preserve_custom_dtypes():\n+    \"\"\"Ensure that transformers preserve custom and mixed dtypes.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+\n+    X, y = load_iris(return_X_y=True, as_frame=True)\n+    X = X.astype(\n+        {\n+            \"sepal length (cm)\": np.float32,\n+            \"sepal width (cm)\": pd.Int32Dtype(),\n+        }\n+    )\n+    X[\"species\"] = y.astype(\"category\")\n+\n+    selector = SelectKBest(chi2, k=2).set_output(transform=\"pandas\")\n+    X_out = selector.fit_transform(X, y)\n+\n+    expected_dtypes = {\n+        \"sepal length (cm)\": np.float32,\n+        \"species\": \"category\"\n+    }\n+    \n+    assert list(X_out.columns) == list(expected_dtypes.keys())\n+    for column, dtype in expected_dtypes.items():\n+        assert X_out[column].dtype == dtype\n     sel = StepSelector()\n     sel.fit(X, y)\n     assert_array_equal(support, sel.get_support())\n-    assert_array_equal(support_inds, sel.get_support(indices=True))\n+    assert_array_equal(support_inds, sel.get_support(indices=True))\n",
  "scikit-learn__scikit-learn-25232": "diff --git a/sklearn/impute/tests/test_impute.py b/sklearn/impute/tests/test_impute.py\nindex ee482a8..926adbb 100644\n--- a/sklearn/impute/tests/test_impute.py\n+++ b/sklearn/impute/tests/test_impute.py\n@@ -1515,6 +1515,48 @@ def test_iterative_imputer_keep_empty_features(initial_strategy):\n     \"\"\"\n     X = np.array([[1, np.nan, 2], [3, np.nan, np.nan]])\n \n+def test_iterative_imputer_constant_fill_value():\n+    \"\"\"Check that we propagate properly the parameter `fill_value`.\"\"\"\n+    X = np.array([[-1, 2, 3, -1], [4, -1, 5, -1], [6, 7, -1, -1], [8, 9, 0, -1]])\n+\n+    fill_value = 100\n+    imputer = IterativeImputer(\n+        missing_values=-1,\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+    )\n+    X_imputed = imputer.fit_transform(X)\n+    assert_array_equal(imputer.initial_imputer_.statistics_, np.array([fill_value] * X.shape[1]))\n+\n+def test_iterative_imputer_constant_fill_value_nan():\n+    \"\"\"Check that fill_value can be set to np.nan.\"\"\"\n+    X = np.array([[-1, 2, 3, -1], [4, -1, 5, -1], [6, 7, -1, -1], [8, 9, 0, -1]])\n+\n+    fill_value = np.nan\n+    imputer = IterativeImputer(\n+        missing_values=-1,\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+    )\n+    X_imputed = imputer.fit_transform(X)\n+    assert np.all(np.isnan(imputer.initial_imputer_.statistics_))\n+\n+def test_iterative_imputer_fill_value_different_data_types():\n+    \"\"\"Check fill_value for different data types.\"\"\"\n+    X = np.array([[\"?\", 2, 3, \"?\"], [4, \"?\", 5, \"?\"], [6, 7, \"?\", \"?\"], [8, 9, 0, \"?\"]])\n+\n+    fill_value = \"missing\"\n+    imputer = IterativeImputer(\n+        missing_values=\"?\",\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+    )\n+    X_imputed = imputer.fit_transform(X)\n+    assert_array_equal(imputer.initial_imputer_.statistics_, np.array([fill_value] * X.shape[1]))\n+\n     imputer = IterativeImputer(\n         initial_strategy=initial_strategy, keep_empty_features=True\n     )\n",
  "scikit-learn__scikit-learn-25931": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3714d1a..2472fd8 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -330,12 +330,40 @@ def test_iforest_with_n_jobs_does_not_segfault():\n def test_base_estimator_property_deprecated():\n     X = np.array([[1, 2], [3, 4]])\n     y = np.array([1, 0])\n-    model = IsolationForest()\n-    model.fit(X, y)\n+from sklearn.ensemble import IsolationForest\n+import pandas as pd\n+import numpy as np\n+import warnings\n+import pytest\n+\n+def test_iforest_preserve_feature_names():\n+    \"\"\"Check that feature names are preserved when contamination is not \"auto\".\n+    \n+    Feature names are required for consistency checks during scoring.\n+    \n+    Non-regression test for Issue #25844\n+    \"\"\"\n+    rng = np.random.RandomState(0)\n+    X = pd.DataFrame(data=rng.randn(4, 1), columns=[\"a\"])\n+    model = IsolationForest(random_state=0, contamination=0.05)\n+\n+    with warnings.catch_warnings():\n+        warnings.simplefilter(\"error\", UserWarning)\n+        model.fit(X)\n+\n+def test_iforest_no_warning_with_dataframe():\n+    \"\"\"Ensure no warning is raised when fitting with a DataFrame.\"\"\"\n+    X = pd.DataFrame({\"feature1\": [-1.1, 0.3, 0.5, 100.0]})\n+    clf = IsolationForest(contamination=0.05, random_state=42)\n+    \n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        clf.fit(X)\n+        assert all('X does not have valid feature names' not in str(warning.message) for warning in w)\n \n     warn_msg = (\n         \"Attribute `base_estimator_` was deprecated in version 1.2 and \"\n         \"will be removed in 1.4. Use `estimator_` instead.\"\n     )\n     with pytest.warns(FutureWarning, match=warn_msg):\n-        model.base_estimator_\n+        model.base_estimator_\n",
  "scikit-learn__scikit-learn-25973": "diff --git a/sklearn/feature_selection/tests/test_sequential.py b/sklearn/feature_selection/tests/test_sequential.py\nindex 42e1fbb..0332293 100644\n--- a/sklearn/feature_selection/tests/test_sequential.py\n+++ b/sklearn/feature_selection/tests/test_sequential.py\n@@ -313,4 +313,33 @@ def test_backward_neg_tol():\n     new_score = lr.fit(Xr, y).score(Xr, y)\n \n     assert 0 < sfs.get_support().sum() < X.shape[1]\n-    assert new_score < initial_score\n+    assert new_score < initial_score\n+\n+def test_sequential_feature_selector_with_splits():\n+    \"\"\"Test SequentialFeatureSelector with an iterable of splits (generator)\"\"\"\n+    from sklearn.datasets import make_classification\n+    from sklearn.feature_selection import SequentialFeatureSelector\n+    from sklearn.neighbors import KNeighborsClassifier\n+    from sklearn.model_selection import LeaveOneGroupOut\n+    import numpy as np\n+\n+    # Creating a simple classification dataset\n+    X, y = make_classification(n_samples=100, n_features=20, random_state=42)\n+\n+    # Creating groups for LeaveOneGroupOut\n+    groups = np.zeros_like(y, dtype=int)\n+    groups[y.size // 2:] = 1\n+\n+    # Creating the LeaveOneGroupOut cross-validator\n+    cv = LeaveOneGroupOut()\n+    splits = cv.split(X, y, groups=groups)\n+\n+    # Instantiating the KNeighborsClassifier and SequentialFeatureSelector\n+    clf = KNeighborsClassifier(n_neighbors=5)\n+    sfs = SequentialFeatureSelector(clf, n_features_to_select=5, scoring='accuracy', cv=splits)\n+\n+    # Fitting the SequentialFeatureSelector, ensuring no exceptions raised\n+    sfs.fit(X, y)\n+\n+    # Assert that the number of selected features is as expected\n+    assert sfs.get_support().sum() == 5\n",
  "scikit-learn__scikit-learn-26323": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex b52e888..e63d723 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -20,6 +20,10 @@ from sklearn.compose import (\n     make_column_selector,\n )\n from sklearn.exceptions import NotFittedError\n+import pytest\n+import pandas as pd\n+import numpy as np\n+from sklearn.feature_selection import VarianceThreshold\n from sklearn.preprocessing import FunctionTransformer\n from sklearn.preprocessing import StandardScaler, Normalizer, OneHotEncoder\n \n@@ -2178,6 +2182,40 @@ def test_raise_error_if_index_not_aligned():\n         ],\n     )\n     ct.set_output(transform=\"pandas\")\n+\n+def test_remainder_set_output():\n+    \"\"\"Check that the output is set for the remainder.\n+\n+    Non-regression test for the issue where `remainder` is an estimator.\n+    \"\"\"\n+\n+    df = pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3]})\n+\n+    # Test with estimator as remainder\n+    ct = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+\n+    out = ct.fit_transform(df)\n+    pd.testing.assert_frame_equal(out, df)\n+\n+    ct.set_output(transform=\"default\")\n+    out = ct.fit_transform(df)\n+    assert isinstance(out, np.ndarray)\n+\n+    # Test with explicit column selectors without remainder\n+    ct_no_remainder = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        (VarianceThreshold(), make_column_selector(dtype_exclude=bool)),\n+        verbose_feature_names_out=False,\n+    )\n+    ct_no_remainder.set_output(transform=\"pandas\")\n+\n+    out_no_remainder = ct_no_remainder.fit_transform(df)\n+    pd.testing.assert_frame_equal(out_no_remainder, df)\n     msg = (\n         \"Concatenating DataFrames from the transformer's output lead to\"\n         \" an inconsistent number of samples. The output may have Pandas\"\n",
  "scikit-learn__scikit-learn-9288": "diff --git a/sklearn/cluster/tests/test_k_means.py b/sklearn/cluster/tests/test_k_means.py\nindex abeeff0..1c46b02 100644\n--- a/sklearn/cluster/tests/test_k_means.py\n+++ b/sklearn/cluster/tests/test_k_means.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for K-means\"\"\"\n import sys\n \n@@ -944,8 +945,43 @@ def test_k_means_empty_cluster_relocated():\n     assert len(set(km.labels_)) == 2\n     assert_allclose(km.cluster_centers_, [[-1], [1]])\n \n+def test_result_of_kmeans_equal_in_diff_n_jobs():\n+    # PR 9288\n+    rnd = np.random.RandomState(0)\n+    X = rnd.normal(size=(50, 10))\n+\n+    result_1 = KMeans(n_clusters=3, random_state=0, n_jobs=1).fit(X).labels_\n+    result_2 = KMeans(n_clusters=3, random_state=0, n_jobs=2).fit(X).labels_\n+    assert_array_equal(result_1, result_2)\n+\n+\n+def test_kmeans_inertia_consistency_across_n_jobs():\n+    # Test inertia consistency when n_jobs parameter is varied\n+    rnd = np.random.RandomState(42)\n+    X = rnd.normal(size=(1000, 20))\n+\n+    inertia_1 = KMeans(n_clusters=5, random_state=42, n_jobs=1).fit(X).inertia_\n+    inertia_2 = KMeans(n_clusters=5, random_state=42, n_jobs=2).fit(X).inertia_\n+    inertia_3 = KMeans(n_clusters=5, random_state=42, n_jobs=3).fit(X).inertia_\n+    inertia_4 = KMeans(n_clusters=5, random_state=42, n_jobs=4).fit(X).inertia_\n+\n+    assert_almost_equal(inertia_1, inertia_2)\n+    assert_almost_equal(inertia_1, inertia_3)\n+    assert_almost_equal(inertia_1, inertia_4)\n+\n+def test_kmeans_labels_consistency_across_n_jobs():\n+    # Test labels consistency when n_jobs parameter is varied\n+    rnd = np.random.RandomState(42)\n+    X = rnd.normal(size=(1000, 20))\n+\n+    labels_1 = KMeans(n_clusters=5, random_state=42, n_jobs=1).fit(X).labels_\n+    labels_2 = KMeans(n_clusters=5, random_state=42, n_jobs=2).fit(X).labels_\n+    labels_3 = KMeans(n_clusters=5, random_state=42, n_jobs=3).fit(X).labels_\n+    labels_4 = KMeans(n_clusters=5, random_state=42, n_jobs=4).fit(X).labels_\n \n-def test_minibatch_kmeans_partial_fit_int_data():\n+    assert_array_equal(labels_1, labels_2)\n+    assert_array_equal(labels_1, labels_3)\n+    assert_array_equal(labels_1, labels_4)\n     # Issue GH #14314\n     X = np.array([[-1], [1]], dtype=np.int)\n     km = MiniBatchKMeans(n_clusters=2)\n",
  "sphinx-doc__sphinx-10323": "",
  "sphinx-doc__sphinx-10449": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 82ec43a..f3cf607 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1022,38 +1022,30 @@ def test_autodoc_typehints_description_no_undoc_doc_rtype(app):\n             '\\n'\n             '   Return type:\\n'\n             '      None\\n' == context)\n-\n+import pytest\n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\"})\n-def test_autodoc_typehints_description_with_documented_init(app):\n+def test_autodoc_typehints_description_no_return_type_for_class(app):\n     (app.srcdir / 'index.rst').write_text(\n-        '.. autoclass:: target.typehints._ClassWithDocumentedInit\\n'\n-        '   :special-members: __init__\\n',\n+        '.. autoclass:: target.typehints._ClassWithoutReturnType\\n',\n         encoding='utf8'\n     )\n     app.build()\n     context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n-    assert ('class target.typehints._ClassWithDocumentedInit(x)\\n'\n+    assert '   Return type:' not in context\n+    assert ('class target.typehints._ClassWithoutReturnType\\n'\n             '\\n'\n             '   Class docstring.\\n'\n             '\\n'\n-            '   Parameters:\\n'\n-            '      **x** (*int*) --\\n'\n-            '\\n'\n-            '   Return type:\\n'\n-            '      None\\n'\n-            '\\n'\n-            '   __init__(x)\\n'\n+            '   __init__(width, height)\\n'\n             '\\n'\n             '      Init docstring.\\n'\n             '\\n'\n             '      Parameters:\\n'\n-            '         **x** (*int*) -- Some integer\\n'\n-            '\\n'\n-            '      Return type:\\n'\n-            '         None\\n' == context)\n-\n+            '         **width** (*int*) -- Width of the square\\n'\n+            '         **height** (*int*) -- Height of the square\\n' == context)\n+import pytest\n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\",\n",
  "sphinx-doc__sphinx-10466": "diff --git a/tests/test_build_gettext.py b/tests/test_build_gettext.py\nindex a6fc946..0a719ec 100644\n--- a/tests/test_build_gettext.py\n+++ b/tests/test_build_gettext.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the build process with gettext builder with the test root.\"\"\"\n \n import gettext\n@@ -10,9 +11,31 @@ import pytest\n \n from sphinx.util.osutil import cd\n \n+from sphinx.builders.gettext import Catalog, MsgOrigin\n \n @pytest.mark.sphinx('gettext', srcdir='root-gettext')\n-def test_build_gettext(app):\n+def test_Catalog_unique_locations():\n+    # Create a Catalog instance.\n+    catalog = Catalog()\n+    \n+    # Add messages with duplicated locations.\n+    catalog.add('duplicate_test', MsgOrigin('/path/to/duplicate', 1))\n+    catalog.add('duplicate_test', MsgOrigin('/path/to/duplicate', 1))\n+    catalog.add('duplicate_test', MsgOrigin('/path/to/duplicate', 2))\n+    catalog.add('duplicate_test', MsgOrigin('/path/to/another', 1))\n+    \n+    # There should only be one message.\n+    assert len(list(catalog)) == 1\n+    \n+    # Check that the locations are unique and sorted.\n+    message = list(catalog)[0]\n+    expected_locations = [\n+        ('/path/to/duplicate', 1),\n+        ('/path/to/duplicate', 2),\n+        ('/path/to/another', 1)\n+    ]\n+    assert message.text == 'duplicate_test'\n+    assert sorted(message.locations) == sorted(expected_locations)\n     # Generic build; should fail only when the builder is horribly broken.\n     app.builder.build_all()\n \n",
  "sphinx-doc__sphinx-10673": "diff --git a/tests/test_environment_toctree.py b/tests/test_environment_toctree.py\nindex d3bf6a2..1cd85c6 100644\n--- a/tests/test_environment_toctree.py\n+++ b/tests/test_environment_toctree.py\n@@ -337,6 +337,16 @@ def test_get_toctree_for_includehidden(app):\n                  [list_item, compact_paragraph, reference, \"foo.1\"],\n                  [list_item, compact_paragraph, reference, \"foo.2\"]))\n \n+@pytest.mark.sphinx('html', testroot='toctree-index')\n+def test_toctree_with_indices(app):\n+    app.build()\n+    toctree = app.env.tocs['index']\n+    # Verify that the toctree contains entries for 'genindex', 'modindex', and 'search'\n+    assert_node(toctree[1][1][1], addnodes.toctree,\n+                caption=\"Indices\", glob=False, hidden=False,\n+                titlesonly=False, maxdepth=-1, numbered=0,\n+                entries=[(None, 'genindex'), (None, 'modindex'), (None, 'search')])\n+\n     assert_node(toctree[1][0][0][0], reference, refuri=\"foo\", secnumber=[1])\n     assert_node(toctree[1][0][1][0][0][0], reference, refuri=\"quux\", secnumber=[1, 1])\n     assert_node(toctree[1][0][1][1][0][0], reference, refuri=\"foo#foo-1\", secnumber=[1, 2])\n@@ -345,4 +355,4 @@ def test_get_toctree_for_includehidden(app):\n     assert_node(toctree[1][2][0][0], reference, refuri=\"http://sphinx-doc.org/\")\n \n     assert_node(toctree[2],\n-                [bullet_list, list_item, compact_paragraph, reference, \"baz\"])\n+                [bullet_list, list_item, compact_paragraph, reference, \"baz\"])\n",
  "sphinx-doc__sphinx-7440": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 975a00f..d984fbc 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -148,6 +148,34 @@ def test_glossary(app):\n     assert (\"term4\", \"term4\", \"term\", \"index\", \"term-term4\", -1) in objects\n \n \n+def test_glossary_case_sensitivity(app):\n+    text = (\".. glossary::\\n\"\n+            \"\\n\"\n+            \"   MySQL\\n\"\n+            \"       Description for MySQL\\n\"\n+            \"\\n\"\n+            \"   mysql\\n\"\n+            \"       Description for mysql\\n\")\n+\n+    # Parse the doctree\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (\n+        [glossary, definition_list, ([definition_list_item, ([term, (\"MySQL\", index)],\n+                                                             definition)],\n+                                     [definition_list_item, ([term, (\"mysql\", index)],\n+                                                             definition)])],\n+    ))\n+    assert_node(doctree[0][0][0][0][1],\n+                entries=[(\"single\", \"MySQL\", \"term-MySQL\", \"main\", None)])\n+    assert_node(doctree[0][0][0][1][1],\n+                entries=[(\"single\", \"mysql\", \"term-mysql\", \"main\", None)])\n+\n+    # Index\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert (\"MySQL\", \"MySQL\", \"term\", \"index\", \"term-MySQL\", -1) in objects\n+    assert (\"mysql\", \"mysql\", \"term\", \"index\", \"term-mysql\", -1) in objects\n+\n+\n def test_glossary_warning(app, status, warning):\n     # empty line between terms\n     text = (\".. glossary::\\n\"\n",
  "sphinx-doc__sphinx-7757": "",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..fd38bd2 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -11,6 +12,7 @@\n import abc\n import sys\n from importlib import import_module\n+from typing import TypeVar\n \n import pytest\n \n@@ -48,6 +50,21 @@ def test_MockObject():\n     obj = SubClass()\n     assert SubClass.__doc__ == \"docstring of SubClass\"\n     assert isinstance(obj, SubClass)\n+\n+    # Test for generic-typed classes\n+    T = TypeVar('T')\n+\n+    class GenericSubClass(mock.SomeClass[T]):\n+        \"\"\"docstring of GenericSubClass\"\"\"\n+\n+        def method(self) -> T:\n+            return \"generic_string\"\n+\n+    gen_obj = GenericSubClass()\n+    assert GenericSubClass.__doc__ == \"docstring of GenericSubClass\"\n+    assert isinstance(gen_obj, GenericSubClass)\n+    assert gen_obj.method() == \"generic_string\"\n+    assert isinstance(obj, SubClass)\n     assert obj.method() == \"string\"\n     assert isinstance(obj.other_method(), SubClass)\n \n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_napoleon.py b/tests/test_ext_napoleon.py\nindex 0676869..c3d6044 100644\n--- a/tests/test_ext_napoleon.py\n+++ b/tests/test_ext_napoleon.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_napoleon\n     ~~~~~~~~~~~~~\n@@ -12,8 +13,8 @@\n import sys\n from collections import namedtuple\n from unittest import TestCase, mock\n-\n from sphinx.application import Sphinx\n+import functools\n from sphinx.ext.napoleon import _process_docstring, _skip_member, Config, setup\n \n \n",
  "sphinx-doc__sphinx-7985": "",
  "sphinx-doc__sphinx-8035": "",
  "sphinx-doc__sphinx-8120": "diff --git a/tests/test_intl.py b/tests/test_intl.py\nindex 58339b1..f0e015a 100644\n--- a/tests/test_intl.py\n+++ b/tests/test_intl.py\n@@ -1282,10 +1282,44 @@ def test_image_glob_intl_using_figure_language_filename(app):\n                             'image/svg+xml': 'subdir/svgimg.svg'})\n \n     assert isinstance(doctree[0][3], nodes.figure)\n+\n+\n+from babel.messages.catalog import Catalog\n+from babel.messages.pofile import write_po\n+from sphinx import locale\n+\n+@pytest.mark.sphinx('html', testroot='basic', confoverrides={'language': 'da'})\n+def test_locale_override(make_app, app_params, sphinx_test_tempdir):\n+    try:\n+        # clear translators cache\n+        locale.translators.clear()\n+\n+        # prepare message catalog (.po)\n+        locale_dir = sphinx_test_tempdir / 'basic' / 'locale' / 'da' / 'LC_MESSAGES'\n+        locale_dir.makedirs()\n+        with (locale_dir / 'sphinx.po').open('wb') as f:\n+            catalog = Catalog()\n+            catalog.add('Fig. %s', 'Foobar %s')\n+            catalog.add('Listing %s', 'Whatever %s')\n+            write_po(f, catalog)\n+\n+        # construct application and convert po file to .mo\n+        args, kwargs = app_params\n+        app = make_app(*args, **kwargs)\n+        assert (locale_dir / 'sphinx.mo').exists()\n+        assert app.translator.gettext('Fig. %s') == 'Foobar %s'\n+        assert app.translator.gettext('Listing %s') == 'Whatever %s'\n+\n+        app.build()\n+        content = (app.outdir / 'index.html').read_text()\n+        assert 'Foobar 1' in content\n+        assert 'Whatever 1' in content\n+    finally:\n+        locale.translators.clear()\n     assert_node(doctree[0][3][0], nodes.image, uri='subdir/svgimg.*',\n                 candidates={'application/pdf': 'subdir/svgimg.pdf',\n                             'image/svg+xml': 'subdir/svgimg.svg'})\n \n \n def getwarning(warnings):\n-    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n+    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n",
  "sphinx-doc__sphinx-8269": "",
  "sphinx-doc__sphinx-8459": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex d1881df..9017d5f 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_configs\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -8,6 +9,33 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+import pytest\n+import sys\n+from sphinx.testing.util import SphinxTestApp\n+\n+@pytest.mark.skipif(sys.version_info < (3, 7), reason='python 3.7+ is required.')\n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    srcdir='autodoc_typehints_description_and_type_aliases',\n+                    confoverrides={'autodoc_typehints': \"description\",\n+                                   'autodoc_type_aliases': {'JSONObject': 'types.JSONObject'}})\n+def test_autodoc_typehints_with_aliases(app: SphinxTestApp):\n+    (app.srcdir / 'types.rst').write_text('.. autofunction:: types.sphinx_doc')\n+    app.build()\n+    context = (app.outdir / 'types.txt').read_text()\n+    assert ('types.sphinx_doc(data)\\n'\n+            '\\n'\n+            '   Does it work.\\n'\n+            '\\n'\n+            '   Parameters:\\n'\n+            '      * **data** (*types.JSONObject*) --\\n'\n+            '         Does it args.\\n'\n+            '\\n'\n+            '   Returns:\\n'\n+            '      Does it work in return.\\n'\n+            '\\n'\n+            '   Return type:\\n'\n+            '      types.JSONObject\\n') in context\n+\n import platform\n import sys\n \n",
  "sphinx-doc__sphinx-8475": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 41632e7..4858536 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -372,6 +372,27 @@ def test_connect_to_selfsigned_nonexistent_cert_file(app):\n     with https_server(OKHandler):\n         app.builder.build_all()\n \n+import json\n+import pytest\n+import http.server\n+from sphinx.testing.util import http_server\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_TooManyRedirects_on_HEAD(app):\n+    class InfiniteRedirectOnHeadHandler(http.server.BaseHTTPRequestHandler):\n+        def do_HEAD(self):\n+            self.send_response(302, \"Found\")\n+            self.send_header(\"Location\", \"http://localhost:7777/\")\n+            self.end_headers()\n+\n+        def do_GET(self):\n+            self.send_response(200, \"OK\")\n+            self.end_headers()\n+            self.wfile.write(b\"ok\\n\")\n+\n+    with http_server(InfiniteRedirectOnHeadHandler):\n+        app.builder.build_all()\n+\n     with open(app.outdir / 'output.json') as fp:\n         content = json.load(fp)\n     assert content == {\n@@ -381,4 +402,4 @@ def test_connect_to_selfsigned_nonexistent_cert_file(app):\n         \"lineno\": 1,\n         \"uri\": \"https://localhost:7777/\",\n         \"info\": \"Could not find a suitable TLS CA certificate bundle, invalid path: does/not/exist\",\n-    }\n+    }\n",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8721": "diff --git a/tests/test_ext_viewcode.py b/tests/test_ext_viewcode.py\nindex d4fba47..d97d319 100644\n--- a/tests/test_ext_viewcode.py\n+++ b/tests/test_ext_viewcode.py\n@@ -49,6 +49,9 @@ def test_viewcode(app, status, warning):\n             '<span>    &quot;&quot;&quot;</span></div>\\n') in result\n \n \n+import pytest\n+from pathlib import Path\n+\n @pytest.mark.sphinx(testroot='ext-viewcode', tags=['test_linkcode'])\n def test_linkcode(app, status, warning):\n     app.builder.build(['objects'])\n",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex 3c31d3d..facf7a7 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -515,8 +515,20 @@ def test_dict_customtype():\n     # Type is unsortable, just check that it does not crash\n     assert \"<CustomType(2)>: 2\" in description\n \n+import enum\n \n-def test_getslots():\n+def test_object_description_enum_signature():\n+    class MyEnum(enum.Enum):\n+        ValueA = 10\n+        ValueB = 20\n+\n+    def ugly_enum_func(e: MyEnum = MyEnum.ValueA) -> None:\n+        pass\n+\n+    # Assuming a hypothetical function to extract signature for testing\n+    # This function doesn't exist in the sample but represents the idea\n+    signature = inspect.signature(ugly_enum_func)\n+    assert str(signature) == '(e: MyEnum = MyEnum.ValueA) -> None'\n     class Foo:\n         pass\n \n",
  "sphinx-doc__sphinx-9320": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\nindex ff8df08..79e6643 100644\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -9,12 +9,16 @@\n \"\"\"\n \n import time\n+import sys\n from io import StringIO\n \n import pytest\n-\n from sphinx import application\n from sphinx.cmd import quickstart as qs\n+import pytest\n+from os import path\n+from unittest.mock import patch\n+from sphinx.cmd import quickstart as qs\n from sphinx.util.console import coloron, nocolor\n \n warnfile = StringIO()\n@@ -241,7 +245,21 @@ def test_default_filename(tempdir):\n     exec(conffile.read_text(), ns)\n \n \n-def test_extensions(tempdir):\n+def test_exits_when_existing_confpy(monkeypatch):\n+    # Mock path.isfile to return True, simulating an existing conf.py\n+    def mock_isfile(path):\n+        return True\n+\n+    monkeypatch.setattr(path, 'isfile', mock_isfile)\n+\n+    inputs = {\n+        'Please enter a new root path (or just Enter to exit)': ''\n+    }\n+    with patch('builtins.input', side_effect=lambda prompt: inputs.get(prompt, '')):\n+        with pytest.raises(SystemExit) as exit_info:\n+            qs.ask_user({})\n+        assert exit_info.type == SystemExit\n+        assert exit_info.value.code == 1\n     qs.main(['-q', '-p', 'project_name', '-a', 'author',\n              '--extensions', 'foo,bar,baz', tempdir])\n \n",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..285ce81 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -54,6 +54,7 @@ from sphinx.pycode import ast\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n     (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n+    (\"(1,)\", \"(1,)\"),                             # Tuple (single element)\n     (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n",
  "sphinx-doc__sphinx-9591": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 29731ea..aed1943 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -847,7 +847,33 @@ def test_pyproperty(app):\n     assert domain.objects['Class.prop2'] == ('index', 'Class.prop2', 'property', False)\n \n \n-def test_pydecorator_signature(app):\n+def test_property_type_annotation(app):\n+    text = (\".. py:class:: Square\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: start\\n\"\n+            \"      :type: Point\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\"\n+            \"\\n\"\n+            \".. py:class:: Rectangle\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: start\\n\"\n+            \"      :type: Point\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\")\n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n+\n+    # Test if the 'Point' cross-reference is correctly created for Square's 'end' property\n+    assert_node(doctree[0][1][3][2], desc_annotation, ': Point')\n+    # Test if the 'Point' cross-reference is correctly created for Rectangle's 'end' property\n+    assert_node(doctree[1][1][3][2], desc_annotation, ': Point')\n+\n+    # Check that the objects created include the properties\n+    assert 'Square.end' in domain.objects\n+    assert 'Rectangle.end' in domain.objects\n     text = \".. py:decorator:: deco\"\n     domain = app.env.get_domain('py')\n     doctree = restructuredtext.parse(app, text)\n",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..c62be6d 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -756,7 +756,7 @@ def test_pymethod_options(app):\n \n     # :property:\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])  # Updated assertion\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
  "sphinx-doc__sphinx-9711": "",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..18784fd 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -236,6 +236,9 @@ def test_Point2D():\n     assert p2.distance(p3) == sqrt(17)/2\n \n \n+from sympy import sqrt\n+from sympy.geometry import Point, Point2D, Point3D\n+\n def test_issue_9214():\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n@@ -244,7 +247,29 @@ def test_issue_9214():\n     assert Point3D.are_collinear(p1, p2, p3) is False\n \n \n-def test_transform():\n+def test_issue_11617():\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point2D(2, 0)\n+\n+    # Test 3D to 2D distance\n+    assert p1.distance(p2) == sqrt(5)\n+\n+    # Test 2D to 3D distance (should be the same as 3D to 2D)\n+    assert p2.distance(p1) == sqrt(5)\n+\n+    # Test full 3D to 3D distance\n+    p3 = Point3D(4, 0, 6)\n+    assert p1.distance(p3) == sqrt((1-4)**2 + (0-0)**2 + (2-6)**2) == sqrt(29)\n+\n+    # Test 2D to 2D distance\n+    p4 = Point2D(2, 3)\n+    assert p2.distance(p4) == sqrt((2-2)**2 + (0-3)**2) == 3\n+\n+    # Test identical 3D points resulting in zero distance\n+    assert p1.distance(Point3D(1, 0, 2)) == 0\n+\n+    # Test identical 2D points resulting in zero distance\n+    assert p2.distance(Point2D(2, 0)) == 0\n     p = Point(1, 1)\n     assert p.transform(rotate(pi/2)) == Point(-1, 1)\n     assert p.transform(scale(3, 2)) == Point(3, 2)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..17f6744 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -741,6 +741,16 @@ def test_special_printers():\n     assert isinstance(func1(), mpi)\n     assert isinstance(func2(), mpi)\n \n+from sympy.core.function import implemented_function\n+from sympy import Float\n+\n+def test_issue_12092():\n+    f = implemented_function('f', lambda x: x**2)\n+    g = implemented_function('g', lambda x: 2 * x)\n+    assert f(f(2)).evalf() == Float(16)\n+    assert g(g(2)).evalf() == Float(8)\n+    assert f(g(2)).evalf() == Float(16)\n+\n def test_true_false():\n     # We want exact is comparison here, not just ==\n     assert lambdify([], true)() is True\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..a10344f 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -71,8 +71,18 @@ def test_ZeroMatrix_doit():\n     assert Znn.doit() == ZeroMatrix(2*n, n)\n     assert isinstance(Znn.doit().rows, Mul)\n \n+from sympy import Identity, symbols, Sum\n \n def test_Identity():\n+    # New test case for verifying the sum of identity matrix elements\n+    i, j = symbols('i j', integer=True)\n+    n = symbols('n', integer=True, positive=True)\n+    In = Identity(n)\n+    \n+    # Verify that the total sum of elements in the identity matrix is n\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n+    # Verify with a specific size of the identity matrix\n+    assert Sum(Sum(In[i, j], (i, 0, 2)), (j, 0, 2)).doit() == 3\n     A = MatrixSymbol('A', n, m)\n     In = Identity(n)\n     Im = Identity(m)\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..6a4a7df 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -354,6 +354,13 @@ def test_args():\n     # but this is ok because cycles imply that only those listed moved\n     assert Permutation(4, 5) == Permutation([0, 1, 2, 3, 5, 4])\n \n+    # Test cases for non-disjoint cycles\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])  # Identity permutation\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([1, 2, 0])  # Composed permutation\n+    assert Permutation([[0, 1], [2, 3], [1, 2]]) == Permutation([1, 3, 0, 2])  # Complex composition\n+    assert Permutation([[0, 1], [1, 0]]) == Permutation([0, 1])  # Another identity permutation\n+    assert Permutation([[0, 2], [1, 2], [0, 1]]) == Permutation([2, 0, 1])  # Chained composition\n+\n \n def test_Cycle():\n     assert str(Cycle()) == '()'\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..bafa9c1 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -486,6 +486,14 @@ def test_errors():\n         IndexError, lambda: SparseMatrix([[1, 2], [3, 4]])[1, 2])\n     raises(TypeError, lambda: SparseMatrix([1, 2, 3]).cross(1))\n     raises(IndexError, lambda: SparseMatrix(1, 2, [1, 2])[3])\n+    # Test hstack with 0 x n matrices\n+    sparse_matrices = [SparseMatrix.zeros(0, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*sparse_matrices).shape == (0, 6)\n+    \n+    # Test vstack with n x 0 matrices\n+    sparse_matrices = [SparseMatrix.zeros(n, 0) for n in range(4)]\n+    assert SparseMatrix.vstack(*sparse_matrices).shape == (6, 0)\n+\n     raises(ShapeError,\n         lambda: SparseMatrix(1, 2, [1, 2]) + SparseMatrix(2, 1, [2, 1]))\n \n",
  "sympy__sympy-13372": "diff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\nindex e95146a..afc7a37 100644\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -161,6 +161,13 @@ def test_evalf_near_integers():\n \n \n def test_evalf_ramanujan():\n+    from sympy import Mul, Max, Symbol\n+\n+    # issue 13076\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    assert NS(Mul(Max(0, y), x, evaluate=False).evalf()) == 'x*Max(0, y)'\n+\n     assert NS(exp(pi*sqrt(163)) - 640320**3 - 744, 10) == '-7.499274028e-13'\n     # A related identity\n     A = 262537412640768744*exp(-pi*sqrt(163))\n",
  "sympy__sympy-13480": "",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..0eb784b 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -177,6 +177,16 @@ def test_Complement():\n     assert not 1 in Complement(S.Reals, S.Naturals, evaluate=False)\n \n     assert Complement(S.Integers, S.UniversalSet) == EmptySet()\n+\n+    # Test cases for issue with symbols and numbers in Complement\n+    from sympy import FiniteSet, Interval, Symbol\n+\n+    x, y = Symbol('x'), Symbol('y')\n+    assert Complement(FiniteSet(x, y, 2), Interval(-10, 10)) == FiniteSet(x, y)\n+    assert Complement(FiniteSet(x, y, 2, 5), Interval(0, 4)) == FiniteSet(x, y, 5)\n+    assert Complement(FiniteSet(1, 2, 3, x), Interval(1.5, 2.5)) == FiniteSet(1, 3, x)\n+    assert Complement(FiniteSet(x, 3, 4), FiniteSet(3)) == FiniteSet(x, 4)\n+    assert Complement(FiniteSet(x, 2), S.EmptySet) == FiniteSet(x, 2)\n     assert S.UniversalSet.complement(S.Integers) == EmptySet()\n \n     assert (not 0 in S.Reals.intersect(S.Integers - FiniteSet(0)))\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..38c8159 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,65 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643_col_insert():\n+    from sympy import Matrix, eye, ones\n+\n+    # Original issue setup\n+    M = eye(6)\n+    V = 2 * ones(6, 2)\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert M.col_insert(3, V) == expected\n+\n+    # Additional test cases\n+    # Insert at the beginning\n+    M = eye(6)\n+    expected = Matrix([\n+        [2, 2, 1, 0, 0, 0, 0, 0],\n+        [2, 2, 0, 1, 0, 0, 0, 0],\n+        [2, 2, 0, 0, 1, 0, 0, 0],\n+        [2, 2, 0, 0, 0, 1, 0, 0],\n+        [2, 2, 0, 0, 0, 0, 1, 0],\n+        [2, 2, 0, 0, 0, 0, 0, 1]\n+    ])\n+    assert M.col_insert(0, V) == expected\n+\n+    # Insert at the end\n+    M = eye(6)\n+    expected = Matrix([\n+        [1, 0, 0, 0, 0, 0, 2, 2],\n+        [0, 1, 0, 0, 0, 0, 2, 2],\n+        [0, 0, 1, 0, 0, 0, 2, 2],\n+        [0, 0, 0, 1, 0, 0, 2, 2],\n+        [0, 0, 0, 0, 1, 0, 2, 2],\n+        [0, 0, 0, 0, 0, 1, 2, 2]\n+    ])\n+    assert M.col_insert(6, V) == expected\n+\n+    # Insert into a non-square matrix\n+    M = Matrix([[1, 2], [3, 4], [5, 6]])\n+    V = Matrix([[7], [8], [9]])\n+    expected = Matrix([\n+        [1, 7, 2],\n+        [3, 8, 4],\n+        [5, 9, 6]\n+    ])\n+    assert M.col_insert(1, V) == expected\n+\n+    # Insert columns with different dimensions (should raise an error)\n+    M = eye(6)\n+    V = Matrix([[1, 2, 3], [4, 5, 6]])\n+    try:\n+        M.col_insert(3, V)\n+        assert False, \"Expected ValueError due to mismatched dimensions\"\n+    except ValueError:\n+        pass\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..be7491f 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -665,8 +665,16 @@ def test_Poly_sub():\n def test_Poly_mul():\n     assert Poly(0, x).mul(Poly(0, x)) == Poly(0, x)\n     assert Poly(0, x) * Poly(0, x) == Poly(0, x)\n-\n-    assert Poly(2, x).mul(Poly(4, x)) == Poly(8, x)\n+from sympy import Poly, S, Symbol\n+x = Symbol('x')\n+\n+def test_issue_13079():\n+    # Test cases to confirm the issue is resolved\n+    assert Poly(x)*x == Poly(x**2, x, domain='ZZ')\n+    assert x*Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert -2*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2)*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert Poly(x)*S(-2) == Poly(-2*x, x, domain='ZZ')\n     assert Poly(2, x, y) * Poly(4, x) == Poly(8, x, y)\n     assert Poly(4, x).mul(Poly(2, x, y)) == Poly(8, x, y)\n     assert Poly(4, x, y) * Poly(2, x, y) == Poly(8, x, y)\n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..8504a21 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -54,6 +54,19 @@ def test_printmethod():\n             return \"foo\"\n     assert latex(R(x)) == \"foo\"\n \n+def test_latex_mul_symbol_arbitrary():\n+    # Test using a custom multiplication symbol (thin space)\n+    from sympy import Symbol, latex, Integral\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    assert latex(3*x**2*y, mul_symbol=r'\\\\,') == r\"3\\\\,x^{2}\\\\,y\"\n+    assert latex(1.5*3**x, mul_symbol=r'\\\\,') == r\"1.5\\\\,3^{x}\"\n+    # Ensure integral representation remains correct\n+    assert latex(Integral(2*x**2*y, x)) == r'\\int 2 x^{2} y\\, dx'\n+    # Test with other arbitrary symbols\n+    assert latex(3*x**2*y, mul_symbol='*') == r\"3*x^{2}*y\"\n+    assert latex(3*x**2*y, mul_symbol='@') == r\"3@x^{2}@y\"\n+\n \n def test_latex_basic():\n     assert latex(1 + x) == \"x + 1\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..f4f3262 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -402,8 +402,21 @@ def test_determinant():\n     assert M.det(method=\"bareiss\") == z**2 - x*y\n     assert M.det(method=\"berkowitz\") == z**2 - x*y\n \n-\n-def test_det_LU_decomposition():\n+def test_issue_13835():\n+    a = symbols('a')\n+    M = lambda n: Matrix([[i + a*j for i in range(n)] for j in range(n)])\n+    \n+    # Test cases as described in the issue\n+    assert M(1).det() == 0\n+    assert M(2).det() == -a\n+    # Simplified manually computed determinant\n+    assert simplify(M(3).det()) == 0\n+    assert M(4).det() == 0\n+    assert M(5).det() == 0\n+    assert M(6).det() == 0\n+    assert M(7).det() == 0\n+    # Additional case to ensure larger matrices do not throw errors\n+    assert M(8).det() == 0\n \n     for M in [Matrix(), Matrix([[1]])]:\n         assert M.det(method=\"lu\") == 1\n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..cee8670 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -726,6 +726,59 @@ def test_precomputed_cdf():\n         compdiff = simplify(compdiff.rewrite(erfc))\n         assert compdiff == 0\n \n+def test_precomputed_cdf_issue():\n+    from sympy.stats import cdf, density, Arcsin, Dagum, Erlang, Frechet, Gamma, GammaInverse, Kumaraswamy, Laplace, Logistic, Nakagami, StudentT, UniformSum\n+    from sympy import S\n+    x = symbols(\"x\", real=True, finite=True)\n+\n+    # Arcsin\n+    X = Arcsin(\"x\", 0, 3)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+    # Dagum\n+    X = Dagum(\"x\", S(1)/3, S(1)/5, 2)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+    # Erlang\n+    X = Erlang(\"x\", 1, 1)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+    # Frechet\n+    X = Frechet(\"x\", S(4)/3, 1, 2)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+    # Gamma\n+    X = Gamma(\"x\", 0.1, 2)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+    # GammaInverse\n+    X = GammaInverse(\"x\", S(5)/7, 2)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+    # Kumaraswamy\n+    X = Kumaraswamy(\"x\", S(1)/123, 5)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+    # Laplace\n+    X = Laplace(\"x\", 2, 3)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+    # Logistic\n+    X = Logistic(\"x\", 1, 0.1)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+    # Nakagami\n+    X = Nakagami(\"x\", S(7)/3, 1)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+    # StudentT\n+    X = StudentT(\"x\", 10)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+    # UniformSum\n+    X = UniformSum(\"x\", 5)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n def test_issue_13324():\n     X = Uniform('X', 0, 1)\n     assert E(X, X > Rational(1,2)) == Rational(3,4)\n",
  "sympy__sympy-13974": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bd3e825..2824700 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -38,6 +38,32 @@ def test_tensor_product_expand():\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n \n+def test_tensor_product_power():\n+    from sympy.physics.quantum import TensorProduct as TP\n+    from sympy.physics.quantum import tensor_product_simp as tps\n+    from sympy.physics.paulialgebra import Pauli\n+    from sympy import Symbol\n+\n+    a = Symbol('a', commutative=False)\n+    A, B, C, D = symbols('A B C D', commutative=False)\n+\n+    # Test cases from the issue description\n+    t1 = TP(1, 1) * TP(1, 1)\n+    assert tps(t1) == TP(1, 1)\n+    assert t1.expand(tensorproduct=True) == TP(1, 1)\n+\n+    t2 = TP(1, Pauli(3)) * TP(1, Pauli(3))\n+    assert tps(t2) == TP(1, 1)\n+    assert t2.expand(tensorproduct=True) == TP(1, 1)\n+\n+    # Original test patch cases\n+    x = Symbol('x')\n+    assert tps(TP(A, B)**x) == TP(A**x, B**x)\n+    assert tps(x * TP(A, B)**2) == x * TP(A**2, B**2)\n+    assert tps(x * (TP(A, B)**2) * TP(C, D)) == x * TP(A**2 * C, B**2 * D)\n+    assert tps(TP(A, B) - TP(C, D)**x) == TP(A, B) - TP(C**x, D**x)\n+\n+\n def test_tensor_product_commutator():\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n         TP(A*B, C) - TP(B*A, C)\n",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_str.py b/sympy/printing/tests/test_str.py\nindex 29c7fd2..aa42d3d 100644\n--- a/sympy/printing/tests/test_str.py\n+++ b/sympy/printing/tests/test_str.py\n@@ -493,7 +493,12 @@ def test_Rational():\n     assert sstr(Symbol(\"x\")**Rational(2, 3), sympy_integers=True) == \"x**(S(2)/3)\"\n \n \n-def test_Float():\n+def test_issue_sstr_behaviour():\n+    # Ensure that sympy_integers setting is respected\n+    x = Symbol('x')\n+    assert sstr(x + S(1)/2, sympy_integers=True) == \"x + S(1)/2\"\n+    assert sstr(Eq(x, S(1)/2), sympy_integers=True) == \"Eq(x, S(1)/2)\"\n+    assert sstr(Limit(x, x, S(1)/2), sympy_integers=True) == \"Limit(x, x, S(1)/2)\"\n     # NOTE dps is the whole number of decimal digits\n     assert str(Float('1.23', dps=1 + 2)) == '1.23'\n     assert str(Float('1.23456789', dps=1 + 8)) == '1.23456789'\n",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..4d34f1e 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -3,12 +3,15 @@ from sympy.physics.vector import ReferenceFrame, Vector, dynamicsymbols, dot\n from sympy.abc import x, y, z\n from sympy.utilities.pytest import raises\n \n-\n-Vector.simp = True\n+from sympy import symbols\n+from sympy.physics.vector import ReferenceFrame, Vector\n A = ReferenceFrame('A')\n \n-\n-def test_Vector():\n+def test_vector_add_zero():\n+    N = ReferenceFrame('N')\n+    assert sum([N.x, 0 * N.x]) == N.x\n+    assert sum([0 * N.x, N.x]) == N.x\n+    assert sum([0 * N.x, 0 * N.y]) == Vector.zero\n     assert A.x != A.y\n     assert A.y != A.z\n     assert A.z != A.x\n",
  "sympy__sympy-14976": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..b633806 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1,3 +1,4 @@\n+\n from distutils.version import LooseVersion as V\n from itertools import product\n import math\n@@ -134,6 +135,15 @@ def test_math_lambda():\n \n \n @conserve_mpmath_dps\n+def test_mpmath_rational_wrapping():\n+    from sympy.functions import rf\n+    import inspect\n+    mpmath.mp.dps = 64\n+    x = symbols('x')\n+    eqn = Eq(rf(18, x), 77 + Rational(1, 3))\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    source = inspect.getsource(f)\n+    assert 'mpmath.mpf(232)/mpmath.mpf(3)' in source\n def test_mpmath_lambda():\n     mpmath.mp.dps = 50\n     sin02 = mpmath.mpf(\"0.19866933079506121545941262711838975037020672954020\")\n@@ -145,6 +155,15 @@ def test_mpmath_lambda():\n \n \n @conserve_mpmath_dps\n+def test_mpmath_rational_wrapping():\n+    from sympy.functions import rf\n+    import inspect\n+    mpmath.mp.dps = 64\n+    x = symbols('x')\n+    eqn = Eq(rf(18, x), 77 + Rational(1, 3))\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    source = inspect.getsource(f)\n+    assert 'mpmath.mpf(232)/mpmath.mpf(3)' in source\n def test_number_precision():\n     mpmath.mp.dps = 50\n     sin02 = mpmath.mpf(\"0.19866933079506121545941262711838975037020672954020\")\n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..d60ca62 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -73,11 +74,22 @@ def test_ndim_array_initiation():\n \n     from sympy.abc import x\n     rank_zero_array = ImmutableDenseNDimArray(x)\n-    assert len(rank_zero_array) == 0\n+    assert len(rank_zero_array) == 1  # Corrected: len should be 1 for a rank-0 array\n     assert rank_zero_array.shape == ()\n     assert rank_zero_array.rank() == 0\n     assert rank_zero_array[()] == x\n-    raises(ValueError, lambda: rank_zero_array[0])\n+    # Ensure that indexing errors are properly raised\n+    raises(IndexError, lambda: rank_zero_array[0])\n+    raises(IndexError, lambda: rank_zero_array[:])\n+\n+    # Test with creating a rank-0 array directly with a number\n+    another_rank_zero_array = ImmutableDenseNDimArray(42)\n+    assert len(another_rank_zero_array) == 1\n+    assert another_rank_zero_array.shape == ()\n+    assert another_rank_zero_array.rank() == 0\n+    assert another_rank_zero_array[()] == 42\n+    raises(IndexError, lambda: another_rank_zero_array[0])\n+    raises(IndexError, lambda: another_rank_zero_array[:])\n \n \n def test_reshape():\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..7eaf694 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n",
  "sympy__sympy-15349": "diff --git a/sympy/algebras/tests/test_quaternion.py b/sympy/algebras/tests/test_quaternion.py\nindex c486cc1..28ed2ca 100644\n--- a/sympy/algebras/tests/test_quaternion.py\n+++ b/sympy/algebras/tests/test_quaternion.py\n@@ -112,6 +112,42 @@ def test_quaternion_conversions():\n                                                [sin(theta),  cos(theta), 0],\n                                                [0,           0,          1]])\n \n+def test_quaternion_rotation_fix():\n+    \"\"\" \n+    Verify the correction of the sign mistake in the to_rotation_matrix() method.\n+    \"\"\"\n+    from sympy import symbols, cos, sin, trigsimp\n+    from sympy.algebras.quaternion import Quaternion\n+\n+    x = symbols('x')\n+    \n+    # Test case for a quaternion representing a rotation around the x-axis\n+    q_x = Quaternion(cos(x/2), sin(x/2), 0, 0)\n+    expected_matrix_x = Matrix([\n+        [1,      0,      0],\n+        [0, cos(x), -sin(x)],\n+        [0, sin(x),  cos(x)]\n+    ])\n+    assert trigsimp(q_x.to_rotation_matrix()) == expected_matrix_x\n+\n+    # Test case for a quaternion representing a rotation around the y-axis\n+    q_y = Quaternion(cos(x/2), 0, sin(x/2), 0)\n+    expected_matrix_y = Matrix([\n+        [ cos(x), 0, sin(x)],\n+        [      0, 1,      0],\n+        [-sin(x), 0, cos(x)]\n+    ])\n+    assert trigsimp(q_y.to_rotation_matrix()) == expected_matrix_y\n+\n+    # Test case for a quaternion representing a rotation around the z-axis\n+    q_z = Quaternion(cos(x/2), 0, 0, sin(x/2))\n+    expected_matrix_z = Matrix([\n+        [cos(x), -sin(x), 0],\n+        [sin(x),  cos(x), 0],\n+        [     0,       0, 1]\n+    ])\n+    assert trigsimp(q_z.to_rotation_matrix()) == expected_matrix_z\n+\n     assert q2.to_axis_angle() == ((0, 0, sin(theta/2)/Abs(sin(theta/2))),\n                                    2*acos(cos(theta/2)))\n \n@@ -119,4 +155,4 @@ def test_quaternion_conversions():\n                [cos(theta), -sin(theta), 0, sin(theta) - cos(theta) + 1],\n                [sin(theta),  cos(theta), 0, -sin(theta) - cos(theta) + 1],\n                [0,           0,          1,  0],\n-               [0,           0,          0,  1]])\n+               [0,           0,          0,  1]])\n",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..8771548 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1625,7 +1625,25 @@ def test_Mod():\n     assert (3*i*x) % (2*i*y) == i*Mod(3*x, 2*y)\n     assert Mod(4*i, 4) == 0\n \n-    # issue 8677\n+    # issue 15493\n+    i, j = symbols('i j', integer=True, positive=True)\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+    assert Mod(8*i/j, 4) == 4*Mod(2*i/j, 1)\n+    assert Mod(8*i, 4) == 0\n+\n+    # additional tests for the fix\n+    # Testing with various values of 'i' to ensure the reduction is correct\n+    assert Mod(3*4, 2) == Mod(4, 2) == 0\n+    assert Mod(3*5, 2) == Mod(5, 2) == 1\n+\n+    # Testing with symbolic expressions involving sums\n+    k = Symbol('k', integer=True)\n+    assert Mod(3*(i + k), 2) == Mod(i + k, 2)\n+    assert Mod(3*(i - k), 2) == Mod(i - k, 2)\n+\n+    # Testing with mixed expressions\n+    expr = 3*i*x + j\n+    assert Mod(expr, 2) == Mod(i*x + j, 2)\n     n = Symbol('n', integer=True, positive=True)\n     assert factorial(n) % n == 0\n     assert factorial(n + 2) % n == 0\n",
  "sympy__sympy-15809": "diff --git a/sympy/functions/elementary/tests/test_miscellaneous.py b/sympy/functions/elementary/tests/test_miscellaneous.py\nindex 821fd0c..050d25b 100644\n--- a/sympy/functions/elementary/tests/test_miscellaneous.py\n+++ b/sympy/functions/elementary/tests/test_miscellaneous.py\n@@ -85,7 +85,7 @@ def test_Min():\n     assert Min(p, p_).func is Min\n \n     # lists\n-    raises(ValueError, lambda: Min())\n+    assert Min() == S.Infinity\n     assert Min(x, y) == Min(y, x)\n     assert Min(x, y, z) == Min(z, y, x)\n     assert Min(x, Min(y, z)) == Min(z, y, x)\n@@ -156,7 +156,7 @@ def test_Max():\n \n     # lists\n \n-    raises(ValueError, lambda: Max())\n+    assert Max() == S.NegativeInfinity\n     assert Max(x, y) == Max(y, x)\n     assert Max(x, y, z) == Max(z, y, x)\n     assert Max(x, Max(y, z)) == Max(z, y, x)\n",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..76f0344 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1987,10 +1987,35 @@ def test_Add_is_zero():\n     assert (x + y).is_zero\n \n \n-def test_issue_14392():\n+def test_issue_15873():\n+    # Issue 15873\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None\n+\n+    # Additional test cases\n+    # Test a simple complex zero\n+    e_simple = I - I\n+    assert e_simple.is_zero is True\n+\n+    # Test an expression that simplifies to zero\n+    e_simplify = (1 + I)**2 - 2*I - (1 + I)**2\n+    assert e_simplify.is_zero is True\n+\n+    # Test an expression that is not zero\n+    e_not_zero = -2*I + (1 + I)**2 + 1\n+    assert e_not_zero.is_zero is False\n+\n+    # Test an expression with symbolic components\n+    x = symbols('x', real=True)\n+    e_symbolic = x + I - x - I\n+    assert e_symbolic.is_zero is True\n+\n+    # Test an expression where is_zero should return None\n+    e_indeterminate = x + I - x\n+    assert e_indeterminate.is_zero is None\n     assert (sin(zoo)**2).as_real_imag() == (nan, nan)\n \n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..021b25c 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -478,6 +478,48 @@ def test_logcombine_complex_coeff():\n         i + log(x**2)\n \n \n+from sympy import Symbol, posify\n+\n+def test_issue_16438():\n+    # issue 16438\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0 == {\n+        'positive': True, 'zero': False, 'imaginary': False,\n+        'nonpositive': False, 'commutative': True, 'hermitian': True,\n+        'real': True, 'nonzero': True, 'nonnegative': True,\n+        'negative': False, 'complex': True, 'finite': True,\n+        'infinite': False\n+    }\n+\n+    # Additional test to verify integer, rational, prime assumptions\n+    i = Symbol('i', integer=True)\n+    eq_int, _ = posify(i)\n+    assert eq_int.assumptions0['integer'] is True\n+\n+    j = Symbol('j', rational=True)\n+    eq_rat, _ = posify(j)\n+    assert eq_rat.assumptions0['rational'] is True\n+\n+    p = Symbol('p', prime=True)\n+    eq_prime, _ = posify(p)\n+    assert eq_prime.assumptions0['prime'] is True\n+\n+    # Testing preservation of even and odd assumptions\n+    e = Symbol('e', even=True)\n+    eq_even, _ = posify(e)\n+    assert eq_even.assumptions0['even'] is True\n+\n+    o = Symbol('o', odd=True)\n+    eq_odd, _ = posify(o)\n+    assert eq_odd.assumptions0['odd'] is True\n+\n+    # Ensure finite and infinite are mutually exclusive correctly after posify\n+    f = Symbol('f', finite=True, infinite=False)\n+    eq_finite, _ = posify(f)\n+    assert eq_finite.assumptions0['finite'] is True\n+    assert eq_finite.assumptions0['infinite'] is False\n+\n def test_issue_5950():\n     x, y = symbols(\"x,y\", positive=True)\n     assert logcombine(log(3) - log(2)) == log(Rational(3,2), evaluate=False)\n",
  "sympy__sympy-16766": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 51a287f..1dc7d62 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n \n@@ -11,7 +12,7 @@ from sympy.matrices import SparseMatrix, MatrixSymbol\n from sympy.printing.pycode import (\n     MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter\n )\n-from sympy.utilities.pytest import raises\n+from sympy.tensor import IndexedBase\n \n x, y, z = symbols('x y z')\n \n@@ -35,6 +36,12 @@ def test_PythonCodePrinter():\n                                                         ' (3) if (x > 0) else None)'\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n \n+    # Test PythonCodePrinter with Indexed\n+    p = IndexedBase(\"p\")\n+    assert prntr.doprint(p[0]) == 'p[0]'\n+    assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n+    assert prntr.doprint(p[x, y, z]) == 'p[x, y, z]'\n+\n \n def test_MpmathPrinter():\n     p = MpmathPrinter()\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py\nindex 23fddca..0cf9467 100644\n--- a/sympy/utilities/tests/test_autowrap.py\n+++ b/sympy/utilities/tests/test_autowrap.py\n@@ -31,7 +31,17 @@ def get_string(dump_fn, routines, prefix=\"file\", **kwargs):\n     return source\n \n \n-def test_cython_wrapper_scalar_function():\n+def test_autowrap_cython_unused_array_argument():\n+    from sympy import MatrixSymbol\n+    from sympy.utilities.autowrap import autowrap\n+    import numpy as np\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0  # x does not appear in the output\n+    f = autowrap(expr, args=(x,), backend='cython')\n+\n+    result = f(np.array([[1.0], [2.0]]))\n+    assert result == 1.0, \"The function should return 1.0 even when x is unused.\"\n     x, y, z = symbols('x,y,z')\n     expr = (x + y)*z\n     routine = make_routine(\"test\", expr)\n",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..c7fd42c 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -248,8 +248,12 @@ def test_encode_morse():\n     assert encode_morse(' ', sep='``') == '````'\n     assert encode_morse('!@#$%^&*()_+') == '-.-.--|.--.-.|...-..-|-.--.|-.--.-|..--.-|.-.-.'\n \n-\n-def test_decode_morse():\n+def test_encode_morse_numbers():\n+    # Test all digits from 0 to 9\n+    assert encode_morse('1') == '.----'\n+    assert encode_morse('0') == '-----'\n+    assert encode_morse('23456789') == '..---|...--|....-|.....|-....|--...|---..|----.'\n+    assert encode_morse('0123456789') == '-----|.----|..---|...--|....-|.....|-....|--...|---..|----.'\n     assert decode_morse('-.-|.|-.--') == 'KEY'\n     assert decode_morse('.-.|..-|-.||') == 'RUN'\n     raises(KeyError, lambda: decode_morse('.....----'))\n",
  "sympy__sympy-17139": "",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..92f2215 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,4 +1,7 @@\n-from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n+\n+from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos, I\n+from sympy.simplify.sqrtdenest import _sqrt_match\n+from sympy.core.expr import unchanged\n from sympy.simplify.sqrtdenest import _subsets as subsets\n from sympy.utilities.pytest import slow\n \n@@ -175,8 +178,20 @@ def test_subsets():\n         [0, 1, 1, 0], [1, 1, 1, 0], [0, 0, 0, 1], [1, 0, 0, 1], [0, 1, 0, 1],\n         [1, 1, 0, 1], [0, 0, 1, 1], [1, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]]\n \n+def test_issue_12420():\n+    # Test the behavior of _sqrt_match to ensure it returns an empty list when it cannot match\n+    assert _sqrt_match(4 + I) == []\n+\n+    # Test that sqrtdenest returns the original expression when it cannot be denested\n+    expr1 = (3 - sqrt(2) * sqrt(4 + 3 * I) + 3 * I) / 2\n+    assert sqrtdenest(expr1) == expr1\n \n-def test_issue_5653():\n+    # Another expression that cannot be denested should be returned unchanged\n+    expr2 = 3 - sqrt(2) * sqrt(4 + I) + 3 * I\n+    assert sqrtdenest(expr2) == expr2\n+    \n+    # Ensure that unchanged() validates that the input expression is not altered by the function\n+    assert unchanged(sqrtdenest, expr2)\n     assert sqrtdenest(\n         sqrt(2 + sqrt(2 + sqrt(2)))) == sqrt(2 + sqrt(2 + sqrt(2)))\n \n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..921f5b7 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n@@ -91,6 +92,14 @@ def test_point():\n     assert (-p3).__rsub__(p4) == p3.midpoint(p4).scale(2, 2)\n \n     assert p4 * 5 == Point(5, 5)\n+    assert 5 * p4 == Point(5, 5)  # Added test case for scalar * Point multiplication\n+\n+    # Additional test cases based on the issue statement\n+    from sympy import sympify\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+    assert point1 + point2 * sympify(2.0) == Point(2, 2)\n+    assert point1 + sympify(2.0) * point2 == Point(2, 2)  # This should work without raising an exception\n     assert p4 / 5 == Point(0.2, 0.2)\n \n     raises(ValueError, lambda: Point(0, 0) + 10)\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..d8b2b1e 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -501,7 +501,17 @@ def test_diophantine():\n     assert diophantine(eq, permute=True) == complete_soln\n \n     assert diophantine(x**2 + x*Rational(15, 14) - 3) == set()\n-    # test issue 11049\n+    # test issue 18186\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+\n+    # Additional test: verifying consistent results with different symbol order\n+    eq = x**4 + y**4 - 2**4 - 3**4\n+    expected_solution = set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(eq, syms=(x, y), permute=True) == expected_solution\n+    assert diophantine(eq, syms=(y, x), permute=True) == expected_solution\n     eq = 92*x**2 - 99*y**2 - z**2\n     coeff = eq.as_coefficients_dict()\n     assert _diop_ternary_quadratic_normal((x, y, z), coeff) == \\\n",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..44156fb 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -676,6 +676,26 @@ def test_latex_subs():\n     assert latex(Subs(x*y, (\n         x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n \n+    # Original test case from the issue description\n+    assert latex(3*Subs(-x+y, (x,),(1,))) == r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+    \n+    # Additional test cases\n+    # Test with a more complex expression in Subs\n+    assert latex(Subs(x**2 + y**2, (x, y), (1, 2))) == r'\\left. x^{2} + y^{2} \\right|_{\\substack{ x=1\\\\ y=2 }}'\n+    \n+    # Test with nested Subs\n+    assert latex(Subs(Subs(x + y, x, 1), y, 2)) == r'\\left. \\left. x + y \\right|_{ x=1 } \\right|_{ y=2 }'\n+    \n+    # Test with zero multiplier\n+    assert latex(0*Subs(-x+y, (x,),(1,))) == r'0'\n+    \n+    # Test with negative multiplier\n+    assert latex(-3*Subs(-x+y, (x,),(1,))) == r'-3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+    \n+    # Test with different symbols and values\n+    a, b = symbols('a b')\n+    assert latex(2*Subs(a-b, (a, b), (3, 4))) == r'2 \\left. \\left(a - b\\right) \\right|_{\\substack{ a=3\\\\ b=4 }}'\n+\n \n def test_latex_integrals():\n     assert latex(Integral(log(x), x)) == r\"\\int \\log{\\left(x \\right)}\\, dx\"\n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "diff --git a/sympy/sets/tests/test_conditionset.py b/sympy/sets/tests/test_conditionset.py\nindex 68ee5d6..c31d7cc 100644\n--- a/sympy/sets/tests/test_conditionset.py\n+++ b/sympy/sets/tests/test_conditionset.py\n@@ -1,7 +1,8 @@\n+\n from sympy.sets import (ConditionSet, Intersection, FiniteSet,\n-    EmptySet, Union, Contains)\n+    EmptySet, Union, Contains, ImageSet)\n from sympy import (Symbol, Eq, S, Abs, sin, pi, Interval,\n-    And, Mod, oo, Function)\n+    And, Mod, oo, Function, Lambda)\n from sympy.testing.pytest import raises, XFAIL, warns_deprecated_sympy\n \n \n@@ -130,7 +131,20 @@ def test_subs_CondSet():\n         ).subs(f(x), y) == ConditionSet(y, y < 1, {w, z})\n \n \n-def test_subs_CondSet_tebr():\n+def test_subs_conditionset_imageset():\n+    k = Symbol('k')\n+    img1 = ImageSet(Lambda(k, 2*k*pi + asin(y)), S.Integers)\n+    img2 = ImageSet(Lambda(k, 2*k*pi + asin(S.One/3)), S.Integers)\n+    cond_set = ConditionSet(x, Contains(y, Interval(-1, 1)), img1)\n+    \n+    # Test substitution within a ConditionSet containing an ImageSet\n+    assert cond_set.subs(y, S.One/3).dummy_eq(img2)\n+\n+    # Ensure subs with simultaneous=True works correctly\n+    assert cond_set.subs({y: S.One/3}, simultaneous=True) == img2\n+\n+    # Test xreplace to verify alternative substitution method\n+    assert cond_set.xreplace({y: S.One/3}) == img2\n     with warns_deprecated_sympy():\n         assert ConditionSet((x, y), {x + 1, x + y}, S.Reals) == \\\n             ConditionSet((x, y), Eq(x + 1, 0) & Eq(x + y, 0), S.Reals)\n",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..bc2b4d6 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -514,7 +514,45 @@ def test_kernS():\n     assert one != 1 and one.expand() == 1\n \n \n-def test_issue_6540_6552():\n+def test_kernS_issue():\n+    # Original test case\n+    assert kernS(\"(2*x)/(x-1)\") == 2*x/(x-1)\n+\n+    # Additional test cases\n+    # Simple expression should pass without triggering the kern issue\n+    assert kernS(\"x + y\") == x + y\n+\n+    # Expression with spaces and special characters\n+    assert kernS(\"-(3*x + 4)/(x - 1)\") == -(3*x + 4)/(x - 1)\n+\n+    # Expression with nested parentheses\n+    assert kernS(\"-((x + 1)*(x - 1))\") == -(x + 1)*(x - 1)\n+\n+    # Test with mismatched parentheses should raise SympifyError\n+    try:\n+        kernS(\"((x + 1)*(x - 1)\")\n+    except SympifyError:\n+        pass\n+    else:\n+        assert False, \"Expected a SympifyError due to unmatched parentheses\"\n+\n+    # Test with no parentheses\n+    assert kernS(\"x*y\") == x*y\n+\n+    # Expression without spaces but with a minus sign\n+    assert kernS(\"2*(x+y)\") == 2*(x+y)\n+\n+    # Negative testing with string that should sympify as is\n+    assert kernS(\"E**-(x)\") == exp(-x)\n+\n+    # Check if the space replacement works correctly\n+    assert kernS(\"- (x + 1)\") == -(x + 1)\n+\n+    # Check if the kern is not referenced before assignment\n+    try:\n+        kernS(\"randomstring\")\n+    except UnboundLocalError:\n+        assert False, \"Encountered UnboundLocalError unexpectedly\"\n     assert S('[[1/3,2], (2/5,)]') == [[Rational(1, 3), 2], (Rational(2, 5),)]\n     assert S('[[2/6,2], (2/4,)]') == [[Rational(1, 3), 2], (S.Half,)]\n     assert S('[[[2*(1)]]]') == [[[2]]]\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_operator.py b/sympy/physics/quantum/tests/test_operator.py\nindex 799aaae..d2e96df 100644\n--- a/sympy/physics/quantum/tests/test_operator.py\n+++ b/sympy/physics/quantum/tests/test_operator.py\n@@ -1,5 +1,6 @@\n+\n from sympy import (Derivative, diff, Function, Integer, Mul, pi, sin, Symbol,\n-                   symbols)\n+                   symbols, simplify)\n from sympy.physics.quantum.qexpr import QExpr\n from sympy.physics.quantum.dagger import Dagger\n from sympy.physics.quantum.hilbert import HilbertSpace\n@@ -80,6 +81,24 @@ def test_unitary():\n     assert U.inv() == Dagger(U)\n     assert U*Dagger(U) == 1\n     assert Dagger(U)*U == 1\n+\n+def test_dagger_identity_simplification():\n+    O = Operator('O')\n+    I = IdentityOperator()\n+    D = Dagger(O)\n+    \n+    # Test multiplication with identity from right\n+    assert O * I == O\n+    assert D * I == D\n+    \n+    # Test multiplication with identity from left\n+    assert I * O == O\n+    assert I * D == D\n+\n+    # Additional check with symbolic expressions\n+    expr = D * I + O * I - O\n+    simplified_expr = simplify(expr)\n+    assert simplified_expr == D\n     assert U.is_commutative is False\n     assert Dagger(U).is_commutative is False\n \n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..997f4ba 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -906,7 +906,27 @@ def test_sylow_subgroup():\n     assert G.order()/S.order() % 2 > 0\n \n \n-@slow\n+def test_issue_sylow_subgroup_index_error():\n+    from sympy.combinatorics import DihedralGroup\n+\n+    # Test case for DihedralGroup(18) that previously caused IndexError\n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n+    # Test case for DihedralGroup(50) that previously caused IndexError\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n+    # Additional tests for other primes, e.g., p=3, to ensure broad coverage\n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(p=3)\n+    assert S.order() == 3\n+\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(p=5)\n+    assert S.order() == 5\n def test_presentation():\n     def _test(P):\n         G = P.presentation()\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..166c0a1 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -513,8 +513,39 @@ def test_partitions():\n             i += 1\n         assert i == RGS_enum(n)\n \n-\n-def test_binary_partitions():\n+def test_partitions_issue():\n+    # Test case to ensure partitions don't reuse the dictionaries\n+    partitions_list_6_k2 = list(partitions(6, k=2))\n+    partitions_list_6_k3 = list(partitions(6, k=3))\n+\n+    # Assert that the results are as expected for k=2\n+    assert partitions_list_6_k2 == [{2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]\n+    \n+    # Assert that the results are as expected for k=3\n+    assert partitions_list_6_k3 == [{3: 2}, {1: 1, 2: 1, 3: 1}, {1: 3, 3: 1}, {2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]\n+\n+    # Check that modifying one partition doesn't affect others\n+    for p in partitions_list_6_k2:\n+        p[1] = 99\n+    assert partitions_list_6_k2 != [{2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]\n+\n+    # Check against original values to ensure they don't change\n+    original_6_k2 = [{2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]\n+    for p in original_6_k2:\n+        p[1] = 99\n+    assert partitions_list_6_k2 != original_6_k2\n+\n+    # Ensure that partitions of multiple similar calls do not affect each other\n+    partitions_list_8_k4_m3 = list(partitions(8, k=4, m=3))\n+    copy_check = [i.copy() for i in partitions(8, k=4, m=3) if all(k <= 4 for k in i) and sum(i.values()) <= 3]\n+    assert partitions_list_8_k4_m3 == copy_check\n+\n+    # Check that list of partitions with S(3) behaves properly\n+    assert list(partitions(S(3), m=2)) == [{3: 1}, {1: 1, 2: 1}]\n+\n+    # Check that a simple list conversion doesn't result in reused dicts\n+    simple_list_conversion = list(partitions(4, k=3))\n+    assert simple_list_conversion == [{1: 1, 3: 1}, {2: 2}, {1: 2, 2: 1}, {1: 4}]\n     assert [i[:] for i in binary_partitions(10)] == [[8, 2], [8, 1, 1],\n         [4, 4, 2], [4, 4, 1, 1], [4, 2, 2, 2], [4, 2, 2, 1, 1],\n         [4, 2, 1, 1, 1, 1], [4, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2],\n",
  "sympy__sympy-20801": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e1c7e2..46b731c 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -570,7 +570,13 @@ def test_Float():\n     raises(ValueError, lambda: Float(\"1.23\", dps=3, precision=10))\n     raises(ValueError, lambda: Float(\"1.23\", dps=\"\", precision=10))\n     raises(ValueError, lambda: Float(\"1.23\", dps=3, precision=\"\"))\n-    raises(ValueError, lambda: Float(\"1.23\", dps=\"\", precision=\"\"))\n+from sympy import S\n+def test_zero_not_false():\n+    # https://github.com/sympy/sympy/issues/20796\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n \n     # from NumberSymbol\n     assert same_and_same_prec(Float(pi, 32), pi.evalf(32))\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..53abdfc 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -8,7 +9,32 @@ from sympy.core.basic import _aresame\n from sympy.testing.pytest import XFAIL\n from sympy.abc import a, x, y, z, t\n \n-def test_subs():\n+def test_issue_21373_subs_with_piecewise():\n+    from sympy.functions.elementary.hyperbolic import sinh\n+    from sympy.functions.elementary.piecewise import Piecewise\n+    \n+    x_r, y_r, z_r = symbols('x_r y_r z_r', real=True)\n+    \n+    # Expression with sinh, Piecewise, and division by z, wrapped in exp\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    result = expr.subs({1: 1.0})\n+    # Ensure the substitution does not raise PolynomialError anymore\n+    assert isinstance(result, type(expr)), \"Substitution should succeed without PolynomialError\"\n+    \n+    # Testing variations\n+    # Without explicit division by z\n+    expr_no_div = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n+    result_no_div = expr_no_div.subs({1: 1.0})\n+    assert isinstance(result_no_div, type(expr_no_div)), \"Substitution should succeed without PolynomialError\"\n+    \n+    # With other hyperbolic functions\n+    expr_cosh = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    result_cosh = expr_cosh.subs({1: 1.0})\n+    assert isinstance(result_cosh, type(expr_cosh)), \"Substitution should succeed without PolynomialError\"\n+    \n+    expr_tanh = exp(tanh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    result_tanh = expr_tanh.subs({1: 1.0})\n+    assert isinstance(result_tanh, type(expr_tanh)), \"Substitution should succeed without PolynomialError\"\n     n3 = Rational(3)\n     e = x\n     e = e.subs(x, n3)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..9c8b599 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -13,7 +13,7 @@ from sympy.polys.polyerrors import ExactQuotientFailed\n \n from sympy.abc import a, b, c, x, y, z\n from sympy.core import S, symbols\n-from sympy.testing.pytest import raises\n+from sympy.polys.monomials import itermonomials\n \n \n def test_monomials():\n@@ -78,7 +78,13 @@ def test_monomials():\n                             x * i * j, x * j * i\n             }\n \n-    # degree_list tests\n+    # Test for the issue with min_degrees argument\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    states = [x1, x2, x3]\n+    max_degrees = 3\n+    min_degrees = 3\n+    expected_monomials = {x1**3, x1**2*x2, x1*x2**2, x2**3, x2**2*x3, x2*x3**2, x3**3, x3**2*x1, x3*x1**2, x1*x3**2, x2**2*x1, x2*x1**2, x3*x2**2, x1*x2*x3}\n+    assert set(itermonomials(states, max_degrees, min_degrees=min_degrees)) == expected_monomials\n     assert set(itermonomials([], [])) == {S.One}\n \n     raises(ValueError, lambda: set(itermonomials([], [0])))\n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..903e9c2 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -267,6 +267,8 @@ def test_String():\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n+    # Test for argument invariance using positional arguments\n+    assert st.func(*st.args) == st\n \n \n     class Signifier(String):\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..5f49cd2 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -9,7 +10,8 @@ from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n-from sympy.testing.pytest import raises, warns\n+from sympy.core.parameters import evaluate\n+from sympy.geometry import Point2D\n \n \n def test_point():\n@@ -440,7 +442,24 @@ def test_unit():\n     assert Point(1, 1).unit == Point(sqrt(2)/2, sqrt(2)/2)\n \n \n-def test_dot():\n+def test_issue_22684():\n+    # Used to give an error\n+    with evaluate(False):\n+        pt = Point2D(1, 2)\n+        assert pt == Point2D(1, 2)\n+\n+    # Ensure that creating a Point2D with evaluate=False works correctly\n+    pt_no_eval = Point2D(1, 2, evaluate=False)\n+    assert pt_no_eval == Point2D(1, 2, evaluate=False)\n+\n+    # Check explicitly that no imaginary parts are allowed\n+    raises(ValueError, lambda: Point2D(1 + I, 2))\n+\n+    # Check that using S() does not cause errors with evaluate=False\n+    from sympy import S, Integer\n+    with evaluate(False):\n+        pt_s = S('Point2D(Integer(1), Integer(2))')\n+        assert pt_s == Point2D(Integer(1), Integer(2))\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n \n",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..0d90afa 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n@@ -52,6 +53,14 @@ def test_PythonCodePrinter():\n                         (3, Gt(x, 0)), evaluate=False)) == '((2) if (x <= 0) else'\\\n                                                         ' (3) if (x > 0) else None)'\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n+    # Testing Min and Max functions\n+    assert prntr.doprint(Min(x, y)) == \"min(x, y)\"\n+    assert prntr.doprint(Max(x, y)) == \"max(x, y)\"\n+    # Additional test cases\n+    assert prntr.doprint(Min(x + y, y - z, z)) == \"min(x + y, y - z, z)\"\n+    assert prntr.doprint(Max(x**2, y**2, z**2)) == \"max(x**2, y**2, z**2)\"\n+    assert prntr.doprint(Min(Max(x, y), z)) == \"min(max(x, y), z)\"\n+    assert prntr.doprint(Max(Min(x, y), z)) == \"max(min(x, y), z)\"\n     assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n     assert prntr.doprint(KroneckerDelta(x,y)) == '(1 if x == y else 0)'\n \n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..7921424 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,9 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+from sympy import symbols, lambdify\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n@@ -1197,6 +1200,24 @@ def test_issue_14941():\n     f3 = lambdify([x, y], [y, x], 'sympy')\n     assert f3(2, 3) == [3, 2]\n \n+def test_lambdify_single_element_tuple():\n+    # Test case for issue with single element tuple\n+    f_single = lambdify([], (1,))\n+    assert f_single() == (1,)\n+\n+    # Ensure inspect.getsource formats the function correctly\n+    source_single = inspect.getsource(f_single)\n+    assert 'return (1,)' in source_single\n+\n+def test_lambdify_multi_element_tuple():\n+    # Test case for tuples with multiple elements\n+    f_multi = lambdify([], (1, 2))\n+    assert f_multi() == (1, 2)\n+\n+    # Ensure inspect.getsource formats the function correctly\n+    source_multi = inspect.getsource(f_multi)\n+    assert 'return (1, 2)' in source_multi\n+\n \n def test_lambdify_Derivative_arg_issue_16468():\n     f = Function('f')(x)\n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..3eaf17c 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,8 +1,10 @@\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n from sympy.core.sympify import sympify  # can't import as S yet\n-from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n+from sympy.core.symbol import uniquely_named_symbol, _symbol, Str, symbols\n+from sympy.core.function import Function, UndefinedFunction\n \n from sympy.testing.pytest import raises\n from sympy.core.symbol import disambiguate\n@@ -294,9 +296,11 @@ def test_symbols():\n     assert symbols('aa:d,x:z') == (aa, ab, ac, ad, x, y, z)\n     assert symbols(('aa:d','x:z')) == ((aa, ab, ac, ad), (x, y, z))\n \n-\n-    # issue 6675\n-    def sym(s):\n+    # Test for issue 23532\n+    def test_symbols_function_with_parentheses():\n+        q, u = symbols(('q:2', 'u:2'), cls=Function)\n+        assert isinstance(q[0], UndefinedFunction), \"Expected q[0] to be an instance of UndefinedFunction\"\n+        assert isinstance(u[0], UndefinedFunction), \"Expected u[0] to be an instance of UndefinedFunction\"\n         return str(symbols(s))\n     assert sym('a0:4') == '(a0, a1, a2, a3)'\n     assert sym('a2:4,b1:3') == '(a2, a3, b1, b2)'\n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..8ea65e8 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -261,8 +261,37 @@ def test_kahane_simplify1():\n     r = kahane_simplify(t)\n     assert r.equals(-2*G(sigma)*G(rho)*G(nu))\n \n+def test_kahane_leading_gamma_matrix_bug():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n+    \n+    t = G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+    \n+    t = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n \n-def test_gamma_matrix_class():\n+    # Additional tests to verify correctness of fix\n+    t = G(sigma)*G(rho)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(sigma)*G(rho))\n+\n+    t = G(mu)*G(-mu)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(16*eye(4))\n+\n+    t = G(mu)*G(nu)*G(-mu)*G(-nu)\n+    r = kahane_simplify(t)\n+    assert r.equals(-4 * eye(4))\n+\n+    t = G(nu)*G(mu)*G(-mu)*G(-nu)\n+    r = kahane_simplify(t)\n+    assert r.equals(-4 * eye(4))\n+\n+    t = G(sigma)*G(nu)*G(mu)*G(-mu)*G(-nu)\n+    r = kahane_simplify(t)\n+    assert r.equals(-2*G(sigma))\n     i, j, k = tensor_indices('i,j,k', LorentzIndex)\n \n     # define another type of TensorHead to see if exprs are correctly handled:\n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..1a7d741 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -46,6 +46,21 @@ def test_as_set():\n     raises(NotImplementedError, lambda:\n            Contains(x, FiniteSet(y)).as_set())\n \n-def test_type_error():\n+def test_as_set_error():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    # Ensure that calling as_set raises NotImplementedError\n+    raises(NotImplementedError, lambda: Contains(x, FiniteSet(y)).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, S.Reals).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, S.Integers).as_set())\n+\n+def test_piecewise_contains():\n+    x = Symbol('x')\n+    # We expect this to not raise an error, assuming Contains is handled correctly elsewhere\n+    expr = Piecewise((6, Contains(x, S.Reals)), (7, True))\n+    assert expr.subs(x, 0) == 6\n+    assert expr.subs(x, 1) == 6\n+    assert expr.subs(x, 0.5) == 6\n+    assert expr.subs(x, I) == 7\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..a56ab7c 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,7 +528,28 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n-def test_issue_20288():\n+from sympy.core.numbers import E\n+from sympy.physics.units import impedance, capacitance, time, ohm, farad, second, Quantity\n+from sympy.physics.units.systems.si import SI\n+from sympy import exp\n+from sympy.core.dimension import Dimension\n+\n+def test_issue_24062():\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n     u = Quantity('u')\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..3cf72ad 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -562,6 +562,75 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n+def test_issue_24211():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter, Dimension\n+    from sympy.physics.units.systems.si import SI\n+\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+    # Additional test cases\n+    # Test with different scale factors\n+    V2 = Quantity('V2')\n+    SI.set_quantity_dimension(V2, velocity)\n+    SI.set_quantity_scale_factor(V2, 3 * meter / second)\n+\n+    A2 = Quantity('A2')\n+    SI.set_quantity_dimension(A2, acceleration)\n+    SI.set_quantity_scale_factor(A2, 2 * meter / second**2)\n+\n+    T2 = Quantity('T2')\n+    SI.set_quantity_dimension(T2, time)\n+    SI.set_quantity_scale_factor(T2, 1.5 * second)\n+\n+    expr2 = A2*T2 + V2\n+    SI._collect_factor_and_dimension(expr2)\n+\n+    # Test with negative scale factor\n+    V3 = Quantity('V3')\n+    SI.set_quantity_dimension(V3, velocity)\n+    SI.set_quantity_scale_factor(V3, -4 * meter / second)\n+\n+    A3 = Quantity('A3')\n+    SI.set_quantity_dimension(A3, acceleration)\n+    SI.set_quantity_scale_factor(A3, -5 * meter / second**2)\n+\n+    T3 = Quantity('T3')\n+    SI.set_quantity_dimension(T3, time)\n+    SI.set_quantity_scale_factor(T3, 0.8 * second)\n+\n+    expr3 = A3*T3 + V3\n+    SI._collect_factor_and_dimension(expr3)\n+\n+    # Test with zero scale factor\n+    V4 = Quantity('V4')\n+    SI.set_quantity_dimension(V4, velocity)\n+    SI.set_quantity_scale_factor(V4, 0 * meter / second)\n+\n+    A4 = Quantity('A4')\n+    SI.set_quantity_dimension(A4, acceleration)\n+    SI.set_quantity_scale_factor(A4, 0 * meter / second**2)\n+\n+    T4 = Quantity('T4')\n+    SI.set_quantity_dimension(T4, time)\n+    SI.set_quantity_scale_factor(T4, 2 * second)\n+\n+    expr4 = A4*T4 + V4\n+    SI._collect_factor_and_dimension(expr4)\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..19e3254 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,3 +1,4 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n@@ -56,8 +57,25 @@ def test_homomorphism():\n     assert T.domain == F\n     assert T.codomain == D\n     assert T(a*b) == p\n+def test_permutation_group_homomorphism_issue():\n+    # Test for the original issue where _check_homomorphism fails with inverted generators\n+    D3 = DihedralGroup(3)\n+    # A homomorphism from D3 to itself using the same generators\n+    T = homomorphism(D3, D3, D3.generators, D3.generators)\n+    assert T.is_homomorphism()\n+    assert T.is_isomorphism()\n+\n+    # Additional checks for potential edge cases\n+    # Check homomorphism with different generators\n+    a = Permutation(0, 1, 2)\n+    b = Permutation(0, 1)\n+    G = PermutationGroup([a, b])\n+    T = homomorphism(G, G, G.generators, G.generators)\n+    assert T.is_homomorphism()\n+    assert T.is_isomorphism()\n \n-def test_isomorphisms():\n+    # Check invalid homomorphism due to generator mismatch\n+    raises(ValueError, lambda: homomorphism(G, G, [b], [a]))\n \n     F, a, b = free_group(\"a, b\")\n     E, c, d = free_group(\"c, d\")\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..bcbd8fd 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -267,6 +267,24 @@ def test_PolyElement_as_expr():\n \n     raises(ValueError, lambda: f.as_expr(X))\n \n+    # Additional test cases to verify the issue fix\n+    U, V, W = symbols(\"u,v,w\")\n+    g = 3*U**2*V - U*V*W + 7*W**3 + 1\n+\n+    # Test whether the method now correctly uses the custom symbols\n+    assert f.as_expr(U, V, W) == g\n+\n+    # Check different ordering of symbols\n+    A, B, C = symbols(\"a,b,c\")\n+    g = 3*A**2*B - A*B*C + 7*C**3 + 1\n+    assert f.as_expr(A, B, C) == g\n+\n+    # Check with a different number of symbols to ensure it raises an error\n+    raises(ValueError, lambda: f.as_expr(U, V))\n+\n+    # Check with no symbols passed, should default to original behavior\n+    assert f.as_expr() == 3*x**2*y - x*y*z + 7*z**3 + 1\n+\n     R, = ring(\"\", ZZ)\n     assert R(3).as_expr() == 3\n \n",
  "sympy__sympy-24661": "",
  "astropy__astropy-14369": "diff --git a/astropy/units/tests/test_format.py b/astropy/units/tests/test_format.py\nindex 062b5f4..3295c07 100644\n--- a/astropy/units/tests/test_format.py\n+++ b/astropy/units/tests/test_format.py\n@@ -63,6 +63,8 @@ def test_unit_grammar_fail(string):\n         ([\"10pix/nm\"], u.Unit(10 * u.pix / u.nm)),\n         ([\"1.5x10+11m\"], u.Unit(1.5e11 * u.m)),\n         ([\"1.5\u00d710+11m\"], u.Unit(1.5e11 * u.m)),\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.J / (u.m * u.s * u.kpc**2))),\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.J / (u.s * u.kpc**2))),\n         ([\"m2\"], u.m**2),\n         ([\"10+21m\"], u.Unit(u.m * 1e21)),\n         ([\"2.54cm\"], u.Unit(u.cm * 2.54)),\n",
  "astropy__astropy-14598": "",
  "django__django-11299": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex b3dc643..a3111ac 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1898,6 +1898,28 @@ class OperationTests(OperationTestBase):\n         author = Author.objects.create(name='Albert', rebate='10%')\n         self.assertEqual(Author.objects.get(), author)\n \n+    @skipUnlessDBFeature('supports_table_check_constraints')\n+    def test_combined_and_or_constraint(self):\n+        # Set up a test model with a combination of AND and OR in CheckConstraint\n+        app_label = 'test_combined_and_or_constraint'\n+        constraint_name = 'combined_constraint'\n+        from_state = self.set_up_test_model(app_label)\n+        check = models.Q(field_1__isnull=False, flag=True) | models.Q(flag=False)\n+        constraint = models.CheckConstraint(check=check, name=constraint_name)\n+        operation = migrations.AddConstraint('TestConstraint', constraint)\n+        to_state = from_state.clone()\n+        operation.state_forwards(app_label, to_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, from_state, to_state)\n+        TestConstraint = to_state.apps.get_model(app_label, 'TestConstraint')\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            # Both field_1 is null and flag is True should violate the constraint\n+            TestConstraint.objects.create(field_1=None, flag=True)\n+        # field_1 is null and flag is False should pass\n+        TestConstraint.objects.create(field_1=None, flag=False)\n+        # field_1 is not null and flag is True should pass\n+        TestConstraint.objects.create(field_1=1, flag=True)\n+\n     @skipUnlessDBFeature('supports_table_check_constraints')\n     def test_remove_constraint(self):\n         project_state = self.set_up_test_model(\"test_removeconstraint\", constraints=[\n",
  "django__django-11477": "diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex e4898b6..4354fc3 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -163,8 +163,18 @@ class URLTranslationTests(URLTestCaseBase):\n             self.assertEqual(translate_url('/nl/gebruikers/', 'en'), '/en/users/')\n             self.assertEqual(translation.get_language(), 'nl')\n \n-\n-class URLNamespaceTests(URLTestCaseBase):\n+    def test_translate_url_with_optional_parameters(self):\n+        # Test with both regular and optional parameters present\n+        self.assertEqual(translate_url('/en/with-arguments/regular-argument/optional.html', 'nl'), '/nl/with-arguments/regular-argument/optional.html')\n+        \n+        # Test with only the regular parameter present, optional one missing\n+        self.assertEqual(translate_url('/en/with-arguments/regular-argument/', 'nl'), '/nl/with-arguments/regular-argument/')\n+        \n+        # Test with numeric optional parameters, both present\n+        self.assertEqual(translate_url('/en/regex_optional/1/2/', 'nl'), '/nl/regex_optional/1/2/')\n+        \n+        # Test with numeric optional parameters, second one missing\n+        self.assertEqual(translate_url('/en/regex_optional/1/', 'nl'), '/nl/regex_optional/1/')\n     \"\"\"\n     Tests if the translations are still working within namespaces.\n     \"\"\"\n",
  "django__django-12273": "diff --git a/tests/model_inheritance_regress/tests.py b/tests/model_inheritance_regress/tests.py\nindex d79faca..cf4bcc0 100644\n--- a/tests/model_inheritance_regress/tests.py\n+++ b/tests/model_inheritance_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Regression tests for Model inheritance behavior.\n \"\"\"\n@@ -15,10 +16,25 @@ from .models import (\n     Person, Place, Profile, QualityControl, Restaurant, SelfRefChild,\n     SelfRefParent, Senator, Supplier, TrainStation, User, Wholesaler,\n )\n+from .models import Item, Derived\n \n \n class ModelInheritanceTest(TestCase):\n-    def test_model_inheritance(self):\n+    def test_create_new_instance_with_pk_equals_none_derived(self):\n+        derived1 = Derived.objects.create(f=True)\n+        derived_copy = Derived.objects.get(pk=derived1.pk)\n+        derived_copy.pk = None\n+        derived_copy.save()\n+        self.assertEqual(Derived.objects.count(), 2)\n+        self.assertTrue(Derived.objects.get(pk=derived1.pk).f)\n+\n+    def test_reset_method_creates_new_instance(self):\n+        derived1 = Derived.objects.create(f=True)\n+        derived_copy = Derived.objects.get(pk=derived1.pk)\n+        derived_copy.reset()\n+        derived_copy.save()\n+        self.assertEqual(Derived.objects.count(), 2)\n+        self.assertTrue(Derived.objects.get(pk=derived1.pk).f)\n         # Regression for #7350, #7202\n         # When you create a Parent object with a specific reference to an\n         # existent child instance, saving the Parent doesn't duplicate the\n",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..588b334 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -604,8 +604,49 @@ class DeletionTests(TestCase):\n                 signal.disconnect(receiver, sender=Referrer)\n \n \n+from django.db import connection\n+from django.test import TestCase\n+from .models import User, Avatar, M2MTo, M2MFrom, Origin, Referrer, Child, Parent\n+from django.db.models.signals import signal\n+\n class FastDeleteTests(TestCase):\n \n+    def test_fast_delete_all(self):\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        # No subqueries are used when performing a full delete.\n+        self.assertNotIn('SELECT', sql)\n+\n+    def test_delete_with_lock_tables(self):\n+        \"\"\"\n+        Test to ensure that deletion of all objects does not use subqueries which\n+        can cause issues with MySQL LOCK TABLES.\n+        \"\"\"\n+        with connection.cursor() as cursor:\n+            # Lock the table\n+            cursor.execute('LOCK TABLES `myapp_user` WRITE')\n+            with self.assertNumQueries(1):\n+                User.objects.all().delete()\n+            # Unlock the tables\n+            cursor.execute('UNLOCK TABLES')\n+\n+    def test_delete_performance_regression(self):\n+        \"\"\"\n+        Test to ensure that the DELETE operation does not suffer from performance\n+        regression by avoiding subqueries.\n+        \"\"\"\n+        # Create 100k users\n+        User.objects.bulk_create(User() for _ in range(100000))\n+        \n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        \n+        sql = ctx.captured_queries[0]['sql']\n+        # The delete query should not contain a subquery\n+        self.assertNotIn('SELECT', sql)\n+        self.assertEqual(User.objects.count(), 0)\n+\n     def test_fast_delete_fk(self):\n         u = User.objects.create(\n             avatar=Avatar.objects.create()\n@@ -702,4 +743,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..22082e8 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from decimal import Decimal\n \n@@ -24,8 +25,24 @@ class DecimalFieldTests(TestCase):\n         msg = '\u201cabc\u201d value must be a decimal number.'\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n-\n-    def test_default(self):\n+    \n+    def test_invalid_value(self):\n+        field = models.DecimalField(max_digits=4, decimal_places=2)\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        tests = [\n+            (),\n+            [],\n+            {},\n+            set(),\n+            object(),\n+            complex(),\n+            'non-numeric string',\n+            b'non-numeric byte-string',\n+        ]\n+        for value in tests:\n+            with self.subTest(value=value):\n+                with self.assertRaisesMessage(ValidationError, msg % (value,)):\n+                    field.to_python(value)\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n \n",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..f1db51b 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n \n@@ -5,7 +6,7 @@ import django\n from django.db import models\n from django.test import TestCase\n \n-from .models import Container, Event, Group, Happening, M2MModel, MyEvent\n+from .models import Container, Event, Group, Happening, M2MModel, MyEvent, Toy\n \n \n class PickleabilityTestCase(TestCase):\n",
  "django__django-13449": "diff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\nindex 3f59cdf..f1ccb6a 100644\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -9,6 +9,7 @@ class Employee(models.Model):\n     name = models.CharField(max_length=40, blank=False, null=False)\n     salary = models.PositiveIntegerField()\n     department = models.CharField(max_length=40, blank=False, null=False)\n+    bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\n     hire_date = models.DateField(blank=False, null=False)\n     age = models.IntegerField(blank=False, null=False)\n-    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n",
  "django__django-13512": "diff --git a/tests/forms_tests/field_tests/test_jsonfield.py b/tests/forms_tests/field_tests/test_jsonfield.py\nindex e31bff4..2582e58 100644\n--- a/tests/forms_tests/field_tests/test_jsonfield.py\n+++ b/tests/forms_tests/field_tests/test_jsonfield.py\n@@ -30,7 +30,17 @@ class JSONFieldTest(SimpleTestCase):\n         self.assertEqual(field.prepare_value(None), 'null')\n         self.assertEqual(field.prepare_value('foo'), '\"foo\"')\n \n-    def test_widget(self):\n+    def test_unicode_serialization(self):\n+        field = JSONField()\n+        # Test Chinese characters serialization\n+        self.assertEqual(field.prepare_value({'a': '\u4f60\u597d\uff0c\u4e16\u754c'}), '{\"a\": \"\u4f60\u597d\uff0c\u4e16\u754c\"}')\n+        # Test emoji serialization\n+        self.assertEqual(field.prepare_value({'a': '\ud83d\ude00\ud83d\udc31'}), '{\"a\": \"\ud83d\ude00\ud83d\udc31\"}')\n+        # Test mixed Unicode characters\n+        self.assertEqual(\n+            field.prepare_value(['\u4f60\u597d\uff0c\u4e16\u754c', 'ja\u017a\u0144']), \n+            '[\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]'\n+        )\n         field = JSONField()\n         self.assertIsInstance(field.widget, Textarea)\n \n",
  "django__django-14404": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 8fb91af..d49ea0d 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -6603,6 +6603,55 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         self.assertRedirects(response, known_url, status_code=301, target_status_code=403)\n \n     @override_settings(APPEND_SLASH=True)\n+    \n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/prefix/')\n+    def test_redirect_with_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=False, FORCE_SCRIPT_NAME='/prefix/')\n+    def test_no_append_slash_with_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertEqual(response.status_code, 404)\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/custom/')\n+    def test_custom_script_name_append_slash(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/custom' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n         user = User.objects.create_user(\n             username='user',\n@@ -6629,6 +6678,55 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         self.assertEqual(response.status_code, 404)\n \n     @override_settings(APPEND_SLASH=True)\n+    \n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/prefix/')\n+    def test_redirect_with_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=False, FORCE_SCRIPT_NAME='/prefix/')\n+    def test_no_append_slash_with_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertEqual(response.status_code, 404)\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/custom/')\n+    def test_custom_script_name_append_slash(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/custom' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n     def test_single_model_no_append_slash(self):\n         superuser = User.objects.create_user(\n             username='staff',\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..aa8315b 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -690,8 +690,45 @@ class WriterTests(SimpleTestCase):\n         # Just make sure it runs for now, and that things look alright.\n         result = self.safe_exec(output)\n         self.assertIn(\"Migration\", result)\n+    def test_imports_in_migration(self):\n+        \"\"\"\n+        Test that migrations include necessary imports when using custom fields and mixins.\n+        \"\"\"\n+        class MyField(models.TextField):\n+            pass\n+\n+        class MyMixin:\n+            pass\n+\n+        class MyBaseModel(models.Model):\n+            class Meta:\n+                abstract = True\n+\n+        fields = {\n+            'name': MyField(primary_key=True),\n+        }\n \n-    def test_migration_path(self):\n+        migration = type(\"Migration\", (migrations.Migration,), {\n+            \"operations\": [\n+                migrations.CreateModel(\n+                    name='MyModel',\n+                    fields=tuple(fields.items()),\n+                    options={'abstract': False},\n+                    bases=(MyMixin, MyBaseModel),\n+                ),\n+            ],\n+            \"dependencies\": [],\n+        })\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+\n+        # Check if the necessary imports are present\n+        self.assertIn(\"from django.db import models\", output)\n+        self.assertIn(\"import app.models\", output)\n+\n+        # Execute to ensure the output is valid Python code\n+        result = self.safe_exec(output)\n+        self.assertIn(\"Migration\", result)\n         test_apps = [\n             'migrations.migrations_test_apps.normal',\n             'migrations.migrations_test_apps.with_package_model',\n",
  "django__django-15375": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1d4ef56..08b2bdd 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1630,6 +1630,24 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertAlmostEqual(result['value'], Decimal('61.72'), places=2)\n \n+    def test_aggregation_default_after_annotation(self):\n+        result = Book.objects.annotate(\n+            idx=F(\"id\")\n+        ).aggregate(value=Sum(\"id\", default=0))\n+        self.assertEqual(result['value'], Book.objects.aggregate(Sum(\"id\"))['id__sum'])\n+\n+    def test_aggregation_default_after_annotation_with_filter(self):\n+        result = Book.objects.annotate(\n+            idx=F(\"id\")\n+        ).aggregate(value=Sum('id', filter=Q(id__gt=0), default=0))\n+        self.assertEqual(result['value'], Book.objects.filter(id__gt=0).aggregate(Sum(\"id\"))['id__sum'])\n+\n+    def test_aggregation_without_default_after_annotation(self):\n+        result = Book.objects.annotate(\n+            idx=F(\"id\")\n+        ).aggregate(value=Sum(\"id\"))\n+        self.assertEqual(result['value'], Book.objects.aggregate(Sum(\"id\"))['id__sum'])\n+\n     def test_exists_none_with_aggregate(self):\n         qs = Book.objects.all().annotate(\n             count=Count('id'),\n@@ -1642,4 +1660,4 @@ class AggregateTestCase(TestCase):\n             count=Count('id'),\n             exists=Exists(Author.objects.extra(where=['1=0'])),\n         )\n-        self.assertEqual(len(qs), 6)\n+        self.assertEqual(len(qs), 6)\n",
  "django__django-15695": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 99db46a..783dd0e 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -2979,6 +2979,31 @@ class OperationTests(OperationTestBase):\n         )\n \n         new_state = project_state.clone()\n+\n+        # Test with unnamed index (auto-generated name)\n+        # Initial index creation, simulate auto-generated name.\n+        with connection.schema_editor() as editor:\n+            editor.execute(\n+                \"CREATE UNIQUE INDEX auto_generated_idx ON {} ({}, {})\".format(\n+                    table_name, \"weight\", \"pink\"\n+                )\n+            )\n+        self.assertIndexNameExists(table_name, \"auto_generated_idx\")\n+\n+        # Rename the auto-generated index to a new name\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+\n+        # Move backwards, the index should revert to auto-generated name\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        self.assertIndexNameExists(table_name, \"auto_generated_idx\")\n+\n+        # Reapply renaming, should successfully rename again without crashing.\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n         operation.state_forwards(app_label, new_state)\n         # Rename index.\n         with connection.schema_editor() as editor:\n",
  "django__django-15732": "",
  "django__django-15916": "",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..bcf16fe 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -6,6 +6,10 @@ import re\n from django.core import serializers\n from django.core.serializers.base import DeserializationError\n from django.core.serializers.json import DjangoJSONEncoder\n+from django.core.serializers import serialize\n+from django.core.exceptions import FieldError\n+from django.db import models\n+from django.test import TestCase\n from django.db import models\n from django.test import SimpleTestCase, TestCase, TransactionTestCase\n from django.test.utils import isolate_apps\n",
  "matplotlib__matplotlib-23476": "",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 87375f2..6dd603d 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6603,6 +6603,19 @@ def test_integrate(dask):\n     with pytest.raises(ValueError):\n         da.integrate(\"x2d\")\n \n+    # Check using coord with DataArray\n+    expected_x = xr.DataArray(\n+        np.trapz(da, da[\"x\"], axis=0),\n+        dims=[\"y\"],\n+        coords={k: v for k, v in da.coords.items() if \"x\" not in v.dims},\n+    )\n+    actual_coord = da.integrate(coord=\"x\")\n+    assert_allclose(expected_x, actual_coord.compute())\n+\n+    # Check for FutureWarning when using dim with DataArray\n+    with pytest.warns(FutureWarning):\n+        da.integrate(dim=\"x\")\n+\n \n @pytest.mark.parametrize(\"dask\", [True, False])\n @pytest.mark.parametrize(\"which_datetime\", [\"np\", \"cftime\"])\n",
  "pydata__xarray-4094": "",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..07d7200 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -114,8 +114,35 @@ def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     output = capsys.readouterr()\n     assert \"the-newest has an invalid format, should be a version string.\" in output.err\n \n+from typing import Any\n+import re\n+import pytest\n+from pylint.lint import Run\n+\n+CSV_REGEX_COMMA_CASES = [\n+    (\"foo\", [\"foo\"]),\n+    (\"foo,bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar{1,3}\", [\"foo\", \"bar{1,3}\"]),\n+    (\"(foo{1,3})\", [\"(foo{1,3})\"]),\n+    (\"foo(a{2,4},b{1,2})\", [\"foo(a{2,4},b{1,2})\"]),\n+    (\"foo, (bar{1,}), (baz{1,3})\", [\"foo\", \"(bar{1,})\", \"(baz{1,3})\"]),\n+]\n+\n+@pytest.mark.parametrize(\"in_string,expected\", CSV_REGEX_COMMA_CASES)\n+def test_csv_regex_comma_handling(in_string: str, expected: list[str]) -> None:\n+    \"\"\"Check that we correctly parse a comma-separated regex when there are one\n+    or more commas within quantifier expressions.\"\"\"\n+    \n+    def _template_run(in_string: str) -> list[re.Pattern[Any]]:\n+        r = Run(\n+            [str(EMPTY_MODULE), rf\"--bad-names-rgx={in_string}\"],\n+            exit=False,\n+        )\n+        bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs\n+        return bad_names_rgxs\n \n-def test_regex_error(capsys: CaptureFixture) -> None:\n+    assert _template_run(in_string) == [re.compile(regex) for regex in expected]\n     \"\"\"Check that we correctly error when an an option is passed whose value is an invalid regular expression.\"\"\"\n     with pytest.raises(SystemExit):\n         Run(\n",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..3bfd2d6 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1156,6 +1156,9 @@ def test_summary_list_after_errors(testdir):\n     )\n \n \n+import pytest\n+from _pytest.main import ExitCode\n+\n def test_importorskip():\n     with pytest.raises(\n         pytest.skip.Exception,\n@@ -1184,4 +1187,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "diff --git a/testing/test_mark_expression.py b/testing/test_mark_expression.py\nindex 10b71e9..a5cf88a 100644\n--- a/testing/test_mark_expression.py\n+++ b/testing/test_mark_expression.py\n@@ -139,6 +139,20 @@ def test_valid_idents(ident: str) -> None:\n     assert evaluate(ident, {ident: True}.__getitem__)\n \n \n+@pytest.mark.parametrize(\n+    \"expression\",\n+    [\n+        \"None\",\n+        \"True\",\n+        \"False\",\n+    ],\n+)\n+def test_compile_reserved_literals(expression: str) -> None:\n+    \"\"\"Test compilation of expressions containing reserved Python literals.\"\"\"\n+    with pytest.raises(AssertionError):\n+        Expression.compile(expression)\n+\n+\n @pytest.mark.parametrize(\n     \"ident\",\n     (\n",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..0e4f2d8 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,35 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+def test_feature_union_with_pandas_transform_output():\n+    \"\"\"Test FeatureUnion with pandas as transform output.\"\"\"\n+\n+    import pandas as pd\n+    from sklearn.pipeline import make_union\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn import set_config\n+    from numpy.testing import assert_array_equal\n+\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y: pd.Series | None = None, **kwargs):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y: pd.Series | None = None) -> pd.DataFrame:\n+            return X[\"value\"].groupby(X[\"date\"]).sum().to_frame()\n+\n+    # Test with default output (numpy)\n+    set_config(transform_output=\"default\")\n+    result_default = make_union(MyTransformer()).fit_transform(data)\n+\n+    # Test with pandas output\n+    set_config(transform_output=\"pandas\")\n+    result_pandas = make_union(MyTransformer()).fit_transform(data)\n+    \n+    # Ensure both results are equivalent\n+    assert_array_equal(result_default, result_pandas.to_numpy())\n",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex f07be18..6e7c595 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -13,7 +13,35 @@ import pytest\n from sphinx import addnodes\n \n \n-@pytest.mark.sphinx('dummy', testroot='ext-autodoc')\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_autodoc_typehints_none_link_description(app, status, warning):\n+    app.config.autodoc_typehints = 'description'\n+    app.builder.build_all()\n+\n+    content = app.env.get_doctree('index')\n+    # Check if None is linked correctly in description mode\n+    for node in content.traverse(addnodes.pending_xref):\n+        if node['reftarget'] == 'None':\n+            assert node['refdomain'] == 'py'\n+            assert node['reftype'] == 'obj'\n+            break\n+    else:\n+        pytest.fail(\"No reference to None found in description mode.\")\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_autodoc_typehints_none_link_signature(app, status, warning):\n+    app.config.autodoc_typehints = 'signature'\n+    app.builder.build_all()\n+\n+    content = app.env.get_doctree('index')\n+    # Check if None is linked correctly in signature mode\n+    for node in content.traverse(addnodes.pending_xref):\n+        if node['reftarget'] == 'None':\n+            assert node['refdomain'] == 'py'\n+            assert node['reftype'] == 'obj'\n+            break\n+    else:\n+        pytest.fail(\"No reference to None found in signature mode.\")\n def test_autodoc(app, status, warning):\n     app.builder.build_all()\n \n@@ -30,4 +58,4 @@ def test_autodoc(app, status, warning):\n my_name\n \n alias of bug2437.autodoc_dummy_foo.Foo\"\"\"\n-    assert warning.getvalue() == ''\n+    assert warning.getvalue() == ''\n",
  "sphinx-doc__sphinx-8056": "",
  "sphinx-doc__sphinx-8551": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex fd4bdc4..464113b 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -773,9 +773,51 @@ def test_pydecoratormethod_signature(app):\n     assert 'deco' in domain.objects\n     assert domain.objects['deco'] == ('index', 'deco', 'method')\n \n+import pytest\n+from sphinx.testing.util import assert_node\n+from sphinx import addnodes\n+from docutils import nodes\n+from sphinx.testing.restructuredtext import parse\n \n @pytest.mark.sphinx(freshenv=True)\n-def test_module_index(app):\n+def test_type_and_rtype_ambiguous_lookup(app):\n+    text = (\"\"\"\n+    .. py:class:: mod.A\n+    .. py:class:: mod.submod.A\n+\n+    .. py:function:: f()\n+\n+        :param mod.A a:\n+        :param mod.submod.A b:\n+        :rtype: mod.A\n+        :rtype: mod.submod.A\n+\n+    .. py:currentmodule:: mod\n+\n+    .. py:function:: f()\n+\n+        :param A a:\n+        :param mod.A b:\n+        :param mod.submod.A c:\n+        :rtype: A\n+        :rtype: mod.A\n+        :rtype: mod.submod.A\n+\n+    .. py:currentmodule:: mod.submod\n+\n+    .. py:function:: f()\n+\n+        :param A a:\n+        :param mod.A b:\n+        :param mod.submod.A c:\n+        :rtype: A\n+        :rtype: mod.A\n+        :rtype: mod.submod.A\n+    \"\"\")\n+\n+    doctree = parse(app, text)\n+    assert_node(doctree, nodes.document)\n+    assert len(doctree.traverse(nodes.warning)) == 0, \"Expected no ambiguous lookup warnings\"\n     text = (\".. py:module:: docutils\\n\"\n             \".. py:module:: sphinx\\n\"\n             \".. py:module:: sphinx.config\\n\"\n",
  "sphinx-doc__sphinx-8593": "",
  "sphinx-doc__sphinx-9230": "",
  "sphinx-doc__sphinx-9258": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a7d51b6..9113527 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -1008,8 +1008,44 @@ def test_info_field_list(app):\n                 refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n+def test_info_field_list_union_type_multiple(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:function:: func\\n\"\n+            \"\\n\"\n+            \"   :param data: input data\\n\"\n+            \"   :type data: list | tuple | None\\n\"\n+            \"   :returns: processed data\\n\"\n+            \"   :rtype: dict | None\\n\")\n+    doctree = restructuredtext.parse(app, text)\n \n-def test_info_field_list_var(app):\n+    assert_node(doctree,\n+                (nodes.target,\n+                 addnodes.index,\n+                 addnodes.index,\n+                 [desc, ([desc_signature, ([desc_annotation, \"function \"],\n+                                           [desc_addname, \"example.\"],\n+                                           [desc_name, \"func\"])],\n+                         [desc_content,\n+                          nodes.field_list,\n+                          nodes.field, \n+                          (nodes.field_name, nodes.field_body),\n+                          nodes.field, \n+                          (nodes.field_name, nodes.field_body)])]))\n+    assert_node(doctree[3][1][0][0][1][0][3][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"list\",\n+                **{\"py:module\": \"example\", \"py:function\": \"func\"})\n+    assert_node(doctree[3][1][0][0][1][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"tuple\",\n+                **{\"py:module\": \"example\", \"py:function\": \"func\"})\n+    assert_node(doctree[3][1][0][0][1][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"None\",\n+                **{\"py:module\": \"example\", \"py:function\": \"func\"})\n+    assert_node(doctree[3][1][0][0][1][1][3][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"dict\",\n+                **{\"py:module\": \"example\", \"py:function\": \"func\"})\n+    assert_node(doctree[3][1][0][0][1][1][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"None\",\n+                **{\"py:module\": \"example\", \"py:function\": \"func\"})\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n             \"   :var int attr: blah blah\\n\")\n",
  "sphinx-doc__sphinx-9673": "",
  "sympy__sympy-18211": "diff --git a/sympy/solvers/tests/test_solveset.py b/sympy/solvers/tests/test_solveset.py\nindex 7bd9e29..7926536 100644\n--- a/sympy/solvers/tests/test_solveset.py\n+++ b/sympy/solvers/tests/test_solveset.py\n@@ -1067,9 +1067,16 @@ def test_conditionset():\n     assert solveset(y**x-z, x, S.Reals) == \\\n         ConditionSet(x, Eq(y**x - z, 0), S.Reals)\n \n-\n-@XFAIL\n-def test_conditionset_equality():\n+def test_issue_conditionset():\n+    n = symbols('n', real=True)\n+    # Original issue: solveset raising NotImplementedError\n+    result = Eq(n*cos(n) - 3*sin(n), 0)\n+    assert solveset(result, n, domain=Reals) == ConditionSet(n, result, Reals)\n+\n+    # Additional complex equation\n+    x = symbols('x', real=True)\n+    result2 = Eq(x**2 + sqrt(x*2) + sin(x), 0)\n+    assert solveset(result2, x, domain=Reals) == ConditionSet(x, Eq(sqrt(2)*sqrt(x) + x**2 + sin(x), 0), Reals)\n     ''' Checking equality of different representations of ConditionSet'''\n     assert solveset(Eq(tan(x), y), x) == ConditionSet(x, Eq(tan(x), y), S.Complexes)\n \n",
  "sympy__sympy-18698": "",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..07ee143 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3248,8 +3248,13 @@ def test_poly_matching_consistency():\n     assert I * Poly(x, x) == Poly(I*x, x)\n     assert Poly(x, x) * I == Poly(I*x, x)\n \n+from sympy import I, expand, factor, symbols\n \n-@XFAIL\n+def test_issue_18895():\n+    x, y = symbols('x y')\n+    z = expand((x-1)*(y-1))\n+    factored = factor(z, extension=[I])\n+    assert factored == (x - 1)*(y - 1)\n def test_issue_5786():\n     assert expand(factor(expand(\n         (x - I*y)*(z - I*t)), extension=[I])) == -I*t*x - t*y + x*z - I*y*z\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..b2cabc5 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -1,3 +1,10 @@\n+\n+def test_symbol_no_dict():\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__'), \"Symbol instances should not have a __dict__ attribute\"\n+    with raises(AttributeError):\n+        _ = s.__dict__\n+\n \"\"\"This tests sympy/core/basic.py with (ideally) no reference to subclasses\n of Basic or Atom.\"\"\"\n \n@@ -6,6 +13,7 @@ import collections\n from sympy.core.basic import (Basic, Atom, preorder_traversal, as_Basic,\n     _atomic, _aresame)\n from sympy.core.singleton import S\n+from sympy.core.symbol import Symbol\n from sympy.core.symbol import symbols, Symbol, Dummy\n from sympy.core.sympify import SympifyError\n from sympy.core.function import Function, Lambda\n",
  "sympy__sympy-24562": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 13e3235..faccfa2 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -370,6 +370,27 @@ def test_Rational_new():\n     assert n.p == -2\n \n \n+from sympy import Rational\n+\n+def test_issue_resolution_for_rational_string_input():\n+    # Check that Rational('0.5', '100') correctly evaluates to 1/200\n+    assert Rational('0.5', '100') == Rational(1, 200)\n+\n+    # Check that Rational('1.5', '300') correctly evaluates to 1/200\n+    assert Rational('1.5', '300') == Rational(1, 200)\n+\n+    # Check that Rational('25', '100') correctly evaluates to 1/4\n+    assert Rational('25', '100') == Rational(1, 4)\n+\n+    # Check that Rational('0.75', '300') correctly evaluates to 1/400\n+    assert Rational('0.75', '300') == Rational(1, 400)\n+\n+    # Non-string arguments should still work correctly\n+    assert Rational(0.5, 100) == Rational(1, 200)\n+    assert Rational(1.5, 300) == Rational(1, 200)\n+    assert Rational(25, 100) == Rational(1, 4)\n+    assert Rational(0.75, 300) == Rational(1, 400)\n+\n def test_Number_new():\n     \"\"\"\"\n     Test for Number constructor\n",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..b1456af 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,7 +3202,22 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n-    def test_boundfield_widget_type(self):\n+    def test_boundwidget_id_for_label_respects_choicewidget_options(self):\n+        \"\"\"\n+        Verify that BoundWidget.id_for_label uses the id set by ChoiceWidget.options.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'base_id'}),\n+            )\n+\n+        form = SomeForm(auto_id='prefix_%s')\n+        subwidgets = form['field'].subwidgets\n+\n+        # Assuming the fix has been applied, these should reflect the ids set in ChoiceWidget.options\n+        self.assertEqual(subwidgets[0].id_for_label, 'base_id_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'base_id_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "matplotlib__matplotlib-20676": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex b009975..1741f0c 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -301,8 +301,49 @@ def test_tool_line_handle():\n \n     assert tool_line_handle.positions == positions\n \n+from matplotlib import pyplot as plt\n+from matplotlib import widgets\n \n-def check_lasso_selector(**kwargs):\n+import pytest\n+from matplotlib.testing.widgets import do_event\n+from matplotlib.patches import Rectangle\n+\n+@pytest.mark.parametrize('direction', (\"horizontal\", \"vertical\"))\n+def test_span_selector_bound(direction):\n+    fig, ax = plt.subplots(1, 1)\n+    ax.plot([10, 20], [10, 30])\n+    ax.figure.canvas.draw()\n+    x_bound = ax.get_xbound()\n+    y_bound = ax.get_ybound()\n+\n+    tool = widgets.SpanSelector(ax, print, direction, interactive=True)\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    bound = x_bound if direction == 'horizontal' else y_bound\n+    assert tool._edge_handles.positions == list(bound)\n+\n+    press_data = [10.5, 11.5]\n+    move_data = [11, 13]  # Updating selector is done in onmove\n+    release_data = move_data\n+    do_event(tool, 'press', xdata=press_data[0], ydata=press_data[1], button=1)\n+    do_event(tool, 'onmove', xdata=move_data[0], ydata=move_data[1], button=1)\n+\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    index = 0 if direction == 'horizontal' else 1\n+    handle_positions = [press_data[index], release_data[index]]\n+    assert tool._edge_handles.positions == handle_positions\n+\n+    # Additional test: verify no forced inclusion of zero in axis limits\n+    ax.plot([10, 20], [30, 40])\n+    ax.figure.canvas.draw()\n+    new_x_bound = ax.get_xbound()\n+    new_y_bound = ax.get_ybound()\n+\n+    assert new_x_bound[0] > 0  # Ensure the x-axis lower bound does not include zero\n+    assert new_y_bound[0] > 0  # Ensure the y-axis lower bound does not include zero\n     ax = get_ax()\n \n     def onselect(verts):\n",
  "scikit-learn__scikit-learn-12682": "diff --git a/sklearn/decomposition/tests/test_dict_learning.py b/sklearn/decomposition/tests/test_dict_learning.py\nindex 35a43f8..9cb017f 100644\n--- a/sklearn/decomposition/tests/test_dict_learning.py\n+++ b/sklearn/decomposition/tests/test_dict_learning.py\n@@ -51,6 +51,58 @@ def test_dict_learning_shapes():\n     assert_equal(dico.transform(X).shape, (X.shape[0], n_components))\n \n \n+import numpy as np\n+import pytest\n+from sklearn.decomposition import SparseCoder\n+from sklearn.exceptions import ConvergenceWarning\n+\n+def test_sparse_coder_max_iter():\n+    def ricker_function(resolution, center, width):\n+        \"\"\"Discrete sub-sampled Ricker (Mexican hat) wavelet\"\"\"\n+        x = np.linspace(0, resolution - 1, resolution)\n+        x = ((2 / (np.sqrt(3 * width) * np.pi ** .25))\n+             * (1 - (x - center) ** 2 / width ** 2)\n+             * np.exp(-(x - center) ** 2 / (2 * width ** 2)))\n+        return x\n+\n+    def ricker_matrix(width, resolution, n_components):\n+        \"\"\"Dictionary of Ricker (Mexican hat) wavelets\"\"\"\n+        centers = np.linspace(0, resolution - 1, n_components)\n+        D = np.empty((n_components, resolution))\n+        for i, center in enumerate(centers):\n+            D[i] = ricker_function(resolution, center, width)\n+        D /= np.sqrt(np.sum(D ** 2, axis=1))[:, np.newaxis]\n+        return D\n+\n+    transform_algorithm = 'lasso_cd'\n+    resolution = 1024\n+    subsampling = 3  # subsampling factor\n+    n_components = resolution // subsampling\n+\n+    # Compute a wavelet dictionary\n+    D_multi = np.r_[tuple(ricker_matrix(width=w, resolution=resolution,\n+                          n_components=n_components // 5)\n+                          for w in (10, 50, 100, 500, 1000))]\n+\n+    X = np.linspace(0, resolution - 1, resolution)\n+    first_quarter = X < resolution / 4\n+    X[first_quarter] = 3.\n+    X[np.logical_not(first_quarter)] = -1.\n+    X = X.reshape(1, -1)\n+\n+    # check that the underlying model fails to converge\n+    with pytest.warns(ConvergenceWarning):\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=1)\n+        model.fit_transform(X)\n+\n+    # check that the underlying model converges w/o warnings\n+    with pytest.warns(None) as record:\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=2000)\n+        model.fit_transform(X)\n+    assert not record.list\n+\n def test_dict_learning_overcomplete():\n     n_components = 12\n     dico = DictionaryLearning(n_components, random_state=0).fit(X)\n",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..b9272cc 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -148,6 +148,32 @@ def test_multi_target_sample_weights():\n     assert_almost_equal(rgr.predict(X_test), rgr_w.predict(X_test))\n \n \n+import pytest\n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+from sklearn.model_selection import cross_val_predict\n+from sklearn.utils.validation import check_is_fitted\n+from numpy.testing import assert_array_equal\n+\n+def test_cross_val_predict_multioutput_predict_proba():\n+    # Test cross_val_predict with MultiOutputClassifier and predict_proba\n+    X, Y = make_multilabel_classification(n_samples=100, n_features=20, n_classes=3, n_labels=2, random_state=42)\n+\n+    base_clf = LinearDiscriminantAnalysis()\n+    mo_clf = MultiOutputClassifier(base_clf)\n+    \n+    # Ensure that predict_proba can be called without errors\n+    pred_proba = cross_val_predict(mo_clf, X, Y, cv=5, method='predict_proba')\n+\n+    assert isinstance(pred_proba, list)\n+    assert len(pred_proba) == Y.shape[1]  # Should match the number of outputs\n+\n+    for i in range(Y.shape[1]):\n+        check_is_fitted(mo_clf.estimators_[i])\n+        expected_proba = mo_clf.estimators_[i].predict_proba(X)\n+        assert_array_equal(pred_proba[i].shape, expected_proba.shape)\n+\n # Import the data\n iris = datasets.load_iris()\n # create a multiple targets by randomized shuffling and concatenating y.\n",
  "sphinx-doc__sphinx-9658": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 072cdc7..807e69c 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -292,5 +292,23 @@ def test_stringify_type_union_operator():\n     assert stringify(int | str | None) == \"int | str | None\"  # type: ignore\n \n \n+def test_documentation_for_mocked_inherited_classes():\n+    \"\"\"\n+    Test to verify that classes inheriting from mocked classes are documented correctly.\n+    Specifically checks that the \"Bases\" section is fully qualified.\n+    \"\"\"\n+    with mock(['torch.nn']):\n+        import torch.nn as nn\n+        class MockedBase(nn.Module):\n+            pass\n+\n+        class InheritedClass(MockedBase):\n+            pass\n+\n+        # Simulate what restify would do in Sphinx for the base class\n+        assert restify(InheritedClass) == ':py:class:`tests.test_util_typing.MockedBase`'\n+        # Verify that the Stringify returns the full module path\n+        assert stringify(InheritedClass) == 'tests.test_util_typing.InheritedClass'\n+\n def test_stringify_broken_type_hints():\n     assert stringify(BrokenType) == 'tests.test_util_typing.BrokenType'\n",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..32c881f 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -347,8 +347,29 @@ def test_reverse_order():\n     assert Product(x*y, (x, a, b), (y, 2, 5)).reverse_order(y, x) == \\\n            Product(x*y, (x, b + 1, a - 1), (y, 6, 1))\n \n-\n-def test_issue_9983():\n+def test_issue_13546():\n+    from sympy import Product, Symbol, S\n+    from sympy.abc import n, k\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 2).doit() == S(15)/2\n+\n+def test_q_pochhammer_product():\n+    # Testing with specific values to verify the correctness of the q-Pochhammer product\n+    from sympy import Product, Symbol, S\n+    from sympy.abc import n, k\n+\n+    # For n=2, the product should be (2 + 2^0) * (2 + 2^(-1)) = 3 * 2.5 = 15/2\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 2).doit() == S(15)/2\n+\n+    # Test another value for n=3\n+    # Expected product: (3 + 2^0) * (3 + 2^(-1)) * (3 + 2^(-2))\n+    # = 4 * 3.5 * 3.25 = 45.5\n+    assert p.subs(n, 3).doit().evalf() == 45.5\n+\n+    # Test base case where n=1\n+    # Expected product: (1 + 2^0) = 2\n+    assert p.subs(n, 1).doit() == S(2)\n     n = Symbol('n', integer=True, positive=True)\n     p = Product(1 + 1/n**(S(2)/3), (n, 1, oo))\n     assert p.is_convergent() is S.false\n@@ -357,4 +378,4 @@ def test_issue_9983():\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}