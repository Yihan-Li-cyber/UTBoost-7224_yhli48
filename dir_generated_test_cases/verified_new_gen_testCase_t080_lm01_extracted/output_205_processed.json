{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..adb20e2 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -134,7 +134,29 @@ def test_separable(compound_model, result):\n     assert_allclose(is_separable(compound_model), result[0])\n     assert_allclose(separability_matrix(compound_model), result[1])\n \n-\n+@pytest.mark.parametrize(\"model, expected_matrix\", [\n+    # Test nested CompoundModel with Pix2Sky_TAN and Linear1D\n+    (m.Pix2Sky_TAN() & cm, np.array([\n+        [True, True, False, False],\n+        [True, True, False, False],\n+        [False, False, True, True],\n+        [False, False, True, True]\n+    ])),\n+    # Additional case: Nested compound with more components\n+    ((m.Pix2Sky_TAN() & m.Linear1D(1) & m.Linear1D(2)) & cm, np.array([\n+        [True, True, False, False, False],\n+        [True, True, False, False, False],\n+        [False, False, True, False, False],\n+        [False, False, False, True, True],\n+        [False, False, False, True, True]\n+    ]))\n+])\n+def test_nested_compound_models_separability(model, expected_matrix):\n+    actual_matrix = separability_matrix(model)\n+    assert_allclose(actual_matrix, expected_matrix)\n+\n+\n+# Maintain the existing test cases\n def test_custom_model_separable():\n     @custom_model\n     def model_a(x):\n",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "",
  "astropy__astropy-14508": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex 6bdf92c..e561c1d 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -127,6 +127,27 @@ class TestHeaderFunctions(FitsTestCase):\n         c = fits.Card(\"long_int\", -467374636747637647347374734737437)\n         assert str(c) == _pad(\"LONG_INT= -467374636747637647347374734737437\")\n \n+    def test_floating_point_string_representation_card(self):\n+        \"\"\"\n+        Ensures Card formats float values with the correct precision, avoiding\n+        comment truncation\n+\n+        Regression test for https://github.com/astropy/astropy/issues/14507\n+        \"\"\"\n+        k = \"HIERARCH ABC DEF GH IJKLMN\"\n+        com = \"[m] abcdef ghijklm nopqrstu vw xyzab\"\n+        c = fits.Card(k, 0.009125, com)\n+        expected_str = f\"{k} = 0.009125 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, 8.95, com)\n+        expected_str = f\"{k} = 8.95 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, -99.9, com)\n+        expected_str = f\"{k} = -99.9 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n     def test_floating_point_value_card(self):\n         \"\"\"Test Card constructor with floating point value\"\"\"\n \n",
  "astropy__astropy-14539": "",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..31b881b 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -88,8 +88,20 @@ def test_inherit_docstrings():\n         # TODO: Maybe if __doc__ is None this test should be skipped instead?\n         assert Subclass.__call__.__doc__ == \"FOO\"\n \n+def test_inherit_docstrings_with_properties():\n+    class Base(metaclass=misc.InheritDocstrings):\n+        @property\n+        def bar(self):\n+            \"BAR\"\n+            return 42\n+\n+    class Subclass(Base):\n+        @property\n+        def bar(self):\n+            return 21\n \n-def test_set_locale():\n+    if Base.bar.__doc__ is not None:\n+        assert Subclass.bar.__doc__ == \"BAR\"\n     # First, test if the required locales are available\n     current = locale.setlocale(locale.LC_ALL)\n     try:\n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..ad92f5f 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -171,8 +171,27 @@ def test_multiple_solidus():\n     with pytest.raises(ValueError):\n         u.Unit(\"m/s/kg\", format=\"vounit\")\n \n+import pytest\n+from astropy import units as u\n \n def test_unknown_unit3():\n+    # Create an unrecognized unit\n+    unit = u.Unit(\"asdf\", parse_strict='silent')\n+    \n+    # Test that the unit is indeed an instance of UnrecognizedUnit\n+    assert isinstance(unit, u.UnrecognizedUnit)\n+    \n+    # Test equality with None should return False\n+    assert unit != None  # noqa\n+    \n+    # Test that None is not in a tuple with the unit\n+    assert unit not in (None, u.m)\n+    \n+    # Test that comparing with None does not raise an exception\n+    try:\n+        result = unit == None  # noqa\n+    except TypeError:\n+        pytest.fail(\"Comparison with None raised TypeError\")\n     unit = u.Unit(\"FOO\", parse_strict='silent')\n     assert isinstance(unit, u.UnrecognizedUnit)\n     assert unit.name == \"FOO\"\n",
  "astropy__astropy-7671": "diff --git a/astropy/utils/tests/test_introspection.py b/astropy/utils/tests/test_introspection.py\nindex 852d721..a5f9da3 100644\n--- a/astropy/utils/tests/test_introspection.py\n+++ b/astropy/utils/tests/test_introspection.py\n@@ -68,8 +68,17 @@ def test_minversion():\n     test_module = ModuleType(str(\"test_module\"))\n     test_module.__version__ = '0.12.2'\n     good_versions = ['0.12', '0.12.1', '0.12.0.dev']\n-    bad_versions = ['1', '1.2rc1']\n+    bad_versions = ['1', '1.2rc1', '1.14dev']\n+\n+    # Additional test cases for the issue described\n+    test_module.__version__ = '1.14.3'\n+    edge_case_versions = ['1.14', '1.14dev', '1.15']\n+    for version in edge_case_versions:\n+        assert minversion(test_module, version) == (LooseVersion(test_module.__version__) >= LooseVersion(version))\n+\n+    # Reverting test_module version for further checks\n+    test_module.__version__ = '0.12.2'\n     for version in good_versions:\n         assert minversion(test_module, version)\n     for version in bad_versions:\n-        assert not minversion(test_module, version)\n+        assert not minversion(test_module, version)\n",
  "astropy__astropy-8707": "",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..6f130a2 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -150,6 +150,17 @@ class TestQuantityCreation:\n         q5 = u.Quantity(decimal.Decimal('10.25'), u.m, dtype=object)\n         assert q5.dtype == object\n \n+    def test_preserve_dtype_float16(self):\n+        \"\"\"Test that float16 is preserved in Quantity creation\"\"\"\n+        a3_16 = np.array([1., 2.], dtype=np.float16)\n+        q3_16 = u.Quantity(a3_16, u.yr)\n+        assert q3_16.dtype == a3_16.dtype\n+        assert q3_16.dtype == np.float16\n+\n+        # Test single np.float16 quantity\n+        q_single_16 = np.float16(1) * u.km\n+        assert q_single_16.dtype == np.float16\n+\n     def test_copy(self):\n \n         # By default, a new quantity is constructed, but not if copy=False\n",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..f55d35e 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -217,6 +217,15 @@ TEST_DATA = [\n     (URLValidator(EXTENDED_SCHEMES), 'git://example.com/', None),\n     (URLValidator(EXTENDED_SCHEMES), 'git+ssh://git@github.com/example/hg-git.git', None),\n \n+    # Test cases for URLs with invalid characters in the username and password section\n+    (URLValidator(), 'http://foo@bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo/bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar@baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar/baz@example.com', ValidationError),\n+    (URLValidator(), 'http://invalid-.com/?m=foo@example.com', ValidationError),\n+    (URLValidator(), \"http://-.~_!$&'()*+,;=%40:80%2f@example.com\", ValidationError),\n+\n     (URLValidator(EXTENDED_SCHEMES), 'git://-invalid.com', ValidationError),\n     # Trailing newlines not accepted\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..362bd5f 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -8,6 +9,7 @@ from django.db.models import (\n     Avg, Count, DecimalField, DurationField, F, FloatField, Func, IntegerField,\n     Max, Min, Sum, Value,\n )\n+from django.db.models.expressions import Case, When\n from django.test import TestCase\n from django.test.utils import Approximate, CaptureQueriesContext\n from django.utils import timezone\n@@ -389,7 +391,26 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n-    def test_count_star(self):\n+    def test_count_distinct_expression(self):\n+        # Test to verify the issue with COUNT(DISTINCT CASE WHEN ...)\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=300, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n+\n+    def test_count_distinct_expression_no_match(self):\n+        # Test case when no books have more than 1000 pages\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=1000, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 0)\n+\n+    def test_count_distinct_expression_all_match(self):\n+        # Test case when all books have more than 0 pages\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=0, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n         sql = ctx.captured_queries[0]['sql']\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..be48c1f 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1100,6 +1100,13 @@ class OverrideSettingsTests(SimpleTestCase):\n         django.core.files.storage.default_storage.\n         \"\"\"\n         self.assertIsNone(default_storage.file_permissions_mode)\n+\n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        By default, FILE_UPLOAD_PERMISSIONS should be set to 0o644 if not explicitly defined.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n         with self.settings(FILE_UPLOAD_PERMISSIONS=0o777):\n             self.assertEqual(default_storage.file_permissions_mode, 0o777)\n \n",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..885b721 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,7 +1,9 @@\n+\n import os\n import signal\n from unittest import mock\n \n+import subprocess\n from django.db.backends.postgresql.client import DatabaseClient\n from django.test import SimpleTestCase\n \n@@ -29,7 +31,33 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             DatabaseClient.runshell_db(dbinfo)\n         return self.subprocess_args, self.pgpass\n \n-    def test_basic(self):\n+    def test_pgpassword_env_variable(self):\n+        def _mock_subprocess_run(*args, env=None, **kwargs):\n+            self.assertIn('PGPASSWORD', env)\n+            self.assertEqual(env['PGPASSWORD'], 'somepassword')\n+            return subprocess.CompletedProcess(args, 0)\n+\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            DatabaseClient.runshell_db({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'password': 'somepassword',\n+                'host': 'somehost',\n+                'port': '444',\n+            })\n+\n+    def test_no_pgpassword_when_no_password(self):\n+        def _mock_subprocess_run(*args, env=None, **kwargs):\n+            self.assertNotIn('PGPASSWORD', env)\n+            return subprocess.CompletedProcess(args, 0)\n+\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            DatabaseClient.runshell_db({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+            })\n         self.assertEqual(\n             self._run_it({\n                 'database': 'dbname',\n@@ -113,4 +141,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..2945196 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -55,7 +55,27 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n \n-    def test_content_type_rename_conflict(self):\n+    @override_settings(DATABASE_ROUTERS=[TestRouter()])\n+    def test_existing_content_type_rename_other_database(self):\n+        # Create a ContentType entry in the 'other' database\n+        ContentType.objects.using('other').create(app_label='contenttypes_tests', model='foo')\n+        \n+        # Filter content types in 'other' database\n+        other_content_types = ContentType.objects.using('other').filter(app_label='contenttypes_tests')\n+        \n+        # Run migration on the 'other' database\n+        call_command('migrate', 'contenttypes_tests', database='other', interactive=False, verbosity=0)\n+        \n+        # Assert that the model name was changed correctly in the 'other' database\n+        self.assertFalse(other_content_types.filter(model='foo').exists())\n+        self.assertTrue(other_content_types.filter(model='renamedfoo').exists())\n+        \n+        # Rollback migration on the 'other' database\n+        call_command('migrate', 'contenttypes_tests', 'zero', database='other', interactive=False, verbosity=0)\n+        \n+        # Assert that the rollback was successful in the 'other' database\n+        self.assertTrue(other_content_types.filter(model='foo').exists())\n+        self.assertFalse(other_content_types.filter(model='renamedfoo').exists())\n         ContentType.objects.create(app_label='contenttypes_tests', model='foo')\n         ContentType.objects.create(app_label='contenttypes_tests', model='renamedfoo')\n         call_command('migrate', 'contenttypes_tests', database='default', interactive=False, verbosity=0)\n@@ -63,4 +83,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "diff --git a/tests/generic_inline_admin/tests.py b/tests/generic_inline_admin/tests.py\nindex 9dd9fd9..a3bf4b6 100644\n--- a/tests/generic_inline_admin/tests.py\n+++ b/tests/generic_inline_admin/tests.py\n@@ -425,7 +425,35 @@ class GenericInlineModelAdminTest(SimpleTestCase):\n             inlines = [\n                 AlternateInline, MediaInline\n             ]\n+        class EpisodeAdminWithGetInlines(admin.ModelAdmin):\n+            inlines = (AlternateInline, MediaInline)\n+\n+            def get_inlines(self, request, obj=None):\n+                if hasattr(request, 'name'):\n+                    if request.name == 'alternate':\n+                        return self.inlines[:1]\n+                    elif request.name == 'media':\n+                        return self.inlines[1:2]\n+                return []\n+\n         ma = EpisodeAdmin(Episode, self.site)\n+        ma_with_get_inlines = EpisodeAdminWithGetInlines(Episode, self.site)\n+\n+        # Test default get_inline_instances method without get_inlines hook\n         inlines = ma.get_inline_instances(request)\n-        for (formset, inline), other_inline in zip(ma.get_formsets_with_inlines(request), inlines):\n-            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+        for (formset, inline), other_inline in zip(\n+            ma.get_formsets_with_inlines(request), inlines\n+        ):\n+            self.assertIsInstance(\n+                formset, other_inline.get_formset(request).__class__\n+            )\n+\n+        # Test get_inlines hook\n+        self.assertEqual(ma_with_get_inlines.get_inlines(request, None), [])\n+        self.assertEqual(ma_with_get_inlines.get_inline_instances(request), [])\n+        for name, inline_class in (('alternate', AlternateInline), ('media', MediaInline)):\n+            request.name = name\n+            self.assertEqual(ma_with_get_inlines.get_inlines(request, None), (inline_class,))\n+            self.assertEqual(\n+                type(ma_with_get_inlines.get_inline_instances(request)[0]), inline_class\n+            )\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..9c92c5d 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -239,6 +239,8 @@ class UsernameValidatorsTests(SimpleTestCase):\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n             \"en\\u2013dash\",\n         ]\n+        invalid_usernames.append('trailingnewline\\n')\n+\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n             with self.subTest(valid=valid):\n@@ -251,6 +253,8 @@ class UsernameValidatorsTests(SimpleTestCase):\n     def test_ascii_validator(self):\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n         invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n+        invalid_usernames.append('trailingnewline\\n')\n+\n         v = validators.ASCIIUsernameValidator()\n         for valid in valid_usernames:\n             with self.subTest(valid=valid):\n@@ -258,4 +262,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..e898721 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -5,6 +5,8 @@ from django.template import Context\n from django.template.engine import Engine\n from django.test import SimpleTestCase, override_settings\n \n+import os\n+from django.template import Template\n from .utils import ROOT, TEMPLATE_DIR\n \n OTHER_DIR = os.path.join(ROOT, 'other_templates')\n@@ -15,6 +17,20 @@ class RenderToStringTest(SimpleTestCase):\n     def setUp(self):\n         self.engine = Engine(dirs=[TEMPLATE_DIR])\n \n+    def test_autoescape_on(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',  # autoescape should encode <script> to &lt;script&gt;\n+        )\n+\n+    def test_autoescape_off(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:<script>\\n',  # without autoescaping, <script> should remain unchanged\n+        )\n+        \n     def test_basic_context(self):\n         self.assertEqual(\n             self.engine.render_to_string('test_context.html', {'obj': 'test'}),\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..6950f57 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -458,7 +458,10 @@ class HttpResponseTests(unittest.TestCase):\n                 HttpResponsePermanentRedirect(url)\n \n \n-class HttpResponseSubclassesTests(SimpleTestCase):\n+    def test_memoryview_content(self):\n+        # Test that HttpResponse correctly handles memoryview objects\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n     def test_redirect(self):\n         response = HttpResponseRedirect('/redirected/')\n         self.assertEqual(response.status_code, 302)\n",
  "django__django-11141": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex b5a87e7..1986ed5 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -501,7 +501,16 @@ class LoaderTests(TestCase):\n         self.assertEqual(plan, expected_plan)\n \n     @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_private'})\n-    def test_ignore_files(self):\n+    @override_settings(\n+        MIGRATION_MODULES={'migrations': 'migrations.test_migrations_namespace_package'},\n+    )\n+    def test_loading_namespace_package(self):\n+        \"\"\"Migration directories without an __init__.py file are loaded.\"\"\"\n+        migration_loader = MigrationLoader(connection)\n+        self.assertEqual(\n+            migration_loader.graph.forwards_plan(('migrations', '0001_initial')),\n+            [('migrations', '0001_initial')],\n+        )\n         \"\"\"Files prefixed with underscore, tilde, or dot aren't loaded.\"\"\"\n         loader = MigrationLoader(connection)\n         loader.load_disk()\n",
  "django__django-11149": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 296cfba..e556e9c 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -562,7 +562,13 @@ class TestInlineProtectedOnDelete(TestDataMixin, TestCase):\n         self.assertContains(response, \"Deleting chapter %s would require deleting \"\n                             \"the following protected related objects: foot note %s\"\n                             % (chapter, foot_note))\n+from django.contrib.admin.sites import site\n+from django.contrib.auth.models import Permission\n+from django.contrib.contenttypes.models import ContentType\n+from django.test import TestCase, override_settings\n+from django.urls import reverse\n \n+from admin_inlines.models import Author, Book, Holder2, Inner2, User\n \n @override_settings(ROOT_URLCONF='admin_inlines.urls')\n class TestInlinePermissions(TestCase):\n@@ -665,6 +671,39 @@ class TestInlinePermissions(TestCase):\n         self.assertNotContains(response, 'id=\"id_Author_books-TOTAL_FORMS\"')\n         self.assertNotContains(response, 'id=\"id_Author_books-0-DELETE\"')\n \n+    def test_inline_m2m_view_only_perm(self):\n+        # Add view permission for the Book model\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(self.author_change_url)\n+        # Verify that inlines are view-only\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(response, '<p>The inline Book</p>')\n+        self.assertNotContains(response, 'id=\"id_Author_books-0-DELETE\"')\n+\n+    def test_inline_m2m_view_only_add_page(self):\n+        # Add view permission for the Book model\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(reverse('admin:admin_inlines_author_add'))\n+        # Verify that inlines are view-only on add page\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"0\" '\n+            'id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n+\n     def test_inline_change_m2m_change_perm(self):\n         permission = Permission.objects.get(codename='change_book', content_type=self.book_ct)\n         self.user.user_permissions.add(permission)\n",
  "django__django-11163": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex b25d077..ebaf913 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2900,7 +2900,21 @@ class StrictAssignmentTests(SimpleTestCase):\n \n \n class ModelToDictTests(TestCase):\n-    def test_many_to_many(self):\n+    def test_model_to_dict_empty_fields(self):\n+        \"\"\"model_to_dict should return an empty dict when fields is an empty list.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(model_to_dict(bw, fields=[]), {})\n+\n+    def test_model_to_dict_with_specific_fields(self):\n+        \"\"\"model_to_dict should return a dict with only the specified fields.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(model_to_dict(bw, fields=['id', 'name']), {'id': bw.id, 'name': 'Joe Better'})\n+\n+    def test_model_to_dict_with_exclude_fields(self):\n+        \"\"\"model_to_dict should return a dict excluding specified fields.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(sorted(model_to_dict(bw, exclude=[])), ['id', 'name', 'score', 'writer_ptr'])\n+        self.assertEqual(model_to_dict(bw, exclude=['id', 'name']), {'score': 10, 'writer_ptr': bw.writer_ptr_id})\n         \"\"\"Data for a ManyToManyField is a list rather than a lazy QuerySet.\"\"\"\n         blue = Colour.objects.create(name='blue')\n         red = Colour.objects.create(name='red')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..c780d2c 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,5 +1,7 @@\n+\n from math import ceil\n \n+from django.db.models.deletion import Collector\n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n@@ -464,6 +466,17 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n+    def test_fast_delete_instance_set_pk_none(self):\n+        # Create a User instance\n+        u = User.objects.create()\n+        # User can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        # Delete the User instance\n+        u.delete()\n+        # Assert that the primary key is set to None after deletion\n+        self.assertIsNone(u.pk)\n+\n     def test_fast_delete_qs(self):\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..02581ef 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -95,6 +95,11 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+            ('0.{}1'.format('0' * 198), 2, '0.00'),  # Very small number, should be 0.00\n+            ('0.{}1234'.format('0' * 199), 2, '0.00'),  # Even smaller, also should be 0.00\n+            ('0.{}98765'.format('0' * 198), 3, '0.000'),  # Smaller, should result in zero\n+            ('1e-199', 2, '0.00'),  # Use of scientific notation number\n+            ('1e-200', 3, '0.000'),  # Another scientific notation case\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-11211": "",
  "django__django-11239": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex b843072..27fe16a 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,4 +1,6 @@\n import os\n+import os\n+\n import signal\n import subprocess\n from unittest import mock\n@@ -81,7 +83,22 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n-    def test_sigint_handler(self):\n+    def test_ssl_certificate(self):\n+        self.assertEqual(\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+                'sslmode': 'verify-ca',\n+                'sslrootcert': 'root.crt',\n+                'sslcert': 'client.crt',\n+                'sslkey': 'client.key',\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                None,\n+            )\n+        )\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n         def _mock_subprocess_run(*args, **kwargs):\n             handler = signal.getsignal(signal.SIGINT)\n",
  "django__django-11265": "",
  "django__django-11276": "",
  "django__django-11292": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex b016284..7da6ae9 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -243,7 +243,30 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertNoOutput(err)\n         self.assertEqual(out.strip(), '/PREFIX/some/url/')\n \n-    def test_disallowed_abbreviated_options(self):\n+    def test_skip_checks_with_system_error(self):\n+        \"\"\"\n+        Ensure that when --skip-checks is used, system checks are not run,\n+        and no CommandError is raised, even if there are issues that would \n+        trigger checks normally.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['user_commands'], sdict={\n+            'STATICFILES_DIRS': '\"incorrect_value\"',\n+        })\n+        out, err = self.run_manage(['set_option', '--skip-checks', '--set', 'foo'])\n+        self.assertNoOutput(err)\n+        self.assertEqual(out.strip(), 'Set foo')\n+\n+    def test_without_skip_checks(self):\n+        \"\"\"\n+        Ensure that without --skip-checks, system checks are executed and\n+        errors are raised if there are issues.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['user_commands'], sdict={\n+            'STATICFILES_DIRS': '\"incorrect_value\"',\n+        })\n+        with self.assertRaises(CommandError) as cm:\n+            self.run_manage(['set_option', '--set', 'foo'])\n+        self.assertIn('The STATICFILES_DIRS setting is not a tuple or list.', str(cm.exception))\n         \"\"\"\n         To avoid conflicts with custom options, commands don't allow\n         abbreviated forms of the --setting and --pythonpath options.\n",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..dfa40f3 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,9 +1,33 @@\n+\n from django.test import SimpleTestCase\n-from django.urls.resolvers import RegexPattern, RoutePattern\n+from django.urls.resolvers import RegexPattern, RoutePattern, get_resolver\n+from django.test.utils import override_settings\n from django.utils.translation import gettext_lazy as _\n \n \n-class RegexPatternTests(SimpleTestCase):\n+class ResolverCacheTests(SimpleTestCase):\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_default_root_urlconf(self):\n+        # resolver for a default URLconf (passing no argument) and for the\n+        # settings.ROOT_URLCONF is the same cached object.\n+        self.assertIs(get_resolver(), get_resolver('urlpatterns.path_urls'))\n+        self.assertIsNot(get_resolver(), get_resolver('urlpatterns.path_dynamic_urls'))\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_with_none_and_root_urlconf(self):\n+        # Ensure that calling get_resolver(None) and get_resolver(ROOT_URLCONF)\n+        # return the same cached object.\n+        resolver_none = get_resolver()\n+        resolver_root = get_resolver('urlpatterns.path_urls')\n+        self.assertIs(resolver_none, resolver_root)\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_different_urlconfs(self):\n+        # Ensure different URLconfs return different resolver objects.\n+        resolver_one = get_resolver('urlpatterns.path_urls')\n+        resolver_two = get_resolver('urlpatterns.path_dynamic_urls')\n+        self.assertIsNot(resolver_one, resolver_two)\n \n     def test_str(self):\n         self.assertEqual(str(RegexPattern(_('^translated/$'))), '^translated/$')\n@@ -12,4 +36,4 @@ class RegexPatternTests(SimpleTestCase):\n class RoutePatternTests(SimpleTestCase):\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\nindex b010b42..7f0d26c 100644\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -241,8 +241,18 @@ class ModelBackendTest(BaseModelBackendTest, TestCase):\n             email='test2@example.com',\n             password='test',\n         )\n-\n-    def test_authenticate_inactive(self):\n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authentication_without_credentials(self):\n+        CountingMD5PasswordHasher.calls = 0\n+        for credentials in (\n+            {},\n+            {'username': getattr(self.user, self.UserModel.USERNAME_FIELD)},\n+            {'password': 'test'},\n+        ):\n+            with self.subTest(credentials=credentials):\n+                with self.assertNumQueries(0):\n+                    authenticate(**credentials)\n+                self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n         \"\"\"\n         An inactive user can't authenticate.\n         \"\"\"\n",
  "django__django-11490": "",
  "django__django-11532": "diff --git a/tests/mail/tests.py b/tests/mail/tests.py\nindex a6f0e17..cf38f11 100644\n--- a/tests/mail/tests.py\n+++ b/tests/mail/tests.py\n@@ -21,6 +21,7 @@ from django.core.mail import (\n     send_mail, send_mass_mail,\n )\n from django.core.mail.backends import console, dummy, filebased, locmem, smtp\n+from unittest import mock\n from django.core.mail.message import BadHeaderError, sanitize_address\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import requires_tz_support\n@@ -365,7 +366,27 @@ class MailTests(HeadersCheckMixin, SimpleTestCase):\n         self.assertEqual(msg.body, '')\n         self.assertEqual(msg.message().get_payload(), '')\n \n-    def test_encoding(self):\n+    @mock.patch('socket.getfqdn', return_value='\u6f22\u5b57')\n+    def test_non_ascii_dns_non_unicode_email(self, mocked_getfqdn):\n+        \"\"\"\n+        Test that a non-ASCII hostname is converted to punycode in Message-ID\n+        when the email encoding is non-unicode (e.g., iso-8859-1).\n+        \"\"\"\n+        delattr(mail.message.DNS_NAME, '_fqdn')  # Clear cached DNS_NAME\n+        email = EmailMessage('subject', 'content', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        self.assertIn('@xn--p8s937b>', email.message()['Message-ID'])\n+\n+    @mock.patch('socket.getfqdn', return_value='\u6b63\u5b97')\n+    def test_other_non_ascii_dns_non_unicode_email(self, mocked_getfqdn):\n+        \"\"\"\n+        Another test to ensure non-ASCII hostname is converted to punycode in Message-ID\n+        with non-unicode email encoding.\n+        \"\"\"\n+        delattr(mail.message.DNS_NAME, '_fqdn')\n+        email = EmailMessage('subject', 'content', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        self.assertIn('@xn--fiq228c>', email.message()['Message-ID'])\n         \"\"\"\n         Regression for #12791 - Encode body correctly with other encodings\n         than utf-8\n",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..f2894ae 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,9 +1,10 @@\n+\n from django import forms\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n-from django.db.models import F\n+from django.db.models import F, Field, Model\n from django.db.models.functions import Upper\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n@@ -12,6 +13,68 @@ from .models import (\n     Band, Song, User, ValidationTestInlineModel, ValidationTestModel,\n )\n \n+class TestPositionFieldAccessibleViaInstance(CheckTestCase):\n+    def test_valid_field_accessible_via_instance(self):\n+        class PositionField(Field):\n+            \"\"\"Custom field accessible only via instance.\"\"\"\n+            def contribute_to_class(self, cls, name):\n+                super().contribute_to_class(cls, name)\n+                setattr(cls, self.name, self)\n+\n+            def __get__(self, instance, owner):\n+                if instance is None:\n+                    raise AttributeError()\n+\n+        class TestModel(Model):\n+            field = PositionField()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('field',)\n+\n+        self.assertIsValid(TestModelAdmin, TestModel)\n+\n+    def test_invalid_field_not_accessible_via_instance(self):\n+        class PositionField(Field):\n+            \"\"\"Custom field accessible only via instance.\"\"\"\n+            def contribute_to_class(self, cls, name):\n+                super().contribute_to_class(cls, name)\n+                setattr(cls, self.name, self)\n+\n+            def __get__(self, instance, owner):\n+                if instance is None:\n+                    return None\n+\n+        class TestModel(Model):\n+            field = PositionField()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('non_existent_field',)\n+\n+        self.assertIsInvalid(\n+            TestModelAdmin, TestModel,\n+            \"The value of 'list_display[0]' refers to 'non_existent_field', which is not a callable, \"\n+            \"an attribute of 'TestModelAdmin', or an attribute or method on 'app_label.TestModel'.\",\n+            'admin.E108'\n+        )\n+\n+    def test_m2m_field_error(self):\n+        class ManyToManyField(Field):\n+            \"\"\"Custom ManyToManyField stub.\"\"\"\n+            pass\n+\n+        class TestModel(Model):\n+            field = ManyToManyField()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('field',)\n+\n+        # We expect E109 error because 'field' is a ManyToManyField\n+        self.assertIsInvalid(\n+            TestModelAdmin, TestModel,\n+            \"The value of 'list_display[0]' must not be a ManyToManyField.\",\n+            'admin.E109'\n+        )\n+\n \n class CheckTestCase(SimpleTestCase):\n \n",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..b45e0b2 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -9,7 +9,7 @@ from django.db.models.functions import Upper\n from django.test import TestCase\n from django.utils.deprecation import RemovedInDjango31Warning\n \n-from .models import Article, Author, OrderedByFArticle, Reference\n+from .models import Article, Author, ChildArticle, OrderedByFArticle, Reference\n \n \n class OrderingTests(TestCase):\n@@ -455,7 +455,56 @@ class OrderingTests(TestCase):\n     def test_default_ordering_by_f_expression(self):\n         \"\"\"F expressions can be used in Meta.ordering.\"\"\"\n         articles = OrderedByFArticle.objects.all()\n-        articles.filter(headline='Article 2').update(author=self.author_2)\n+from datetime import datetime\n+\n+class OrderingTests(TestCase):\n+\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.a1 = Article.objects.create(headline=\"Article 1\", pub_date=datetime(2005, 7, 26))\n+        cls.a2 = Article.objects.create(headline=\"Article 2\", pub_date=datetime(2005, 7, 27))\n+        cls.a3 = Article.objects.create(headline=\"Article 3\", pub_date=datetime(2005, 7, 27))\n+        cls.a4 = Article.objects.create(headline=\"Article 4\", pub_date=datetime(2005, 7, 28))\n+        cls.author_1 = Author.objects.create(name=\"Name 1\")\n+        cls.author_2 = Author.objects.create(name=\"Name 2\")\n+\n+    def test_order_by_ptr_field_with_default_ordering_by_expression(self):\n+        ca1 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_2,\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca3 = ChildArticle.objects.create(\n+            headline='h3',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n+        articles = ChildArticle.objects.order_by('article_ptr')\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+\n+    def test_order_by_expression_in_meta_ordering(self):\n+        # This tests ordering by an F() expression defined in Meta.ordering of OrderedByFArticle\n+        OrderedByFArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        OrderedByFArticle.objects.create(\n+            headline='h1',\n+            pub_date=datetime(2005, 7, 26),\n+            author=None,\n+        )\n+        articles = OrderedByFArticle.objects.all()\n+        self.assertSequenceEqual(\n+            articles.values_list('headline', flat=True),\n+            ['h1', 'h2'],  # h1 has no author, hence comes first with nulls_first=True\n+        )\n         articles.filter(headline='Article 3').update(author=self.author_1)\n         self.assertQuerysetEqual(\n             articles, ['Article 1', 'Article 4', 'Article 3', 'Article 2'],\n",
  "django__django-11603": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 2b8f813..c70b032 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -391,6 +391,15 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n+    def test_distinct_on_avg_sum(self):\n+        # Test DISTINCT support on Avg\n+        books_avg = Book.objects.aggregate(avg_rating=Avg('rating', distinct=True))\n+        self.assertEqual(books_avg['avg_rating'], 4.125)\n+\n+        # Test DISTINCT support on Sum\n+        books_sum = Book.objects.aggregate(sum_rating=Sum('rating', distinct=True))\n+        self.assertEqual(books_sum['sum_rating'], 16.5)\n+\n     def test_count_star(self):\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n",
  "django__django-11740": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a98fff5..6c0221b 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -718,7 +718,38 @@ class AutodetectorTests(TestCase):\n         self.assertOperationTypes(changes, 'testapp', 0, [\"RemoveField\"])\n         self.assertOperationAttributes(changes, \"testapp\", 0, 0, name=\"name\")\n \n-    def test_alter_field(self):\n+    def test_alter_uuid_to_fk_dependency(self):\n+        \"\"\"\n+        Test changing a UUIDField to a ForeignKey and ensure the FK dependency is \n+        correctly identified.\n+        \"\"\"\n+        # Initial state with App1 having a UUIDField\n+        app1_initial = ModelState(\"testapp1\", \"App1\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+            (\"another_app\", models.UUIDField(null=True, blank=True)),\n+        ])\n+        # App2 remains the same\n+        app2_state = ModelState(\"testapp2\", \"App2\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+        ])\n+        # Alter App1 to change another_app to a ForeignKey\n+        app1_altered = ModelState(\"testapp1\", \"App1\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+            (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+\n+        # Detect changes\n+        changes = self.get_changes([app1_initial, app2_state], [app1_altered, app2_state])\n+\n+        # Assert there is one migration for testapp1\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        # Assert the operation type is AlterField\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        # Check that the migration has the correct dependency\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n         \"\"\"Tests autodetection of new fields.\"\"\"\n         changes = self.get_changes([self.author_name], [self.author_name_longer])\n         # Right number/type of migrations?\n@@ -2399,4 +2430,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-11749": "",
  "django__django-11790": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 440150b..bb1bbbb 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -437,6 +437,25 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         self.assertEqual(form.fields['username'].max_length, 254)\n         self.assertEqual(form.errors, {})\n \n+    def test_username_field_html_maxlength(self):\n+        # Test with default user model\n+        data = {\n+            'username': 'a' * 255,\n+            'password': 'password',\n+        }\n+        form = AuthenticationForm(None, data)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 255)\n+\n+        # Test with custom user model with default max_length for username\n+        with override_settings(AUTH_USER_MODEL='auth_tests.IntegerUsernameUser'):\n+            IntegerUsernameUser.objects.create_user(username='0123456', password='password')\n+            data = {\n+                'username': '0123456',\n+                'password': 'password',\n+            }\n+            form = AuthenticationForm(None, data)\n+            self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 254)\n+\n     def test_username_field_label(self):\n \n         class CustomAuthenticationForm(AuthenticationForm):\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..f9590de 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -306,7 +306,23 @@ class WriterTests(SimpleTestCase):\n             \"default=migrations.test_writer.IntEnum(1))\"\n         )\n \n-    def test_serialize_choices(self):\n+    def test_serialize_enum_with_translation(self):\n+        class TranslatedEnum(enum.Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+\n+        # Simulate the creation of a CharField with a TranslatedEnum as the default\n+        field = models.CharField(default=TranslatedEnum.GOOD, choices=[(m.value, m) for m in TranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        \n+        # Check that the migration uses the enum name, not the translated value\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('Good', migrations.test_writer.TranslatedEnum['GOOD']), \"\n+            \"('Bad', migrations.test_writer.TranslatedEnum['BAD'])], \"\n+            \"default=migrations.test_writer.TranslatedEnum['GOOD'])\"\n+        )\n         class TextChoices(models.TextChoices):\n             A = 'A', 'A value'\n             B = 'B', 'B value'\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..f5adbc5 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,6 @@\n+\n import unittest\n-from datetime import datetime\n+from datetime import datetime, timedelta\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -316,9 +317,28 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_rfc850(self):\n-        parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n-        self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_year_logic(self, mocked_datetime):\n+        # Mock current datetime to check logic with RFC 850 parsing\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        current_year = 2023\n+        mocked_datetime.utcnow.return_value = datetime(current_year, 1, 1)\n+        \n+        # This test will simulate the correct date parsing according to the 50-year logic\n+        tests = (\n+            ('Tuesday, 31-Dec-69 08:49:37 GMT', datetime(2069, 12, 31, 8, 49, 37)),  # 69 is in the future, interpreted as 2069\n+            ('Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),  # 70 is in the future, interpreted as 1970\n+            ('Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37)),    # 94 is in the past, interpreted as 1994\n+            ('Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),   # 00 is in the past, interpreted as 2000\n+            ('Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),   # 99 is in the past, interpreted as 1999\n+        )\n+        \n+        for rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n \n     def test_parsing_asctime(self):\n         parsed = parse_http_date('Sun Nov  6 08:49:37 1994')\n",
  "django__django-11880": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 95afc0d..294eef9 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3672,13 +3672,42 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n             '<input type=\"hidden\" name=\"data\" id=\"id_data\"></td></tr>'\n         )\n \n-    def test_field_named_data(self):\n-        class DataForm(Form):\n-            data = CharField(max_length=10)\n+import copy\n+from django.forms import CharField, Form\n \n-        f = DataForm({'data': 'xyzzy'})\n-        self.assertTrue(f.is_valid())\n-        self.assertEqual(f.cleaned_data, {'data': 'xyzzy'})\n+class FieldDeepCopyTests(SimpleTestCase):\n+    def test_field_deep_copy_error_messages(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        self.assertIsInstance(field_copy, CustomCharField)\n+        self.assertIsNot(field_copy.error_messages, field.error_messages)\n+        self.assertEqual(field_copy.error_messages['invalid'], 'Form custom error message.')\n+        # Modifying the copy should not affect the original\n+        field_copy.error_messages['invalid'] = 'Modified error message.'\n+        self.assertNotEqual(field_copy.error_messages['invalid'], field.error_messages['invalid'])\n+        self.assertEqual(field.error_messages['invalid'], 'Form custom error message.')\n+\n+    def test_multiple_fields_deep_copy(self):\n+        class MultiFieldForm(Form):\n+            field1 = CharField(error_messages={'required': 'Field1 required error.'})\n+            field2 = CharField(error_messages={'required': 'Field2 required error.'})\n+\n+        form1 = MultiFieldForm()\n+        form2 = copy.deepcopy(form1)\n+\n+        self.assertIsNot(form1.fields['field1'].error_messages, form2.fields['field1'].error_messages)\n+        self.assertIsNot(form1.fields['field2'].error_messages, form2.fields['field2'].error_messages)\n+\n+        form2.fields['field1'].error_messages['required'] = 'Modified Field1 error.'\n+        form2.fields['field2'].error_messages['required'] = 'Modified Field2 error.'\n+\n+        self.assertNotEqual(form1.fields['field1'].error_messages['required'], form2.fields['field1'].error_messages['required'])\n+        self.assertNotEqual(form1.fields['field2'].error_messages['required'], form2.fields['field2'].error_messages['required'])\n \n     def test_empty_data_files_multi_value_dict(self):\n         p = Person()\n",
  "django__django-11951": "",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..30c2bce 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -39,8 +39,25 @@ class Gender(models.TextChoices):\n \n     __empty__ = '(Undeclared)'\n \n+from django.utils.translation import gettext_lazy as _\n+from .models import MyObject, MyChoice\n \n class ChoicesTests(SimpleTestCase):\n+    def test_textchoices_enum_str_value(self):\n+        self.assertEqual(str(MyChoice.FIRST_CHOICE), \"first\")\n+        self.assertEqual(MyChoice.FIRST_CHOICE.label, \"The first choice, it is\")\n+        self.assertEqual(MyChoice.FIRST_CHOICE.value, \"first\")\n+\n+    def test_created_object_enum_type(self):\n+        obj = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n+        self.assertIsInstance(obj.my_str_value, str)\n+        self.assertEqual(obj.my_str_value, MyChoice.FIRST_CHOICE)\n+\n+    def test_retrieved_object_enum_type(self):\n+        MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n+        obj = MyObject.objects.last()\n+        self.assertIsInstance(obj.my_str_value, str)\n+        self.assertEqual(obj.my_str_value, MyChoice.FIRST_CHOICE)\n     def test_integerchoices(self):\n         self.assertEqual(Suit.choices, [(1, 'Diamond'), (2, 'Spade'), (3, 'Heart'), (4, 'Club')])\n         self.assertEqual(Suit.labels, ['Diamond', 'Spade', 'Heart', 'Club'])\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..bf667e7 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -148,6 +148,30 @@ class ChoicesTests(SimpleTestCase):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n \n+from django.db import models\n+from django.test import TestCase\n+from django.utils.translation import gettext_lazy as _\n+\n+class FooBar(models.Model):\n+    foo_bar = models.CharField(_(\"foo\"), choices=[(1, 'foo'), (2, 'bar')])\n+\n+    def get_foo_bar_display(self):\n+        return \"something\"\n+\n+class FooBarOverrideTests(TestCase):\n+    \n+    def test_overriding_FIELD_display(self):\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+\n+    def test_display_with_different_initial_value(self):\n+        f = FooBar(foo_bar=2)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+\n+    def test_display_with_invalid_value(self):\n+        f = FooBar(foo_bar=3)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+\n class GetFieldDisplayTests(SimpleTestCase):\n \n     def test_choices_and_field_display(self):\n",
  "django__django-12039": "diff --git a/tests/indexes/tests.py b/tests/indexes/tests.py\nindex 700f574..360d154 100644\n--- a/tests/indexes/tests.py\n+++ b/tests/indexes/tests.py\n@@ -12,6 +12,7 @@ from django.test import (\n from django.test.utils import override_settings\n from django.utils import timezone\n \n+from django.db.models import Index\n from .models import (\n     Article, ArticleTranslation, IndexedArticle2, IndexTogetherSingleList,\n )\n@@ -80,7 +81,45 @@ class SchemaIndexesTests(TestCase):\n class SchemaIndexesNotPostgreSQLTests(TransactionTestCase):\n     available_apps = ['indexes']\n \n-    def test_create_index_ignores_opclasses(self):\n+    def test_columns_list_sql(self):\n+        index = Index(fields=['headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_descending_columns_list_sql(self):\n+        index = Index(fields=['-headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s DESC)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_ops_class_columns_lists_sql(self):\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_ops_class_descending_columns_list_sql(self):\n+        index = Index(\n+            fields=['-headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops DESC)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n         index = Index(\n             name='test_ops_class',\n             fields=['headline'],\n",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..8d5d6fc 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n@@ -8,6 +9,7 @@ from django.db.models.functions import Lower\n from django.db.models.lookups import Exact, GreaterThan, IsNull, LessThan\n from django.db.models.sql.query import Query\n from django.db.models.sql.where import OR\n+from django.db.models import PickledField  # Assuming PickledField is available for testing\n from django.test import SimpleTestCase\n from django.test.utils import register_lookup\n \n@@ -107,7 +109,30 @@ class TestQuery(SimpleTestCase):\n         self.assertIsInstance(b_isnull.lhs, SimpleCol)\n         self.assertEqual(b_isnull.lhs.target, ObjectC._meta.get_field('objectb'))\n \n-    def test_clone_select_related(self):\n+    def test_list_lookup_value(self):\n+        query = Query(Item)\n+        # This test case checks if list is maintained as list in the lookup value\n+        where = query.build_where(Q(name=['x', 'y', 'z']))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ['x', 'y', 'z'])\n+\n+    def test_tuple_lookup_value(self):\n+        query = Query(Item)\n+        # This test case checks if tuple is maintained as tuple in the lookup value\n+        where = query.build_where(Q(name=('x', 'y', 'z')))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ('x', 'y', 'z'))\n+\n+    def test_pickledfield_lookup_value(self):\n+        query = Query(Item)\n+        # This test assumes a PickledField or similar is available in the Item model\n+        # to ensure that input types match correctly\n+        where = query.build_where(Q(data_field=['x', 'y', 'z']))  # assuming 'data_field' is a PickledField\n+        data_exact = where.children[0]\n+        self.assertIsInstance(data_exact, Exact)\n+        self.assertEqual(data_exact.rhs, ['x', 'y', 'z'])\n         query = Query(Item)\n         query.add_select_related(['creator'])\n         clone = query.clone()\n",
  "django__django-12125": "",
  "django__django-12143": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 2d13234..b3d223d 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -839,6 +839,29 @@ class ChangeListTests(TestCase):\n         queryset = m._get_list_editable_queryset(request, prefix='form')\n         self.assertEqual(queryset.count(), 1)\n         data['form-0-uuid'] = 'INVALD_PRIMARY_KEY'\n+\n+    def test_get_list_editable_queryset_with_regex_special_chars_prefix(self):\n+        \"\"\"Test _get_list_editable_queryset with regex special characters in the prefix.\"\"\"\n+        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n+        Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n+        special_prefixes = ['form$', 'form^', 'form*', 'form+', 'form?', 'form|']\n+        for special_prefix in special_prefixes:\n+            data = {\n+                f'{special_prefix}-TOTAL_FORMS': '2',\n+                f'{special_prefix}-INITIAL_FORMS': '2',\n+                f'{special_prefix}-MIN_NUM_FORMS': '0',\n+                f'{special_prefix}-MAX_NUM_FORMS': '1000',\n+                f'{special_prefix}-0-uuid': str(a.pk),\n+                f'{special_prefix}-0-load': '10',\n+                '_save': 'Save',\n+            }\n+            superuser = self._create_superuser('superuser')\n+            self.client.force_login(superuser)\n+            changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+            m = SwallowAdmin(Swallow, custom_site)\n+            request = self.factory.post(changelist_url, data=data)\n+            queryset = m._get_list_editable_queryset(request, prefix=special_prefix)\n+            self.assertEqual(queryset.count(), 1)\n         # The unfiltered queryset is returned if there's invalid data.\n         request = self.factory.post(changelist_url, data=data)\n         queryset = m._get_list_editable_queryset(request, prefix='form')\n",
  "django__django-12155": "diff --git a/tests/admin_docs/test_utils.py b/tests/admin_docs/test_utils.py\nindex 6cae16b..4779d5c 100644\n--- a/tests/admin_docs/test_utils.py\n+++ b/tests/admin_docs/test_utils.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n \n from django.contrib.admindocs.utils import (\n@@ -95,6 +96,47 @@ class TestUtils(AdminDocsSimpleTestCase):\n         output = parse_rst(header, 'header')\n         self.assertIn('<h3>Header</h3>', output)\n \n+    def test_trim_docstring_with_first_line_empty(self):\n+        \"\"\"\n+        Test trim_docstring with the first line empty.\n+        \"\"\"\n+        docstring = \"\"\"\n+        This is a test.\n+        \n+        This is the second paragraph.\n+        \"\"\"\n+        expected = \"This is a test.\\n\\nThis is the second paragraph.\"\n+        self.assertEqual(trim_docstring(docstring), expected)\n+\n+    def test_trim_docstring_with_first_line_not_empty(self):\n+        \"\"\"\n+        Test trim_docstring with the first line not empty.\n+        \"\"\"\n+        docstring = \"\"\"This is a test.\n+        \n+        This is the second paragraph.\n+        \"\"\"\n+        expected = \"This is a test.\\n\\nThis is the second paragraph.\"\n+        self.assertEqual(trim_docstring(docstring), expected)\n+\n+    def test_trim_docstring_no_leading_line(self):\n+        \"\"\"\n+        Test trim_docstring with a single line.\n+        \"\"\"\n+        docstring = \"\"\"Single line.\"\"\"\n+        expected = \"Single line.\"\n+        self.assertEqual(trim_docstring(docstring), expected)\n+\n+    def test_parse_docstring_with_no_leading_line_feed(self):\n+        \"\"\"\n+        Test parse_docstring with a docstring that has no leading line feed.\n+        \"\"\"\n+        docstring = \"Title\\n\\nThis is the body of the docstring.\"\n+        title, body, metadata = parse_docstring(docstring)\n+        self.assertEqual(title, \"Title\")\n+        self.assertEqual(body, \"This is the body of the docstring.\")\n+        self.assertEqual(metadata, {})\n+\n     def test_parse_rst(self):\n         \"\"\"\n         parse_rst() should use `cmsreference` as the default role.\n",
  "django__django-12193": "diff --git a/tests/forms_tests/widget_tests/test_checkboxinput.py b/tests/forms_tests/widget_tests/test_checkboxinput.py\nindex 5c5e45d..16f87a0 100644\n--- a/tests/forms_tests/widget_tests/test_checkboxinput.py\n+++ b/tests/forms_tests/widget_tests/test_checkboxinput.py\n@@ -88,4 +88,42 @@ class CheckboxInputTest(WidgetTest):\n \n     def test_value_omitted_from_data(self):\n         self.assertIs(self.widget.value_omitted_from_data({'field': 'value'}, {}, 'field'), False)\n-        self.assertIs(self.widget.value_omitted_from_data({}, {}, 'field'), False)\n+\n+    def test_get_context_does_not_mutate_attrs(self):\n+        attrs = {'checked': False}\n+        self.widget.get_context('name', True, attrs)\n+        self.assertIs(attrs['checked'], False)\n+\n+    def test_checkbox_get_context_attrs(self):\n+        context = SplitArrayWidget(\n+            forms.CheckboxInput(),\n+            size=2,\n+        ).get_context('name', [True, False])\n+        self.assertEqual(context['widget']['value'], '[True, False]')\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{'checked': True}, {}]\n+        )\n+\n+    def test_checkbox_with_multiple_falses(self):\n+        context = SplitArrayWidget(\n+            forms.CheckboxInput(),\n+            size=5,\n+        ).get_context('name', [False, False, False, False, False])\n+        self.assertEqual(context['widget']['value'], '[False, False, False, False, False]')\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{}, {}, {}, {}, {}]\n+        )\n+\n+    def test_checkbox_with_varied_values(self):\n+        context = SplitArrayWidget(\n+            forms.CheckboxInput(),\n+            size=5,\n+        ).get_context('name', [False, True, False, True, False])\n+        self.assertEqual(context['widget']['value'], '[False, True, False, True, False]')\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{}, {'checked': True}, {}, {'checked': True}, {}]\n+        )\n+        self.assertIs(self.widget.value_omitted_from_data({}, {}, 'field'), False)\n",
  "django__django-12209": "diff --git a/tests/serializers/models/data.py b/tests/serializers/models/data.py\nindex 946715d..2630143 100644\n--- a/tests/serializers/models/data.py\n+++ b/tests/serializers/models/data.py\n@@ -252,6 +252,10 @@ class SmallPKData(models.Model):\n # class TimePKData(models.Model):\n #    data = models.TimeField(primary_key=True)\n \n+import uuid\n+\n+class UUIDDefaultData(models.Model):\n+    data = models.UUIDField(primary_key=True, default=uuid.uuid4)\n \n class UUIDData(models.Model):\n     data = models.UUIDField(primary_key=True)\n",
  "django__django-12262": "",
  "django__django-12276": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 61f7a13..fc71218 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import copy\n import datetime\n import json\n@@ -15,7 +16,7 @@ from django.forms import (\n     TimeField, ValidationError, forms,\n )\n from django.forms.renderers import DjangoTemplates, get_default_renderer\n-from django.forms.utils import ErrorList\n+from django.forms.widgets import FileInput\n from django.http import QueryDict\n from django.template import Context, Template\n from django.test import SimpleTestCase\n@@ -2478,6 +2479,28 @@ Password: <input type=\"password\" name=\"password\" required>\n             '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n         )\n \n+    def test_filefield_with_fileinput_no_initial(self):\n+        class FileForm(Form):\n+            file1 = forms.FileField(widget=FileInput)\n+\n+        # Check that the 'required' attribute is present when there's no initial data\n+        f = FileForm(auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n+        )\n+\n+    def test_filefield_with_fileinput_initial(self):\n+        class FileForm(Form):\n+            file1 = forms.FileField(widget=FileInput)\n+\n+        # Check that the 'required' attribute is absent when initial data is provided\n+        f = FileForm(initial={'file1': 'resume.txt'}, auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n+        )\n+\n     def test_filefield_initial_callable(self):\n         class FileForm(forms.Form):\n             file1 = forms.FileField(initial=lambda: 'resume.txt')\n",
  "django__django-12304": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 6cabf01..32c734a 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import decimal\n import ipaddress\n@@ -149,8 +150,26 @@ class ChoicesTests(SimpleTestCase):\n                 with self.subTest(member=member):\n                     self.assertEqual(str(test[member.name]), str(member.value))\n \n-\n-class Separator(bytes, models.Choices):\n+from django.template import Context, Template\n+\n+class SuitTests(SimpleTestCase):\n+    class YearInSchool(models.TextChoices):\n+        FRESHMAN = 'FR', _('Freshman')\n+        SOPHOMORE = 'SO', _('Sophomore')\n+        JUNIOR = 'JR', _('Junior')\n+        SENIOR = 'SR', _('Senior')\n+\n+    def test_enum_in_template(self):\n+        template = Template('{% if student.year_in_school == YearInSchool.FRESHMAN %}Yes{% else %}No{% endif %}')\n+        context = Context({'student': {'year_in_school': self.YearInSchool.FRESHMAN}})\n+        output = template.render(context)\n+        self.assertEqual(output, 'Yes')\n+\n+    def test_enum_label_in_template(self):\n+        template = Template('{{ YearInSchool.FRESHMAN.label }}|{{ YearInSchool.FRESHMAN.value }}')\n+        context = Context({'YearInSchool': self.YearInSchool})\n+        output = template.render(context)\n+        self.assertEqual(output, 'Freshman|FR')\n     FS = b'\\x1c', 'File Separator'\n     GS = b'\\x1d', 'Group Separator'\n     RS = b'\\x1e', 'Record Separator'\n",
  "django__django-12308": "",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..4724b46 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1015,7 +1015,21 @@ class OtherModelTests(SimpleTestCase):\n             class ParkingLot(Place):\n                 parent = models.OneToOneField(Place, models.CASCADE)\n \n-    def test_m2m_table_name_clash(self):\n+    def test_onetoone_with_multiple_parent_links(self):\n+        class Document(models.Model):\n+            pass\n+\n+        # Original failing case: ImproperlyConfigured due to ordering\n+        with self.assertRaisesMessage(ImproperlyConfigured, \"Add parent_link=True to invalid_models_tests.Picking.origin.\"):\n+            class Picking(Document):\n+                document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+                origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+\n+        # Correct usage: Should not raise an exception\n+        class PickingFixed(Document):\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+        self.assertEqual(PickingFixed.check(), [])\n         class Foo(models.Model):\n             bar = models.ManyToManyField('Bar', db_table='myapp_bar')\n \n",
  "django__django-12419": "diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py\nindex 7af62eb..cb32022 100644\n--- a/tests/middleware/test_security.py\n+++ b/tests/middleware/test_security.py\n@@ -247,11 +247,25 @@ class SecurityMiddlewareTest(SimpleTestCase):\n             with self.subTest(value=value), override_settings(SECURE_REFERRER_POLICY=value):\n                 self.assertEqual(self.process_response()['Referrer-Policy'], expected)\n \n-    @override_settings(SECURE_REFERRER_POLICY='strict-origin')\n-    def test_referrer_policy_already_present(self):\n+    @override_settings(SECURE_REFERRER_POLICY=None)\n+    def test_referrer_policy_default(self):\n+        \"\"\"\n+        With SECURE_REFERRER_POLICY unset, the middleware should add a\n+        \"Referrer-Policy: same-origin\" header to the response.\n+        \"\"\"\n+        response = self.process_response()\n+        self.assertEqual(response.get('Referrer-Policy'), 'same-origin')\n+    @override_settings(SECURE_REFERRER_POLICY='same-origin')\n+    def test_referrer_policy_same_origin(self):\n+        \"\"\"\n+        With SECURE_REFERRER_POLICY explicitly set to \"same-origin\", the middleware should add a\n+        \"Referrer-Policy: same-origin\" header to the response.\n+        \"\"\"\n+        response = self.process_response()\n+        self.assertEqual(response['Referrer-Policy'], 'same-origin')\n         \"\"\"\n         The middleware will not override a \"Referrer-Policy\" header already\n         present in the response.\n         \"\"\"\n         response = self.process_response(headers={'Referrer-Policy': 'unsafe-url'})\n-        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n",
  "django__django-12663": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 872551b..bdd8906 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -13,6 +13,44 @@ from django.db.models import (\n     Func, IntegerField, Max, Min, Model, OrderBy, OuterRef, Q, StdDev,\n     Subquery, Sum, TimeField, UUIDField, Value, Variance, When,\n )\n+class SimpleLazyObjectSubqueryTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.user = User.objects.create_user(\"testuser\")\n+        cls.employee_manager = Manager.objects.create(name=\"Manager\")\n+        cls.employee = Employee.objects.create(\n+            firstname=\"Sample\",\n+            lastname=\"Employee\",\n+            salary=10000,\n+            manager=cls.employee_manager\n+        )\n+        cls.company = Company.objects.create(\n+            name=\"Sample Company\",\n+            ceo=cls.employee\n+        )\n+\n+    def test_simple_lazy_object_with_subquery_annotation(self):\n+        max_manager = SimpleLazyObject(lambda: Manager.objects.get(pk=self.employee_manager.pk))\n+        qs = Company.objects.annotate(\n+            ceo_manager=Subquery(\n+                Employee.objects.filter(\n+                    lastname=OuterRef('ceo__lastname'),\n+                ).values('manager'),\n+            ),\n+        ).filter(ceo_manager=max_manager)\n+        self.assertEqual(qs.get(), self.company)\n+\n+    def test_simple_lazy_object_with_invalid_subquery(self):\n+        invalid_manager = SimpleLazyObject(lambda: Manager.objects.create(name=\"Invalid Manager\"))\n+        qs = Company.objects.annotate(\n+            ceo_manager=Subquery(\n+                Employee.objects.filter(\n+                    lastname=OuterRef('ceo__lastname'),\n+                ).values('manager'),\n+            ),\n+        ).filter(ceo_manager=invalid_manager)\n+        self.assertEqual(qs.count(), 0)\n+\n from django.db.models.expressions import Col, Combinable, Random, RawSQL, Ref\n from django.db.models.functions import (\n     Coalesce, Concat, Left, Length, Lower, Substr, Upper,\n@@ -22,6 +60,9 @@ from django.db.models.sql.datastructures import Join\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import Approximate, isolate_apps\n \n+from django.contrib.auth.models import User\n+from django.db.models import OuterRef, Subquery\n+from django.utils.functional import SimpleLazyObject\n from .models import (\n     UUID, UUIDPK, Company, Employee, Experiment, Number, RemoteEmployee,\n     Result, SimulationRun, Time,\n",
  "django__django-12708": "",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..d222764 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -137,8 +137,48 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n         self.assertEqual(f1.widget.attrs['maxlength'], '100')\n         self.assertEqual(f2.widget.attrs['maxlength'], '20')\n         self.assertEqual(f2.widget.attrs['size'], '10')\n+    def test_formfield_overrides_m2m_filter_widget(self):\n+        \"\"\"\n+        The autocomplete_fields, raw_id_fields, filter_vertical, and\n+        filter_horizontal widgets for ManyToManyFields may be overridden by\n+        specifying a widget in formfield_overrides.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            filter_vertical = ['members']\n+            formfield_overrides = {\n+                ManyToManyField: {'widget': forms.CheckboxSelectMultiple},\n+            }\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, forms.CheckboxSelectMultiple)\n \n-    def test_formfield_overrides_for_datetime_field(self):\n+    def test_formfield_overrides_m2m_autocomplete_widget(self):\n+        \"\"\"\n+        The autocomplete_fields widget for ManyToManyFields may be overridden\n+        by specifying a different widget in formfield_overrides.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            autocomplete_fields = ['members']\n+            formfield_overrides = {\n+                ManyToManyField: {'widget': forms.CheckboxSelectMultiple},\n+            }\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, forms.CheckboxSelectMultiple)\n+\n+    def test_formfield_overrides_m2m_raw_id_widget(self):\n+        \"\"\"\n+        The raw_id_fields widget for ManyToManyFields may be overridden\n+        by specifying a different widget in formfield_overrides.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            raw_id_fields = ['members']\n+            formfield_overrides = {\n+                ManyToManyField: {'widget': forms.CheckboxSelectMultiple},\n+            }\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, forms.CheckboxSelectMultiple)\n         \"\"\"\n         Overriding the widget for DateTimeField doesn't overrides the default\n         form_class for that field (#26449).\n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..b0ffe95 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,7 +172,7 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n@@ -181,4 +181,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 17e707b..77b2f77 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2444,8 +2444,55 @@ class AutodetectorTests(TestCase):\n         self.assertNumberMigrations(changes, 'testapp', 1)\n         self.assertOperationTypes(changes, 'testapp', 0, [\"AddField\", \"AddField\"])\n         self.assertOperationAttributes(changes, 'testapp', 0, 0)\n+    def test_add_model_with_field_removed_from_base_model(self):\n+        \"\"\"\n+        Removing a base field takes place before adding a new inherited model\n+        that has a field with the same name.\n+        \"\"\"\n+        before = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('title', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        after = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+            ]),\n+            ModelState('app', 'book', [\n+                ('title', models.CharField(max_length=200)),\n+            ], bases=('app.readable',)),\n+        ]\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'app', 1)\n+        self.assertOperationTypes(changes, 'app', 0, ['RemoveField', 'CreateModel'])\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='title', model_name='readable')\n+        self.assertOperationAttributes(changes, 'app', 0, 1, name='book')\n \n-    def test_mti_inheritance_model_removal(self):\n+    def test_add_model_with_field_moved_to_subclass_and_verify_reversal(self):\n+        \"\"\"\n+        Test moving a field from a base class to a subclass by reversing the operations\n+        to ensure proper migration behavior when orders are swapped.\n+        \"\"\"\n+        before = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+            ]),\n+            ModelState('app', 'book', [\n+                ('title', models.CharField(max_length=200)),\n+            ], bases=('app.readable',)),\n+        ]\n+        after = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('title', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'app', 1)\n+        self.assertOperationTypes(changes, 'app', 0, ['DeleteModel', 'AddField'])\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='book')\n+        self.assertOperationAttributes(changes, 'app', 0, 1, name='title', model_name='readable')\n         Animal = ModelState('app', 'Animal', [\n             (\"id\", models.AutoField(primary_key=True)),\n         ])\n@@ -2453,4 +2500,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..f7bd349 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -9,6 +9,8 @@ from django.db.models import Exists, Max, OuterRef\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n from django.utils.deprecation import RemovedInDjango40Warning\n+from django.db import models\n+from django.test.utils import isolate_apps\n \n from .models import (\n     Article, Author, Freebie, Game, IsNullWithNoneAsRHS, Player, Season, Tag,\n@@ -179,7 +181,43 @@ class LookupTests(TestCase):\n         with self.assertNumQueries(expected_num_queries):\n             self.assertEqual(Author.objects.in_bulk(authors), authors)\n \n-    def test_in_bulk_with_field(self):\n+    def test_in_bulk_meta_constraint(self):\n+        season_2011 = Season.objects.create(year=2011)\n+        season_2012 = Season.objects.create(year=2012)\n+        Season.objects.create(year=2013)\n+        self.assertEqual(\n+            Season.objects.in_bulk(\n+                [season_2011.year, season_2012.year],\n+                field_name='year',\n+            ),\n+            {season_2011.year: season_2011, season_2012.year: season_2012},\n+        )\n+\n+    @isolate_apps('lookup')\n+    def test_in_bulk_non_unique_meta_constraint(self):\n+        class Model(models.Model):\n+            ean = models.CharField(max_length=100)\n+            brand = models.CharField(max_length=100)\n+            name = models.CharField(max_length=80)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=['ean'],\n+                        name='partial_ean_unique',\n+                        condition=models.Q(is_active=True)\n+                    ),\n+                    models.UniqueConstraint(\n+                        fields=['brand', 'name'],\n+                        name='together_brand_name_unique',\n+                    ),\n+                ]\n+\n+        msg = \"in_bulk()'s field_name must be a unique field but '%s' isn't.\"\n+        for field_name in ['brand', 'ean']:\n+            with self.subTest(field_name=field_name):\n+                with self.assertRaisesMessage(ValueError, msg % field_name):\n+                    Model.objects.in_bulk(field_name=field_name)\n         self.assertEqual(\n             Article.objects.in_bulk([self.a1.slug, self.a2.slug, self.a3.slug], field_name='slug'),\n             {\n",
  "django__django-12858": "",
  "django__django-13012": "",
  "django__django-13028": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 70329a0..d03f92c 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -64,6 +64,11 @@ class Queries1Tests(TestCase):\n         a3 = Author.objects.create(name='a3', num=3003, extra=cls.e2)\n         cls.a4 = Author.objects.create(name='a4', num=4004, extra=cls.e2)\n \n+        # Create a test case to specifically verify the 'filterable' field behavior.\n+        cls.e3 = ExtraInfo.objects.create(info='e3', note=cls.n2, value=42, filterable=False)\n+        cls.a5 = Author.objects.create(name='a5', num=5005, extra=cls.e3)\n+        cls.a6 = Author.objects.create(name='a6', num=6006, extra=cls.e3)\n+\n         cls.time1 = datetime.datetime(2007, 12, 19, 22, 25, 0)\n         cls.time2 = datetime.datetime(2007, 12, 19, 21, 0, 0)\n         time3 = datetime.datetime(2007, 12, 20, 22, 25, 0)\n@@ -72,6 +77,17 @@ class Queries1Tests(TestCase):\n         cls.i1.tags.set([cls.t1, cls.t2])\n         cls.i2 = Item.objects.create(name='two', created=cls.time2, creator=cls.a2, note=cls.n2)\n         cls.i2.tags.set([cls.t1, cls.t3])\n+\n+    def test_filter_with_non_filterable_field_raises_error(self):\n+        with self.assertRaises(NotSupportedError):\n+            ProductMetaData.objects.filter(value=\"Dark Vador\", metadata_type=self.brand_metadata)\n+\n+    def test_filter_with_renamed_filterable_field(self):\n+        # This test verifies that renaming the field resolves the issue.\n+        self.assertSequenceEqual(\n+            Author.objects.filter(extra=self.e3),\n+            [self.a5, self.a6],\n+        )\n         cls.i3 = Item.objects.create(name='three', created=time3, creator=cls.a2, note=cls.n3)\n         i4 = Item.objects.create(name='four', created=time4, creator=cls.a4, note=cls.n3)\n         i4.tags.set([t4])\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..ae42bce 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,6 +343,36 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_self_referential_foreign_key_ordering(self):\n+        # Creating Author instances\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\")\n+        \n+        # Creating Article instances with self-referential ForeignKey setup\n+        a1 = Article.objects.create(author=author_1, headline=\"Article A1\", pub_date=\"2023-01-01\")\n+        a2 = Article.objects.create(author=author_2, headline=\"Article A2\", pub_date=\"2023-01-02\")\n+\n+        # Original test case to verify correct ordering by 'author__editor'\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor'),\n+            ['Article A2', 'Article A1'],\n+            attrgetter('headline'),\n+        )\n+\n+        # New test case to verify ordering by 'author__editor_id' correctly\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            ['Article A1', 'Article A2'],\n+            attrgetter('headline'),\n+        )\n+\n+        # Testing if ordering by '-author__editor_id' inverts the order correctly\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__editor_id'),\n+            ['Article A2', 'Article A1'],\n+            attrgetter('headline'),\n+        )\n+\n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n@@ -353,6 +383,36 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n+\n+    def test_self_referential_foreign_key_ordering(self):\n+        # Creating Author instances\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\")\n+        \n+        # Creating Article instances with self-referential ForeignKey setup\n+        a1 = Article.objects.create(author=author_1, headline=\"Article A1\", pub_date=\"2023-01-01\")\n+        a2 = Article.objects.create(author=author_2, headline=\"Article A2\", pub_date=\"2023-01-02\")\n+\n+        # Original test case to verify correct ordering by 'author__editor'\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor'),\n+            ['Article A2', 'Article A1'],\n+            attrgetter('headline'),\n+        )\n+\n+        # New test case to verify ordering by 'author__editor_id' correctly\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            ['Article A1', 'Article A2'],\n+            attrgetter('headline'),\n+        )\n+\n+        # Testing if ordering by '-author__editor_id' inverts the order correctly\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__editor_id'),\n+            ['Article A2', 'Article A1'],\n+            attrgetter('headline'),\n+        )\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline').asc()), [\n                 \"Article 1\",\n",
  "django__django-13089": "",
  "django__django-13109": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex d60d822..78ec537 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -1645,6 +1645,52 @@ class ModelFormBasicTests(TestCase):\n         obj.full_clean()\n \n \n+class TestForeignKeyValidation(TestCase):\n+    def setUp(self):\n+        # Set up the initial data\n+        self.archived_writer = Writer.objects.create(name='Archived Writer', archived=True)\n+        self.active_writer = Writer.objects.create(name='Active Writer', archived=False)\n+\n+    def test_foreign_key_default_manager(self):\n+        # Test to ensure validation fails with the default manager\n+        class ArticleForm(forms.ModelForm):\n+            class Meta:\n+                model = Article\n+                fields = '__all__'\n+\n+        # Try to use an archived writer, expecting failure\n+        data = {\n+            'title': 'Test Article',\n+            'writer': self.archived_writer.pk,\n+        }\n+        form = ArticleForm(data)\n+        self.assertFalse(form.is_valid())\n+        self.assertIn('writer', form.errors)\n+\n+    def test_foreign_key_base_manager(self):\n+        # Test to ensure validation passes with the base manager\n+        class ArticleForm(forms.ModelForm):\n+            class Meta:\n+                model = Article\n+                fields = '__all__'\n+\n+            def __init__(self, *args, **kwargs):\n+                super().__init__(*args, **kwargs)\n+                self.fields['writer'].queryset = Writer._base_manager.all()\n+\n+        # Try to use an archived writer, expecting success\n+        data = {\n+            'title': 'Test Article',\n+            'writer': self.archived_writer.pk,\n+        }\n+        form = ArticleForm(data)\n+        self.assertTrue(form.is_valid())\n+\n+from django.db import models\n+from django import forms\n+from django.test import TestCase\n+from .models import Article, Writer, WriterManager\n+\n class ModelMultipleChoiceFieldTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-13112": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 081eff8..4075ed8 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -867,6 +867,31 @@ class StateTests(SimpleTestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             project_state.apps\n \n+    def test_mixed_case_foreign_key_reference(self):\n+        \"\"\"\n+        Ensure no ValueError is raised when using a mixed-case app label with ForeignKey.\n+        \"\"\"\n+        new_apps = Apps()\n+\n+        class Category(models.Model):\n+            class Meta:\n+                app_label = 'DJ_RegLogin'\n+                apps = new_apps\n+\n+        class Content(models.Model):\n+            category = models.ForeignKey(Category, on_delete=models.CASCADE)\n+\n+            class Meta:\n+                app_label = 'DJ_RegLogin'\n+                apps = new_apps\n+\n+        project_state = ProjectState()\n+        project_state.add_model(ModelState.from_model(Category))\n+        project_state.add_model(ModelState.from_model(Content))\n+\n+        # Check that models are correctly recognized\n+        self.assertEqual(len(project_state.apps.get_models()), 2)\n+\n     def test_real_apps(self):\n         \"\"\"\n         Including real apps can resolve dangling FK errors.\n",
  "django__django-13121": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex a684d7e..a92634a 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1210,12 +1210,90 @@ class ExpressionOperatorTests(TestCase):\n         self.assertEqual(Number.objects.get(pk=self.n.pk).integer, 1764)\n         self.assertEqual(Number.objects.get(pk=self.n.pk).float, Approximate(61.02, places=2))\n \n+import datetime\n+from django.db.models import F\n+from django.test import TestCase\n+from .models import Experiment\n+\n+class DurationExpressionsTest(TestCase):\n+    def setUp(self):\n+        # Setup initial data for testing\n+        self.deltas = [datetime.timedelta(days=1), datetime.timedelta(seconds=3600), datetime.timedelta(microseconds=1000)]\n+        self.experiments = [\n+            Experiment.objects.create(estimated_time=datetime.timedelta(days=1, seconds=3600)),\n+            Experiment.objects.create(estimated_time=datetime.timedelta(0)),\n+        ]\n+\n+    def test_duration_expressions(self):\n+        for delta in self.deltas:\n+            qs = Experiment.objects.annotate(duration=F('estimated_time') + delta)\n+            for obj in qs:\n+                self.assertEqual(obj.duration, obj.estimated_time + delta)\n+\n+    def test_negative_duration_expressions(self):\n+        # Test with subtracting durations\n+        qs = Experiment.objects.annotate(duration=F('estimated_time') - datetime.timedelta(days=1))\n+        for obj in qs:\n+            self.assertEqual(obj.duration, obj.estimated_time - datetime.timedelta(days=1))\n+\n+    def test_zero_duration_expressions(self):\n+        # Test adding zero duration\n+        qs = Experiment.objects.annotate(duration=F('estimated_time') + datetime.timedelta(0))\n+        for obj in qs:\n+            self.assertEqual(obj.duration, obj.estimated_time)\n+\n+    def test_large_duration_expressions(self):\n+        # Test with large duration values\n+        large_delta = datetime.timedelta(days=365*10)  # 10 years\n+        qs = Experiment.objects.annotate(duration=F('estimated_time') + large_delta)\n+        for obj in qs:\n+            self.assertEqual(obj.duration, obj.estimated_time + large_delta)\n+\n     @unittest.skipIf(connection.vendor == 'oracle', \"Oracle doesn't support bitwise XOR.\")\n     def test_lefthand_bitwise_xor(self):\n         Number.objects.update(integer=F('integer').bitxor(48))\n         self.assertEqual(Number.objects.get(pk=self.n.pk).integer, 26)\n         self.assertEqual(Number.objects.get(pk=self.n1.pk).integer, -26)\n \n+import datetime\n+from django.db.models import F\n+from django.test import TestCase\n+from .models import Experiment\n+\n+class DurationExpressionsTest(TestCase):\n+    def setUp(self):\n+        # Setup initial data for testing\n+        self.deltas = [datetime.timedelta(days=1), datetime.timedelta(seconds=3600), datetime.timedelta(microseconds=1000)]\n+        self.experiments = [\n+            Experiment.objects.create(estimated_time=datetime.timedelta(days=1, seconds=3600)),\n+            Experiment.objects.create(estimated_time=datetime.timedelta(0)),\n+        ]\n+\n+    def test_duration_expressions(self):\n+        for delta in self.deltas:\n+            qs = Experiment.objects.annotate(duration=F('estimated_time') + delta)\n+            for obj in qs:\n+                self.assertEqual(obj.duration, obj.estimated_time + delta)\n+\n+    def test_negative_duration_expressions(self):\n+        # Test with subtracting durations\n+        qs = Experiment.objects.annotate(duration=F('estimated_time') - datetime.timedelta(days=1))\n+        for obj in qs:\n+            self.assertEqual(obj.duration, obj.estimated_time - datetime.timedelta(days=1))\n+\n+    def test_zero_duration_expressions(self):\n+        # Test adding zero duration\n+        qs = Experiment.objects.annotate(duration=F('estimated_time') + datetime.timedelta(0))\n+        for obj in qs:\n+            self.assertEqual(obj.duration, obj.estimated_time)\n+\n+    def test_large_duration_expressions(self):\n+        # Test with large duration values\n+        large_delta = datetime.timedelta(days=365*10)  # 10 years\n+        qs = Experiment.objects.annotate(duration=F('estimated_time') + large_delta)\n+        for obj in qs:\n+            self.assertEqual(obj.duration, obj.estimated_time + large_delta)\n+\n     @unittest.skipIf(connection.vendor == 'oracle', \"Oracle doesn't support bitwise XOR.\")\n     def test_lefthand_bitwise_xor_null(self):\n         employee = Employee.objects.create(firstname='John', lastname='Doe')\n",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..7014dce 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1590,6 +1590,10 @@ class FTimeDeltaTests(TestCase):\n         ]\n         self.assertEqual(under_estimate, ['e2'])\n \n+        qs = Experiment.objects.annotate(delta=F('end') - F('start'))\n+        for obj in qs:\n+            self.assertEqual(obj.delta, obj.end - obj.start)\n+\n         over_estimate = [\n             e.name for e in Experiment.objects.filter(estimated_time__lt=F('end') - F('start'))\n         ]\n",
  "django__django-13158": "",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..63e038f 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -312,6 +312,19 @@ class SessionTestsMixin:\n         self.assertEqual(self.session.decode(encoded), data)\n \n     @override_settings(SECRET_KEY='django_tests_secret_key')\n+    def test_decode_modern(self):\n+        # Test with modern encoding\n+        data = {'another test key': 'another test value'}\n+        encoded = self.session.encode(data)\n+        self.assertEqual(self.session.decode(encoded), data)\n+\n+    def test_default_hashing_algorithm_legacy_decode(self):\n+        # Test legacy decoding with DEFAULT_HASHING_ALGORITHM set to 'sha1'.\n+        with self.settings(DEFAULT_HASHING_ALGORITHM='sha1'):\n+            data = {'a test key': 'a test value'}\n+            encoded = self.session.encode(data)\n+            self.assertEqual(self.session._legacy_decode(encoded), data)\n+\n     def test_decode_legacy(self):\n         # RemovedInDjango40Warning: pre-Django 3.1 sessions will be invalid.\n         legacy_encoded = (\n",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..2f352c0 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -9,6 +9,8 @@ from django.test.utils import require_jinja2\n from django.urls import resolve\n from django.utils.deprecation import RemovedInDjango40Warning\n from django.views.generic import RedirectView, TemplateView, View\n+from django.utils.functional import SimpleLazyObject\n+from .models import Artist\n \n from . import views\n \n@@ -590,7 +592,21 @@ class DeprecationTests(SimpleTestCase):\n         self.assertEqual(response.context['key'], 'value')\n         self.assertIsInstance(response.context['view'], View)\n \n-    def test_template_params_warning(self):\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_lazy_object_in_context_data(self):\n+        class OfferView(TemplateView):\n+            template_name = \"generic_views/about.html\"\n+            \n+            def get_context_data(self, **kwargs):\n+                offer_slug = kwargs.get(\"offer_slug\", \"\")\n+                offer_slug = str(offer_slug)  # Ensure SimpleLazyObject is resolved\n+                context = super().get_context_data(**kwargs)\n+                # For testing, we'll assume get_object_or_404 would succeed with such a slug\n+                return {**context, 'offer_slug': offer_slug}\n+\n+        lazy_slug = SimpleLazyObject(lambda: \"test-slug\")\n+        response = OfferView.as_view()(self.rf.get('/offers/test-slug/'), offer_slug=lazy_slug)\n+        self.assertEqual(response.context_data['offer_slug'], \"test-slug\")\n         response = self.client.get('/template/custom/bar1/bar2/')\n         self.assertEqual(response.status_code, 200)\n         msg = (\n",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..cfa8885 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -14,7 +14,8 @@ from django.forms.models import (\n     ModelFormMetaclass, construct_instance, fields_for_model, model_to_dict,\n     modelform_factory,\n )\n-from django.template import Context, Template\n+from django.db.models import Q\n+from django.test.utils import isolate_apps\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n \n from .models import (\n",
  "django__django-13343": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex a5ab3a0..eab8419 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -21,6 +21,7 @@ from django.core.files.uploadedfile import (\n     InMemoryUploadedFile, SimpleUploadedFile, TemporaryUploadedFile,\n )\n from django.db.models import FileField\n+from django.core.files.storage import get_storage_class, FileSystemStorage\n from django.db.models.fields.files import FileDescriptor\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n@@ -906,7 +907,41 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         obj = FileField(storage=GetStorage)\n         self.assertIsInstance(obj.storage, BaseStorage)\n \n-    def test_callable_storage_file_field_in_model(self):\n+    def test_callable_storage_file_field_deconstruction(self):\n+        \"\"\"\n+        Ensure deconstruction of FileField with callable storage returns the callable.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field('storage_callable').deconstruct()\n+        self.assertIs(kwargs['storage'], callable_storage)\n+\n+    def test_callable_storage_file_field_runtime(self):\n+        \"\"\"\n+        Verify that FileField with callable storage behaves correctly at runtime.\n+        \"\"\"\n+        obj = Storage()\n+        self.assertEqual(obj.storage_callable.storage, temp_storage)\n+        self.assertEqual(obj.storage_callable.storage.location, temp_storage_location)\n+\n+    def test_callable_storage_different_instance(self):\n+        \"\"\"\n+        Verify that different instances of Storage use the same callable storage.\n+        \"\"\"\n+        obj1 = Storage()\n+        obj2 = Storage()\n+        self.assertIs(obj1.storage_callable.storage, obj2.storage_callable.storage)\n+\n+    def test_callable_storage_different_environments(self):\n+        \"\"\"\n+        Simulate different environments by changing callable storage dynamically.\n+        \"\"\"\n+        new_temp_storage = FileSystemStorage(location='/new/location/')\n+        def dynamic_storage():\n+            return new_temp_storage\n+\n+        obj = Storage()\n+        obj._meta.get_field('storage_callable').storage = dynamic_storage\n+        self.assertEqual(obj.storage_callable.storage.location, '/new/location/')\n         obj = Storage()\n         self.assertEqual(obj.storage_callable.storage, temp_storage)\n         self.assertEqual(obj.storage_callable.storage.location, temp_storage_location)\n",
  "django__django-13346": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex b918d5c..5f49122 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -623,6 +623,20 @@ class TestQuerying(TestCase):\n                     expected,\n                 )\n \n+    def test_key_in(self):\n+        tests = [\n+            ('value__key__in', [0], []),  # Expecting empty because our assumption is value cannot be 0\n+            ('value__key__in', [1], [self.objs[0]]),  # Assuming objs[0]'s key has value 1\n+            ('value__key__in', [1, 2], [self.objs[0], self.objs[1]]),  # Assuming objs[0] and objs[1] have keys with values 1 or 2\n+            ('value__key__in', [3], [self.objs[2]]),  # Assuming objs[2]'s key has value 3\n+        ]\n+        for lookup, value, expected in tests:\n+            with self.subTest(lookup=lookup, value=value):\n+                self.assertSequenceEqual(\n+                    NullableJSONModel.objects.filter(**{lookup: value}),\n+                    expected,\n+                )\n+\n     def test_key_iexact(self):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__iexact='BaR').exists(), True)\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__iexact='\"BaR\"').exists(), False)\n",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..dd6531f 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -17,7 +17,10 @@ from django.db.models.functions import (\n from django.test import (\n     TestCase, override_settings, skipIfDBFeature, skipUnlessDBFeature,\n )\n+from datetime import datetime\n+import pytz\n from django.utils import timezone\n+from django.db.models import Count\n \n from ..models import Author, DTModel, Fan\n \n@@ -1133,7 +1136,43 @@ class DateFunctionWithTimeZoneTests(DateFunctionTests):\n         self.assertEqual(model.melb_year.year, 2016)\n         self.assertEqual(model.pacific_year.year, 2015)\n \n-    def test_trunc_ambiguous_and_invalid_times(self):\n+    def test_truncdate_with_different_timezones(self):\n+        start_datetime = datetime(2023, 3, 29, 15, 45, 0)\n+        start_datetime = timezone.make_aware(start_datetime, timezone.utc)\n+        self.create_model(start_datetime, start_datetime)\n+\n+        melb = pytz.timezone(\"Australia/Melbourne\")\n+        nyc = pytz.timezone(\"America/New_York\")\n+\n+        model = DTModel.objects.annotate(\n+            melb_date=TruncDate(\"start_datetime\", tzinfo=melb),\n+            nyc_date=TruncDate(\"start_datetime\", tzinfo=nyc),\n+        ).order_by(\"start_datetime\").get()\n+\n+        melb_start_datetime = start_datetime.astimezone(melb)\n+        nyc_start_datetime = start_datetime.astimezone(nyc)\n+\n+        self.assertEqual(model.melb_date, melb_start_datetime.date())\n+        self.assertEqual(model.nyc_date, nyc_start_datetime.date())\n+\n+    def test_trunctime_with_different_timezones(self):\n+        start_datetime = datetime(2023, 3, 29, 15, 45, 0)\n+        start_datetime = timezone.make_aware(start_datetime, timezone.utc)\n+        self.create_model(start_datetime, start_datetime)\n+\n+        melb = pytz.timezone(\"Australia/Melbourne\")\n+        nyc = pytz.timezone(\"America/New_York\")\n+\n+        model = DTModel.objects.annotate(\n+            melb_time=TruncTime(\"start_datetime\", tzinfo=melb),\n+            nyc_time=TruncTime(\"start_datetime\", tzinfo=nyc),\n+        ).order_by(\"start_datetime\").get()\n+\n+        melb_start_datetime = start_datetime.astimezone(melb)\n+        nyc_start_datetime = start_datetime.astimezone(nyc)\n+\n+        self.assertEqual(model.melb_time, melb_start_datetime.time())\n+        self.assertEqual(model.nyc_time, nyc_start_datetime.time())\n         sao = pytz.timezone('America/Sao_Paulo')\n         utc = pytz.timezone('UTC')\n         start_datetime = utc.localize(datetime(2016, 10, 16, 13))\n",
  "django__django-13401": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e39d03e..beb16d2 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -93,7 +93,36 @@ class BasicFieldTests(SimpleTestCase):\n     def test_field_instance_is_picklable(self):\n         \"\"\"Field instances can be pickled.\"\"\"\n         field = models.Field(max_length=100, default='a string')\n-        # Must be picklable with this cached property populated (#28188).\n+from django.test import SimpleTestCase\n+from django.db import models\n+\n+class AbstractModelFieldTests(SimpleTestCase):\n+    def test_abstract_inherited_fields_equality_and_hash(self):\n+        \"\"\"Field instances from abstract models should be unequal and have different hashes.\"\"\"\n+\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class Model1(AbstractModel):\n+            pass\n+\n+        class Model2(AbstractModel):\n+            pass\n+\n+        field1 = Model1._meta.get_field('field')\n+        field2 = Model2._meta.get_field('field')\n+\n+        # Ensure fields are not equal\n+        self.assertNotEqual(field1, field2)\n+\n+        # Ensure fields have different hashes\n+        self.assertNotEqual(hash(field1), hash(field2))\n+\n+        # Test less than comparison\n+        self.assertLess(field1.creation_counter, field2.creation_counter)\n         field._get_default\n         pickle.dumps(field)\n \n",
  "django__django-13410": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 1285e22..3337395 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -1,3 +1,52 @@\n+\n+class LockFileTestCase(unittest.TestCase):\n+    def test_exclusive_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'w+') as f1, open(file_path, 'w+') as f2:\n+            # Test acquiring an exclusive lock on f1\n+            self.assertIs(locks.lock(f1, locks.LOCK_EX), True)\n+            # Test non-blocking exclusive lock on f2 should fail\n+            self.assertIs(locks.lock(f2, locks.LOCK_EX | locks.LOCK_NB), False)\n+            # Test non-blocking shared lock on f2 should also fail\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), False)\n+            # Test unlocking f1\n+            self.assertIs(locks.unlock(f1), True)\n+\n+    def test_shared_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'w+') as f1, open(file_path, 'w+') as f2:\n+            # Test acquiring a shared lock on f1\n+            self.assertIs(locks.lock(f1, locks.LOCK_SH), True)\n+            # Test non-blocking shared lock on f2 should succeed\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), True)\n+            # Test unlocking f1\n+            self.assertIs(locks.unlock(f1), True)\n+            # Test unlocking f2\n+            self.assertIs(locks.unlock(f2), True)\n+\n+    def test_unlock_without_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'w+') as f1:\n+            # Test unlocking without a prior lock\n+            self.assertIs(locks.unlock(f1), True)\n+\n+    def test_double_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'w+') as f1:\n+            # Test locking a file that's already locked\n+            self.assertIs(locks.lock(f1, locks.LOCK_EX), True)\n+            self.assertIs(locks.lock(f1, locks.LOCK_EX), False)\n+            # Unlock the file\n+            self.assertIs(locks.unlock(f1), True)\n+\n+    def test_multiple_unlocks(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'w+') as f1:\n+            # Test unlocking a file multiple times\n+            self.assertIs(locks.lock(f1, locks.LOCK_EX), True)\n+            self.assertIs(locks.unlock(f1), True)\n+            self.assertIs(locks.unlock(f1), True)\n+\n import errno\n import gzip\n import os\n@@ -6,6 +55,7 @@ import tempfile\n import unittest\n from io import BytesIO, StringIO, TextIOWrapper\n from pathlib import Path\n+from django.core.files import locks\n from unittest import mock\n \n from django.core.files import File\n",
  "django__django-13417": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 8130de5..2c84ad7 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2082,6 +2082,15 @@ class QuerysetOrderedTests(unittest.TestCase):\n     def test_annotated_ordering(self):\n         qs = Annotation.objects.annotate(num_notes=Count('notes'))\n         self.assertIs(qs.ordered, False)\n+        # Test with a model having Meta.ordering and GROUP BY\n+        qs2 = Annotation.objects.annotate(num_notes=Count('notes')).values('name', 'num_notes')\n+        self.assertIs(qs2.ordered, False, \"qs2 should not be considered ordered without an explicit order_by.\")\n+        self.assertIs(qs2.order_by('name').ordered, True, \"qs2 should be ordered when order_by is explicitly used.\")\n+        \n+        # Test with a model with Meta.ordering after annotate without group_by\n+        qs3 = Annotation.objects.annotate(num_notes=Count('notes')).all()\n+        self.assertIs(qs3.ordered, False, \"qs3 should not be considered ordered without an explicit order_by after annotate.\")\n+        self.assertIs(qs3.order_by('num_notes').ordered, True, \"qs3 should be ordered when order_by is explicitly used after annotate.\")\n         self.assertIs(qs.order_by('num_notes').ordered, True)\n \n \n",
  "django__django-13516": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 89f7c38..33a368e 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -342,6 +342,35 @@ class CommandTests(SimpleTestCase):\n         self.assertEqual(parser.epilog, epilog)\n \n \n+from io import StringIO\n+from unittest import mock\n+from django.core import management\n+\n+class TestFlushBehavior(BaseCommand):\n+    help = \"A command to test flush behavior\"\n+\n+    def handle(self, **options):\n+        self.stdout.write('Starting migration...')\n+        self.stdout.flush()\n+        self.stdout.write('Migration step 1...')\n+        self.stdout.flush()\n+        self.stdout.write('Migration step 2...')\n+        self.stdout.flush()\n+        self.stdout.write('Migration completed.')\n+        self.stdout.flush()\n+\n+class CommandFlushTestCase(AdminScriptTestCase):\n+    \n+    def test_flush_behavior_during_long_command(self):\n+        out = StringIO()\n+        with mock.patch.object(out, 'flush') as mocked_flush:\n+            management.call_command(TestFlushBehavior(), stdout=out)\n+            self.assertIn('Starting migration...', out.getvalue())\n+            self.assertIn('Migration step 1...', out.getvalue())\n+            self.assertIn('Migration step 2...', out.getvalue())\n+            self.assertIn('Migration completed.', out.getvalue())\n+            self.assertTrue(mocked_flush.call_count, 4)\n+\n class CommandRunTests(AdminScriptTestCase):\n     \"\"\"\n     Tests that need to run by simulating the command line, not by call_command.\n",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..b4e9622 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,11 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n+from .with_custom_email_field import CustomEmailField\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n@@ -37,7 +39,26 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n-    def test_timeout(self):\n+    def test_token_with_different_email(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                self.assertIs(p0.check_token(user, tk1), False)\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n         # the value of 'now'.\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..238f01f 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,7 +1,9 @@\n+\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n from django.contrib.auth.models import AbstractBaseUser\n+from django.db.models import Q, UniqueConstraint\n from django.core import checks\n from django.db import models\n from django.test import (\n@@ -138,7 +140,40 @@ class ModelsPermissionsChecksTests(SimpleTestCase):\n             ),\n         ])\n \n-    def test_non_clashing_custom_permissions(self):\n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserUniqueWithCondition')\n+    def test_username_unique_with_model_constraint_condition(self):\n+        class CustomUserUniqueWithCondition(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(\n+                        fields=['username'],\n+                        name='username_unique_condition',\n+                        condition=Q(is_active=True),\n+                    ),\n+                ]\n+\n+        # Ensure no check errors when using conditional constraints\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [])\n+\n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserUniqueNoConstraint')\n+    def test_username_non_unique_no_constraint(self):\n+        class CustomUserUniqueNoConstraint(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+        # Expect error auth.E003 since there's no unique constraint defined\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [\n+            checks.Error(\n+                \"'CustomUserUniqueNoConstraint.username' must be unique because it is named as the 'USERNAME_FIELD'.\",\n+                obj=CustomUserUniqueNoConstraint,\n+                id='auth.E003',\n+            ),\n+        ])\n         class Checked(models.Model):\n             class Meta:\n                 permissions = [\n",
  "django__django-13569": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex a44d0b6..90cf41e 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1314,4 +1314,33 @@ class AggregateTestCase(TestCase):\n         # non-multivalued JOINs, see Col.possibly_multivalued (refs #31150):\n         # with self.assertNumQueries(1) as ctx:\n         #     self.assertSequenceEqual(books_qs, [book])\n-        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n+        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n+\n+    def test_random_ordering_with_aggregation(self):\n+        \"\"\"\n+        Test that Random() ordering does not affect the aggregation results.\n+        \"\"\"\n+        # Creating Thing and Related models\n+        thing = Thing.objects.create()\n+        Related.objects.create(thing=thing)\n+        Related.objects.create(thing=thing)\n+\n+        # Aggregating and ordering by random\n+        queryset = Thing.objects.annotate(rc=Count('related')).order_by('?').values('id', 'rc')\n+        # Since order_by('?') should not break the aggregation, we expect one result with a count of 2.\n+        self.assertEqual(list(queryset), [{'id': thing.id, 'rc': 2}])\n+\n+    def test_order_by_random_with_multiple_things(self):\n+        \"\"\"\n+        Test Random() ordering with multiple Things having Related objects.\n+        \"\"\"\n+        thing1 = Thing.objects.create()\n+        thing2 = Thing.objects.create()\n+        Related.objects.create(thing=thing1)\n+        Related.objects.create(thing=thing2)\n+        Related.objects.create(thing=thing2)\n+\n+        queryset = Thing.objects.annotate(rc=Count('related')).order_by('?').values('id', 'rc')\n+        # Ensure that both Thing objects are present in the result with correct counts\n+        result = list(queryset)\n+        self.assertCountEqual(result, [{'id': thing1.id, 'rc': 1}, {'id': thing2.id, 'rc': 2}])\n",
  "django__django-13590": "",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..1be3290 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -19,24 +19,63 @@ from django.conf import settings\n from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n )\n+from django.test.utils import captured_stderr, captured_stdout\n from django.core.management.commands.loaddata import Command as LoaddataCommand\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n )\n+from django.test.utils import captured_stderr, captured_stdout\n from django.core.management.commands.testserver import (\n     Command as TestserverCommand,\n )\n+from django.test.utils import captured_stderr, captured_stdout\n from django.db import ConnectionHandler, connection\n from django.db.migrations.recorder import MigrationRecorder\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n+from django.test.utils import captured_stderr, captured_stdout\n \n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n \n SYSTEM_CHECK_MSG = 'System check identified no issues'\n \n \n+class ExecuteFromCommandLineTests(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_prog_name_with_different_sys_argv(self):\n+        \"\"\"\n+        Program name should be correct when sys.argv is different from the passed argv.\n+        \"\"\"\n+        args = ['help']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['wrong-name', 'wrong-command']):\n+                execute_from_command_line(['correct-name'] + args)\n+        self.assertIn('usage: correct-name help', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_prog_name_with_empty_sys_argv(self):\n+        \"\"\"\n+        Program name should be correct when sys.argv is empty.\n+        \"\"\"\n+        args = ['help']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', []):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin help', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n class AdminScriptTestCase(SimpleTestCase):\n     def setUp(self):\n         tmpdir = tempfile.TemporaryDirectory()\n",
  "django__django-13670": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 6f0b13f..162cbe2 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -1,3 +1,4 @@\n+\n from datetime import date, datetime\n \n from django.test import SimpleTestCase, override_settings\n@@ -157,6 +158,24 @@ class DateFormatTests(SimpleTestCase):\n             with self.assertRaisesMessage(TypeError, msg):\n                 dateformat.format(my_birthday, specifier)\n \n+    def test_year_before_1000(self):\n+        tests = [\n+            (476, '76'),\n+            (42, '42'),\n+            (4, '04'),\n+            (999, '99'),\n+            (1, '01'),\n+            (100, '00'),\n+            (900, '00'),\n+            (0, '00'),  # Edge case: Year 0\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n+\n     def test_r_format_with_non_en_locale(self):\n         # Changing the locale doesn't change the \"r\" format.\n         dt = datetime(1979, 7, 8, 22, 00)\n@@ -164,4 +183,4 @@ class DateFormatTests(SimpleTestCase):\n             self.assertEqual(\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+            )\n",
  "django__django-13741": "",
  "django__django-13786": "",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..bcb0a38 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,7 +1,10 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n from django.test import SimpleTestCase\n+from django.utils.functional import lazy\n+from django.utils.translation import gettext_lazy\n \n from ..utils import setup\n \n@@ -46,8 +49,35 @@ class AddTests(SimpleTestCase):\n         output = self.engine.render_to_string('add07', {'d': date(2000, 1, 1), 't': timedelta(10)})\n         self.assertEqual(output, 'Jan. 11, 2000')\n \n+    @setup({'add08': '{{ s1|add:lazy_s2 }}'})\n+    def test_add08(self):\n+        output = self.engine.render_to_string('add08', {'s1': 'string', 'lazy_s2': gettext_lazy('lazy')})\n+        self.assertEqual(output, 'stringlazy')\n+\n+    @setup({'add09': '{{ lazy_s1|add:lazy_s2 }}'})\n+    def test_add09(self):\n+        output = self.engine.render_to_string('add09', {'lazy_s1': gettext_lazy('string'), 'lazy_s2': gettext_lazy('lazy')})\n+        self.assertEqual(output, 'stringlazy')\n+\n+    def test_lazy_add(self):\n+        lazy_4 = lazy(lambda: 4, int)\n+        lazy_5 = lazy(lambda: 5, int)\n+        self.assertEqual(lazy_4() + lazy_5(), 9)\n+\n+    @setup({'add10': '{{ s1|add:lazy_s2|add:s3 }}'})\n+    def test_add10(self):\n+        output = self.engine.render_to_string('add10', {'s1': 'string', 'lazy_s2': gettext_lazy('lazy'), 's3': 'extra'})\n+        self.assertEqual(output, 'stringlazyextra')\n+\n+    @setup({'add11': '{{ lazy_s1|add:s2|add:lazy_s3 }}'})\n+    def test_add11(self):\n+        output = self.engine.render_to_string('add11', {'lazy_s1': gettext_lazy('string'), 's2': ' and ', 'lazy_s3': gettext_lazy('more')})\n+        self.assertEqual(output, 'string and more')\n \n-class FunctionTests(SimpleTestCase):\n+    @setup({'add12': '{{ s1|add:lazy_s2|add:s3|add:lazy_s4 }}'})\n+    def test_add12(self):\n+        output = self.engine.render_to_string('add12', {'s1': 'first', 'lazy_s2': gettext_lazy('second'), 's3': 'third', 'lazy_s4': gettext_lazy('fourth')})\n+        self.assertEqual(output, 'firstsecondthirdfourth')\n \n     def test_add(self):\n         self.assertEqual(add('1', '2'), 3)\n",
  "django__django-13807": "diff --git a/tests/backends/models.py b/tests/backends/models.py\nindex a2fd310..478d44b 100644\n--- a/tests/backends/models.py\n+++ b/tests/backends/models.py\n@@ -134,9 +134,17 @@ class RawData(models.Model):\n     raw_data = models.BinaryField()\n \n \n+class SQLKeywordsModel(models.Model):\n+    id = models.AutoField(primary_key=True, db_column='select')\n+    reporter = models.ForeignKey('Reporter', models.CASCADE, db_column='where')\n+\n+    class Meta:\n+        db_table = 'order'\n+\n+\n class Author(models.Model):\n     name = models.CharField(max_length=255, unique=True)\n \n \n class Book(models.Model):\n-    author = models.ForeignKey(Author, models.CASCADE, to_field='name')\n+    author = models.ForeignKey(Author, models.CASCADE, to_field='name')\n",
  "django__django-13809": "",
  "django__django-13810": "diff --git a/tests/middleware_exceptions/tests.py b/tests/middleware_exceptions/tests.py\nindex bb82f7d..72c447b 100644\n--- a/tests/middleware_exceptions/tests.py\n+++ b/tests/middleware_exceptions/tests.py\n@@ -1,3 +1,5 @@\n+\n+import asyncio\n from django.conf import settings\n from django.core.exceptions import MiddlewareNotUsed\n from django.http import HttpResponse\n@@ -158,6 +160,10 @@ class MiddlewareNotUsedTests(SimpleTestCase):\n     def test_log(self):\n         with self.assertLogs('django.request', 'DEBUG') as cm:\n             self.client.get('/middleware_exceptions/view/')\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.SyncAndAsyncMiddleware'\",\n+        )\n         self.assertEqual(\n             cm.records[0].getMessage(),\n             \"MiddlewareNotUsed: 'middleware_exceptions.tests.MyMiddleware'\"\n@@ -167,6 +173,10 @@ class MiddlewareNotUsedTests(SimpleTestCase):\n     def test_log_custom_message(self):\n         with self.assertLogs('django.request', 'DEBUG') as cm:\n             self.client.get('/middleware_exceptions/view/')\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.SyncAndAsyncMiddleware'\",\n+        )\n         self.assertEqual(\n             cm.records[0].getMessage(),\n             \"MiddlewareNotUsed('middleware_exceptions.tests.MyMiddlewareWithExceptionMessage'): spam eggs\"\n@@ -208,6 +218,10 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n         with self.assertLogs('django.request', 'DEBUG') as cm:\n             response = self.client.get('/middleware_exceptions/view/')\n         self.assertEqual(response.status_code, 402)\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.SyncAndAsyncMiddleware'\",\n+        )\n         self.assertEqual(\n             cm.records[0].getMessage(),\n             \"Synchronous middleware \"\n@@ -234,6 +248,10 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n         with self.assertLogs('django.request', 'DEBUG') as cm:\n             response = await self.async_client.get('/middleware_exceptions/view/')\n         self.assertEqual(response.status_code, 402)\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.SyncAndAsyncMiddleware'\",\n+        )\n         self.assertEqual(\n             cm.records[0].getMessage(),\n             \"Asynchronous middleware \"\n@@ -247,6 +265,10 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n         with self.assertLogs('django.request', 'WARNING') as cm:\n             response = await self.async_client.get('/middleware_exceptions/view/')\n         self.assertEqual(response.status_code, 402)\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.SyncAndAsyncMiddleware'\",\n+        )\n         self.assertEqual(\n             cm.records[0].getMessage(),\n             'Payment Required: /middleware_exceptions/view/',\n@@ -269,7 +291,40 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n     ])\n-    async def test_async_and_sync_middleware_async_call(self):\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.DecoratedPaymentMiddleware',\n+    ])\n+    async def test_middleware_chain_async_sync_middleware(self):\n+        response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 402)\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.PaymentMiddleware',\n+    ])\n+    async def test_middleware_chain_sync_async_middleware(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 402)\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.SyncAndAsyncMiddleware'\",\n+        )\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.middleware.SyncAndAsyncMiddleware adapted.\",\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.SyncAndAsyncMiddleware'\",\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.middleware.PaymentMiddleware adapted.\",\n+        )\n         response = await self.async_client.get('/middleware_exceptions/view/')\n         self.assertEqual(response.content, b'OK')\n         self.assertEqual(response.status_code, 200)\n",
  "django__django-13820": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex 594c01e..e5b94a4 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -1,3 +1,4 @@\n+\n import compileall\n import os\n \n@@ -11,8 +12,35 @@ from django.test import TestCase, modify_settings, override_settings\n \n from .test_base import MigrationTestBase\n \n+class CustomPath:\n+    \"\"\"A dummy class to simulate a non-list __path__ attribute.\"\"\"\n+\n+    def __iter__(self):\n+        return iter([])\n \n class RecorderTests(TestCase):\n+    \n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_with_custom_path'})\n+    def test_loading_package_with_custom_path_type(self):\n+        \"\"\"\n+        Test that MigrationLoader skips packages with non-list __path__ attribute.\n+        \"\"\"\n+        test_module = import_module('migrations.test_migrations_with_custom_path')\n+        original_path = test_module.__path__\n+        try:\n+            # Assign a custom path type\n+            test_module.__path__ = CustomPath()\n+            loader = MigrationLoader(connection)\n+            loader.load_disk()\n+            migrations = [\n+                name\n+                for app, name in loader.disk_migrations\n+                if app == 'migrations'\n+            ]\n+            self.assertEqual(migrations, [])\n+        finally:\n+            # Restore the original path\n+            test_module.__path__ = original_path\n     \"\"\"\n     Tests recording migrations as applied or not.\n     \"\"\"\n",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..123ff6e 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -10,6 +10,10 @@ from unittest import mock\n from django.core.exceptions import ImproperlyConfigured\n from django.db import NotSupportedError, connection, transaction\n from django.db.models import Aggregate, Avg, CharField, StdDev, Sum, Variance\n+import unittest\n+from unittest import mock\n+from django.db.utils import ImproperlyConfigured\n+from django.db.backends.sqlite3.base import Database as dbapi2\n from django.db.utils import ConnectionHandler\n from django.test import (\n     TestCase, TransactionTestCase, override_settings, skipIfDBFeature,\n@@ -36,7 +40,24 @@ class Tests(TestCase):\n                 self.assertRaisesMessage(ImproperlyConfigured, msg):\n             check_sqlite_version()\n \n-    def test_aggregation(self):\n+    def test_check_sqlite_version_3_8_11(self):\n+        msg = 'SQLite 3.9.0 or later is required (found 3.8.11.1).'\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 8, 11, 1)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.8.11.1'), \\\n+                self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            check_sqlite_version()\n+\n+    def test_check_sqlite_version_3_9_0(self):\n+        # This should pass without raising an exception\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 9, 0)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.9.0'):\n+            check_sqlite_version()\n+\n+    def test_check_sqlite_version_3_11_0(self):\n+        # This should also pass without raising an exception\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 11, 0)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.11.0'):\n+            check_sqlite_version()\n         \"\"\"Raise NotSupportedError when aggregating on date/time fields.\"\"\"\n         for aggregate in (Sum, Avg, Variance, StdDev):\n             with self.assertRaises(NotSupportedError):\n",
  "django__django-13837": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 10ffa22..8efac97 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -158,7 +158,13 @@ class TestIterModulesAndFiles(SimpleTestCase):\n \n class TestChildArguments(SimpleTestCase):\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver']\n+        )\n     def test_run_as_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n@@ -173,7 +179,13 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-Werror', __file__, 'runserver']\n         )\n \n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver']\n+        )\n     def test_exe_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             exe_path = Path(tmpdir) / 'django-admin.exe'\n",
  "django__django-13925": "diff --git a/tests/check_framework/test_model_checks.py b/tests/check_framework/test_model_checks.py\nindex 6424d89..92a5b64 100644\n--- a/tests/check_framework/test_model_checks.py\n+++ b/tests/check_framework/test_model_checks.py\n@@ -402,6 +402,68 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n \n         self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n \n+    def test_explicit_inherited_pk(self):\n+        class Parent(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class Child(Parent):\n+            pass\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n+    def test_explicit_inherited_parent_link(self):\n+        class Parent(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class Child(Parent):\n+            parent_ptr = models.OneToOneField(Parent, models.CASCADE, parent_link=True)\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n+    def test_auto_created_inherited_pk(self):\n+        class Parent(models.Model):\n+            pass\n+\n+        class Child(Parent):\n+            pass\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [\n+            Warning(\n+                \"Auto-created primary key used when not defining a primary \"\n+                \"key type, by default 'django.db.models.AutoField'.\",\n+                hint=(\n+                    \"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    \"CheckDefaultPKConfig.default_auto_field attribute to \"\n+                    \"point to a subclass of AutoField, e.g. \"\n+                    \"'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=Parent,\n+                id='models.W042',\n+            ),\n+        ])\n+\n+    def test_auto_created_inherited_parent_link(self):\n+        class Parent(models.Model):\n+            pass\n+\n+        class Child(Parent):\n+            parent_ptr = models.OneToOneField(Parent, models.CASCADE, parent_link=True)\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [\n+            Warning(\n+                \"Auto-created primary key used when not defining a primary \"\n+                \"key type, by default 'django.db.models.AutoField'.\",\n+                hint=(\n+                    \"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    \"CheckDefaultPKConfig.default_auto_field attribute to \"\n+                    \"point to a subclass of AutoField, e.g. \"\n+                    \"'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=Parent,\n+                id='models.W042',\n+            ),\n+        ])\n+\n     def test_explicit_pk(self):\n         class Model(models.Model):\n             id = models.BigAutoField(primary_key=True)\n@@ -414,4 +476,4 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             class Meta:\n                 app_label = 'check_framework.apps.CheckPKConfig'\n \n-        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n+        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n",
  "django__django-13933": "",
  "django__django-13964": "diff --git a/tests/many_to_one/tests.py b/tests/many_to_one/tests.py\nindex 8af1b8e..75f488b 100644\n--- a/tests/many_to_one/tests.py\n+++ b/tests/many_to_one/tests.py\n@@ -1,10 +1,11 @@\n+\n import datetime\n from copy import deepcopy\n \n from django.core.exceptions import FieldError, MultipleObjectsReturned\n from django.db import IntegrityError, models, transaction\n from django.test import TestCase\n-from django.utils.translation import gettext_lazy\n+from .models import ParentStringPrimaryKey, ChildStringPrimaryKeyParent\n \n from .models import (\n     Article, Category, Child, ChildNullableParent, City, Country, District,\n@@ -549,7 +550,26 @@ class ManyToOneTests(TestCase):\n         self.assertEqual(child.parent, parent)\n         self.assertEqual(child.parent_id, parent.name)\n \n-    def test_fk_to_bigautofield(self):\n+    def test_save_fk_after_initializing_unsaved_parent(self):\n+        # Test scenario where the parent is initialized without a primary key\n+        parent = ParentStringPrimaryKey()\n+        child = ChildStringPrimaryKeyParent(parent=parent)\n+        parent.name = 'mark'\n+        parent.save()\n+        child.save()\n+        child.refresh_from_db()\n+        self.assertEqual(child.parent, parent)\n+        self.assertEqual(child.parent_id, parent.name)\n+\n+    def test_save_fk_with_direct_assignment(self):\n+        # Test scenario where parent is directly assigned with primary key\n+        parent = ParentStringPrimaryKey(name='lucas')\n+        child = ChildStringPrimaryKeyParent(parent=parent)\n+        parent.save()\n+        child.save()\n+        child.refresh_from_db()\n+        self.assertEqual(child.parent, parent)\n+        self.assertEqual(child.parent_id, 'lucas')\n         ch = City.objects.create(name='Chicago')\n         District.objects.create(city=ch, name='Far South')\n         District.objects.create(city=ch, name='North')\n",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..be3bf02 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,7 +1,27 @@\n+\n+class CustomAutoFieldTests(TestCase):\n+    def test_auto_field_subclass_create(self):\n+        \"\"\"\n+        Test that the from_db_value hook is correctly called on creation\n+        \"\"\"\n+        obj = CustomAutoFieldModel.objects.create()\n+        self.assertIsInstance(obj.id, MyWrapper)\n+\n+    @skipUnlessDBFeature('can_return_rows_from_bulk_insert')\n+    def test_auto_field_subclass_bulk_create(self):\n+        \"\"\"\n+        Test that the from_db_value hook is correctly called on bulk creation\n+        \"\"\"\n+        obj = CustomAutoFieldModel()\n+        CustomAutoFieldModel.objects.bulk_create([obj])\n+        self.assertIsInstance(obj.id, MyWrapper)\n+\n from django.db import IntegrityError, transaction\n from django.test import TestCase, skipIfDBFeature\n \n-from .models import Bar, Business, Employee, Foo\n+from .models import Bar, Business, Employee, Foo, CustomAutoFieldModel\n+from .fields import MyWrapper\n+from django.test import skipUnlessDBFeature\n \n \n class BasicCustomPKTests(TestCase):\n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..1dfabb8 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -817,7 +817,23 @@ class BasicExpressionsTests(TestCase):\n         )\n \n \n-class IterableLookupInnerExpressionsTests(TestCase):\n+    def test_q_exists_combination(self):\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+\n+        # Test combinations of Q and Exists\n+        # This tests the commutativity of Q and Exists with & and |\n+        test_cases = [\n+            (Q(salary__gte=30) & Exists(is_poc), [self.max]),\n+            (Exists(is_poc) & Q(salary__gte=30), [self.max]),\n+            (Q(salary__lt=15) | Exists(is_poc), [self.example_inc.ceo, self.max]),\n+            (Exists(is_poc) | Q(salary__lt=15), [self.example_inc.ceo, self.max]),\n+        ]\n+\n+        for conditions, expected in test_cases:\n+            with self.subTest(conditions=conditions):\n+                self.assertCountEqual(Employee.objects.filter(conditions), expected)\n     @classmethod\n     def setUpTestData(cls):\n         ceo = Employee.objects.create(firstname='Just', lastname='Doit', salary=30)\n",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..2c391c9 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -205,6 +205,24 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n \n+    def test_no_duplicate_file_yields(self):\n+        # Setup the collectstatic command\n+        collectstatic_args = {\n+            'clear': False,\n+            'dry_run': False,\n+            'post_process': True,\n+            'use_default_ignore_patterns': True,\n+            'ignore_patterns': ['*.ignoreme'],\n+        }\n+\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(**collectstatic_args)\n+        stats = collectstatic_cmd.collect()\n+\n+        # Verify that no file is yielded more than once\n+        post_processed_files = stats['post_processed']\n+        self.assertCountEqual(post_processed_files, set(post_processed_files), \"Files were yielded multiple times.\")\n+\n     def test_css_import_case_insensitive(self):\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n         self.assertEqual(relpath, \"cached/styles_insensitive.3fa427592a53.css\")\n@@ -214,6 +232,24 @@ class TestHashedFiles:\n             self.assertIn(b\"other.d41d8cd98f00.css\", content)\n         self.assertPostCondition()\n \n+    def test_no_duplicate_file_yields(self):\n+        # Setup the collectstatic command\n+        collectstatic_args = {\n+            'clear': False,\n+            'dry_run': False,\n+            'post_process': True,\n+            'use_default_ignore_patterns': True,\n+            'ignore_patterns': ['*.ignoreme'],\n+        }\n+\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(**collectstatic_args)\n+        stats = collectstatic_cmd.collect()\n+\n+        # Verify that no file is yielded more than once\n+        post_processed_files = stats['post_processed']\n+        self.assertCountEqual(post_processed_files, set(post_processed_files), \"Files were yielded multiple times.\")\n+\n     @override_settings(\n         STATICFILES_DIRS=[os.path.join(TEST_ROOT, 'project', 'faulty')],\n         STATICFILES_FINDERS=['django.contrib.staticfiles.finders.FileSystemFinder'],\n",
  "django__django-14089": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 7fb3d83..f1ce2ce 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n@@ -6,6 +7,7 @@ import copy\n import pickle\n \n from django.test import SimpleTestCase\n+import collections.abc\n from django.utils.datastructures import (\n     CaseInsensitiveMapping, DictWrapper, ImmutableList, MultiValueDict,\n     MultiValueDictKeyError, OrderedSet,\n@@ -18,7 +20,25 @@ class OrderedSetTests(SimpleTestCase):\n         s = OrderedSet([1, 2, 3])\n         self.assertEqual(list(s.dict.keys()), [1, 2, 3])\n \n-    def test_remove(self):\n+    def test_reversed(self):\n+        s = reversed(OrderedSet([1, 2, 3]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [3, 2, 1])\n+\n+    def test_reversed_empty(self):\n+        s = reversed(OrderedSet([]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [])\n+\n+    def test_reversed_single_element(self):\n+        s = reversed(OrderedSet([42]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [42])\n+\n+    def test_reversed_duplicates(self):\n+        s = reversed(OrderedSet([1, 2, 2, 3]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [3, 2, 1])\n         s = OrderedSet()\n         self.assertEqual(len(s), 0)\n         s.add(1)\n",
  "django__django-14122": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 83089d9..74a5c60 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n from operator import attrgetter\n \n@@ -320,7 +321,18 @@ class OrderingTests(TestCase):\n             [a.pk for a in Author.objects.order_by('-pk')],\n         )\n \n-    def test_order_by_fk_attname(self):\n+    def test_group_by_excludes_ordering_fields(self):\n+        \"\"\"\n+        Ensure that Meta.ordering fields are not included in GROUP BY clause.\n+        \"\"\"\n+        Article.objects.exclude(headline='Article 4').update(author=self.author_1)\n+        Article.objects.filter(headline='Article 4').update(author=self.author_2)\n+        articles = Article.objects.values('author').annotate(count=Count('author'))\n+        expected_result = [\n+            {'author': self.author_1.pk, 'count': 3},\n+            {'author': self.author_2.pk, 'count': 1},\n+        ]\n+        self.assertCountEqual(articles, expected_result)\n         \"\"\"\n         ordering by a foreign key by its attribute name prevents the query\n         from inheriting its related model ordering option (#19195).\n@@ -483,4 +495,4 @@ class OrderingTests(TestCase):\n         )\n         ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n         articles = ChildArticle.objects.order_by('article_ptr')\n-        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n",
  "django__django-14140": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex 7e095fe..c4d799d 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,4 +1,6 @@\n-from django.db.models import F, Q\n+\n+from django.db.models import Exists, F, OuterRef, Q\n+from django.contrib.auth import get_user_model\n from django.test import SimpleTestCase\n \n \n@@ -93,7 +95,30 @@ class QTests(SimpleTestCase):\n         path, args, kwargs = q.deconstruct()\n         self.assertEqual(Q(*args, **kwargs), q)\n \n-    def test_reconstruct_negated(self):\n+    def test_deconstruct_exists(self):\n+        User = get_user_model()\n+        subquery = User.objects.filter(username=OuterRef('pk'))\n+        q = Q(Exists(subquery))\n+        path, args, kwargs = q.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Q')\n+        self.assertEqual(args, (Exists(subquery),))\n+        self.assertEqual(kwargs, {})\n+\n+    def test_deconstruct_exists_with_and(self):\n+        User = get_user_model()\n+        subquery = User.objects.filter(username=OuterRef('pk'))\n+        q = Q(Exists(subquery)) & Q(x=1)\n+        path, args, kwargs = q.deconstruct()\n+        self.assertEqual(args, ((Exists(subquery), ('x', 1))))\n+        self.assertEqual(kwargs, {'_connector': 'AND'})\n+\n+    def test_deconstruct_exists_with_or(self):\n+        User = get_user_model()\n+        subquery = User.objects.filter(username=OuterRef('pk'))\n+        q = Q(Exists(subquery)) | Q(x=1)\n+        path, args, kwargs = q.deconstruct()\n+        self.assertEqual(args, ((Exists(subquery), ('x', 1))))\n+        self.assertEqual(kwargs, {'_connector': 'OR'})\n         q = ~Q(price__gt=F('discounted_price'))\n         path, args, kwargs = q.deconstruct()\n         self.assertEqual(Q(*args, **kwargs), q)\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..42c0e2f 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,11 +1,35 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n \n+from django.db import models\n+from django.test import SimpleTestCase, override_settings\n+from django.test.utils import isolate_apps\n+\n+class MyBigAutoField(models.BigAutoField):\n+    pass\n+\n+class MySmallAutoField(models.SmallAutoField):\n+    pass\n \n @isolate_apps('model_options')\n class TestDefaultPK(SimpleTestCase):\n+\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.NonexistentAutoField')\n     def test_default_auto_field_setting_nonexistent(self):\n         msg = (\n",
  "django__django-14311": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex b7e6f92..19522c3 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -182,6 +182,15 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n         )\n \n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main_module.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_dotted_name(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..f10c03c 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -226,9 +226,18 @@ TEST_DATA = [\n     (URLValidator(), None, ValidationError),\n     (URLValidator(), 56, ValidationError),\n     (URLValidator(), 'no_scheme', ValidationError),\n-    # Trailing newlines not accepted\n+    # Newlines and tabs are not accepted.\n+    (URLValidator(), 'http://www.djangoproject.com/\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://www.django\\rproject.com/', ValidationError),\n+    (URLValidator(), 'http://[::\\rffff:192.9.5.5]', ValidationError),\n+    (URLValidator(), 'http://\\twww.djangoproject.com/', ValidationError),\n+    (URLValidator(), 'http://\\t[::ffff:192.9.5.5]', ValidationError),\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\t', ValidationError),\n+    (URLValidator(), 'http://www.django\\nproject.com/', ValidationError),\n+    (URLValidator(), 'http://www.django\\tproject.com/', ValidationError),\n     # Trailing junk does not take forever to reject\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br ', ValidationError),\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br z', ValidationError),\n",
  "django__django-14351": "diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\nindex 79963c3..a9e44e8 100644\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -1526,6 +1526,41 @@ class AggregationTests(TestCase):\n         DistinctAggregate('foo', distinct=True)\n \n \n+from django.test import TestCase\n+from django.db.models import Count, Q\n+from .models import Author, Book, PropertyGroup, ManagementAgent\n+\n+class SubqueryTestCase(TestCase):\n+    def test_subquery_with_in_operator(self):\n+        management_agent = ManagementAgent.objects.create(name=\"Agent 1\")\n+        property_groups = PropertyGroup.objects.create(name=\"Group 1\", management_agent=management_agent)\n+        \n+        queryset = Book.objects.annotate(Count(\"author__property_groups\"))\n+        \n+        # This should work if the issue is fixed\n+        result = queryset.filter(\n+            Q(author__property_groups__in=property_groups) | Q(author__property_groups__count=0)\n+        ).distinct()\n+        \n+        # Assuming we expect certain books in the result\n+        expected_books = {self.b1, self.b4}  # Replace with actual expected objects\n+        self.assertEqual(set(result), expected_books)\n+\n+    def test_subquery_with_id_in_operator(self):\n+        management_agent = ManagementAgent.objects.create(name=\"Agent 1\")\n+        property_groups = PropertyGroup.objects.create(name=\"Group 1\", management_agent=management_agent)\n+        \n+        queryset = Book.objects.annotate(Count(\"author__property_groups\"))\n+        \n+        # This query form was described to be working\n+        result = queryset.filter(\n+            Q(author__property_groups__id__in=property_groups.values_list(\"id\", flat=True)) | Q(author__property_groups__count=0)\n+        ).distinct()\n+        \n+        # Assuming we expect certain books in the result\n+        expected_books = {self.b1, self.b4}  # Replace with actual expected objects\n+        self.assertEqual(set(result), expected_books)\n+\n class JoinPromotionTests(TestCase):\n     def test_ticket_21150(self):\n         b = Bravo.objects.create()\n",
  "django__django-14373": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 2f7c68b..9ff3e29 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -179,7 +179,18 @@ class DateFormatTests(SimpleTestCase):\n                     expected_date,\n                 )\n \n-    def test_twelve_hour_format(self):\n+    def test_y_format_year_before_1000(self):\n+        # Test cases for the 'y' format specifier for years < 1000\n+        self.assertEqual(dateformat.format(datetime(1, 1, 1), 'y'), '01')\n+        self.assertEqual(dateformat.format(datetime(999, 1, 1), 'y'), '99')\n+\n+    def test_Y_format_year_before_1000(self):\n+        # Test cases for the 'Y' format specifier for years < 1000\n+        self.assertEqual(dateformat.format(datetime(1, 1, 1), 'Y'), '0001')\n+        self.assertEqual(dateformat.format(datetime(999, 1, 1), 'Y'), '0999')\n+        # Additional test cases around the millennium boundary\n+        self.assertEqual(dateformat.format(datetime(1000, 1, 1), 'Y'), '1000')\n+        self.assertEqual(dateformat.format(datetime(1001, 1, 1), 'Y'), '1001')\n         tests = [\n             (0, '12'),\n             (1, '1'),\n",
  "django__django-14376": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\nindex 643c2b6..a284e94 100644\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -89,6 +89,40 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_options_prefer_non_deprecated_keys(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        \n+        # Test both deprecated and non-deprecated keys present; prefer non-deprecated\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'db': 'deprecatedoptiondbname',\n+                    'user': 'optionuser',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n     def test_options_charset(self):\n         expected_args = [\n             'mysql',\n",
  "django__django-14434": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex 39c82bf..01395e8 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -2193,7 +2193,18 @@ class SchemaTests(TransactionTestCase):\n             if details['columns'] == ['name', 'birthday'] and details['unique'] and name != custom_constraint_name\n         ]\n         self.assertEqual(len(other_constraints), 1)\n-        # Drop the unique constraint\n+        # Test case for incorrect data type passed\n+        constraint = UniqueConstraint(fields=[Author], name='wrong_type_uq')\n+        with self.assertRaises(TypeError):\n+            with connection.schema_editor() as editor:\n+                editor.add_constraint(Author, constraint)\n+\n+        # Test case for correct data type after issue fix\n+        constraint = UniqueConstraint(fields=['name'], name='name_uq_fixed')\n+        with connection.schema_editor() as editor:\n+            editor.add_constraint(Author, constraint)\n+            sql = constraint.create_sql(Author, editor)\n+        self.assertIs(sql.references_column(table, 'name'), True)\n         with connection.schema_editor() as editor:\n             AuthorWithUniqueNameAndBirthday._meta.constraints = []\n             editor.remove_constraint(AuthorWithUniqueNameAndBirthday, constraint)\n",
  "django__django-14493": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 17aecdd..2fe4ce3 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -454,6 +454,27 @@ class TestCollectionManifestStorage(TestHashedFiles, CollectionTestCase):\n         )\n \n \n+import unittest\n+from django.core.management import call_command\n+from io import StringIO\n+from django.test.utils import override_settings\n+from django.contrib.staticfiles.storage import ManifestStaticFilesStorage\n+\n+class NoPostProcessReplacedPathStorage(ManifestStaticFilesStorage):\n+    max_post_process_passes = 0\n+\n+@override_settings(STATICFILES_STORAGE='staticfiles_tests.test_storage.NoPostProcessReplacedPathStorage')\n+class TestCollectionNoPostProcessReplacedPaths(CollectionTestCase):\n+    run_collectstatic_in_setUp = False\n+\n+    def test_collectstatic_no_post_process_replaced_paths(self):\n+        stdout = StringIO()\n+        try:\n+            call_command('collectstatic', verbosity=1, stdout=stdout)\n+            self.assertIn('post-processed', stdout.getvalue())\n+        except UnboundLocalError as e:\n+            self.fail(f\"collectstatic raised UnboundLocalError: {e}\")\n+\n @override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.NoneHashStorage')\n class TestCollectionNoneHashStorage(CollectionTestCase):\n     hashed_file_path = hashed_file_path\n",
  "django__django-14500": "",
  "django__django-14539": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 23a1e0a..5af2011 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -255,6 +255,31 @@ class TestUtilsHtml(SimpleTestCase):\n                 'Search for <a href=\"http://google.com/?q=\">google.com/?q=</a>!'\n             ),\n             ('foo@example.com', '<a href=\"mailto:foo@example.com\">foo@example.com</a>'),\n+            (\n+                'Search for google.com/?q=1&lt! and see.',\n+                'Search for <a href=\"http://google.com/?q=1%3C\">google.com/?q=1&lt</a>! and see.'\n+            ),\n+            # Additional test cases\n+            (\n+                'Visit https://example.com/path.html?name=value&lt; and that\\'s it.',\n+                'Visit <a href=\"https://example.com/path.html?name=value%3C\">https://example.com/path.html?name=value&lt</a> and that\\'s it.'\n+            ),\n+            (\n+                'Check ftp://ftp.example.com/file.txt&gt;.',\n+                'Check <a href=\"ftp://ftp.example.com/file.txt%3E\">ftp://ftp.example.com/file.txt&gt</a>.'\n+            ),\n+            (\n+                'Look at www.example.org/path?param=value!',\n+                'Look at <a href=\"http://www.example.org/path?param=value\">www.example.org/path?param=value</a>!'\n+            ),\n+            (\n+                'Email us at support@example.com!',\n+                '<a href=\"mailto:support@example.com\">support@example.com</a>!'\n+            ),\n+            (\n+                'See more at example.com/path.</a>',\n+                'See more at <a href=\"http://example.com/path\">example.com/path</a>.'\n+            ),\n         )\n         for value, output in tests:\n             with self.subTest(value=value):\n",
  "django__django-14559": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex b579834..4fc7644 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -115,7 +115,28 @@ class BulkUpdateTests(TestCase):\n \n     pk_fields_error = 'bulk_update() cannot be used with primary key fields.'\n \n-    def test_update_primary_key(self):\n+    def test_bulk_update_empty_list(self):\n+        rows_updated = Note.objects.bulk_update([], ['note'])\n+        self.assertEqual(rows_updated, 0)\n+\n+    def test_bulk_update(self):\n+        Note.objects.bulk_create([\n+            Note(note=str(i), misc=str(i))\n+            for i in range(0, 2000)\n+        ])\n+        notes = list(Note.objects.all())\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 2000)\n+\n+    def test_bulk_update_with_duplicates(self):\n+        note = Note.objects.create(note='test-note', misc='test')\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'])\n+        self.assertEqual(rows_updated, 1)\n+\n+    def test_bulk_update_with_duplicates_different_batches(self):\n+        note = Note.objects.create(note='test-note', misc='test')\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'], batch_size=1)\n+        self.assertEqual(rows_updated, 2)\n         with self.assertRaisesMessage(ValueError, self.pk_fields_error):\n             Note.objects.bulk_update([], ['id'])\n \n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..408f199 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -984,8 +984,28 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n \n-    def test_formset_iteration(self):\n-        \"\"\"Formset instances are iterable.\"\"\"\n+    def test_formset_non_form_errors_css_class(self):\n+        \"\"\"\n+        Test that non-form errors have the 'nonform' CSS class applied.\n+        \"\"\"\n+        data = {\n+            'choices-TOTAL_FORMS': '3',\n+            'choices-INITIAL_FORMS': '0',\n+            'choices-MIN_NUM_FORMS': '0',\n+            'choices-MAX_NUM_FORMS': '0',\n+            'choices-0-choice': 'Calexico',\n+            'choices-0-votes': '100',\n+            'choices-1-choice': '',\n+            'choices-1-votes': '',\n+            'choices-2-choice': '',\n+            'choices-2-votes': '',\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=3, validate_min=True, min_num=4)\n+        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        non_form_errors = formset.non_form_errors()\n+        self.assertIsInstance(non_form_errors, ErrorList)\n+        self.assertIn('<ul class=\"errorlist nonform\">', str(non_form_errors))\n         ChoiceFormset = formset_factory(Choice, extra=3)\n         formset = ChoiceFormset()\n         # An iterated formset yields formset.forms.\n",
  "django__django-14631": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex a48e4b6..06a96c0 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -2129,7 +2129,45 @@ Password: <input type=\"password\" name=\"password\" required></li>\n         form = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n         self.assertEqual(form.changed_data, [])\n \n-    def test_help_text(self):\n+    def test_datetime_clean_initial_callable_disabled_bound_field(self):\n+        \"\"\"\n+        Ensure cleaned value matches the bound field's initial value\n+        for disabled DateTimeField with callable initial.\n+        \"\"\"\n+        class DateTimeForm(forms.Form):\n+            dt = forms.DateTimeField(initial=lambda: datetime.datetime(2006, 10, 25, 14, 30, 45, 123456), disabled=True)\n+\n+        form = DateTimeForm({})\n+        cleaned = form.cleaned_data['dt']\n+        bf = form['dt']\n+        self.assertEqual(cleaned, bf.initial)\n+        \n+    def test_bound_field_did_change_method(self):\n+        \"\"\"\n+        Test the hypothetical did_change() method on the BoundField object.\n+        \"\"\"\n+        class SimpleForm(forms.Form):\n+            name = forms.CharField(initial='initial value')\n+\n+        form = SimpleForm({'name': 'changed value'})\n+        bf = form['name']\n+        # Assume `did_change` method is implemented\n+        self.assertTrue(bf.did_change())  # Should be True since value changed\n+\n+        form = SimpleForm({'name': 'initial value'})\n+        bf = form['name']\n+        self.assertFalse(bf.did_change())  # Should be False since value did not change\n+\n+    def test_bound_field_consistency_in_changed_data(self):\n+        \"\"\"\n+        Test consistency of changed_data using BoundField.\n+        \"\"\"\n+        class TestForm(forms.Form):\n+            field1 = forms.CharField(initial='initial1')\n+            field2 = forms.CharField(initial='initial2')\n+\n+        form = TestForm({'field1': 'initial1', 'field2': 'changed'})\n+        self.assertEqual(form.changed_data, ['field2'])  # Only field2 should be marked as changed\n         # You can specify descriptive text for a field by using the 'help_text' argument)\n         class UserRegistration(Form):\n             username = CharField(max_length=10, help_text='e.g., user@example.com')\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..7cf3230 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -3,6 +3,9 @@ from operator import attrgetter\n \n from django.db import IntegrityError\n from django.test import TestCase\n+from django.db import models\n+from django.core.exceptions import ValidationError\n+from django.core.checks import Error\n \n from .models import (\n     CustomMembership, Employee, Event, Friendship, Group, Ingredient,\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..69c5897 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,3 +1,35 @@\n+\n+# New test to verify the serialize_result extension point\n+def test_serialize_result_extension_point(self):\n+    class CustomAutocompleteJsonView(AutocompleteJsonView):\n+        def serialize_result(self, obj, to_field_name):\n+            result = super().serialize_result(obj, to_field_name)\n+            result['posted'] = str(obj.posted)\n+            return result\n+\n+    # Create test data\n+    Question.objects.create(question='Question 1', posted=datetime.date(2021, 8, 9))\n+    Question.objects.create(question='Question 2', posted=datetime.date(2021, 8, 7))\n+    \n+    # Make a request\n+    request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+    request.user = self.superuser\n+    response = CustomAutocompleteJsonView.as_view(**self.as_view_args)(request)\n+    \n+    # Check response status\n+    self.assertEqual(response.status_code, 200)\n+    \n+    # Deserialize response content\n+    data = json.loads(response.content.decode('utf-8'))\n+    \n+    # Verify that the serialized results include the custom 'posted' field\n+    expected_results = [\n+        {'id': str(q.pk), 'text': q.question, 'posted': str(q.posted)}\n+        for q in Question.objects.order_by('-posted')\n+    ]\n+    self.assertEqual(data['results'], expected_results)\n+    self.assertEqual(data['pagination']['more'], False)\n+\n import json\n from contextlib import contextmanager\n \n@@ -9,7 +41,10 @@ from django.contrib.contenttypes.models import ContentType\n from django.core.exceptions import PermissionDenied\n from django.http import Http404\n from django.test import RequestFactory, override_settings\n+import datetime\n from django.urls import reverse, reverse_lazy\n+from django.contrib.admin.views.autocomplete import AutocompleteJsonView\n+from django.http import JsonResponse\n \n from .admin import AnswerAdmin, QuestionAdmin\n from .models import (\n",
  "django__django-14765": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 11009e5..c5c1c9f 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -924,6 +924,26 @@ class StateTests(SimpleTestCase):\n             1,\n         )\n \n+    def test_real_apps_as_none(self):\n+        \"\"\"\n+        Test that ProjectState accepts None as a valid value for real_apps.\n+        \"\"\"\n+        try:\n+            project_state = ProjectState(real_apps=None)\n+            self.assertEqual(project_state.real_apps, set())\n+        except Exception as e:\n+            self.fail(f\"ProjectState raised an exception with real_apps=None: {e}\")\n+\n+    def test_real_apps_as_set(self):\n+        \"\"\"\n+        Test that ProjectState correctly accepts a set for real_apps.\n+        \"\"\"\n+        try:\n+            project_state = ProjectState(real_apps={'contenttypes', 'auth'})\n+            self.assertEqual(project_state.real_apps, {'contenttypes', 'auth'})\n+        except Exception as e:\n+            self.fail(f\"ProjectState raised an exception with real_apps as set: {e}\")\n+\n     def test_ignore_order_wrt(self):\n         \"\"\"\n         Makes sure ProjectState doesn't include OrderWrt fields when\n",
  "django__django-14771": "",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..d130b65 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -271,7 +271,28 @@ class MethodDecoratorTests(SimpleTestCase):\n                 self.assertEqual(Test.method.__doc__, 'A method')\n                 self.assertEqual(Test.method.__name__, 'method')\n \n-    def test_new_attribute(self):\n+    def test_wrapper_assignments_additional(self):\n+        \"\"\"Additional tests for @method_decorator preserving wrapper assignments.\"\"\"\n+        def decorator(func):\n+            @functools.wraps(func)\n+            def inner(*args, **kwargs):\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class TestAdditionalAttributes:\n+            @method_decorator(decorator)\n+            def method(self):\n+                \"\"\"Method docstring\"\"\"\n+                self.custom_attr = \"Custom Attribute\"\n+                return \"Hello\"\n+\n+        instance = TestAdditionalAttributes()\n+        result = instance.method()\n+\n+        self.assertEqual(result, \"Hello\")\n+        self.assertEqual(instance.method.__name__, \"method\")\n+        self.assertEqual(instance.method.__doc__, \"Method docstring\")\n+        self.assertEqual(getattr(instance, 'custom_attr', None), \"Custom Attribute\")\n         \"\"\"A decorator that sets a new attribute on the method.\"\"\"\n         def decorate(func):\n             func.x = 1\n",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..5335d1d 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5131,8 +5131,32 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         )\n         # Related ForeignKey object not registered in admin.\n         self.assertContains(response, '<div class=\"readonly\">Chapter 1</div>', html=True)\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test that ForeignKey readonly fields render correct links in a custom admin site.\n+        \"\"\"\n+        # Set up the custom admin site similar to how the default site is set up.\n+        custom_site = site2  # Replace with the actual custom admin site instance variable if different\n+        chapter = Chapter.objects.create(\n+            title='Chapter 1',\n+            content='content',\n+            book=Book.objects.create(name='Book 1'),\n+        )\n+        language = Language.objects.create(iso='_40', name='Test')\n \n-    def test_readonly_manytomany_backwards_ref(self):\n+        # Construct the expected URL using the custom admin site name\n+        custom_url_name = \"%s:admin_views_language_change\" % custom_site.name\n+        language_url = reverse(custom_url_name, args=(quote(language.pk),))\n+\n+        # Make a request to the change form for the Chapter model in the custom admin site\n+        response = self.client.get(reverse('%s:admin_views_chapter_change' % custom_site.name, args=(chapter.pk,)))\n+\n+        # Check that the response contains a link with the correct custom admin path\n+        self.assertContains(\n+            response,\n+            '<div class=\"readonly\"><a href=\"%s\">_40</a></div>' % language_url,\n+            html=True,\n+        )\n         \"\"\"\n         Regression test for #16433 - backwards references for related objects\n         broke if the related field is read-only due to the help_text attribute\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..0ec2136 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,10 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n+import json\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -279,7 +281,47 @@ class ModelChoiceFieldTests(TestCase):\n         field = CustomModelChoiceField(Category.objects.all())\n         self.assertIsInstance(field.choices, CustomModelChoiceIterator)\n \n-    def test_choice_iterator_passes_model_to_widget(self):\n+    def test_choice_value_hash(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        # Test that the hash of the same value with instance and None are equal\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(self.c1.pk, None)))\n+        # Test that different values have different hashes\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+\n+    def test_model_choice_iterator_value_in_dict(self):\n+        \"\"\"Test using ModelChoiceIteratorValue as a dictionary key.\"\"\"\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        test_dict = {value_1: \"value1\", value_2: \"value2\"}\n+        \n+        # Ensure we can retrieve values using ModelChoiceIteratorValue instances\n+        self.assertEqual(test_dict[value_1], \"value1\")\n+        self.assertEqual(test_dict[value_2], \"value2\")\n+\n+    def test_model_choice_iterator_value_in_custom_option(self):\n+        \"\"\"Test using ModelChoiceIteratorValue with custom widget options.\"\"\"\n+        class CustomSelect(forms.Select):\n+            def create_option(self, name, value, label, selected, index, subindex=None, attrs=None):\n+                context = super().create_option(name, value, label, selected, index, subindex, attrs)\n+                if not value:\n+                    return context\n+                show_fields = {self.c1.pk: ['first_name', 'last_name']}\n+                if value in show_fields:\n+                    context['attrs']['data-fields'] = json.dumps(show_fields[value])\n+                return context\n+        \n+        field = forms.ModelChoiceField(Category.objects.all(), widget=CustomSelect)\n+        rendered = field.widget.render('name', [])\n+        expected_html = (\n+            '<select name=\"name\">'\n+            '<option value=\"%d\" data-fields=\"[&quot;first_name&quot;,&quot;last_name&quot;]\">Entertainment</option>'\n+            '<option value=\"%d\">A test</option>'\n+            '<option value=\"%d\">Third</option>'\n+            '</select>'\n+        ) % (self.c1.pk, self.c2.pk, self.c3.pk)\n+        \n+        self.assertHTMLEqual(rendered, expected_html)\n         class CustomCheckboxSelectMultiple(CheckboxSelectMultiple):\n             def create_option(self, name, value, label, selected, index, subindex=None, attrs=None):\n                 option = super().create_option(name, value, label, selected, index, subindex, attrs)\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..8002640 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -787,6 +787,52 @@ class OperationTests(OperationTestBase):\n         Pony = project_state.apps.get_model(app_label, \"Pony2\")\n         Rider = project_state.apps.get_model(app_label, \"Rider\")\n         pony = Pony.objects.create()\n+        \n+    def test_rename_model_with_db_table_noop_foreign_key(self):\n+        app_label = 'test_rmwdbtn_fk'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Horse', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ], options={'db_table': 'horse'}),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n+    def test_rename_model_with_db_table_noop_m2m(self):\n+        app_label = 'test_rmwdbtn_m2m'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('riders', models.ManyToManyField('%s.Rider' % app_label)),\n+            ], options={'db_table': 'pony'}),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n         rider = Rider.objects.create()\n         pony.riders.add(rider)\n         self.assertEqual(Pony.objects.count(), 2)\n@@ -807,6 +853,52 @@ class OperationTests(OperationTestBase):\n         Pony = project_state.apps.get_model(app_label, \"Pony\")\n         Rider = project_state.apps.get_model(app_label, \"Rider\")\n         pony = Pony.objects.create()\n+        \n+    def test_rename_model_with_db_table_noop_foreign_key(self):\n+        app_label = 'test_rmwdbtn_fk'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Horse', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ], options={'db_table': 'horse'}),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n+    def test_rename_model_with_db_table_noop_m2m(self):\n+        app_label = 'test_rmwdbtn_m2m'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('riders', models.ManyToManyField('%s.Rider' % app_label)),\n+            ], options={'db_table': 'pony'}),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n         rider = Rider.objects.create()\n         pony.riders.add(rider)\n \n",
  "django__django-15022": "",
  "django__django-15037": "",
  "django__django-15103": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex b862331..72d183c 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -173,7 +173,17 @@ class TestUtilsHtml(SimpleTestCase):\n             with self.subTest(arg=arg):\n                 self.assertEqual(json_script(arg, 'test_id'), expected)\n \n-    def test_smart_urlquote(self):\n+    def test_json_script_without_id(self):\n+        # Test json_script without providing an element_id\n+        self.assertHTMLEqual(\n+            json_script({'key': 'value'}),\n+            '<script type=\"application/json\">{\"key\": \"value\"}</script>'\n+        )\n+        # Ensure that special characters are quoted correctly in JSON without element_id\n+        self.assertHTMLEqual(\n+            json_script({'a': '<script>test&ing</script>'}),\n+            '<script type=\"application/json\">{\"a\": \"\\\\u003Cscript\\\\u003Etest\\\\u0026ing\\\\u003C/script\\\\u003E\"}</script>'\n+        )\n         items = (\n             ('http://\u00f6\u00e4\u00fc.com/', 'http://xn--4ca9at.com/'),\n             ('http://\u00f6\u00e4\u00fc.com/\u00f6\u00e4\u00fc/', 'http://xn--4ca9at.com/%C3%B6%C3%A4%C3%BC/'),\n@@ -276,4 +286,4 @@ class TestUtilsHtml(SimpleTestCase):\n         )\n         for value in tests:\n             with self.subTest(value=value):\n-                self.assertEqual(urlize(value), value)\n+                self.assertEqual(urlize(value), value)\n",
  "django__django-15104": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 04452fa..3d209ed 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2834,8 +2834,74 @@ class AutodetectorTests(TestCase):\n                     expected_number,\n                 )\n \n-\n-class MigrationSuggestNameTests(SimpleTestCase):\n+class MigrationAutodetectorCustomFKTests(SimpleTestCase):\n+    def test_add_custom_fk_with_hardcoded_to(self):\n+        class HardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.Author'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']\n+                return name, path, args, kwargs\n+        \n+        author_empty = ModelState('testapp', 'Author', [])\n+        book_hardcoded_fk_to = ModelState('testapp', 'Book', [\n+            ('author', HardcodedForeignKey(on_delete=models.CASCADE))\n+        ])\n+        \n+        changes = MigrationAutodetector(ProjectState(), ProjectState())._detect_changes(\n+            convert_apps=None, graph=None\n+        )\n+        \n+        self.assertEqual(len(changes['testapp']), 0)\n+\n+    def test_multiple_custom_fk_with_hardcoded_to(self):\n+        class HardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.Author'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']\n+                return name, path, args, kwargs\n+        \n+        author_empty = ModelState('testapp', 'Author', [])\n+        book_hardcoded_fk_to_1 = ModelState('testapp', 'Book1', [\n+            ('author', HardcodedForeignKey(on_delete=models.CASCADE))\n+        ])\n+        book_hardcoded_fk_to_2 = ModelState('testapp', 'Book2', [\n+            ('author', HardcodedForeignKey(on_delete=models.CASCADE))\n+        ])\n+        \n+        changes = MigrationAutodetector(ProjectState(), ProjectState())._detect_changes(\n+            convert_apps=None, graph=None\n+        )\n+        \n+        self.assertEqual(len(changes['testapp']), 0)\n+\n+    def test_custom_fk_with_deconstruct_including_to(self):\n+        class HardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.Author'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                return name, path, args, kwargs\n+        \n+        author_empty = ModelState('testapp', 'Author', [])\n+        book_including_to = ModelState('testapp', 'Book', [\n+            ('author', HardcodedForeignKey(on_delete=models.CASCADE))\n+        ])\n+        \n+        changes = MigrationAutodetector(ProjectState(), ProjectState())._detect_changes(\n+            convert_apps=None, graph=None\n+        )\n+        \n+        self.assertEqual(len(changes['testapp']), 1)\n     def test_no_operations(self):\n         class Migration(migrations.Migration):\n             operations = []\n",
  "django__django-15127": "diff --git a/tests/messages_tests/base.py b/tests/messages_tests/base.py\nindex 85a7769..1d6f345 100644\n--- a/tests/messages_tests/base.py\n+++ b/tests/messages_tests/base.py\n@@ -1,3 +1,4 @@\n+\n from django.contrib.messages import constants, get_level, set_level, utils\n from django.contrib.messages.api import MessageFailure\n from django.contrib.messages.constants import DEFAULT_LEVELS\n@@ -368,6 +369,22 @@ class BaseTests:\n         tags = [msg.level_tag for msg in storage]\n         self.assertEqual(tags, ['info', '', 'debug', 'warning', 'error', 'success'])\n \n+    @override_settings(MESSAGE_TAGS={\n+        constants.INFO: 'info',\n+        constants.DEBUG: 'debug',\n+        constants.WARNING: 'warn',\n+        constants.ERROR: 'error',\n+        constants.SUCCESS: 'success',\n+        15: 'custom_level',\n+    })\n+    def test_updated_level_tags(self):\n+        self.assertEqual(base.LEVEL_TAGS[constants.INFO], 'info')\n+        self.assertEqual(base.LEVEL_TAGS[constants.DEBUG], 'debug')\n+        self.assertEqual(base.LEVEL_TAGS[constants.WARNING], 'warn')\n+        self.assertEqual(base.LEVEL_TAGS[constants.ERROR], 'error')\n+        self.assertEqual(base.LEVEL_TAGS[constants.SUCCESS], 'success')\n+        self.assertEqual(base.LEVEL_TAGS[15], 'custom_level')\n+\n     @override_settings_tags(MESSAGE_TAGS={\n         constants.INFO: 'info',\n         constants.DEBUG: '',\n@@ -375,6 +392,21 @@ class BaseTests:\n         constants.ERROR: 'bad',\n         29: 'custom',\n     })\n+\n+    def test_message_with_updated_tags(self):\n+        message_info = Message(constants.INFO, 'Info message')\n+        message_debug = Message(constants.DEBUG, 'Debug message')\n+        message_custom = Message(15, 'Custom level message')\n+\n+        with override_settings_tags(MESSAGE_TAGS={\n+            constants.INFO: 'info',\n+            constants.DEBUG: 'debug',\n+            15: 'custom_level',\n+        }):\n+            # Check that the level_tag attribute correctly reflects the overridden settings\n+            self.assertEqual(message_info.level_tag, 'info')\n+            self.assertEqual(message_debug.level_tag, 'debug')\n+            self.assertEqual(message_custom.level_tag, 'custom_level')\n     def test_custom_tags(self):\n         storage = self.get_storage()\n         storage.level = 0\n",
  "django__django-15128": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex adde8a6..268f2d9 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -30,7 +30,7 @@ from .models import (\n     SharedConnection, SimpleCategory, SingleObject, SpecialCategory, Staff,\n     StaffUser, Student, Tag, Task, Teacher, Ticket21203Child,\n     Ticket21203Parent, Ticket23605A, Ticket23605B, Ticket23605C, TvChef, Valid,\n-    X,\n+    X, BaseUser, Task, Note, Annotation, Tag\n )\n \n \n@@ -2095,13 +2095,61 @@ class QuerySetBitwiseOperationTests(TestCase):\n         cls.room_3 = Classroom.objects.create(school=cls.school, has_blackboard=True, name='Room 3')\n         cls.room_4 = Classroom.objects.create(school=cls.school, has_blackboard=False, name='Room 4')\n \n-    @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Setting up data for the test\n+        tag = Tag.objects.create(name='tag')\n+        cls.annotation_1 = Annotation.objects.create(tag=tag)\n+        annotation_2 = Annotation.objects.create(tag=tag)\n+        note = cls.annotation_1.notes.create(tag=tag)\n+        cls.base_user_1 = BaseUser.objects.create(annotation=cls.annotation_1)\n+        cls.base_user_2 = BaseUser.objects.create(annotation=annotation_2)\n+        cls.task = Task.objects.create(\n+            owner=cls.base_user_2, creator=cls.base_user_2, note=note,\n+        )\n+\n+    def test_conflicting_aliases_during_combine(self):\n+        # Performing the operation to test for alias conflicts during combine\n+        qs1 = self.annotation_1.baseuser_set.all()\n+        qs2 = BaseUser.objects.filter(\n+            Q(owner__note__in=self.annotation_1.notes.all()) |\n+            Q(creator__note__in=self.annotation_1.notes.all())\n+        )\n+        # Asserting the sequences and counts\n+        self.assertSequenceEqual(qs1, [self.base_user_1])\n+        self.assertSequenceEqual(qs2, [self.base_user_2])\n+        self.assertCountEqual(qs2 | qs1, qs1 | qs2)\n+        self.assertCountEqual(qs2 | qs1, [self.base_user_1, self.base_user_2])\n     def test_or_with_rhs_slice(self):\n         qs1 = Classroom.objects.filter(has_blackboard=True)\n         qs2 = Classroom.objects.filter(has_blackboard=False)[:1]\n         self.assertCountEqual(qs1 | qs2, [self.room_1, self.room_2, self.room_3])\n \n-    @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Setting up data for the test\n+        tag = Tag.objects.create(name='tag')\n+        cls.annotation_1 = Annotation.objects.create(tag=tag)\n+        annotation_2 = Annotation.objects.create(tag=tag)\n+        note = cls.annotation_1.notes.create(tag=tag)\n+        cls.base_user_1 = BaseUser.objects.create(annotation=cls.annotation_1)\n+        cls.base_user_2 = BaseUser.objects.create(annotation=annotation_2)\n+        cls.task = Task.objects.create(\n+            owner=cls.base_user_2, creator=cls.base_user_2, note=note,\n+        )\n+\n+    def test_conflicting_aliases_during_combine(self):\n+        # Performing the operation to test for alias conflicts during combine\n+        qs1 = self.annotation_1.baseuser_set.all()\n+        qs2 = BaseUser.objects.filter(\n+            Q(owner__note__in=self.annotation_1.notes.all()) |\n+            Q(creator__note__in=self.annotation_1.notes.all())\n+        )\n+        # Asserting the sequences and counts\n+        self.assertSequenceEqual(qs1, [self.base_user_1])\n+        self.assertSequenceEqual(qs2, [self.base_user_2])\n+        self.assertCountEqual(qs2 | qs1, qs1 | qs2)\n+        self.assertCountEqual(qs2 | qs1, [self.base_user_1, self.base_user_2])\n     def test_or_with_lhs_slice(self):\n         qs1 = Classroom.objects.filter(has_blackboard=True)[:1]\n         qs2 = Classroom.objects.filter(has_blackboard=False)\n",
  "django__django-15161": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex ca4c20d..64da670 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -607,7 +607,35 @@ class WriterTests(SimpleTestCase):\n         with self.assertRaisesMessage(ValueError, \"Could not find object EmailValidator2 in django.core.validators.\"):\n             MigrationWriter.serialize(validator)\n \n-    def test_serialize_empty_nonempty_tuple(self):\n+    def test_serialize_f_expression(self):\n+        \"\"\"\n+        Test that F() expression is serialized with the correct simplified path.\n+        \"\"\"\n+        index = models.Index(\n+            models.Func('rating', function='ABS'),\n+            models.Case(\n+                models.When(name='special', then=models.Value('X')),\n+                default=models.Value('other'),\n+            ),\n+            models.ExpressionWrapper(\n+                models.F('pages'),\n+                output_field=models.IntegerField(),\n+            ),\n+            models.OrderBy(models.F('name').desc()),\n+            name='complex_func_index',\n+        )\n+        string, imports = MigrationWriter.serialize(index)\n+        self.assertEqual(\n+            string,\n+            \"models.Index(models.Func('rating', function='ABS'), \"\n+            \"models.Case(models.When(name='special', then=models.Value('X')), \"\n+            \"default=models.Value('other')), \"\n+            \"models.ExpressionWrapper(\"\n+            \"models.F('pages'), output_field=models.IntegerField()), \"\n+            \"models.OrderBy(models.F('name'), descending=True), \"\n+            \"name='complex_func_index')\"\n+        )\n+        self.assertEqual(imports, {'from django.db import models'})\n         \"\"\"\n         Ticket #22679: makemigrations generates invalid code for (an empty\n         tuple) default_permissions = ()\n",
  "django__django-15268": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a6c0858..c1fdaaa 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1661,7 +1661,31 @@ class AutodetectorTests(TestCase):\n             changes, 'otherapp', 0, 4, model_name='book', name='newfield',\n         )\n \n-    def test_alter_field_and_foo_together(self):\n+    def test_optimized_foo_together_operations(self):\n+        \"\"\"\n+        Test that multiple AlterFooTogether operations are optimized into one.\n+        \"\"\"\n+        initial_state = [self.author_empty, self.book_foo_together]\n+        final_state = [self.author_empty, self.book_foo_together_2]\n+\n+        changes = self.get_changes(initial_state, final_state)\n+\n+        # Check that only one migration is created\n+        self.assertNumberMigrations(changes, \"otherapp\", 1)\n+\n+        # Check that the operations are optimized to two instead of four\n+        self.assertOperationTypes(changes, 'otherapp', 0, [\n+            'AlterUniqueTogether',\n+            'AlterIndexTogether',\n+        ])\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 0, name='book',\n+            unique_together={('title', 'author')},\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 1, name='book',\n+            index_together={('title', 'author')},\n+        )\n         \"\"\"Fields are altered after deleting some index/unique_together.\"\"\"\n         initial_author = ModelState('testapp', 'Author', [\n             ('id', models.AutoField(primary_key=True)),\n",
  "django__django-15277": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 11f86ed..06e0741 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1847,6 +1847,41 @@ class ValueTests(TestCase):\n                 expr = Value(value)\n                 self.assertIsInstance(expr.output_field, output_field_type)\n \n+    def test_output_field_does_not_create_broken_validators(self):\n+        \"\"\"\n+        The output field for a given Value doesn't get cleaned & validated,\n+        but it is important that no broken validators are created.\n+        \"\"\"\n+        import datetime\n+        from decimal import Decimal\n+        import uuid\n+        from django.db.models import Value\n+        \n+        value_types = [\n+            'test',  # str\n+            True,  # bool\n+            42,  # int\n+            3.14,  # float\n+            datetime.date(2019, 5, 15),  # date\n+            datetime.datetime(2019, 5, 15),  # datetime\n+            datetime.time(3, 16),  # time\n+            datetime.timedelta(1),  # timedelta\n+            Decimal('3.14'),  # Decimal\n+            b'',  # bytes\n+            uuid.uuid4(),  # UUID\n+        ]\n+        for value in value_types:\n+            with self.subTest(type=type(value)):\n+                field = Value(value)._resolve_output_field()\n+                # Ensure the validators do not cause TypeError when clean is called.\n+                try:\n+                    field.clean(value, model_instance=None)\n+                except Exception as e:\n+                    self.fail(f\"clean() raised {type(e).__name__} unexpectedly!\")\n+            with self.subTest(type=type(value)):\n+                expr = Value(value)\n+                self.assertIsInstance(expr.output_field, output_field_type)\n+\n     def test_resolve_output_field_failure(self):\n         msg = 'Cannot resolve expression type, unknown output_field'\n         with self.assertRaisesMessage(FieldError, msg):\n",
  "django__django-15278": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex dd02aee..960e2f2 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -618,7 +618,23 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor:\n             editor.add_field(Author, new_field)\n         # Ensure the field is there\n+from django.db import connection\n+from django.db.models import CASCADE, OneToOneField\n+from .models import Author, Note\n+\n+class SchemaTests(TestCase):\n+\n+    def test_add_field_o2o_nullable(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        new_field = OneToOneField(Note, CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n         columns = self.column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        self.assertTrue(columns['note_id'][1][6])\n         field_type, field_info = columns['thing']\n         self.assertEqual(field_type, connection.features.introspected_field_types['IntegerField'])\n         # Make sure the values were transformed correctly\n@@ -636,8 +652,73 @@ class SchemaTests(TransactionTestCase):\n         new_field.set_attributes_from_name(\"bits\")\n         with connection.schema_editor() as editor:\n             editor.add_field(Author, new_field)\n+from django.db import connection\n+from django.db.models import CASCADE, OneToOneField\n+from .models import Author, Note\n+\n+class SchemaTests(TestCase):\n+\n+    def test_add_field_o2o_nullable(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        new_field = OneToOneField(Note, CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n+        columns = self.column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        self.assertTrue(columns['note_id'][1][6])\n+    def test_add_nullable_o2o_with_default(self):\n+        \"\"\"Test adding a nullable OneToOneField with a default value.\"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        new_field = OneToOneField(Note, CASCADE, null=True, default=1)\n+        new_field.set_attributes_from_name('note')\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n+from django.db import connection\n+from django.db.models import CASCADE, OneToOneField\n+from .models import Author, Note\n+\n+class SchemaTests(TestCase):\n+\n+    def test_add_field_o2o_nullable(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        new_field = OneToOneField(Note, CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n         columns = self.column_classes(Author)\n-        # MySQL annoyingly uses the same backend, so it'll come back as one of\n+        self.assertIn('note_id', columns)\n+        self.assertTrue(columns['note_id'][1][6])\n+        self.assertIn('note_id', columns)\n+\n+    def test_add_non_nullable_o2o(self):\n+        \"\"\"Test adding a non-nullable OneToOneField.\"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        new_field = OneToOneField(Note, CASCADE)\n+        new_field.set_attributes_from_name('note')\n+        with self.assertRaises(OperationalError):\n+            with connection.schema_editor() as editor:\n+                editor.add_field(Author, new_field)\n+\n+    def test_o2o_field_migration(self):\n+        \"\"\"Test migration with OneToOneField.\"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        new_field = OneToOneField(Note, CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n+        # Simulate migration operation\n+        editor.alter_field(Author, new_field, new_field)\n         # these two types.\n         self.assertIn(columns['bits'][0], (\"BinaryField\", \"TextField\"))\n \n",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..f1e0b83 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -18,8 +18,46 @@ class Nested:\n \n \n class BasicFieldTests(SimpleTestCase):\n+    def test_hash_immutability(self):\n+        field = models.IntegerField()\n+        field_hash = hash(field)\n \n-    def test_show_hidden_initial(self):\n+        class MyModel(models.Model):\n+            rank = field\n+\n+        self.assertEqual(field_hash, hash(field))\n+\n+    def test_hash_in_dict(self):\n+        \"\"\"\n+        Test that a field can be used as a dictionary key and its hash remains unchanged after assignment to a model.\n+        \"\"\"\n+        field = models.CharField(max_length=200)\n+        field_hash = hash(field)\n+        d = {field: 1}\n+\n+        class MyModel(models.Model):\n+            title = field\n+\n+        # Check if the field is still accessible as a key in the dictionary\n+        self.assertTrue(field in d)\n+        # Check if the hash of the field remains the same\n+        self.assertEqual(field_hash, hash(field))\n+\n+    def test_field_equality_after_assignment(self):\n+        \"\"\"\n+        Test that field equality checks work after the field has been assigned to a model.\n+        \"\"\"\n+        field1 = models.CharField(max_length=200)\n+        field2 = models.CharField(max_length=200)\n+        field3 = field1\n+\n+        class MyModel(models.Model):\n+            title = field1\n+\n+        # field1 and field3 should be considered equal\n+        self.assertEqual(field1, field3)\n+        # field1 and field2 should not be considered equal\n+        self.assertNotEqual(field1, field2)\n         \"\"\"\n         Fields with choices respect show_hidden_initial as a kwarg to\n         formfield().\n",
  "django__django-15368": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex 447c150..a5021f4 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -204,6 +204,40 @@ class BulkUpdateTests(TestCase):\n             [cat.special_name for cat in special_categories]\n         )\n \n+    def test_f_expression_with_charfield(self):\n+        notes = [Note.objects.create(note=f'test_note_{i}', misc='test_misc') for i in range(10)]\n+        for note in notes:\n+            note.misc = F('note')\n+        Note.objects.bulk_update(notes, ['misc'])\n+        for note in notes:\n+            note.refresh_from_db()\n+            self.assertEqual(note.misc, note.note)\n+\n+    def test_f_expression_with_integerfield(self):\n+        numbers = [Number.objects.create(num=i, other_num=0) for i in range(10)]\n+        for number in numbers:\n+            number.other_num = F('num')\n+        Number.objects.bulk_update(numbers, ['other_num'])\n+        for number in numbers:\n+            number.refresh_from_db()\n+            self.assertEqual(number.other_num, number.num)\n+\n+    def test_bulk_update_with_multiple_models(self):\n+        notes = [Note.objects.create(note=f'test_note_{i}', misc='test_misc') for i in range(5)]\n+        numbers = [Number.objects.create(num=i, other_num=0) for i in range(5, 10)]\n+        for note in notes:\n+            note.misc = F('note')\n+        for number in numbers:\n+            number.other_num = F('num')\n+        Note.objects.bulk_update(notes, ['misc'])\n+        Number.objects.bulk_update(numbers, ['other_num'])\n+        for note in notes:\n+            note.refresh_from_db()\n+            self.assertEqual(note.misc, note.note)\n+        for number in numbers:\n+            number.refresh_from_db()\n+            self.assertEqual(number.other_num, number.num)\n+\n     def test_field_references(self):\n         numbers = [Number.objects.create(num=0) for _ in range(10)]\n         for number in numbers:\n",
  "django__django-15380": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex e2de333..5795c59 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1049,7 +1049,29 @@ class AutodetectorTests(TestCase):\n             new_name='renamed_foo',\n         )\n \n-    def test_rename_model(self):\n+    def test_rename_model_and_field_together(self):\n+        \"\"\"Test renaming a model and a field within that model simultaneously.\"\"\"\n+        initial_state = [\n+            ModelState('testapp', 'OldModel', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('old_field', models.CharField(max_length=100)),\n+            ]),\n+        ]\n+        new_state = [\n+            ModelState('testapp', 'NewModel', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('new_field', models.CharField(max_length=100)),\n+            ]),\n+        ]\n+        changes = self.get_changes(\n+            initial_state,\n+            new_state,\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel', 'RenameField'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, old_name='OldModel', new_name='NewModel')\n+        self.assertOperationAttributes(changes, 'testapp', 0, 1, old_name='old_field', new_name='new_field')\n         \"\"\"Tests autodetection of renamed models.\"\"\"\n         changes = self.get_changes(\n             [self.author_with_book, self.book],\n",
  "django__django-15382": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex bd890ac..6f3a472 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1905,8 +1905,44 @@ class ExistsTests(TestCase):\n         )\n         self.assertNotIn('ORDER BY', captured_sql)\n \n+from django.test import TestCase\n+from django.db.models import Exists, Q\n+from .models import Manager\n \n-class FieldTransformTests(TestCase):\n+class ExistsSubqueryTests(TestCase):\n+\n+    def test_negated_empty_exists_subquery(self):\n+        \"\"\"\n+        Test that a negated Exists subquery with an empty queryset\n+        does not remove the entire WHERE clause.\n+        \"\"\"\n+        manager = Manager.objects.create(name='test_manager')\n+        qs = Manager.objects.filter(\n+            ~Exists(Manager.objects.none()) & Q(pk=manager.pk)\n+        )\n+        self.assertSequenceEqual(qs, [manager])\n+\n+    def test_non_negated_empty_exists_subquery(self):\n+        \"\"\"\n+        Test that a non-negated Exists subquery with an empty queryset\n+        results in an empty queryset.\n+        \"\"\"\n+        manager = Manager.objects.create(name='test_manager')\n+        qs = Manager.objects.filter(\n+            Exists(Manager.objects.none()) & Q(pk=manager.pk)\n+        )\n+        self.assertSequenceEqual(qs, [])\n+\n+    def test_negated_non_empty_exists(self):\n+        \"\"\"\n+        Test that a negated Exists subquery with a non-empty queryset works correctly.\n+        \"\"\"\n+        manager1 = Manager.objects.create(name='manager1')\n+        manager2 = Manager.objects.create(name='manager2')\n+        qs = Manager.objects.filter(\n+            ~Exists(Manager.objects.filter(name='manager1')) & Q(pk=manager2.pk)\n+        )\n+        self.assertSequenceEqual(qs, [manager2])\n \n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-15467": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex f5af59b..f41760a 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -28,6 +28,8 @@ from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n \n+from django.contrib.admin.sites import site\n+from django.db import models\n from .models import (\n     Advisor,\n     Album,\n@@ -141,7 +143,21 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n         )\n         self.assertIsNone(ff.empty_label)\n \n-    def test_many_to_many(self):\n+    def test_radio_fields_foreignkey_empty_label_customization(self):\n+        class MyModel(models.Model):\n+            parent = models.ForeignKey('self', on_delete=models.CASCADE, blank=True, null=True)\n+\n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {\"parent\": admin.VERTICAL}\n+\n+            def formfield_for_foreignkey(self, db_field, request, **kwargs):\n+                if db_field.name == \"parent\":\n+                    kwargs[\"empty_label\"] = \"Customized Empty Label\"\n+                return super().formfield_for_foreignkey(db_field, request, **kwargs)\n+\n+        ma = MyModelAdmin(MyModel, site)\n+        ff = ma.formfield_for_dbfield(MyModel._meta.get_field(\"parent\"), request=None)\n+        self.assertEqual(ff.empty_label, \"Customized Empty Label\")\n         self.assertFormfield(Band, \"members\", forms.SelectMultiple)\n \n     def test_raw_id_many_to_many(self):\n",
  "django__django-15499": "",
  "django__django-15525": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 3640e99..7dc6e5c 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -791,6 +791,11 @@ class NaturalKeyFixtureTests(TestCase):\n         )\n \n \n+from django.test import TestCase, override_settings\n+from django.core import management\n+from django.db import connection\n+from fixtures_regress.models import Person, NaturalKeyWithFKDependency\n+\n class M2MNaturalKeyFixtureTests(TestCase):\n     \"\"\"Tests for ticket #14426.\"\"\"\n \n",
  "django__django-15561": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex b8137da..83a497a 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -3955,6 +3955,47 @@ class SchemaTests(TransactionTestCase):\n             validators=[lambda x: x],\n             verbose_name=\"verbose name\",\n         )\n+\n+    def test_alter_field_choices_noop(self):\n+        # Ensure this operation produces no SQL queries on SQLite\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        old_field = Author._meta.get_field(\"name\")\n+        new_field = CharField(\n+            choices=((\"Jane\", \"Jane\"), (\"Joe\", \"Joe\")),\n+            max_length=255,\n+        )\n+        new_field.set_attributes_from_name(\"name\")\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, new_field, old_field, strict=True)\n+\n+    def test_alter_field_with_same_choices_noop(self):\n+        # Test that altering a field to have the same choices is a no-op\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        old_field = Author._meta.get_field(\"name\")\n+        new_field = CharField(\n+            choices=old_field.choices,\n+            max_length=old_field.max_length,\n+        )\n+        new_field.set_attributes_from_name(\"name\")\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+\n+    def test_alter_field_different_choices_noop(self):\n+        # Test that altering a field with different choices still results in no-op\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        old_field = Author._meta.get_field(\"name\")\n+        new_field = CharField(\n+            choices=((\"Alice\", \"Alice\"), (\"Bob\", \"Bob\")),\n+            max_length=255,\n+        )\n+        new_field.set_attributes_from_name(\"name\")\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n         new_field.set_attributes_from_name(\"author\")\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             editor.alter_field(Book, old_field, new_field, strict=True)\n",
  "django__django-15569": "diff --git a/tests/custom_lookups/tests.py b/tests/custom_lookups/tests.py\nindex 74c331a..1f71b2e 100644\n--- a/tests/custom_lookups/tests.py\n+++ b/tests/custom_lookups/tests.py\n@@ -312,7 +312,18 @@ class LookupTests(TestCase):\n         with register_lookup(models.Field, Exactly):\n             self.assertIsNone(field.get_lookup(\"exactly\"))\n \n-    def test_lookups_caching(self):\n+    def test_unregistration_clears_cache(self):\n+        field = Article._meta.get_field(\"author\")\n+\n+        # Register a lookup\n+        with register_lookup(models.ForeignObject, Exactly):\n+            self.assertIn(\"exactly\", field.get_lookups())\n+\n+        # Unregister the lookup\n+        models.ForeignObject._unregister_lookup(Exactly)\n+\n+        # Ensure cache is cleared by verifying lookup is no longer present\n+        self.assertNotIn(\"exactly\", field.get_lookups())\n         field = Article._meta.get_field(\"author\")\n \n         # clear and re-cache\n",
  "django__django-15572": "",
  "django__django-15731": "diff --git a/tests/basic/tests.py b/tests/basic/tests.py\nindex 902f114..ec5a458 100644\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -1,3 +1,4 @@\n+\n import threading\n from datetime import datetime, timedelta\n from unittest import mock\n@@ -6,12 +7,17 @@ from django.core.exceptions import MultipleObjectsReturned, ObjectDoesNotExist\n from django.db import DEFAULT_DB_ALIAS, DatabaseError, connections, models\n from django.db.models.manager import BaseManager\n from django.db.models.query import MAX_GET_RESULTS, EmptyQuerySet\n+import inspect\n from django.test import (\n     SimpleTestCase,\n     TestCase,\n     TransactionTestCase,\n     skipUnlessDBFeature,\n )\n+from django.db import models\n+\n+class Person(models.Model):\n+    name = models.CharField(max_length=100)\n from django.utils.translation import gettext_lazy\n \n from .models import (\n@@ -724,7 +730,28 @@ class ManagerTest(SimpleTestCase):\n \n     def test_manager_methods(self):\n         \"\"\"\n-        This test ensures that the correct set of methods from `QuerySet`\n+class ManagerMethodSignatureTests(TestCase):\n+    def test_manager_method_signature_bulk_create(self):\n+        # Test to ensure inspect.signature returns the expected signature for bulk_create\n+        expected_signature = \"(objs, batch_size=None, ignore_conflicts=False, update_conflicts=False, update_fields=None, unique_fields=None)\"\n+        actual_signature = str(inspect.signature(Person.objects.bulk_create))\n+        self.assertEqual(actual_signature, expected_signature)\n+\n+    def test_manager_method_signature_get(self):\n+        # Test to ensure inspect.signature returns the expected signature for get\n+        expected_signature = \"(self, *args, **kwargs)\"\n+        actual_signature = str(inspect.signature(Person.objects.get))\n+        self.assertEqual(actual_signature, expected_signature)\n+\n+    def test_manager_method_signature_create(self):\n+        # Test to ensure inspect.signature returns the expected signature for create\n+        expected_signature = \"(self, **kwargs)\"\n+        actual_signature = str(inspect.signature(Person.objects.create))\n+        self.assertEqual(actual_signature, expected_signature)\n+\n+...\n+\n+        # This test ensures that the correct set of methods from `QuerySet`\n         are copied onto `Manager`.\n \n         It's particularly useful to prevent accidentally leaking new methods\n",
  "django__django-15741": "diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex c6dbc53..b66fc4e 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -1,5 +1,9 @@\n+\n from datetime import datetime, time\n \n+from django.utils.translation import gettext_lazy as _\n+from django.utils.formats import get_format\n+from django.utils.translation import activate, deactivate\n from django.template.defaultfilters import date\n from django.test import SimpleTestCase\n from django.utils import timezone, translation\n@@ -74,6 +78,15 @@ class DateTests(TimezoneTestCase):\n \n \n class FunctionTests(SimpleTestCase):\n+    def test_get_format_with_lazy_string(self):\n+        # Activate a known language to ensure consistent results\n+        activate('en')\n+        try:\n+            # Test with a lazy string for DATE_FORMAT\n+            self.assertEqual(get_format(_(\"DATE_FORMAT\")), \"N j, Y\")\n+        finally:\n+            deactivate()\n+\n     def test_date(self):\n         self.assertEqual(date(datetime(2005, 12, 29), \"d F Y\"), \"29 December 2005\")\n \n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..e8a351d 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -398,9 +398,37 @@ class ProxyModelTests(TestCase):\n     def test_eq(self):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n+from django.test import TestCase, override_settings\n+from django.core import management\n+from .models import ProxyCustomModel, AnotherModel\n+\n+class ProxyModelTestCase(TestCase):\n+    def test_select_related_only_with_proxy_model(self):\n+        # Create instances of the models\n+        custom_model = ProxyCustomModel.objects.create(name=\"Proxy Name\")\n+        another_model = AnotherModel.objects.create(custom=custom_model)\n+\n+        # Test the select_related with only on proxy model\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        result = qs.get()\n+\n+        # Assert the result is as expected\n+        self.assertEqual(result, another_model)\n+        self.assertEqual(result.custom.name, \"Proxy Name\")\n+\n+    def test_related_populators_on_proxy_model(self):\n+        # Create instances of the models\n+        custom_model = ProxyCustomModel.objects.create(name=\"Proxy Name\")\n+        another_model = AnotherModel.objects.create(custom=custom_model)\n+\n+        # Test the select_related with only on proxy model\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+\n+        # Access the related object to trigger related_populators\n+        result = qs.get().custom\n \n-@override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n-class ProxyModelAdminTests(TestCase):\n+        # Assert the related object is correct\n+        self.assertEqual(result.name, \"Proxy Name\")\n     @classmethod\n     def setUpTestData(cls):\n         cls.superuser = AuthUser.objects.create(is_superuser=True, is_staff=True)\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..c4097be 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -157,6 +157,13 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n+    def test_parameters_order(self):\n+        # This test checks that additional parameters are passed before the dbname.\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1;\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1;\", \"dbname\"], None),\n+        )\n+\n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n",
  "django__django-15863": "",
  "django__django-15930": "diff --git a/tests/expressions_case/tests.py b/tests/expressions_case/tests.py\nindex 696f4d0..d3d89a2 100644\n--- a/tests/expressions_case/tests.py\n+++ b/tests/expressions_case/tests.py\n@@ -405,6 +405,16 @@ class CaseExpressionTests(TestCase):\n             [1, 4, 3, 3, 3, 2, 2],\n         )\n \n+    def test_annotate_with_negated_empty_when(self):\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+            )\n+        )\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n+\n     def test_annotate_with_empty_when(self):\n         objects = CaseTestModel.objects.annotate(\n             selected=Case(\n@@ -412,6 +422,16 @@ class CaseExpressionTests(TestCase):\n                 default=Value(\"not selected\"),\n             )\n         )\n+\n+    def test_annotate_with_negated_empty_when(self):\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+            )\n+        )\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n         self.assertEqual(len(objects), CaseTestModel.objects.count())\n         self.assertTrue(all(obj.selected == \"not selected\" for obj in objects))\n \n",
  "django__django-15987": "",
  "django__django-16032": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex bcf8df9..29638e8 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -989,6 +989,30 @@ class NonAggregateAnnotationTestCase(TestCase):\n             publisher_books_qs, [{\"name\": \"Sams\"}, {\"name\": \"Morgan Kaufmann\"}]\n         )\n \n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        self.assertCountEqual(\n+            publisher_books_qs,\n+            [\n+                {'name': 'Apress'},\n+                {'name': 'Sams'},\n+                {'name': 'Prentice Hall'},\n+                {'name': 'Morgan Kaufmann'}\n+            ]\n+        )\n+\n     def test_annotation_exists_aggregate_values_chaining(self):\n         qs = (\n             Book.objects.values(\"publisher\")\n",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..c6202be 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2416,7 +2416,7 @@ class CombinedExpressionTests(SimpleTestCase):\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV, Combinable.MOD]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..b4e41d7 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,86 @@\n+\n+class TransactionHandlingTests(TestCase):\n+    @skipUnlessDBFeature(\"supports_transactions\")\n+    def test_list_editable_atomicity(self):\n+        a = Swallow.objects.create(origin=\"Swallow A\", load=4, speed=1)\n+        b = Swallow.objects.create(origin=\"Swallow B\", load=2, speed=2)\n+\n+        self.client.force_login(self.superuser)\n+        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n+        data = {\n+            \"form-TOTAL_FORMS\": \"2\",\n+            \"form-INITIAL_FORMS\": \"2\",\n+            \"form-MIN_NUM_FORMS\": \"0\",\n+            \"form-MAX_NUM_FORMS\": \"1000\",\n+            \"form-0-uuid\": str(a.pk),\n+            \"form-1-uuid\": str(b.pk),\n+            \"form-0-load\": \"9.0\",\n+            \"form-0-speed\": \"3.0\",\n+            \"form-1-load\": \"5.0\",\n+            \"form-1-speed\": \"1.0\",\n+            \"_save\": \"Save\",\n+        }\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\", side_effect=DatabaseError\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Original values are preserved.\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\",\n+            side_effect=[None, DatabaseError],\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Original values are preserved.\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+\n+    @skipUnlessDBFeature(\"supports_transactions\")\n+    def test_partial_failure_rollback(self):\n+        a = Swallow.objects.create(origin=\"Swallow C\", load=10, speed=5)\n+        b = Swallow.objects.create(origin=\"Swallow D\", load=20, speed=10)\n+\n+        self.client.force_login(self.superuser)\n+        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n+        data = {\n+            \"form-TOTAL_FORMS\": \"2\",\n+            \"form-INITIAL_FORMS\": \"2\",\n+            \"form-MIN_NUM_FORMS\": \"0\",\n+            \"form-MAX_NUM_FORMS\": \"1000\",\n+            \"form-0-uuid\": str(a.pk),\n+            \"form-1-uuid\": str(b.pk),\n+            \"form-0-load\": \"15.0\",\n+            \"form-0-speed\": \"7.0\",\n+            \"form-1-load\": \"25.0\",\n+            \"form-1-speed\": \"12.0\",\n+            \"_save\": \"Save\",\n+        }\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\",\n+            side_effect=[None, DatabaseError],\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Original values are preserved.\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 10)\n+        self.assertEqual(a.speed, 5)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 20)\n+        self.assertEqual(b.speed, 10)\n+\n import datetime\n \n from django.contrib import admin\n@@ -21,7 +104,10 @@ from django.db.models import F, Field, IntegerField\n from django.db.models.functions import Upper\n from django.db.models.lookups import Contains, Exact\n from django.template import Context, Template, TemplateSyntaxError\n-from django.test import TestCase, override_settings\n+from unittest import mock\n+from django.db import DatabaseError, connection\n+from django.test import TestCase, override_settings, skipUnlessDBFeature\n+from django.urls import reverse\n from django.test.client import RequestFactory\n from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup\n from django.urls import reverse\n",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..e2fe28e 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2400,7 +2400,26 @@ class MakeMigrationsTests(MigrationTestBase):\n         ):\n             call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n \n-    def test_makemigrations_migration_path_output(self):\n+    def test_makemigrations_check_with_dry_run(self):\n+        \"\"\"\n+        makemigrations --check --dry-run should exit with a non-zero status when\n+        there are changes to an app requiring migrations, and should not create any migrations.\n+        \"\"\"\n+        with self.temporary_migration_module() as tmpdir:\n+            with self.assertRaises(SystemExit):\n+                call_command(\"makemigrations\", \"--check\", \"--dry-run\", \"migrations\", verbosity=0)\n+            # Ensure no migrations were created\n+            self.assertFalse(os.path.exists(tmpdir))\n+\n+    def test_makemigrations_check_no_changes(self):\n+        \"\"\"\n+        makemigrations --check should exit with zero status when there are no changes\n+        to an app requiring migrations.\n+        \"\"\"\n+        with self.temporary_migration_module(\n+            module=\"migrations.test_migrations_no_changes\"\n+        ):\n+            call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n         \"\"\"\n         makemigrations should print the relative paths to the migrations unless\n         they are outside of the current tree, in which case the absolute path\n",
  "django__django-16136": "diff --git a/tests/async/tests.py b/tests/async/tests.py\nindex 72e103e..c9a8eb8 100644\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -1,3 +1,4 @@\n+\n import asyncio\n import os\n from unittest import mock\n@@ -6,11 +7,19 @@ from asgiref.sync import async_to_sync\n \n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n-from django.http import HttpResponse\n-from django.test import SimpleTestCase\n-from django.utils.asyncio import async_unsafe\n+from django.http import HttpResponse, HttpResponseNotAllowed\n+from django.test import SimpleTestCase, RequestFactory\n from django.views.generic.base import View\n \n+# Assuming SyncView and AsyncView are defined here for testing purposes\n+class SyncView(View):\n+    def post(self, request):\n+        return HttpResponse(\"ok\")\n+\n+class AsyncView(View):\n+    async def post(self, request):\n+        return HttpResponse(\"ok\")\n+\n from .models import SimpleModel\n \n \n@@ -119,7 +128,24 @@ class ViewTests(SimpleTestCase):\n \n                 self.assertIsInstance(response, HttpResponse)\n \n-    def test_base_view_class_is_sync(self):\n+    def test_http_method_not_allowed_responds_correctly(self):\n+        request_factory = RequestFactory()\n+        tests = [\n+            (SyncView, False),\n+            (AsyncView, True),\n+        ]\n+        for view_cls, is_coroutine in tests:\n+            with self.subTest(view_cls=view_cls, is_coroutine=is_coroutine):\n+                instance = view_cls()\n+                response = instance.http_method_not_allowed(request_factory.post(\"/\"))\n+                self.assertIs(\n+                    asyncio.iscoroutine(response),\n+                    is_coroutine,\n+                )\n+                if is_coroutine:\n+                    response = asyncio.run(response)\n+\n+                self.assertIsInstance(response, HttpResponseNotAllowed)\n         \"\"\"\n         View and by extension any subclasses that don't define handlers are\n         sync.\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..f8bd125 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -21,7 +22,9 @@ from django.core.exceptions import ValidationError\n from django.core.mail import EmailMultiAlternatives\n from django.forms import forms\n from django.forms.fields import CharField, Field, IntegerField\n+import urllib.parse\n from django.test import SimpleTestCase, TestCase, override_settings\n+from django.urls import reverse\n from django.utils import translation\n from django.utils.text import capfirst\n from django.utils.translation import gettext as _\n@@ -892,6 +895,45 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_password_reset_link_validity_via_to_field_with_uuid(self):\n+        # Setting up a user with a UUID to_field\n+        user = User.objects.create_user(username=\"uuiduser\", password=\"password\", email=\"uuiduser@example.com\")\n+        user.uuid = \"22222222-3333-4444-5555-666677778888\"\n+        user.save()\n+\n+        # Accessing the UserChangeForm via a to_field\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (uuid instead of pk).\n+        admin_user_change_url = reverse(\n+            \"admin:auth_user_change\",\n+            args=(user.uuid,),\n+        )\n+\n+        # Construct the full URL from the help text\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        # Expected password reset URL\n+        pw_change_url = reverse(\n+            \"admin:auth_user_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_password_reset_link_for_nonexistent_user(self):\n+        # Test that accessing the form for a nonexistent user returns None or raises an exception\n+        try:\n+            non_existent_user = User(pk=99999)  # assuming this user does not exist\n+            form = UserChangeForm(data={}, instance=non_existent_user)\n+            password_help_text = form.fields[\"password\"].help_text\n+            self.assertIsNone(password_help_text)\n+        except User.DoesNotExist:\n+            self.assertTrue(True)  # Expected behavior\n+\n     def test_custom_form(self):\n         class CustomUserChangeForm(UserChangeForm):\n             class Meta(UserChangeForm.Meta):\n",
  "django__django-16145": "",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..c512350 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -507,9 +507,27 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n+from django.test import TestCase\n+from django.contrib.sitemaps import Sitemap\n+from django.urls import reverse\n+\n+class EmptyItemsSitemap(Sitemap):\n+    location = \"/location/\"\n+\n+    def items(self):\n+        return []\n+\n+    def lastmod(self, obj):\n+        return obj.lastmod\n+\n+class SitemapTestsBase(TestCase):\n+    # Existing test cases...\n \n-# RemovedInDjango50Warning\n-class DeprecatedTests(SitemapTestsBase):\n+    def test_empty_items_callable_lastmod(self):\n+        sitemap = EmptyItemsSitemap()\n+        # This should not raise a ValueError\n+        lastmod = sitemap.get_latest_lastmod()\n+        self.assertIsNone(lastmod, \"Expected None for an empty sitemap with callable lastmod.\")\n     @override_settings(\n         TEMPLATES=[\n             {\n",
  "django__django-16315": "diff --git a/tests/bulk_create/models.py b/tests/bulk_create/models.py\nindex c5f5c07..59df509 100644\n--- a/tests/bulk_create/models.py\n+++ b/tests/bulk_create/models.py\n@@ -59,6 +59,12 @@ class Pizzeria(Restaurant):\n     pass\n \n \n+from django.db import models\n+\n+class FieldsWithDbColumns(models.Model):\n+    rank = models.IntegerField(unique=True, db_column=\"rAnK\")\n+    name = models.CharField(max_length=15, null=True, db_column=\"oTheRNaMe\")\n+\n class State(models.Model):\n     two_letter_code = models.CharField(max_length=2, primary_key=True)\n \n",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..cdc741a 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n import urllib.parse\n@@ -35,7 +36,8 @@ from .models.custom_user import (\n )\n from .models.with_custom_email_field import CustomEmailField\n from .models.with_integer_username import IntegerUsernameUser\n-from .settings import AUTH_TEMPLATES\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n+from django.forms.models import ModelForm\n \n \n class TestDataMixin:\n@@ -261,6 +263,57 @@ class UserCreationFormTest(TestDataMixin, TestCase):\n         form = UserCreationForm(data)\n         self.assertTrue(form.is_valid())\n         self.assertEqual(form.cleaned_data[\"password1\"], data[\"password1\"])\n+\n+    def test_custom_form_saves_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization = Organization.objects.create(name=\"organization 1\")\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertTrue(form.is_valid())\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization])\n+\n+    def test_custom_form_with_invalid_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [\"invalid_id\"],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertFalse(form.is_valid())\n+\n+    def test_custom_form_empty_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertTrue(form.is_valid())\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [])\n         self.assertEqual(form.cleaned_data[\"password2\"], data[\"password2\"])\n \n     @override_settings(\n",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..7bd5fac 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.test import TestCase\n@@ -160,7 +161,21 @@ class TimesinceTests(TestCase):\n         self.assertEqual(timesince(t + self.oneday, now), \"0\\xa0minutes\")\n         self.assertEqual(timeuntil(t - self.oneday, now), \"0\\xa0minutes\")\n \n-    def test_naive_datetime_with_tzinfo_attribute(self):\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_long_interval_with_tz(self):\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=31)\n+        d = timezone.make_aware(d, timezone.get_default_timezone())\n+        self.assertEqual(timesince(d), \"1\\xa0month\")\n+        \n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_naive_and_aware_datetime(self):\n+        aware_dt = timezone.now() - datetime.timedelta(days=31)\n+        naive_dt = datetime.datetime.now() - datetime.timedelta(days=31)\n+        self.assertEqual(timesince(aware_dt), \"1\\xa0month\")\n+        self.assertEqual(timesince(naive_dt), \"1\\xa0month\")\n         class naive(datetime.tzinfo):\n             def utcoffset(self, dt):\n                 return None\n",
  "django__django-16454": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 8d0729b..01f7d71 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -469,7 +469,47 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertEqual(out.strip(), \"Set foo\")\n \n \n-class UtilsTests(SimpleTestCase):\n+from django.core.management import CommandError\n+from django.test import SimpleTestCase\n+\n+class SubparserErrorFormattingTests(SimpleTestCase):\n+    def test_missing_subparser_argument(self):\n+        class Command(BaseCommand):\n+            def add_arguments(self, parser):\n+                subparsers = parser.add_subparsers(required=True)\n+                create = subparsers.add_parser(\"create\")\n+                create.add_argument(\"name\")\n+\n+            def handle(self, *args, **options):\n+                pass\n+\n+        command = Command()\n+        parser = CommandParser(prog=\"manage.py\")\n+        command.add_arguments(parser)\n+\n+        with self.assertRaises(CommandError) as cm:\n+            parser.parse_args([\"create\"])\n+\n+        self.assertEqual(str(cm.exception), \"Error: the following arguments are required: name\")\n+\n+    def test_missing_required_subparser(self):\n+        class Command(BaseCommand):\n+            def add_arguments(self, parser):\n+                subparsers = parser.add_subparsers(required=True)\n+                create = subparsers.add_parser(\"create\")\n+                create.add_argument(\"name\")\n+\n+            def handle(self, *args, **options):\n+                pass\n+\n+        command = Command()\n+        parser = CommandParser(prog=\"manage.py\")\n+        command.add_arguments(parser)\n+\n+        with self.assertRaises(CommandError) as cm:\n+            parser.parse_args([])\n+\n+        self.assertEqual(str(cm.exception), \"Error: the following arguments are required: create\")\n     def test_no_existent_external_program(self):\n         msg = \"Error executing a_42_command_that_doesnt_exist_42\"\n         with self.assertRaisesMessage(CommandError, msg):\n",
  "django__django-16485": "",
  "django__django-16493": "",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..d339acc 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,8 +1,11 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n from django.contrib.admin.templatetags.admin_list import date_hierarchy\n from django.contrib.admin.templatetags.admin_modify import submit_row\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n@@ -33,7 +36,75 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n         self.assertIs(template_context[\"extra\"], True)\n         self.assertIs(template_context[\"show_save\"], True)\n \n-    def test_override_show_save_and_add_another(self):\n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        \"\"\"\n+        Test that 'show_save_as_new' is False for a user with only change\n+        permission and True for a user with both add and change permissions.\n+        \"\"\"\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n+    \n+    def test_submit_row_save_as_new_add_only_permission(self):\n+        \"\"\"\n+        Test that 'show_save_as_new' is False for a user with only add permission.\n+        \"\"\"\n+        add_user = User.objects.create_user(\n+            username=\"add_only_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+    \n+    def test_submit_row_save_as_new_no_permissions(self):\n+        \"\"\"\n+        Test that 'show_save_as_new' is False for a user with no add or change permissions.\n+        \"\"\"\n+        no_perm_user = User.objects.create_user(\n+            username=\"no_perm_user\", password=\"secret\", is_staff=True\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = no_perm_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n         request = self.request_factory.get(\n             reverse(\"admin:auth_user_change\", args=[self.superuser.pk]),\n         )\n",
  "django__django-16560": "diff --git a/tests/constraints/tests.py b/tests/constraints/tests.py\nindex 13854a9..b5e58db 100644\n--- a/tests/constraints/tests.py\n+++ b/tests/constraints/tests.py\n@@ -217,6 +217,18 @@ class CheckConstraintTests(TestCase):\n         constraints = get_constraints(ChildModel._meta.db_table)\n         self.assertIn(\"constraints_childmodel_adult\", constraints)\n \n+    def test_custom_violation_code_message(self):\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price\",\n+            violation_error_code=\"fake_discount\",\n+        )\n+        invalid_product = Product(price=10, discounted_price=42)\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(Product, invalid_product)\n+        self.assertEqual(cm.exception.code, \"fake_discount\")\n+\n     def test_validate(self):\n         check = models.Q(price__gt=models.F(\"discounted_price\"))\n         constraint = models.CheckConstraint(check=check, name=\"price\")\n@@ -283,6 +295,17 @@ class CheckConstraintTests(TestCase):\n         constraint.validate(Product, Product())\n \n \n+    def test_repr_with_violation_error_code(self):\n+        constraint = models.CheckConstraint(\n+            check=models.Q(price__lt=1),\n+            name=\"price_lt_one\",\n+            violation_error_code=\"more_than_one\",\n+        )\n+        self.assertEqual(\n+            repr(constraint),\n+            \"<CheckConstraint: check=(AND: ('price__lt', 1)) name='price_lt_one' violation_error_code='more_than_one'>\",\n+        )\n+        \n class UniqueConstraintTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n@@ -654,6 +677,18 @@ class UniqueConstraintTests(TestCase):\n         with self.assertRaisesMessage(ValidationError, msg):\n             NoCodeErrorConstraintModel(name=\"test\").validate_constraints()\n \n+    def test_custom_violation_code_message(self):\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price\",\n+            violation_error_code=\"fake_discount\",\n+        )\n+        invalid_product = Product(price=10, discounted_price=42)\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(Product, invalid_product)\n+        self.assertEqual(cm.exception.code, \"fake_discount\")\n+\n     def test_validate(self):\n         constraint = UniqueConstraintProduct._meta.constraints[0]\n         msg = \"Unique constraint product with this Name and Color already exists.\"\n",
  "django__django-16569": "",
  "django__django-16595": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3979e76..1af7a4d 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -43,7 +43,92 @@ class OptimizerTests(SimpleTestCase):\n     def assertDoesNotOptimize(self, operations, **kwargs):\n         self.assertOptimizesTo(operations, operations, **kwargs)\n \n-    def test_none_app_label(self):\n+    def test_alterfield_optimization(self):\n+        # Multiple AlterField operations should collapse into the last one.\n+        operations = [\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=256, null=True),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\"),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+            ),\n+        ]\n+        expected_operations = [\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+            ),\n+        ]\n+        self.assertOptimizesTo(operations, expected_operations)\n+\n+    def test_alterfield_with_non_elidable_migration(self):\n+        # Test no optimization when non-elidable migration is present\n+        non_elidable_migration = migrations.SeparateDatabaseAndState(\n+            state_operations=[\n+                migrations.AddField(\n+                    model_name=\"book\",\n+                    name=\"author\",\n+                    field=models.CharField(max_length=100),\n+                ),\n+            ]\n+        )\n+        operations = [\n+            non_elidable_migration,\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=256, null=True),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True),\n+            ),\n+        ]\n+        self.assertDoesNotOptimize(operations)\n+\n+    def test_alterfield_with_addfield(self):\n+        # Test that AlterField operations don't collapse when preceded by an AddField.\n+        operations = [\n+            migrations.AddField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=256, null=True),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\"),\n+            ),\n+        ]\n+        expected_operations = [\n+            migrations.AddField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=256, null=True),\n+            ),\n+        ]\n+        self.assertOptimizesTo(operations, expected_operations)\n         optimizer = MigrationOptimizer()\n         with self.assertRaisesMessage(TypeError, \"app_label must be a str\"):\n             optimizer.optimize([], None)\n",
  "django__django-16612": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 9120571..c25e25f 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -8456,6 +8456,42 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             email=\"staff@example.com\",\n             is_staff=True,\n         )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_preserves_query_string_on_redirect(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=123\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_preserves_query_string_script_name(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=123\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1])\n@@ -8463,6 +8499,42 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             response, known_url, status_code=301, target_status_code=403\n         )\n \n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_preserves_query_string_on_redirect(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=123\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_preserves_query_string_script_name(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=123\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n     @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_true_script_name(self):\n         superuser = User.objects.create_user(\n@@ -8471,6 +8543,42 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             email=\"staff@example.com\",\n             is_staff=True,\n         )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_preserves_query_string_on_redirect(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=123\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_preserves_query_string_script_name(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=123\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n@@ -8481,6 +8589,42 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             fetch_redirect_response=False,\n         )\n \n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_preserves_query_string_on_redirect(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=123\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_preserves_query_string_script_name(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=123\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n     @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME=\"/prefix/\")\n     def test_missing_slash_append_slash_true_force_script_name(self):\n         superuser = User.objects.create_user(\n@@ -8489,6 +8633,42 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             email=\"staff@example.com\",\n             is_staff=True,\n         )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_preserves_query_string_on_redirect(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=123\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_preserves_query_string_script_name(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=123\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1])\n@@ -8499,6 +8679,42 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             fetch_redirect_response=False,\n         )\n \n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_preserves_query_string_on_redirect(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=123\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_preserves_query_string_script_name(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=123\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n     @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n         user = User.objects.create_user(\n@@ -8507,6 +8723,42 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             email=\"user@example.com\",\n             is_staff=False,\n         )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_preserves_query_string_on_redirect(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=123\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_preserves_query_string_script_name(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=123\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n         self.client.force_login(user)\n         known_url = reverse(\"admin:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1])\n@@ -8622,6 +8874,42 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             email=\"staff@example.com\",\n             is_staff=True,\n         )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_preserves_query_string_on_redirect(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=123\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_preserves_query_string_script_name(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=123\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin10:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1])\n@@ -8629,6 +8917,42 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             response, known_url, status_code=301, target_status_code=403\n         )\n \n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_preserves_query_string_on_redirect(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=123\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_preserves_query_string_script_name(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=123\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n     @override_settings(APPEND_SLASH=False)\n     def test_missing_slash_append_slash_false_without_final_catch_all_view(self):\n         superuser = User.objects.create_user(\n@@ -8637,6 +8961,42 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             email=\"staff@example.com\",\n             is_staff=True,\n         )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_preserves_query_string_on_redirect(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=123\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_preserves_query_string_script_name(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=123\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin10:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1])\n",
  "django__django-16642": "",
  "django__django-16661": "diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py\nindex 8cb88da..6188939 100644\n--- a/tests/modeladmin/tests.py\n+++ b/tests/modeladmin/tests.py\n@@ -154,6 +154,33 @@ class ModelAdminTests(TestCase):\n             ma.lookup_allowed(\"employee__department__code\", \"test_value\"), True\n         )\n \n+    def test_lookup_allowed_foreign_primary(self):\n+        class Country(models.Model):\n+            name = models.CharField(max_length=256)\n+        \n+        class Place(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+        \n+        class Restaurant(models.Model):\n+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)\n+        \n+        class Waiter(models.Model):\n+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n+        \n+        class WaiterAdmin(ModelAdmin):\n+            list_filter = [\n+                \"restaurant__place__country\",\n+                \"restaurant__place__country__name\",\n+            ]\n+\n+        ma = WaiterAdmin(Waiter, self.site)\n+        # Test that the lookup for 'country' through the chain is allowed\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country\", \"1\"), True)\n+        # Test lookup on 'country' with exact id\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country__id__exact\", \"1\"), True)\n+        # Test lookup by 'country's name\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country__name\", \"test_value\"), True)\n+\n     def test_field_arguments(self):\n         # If fields is specified, fieldsets_add and fieldsets_change should\n         # just stick the fields into a formsets structure and return it.\n",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..40af887 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -922,7 +922,47 @@ class WriterTests(SimpleTestCase):\n             output,\n         )\n \n-    def test_migration_file_header_comments(self):\n+    def test_correct_import_ordering(self):\n+        \"\"\"\n+        Verify that generated migration files have the correct import order.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield\",\n+                        models.FloatField(default=time.time),\n+                    ),\n+                ]\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        self.assertIn(\n+            \"import datetime\\nimport time\\nfrom django.db import migrations, models\\n\",\n+            output,\n+        )\n+\n+    def test_no_models_import_when_not_needed(self):\n+        \"\"\"\n+        Ensure 'models' is not imported if it's not needed.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.RunPython(lambda apps, schema_editor: None),\n+                ]\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        self.assertNotIn(\"models\", output)\n+        self.assertIn(\"from django.db import migrations\\n\", output)\n         \"\"\"\n         Test comments at top of file.\n         \"\"\"\n",
  "django__django-16801": "",
  "django__django-16819": "",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..37063c4 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -297,6 +297,16 @@ class SystemChecksTestCase(SimpleTestCase):\n             list_editable = [\"original_release\"]\n \n         errors = SongAdmin(Song, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[1]' refers to 'nonexistent', \"\n+                \"which is not a callable, an attribute of 'SongAdmin', or \"\n+                \"an attribute of 'admin_checks.Song'.\",\n+                obj=SongAdmin,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n         expected = [\n             checks.Error(\n                 \"The value of 'list_editable[0]' refers to 'original_release', \"\n@@ -782,6 +792,42 @@ class SystemChecksTestCase(SimpleTestCase):\n                 raise AttributeError\n \n         errors = SongAdmin(Song, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[1]' refers to 'nonexistent', \"\n+                \"which is not a callable, an attribute of 'SongAdmin', or \"\n+                \"an attribute of 'admin_checks.Song'.\",\n+                obj=SongAdmin,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n+        self.assertEqual(errors, [])\n+\n+    def test_readonly_fields_with_invalid_field_name(self):\n+        class MyAdmin(admin.ModelAdmin):\n+            readonly_fields = (\"valid_field\", \"invalid_field\")\n+\n+        errors = MyAdmin(Book, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[1]' refers to 'invalid_field', \"\n+                \"which is not a callable, an attribute of 'MyAdmin', or an \"\n+                \"attribute of 'admin_checks.Book'.\",\n+                obj=MyAdmin,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n+\n+    def test_readonly_fields_with_callable(self):\n+        class MyAdmin(admin.ModelAdmin):\n+            readonly_fields = (\"valid_field\", \"get_readonly_value\")\n+\n+            def get_readonly_value(self, obj):\n+                return \"readonly_value\"\n+\n+        errors = MyAdmin(Book, AdminSite()).check()\n         self.assertEqual(errors, [])\n \n     def test_readonly_method_on_model(self):\n@@ -789,6 +835,42 @@ class SystemChecksTestCase(SimpleTestCase):\n             readonly_fields = (\"readonly_method_on_model\",)\n \n         errors = SongAdmin(Song, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[1]' refers to 'nonexistent', \"\n+                \"which is not a callable, an attribute of 'SongAdmin', or \"\n+                \"an attribute of 'admin_checks.Song'.\",\n+                obj=SongAdmin,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n+        self.assertEqual(errors, [])\n+\n+    def test_readonly_fields_with_invalid_field_name(self):\n+        class MyAdmin(admin.ModelAdmin):\n+            readonly_fields = (\"valid_field\", \"invalid_field\")\n+\n+        errors = MyAdmin(Book, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[1]' refers to 'invalid_field', \"\n+                \"which is not a callable, an attribute of 'MyAdmin', or an \"\n+                \"attribute of 'admin_checks.Book'.\",\n+                obj=MyAdmin,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n+\n+    def test_readonly_fields_with_callable(self):\n+        class MyAdmin(admin.ModelAdmin):\n+            readonly_fields = (\"valid_field\", \"get_readonly_value\")\n+\n+            def get_readonly_value(self, obj):\n+                return \"readonly_value\"\n+\n+        errors = MyAdmin(Book, AdminSite()).check()\n         self.assertEqual(errors, [])\n \n     def test_nonexistent_field(self):\n@@ -796,6 +878,16 @@ class SystemChecksTestCase(SimpleTestCase):\n             readonly_fields = (\"title\", \"nonexistent\")\n \n         errors = SongAdmin(Song, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[1]' refers to 'nonexistent', \"\n+                \"which is not a callable, an attribute of 'SongAdmin', or \"\n+                \"an attribute of 'admin_checks.Song'.\",\n+                obj=SongAdmin,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n         expected = [\n             checks.Error(\n                 \"The value of 'readonly_fields[1]' is not a callable, an attribute \"\n",
  "django__django-16901": "",
  "django__django-17029": "",
  "django__django-17084": "",
  "django__django-17087": "",
  "django__django-7530": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex a74680b..cc9724b 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -609,6 +609,7 @@ class MakeMigrationsTests(MigrationTestBase):\n             else:\n                 return mock.DEFAULT\n \n+        from unittest import mock\n         self.assertTableNotExists('migrations_unicodemodel')\n         apps.register_model('migrations', UnicodeModel)\n         with mock.patch.object(\n@@ -641,7 +642,21 @@ class MakeMigrationsTests(MigrationTestBase):\n                 allow_migrate.assert_called_with('other', 'migrations', model_name='UnicodeModel')\n                 self.assertEqual(ensure_schema.call_count, 4)\n \n-    def test_failing_migration(self):\n+    def test_makemigrations_calls_allow_migrate_correctly(self):\n+        \"\"\"\n+        Test that makemigrations calls allow_migrate with the correct app_label and model_name pairs.\n+        \"\"\"\n+        apps.register_model('migrations', UnicodeModel)\n+        apps.register_model('migrations2', SomeOtherModel)\n+\n+        with mock.patch.object(TestRouter, 'allow_migrate', return_value=True) as allow_migrate:\n+            with self.settings(DATABASE_ROUTERS=['migrations.routers.TestRouter']):\n+                call_command('makemigrations', 'migrations', 'migrations2', verbosity=0)\n+\n+        # Check that allow_migrate is called with correct pairs for each app's models\n+        allow_migrate.assert_any_call('default', 'migrations', model_name='UnicodeModel')\n+        allow_migrate.assert_any_call('default', 'migrations2', model_name='SomeOtherModel')\n+        self.assertEqual(allow_migrate.call_count, 2)\n         # If a migration fails to serialize, it shouldn't generate an empty file. #21280\n         apps.register_model('migrations', UnserializableModel)\n \n",
  "django__django-9296": "diff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\nindex b9b5fbc..9f5110d 100644\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -297,8 +297,38 @@ class PaginationTests(SimpleTestCase):\n         with self.assertRaises(EmptyPage):\n             paginator.get_page(1)\n \n+from django.core.paginator import Paginator, EmptyPage\n+from django.test import TestCase\n \n-class ModelPaginationTests(TestCase):\n+class PaginatorIterationTests(TestCase):\n+    def test_paginator_iteration(self):\n+        paginator = Paginator([1, 2, 3], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2], [3]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+\n+    def test_empty_paginator_iteration(self):\n+        paginator = Paginator([], 2)\n+        page_iterator = iter(paginator)\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_single_item_per_page(self):\n+        paginator = Paginator([1, 2, 3], 1)\n+        page_iterator = iter(paginator)\n+        expected_pages = [[1], [2], [3]]\n+        for page, expected in enumerate(expected_pages, start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+\n+    def test_large_number_of_pages(self):\n+        items = list(range(100))\n+        paginator = Paginator(items, 10)\n+        page_iterator = iter(paginator)\n+        for i in range(10):\n+            with self.subTest(page=i + 1):\n+                self.assertEqual(items[i * 10:(i + 1) * 10], list(next(page_iterator)))\n     \"\"\"\n     Test pagination with Django model instances\n     \"\"\"\n",
  "matplotlib__matplotlib-13989": "",
  "matplotlib__matplotlib-14623": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c9ad946..57b69f3 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -930,6 +930,15 @@ def test_inverted_limits():\n     assert ax.get_ylim() == (-3, 5)\n     plt.close()\n \n+def test_invert_log_scale_axis():\n+    # Test inverting a logarithmic scale axis using its limits\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(10, 1)\n+    # Check if the axis limits are inverted correctly\n+    assert ax.get_ylim() == (10, 1)\n+    plt.close()\n+\n     fig, ax = plt.subplots()\n     ax.invert_yaxis()\n     ax.plot([-5, -3, 2, 4], [1, 2, -3, 5])\n@@ -938,6 +947,15 @@ def test_inverted_limits():\n     assert ax.get_ylim() == (5, -3)\n     plt.close()\n \n+def test_invert_log_scale_axis():\n+    # Test inverting a logarithmic scale axis using its limits\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(10, 1)\n+    # Check if the axis limits are inverted correctly\n+    assert ax.get_ylim() == (10, 1)\n+    plt.close()\n+\n \n @image_comparison(baseline_images=['nonfinite_limits'])\n def test_nonfinite_limits():\n",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..effc9a5 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6960,8 +6960,32 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[3].hist(np.arange(10), color=color.reshape((1, -1)))\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n+from matplotlib.testing.decorators import check_figures_equal\n+import numpy as np\n+import matplotlib.pyplot as plt\n \n-def test_shared_axes_retick():\n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear(fig_test, fig_ref):\n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    # Reference figure without calling ax.clear()\n+    axs_ref = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_ref.flat:\n+        ax.plot(x, y)\n+\n+    # Test figure with ax.clear()\n+    axs_test = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_test.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n+\n+    # Assert that the shared axes behave the same in both cases\n+    for ax_ref, ax_test in zip(axs_ref.flat, axs_test.flat):\n+        assert ax_ref.get_xlim() == ax_test.get_xlim()\n+        assert ax_ref.get_ylim() == ax_test.get_ylim()\n+        assert ax_ref.get_xticks().tolist() == ax_test.get_xticks().tolist()\n+        assert ax_ref.get_yticks().tolist() == ax_test.get_yticks().tolist()\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n \n     for ax in axs.flat:\n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "diff --git a/lib/matplotlib/tests/test_category.py b/lib/matplotlib/tests/test_category.py\nindex 40c4dcf..6ca2b04 100644\n--- a/lib/matplotlib/tests/test_category.py\n+++ b/lib/matplotlib/tests/test_category.py\n@@ -305,10 +305,33 @@ def test_overriding_units_in_plot(fig_test, fig_ref):\n         # assert that we have not re-set the units attribute at all\n         assert x_units is ax.xaxis.units\n         assert y_units is ax.yaxis.units\n+import pytest\n+import matplotlib.pyplot as plt\n+import warnings\n \n-\n-def test_hist():\n+def test_no_deprecation_on_empty_data():\n+    \"\"\"\n+    Test that no deprecation warning is emitted when plotting empty data on\n+    an axis with category units.\n+    \"\"\"\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        f, ax = plt.subplots()\n+        ax.xaxis.update_units([\"a\", \"b\"])\n+        ax.plot([], [])\n+        assert len(w) == 0, \"Deprecation warning was emitted when it shouldn't be.\"\n+\n+def test_no_conversion_error_on_empty_data_units():\n+    \"\"\"\n+    Test that no conversion error is raised when converting units with empty data.\n+    \"\"\"\n+    try:\n+        f, ax = plt.subplots()\n+        ax.xaxis.update_units([\"a\", \"b\"])\n+        ax.convert_xunits([])\n+    except Exception as e:\n+        pytest.fail(f\"Unexpected exception raised: {e}\")\n     fig, ax = plt.subplots()\n     n, bins, patches = ax.hist(['a', 'b', 'a', 'c', 'ff'])\n     assert n.shape == (10,)\n-    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n+    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n",
  "matplotlib__matplotlib-22865": "",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..d77a54c 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -488,13 +488,67 @@ def test_validate_fontstretch(stretch, parsed_stretch):\n             validate_fontstretch(stretch)\n     else:\n         assert validate_fontstretch(stretch) == parsed_stretch\n-\n+import pytest\n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend, rc_context\n+\n+def test_get_backend_does_not_clear_figures():\n+    # Create a figure within an rc_context.\n+    with rc_context():\n+        fig2 = plt.figure()\n+    # Record the state of Gcf.figs before calling get_backend().\n+    before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    # Call get_backend().\n+    get_backend()\n+    # Record the state of Gcf.figs after calling get_backend().\n+    after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    # Assert that the state is unchanged.\n+    assert before == after, '\\n' + before + '\\n' + after\n+\n+def test_get_backend_clears_figures_without_rc_context():\n+    # Create a figure outside an rc_context.\n+    fig1 = plt.figure()\n+    # Record the state of Gcf.figs before calling get_backend().\n+    before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    # Call get_backend().\n+    get_backend()\n+    # Record the state of Gcf.figs after calling get_backend().\n+    after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    # Assert that the state is unchanged.\n+    assert before == after, '\\n' + before + '\\n' + after\n \n def test_keymaps():\n     key_list = [k for k in mpl.rcParams if 'keymap' in k]\n     for k in key_list:\n         assert isinstance(mpl.rcParams[k], list)\n-\n+import pytest\n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend, rc_context\n+\n+def test_get_backend_does_not_clear_figures():\n+    # Create a figure within an rc_context.\n+    with rc_context():\n+        fig2 = plt.figure()\n+    # Record the state of Gcf.figs before calling get_backend().\n+    before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    # Call get_backend().\n+    get_backend()\n+    # Record the state of Gcf.figs after calling get_backend().\n+    after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    # Assert that the state is unchanged.\n+    assert before == after, '\\n' + before + '\\n' + after\n+\n+def test_get_backend_clears_figures_without_rc_context():\n+    # Create a figure outside an rc_context.\n+    fig1 = plt.figure()\n+    # Record the state of Gcf.figs before calling get_backend().\n+    before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    # Call get_backend().\n+    get_backend()\n+    # Record the state of Gcf.figs after calling get_backend().\n+    after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    # Assert that the state is unchanged.\n+    assert before == after, '\\n' + before + '\\n' + after\n \n def test_rcparams_reset_after_fail():\n     # There was previously a bug that meant that if rc_context failed and\n@@ -506,7 +560,34 @@ def test_rcparams_reset_after_fail():\n             with mpl.rc_context(rc={'text.usetex': True, 'test.blah': True}):\n                 pass\n         assert mpl.rcParams['text.usetex'] is False\n-\n+import pytest\n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend, rc_context\n+\n+def test_get_backend_does_not_clear_figures():\n+    # Create a figure within an rc_context.\n+    with rc_context():\n+        fig2 = plt.figure()\n+    # Record the state of Gcf.figs before calling get_backend().\n+    before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    # Call get_backend().\n+    get_backend()\n+    # Record the state of Gcf.figs after calling get_backend().\n+    after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    # Assert that the state is unchanged.\n+    assert before == after, '\\n' + before + '\\n' + after\n+\n+def test_get_backend_clears_figures_without_rc_context():\n+    # Create a figure outside an rc_context.\n+    fig1 = plt.figure()\n+    # Record the state of Gcf.figs before calling get_backend().\n+    before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    # Call get_backend().\n+    get_backend()\n+    # Record the state of Gcf.figs after calling get_backend().\n+    after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    # Assert that the state is unchanged.\n+    assert before == after, '\\n' + before + '\\n' + after\n \n @pytest.mark.skipif(sys.platform != \"linux\", reason=\"Linux only\")\n def test_backend_fallback_headless(tmpdir):\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..9ef4499 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -15,6 +15,16 @@ from matplotlib.patches import Circle\n \n import matplotlib.pyplot as plt\n import numpy as np\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal()\n+def test_set_visible_3d_axes(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot(projection='3d')\n+    ax_ref = fig_ref.add_subplot(projection='3d')\n+    \n+    ax_test.set_visible(False)\n+    ax_ref.set_visible(True)\n+    ax_ref.remove()  # Remove the reference axis to compare against an empty subplot.\n \n \n mpl3d_image_comparison = functools.partial(\n",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..b5cf24e 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -148,8 +148,32 @@ def test_rotate_rect_draw(fig_test, fig_ref):\n     rect_test.set_angle(angle)\n     assert rect_test.get_angle() == angle\n \n+from matplotlib.testing.decorators import check_figures_equal\n+from matplotlib.patches import Rectangle\n \n-def test_negative_rect():\n+@check_figures_equal(extensions=['png'])\n+def test_dash_offset_patch_render(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n+\n+    loc = (0.1, 0.1)\n+    width, height = (0.8, 0.8)\n+\n+    # Reference rectangle with no offset\n+    rect_ref1 = Rectangle(loc, width, height, linewidth=3, edgecolor='b', linestyle=(0, [10, 10]))\n+    ax_ref.add_patch(rect_ref1)\n+\n+    # Reference rectangle with offset\n+    rect_ref2 = Rectangle(loc, width, height, linewidth=3, edgecolor='r', linestyle=(10, [10, 10]))\n+    ax_ref.add_patch(rect_ref2)\n+\n+    # Test rectangle with no offset\n+    rect_test1 = Rectangle(loc, width, height, linewidth=3, edgecolor='b', linestyle=(0, [10, 10]))\n+    ax_test.add_patch(rect_test1)\n+\n+    # Test rectangle with offset\n+    rect_test2 = Rectangle(loc, width, height, linewidth=3, edgecolor='r', linestyle=(10, [10, 10]))\n+    ax_test.add_patch(rect_test2)\n     # These two rectangles have the same vertices, but starting from a\n     # different point.  (We also drop the last vertex, which is a duplicate.)\n     pos_vertices = Rectangle((-3, -2), 3, 2).get_verts()[:-1]\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..e5ea663 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2866,8 +2866,31 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+from matplotlib.patches import Rectangle\n+\n+def test_stackplot_colors_and_cycler():\n+    # Test that stackplot accepts color aliases and does not affect the axes color cycler\n+    fig, ax = plt.subplots()\n+    initial_cycler = ax._get_lines.prop_cycler\n+\n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    ax.plot([1, 3], [1, 3], color='C0')  # Use color alias\n+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))  # Use color alias\n+    ax.stackplot([1, 2, 3], my_data, colors=['C2', 'C3', 'C4'])  # Use color aliases\n+\n+    # Check if the color cycler is unchanged\n+    assert ax._get_lines.prop_cycler == initial_cycler\n+\n+def test_stackplot_with_different_color_formats():\n+    # Test that stackplot works with different color formats\n+    fig, ax = plt.subplots()\n+\n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    ax.stackplot([1, 2, 3], my_data, colors=['#FF0000', '0.5', (0.1, 0.2, 0.5)])\n \n-@image_comparison(['stackplot_test_baseline'], remove_text=True)\n+    fig.canvas.draw()  # Ensure no errors occur during drawing process\n def test_stackplot_baseline():\n     np.random.seed(0)\n \n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 45f9c04..ae24b3a 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -12,6 +12,7 @@ import matplotlib.lines as mlines\n from matplotlib.backend_bases import MouseButton, MouseEvent\n \n from matplotlib.offsetbox import (\n+    HPacker,\n     AnchoredOffsetbox, AnnotationBbox, AnchoredText, DrawingArea, OffsetBox,\n     OffsetImage, TextArea, _get_packed_offsets)\n \n",
  "matplotlib__matplotlib-24627": "",
  "matplotlib__matplotlib-24637": "",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..a348b9f 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -20,6 +20,12 @@ import matplotlib.scale as mscale\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n \n \n+import pytest\n+import numpy as np\n+from matplotlib import pyplot as plt\n+from matplotlib.testing.decorators import check_figures_equal\n+from numpy.testing import assert_array_equal, assert_no_warnings\n+\n @pytest.mark.parametrize('N, result', [\n     (5, [1, .6, .2, .1, 0]),\n     (2, [1, 0]),\n@@ -30,7 +36,12 @@ def test_create_lookup_table(N, result):\n     assert_array_almost_equal(mcolors._create_lookup_table(N, data), result)\n \n \n-def test_resampled():\n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.float16, float])\n+def test_colormap_no_deprecation_warnings(dtype):\n+    cm = plt.get_cmap(\"viridis\")\n+    with assert_no_warnings(DeprecationWarning):\n+        cm(dtype(0))\n+        cm(np.array([300, -10, 0.5]).astype(dtype))\n     \"\"\"\n     GitHub issue #6025 pointed to incorrect ListedColormap.resampled;\n     here we test the method for LinearSegmentedColormap as well.\n",
  "matplotlib__matplotlib-25122": "diff --git a/lib/matplotlib/tests/test_mlab.py b/lib/matplotlib/tests/test_mlab.py\nindex 51d0c35..921be23 100644\n--- a/lib/matplotlib/tests/test_mlab.py\n+++ b/lib/matplotlib/tests/test_mlab.py\n@@ -577,6 +577,28 @@ class TestSpectral:\n         assert_array_equal(fsp_g, fsp_c)\n         assert_array_equal(fsp_b, fsp_c)\n         assert_allclose(spec_g, spec_c, atol=1e-08)\n+\n+    def test_psd_window_flattop(self):\n+        # Test using the flattop window to verify window correction.\n+        NFFT = 512\n+        ydata = np.random.rand(NFFT)\n+        window_flattop = signal.windows.flattop(NFFT)\n+        \n+        # Calculate power spectral density using the flattop window with mlab.psd\n+        spec, fsp = mlab.psd(x=ydata,\n+                             NFFT=NFFT,\n+                             Fs=self.Fs,\n+                             noverlap=0,\n+                             sides=self.sides,\n+                             window=window_flattop,\n+                             scale_by_freq=False)\n+\n+        # Since we know that correction factor should be window.sum()**2 for flattop,\n+        # the two calculations should be close.\n+        spec_corrected = spec * window_flattop.sum()**2\n+        spec_expected = (np.abs(spec) / (window_flattop**2).sum()) * window_flattop.sum()**2\n+\n+        assert_allclose(spec_corrected, spec_expected, atol=1e-08)\n         # these should not be almost equal\n         with pytest.raises(AssertionError):\n             assert_allclose(spec_b, spec_c, atol=1e-08)\n@@ -619,6 +641,28 @@ class TestSpectral:\n         assert_array_equal(fsp_g, fsp_c)\n         assert_array_equal(fsp_b, fsp_c)\n         assert_allclose(spec_g, spec_c, atol=1e-08)\n+\n+    def test_psd_window_flattop(self):\n+        # Test using the flattop window to verify window correction.\n+        NFFT = 512\n+        ydata = np.random.rand(NFFT)\n+        window_flattop = signal.windows.flattop(NFFT)\n+        \n+        # Calculate power spectral density using the flattop window with mlab.psd\n+        spec, fsp = mlab.psd(x=ydata,\n+                             NFFT=NFFT,\n+                             Fs=self.Fs,\n+                             noverlap=0,\n+                             sides=self.sides,\n+                             window=window_flattop,\n+                             scale_by_freq=False)\n+\n+        # Since we know that correction factor should be window.sum()**2 for flattop,\n+        # the two calculations should be close.\n+        spec_corrected = spec * window_flattop.sum()**2\n+        spec_expected = (np.abs(spec) / (window_flattop**2).sum()) * window_flattop.sum()**2\n+\n+        assert_allclose(spec_corrected, spec_expected, atol=1e-08)\n         # these should not be almost equal\n         with pytest.raises(AssertionError):\n             assert_allclose(spec_b, spec_c, atol=1e-08)\n@@ -666,6 +710,28 @@ class TestSpectral:\n         assert_array_equal(fsp_g, fsp_c)\n         assert_array_equal(fsp_b, fsp_c)\n         assert_allclose(spec_g, spec_c, atol=1e-08)\n+\n+    def test_psd_window_flattop(self):\n+        # Test using the flattop window to verify window correction.\n+        NFFT = 512\n+        ydata = np.random.rand(NFFT)\n+        window_flattop = signal.windows.flattop(NFFT)\n+        \n+        # Calculate power spectral density using the flattop window with mlab.psd\n+        spec, fsp = mlab.psd(x=ydata,\n+                             NFFT=NFFT,\n+                             Fs=self.Fs,\n+                             noverlap=0,\n+                             sides=self.sides,\n+                             window=window_flattop,\n+                             scale_by_freq=False)\n+\n+        # Since we know that correction factor should be window.sum()**2 for flattop,\n+        # the two calculations should be close.\n+        spec_corrected = spec * window_flattop.sum()**2\n+        spec_expected = (np.abs(spec) / (window_flattop**2).sum()) * window_flattop.sum()**2\n+\n+        assert_allclose(spec_corrected, spec_expected, atol=1e-08)\n         # these should not be almost equal\n         with pytest.raises(AssertionError):\n             assert_allclose(spec_b, spec_c, atol=1e-08)\n",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..37f3a08 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,6 +7801,44 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+def test_xaxis_offsetText_color():\n+    plt.rcParams['xtick.labelcolor'] = 'blue'\n+    ax = plt.axes()\n+    assert ax.xaxis.offsetText.get_color() == 'blue'\n+\n+    plt.rcParams['xtick.color'] = 'yellow'\n+    plt.rcParams['xtick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    assert ax.xaxis.offsetText.get_color() == 'yellow'\n+\n+\n+def test_yaxis_offsetText_color():\n+    plt.rcParams['ytick.labelcolor'] = 'green'\n+    ax = plt.axes()\n+    assert ax.yaxis.offsetText.get_color() == 'green'\n+\n+    plt.rcParams['ytick.color'] = 'red'\n+    plt.rcParams['ytick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    assert ax.yaxis.offsetText.get_color() == 'red'\n+\n+\n+def test_xaxis_offsetText_color_with_no_inherit():\n+    plt.rcParams['xtick.color'] = 'purple'\n+    plt.rcParams['xtick.labelcolor'] = 'orange'\n+    ax = plt.axes()\n+    assert ax.xaxis.offsetText.get_color() == 'orange'\n+\n+\n+def test_yaxis_offsetText_color_with_no_inherit():\n+    plt.rcParams['ytick.color'] = 'cyan'\n+    plt.rcParams['ytick.labelcolor'] = 'pink'\n+    ax = plt.axes()\n+    assert ax.yaxis.offsetText.get_color() == 'pink'\n+\n+import matplotlib.pyplot as plt\n+import pytest\n+\n def test_ytickcolor_is_not_yticklabelcolor():\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..720663f 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,8 +1,8 @@\n+\n from io import BytesIO\n import ast\n import pickle\n-\n-import numpy as np\n+import pickletools\n import pytest\n \n import matplotlib as mpl\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..c0cfaaf 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -43,6 +43,31 @@ def test_simple():\n     ax.set_yscale('log')\n     pickle.dump(fig, BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n+def test_pickle_figure_with_aligned_labels():\n+    import matplotlib.pyplot as plt\n+    import pickle\n+    from io import BytesIO\n+\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()\n+\n+    # Test that the figure can be pickled\n+    pkl = BytesIO()\n+    pickle.dump(fig, pkl, pickle.HIGHEST_PROTOCOL)\n+    pkl.seek(0)\n+    loaded_fig = pickle.load(pkl)\n+    assert loaded_fig is not None  # Ensure the figure loads successfully\n+\n \n def _generate_complete_test_figure(fig_ref):\n     fig_ref.set_size_inches((10, 6))\n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..a715444 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -991,6 +991,47 @@ def test_hexbin_linear():\n     ax.hexbin(x, y, gridsize=(10, 5), marginals=True,\n               reduce_C_function=np.sum)\n \n+from matplotlib.testing.decorators import check_figures_equal\n+\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_behavior_upon_C_parameter(fig_test, fig_ref):\n+    # See: gh:12926\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # without C parameter\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # with C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=C,\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n+\n \n def test_hexbin_log_clim():\n     x, y = np.arange(200).reshape((2, 100))\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex 700190c..3ab233b 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -89,6 +89,38 @@ def test_contour_no_valid_levels():\n     ax.contour(np.ones((9, 9)))\n \n \n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths(fig_test, fig_ref):\n+    # Create contour plots\n+    cs_test = fig_test.subplots().contour([[0, 1], [1, 2]])\n+    cs_ref = fig_ref.subplots().contour([[1, 0], [2, 1]])\n+    \n+    # Set paths using the new method\n+    cs_test.set_paths(cs_ref.get_paths())\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths_no_change(fig_test, fig_ref):\n+    # Create a contour plot\n+    cs_test = fig_test.subplots().contour([[0, 1], [1, 2]])\n+    cs_ref = fig_ref.subplots().contour([[0, 1], [1, 2]])\n+    \n+    # Set paths to itself and ensure no change in appearance\n+    cs_test.set_paths(cs_test.get_paths())\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths_different_lengths(fig_test, fig_ref):\n+    # Create two contour plots with different data shapes\n+    cs_test = fig_test.subplots().contour([[0, 1], [1, 2], [2, 3]])\n+    cs_ref = fig_ref.subplots().contour([[1, 0], [2, 1]])\n+    \n+    # Setting paths from a different length should raise an error\n+    # Catch the error and assert its type\n+    try:\n+        cs_test.set_paths(cs_ref.get_paths())\n+        assert False, \"Expected ValueError for different lengths\"\n+    except ValueError:\n+        pass\n+\n def test_contour_Nlevels():\n     # A scalar levels arg or kwarg should trigger auto level generation.\n     # https://github.com/matplotlib/matplotlib/issues/11913\n",
  "mwaskom__seaborn-3069": "diff --git a/tests/_core/test_plot.py b/tests/_core/test_plot.py\nindex 3d202bc..dea07a0 100644\n--- a/tests/_core/test_plot.py\n+++ b/tests/_core/test_plot.py\n@@ -646,6 +646,44 @@ class TestScaling:\n             p.plot()\n \n \n+import matplotlib as mpl\n+import pytest\n+from seaborn import Plot\n+from seaborn._core.scales import Nominal\n+\n+def test_nominal_x_axis_inversion():\n+    # Test to ensure that the nominal scale on x-axis does not invert\n+    p = Plot(x=[\"c\", \"b\", \"a\"], y=[1, 2, 3]).scale(x=Nominal())\n+    ax = p.plot()._figure.axes[0]\n+    assert ax.get_xlim() == (-0.5, 2.5)\n+    assert not any(x.get_visible() for x in ax.xaxis.get_gridlines())\n+\n+def test_nominal_y_axis_inversion():\n+    # Test to ensure that the nominal scale on y-axis inverts as expected\n+    p = Plot(x=[1, 2, 3], y=[\"c\", \"b\", \"a\"]).scale(y=Nominal())\n+    ax = p.plot()._figure.axes[0]\n+    assert ax.get_ylim() == (2.5, -0.5)\n+    assert not any(y.get_visible() for y in ax.yaxis.get_gridlines())\n+\n+def test_nominal_axis_margins():\n+    # Test custom limits for nominal scale to ensure margins are respected\n+    lim_x = (-1, 3)\n+    p = Plot(x=[\"a\", \"b\", \"c\", \"d\"], y=[1, 2, 3, 4]).scale(x=Nominal())\n+    ax = p.limit(x=lim_x).plot()._figure.axes[0]\n+    assert ax.get_xlim() == lim_x\n+\n+    lim_y = (-1, 3)\n+    p = Plot(x=[1, 2, 3, 4], y=[\"a\", \"b\", \"c\", \"d\"]).scale(y=Nominal())\n+    ax = p.limit(y=lim_y).plot()._figure.axes[0]\n+    assert ax.get_ylim() == lim_y\n+\n+def test_nominal_scale_with_grid():\n+    # Test to ensure grid is not shown even with active style\n+    p = Plot(x=[\"a\", \"b\", \"c\"], y=[1, 2, 3]).scale(x=Nominal())\n+    ax = p.plot(style=\"whitegrid\")._figure.axes[0]\n+    assert not any(x.get_visible() for x in ax.xaxis.get_gridlines())\n+    assert not any(y.get_visible() for y in ax.yaxis.get_gridlines())\n+\n class TestPlotting:\n \n     def test_matplotlib_object_creation(self):\n",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..47e90dd 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -244,6 +244,23 @@ def test_default_static_max_age(app):\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n \n+import pytest\n+import flask\n+\n+def test_empty_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"\", __name__)\n+\n+def test_whitespace_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"   \", __name__)\n+\n+def test_valid_name_allowed(app, client):\n+    try:\n+        bp = flask.Blueprint(\"valid_name\", __name__)\n+    except ValueError:\n+        pytest.fail(\"Blueprint raised ValueError unexpectedly!\")\n+\n def test_templates_list(test_apps):\n     from blueprintapp import app\n \n",
  "psf__requests-1142": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex ff3d72b..d2757e3 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -347,6 +347,16 @@ class Session(SessionRedirectMixin):\n \n         return self.request('PUT', url, data=data, **kwargs)\n \n+    def put(self, url, data=None, **kwargs):\n+        \"\"\"Sends a PUT request. Returns :class:`Response` object.\n+\n+        :param url: URL for the new :class:`Request` object.\n+        :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.\n+        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n+        \"\"\"\n+\n+        return self.request('PUT', url, data=data, **kwargs)\n+\n     def patch(self, url, data=None, **kwargs):\n         \"\"\"Sends a PATCH request. Returns :class:`Response` object.\n \n",
  "psf__requests-1724": "diff --git a/requests/api.py b/requests/api.py\nindex 66d7f21..3f7529b 100644\n--- a/requests/api.py\n+++ b/requests/api.py\n@@ -12,9 +12,47 @@ This module implements the Requests API.\n \"\"\"\n \n from . import sessions\n+import requests\n+import unittest\n \n+class TestUnicodeMethodNames(unittest.TestCase):\n+    def test_unicode_method_post(self):\n+        files = {u'file': open(u'test_requests.py', u'rb')}\n+        r = requests.request(method=u'POST', url='http://httpbin.org/post', files=files)\n+        self.assertEqual(r.status_code, 200)\n \n-def request(method, url, **kwargs):\n+    def test_non_unicode_method_post(self):\n+        files = {'file': open('test_requests.py', 'rb')}\n+        r = requests.request(method='POST', url='http://httpbin.org/post', files=files)\n+        self.assertEqual(r.status_code, 200)\n+\n+    def test_unicode_method_get(self):\n+        r = requests.request(method=u'GET', url='http://httpbin.org/get')\n+        self.assertEqual(r.status_code, 200)\n+\n+    def test_non_unicode_method_get(self):\n+        r = requests.request(method='GET', url='http://httpbin.org/get')\n+        self.assertEqual(r.status_code, 200)\n+\n+    def test_unicode_method_put(self):\n+        r = requests.request(method=u'PUT', url='http://httpbin.org/put')\n+        self.assertEqual(r.status_code, 200)\n+\n+    def test_non_unicode_method_put(self):\n+        r = requests.request(method='PUT', url='http://httpbin.org/put')\n+        self.assertEqual(r.status_code, 200)\n+\n+    def test_unicode_method_delete(self):\n+        r = requests.request(method=u'DELETE', url='http://httpbin.org/delete')\n+        self.assertEqual(r.status_code, 200)\n+\n+    def test_non_unicode_method_delete(self):\n+        r = requests.request(method='DELETE', url='http://httpbin.org/delete')\n+        self.assertEqual(r.status_code, 200)\n+\n+\n+if __name__ == '__main__':\n+    unittest.main()\n     \"\"\"Constructs and sends a :class:`Request <Request>`.\n     Returns :class:`Response <Response>` object.\n \n",
  "psf__requests-1766": "",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..0637087 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,6 +81,11 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://*example.com'),\n+            (InvalidURL, 'http://.example.com'),\n+            (InvalidURL, 'http://example..com'),\n+            (InvalidURL, 'http://-example.com'),\n+            (InvalidURL, 'http://example.-com')\n         ))\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..6217b3d 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2309,6 +2309,42 @@ class TestAsCompatibleData:\n         assert isinstance(orig._data, CustomIndexable)\n \n \n+import numpy as np\n+import pytest\n+from xarray import Variable\n+\n+def test_variable_setitem_no_coercion():\n+    # Test that objects with a values property aren't coerced to the values attribute\n+\n+    # Type with a values property\n+    class HasValues:\n+        values = 5\n+\n+    # Create a Variable to store objects of object dtype\n+    obj_var = Variable(dims=(\"x\"), data=[None], dtype=object)\n+\n+    # Assign a set object; should remain a set\n+    obj_var[0] = set()\n+    assert isinstance(obj_var[0], set)\n+\n+    # Assign an object of type HasValues; should remain HasValues\n+    obj_var[0] = HasValues()\n+    assert isinstance(obj_var[0], HasValues)\n+\n+    # Test that the stored object is exactly the instance we assigned\n+    assert obj_var[0].values == 5\n+\n+    # Test with another custom object\n+    class AnotherObject:\n+        def __init__(self, val):\n+            self.values = val\n+\n+    another_var = Variable(dims=(\"y\"), data=[None], dtype=object)\n+    instance = AnotherObject(10)\n+    another_var[0] = instance\n+    assert another_var[0] is instance\n+    assert another_var[0].values == 10\n+\n def test_raise_no_warning_for_nan_in_binary_ops():\n     with pytest.warns(None) as record:\n         Variable(\"x\", [1, 2, np.NaN]) > 0\n",
  "pydata__xarray-3095": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex 274cb25..92c5545 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -3480,7 +3480,14 @@ class TestDataArray:\n \n         assert_identical(da['a'], expected_orig)\n \n-    def test_real_and_imag(self):\n+    def test_copy_unicode_index(self):\n+        ds = xr.Dataset(\n+            coords={'x': ['foo'], 'y': ('x', ['bar'])},\n+            data_vars={'z': ('x', ['baz'])}\n+        )\n+        da = ds['z']\n+        da_copy = da.copy(deep=True)\n+        assert da.indexes['x'].dtype.kind == da_copy.indexes['x'].dtype.kind\n         array = DataArray(1 + 2j)\n         assert_identical(array.real, DataArray(1))\n         assert_identical(array.imag, DataArray(2))\n",
  "pydata__xarray-3151": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 026dec9..7cea900 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -574,7 +574,31 @@ class TestCombineAuto:\n         def test_empty_input(self):\n             assert_identical(Dataset(), combine_by_coords([]))\n \n-    def test_infer_order_from_coords(self):\n+    def test_combine_non_monotonic_identical_coords(self):\n+        # Test for non-monotonic identical coordinates\n+        yCoord = ['a', 'c', 'b']  # non-monotonic\n+\n+        data1 = np.random.rand(3, 3)\n+        data2 = np.random.rand(4, 3)\n+\n+        ds1 = Dataset(\n+            data_vars=dict(data=(['x', 'y'], data1)),\n+            coords=dict(x=[1, 2, 3], y=yCoord)\n+        )\n+\n+        ds2 = Dataset(\n+            data_vars=dict(data=(['x', 'y'], data2)),\n+            coords=dict(x=[4, 5, 6, 7], y=yCoord)\n+        )\n+\n+        expected_data = np.concatenate((data1, data2), axis=0)\n+        expected = Dataset(\n+            data_vars=dict(data=(['x', 'y'], expected_data)),\n+            coords=dict(x=[1, 2, 3, 4, 5, 6, 7], y=yCoord)\n+        )\n+\n+        actual = combine_by_coords((ds1, ds2))\n+        assert_identical(expected, actual)\n         data = create_test_data()\n         objs = [data.isel(dim2=slice(4, 9)), data.isel(dim2=slice(4))]\n         actual = combine_by_coords(objs)\n",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..773a32a 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2309,8 +2309,30 @@ class TestDataArray:\n                     self.dv.values, np.array(q) * 100, axis=axis\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n-\n-    def test_reduce_keep_attrs(self):\n+    \n+    def test_quantile_keep_attrs(self):\n+        # Simple DataArray with attributes\n+        da = DataArray([0, 0], dims=\"x\", attrs={'units': 'K'})\n+        out = da.quantile(.9, dim='x', keep_attrs=True)\n+        assert out.attrs == {'units': 'K'}, f\"Expected {{'units': 'K'}}, got {out.attrs}\"\n+        \n+        # Test with keep_attrs=False\n+        out = da.quantile(.9, dim='x', keep_attrs=False)\n+        assert out.attrs == {}, f\"Expected {{}}, got {out.attrs}\"\n+\n+        # Test with multi-dimensional array and attributes\n+        da_multi = DataArray([[0, 1], [2, 3]], dims=[\"x\", \"y\"], attrs={'description': 'test array'})\n+        out_multi = da_multi.quantile(.5, dim='x', keep_attrs=True)\n+        assert out_multi.attrs == {'description': 'test array'}, f\"Expected {{'description': 'test array'}}, got {out_multi.attrs}\"\n+        \n+        # Test when no attrs are present\n+        da_no_attrs = DataArray([0, 1, 2], dims=\"x\")\n+        out_no_attrs = da_no_attrs.quantile(.5, dim='x', keep_attrs=True)\n+        assert out_no_attrs.attrs == {}, f\"Expected {{}}, got {out_no_attrs.attrs}\"\n+        \n+        # Test multiple quantiles\n+        out_multiple = da.quantile([.25, .75], dim='x', keep_attrs=True)\n+        assert out_multiple.attrs == {'units': 'K'}, f\"Expected {{'units': 'K'}}, got {out_multiple.attrs}\"\n         # Test dropped attrs\n         vm = self.va.mean()\n         assert len(vm.attrs) == 0\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..1a7c874 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import pytest\n \n@@ -159,6 +160,26 @@ class TestMergeMethod:\n         with raises_regex(ValueError, \"should be coordinates or not\"):\n             data.merge(data.reset_coords())\n \n+    def test_merge_dataarray(self):\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+\n+        # Test if the ds.merge(da) works the same as xr.merge([ds, da])\n+        expected = xr.merge([ds, da])\n+        actual = ds.merge(da)\n+        assert_identical(expected, actual)\n+\n+        # Test with a more complex DataArray\n+        da2 = xr.DataArray(data=[1, 2, 3], dims=\"x\", name=\"c\")\n+        expected2 = xr.merge([ds, da2])\n+        actual2 = ds.merge(da2)\n+        assert_identical(expected2, actual2)\n+\n+        # Test if merging DataArray with overlapping variables raises an error\n+        da_overlap = xr.DataArray(data=2, name=\"a\")\n+        with pytest.raises(xr.MergeError):\n+            ds.merge(da_overlap)\n+\n     def test_merge_broadcast_equals(self):\n         ds1 = xr.Dataset({\"x\": 0})\n         ds2 = xr.Dataset({\"x\": (\"y\", [0, 0])})\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "diff --git a/xarray/tests/test_duck_array_ops.py b/xarray/tests/test_duck_array_ops.py\nindex 0c63f0f..489a185 100644\n--- a/xarray/tests/test_duck_array_ops.py\n+++ b/xarray/tests/test_duck_array_ops.py\n@@ -604,6 +604,38 @@ def test_min_count_dataset(func):\n     assert_allclose(actual, expected)\n \n \n+import pytest\n+import numpy as np\n+from xarray import DataArray, Dataset\n+from xarray.tests import assert_allclose, assert_dask_array, has_dask, construct_dataarray\n+\n+@pytest.mark.parametrize(\"dtype\", [float, int, np.float32, np.bool_])\n+@pytest.mark.parametrize(\"dask\", [False, True])\n+@pytest.mark.parametrize(\"func\", [\"sum\", \"prod\"])\n+@pytest.mark.parametrize(\"min_count\", [0, 1, 2, 3, 4])  # Adding different min_count values\n+def test_min_count_multiple_dims(dtype, dask, func, min_count):\n+    if dask and not has_dask:\n+        pytest.skip(\"requires dask\")\n+\n+    # Create a 3D data array with NaNs\n+    da = construct_dataarray(3, dtype, contains_nan=True, dask=dask)\n+\n+    # Perform the reduction across all dimensions\n+    actual = getattr(da, func)(dim=(\"x\", \"y\", \"z\"), skipna=True, min_count=min_count)\n+\n+    # Calculate the expected result manually considering NaNs and min_count\n+    if min_count > 0:\n+        # If min_count is greater than 0, mimic the reduction by hand assuming NaNs are ignored\n+        expected = da.to_numpy().sum(axis=(0, 1, 2), where=~np.isnan(da.to_numpy()))\n+        if np.isnan(da.to_numpy()).sum() >= min_count:\n+            expected = np.nan\n+    else:\n+        expected = da.to_numpy().sum(axis=(0, 1, 2), where=~np.isnan(da.to_numpy()))\n+\n+    assert_allclose(actual, expected)\n+    assert_dask_array(actual, dask)\n+\n+\n @pytest.mark.parametrize(\"dtype\", [float, int, np.float32, np.bool_])\n @pytest.mark.parametrize(\"dask\", [False, True])\n @pytest.mark.parametrize(\"func\", [\"sum\", \"prod\"])\n",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..69bedad 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -109,7 +109,34 @@ class TestMergeFunction:\n             expected.attrs = expected_attrs\n             assert actual.identical(expected)\n \n-    def test_merge_dicts_simple(self):\n+    def test_merge_attrs_override_copy(self):\n+        import xarray as xr\n+        ds1 = xr.Dataset(attrs={\"x\": 0})\n+        ds2 = xr.Dataset(attrs={\"x\": 1})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"x\"] = 2\n+        assert ds1.attrs[\"x\"] == 0\n+        assert ds2.attrs[\"x\"] == 1\n+        assert ds3.attrs[\"x\"] == 2\n+\n+    def test_merge_attrs_override_reference(self):\n+        import xarray as xr\n+        ds1 = xr.Dataset(attrs={\"a\": \"b\"})\n+        ds2 = xr.Dataset(attrs={\"a\": \"c\"})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"a\"] = \"d\"\n+        assert ds1.attrs[\"a\"] == \"b\"\n+        assert ds2.attrs[\"a\"] == \"c\"\n+        assert ds3.attrs[\"a\"] == \"d\"\n+\n+    def test_merge_attrs_no_conflicts(self):\n+        import xarray as xr\n+        ds1 = xr.Dataset(attrs={\"x\": 0, \"y\": 1})\n+        ds2 = xr.Dataset(attrs={\"x\": 0, \"z\": 2})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"no_conflicts\")\n+        assert ds3.attrs[\"x\"] == 0\n+        assert ds3.attrs[\"y\"] == 1\n+        assert ds3.attrs[\"z\"] == 2\n         actual = xr.merge([{\"foo\": 0}, {\"bar\": \"one\"}, {\"baz\": 3.5}])\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n         assert actual.identical(expected)\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..eccf360 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1922,7 +1922,28 @@ def test_where() -> None:\n     assert_identical(expected, actual)\n \n \n-@pytest.mark.parametrize(\"use_dask\", [True, False])\n+def test_where_keep_attrs_true() -> None:\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr_cond\": \"cond_attr\"})\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x_attr\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y_attr\"})\n+\n+    # Test with keep_attrs=True\n+    actual = xr.where(cond, x, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x_attr\"})\n+    assert_identical(expected, actual)\n+\n+    # Ensure attributes of 'cond' are not mixed into the result\n+    assert \"attr_cond\" not in actual.attrs\n+\n+def test_where_keep_attrs_false() -> None:\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr_cond\": \"cond_attr\"})\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x_attr\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y_attr\"})\n+\n+    # Test with keep_attrs=False\n+    actual = xr.where(cond, x, y, keep_attrs=False)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={})\n+    assert_identical(expected, actual)\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n def test_polyval(use_dask, use_datetime) -> None:\n     if use_dask and not has_dask:\n",
  "pydata__xarray-4695": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex 3a4b8ad..3b45358 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -1165,6 +1165,16 @@ class TestDataArray:\n         assert_identical(da[\"x\"], get_data()[\"x\"])\n         assert_identical(da[\"non-dim\"], get_data()[\"non-dim\"])\n \n+    def test_loc_dim_name_collision_with_sel_params(self):\n+        da = DataArray(\n+            [[0, 0], [1, 1]],\n+            dims=[\"dim1\", \"method\"],\n+            coords={\"dim1\": [\"x\", \"y\"], \"method\": [\"a\", \"b\"]},\n+        )\n+        np.testing.assert_array_equal(\n+            da.loc[dict(dim1=[\"x\", \"y\"], method=[\"a\"])], [[0], [1]]\n+        )\n+\n     def test_loc_single_boolean(self):\n         data = DataArray([0, 1], coords=[[True, False]])\n         assert data.loc[True] == 0\n",
  "pydata__xarray-4966": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex 2dbb0b4..686f663 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -2,6 +2,34 @@ from contextlib import suppress\n \n import numpy as np\n import pandas as pd\n+@pytest.mark.parametrize(\"dtype\", [\"i1\", \"u1\"])\n+def test_decode_signed_from_unsigned_custom(dtype):\n+    unsigned_dtype = np.dtype(dtype)\n+    signed_dtype = np.dtype(f\"i{unsigned_dtype.itemsize * 8}\")\n+    if unsigned_dtype.kind == \"u\":\n+        original_values = np.array([-1], dtype=signed_dtype)\n+        encoded = xr.Variable(\n+            (\"x\",), original_values.astype(unsigned_dtype), attrs={\"_Unsigned\": \"false\"}\n+        )\n+        coder = variables.UnsignedIntegerCoder()\n+        decoded = coder.decode(encoded)\n+        assert decoded.dtype == signed_dtype\n+        assert np.array_equal(decoded.values, original_values)\n+\n+@pytest.mark.parametrize(\"dtype\", [\"i1\", \"u1\"])\n+def test_decode_unsigned_from_signed_custom(dtype):\n+    signed_dtype = np.dtype(dtype)\n+    unsigned_dtype = np.dtype(f\"u{signed_dtype.itemsize * 8}\")\n+    if signed_dtype.kind == \"i\":\n+        original_values = np.array([np.iinfo(unsigned_dtype).max], dtype=unsigned_dtype)\n+        encoded = xr.Variable(\n+            (\"x\",), original_values.astype(signed_dtype), attrs={\"_Unsigned\": \"true\"}\n+        )\n+        coder = variables.UnsignedIntegerCoder()\n+        decoded = coder.decode(encoded)\n+        assert decoded.dtype == unsigned_dtype\n+        assert np.array_equal(decoded.values, original_values)\n+\n import pytest\n \n import xarray as xr\n@@ -9,6 +37,8 @@ from xarray.coding import variables\n from xarray.conventions import decode_cf_variable, encode_cf_variable\n \n from . import assert_allclose, assert_equal, assert_identical, requires_dask\n+import numpy as np\n+import xarray as xr\n \n with suppress(ImportError):\n     import dask.array as da\n",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..45bc1a4 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1919,6 +1919,36 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n+def test_where_scalar_with_keep_attrs():\n+    # Test xr.where with scalar values and keep_attrs=True\n+    cond = xr.DataArray([True, False, True], dims=\"x\")\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={})\n+    assert_identical(expected, actual)\n+\n+def test_where_scalar_cond():\n+    # Test with scalar as condition\n+    cond = xr.DataArray(True, attrs={\"attr\": \"cond\"})\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    actual = xr.where(cond, x, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected, actual)\n+\n+def test_where_scalar_x():\n+    # Test with scalar as x\n+    cond = xr.DataArray([True, False], dims=\"x\")\n+    actual = xr.where(cond, 1, xr.DataArray([0, 0], dims=\"x\"), keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={})\n+    assert_identical(expected, actual)\n+\n+def test_where_scalar_y():\n+    # Test with scalar as y\n+    cond = xr.DataArray([True, False], dims=\"x\")\n+    actual = xr.where(cond, xr.DataArray([1, 1], dims=\"x\"), 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={})\n+    assert_identical(expected, actual)\n+\n \n def test_where_attrs() -> None:\n     cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n@@ -1928,6 +1958,36 @@ def test_where_attrs() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n     assert_identical(expected, actual)\n \n+def test_where_scalar_with_keep_attrs():\n+    # Test xr.where with scalar values and keep_attrs=True\n+    cond = xr.DataArray([True, False, True], dims=\"x\")\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={})\n+    assert_identical(expected, actual)\n+\n+def test_where_scalar_cond():\n+    # Test with scalar as condition\n+    cond = xr.DataArray(True, attrs={\"attr\": \"cond\"})\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    actual = xr.where(cond, x, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected, actual)\n+\n+def test_where_scalar_x():\n+    # Test with scalar as x\n+    cond = xr.DataArray([True, False], dims=\"x\")\n+    actual = xr.where(cond, 1, xr.DataArray([0, 0], dims=\"x\"), keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={})\n+    assert_identical(expected, actual)\n+\n+def test_where_scalar_y():\n+    # Test with scalar as y\n+    cond = xr.DataArray([True, False], dims=\"x\")\n+    actual = xr.where(cond, xr.DataArray([1, 1], dims=\"x\"), 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={})\n+    assert_identical(expected, actual)\n+\n \n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n",
  "pydata__xarray-6599": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f1ec005..c0f6173 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -2000,6 +2000,14 @@ def test_where_attrs() -> None:\n             xr.Dataset({\"a\": (\"x\", [1, 2, 3]), \"b\": (\"y\", [3, 4, 5])}),\n             id=\"dataset-dataset\",\n         ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array([1000, 2000, 3000], dtype=\"timedelta64[ns]\"), dims=\"x\"\n+            ),\n+            xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n+            xr.DataArray([1000.0, 2000.0, 3000.0], dims=\"x\"),\n+            id=\"timedelta\",\n+        ),\n         pytest.param(\n             xr.DataArray(pd.date_range(\"1970-01-01\", freq=\"s\", periods=3), dims=\"x\"),\n             xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n@@ -2010,6 +2018,14 @@ def test_where_attrs() -> None:\n             ),\n             id=\"datetime\",\n         ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array([1000, 2000, 3000], dtype=\"timedelta64[ns]\"), dims=\"x\"\n+            ),\n+            xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n+            xr.DataArray([1000.0, 2000.0, 3000.0], dims=\"x\"),\n+            id=\"timedelta\",\n+        ),\n     ],\n )\n def test_polyval(\n",
  "pydata__xarray-6721": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex cab9007..f09aa91 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -220,7 +220,17 @@ class InaccessibleVariableDataStore(backends.InMemoryDataStore):\n         return {k: lazy_inaccessible(k, v) for k, v in self._variables.items()}\n \n \n+from xarray.tests import InaccessibleVariableDataStore, UnexpectedDataAccess\n+import pytest\n+\n class TestDataset:\n+    def test_chunks_does_not_load_data(self) -> None:\n+        # Regression test for GH6538\n+        store = InaccessibleVariableDataStore()\n+        create_test_data().dump_to_store(store)\n+        ds = open_dataset(store)\n+        with pytest.raises(UnexpectedDataAccess):\n+            ds.chunks\n     def test_repr(self) -> None:\n         data = create_test_data(seed=123)\n         data.attrs[\"foo\"] = \"bar\"\n",
  "pydata__xarray-6744": "diff --git a/xarray/tests/test_rolling.py b/xarray/tests/test_rolling.py\nindex 0a9ef75..58e610f 100644\n--- a/xarray/tests/test_rolling.py\n+++ b/xarray/tests/test_rolling.py\n@@ -27,6 +27,23 @@ pytestmark = [\n \n class TestDataArrayRolling:\n     @pytest.mark.parametrize(\"da\", (1, 2), indirect=True)\n+    @pytest.mark.parametrize(\"center\", [True, False])\n+    def test_rolling_iter_center(self, da, center) -> None:\n+        size = 3\n+        rolling_obj = da.rolling(time=size, center=center)\n+        rolling_obj_mean = rolling_obj.mean()\n+\n+        # This test verifies manually iterating over the rolling object\n+        for i, (label, window_da) in enumerate(rolling_obj):\n+            actual = window_da.mean(\"time\")\n+            expected_index = i if not center else i - (size // 2)\n+            if 0 <= expected_index < len(da[\"time\"]):\n+                expected = da.isel(time=slice(max(expected_index, 0),\n+                                              min(expected_index + size, len(da[\"time\"]))))\n+                expected = expected.mean(\"time\")\n+                assert np.allclose(actual.values, expected.values, equal_nan=True)\n+            else:\n+                assert np.isnan(actual.values).all()\n     def test_rolling_iter(self, da) -> None:\n         rolling_obj = da.rolling(time=7)\n         rolling_obj_mean = rolling_obj.mean()\n",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "diff --git a/xarray/tests/test_indexes.py b/xarray/tests/test_indexes.py\nindex fa8bd84..66534c4 100644\n--- a/xarray/tests/test_indexes.py\n+++ b/xarray/tests/test_indexes.py\n@@ -696,4 +696,32 @@ def test_safe_cast_to_index_datetime_datetime():\n     expected = pd.Index(dates)\n     actual = safe_cast_to_index(np.array(dates))\n     assert_array_equal(expected, actual)\n-    assert isinstance(actual, pd.Index)\n+    assert isinstance(actual, pd.Index)\n+\n+import pytest\n+import xarray as xr\n+import numpy as np\n+\n+@pytest.mark.parametrize(\"dtype\", [\"int32\", \"float32\", \"int64\", \"float64\", \"uint32\"])\n+def test_restore_dtype_on_multiindexes(dtype: str) -> None:\n+    foo = xr.Dataset(coords={\"bar\": (\"bar\", np.array([0, 1], dtype=dtype))})\n+    foo = foo.stack(baz=(\"bar\",))\n+    assert str(foo[\"bar\"].values.dtype) == dtype\n+\n+def test_stack_preserve_dtype_with_different_shapes():\n+    ds = xr.Dataset(coords={\"a\": ([\"x\"], np.array([0, 1, 2], dtype=\"int32\"))})\n+    ds = ds.stack(b=(\"x\",))\n+    assert ds[\"a\"].values.dtype == np.dtype(\"int32\")\n+\n+    ds = xr.Dataset(coords={\"a\": ([\"y\"], np.array([0, -1], dtype=\"float32\"))})\n+    ds = ds.stack(b=(\"y\",))\n+    assert ds[\"a\"].values.dtype == np.dtype(\"float32\")\n+\n+def test_stack_multiple_dimensions():\n+    ds = xr.Dataset(coords={\n+        \"a\": ([\"x\"], np.array([0, 1, 2], dtype=\"int32\")),\n+        \"b\": ([\"y\"], np.array([-1, 0, 1], dtype=\"int32\"))\n+    })\n+    ds = ds.stack(c=(\"x\", \"y\"))\n+    assert ds[\"a\"].values.dtype == np.dtype(\"int32\")\n+    assert ds[\"b\"].values.dtype == np.dtype(\"int32\")\n",
  "pylint-dev__pylint-4970": "diff --git a/tests/checkers/unittest_similar.py b/tests/checkers/unittest_similar.py\nindex 97cd4d0..de022c0 100644\n--- a/tests/checkers/unittest_similar.py\n+++ b/tests/checkers/unittest_similar.py\n@@ -493,12 +493,39 @@ def test_get_map_data() -> None:\n             sim.append_stream(source_fname, stream)\n         # The map bit, can you tell? ;)\n         data.extend(sim.get_map_data())\n+from io import StringIO\n+from contextlib import redirect_stdout\n+import pytest\n+from pylint.checkers.similar import Similar\n+\n+def test_set_duplicate_lines_to_zero() -> None:\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        similar.Run([\"--duplicates=0\", \"test_file1.py\", \"test_file2.py\"])\n+    assert ex.value.code == 0\n+    assert output.getvalue() == \"\"\n \n-    assert len(expected_linelists) == len(data)\n+def test_set_duplicate_lines_above_zero() -> None:\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        similar.Run([\"--duplicates=1\", \"test_file1.py\", \"test_file2.py\"])\n+    assert ex.value.code == 0\n+    # Assuming these files might have at least one line that is the same\n+    # This is an example; actual test files should be provided\n+    assert \"test_file1.py\" not in output.getvalue() and \"test_file2.py\" not in output.getvalue()\n+\n+def test_set_duplicate_lines_to_nonzero() -> None:\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        similar.Run([\"--duplicates=5\", \"test_file1.py\", \"test_file2.py\"])\n+    assert ex.value.code == 0\n+    # Assuming these files have duplicate blocks larger than 5 lines\n+    # This is an example; actual test files should be provided\n+    assert \"test_file1.py\" in output.getvalue() or \"test_file2.py\" in output.getvalue()\n     for source_fname, expected_lines, lineset_obj in zip(\n         source_streams, expected_linelists, data\n     ):\n         assert source_fname == lineset_obj.name\n         # There doesn't seem to be a faster way of doing this, yet.\n         lines = (linespec.text for linespec in lineset_obj.stripped_lines)\n-        assert tuple(expected_lines) == tuple(lines)\n+        assert tuple(expected_lines) == tuple(lines)\n",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..b31b5ae 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -94,9 +94,30 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+import pytest\n+from pylint.lint import Run\n+from _pytest.capture import CaptureFixture\n+\n+EMPTY_MODULE = \"test_files/empty_module.py\"\n+\n+\n+def test_short_verbose_with_argument(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that using -v followed by an argument results in an error.\"\"\"\n+    with pytest.raises(SystemExit):\n+        Run([str(EMPTY_MODULE), \"-v\", \"extra_argument\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"argument --verbose/-v: expected one argument\" in output.err\n+\n+\n+def test_long_verbose_no_argument(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that using --verbose without an argument works correctly.\"\"\"\n+    Run([str(EMPTY_MODULE), \"--verbose\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9123ae4..4197e7c 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1233,6 +1233,48 @@ class TestRunTC:\n             expected_output=\"No such file or directory\",\n         )\n \n+    def test_ignore_in_recursive(self):\n+        \"\"\"Test that files and directories are properly ignored in recursive mode.\"\"\"\n+        # Test ignoring a specific file\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore=failing.py\",\n+            ],\n+            code=0,\n+        )\n+\n+        # Test ignoring a directory\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore=ignored_subdirectory\",\n+            ],\n+            code=0,\n+        )\n+\n+        # Test ignoring files based on pattern\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-patterns=ignored_.*\",\n+            ],\n+            code=0,\n+        )\n+\n+        # Test ignoring paths using regex\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-paths=.*directory/ignored.*\",\n+            ],\n+            code=0,\n+        )\n+\n     def test_recursive(self):\n         self._runtest(\n             [join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"), \"--recursive=y\"],\n",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..048941f 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,63 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_paths_with_recursive_option(self):\n+        \"\"\"Tests that files in ignored paths are not analyzed when using --recursive option.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^ignored_subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n+\n+    def test_multiple_ignore_paths_recursive(self):\n+        \"\"\"Tests multiple ignore paths patterns are respected.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^ignored_subdirectory/.*|^another_ignored/.*\",\n+                    ],\n+                    code=0,\n+                )\n+\n+    def test_no_ignore_paths_specified(self):\n+        \"\"\"Tests that no paths are ignored when ignore-paths is empty.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=\",\n+                    ],\n+                    code=0,\n+                )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7277": "",
  "pytest-dev__pytest-10051": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex 26c4c15..6b0af68 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -160,6 +160,46 @@ def logging_during_setup_and_teardown(caplog):\n     assert [x.message for x in caplog.get_records(\"teardown\")] == [\"a_teardown_log\"]\n \n \n+import logging\n+\n+def test_caplog_clear_and_get_records_consistency(caplog):\n+    \"\"\"Test to ensure caplog.get_records is consistent with caplog.records after clear.\"\"\"\n+    \n+    def verify_consistency():\n+        \"\"\"Helper to assert consistency between get_records and records.\"\"\"\n+        assert caplog.get_records(\"call\") == caplog.records\n+\n+    # Initial state checks\n+    verify_consistency()\n+    logging.info(\"test message 1\")\n+    verify_consistency()\n+\n+    # Clear logs and check consistency\n+    caplog.clear()\n+    verify_consistency()\n+\n+    # Log again and verify consistency\n+    logging.info(\"test message 2\")\n+    verify_consistency()\n+    \n+    # Verify specific content\n+    assert [x.getMessage() for x in caplog.get_records(\"call\")] == [\"test message 2\"]\n+\n+def test_caplog_clear_resets_records(caplog):\n+    \"\"\"Test that caplog.clear properly resets caplog records.\"\"\"\n+\n+    logging.info(\"message before clear\")\n+    assert len(caplog.records) == 1\n+\n+    # Clear and assert that records are reset\n+    caplog.clear()\n+    assert len(caplog.records) == 0\n+\n+    # Log again and check records\n+    logging.info(\"message after clear\")\n+    assert len(caplog.records) == 1\n+    assert [x.getMessage() for x in caplog.records] == [\"message after clear\"]\n+\n def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardown):\n     assert not caplog.records\n     assert not caplog.get_records(\"call\")\n",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 561df7f..0bdb26c 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -1274,7 +1274,27 @@ def test_pdb_teardown_skipped(\n     assert tracked == []\n \n \n-def test_async_support(pytester: Pytester) -> None:\n+def test_pdb_teardown_does_not_run_for_skipped_classes(pytester: Pytester) -> None:\n+    \"\"\"Ensure that tearDown does not run for classes marked with unittest.skip when using --pdb.\"\"\"\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+\n+        @unittest.skip(\"Skip this test class\")\n+        class TestSkippedClass(unittest.TestCase):\n+\n+            def setUp(self):\n+                self._setup_ran = True\n+\n+            def tearDown(self):\n+                assert False, \"tearDown should not be called for skipped tests\"\n+\n+            def test_something(self):\n+                pass\n+        \"\"\"\n+    )\n+    result = pytester.runpytest_inprocess(\"--pdb\")\n+    result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n     pytest.importorskip(\"unittest.async_case\")\n \n     pytester.copy_example(\"unittest/test_unittest_asyncio.py\")\n",
  "pytest-dev__pytest-5262": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 1f092b0..7b4c3d8 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -1051,9 +1051,29 @@ class TestFDCapture(object):\n             cap.done()\n             pytest.raises(AttributeError, cap.suspend)\n \n+def test_encoded_file_write_mode():\n+    import sys\n+    from _pytest.capture import EncodedFile\n+    from io import StringIO\n \n-@contextlib.contextmanager\n-def saved_fd(fd):\n+    # Create a mock underlying buffer\n+    buffer = StringIO()\n+    encoded_file = EncodedFile(buffer, encoding='utf-8')\n+\n+    # Test writing a string\n+    encoded_file.write(\"test string\")\n+    assert buffer.getvalue() == \"test string\"\n+\n+    # Test that writing bytes raises TypeError\n+    try:\n+        encoded_file.write(b\"test bytes\")\n+    except TypeError as e:\n+        assert str(e) == \"write() argument must be str, not bytes\"\n+    else:\n+        assert False, \"Expected TypeError not raised\"\n+\n+    # Ensure mode does not include 'b'\n+    assert 'b' not in getattr(sys.stdout, 'mode', '')\n     new_fd = os.dup(fd)\n     try:\n         yield\n",
  "pytest-dev__pytest-5631": "",
  "pytest-dev__pytest-5809": "diff --git a/src/_pytest/pastebin.py b/src/_pytest/pastebin.py\nindex 9c2c4cd..7200d8d 100644\n--- a/src/_pytest/pastebin.py\n+++ b/src/_pytest/pastebin.py\n@@ -79,7 +79,7 @@ def create_new_paste(contents):\n \n     params = {\n         \"code\": contents,\n-        \"lexer\": \"python3\" if sys.version_info[0] >= 3 else \"python\",\n+        \"lexer\": \"text\",\n         \"expiry\": \"1week\",\n     }\n     url = \"https://bpaste.net\"\n",
  "pytest-dev__pytest-6202": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex fb6b260..5d4d35a 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -703,6 +703,28 @@ class Test_genitems:\n         assert items[2].name == \"testmethod_one\"\n \n         # let's also test getmodpath here\n+\n+        # Additional test case for issue #6189\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+\n+            @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+            def testmethod_two(self, arg0):\n+                pass\n+\n+            class TestY(object):\n+                @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+                def testmethod_two(self, arg0):\n+                    pass\n+            \"\"\"\n+        )\n+        items, reprec = testdir.inline_genitems(p)\n+        assert len(items) == 4\n+        assert items[0].name == \"testmethod_two[.[]\"\n+        assert items[3].name == \"testmethod_two[.[]\"\n+        assert items[0].getmodpath() == \"testmethod_two[.[]\"\n+        assert items[3].getmodpath() == \"TestY.testmethod_two[.[]\"\n         assert items[0].getmodpath() == \"testone\"\n         assert items[1].getmodpath() == \"TestX.testmethod_one\"\n         assert items[2].getmodpath() == \"TestY.testmethod_one\"\n",
  "pytest-dev__pytest-7205": "diff --git a/testing/test_setuponly.py b/testing/test_setuponly.py\nindex 8211d39..79dc7b7 100644\n--- a/testing/test_setuponly.py\n+++ b/testing/test_setuponly.py\n@@ -1,3 +1,4 @@\n+\n import pytest\n from _pytest.config import ExitCode\n \n@@ -200,8 +201,22 @@ def test_show_fixtures_with_parameter_ids_function(testdir, mode):\n \n     result.stdout.fnmatch_lines([\"*SETUP    F foobar?FOO?\", \"*SETUP    F foobar?BAR?\"])\n \n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue: BytesWarning when using --setup-show with bytes parameter\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n \n-def test_dynamic_fixture_request(testdir):\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    # Run pytest with ByteWarning enabled and --setup-show\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n     p = testdir.makepyfile(\n         \"\"\"\n         import pytest\n",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..426712e 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -607,7 +607,17 @@ class TestSkip:\n         result = testdir.runpytest(\"-rs\")\n         result.stdout.fnmatch_lines([\"*unconditional skip*\", \"*1 skipped*\"])\n \n-    def test_skip_with_reason(self, testdir):\n+    def test_skip_with_runxfail_and_skip_marker(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skip(reason=\"skip with runxfail\")\n+            def test_skip_location():\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(\"-rs\", \"--runxfail\")\n+        result.stdout.fnmatch_lines([\"*test_skip_location*\", \"*unconditional skip*\", \"*1 skipped*\"])\n         testdir.makepyfile(\n             \"\"\"\n             import pytest\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..690144c 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,6 +1,8 @@\n+\n import sys\n \n import pytest\n+from _pytest.pytester import Testdir\n from _pytest.runner import runtestprotocol\n from _pytest.skipping import evaluate_skip_marks\n from _pytest.skipping import evaluate_xfail_marks\n@@ -155,7 +157,33 @@ class TestEvaluation:\n \n class TestXFail:\n     @pytest.mark.parametrize(\"strict\", [True, False])\n-    def test_xfail_simple(self, testdir, strict):\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Verify that a dynamically added xfail marker results in an xfailed test if it fails.\n+        test_file = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(test_file)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(\n+        self, testdir: Testdir\n+    ) -> None:\n+        # Verify that a dynamically added xfail marker with strict=True results in a failed test if it passes.\n+        test_file = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+                assert 1\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(test_file)\n+        result.assert_outcomes(failed=1)\n         item = testdir.getitem(\n             \"\"\"\n             import pytest\n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..14e588a 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -513,8 +513,11 @@ class TestCaptureFixture:\n             \"\"\"\n         )\n         reprec.assertoutcome(passed=1)\n-\n-    def test_capfdbinary(self, testdir):\n+    @pytest.mark.parametrize(\"nl\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_cafd_preserves_newlines(self, capfd, nl):\n+        print(\"test\", end=nl)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(nl)\n         reprec = testdir.inline_runsource(\n             \"\"\"\\\n             def test_hello(capfdbinary):\n",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..17c5148 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import pytest\n@@ -49,6 +50,30 @@ def test_change_level_undo(testdir):\n     result.stdout.fnmatch_lines([\"*log from test1*\", \"*2 failed in *\"])\n     result.stdout.no_fnmatch_line(\"*log from test2*\")\n \n+def test_change_level_undos_handler_level(testdir):\n+    \"\"\"Ensure that 'set_level' is undone after the end of the test (handler).\"\"\"\n+\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test1(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(41)\n+            assert caplog.handler.level == 41\n+\n+        def test2(caplog):\n+            assert caplog.handler.level == 0\n+\n+        def test3(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(43)\n+            assert caplog.handler.level == 43\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=3)\n+\n \n def test_with_statement(caplog):\n     with caplog.at_level(logging.INFO):\n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..b9b897c 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,3 +1,4 @@\n+\n import os\n import pprint\n import sys\n@@ -9,6 +10,7 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n+from _pytest.pytester import Pytester\n from _pytest.pytester import Testdir\n \n \n@@ -1178,7 +1180,34 @@ def test_collect_symlink_out_of_tree(testdir):\n     assert result.ret == 0\n \n \n-def test_collectignore_via_conftest(testdir):\n+def test_collect_symlinked_nested_dir(pytester: Pytester) -> None:\n+    \"\"\"A nested symlinked directory is collected.\"\"\"\n+    outer_dir = pytester.mkdir(\"outer_dir\")\n+    inner_dir = outer_dir.mkdir(\"inner_dir\")\n+    inner_dir.joinpath(\"test_nested.py\").write_text(\"def test_nested(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_outer\").symlink_to(outer_dir)\n+    \n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+\n+def test_collect_symlink_loop(pytester: Pytester) -> None:\n+    \"\"\"Test if pytest can handle symlink loops.\"\"\"\n+    loop_dir = pytester.mkdir(\"loop_dir\")\n+    loop_dir.joinpath(\"test_loop.py\").write_text(\"def test_loop(): pass\", \"utf-8\")\n+    loop_dir.joinpath(\"self_symlink\").symlink_to(loop_dir)\n+\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=1)\n+\n+\n+def test_collect_broken_symlink(pytester: Pytester) -> None:\n+    \"\"\"Test if pytest can handle broken symlinks.\"\"\"\n+    broken_symlink = pytester.path.joinpath(\"broken_symlink\")\n+    broken_symlink.symlink_to(pytester.path.joinpath(\"non_existent_dir\"))\n+\n+    result = pytester.runpytest()\n+    result.assert_outcomes()\n     \"\"\"collect_ignore in parent conftest skips importing child (issue #4592).\"\"\"\n     tests = testdir.mkpydir(\"tests\")\n     tests.ensure(\"conftest.py\").write(\"collect_ignore = ['ignore_me']\")\n",
  "pytest-dev__pytest-8399": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 2c720b0..411678b 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -301,8 +301,30 @@ def test_setup_setUpClass(pytester: Pytester) -> None:\n     reprec = pytester.inline_run(testpath)\n     reprec.assertoutcome(passed=3)\n \n+def test_unittest_setUpClass_fixture_visibility(pytester: Pytester) -> None:\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+        class MyTestCase(unittest.TestCase):\n+            @classmethod\n+            def setUpClass(cls):\n+                pass\n+            def test_func1(self):\n+                pass\n+            @classmethod\n+            def tearDownClass(cls):\n+                pass\n+        \"\"\"\n+    )\n+    # Check that the fixture does not appear without the -v flag\n+    result = pytester.runpytest(\"--fixtures\")\n+    assert result.ret == 0\n+    result.stdout.no_fnmatch_line(\"*unittest_setUpClass_fixture_MyTestCase*\")\n \n-def test_setup_class(pytester: Pytester) -> None:\n+    # Check that the fixture does appear with the -v flag\n+    result = pytester.runpytest(\"--fixtures\", \"-v\")\n+    assert result.ret == 0\n+    result.stdout.fnmatch_lines([\"*unittest_setUpClass_fixture_MyTestCase*\"])\n     testpath = pytester.makepyfile(\n         \"\"\"\n         import unittest\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..fec197e 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -573,8 +573,31 @@ def test_class_weights_cv():\n \n     assert_array_equal(reg.predict([[-.2, 2]]), np.array([-1]))\n \n+from sklearn.linear_model import RidgeClassifierCV\n+import numpy as np\n+from numpy.testing import assert_equal\n+\n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    rng = np.random.RandomState(42)\n+\n+    n_samples = 8\n+    n_features = 5\n+    X = rng.randn(n_samples, n_features)\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+    # Test with binary classification\n+    y = rng.choice([-1, 1], size=n_samples)\n+    r.fit(X, y)\n+    assert_equal(r.cv_values_.shape, (n_samples, n_alphas))\n \n-def test_ridgecv_store_cv_values():\n+    # Test with multiclass classification\n+    y = rng.choice([0, 1, 2], size=n_samples)\n+    r.fit(X, y)\n+    assert_equal(r.cv_values_.shape, (n_samples, 3, n_alphas))\n     # Test _RidgeCV's store_cv_values attribute.\n     rng = rng = np.random.RandomState(42)\n \n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..0ff7bb4 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -184,7 +184,17 @@ def test_int_overflow_mutual_info_score():\n     assert_all_finite(mutual_info_score(x.ravel(), y.ravel()))\n \n \n-def test_entropy():\n+import numpy as np\n+from sklearn.metrics import fowlkes_mallows_score\n+from sklearn.utils.testing import assert_all_finite\n+\n+def test_fowlkes_mallows_score_large_numbers():\n+    # Test for large numbers in contingency matrix to ensure no overflow\n+    labels_true = [0] * 1000000 + [1] * 1000000\n+    labels_pred = [0] * 1000000 + [1] * 1000000\n+    score = fowlkes_mallows_score(labels_true, labels_pred)\n+    assert_all_finite(score)\n+    assert score == 1.0\n     ent = entropy([0, 0, 42.])\n     assert_almost_equal(ent, 0.6365141, 5)\n     assert_almost_equal(entropy([]), 1)\n",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..cbbc997 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -538,8 +538,42 @@ def test_hashing_vectorizer():\n     for i in range(X.shape[0]):\n         assert_almost_equal(np.linalg.norm(X[0].data, 1), 1.0)\n \n+from sklearn.feature_extraction.text import CountVectorizer\n+from numpy.testing import assert_array_equal, assert_raises, assert_equal\n+from sklearn.utils.testing import assert_true, assert_false\n+\n+def test_countvectorizer_custom_vocabulary_repeated_indices():\n+    # Original test case from patch\n+    vocab = ['beer', 'burger', 'celeri', 'coke', 'pizza',\n+             'salad', 'sparkling', 'tomato', 'water']\n \n-def test_feature_names():\n+    cv = CountVectorizer(vocabulary=vocab)\n+    feature_names = cv.get_feature_names()\n+    assert_array_equal(['beer', 'burger', 'celeri', 'coke', 'pizza', 'salad',\n+                        'sparkling', 'tomato', 'water'], feature_names)\n+    assert_true(cv.fixed_vocabulary_)\n+\n+    for idx, name in enumerate(feature_names):\n+        assert_equal(idx, cv.vocabulary_.get(name))\n+\n+def test_countvectorizer_with_custom_vocabulary():\n+    # Test to ensure get_feature_names does not raise NotFittedError\n+    # when a custom vocabulary is provided\n+    vocab = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    cv = CountVectorizer(vocabulary=vocab)\n+    feature_names = cv.get_feature_names()\n+    assert_array_equal(vocab, feature_names)\n+\n+    # Validate transformation works\n+    corpus = [\n+        'This is the first document.',\n+        'This is the second second document.',\n+        'And the third one.',\n+        'Is this the first document?',\n+    ]\n+    X = cv.transform(corpus)\n+    assert_equal(X.shape, (4, 9))\n+    assert_true(hasattr(cv, \"vocabulary_\"))\n     cv = CountVectorizer(max_df=0.5)\n \n     # test for Value error on unfitted/empty vocabulary\n",
  "scikit-learn__scikit-learn-11310": "diff --git a/sklearn/model_selection/tests/test_search.py b/sklearn/model_selection/tests/test_search.py\nindex 0b1d5f9..e6c3883 100644\n--- a/sklearn/model_selection/tests/test_search.py\n+++ b/sklearn/model_selection/tests/test_search.py\n@@ -1167,6 +1167,11 @@ def test_search_cv_timing():\n             assert_true(np.all(search.cv_results_[key] >= 0))\n             assert_true(np.all(search.cv_results_[key] < 1))\n \n+        # Test for the presence and correctness of refit_time_\n+        assert_true(hasattr(search, \"refit_time_\"))\n+        assert_true(isinstance(search.refit_time_, float))\n+        assert_greater_equal(search.refit_time_, 0)\n+\n         for key in ['mean_score_time', 'std_score_time']:\n             assert_true(search.cv_results_[key][1] >= 0)\n             assert_true(search.cv_results_[key][0] == 0.0)\n",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..8c921b4 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -30,6 +30,10 @@ from sklearn.linear_model.logistic import (\n     _logistic_loss_and_grad, _logistic_grad_hess,\n     _multinomial_grad_hess, _logistic_loss,\n )\n+from sklearn.metrics.scorer import get_scorer\n+from sklearn.utils._testing import assert_array_almost_equal\n+import pytest\n+from sklearn.datasets import make_classification\n \n X = [[-1, 0], [0, 1], [1, 1]]\n X_sp = sp.csr_matrix(X)\n",
  "scikit-learn__scikit-learn-12585": "diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 4752f9c..bc792f9 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -154,6 +154,17 @@ def test_clone_nan():\n     assert clf.empty is clf2.empty\n \n \n+from sklearn.base import clone\n+from sklearn.preprocessing import StandardScaler\n+\n+...\n+\n+def test_clone_estimator_types():\n+    # Check that clone works for parameters that are types rather than instances\n+    clf = StandardScaler(with_mean=StandardScaler)\n+    clf2 = clone(clf)\n+    assert clf.with_mean is clf2.with_mean\n+\n def test_clone_sparse_matrices():\n     sparse_matrix_classes = [\n         getattr(sp, name)\n",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..4e9c217 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -19,8 +19,25 @@ from sklearn.utils.testing import TempMemmap\n from sklearn.exceptions import ConvergenceWarning\n from sklearn import linear_model, datasets\n from sklearn.linear_model.least_angle import _lars_path_residues\n+from sklearn.linear_model.least_angle import LassoLarsIC\n+import numpy as np\n \n diabetes = datasets.load_diabetes()\n+\n+@pytest.mark.parametrize('copy_X_init, copy_X_fit', [(True, None), (False, None), (True, True), (True, False), (False, True), (False, False)])\n+def test_lasso_lars_ic_copyX_interaction(copy_X_init, copy_X_fit):\n+    \"\"\"Test interaction between __init__ and fit parameters for copy_X\"\"\"\n+    lasso_lars = LassoLarsIC(copy_X=copy_X_init, precompute=False)\n+    rng = np.random.RandomState(0)\n+    X = rng.normal(0, 1, (100, 5))\n+    X_copy = X.copy()\n+    y = X[:, 2]\n+    if copy_X_fit is not None:\n+        lasso_lars.fit(X, y, copy_X=copy_X_fit)\n+    else:\n+        lasso_lars.fit(X, y)\n+    effective_copy_X = copy_X_fit if copy_X_fit is not None else copy_X_init\n+    assert effective_copy_X == np.array_equal(X, X_copy)\n X, y = diabetes.data, diabetes.target\n \n # TODO: use another dataset that has multiple drops\n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..0273885 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -480,8 +480,29 @@ def test_shuffle_kfold_stratifiedkfold_reproducibility():\n                 with pytest.raises(AssertionError):\n                     np.testing.assert_array_equal(test_a, test_b)\n \n+def test_stratified_kfold_shuffling_behavior():\n+    # Verify that StratifiedKFold shuffles samples within each stratum when shuffle=True\n+    X = np.arange(20)\n+    y = [0] * 10 + [1] * 10\n \n-def test_shuffle_stratifiedkfold():\n+    # Create StratifiedKFold instances with different random states\n+    kf1 = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n+    kf2 = StratifiedKFold(n_splits=5, shuffle=True, random_state=43)\n+\n+    # Collect and sort all test indices from each fold for both random states\n+    test_indices_1 = sorted([tuple(test_idx) for _, test_idx in kf1.split(X, y)])\n+    test_indices_2 = sorted([tuple(test_idx) for _, test_idx in kf2.split(X, y)])\n+\n+    # Assert that the test indices are not the same, indicating proper shuffling\n+    assert test_indices_1 != test_indices_2, \"Test indices should differ for different random states when shuffle=True\"\n+\n+    # Verify behavior when shuffle=False (to contrast the behavior)\n+    kf_no_shuffle = StratifiedKFold(n_splits=5, shuffle=False)\n+    test_indices_no_shuffle = sorted([tuple(test_idx) for _, test_idx in kf_no_shuffle.split(X, y)])\n+\n+    # Assert that the test indices for shuffle=False remain constant across calls\n+    assert test_indices_1 != test_indices_no_shuffle, \"Test indices with shuffle=True should differ from shuffle=False\"\n+    assert test_indices_2 != test_indices_no_shuffle, \"Test indices with shuffle=True should differ from shuffle=False\"\n     # Check that shuffling is happening when requested, and for proper\n     # sample coverage\n     X_40 = np.ones(40)\n",
  "scikit-learn__scikit-learn-13135": "diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py\nindex a18a1c5..aa1e6d0 100644\n--- a/sklearn/preprocessing/tests/test_discretization.py\n+++ b/sklearn/preprocessing/tests/test_discretization.py\n@@ -185,11 +185,11 @@ def test_invalid_strategy_option():\n \n \n @pytest.mark.parametrize(\n-    'strategy, expected_2bins, expected_3bins',\n-    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2]),\n-     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2]),\n-     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2])])\n-def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n+    'strategy, expected_2bins, expected_3bins, expected_5bins',\n+    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2], [0, 0, 1, 1, 4, 4]),\n+     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2], [0, 0, 1, 2, 3, 4]),\n+     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2], [0, 1, 2, 3, 4, 4])])\n+def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins, expected_5bins):\n     X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n \n     # with 2 bins\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..6eba224 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -597,8 +597,17 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_array_equal(Y_pred1, Y_pred2)\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n+from sklearn.mixture import GaussianMixture\n+from numpy.testing import assert_array_equal\n+import numpy as np\n \n-def test_gaussian_mixture_fit():\n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n     rand_data = RandomData(rng)\n",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\nindex 318940e..df6af6b 100644\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -1058,6 +1058,32 @@ def test_pipeline_memory():\n         shutil.rmtree(cachedir)\n \n \n+def test_pipeline_len():\n+    # Create a pipeline with two steps\n+    anova_filter = SelectKBest(f_regression, k=5)\n+    clf = SVC(kernel='linear')\n+    pipeline = Pipeline([('anova', anova_filter), ('svc', clf)])\n+    \n+    # Test that len(pipeline) returns the correct number of steps\n+    assert len(pipeline) == 2\n+    \n+    # Create an empty pipeline\n+    empty_pipeline = Pipeline([])\n+    \n+    # Test that len(empty_pipeline) returns 0\n+    assert len(empty_pipeline) == 0\n+\n+    # Create a more complex pipeline\n+    pipeline_complex = Pipeline([\n+        ('anova', SelectKBest(f_regression, k=5)),\n+        ('svc', SVC(kernel='linear')),\n+        ('passthrough', 'passthrough')\n+    ])\n+    \n+    # Test that len(pipeline_complex) returns the correct number of steps\n+    assert len(pipeline_complex) == 3\n+\n+\n def test_make_pipeline_memory():\n     cachedir = mkdtemp()\n     if LooseVersion(joblib_version) < LooseVersion('0.12'):\n@@ -1070,4 +1096,4 @@ def test_make_pipeline_memory():\n     pipeline = make_pipeline(DummyTransf(), SVC())\n     assert pipeline.memory is None\n \n-    shutil.rmtree(cachedir)\n+    shutil.rmtree(cachedir)\n",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..77f3b12 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -11,6 +12,8 @@ import pytest\n import numpy as np\n \n from sklearn.utils.testing import assert_array_equal\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_raises\n from sklearn.utils.testing import assert_raises_regex\n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..d99804b 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -497,7 +497,38 @@ def test_transform():\n         ('lr', clf1), ('rf', clf2), ('gnb', clf3)],\n         voting='soft',\n         flatten_transform=False).fit(X, y)\n-\n+@pytest.mark.filterwarnings('ignore: Default solver will be changed')  # 0.22\n+@pytest.mark.filterwarnings('ignore: Default multi_class will')  # 0.22\n+@pytest.mark.parametrize(\n+    \"X, y, voter\",\n+    [(load_iris(return_X_y=True), VotingClassifier(\n+        [('lr', LogisticRegression()),\n+         ('rf', RandomForestClassifier(n_estimators=5))]))]\n+)\n+def test_none_estimator_with_weights(X, y, voter):\n+    # check that an estimator can be set to None and passing some weight\n+    # regression test for the issue\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    voter.set_params(lr=None)\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    y_pred = voter.predict(X)\n+    assert y_pred.shape == y.shape\n+from sklearn.linear_model import LogisticRegression\n+from sklearn.ensemble import RandomForestClassifier, VotingClassifier, VotingRegressor\n+import numpy as np\n+from sklearn.datasets import load_iris\n+import pytest\n+@pytest.mark.parametrize(\n+    \"X, y, voter\",\n+    [(load_iris(return_X_y=True), VotingClassifier(\n+        [('lr', LogisticRegression()),\n+         ('rf', RandomForestClassifier(n_estimators=5))]))]\n+)\n+def test_all_none_estimators(X, y, voter):\n+    # Test case where all estimators are set to None, expecting a ValueError\n+    voter.set_params(lr=None, rf=None)\n+    with pytest.raises(ValueError, match='All estimators are None. At least one is required!'):\n+        voter.fit(X, y, sample_weight=np.ones(y.shape))\n     assert_array_equal(eclf1.transform(X).shape, (4, 6))\n     assert_array_equal(eclf2.transform(X).shape, (4, 6))\n     assert_array_equal(eclf3.transform(X).shape, (3, 4, 2))\n@@ -506,4 +537,4 @@ def test_transform():\n     assert_array_almost_equal(\n             eclf3.transform(X).swapaxes(0, 1).reshape((4, 6)),\n             eclf2.transform(X)\n-    )\n+    )\n",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..b6d8c94 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -397,7 +397,27 @@ def test_export_text():\n     assert export_text(reg, decimals=1, show_weights=True) == expected_report\n \n \n-def test_plot_tree_entropy(pyplot):\n+def test_single_feature_export_text():\n+    from sklearn.tree import DecisionTreeClassifier\n+    from sklearn.tree import export_text\n+    import numpy as np\n+    from sklearn.datasets import load_iris\n+\n+    X, y = load_iris(return_X_y=True)\n+    X_single_feature = X[:, 0].reshape(-1, 1)  # Use only one feature\n+\n+    clf = DecisionTreeClassifier()\n+    clf.fit(X_single_feature, y)\n+\n+    expected_report = dedent(\"\"\"\n+    |--- sepal_length <= 5.45\n+    |   |--- class: 0\n+    |--- sepal_length >  5.45\n+    |   |--- class: 1\n+    \"\"\").lstrip()\n+\n+    # Check that export_text does not raise IndexError\n+    assert export_text(clf, feature_names=['sepal_length']) == expected_report\n     # mostly smoke tests\n     # Check correctness of export_graphviz for criterion = entropy\n     clf = DecisionTreeClassifier(max_depth=3,\n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..22fb17c 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1554,7 +1554,31 @@ def test_LogisticRegressionCV_no_refit(multi_class):\n     assert lrcv.coef_.shape == (n_classes, n_features)\n \n \n-def test_LogisticRegressionCV_elasticnet_attribute_shapes():\n+@pytest.mark.parametrize('penalty', ('l2', 'elasticnet'))\n+def test_LogisticRegressionCV_no_refit_issue_reproduction(penalty):\n+    # Test to reproduce the issue where IndexError was thrown with refit=False\n+\n+    np.random.seed(29)\n+    X = np.random.normal(size=(1000, 3))\n+    beta = np.random.normal(size=3)\n+    intercept = np.random.normal(size=None)\n+    y = np.sign(intercept + X @ beta)\n+\n+    Cs = np.logspace(-4, 4, 3)  # Regularization strengths\n+    if penalty == 'elasticnet':\n+        l1_ratios = np.linspace(0, 1, 2)\n+        solver = 'saga'\n+    else:\n+        l1_ratios = None\n+        solver = 'liblinear'  # Also test 'liblinear' which showed the same error\n+\n+    lrcv = LogisticRegressionCV(penalty=penalty, Cs=Cs, solver=solver,\n+                                l1_ratios=l1_ratios, tol=1e-2, refit=False)\n+    lrcv.fit(X, y)\n+    # Check that no error is raised and shapes are correct\n+    assert lrcv.coefs_paths_.shape[2] == len(lrcv.Cs_)\n+    if penalty == 'elasticnet':\n+        assert lrcv.coefs_paths_.shape[0] == len(l1_ratios)\n     # Make sure the shapes of scores_ and coefs_paths_ attributes are correct\n     # when using elasticnet (added one dimension for l1_ratios)\n \n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/_show_versions.py b/sklearn/utils/_show_versions.py\nindex 72f054a..13bf362 100644\n--- a/sklearn/utils/_show_versions.py\n+++ b/sklearn/utils/_show_versions.py\n@@ -48,6 +48,7 @@ def _get_deps_info():\n         \"Cython\",\n         \"pandas\",\n         \"matplotlib\",\n+        \"joblib\",\n     ]\n \n     def get_version(module):\n",
  "scikit-learn__scikit-learn-14496": "",
  "scikit-learn__scikit-learn-14710": "",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..f7f1429 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -690,7 +690,21 @@ def test_sparse_precomputed():\n         assert \"Sparse precomputed\" in str(e)\n \n \n-def test_linearsvc_parameters():\n+from scipy import sparse\n+import numpy as np\n+from sklearn import svm\n+\n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for issue regarding ZeroDivisionError when support_vectors_ is empty\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear', C=316.227766017, max_iter=15000, epsilon=0.1)\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size, \"Support vectors should be empty\"\n+    assert not model.dual_coef_.data.size, \"Dual coefficients should be empty\"\n     # Test possible parameter combinations in LinearSVC\n     # Generate list of possible parameter combinations\n     losses = ['hinge', 'squared_hinge', 'logistic_regression', 'foo']\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..d8f8e81 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -97,8 +97,58 @@ def test_strip_accents():\n     expected = 'this is a test'\n     assert strip_accents_unicode(a) == expected\n \n+def test_strip_accents():\n+\n+    # Original test cases...\n+    # check some classical latin accentuated symbols\n+    a = '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb'\n+    expected = 'aaaaaaceeee'\n+    assert strip_accents_unicode(a) == expected\n+\n+    a = '\u00ec\u00ed\u00ee\u00ef\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f9\u00fa\u00fb\u00fc\u00fd'\n+    expected = 'iiiinooooouuuuy'\n+    assert strip_accents_unicode(a) == expected\n+\n+    # check some arabic\n+    a = '\\u0625'  # alef with a hamza below: \u0625\n+    expected = '\\u0627'  # simple alef: \u0627\n+    assert strip_accents_unicode(a) == expected\n \n-def test_to_ascii():\n+    # mix letters accentuated and not\n+    a = \"this is \u00e0 test\"\n+    expected = 'this is a test'\n+    assert strip_accents_unicode(a) == expected\n+\n+    # New test cases for the issue\n+\n+    # Strings already in NFKD form\n+    s1 = chr(241)  # LATIN SMALL LETTER N WITH TILDE\n+    s2 = chr(110) + chr(771)  # LATIN SMALL LETTER N followed by COMBINING TILDE\n+\n+    # They are visually identical, as expected\n+    assert s1 == '\u00f1'\n+    assert s2 == 'n\\u0303'\n+\n+    # The tilde is removed from s1, as expected\n+    assert strip_accents_unicode(s1) == 'n'\n+\n+    # The tilde should also be removed from s2\n+    assert strip_accents_unicode(s2) == 'n'\n+\n+    # Additional decomposed strings\n+    a = 'o\\u0308'  # o with diaresis\n+    expected = 'o'\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Combining marks by themselves\n+    a = '\\u0300\\u0301\\u0302\\u0303'\n+    expected = ''\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Multiple combining marks on one character\n+    a = 'o\\u0308\\u0304'\n+    expected = 'o'\n+    assert strip_accents_unicode(a) == expected\n     # check some classical latin accentuated symbols\n     a = '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb'\n     expected = 'aaaaaaceeee'\n",
  "scikit-learn__scikit-learn-25102": "diff --git a/sklearn/feature_selection/tests/test_base.py b/sklearn/feature_selection/tests/test_base.py\nindex bf2d07e..d4a7117 100644\n--- a/sklearn/feature_selection/tests/test_base.py\n+++ b/sklearn/feature_selection/tests/test_base.py\n@@ -108,9 +108,14 @@ def test_inverse_transform_sparse():\n     with pytest.raises(ValueError):\n         sel.inverse_transform(np.array([[1], [2]]))\n \n+import pytest\n+import numpy as np\n+import pandas as pd\n+from numpy.testing import assert_array_equal\n+from sklearn.feature_selection import SelectKBest, chi2\n \n def test_get_support():\n     sel = StepSelector()\n     sel.fit(X, y)\n     assert_array_equal(support, sel.get_support())\n-    assert_array_equal(support_inds, sel.get_support(indices=True))\n+    assert_array_equal(support_inds, sel.get_support(indices=True))\n",
  "scikit-learn__scikit-learn-25232": "",
  "scikit-learn__scikit-learn-25931": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3714d1a..87a3710 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -331,6 +331,45 @@ def test_base_estimator_property_deprecated():\n     X = np.array([[1, 2], [3, 4]])\n     y = np.array([1, 0])\n     model = IsolationForest()\n+\n+def test_iforest_with_dataframe_and_custom_contamination():\n+    \"\"\"Test IsolationForest with DataFrame and non-default contamination.\"\"\"\n+    import warnings\n+    import numpy as np\n+    import pandas as pd\n+    from sklearn.ensemble import IsolationForest\n+\n+    # Create a DataFrame with two columns\n+    rng = np.random.RandomState(42)\n+    X = pd.DataFrame(rng.randn(100, 2), columns=['feature1', 'feature2'])\n+\n+    # Initialize IsolationForest with a specific contamination level\n+    model = IsolationForest(random_state=0, contamination=0.1)\n+\n+    # Ensure no warning is raised when fitting\n+    with warnings.catch_warnings():\n+        warnings.simplefilter(\"error\", UserWarning)\n+        model.fit(X)\n+\n+def test_iforest_with_different_contamination_values():\n+    \"\"\"Test IsolationForest with different contamination values using DataFrames.\"\"\"\n+    import warnings\n+    import numpy as np\n+    import pandas as pd\n+    from sklearn.ensemble import IsolationForest\n+\n+    # Create a DataFrame with three columns\n+    rng = np.random.RandomState(42)\n+    X = pd.DataFrame(rng.randn(100, 3), columns=['feature1', 'feature2', 'feature3'])\n+\n+    # Test with various contamination levels\n+    for contamination_level in [0.05, 0.1, 0.2, 0.3]:\n+        model = IsolationForest(random_state=0, contamination=contamination_level)\n+\n+        # Ensure no warning is raised when fitting\n+        with warnings.catch_warnings():\n+            warnings.simplefilter(\"error\", UserWarning)\n+            model.fit(X)\n     model.fit(X, y)\n \n     warn_msg = (\n@@ -338,4 +377,4 @@ def test_base_estimator_property_deprecated():\n         \"will be removed in 1.4. Use `estimator_` instead.\"\n     )\n     with pytest.warns(FutureWarning, match=warn_msg):\n-        model.base_estimator_\n+        model.base_estimator_\n",
  "scikit-learn__scikit-learn-25973": "diff --git a/sklearn/feature_selection/tests/test_sequential.py b/sklearn/feature_selection/tests/test_sequential.py\nindex 42e1fbb..496c403 100644\n--- a/sklearn/feature_selection/tests/test_sequential.py\n+++ b/sklearn/feature_selection/tests/test_sequential.py\n@@ -313,4 +313,26 @@ def test_backward_neg_tol():\n     new_score = lr.fit(Xr, y).score(Xr, y)\n \n     assert 0 < sfs.get_support().sum() < X.shape[1]\n-    assert new_score < initial_score\n+    \n+def test_sequential_feature_selector_with_splits():\n+    \"\"\"Test SequentialFeatureSelector with an iterable of splits.\"\"\"\n+    from sklearn.datasets import make_classification\n+    from sklearn.feature_selection import SequentialFeatureSelector\n+    from sklearn.neighbors import KNeighborsClassifier\n+    from sklearn.model_selection import LeaveOneGroupOut\n+\n+    import numpy as np\n+\n+    X, y = make_classification(random_state=0)\n+    groups = np.zeros_like(y, dtype=int)\n+    groups[y.size // 2 :] = 1\n+\n+    cv = LeaveOneGroupOut()\n+    splits = cv.split(X, y, groups=groups)\n+\n+    clf = KNeighborsClassifier(n_neighbors=5)\n+    sfs = SequentialFeatureSelector(clf, n_features_to_select=5, scoring='accuracy', cv=splits)\n+\n+    # This should run without errors\n+    sfs.fit(X, y)\n+    assert new_score < initial_score\n",
  "scikit-learn__scikit-learn-26323": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex b52e888..007a4d8 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -13,6 +13,53 @@ from sklearn.utils._testing import assert_array_equal\n from sklearn.utils._testing import assert_allclose_dense_sparse\n from sklearn.utils._testing import assert_almost_equal\n \n+def test_remainder_set_output():\n+    \"\"\"Check that the output is set for the remainder.\n+\n+    Non-regression test for #26306.\n+    \"\"\"\n+\n+    df = pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3]})\n+\n+    ct = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+\n+    out = ct.fit_transform(df)\n+    pd.testing.assert_frame_equal(out, df)\n+\n+    ct.set_output(transform=\"default\")\n+    out = ct.fit_transform(df)\n+    assert isinstance(out, np.ndarray)\n+\n+def test_column_transformer_remainder_with_different_types():\n+    \"\"\"Test ColumnTransformer with remainder and different types of outputs.\"\"\"\n+    \n+    df = pd.DataFrame({\"a\": [1, 2, 3], \"b\": [4.0, 5.5, 6.1], \"c\": [True, False, True]})\n+\n+    # Test with remainder as an estimator\n+    ct = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=StandardScaler(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+    out = ct.fit_transform(df)\n+    assert isinstance(out, pd.DataFrame)\n+\n+    # Test with remainder as passthrough\n+    ct = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder='passthrough',\n+        verbose_feature_names_out=False,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+    out = ct.fit_transform(df)\n+    assert isinstance(out, pd.DataFrame)\n+\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.compose import (\n     ColumnTransformer,\n@@ -22,6 +69,10 @@ from sklearn.compose import (\n from sklearn.exceptions import NotFittedError\n from sklearn.preprocessing import FunctionTransformer\n from sklearn.preprocessing import StandardScaler, Normalizer, OneHotEncoder\n+import pytest\n+import pandas as pd\n+import numpy as np\n+from sklearn.feature_selection import VarianceThreshold\n \n \n class Trans(TransformerMixin, BaseEstimator):\n",
  "scikit-learn__scikit-learn-9288": "diff --git a/sklearn/cluster/tests/test_k_means.py b/sklearn/cluster/tests/test_k_means.py\nindex abeeff0..392f096 100644\n--- a/sklearn/cluster/tests/test_k_means.py\n+++ b/sklearn/cluster/tests/test_k_means.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for K-means\"\"\"\n import sys\n \n@@ -944,8 +945,35 @@ def test_k_means_empty_cluster_relocated():\n     assert len(set(km.labels_)) == 2\n     assert_allclose(km.cluster_centers_, [[-1], [1]])\n \n+def test_result_of_kmeans_equal_in_diff_n_jobs():\n+    # PR 9288 - Ensure KMeans results are the same for different n_jobs\n+    rnd = np.random.RandomState(0)\n+    X = rnd.normal(size=(50, 10))\n+\n+    result_1 = KMeans(n_clusters=3, random_state=0, n_jobs=1).fit(X).labels_\n+    result_2 = KMeans(n_clusters=3, random_state=0, n_jobs=2).fit(X).labels_\n+    assert_array_equal(result_1, result_2)\n \n-def test_minibatch_kmeans_partial_fit_int_data():\n+def test_kmeans_inertia_equal_in_diff_n_jobs():\n+    # Additional test to ensure inertia is the same for different n_jobs\n+    rnd = np.random.RandomState(0)\n+    X = rnd.normal(size=(100, 5))\n+    \n+    inertia_1 = KMeans(n_clusters=5, random_state=42, n_jobs=1).fit(X).inertia_\n+    inertia_2 = KMeans(n_clusters=5, random_state=42, n_jobs=2).fit(X).inertia_\n+    inertia_3 = KMeans(n_clusters=5, random_state=42, n_jobs=3).fit(X).inertia_\n+\n+    assert_almost_equal(inertia_1, inertia_2, decimal=5)\n+    assert_almost_equal(inertia_1, inertia_3, decimal=5)\n+\n+def test_kmeans_with_different_data_shapes():\n+    # Test with different shapes to ensure consistency\n+    rnd = np.random.RandomState(1)\n+    for shape in [(100, 5), (200, 10), (50, 15)]:\n+        X = rnd.normal(size=shape)\n+        inertia_1 = KMeans(n_clusters=3, random_state=0, n_jobs=1).fit(X).inertia_\n+        inertia_2 = KMeans(n_clusters=3, random_state=0, n_jobs=2).fit(X).inertia_\n+        assert_almost_equal(inertia_1, inertia_2, decimal=5)\n     # Issue GH #14314\n     X = np.array([[-1], [1]], dtype=np.int)\n     km = MiniBatchKMeans(n_clusters=2)\n",
  "sphinx-doc__sphinx-10323": "",
  "sphinx-doc__sphinx-10449": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 82ec43a..0165829 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1054,6 +1054,30 @@ def test_autodoc_typehints_description_with_documented_init(app):\n             '      Return type:\\n'\n             '         None\\n' == context)\n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\"})\n+def test_autodoc_typehints_description_class_no_return_type(app):\n+    # This test ensures that a class documented with autodoc_typehints=\"description\"\n+    # does not have a return type listed for the class itself.\n+    \n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: target.typehints.Square\\n'\n+        '   :members:\\n',  # Test with a simple class that has a constructor\n+        encoding='utf8'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n+    assert ('class target.typehints.Square\\n'\n+            '\\n'\n+            '   A class representing a square figure.\\n'\n+            '\\n'\n+            '   __init__(width, height)\\n'\n+            '\\n'\n+            '      Parameters:\\n'\n+            '         **width** (*int*) --\\n'\n+            '\\n'\n+            '         **height** (*int*) --\\n'\n+            == context)\n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\",\n",
  "sphinx-doc__sphinx-10466": "diff --git a/tests/test_build_gettext.py b/tests/test_build_gettext.py\nindex a6fc946..723741a 100644\n--- a/tests/test_build_gettext.py\n+++ b/tests/test_build_gettext.py\n@@ -1,3 +1,35 @@\n+\n+def test_Catalog_handles_duplicate_message_locations():\n+    catalog = Catalog()\n+    \n+    # Add duplicate locations for the same message\n+    catalog.add('duplicate', MsgOrigin('/path/to/dupfile', 1))\n+    catalog.add('duplicate', MsgOrigin('/path/to/dupfile', 1))\n+    catalog.add('duplicate', MsgOrigin('/path/to/dupfile', 1))\n+    \n+    # Add other locations\n+    catalog.add('duplicate', MsgOrigin('/path/to/dupfile', 2))\n+    catalog.add('duplicate', MsgOrigin('/path/to/another', 1))\n+    \n+    # Add a different message\n+    catalog.add('unique', MsgOrigin('/path/to/unique', 1))\n+    \n+    # Fetch the catalog messages and check for duplicates\n+    messages = list(catalog)\n+    \n+    # Assert that we have two messages\n+    assert len(messages) == 2\n+    \n+    # Check the 'duplicate' message\n+    msg_duplicate = next(msg for msg in messages if msg.text == 'duplicate')\n+    assert msg_duplicate.locations == [('/path/to/dupfile', 1),\n+                                       ('/path/to/dupfile', 2),\n+                                       ('/path/to/another', 1)]\n+    \n+    # Check the 'unique' message\n+    msg_unique = next(msg for msg in messages if msg.text == 'unique')\n+    assert msg_unique.locations == [('/path/to/unique', 1)]\n+\n \"\"\"Test the build process with gettext builder with the test root.\"\"\"\n \n import gettext\n@@ -9,6 +41,7 @@ from subprocess import PIPE, CalledProcessError\n import pytest\n \n from sphinx.util.osutil import cd\n+from sphinx.builders.gettext import Catalog, MsgOrigin\n \n \n @pytest.mark.sphinx('gettext', srcdir='root-gettext')\n",
  "sphinx-doc__sphinx-10673": "",
  "sphinx-doc__sphinx-7440": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 975a00f..cf219c6 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -107,7 +107,13 @@ def test_glossary(app):\n             \"       description\\n\"\n             \"\\n\"\n             \"   term4 : class1 : class2\\n\"\n-            \"       description\\n\")\n+            \"       description\\n\"\n+            \"\\n\"\n+            \"   MySQL\\n\"\n+            \"       description for MySQL\\n\"\n+            \"\\n\"\n+            \"   mysql\\n\"\n+            \"       description for mysql\\n\")\n \n     # doctree\n     doctree = restructuredtext.parse(app, text)\n@@ -146,6 +152,8 @@ def test_glossary(app):\n     assert (\"term2\", \"term2\", \"term\", \"index\", \"term-term2\", -1) in objects\n     assert (\"term3\", \"term3\", \"term\", \"index\", \"term-term3\", -1) in objects\n     assert (\"term4\", \"term4\", \"term\", \"index\", \"term-term4\", -1) in objects\n+    assert (\"MySQL\", \"MySQL\", \"term\", \"index\", \"term-MySQL\", -1) in objects\n+    assert (\"mysql\", \"mysql\", \"term\", \"index\", \"term-mysql\", -1) in objects\n \n \n def test_glossary_warning(app, status, warning):\n",
  "sphinx-doc__sphinx-7757": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex b3053d1..eb761e2 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -332,6 +332,14 @@ def test_signature_from_str_kwonly_args():\n     assert sig.parameters['b'].default == Parameter.empty\n \n \n+import sys\n+import pytest\n+import inspect\n+from sphinx.util.inspect import signature_from_str\n+from inspect import Parameter\n+\n+...\n+\n @pytest.mark.skipif(sys.version_info < (3, 8),\n                     reason='python-3.8 or above is required')\n def test_signature_from_str_positionaly_only_args():\n@@ -341,7 +349,15 @@ def test_signature_from_str_positionaly_only_args():\n     assert sig.parameters['b'].kind == Parameter.POSITIONAL_OR_KEYWORD\n \n \n-def test_signature_from_str_invalid():\n+def test_signature_from_str_positional_only_with_defaults():\n+    sig = signature_from_str('(a, b=0, /, c=1)')\n+    assert list(sig.parameters.keys()) == ['a', 'b', 'c']\n+    assert sig.parameters['a'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['a'].default == Parameter.empty\n+    assert sig.parameters['b'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['b'].default == '0'\n+    assert sig.parameters['c'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['c'].default == '1'\n     with pytest.raises(SyntaxError):\n         inspect.signature_from_str('')\n \n",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..9d6f390 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -52,7 +53,15 @@ def test_MockObject():\n     assert isinstance(obj.other_method(), SubClass)\n \n \n-def test_mock():\n+    # Test that the mock correctly handles generic-typed classes\n+    mock = _MockObject()\n+\n+    class MockSubClass(mock.SomeClass[T]):\n+        \"\"\"docstring of MockSubClass\"\"\"\n+\n+    obj2 = MockSubClass()\n+    assert MockSubClass.__doc__ == \"docstring of MockSubClass\"\n+    assert isinstance(obj2, MockSubClass)\n     modname = 'sphinx.unknown'\n     submodule = modname + '.submodule'\n     assert modname not in sys.modules\n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex 464108d..463d446 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -1261,6 +1261,22 @@ def test_automethod_for_builtin(app):\n         '',\n     ]\n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_decorated_init_method(app):\n+    actual = do_autodoc(app, 'class', 'target.decorator_with_init.DecoratedInitClass')\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: DecoratedInitClass(x)',\n+        '   :module: target.decorator_with_init',\n+        '',\n+        '   ',\n+        '   .. py:method:: __init__(x)',\n+        '      :module: target.decorator_with_init',\n+        '',\n+        '      Initialize self.  See help(type(self)) for accurate signature.',\n+        '',\n+    ]\n+\n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_automethod_for_decorated(app):\n@@ -1272,6 +1288,22 @@ def test_automethod_for_decorated(app):\n         '',\n     ]\n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_decorated_init_method(app):\n+    actual = do_autodoc(app, 'class', 'target.decorator_with_init.DecoratedInitClass')\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: DecoratedInitClass(x)',\n+        '   :module: target.decorator_with_init',\n+        '',\n+        '   ',\n+        '   .. py:method:: __init__(x)',\n+        '      :module: target.decorator_with_init',\n+        '',\n+        '      Initialize self.  See help(type(self)) for accurate signature.',\n+        '',\n+    ]\n+\n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_abstractmethods(app):\n",
  "sphinx-doc__sphinx-7985": "",
  "sphinx-doc__sphinx-8035": "diff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex ad1d950..bbc9070 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_private_members\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -14,8 +15,45 @@ from test_ext_autodoc import do_autodoc\n \n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n-def test_private_field(app):\n+def test_specific_private_members(app):\n     app.config.autoclass_content = 'class'\n+    options = {\"members\": None,\n+               \"private-members\": \"_private_function, _another_private_function\"}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        '',\n+        '.. py:function:: _private_function(name)',\n+        '   :module: target.private',\n+        '',\n+        '   _private_function is a private docstring().',\n+        '',\n+        '   :meta private:',\n+        '',\n+        '',\n+        '.. py:function:: _another_private_function(value)',\n+        '   :module: target.private',\n+        '',\n+        '   _another_private_function is another private docstring().',\n+        '',\n+        '   :meta private:',\n+        '',\n+    ]\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_no_private_members(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None,\n+               \"private-members\": \"\"}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        '',\n+    ]\n     options = {\"members\": None}\n     actual = do_autodoc(app, 'module', 'target.private', options)\n     assert list(actual) == [\n",
  "sphinx-doc__sphinx-8120": "diff --git a/tests/test_intl.py b/tests/test_intl.py\nindex 58339b1..ccea772 100644\n--- a/tests/test_intl.py\n+++ b/tests/test_intl.py\n@@ -1280,12 +1280,80 @@ def test_image_glob_intl_using_figure_language_filename(app):\n     assert_node(doctree[0][2], nodes.image, uri='subdir/svgimg.*',\n                 candidates={'application/pdf': 'subdir/svgimg.pdf',\n                             'image/svg+xml': 'subdir/svgimg.svg'})\n+from babel.messages import pofile\n+from sphinx import locale\n+from babel.messages.catalog import Catalog\n \n+import pytest\n+import os\n+\n+@pytest.mark.sphinx('html', testroot='basic', confoverrides={'language': 'da'})\n+def test_custom_translation_da(make_app, app_params, sphinx_test_tempdir):\n+    try:\n+        # clear translators cache\n+        locale.translators.clear()\n+\n+        # prepare message catalog (.po)\n+        locale_dir = sphinx_test_tempdir / 'basic' / 'locales' / 'da' / 'LC_MESSAGES'\n+        locale_dir.makedirs()\n+        with (locale_dir / 'sphinx.po').open('wb') as f:\n+            catalog = Catalog()\n+            catalog.add('Fig. %s', 'Foobar %s')\n+            catalog.add('Listing %s', 'Whatever %s')\n+            pofile.write_po(f, catalog)\n+\n+        # construct application and convert po file to .mo\n+        args, kwargs = app_params\n+        app = make_app(*args, **kwargs)\n+        assert (locale_dir / 'sphinx.mo').exists()\n+        assert app.translator.gettext('Fig. %s') == 'Foobar %s'\n+        assert app.translator.gettext('Listing %s') == 'Whatever %s'\n+\n+        app.build()\n+        content = (app.outdir / 'index.html').read_text()\n+        assert 'Foobar' in content\n+        assert 'Whatever' in content\n+    finally:\n+        locale.translators.clear()\n     assert isinstance(doctree[0][3], nodes.figure)\n     assert_node(doctree[0][3][0], nodes.image, uri='subdir/svgimg.*',\n                 candidates={'application/pdf': 'subdir/svgimg.pdf',\n                             'image/svg+xml': 'subdir/svgimg.svg'})\n+from babel.messages import pofile\n+from sphinx import locale\n+from babel.messages.catalog import Catalog\n+\n+import pytest\n+import os\n \n+@pytest.mark.sphinx('html', testroot='basic', confoverrides={'language': 'da'})\n+def test_custom_translation_da(make_app, app_params, sphinx_test_tempdir):\n+    try:\n+        # clear translators cache\n+        locale.translators.clear()\n+\n+        # prepare message catalog (.po)\n+        locale_dir = sphinx_test_tempdir / 'basic' / 'locales' / 'da' / 'LC_MESSAGES'\n+        locale_dir.makedirs()\n+        with (locale_dir / 'sphinx.po').open('wb') as f:\n+            catalog = Catalog()\n+            catalog.add('Fig. %s', 'Foobar %s')\n+            catalog.add('Listing %s', 'Whatever %s')\n+            pofile.write_po(f, catalog)\n+\n+        # construct application and convert po file to .mo\n+        args, kwargs = app_params\n+        app = make_app(*args, **kwargs)\n+        assert (locale_dir / 'sphinx.mo').exists()\n+        assert app.translator.gettext('Fig. %s') == 'Foobar %s'\n+        assert app.translator.gettext('Listing %s') == 'Whatever %s'\n+\n+        app.build()\n+        content = (app.outdir / 'index.html').read_text()\n+        assert 'Foobar' in content\n+        assert 'Whatever' in content\n+    finally:\n+        locale.translators.clear()\n \n def getwarning(warnings):\n-    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n+    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n",
  "sphinx-doc__sphinx-8269": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 7842f56..6f93544 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -107,6 +107,10 @@ def test_anchors_ignored(app, status, warning):\n     assert not content\n \n \n+import http.server\n+import threading\n+import pytest\n+\n @pytest.mark.sphinx(\n     'linkcheck', testroot='linkcheck', freshenv=True,\n     confoverrides={'linkcheck_auth': [\n@@ -114,6 +118,59 @@ def test_anchors_ignored(app, status, warning):\n                         (r'.+google\\.com.+', 'authinfo2'),\n                    ]\n                   })\n+\n+# Test for a 404 Not Found error\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n+def test_404_error(app, status, warning):\n+    server_thread = HttpServerThread(NotFoundHandler, daemon=True)\n+    server_thread.start()\n+    try:\n+        app.builder.build_all()\n+    finally:\n+        server_thread.terminate()\n+    content = (app.outdir / 'output.txt').read_text()\n+    assert content == (\n+        \"index.rst:1: [broken] http://localhost:7777/#anchor: \"\n+        \"404 Client Error: Not Found for url: http://localhost:7777/\\n\"\n+    )\n+\n+# Test for a 500 Internal Server Error\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n+def test_500_error(app, status, warning):\n+    server_thread = HttpServerThread(InternalServerErrorHandler, daemon=True)\n+    server_thread.start()\n+    try:\n+        app.builder.build_all()\n+    finally:\n+        server_thread.terminate()\n+    content = (app.outdir / 'output.txt').read_text()\n+    assert content == (\n+        \"index.rst:1: [broken] http://localhost:7777/#anchor: \"\n+        \"500 Server Error: Internal Server Error \"\n+        \"for url: http://localhost:7777/\\n\"\n+    )\n+\n+class HttpServerThread(threading.Thread):\n+    def __init__(self, handler, *args, **kwargs):\n+        super().__init__(*args, **kwargs)\n+        self.server = http.server.HTTPServer((\"localhost\", 7777), handler)\n+\n+    def run(self):\n+        self.server.serve_forever(poll_interval=0.01)\n+\n+    def terminate(self):\n+        self.server.shutdown()\n+        self.server.server_close()\n+        self.join()\n+\n+class NotFoundHandler(http.server.BaseHTTPRequestHandler):\n+    def do_GET(self):\n+        self.send_error(404, \"Not Found\")\n+\n+class InternalServerErrorHandler(http.server.BaseHTTPRequestHandler):\n+    def do_GET(self):\n+        self.send_error(500, \"Internal Server Error\")\n+\n def test_auth(app, status, warning):\n     mock_req = mock.MagicMock()\n     mock_req.return_value = 'fake-response'\n@@ -159,4 +216,11 @@ def test_linkcheck_request_headers(app, status, warning):\n                 assert headers[\"Accept\"] == \"text/html,application/xhtml+xml;q=0.9,*/*;q=0.8\"\n                 assert headers[\"X-Secret\"] == \"open sesami\"\n             else:\n-                assert headers[\"Accept\"] == \"text/html,application/xhtml+xml;q=0.9,*/*;q=0.8\"\n+                assert headers[\"Accept\"] == \"text/html,application/xhtml+xml;q=0.9,*/*;q=0.8\"\n+\n+\n+\n+\n+\n+\n+\n",
  "sphinx-doc__sphinx-8459": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex d1881df..5de4e90 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_configs\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -8,6 +9,34 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+import pytest\n+import sys\n+from sphinx.testing.util import SphinxTestApp\n+\n+@pytest.mark.skipif(sys.version_info < (3, 7), reason='python 3.7+ is required.')\n+@pytest.mark.sphinx('text', testroot='ext-autodoc', \n+                    srcdir='autodoc_typehints_description_and_type_aliases', \n+                    confoverrides={'autodoc_typehints': 'description',\n+                                   'autodoc_type_aliases': {'JSONObject': 'types.JSONObject'}})\n+def test_autodoc_typehints_with_realistic_type_aliases(app: SphinxTestApp):\n+    (app.srcdir / 'types.rst').write_text('.. autofunction:: types.sphinx_doc')\n+    app.build()\n+    context = (app.outdir / 'types.txt').read_text()\n+    assert ('types.sphinx_doc(data)\\\\n'\n+            '\\\\n'\n+            '   Does it work.\\\\n'\n+            '\\\\n'\n+            '   Parameters:\\\\n'\n+            '      * **data** (*types.JSONObject*) --\\\\n'\n+            '         Does it args.\\\\n'\n+            '\\\\n'\n+            '   Returns\\\\n'\n+            '   -------\\\\n'\n+            '   Does it work in return.\\\\n'\n+            '\\\\n'\n+            '   Return type:\\\\n'\n+            '      types.JSONObject\\\\n' == context)\n+\n import platform\n import sys\n \n",
  "sphinx-doc__sphinx-8475": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 41632e7..45f0211 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -372,8 +372,93 @@ def test_connect_to_selfsigned_nonexistent_cert_file(app):\n     with https_server(OKHandler):\n         app.builder.build_all()\n \n+import requests\n+import pytest\n+import http.server\n+import json\n+from sphinx.testing.util import SphinxTestApp\n+from sphinx.testing.path import path\n+from sphinx.util.requests import head, get\n+from sphinx.util import requests\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_TooManyRedirects_on_HEAD(app: SphinxTestApp):\n+    class InfiniteRedirectOnHeadHandler(http.server.BaseHTTPRequestHandler):\n+        def do_HEAD(self):\n+            self.send_response(302, \"Found\")\n+            self.send_header(\"Location\", \"http://localhost:7777/\")\n+            self.end_headers()\n+\n+        def do_GET(self):\n+            self.send_response(200, \"OK\")\n+            self.end_headers()\n+            self.wfile.write(b\"ok\\n\")\n+\n+    with http_server(InfiniteRedirectOnHeadHandler):\n+        app.builder.build_all()\n+\n     with open(app.outdir / 'output.json') as fp:\n         content = json.load(fp)\n+    assert content == {\n+        \"code\": 0,\n+        \"status\": \"working\",\n+        \"filename\": \"index.rst\",\n+        \"lineno\": 1,\n+        \"uri\": \"http://localhost:7777/\",\n+        \"info\": \"\",\n+    }\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_TooManyRedirects_on_GET_fallback(app: SphinxTestApp):\n+    class TooManyRedirectsHandler(http.server.BaseHTTPRequestHandler):\n+        def do_HEAD(self):\n+            self.send_response(302, \"Found\")\n+            self.send_header(\"Location\", \"http://localhost:7777/\")\n+            self.end_headers()\n+\n+        def do_GET(self):\n+            self.send_response(200, \"OK\")\n+            self.end_headers()\n+            self.wfile.write(b\"GET OK\\n\")\n+\n+    with http_server(TooManyRedirectsHandler):\n+        app.builder.build_all()\n+\n+import requests\n+import pytest\n+import http.server\n+import json\n+from sphinx.testing.util import SphinxTestApp\n+from sphinx.testing.path import path\n+from sphinx.util.requests import head, get\n+from sphinx.util import requests\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_TooManyRedirects_on_HEAD(app: SphinxTestApp):\n+    class InfiniteRedirectOnHeadHandler(http.server.BaseHTTPRequestHandler):\n+        def do_HEAD(self):\n+            self.send_response(302, \"Found\")\n+            self.send_header(\"Location\", \"http://localhost:7777/\")\n+            self.end_headers()\n+\n+        def do_GET(self):\n+            self.send_response(200, \"OK\")\n+            self.end_headers()\n+            self.wfile.write(b\"ok\\n\")\n+\n+    with http_server(InfiniteRedirectOnHeadHandler):\n+        app.builder.build_all()\n+\n+    with open(app.outdir / 'output.json') as fp:\n+        content = json.load(fp)\n+    assert content == {\n+        \"code\": 0,\n+        \"status\": \"working\",\n+        \"filename\": \"index.rst\",\n+        \"lineno\": 1,\n+        \"uri\": \"http://localhost:7777/\",\n+        \"info\": \"\",\n+    }\n     assert content == {\n         \"code\": 0,\n         \"status\": \"broken\",\n@@ -381,4 +466,4 @@ def test_connect_to_selfsigned_nonexistent_cert_file(app):\n         \"lineno\": 1,\n         \"uri\": \"https://localhost:7777/\",\n         \"info\": \"Could not find a suitable TLS CA certificate bundle, invalid path: does/not/exist\",\n-    }\n+    }\n",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8721": "",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex 3c31d3d..9ac7e37 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -515,8 +515,16 @@ def test_dict_customtype():\n     # Type is unsortable, just check that it does not crash\n     assert \"<CustomType(2)>: 2\" in description\n \n+def test_object_description_enum():\n+    import enum\n \n-def test_getslots():\n+    class MyEnum(enum.Enum):\n+        ValueA = 10\n+        ValueB = 20\n+\n+    # Check that object_description renders the Enum as expected\n+    assert inspect.object_description(MyEnum.ValueA) == \"MyEnum.ValueA\"\n+    assert inspect.object_description(MyEnum.ValueB) == \"MyEnum.ValueB\"\n     class Foo:\n         pass\n \n",
  "sphinx-doc__sphinx-9320": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\nindex ff8df08..86a3f1c 100644\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -19,6 +19,20 @@ from sphinx.util.console import coloron, nocolor\n \n warnfile = StringIO()\n \n+def test_exits_when_existing_confpy(monkeypatch):\n+    # Mocking path.isfile to simulate the presence of an existing conf.py\n+    def mock_isfile(path):\n+        return True\n+    monkeypatch.setattr(path, 'isfile', mock_isfile)\n+\n+    # Simulating user input of an empty path, which should trigger an exit\n+    qs.term_input = mock_input({\n+        'Please enter a new root path (or just Enter to exit)': ''\n+    })\n+    d = {}\n+    with pytest.raises(SystemExit):\n+        qs.ask_user(d)\n+\n \n def setup_module():\n     nocolor()\n",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..253aaf2 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -55,6 +55,7 @@ from sphinx.pycode import ast\n     (\"- a\", \"- a\"),                             # USub\n     (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n     (\"()\", \"()\"),                               # Tuple (empty)\n+    (\"(1,)\", \"(1,)\"),                           # Tuple (single element)\n ])\n def test_unparse(source, expected):\n     module = ast.parse(source)\n",
  "sphinx-doc__sphinx-9591": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 29731ea..f7a54f1 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -847,7 +847,60 @@ def test_pyproperty(app):\n     assert domain.objects['Class.prop2'] == ('index', 'Class.prop2', 'property', False)\n \n \n-def test_pydecorator_signature(app):\n+def test_cross_reference_in_property_type_annotation(app):\n+    text = (\".. py:class:: Square\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: start\\n\"\n+            \"      :type: Point\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\"\n+            \"\\n\"\n+            \".. py:class:: Rectangle\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: start\\n\"\n+            \"      :type: Point\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\")\n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                                    [desc_name, \"Square\"])],\n+                                  [desc_content, (addnodes.index,\n+                                                  desc,\n+                                                  addnodes.index,\n+                                                  desc)])]))\n+    assert_node(doctree[1][1][0], addnodes.index,\n+                entries=[('single', 'start (Square attribute)', 'Square.start', '', None)])\n+    assert_node(doctree[1][1][1], ([desc_signature, ([desc_annotation, \"attribute \"],\n+                                                     [desc_name, \"start\"],\n+                                                     [pending_xref, \"Point\"])],\n+                                   [desc_content, ()]))\n+    assert_node(doctree[1][1][2], addnodes.index,\n+                entries=[('single', 'end (Square property)', 'Square.end', '', None)])\n+    assert_node(doctree[1][1][3], ([desc_signature, ([desc_annotation, \"property \"],\n+                                                     [desc_name, \"end\"],\n+                                                     [pending_xref, \"Point\"])],\n+                                   [desc_content, ()]))\n+    assert 'Square.start' in domain.objects\n+    assert 'Square.end' in domain.objects\n+\n+    assert_node(doctree[1][1][4], addnodes.index,\n+                entries=[('single', 'start (Rectangle attribute)', 'Rectangle.start', '', None)])\n+    assert_node(doctree[1][1][5], ([desc_signature, ([desc_annotation, \"attribute \"],\n+                                                     [desc_name, \"start\"],\n+                                                     [pending_xref, \"Point\"])],\n+                                   [desc_content, ()]))\n+    assert_node(doctree[1][1][6], addnodes.index,\n+                entries=[('single', 'end (Rectangle property)', 'Rectangle.end', '', None)])\n+    assert_node(doctree[1][1][7], ([desc_signature, ([desc_annotation, \"property \"],\n+                                                     [desc_name, \"end\"],\n+                                                     [pending_xref, \"Point\"])],\n+                                   [desc_content, ()]))\n+    assert 'Rectangle.start' in domain.objects\n+    assert 'Rectangle.end' in domain.objects\n     text = \".. py:decorator:: deco\"\n     domain = app.env.get_domain('py')\n     doctree = restructuredtext.parse(app, text)\n",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..c636965 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -756,7 +756,7 @@ def test_pymethod_options(app):\n \n     # :property:\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
  "sphinx-doc__sphinx-9711": "diff --git a/sphinx/extension.py b/sphinx/extension.py\nindex 6ac780b..a8aa52d 100644\n--- a/sphinx/extension.py\n+++ b/sphinx/extension.py\n@@ -8,6 +8,7 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+from packaging.version import Version\n from typing import TYPE_CHECKING, Any, Dict\n \n from sphinx.config import Config\n@@ -51,7 +52,7 @@ def verify_needs_extensions(app: \"Sphinx\", config: Config) -> None:\n                               'but it is not loaded.'), extname)\n             continue\n \n-        if extension.version == 'unknown version' or reqversion > extension.version:\n+        if extension.version == 'unknown version' or Version(reqversion) > Version(extension.version):\n             raise VersionRequirementError(__('This project needs the extension %s at least in '\n                                              'version %s and therefore cannot be built with '\n                                              'the loaded version (%s).') %\n",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..d66be26 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -236,7 +236,20 @@ def test_Point2D():\n     assert p2.distance(p3) == sqrt(17)/2\n \n \n-def test_issue_9214():\n+def test_issue_11617():\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point2D(2, 0)\n+    assert p1.distance(p2) == sqrt(5)\n+\n+def test_issue_11617_reverse():\n+    p1 = Point2D(2, 0)\n+    p2 = Point3D(1, 0, 2)\n+    assert p1.distance(p2) == sqrt(5)\n+\n+def test_issue_11617_higher_dimensions():\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point(2, 0, 0, 0)  # 4D point\n+    assert p1.distance(p2) == sqrt(6)\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n     p3 = Point3D(7, 2, 3)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..5005256 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -741,7 +741,21 @@ def test_special_printers():\n     assert isinstance(func1(), mpi)\n     assert isinstance(func2(), mpi)\n \n-def test_true_false():\n+from sympy.utilities.lambdify import implemented_function\n+from sympy import Float\n+\n+def test_issue_12092():\n+    f = implemented_function('f', lambda x: x**2)\n+    assert f(f(2)).evalf() == Float(16)\n+\n+def test_issue_recursive_evalf():\n+    f = implemented_function('f', lambda x: x**2)\n+    g = implemented_function('g', lambda x: 2 * x)\n+    \n+    assert f(g(2)).evalf() == Float(16)\n+    assert g(f(2)).evalf() == Float(8)\n+    assert f(g(f(2))).evalf() == Float(64)\n+    assert g(f(g(2))).evalf() == Float(32)\n     # We want exact is comparison here, not just ==\n     assert lambdify([], true)() is True\n     assert lambdify([], false)() is False\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..7332028 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -73,6 +73,15 @@ def test_ZeroMatrix_doit():\n \n \n def test_Identity():\n+    from sympy import Sum, symbols\n+\n+    i, j = symbols('i j', integer=True)\n+    n_val = 3  # Example value for testing\n+    In = Identity(n_val)\n+\n+    # Test for sum of all elements of the identity matrix\n+    total_sum = Sum(Sum(In[i, j], (i, 0, n_val - 1)), (j, 0, n_val - 1)).doit()\n+    assert total_sum == n_val, f\"Expected {n_val}, got {total_sum}\"\n     A = MatrixSymbol('A', n, m)\n     In = Identity(n)\n     Im = Identity(m)\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..a9f8521 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -330,6 +330,13 @@ def test_args():\n     assert p._array_form == [3, 2, 0, 1, 5, 4]\n     p = Permutation((0, 3, 1, 2))\n     assert p._cyclic_form is None\n+\n+    # Test non-disjoint cycles to verify the fix for the issue\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])  # Identity permutation\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([0, 2, 1])  # Non-disjoint cycles\n+    assert Permutation([[0, 1], [2, 0]]) == Permutation([1, 0, 2])  # Non-disjoint cycles\n+    assert Permutation([[0, 1], [1, 0]]) == Permutation([0, 1])  # Swapping back to identity\n+    assert Permutation([[2, 0], [0, 1]]) == Permutation([1, 0, 2])  # Non-disjoint cycles order matters\n     assert p._array_form == [0, 3, 1, 2]\n     assert Permutation([0]) == Permutation((0, ))\n     assert Permutation([[0], [1]]) == Permutation(((0, ), (1, ))) == \\\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..b5e4250 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -489,8 +489,26 @@ def test_errors():\n     raises(ShapeError,\n         lambda: SparseMatrix(1, 2, [1, 2]) + SparseMatrix(2, 1, [2, 1]))\n \n-\n-def test_len():\n+def test_hstack_vstack_zero_dimension():\n+    # Test horizontal stacking with zero-dimension matrices\n+    M1 = SparseMatrix.zeros(0, 0)\n+    M2 = SparseMatrix.zeros(0, 1)\n+    M3 = SparseMatrix.zeros(0, 2)\n+    M4 = SparseMatrix.zeros(0, 3)\n+    assert SparseMatrix.hstack(M1, M2, M3, M4).shape == (0, 6)\n+\n+    # Test vertical stacking with zero-dimension matrices\n+    M1 = SparseMatrix.zeros(1, 0)\n+    M2 = SparseMatrix.zeros(1, 1)\n+    M3 = SparseMatrix.zeros(1, 2)\n+    M4 = SparseMatrix.zeros(1, 3)\n+    assert SparseMatrix.hstack(M1, M2, M3, M4).shape == (1, 6)\n+\n+    M1 = SparseMatrix.zeros(0, 0)\n+    M2 = SparseMatrix.zeros(1, 0)\n+    M3 = SparseMatrix.zeros(2, 0)\n+    M4 = SparseMatrix.zeros(3, 0)\n+    assert SparseMatrix.vstack(M1, M2, M3, M4).shape == (6, 0)\n     assert not SparseMatrix()\n     assert SparseMatrix() == SparseMatrix([])\n     assert SparseMatrix() == SparseMatrix([[]])\n",
  "sympy__sympy-13372": "diff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\nindex e95146a..efa5b68 100644\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -230,8 +230,34 @@ def test_evalf_bugs():\n     #issue 11518\n     assert NS(2*x**2.5, 5) == '2.0000*x**2.5000'\n \n-\n-def test_evalf_integer_parts():\n+def test_issue_13076():\n+    # Original test patch\n+    assert NS(Mul(Max(0, y), x, evaluate=False).evalf()) == 'x*Max(0, y)'\n+\n+    # Additional test cases\n+    # Changing order of arguments again to test for robustness\n+    assert NS(Mul(x, Max(0, y), 2, evaluate=False).evalf()) == '2*x*Max(0, y)'\n+    assert NS(Mul(Max(0, y), 2, x, evaluate=False).evalf()) == '2*x*Max(0, y)'\n+\n+    # Including negative values and zero to see if the error reappears\n+    assert NS(Mul(Max(-1, y), x, evaluate=False).evalf()) == 'x*Max(-1, y)'\n+    assert NS(Mul(x, Max(-1, y), evaluate=False).evalf()) == 'x*Max(-1, y)'\n+    \n+    # Checking with zero as one of the elements\n+    assert NS(Mul(Max(0, y), 0, x, evaluate=False).evalf()) == '0'\n+    assert NS(Mul(0, x, Max(0, y), evaluate=False).evalf()) == '0'\n+\n+    # Mix with numbers and symbols\n+    assert NS(Mul(Max(0, 1), 3, x, evaluate=False).evalf()) == '3*x'\n+    assert NS(Mul(3, x, Max(0, 1), evaluate=False).evalf()) == '3*x'\n+\n+    # Testing with other functions inside Max\n+    assert NS(Mul(Max(sin(pi), y), x, evaluate=False).evalf()) == 'x*Max(0, y)'\n+    assert NS(Mul(x, Max(sin(pi), y), evaluate=False).evalf()) == 'x*Max(0, y)'\n+\n+    # Testing with a nested Max\n+    assert NS(Mul(Max(Max(0, y), 1), x, evaluate=False).evalf()) == 'x*Max(Max(0, y), 1)'\n+    assert NS(Mul(x, Max(Max(0, y), 1), evaluate=False).evalf()) == 'x*Max(Max(0, y), 1)'\n     a = floor(log(8)/log(2) - exp(-1000), evaluate=False)\n     b = floor(log(8)/log(2), evaluate=False)\n     assert a.evalf() == 3\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..6e3e3bf 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -203,8 +203,20 @@ def test_tanh():\n \n     assert tanh(k*pi*I/2) == tan(k*pi/2)*I\n \n+def test_coth_log_tan_substitution():\n+    from sympy import coth, log, tan, Symbol\n \n-def test_tanh_series():\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+    \n+    # Testing specific values mentioned in the issue\n+    integral_values_to_test = [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]\n+\n+    for val in integral_values_to_test:\n+        result = e.subs(x, val)\n+        print(f\"coth(log(tan({val}))) = {result}\")\n+\n+    # Add assertions if the expected behavior is known. For now, we just ensure no exception occurs.\n     x = Symbol('x')\n     assert tanh(x).series(x, 0, 10) == \\\n         x - x**3/3 + 2*x**5/15 - 17*x**7/315 + 62*x**9/2835 + O(x**10)\n",
  "sympy__sympy-13615": "",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..4af737b 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,20 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643():\n+    from sympy import eye, ones, Matrix\n+    M = eye(6)\n+    V = 2 * ones(6, 2)\n+    result = M.col_insert(3, V)\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert result == expected\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..1f01828 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -673,11 +673,20 @@ def test_Poly_mul():\n \n     assert Poly(1, x) * x == Poly(x, x)\n     assert Poly(1, x) * sin(x) == sin(x)\n-\n     assert Poly(x, x) * 2 == Poly(2*x, x)\n+    # Test cases for issue 13079\n+    assert Poly(x)*x == Poly(x**2, x, domain='ZZ')\n+    assert x*Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert -2*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2)*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert Poly(x)*S(-2) == Poly(-2*x, x, domain='ZZ')\n     assert 2 * Poly(x, x) == Poly(2*x, x)\n \n \n+from sympy import Poly, S, symbols\n+\n+x = symbols('x')\n+\n def test_Poly_sqr():\n     assert Poly(x*y, x, y).sqr() == Poly(x**2*y**2, x, y)\n \n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..c56206e 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -54,6 +54,24 @@ def test_printmethod():\n             return \"foo\"\n     assert latex(R(x)) == \"foo\"\n \n+def test_latex_mul_symbol_custom():\n+    from sympy import symbols, S\n+    x, y = symbols('x y')\n+    assert latex(3*x**2*y, mul_symbol='\\\\,') == r\"3\\,x^{2}\\,y\"\n+    assert latex(1.5*3**x, mul_symbol='\\\\,') == r\"1.5 \\, 3^{x}\"\n+    # Additional test for Integral with custom mul_symbol\n+    assert latex(Integral(2*x**2*y, x), mul_symbol='\\\\,') == r\"\\int 2\\,x^{2}\\,y\\,dx\"\n+\n+def test_latex_mul_symbol_compatibility():\n+    from sympy import symbols\n+    x, y = symbols('x y')\n+    # Test default behavior to ensure backward compatibility\n+    assert latex(2*x*y) == \"2 x y\"\n+    assert latex(2*x*y, mul_symbol=None) == \"2 x y\"\n+    assert latex(2*x*y, mul_symbol='dot') == r\"2 \\cdot x \\cdot y\"\n+    # Test with one of the predefined symbols\n+    assert latex(2*x*y, mul_symbol='times') == r\"2 \\times x \\times y\"\n+\n \n def test_latex_basic():\n     assert latex(1 + x) == \"x + 1\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..8cf107c 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -402,8 +402,29 @@ def test_determinant():\n     assert M.det(method=\"bareiss\") == z**2 - x*y\n     assert M.det(method=\"berkowitz\") == z**2 - x*y\n \n+def test_issue_13835():\n+    from sympy import symbols, Matrix\n \n-def test_det_LU_decomposition():\n+    a = symbols('a')\n+    M = lambda n: Matrix([[i + a*j for i in range(n)] for j in range(n)])\n+    \n+    # Test for matrices of size 3\n+    det_3 = M(3).det()\n+    assert det_3 == 0, f\"Unexpected determinant for 3x3 matrix: {det_3}\"\n+\n+    # Test for matrices of size 4\n+    det_4 = M(4).det()\n+    assert det_4 == 0, f\"Unexpected determinant for 4x4 matrix: {det_4}\"\n+\n+    # Original tests for matrices of size 5, 6, 7\n+    det_5 = M(5).det()\n+    assert det_5 == 0, f\"Unexpected determinant for 5x5 matrix: {det_5}\"\n+\n+    det_6 = M(6).det()\n+    assert det_6 == 0, f\"Unexpected determinant for 6x6 matrix: {det_6}\"\n+\n+    det_7 = M(7).det()\n+    assert det_7 == 0, f\"Unexpected determinant for 7x7 matrix: {det_7}\"\n \n     for M in [Matrix(), Matrix([[1]])]:\n         assert M.det(method=\"lu\") == 1\n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..e53ab16 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -708,9 +708,31 @@ def test_issue_10003():\n     G = Gamma('g', 1, 2)\n     assert P(X < -1) == S.Zero\n     assert P(G < -1) == S.Zero\n-\n def test_precomputed_cdf():\n     x = symbols(\"x\", real=True, finite=True)\n+    distribs = [\n+        Arcsin('A', 0, 3),\n+        Dagum('D', S(1)/3, S(1)/5, 2),\n+        Erlang(\"E\", 1, 1),\n+        Frechet(\"F\", S(4)/3, 1, 2),\n+        Gamma(\"G\", 0.1, 2),\n+        GammaInverse(\"GI\", S(5)/7, 2),\n+        Kumaraswamy(\"K\", S(1)/123, 5),\n+        Laplace(\"LA\", 2, 3),\n+        Logistic(\"L\", 1, 0.1),\n+        Nakagami(\"N\", S(7)/3, 1),\n+        StudentT(\"S\", 10),\n+        UniformSum(\"US\", 5)\n+    ]\n+    for distr in distribs:\n+        if distr.name == 'US':\n+            pdf_on_01 = density(distr)(x).subs(floor(x), 0).doit()\n+            cdf_on_01 = cdf(distr, evaluate=False)(x).subs(floor(x), 0).doit()\n+            assert tn(diff(cdf_on_01, x), pdf_on_01, x, a=0, b=0, c=1, d=0)\n+            continue\n+        for _ in range(5):\n+            assert tn(diff(cdf(distr)(x), x), density(distr)(x), x, a=0, b=0, c=1, d=0)\n+    x = symbols(\"x\", real=True, finite=True)\n     mu = symbols(\"mu\", real=True, finite=True)\n     sigma, xm, alpha = symbols(\"sigma xm alpha\", positive=True, finite=True)\n     n = symbols(\"n\", integer=True, positive=True, finite=True)\n",
  "sympy__sympy-13974": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bd3e825..0dc9701 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -48,6 +48,20 @@ def test_tensor_product_commutator():\n def test_tensor_product_simp():\n     assert tensor_product_simp(TP(A, B)*TP(B, C)) == TP(A*B, B*C)\n \n+    # Test cases for tensor products involving powers and expansion\n+    t1 = TP(1, 1) * TP(1, 1)\n+    assert tensor_product_simp(t1) == TP(1, 1)**2  # Expected simplified form\n+    assert t1.expand(tensorproduct=True) == TP(1, 1)**2  # Expected expanded form\n+\n+    t2 = TP(1, Pauli(3)) * TP(1, Pauli(3))\n+    assert tensor_product_simp(t2) == TP(1, Pauli(3))**2  # Expected simplified form\n+    assert t2.expand(tensorproduct=True) == TP(1, Pauli(3))**2  # Expected expanded form\n+\n+    # Further testing with substitution that resolves the power\n+    a = Symbol('a', commutative=False)\n+    assert tensor_product_simp(TP(1, 1) * TP(1, a)).subs(a, 1) == TP(1, 1)\n+    assert tensor_product_simp(TP(1, Pauli(3)) * TP(1, a)).subs(a, Pauli(3)) == TP(1, 1)\n+\n \n def test_issue_5923():\n     # most of the issue regarding sympification of args has been handled\n",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_python.py b/sympy/printing/tests/test_python.py\nindex 73fc070..5d8f53f 100644\n--- a/sympy/printing/tests/test_python.py\n+++ b/sympy/printing/tests/test_python.py\n@@ -80,7 +80,7 @@ def test_python_keyword_function_name_escaping():\n \n \n def test_python_relational():\n-    assert python(Eq(x, y)) == \"e = Eq(x, y)\"\n+    assert python(Eq(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = Eq(x, y)\"\n     assert python(Ge(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x >= y\"\n     assert python(Le(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x <= y\"\n     assert python(Gt(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x > y\"\n",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..f97e628 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -4,6 +4,14 @@ from sympy.abc import x, y, z\n from sympy.utilities.pytest import raises\n \n \n+def test_vector_add_zero():\n+    N = ReferenceFrame('N')\n+    # Test that adding zero vector works without error\n+    assert sum([N.x, (0 * N.x)]) == N.x\n+    assert N.x + 0 == N.x\n+    assert (0 * N.x) + N.x == N.x\n+from sympy.physics.vector import ReferenceFrame, Vector\n+\n Vector.simp = True\n A = ReferenceFrame('A')\n \n",
  "sympy__sympy-14976": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..460cd57 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1,3 +1,4 @@\n+\n from distutils.version import LooseVersion as V\n from itertools import product\n import math\n@@ -11,6 +12,9 @@ from sympy import (\n     true, false, And, Or, Not, ITE, Min, Max, floor, diff, IndexedBase, Sum,\n     DotProduct, Eq, Dummy, sinc)\n from sympy.printing.lambdarepr import LambdaPrinter\n+from sympy.functions.combinatorial.factorials import rf\n+from sympy.solvers import nsolve\n+import sympy as sp\n from sympy.utilities.lambdify import implemented_function\n from sympy.utilities.pytest import skip\n from sympy.utilities.decorator import conserve_mpmath_dps\n@@ -134,6 +138,21 @@ def test_math_lambda():\n \n \n @conserve_mpmath_dps\n+def test_lambdify_rational_handling_mpmath():\n+    x = symbols('x')\n+    eqn = Eq(rf(18, x), 77 + Rational(1, 3))\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+\n+    # Verify that the lambda function source code\n+    # wraps the rational correctly using mpmath\n+    source_code = inspect.getsource(f)\n+    assert \"mpmath.mpf(232)/mpmath.mpf(3)\" in source_code\n+\n+    # Solve using nsolve and verify precision\n+    x0 = nsolve(eqn, sp.Float('1.5', 64), prec=64)\n+    result = rf(18, x0).evalf(64)\n+    expected = sp.Float('77.33333333333333333333333333333333333333333333333333333333333333', 64)\n+    assert abs(result - expected) < 1e-50\n def test_mpmath_lambda():\n     mpmath.mp.dps = 50\n     sin02 = mpmath.mpf(\"0.19866933079506121545941262711838975037020672954020\")\n@@ -145,6 +164,21 @@ def test_mpmath_lambda():\n \n \n @conserve_mpmath_dps\n+def test_lambdify_rational_handling_mpmath():\n+    x = symbols('x')\n+    eqn = Eq(rf(18, x), 77 + Rational(1, 3))\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+\n+    # Verify that the lambda function source code\n+    # wraps the rational correctly using mpmath\n+    source_code = inspect.getsource(f)\n+    assert \"mpmath.mpf(232)/mpmath.mpf(3)\" in source_code\n+\n+    # Solve using nsolve and verify precision\n+    x0 = nsolve(eqn, sp.Float('1.5', 64), prec=64)\n+    result = rf(18, x0).evalf(64)\n+    expected = sp.Float('77.33333333333333333333333333333333333333333333333333333333333333', 64)\n+    assert abs(result - expected) < 1e-50\n def test_number_precision():\n     mpmath.mp.dps = 50\n     sin02 = mpmath.mpf(\"0.19866933079506121545941262711838975037020672954020\")\n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..0b6a773 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -73,7 +74,7 @@ def test_ndim_array_initiation():\n \n     from sympy.abc import x\n     rank_zero_array = ImmutableDenseNDimArray(x)\n-    assert len(rank_zero_array) == 0\n+    assert len(rank_zero_array) == 1  # Updated to match expected behavior\n     assert rank_zero_array.shape == ()\n     assert rank_zero_array.rank() == 0\n     assert rank_zero_array[()] == x\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..7eaf694 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n",
  "sympy__sympy-15349": "",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..928a95b 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1625,6 +1625,19 @@ def test_Mod():\n     assert (3*i*x) % (2*i*y) == i*Mod(3*x, 2*y)\n     assert Mod(4*i, 4) == 0\n \n+    # Test cases for issue #15493\n+    i, j = symbols('i j', integer=True, positive=True)\n+    assert Mod(3*i, 2) == Mod(i, 2)  # Original test case\n+    assert Mod(8*i/j, 4) == 4*Mod(2*i/j, 1)  # Original test case\n+    assert Mod(8*i, 4) == 0  # Original test case\n+\n+    # Additional test cases to ensure correctness and coverage\n+    assert Mod(6*i, 2) == 0  # Multiples of the modulus should be zero\n+    assert Mod(3*i + 1, 2) == Mod(i + 1, 2)  # Check if constant terms are handled\n+    assert Mod(5*i, 5) == 0  # Mod with self as modulus\n+    assert Mod(-3*i, 2) == Mod(i, 2)  # Negative multiples of 3\n+    assert Mod(i, i) == 0  # Mod with self should be zero\n+\n     # issue 8677\n     n = Symbol('n', integer=True, positive=True)\n     assert factorial(n) % n == 0\n",
  "sympy__sympy-15809": "diff --git a/sympy/functions/elementary/tests/test_miscellaneous.py b/sympy/functions/elementary/tests/test_miscellaneous.py\nindex 821fd0c..050d25b 100644\n--- a/sympy/functions/elementary/tests/test_miscellaneous.py\n+++ b/sympy/functions/elementary/tests/test_miscellaneous.py\n@@ -85,7 +85,7 @@ def test_Min():\n     assert Min(p, p_).func is Min\n \n     # lists\n-    raises(ValueError, lambda: Min())\n+    assert Min() == S.Infinity\n     assert Min(x, y) == Min(y, x)\n     assert Min(x, y, z) == Min(z, y, x)\n     assert Min(x, Min(y, z)) == Min(z, y, x)\n@@ -156,7 +156,7 @@ def test_Max():\n \n     # lists\n \n-    raises(ValueError, lambda: Max())\n+    assert Max() == S.NegativeInfinity\n     assert Max(x, y) == Max(y, x)\n     assert Max(x, y, z) == Max(z, y, x)\n     assert Max(x, Max(y, z)) == Max(z, y, x)\n",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..151f6b6 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1987,10 +1987,49 @@ def test_Add_is_zero():\n     assert (x + y).is_zero\n \n \n+def test_issue_15873():\n+    from sympy import I, simplify\n+\n+    # Original test case from the issue\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None\n+    assert simplify(e).is_zero is True\n+\n+    # Additional test cases\n+    # Case where the complex expression simplifies to zero\n+    e1 = I - I\n+    assert e1.is_zero is True\n+\n+    # Case where it can't be determined if the expression is zero\n+    e2 = I + (1 - I)*(1 + I)\n+    assert e2.is_zero is None\n+\n+    # Case with a simple non-zero complex number\n+    e3 = 1 + I\n+    assert e3.is_zero is False\n+\n+    # Further complex arithmetic\n+    e4 = (1 + 2*I) + (-1 - 2*I)\n+    assert e4.is_zero is True\n+\n+    e5 = (1 + I)**2 + (-2*I - 1)\n+    assert e5.is_zero is None\n+    assert simplify(e5).is_zero is True\n+\n+    # Test with symbols\n+    from sympy import symbols\n+    a, b = symbols('a b', imaginary=True)\n+    assert (a + b).is_zero is None\n+\n+    # Test zero property with complex symbolic expressions\n+    x, y = symbols('x y', zero=True)\n+    assert (x + I*y).is_zero is None\n+    assert (x - I*y + I*y).is_zero is True\n+\n def test_issue_14392():\n     assert (sin(zoo)**2).as_real_imag() == (nan, nan)\n \n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..80bb6b9 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -477,8 +477,37 @@ def test_logcombine_complex_coeff():\n     assert logcombine(i + 2*log(x), force=True) == \\\n         i + log(x**2)\n \n-\n-def test_issue_5950():\n+def test_posify_assumptions():\n+    from sympy import Symbol, posify\n+    \n+    # Test with finite assumption\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0['finite'] is True\n+    assert eq.assumptions0['infinite'] is False\n+    \n+    # Test with integer assumption\n+    m = Symbol('m', integer=True)\n+    eq, rep = posify(m)\n+    assert eq.assumptions0['integer'] is True\n+    assert eq.assumptions0['rational'] is True\n+    \n+    # Test with rational assumption\n+    r = Symbol('r', rational=True)\n+    eq, rep = posify(r)\n+    assert eq.assumptions0['rational'] is True\n+    \n+    # Test with even assumption\n+    e = Symbol('e', even=True)\n+    eq, rep = posify(e)\n+    assert eq.assumptions0['even'] is True\n+    assert eq.assumptions0['integer'] is True\n+    \n+    # Test with odd assumption\n+    o = Symbol('o', odd=True)\n+    eq, rep = posify(o)\n+    assert eq.assumptions0['odd'] is True\n+    assert eq.assumptions0['integer'] is True\n     x, y = symbols(\"x,y\", positive=True)\n     assert logcombine(log(3) - log(2)) == log(Rational(3,2), evaluate=False)\n     assert logcombine(log(x) - log(y)) == log(x/y)\n",
  "sympy__sympy-16766": "",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py\nindex 23fddca..78bdc3c 100644\n--- a/sympy/utilities/tests/test_autowrap.py\n+++ b/sympy/utilities/tests/test_autowrap.py\n@@ -30,8 +30,17 @@ def get_string(dump_fn, routines, prefix=\"file\", **kwargs):\n     output.close()\n     return source\n \n+from sympy.utilities.autowrap import autowrap\n+from sympy import MatrixSymbol\n+import numpy as np\n+\n+def test_autowrap_cython_unused_array_arg():\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0  # Expression does not depend on x\n+    f = autowrap(expr, args=(x,), backend='cython')\n \n-def test_cython_wrapper_scalar_function():\n+    result = f(np.array([[1.0], [2.0]]))\n+    assert result == 1.0\n     x, y, z = symbols('x,y,z')\n     expr = (x + y)*z\n     routine = make_routine(\"test\", expr)\n",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..05318dd 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -237,8 +237,18 @@ def test_decipher_kid_rsa():\n     assert decipher_kid_rsa(3, (8, 3)) == 1\n     assert decipher_kid_rsa(2, (7, 4)) == 1\n \n+from sympy.crypto.crypto import encode_morse\n \n def test_encode_morse():\n+    # Original test patch\n+    assert encode_morse('12345') == '.----|..---|...--|....-|.....'\n+    assert encode_morse('67890') == '-....|--...|---..|----.|-----'\n+    \n+    # New test cases specifically for '1'\n+    assert encode_morse('1') == '.----'\n+    assert encode_morse('01') == '-----|.----'\n+    assert encode_morse('10') == '.----|-----'\n+    assert encode_morse('111') == '.----|.----|.----'\n     assert encode_morse('ABC') == '.-|-...|-.-.'\n     assert encode_morse('SMS ') == '...|--|...||'\n     assert encode_morse('SMS\\n') == '...|--|...||'\n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..1bbcb29 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -811,7 +811,20 @@ def test_issue_15965():\n     assert simplify(B) == bnew\n \n \n+def test_issue_17137():\n+    from sympy import Symbol, cos, I, simplify\n+    x = Symbol('x')\n+    # Test cases directly related to the issue\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+\n+    # Additional test cases to ensure there's no regression\n+    assert simplify(cos(x)**(-I)) == cos(x)**(-I)\n+    assert simplify(cos(x)**(1 + I)) == cos(x)**(1 + I)\n+    assert simplify(cos(x)**(I - 1)) == cos(x)**(I - 1)\n+    assert simplify(cos(x)**(3*I)) == cos(x)**(3*I)\n+\n def test_issue_7971():\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..601f876 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,5 +1,7 @@\n+\n from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n-from sympy.simplify.sqrtdenest import _subsets as subsets\n+from sympy.simplify.sqrtdenest import _subsets as subsets, _sqrt_match\n+from sympy.core.expr import unchanged\n from sympy.utilities.pytest import slow\n \n r2, r3, r5, r6, r7, r10, r15, r29 = [sqrt(x) for x in [2, 3, 5, 6, 7, 10,\n@@ -175,8 +177,16 @@ def test_subsets():\n         [0, 1, 1, 0], [1, 1, 1, 0], [0, 0, 0, 1], [1, 0, 0, 1], [0, 1, 0, 1],\n         [1, 1, 0, 1], [0, 0, 1, 1], [1, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]]\n \n-\n-def test_issue_5653():\n+def test_issue_12420():\n+    I = S.ImaginaryUnit\n+    # Check if _sqrt_match correctly returns an empty list for 4 + I\n+    assert _sqrt_match(4 + I) == []\n+    # Verify that the expression is returned unchanged when it cannot be denested\n+    expr = (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2\n+    assert sqrtdenest(expr) == expr\n+    # Additional check with a different expression\n+    e = 3 - sqrt(2)*sqrt(4 + I) + 3*I\n+    assert sqrtdenest(e) == e\n     assert sqrtdenest(\n         sqrt(2 + sqrt(2 + sqrt(2)))) == sqrt(2 + sqrt(2 + sqrt(2)))\n \n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..a79d0c7 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n@@ -6,6 +7,8 @@ from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.pytest import raises, warns\n \n \n+from sympy import sympify\n+\n def test_point():\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n@@ -91,6 +94,11 @@ def test_point():\n     assert (-p3).__rsub__(p4) == p3.midpoint(p4).scale(2, 2)\n \n     assert p4 * 5 == Point(5, 5)\n+    assert 5 * p4 == Point(5, 5)  # Original test patch\n+    assert sympify(2.0) * p4 == Point(2.0, 2.0)  # Additional test case to test issue\n+    assert p4 * sympify(2.0) == Point(2.0, 2.0)  # Ensure both ways work\n+    assert (p3 + sympify(2.0) * p4) == Point(2.0, 2.0)  # Extended test case \n+    assert (p3 + p4 * sympify(2.0)) == Point(2.0, 2.0)  # Extended test case\n     assert p4 / 5 == Point(0.2, 0.2)\n \n     raises(ValueError, lambda: Point(0, 0) + 10)\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..e7c3349 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -553,8 +553,16 @@ def test_diophantine():\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n     assert diophantine((y**2-x), t) == set([(t**2, -t)])\n \n-\n-def test_general_pythagorean():\n+def test_issue_diophantine_incomplete_results():\n+    from sympy import symbols\n+    from sympy.solvers.diophantine import diophantine\n+\n+    x, y = symbols('x y')\n+    # Test case to check if the solutions are complete and consistent across symbol permutations\n+    assert diophantine(x**4 + y**4 - 2**4 - 3**4, syms=(x, y), permute=True) == \\\n+           set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(x**4 + y**4 - 2**4 - 3**4, syms=(y, x), permute=True) == \\\n+           set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n     from sympy.abc import a, b, c, d, e\n \n     assert check_solutions(a**2 + b**2 + c**2 - d**2)\n",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..021584b 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -664,6 +664,17 @@ def test_latex_derivatives():\n     x2 = Symbol('x2')\n     assert latex(diff(f(x1, x2), x1)) == r'\\frac{\\partial}{\\partial x_{1}} f{\\left(x_{1},x_{2} \\right)}'\n \n+def test_issue_incorrect_parenthesizing_of_subs():\n+    from sympy import Subs\n+    from sympy.abc import x, y\n+    # Original test case\n+    assert latex(3*Subs(-x + y, (x,), (1,))) == r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+    # More test cases\n+    assert latex(2*Subs(x + y, (x, y), (1, 2))) == r'2 \\left. \\left(x + y\\right) \\right|_{\\substack{ x=1\\\\ y=2 }}'\n+    assert latex(Subs(x*y + y**2, (x, y), (1, 2))) == r'\\left. \\left(x y + y^{2}\\right) \\right|_{\\substack{ x=1\\\\ y=2 }}'\n+    assert latex(4*Subs(x**2 - y, (x,), (3,))) == r'4 \\left. \\left(x^{2} - y\\right) \\right|_{\\substack{ x=3 }}'\n+    assert latex(-Subs(x - y, (x,), (0,))) == r'- \\left. \\left(x - y\\right) \\right|_{\\substack{ x=0 }}'\n+\n     n1 = Symbol('n1')\n     assert latex(diff(f(x), (x, n1))) ==  r'\\frac{d^{n_{1}}}{d x^{n_{1}}} f{\\left(x \\right)}'\n \n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "diff --git a/sympy/sets/tests/test_conditionset.py b/sympy/sets/tests/test_conditionset.py\nindex 68ee5d6..5377fc5 100644\n--- a/sympy/sets/tests/test_conditionset.py\n+++ b/sympy/sets/tests/test_conditionset.py\n@@ -1,3 +1,4 @@\n+\n from sympy.sets import (ConditionSet, Intersection, FiniteSet,\n     EmptySet, Union, Contains)\n from sympy import (Symbol, Eq, S, Abs, sin, pi, Interval,\n@@ -129,6 +130,30 @@ def test_subs_CondSet():\n     assert ConditionSet(f(x), f(x) < 1, {w, z}\n         ).subs(f(x), y) == ConditionSet(y, y < 1, {w, z})\n \n+    # Additional tests for issue with ConditionSet and ImageSet\n+    k = Symbol('k')\n+    img1 = imageset(Lambda(k, 2*k*pi + asin(y)), S.Integers)\n+    img2 = imageset(Lambda(k, 2*k*pi + asin(S.One/3)), S.Integers)\n+    \n+    # Verify substitution on ConditionSet with ImageSet\n+    cond_set1 = ConditionSet(x, Contains(y, Interval(-1,1)), img1)\n+    result1 = cond_set1.subs(y, S.One/3)\n+    assert result1.dummy_eq(img2), \"Substitution result: {}\".format(result1)\n+\n+    # Verify direct substitution on ImageSet\n+    img_subs = img1.subs(y, S.One/3)\n+    assert img_subs == img2, \"Direct substitution result: {}\".format(img_subs)\n+\n+    # Verify different substitution value\n+    img3 = imageset(Lambda(k, 2*k*pi + asin(S.One/2)), S.Integers)\n+    cond_set2 = ConditionSet(x, Contains(y, Interval(-1,1)), img1)\n+    result2 = cond_set2.subs(y, S.One/2)\n+    assert result2.dummy_eq(img3), \"Substitution result: {}\".format(result2)\n+\n+    # Test simultaneous substitution\n+    result3 = cond_set1.subs({y: S.One/3}, simultaneous=True)\n+    assert result3.dummy_eq(img2), \"Simultaneous substitution result: {}\".format(result3)\n+\n \n def test_subs_CondSet_tebr():\n     with warns_deprecated_sympy():\n",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..dd6aec0 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -514,7 +514,36 @@ def test_kernS():\n     assert one != 1 and one.expand() == 1\n \n \n-def test_issue_6540_6552():\n+def test_kernS_issue_resolution():\n+    from sympy.core.sympify import kernS\n+    from sympy.abc import x\n+\n+    # Test with a simple algebraic expression\n+    assert kernS(\"(2*x)/(x-1)\") == 2*x/(x-1)\n+\n+    # Test with additional cases covering potential edge scenarios\n+    # Ensure that negative and complex expressions are handled\n+    assert kernS(\"-(x + 1)\") == -(x + 1)\n+    assert kernS(\"-(x - 1) + (x+1)\") == -(x - 1) + (x + 1)\n+\n+    # Test with nested parentheses and mixed operations\n+    assert kernS(\"2*(2*(x + y))\") == 2*(2*(x + y))\n+    assert kernS(\"3 + 2*(1 + (x - 1))\") == 3 + 2*(1 + (x - 1))\n+\n+    # Test with expressions containing spaces and ensure they process without error\n+    assert kernS(\"2 * (x + y) \") == 2*(x + y)\n+\n+    # Test with strings representing complex numbers\n+    assert kernS(\"I*(x + 1)\") == I*(x + 1)\n+\n+    # Verify that the function correctly handles malformed input by raising appropriate exceptions\n+    from sympy.core.sympify import SympifyError\n+    try:\n+        kernS(\"((x + 1)\")  # unmatched parenthesis\n+    except SympifyError:\n+        pass\n+    else:\n+        assert False, \"Expected SympifyError for unmatched parenthesis\"\n     assert S('[[1/3,2], (2/5,)]') == [[Rational(1, 3), 2], (Rational(2, 5),)]\n     assert S('[[2/6,2], (2/4,)]') == [[Rational(1, 3), 2], (S.Half,)]\n     assert S('[[[2*(1)]]]') == [[[2]]]\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_operator.py b/sympy/physics/quantum/tests/test_operator.py\nindex 799aaae..4d5a02f 100644\n--- a/sympy/physics/quantum/tests/test_operator.py\n+++ b/sympy/physics/quantum/tests/test_operator.py\n@@ -1,5 +1,7 @@\n+\n from sympy import (Derivative, diff, Function, Integer, Mul, pi, sin, Symbol,\n                    symbols)\n+from sympy.physics.quantum import IdentityOperator\n from sympy.physics.quantum.qexpr import QExpr\n from sympy.physics.quantum.dagger import Dagger\n from sympy.physics.quantum.hilbert import HilbertSpace\n@@ -84,7 +86,26 @@ def test_unitary():\n     assert Dagger(U).is_commutative is False\n \n \n-def test_identity():\n+def test_dagger_mul():\n+    O = Operator('O')\n+    I = IdentityOperator()\n+    \n+    # Test case from the issue\n+    D_O = Dagger(O)\n+    assert D_O * I == D_O  # This should simplify to just D_O\n+\n+    # Additional test cases\n+    assert I * D_O == D_O  # This too should simplify to just D_O\n+    assert (D_O * I).is_commutative is False  # Ensure it remains non-commutative\n+    assert (I * D_O).is_commutative is False  # Ensure it remains non-commutative\n+\n+    # Original test cases\n+    assert Dagger(O) * O == Dagger(O) * O\n+    assert Dagger(O) * O * I == Mul(Dagger(O), O) * I\n+    assert Dagger(O) * Dagger(O) == Dagger(O) ** 2\n+    assert Dagger(O) * Dagger(I) == Dagger(O)\n+    assert I * Dagger(O) == Dagger(O)\n+    assert Dagger(O) * I == Dagger(O)\n     I = IdentityOperator()\n     O = Operator('O')\n     x = Symbol(\"x\")\n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..679bc7d 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -901,6 +901,33 @@ def test_sylow_subgroup():\n     assert G.order()/S.order() % 3 > 0\n \n     G = AlternatingGroup(100)\n+\n+    # Additional test cases for the sylow_subgroup() issue\n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n+    # Additional edge cases\n+    G = DihedralGroup(2*25)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n+    G = DihedralGroup(2*17)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 2\n+\n+    G = DihedralGroup(2*15)\n+    S = G.sylow_subgroup(p=3)\n+    assert S.order() == 3\n+\n+    # Test with different prime numbers\n+    G = DihedralGroup(2*11)\n+    S = G.sylow_subgroup(p=11)\n+    assert S.order() == 11\n     S = G.sylow_subgroup(2)\n     assert G.order() % S.order() == 0\n     assert G.order()/S.order() % 2 > 0\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..752700a 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -472,6 +472,26 @@ def test_multiset_permutations():\n \n \n def test_partitions():\n+    # Test to verify that partitions do not reuse dictionary objects\n+    partitions_list = list(partitions(6, k=2))\n+    ids = [id(p) for p in partitions_list]\n+    assert len(ids) == len(set(ids)), \"Partition dictionaries are being reused\"\n+\n+    partitions_list = list(partitions(6, k=3))\n+    ids = [id(p) for p in partitions_list]\n+    assert len(ids) == len(set(ids)), \"Partition dictionaries are being reused\"\n+\n+    partitions_list = list(partitions(8, k=4, m=3))\n+    ids = [id(p) for p in partitions_list]\n+    assert len(ids) == len(set(ids)), \"Partition dictionaries are being reused\"\n+\n+    partitions_list = list(partitions(S(3), m=2))\n+    ids = [id(p) for p in partitions_list]\n+    assert len(ids) == len(set(ids)), \"Partition dictionaries are being reused\"\n+\n+    partitions_list = list(partitions(4, k=3))\n+    ids = [id(p) for p in partitions_list]\n+    assert len(ids) == len(set(ids)), \"Partition dictionaries are being reused\"\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n         assert list(partitions(0, size=i)) == ans[i]\n",
  "sympy__sympy-20801": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e1c7e2..97a311f 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -571,25 +571,60 @@ def test_Float():\n     raises(ValueError, lambda: Float(\"1.23\", dps=\"\", precision=10))\n     raises(ValueError, lambda: Float(\"1.23\", dps=3, precision=\"\"))\n     raises(ValueError, lambda: Float(\"1.23\", dps=\"\", precision=\"\"))\n-\n+from sympy import S\n+\n+def test_zero_not_false():\n+    # https://github.com/sympy/sympy/issues/20796\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n     # from NumberSymbol\n     assert same_and_same_prec(Float(pi, 32), pi.evalf(32))\n     assert same_and_same_prec(Float(Catalan), Catalan.evalf())\n-\n+from sympy import S\n+\n+def test_zero_not_false():\n+    # https://github.com/sympy/sympy/issues/20796\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n     # oo and nan\n     u = ['inf', '-inf', 'nan', 'iNF', '+inf']\n     v = [oo, -oo, nan, oo, oo]\n     for i, a in zip(u, v):\n         assert Float(i) is a\n-\n-\n-\n+from sympy import S\n+\n+def test_zero_not_false():\n+    # https://github.com/sympy/sympy/issues/20796\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n+\n+from sympy import S\n+\n+def test_zero_not_false():\n+    # https://github.com/sympy/sympy/issues/20796\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n @conserve_mpmath_dps\n def test_float_mpf():\n     import mpmath\n     mpmath.mp.dps = 100\n     mp_pi = mpmath.pi()\n-\n+from sympy import S\n+\n+def test_zero_not_false():\n+    # https://github.com/sympy/sympy/issues/20796\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n     assert Float(mp_pi, 100) == Float(mp_pi._mpf_, 100) == pi.evalf(100)\n \n     mpmath.mp.dps = 15\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..4a394a3 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -9,6 +10,40 @@ from sympy.testing.pytest import XFAIL\n from sympy.abc import a, x, y, z, t\n \n def test_subs():\n+    # Test case for issue with PolynomialError in specific subs usage\n+    from sympy import sinh, Piecewise\n+\n+    # Test that reproduces the original error condition without clear_cache\n+    # Using real=True for x and y that caused the PolynomialError\n+    x_r, y_r, z_r = symbols('x_r y_r z_r', real=True)\n+    expr_real = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    result_real = expr_real.subs({1: 1.0})\n+    assert isinstance(result_real, Expr)  # Ensure no error and result is a valid expression\n+\n+    # Additional tests for similar expressions\n+    x_nr, y_nr, z_nr = symbols('x_nr y_nr z_nr')\n+    expr_no_real = exp(sinh(Piecewise((x_nr, y_nr > x_nr), (y_nr, True)) / z_nr))\n+    result_no_real = expr_no_real.subs({1: 1.0})\n+    assert isinstance(result_no_real, Expr)\n+\n+    # Test with different trigonometric functions to ensure robustness\n+    expr_cosh = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    result_cosh = expr_cosh.subs({1: 1.0})\n+    assert isinstance(result_cosh, Expr)\n+\n+    expr_tanh = exp(tanh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    result_tanh = expr_tanh.subs({1: 1.0})\n+    assert isinstance(result_tanh, Expr)\n+\n+    # Test without division by z to check behavior\n+    expr_no_div = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n+    result_no_div = expr_no_div.subs({1: 1.0})\n+    assert isinstance(result_no_div, Expr)\n+    \n+    # Test without the exp\n+    expr_no_exp = sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r)\n+    result_no_exp = expr_no_exp.subs({1: 1.0})\n+    assert isinstance(result_no_exp, Expr)\n     n3 = Rational(3)\n     e = x\n     e = e.subs(x, n3)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..0132695 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -17,6 +17,20 @@ from sympy.testing.pytest import raises\n \n \n def test_monomials():\n+    # Test case for the issue described with itermonomials using min_degrees\n+    from sympy.polys.monomials import itermonomials\n+    from sympy.polys.orderings import monomial_key\n+\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    assert set(itermonomials([x1, x2, x3], 3, 3)) == {x1**3, x2**3, x3**3, x1*x2**2, x1**2*x2, x1*x3**2, x1**2*x3, x2*x3**2, x2**2*x3, x2*x1**2, x3*x1**2, x3*x2**2, x3**2*x1, x3**2*x2, x1*x2*x3}\n+\n+    # Original test patch\n+    assert set(itermonomials([x, y], 3, 3)) == {x**3, x**2*y, x*y**2, y**3}\n+    assert set(itermonomials([x, y], 3, 2)) == {x**2, x*y, y**2, x**3, x**2*y, x*y**2, y**3}\n+\n+    i, j, k = symbols('i j k', commutative=False)\n+    assert set(itermonomials([i, j, k], 2, 2)) == {k*i, i**2, i*j, j*k, j*i, k**2, j**2, k*j, i*k}\n+    assert set(itermonomials([i, j, k], 3, 2)) == {j*k**2, i*k**2, k*i*j, k*i**2, k**2, j*k*j, k*j**2, i*k*i, i*j, j**2*k, i**2*j, j*i*k, j**3, i**3, k*j*i, j*k*i, j*i, k**2*j, j*i**2, k*j, k*j*k, i*j*i, j*i*j, i*j**2, j**2, k*i*k, i**2, j*k, i*k, i*k*j, k**3, i**2*k, j**2*i, k**2*i, i*j*k, k*i}\n \n     # total_degree tests\n     assert set(itermonomials([], 0)) == {S.One}\n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..8bf2946 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -267,6 +267,8 @@ def test_String():\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n+    # New test case to verify argument invariance for String\n+    assert st.func(*st.args) == st\n \n \n     class Signifier(String):\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..d774a1b 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -9,6 +10,7 @@ from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n+from sympy.core.parameters import evaluate\n from sympy.testing.pytest import raises, warns\n \n \n@@ -443,8 +445,24 @@ def test_unit():\n def test_dot():\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n-\n-def test__normalize_dimension():\n+def test_issue_22684():\n+    # Used to give an error\n+    with evaluate(False):\n+        p1 = Point(1, 2)\n+        assert isinstance(p1, Point2D)\n+        assert p1.equals(Point2D(1, 2))\n+\n+    with evaluate(False):\n+        p2 = Point2D(1, 2)\n+        assert isinstance(p2, Point2D)\n+        assert p2.equals(Point2D(1, 2))\n+        \n+    # Check that imaginary coordinates still raise an error\n+    with evaluate(False):\n+        raises(ValueError, lambda: Point(1 + I, 2))\n+\n+    with evaluate(False):\n+        raises(ValueError, lambda: Point2D(1, I))\n     assert Point._normalize_dimension(Point(1, 2), Point(3, 4)) == [\n         Point(1, 2), Point(3, 4)]\n     assert Point._normalize_dimension(\n",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..0db0248 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n@@ -33,6 +34,10 @@ def test_PythonCodePrinter():\n     assert prntr.doprint(Mod(x, 2)) == 'x % 2'\n     assert prntr.doprint(-Mod(x, y)) == '-(x % y)'\n     assert prntr.doprint(Mod(-x, y)) == '(-x) % y'\n+    assert prntr.doprint(Min(x, y)) == \"min(x, y)\"\n+    assert prntr.doprint(Max(x, y)) == \"max(x, y)\"\n+    assert prntr.doprint(Min(x, y, z)) == \"min(x, y, z)\"\n+    assert prntr.doprint(Max(x, y, z)) == \"max(x, y, z)\"\n     assert prntr.doprint(And(x, y)) == 'x and y'\n     assert prntr.doprint(Or(x, y)) == 'x or y'\n     assert not prntr.module_imports\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..6348117 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,9 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+from sympy import lambdify\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n@@ -1182,7 +1185,21 @@ def test_lambdify_inspect():\n     assert 'x**2' in inspect.getsource(f)\n \n \n-def test_issue_14941():\n+def test_single_element_tuple():\n+    # Test a tuple with a single element\n+    f_single = lambdify([], (1,))\n+    assert f_single() == (1,)\n+\n+    # Use inspect to check the source code to ensure it respects tuple syntax\n+    source_single = inspect.getsource(f_single)\n+    assert 'return (1,)' in source_single\n+\n+    # Test a tuple with multiple elements to compare with single element tuple\n+    f_multi = lambdify([], (1, 2))\n+    assert f_multi() == (1, 2)\n+\n+    source_multi = inspect.getsource(f_multi)\n+    assert 'return (1, 2)' in source_multi\n     x, y = Dummy(), Dummy()\n \n     # test dict\n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..32942ee 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,7 +1,9 @@\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n from sympy.core.sympify import sympify  # can't import as S yet\n+from sympy.core.function import Function, UndefinedFunction\n from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n \n from sympy.testing.pytest import raises\n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..afb3120 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -262,6 +262,17 @@ def test_kahane_simplify1():\n     assert r.equals(-2*G(sigma)*G(rho)*G(nu))\n \n \n+def test_kahane_leading_gamma_matrix_bug():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n+    \n+    t = G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+    \n+    t = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n def test_gamma_matrix_class():\n     i, j, k = tensor_indices('i,j,k', LorentzIndex)\n \n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..ba19582 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -46,6 +46,23 @@ def test_as_set():\n     raises(NotImplementedError, lambda:\n            Contains(x, FiniteSet(y)).as_set())\n \n-def test_type_error():\n+def test_contains_as_set_raises():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    z = Symbol('z')\n+    \n+    # Test that calling as_set() on Contains raises NotImplementedError\n+    raises(NotImplementedError, lambda: Contains(x, FiniteSet(y)).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, S.Integers).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, S.Reals).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, Union(FiniteSet(y), FiniteSet(z))).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, Interval(0, 1)).as_set())\n+\n+def test_piecewise_with_contains():\n+    x = Symbol('x')\n+    # Test Contains in Piecewise to ensure as_set() issues are handled\n+    expr = Piecewise((6, Contains(x, S.Reals)), (7, True))\n+    assert expr.subs(x, 0) == 6\n+    assert expr.subs(x, Symbol('y')) == 6  # Assuming y is real\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..cc2a925 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -541,7 +541,28 @@ def test_issue_20288():\n     assert SI._collect_factor_and_dimension(expr) == (1 + E, Dimension(1))\n \n \n-def test_prefixed_property():\n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units import Quantity\n+    from sympy.physics.units.systems.si import SI\n+    from sympy import exp\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n     assert not day.is_prefixed\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..91caa4b 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -562,6 +562,45 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n+from sympy.physics.units import velocity, acceleration, time, second, meter, Quantity\n+from sympy.physics.units.systems.si import SI\n+\n+\n+def test_issue_24211():\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+    \n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+    \n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+\n+def test_issue_24211_with_negative_scale():\n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * meter / second)\n+    \n+    a1 = Quantity('a1')\n+    SI.set_quantity_dimension(a1, acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)\n+    \n+    t1 = Quantity('t1')\n+    SI.set_quantity_dimension(t1, time)\n+    SI.set_quantity_scale_factor(t1, 5 * second)\n+\n+    expr1 = a1*t1 + v1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr1)\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..e811acf 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,3 +1,4 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n@@ -43,6 +44,19 @@ def test_homomorphism():\n     assert T.invert(a**-1*b**-1*a**2) == a*b**-1\n \n     # PermutationGroup -> PermutationGroup\n+\n+    # Test for DihedralGroup(3) homomorphism as mentioned in the issue\n+    D3 = DihedralGroup(3)\n+    T = homomorphism(D3, D3, D3.generators, D3.generators)\n+    assert T.is_isomorphism()\n+\n+    # Additional test case to check behavior with inverted generators\n+    T_inv = homomorphism(D3, D3, D3.generators, [g**-1 for g in D3.generators])\n+    raises(ValueError, lambda: T_inv.is_isomorphism())\n+\n+    # Test homomorphism with identity mapping (should be isomorphism)\n+    T_identity = homomorphism(D3, D3, [D3.identity], [D3.identity])\n+    assert T_identity.is_isomorphism()\n     D = DihedralGroup(8)\n     p = Permutation(0, 1, 2, 3, 4, 5, 6, 7)\n     P = PermutationGroup(p)\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..b526b1e 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -249,7 +249,26 @@ def test_PolyElement_copy():\n     g[(1, 1, 1)] = 7\n     assert f != g\n \n+from sympy import ring, ZZ, symbols, raises\n+\n def test_PolyElement_as_expr():\n+    # Test when providing correct number of symbols\n+    R, x, y, z = ring(\"x,y,z\", ZZ)\n+    f = 3*x**2*y - x*y*z + 7*z**3 + 1\n+\n+    U, V, W = symbols(\"u,v,w\")\n+    g = 3*U**2*V - U*V*W + 7*W**3 + 1\n+\n+    assert f.as_expr(U, V, W) == g\n+\n+    # Test when providing incorrect number of symbols (should raise ValueError)\n+    U, V = symbols(\"u,v\")\n+    raises(ValueError, lambda: f.as_expr(U, V))\n+\n+    # Test when no symbols are provided (should use default symbols in the ring)\n+    X, Y, Z = R.symbols\n+    g_default = 3*X**2*Y - X*Y*Z + 7*Z**3 + 1\n+    assert f.as_expr() == g_default\n     R, x, y, z = ring(\"x,y,z\", ZZ)\n     f = 3*x**2*y - x*y*z + 7*z**3 + 1\n \n",
  "sympy__sympy-24661": "diff --git a/sympy/parsing/tests/test_sympy_parser.py b/sympy/parsing/tests/test_sympy_parser.py\nindex 3723931..314363d 100644\n--- a/sympy/parsing/tests/test_sympy_parser.py\n+++ b/sympy/parsing/tests/test_sympy_parser.py\n@@ -269,6 +269,27 @@ def test_convert_equals_signs():\n     x = Symbol('x')\n     y = Symbol('y')\n     assert parse_expr(\"1*2=x\", transformations=transformations) == Eq(2, x)\n+\n+def test_issue_24288():\n+    inputs = {\n+        \"1 < 2\": Lt(1, 2, evaluate=False),\n+        \"1 <= 2\": Le(1, 2, evaluate=False),\n+        \"1 > 2\": Gt(1, 2, evaluate=False),\n+        \"1 >= 2\": Ge(1, 2, evaluate=False),\n+        \"1 != 2\": Ne(1, 2, evaluate=False),\n+        \"1 == 2\": Eq(1, 2, evaluate=False)\n+    }\n+    for text, result in inputs.items():\n+        assert parse_expr(text, evaluate=False) == result\n+\n+def test_parse_expr_with_evaluate_false():\n+    # Additional test cases to ensure that evaluate=False works correctly\n+    assert parse_expr(\"3 < 4\", evaluate=False) == Lt(3, 4, evaluate=False)\n+    assert parse_expr(\"5 != 6\", evaluate=False) == Ne(5, 6, evaluate=False)\n+    assert parse_expr(\"7 == 8\", evaluate=False) == Eq(7, 8, evaluate=False)\n+    assert parse_expr(\"9 >= 10\", evaluate=False) == Ge(9, 10, evaluate=False)\n+    assert parse_expr(\"11 <= 12\", evaluate=False) == Le(11, 12, evaluate=False)\n+    assert parse_expr(\"13 > 14\", evaluate=False) == Gt(13, 14, evaluate=False)\n     assert parse_expr(\"y = x\", transformations=transformations) == Eq(y, x)\n     assert parse_expr(\"(2*y = x) = False\",\n         transformations=transformations) == Eq(Eq(2*y, x), False)\n",
  "astropy__astropy-14369": "",
  "astropy__astropy-14598": "",
  "django__django-11299": "",
  "django__django-11477": "",
  "django__django-12273": "",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..d636ec7 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -605,8 +605,12 @@ class DeletionTests(TestCase):\n \n \n class FastDeleteTests(TestCase):\n-\n-    def test_fast_delete_fk(self):\n+    def test_fast_delete_all(self):\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        # No subqueries are used when performing a full delete.\n+        self.assertNotIn('SELECT', sql)\n         u = User.objects.create(\n             avatar=Avatar.objects.create()\n         )\n@@ -702,4 +706,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..680a70a 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from decimal import Decimal\n \n@@ -24,8 +25,24 @@ class DecimalFieldTests(TestCase):\n         msg = '\u201cabc\u201d value must be a decimal number.'\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n-\n-    def test_default(self):\n+    \n+    def test_invalid_value(self):\n+        field = models.DecimalField(max_digits=4, decimal_places=2)\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        tests = [\n+            (),\n+            [],\n+            {},\n+            set(),\n+            object(),\n+            complex(),\n+            'non-numeric string',\n+            b'non-numeric byte-string',\n+        ]\n+        for value in tests:\n+            with self.subTest(value=value):\n+                with self.assertRaisesMessage(ValidationError, msg % (value,)):\n+                    field.clean(value, None)\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n \n",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..4376c09 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n \n@@ -5,7 +6,7 @@ import django\n from django.db import models\n from django.test import TestCase\n \n-from .models import Container, Event, Group, Happening, M2MModel, MyEvent\n+from .models import Container, Event, Group, Happening, M2MModel, MyEvent, Toy\n \n \n class PickleabilityTestCase(TestCase):\n@@ -20,6 +21,21 @@ class PickleabilityTestCase(TestCase):\n         g = Group.objects.create(name=\"Ponies Who Own Maybachs\")\n         self.assert_pickles(Event.objects.filter(group=g.id))\n \n+    def test_pickle_values_annotation(self):\n+        \"\"\"\n+        Test pickling of a queryset that uses values() and annotate().\n+        This replicates the issue scenario and verifies the result.\n+        \"\"\"\n+        Toy.objects.create(name='foo', price=10, material='wood')\n+        Toy.objects.create(name='bar', price=20, material='plastic')\n+        Toy.objects.create(name='baz', price=100, material='wood')\n+\n+        original_qs = Toy.objects.values('material').annotate(total_price=models.Sum('price'))\n+        reloaded_qs = Toy.objects.all()\n+        reloaded_qs.query = pickle.loads(pickle.dumps(original_qs.query))\n+\n+        self.assertEqual(list(original_qs), list(reloaded_qs))\n+\n     def test_datetime_callable_default_all(self):\n         self.assert_pickles(Happening.objects.all())\n \n",
  "django__django-13449": "diff --git a/tests/expressions_window/tests.py b/tests/expressions_window/tests.py\nindex fb67168..106c645 100644\n--- a/tests/expressions_window/tests.py\n+++ b/tests/expressions_window/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n from unittest import mock, skipIf\n \n@@ -13,12 +14,34 @@ from django.db.models.functions import (\n )\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n \n+from decimal import Decimal\n from .models import Employee\n \n \n @skipUnlessDBFeature('supports_over_clause')\n class WindowFunctionTests(TestCase):\n-    @classmethod\n+    def test_lag_decimalfield_with_decimal(self):\n+        # Create test data\n+        Employee.objects.bulk_create([\n+            Employee(name='Moore', salary=34000, department='IT', hire_date=datetime.datetime(2010, 9, 1), age=25, bonus=Decimal(85)/400),\n+            Employee(name='Wilkinson', salary=60000, department='IT', hire_date=datetime.datetime(2014, 1, 1), age=28, bonus=Decimal(150)/400),\n+            Employee(name='Johnson', salary=80000, department='Management', hire_date=datetime.datetime(2012, 3, 1), age=30, bonus=Decimal(200)/400),\n+            Employee(name='Miller', salary=100000, department='Management', hire_date=datetime.datetime(2015, 5, 1), age=34, bonus=Decimal(250)/400),\n+        ])\n+\n+        # Test Lag with a DecimalField on SQLite\n+        qs = Employee.objects.annotate(lag=Window(\n+            expression=Lag(expression='bonus', offset=1, output_field=models.DecimalField(decimal_places=2, max_digits=15)),\n+            partition_by=F('department'),\n+            order_by=[F('bonus').asc(), F('name').asc()],\n+        )).order_by('department', F('bonus').asc(), F('name').asc())\n+\n+        self.assertQuerysetEqual(qs, [\n+            ('Moore', 85/400, 'IT', None),\n+            ('Wilkinson', 150/400, 'IT', 85/400),\n+            ('Johnson', 200/400, 'Management', None),\n+            ('Miller', 250/400, 'Management', 200/400),\n+        ], transform=lambda row: (row.name, row.bonus, row.department, row.lag))\n     def setUpTestData(cls):\n         Employee.objects.bulk_create([\n             Employee(name=e[0], salary=e[1], department=e[2], hire_date=e[3], age=e[4])\n",
  "django__django-13512": "diff --git a/tests/forms_tests/field_tests/test_jsonfield.py b/tests/forms_tests/field_tests/test_jsonfield.py\nindex e31bff4..36b68df 100644\n--- a/tests/forms_tests/field_tests/test_jsonfield.py\n+++ b/tests/forms_tests/field_tests/test_jsonfield.py\n@@ -30,7 +30,10 @@ class JSONFieldTest(SimpleTestCase):\n         self.assertEqual(field.prepare_value(None), 'null')\n         self.assertEqual(field.prepare_value('foo'), '\"foo\"')\n \n-    def test_widget(self):\n+    def test_unicode_prepare_value(self):\n+        field = JSONField()\n+        self.assertEqual(field.prepare_value({'a': '\u4e2d\u56fd'}), '{\"a\": \"\u4e2d\u56fd\"}')\n+        self.assertEqual(field.prepare_value({'emoji': '\ud83d\ude00\ud83d\udc31'}), '{\"emoji\": \"\ud83d\ude00\ud83d\udc31\"}')\n         field = JSONField()\n         self.assertIsInstance(field.widget, Textarea)\n \n",
  "django__django-14404": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 8fb91af..6ae5004 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -6599,9 +6599,46 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         )\n         self.client.force_login(superuser)\n         known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1], SCRIPT_NAME='/prefix')\n+        self.assertRedirects(response, '/prefix' + known_url, status_code=301)\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/prefix/')\n+    def test_missing_slash_with_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n         response = self.client.get(known_url[:-1])\n         self.assertRedirects(response, known_url, status_code=301, target_status_code=403)\n \n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/anotherprefix/')\n+    def test_missing_slash_different_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1], SCRIPT_NAME='/prefix')\n+        self.assertRedirects(response, '/prefix' + known_url, status_code=301)\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/prefix/')\n+    def test_missing_slash_with_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(response, '/anotherprefix' + known_url, status_code=301)\n+\n     @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n         user = User.objects.create_user(\n@@ -6625,6 +6662,18 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         )\n         self.client.force_login(superuser)\n         known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1], SCRIPT_NAME='/prefix')\n+        self.assertRedirects(response, '/prefix' + known_url, status_code=301)\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/prefix/')\n+    def test_missing_slash_with_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n         response = self.client.get(known_url[:-1])\n         self.assertEqual(response.status_code, 404)\n \n@@ -6637,6 +6686,18 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             is_staff=True,\n         )\n         self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1], SCRIPT_NAME='/prefix')\n+        self.assertRedirects(response, '/prefix' + known_url, status_code=301)\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/prefix/')\n+    def test_missing_slash_with_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n         known_url = reverse('admin9:admin_views_actor_changelist')\n         response = self.client.get(known_url[:-1])\n         self.assertEqual(response.status_code, 404)\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..2402324 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -691,7 +691,44 @@ class WriterTests(SimpleTestCase):\n         result = self.safe_exec(output)\n         self.assertIn(\"Migration\", result)\n \n-    def test_migration_path(self):\n+    def test_missing_import_in_migration(self):\n+        \"\"\"\n+        Test that a generated migration includes necessary imports.\n+        \"\"\"\n+        class MyField(models.TextField):\n+            pass\n+\n+        class MyBaseModel(models.Model):\n+            class Meta:\n+                abstract = True\n+\n+        class MyMixin:\n+            pass\n+\n+        class MyModel(MyMixin, MyBaseModel):\n+            name = MyField(primary_key=True)\n+\n+        fields = {\n+            'name': MyField(primary_key=True)\n+        }\n+\n+        migration = type(\"Migration\", (migrations.Migration,), {\n+            \"operations\": [\n+                migrations.CreateModel(\n+                    \"MyModel\",\n+                    fields=tuple(fields.items()),\n+                    bases=(MyMixin, models.Model)\n+                ),\n+            ],\n+            \"dependencies\": [],\n+        })\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        # Execute the migration string to see if it runs without NameError.\n+        result = self.safe_exec(output)\n+        # Check if 'from django.db import models' is in the migration file.\n+        self.assertIn(\"from django.db import models\", output)\n+        self.assertIn(\"Migration\", result)\n         test_apps = [\n             'migrations.migrations_test_apps.normal',\n             'migrations.migrations_test_apps.with_package_model',\n",
  "django__django-15375": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1d4ef56..aa9f3e5 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1629,8 +1629,15 @@ class AggregateTestCase(TestCase):\n             value=Sum('price', filter=Q(rating__lt=3.0), default=Avg('pages') / 10.0),\n         )\n         self.assertAlmostEqual(result['value'], Decimal('61.72'), places=2)\n-\n-    def test_exists_none_with_aggregate(self):\n+    def test_aggregate_with_default_after_annotation(self):\n+        # Test that aggregation with default works after annotation\n+        result = Book.objects.annotate(idx=F('id')).aggregate(Sum('id', default=0))\n+        self.assertEqual(result['id__sum'], 4560)\n+\n+    def test_aggregate_with_default_and_annotation(self):\n+        # Similar test checking with a different annotation and default\n+        result = Book.objects.annotate(double_idx=F('id') * 2).aggregate(Sum('double_idx', default=0))\n+        self.assertEqual(result['double_idx__sum'], 9120)\n         qs = Book.objects.all().annotate(\n             count=Count('id'),\n             exists=Exists(Author.objects.none()),\n@@ -1642,4 +1649,4 @@ class AggregateTestCase(TestCase):\n             count=Count('id'),\n             exists=Exists(Author.objects.extra(where=['1=0'])),\n         )\n-        self.assertEqual(len(qs), 6)\n+        self.assertEqual(len(qs), 6)\n",
  "django__django-15695": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 99db46a..9af4bed 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -2984,10 +2984,46 @@ class OperationTests(OperationTestBase):\n         with connection.schema_editor() as editor:\n             operation.database_forwards(app_label, editor, project_state, new_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+        \n+        # Test moving index backward and then forward to check crash behavior.\n+        # Initial assumption: index exists with the new name.\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+        \n+        # Move index backward (simulates undoing the rename).\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        \n+        # After moving backward, the index should not exist with the new name.\n+        self.assertIndexNameNotExists(table_name, \"new_pony_test_idx\")\n+        \n+        # Move index forward again (simulates reapplying the rename).\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        \n+        # After moving forward, the index should be restored to the new name.\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n         # Reverse is a no-op.\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             operation.database_backwards(app_label, editor, new_state, project_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+        \n+        # Test moving index backward and then forward to check crash behavior.\n+        # Initial assumption: index exists with the new name.\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+        \n+        # Move index backward (simulates undoing the rename).\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        \n+        # After moving backward, the index should not exist with the new name.\n+        self.assertIndexNameNotExists(table_name, \"new_pony_test_idx\")\n+        \n+        # Move index forward again (simulates reapplying the rename).\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        \n+        # After moving forward, the index should be restored to the new name.\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n         # Deconstruction.\n         definition = operation.deconstruct()\n         self.assertEqual(definition[0], \"RenameIndex\")\n",
  "django__django-15732": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 42e02c2..2bf4ca7 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -595,6 +595,124 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n         )\n \n \n+from django.db import connection, migrations, models\n+from django.test import TestCase\n+from django.test.utils import skipUnlessDBFeature\n+from django.db.migrations.state import ProjectState\n+\n+class TestAlterUniqueTogether(TestCase):\n+\n+    @skipUnlessDBFeature(\"allows_multiple_constraints_on_same_fields\")\n+    def test_remove_unique_together_on_pk_field(self):\n+        app_label = \"test_rutopkf\"\n+        project_state = self.apply_operations(\n+            app_label,\n+            ProjectState(),\n+            operations=[\n+                migrations.CreateModel(\n+                    \"Pony\",\n+                    fields=[(\"id\", models.AutoField(primary_key=True))],\n+                    options={\"unique_together\": {(\"id\",)}},\n+                ),\n+            ],\n+        )\n+        table_name = f\"{app_label}_pony\"\n+        pk_constraint_name = f\"{table_name}_pkey\"\n+        unique_together_constraint_name = f\"{table_name}_id_fb61f881_uniq\"\n+        self.assertConstraintExists(table_name, pk_constraint_name, value=False)\n+        self.assertConstraintExists(\n+            table_name, unique_together_constraint_name, value=False\n+        )\n+\n+        new_state = project_state.clone()\n+        operation = migrations.AlterUniqueTogether(\"Pony\", set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertConstraintExists(table_name, pk_constraint_name, value=False)\n+        self.assertConstraintNotExists(table_name, unique_together_constraint_name)\n+\n+    @skipUnlessDBFeature(\"allows_multiple_constraints_on_same_fields\")\n+    def test_remove_unique_together_on_unique_field(self):\n+        app_label = \"test_rutouf\"\n+        project_state = self.apply_operations(\n+            app_label,\n+            ProjectState(),\n+            operations=[\n+                migrations.CreateModel(\n+                    \"Pony\",\n+                    fields=[\n+                        (\"id\", models.AutoField(primary_key=True)),\n+                        (\"name\", models.CharField(max_length=30, unique=True)),\n+                    ],\n+                    options={\"unique_together\": {(\"name\",)}},\n+                ),\n+            ],\n+        )\n+        table_name = f\"{app_label}_pony\"\n+        unique_constraint_name = f\"{table_name}_name_key\"\n+        unique_together_constraint_name = f\"{table_name}_name_694f3b9f_uniq\"\n+        self.assertConstraintExists(table_name, unique_constraint_name, value=False)\n+        self.assertConstraintExists(\n+            table_name, unique_together_constraint_name, value=False\n+        )\n+\n+        new_state = project_state.clone()\n+        operation = migrations.AlterUniqueTogether(\"Pony\", set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertConstraintExists(table_name, unique_constraint_name, value=False)\n+        self.assertConstraintNotExists(table_name, unique_together_constraint_name)\n+\n+    @skipUnlessDBFeature(\"allows_multiple_constraints_on_same_fields\")\n+    def test_remove_unique_together_on_multiple_fields(self):\n+        app_label = \"test_rutomf\"\n+        project_state = self.apply_operations(\n+            app_label,\n+            ProjectState(),\n+            operations=[\n+                migrations.CreateModel(\n+                    \"Pony\",\n+                    fields=[\n+                        (\"id\", models.AutoField(primary_key=True)),\n+                        (\"name\", models.CharField(max_length=30)),\n+                        (\"age\", models.IntegerField()),\n+                    ],\n+                    options={\"unique_together\": {(\"name\", \"age\")}},\n+                ),\n+            ],\n+        )\n+        table_name = f\"{app_label}_pony\"\n+        unique_together_constraint_name = f\"{table_name}_name_age_uniq\"\n+        self.assertConstraintExists(table_name, unique_together_constraint_name, value=False)\n+\n+        new_state = project_state.clone()\n+        operation = migrations.AlterUniqueTogether(\"Pony\", set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertConstraintNotExists(table_name, unique_together_constraint_name)\n+\n+    # Helper methods for testing\n+    def apply_operations(self, app_label, project_state, operations):\n+        for operation in operations:\n+            operation.state_forwards(app_label, project_state)\n+            with connection.schema_editor() as editor:\n+                operation.database_forwards(app_label, editor, ProjectState(), project_state)\n+        return project_state\n+\n+    def assertConstraintExists(self, table_name, constraint_name, value=True):\n+        with connection.cursor() as cursor:\n+            cursor.execute(\n+                \"SELECT 1 FROM pg_constraint WHERE conname = %s\", [constraint_name]\n+            )\n+            exists = cursor.fetchone() is not None\n+            self.assertEqual(exists, value)\n+\n+    def assertConstraintNotExists(self, table_name, constraint_name):\n+        self.assertConstraintExists(table_name, constraint_name, value=False)\n+\n class AlterUniqueTogether(AlterTogetherOptionOperation):\n     \"\"\"\n     Change the value of unique_together to the target one.\n",
  "django__django-15916": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex cc5e08c..1d6ef87 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -3496,6 +3496,39 @@ class FormFieldCallbackTests(SimpleTestCase):\n                 type(NewForm.base_fields[name].widget),\n             )\n \n+    def test_modelform_factory_meta_uses_formfield_callback(self):\n+        def all_required(field, **kwargs):\n+            formfield = field.formfield(**kwargs)\n+            formfield.required = True\n+            return formfield\n+\n+        class MyModelForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = ['name']\n+                formfield_callback = all_required\n+\n+        GeneratedForm = modelform_factory(Person, form=MyModelForm)\n+\n+        for field in GeneratedForm.base_fields.values():\n+            self.assertTrue(field.required)\n+\n+    def test_modelform_factory_with_no_callback(self):\n+        class MyModelFormWithoutCallback(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = ['name']\n+\n+        GeneratedForm = modelform_factory(Person, form=MyModelFormWithoutCallback)\n+\n+        for field in GeneratedForm.base_fields.values():\n+            self.assertFalse(field.required)\n+\n+\n+from django.test import TestCase\n+from django.forms import modelform_factory\n+from .models import Person\n+import django.forms as forms\n \n class LocalizedModelFormTest(TestCase):\n     def test_model_form_applies_localize_to_some_fields(self):\n",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..9cf43cb 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -9,7 +9,8 @@ from django.core.serializers.json import DjangoJSONEncoder\n from django.db import models\n from django.test import SimpleTestCase, TestCase, TransactionTestCase\n from django.test.utils import isolate_apps\n-from django.utils.translation import gettext_lazy, override\n+from django.core.exceptions import FieldError\n+from django.db import models\n \n from .models import Score\n from .tests import SerializersTestBase, SerializersTransactionTestBase\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_backend_macosx.py b/lib/matplotlib/tests/test_backend_macosx.py\nindex 06d044f..5071866 100644\n--- a/lib/matplotlib/tests/test_backend_macosx.py\n+++ b/lib/matplotlib/tests/test_backend_macosx.py\n@@ -23,8 +23,15 @@ def test_cached_renderer():\n     assert fig._cachedRenderer is not None\n \n \n+import matplotlib.pyplot as plt\n+import pickle\n+\n @pytest.mark.backend('macosx')\n-def test_savefig_rcparam(monkeypatch, tmp_path):\n+def test_unpickle_figure_dpi():\n+    fig = plt.figure(dpi=200)\n+    data = pickle.dumps(fig)\n+    fig_unpickled = pickle.loads(data)\n+    assert fig_unpickled.dpi == 200, \"DPI should remain the same after unpickling\"\n \n     def new_choose_save_file(title, directory, filename):\n         # Replacement function instead of opening a GUI window\n",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 87375f2..e631ea9 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6586,7 +6586,8 @@ def test_integrate(dask):\n     assert isinstance(actual.data, type(da.data))\n \n     # along y\n-    actual = da.integrate(\"y\")\n+    # Check integration using the new 'coord' argument\n+    actual = da.integrate(coord=\"y\")\n     expected_y = xr.DataArray(\n         np.trapz(da, da[\"y\"], axis=1),\n         dims=[\"x\"],\n@@ -6604,7 +6605,20 @@ def test_integrate(dask):\n         da.integrate(\"x2d\")\n \n \n-@pytest.mark.parametrize(\"dask\", [True, False])\n+def test_dataarray_integrate_deprecation_warning():\n+    da = xr.DataArray(np.random.rand(3, 4), dims=[\"x\", \"y\"], coords={\"x\": np.arange(3), \"y\": np.arange(4)})\n+  \n+    # Ensure using 'dim' gives a FutureWarning and still works\n+    with pytest.warns(FutureWarning, match=\"dim argument is deprecated\"):\n+        result_dim = da.integrate(dim=\"x\")\n+    \n+    # Ensure using 'coord' does not give any warnings and works\n+    with pytest.warns(None) as record:\n+        result_coord = da.integrate(coord=\"x\")\n+    assert not record, \"Expected no warning when using coord argument\"\n+    \n+    # Check that both approaches give the same result\n+    assert_equal(result_dim, result_coord)\n @pytest.mark.parametrize(\"which_datetime\", [\"np\", \"cftime\"])\n def test_trapz_datetime(dask, which_datetime):\n     rs = np.random.RandomState(42)\n",
  "pydata__xarray-4094": "",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..729c1ef 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -107,6 +107,50 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+from typing import Any\n+import re\n+import pytest\n+from pylint.lint import Run\n+from tests.utils.constants import EMPTY_MODULE\n+\n+\n+CSV_REGEX_COMMA_CASES = [\n+    (\"foo\", [\"foo\"]),\n+    (\"foo,bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar{1,3}\", [\"foo\", \"bar{1,3}\"]),\n+    (\"(foo{1,3})\", [\"(foo{1,3})\"]),\n+    (\"(foo{1,3},bar)\", [\"(foo{1,3})\", \"bar\"]),\n+]\n+\n+\n+@pytest.mark.parametrize(\"in_string,expected\", CSV_REGEX_COMMA_CASES)\n+def test_csv_regex_comma_handling(in_string: str, expected: list[str]) -> None:\n+    \"\"\"Check that we correctly parse a comma-separated regex when there are one or more commas within quantifier expressions.\"\"\"\n+    def _template_run(in_string: str) -> list[re.Pattern[Any]]:\n+        r = Run(\n+            [str(EMPTY_MODULE), rf\"--bad-name-rgxs={in_string}\"],\n+            exit=False,\n+        )\n+        bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs\n+        return bad_names_rgxs\n+\n+    assert _template_run(in_string) == [re.compile(regex) for regex in expected]\n+\n+\n+def test_invalid_regex_due_to_comma(capsys) -> None:\n+    \"\"\"Test that an invalid regex with commas results in an appropriate error.\"\"\"\n+    with pytest.raises(SystemExit):\n+        Run(\n+            [str(EMPTY_MODULE), r\"--bad-name-rgxs=(foo{1,}, foo{1,3})\"],\n+            exit=False,\n+        )\n+    output = capsys.readouterr()\n+    expected_error = (\n+        r\"Error in provided regular expression: (foo{1,} beginning at index 0: missing ), unterminated subpattern\"\n+    )\n+    assert expected_error in output.err\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..3bfd2d6 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1156,6 +1156,9 @@ def test_summary_list_after_errors(testdir):\n     )\n \n \n+import pytest\n+from _pytest.main import ExitCode\n+\n def test_importorskip():\n     with pytest.raises(\n         pytest.skip.Exception,\n@@ -1184,4 +1187,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "diff --git a/testing/test_mark_expression.py b/testing/test_mark_expression.py\nindex 10b71e9..b3305c2 100644\n--- a/testing/test_mark_expression.py\n+++ b/testing/test_mark_expression.py\n@@ -139,6 +139,19 @@ def test_valid_idents(ident: str) -> None:\n     assert evaluate(ident, {ident: True}.__getitem__)\n \n \n+@pytest.mark.parametrize(\n+    \"ident\",\n+    (\n+        \"None\",\n+        \"True\",\n+        \"False\",\n+    ),\n+)\n+def test_invalid_identifiers(ident: str) -> None:\n+    with pytest.raises(AssertionError):\n+        Expression.compile(ident)\n+\n+\n @pytest.mark.parametrize(\n     \"ident\",\n     (\n",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..a103ca8 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,33 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+def test_feature_union_with_pandas_output():\n+    \"\"\"Test FeatureUnion with pandas output configuration.\"\"\"\n+\n+    # Prepare data\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    # Custom transformer\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y: pd.Series | None = None, **kwargs):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y: pd.Series | None = None) -> pd.DataFrame:\n+            return X[\"value\"].groupby(X[\"date\"]).sum().to_frame(name=\"sum\")\n+\n+    # Create a FeatureUnion with the custom transformer\n+    union = FeatureUnion([(\"my_transformer\", MyTransformer())])\n+\n+    # Set the output to pandas\n+    set_config(transform_output=\"pandas\")\n+\n+    # Transform the data\n+    result = union.fit_transform(data)\n+\n+    # Assert that the result is a DataFrame with expected content\n+    expected_index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"D\")\n+    expected_data = pd.DataFrame(data=[240] * len(expected_index), index=expected_index, columns=[\"my_transformer__sum\"])\n+    \n+    pd.testing.assert_frame_equal(result, expected_data)\n",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex f07be18..20307d6 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -11,6 +11,42 @@\n import pytest\n \n from sphinx import addnodes\n+from sphinx.testing.util import SphinxTestApp\n+from sphinx.util.docutils import new_document\n+from sphinx.ext.autodoc import mock\n+from sphinx.ext.autodoc.directive import AutodocDirective\n+from docutils.parsers.rst import Parser\n+from docutils.frontend import OptionParser\n+from docutils.utils import new_document\n+\n+def parse_rst(app, text):\n+    parser = Parser()\n+    settings = OptionParser(components=(Parser,)).get_default_values()\n+    document = new_document('<rst-doc>', settings=settings)\n+    parser.parse(text, document)\n+    return document\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_autodoc_typehints_none_description(app, status, warning):\n+    app.config.autodoc_typehints = 'description'\n+    \n+    text = \".. py:function:: f1() -> None\"\n+    doctree = parse_rst(app, text)\n+    \n+    # Assert that None type hints create a link in description mode\n+    assert_node(doctree[0], addnodes.desc)\n+    assert 'https://docs.python.org/3/library/constants.html#None' in doctree[0].astext()\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_autodoc_typehints_none_signature(app, status, warning):\n+    app.config.autodoc_typehints = 'signature'\n+    \n+    text = \".. py:function:: f1() -> None\"\n+    doctree = parse_rst(app, text)\n+    \n+    # Assert that None type hints do not create a link in signature mode\n+    assert_node(doctree[0], addnodes.desc)\n+    assert 'https://docs.python.org/3/library/constants.html#None' not in doctree[0].astext()\n \n \n @pytest.mark.sphinx('dummy', testroot='ext-autodoc')\n@@ -30,4 +66,4 @@ def test_autodoc(app, status, warning):\n my_name\n \n alias of bug2437.autodoc_dummy_foo.Foo\"\"\"\n-    assert warning.getvalue() == ''\n+    assert warning.getvalue() == ''\n",
  "sphinx-doc__sphinx-8056": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 1d6a8cf..748acc7 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1267,7 +1267,61 @@ class NumpyDocstringTest(BaseDocstringTest):\n         \"\"\"\n     )]\n \n-    def test_sphinx_admonitions(self):\n+    def test_multiple_parameters(self):\n+        # Test case for multiple parameters in a single line\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like\n+    Input arrays, description of ``x1``, ``x2``.\n+\n+\"\"\"\n+        # Test when napoleon_use_param=False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test when napoleon_use_param=True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: :class:`array_like`\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: :class:`array_like`\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_optional(self):\n+        # Test case for multiple parameters with optional specification\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of ``x1``, ``x2``.\n+\n+\"\"\"\n+        # Test when napoleon_use_param=False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test when napoleon_use_param=True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: :class:`array_like`, *optional*\n+\"\"\"\n+        self.assertEqual(expected, actual)\n         admonition_map = {\n             'Attention': 'attention',\n             'Caution': 'caution',\n",
  "sphinx-doc__sphinx-8551": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex fd4bdc4..3c9e7b2 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -771,6 +771,68 @@ def test_pydecoratormethod_signature(app):\n                 domain=\"py\", objtype=\"method\", noindex=False)\n \n     assert 'deco' in domain.objects\n+\n+@pytest.mark.sphinx(freshenv=True)\n+def test_type_ambiguous_class_lookup(app):\n+    text = \"\"\"\n+    .. py:class:: mod.A\n+    .. py:class:: mod.submod.A\n+\n+    .. py:function:: f()\n+\n+        - :py:class:`mod.A`\n+        - :py:class:`mod.submod.A`\n+\n+        :param mod.A a:\n+        :param mod.submod.A b:\n+        :rtype: mod.A\n+        :rtype: mod.submod.A\n+\n+    .. py:currentmodule:: mod\n+\n+    .. py:function:: f()\n+\n+        - :py:class:`A`\n+        - :py:class:`mod.A`\n+        - :py:class:`mod.submod.A`\n+\n+        :param A a:\n+        :param mod.A b:\n+        :param mod.submod.A c:\n+        :rtype: A\n+        :rtype: mod.A\n+        :rtype: mod.submod.A\n+\n+    .. py:currentmodule:: mod.submod\n+\n+    .. py:function:: f()\n+\n+        - :py:class:`A`\n+        - :py:class:`mod.A`\n+        - :py:class:`mod.submod.A`\n+\n+        :param A a: BUG: links to mod.A instead of mod.submod.A\n+        :param mod.A b:\n+        :param mod.submod.A c:\n+        :rtype: A\n+        :rtype: mod.A\n+        :rtype: mod.submod.A\n+    \"\"\"\n+    # Parse the reStructuredText\n+    app.env.temp_data['docname'] = 'index'\n+    doctree = restructuredtext.parse(app, text)\n+\n+    # Verify that there are no warnings for ambiguous class lookups\n+    warning_stream = app._warning.getvalue()\n+    assert \"more than one target found for cross-reference\" not in warning_stream\n+\n+    # Verify correct resolution\n+    # Extract the specific assertions for the correct resolution of A\n+    assert_node(doctree[5][1][0][1], pending_xref, refdomain=\"py\", reftype=\"class\", reftarget=\"mod.submod.A\")\n+    assert_node(doctree[9][1][0][1], pending_xref, refdomain=\"py\", reftype=\"class\", reftarget=\"mod.A\")\n+\n+    # Cleanup\n+    app.env.temp_data.pop('docname', None)\n     assert domain.objects['deco'] == ('index', 'deco', 'method')\n \n \n",
  "sphinx-doc__sphinx-8593": "",
  "sphinx-doc__sphinx-9230": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex e86a758..06219b8 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -984,6 +984,48 @@ def test_info_field_list(app):\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n \n+def test_param_dict_str_str(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:function:: example_function\\n\"\n+            \"\\n\"\n+            \"   :param dict(str, str) opc_meta: (optional)\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree, (nodes.target,\n+                          addnodes.index,\n+                          addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"function \"],\n+                                                    [desc_addname, \"example.\"],\n+                                                    [desc_name, \"example_function\"])],\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree[3][1][0][0],\n+                ([nodes.field_name, \"Parameters\"],\n+                 [nodes.field_body, nodes.bullet_list, [nodes.list_item, nodes.paragraph]]))\n+\n+    # :param dict(str, str) opc_meta:\n+    assert_node(doctree[3][1][0][0][1][0][0][0],\n+                ([addnodes.literal_strong, \"opc_meta\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"dict\"],\n+                 [addnodes.literal_emphasis, \"(\"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \", \"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \")\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"(optional)\"))\n+    assert_node(doctree[3][1][0][0][1][0][0][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"dict\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Function\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Function\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Function\"})\n+\n+\n def test_info_field_list_var(app):\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-9258": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a7d51b6..04b1e3c 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -998,16 +998,85 @@ def test_info_field_list(app):\n                  \")\",\n                  \" -- \",\n                  \"blah blah\"))\n-    assert_node(doctree[3][1][0][0][1][0][3][0][2], pending_xref,\n-                refdomain=\"py\", reftype=\"class\", reftarget=\"Dict\",\n-                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n-    assert_node(doctree[3][1][0][0][1][0][3][0][4], pending_xref,\n+\n+def test_info_field_list_piped_type_with_different_order(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:class:: Class\\n\"\n+            \"\\n\"\n+            \"   :param age: blah blah\\n\"\n+            \"   :type age: str | int\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree,\n+                (nodes.target,\n+                 addnodes.index,\n+                 addnodes.index,\n+                 [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                           [desc_addname, \"example.\"],\n+                                           [desc_name, \"Class\"])],\n+                         [desc_content, nodes.field_list, nodes.field, \n+                          (nodes.field_name,\n+                           nodes.field_body)])]))\n+\n+    assert_node(doctree[3][1][0][0][1],\n+                ([nodes.paragraph, ([addnodes.literal_strong, \"age\"],\n+                                    \" (\",\n+                                    [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                                    [addnodes.literal_emphasis, \" | \"],\n+                                    [pending_xref, addnodes.literal_emphasis, \"int\"],\n+                                    \")\",\n+                                    \" -- \",\n+                                    \"blah blah\")],))\n+    assert_node(doctree[3][1][0][0][1][0][2], pending_xref,\n                 refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n-    assert_node(doctree[3][1][0][0][1][0][3][0][6], pending_xref,\n+    assert_node(doctree[3][1][0][0][1][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"int\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+\n+def test_info_field_list_piped_type_multiple(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:class:: Class\\n\"\n+            \"\\n\"\n+            \"   :param data: some data\\n\"\n+            \"   :type data: bytes | str | None\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree,\n+                (nodes.target,\n+                 addnodes.index,\n+                 addnodes.index,\n+                 [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                           [desc_addname, \"example.\"],\n+                                           [desc_name, \"Class\"])],\n+                         [desc_content, nodes.field_list, nodes.field,\n+                          (nodes.field_name,\n+                           nodes.field_body)])]))\n+\n+    assert_node(doctree[3][1][0][0][1],\n+                ([nodes.paragraph, ([addnodes.literal_strong, \"data\"],\n+                                    \" (\",\n+                                    [pending_xref, addnodes.literal_emphasis, \"bytes\"],\n+                                    [addnodes.literal_emphasis, \" | \"],\n+                                    [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                                    [addnodes.literal_emphasis, \" | \"],\n+                                    [pending_xref, addnodes.literal_emphasis, \"None\"],\n+                                    \")\",\n+                                    \" -- \",\n+                                    \"some data\")],))\n+    assert_node(doctree[3][1][0][0][1][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"bytes\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][4], pending_xref,\n                 refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"None\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n+from sphinx.testing.util import assert_node\n+from sphinx import addnodes\n+from docutils import nodes\n \n def test_info_field_list_var(app):\n     text = (\".. py:class:: Class\\n\"\n",
  "sphinx-doc__sphinx-9673": "",
  "sympy__sympy-18211": "diff --git a/sympy/solvers/tests/test_solveset.py b/sympy/solvers/tests/test_solveset.py\nindex 7bd9e29..ecd67cb 100644\n--- a/sympy/solvers/tests/test_solveset.py\n+++ b/sympy/solvers/tests/test_solveset.py\n@@ -1048,7 +1048,17 @@ def test__solveset_multi():\n             ImageSet(Lambda(((theta,),), (0, theta)), ImageSet(Lambda(theta, (theta,)), Interval(0, pi))))\n \n \n-def test_conditionset():\n+from sympy import Eq, solveset, ConditionSet, cos, sin, Symbol, sqrt, Reals\n+\n+def test_issue_18188():\n+    x = Symbol('x')\n+    # Test case based on the issue description\n+    result1 = Eq(x*cos(x) - 3*sin(x), 0)\n+    assert solveset(result1, x, domain=Reals) == ConditionSet(x, result1, Reals)\n+\n+    # Additional test case with a different equation\n+    result2 = Eq(x**2 + sqrt(2)*sqrt(x) + sin(x), 0)\n+    assert solveset(result2, x, domain=Reals) == ConditionSet(x, result2, Reals)\n     assert solveset(Eq(sin(x)**2 + cos(x)**2, 1), x, domain=S.Reals) == \\\n         ConditionSet(x, True, S.Reals)\n \n",
  "sympy__sympy-18698": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 38de6f6..9b90589 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3265,6 +3265,10 @@ def test_noncommutative():\n     assert cancel(e*foo(c)) == c*foo(c)\n \n \n+from sympy import symbols, sqf_list\n+from sympy.polys.polytools import poly\n+x, y = symbols('x y')\n+\n def test_to_rational_coeffs():\n     assert to_rational_coeffs(\n         Poly(x**3 + y*x**2 + sqrt(y), x, domain='EX')) is None\n@@ -3330,6 +3334,25 @@ def test_issue_17988():\n     M = Matrix([[poly(x + 1), poly(x + 1)]])\n     assert p * M == M * p == Matrix([[poly(x**2 - 1), poly(x**2 - 1)]])\n \n-def test_issue_18205():\n+def test_issue_8695():\n+    # Test case from the issue description\n+    p1 = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3\n+    expected_result1 = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\n+    assert sqf_list(p1) == expected_result1\n+\n+    # Additional test case for further verification\n+    p2 = x**6 - 7*x**5 + 15*x**4 - 17*x**3 + 10*x**2 - 2*x + 1\n+    expected_result2 = (1, [(x - 1, 2), (x - 2, 2), (x - 0.5, 2)])\n+    assert sqf_list(p2) == expected_result2\n+\n+    # Edge case: Single term polynomial\n+    p3 = x**3\n+    expected_result3 = (1, [(x, 3)])\n+    assert sqf_list(p3) == expected_result3\n+\n+    # Edge case: Constant polynomial\n+    p4 = 7\n+    expected_result4 = (7, [])\n+    assert sqf_list(p4) == expected_result4\n     assert cancel((2 + I)*(3 - I)) == 7 + I\n     assert cancel((2 + I)*(2 - I)) == 5\n",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..31e01d4 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -249,6 +249,15 @@ def test_Poly_from_poly():\n         h, gens=(x, y), field=True).rep == DMP([[QQ(1)], [QQ(1), QQ(0)]], QQ)\n \n \n+from sympy import symbols, I, expand, factor\n+\n+def test_issue_18895():\n+    # Reproducing the issue where factor with extension=True drops a factor\n+    x, y = symbols('x y')\n+    z = expand((x - 1)*(y - 1))\n+    assert factor(z) == (x - 1)*(y - 1), \"Factorization without extension should yield (x - 1)*(y - 1)\"\n+    assert factor(z, extension=[I]) == (x - 1)*(y - 1), \"Factorization with extension should yield the same result\"\n+\n def test_Poly_from_expr():\n     raises(GeneratorsNeeded, lambda: Poly.from_expr(S.Zero))\n     raises(GeneratorsNeeded, lambda: Poly.from_expr(S(7)))\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..da5aea5 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -1,3 +1,21 @@\n+\n+from sympy import Symbol\n+from sympy.testing.pytest import raises\n+\n+def test_symbol_no_dict():\n+    # Test that sympy.Symbol instances do not have a __dict__ attribute\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__')\n+    with raises(AttributeError):\n+        _ = s.__dict__\n+\n+def test_symbol_slots():\n+    # Verify that __slots__ works correctly for Symbol objects\n+    s = Symbol('s')\n+    assert hasattr(s, '__slots__')\n+    assert '__dict__' not in s.__slots__\n+    assert 'name' in s.__slots__\n+\n \"\"\"This tests sympy/core/basic.py with (ideally) no reference to subclasses\n of Basic or Atom.\"\"\"\n \n",
  "sympy__sympy-24562": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 13e3235..6773d8a 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -369,8 +369,39 @@ def test_Rational_new():\n     assert n.q == 4\n     assert n.p == -2\n \n+def test_rational_string_inputs():\n+    from sympy import Rational\n \n-def test_Number_new():\n+    # Basic test case from the issue\n+    assert Rational('0.5', '100') == Rational(1, 200)\n+\n+    # Additional test cases with different string inputs\n+    assert Rational('1.5', '3') == Rational(1, 2)  # '1.5'/3 equals 1/2\n+    assert Rational('2', '4') == Rational(1, 2)  # '2'/4 equals 1/2\n+    assert Rational('5', '10') == Rational(1, 2)  # '5'/10 equals 1/2\n+\n+    # Edge cases for string inputs\n+    assert Rational('1', '2') == Rational(1, 2)  # simple fraction\n+    assert Rational('1.0', '2.0') == Rational(1, 2)  # float as strings\n+\n+    # Invalid inputs that should raise an exception\n+    try:\n+        Rational('0.5.5', '100')\n+    except TypeError:\n+        assert True\n+    else:\n+        assert False\n+\n+    try:\n+        Rational('1/2', '2/3')\n+    except TypeError:\n+        assert True\n+    else:\n+        assert False\n+\n+    # Ensure correct behavior with mixed types\n+    assert Rational('0.25', 4) == Rational(1, 16)\n+    assert Rational(0.25, '4') == Rational(1, 16)\n     \"\"\"\"\n     Test for Number constructor\n     \"\"\"\n",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..b6f10c7 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,7 +3202,21 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n-    def test_boundfield_widget_type(self):\n+    def test_checkbox_select_multiple_id_for_label(self):\n+        \"\"\"\n+        Test that CheckboxSelectMultiple subwidgets use the id from widget.attrs\n+        when provided, rather than generating a new one.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'custom_id_%s'}),\n+            )\n+        \n+        form = SomeForm(auto_id=False)\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_id_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_id_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "matplotlib__matplotlib-20676": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex b009975..d67f5d1 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -302,7 +302,61 @@ def test_tool_line_handle():\n     assert tool_line_handle.positions == positions\n \n \n-def check_lasso_selector(**kwargs):\n+import pytest\n+from matplotlib import pyplot as plt\n+from matplotlib import widgets\n+\n+@pytest.mark.parametrize('direction', (\"horizontal\", \"vertical\"))\n+def test_span_selector_bound(direction):\n+    fig, ax = plt.subplots(1, 1)\n+    ax.plot([10, 20], [10, 30])\n+    ax.figure.canvas.draw()\n+    x_bound = ax.get_xbound()\n+    y_bound = ax.get_ybound()\n+\n+    tool = widgets.SpanSelector(ax, print, direction, interactive=True)\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    bound = x_bound if direction == 'horizontal' else y_bound\n+    assert tool._edge_handles.positions == list(bound)\n+\n+    press_data = [10.5, 11.5]\n+    move_data = [11, 13]  # Updating selector is done in onmove\n+    release_data = move_data\n+    do_event(tool, 'press', xdata=press_data[0], ydata=press_data[1], button=1)\n+    do_event(tool, 'onmove', xdata=move_data[0], ydata=move_data[1], button=1)\n+\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    index = 0 if direction == 'horizontal' else 1\n+    handle_positions = [press_data[index], release_data[index]]\n+    assert tool._edge_handles.positions == handle_positions\n+\n+@pytest.mark.parametrize('direction', (\"horizontal\", \"vertical\"))\n+def test_span_selector_interaction_and_callback(direction):\n+    callback_data = []\n+\n+    def onselect(vmin, vmax):\n+        callback_data.append((vmin, vmax))\n+\n+    fig, ax = plt.subplots()\n+    ax.plot([10, 20], [10, 30])\n+    tool = widgets.SpanSelector(ax, onselect, direction, interactive=True)\n+\n+    press_data = [12, 15]\n+    release_data = [18, 24]  # Simulate dragging along the axis\n+\n+    do_event(tool, 'press', xdata=press_data[0], ydata=press_data[1], button=1)\n+    do_event(tool, 'onmove', xdata=release_data[0], ydata=release_data[1], button=1)\n+    do_event(tool, 'release', xdata=release_data[0], ydata=release_data[1], button=1)\n+\n+    index = 0 if direction == 'horizontal' else 1\n+    expected_vmin = min(press_data[index], release_data[index])\n+    expected_vmax = max(press_data[index], release_data[index])\n+\n+    assert callback_data == [(expected_vmin, expected_vmax)]\n     ax = get_ax()\n \n     def onselect(verts):\n",
  "scikit-learn__scikit-learn-12682": "diff --git a/sklearn/decomposition/tests/test_dict_learning.py b/sklearn/decomposition/tests/test_dict_learning.py\nindex 35a43f8..4da07a1 100644\n--- a/sklearn/decomposition/tests/test_dict_learning.py\n+++ b/sklearn/decomposition/tests/test_dict_learning.py\n@@ -51,6 +51,58 @@ def test_dict_learning_shapes():\n     assert_equal(dico.transform(X).shape, (X.shape[0], n_components))\n \n \n+from sklearn.decomposition import SparseCoder\n+from sklearn.exceptions import ConvergenceWarning\n+import pytest\n+import numpy as np\n+\n+def test_sparsecoder_max_iter_lasso_cd():\n+    def ricker_function(resolution, center, width):\n+        \"\"\"Discrete sub-sampled Ricker (Mexican hat) wavelet\"\"\"\n+        x = np.linspace(0, resolution - 1, resolution)\n+        x = ((2 / (np.sqrt(3 * width) * np.pi ** .25))\n+             * (1 - (x - center) ** 2 / width ** 2)\n+             * np.exp(-(x - center) ** 2 / (2 * width ** 2)))\n+        return x\n+\n+    def ricker_matrix(width, resolution, n_components):\n+        \"\"\"Dictionary of Ricker (Mexican hat) wavelets\"\"\"\n+        centers = np.linspace(0, resolution - 1, n_components)\n+        D = np.empty((n_components, resolution))\n+        for i, center in enumerate(centers):\n+            D[i] = ricker_function(resolution, center, width)\n+        D /= np.sqrt(np.sum(D ** 2, axis=1))[:, np.newaxis]\n+        return D\n+\n+    transform_algorithm = 'lasso_cd'\n+    resolution = 1024\n+    subsampling = 3  # subsampling factor\n+    n_components = resolution // subsampling\n+\n+    # Compute a wavelet dictionary\n+    D_multi = np.r_[tuple(ricker_matrix(width=w, resolution=resolution,\n+                          n_components=n_components // 5)\n+                          for w in (10, 50, 100, 500, 1000))]\n+\n+    X = np.linspace(0, resolution - 1, resolution)\n+    first_quarter = X < resolution / 4\n+    X[first_quarter] = 3.\n+    X[np.logical_not(first_quarter)] = -1.\n+    X = X.reshape(1, -1)\n+\n+    # check that the underlying model fails to converge\n+    with pytest.warns(ConvergenceWarning):\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=1)\n+        model.fit_transform(X)\n+\n+    # check that the underlying model converges w/o warnings\n+    with pytest.warns(None) as record:\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=2000)\n+        model.fit_transform(X)\n+    assert not record.list\n+\n def test_dict_learning_overcomplete():\n     n_components = 12\n     dico = DictionaryLearning(n_components, random_state=0).fit(X)\n",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..f69fef8 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -148,6 +148,30 @@ def test_multi_target_sample_weights():\n     assert_almost_equal(rgr.predict(X_test), rgr_w.predict(X_test))\n \n \n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+from sklearn.model_selection import cross_val_predict\n+from sklearn.utils._testing import assert_array_almost_equal\n+\n+def test_cross_val_predict_multi_output_classifier():\n+    # Test cross_val_predict with MultiOutputClassifier using predict_proba\n+    X, Y = make_multilabel_classification(n_samples=100, n_features=20, n_classes=3, n_labels=2, random_state=42)\n+    mo_clf = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+    \n+    # Check predict (should work without error)\n+    pred = cross_val_predict(mo_clf, X, Y, cv=5)\n+    \n+    # Check predict_proba (should work without error)\n+    pred_proba = cross_val_predict(mo_clf, X, Y, cv=5, method='predict_proba')\n+    \n+    # Ensure the shape of predictions match the expected shape\n+    assert len(pred_proba) == Y.shape[1]\n+    for output, probas in enumerate(pred_proba):\n+        assert probas.shape[0] == X.shape[0]\n+        # Check that probabilities sum up to 1 for each sample\n+        assert_array_almost_equal(probas.sum(axis=1), np.ones(X.shape[0]))\n+\n # Import the data\n iris = datasets.load_iris()\n # create a multiple targets by randomized shuffling and concatenating y.\n",
  "sphinx-doc__sphinx-9658": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 072cdc7..3129eb5 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -158,7 +158,25 @@ def test_restify_pep_585():\n                                                    \"[:py:class:`int`, ...]]\")\n \n \n+from sphinx.ext.autodoc import mock\n+import pytest\n+\n @pytest.mark.skipif(sys.version_info < (3, 10), reason='python 3.10+ is required.')\n+\n+def test_mocked_inherited_class_documentation():\n+    with mock(['unknown']):\n+        import unknown\n+        class MockBase:\n+            pass\n+\n+        class InheritedMockedClass(MockBase):\n+            pass\n+\n+        # Test restify for inherited mocked class\n+        assert restify(InheritedMockedClass) == ':py:class:`unknown.InheritedMockedClass`'\n+        \n+        # Test stringify for inherited mocked class\n+        assert stringify(InheritedMockedClass) == 'unknown.InheritedMockedClass'\n def test_restify_type_union_operator():\n     assert restify(int | None) == \":py:class:`int` | :py:obj:`None`\"  # type: ignore\n     assert restify(int | str) == \":py:class:`int` | :py:class:`str`\"  # type: ignore\n",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..c2d15d0 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -346,9 +346,25 @@ def test_reverse_order():\n            Product(x*y, (x, b + 1, a - 1), (y, 6, 1))\n     assert Product(x*y, (x, a, b), (y, 2, 5)).reverse_order(y, x) == \\\n            Product(x*y, (x, b + 1, a - 1), (y, 6, 1))\n-\n-\n-def test_issue_9983():\n+def test_issue_13546():\n+    n = Symbol('n', integer=True)\n+    k = Symbol('k', integer=True)\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    # Test for n=2\n+    assert p.subs(n, 2).doit() == S(15)/2\n+\n+    # Additional test cases for further verification\n+    # Test for n=3\n+    assert p.subs(n, 3).doit() == S(35)/4\n+\n+    # Test for n=4\n+    expected_value_n4 = (4 + 1) * (4 + 1/2) * (4 + 1/4) * (4 + 1/8)\n+    assert p.subs(n, 4).doit() == expected_value_n4\n+\n+    # Check symbolic simplification\n+    from sympy import simplify\n+    simplified_p = simplify(p)\n+    assert simplified_p != 2**(n*(-n + 1)/2) + n**n\n     n = Symbol('n', integer=True, positive=True)\n     p = Product(1 + 1/n**(S(2)/3), (n, 1, oo))\n     assert p.is_convergent() is S.false\n@@ -357,4 +373,4 @@ def test_issue_9983():\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}