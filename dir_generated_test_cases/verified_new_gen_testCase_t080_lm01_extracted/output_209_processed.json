{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..d67334d 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -55,6 +55,29 @@ compound_models = {\n             )\n }\n \n+def test_nested_compound_model_separable():\n+    from astropy.modeling import models as m\n+    from astropy.modeling.separable import separability_matrix\n+    import numpy as np\n+\n+    # Create the models as described in the issue\n+    cm = m.Linear1D(10) & m.Linear1D(5)\n+    complex_model = m.Pix2Sky_TAN() & cm\n+\n+    # Expected output matrix for the nested compound model issue\n+    expected_output = np.array([\n+        [True,  True, False, False],\n+        [True,  True, False, False],\n+        [False, False, True,  False],\n+        [False, False, False, True]\n+    ])\n+\n+    # Compute the separability matrix for the nested compound model\n+    result = separability_matrix(complex_model)\n+\n+    # Assert that the result matches the expected output\n+    assert np.array_equal(result, expected_output), f\"Expected {expected_output}, but got {result}\"\n+\n \n def test_coord_matrix():\n     c = _coord_matrix(p2, 'left', 2)\n",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "diff --git a/astropy/io/fits/tests/test_connect.py b/astropy/io/fits/tests/test_connect.py\nindex 00deafe..1f2e463 100644\n--- a/astropy/io/fits/tests/test_connect.py\n+++ b/astropy/io/fits/tests/test_connect.py\n@@ -1,10 +1,51 @@\n+\n import gc\n import warnings\n-\n+from astropy.io.registry import identify_format\n+from astropy.table import Table\n+\n+def test_is_fits_gh_14305():\n+    \"\"\"Regression test for https://github.com/astropy/astropy/issues/14305\"\"\"\n+    assert not fits.connect.is_fits(\"\", \"foo.bar\", None)\n+\n+def test_identify_format_no_args():\n+    \"\"\"Test identify_format with no additional arguments to ensure no IndexError is raised.\"\"\"\n+    formats = identify_format(\"write\", Table, \"bububu.ecsv\", None, [], {})\n+    assert formats == []  # Expecting no valid formats for a non-FITS extension\n+\n+def test_identify_format_with_invalid_extension():\n+    \"\"\"Test identify_format with a filepath that has a non-FITS extension.\"\"\"\n+    formats = identify_format(\"write\", Table, \"data.txt\", None, [], {})\n+    assert formats == []  # Expecting no valid formats since it's not a valid FITS file\n+\n+def test_identify_format_with_fits_extension():\n+    \"\"\"Test identify_format with a filepath that has a FITS extension.\"\"\"\n+    formats = identify_format(\"write\", Table, \"data.fits\", None, [], {})\n+    assert formats == []  # Assuming no specific identifiers for this simple test case\n import numpy as np\n import pytest\n from numpy.testing import assert_allclose, assert_array_equal\n-\n+from astropy.io.registry import identify_format\n+from astropy.table import Table\n+\n+def test_is_fits_gh_14305():\n+    \"\"\"Regression test for https://github.com/astropy/astropy/issues/14305\"\"\"\n+    assert not fits.connect.is_fits(\"\", \"foo.bar\", None)\n+\n+def test_identify_format_no_args():\n+    \"\"\"Test identify_format with no additional arguments to ensure no IndexError is raised.\"\"\"\n+    formats = identify_format(\"write\", Table, \"bububu.ecsv\", None, [], {})\n+    assert formats == []  # Expecting no valid formats for a non-FITS extension\n+\n+def test_identify_format_with_invalid_extension():\n+    \"\"\"Test identify_format with a filepath that has a non-FITS extension.\"\"\"\n+    formats = identify_format(\"write\", Table, \"data.txt\", None, [], {})\n+    assert formats == []  # Expecting no valid formats since it's not a valid FITS file\n+\n+def test_identify_format_with_fits_extension():\n+    \"\"\"Test identify_format with a filepath that has a FITS extension.\"\"\"\n+    formats = identify_format(\"write\", Table, \"data.fits\", None, [], {})\n+    assert formats == []  # Assuming no specific identifiers for this simple test case\n from astropy import units as u\n from astropy.io import fits\n from astropy.io.fits import BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu\n",
  "astropy__astropy-14508": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex 6bdf92c..bd96d7d 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -136,8 +136,41 @@ class TestHeaderFunctions(FitsTestCase):\n             \"FLOATNUM= -4.6737463674763E+032\"\n         ):\n             assert str(c) == _pad(\"FLOATNUM= -4.6737463674763E+32\")\n-\n-    def test_complex_value_card(self):\n+    \n+    def test_floating_point_string_representation_card(self):\n+        \"\"\"\n+        Ensures Card formats float values with the correct precision, avoiding\n+        comment truncation.\n+\n+        Regression test for https://github.com/astropy/astropy/issues/14507\n+        \"\"\"\n+        k = \"HIERARCH ABC DEF GH IJKLMN\"\n+        com = \"[m] abcdef ghijklm nopqrstu vw xyzab\"\n+        \n+        # Test with 0.009125\n+        c = fits.Card(k, 0.009125, com)\n+        expected_str = f\"{k} = 0.009125 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+        \n+        # Test with 8.95\n+        c = fits.Card(k, 8.95, com)\n+        expected_str = f\"{k} = 8.95 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+        \n+        # Test with -99.9\n+        c = fits.Card(k, -99.9, com)\n+        expected_str = f\"{k} = -99.9 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Test with large float within acceptable precision\n+        c = fits.Card(k, 1234567890.123456, com)\n+        expected_str = f\"{k} = 1234567890.123456 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+        \n+        # Test with a float that should not expand\n+        c = fits.Card(k, 0.1, com)\n+        expected_str = f\"{k} = 0.1 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n         \"\"\"Test Card constructor with complex value\"\"\"\n \n         c = fits.Card(\"abc\", (1.2345377437887837487e88 + 6324767364763746367e-33j))\n",
  "astropy__astropy-14539": "",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..cc39292 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -89,7 +89,20 @@ def test_inherit_docstrings():\n         assert Subclass.__call__.__doc__ == \"FOO\"\n \n \n-def test_set_locale():\n+def test_inherit_docstrings_property():\n+    class Base(metaclass=misc.InheritDocstrings):\n+        @property\n+        def bar(self):\n+            \"BAR\"\n+            return 42\n+\n+    class Subclass(Base):\n+        @property\n+        def bar(self):\n+            return 21\n+\n+    if Base.bar.__doc__ is not None:\n+        assert Subclass.bar.__doc__ == \"BAR\"\n     # First, test if the required locales are available\n     current = locale.setlocale(locale.LC_ALL)\n     try:\n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..38e74ff 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -188,6 +188,16 @@ def test_unknown_unit3():\n     with pytest.raises(ValueError):\n         unit._get_converter(unit3)\n \n+    # Test equality and inequality with None\n+    assert unit != None  # noqa: E711\n+    assert not (unit == None)  # noqa: E711\n+    assert None != unit  # noqa: E711\n+    assert not (None == unit)  # noqa: E711\n+\n+    # Test 'in' operator with a collection\n+    assert unit not in [None, unit2]\n+    assert unit in [unit, unit2]\n+\n     x = unit.to_string('latex')\n     y = unit2.to_string('cgs')\n \n",
  "astropy__astropy-7671": "diff --git a/astropy/utils/tests/test_introspection.py b/astropy/utils/tests/test_introspection.py\nindex 852d721..44431ed 100644\n--- a/astropy/utils/tests/test_introspection.py\n+++ b/astropy/utils/tests/test_introspection.py\n@@ -62,8 +62,31 @@ def test_find_mod_objs():\n     assert 'collections.namedtuple' not in fqns\n     assert namedtuple not in objs\n \n+from distutils.version import LooseVersion\n+from astropy.utils import minversion\n \n def test_minversion():\n+    from types import ModuleType\n+    test_module = ModuleType(str(\"test_module\"))\n+    test_module.__version__ = '0.12.2'\n+    good_versions = ['0.12', '0.12.1', '0.12.0.dev', '0.12dev']\n+    bad_versions = ['1', '1.2rc1']\n+\n+    # Original test cases\n+    for version in good_versions:\n+        assert minversion(test_module, version)\n+    for version in bad_versions:\n+        assert not minversion(test_module, version)\n+\n+    # Additional test cases based on the issue\n+    test_module.__version__ = '1.14.3'\n+    assert minversion(test_module, '1.14dev')  # Should not raise TypeError and return True\n+    assert not minversion(test_module, '1.15dev')  # Should return False\n+    assert minversion(test_module, '1.14.3')  # Should return True\n+\n+    test_module.__version__ = '1.14.0.dev'\n+    assert not minversion(test_module, '1.14.3')  # Should return False\n+    assert minversion(test_module, '1.14')  # Should return True\n     from types import ModuleType\n     test_module = ModuleType(str(\"test_module\"))\n     test_module.__version__ = '0.12.2'\n@@ -72,4 +95,4 @@ def test_minversion():\n     for version in good_versions:\n         assert minversion(test_module, version)\n     for version in bad_versions:\n-        assert not minversion(test_module, version)\n+        assert not minversion(test_module, version)\n",
  "astropy__astropy-8707": "",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..3594362 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -143,6 +143,12 @@ class TestQuantityCreation:\n         q3 = u.Quantity(a3, u.yr)\n         assert q3.dtype == a3.dtype\n         # items stored as objects by numpy should be converted to float\n+        # Test preservation of float16 dtype\n+        a3_16 = np.array([1., 2.], dtype=np.float16)\n+        q3_16 = u.Quantity(a3_16, u.yr)\n+        assert q3_16.dtype == a3_16.dtype\n+\n+        # Test preservation of float32 dtype\n         # by default\n         q4 = u.Quantity(decimal.Decimal('10.25'), u.m)\n         assert q4.dtype == float\n@@ -150,7 +156,26 @@ class TestQuantityCreation:\n         q5 = u.Quantity(decimal.Decimal('10.25'), u.m, dtype=object)\n         assert q5.dtype == object\n \n-    def test_copy(self):\n+    def test_float16_preservation(self):\n+        \"\"\"Test that np.float16 types are preserved when creating Quantities.\"\"\"\n+        # Test single value preservation\n+        q1_16 = u.Quantity(np.float16(1.0), u.km)\n+        assert q1_16.dtype == np.float16\n+\n+        # Test array preservation\n+        a1_16 = np.array([1.0, 2.0, 3.0], dtype=np.float16)\n+        q1_16_array = u.Quantity(a1_16, u.m)\n+        assert q1_16_array.dtype == np.float16\n+\n+        # Ensure other float types still behave correctly\n+        q1_32 = u.Quantity(np.float32(1.0), u.km)\n+        assert q1_32.dtype == np.float32\n+\n+        q1_64 = u.Quantity(np.float64(1.0), u.km)\n+        assert q1_64.dtype == np.float64\n+\n+        q1_128 = u.Quantity(np.float128(1.0), u.km)\n+        assert q1_128.dtype == np.float128\n \n         # By default, a new quantity is constructed, but not if copy=False\n \n",
  "django__django-10097": "",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..8bf9519 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,8 +1,10 @@\n+\n import datetime\n import re\n from decimal import Decimal\n \n from django.core.exceptions import FieldError\n+from django.db.models.expressions import Case, When\n from django.db import connection\n from django.db.models import (\n     Avg, Count, DecimalField, DurationField, F, FloatField, Func, IntegerField,\n@@ -389,7 +391,32 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n-    def test_count_star(self):\n+    def test_count_distinct_expression(self):\n+        # Verifies that the issue with COUNT(DISTINCT CASE WHEN ...) syntax is fixed.\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=300, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n+\n+    def test_count_distinct_case_when_fallback(self):\n+        # Additional test case to ensure when no condition matches, it still works\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=1000, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 0)\n+\n+    def test_count_distinct_multiple_conditions(self):\n+        # Test with multiple conditions in the Case expression\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(\n+                Case(\n+                    When(pages__gt=300, rating__gt=3, then='rating'),\n+                    When(pages__lt=100, rating__lt=3, then='rating')\n+                ),\n+                distinct=True,\n+            ),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n         sql = ctx.captured_queries[0]['sql']\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..5df8bfc 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1092,6 +1092,11 @@ class OverrideSettingsTests(SimpleTestCase):\n         self.assertEqual(default_storage.base_location, '')\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        The default file upload permissions should be 0o644.\n+        \"\"\"\n+        self.assertEqual(default_storage.file_permissions_mode, 0o644)\n \n     def test_override_file_upload_permissions(self):\n         \"\"\"\n",
  "django__django-10973": "",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..bd2075a 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -2,6 +2,8 @@ from django.apps.registry import apps\n from django.conf import settings\n from django.contrib.contenttypes import management as contenttypes_management\n from django.contrib.contenttypes.models import ContentType\n+from django.apps import apps\n+from django.contrib.contenttypes.models import ContentType\n from django.core.management import call_command\n from django.db import migrations, models\n from django.test import TransactionTestCase, override_settings\n@@ -38,7 +40,26 @@ class ContentTypeOperationsTests(TransactionTestCase):\n                     self.assertEqual(next_operation.old_model, operation.old_name_lower)\n                     self.assertEqual(next_operation.new_model, operation.new_name_lower)\n \n-    def test_existing_content_type_rename(self):\n+    def test_existing_content_type_rename_other_database(self):\n+        # Set up a router that redirects all write operations to the 'other' database\n+        class TestRouter:\n+            def db_for_write(self, model, **hints):\n+                return 'other'\n+\n+        with override_settings(DATABASE_ROUTERS=[TestRouter()]):\n+            # Create a ContentType in the 'other' database\n+            ContentType.objects.using('other').create(app_label='contenttypes_tests', model='foo')\n+            other_content_types = ContentType.objects.using('other').filter(app_label='contenttypes_tests')\n+\n+            # Perform migration in 'other' database and verify rename operation\n+            call_command('migrate', 'contenttypes_tests', database='other', interactive=False, verbosity=0)\n+            self.assertFalse(other_content_types.filter(model='foo').exists())\n+            self.assertTrue(other_content_types.filter(model='renamedfoo').exists())\n+\n+            # Rollback migration in 'other' database and verify rollback\n+            call_command('migrate', 'contenttypes_tests', 'zero', database='other', interactive=False, verbosity=0)\n+            self.assertTrue(other_content_types.filter(model='foo').exists())\n+            self.assertFalse(other_content_types.filter(model='renamedfoo').exists())\n         ContentType.objects.create(app_label='contenttypes_tests', model='foo')\n         call_command('migrate', 'contenttypes_tests', database='default', interactive=False, verbosity=0,)\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n@@ -63,4 +84,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..ed05801 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -237,7 +237,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n         invalid_usernames = [\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n-            \"en\\u2013dash\",\n+            \"en\\u2013dash\", \"trailingnewline\\n\",\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -250,7 +250,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n \n     def test_ascii_validator(self):\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n-        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n+        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\", 'trailingnewline\\n']\n         v = validators.ASCIIUsernameValidator()\n         for valid in valid_usernames:\n             with self.subTest(valid=valid):\n@@ -258,4 +258,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..919b5ea 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -1,5 +1,6 @@\n import os\n \n+import os\n from django.core.exceptions import ImproperlyConfigured\n from django.template import Context\n from django.template.engine import Engine\n@@ -21,8 +22,42 @@ class RenderToStringTest(SimpleTestCase):\n             'obj:test\\n',\n         )\n \n+    def test_autoescape_on(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n \n-class GetDefaultTests(SimpleTestCase):\n+    def test_autoescape_off_with_html(self):\n+        \"\"\"\n+        Test rendering with autoescape off using an HTML string.\n+        \"\"\"\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<div>'}),\n+            'obj:<div>\\n',\n+        )\n+\n+    def test_autoescape_on_with_html(self):\n+        \"\"\"\n+        Test rendering with autoescape on using an HTML string.\n+        \"\"\"\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<div>'}),\n+            'obj:&lt;div&gt;\\n',\n+        )\n+\n+    def test_autoescape_off_with_plain_text(self):\n+        \"\"\"\n+        Test rendering with autoescape off using plain text, ensuring no changes occur.\n+        \"\"\"\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': 'Hello, World!'}),\n+            'obj:Hello, World!\\n',\n+        )\n \n     @override_settings(TEMPLATES=[])\n     def test_no_engines_configured(self):\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..cf62c45 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -413,7 +413,9 @@ class HttpResponseTests(unittest.TestCase):\n         self.assertEqual(list(i), [b'abc'])\n         self.assertEqual(list(i), [])\n \n-    def test_lazy_content(self):\n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n         r = HttpResponse(lazystr('helloworld'))\n         self.assertEqual(r.content, b'helloworld')\n \n",
  "django__django-11141": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex b5a87e7..76b8320 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -501,6 +501,19 @@ class LoaderTests(TestCase):\n         self.assertEqual(plan, expected_plan)\n \n     @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_private'})\n+    def test_namespace_package_loading(self):\n+        \"\"\"Test loading migrations from a directory without __init__.py.\"\"\"\n+        with self.temporary_migration_module(module='migrations.test_migrations_namespace_package') as migration_dir:\n+            # Simulate a namespace package by removing the __init__.py file if it exists.\n+            init_py = os.path.join(migration_dir, '__init__.py')\n+            if os.path.exists(init_py):\n+                os.remove(init_py)\n+            \n+            loader = MigrationLoader(connection)\n+            loader.load_disk()\n+            migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n+            self.assertIn('0001_initial', migrations)\n+\n     def test_ignore_files(self):\n         \"\"\"Files prefixed with underscore, tilde, or dot aren't loaded.\"\"\"\n         loader = MigrationLoader(connection)\n",
  "django__django-11149": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 296cfba..32062d4 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -655,7 +655,42 @@ class TestInlinePermissions(TestCase):\n         self.assertContains(response, '<input type=\"hidden\" id=\"id_inner2_set-TOTAL_FORMS\" '\n                             'value=\"3\" name=\"inner2_set-TOTAL_FORMS\">', html=True)\n \n-    def test_inline_change_m2m_add_perm(self):\n+    def test_inline_add_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(reverse('admin:admin_inlines_author_add'))\n+        # View-only inlines. (It could be nicer to hide the empty, non-editable\n+        # inlines on the add page.)\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(response,\n+                            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"0\" '\n+                            'id=\"id_Author_books-TOTAL_FORMS\">',\n+                            html=True)\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n+\n+    def test_inline_change_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(self.author_change_url)\n+        # View-only inlines.\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(response,\n+                            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"1\" '\n+                            'id=\"id_Author_books-TOTAL_FORMS\">',\n+                            html=True)\n+        # The field in the inline is read-only.\n+        self.assertContains(response, '<p>%s</p>' % self.book)\n+        self.assertNotContains(response,\n+                               '<input type=\"checkbox\" name=\"Author_books-0-DELETE\" id=\"id_Author_books-0-DELETE\">',\n+                               html=True)\n         permission = Permission.objects.get(codename='add_book', content_type=self.book_ct)\n         self.user.user_permissions.add(permission)\n         response = self.client.get(self.author_change_url)\n",
  "django__django-11163": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex b25d077..6a2fd6a 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2900,7 +2900,16 @@ class StrictAssignmentTests(SimpleTestCase):\n \n \n class ModelToDictTests(TestCase):\n-    def test_many_to_many(self):\n+    def test_model_to_dict_empty_fields(self):\n+        \"\"\"model_to_dict should return an empty dict when no fields are specified.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(model_to_dict(bw, fields=[]), {})\n+        self.assertEqual(model_to_dict(bw, fields=['id', 'name']), {'id': bw.id, 'name': 'Joe Better'})\n+\n+    def test_model_to_dict_with_exclude(self):\n+        \"\"\"model_to_dict should return the correct fields when using the exclude parameter.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(model_to_dict(bw, exclude=['id', 'name']), {'score': 10, 'writer_ptr': bw.writer_ptr_id})\n         \"\"\"Data for a ManyToManyField is a list rather than a lazy QuerySet.\"\"\"\n         blue = Colour.objects.create(name='blue')\n         red = Colour.objects.create(name='red')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..396720e 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,6 +1,8 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n+from django.db.models.deletion import Collector\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n@@ -464,7 +466,33 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n-    def test_fast_delete_qs(self):\n+    def test_fast_delete_instance_set_pk_none(self):\n+        u = User.objects.create()\n+        # User can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n+    def test_fast_delete_multiple_instances_set_pk_none(self):\n+        users = [User.objects.create() for _ in range(3)]\n+        # Ensure all users can be fast-deleted.\n+        collector = Collector(using='default')\n+        for user in users:\n+            self.assertTrue(collector.can_fast_delete(user))\n+            user.delete()\n+            self.assertIsNone(user.pk)\n+\n+    def test_fast_delete_instance_with_constraints_set_pk_none(self):\n+        a = Avatar.objects.create(desc='avatar')\n+        user = User.objects.create(avatar=a)\n+        # Test deletion with a foreign key constraint.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(user))\n+        user.delete()\n+        self.assertIsNone(user.pk)\n+        # Avatar remains since it wasn't deleted.\n+        self.assertIsNotNone(a.pk)\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n         self.assertNumQueries(1, User.objects.filter(pk=u1.pk).delete)\n",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..ba89e10 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -95,6 +95,11 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+            ('1e-199', 2, '0.00'),\n+            ('1e-200', 2, '0.00'),\n+            ('1e-201', 2, '0.00'),\n+            ('1.23e-200', 5, '0.00000'),\n+            ('9.99e-201', 3, '0.000'),\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-11211": "diff --git a/tests/prefetch_related/models.py b/tests/prefetch_related/models.py\nindex 3ce4b3f..6851910 100644\n--- a/tests/prefetch_related/models.py\n+++ b/tests/prefetch_related/models.py\n@@ -1,3 +1,4 @@\n+\n import uuid\n \n from django.contrib.contenttypes.fields import (\n@@ -196,7 +197,18 @@ class Comment(models.Model):\n         ordering = ['id']\n \n \n-# Models for lookup ordering tests\n+# Model with UUID primary key to test GFK with UUID PK\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=50)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n \n class House(models.Model):\n     name = models.CharField(max_length=50)\n",
  "django__django-11239": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex b843072..054ecf3 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -81,7 +81,34 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n-    def test_sigint_handler(self):\n+    def test_ssl_certificate(self):\n+        self.assertEqual(\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+                'sslmode': 'verify-ca',\n+                'sslrootcert': 'root.crt',\n+                'sslcert': 'client.crt',\n+                'sslkey': 'client.key',\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                None,\n+            )\n+        )\n+        self.assertEqual(\n+            self.pg_env.get('PGSSLMODE'), 'verify-ca'\n+        )\n+        self.assertEqual(\n+            self.pg_env.get('PGSSLROOTCERT'), 'root.crt'\n+        )\n+        self.assertEqual(\n+            self.pg_env.get('PGSSLCERT'), 'client.crt'\n+        )\n+        self.assertEqual(\n+            self.pg_env.get('PGSSLKEY'), 'client.key'\n+        )\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n         def _mock_subprocess_run(*args, **kwargs):\n             handler = signal.getsignal(signal.SIGINT)\n",
  "django__django-11265": "diff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py\nindex a587c22..aa1efe4 100644\n--- a/tests/filtered_relation/tests.py\n+++ b/tests/filtered_relation/tests.py\n@@ -98,6 +98,14 @@ class FilteredRelationTests(TestCase):\n             [self.author1]\n         )\n \n+    def test_with_exclude(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2],\n+        )\n+\n     def test_with_join_and_complex_condition(self):\n         self.assertSequenceEqual(\n             Author.objects.annotate(\n",
  "django__django-11276": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 4051a05..fc1774f 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -28,6 +28,17 @@ class TestUtilsHtml(SimpleTestCase):\n             ('>', '&gt;'),\n             ('\"', '&quot;'),\n             (\"'\", '&#39;'),\n+            # Test the substitution of quotes\n+            (\"'\", '&#x27;'),  # Original Django output\n+            (\"'\", '&#39;'),  # Standard HTML output\n+        )\n+\n+        # Test compatibility with the output from Python's html.escape()\n+        # Using the exact string that is noted to be differently escaped.\n+        # This ensures that the change in behavior is captured.\n+        items_html_escape = (\n+            (\"'\", '&#x27;'),  # Django's original escaping\n+            (\"'\", '&#39;'),  # html.escape() output\n         )\n         # Substitution patterns for testing the above items.\n         patterns = (\"%s\", \"asdf%sfdsa\", \"%s1\", \"1%sb\")\n",
  "django__django-11292": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex b016284..6e3c5f8 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -253,8 +253,28 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertNoOutput(err)\n         self.assertEqual(out.strip(), 'Set foo')\n \n+    def test_skip_checks_enabled(self):\n+        \"\"\"\n+        Test that system checks are skipped when --skip-checks is provided.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            'STATICFILES_DIRS': '\"foo\"',\n+        })\n+        # Run the management command with --skip-checks option\n+        out, err = self.run_manage(['set_option', '--skip-checks', '--set', 'foo'])\n+        self.assertNoOutput(err)\n+        self.assertEqual(out.strip(), 'Set foo')\n \n-class UtilsTests(SimpleTestCase):\n+    def test_skip_checks_disabled(self):\n+        \"\"\"\n+        Test that system checks are not skipped when --skip-checks is not provided.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            'STATICFILES_DIRS': '\"foo\"',\n+        })\n+        # Run the management command without --skip-checks option\n+        out, err = self.run_manage(['set_option', '--set', 'foo'])\n+        self.assertIn('staticfiles.E001', err)  # Expect error due to system check\n \n     def test_no_existent_external_program(self):\n         msg = 'Error executing a_42_command_that_doesnt_exist_42'\n",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..346051d 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,5 +1,7 @@\n+\n from django.test import SimpleTestCase\n-from django.urls.resolvers import RegexPattern, RoutePattern\n+from django.urls.resolvers import RegexPattern, RoutePattern, get_resolver\n+from django.test.utils import override_settings\n from django.utils.translation import gettext_lazy as _\n \n \n@@ -9,7 +11,36 @@ class RegexPatternTests(SimpleTestCase):\n         self.assertEqual(str(RegexPattern(_('^translated/$'))), '^translated/$')\n \n \n-class RoutePatternTests(SimpleTestCase):\n+class ResolverCacheTests(SimpleTestCase):\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_default_root_urlconf(self):\n+        # Resolver for a default URLconf (passing no argument) and for the\n+        # settings.ROOT_URLCONF is the same cached object.\n+        self.assertIs(get_resolver(), get_resolver('urlpatterns.path_urls'))\n+        self.assertIsNot(get_resolver(), get_resolver('urlpatterns.path_dynamic_urls'))\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_with_explicit_none(self):\n+        # Explicitly passing None should also result in the same resolver as\n+        # when using settings.ROOT_URLCONF.\n+        self.assertIs(get_resolver(None), get_resolver('urlpatterns.path_urls'))\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_switching_urlconf(self):\n+        # Switching between different URLconfs should result in different resolver instances.\n+        resolver_default = get_resolver()\n+        resolver_other = get_resolver('urlpatterns.path_dynamic_urls')\n+        self.assertIsNot(resolver_default, resolver_other)\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_consistency_after_request(self):\n+        # After a request sets the URLconf, the cached resolver should remain consistent.\n+        resolver_before_request = get_resolver()\n+        # Simulate request by setting URLconf\n+        get_resolver(settings.ROOT_URLCONF)\n+        resolver_after_request = get_resolver()\n+        self.assertIs(resolver_before_request, resolver_after_request)\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\nindex b010b42..16b0f77 100644\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -226,8 +226,28 @@ class BaseModelBackendTest:\n         authenticate(username='no_such_user', password='test')\n         self.assertEqual(CountingMD5PasswordHasher.calls, 1)\n \n+from django.test import TestCase, override_settings\n+from django.contrib.auth import authenticate, get_user_model\n+\n+User = get_user_model()\n \n class ModelBackendTest(BaseModelBackendTest, TestCase):\n+\n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authenticate_no_username(self):\n+        \"\"\"\n+        authenticate() should not query the database when username is None.\n+        \"\"\"\n+        with self.assertNumQueries(0):\n+            self.assertIsNone(authenticate(username=None, password='test'))\n+\n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authenticate_no_password(self):\n+        \"\"\"\n+        authenticate() should not query the database when password is None.\n+        \"\"\"\n+        with self.assertNumQueries(0):\n+            self.assertIsNone(authenticate(username='test'))\n     \"\"\"\n     Tests for the ModelBackend using the default User model.\n     \"\"\"\n",
  "django__django-11490": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex e627a0d..aba952a 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -115,6 +115,17 @@ class QuerySetSetOperationTests(TestCase):\n         qs2 = Number.objects.filter(num__gte=2, num__lte=3)\n         self.assertNumbersEqual(qs1.union(qs2).order_by(F('num').desc()), [3, 2, 1, 0])\n \n+    def test_composed_queries_change_columns(self):\n+        # Test that composed queries can change the list of columns with values_list()\n+        ReservedName.objects.create(name='a', order=2)\n+        qs1 = ReservedName.objects.all()\n+        # Get 'name' and 'order'\n+        reserved_name = qs1.union(qs1).values_list('name', 'order').get()\n+        self.assertEqual(reserved_name, ('a', 2))\n+        # Change to only 'order'\n+        reserved_name = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(reserved_name, (2,))\n+        \n     def test_union_with_values(self):\n         ReservedName.objects.create(name='a', order=2)\n         qs1 = ReservedName.objects.all()\n",
  "django__django-11532": "diff --git a/tests/mail/tests.py b/tests/mail/tests.py\nindex a6f0e17..07c4317 100644\n--- a/tests/mail/tests.py\n+++ b/tests/mail/tests.py\n@@ -365,6 +365,21 @@ class MailTests(HeadersCheckMixin, SimpleTestCase):\n         self.assertEqual(msg.body, '')\n         self.assertEqual(msg.message().get_payload(), '')\n \n+    @mock.patch('socket.getfqdn', return_value='\u6f22\u5b57')\n+    def test_non_ascii_dns_non_unicode_email(self, mocked_getfqdn):\n+        \"\"\"\n+        Test that a non-ASCII DNS hostname is converted to Punycode in\n+        the Message-ID header when the email encoding is non-unicode.\n+        \"\"\"\n+        delattr(mail.message.DNS_NAME, '_fqdn')  # Clear the cache\n+\n+        email = EmailMessage('subject', 'content', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        message = email.message()\n+\n+        # Expect the Punycode version of '\u6f22\u5b57' in the Message-ID\n+        self.assertIn('@xn--p8s937b>', message['Message-ID'])\n+\n     def test_encoding(self):\n         \"\"\"\n         Regression for #12791 - Encode body correctly with other encodings\n",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..378e0c6 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,9 +1,10 @@\n+\n from django import forms\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n-from django.db.models import F\n+from django.db.models import F, Field, Model\n from django.db.models.functions import Upper\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..ed41528 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -2,6 +2,7 @@ from datetime import datetime\n from operator import attrgetter\n \n from django.core.exceptions import FieldError\n+from datetime import datetime\n from django.db.models import (\n     CharField, Count, DateTimeField, F, Max, OuterRef, Subquery, Value,\n )\n@@ -9,7 +10,7 @@ from django.db.models.functions import Upper\n from django.test import TestCase\n from django.utils.deprecation import RemovedInDjango31Warning\n \n-from .models import Article, Author, OrderedByFArticle, Reference\n+from .models import Article, Author, ChildArticle, OrderedByFArticle, Reference\n \n \n class OrderingTests(TestCase):\n@@ -462,7 +463,39 @@ class OrderingTests(TestCase):\n             attrgetter('headline')\n         )\n \n-    def test_deprecated_values_annotate(self):\n+    def test_order_by_ptr_field_with_default_ordering_by_expression(self):\n+        ca1 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_2,\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca3 = ChildArticle.objects.create(\n+            headline='h3',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n+        articles = ChildArticle.objects.order_by('article_ptr')\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+\n+    def test_ordering_with_f_expression(self):\n+        article1 = OrderedByFArticle.objects.create(headline='h1', pub_date=datetime(2023, 1, 1), author=self.author_1)\n+        article2 = OrderedByFArticle.objects.create(headline='h2', pub_date=datetime(2023, 1, 2), author=self.author_2)\n+        articles = OrderedByFArticle.objects.all()\n+        self.assertSequenceEqual(articles, [article1, article2])\n+\n+    def test_ordering_with_multiple_f_expressions(self):\n+        OrderedByFArticle.objects.create(headline='h1', pub_date=datetime(2023, 1, 1), author=self.author_1)\n+        OrderedByFArticle.objects.create(headline='h2', pub_date=datetime(2023, 1, 2), author=self.author_2)\n+        articles = OrderedByFArticle.objects.order_by(F('author').desc(nulls_last=True))\n+        self.assertQuerysetEqual(\n+            articles, ['h2', 'h1'], attrgetter('headline')\n+        )\n         msg = (\n             \"Article QuerySet won't use Meta.ordering in Django 3.1. Add \"\n             \".order_by('-pub_date', 'headline', OrderBy(F(author__name), \"\n",
  "django__django-11603": "",
  "django__django-11740": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a98fff5..89cedb8 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -718,7 +718,32 @@ class AutodetectorTests(TestCase):\n         self.assertOperationTypes(changes, 'testapp', 0, [\"RemoveField\"])\n         self.assertOperationAttributes(changes, \"testapp\", 0, 0, name=\"name\")\n \n-    def test_alter_field(self):\n+    def test_alter_uuidfield_to_fk(self):\n+        \"\"\"\n+        Test to ensure changing a UUIDField to ForeignKey creates appropriate dependencies.\n+        \"\"\"\n+        # ModelState before changing UUIDField to ForeignKey.\n+        before = ModelState(\"testapp\", \"App1\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+            (\"another_app\", models.UUIDField(null=True, blank=True)),\n+        ])\n+        # ModelState after changing UUIDField to ForeignKey.\n+        after = ModelState(\"testapp\", \"App1\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+            (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        # ModelState for the related model.\n+        related = ModelState(\"testapp2\", \"App2\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([before, related], [after, related])\n+        # Verify if a migration is created.\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp', 0, [('testapp2', '__first__')])\n         \"\"\"Tests autodetection of new fields.\"\"\"\n         changes = self.get_changes([self.author_name], [self.author_name_longer])\n         # Right number/type of migrations?\n@@ -2399,4 +2424,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-11749": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex a0e1530..6bb17e3 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -224,6 +224,20 @@ class CommandTests(SimpleTestCase):\n         management.call_command('subparser_dest', 'foo', bar=12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n \n+    def test_mutually_exclusive_group_required_options(self):\n+        out = StringIO()\n+        # Test that when a mutually exclusive argument group is passed as a kwarg, it behaves correctly\n+        call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+        \n+        out = StringIO()\n+        call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+        \n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            call_command('mutually_exclusive_required', stdout=out)\n+\n     def test_subparser_dest_required_args(self):\n         out = StringIO()\n         management.call_command('subparser_required', 'foo_1', 'foo_2', bar=12, stdout=out)\n",
  "django__django-11790": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 440150b..edaa3af 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -437,6 +437,19 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         self.assertEqual(form.fields['username'].max_length, 254)\n         self.assertEqual(form.errors, {})\n \n+    def test_username_field_max_length_attribute(self):\n+        # Test for a user model with max_length defined\n+        data = {'username': 'u' * 255, 'password': 'pwd'}\n+        form = AuthenticationForm(None, data)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), '255')  # Ensure maxlength is set to 255\n+\n+    def test_username_field_max_length_attribute_default(self):\n+        # Test for a user model without a specific max_length, should default to 254\n+        with override_settings(AUTH_USER_MODEL='auth_tests.IntegerUsernameUser'):\n+            data = {'username': '0123456', 'password': 'password'}\n+            form = AuthenticationForm(None, data)\n+            self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), '254')  # Ensure maxlength defaults to 254\n+\n     def test_username_field_label(self):\n \n         class CustomAuthenticationForm(AuthenticationForm):\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..fb32399 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -246,8 +246,21 @@ class WriterTests(SimpleTestCase):\n             [list, tuple, dict, set, frozenset],\n             (\"[list, tuple, dict, set, frozenset]\", set())\n         )\n+    def test_enum_translation_issue(self):\n+        class TranslatedEnum(enum.Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n \n-    def test_serialize_lazy_objects(self):\n+        # Test serialization of Enum\n+        field = models.CharField(default=TranslatedEnum.GOOD, choices=[(m.value, m) for m in TranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('Good', migrations.test_writer.TranslatedEnum['GOOD']), \"\n+            \"('Bad', migrations.test_writer.TranslatedEnum['BAD'])], \"\n+            \"default=migrations.test_writer.TranslatedEnum['GOOD'])\"\n+        )\n         pattern = re.compile(r'^foo$')\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n         self.assertEqual(self.serialize_round_trip(lazy_pattern), pattern)\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..4a60f90 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,9 +1,11 @@\n+\n import unittest\n from datetime import datetime\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n from django.utils.deprecation import RemovedInDjango40Warning\n+from unittest import mock\n from django.utils.http import (\n     base36_to_int, escape_leading_slashes, http_date, int_to_base36,\n     is_safe_url, is_same_domain, parse_etags, parse_http_date, quote_etag,\n@@ -312,7 +314,28 @@ class HttpDateProcessingTests(unittest.TestCase):\n         t = 1167616461.0\n         self.assertEqual(http_date(t), 'Mon, 01 Jan 2007 01:54:21 GMT')\n \n-    def test_parsing_rfc1123(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_with_mocked_datetime(self, mocked_datetime):\n+        # To test various 'now' dates with RFC 850 dates, ensuring correct parsing\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+        utcnow_1 = datetime(2019, 11, 6, 8, 49, 37)\n+        utcnow_2 = datetime(2020, 11, 6, 8, 49, 37)\n+        utcnow_3 = datetime(2048, 11, 6, 8, 49, 37)\n+        tests = (\n+            (utcnow_1, 'Tuesday, 31-Dec-69 08:49:37 GMT', datetime(2069, 12, 31, 8, 49, 37)),\n+            (utcnow_1, 'Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),\n+            (utcnow_1, 'Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37)),\n+            (utcnow_2, 'Wednesday, 31-Dec-70 08:49:37 GMT', datetime(2070, 12, 31, 8, 49, 37)),\n+            (utcnow_2, 'Friday, 31-Dec-71 08:49:37 GMT', datetime(1971, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+        )\n+        for utcnow, rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = utcnow\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n",
  "django__django-11880": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 95afc0d..9500d74 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3672,7 +3672,52 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n             '<input type=\"hidden\" name=\"data\" id=\"id_data\"></td></tr>'\n         )\n \n-    def test_field_named_data(self):\n+import copy\n+from django.forms import Form, CharField\n+from django.test import SimpleTestCase\n+\n+class FormFieldDeepCopyTests(SimpleTestCase):\n+    def test_field_deep_copy_error_messages(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        self.assertIsInstance(field_copy, CustomCharField)\n+        self.assertIsNot(field_copy.error_messages, field.error_messages)\n+        self.assertEqual(field_copy.error_messages['invalid'], 'Form custom error message.')\n+\n+    def test_modify_original_field_error_messages(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Original error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        # Modify the original field's error messages\n+        field.error_messages['invalid'] = 'Modified error message.'\n+\n+        # Ensure the copy's error messages are not affected\n+        self.assertEqual(field_copy.error_messages['invalid'], 'Original error message.')\n+        self.assertNotEqual(field_copy.error_messages['invalid'], field.error_messages['invalid'])\n+\n+    def test_modify_copied_field_error_messages(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Initial error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        # Modify the copied field's error messages\n+        field_copy.error_messages['invalid'] = 'Changed error message.'\n+\n+        # Ensure the original field's error messages are not affected\n+        self.assertEqual(field.error_messages['invalid'], 'Initial error message.')\n+        self.assertNotEqual(field.error_messages['invalid'], field_copy.error_messages['invalid'])\n         class DataForm(Form):\n             data = CharField(max_length=10)\n \n",
  "django__django-11951": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex f2f6bbd..92cdbb5 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -1,3 +1,5 @@\n+\n+from math import ceil\n from operator import attrgetter\n \n from django.db import IntegrityError, NotSupportedError, connection\n@@ -202,9 +204,27 @@ class BulkCreateTests(TestCase):\n         self.assertEqual(TwoFields.objects.count(), num_objs)\n \n     def test_empty_model(self):\n-        NoFields.objects.bulk_create([NoFields() for i in range(2)])\n+        NoFields.objects.bulk_create([NoFields() for _ in range(2)])\n         self.assertEqual(NoFields.objects.count(), 2)\n \n+    @skipUnlessDBFeature('has_bulk_insert')\n+    def test_explicit_batch_size_respects_max_batch_size(self):\n+        objs = [Country() for _ in range(1000)]\n+        fields = ['name', 'iso_two_letter', 'description']\n+        max_batch_size = max(connection.ops.bulk_batch_size(fields, objs), 1)\n+        # Test that using a batch_size larger than max_batch_size respects max_batch_size\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            Country.objects.bulk_create(objs, batch_size=max_batch_size + 1)\n+\n+    @skipUnlessDBFeature('has_bulk_insert')\n+    def test_no_batch_size_uses_max_batch_size(self):\n+        objs = [Country() for _ in range(1000)]\n+        fields = ['name', 'iso_two_letter', 'description']\n+        max_batch_size = max(connection.ops.bulk_batch_size(fields, objs), 1)\n+        # Test that not specifying batch_size uses max_batch_size\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            Country.objects.bulk_create(objs)\n+\n     @skipUnlessDBFeature('has_bulk_insert')\n     def test_explicit_batch_size_efficiency(self):\n         objs = [TwoFields(f1=i, f2=i) for i in range(0, 100)]\n",
  "django__django-11964": "diff --git a/tests/model_fields/test_charfield.py b/tests/model_fields/test_charfield.py\nindex c6162e5..78cd051 100644\n--- a/tests/model_fields/test_charfield.py\n+++ b/tests/model_fields/test_charfield.py\n@@ -1,3 +1,4 @@\n+\n from unittest import skipIf\n \n from django.core.exceptions import ValidationError\n@@ -6,6 +7,26 @@ from django.test import SimpleTestCase, TestCase\n \n from .models import Post\n \n+class TestCharFieldWithChoices(TestCase):\n+    def test_charfield_with_textchoices(self):\n+        class MyTextChoices(models.TextChoices):\n+            OPTION_A = \"A\", \"Option A\"\n+            OPTION_B = \"B\", \"Option B\"\n+\n+        class ChoiceModel(models.Model):\n+            choice = models.CharField(max_length=10, choices=MyTextChoices.choices)\n+\n+        choice_instance = ChoiceModel.objects.create(choice=MyTextChoices.OPTION_A)\n+        choice_instance.refresh_from_db()\n+\n+        # Ensure the stored value is a string, not an enum member\n+        self.assertIsInstance(choice_instance.choice, str)\n+        self.assertEqual(choice_instance.choice, \"A\")\n+\n+        retrieved_instance = ChoiceModel.objects.get(pk=choice_instance.pk)\n+        self.assertIsInstance(retrieved_instance.choice, str)\n+        self.assertEqual(retrieved_instance.choice, \"A\")\n+\n \n class TestCharField(TestCase):\n \n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..af43b13 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -147,8 +147,52 @@ class ChoicesTests(SimpleTestCase):\n             with self.subTest(field=field):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n+from django.db import models\n+from django.test import SimpleTestCase\n \n class GetFieldDisplayTests(SimpleTestCase):\n+    \n+    def test_overriding_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+        \n+    def test_multiple_instances(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something else'\n+\n+        f1 = FooBar(foo_bar=1)\n+        f2 = FooBar(foo_bar=2)\n+        self.assertEqual(f1.get_foo_bar_display(), 'something else')\n+        self.assertEqual(f2.get_foo_bar_display(), 'something else')\n+        \n+    def test_edge_case_invalid_choice(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return f'Value: {self.foo_bar}'\n+\n+        f = FooBar(foo_bar=9)\n+        self.assertEqual(f.get_foo_bar_display(), 'Value: 9')\n+        \n+    def test_edge_case_no_choice(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[])\n+\n+            def get_foo_bar_display(self):\n+                return 'No choices'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'No choices')\n \n     def test_choices_and_field_display(self):\n         \"\"\"\n",
  "django__django-12039": "",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..cd84340 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n@@ -7,6 +8,7 @@ from django.db.models.fields.related_lookups import RelatedIsNull\n from django.db.models.functions import Lower\n from django.db.models.lookups import Exact, GreaterThan, IsNull, LessThan\n from django.db.models.sql.query import Query\n+from django.db.models.lookups import Contains\n from django.db.models.sql.where import OR\n from django.test import SimpleTestCase\n from django.test.utils import register_lookup\n@@ -107,6 +109,26 @@ class TestQuery(SimpleTestCase):\n         self.assertIsInstance(b_isnull.lhs, SimpleCol)\n         self.assertEqual(b_isnull.lhs.target, ObjectC._meta.get_field('objectb'))\n \n+    def test_iterable_lookup_value(self):\n+        query = Query(Item)\n+        # Test with a list\n+        where = query.build_where(Q(name=['a', 'b']))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ['a', 'b'])  # Ensure the list is not coerced to a tuple\n+\n+        # Test with a tuple\n+        where = query.build_where(Q(name=('a', 'b')))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ('a', 'b'))  # Ensure the tuple remains a tuple\n+\n+        # Test with a set (though less common, for completeness)\n+        where = query.build_where(Q(name={'a', 'b'}))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(set(name_exact.rhs), {'a', 'b'})  # Convert back to set for test\n+\n     def test_clone_select_related(self):\n         query = Query(Item)\n         query.add_select_related(['creator'])\n",
  "django__django-12125": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex e62f7b0..e88a11f 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -180,6 +180,41 @@ class OperationWriterTests(SimpleTestCase):\n         )\n \n \n+class Outer:\n+    class Inner(models.CharField):\n+        pass\n+\n+class TestInnerClassField(SimpleTestCase):\n+    def test_inner_class_field_serialization(self):\n+        \"\"\"\n+        Test that inner class fields are serialized correctly.\n+        \"\"\"\n+        field = Outer.Inner(max_length=20)\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"test_writer.Outer.Inner(max_length=20)\", \n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n+    def test_nested_enum_field_serialization(self):\n+        class TestModel(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = TestModel._meta.get_field('state')\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"enumfields.fields.EnumField(enum=test_writer.TestModel.State, max_length=10)\",\n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n+\n class WriterTests(SimpleTestCase):\n     \"\"\"\n     Tests the migration writer (makes migration files from Migration instances)\n@@ -229,12 +264,82 @@ class WriterTests(SimpleTestCase):\n             (\"Decimal('1.3')\", {'from decimal import Decimal'})\n         )\n \n+\n+class Outer:\n+    class Inner(models.CharField):\n+        pass\n+\n+class TestInnerClassField(SimpleTestCase):\n+    def test_inner_class_field_serialization(self):\n+        \"\"\"\n+        Test that inner class fields are serialized correctly.\n+        \"\"\"\n+        field = Outer.Inner(max_length=20)\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"test_writer.Outer.Inner(max_length=20)\", \n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n+    def test_nested_enum_field_serialization(self):\n+        class TestModel(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = TestModel._meta.get_field('state')\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"enumfields.fields.EnumField(enum=test_writer.TestModel.State, max_length=10)\",\n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n         self.assertSerializedEqual(Money('1.3'))\n         self.assertSerializedResultEqual(\n             Money('1.3'),\n             (\"migrations.test_writer.Money('1.3')\", {'import migrations.test_writer'})\n         )\n \n+\n+class Outer:\n+    class Inner(models.CharField):\n+        pass\n+\n+class TestInnerClassField(SimpleTestCase):\n+    def test_inner_class_field_serialization(self):\n+        \"\"\"\n+        Test that inner class fields are serialized correctly.\n+        \"\"\"\n+        field = Outer.Inner(max_length=20)\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"test_writer.Outer.Inner(max_length=20)\", \n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n+    def test_nested_enum_field_serialization(self):\n+        class TestModel(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = TestModel._meta.get_field('state')\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"enumfields.fields.EnumField(enum=test_writer.TestModel.State, max_length=10)\",\n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n     def test_serialize_constants(self):\n         self.assertSerializedEqual(None)\n         self.assertSerializedEqual(True)\n@@ -270,6 +375,41 @@ class WriterTests(SimpleTestCase):\n             (\"[list, tuple, dict, set, frozenset]\", set())\n         )\n \n+\n+class Outer:\n+    class Inner(models.CharField):\n+        pass\n+\n+class TestInnerClassField(SimpleTestCase):\n+    def test_inner_class_field_serialization(self):\n+        \"\"\"\n+        Test that inner class fields are serialized correctly.\n+        \"\"\"\n+        field = Outer.Inner(max_length=20)\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"test_writer.Outer.Inner(max_length=20)\", \n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n+    def test_nested_enum_field_serialization(self):\n+        class TestModel(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = TestModel._meta.get_field('state')\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"enumfields.fields.EnumField(enum=test_writer.TestModel.State, max_length=10)\",\n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n     def test_serialize_lazy_objects(self):\n         pattern = re.compile(r'^foo$')\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n@@ -280,18 +420,158 @@ class WriterTests(SimpleTestCase):\n             TextEnum.A,\n             (\"migrations.test_writer.TextEnum['A']\", {'import migrations.test_writer'})\n         )\n+\n+\n+class Outer:\n+    class Inner(models.CharField):\n+        pass\n+\n+class TestInnerClassField(SimpleTestCase):\n+    def test_inner_class_field_serialization(self):\n+        \"\"\"\n+        Test that inner class fields are serialized correctly.\n+        \"\"\"\n+        field = Outer.Inner(max_length=20)\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"test_writer.Outer.Inner(max_length=20)\", \n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n+    def test_nested_enum_field_serialization(self):\n+        class TestModel(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = TestModel._meta.get_field('state')\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"enumfields.fields.EnumField(enum=test_writer.TestModel.State, max_length=10)\",\n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n         self.assertSerializedResultEqual(\n             TextTranslatedEnum.A,\n             (\"migrations.test_writer.TextTranslatedEnum['A']\", {'import migrations.test_writer'})\n         )\n+\n+\n+class Outer:\n+    class Inner(models.CharField):\n+        pass\n+\n+class TestInnerClassField(SimpleTestCase):\n+    def test_inner_class_field_serialization(self):\n+        \"\"\"\n+        Test that inner class fields are serialized correctly.\n+        \"\"\"\n+        field = Outer.Inner(max_length=20)\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"test_writer.Outer.Inner(max_length=20)\", \n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n+    def test_nested_enum_field_serialization(self):\n+        class TestModel(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = TestModel._meta.get_field('state')\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"enumfields.fields.EnumField(enum=test_writer.TestModel.State, max_length=10)\",\n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n         self.assertSerializedResultEqual(\n             BinaryEnum.A,\n             (\"migrations.test_writer.BinaryEnum['A']\", {'import migrations.test_writer'})\n         )\n+\n+\n+class Outer:\n+    class Inner(models.CharField):\n+        pass\n+\n+class TestInnerClassField(SimpleTestCase):\n+    def test_inner_class_field_serialization(self):\n+        \"\"\"\n+        Test that inner class fields are serialized correctly.\n+        \"\"\"\n+        field = Outer.Inner(max_length=20)\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"test_writer.Outer.Inner(max_length=20)\", \n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n+    def test_nested_enum_field_serialization(self):\n+        class TestModel(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = TestModel._meta.get_field('state')\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"enumfields.fields.EnumField(enum=test_writer.TestModel.State, max_length=10)\",\n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n         self.assertSerializedResultEqual(\n             IntEnum.B,\n             (\"migrations.test_writer.IntEnum['B']\", {'import migrations.test_writer'})\n         )\n+\n+\n+class Outer:\n+    class Inner(models.CharField):\n+        pass\n+\n+class TestInnerClassField(SimpleTestCase):\n+    def test_inner_class_field_serialization(self):\n+        \"\"\"\n+        Test that inner class fields are serialized correctly.\n+        \"\"\"\n+        field = Outer.Inner(max_length=20)\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"test_writer.Outer.Inner(max_length=20)\", \n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n+    def test_nested_enum_field_serialization(self):\n+        class TestModel(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = TestModel._meta.get_field('state')\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"enumfields.fields.EnumField(enum=test_writer.TestModel.State, max_length=10)\",\n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n         self.assertSerializedResultEqual(\n             self.NestedEnum.A,\n             (\n@@ -299,6 +579,41 @@ class WriterTests(SimpleTestCase):\n                 {'import migrations.test_writer'},\n             ),\n         )\n+\n+\n+class Outer:\n+    class Inner(models.CharField):\n+        pass\n+\n+class TestInnerClassField(SimpleTestCase):\n+    def test_inner_class_field_serialization(self):\n+        \"\"\"\n+        Test that inner class fields are serialized correctly.\n+        \"\"\"\n+        field = Outer.Inner(max_length=20)\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"test_writer.Outer.Inner(max_length=20)\", \n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n+    def test_nested_enum_field_serialization(self):\n+        class TestModel(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = TestModel._meta.get_field('state')\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"enumfields.fields.EnumField(enum=test_writer.TestModel.State, max_length=10)\",\n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n         self.assertSerializedEqual(self.NestedEnum.A)\n \n         field = models.CharField(default=TextEnum.B, choices=[(m.value, m) for m in TextEnum])\n@@ -310,10 +625,80 @@ class WriterTests(SimpleTestCase):\n             \"('value-b', migrations.test_writer.TextEnum['B'])], \"\n             \"default=migrations.test_writer.TextEnum['B'])\"\n         )\n+\n+\n+class Outer:\n+    class Inner(models.CharField):\n+        pass\n+\n+class TestInnerClassField(SimpleTestCase):\n+    def test_inner_class_field_serialization(self):\n+        \"\"\"\n+        Test that inner class fields are serialized correctly.\n+        \"\"\"\n+        field = Outer.Inner(max_length=20)\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"test_writer.Outer.Inner(max_length=20)\", \n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n+    def test_nested_enum_field_serialization(self):\n+        class TestModel(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = TestModel._meta.get_field('state')\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"enumfields.fields.EnumField(enum=test_writer.TestModel.State, max_length=10)\",\n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n         field = models.CharField(\n             default=TextTranslatedEnum.A,\n             choices=[(m.value, m) for m in TextTranslatedEnum],\n         )\n+\n+\n+class Outer:\n+    class Inner(models.CharField):\n+        pass\n+\n+class TestInnerClassField(SimpleTestCase):\n+    def test_inner_class_field_serialization(self):\n+        \"\"\"\n+        Test that inner class fields are serialized correctly.\n+        \"\"\"\n+        field = Outer.Inner(max_length=20)\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"test_writer.Outer.Inner(max_length=20)\", \n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n+    def test_nested_enum_field_serialization(self):\n+        class TestModel(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = TestModel._meta.get_field('state')\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"enumfields.fields.EnumField(enum=test_writer.TestModel.State, max_length=10)\",\n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n             string,\n@@ -322,6 +707,41 @@ class WriterTests(SimpleTestCase):\n             \"('value-b', migrations.test_writer.TextTranslatedEnum['B'])], \"\n             \"default=migrations.test_writer.TextTranslatedEnum['A'])\"\n         )\n+\n+\n+class Outer:\n+    class Inner(models.CharField):\n+        pass\n+\n+class TestInnerClassField(SimpleTestCase):\n+    def test_inner_class_field_serialization(self):\n+        \"\"\"\n+        Test that inner class fields are serialized correctly.\n+        \"\"\"\n+        field = Outer.Inner(max_length=20)\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"test_writer.Outer.Inner(max_length=20)\", \n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n+    def test_nested_enum_field_serialization(self):\n+        class TestModel(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = TestModel._meta.get_field('state')\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"enumfields.fields.EnumField(enum=test_writer.TestModel.State, max_length=10)\",\n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n         field = models.CharField(default=BinaryEnum.B, choices=[(m.value, m) for m in BinaryEnum])\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n@@ -331,6 +751,41 @@ class WriterTests(SimpleTestCase):\n             \"(b'value-b', migrations.test_writer.BinaryEnum['B'])], \"\n             \"default=migrations.test_writer.BinaryEnum['B'])\"\n         )\n+\n+\n+class Outer:\n+    class Inner(models.CharField):\n+        pass\n+\n+class TestInnerClassField(SimpleTestCase):\n+    def test_inner_class_field_serialization(self):\n+        \"\"\"\n+        Test that inner class fields are serialized correctly.\n+        \"\"\"\n+        field = Outer.Inner(max_length=20)\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"test_writer.Outer.Inner(max_length=20)\", \n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n+    def test_nested_enum_field_serialization(self):\n+        class TestModel(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = TestModel._meta.get_field('state')\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"enumfields.fields.EnumField(enum=test_writer.TestModel.State, max_length=10)\",\n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n         field = models.IntegerField(default=IntEnum.A, choices=[(m.value, m) for m in IntEnum])\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n@@ -341,6 +796,41 @@ class WriterTests(SimpleTestCase):\n             \"default=migrations.test_writer.IntEnum['A'])\"\n         )\n \n+\n+class Outer:\n+    class Inner(models.CharField):\n+        pass\n+\n+class TestInnerClassField(SimpleTestCase):\n+    def test_inner_class_field_serialization(self):\n+        \"\"\"\n+        Test that inner class fields are serialized correctly.\n+        \"\"\"\n+        field = Outer.Inner(max_length=20)\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"test_writer.Outer.Inner(max_length=20)\", \n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n+    def test_nested_enum_field_serialization(self):\n+        class TestModel(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = TestModel._meta.get_field('state')\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"enumfields.fields.EnumField(enum=test_writer.TestModel.State, max_length=10)\",\n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n     def test_serialize_choices(self):\n         class TextChoices(models.TextChoices):\n             A = 'A', 'A value'\n@@ -360,6 +850,41 @@ class WriterTests(SimpleTestCase):\n             DateChoices.DATE_1,\n             ('datetime.date(1969, 7, 20)', {'import datetime'}),\n         )\n+\n+\n+class Outer:\n+    class Inner(models.CharField):\n+        pass\n+\n+class TestInnerClassField(SimpleTestCase):\n+    def test_inner_class_field_serialization(self):\n+        \"\"\"\n+        Test that inner class fields are serialized correctly.\n+        \"\"\"\n+        field = Outer.Inner(max_length=20)\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"test_writer.Outer.Inner(max_length=20)\", \n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n+    def test_nested_enum_field_serialization(self):\n+        class TestModel(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = TestModel._meta.get_field('state')\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"enumfields.fields.EnumField(enum=test_writer.TestModel.State, max_length=10)\",\n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n         field = models.CharField(default=TextChoices.B, choices=TextChoices.choices)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n@@ -367,12 +892,82 @@ class WriterTests(SimpleTestCase):\n             \"models.CharField(choices=[('A', 'A value'), ('B', 'B value')], \"\n             \"default='B')\",\n         )\n+\n+\n+class Outer:\n+    class Inner(models.CharField):\n+        pass\n+\n+class TestInnerClassField(SimpleTestCase):\n+    def test_inner_class_field_serialization(self):\n+        \"\"\"\n+        Test that inner class fields are serialized correctly.\n+        \"\"\"\n+        field = Outer.Inner(max_length=20)\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"test_writer.Outer.Inner(max_length=20)\", \n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n+    def test_nested_enum_field_serialization(self):\n+        class TestModel(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = TestModel._meta.get_field('state')\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"enumfields.fields.EnumField(enum=test_writer.TestModel.State, max_length=10)\",\n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n         field = models.IntegerField(default=IntegerChoices.B, choices=IntegerChoices.choices)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n             string,\n             \"models.IntegerField(choices=[(1, 'One'), (2, 'Two')], default=2)\",\n         )\n+\n+\n+class Outer:\n+    class Inner(models.CharField):\n+        pass\n+\n+class TestInnerClassField(SimpleTestCase):\n+    def test_inner_class_field_serialization(self):\n+        \"\"\"\n+        Test that inner class fields are serialized correctly.\n+        \"\"\"\n+        field = Outer.Inner(max_length=20)\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"test_writer.Outer.Inner(max_length=20)\", \n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n+    def test_nested_enum_field_serialization(self):\n+        class TestModel(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = TestModel._meta.get_field('state')\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"enumfields.fields.EnumField(enum=test_writer.TestModel.State, max_length=10)\",\n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n         field = models.DateField(default=DateChoices.DATE_2, choices=DateChoices.choices)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n@@ -383,6 +978,41 @@ class WriterTests(SimpleTestCase):\n             \"default=datetime.date(1969, 11, 19))\"\n         )\n \n+\n+class Outer:\n+    class Inner(models.CharField):\n+        pass\n+\n+class TestInnerClassField(SimpleTestCase):\n+    def test_inner_class_field_serialization(self):\n+        \"\"\"\n+        Test that inner class fields are serialized correctly.\n+        \"\"\"\n+        field = Outer.Inner(max_length=20)\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"test_writer.Outer.Inner(max_length=20)\", \n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n+    def test_nested_enum_field_serialization(self):\n+        class TestModel(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = TestModel._meta.get_field('state')\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"enumfields.fields.EnumField(enum=test_writer.TestModel.State, max_length=10)\",\n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n     def test_serialize_uuid(self):\n         self.assertSerializedEqual(uuid.uuid1())\n         self.assertSerializedEqual(uuid.uuid4())\n@@ -393,11 +1023,81 @@ class WriterTests(SimpleTestCase):\n             uuid_a,\n             (\"uuid.UUID('5c859437-d061-4847-b3f7-e6b78852f8c8')\", {'import uuid'})\n         )\n+\n+\n+class Outer:\n+    class Inner(models.CharField):\n+        pass\n+\n+class TestInnerClassField(SimpleTestCase):\n+    def test_inner_class_field_serialization(self):\n+        \"\"\"\n+        Test that inner class fields are serialized correctly.\n+        \"\"\"\n+        field = Outer.Inner(max_length=20)\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"test_writer.Outer.Inner(max_length=20)\", \n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n+    def test_nested_enum_field_serialization(self):\n+        class TestModel(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = TestModel._meta.get_field('state')\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"enumfields.fields.EnumField(enum=test_writer.TestModel.State, max_length=10)\",\n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n         self.assertSerializedResultEqual(\n             uuid_b,\n             (\"uuid.UUID('c7853ec1-2ea3-4359-b02d-b54e8f1bcee2')\", {'import uuid'})\n         )\n \n+\n+class Outer:\n+    class Inner(models.CharField):\n+        pass\n+\n+class TestInnerClassField(SimpleTestCase):\n+    def test_inner_class_field_serialization(self):\n+        \"\"\"\n+        Test that inner class fields are serialized correctly.\n+        \"\"\"\n+        field = Outer.Inner(max_length=20)\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"test_writer.Outer.Inner(max_length=20)\", \n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n+    def test_nested_enum_field_serialization(self):\n+        class TestModel(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = TestModel._meta.get_field('state')\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"enumfields.fields.EnumField(enum=test_writer.TestModel.State, max_length=10)\",\n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n         field = models.UUIDField(choices=((uuid_a, 'UUID A'), (uuid_b, 'UUID B')), default=uuid_a)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n@@ -408,6 +1108,41 @@ class WriterTests(SimpleTestCase):\n             \"default=uuid.UUID('5c859437-d061-4847-b3f7-e6b78852f8c8'))\"\n         )\n \n+\n+class Outer:\n+    class Inner(models.CharField):\n+        pass\n+\n+class TestInnerClassField(SimpleTestCase):\n+    def test_inner_class_field_serialization(self):\n+        \"\"\"\n+        Test that inner class fields are serialized correctly.\n+        \"\"\"\n+        field = Outer.Inner(max_length=20)\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"test_writer.Outer.Inner(max_length=20)\", \n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n+    def test_nested_enum_field_serialization(self):\n+        class TestModel(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = TestModel._meta.get_field('state')\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"enumfields.fields.EnumField(enum=test_writer.TestModel.State, max_length=10)\",\n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n     def test_serialize_functions(self):\n         with self.assertRaisesMessage(ValueError, 'Cannot serialize function: lambda'):\n             self.assertSerializedEqual(lambda x: 42)\n@@ -430,6 +1165,41 @@ class WriterTests(SimpleTestCase):\n             datetime.datetime(2014, 1, 1, 1, 1),\n             (\"datetime.datetime(2014, 1, 1, 1, 1)\", {'import datetime'})\n         )\n+\n+\n+class Outer:\n+    class Inner(models.CharField):\n+        pass\n+\n+class TestInnerClassField(SimpleTestCase):\n+    def test_inner_class_field_serialization(self):\n+        \"\"\"\n+        Test that inner class fields are serialized correctly.\n+        \"\"\"\n+        field = Outer.Inner(max_length=20)\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"test_writer.Outer.Inner(max_length=20)\", \n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n+    def test_nested_enum_field_serialization(self):\n+        class TestModel(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = TestModel._meta.get_field('state')\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"enumfields.fields.EnumField(enum=test_writer.TestModel.State, max_length=10)\",\n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n         self.assertSerializedResultEqual(\n             datetime.datetime(2012, 1, 1, 1, 1, tzinfo=utc),\n             (\n@@ -438,18 +1208,123 @@ class WriterTests(SimpleTestCase):\n             )\n         )\n \n+\n+class Outer:\n+    class Inner(models.CharField):\n+        pass\n+\n+class TestInnerClassField(SimpleTestCase):\n+    def test_inner_class_field_serialization(self):\n+        \"\"\"\n+        Test that inner class fields are serialized correctly.\n+        \"\"\"\n+        field = Outer.Inner(max_length=20)\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"test_writer.Outer.Inner(max_length=20)\", \n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n+    def test_nested_enum_field_serialization(self):\n+        class TestModel(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = TestModel._meta.get_field('state')\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"enumfields.fields.EnumField(enum=test_writer.TestModel.State, max_length=10)\",\n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n     def test_serialize_fields(self):\n         self.assertSerializedFieldEqual(models.CharField(max_length=255))\n         self.assertSerializedResultEqual(\n             models.CharField(max_length=255),\n             (\"models.CharField(max_length=255)\", {\"from django.db import models\"})\n         )\n+\n+\n+class Outer:\n+    class Inner(models.CharField):\n+        pass\n+\n+class TestInnerClassField(SimpleTestCase):\n+    def test_inner_class_field_serialization(self):\n+        \"\"\"\n+        Test that inner class fields are serialized correctly.\n+        \"\"\"\n+        field = Outer.Inner(max_length=20)\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"test_writer.Outer.Inner(max_length=20)\", \n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n+    def test_nested_enum_field_serialization(self):\n+        class TestModel(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = TestModel._meta.get_field('state')\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"enumfields.fields.EnumField(enum=test_writer.TestModel.State, max_length=10)\",\n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n         self.assertSerializedFieldEqual(models.TextField(null=True, blank=True))\n         self.assertSerializedResultEqual(\n             models.TextField(null=True, blank=True),\n             (\"models.TextField(blank=True, null=True)\", {'from django.db import models'})\n         )\n \n+\n+class Outer:\n+    class Inner(models.CharField):\n+        pass\n+\n+class TestInnerClassField(SimpleTestCase):\n+    def test_inner_class_field_serialization(self):\n+        \"\"\"\n+        Test that inner class fields are serialized correctly.\n+        \"\"\"\n+        field = Outer.Inner(max_length=20)\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"test_writer.Outer.Inner(max_length=20)\", \n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n+    def test_nested_enum_field_serialization(self):\n+        class TestModel(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = TestModel._meta.get_field('state')\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"enumfields.fields.EnumField(enum=test_writer.TestModel.State, max_length=10)\",\n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n     def test_serialize_settings(self):\n         self.assertSerializedEqual(SettingsReference(settings.AUTH_USER_MODEL, \"AUTH_USER_MODEL\"))\n         self.assertSerializedResultEqual(\n@@ -457,12 +1332,82 @@ class WriterTests(SimpleTestCase):\n             (\"settings.AUTH_USER_MODEL\", {\"from django.conf import settings\"})\n         )\n \n+\n+class Outer:\n+    class Inner(models.CharField):\n+        pass\n+\n+class TestInnerClassField(SimpleTestCase):\n+    def test_inner_class_field_serialization(self):\n+        \"\"\"\n+        Test that inner class fields are serialized correctly.\n+        \"\"\"\n+        field = Outer.Inner(max_length=20)\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"test_writer.Outer.Inner(max_length=20)\", \n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n+    def test_nested_enum_field_serialization(self):\n+        class TestModel(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = TestModel._meta.get_field('state')\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"enumfields.fields.EnumField(enum=test_writer.TestModel.State, max_length=10)\",\n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n     def test_serialize_iterators(self):\n         self.assertSerializedResultEqual(\n             ((x, x * x) for x in range(3)),\n             (\"((0, 0), (1, 1), (2, 4))\", set())\n         )\n \n+\n+class Outer:\n+    class Inner(models.CharField):\n+        pass\n+\n+class TestInnerClassField(SimpleTestCase):\n+    def test_inner_class_field_serialization(self):\n+        \"\"\"\n+        Test that inner class fields are serialized correctly.\n+        \"\"\"\n+        field = Outer.Inner(max_length=20)\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"test_writer.Outer.Inner(max_length=20)\", \n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n+    def test_nested_enum_field_serialization(self):\n+        class TestModel(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = TestModel._meta.get_field('state')\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"enumfields.fields.EnumField(enum=test_writer.TestModel.State, max_length=10)\",\n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n     def test_serialize_compiled_regex(self):\n         \"\"\"\n         Make sure compiled regex can be serialized.\n@@ -558,6 +1503,41 @@ class WriterTests(SimpleTestCase):\n             FoodQuerySet.as_manager(),\n             ('migrations.models.FoodQuerySet.as_manager()', {'import migrations.models'})\n         )\n+\n+\n+class Outer:\n+    class Inner(models.CharField):\n+        pass\n+\n+class TestInnerClassField(SimpleTestCase):\n+    def test_inner_class_field_serialization(self):\n+        \"\"\"\n+        Test that inner class fields are serialized correctly.\n+        \"\"\"\n+        field = Outer.Inner(max_length=20)\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"test_writer.Outer.Inner(max_length=20)\", \n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n+    def test_nested_enum_field_serialization(self):\n+        class TestModel(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = TestModel._meta.get_field('state')\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"enumfields.fields.EnumField(enum=test_writer.TestModel.State, max_length=10)\",\n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n         self.assertSerializedEqual(FoodManager('a', 'b'))\n         self.assertSerializedEqual(FoodManager('x', 'y', c=3, d=4))\n \n@@ -661,6 +1641,41 @@ class WriterTests(SimpleTestCase):\n             result['custom_migration_operations'].more_operations.TestOperation\n         )\n \n+\n+class Outer:\n+    class Inner(models.CharField):\n+        pass\n+\n+class TestInnerClassField(SimpleTestCase):\n+    def test_inner_class_field_serialization(self):\n+        \"\"\"\n+        Test that inner class fields are serialized correctly.\n+        \"\"\"\n+        field = Outer.Inner(max_length=20)\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"test_writer.Outer.Inner(max_length=20)\", \n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n+    def test_nested_enum_field_serialization(self):\n+        class TestModel(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = TestModel._meta.get_field('state')\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"enumfields.fields.EnumField(enum=test_writer.TestModel.State, max_length=10)\",\n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n     def test_sorted_imports(self):\n         \"\"\"\n         #24155 - Tests ordering of imports.\n@@ -681,6 +1696,41 @@ class WriterTests(SimpleTestCase):\n             output\n         )\n \n+\n+class Outer:\n+    class Inner(models.CharField):\n+        pass\n+\n+class TestInnerClassField(SimpleTestCase):\n+    def test_inner_class_field_serialization(self):\n+        \"\"\"\n+        Test that inner class fields are serialized correctly.\n+        \"\"\"\n+        field = Outer.Inner(max_length=20)\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"test_writer.Outer.Inner(max_length=20)\", \n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n+    def test_nested_enum_field_serialization(self):\n+        class TestModel(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        field = TestModel._meta.get_field('state')\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        expected_serialization = (\n+            \"enumfields.fields.EnumField(enum=test_writer.TestModel.State, max_length=10)\",\n+            {\"import test_writer\"}\n+        )\n+        self.assertEqual((serialized_field, imports), expected_serialization)\n+\n     def test_migration_file_header_comments(self):\n         \"\"\"\n         Test comments at top of file.\n@@ -746,4 +1796,4 @@ class WriterTests(SimpleTestCase):\n \n     def test_register_non_serializer(self):\n         with self.assertRaisesMessage(ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "django__django-12143": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 2d13234..9bcc6ce 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -833,6 +833,30 @@ class ChangeListTests(TestCase):\n         }\n         superuser = self._create_superuser('superuser')\n         self.client.force_login(superuser)\n+        \n+    def test_get_list_editable_queryset_with_various_regex_special_chars_in_prefix(self):\n+        \"\"\"Test using various regex special characters in formset prefix\"\"\"\n+        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n+        Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n+        special_prefixes = ['form$', 'form^', 'form*', 'form+', 'form?', 'form[', 'form]', 'form{', 'form}', 'form|', 'form(', 'form)', 'form\\\\']\n+        \n+        for special_prefix in special_prefixes:\n+            data = {\n+                f'{special_prefix}-TOTAL_FORMS': '2',\n+                f'{special_prefix}-INITIAL_FORMS': '2',\n+                f'{special_prefix}-MIN_NUM_FORMS': '0',\n+                f'{special_prefix}-MAX_NUM_FORMS': '1000',\n+                f'{special_prefix}-0-uuid': str(a.pk),\n+                f'{special_prefix}-0-load': '10',\n+                '_save': 'Save',\n+            }\n+            superuser = self._create_superuser('superuser')\n+            self.client.force_login(superuser)\n+            changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+            m = SwallowAdmin(Swallow, custom_site)\n+            request = self.factory.post(changelist_url, data=data)\n+            queryset = m._get_list_editable_queryset(request, prefix=special_prefix)\n+            self.assertEqual(queryset.count(), 1)\n         changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n         m = SwallowAdmin(Swallow, custom_site)\n         request = self.factory.post(changelist_url, data=data)\n",
  "django__django-12155": "",
  "django__django-12193": "diff --git a/tests/postgres_tests/test_array.py b/tests/postgres_tests/test_array.py\nindex 6228cbc..20d5f6c 100644\n--- a/tests/postgres_tests/test_array.py\n+++ b/tests/postgres_tests/test_array.py\n@@ -1102,8 +1102,35 @@ class TestSplitFormWidget(PostgreSQLWidgetTestCase):\n                 }\n             }\n         )\n+    def test_split_array_widget_with_boolean_field(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=4)\n+        context = widget.get_context('array', [True, False, True, False])\n+        subwidgets = context['widget']['subwidgets']\n+        self.assertEqual(\n+            [subwidget['attrs'].get('checked', False) for subwidget in subwidgets],\n+            [True, False, True, False],\n+            \"Widgets should only be checked based on their respective values.\"\n+        )\n \n-    def test_render(self):\n+    def test_split_array_widget_with_all_false(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('array', [False, False, False])\n+        subwidgets = context['widget']['subwidgets']\n+        self.assertEqual(\n+            [subwidget['attrs'].get('checked', False) for subwidget in subwidgets],\n+            [False, False, False],\n+            \"No widgets should be checked if all values are False.\"\n+        )\n+\n+    def test_split_array_widget_with_all_true(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('array', [True, True, True])\n+        subwidgets = context['widget']['subwidgets']\n+        self.assertEqual(\n+            [subwidget['attrs'].get('checked', False) for subwidget in subwidgets],\n+            [True, True, True],\n+            \"All widgets should be checked if all values are True.\"\n+        )\n         self.check_html(\n             SplitArrayWidget(forms.TextInput(), size=2), 'array', None,\n             \"\"\"\n",
  "django__django-12209": "diff --git a/tests/serializers/models/data.py b/tests/serializers/models/data.py\nindex 946715d..f4d3f29 100644\n--- a/tests/serializers/models/data.py\n+++ b/tests/serializers/models/data.py\n@@ -257,6 +257,9 @@ class UUIDData(models.Model):\n     data = models.UUIDField(primary_key=True)\n \n \n+class UUIDDefaultData(models.Model):\n+    data = models.UUIDField(primary_key=True, default=uuid.uuid4)\n+\n class FKToUUID(models.Model):\n     data = models.ForeignKey(UUIDData, models.CASCADE)\n \n",
  "django__django-12262": "diff --git a/tests/template_tests/test_custom.py b/tests/template_tests/test_custom.py\nindex 8a8c535..6c9ee52 100644\n--- a/tests/template_tests/test_custom.py\n+++ b/tests/template_tests/test_custom.py\n@@ -50,6 +50,9 @@ class SimpleTagTests(TagTestCase):\n         c = Context({'value': 42})\n \n         templates = [\n+            ('{% load custom %}{% hello greeting=\"hi\" %}', 'hi world'),\n+            ('{% load custom %}{% hello %}', 'hello world'),\n+            ('{% load custom %}{% hi greeting=\"hello\" %}', 'hello world'),\n             ('{% load custom %}{% no_params %}', 'no_params - Expected result'),\n             ('{% load custom %}{% one_param 37 %}', 'one_param - Expected result: 37'),\n             ('{% load custom %}{% explicit_no_context 37 %}', 'explicit_no_context - Expected result: 37'),\n@@ -79,6 +82,22 @@ class SimpleTagTests(TagTestCase):\n                 'simple_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4'),\n         ]\n \n+        # Testing keyword-only arguments with defaults in simple_tag and inclusion_tag\n+        keyword_only_templates = [\n+            ('{% load custom %}{% simple_keyword_only_default kwarg=37 %}',\n+                'simple_keyword_only_default - Expected result: 37'),\n+            ('{% load custom %}{% simple_keyword_only_default %}',\n+                'simple_keyword_only_default - Expected result: 42'),\n+            ('{% load inclusion %}{% inclusion_keyword_only_default kwarg=37 %}',\n+                'inclusion_keyword_only_default - Expected result: 37\\n'),\n+            ('{% load inclusion %}{% inclusion_keyword_only_default %}',\n+                'inclusion_keyword_only_default - Expected result: 42\\n'),\n+        ]\n+\n+        for entry in keyword_only_templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n         for entry in templates:\n             t = self.engine.from_string(entry[0])\n             self.assertEqual(t.render(c), entry[1])\n@@ -89,6 +108,10 @@ class SimpleTagTests(TagTestCase):\n \n     def test_simple_tag_errors(self):\n         errors = [\n+            (\"'hello' received unexpected keyword argument 'greeting'\",\n+                '{% load custom %}{% hello greeting=\"hi\" greeting=\"hello\" %}'),\n+            (\"'hi' received multiple values for keyword argument 'greeting'\",\n+                '{% load custom %}{% hi greeting=\"hi\" greeting=\"hello\" %}'),\n             (\"'simple_one_default' received unexpected keyword argument 'three'\",\n                 '{% load custom %}{% simple_one_default 99 two=\"hello\" three=\"foo\" %}'),\n             (\"'simple_two_params' received too many positional arguments\",\n@@ -103,6 +126,22 @@ class SimpleTagTests(TagTestCase):\n                 '{% load custom %}{% simple_unlimited_args_kwargs 37 eggs=\"scrambled\" eggs=\"scrambled\" %}'),\n         ]\n \n+        # Testing keyword-only arguments with defaults in simple_tag and inclusion_tag\n+        keyword_only_templates = [\n+            ('{% load custom %}{% simple_keyword_only_default kwarg=37 %}',\n+                'simple_keyword_only_default - Expected result: 37'),\n+            ('{% load custom %}{% simple_keyword_only_default %}',\n+                'simple_keyword_only_default - Expected result: 42'),\n+            ('{% load inclusion %}{% inclusion_keyword_only_default kwarg=37 %}',\n+                'inclusion_keyword_only_default - Expected result: 37\\n'),\n+            ('{% load inclusion %}{% inclusion_keyword_only_default %}',\n+                'inclusion_keyword_only_default - Expected result: 42\\n'),\n+        ]\n+\n+        for entry in keyword_only_templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n         for entry in errors:\n             with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n                 self.engine.from_string(entry[1])\n@@ -192,12 +231,32 @@ class InclusionTagTests(TagTestCase):\n                 'inclusion_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4\\n'),\n         ]\n \n+        # Testing keyword-only arguments with defaults in simple_tag and inclusion_tag\n+        keyword_only_templates = [\n+            ('{% load custom %}{% simple_keyword_only_default kwarg=37 %}',\n+                'simple_keyword_only_default - Expected result: 37'),\n+            ('{% load custom %}{% simple_keyword_only_default %}',\n+                'simple_keyword_only_default - Expected result: 42'),\n+            ('{% load inclusion %}{% inclusion_keyword_only_default kwarg=37 %}',\n+                'inclusion_keyword_only_default - Expected result: 37\\n'),\n+            ('{% load inclusion %}{% inclusion_keyword_only_default %}',\n+                'inclusion_keyword_only_default - Expected result: 42\\n'),\n+        ]\n+\n+        for entry in keyword_only_templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n         for entry in templates:\n             t = self.engine.from_string(entry[0])\n             self.assertEqual(t.render(c), entry[1])\n \n     def test_inclusion_tag_errors(self):\n         errors = [\n+            (\"'hello' received unexpected keyword argument 'greeting'\",\n+                '{% load custom %}{% hello greeting=\"hi\" greeting=\"hello\" %}'),\n+            (\"'hi' received multiple values for keyword argument 'greeting'\",\n+                '{% load custom %}{% hi greeting=\"hi\" greeting=\"hello\" %}'),\n             (\"'inclusion_one_default' received unexpected keyword argument 'three'\",\n                 '{% load inclusion %}{% inclusion_one_default 99 two=\"hello\" three=\"foo\" %}'),\n             (\"'inclusion_two_params' received too many positional arguments\",\n",
  "django__django-12276": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 61f7a13..e69eed3 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import copy\n import datetime\n import json\n@@ -2412,6 +2413,28 @@ Password: <input type=\"password\" name=\"password\" required>\n <option value=\"false\">No</option>\n </select>\"\"\")\n         p = Person({'name': 'Joe', 'is_cool': 'false'}, auto_id=False)\n+\n+    def test_filefield_with_fileinput_required(self):\n+        class FileForm(Form):\n+            file1 = FileField(widget=FileInput)\n+\n+        f = FileForm(auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n+        )\n+        # A required file field with initial data doesn't contain the required HTML attribute.\n+        f = FileForm(initial={'file1': 'resume.txt'}, auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n+        )\n+\n+    def test_use_required_attribute(self):\n+        widget = FileInput()\n+        # False when initial data exists. The file input is left blank by the user to keep the existing, initial value.\n+        self.assertIs(widget.use_required_attribute(None), True)\n+        self.assertIs(widget.use_required_attribute('resume.txt'), False)\n         self.assertHTMLEqual(str(p['is_cool']), \"\"\"<select name=\"is_cool\">\n <option value=\"unknown\">Unknown</option>\n <option value=\"true\">Yes</option>\n",
  "django__django-12304": "diff --git a/tests/template_tests/test_callables.py b/tests/template_tests/test_callables.py\nindex d71266b..066b511 100644\n--- a/tests/template_tests/test_callables.py\n+++ b/tests/template_tests/test_callables.py\n@@ -1,6 +1,8 @@\n+\n from unittest import TestCase\n \n-from django.template import Context, Engine\n+from django.template import Context, Engine, Template\n+from tests.model_enums.tests import Suit\n \n \n class CallableVariablesTests(TestCase):\n@@ -39,7 +41,12 @@ class CallableVariablesTests(TestCase):\n         self.assertEqual(t.render(c), '42')\n         self.assertEqual(my_doodad.num_calls, 2)\n \n-    def test_alters_data(self):\n+    def test_enum_in_template(self):\n+        # Test that enumeration types can be used in templates and are not called\n+        template = Template('{{ Suit.DIAMOND.label }}|{{ Suit.DIAMOND.value }}')\n+        context = Context({'Suit': Suit})\n+        output = template.render(context)\n+        self.assertEqual(output, 'Diamond|1')\n \n         class Doodad:\n             alters_data = True\n@@ -122,4 +129,4 @@ class CallableVariablesTests(TestCase):\n \n         # Double-check that the object was really never called during the\n         # template rendering.\n-        self.assertEqual(my_doodad.num_calls, 0)\n+        self.assertEqual(my_doodad.num_calls, 0)\n",
  "django__django-12308": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex acbcf33..f3effca 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -139,7 +139,22 @@ class UtilsTests(SimpleTestCase):\n \n             self.assertEqual(value, resolved_value)\n \n-    def test_null_display_for_field(self):\n+    def test_json_display_for_field(self):\n+        \"\"\"\n+        Test display_for_field with JSONField to ensure JSON is properly formatted as string.\n+        \"\"\"\n+        tests = [\n+            ({'a': {'b': 'c'}}, '{\"a\": {\"b\": \"c\"}}'),\n+            (['a', 'b'], '[\"a\", \"b\"]'),\n+            ('a', '\"a\"'),\n+            ({('a', 'b'): 'c'}, \"{('a', 'b'): 'c'}\"),  # Invalid JSON but should handle gracefully\n+        ]\n+        for value, display_value in tests:\n+            with self.subTest(value=value):\n+                self.assertEqual(\n+                    display_for_field(value, models.JSONField(), self.empty_value),\n+                    display_value,\n+                )\n         \"\"\"\n         Regression test for #12550: display_for_field should handle None\n         value.\n",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..0d8eb5d 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1015,7 +1015,42 @@ class OtherModelTests(SimpleTestCase):\n             class ParkingLot(Place):\n                 parent = models.OneToOneField(Place, models.CASCADE)\n \n-    def test_m2m_table_name_clash(self):\n+    def test_onetoone_with_order_dependency(self):\n+        \"\"\"\n+        Test to verify the handling of OneToOneField with parent_link\n+        when the field order is changed. The `document_ptr` should have\n+        parent_link=True, and the order should not affect model configuration.\n+        \"\"\"\n+        class Document(models.Model):\n+            pass\n+\n+        # Example where order matters\n+        class PickingOrderSensitive1(Document):\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+\n+        # Assert no configuration errors\n+        self.assertEqual(PickingOrderSensitive1.check(), [])\n+\n+        # Order changed, should still work\n+        class PickingOrderSensitive2(Document):\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+\n+        self.assertEqual(PickingOrderSensitive2.check(), [])\n+\n+    def test_onetoone_without_parent_link(self):\n+        \"\"\"\n+        Test to ensure ImproperlyConfigured is raised if OneToOneField\n+        lacks parent_link when needed in multi-table inheritance.\n+        \"\"\"\n+        msg = 'Add parent_link=True to invalid_models_tests.TestChild.parent.'\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            class TestParent(models.Model):\n+                pass\n+\n+            class TestChild(TestParent):\n+                parent = models.OneToOneField(TestParent, models.CASCADE)\n         class Foo(models.Model):\n             bar = models.ManyToManyField('Bar', db_table='myapp_bar')\n \n",
  "django__django-12419": "diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py\nindex 7af62eb..2fb6c22 100644\n--- a/tests/middleware/test_security.py\n+++ b/tests/middleware/test_security.py\n@@ -231,7 +231,12 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         \"\"\"\n         self.assertNotIn('Referrer-Policy', self.process_response())\n \n-    def test_referrer_policy_on(self):\n+    @override_settings(SECURE_REFERRER_POLICY=None)\n+    def test_referrer_policy_default_same_origin(self):\n+        \"\"\"\n+        With no SECURE_REFERRER_POLICY set, the Referrer-Policy header defaults to \"same-origin\".\n+        \"\"\"\n+        self.assertEqual(self.process_response()['Referrer-Policy'], 'same-origin')\n         \"\"\"\n         With SECURE_REFERRER_POLICY set to a valid value, the middleware adds a\n         \"Referrer-Policy\" header to the response.\n@@ -254,4 +259,4 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         present in the response.\n         \"\"\"\n         response = self.process_response(headers={'Referrer-Policy': 'unsafe-url'})\n-        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n",
  "django__django-12663": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 872551b..f67b717 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -13,6 +13,32 @@ from django.db.models import (\n     Func, IntegerField, Max, Min, Model, OrderBy, OuterRef, Q, StdDev,\n     Subquery, Sum, TimeField, UUIDField, Value, Variance, When,\n )\n+class LazyObjectSubqueryTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.manager = Manager.objects.create(name=\"Manager\")\n+        cls.employee = Employee.objects.create(\n+            firstname=\"Max\",\n+            lastname=\"Mustermann\",\n+            salary=50000,\n+            manager=cls.manager,\n+        )\n+        cls.company = Company.objects.create(\n+            name=\"Tech Corp.\",\n+            ceo=cls.employee\n+        )\n+\n+    def test_subquery_with_lazy_object(self):\n+        lazy_manager = SimpleLazyObject(lambda: Manager.objects.get(pk=self.manager.pk))\n+        qs = Company.objects.annotate(\n+            ceo_manager=Subquery(\n+                Employee.objects.filter(\n+                    lastname=OuterRef(\"ceo__lastname\")\n+                ).values(\"manager\"),\n+            ),\n+        ).filter(ceo_manager=lazy_manager)\n+        self.assertEqual(qs.get(), self.company)\n+\n from django.db.models.expressions import Col, Combinable, Random, RawSQL, Ref\n from django.db.models.functions import (\n     Coalesce, Concat, Left, Length, Lower, Substr, Upper,\n@@ -22,8 +48,9 @@ from django.db.models.sql.datastructures import Join\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import Approximate, isolate_apps\n \n+from django.utils.functional import SimpleLazyObject\n from .models import (\n-    UUID, UUIDPK, Company, Employee, Experiment, Number, RemoteEmployee,\n+    Manager, UUID, UUIDPK, Company, Employee, Experiment, Number, RemoteEmployee,\n     Result, SimulationRun, Time,\n )\n \n",
  "django__django-12708": "",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..f4e6ac3 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -14,7 +14,7 @@ from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.auth.models import User\n from django.core.files.storage import default_storage\n from django.core.files.uploadedfile import SimpleUploadedFile\n-from django.db.models import CharField, DateField, DateTimeField, UUIDField\n+from django.db.models import CharField, DateField, DateTimeField, UUIDField, ManyToManyField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..53b5182 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,7 +172,11 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        # Old Call (for reference):\n+        # connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        \n+        # New Call without using parameter\n+        connection.ops.execute_sql_flush(sql_list)\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n@@ -181,4 +185,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..ba95a40 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -5,7 +5,9 @@ from operator import attrgetter\n \n from django.core.exceptions import FieldError\n from django.db import connection\n+from django.db import connection, models\n from django.db.models import Exists, Max, OuterRef\n+from django.test.utils import isolate_apps\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n from django.utils.deprecation import RemovedInDjango40Warning\n@@ -194,7 +196,44 @@ class LookupTests(TestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             Article.objects.in_bulk([self.au1], field_name='author')\n \n-    def test_values(self):\n+    @isolate_apps('lookup')\n+    def test_in_bulk_unique_constraint(self):\n+        class ArticleWithUniqueConstraint(models.Model):\n+            slug = models.CharField(max_length=255)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(fields=['slug'], name='article_slug_unique'),\n+                ]\n+\n+        article1 = ArticleWithUniqueConstraint.objects.create(slug='unique-slug-1')\n+        article2 = ArticleWithUniqueConstraint.objects.create(slug='unique-slug-2')\n+\n+        # Test in_bulk with unique constraint\n+        self.assertEqual(\n+            ArticleWithUniqueConstraint.objects.in_bulk(\n+                [article1.slug, article2.slug],\n+                field_name='slug',\n+            ),\n+            {article1.slug: article1, article2.slug: article2},\n+        )\n+\n+    @isolate_apps('lookup')\n+    def test_in_bulk_non_unique_field_constraint(self):\n+        class ArticleWithNonUniqueField(models.Model):\n+            title = models.CharField(max_length=255)\n+            slug = models.CharField(max_length=255)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(fields=['slug'], name='article_slug_unique'),\n+                ]\n+\n+        article = ArticleWithNonUniqueField.objects.create(title='Title 1', slug='non-unique-slug')\n+\n+        msg = \"in_bulk()'s field_name must be a unique field but 'title' isn't.\"\n+        with self.assertRaisesMessage(ValueError, msg):\n+            ArticleWithNonUniqueField.objects.in_bulk([article.title], field_name='title')\n         # values() returns a list of dictionaries instead of object instances --\n         # and you can specify which fields you want to retrieve.\n         self.assertSequenceEqual(\n",
  "django__django-12858": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 3b6974f..eec755d 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -893,7 +893,26 @@ class OtherModelTests(SimpleTestCase):\n         with register_lookup(models.CharField, Lower):\n             self.assertEqual(Model.check(), [])\n \n-    def test_ordering_pointing_to_related_model_pk(self):\n+    def test_ordering_with_isnull_lookup_on_fk(self):\n+        class Parent(models.Model):\n+            name = models.CharField(max_length=100, null=True)\n+\n+        class Child(models.Model):\n+            parent = models.ForeignKey(Parent, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('parent__name__isnull',)\n+\n+        self.assertEqual(Child.check(), [])\n+\n+    def test_ordering_with_isnull_lookup_on_self_fk(self):\n+        class Node(models.Model):\n+            parent = models.ForeignKey('self', on_delete=models.SET_NULL, null=True)\n+\n+            class Meta:\n+                ordering = ('parent__isnull',)\n+\n+        self.assertEqual(Node.check(), [])\n         class Parent(models.Model):\n             pass\n \n",
  "django__django-13012": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 87c0945..6cf18e5 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1821,10 +1821,29 @@ class CombinableTests(SimpleTestCase):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             Combinable() | Combinable()\n \n-    def test_reversed_and(self):\n+    class ExpressionWrapperTests(SimpleTestCase):\n+        def test_empty_group_by(self):\n+            expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+            self.assertEqual(expr.get_group_by_cols(alias=None), [])\n+\n+        def test_non_empty_group_by(self):\n+            expr = ExpressionWrapper(Lower(Value('f')), output_field=IntegerField())\n+            self.assertEqual(expr.get_group_by_cols(alias=None), [expr.expression])\n+\n+        def test_group_by_with_constant_expression(self):\n+            expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+            queryset = Model.objects.annotate(expr_res=expr).values('expr_res', 'column_a').annotate(sum=Sum('column_b'))\n+            sql, params = queryset.query.sql_with_params()\n+            self.assertNotIn('GROUP BY \"model\".\"column_a\", 3', sql)\n+\n+        def test_group_by_with_non_constant_expression(self):\n+            expr = ExpressionWrapper(Lower(Value('f')), output_field=IntegerField())\n+            queryset = Model.objects.annotate(expr_res=expr).values('expr_res', 'column_a').annotate(sum=Sum('column_b'))\n+            sql, params = queryset.query.sql_with_params()\n+            self.assertIn('GROUP BY \"model\".\"column_a\",', sql)\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             object() & Combinable()\n \n     def test_reversed_or(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n-            object() | Combinable()\n+            object() | Combinable()\n",
  "django__django-13028": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 70329a0..34719e4 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -1198,6 +1198,28 @@ class Queries1Tests(TestCase):\n             'mixed_case_field_category__CaTeGoRy',\n             'mixed_case_db_column_category__category',\n         )\n+\n+    def test_filterable_field_issue(self):\n+        # Create filterable=False scenario\n+        metadata_type = ProductMetaDataType.objects.create(label='Brand', filterable=False)\n+        product_metadata = ProductMetaData.objects.create(\n+            value=\"Dark Vador\",\n+            product=self.some_product,  # Assuming existence of self.some_product\n+            marketplace=self.some_marketplace,  # Assuming existence of self.some_marketplace\n+            metadata_type=metadata_type\n+        )\n+        \n+        # This should raise NotSupportedError according to the issue\n+        with self.assertRaises(NotSupportedError):\n+            list(ProductMetaData.objects.filter(value=\"Dark Vador\", metadata_type=metadata_type))\n+\n+        # Change the field name to avoid the error\n+        metadata_type.label = 'BrandTest'\n+        metadata_type.save()\n+\n+        # The query should now work without any errors\n+        qs = ProductMetaData.objects.filter(value=\"Dark Vador\", metadata_type=metadata_type)\n+        self.assertEqual(list(qs), [product_metadata])\n         self.assertTrue(qs.first())\n \n     def test_excluded_intermediary_m2m_table_joined(self):\n@@ -1205,11 +1227,55 @@ class Queries1Tests(TestCase):\n             Note.objects.filter(~Q(tag__annotation__name=F('note'))),\n             [self.n1, self.n2, self.n3],\n         )\n+\n+    def test_filterable_field_issue(self):\n+        # Create filterable=False scenario\n+        metadata_type = ProductMetaDataType.objects.create(label='Brand', filterable=False)\n+        product_metadata = ProductMetaData.objects.create(\n+            value=\"Dark Vador\",\n+            product=self.some_product,  # Assuming existence of self.some_product\n+            marketplace=self.some_marketplace,  # Assuming existence of self.some_marketplace\n+            metadata_type=metadata_type\n+        )\n+        \n+        # This should raise NotSupportedError according to the issue\n+        with self.assertRaises(NotSupportedError):\n+            list(ProductMetaData.objects.filter(value=\"Dark Vador\", metadata_type=metadata_type))\n+\n+        # Change the field name to avoid the error\n+        metadata_type.label = 'BrandTest'\n+        metadata_type.save()\n+\n+        # The query should now work without any errors\n+        qs = ProductMetaData.objects.filter(value=\"Dark Vador\", metadata_type=metadata_type)\n+        self.assertEqual(list(qs), [product_metadata])\n         self.assertSequenceEqual(\n             Note.objects.filter(tag__annotation__name='a1').filter(~Q(tag__annotation__name=F('note'))),\n             [],\n         )\n \n+    def test_filterable_field_issue(self):\n+        # Create filterable=False scenario\n+        metadata_type = ProductMetaDataType.objects.create(label='Brand', filterable=False)\n+        product_metadata = ProductMetaData.objects.create(\n+            value=\"Dark Vador\",\n+            product=self.some_product,  # Assuming existence of self.some_product\n+            marketplace=self.some_marketplace,  # Assuming existence of self.some_marketplace\n+            metadata_type=metadata_type\n+        )\n+        \n+        # This should raise NotSupportedError according to the issue\n+        with self.assertRaises(NotSupportedError):\n+            list(ProductMetaData.objects.filter(value=\"Dark Vador\", metadata_type=metadata_type))\n+\n+        # Change the field name to avoid the error\n+        metadata_type.label = 'BrandTest'\n+        metadata_type.save()\n+\n+        # The query should now work without any errors\n+        qs = ProductMetaData.objects.filter(value=\"Dark Vador\", metadata_type=metadata_type)\n+        self.assertEqual(list(qs), [product_metadata])\n+\n \n class Queries2Tests(TestCase):\n     @classmethod\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..54a7313 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,6 +343,25 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_self_referential_fk_ordering(self):\n+        # Setup authors with self-referential foreign keys\n+        author1 = Author.objects.create(name=\"Author 1\")\n+        author2 = Author.objects.create(name=\"Author 2\", editor=author1)\n+        article1 = Article.objects.create(author=author1, headline=\"Article 1\", pub_date=\"2023-01-01\")\n+        article2 = Article.objects.create(author=author2, headline=\"Article 2\", pub_date=\"2023-01-02\")\n+\n+        # Test queryset ordering by the self-referential foreign key\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline'),\n+        )\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline'),\n+        )\n+\n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n@@ -353,6 +372,25 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n+\n+    def test_self_referential_fk_ordering(self):\n+        # Setup authors with self-referential foreign keys\n+        author1 = Author.objects.create(name=\"Author 1\")\n+        author2 = Author.objects.create(name=\"Author 2\", editor=author1)\n+        article1 = Article.objects.create(author=author1, headline=\"Article 1\", pub_date=\"2023-01-01\")\n+        article2 = Article.objects.create(author=author2, headline=\"Article 2\", pub_date=\"2023-01-02\")\n+\n+        # Test queryset ordering by the self-referential foreign key\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline'),\n+        )\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline'),\n+        )\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline').asc()), [\n                 \"Article 1\",\n",
  "django__django-13089": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex e11856f..b222a14 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -615,6 +615,41 @@ class BaseCacheTests:\n                 count += 1\n         self.assertEqual(count, final_count)\n \n+    def test_cull_handles_empty_result(self):\n+        \"\"\"\n+        Test that _cull method handles the case when cursor.fetchone() returns None.\n+        This simulates a situation where the query does not return any data,\n+        and ensures that no 'NoneType' object is not subscriptable error is raised.\n+        \"\"\"\n+        try:\n+            cull_cache = caches['cull']\n+        except InvalidCacheBackendError:\n+            self.skipTest(\"Culling isn't implemented.\")\n+\n+        # Adjust settings to trigger culling with an empty result set\n+        with connection.cursor() as cursor:\n+            cull_cache.clear()\n+            # Ensure the cache table is empty\n+            cursor.execute(\"SELECT COUNT(*) FROM %s\" % connection.ops.quote_name(cull_cache._table))\n+            self.assertEqual(cursor.fetchone()[0], 0)\n+\n+            # Force a cull operation\n+            cull_cache._max_entries = 1\n+            cull_cache._cull_frequency = 1\n+\n+            # Insert a single cache entry\n+            cull_cache.set('key', 'value', timeout=1000)\n+\n+            # Simulate a cursor returning no result for the culling query\n+            cursor.execute(\"SELECT cache_key FROM %s\" % connection.ops.quote_name(cull_cache._table) + \" WHERE cache_key = 'non_existent'\")\n+            self.assertIsNone(cursor.fetchone())\n+\n+            # No error should occur when cull is called\n+            cull_cache._cull('default', cursor, cull_cache.cache_model_class._now())\n+\n+            # Check that the cache entry is still present\n+            self.assertTrue(cull_cache.has_key('key'))\n+\n     def test_cull(self):\n         self._perform_cull_test('cull', 50, 29)\n \n",
  "django__django-13109": "diff --git a/tests/model_forms/models.py b/tests/model_forms/models.py\nindex ff8ad74..0f84aeb 100644\n--- a/tests/model_forms/models.py\n+++ b/tests/model_forms/models.py\n@@ -28,8 +28,22 @@ class Category(models.Model):\n         return self.__str__()\n \n \n+class WriterManager(models.Manager):\n+    def get_queryset(self):\n+        return super().get_queryset().filter(archived=False)\n+\n class Writer(models.Model):\n     name = models.CharField(max_length=50, help_text='Use both first and last names.')\n+    archived = models.BooleanField(default=False, editable=False)\n+\n+    objects = WriterManager()\n+\n+    class Meta:\n+        ordering = ('name',)\n+\n+    def __str__(self):\n+        return self.name\n+    name = models.CharField(max_length=50, help_text='Use both first and last names.')\n \n     class Meta:\n         ordering = ('name',)\n",
  "django__django-13112": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 081eff8..5a3905c 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -864,6 +864,44 @@ class StateTests(SimpleTestCase):\n             \"The field migrations.Magazine_authors.author was declared with a lazy reference \"\n             \"to 'migrations.author', but app 'migrations' doesn't provide model 'author'.\"\n         )\n+\n+    def test_mixed_case_foreign_key_reference(self):\n+        \"\"\"\n+        Test that a ForeignKey reference with a mixed-case app name does not\n+        cause issues.\n+        \"\"\"\n+        new_apps = Apps()\n+\n+        class Category(models.Model):\n+            class Meta:\n+                app_label = 'MiXeDCasEApp'\n+                apps = new_apps\n+\n+        class Content(models.Model):\n+            category = models.ForeignKey(Category, models.CASCADE)\n+\n+            class Meta:\n+                app_label = 'MiXeDCasEApp'\n+                apps = new_apps\n+\n+        project_state = ProjectState()\n+        project_state.add_model(ModelState.from_model(Category))\n+        project_state.add_model(ModelState.from_model(Content))\n+\n+        # Check that both models are available in the project state\n+        self.assertEqual(len(project_state.apps.get_models()), 2)\n+\n+    def test_mixed_case_app_in_installed_apps(self):\n+        \"\"\"\n+        Test that an app with a mixed-case name in INSTALLED_APPS is recognized.\n+        \"\"\"\n+        apps = Apps({\n+            'MiXeDCasEApp': AppConfig(\n+                app_name='MiXeDCasEApp',\n+                app_module=None,\n+            ),\n+        })\n+        self.assertIn('MiXeDCasEApp', apps.app_configs)\n         with self.assertRaisesMessage(ValueError, msg):\n             project_state.apps\n \n",
  "django__django-13121": "",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..ab67bdf 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1627,7 +1627,15 @@ class FTimeDeltaTests(TestCase):\n         for e in qs:\n             self.assertEqual(e.delta, delta)\n \n-    def test_duration_with_datetime(self):\n+    @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_timedelta_annotation_without_expression_wrapper(self):\n+        # Test subtraction of DateTimeFields without using ExpressionWrapper\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for experiment in queryset:\n+            expected_delta = experiment.end - experiment.start\n+            self.assertEqual(experiment.delta, expected_delta)\n         # Exclude e1 which has very high precision so we can test this on all\n         # backends regardless of whether or not it supports\n         # microsecond_precision.\n",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..bace8de 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,5 +1,7 @@\n import operator\n \n+from django.db.models import Q\n+\n from django.db import DatabaseError, NotSupportedError, connection\n from django.db.models import Exists, F, IntegerField, OuterRef, Value\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n@@ -39,7 +41,12 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.intersection(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n-    @skipUnlessDBFeature('supports_select_difference')\n+    def test_union_none(self):\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        qs3 = qs1.union(qs2)\n+        self.assertSequenceEqual(qs3.none(), [])\n+        self.assertNumbersEqual(qs3, [0, 1, 8, 9], ordered=False)\n     def test_simple_difference(self):\n         qs1 = Number.objects.filter(num__lte=5)\n         qs2 = Number.objects.filter(num__lte=4)\n",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..7b420d8 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -34,6 +34,7 @@ from django.test import (\n     RequestFactory, TestCase, ignore_warnings, override_settings,\n )\n from django.utils import timezone\n+from django.utils.deprecation import RemovedInDjango40Warning\n \n from .models import SessionStore as CustomDatabaseSession\n \n@@ -312,6 +313,31 @@ class SessionTestsMixin:\n         self.assertEqual(self.session.decode(encoded), data)\n \n     @override_settings(SECRET_KEY='django_tests_secret_key')\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_default_hashing_algorithm_legacy_decode(self):\n+        \"\"\"\n+        Test that session data can be correctly decoded using the legacy\n+        decode method when DEFAULT_HASHING_ALGORITHM is set to 'sha1'.\n+        \"\"\"\n+        with self.settings(DEFAULT_HASHING_ALGORITHM='sha1'):\n+            data = {'a test key': 'a test value'}\n+            encoded = self.session.encode(data)\n+            self.assertEqual(self.session._legacy_decode(encoded), data)\n+\n+    def test_legacy_decode_with_incorrect_hash(self):\n+        \"\"\"\n+        Test that legacy decode fails with incorrect hash.\n+        \"\"\"\n+        legacy_encoded = (\n+            'OWUzNTNmNWQxNTBjOWExZmM4MmQ3NzNhMDRmMjU4NmYwNDUyNGI2NDp7ImEgdGVz'\n+            'dCBrZXkiOiJhIHRlc3QgdmFsdWUifQ=='\n+        )\n+        # Modify the encoded data to simulate a hash mismatch\n+        corrupted_encoded = legacy_encoded[:-3] + 'abc'\n+        with self.assertLogs('django.security.SuspiciousSession', 'WARNING') as cm:\n+            self.assertEqual({}, self.session._legacy_decode(corrupted_encoded))\n+        self.assertIn('Session data corrupted', cm.output[0])\n+\n     def test_decode_legacy(self):\n         # RemovedInDjango40Warning: pre-Django 3.1 sessions will be invalid.\n         legacy_encoded = (\n",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..beede8c 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -8,7 +8,10 @@ from django.test import (\n from django.test.utils import require_jinja2\n from django.urls import resolve\n from django.utils.deprecation import RemovedInDjango40Warning\n+from django.db.models import Model\n from django.views.generic import RedirectView, TemplateView, View\n+from django.shortcuts import get_object_or_404\n+from .models import Account  # Assuming Account is the appropriate model to use\n \n from . import views\n \n@@ -590,7 +593,25 @@ class DeprecationTests(SimpleTestCase):\n         self.assertEqual(response.context['key'], 'value')\n         self.assertIsInstance(response.context['view'], View)\n \n-    def test_template_params_warning(self):\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_template_params_filtering(self):\n+        class OfferView(TemplateView):\n+            template_name = 'offers/offer.html'\n+\n+            def get_context_data(self, **kwargs):\n+                offer_slug = kwargs.get('offer_slug', '')\n+                # Confirm the type before conversion\n+                self.assertIsInstance(offer_slug, SimpleLazyObject)\n+                offer = get_object_or_404(Account, slug=str(offer_slug))\n+                return {'offer': offer, 'offer_slug': offer_slug}\n+\n+        # Create an Account instance for testing\n+        account = Account.objects.create(slug='test-slug')\n+\n+        # Simulate a request to the view\n+        response = OfferView.as_view()(self.client.get('/offers/test-slug/'), offer_slug='test-slug')\n+        self.assertEqual(response.context_data['offer'], account)\n+        self.assertEqual(response.context_data['offer_slug'], 'test-slug')\n         response = self.client.get('/template/custom/bar1/bar2/')\n         self.assertEqual(response.status_code, 200)\n         msg = (\n",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..f00f7c5 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -17,6 +17,7 @@ from django.forms.models import (\n from django.template import Context, Template\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n \n+from django.test.utils import isolate_apps\n from .models import (\n     Article, ArticleStatus, Author, Author1, Award, BetterWriter, BigInt, Book,\n     Category, Character, Colour, ColourfulItem, CustomErrorMessage, CustomFF,\n@@ -2830,6 +2831,77 @@ class LimitChoicesToTests(TestCase):\n             self.assertEqual(today_callable_dict.call_count, 3)\n \n \n+class LimitChoicesToTests(TestCase):\n+    def setUp(self):\n+        self.marley = Character.objects.create(username='Marley', last_action=timezone.now())\n+        self.threepwood = Character.objects.create(username='Threepwood', last_action=timezone.now())\n+\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        joke1 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.threepwood,\n+        )\n+        joke2 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.threepwood,\n+        )\n+        joke3 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.marley,\n+        )\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=self.marley)\n+        joke1.has_fooled_today.add(self.marley, self.threepwood)\n+        joke2.has_fooled_today.add(self.marley)\n+        joke3.has_fooled_today.add(self.marley, self.threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+\n class FormFieldCallbackTests(SimpleTestCase):\n \n     def test_baseform_with_widgets_in_meta(self):\n",
  "django__django-13343": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex a5ab3a0..b5e788e 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -29,7 +29,7 @@ from django.test.utils import requires_tz_support\n from django.urls import NoReverseMatch, reverse_lazy\n from django.utils import timezone\n \n-from .models import Storage, temp_storage, temp_storage_location\n+from .models import Storage, callable_storage, temp_storage, temp_storage_location\n \n FILE_SUFFIX_REGEX = '[A-Za-z0-9]{7}'\n \n",
  "django__django-13346": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex b918d5c..779a54e 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -623,6 +623,28 @@ class TestQuerying(TestCase):\n                     expected,\n                 )\n \n+    def test_key_in(self):\n+        tests = [\n+            ('value__c__in', [14], self.objs[3:5]),\n+            ('value__c__in', [14, 15], self.objs[3:5]),\n+            ('value__0__in', [1], [self.objs[5]]),\n+            ('value__0__in', [1, 3], [self.objs[5]]),\n+            ('value__foo__in', ['bar'], [self.objs[7]]),\n+            ('value__foo__in', ['bar', 'baz'], [self.objs[7]]),\n+            ('value__bar__in', [['foo', 'bar']], [self.objs[7]]),\n+            ('value__bar__in', [['foo', 'bar'], ['a']], [self.objs[7]]),\n+            ('value__bax__in', [{'foo': 'bar'}, {'a': 'b'}], [self.objs[7]]),\n+            # Additional test cases specific to the issue\n+            ('value__key__in', [0], []),  # Assuming no match for key=0\n+            ('value__key', 0, self.objs[:312]),  # Match for key=0\n+        ]\n+        for lookup, value, expected in tests:\n+            with self.subTest(lookup=lookup, value=value):\n+                self.assertSequenceEqual(\n+                    NullableJSONModel.objects.filter(**{lookup: value}),\n+                    expected,\n+                )\n+\n     def test_key_iexact(self):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__iexact='BaR').exists(), True)\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__iexact='\"BaR\"').exists(), False)\n",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..b763e7a 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -1111,7 +1111,39 @@ class DateFunctionWithTimeZoneTests(DateFunctionTests):\n             self.assertEqual(model.day_melb, 16)\n             self.assertEqual(model.day_utc, 15)\n \n-    def test_trunc_timezone_applied_before_truncation(self):\n+    def test_truncdate_with_tzinfo(self):\n+        melb = pytz.timezone('Australia/Melbourne')\n+        ny = pytz.timezone('America/New_York')\n+\n+        start_datetime = datetime(2023, 3, 26, 5, 30)\n+        start_datetime = timezone.make_aware(start_datetime, timezone.utc)\n+\n+        self.create_model(start_datetime, start_datetime)\n+\n+        model = DTModel.objects.annotate(\n+            melb_date=TruncDate('start_datetime', tzinfo=melb),\n+            ny_date=TruncDate('start_datetime', tzinfo=ny),\n+        ).get()\n+\n+        self.assertEqual(model.melb_date, start_datetime.astimezone(melb).date())\n+        self.assertEqual(model.ny_date, start_datetime.astimezone(ny).date())\n+\n+    def test_trunctime_with_tzinfo(self):\n+        melb = pytz.timezone('Australia/Melbourne')\n+        ny = pytz.timezone('America/New_York')\n+\n+        start_datetime = datetime(2023, 3, 26, 5, 30)\n+        start_datetime = timezone.make_aware(start_datetime, timezone.utc)\n+\n+        self.create_model(start_datetime, start_datetime)\n+\n+        model = DTModel.objects.annotate(\n+            melb_time=TruncTime('start_datetime', tzinfo=melb),\n+            ny_time=TruncTime('start_datetime', tzinfo=ny),\n+        ).get()\n+\n+        self.assertEqual(model.melb_time, start_datetime.astimezone(melb).time())\n+        self.assertEqual(model.ny_time, start_datetime.astimezone(ny).time())\n         start_datetime = datetime(2016, 1, 1, 1, 30, 50, 321)\n         end_datetime = datetime(2016, 6, 15, 14, 10, 50, 123)\n         start_datetime = timezone.make_aware(start_datetime, is_dst=False)\n",
  "django__django-13401": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e39d03e..6ce8cb8 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -114,6 +114,43 @@ class ChoicesTests(SimpleTestCase):\n         cls.empty_choices_text = Choiceful._meta.get_field('empty_choices_text')\n         cls.with_choices = Choiceful._meta.get_field('with_choices')\n \n+    def test_abstract_inherited_fields(self):\n+        \"\"\"Field instances from abstract models are not equal.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        # Test that fields from different models are not equal\n+        self.assertNotEqual(abstract_model_field, inherit1_model_field)\n+        self.assertNotEqual(abstract_model_field, inherit2_model_field)\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+\n+        # Test ordering of fields\n+        self.assertLess(abstract_model_field, inherit1_model_field)\n+        self.assertLess(abstract_model_field, inherit2_model_field)\n+        self.assertLess(inherit1_model_field, inherit2_model_field)\n+\n+        # Test hash inequality\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit1_model_field))\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit2_model_field))\n+        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n+\n+        # Ensure fields can be placed in a set without duplication\n+        field_set = {inherit1_model_field, inherit2_model_field}\n+        self.assertEqual(len(field_set), 2)\n+\n     def test_choices(self):\n         self.assertIsNone(self.no_choices.choices)\n         self.assertEqual(self.empty_choices.choices, ())\n",
  "django__django-13410": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 1285e22..75bdf39 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -1,3 +1,7 @@\n+\n+from django.core.files import locks\n+from pathlib import Path\n+\n import errno\n import gzip\n import os\n@@ -178,7 +182,38 @@ class NoNameFileTestCase(unittest.TestCase):\n     def test_noname_file_default_name(self):\n         self.assertIsNone(File(BytesIO(b'A file with no name')).name)\n \n-    def test_noname_file_get_size(self):\n+class FileLockTestCase(unittest.TestCase):\n+\n+    def test_exclusive_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'wb') as f:  # ensure the file exists\n+            f.write(b'test content')\n+\n+        with open(file_path) as f1, open(file_path) as f2:\n+            self.assertIs(locks.lock(f1, locks.LOCK_EX), True)\n+            self.assertIs(locks.lock(f2, locks.LOCK_EX | locks.LOCK_NB), False)\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), False)\n+            self.assertIs(locks.unlock(f1), True)\n+\n+    def test_shared_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'wb') as f:  # ensure the file exists\n+            f.write(b'test content')\n+\n+        with open(file_path) as f1, open(file_path) as f2:\n+            self.assertIs(locks.lock(f1, locks.LOCK_SH), True)\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), True)\n+            self.assertIs(locks.unlock(f1), True)\n+            self.assertIs(locks.unlock(f2), True)\n+\n+    def test_unlock_without_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'wb') as f:\n+            f.write(b'test content')\n+\n+        with open(file_path) as f:\n+            # Attempt to unlock without locking should return True\n+            self.assertIs(locks.unlock(f), True)\n         self.assertEqual(File(BytesIO(b'A file with no name')).size, 19)\n \n \n",
  "django__django-13417": "",
  "django__django-13516": "",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..b778aa3 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,8 +1,10 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n+from .models.with_custom_email_field import CustomEmailField\n from django.test import TestCase\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n@@ -19,7 +21,26 @@ class MockedPasswordResetTokenGenerator(PasswordResetTokenGenerator):\n \n class TokenGeneratorTest(TestCase):\n \n-    def test_make_token(self):\n+    def test_token_with_different_email(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                self.assertIs(p0.check_token(user, tk1), False)\n         user = User.objects.create_user('tokentestuser', 'test2@example.com', 'testpw')\n         p0 = PasswordResetTokenGenerator()\n         tk1 = p0.make_token(user)\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..917dfd1 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,3 +1,4 @@\n+\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n@@ -8,8 +9,7 @@ from django.test import (\n     SimpleTestCase, override_settings, override_system_checks,\n )\n from django.test.utils import isolate_apps\n-\n-from .models import CustomUserNonUniqueUsername\n+from django.db.models import Q, UniqueConstraint\n \n \n @isolate_apps('auth_tests', attr_name='apps')\n@@ -138,7 +138,53 @@ class ModelsPermissionsChecksTests(SimpleTestCase):\n             ),\n         ])\n \n-    def test_non_clashing_custom_permissions(self):\n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserTotalUniqueConstraint')\n+    def test_username_with_total_unique_constraint(self):\n+        \"\"\"\n+        Test that the presence of a total UniqueConstraint on the USERNAME_FIELD\n+        avoids triggering auth.E003 error.\n+        \"\"\"\n+        class CustomUserTotalUniqueConstraint(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(\n+                        fields=['username'],\n+                        name='user_username_unq'\n+                    ),\n+                ]\n+\n+        errors = checks.run_checks(self.apps.get_app_configs())\n+        self.assertEqual(errors, [])\n+        \n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserPartialUniqueConstraint')\n+    def test_username_with_partial_unique_constraint(self):\n+        \"\"\"\n+        Test that a partial UniqueConstraint on USERNAME_FIELD triggers a warning.\n+        \"\"\"\n+        class CustomUserPartialUniqueConstraint(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(\n+                        fields=['username'],\n+                        name='partial_username_unique',\n+                        condition=Q(password__isnull=False),\n+                    ),\n+                ]\n+\n+        errors = checks.run_checks(self.apps.get_app_configs())\n+        expected_warning = checks.Warning(\n+            \"'CustomUserPartialUniqueConstraint.username' is named as the 'USERNAME_FIELD', but it is not unique.\",\n+            hint='Ensure that your authentication backend(s) can handle non-unique usernames.',\n+            obj=CustomUserPartialUniqueConstraint,\n+            id='auth.W004',\n+        )\n+        self.assertEqual(errors, [expected_warning])\n         class Checked(models.Model):\n             class Meta:\n                 permissions = [\n",
  "django__django-13569": "",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..5c5c520 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,9 +1,11 @@\n+\n import datetime\n import pickle\n import unittest\n import uuid\n from copy import deepcopy\n from decimal import Decimal\n+from collections import namedtuple\n from unittest import mock\n \n from django.core.exceptions import FieldError\n@@ -815,7 +817,33 @@ class IterableLookupInnerExpressionsTests(TestCase):\n         Company.objects.create(name='5060 Ltd', num_employees=50, num_chairs=60, ceo=ceo)\n         Company.objects.create(name='99300 Ltd', num_employees=99, num_chairs=300, ceo=ceo)\n \n-    def test_in_lookup_allows_F_expressions_and_expressions_for_integers(self):\n+    def test_range_lookup_namedtuple(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n+    def test_range_lookup_namedtuple_edge_cases(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+\n+        # Test with minimum equal to a company's number of employees\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=99, maximum=100),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n+        # Test with maximum below a company's number of employees\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=50, maximum=98),\n+        )\n+        self.assertSequenceEqual(qs, [])\n+\n+        # Test with both minimum and maximum equal to a company's number of employees\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=99, maximum=99),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n         # __in lookups can use F() expressions for integers.\n         queryset = Company.objects.filter(num_employees__in=([F('num_chairs') - 10]))\n         self.assertQuerysetEqual(queryset, ['<Company: 5060 Ltd>'], ordered=False)\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..d1f7fcb 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -19,18 +19,22 @@ from django.conf import settings\n from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n )\n+from django.test.utils import captured_stderr, captured_stdout\n from django.core.management.commands.loaddata import Command as LoaddataCommand\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n )\n+from django.test.utils import captured_stderr, captured_stdout\n from django.core.management.commands.testserver import (\n     Command as TestserverCommand,\n )\n+from django.test.utils import captured_stderr, captured_stdout\n from django.db import ConnectionHandler, connection\n from django.db.migrations.recorder import MigrationRecorder\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n+from django.test.utils import captured_stderr, captured_stdout\n \n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n \n@@ -1867,6 +1871,31 @@ class ArgumentOrder(AdminScriptTestCase):\n         )\n \n \n+class ExecuteFromCommandLineTest(SimpleTestCase):\n+    def test_program_name_from_argv_with_none(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_custom_prog_name_use(self):\n+        \"\"\"\n+        Test if a custom program name passed through execute_from_command_line\n+        is used instead of sys.argv[0].\n+        \"\"\"\n+        custom_prog_name = 'custom-admin'\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            execute_from_command_line([custom_prog_name] + args)\n+        self.assertIn('usage: custom-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n @override_settings(ROOT_URLCONF='admin_scripts.urls')\n class StartProject(LiveServerTestCase, AdminScriptTestCase):\n \n",
  "django__django-13670": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 6f0b13f..0a21ce6 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -1,3 +1,4 @@\n+\n from datetime import date, datetime\n \n from django.test import SimpleTestCase, override_settings\n@@ -112,7 +113,33 @@ class DateFormatTests(SimpleTestCase):\n \n         self.assertEqual(dateformat.format(my_birthday, r'jS \\o\\f F'), '8th of July')\n \n-    def test_futuredates(self):\n+    def test_year_before_1000(self):\n+        tests = [\n+            (476, '76'),\n+            (42, '42'),\n+            (4, '04'),\n+            (999, '99'),\n+            (123, '23'),\n+            (5, '05'),\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n+\n+    def test_year_around_1000(self):\n+        tests = [\n+            (1000, '00'),\n+            (1001, '01'),\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n         the_future = datetime(2100, 10, 25, 0, 00)\n         self.assertEqual(dateformat.format(the_future, r'Y'), '2100')\n \n@@ -164,4 +191,4 @@ class DateFormatTests(SimpleTestCase):\n             self.assertEqual(\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+            )\n",
  "django__django-13741": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex ca66cd5..5d6aff3 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1020,6 +1020,10 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n+    def test_readonly_password_hash_field_is_disabled(self):\n+        field = ReadOnlyPasswordHashField()\n+        self.assertIs(field.disabled, True)\n+\n     def test_readonly_field_has_changed(self):\n         field = ReadOnlyPasswordHashField()\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n",
  "django__django-13786": "",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..2fa0ba9 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,8 +1,10 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n from django.test import SimpleTestCase\n \n+from django.utils.translation import gettext_lazy, lazy\n from ..utils import setup\n \n \n@@ -46,8 +48,39 @@ class AddTests(SimpleTestCase):\n         output = self.engine.render_to_string('add07', {'d': date(2000, 1, 1), 't': timedelta(10)})\n         self.assertEqual(output, 'Jan. 11, 2000')\n \n+    @setup({'add08': '{{ s1|add:lazy_s2 }}'})\n+    def test_add08(self):\n+        output = self.engine.render_to_string(\n+            'add08',\n+            {'s1': 'string', 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    @setup({'add09': '{{ lazy_s1|add:lazy_s2 }}'})\n+    def test_add09(self):\n+        output = self.engine.render_to_string(\n+            'add09',\n+            {'lazy_s1': gettext_lazy('string'), 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    def test_lazy_add(self):\n+        lazy_4 = lazy(lambda: 4, int)\n+        lazy_5 = lazy(lambda: 5, int)\n+        self.assertEqual(lazy_4() + lazy_5(), 9)\n \n-class FunctionTests(SimpleTestCase):\n+    @setup({'add10': '{{ s1|add:s2 }}'})\n+    def test_add10(self):\n+        s1 = gettext_lazy(\"Hello, \")\n+        s2 = \"world!\"\n+        output = self.engine.render_to_string('add10', {'s1': s1, 's2': s2})\n+        self.assertEqual(output, 'Hello, world!')\n+\n+    @setup({'add11': '{{ lazy_empty|add:lazy_empty }}'})\n+    def test_add11(self):\n+        lazy_empty = gettext_lazy(\"\")\n+        output = self.engine.render_to_string('add11', {'lazy_empty': lazy_empty})\n+        self.assertEqual(output, '')\n \n     def test_add(self):\n         self.assertEqual(add('1', '2'), 3)\n",
  "django__django-13807": "diff --git a/tests/backends/models.py b/tests/backends/models.py\nindex a2fd310..664bb62 100644\n--- a/tests/backends/models.py\n+++ b/tests/backends/models.py\n@@ -133,10 +133,17 @@ class CircularB(models.Model):\n class RawData(models.Model):\n     raw_data = models.BinaryField()\n \n+class SQLKeywordsModel(models.Model):\n+    id = models.AutoField(primary_key=True, db_column='select')\n+    reporter = models.ForeignKey('Reporter', models.CASCADE, db_column='where')\n+\n+    class Meta:\n+        db_table = 'order'\n+\n \n class Author(models.Model):\n     name = models.CharField(max_length=255, unique=True)\n \n \n class Book(models.Model):\n-    author = models.ForeignKey(Author, models.CASCADE, to_field='name')\n+    author = models.ForeignKey(Author, models.CASCADE, to_field='name')\n",
  "django__django-13809": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex d88ea78..b2036f4 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1314,6 +1314,11 @@ class ManageRunserver(SimpleTestCase):\n         self.assertIn('unapplied migration(s)', self.output.getvalue())\n \n \n+from django.core.management import call_command\n+from django.core.management.commands.runserver import Command as RunserverCommand\n+from unittest import mock\n+from io import StringIO\n+\n class ManageRunserverMigrationWarning(TestCase):\n \n     def setUp(self):\n@@ -1343,6 +1348,39 @@ class ManageRunserverMigrationWarning(TestCase):\n         )\n \n \n+class ManageRunserverSkipChecks(TestCase):\n+    def setUp(self):\n+        self.output = StringIO()\n+        self.runserver_command = RunserverCommand(stdout=self.output)\n+\n+    @mock.patch('django.core.management.commands.runserver.run')\n+    @mock.patch('django.core.management.base.BaseCommand.check_migrations')\n+    @mock.patch('django.core.management.base.BaseCommand.check')\n+    def test_skip_checks(self, mocked_check, *mocked_objects):\n+        # Test with skip_checks=True\n+        call_command(\n+            'runserver',\n+            use_reloader=False,\n+            skip_checks=True,\n+            stdout=self.output,\n+        )\n+        self.assertNotIn('Performing system checks...', self.output.getvalue())\n+        mocked_check.assert_not_called()\n+\n+        # Reset the output for next test\n+        self.output.truncate(0)\n+        self.output.seek(0)\n+\n+        # Test with skip_checks=False\n+        call_command(\n+            'runserver',\n+            use_reloader=False,\n+            skip_checks=False,\n+            stdout=self.output,\n+        )\n+        self.assertIn('Performing system checks...', self.output.getvalue())\n+        mocked_check.assert_called()\n+\n class ManageRunserverEmptyAllowedHosts(AdminScriptTestCase):\n     def setUp(self):\n         super().setUp()\n",
  "django__django-13810": "diff --git a/tests/middleware_exceptions/tests.py b/tests/middleware_exceptions/tests.py\nindex bb82f7d..7fdef3a 100644\n--- a/tests/middleware_exceptions/tests.py\n+++ b/tests/middleware_exceptions/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.conf import settings\n from django.core.exceptions import MiddlewareNotUsed\n from django.http import HttpResponse\n@@ -163,6 +164,37 @@ class MiddlewareNotUsedTests(SimpleTestCase):\n             \"MiddlewareNotUsed: 'middleware_exceptions.tests.MyMiddleware'\"\n         )\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    async def test_async_and_sync_middleware_chain_async_call(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.tests.MyMiddleware adapted.\",\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.tests.MyMiddleware'\",\n+        )\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncOnlyMiddleware',\n+        'middleware_exceptions.middleware.AsyncOnlyMiddleware',\n+    ])\n+    async def test_middleware_not_used_in_async_context(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.SyncOnlyMiddleware'\",\n+        )\n+\n     @override_settings(MIDDLEWARE=['middleware_exceptions.tests.MyMiddlewareWithExceptionMessage'])\n     def test_log_custom_message(self):\n         with self.assertLogs('django.request', 'DEBUG') as cm:\n@@ -172,6 +204,37 @@ class MiddlewareNotUsedTests(SimpleTestCase):\n             \"MiddlewareNotUsed('middleware_exceptions.tests.MyMiddlewareWithExceptionMessage'): spam eggs\"\n         )\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    async def test_async_and_sync_middleware_chain_async_call(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.tests.MyMiddleware adapted.\",\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.tests.MyMiddleware'\",\n+        )\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncOnlyMiddleware',\n+        'middleware_exceptions.middleware.AsyncOnlyMiddleware',\n+    ])\n+    async def test_middleware_not_used_in_async_context(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.SyncOnlyMiddleware'\",\n+        )\n+\n     @override_settings(\n         DEBUG=False,\n         MIDDLEWARE=['middleware_exceptions.tests.MyMiddleware'],\n@@ -215,6 +278,37 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n             \"adapted.\",\n         )\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    async def test_async_and_sync_middleware_chain_async_call(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.tests.MyMiddleware adapted.\",\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.tests.MyMiddleware'\",\n+        )\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncOnlyMiddleware',\n+        'middleware_exceptions.middleware.AsyncOnlyMiddleware',\n+    ])\n+    async def test_middleware_not_used_in_async_context(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.SyncOnlyMiddleware'\",\n+        )\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.NotSyncOrAsyncMiddleware',\n     ])\n@@ -224,6 +318,37 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n             'middleware_exceptions.middleware.NotSyncOrAsyncMiddleware must '\n             'have at least one of sync_capable/async_capable set to True.'\n         )\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    async def test_async_and_sync_middleware_chain_async_call(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.tests.MyMiddleware adapted.\",\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.tests.MyMiddleware'\",\n+        )\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncOnlyMiddleware',\n+        'middleware_exceptions.middleware.AsyncOnlyMiddleware',\n+    ])\n+    async def test_middleware_not_used_in_async_context(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.SyncOnlyMiddleware'\",\n+        )\n         with self.assertRaisesMessage(RuntimeError, msg):\n             self.client.get('/middleware_exceptions/view/')\n \n@@ -240,6 +365,37 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n             \"middleware_exceptions.middleware.PaymentMiddleware adapted.\",\n         )\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    async def test_async_and_sync_middleware_chain_async_call(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.tests.MyMiddleware adapted.\",\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.tests.MyMiddleware'\",\n+        )\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncOnlyMiddleware',\n+        'middleware_exceptions.middleware.AsyncOnlyMiddleware',\n+    ])\n+    async def test_middleware_not_used_in_async_context(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.SyncOnlyMiddleware'\",\n+        )\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.async_payment_middleware',\n     ])\n@@ -252,6 +408,37 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n             'Payment Required: /middleware_exceptions/view/',\n         )\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    async def test_async_and_sync_middleware_chain_async_call(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.tests.MyMiddleware adapted.\",\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.tests.MyMiddleware'\",\n+        )\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncOnlyMiddleware',\n+        'middleware_exceptions.middleware.AsyncOnlyMiddleware',\n+    ])\n+    async def test_middleware_not_used_in_async_context(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.SyncOnlyMiddleware'\",\n+        )\n+\n     @override_settings(\n         DEBUG=False,\n         MIDDLEWARE=[\n@@ -263,6 +450,37 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n             \"AsyncNoTemplateResponseMiddleware.process_template_response \"\n             \"didn't return an HttpResponse object.\"\n         )\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    async def test_async_and_sync_middleware_chain_async_call(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.tests.MyMiddleware adapted.\",\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.tests.MyMiddleware'\",\n+        )\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncOnlyMiddleware',\n+        'middleware_exceptions.middleware.AsyncOnlyMiddleware',\n+    ])\n+    async def test_middleware_not_used_in_async_context(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.SyncOnlyMiddleware'\",\n+        )\n         with self.assertRaisesMessage(ValueError, msg):\n             self.client.get('/middleware_exceptions/template_response/')\n \n",
  "django__django-13820": "",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..cf62387 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -9,6 +9,10 @@ from unittest import mock\n \n from django.core.exceptions import ImproperlyConfigured\n from django.db import NotSupportedError, connection, transaction\n+import unittest\n+from unittest import mock\n+from django.core.exceptions import ImproperlyConfigured\n+from django.db.backends.sqlite3.base import DatabaseWrapper as dbapi2\n from django.db.models import Aggregate, Avg, CharField, StdDev, Sum, Variance\n from django.db.utils import ConnectionHandler\n from django.test import (\n@@ -36,7 +40,24 @@ class Tests(TestCase):\n                 self.assertRaisesMessage(ImproperlyConfigured, msg):\n             check_sqlite_version()\n \n-    def test_aggregation(self):\n+    def test_check_sqlite_version_newer(self):\n+        msg = 'SQLite 3.9.0 or later is required (found 3.8.11.1).'\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 8, 11, 1)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.8.11.1'), \\\n+                self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            check_sqlite_version()\n+\n+    def test_check_sqlite_version_supported(self):\n+        \"\"\"Test no exception is raised for supported SQLite version.\"\"\"\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 9, 0)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.9.0'):\n+            # No exception should be raised\n+            check_sqlite_version()\n+\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 10, 0)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.10.0'):\n+            # Still no exception should be raised\n+            check_sqlite_version()\n         \"\"\"Raise NotSupportedError when aggregating on date/time fields.\"\"\"\n         for aggregate in (Sum, Avg, Variance, StdDev):\n             with self.assertRaises(NotSupportedError):\n",
  "django__django-13837": "",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..ce25392 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -281,8 +281,28 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n             '</ul></li></ul>'\n         )\n \n+from django.forms import ModelChoiceField, ModelMultipleChoiceField\n+from .models import ChoiceModel\n \n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n+    def test_modelchoicefield_value_placeholder(self):\n+        # Create choices for the model choice field tests below.\n+        ChoiceModel.objects.create(pk=1, name='a')\n+        ChoiceModel.objects.create(pk=2, name='b')\n+        ChoiceModel.objects.create(pk=3, name='c')\n+\n+        # Test invalid choice with value placeholder in error message\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            'invalid',\n+        )\n     def test_modelchoicefield(self):\n         # Create choices for the model choice field tests below.\n         ChoiceModel.objects.create(pk=1, name='a')\n@@ -307,4 +327,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py\nindex 1078928..957e609 100644\n--- a/tests/many_to_one/models.py\n+++ b/tests/many_to_one/models.py\n@@ -63,6 +63,12 @@ class Third(models.Model):\n     third = models.ForeignKey('self', models.SET_NULL, null=True, related_name='child_set')\n \n \n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n+\n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n+\n class Parent(models.Model):\n     name = models.CharField(max_length=20, unique=True)\n     bestchild = models.ForeignKey('Child', models.SET_NULL, null=True, related_name='favored_by')\n",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..48cc766 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,5 +1,8 @@\n+\n from django.db import IntegrityError, transaction\n-from django.test import TestCase, skipIfDBFeature\n+from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from .fields import MyWrapper\n+from .models import CustomAutoFieldModel\n \n from .models import Bar, Business, Employee, Foo\n \n@@ -220,6 +223,24 @@ class CustomPKTests(TestCase):\n         self.assertEqual(f, new_foo),\n         self.assertEqual(f.bar, new_bar)\n \n+    def test_auto_field_subclass_create(self):\n+        \"\"\"\n+        Verify that the custom auto field correctly uses the from_db_value\n+        method after creation.\n+        \"\"\"\n+        obj = CustomAutoFieldModel.objects.create()\n+        self.assertIsInstance(obj.id, MyWrapper)\n+\n+    @skipUnlessDBFeature('can_return_rows_from_bulk_insert')\n+    def test_auto_field_subclass_bulk_create(self):\n+        \"\"\"\n+        Verify that the custom auto field correctly uses the from_db_value\n+        method after bulk creation.\n+        \"\"\"\n+        obj = CustomAutoFieldModel()\n+        CustomAutoFieldModel.objects.bulk_create([obj])\n+        self.assertIsInstance(obj.id, MyWrapper)\n+\n     # SQLite lets objects be saved with an empty primary key, even though an\n     # integer is expected. So we can't check for an error being raised in that\n     # case for SQLite. Remove it from the suite for this next bit.\n",
  "django__django-14017": "",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..c29755b 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -205,6 +205,58 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yields_in_post_process(self):\n+        # Prepare a mock set of files\n+        paths = {\n+            'admin/css/base.css': 'fake-hash-1',\n+            'admin/css/dashboard.css': 'fake-hash-2',\n+        }\n+\n+        # Get the storage backend\n+        storage_backend = self.get_storage()\n+\n+        # Perform post-process\n+        processed_files = list(storage_backend.post_process(paths))\n+\n+        # Extract the original file names\n+        original_files = [name for name, _, _ in processed_files]\n+\n+        # Ensure no file is yielded more than once\n+        self.assertCountEqual(original_files, set(original_files))\n+\n+    def test_correct_post_processing_count(self):\n+        # Prepare a mock set of files\n+        paths = {\n+            'admin/css/base.css': 'fake-hash-1',\n+            'admin/css/dashboard.css': 'fake-hash-2',\n+        }\n+        \n+        # Get the storage backend\n+        storage_backend = self.get_storage()\n+\n+        # Perform post-process\n+        processed_files = list(storage_backend.post_process(paths))\n+\n+        # Check the total number of files post-processed\n+        self.assertEqual(len(processed_files), len(paths))\n+\n+    def test_no_intermediate_files_yielded_for_unmodified_assets(self):\n+        # Prepare a mock set of files\n+        paths = {\n+            'admin/css/base.css': 'fake-hash-1',\n+            'admin/css/dashboard.css': 'fake-hash-2',\n+        }\n+        \n+        # Get the storage backend\n+        storage_backend = self.get_storage()\n+\n+        # Perform post-process and count unique yields\n+        processed_files = list(storage_backend.post_process(paths))\n+        unique_processed_files = {name for name, _, _ in processed_files}\n+\n+        # No intermediate files should be yielded for unmodified assets\n+        self.assertEqual(len(unique_processed_files), len(paths))\n+\n     def test_css_import_case_insensitive(self):\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n         self.assertEqual(relpath, \"cached/styles_insensitive.3fa427592a53.css\")\n@@ -214,6 +266,58 @@ class TestHashedFiles:\n             self.assertIn(b\"other.d41d8cd98f00.css\", content)\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yields_in_post_process(self):\n+        # Prepare a mock set of files\n+        paths = {\n+            'admin/css/base.css': 'fake-hash-1',\n+            'admin/css/dashboard.css': 'fake-hash-2',\n+        }\n+\n+        # Get the storage backend\n+        storage_backend = self.get_storage()\n+\n+        # Perform post-process\n+        processed_files = list(storage_backend.post_process(paths))\n+\n+        # Extract the original file names\n+        original_files = [name for name, _, _ in processed_files]\n+\n+        # Ensure no file is yielded more than once\n+        self.assertCountEqual(original_files, set(original_files))\n+\n+    def test_correct_post_processing_count(self):\n+        # Prepare a mock set of files\n+        paths = {\n+            'admin/css/base.css': 'fake-hash-1',\n+            'admin/css/dashboard.css': 'fake-hash-2',\n+        }\n+        \n+        # Get the storage backend\n+        storage_backend = self.get_storage()\n+\n+        # Perform post-process\n+        processed_files = list(storage_backend.post_process(paths))\n+\n+        # Check the total number of files post-processed\n+        self.assertEqual(len(processed_files), len(paths))\n+\n+    def test_no_intermediate_files_yielded_for_unmodified_assets(self):\n+        # Prepare a mock set of files\n+        paths = {\n+            'admin/css/base.css': 'fake-hash-1',\n+            'admin/css/dashboard.css': 'fake-hash-2',\n+        }\n+        \n+        # Get the storage backend\n+        storage_backend = self.get_storage()\n+\n+        # Perform post-process and count unique yields\n+        processed_files = list(storage_backend.post_process(paths))\n+        unique_processed_files = {name for name, _, _ in processed_files}\n+\n+        # No intermediate files should be yielded for unmodified assets\n+        self.assertEqual(len(unique_processed_files), len(paths))\n+\n     @override_settings(\n         STATICFILES_DIRS=[os.path.join(TEST_ROOT, 'project', 'faulty')],\n         STATICFILES_FINDERS=['django.contrib.staticfiles.finders.FileSystemFinder'],\n",
  "django__django-14089": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 7fb3d83..907a26a 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n@@ -18,6 +19,27 @@ class OrderedSetTests(SimpleTestCase):\n         s = OrderedSet([1, 2, 3])\n         self.assertEqual(list(s.dict.keys()), [1, 2, 3])\n \n+    def test_reversed(self):\n+        # Test reversing a non-empty OrderedSet\n+        s = reversed(OrderedSet([1, 2, 3]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [3, 2, 1])\n+\n+        # Test reversing an empty OrderedSet\n+        s_empty = reversed(OrderedSet([]))\n+        self.assertIsInstance(s_empty, collections.abc.Iterator)\n+        self.assertEqual(list(s_empty), [])\n+\n+        # Test reversing an OrderedSet with one element\n+        s_single = reversed(OrderedSet([42]))\n+        self.assertIsInstance(s_single, collections.abc.Iterator)\n+        self.assertEqual(list(s_single), [42])\n+\n+        # Test reversing an OrderedSet with duplicate elements added (should behave like a set and keep unique items)\n+        s_duplicates = reversed(OrderedSet([1, 2, 2, 3, 3, 3]))\n+        self.assertIsInstance(s_duplicates, collections.abc.Iterator)\n+        self.assertEqual(list(s_duplicates), [3, 2, 1])\n+\n     def test_remove(self):\n         s = OrderedSet()\n         self.assertEqual(len(s), 0)\n",
  "django__django-14122": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex b2ec8af..d9acf87 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -429,6 +430,39 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertEqual(list(qs), [{'rating': 4.0, 'count': 2}])\n \n+    def test_meta_ordering_does_not_affect_group_by(self):\n+        \"\"\"\n+        Meta.ordering fields should not be included in the GROUP BY clause,\n+        affecting the aggregation results.\n+        \"\"\"\n+        # Update authors for books\n+        Book.objects.filter(pk=self.b1.pk).update(contact=self.a1)\n+        Book.objects.filter(pk=self.b2.pk).update(contact=self.a1)\n+        Book.objects.filter(pk=self.b3.pk).update(contact=self.a2)\n+        Book.objects.filter(pk=self.b4.pk).update(contact=self.a2)\n+\n+        # Calculate the number of books per author\n+        author_books = Author.objects.values('id').annotate(num_books=Count('book'))\n+\n+        # Ensure the GROUP BY is not affected by Meta.ordering\n+        self.assertCountEqual(\n+            author_books,\n+            [\n+                {'id': self.a1.id, 'num_books': 2},\n+                {'id': self.a2.id, 'num_books': 2},\n+                # Other authors might appear with zero books if not related\n+            ]\n+        )\n+        \"\"\"\n+        An annotation not included in values() before an aggregate should be\n+        excluded from the group by clause.\n+        \"\"\"\n+        qs = (\n+            Book.objects.annotate(xprice=F('price')).filter(rating=4.0).values('rating')\n+                .annotate(count=Count('publisher_id', distinct=True)).values('count', 'rating').order_by('count')\n+        )\n+        self.assertEqual(list(qs), [{'rating': 4.0, 'count': 2}])\n+\n     def test_grouped_annotation_in_group_by(self):\n         \"\"\"\n         An annotation included in values() before an aggregate should be\n@@ -1339,4 +1373,4 @@ class AggregateTestCase(TestCase):\n             ('Wesley J. Chun', 1),\n             ('Stuart Russell', 1),\n             ('Peter Norvig', 2),\n-        ], lambda a: (a.name, a.contact_count), ordered=False)\n+        ], lambda a: (a.name, a.contact_count), ordered=False)\n",
  "django__django-14140": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex 7e095fe..afea0c6 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,4 +1,6 @@\n-from django.db.models import F, Q\n+\n+from django.db.models import Exists, OuterRef\n+from .models import Tag\n from django.test import SimpleTestCase\n \n \n@@ -42,7 +44,13 @@ class QTests(SimpleTestCase):\n         self.assertEqual(args, ())\n         self.assertEqual(kwargs, {'price__gt': F('discounted_price')})\n \n-    def test_deconstruct_negated(self):\n+    def test_deconstruct_single_non_subscriptable_child(self):\n+        tagged = Tag.objects.filter(category=OuterRef('pk'))\n+        q = Q(Exists(tagged))\n+        path, args, kwargs = q.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Q')\n+        self.assertEqual(args, (Exists(tagged),))\n+        self.assertEqual(kwargs, {})\n         q = ~Q(price__gt=F('discounted_price'))\n         path, args, kwargs = q.deconstruct()\n         self.assertEqual(args, ())\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..63f2fbd 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,7 +1,11 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n+from django.db import models\n+from django.test import SimpleTestCase, override_settings\n+from django.test.utils import isolate_apps\n \n \n @isolate_apps('model_options')\n@@ -65,8 +69,27 @@ class TestDefaultPK(SimpleTestCase):\n         with self.assertRaisesMessage(ImproperlyConfigured, msg):\n             class Model(models.Model):\n                 pass\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+        \n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+        \n+        class Model(models.Model):\n+            pass\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -81,8 +104,27 @@ class TestDefaultPK(SimpleTestCase):\n             pass\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+        \n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+        \n+        class Model(models.Model):\n+            pass\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14311": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex b7e6f92..6a76d1d 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -182,6 +182,15 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n         )\n \n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..5bc25b9 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -229,6 +229,14 @@ TEST_DATA = [\n     # Trailing newlines not accepted\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n+    # Newlines, carriage returns, and tabs are not accepted in URLs.\n+    (URLValidator(), 'http://www.djangoproject.com/\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://www.django\\rproject.com/', ValidationError),\n+    (URLValidator(), 'http://[::\\rffff:192.9.5.5]', ValidationError),\n+    (URLValidator(), 'http://\\twww.djangoproject.com/', ValidationError),\n+    (URLValidator(), 'http://\\t[::ffff:192.9.5.5]', ValidationError),\n+\n     # Trailing junk does not take forever to reject\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br ', ValidationError),\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br z', ValidationError),\n",
  "django__django-14351": "diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\nindex 79963c3..2a3fc81 100644\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -1525,8 +1525,30 @@ class AggregationTests(TestCase):\n             allow_distinct = True\n         DistinctAggregate('foo', distinct=True)\n \n+from django.test import TestCase\n+from django.db.models import Q, Count\n+from .models import Author, Book, PropertyGroup, ManagementAgent\n \n class JoinPromotionTests(TestCase):\n+\n+    def test_subquery_in_group_by_issue(self):\n+        # Setup: Create PropertyGroup and ManagementAgent objects\n+        management_agent = ManagementAgent.objects.create(name=\"Test Agent\")\n+        property_group1 = PropertyGroup.objects.create(name=\"Group 1\", management_agent=management_agent)\n+        property_group2 = PropertyGroup.objects.create(name=\"Group 2\", management_agent=management_agent)\n+\n+        # Annotate with counts and use Q objects in the filter\n+        property_groups = PropertyGroup.objects.filter(management_agent=management_agent)\n+        queryset = PropertyGroup.objects.annotate(Count('management_agent__propertygroup'))\n+        \n+        # This should not raise a ProgrammingError\n+        results = queryset.filter(\n+            Q(management_agent__propertygroup__in=property_groups) |\n+            Q(management_agent__propertygroup__count=0)\n+        ).distinct()\n+\n+        # Assert that the results are as expected (depends on the exact setup)\n+        self.assertEqual(results.count(), 2)\n     def test_ticket_21150(self):\n         b = Bravo.objects.create()\n         c = Charlie.objects.create(bravo=b)\n",
  "django__django-14373": "",
  "django__django-14376": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\nindex 643c2b6..29fc73a 100644\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -38,6 +38,65 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_deprecated_keys(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        for keys in [('database', 'password'), ('db', 'passwd')]:\n+            with self.subTest(keys=keys):\n+                database, password = keys\n+                self.assertEqual(\n+                    self.settings_to_cmd_args_env({\n+                        'NAME': 'settingdbname',\n+                        'USER': 'settinguser',\n+                        'PASSWORD': 'settingpassword',\n+                        'HOST': 'settinghost',\n+                        'PORT': settings_port,\n+                        'OPTIONS': {\n+                            database: 'optiondbname',\n+                            'user': 'optionuser',\n+                            password: 'optionpassword',\n+                            'host': 'optionhost',\n+                            'port': options_port,\n+                        },\n+                    }),\n+                    (expected_args, expected_env),\n+                )\n+\n+    def test_options_non_deprecated_keys_preferred(self):\n+        expected_args = [\n+            'mysql',\n+            '--user=someuser',\n+            '--host=somehost',\n+            '--port=444',\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': 444,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'db': 'deprecatedoptiondbname',\n+                    'password': 'optionpassword',\n+                    'passwd': 'deprecatedoptionpassword',\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n     def test_options_override_settings_proper_values(self):\n         settings_port = 444\n         options_port = 555\n",
  "django__django-14434": "",
  "django__django-14493": "diff --git a/tests/staticfiles_tests/storage.py b/tests/staticfiles_tests/storage.py\nindex dc966a1..81ece09 100644\n--- a/tests/staticfiles_tests/storage.py\n+++ b/tests/staticfiles_tests/storage.py\n@@ -93,7 +93,10 @@ class ExtraPatternsStorage(ManifestStaticFilesStorage):\n         ),\n     )\n \n+class NoPostProcessReplacedPathStorage(ManifestStaticFilesStorage):\n+    max_post_process_passes = 0\n+\n \n class NoneHashStorage(ManifestStaticFilesStorage):\n     def file_hash(self, name, content=None):\n-        return None\n+        return None\n",
  "django__django-14500": "",
  "django__django-14539": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 23a1e0a..c3c8018 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -255,6 +255,26 @@ class TestUtilsHtml(SimpleTestCase):\n                 'Search for <a href=\"http://google.com/?q=\">google.com/?q=</a>!'\n             ),\n             ('foo@example.com', '<a href=\"mailto:foo@example.com\">foo@example.com</a>'),\n+            (\n+                'Search for google.com/?q=1&lt! and see.',\n+                'Search for <a href=\"http://google.com/?q=1%3C\">google.com/?q=1&lt</a>! and see.'\n+            ),\n+            (\n+                'Check out https://example.com/path?arg=val&amp;other=arg!',\n+                'Check out <a href=\"https://example.com/path?arg=val&amp;other=arg\">https://example.com/path?arg=val&amp;other=arg</a>!'\n+            ),\n+            (\n+                'Visit us (https://www.example.com/)?',\n+                'Visit us (<a href=\"https://www.example.com/\">https://www.example.com/</a>)?'\n+            ),\n+            (\n+                'Go to www.example.com, it\\'s awesome!',\n+                'Go to <a href=\"http://www.example.com\">www.example.com</a>, it\\'s awesome!'\n+            ),\n+            (\n+                'Contact: mail@example.com?',\n+                'Contact: <a href=\"mailto:mail@example.com\">mail@example.com</a>?'\n+            ),\n         )\n         for value, output in tests:\n             with self.subTest(value=value):\n",
  "django__django-14559": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex b579834..5803949 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -135,7 +135,36 @@ class BulkUpdateTests(TestCase):\n         notes = list(Note.objects.all())\n         Note.objects.bulk_update(notes, ['note'])\n \n-    def test_only_concrete_fields_allowed(self):\n+\n+    def test_bulk_update_returns_number_of_rows_matched(self):\n+        # Create initial notes\n+        Note.objects.bulk_create([\n+            Note(note=f\"Note {i}\", misc=str(i))\n+            for i in range(2000)\n+        ])\n+        \n+        # Fetch all notes for updating\n+        notes = list(Note.objects.all())\n+        \n+        # Update all notes and verify the number of rows updated\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 2000)\n+\n+        # Test with an empty list, should return 0\n+        rows_updated = Note.objects.bulk_update([], ['note'])\n+        self.assertEqual(rows_updated, 0)\n+\n+    def test_bulk_update_with_duplicates(self):\n+        # Create a single note\n+        note = Note.objects.create(note='test-note', misc='test')\n+        \n+        # Update the same note twice, expect 1 unique row\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'])\n+        self.assertEqual(rows_updated, 1)\n+        \n+        # With batch_size, two operations but still 1 unique row\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'], batch_size=1)\n+        self.assertEqual(rows_updated, 1)\n         obj = Valid.objects.create(valid='test')\n         detail = Detail.objects.create(data='test')\n         paragraph = Paragraph.objects.create(text='test')\n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..630e979 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -316,7 +316,24 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertTrue(formset.is_valid())\n         self.assertEqual([form.cleaned_data for form in formset.forms], [{'votes': 100, 'choice': 'Calexico'}, {}, {}])\n \n-    def test_formset_validate_max_flag(self):\n+    def test_non_form_errors_css_class(self):\n+        \"\"\"\n+        Ensure that non-form errors have the `nonform` CSS class applied.\n+        \"\"\"\n+        data = {\n+            'choices-TOTAL_FORMS': '3',\n+            'choices-INITIAL_FORMS': '0',\n+            'choices-MIN_NUM_FORMS': '0',\n+            'choices-MAX_NUM_FORMS': '3',\n+            'choices-0-choice': 'Zero',\n+            'choices-1-choice': 'Zero',  # Duplicate choice to trigger a non-form error\n+            'choices-2-choice': 'Zero',\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=1)\n+        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        expected_error_html = '<ul class=\"errorlist nonform\"><li>You may only specify a choice once.</li></ul>'\n+        self.assertEqual(str(formset.non_form_errors()), expected_error_html)\n         \"\"\"\n         If validate_max is set and max_num is less than TOTAL_FORMS in the\n         data, a ValidationError is raised. MAX_NUM_FORMS in the data is\n",
  "django__django-14631": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex a48e4b6..602468e 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -2129,7 +2129,30 @@ Password: <input type=\"password\" name=\"password\" required></li>\n         form = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n         self.assertEqual(form.changed_data, [])\n \n-    def test_help_text(self):\n+    def test_clean_fields_bound_field_initial(self):\n+        \"\"\"Test that cleaning fields uses the initial value from BoundField.\"\"\"\n+        now = datetime.datetime(2006, 10, 25, 14, 30, 45, 123456)\n+        \n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now, disabled=True)\n+        \n+        form = DateTimeForm({})\n+        cleaned_value = form.cleaned_data['dt']\n+        bound_field_initial = form['dt'].initial\n+        self.assertEqual(cleaned_value, bound_field_initial)\n+    \n+    def test_changed_data_bound_field(self):\n+        \"\"\"Test that changed_data uses values accessed through BoundField.\"\"\"\n+        initial_time = datetime.datetime(2006, 10, 25, 14, 30, 45, 123456)\n+        \n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: initial_time)\n+        \n+        form = DateTimeForm({'dt': '2006-10-25 14:31:45'})\n+        self.assertEqual(form.changed_data, ['dt'])\n+        \n+        form_same_initial = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n+        self.assertEqual(form_same_initial.changed_data, [])\n         # You can specify descriptive text for a field by using the 'help_text' argument)\n         class UserRegistration(Form):\n             username = CharField(max_length=10, help_text='e.g., user@example.com')\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..2be97ea 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -10,8 +10,39 @@ from .models import (\n     Relationship, SymmetricalFriendship,\n )\n \n+from django.core.checks import Error\n+from django.db import models\n \n class M2mThroughTests(TestCase):\n+    def test_reverse_inherited_m2m_with_through_fields_list_hashable(self):\n+        class Parent(models.Model):\n+            name = models.CharField(max_length=256)\n+        \n+        class ProxyParent(Parent):\n+            class Meta:\n+                proxy = True\n+        \n+        class Child(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE)\n+            many_to_many_field = models.ManyToManyField(\n+                to=Parent,\n+                through=\"ManyToManyModel\",\n+                through_fields=['child', 'parent'],\n+                related_name=\"something\"\n+            )\n+        \n+        class ManyToManyModel(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')\n+            child = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')\n+            second_child = models.ForeignKey(Child, on_delete=models.CASCADE, null=True, default=None)\n+        \n+        child_field = Child._meta.get_field('many_to_many_field')\n+        inherited_child_field = ProxyParent._meta.get_field('something')\n+        \n+        self.assertEqual(child_field.through_fields, ['child', 'parent'])\n+        self.assertEqual(inherited_child_field.through_fields, ['child', 'parent'])\n+        # Ensure hashing works as expected\n+        self.assertEqual(hash(child_field), hash(inherited_child_field))\n     @classmethod\n     def setUpTestData(cls):\n         cls.bob = Person.objects.create(name='Bob')\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..e8e4e85 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,3 +1,37 @@\n+\n+class AutocompleteJsonSerializeResultView(AutocompleteJsonView):\n+    def serialize_result(self, obj, to_field_name):\n+        return {\n+            **super().serialize_result(obj, to_field_name),\n+            'posted': str(obj.posted),\n+        }\n+\n+class AutocompleteJsonViewTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.factory = RequestFactory()\n+        cls.superuser = User.objects.create_superuser(\n+            username='super', password='secret', email='super@example.com',\n+        )\n+        cls.url = reverse('autocomplete')\n+        cls.opts = {'app_label': 'admin_views', 'model_name': 'question', 'field_name': 'related_question'}\n+        Question.objects.create(question='Question 1', posted=date(2021, 8, 9))\n+        Question.objects.create(question='Question 2', posted=date(2021, 8, 7))\n+\n+    def test_serialize_result(self):\n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+        request.user = self.superuser\n+        response = AutocompleteJsonSerializeResultView.as_view(admin_site=self.admin_site)(request)\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': [\n+                {'id': str(q.pk), 'text': q.question, 'posted': str(q.posted)}\n+                for q in Question.objects.order_by('-posted')\n+            ],\n+            'pagination': {'more': False},\n+        })\n+\n import json\n from contextlib import contextmanager\n \n@@ -10,6 +44,9 @@ from django.core.exceptions import PermissionDenied\n from django.http import Http404\n from django.test import RequestFactory, override_settings\n from django.urls import reverse, reverse_lazy\n+from datetime import date\n+from django.test import TestCase\n+from .models import Question\n \n from .admin import AnswerAdmin, QuestionAdmin\n from .models import (\n",
  "django__django-14765": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 11009e5..02f8a18 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -924,7 +924,27 @@ class StateTests(SimpleTestCase):\n             1,\n         )\n \n-    def test_ignore_order_wrt(self):\n+    def test_real_apps_set(self):\n+        \"\"\"\n+        Test that ProjectState correctly initializes with real_apps as a set.\n+        \"\"\"\n+        real_apps_set = {'contenttypes', 'auth'}\n+        project_state = ProjectState(real_apps=real_apps_set)\n+        self.assertEqual(project_state.real_apps, real_apps_set)\n+\n+    def test_real_apps_none(self):\n+        \"\"\"\n+        Test that ProjectState handles real_apps being None.\n+        \"\"\"\n+        project_state = ProjectState(real_apps=None)\n+        self.assertEqual(project_state.real_apps, set())\n+\n+    def test_real_apps_non_set(self):\n+        \"\"\"\n+        Original test to check that ProjectState raises an AssertionError if real_apps is not a set.\n+        \"\"\"\n+        with self.assertRaises(AssertionError):\n+            ProjectState(real_apps=['contenttypes'])\n         \"\"\"\n         Makes sure ProjectState doesn't include OrderWrt fields when\n         making from existing models.\n",
  "django__django-14771": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 1875424..56a69ba 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -195,6 +195,14 @@ class TestChildArguments(SimpleTestCase):\n         )\n \n     @mock.patch('__main__.__spec__', None)\n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    def test_xoptions(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver']\n+        )\n+\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n@@ -235,6 +243,14 @@ class TestChildArguments(SimpleTestCase):\n         with self.assertRaisesMessage(RuntimeError, msg):\n             autoreload.get_child_arguments()\n \n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    def test_xoptions(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver']\n+        )\n+\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n     def test_module_no_spec(self):\n",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..827be6f 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -271,7 +271,28 @@ class MethodDecoratorTests(SimpleTestCase):\n                 self.assertEqual(Test.method.__doc__, 'A method')\n                 self.assertEqual(Test.method.__name__, 'method')\n \n-    def test_new_attribute(self):\n+    def test_wrapper_assignments(self):\n+        \"\"\"@method_decorator preserves wrapper assignments.\"\"\"\n+        func_name = None\n+        func_module = None\n+\n+        def decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_name, func_module\n+                func_name = getattr(func, '__name__', None)\n+                func_module = getattr(func, '__module__', None)\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(decorator)\n+            def method(self):\n+                return 'tests'\n+\n+        Test().method()\n+        self.assertEqual(func_name, 'method')\n+        self.assertIsNotNone(func_module)\n         \"\"\"A decorator that sets a new attribute on the method.\"\"\"\n         def decorate(func):\n             func.x = 1\n",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..d389898 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5085,6 +5085,44 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         response = self.client.get(reverse('admin2:auth_user_password_change', args=(su.pk,)))\n         self.assertEqual(response.status_code, 404)\n \n+    def _test_readonly_foreignkey_links(self, admin_site):\n+        \"\"\"\n+        Helper function to test readonly ForeignKey links for a given admin site.\n+        \"\"\"\n+        chapter = Chapter.objects.create(\n+            title='Chapter 1',\n+            content='content',\n+            book=Book.objects.create(name='Book 1'),\n+        )\n+        language = Language.objects.create(iso='_40', name='Test')\n+        obj = ReadOnlyRelatedField.objects.create(chapter=chapter, language=language)\n+        \n+        user_url = reverse(f'{admin_site}:auth_user_change', args=(self.superuser.pk,))\n+        language_url = reverse(f'{admin_site}:admin_views_language_change', args=(obj.language.pk,))\n+        \n+        # Test for the language field\n+        response = self.client.get(reverse(f'{admin_site}:admin_views_readonlyrelatedfield_change', args=(obj.pk,)))\n+        \n+        self.assertContains(\n+            response,\n+            '<div class=\"readonly\"><a href=\"%s\">_40</a></div>' % language_url,\n+            html=True,\n+        )\n+        # Ensure the URL contains the correct admin path\n+        self.assertIn(f'/{admin_site}/', language_url)\n+\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        \"\"\"\n+        Test readonly ForeignKey links in the default admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('admin')\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test readonly ForeignKey links in the custom admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('namespaced_admin')\n+\n     def test_change_form_renders_correct_null_choice_value(self):\n         \"\"\"\n         Regression test for #17911.\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..41ea9d8 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -279,7 +280,40 @@ class ModelChoiceFieldTests(TestCase):\n         field = CustomModelChoiceField(Category.objects.all())\n         self.assertIsInstance(field.choices, CustomModelChoiceIterator)\n \n-    def test_choice_iterator_passes_model_to_widget(self):\n+    def test_choice_value_hash(self):\n+        # Create two different ModelChoiceIteratorValue instances\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        \n+        # Test hash equality for a value with the same primary key\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(self.c1.pk, None)))\n+        \n+        # Test hash non-equality for values with different primary keys\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+    \n+    def test_choice_value_equality(self):\n+        # Create ModelChoiceIteratorValue instances\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        value_3 = ModelChoiceIteratorValue(self.c1.pk, None)\n+\n+        # Test equality with the same primary key\n+        self.assertTrue(value_1 == value_3)\n+\n+        # Test non-equality with different primary keys\n+        self.assertFalse(value_1 == value_2)\n+\n+    def test_choice_value_set_operations(self):\n+        # Create model choice iterator values\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_3 = ModelChoiceIteratorValue(self.c1.pk, None)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+\n+        # Test using ModelChoiceIteratorValue in a set\n+        values_set = {value_1, value_2}\n+        self.assertIn(value_1, values_set)\n+        self.assertIn(value_3, values_set)\n+        self.assertNotIn(ModelChoiceIteratorValue(self.c3.pk, None), values_set)\n         class CustomCheckboxSelectMultiple(CheckboxSelectMultiple):\n             def create_option(self, name, value, label, selected, index, subindex=None, attrs=None):\n                 option = super().create_option(name, value, label, selected, index, subindex, attrs)\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..71dff86 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -786,7 +786,75 @@ class OperationTests(OperationTestBase):\n         ], atomic=connection.features.supports_atomic_references_rename)\n         Pony = project_state.apps.get_model(app_label, \"Pony2\")\n         Rider = project_state.apps.get_model(app_label, \"Rider\")\n-        pony = Pony.objects.create()\n+from django.db import connection, models\n+from django.test import TestCase\n+from django.db.migrations.state import ProjectState\n+from django.db import migrations\n+\n+class TestRenameModelWithDbTable(TestCase):\n+    def test_rename_model_with_db_table_noop_postgres(self):\n+        app_label = 'test_rmwdbtn_pg'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n+    def test_rename_model_with_db_table_noop_sqlite(self):\n+        app_label = 'test_rmwdbtn_sqlite'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n+    def test_rename_model_with_different_schema(self):\n+        app_label = 'test_rmwdbtn_schema'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('name', models.CharField(max_length=255)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n         rider = Rider.objects.create()\n         pony.riders.add(rider)\n         self.assertEqual(Pony.objects.count(), 2)\n@@ -806,7 +874,75 @@ class OperationTests(OperationTestBase):\n         ])\n         Pony = project_state.apps.get_model(app_label, \"Pony\")\n         Rider = project_state.apps.get_model(app_label, \"Rider\")\n-        pony = Pony.objects.create()\n+from django.db import connection, models\n+from django.test import TestCase\n+from django.db.migrations.state import ProjectState\n+from django.db import migrations\n+\n+class TestRenameModelWithDbTable(TestCase):\n+    def test_rename_model_with_db_table_noop_postgres(self):\n+        app_label = 'test_rmwdbtn_pg'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n+    def test_rename_model_with_db_table_noop_sqlite(self):\n+        app_label = 'test_rmwdbtn_sqlite'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n+    def test_rename_model_with_different_schema(self):\n+        app_label = 'test_rmwdbtn_schema'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('name', models.CharField(max_length=255)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n         rider = Rider.objects.create()\n         pony.riders.add(rider)\n \n",
  "django__django-15022": "",
  "django__django-15037": "",
  "django__django-15103": "",
  "django__django-15104": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 04452fa..5afd5f6 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2835,7 +2835,41 @@ class AutodetectorTests(TestCase):\n                 )\n \n \n-class MigrationSuggestNameTests(SimpleTestCase):\n+class TestCustomForeignKeyWithHardcodedTo(SimpleTestCase):\n+    def test_custom_fk_field_with_hardcoded_to(self):\n+        class HardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.HardcodedModel'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']\n+                return name, path, args, kwargs\n+\n+        # Simulate before and after states\n+        before = ProjectState()\n+        before.add_model(ModelState('testapp', 'HardcodedModel', []))\n+\n+        after = ProjectState()\n+        after.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after.add_model(ModelState('testapp', 'TestModel', [\n+            ('custom', HardcodedForeignKey(on_delete=models.CASCADE)),\n+        ]))\n+\n+        autodetector = MigrationAutodetector(before, after)\n+        \n+        # This should not raise a KeyError\n+        changes = autodetector._detect_changes()\n+        \n+        # Verify that a migration change is detected\n+        self.assertEqual(len(changes['testapp']), 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+\n+    def assertOperationTypes(self, changes, app_label, migration_index, expected_types):\n+        operations = changes[app_label][migration_index].operations\n+        operation_types = [op.__class__.__name__ for op in operations]\n+        self.assertEqual(operation_types, expected_types)\n     def test_no_operations(self):\n         class Migration(migrations.Migration):\n             operations = []\n",
  "django__django-15127": "diff --git a/tests/messages_tests/tests.py b/tests/messages_tests/tests.py\nindex 8a3ca75..e5687d5 100644\n--- a/tests/messages_tests/tests.py\n+++ b/tests/messages_tests/tests.py\n@@ -1,12 +1,44 @@\n+\n from unittest import mock\n \n from django.contrib.messages import constants\n+from django.contrib.messages.storage import base\n from django.contrib.messages.storage.base import Message\n+from django.test import override_settings\n from django.test import SimpleTestCase\n \n \n class MessageTests(SimpleTestCase):\n-    def test_eq(self):\n+    @override_settings(MESSAGE_TAGS={\n+        constants.INFO: 'info',\n+        constants.DEBUG: 'debug',\n+        constants.WARNING: 'warn',\n+        constants.ERROR: 'error',\n+        constants.SUCCESS: 'success',\n+        15: 'custom',\n+    })\n+    def test_override_settings_custom_tags(self):\n+        expected_tags = {\n+            constants.INFO: 'info',\n+            constants.DEBUG: 'debug',\n+            constants.WARNING: 'warn',\n+            constants.ERROR: 'error',\n+            constants.SUCCESS: 'success',\n+            15: 'custom',\n+        }\n+        self.assertEqual(base.LEVEL_TAGS, expected_tags)\n+\n+    @override_settings(MESSAGE_TAGS={})\n+    def test_override_settings_empty_tags(self):\n+        # With an empty MESSAGE_TAGS, LEVEL_TAGS should match the default tag mappings\n+        expected_tags = {\n+            constants.DEBUG: 'debug',\n+            constants.INFO: 'info',\n+            constants.SUCCESS: 'success',\n+            constants.WARNING: 'warning',\n+            constants.ERROR: 'error',\n+        }\n+        self.assertEqual(base.LEVEL_TAGS, expected_tags)\n         msg_1 = Message(constants.INFO, 'Test message 1')\n         msg_2 = Message(constants.INFO, 'Test message 2')\n         msg_3 = Message(constants.WARNING, 'Test message 1')\n@@ -14,4 +46,4 @@ class MessageTests(SimpleTestCase):\n         self.assertEqual(msg_1, mock.ANY)\n         self.assertNotEqual(msg_1, msg_2)\n         self.assertNotEqual(msg_1, msg_3)\n-        self.assertNotEqual(msg_2, msg_3)\n+        self.assertNotEqual(msg_2, msg_3)\n",
  "django__django-15128": "diff --git a/tests/queries/models.py b/tests/queries/models.py\nindex a7bb7e8..a918ea5 100644\n--- a/tests/queries/models.py\n+++ b/tests/queries/models.py\n@@ -612,10 +612,25 @@ class OrderItem(models.Model):\n         return str(self.pk)\n \n \n+from django.db import models\n+\n class BaseUser(models.Model):\n+    annotation = models.ForeignKey('Annotation', models.CASCADE, null=True, blank=True)\n     pass\n \n \n+class Annotation(models.Model):\n+    tag = models.ForeignKey('Tag', models.CASCADE)\n+\n+class Note(models.Model):\n+    tag = models.ForeignKey('Tag', models.CASCADE)\n+\n+class Tag(models.Model):\n+    name = models.CharField(max_length=50)\n+\n+    def __str__(self):\n+        return self.name\n+\n class Task(models.Model):\n     title = models.CharField(max_length=10)\n     owner = models.ForeignKey(BaseUser, models.CASCADE, related_name='owner')\n",
  "django__django-15161": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 5fdccc5..70bae14 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1755,6 +1755,13 @@ class ValueTests(TestCase):\n         Time.objects.update(time=Value(datetime.time(1), output_field=TimeField()))\n         self.assertEqual(Time.objects.get().time, datetime.time(1))\n \n+    def test_deconstruct_f_expression(self):\n+        f_expression = F('field_name')\n+        path, args, kwargs = f_expression.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, ('field_name',))\n+        self.assertEqual(kwargs, {})\n+\n     def test_update_UUIDField_using_Value(self):\n         UUID.objects.create()\n         UUID.objects.update(uuid=Value(uuid.UUID('12345678901234567890123456789012'), output_field=UUIDField()))\n",
  "django__django-15268": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a6c0858..d50320f 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1762,7 +1762,28 @@ class AutodetectorTests(TestCase):\n             index_together={('title', 'newfield2')},\n         )\n \n-    def test_proxy(self):\n+    def test_optimize_foo_together_operations(self):\n+        \"\"\"\n+        Test optimization of multiple consecutive AlterFooTogether operations into one.\n+        \"\"\"\n+        changes = self.get_changes(\n+            [self.author_empty, self.book_foo_together],\n+            [self.author_empty, self.book_foo_optimized]\n+        )\n+        # Expect one set of AlterUniqueTogether and AlterIndexTogether operations\n+        self.assertNumberMigrations(changes, \"otherapp\", 1)\n+        self.assertOperationTypes(changes, 'otherapp', 0, [\n+            'AlterUniqueTogether',\n+            'AlterIndexTogether',\n+        ])\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 0, name='book',\n+            unique_together={('col',)},\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 1, name='book',\n+            index_together={('col',)},\n+        )\n         \"\"\"The autodetector correctly deals with proxy models.\"\"\"\n         # First, we test adding a proxy model\n         changes = self.get_changes([self.author_empty], [self.author_empty, self.author_proxy])\n",
  "django__django-15277": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 11f86ed..0dde68a 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1847,6 +1847,30 @@ class ValueTests(TestCase):\n                 expr = Value(value)\n                 self.assertIsInstance(expr.output_field, output_field_type)\n \n+    def test_output_field_does_not_create_broken_validators(self):\n+        \"\"\"\n+        The output field for a given Value doesn't get cleaned & validated,\n+        however validators may still be instantiated for a given field type\n+        and this demonstrates that they don't throw an exception.\n+        \"\"\"\n+        value_types = [\n+            'str',\n+            True,\n+            42,\n+            3.14,\n+            datetime.date(2019, 5, 15),\n+            datetime.datetime(2019, 5, 15),\n+            datetime.time(3, 16),\n+            datetime.timedelta(1),\n+            Decimal('3.14'),\n+            b'',\n+            uuid.uuid4(),\n+        ]\n+        for value in value_types:\n+            with self.subTest(type=type(value)):\n+                field = Value(value)._resolve_output_field()\n+                field.clean(value, model_instance=None)\n+\n     def test_resolve_output_field_failure(self):\n         msg = 'Cannot resolve expression type, unknown output_field'\n         with self.assertRaisesMessage(FieldError, msg):\n",
  "django__django-15278": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex dd02aee..7927a75 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -618,7 +618,35 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor:\n             editor.add_field(Author, new_field)\n         # Ensure the field is there\n+from django.db import connection\n+from django.db.models import OneToOneField, CASCADE\n+from django.test import TestCase\n+\n+class SchemaTests(TestCase):\n+    def test_add_field_o2o_nullable_sqlite(self):\n+        \"\"\"\n+        Test adding a nullable OneToOneField on SQLite does not crash.\n+        \"\"\"\n+        # Ensure this only runs on SQLite\n+        if connection.vendor != 'sqlite':\n+            self.skipTest('This test is specific to the SQLite backend.')\n+\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+\n+        # Define the new OneToOneField that should be nullable\n+        new_field = OneToOneField(Note, CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+\n+        # Attempt to add it to the Author model\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n+\n+        # Check that the field has been added and is nullable\n         columns = self.column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        self.assertTrue(columns['note_id'][1][6])  # Check if the column is nullable\n         field_type, field_info = columns['thing']\n         self.assertEqual(field_type, connection.features.introspected_field_types['IntegerField'])\n         # Make sure the values were transformed correctly\n@@ -636,7 +664,35 @@ class SchemaTests(TransactionTestCase):\n         new_field.set_attributes_from_name(\"bits\")\n         with connection.schema_editor() as editor:\n             editor.add_field(Author, new_field)\n+from django.db import connection\n+from django.db.models import OneToOneField, CASCADE\n+from django.test import TestCase\n+\n+class SchemaTests(TestCase):\n+    def test_add_field_o2o_nullable_sqlite(self):\n+        \"\"\"\n+        Test adding a nullable OneToOneField on SQLite does not crash.\n+        \"\"\"\n+        # Ensure this only runs on SQLite\n+        if connection.vendor != 'sqlite':\n+            self.skipTest('This test is specific to the SQLite backend.')\n+\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+\n+        # Define the new OneToOneField that should be nullable\n+        new_field = OneToOneField(Note, CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+\n+        # Attempt to add it to the Author model\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n+\n+        # Check that the field has been added and is nullable\n         columns = self.column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        self.assertTrue(columns['note_id'][1][6])  # Check if the column is nullable\n         # MySQL annoyingly uses the same backend, so it'll come back as one of\n         # these two types.\n         self.assertIn(columns['bits'][0], (\"BinaryField\", \"TextField\"))\n",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..1ddf8b4 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -68,6 +68,31 @@ class BasicFieldTests(SimpleTestCase):\n         klass = forms.TypedMultipleChoiceField\n         self.assertIsInstance(field.formfield(choices_form_class=klass), klass)\n \n+    def test_hash_immutability(self):\n+        field = models.IntegerField()\n+        field_hash = hash(field)\n+\n+        class MyModel(models.Model):\n+            rank = field\n+\n+        self.assertEqual(field_hash, hash(field))\n+\n+    def test_field_hash_usage_in_dict(self):\n+        \"\"\"\n+        Test that a field's hash remains constant when used in a dictionary\n+        before and after assignment to a model class.\n+        \"\"\"\n+        field = models.CharField(max_length=200)\n+        field_hash = hash(field)\n+        field_dict = {field: \"test value\"}\n+\n+        class TestModel(models.Model):\n+            name = field\n+\n+        self.assertEqual(field_hash, hash(field))\n+        self.assertIn(field, field_dict)\n+        self.assertEqual(field_dict[field], \"test value\")\n+\n     def test_formfield_disabled(self):\n         \"\"\"Field.formfield() sets disabled for fields with choices.\"\"\"\n         field = models.CharField(choices=[('a', 'b')])\n",
  "django__django-15368": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex 447c150..b22d56d 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -204,7 +204,20 @@ class BulkUpdateTests(TestCase):\n             [cat.special_name for cat in special_categories]\n         )\n \n-    def test_field_references(self):\n+    def test_f_expression_with_bulk_update(self):\n+        # Create multiple instances of SelfRef with different 'name' values\n+        instances = [SelfRef.objects.create(name=f'test_{i}', c8='') for i in range(10)]\n+        # Set the 'c8' field of each instance to F('name')\n+        for instance in instances:\n+            instance.c8 = F('name')\n+        # Perform bulk_update\n+        SelfRef.objects.bulk_update(instances, ['c8'])\n+        # Refresh instances and verify that 'c8' now equals 'name'\n+        for instance in instances:\n+            instance.refresh_from_db()\n+            self.assertEqual(instance.c8, instance.name)\n+\n+    def test_f_expression(self):\n         numbers = [Number.objects.create(num=0) for _ in range(10)]\n         for number in numbers:\n             number.num = F('num') + 1\n",
  "django__django-15380": "",
  "django__django-15382": "",
  "django__django-15467": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex f5af59b..ba6cd89 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -27,7 +27,8 @@ from django.db.models import (\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n-\n+from django.contrib.contenttypes.models import ContentType\n+from django.db import models\n from .models import (\n     Advisor,\n     Album,\n@@ -132,7 +133,20 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n             raw_id_fields=[\"main_band\"],\n         )\n \n-    def test_radio_fields_ForeignKey(self):\n+    def test_radio_fields_foreignkey_formfield_overrides_empty_label(self):\n+        class Inventory(models.Model):\n+            parent = models.ForeignKey('self', null=True, blank=True, on_delete=models.SET_NULL)\n+        \n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {\"parent\": admin.VERTICAL}\n+            def formfield_for_foreignkey(self, db_field, request=None, **kwargs):\n+                if db_field.name == \"parent\":\n+                    kwargs['empty_label'] = \"I WANT TO SET MY OWN EMPTY LABEL\"\n+                return super().formfield_for_foreignkey(db_field, request, **kwargs)\n+        \n+        ma = MyModelAdmin(Inventory, admin.site)\n+        ff = ma.formfield_for_dbfield(Inventory._meta.get_field(\"parent\"), request=None)\n+        self.assertEqual(ff.empty_label, \"I WANT TO SET MY OWN EMPTY LABEL\")\n         ff = self.assertFormfield(\n             Event,\n             \"main_band\",\n",
  "django__django-15499": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 5df1b06..045ee7d 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -129,6 +129,52 @@ class OptimizerTests(SimpleTestCase):\n             ],\n         )\n \n+    def test_create_model_no_alter_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Bar\", fields=[]),\n+            ],\n+            [\n+                migrations.CreateModel(\"Bar\", fields=[]),\n+            ],\n+        )\n+\n+    def test_create_model_with_default_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Baz\", fields=[], managers=[(\"default\", models.Manager())]),\n+                migrations.AlterModelManagers(\n+                    name=\"Baz\",\n+                    managers=[(\"default\", models.Manager())],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\",\n+                    fields=[],\n+                    managers=[(\"default\", models.Manager())],\n+                ),\n+            ],\n+        )\n+\n+    def test_create_model_then_alter_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Qux\", fields=[]),\n+                migrations.AlterModelManagers(\n+                    name=\"Qux\",\n+                    managers=[(\"objects\", models.Manager())],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Qux\",\n+                    fields=[],\n+                    managers=[(\"objects\", models.Manager())],\n+                ),\n+            ],\n+        )\n+\n     def test_create_model_and_remove_model_options(self):\n         self.assertOptimizesTo(\n             [\n",
  "django__django-15525": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 3640e99..8bfaf34 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -791,6 +791,28 @@ class NaturalKeyFixtureTests(TestCase):\n         )\n \n \n+from django.test import TestCase\n+from django.core import management\n+from .models import Person, NaturalKeyWithFKDependency\n+\n+class NaturalKeyFixtureOnOtherDatabaseTests(TestCase):\n+    databases = {\"other\"}\n+\n+    def test_natural_key_with_fk_on_other_database(self):\n+        \"\"\"\n+        Test loading fixtures with natural keys where foreign keys are involved\n+        on a non-default database.\n+        \"\"\"\n+        management.call_command(\n+            \"loaddata\",\n+            \"nk_with_foreign_key.json\",\n+            database=\"other\",\n+            verbosity=0\n+        )\n+        obj = NaturalKeyWithFKDependency.objects.using(\"other\").get()\n+        self.assertEqual(obj.name, \"The Lord of the Rings\")\n+        self.assertEqual(obj.author.name, \"J.R.R. Tolkien\")\n+\n class M2MNaturalKeyFixtureTests(TestCase):\n     \"\"\"Tests for ticket #14426.\"\"\"\n \n",
  "django__django-15561": "",
  "django__django-15569": "",
  "django__django-15572": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 188dca4..36ed1bc 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -76,7 +76,41 @@ class TemplateReloadTests(SimpleTestCase):\n             },\n         )\n \n-    @mock.patch(\"django.template.loaders.base.Loader.reset\")\n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"DIRS\": [\"\"],\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            }\n+        ]\n+    )\n+    def test_template_dirs_ignore_empty_path(self):\n+        self.assertEqual(autoreload.get_template_directories(), set())\n+\n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"DIRS\": [\"\", str(ROOT / \"valid_dir\")],\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            }\n+        ]\n+    )\n+    def test_template_dirs_with_valid_and_empty_path(self):\n+        self.assertSetEqual(\n+            autoreload.get_template_directories(),\n+            {ROOT / \"valid_dir\"}\n+        )\n+\n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"DIRS\": [],\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            }\n+        ]\n+    )\n+    def test_template_dirs_with_no_dirs(self):\n+        self.assertEqual(autoreload.get_template_directories(), set())\n     def test_reset_all_loaders(self, mock_reset):\n         autoreload.reset_loaders()\n         self.assertEqual(mock_reset.call_count, 2)\n",
  "django__django-15731": "diff --git a/tests/basic/tests.py b/tests/basic/tests.py\nindex 902f114..a3d4f6e 100644\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -1,3 +1,4 @@\n+\n import threading\n from datetime import datetime, timedelta\n from unittest import mock\n@@ -724,7 +725,29 @@ class ManagerTest(SimpleTestCase):\n \n     def test_manager_methods(self):\n         \"\"\"\n-        This test ensures that the correct set of methods from `QuerySet`\n+import inspect\n+from django.db import models\n+\n+class SignatureTests(TestCase):\n+    def test_bulk_create_signature(self):\n+        expected_signature = \"(objs, batch_size=None, ignore_conflicts=False, update_conflicts=False, update_fields=None, unique_fields=None)\"\n+        actual_signature = str(inspect.signature(Article.objects.bulk_create))\n+        self.assertEqual(actual_signature, expected_signature)\n+\n+    def test_get_signature(self):\n+        expected_signature = \"()\"\n+        actual_signature = str(inspect.signature(Article.objects.get))\n+        self.assertEqual(actual_signature, expected_signature)\n+\n+    def test_create_signature(self):\n+        expected_signature = \"(*args, **kwargs)\"\n+        actual_signature = str(inspect.signature(Article.objects.create))\n+        self.assertEqual(actual_signature, expected_signature)\n+\n+    def test_filter_signature(self):\n+        expected_signature = \"(*args, **kwargs)\"\n+        actual_signature = str(inspect.signature(Article.objects.filter))\n+        self.assertEqual(actual_signature, expected_signature)\n         are copied onto `Manager`.\n \n         It's particularly useful to prevent accidentally leaking new methods\n",
  "django__django-15741": "diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex c6dbc53..37aeedb 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -1,8 +1,11 @@\n+\n from datetime import datetime, time\n \n from django.template.defaultfilters import date\n from django.test import SimpleTestCase\n from django.utils import timezone, translation\n+from django.utils.translation import gettext_lazy\n+from django.utils.formats import get_format\n \n from ..utils import setup\n from .timezone_utils import TimezoneTestCase\n@@ -74,6 +77,13 @@ class DateTests(TimezoneTestCase):\n \n \n class FunctionTests(SimpleTestCase):\n+    def test_get_format_with_lazy(self):\n+        \"\"\"\n+        Test get_format function with lazy translation strings.\n+        \"\"\"\n+        self.assertEqual(get_format(gettext_lazy(\"DATE_FORMAT\")), \"N j, Y\")\n+        self.assertEqual(get_format(gettext_lazy(\"TIME_FORMAT\")), \"P\")\n+\n     def test_date(self):\n         self.assertEqual(date(datetime(2005, 12, 29), \"d F Y\"), \"29 December 2005\")\n \n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..8c00838 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -382,7 +382,25 @@ class ProxyModelTests(TestCase):\n             repr(resp), \"<ProxyImprovement: ProxyImprovement:improve that>\"\n         )\n \n-        # Select related + filter on a related proxy of proxy field\n+from django.test import TestCase\n+from django.db import models\n+from .models import CustomModel, ProxyCustomModel, AnotherModel\n+\n+class ProxyModelTestCase(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.custom_model = ProxyCustomModel.objects.create(name=\"Test Name\")\n+        cls.another_model = AnotherModel.objects.create(custom=cls.custom_model)\n+\n+    def test_select_related_only_on_proxy(self):\n+        \"\"\"\n+        Test select_related and only methods on a proxy model to ensure no crash.\n+        \"\"\"\n+        objs = list(\n+            AnotherModel.objects.select_related(\"custom\").only(\"custom__name\").all()\n+        )\n+        self.assertEqual(len(objs), 1)\n+        self.assertEqual(objs[0].custom.name, \"Test Name\")\n         resp = ProxyImprovement.objects.select_related().get(\n             associated_bug__summary__icontains=\"fix\"\n         )\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..5c776d2 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -151,12 +151,26 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ),\n         )\n \n+    def test_dbshell_additional_parameters(self):\n+        # Test to ensure additional parameters are passed before the database name\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n+        )\n+\n     def test_parameters(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n+    def test_dbshell_additional_parameters(self):\n+        # Test to ensure additional parameters are passed before the database name\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n+        )\n+\n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n",
  "django__django-15863": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 08f08e1..5e9d192 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -31,6 +31,8 @@ class FloatformatTests(SimpleTestCase):\n         self.assertEqual(output, \"1.4 1.4\")\n \n \n+from decimal import Decimal\n+\n class FunctionTests(SimpleTestCase):\n     def test_inputs(self):\n         self.assertEqual(floatformat(7.7), \"7.7\")\n",
  "django__django-15930": "",
  "django__django-15987": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 5ac9ab9..c45a533 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n # Unittests for fixtures.\n import json\n import os\n@@ -556,7 +557,18 @@ class TestFixtures(TestCase):\n             management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n \n     @override_settings(FIXTURE_DIRS=[os.path.join(_cur_dir, \"fixtures\")])\n-    def test_fixture_dirs_with_default_fixture_path(self):\n+    @override_settings(FIXTURE_DIRS=[Path(_cur_dir) / \"fixtures\"])\n+    def test_fixture_dirs_with_path_instances(self):\n+        \"\"\"\n+        settings.FIXTURE_DIRS should not allow duplicate Path instances.\n+        \"\"\"\n+        msg = (\n+            \"'%s' is a default fixture directory for the '%s' app \"\n+            \"and cannot be listed in settings.FIXTURE_DIRS.\"\n+            % (os.path.join(_cur_dir, \"fixtures\"), \"fixtures_regress\")\n+        )\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n         \"\"\"\n         settings.FIXTURE_DIRS cannot contain a default fixtures directory\n         for application (app/fixtures) in order to avoid repeated fixture loading.\n",
  "django__django-16032": "",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..c6202be 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2416,7 +2416,7 @@ class CombinedExpressionTests(SimpleTestCase):\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV, Combinable.MOD]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..2a34927 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib import admin\n@@ -21,7 +22,9 @@ from django.db.models import F, Field, IntegerField\n from django.db.models.functions import Upper\n from django.db.models.lookups import Contains, Exact\n from django.template import Context, Template, TemplateSyntaxError\n-from django.test import TestCase, override_settings\n+from unittest import mock\n+from django.db import DatabaseError, connection, models\n+from django.test import TestCase, override_settings, skipUnlessDBFeature\n from django.test.client import RequestFactory\n from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup\n from django.urls import reverse\n@@ -400,7 +403,51 @@ class ChangeListTests(TestCase):\n         with self.assertRaises(IncorrectLookupParameters):\n             m.get_changelist_instance(request)\n \n-    def test_custom_paginator(self):\n+    @skipUnlessDBFeature(\"supports_transactions\")\n+    def test_list_editable_atomicity(self):\n+        # Setup test data\n+        a = self.model.objects.create(name=\"Item A\", quantity=10)\n+        b = self.model.objects.create(name=\"Item B\", quantity=20)\n+        \n+        self.client.force_login(self.superuser)\n+        changelist_url = reverse(\"admin:app_list_changelist\")  # Replace with actual URL name\n+        data = {\n+            \"form-TOTAL_FORMS\": \"2\",\n+            \"form-INITIAL_FORMS\": \"2\",\n+            \"form-MIN_NUM_FORMS\": \"0\",\n+            \"form-MAX_NUM_FORMS\": \"1000\",\n+            \"form-0-id\": str(a.pk),\n+            \"form-1-id\": str(b.pk),\n+            \"form-0-quantity\": \"15\",\n+            \"form-1-quantity\": \"25\",\n+            \"_save\": \"Save\",\n+        }\n+        \n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\", side_effect=DatabaseError\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        \n+        # Verify original values remain unchanged\n+        a.refresh_from_db()\n+        self.assertEqual(a.quantity, 10)\n+        b.refresh_from_db()\n+        self.assertEqual(b.quantity, 20)\n+\n+        # Test partial failure\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\",\n+            side_effect=[None, DatabaseError],\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        \n+        # Original values should still be unchanged\n+        a.refresh_from_db()\n+        self.assertEqual(a.quantity, 10)\n+        b.refresh_from_db()\n+        self.assertEqual(b.quantity, 20)\n         new_parent = Parent.objects.create(name=\"parent\")\n         for i in range(1, 201):\n             Child.objects.create(name=\"name %s\" % i, parent=new_parent)\n",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..a5f4782 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2389,6 +2389,23 @@ class MakeMigrationsTests(MigrationTestBase):\n     def test_makemigrations_check(self):\n         \"\"\"\n         makemigrations --check should exit with a non-zero status when\n+        there are changes to an app requiring migrations, but it should\n+        not create any migration files.\n+        \"\"\"\n+        with self.temporary_migration_module() as tmpdir:\n+            with self.assertRaises(SystemExit):\n+                call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+            # Ensure no migration files were created\n+            self.assertFalse(os.listdir(tmpdir))  # tmpdir should be empty\n+\n+        with self.temporary_migration_module(\n+            module=\"migrations.test_migrations_no_changes\"\n+        ) as tmpdir:\n+            call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+            # Ensure no new migrations are created when there are no changes\n+            self.assertFalse(os.listdir(tmpdir))  # tmpdir should be empty\n+        \"\"\"\n+        makemigrations --check should exit with a non-zero status when\n         there are changes to an app requiring migrations.\n         \"\"\"\n         with self.temporary_migration_module():\n",
  "django__django-16136": "diff --git a/tests/async/tests.py b/tests/async/tests.py\nindex 72e103e..233aae4 100644\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -1,3 +1,4 @@\n+\n import asyncio\n import os\n from unittest import mock\n@@ -6,8 +7,10 @@ from asgiref.sync import async_to_sync\n \n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n-from django.http import HttpResponse\n-from django.test import SimpleTestCase\n+from django.http import HttpResponse, HttpResponseNotAllowed\n+from django.test import SimpleTestCase, RequestFactory\n+import asyncio\n+from django.views import View\n from django.utils.asyncio import async_unsafe\n from django.views.generic.base import View\n \n@@ -119,7 +122,20 @@ class ViewTests(SimpleTestCase):\n \n                 self.assertIsInstance(response, HttpResponse)\n \n-    def test_base_view_class_is_sync(self):\n+    def test_http_method_not_allowed_async_view(self):\n+        \"\"\"\n+        Test that an async view which does not support a GET method returns\n+        HttpResponseNotAllowed.\n+        \"\"\"\n+        class AsyncDemoView(View):\n+            async def post(self, request):\n+                return HttpResponse(\"ok\")\n+\n+        request_factory = RequestFactory()\n+        request = request_factory.get('/demo')\n+        response = AsyncDemoView.as_view()(request)\n+        \n+        self.assertIsInstance(response, HttpResponseNotAllowed)\n         \"\"\"\n         View and by extension any subclasses that don't define handlers are\n         sync.\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..a8307ed 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -22,6 +23,7 @@ from django.core.mail import EmailMultiAlternatives\n from django.forms import forms\n from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n+from django.urls import reverse\n from django.utils import translation\n from django.utils.text import capfirst\n from django.utils.translation import gettext as _\n@@ -892,6 +894,26 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n     def test_custom_form(self):\n         class CustomUserChangeForm(UserChangeForm):\n             class Meta(UserChangeForm.Meta):\n",
  "django__django-16145": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex 04d2f0e..b779c21 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1600,7 +1600,21 @@ class ManageRunserver(SimpleTestCase):\n             \"2001:0db8:1234:5678::9\", \"7000\", ipv6=True, raw_ipv6=True\n         )\n \n-    def test_runner_hostname(self):\n+    @mock.patch(\"django.core.management.commands.runserver.run\")\n+    @mock.patch(\"django.core.management.base.BaseCommand.check_migrations\")\n+    def test_zero_ip_addr(self, *mocked_objects):\n+        self.output = unittest.mock.MagicMock()\n+        call_command(\n+            \"runserver\",\n+            addrport=\"0:8000\",\n+            use_reloader=False,\n+            skip_checks=True,\n+            stdout=self.output,\n+        )\n+        self.assertIn(\n+            \"Starting development server at http://0.0.0.0:8000/\",\n+            self.output.getvalue(),\n+        )\n         call_command(self.cmd, addrport=\"localhost:8000\")\n         self.assertServerSettings(\"localhost\", \"8000\")\n \n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..77a77d7 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -507,8 +507,38 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n+from datetime import datetime\n+from django.test import TestCase\n+from django.contrib.sitemaps import Sitemap\n+from django.urls import path\n+from django.contrib.sitemaps.views import index\n+\n+class CallableLastmodNoItemsSitemap(Sitemap):\n+    location = \"/location/\"\n+\n+    def items(self):\n+        return []\n+\n+    def lastmod(self, obj):\n+        return obj.lastmod\n \n-# RemovedInDjango50Warning\n+class CallableLastmodNoItemsTests(TestCase):\n+    urlpatterns = [\n+        path(\n+            \"callable-lastmod-no-items/index.xml\",\n+            index,\n+            {\"sitemaps\": {\"callable-lastmod\": CallableLastmodNoItemsSitemap}},\n+        ),\n+    ]\n+\n+    def test_callable_sitemap_no_items(self):\n+        index_response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", index_response)\n+        expected_content_index = '''<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/callable-lastmod-no-items/sitemap.xml</loc></sitemap>\n+        </sitemapindex>'''\n+        self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n class DeprecatedTests(SitemapTestsBase):\n     @override_settings(\n         TEMPLATES=[\n",
  "django__django-16315": "diff --git a/tests/bulk_create/models.py b/tests/bulk_create/models.py\nindex c5f5c07..7e99864 100644\n--- a/tests/bulk_create/models.py\n+++ b/tests/bulk_create/models.py\n@@ -59,6 +59,10 @@ class Pizzeria(Restaurant):\n     pass\n \n \n+class FieldsWithDbColumns(models.Model):\n+    rank = models.IntegerField(unique=True, db_column=\"rAnK\")\n+    name = models.CharField(max_length=15, null=True, db_column=\"oTheRNaMe\")\n+\n class State(models.Model):\n     two_letter_code = models.CharField(max_length=2, primary_key=True)\n \n",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..958c47e 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n import urllib.parse\n@@ -34,6 +35,7 @@ from .models.custom_user import (\n     ExtensionUser,\n )\n from .models.with_custom_email_field import CustomEmailField\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n from .models.with_integer_username import IntegerUsernameUser\n from .settings import AUTH_TEMPLATES\n \n@@ -244,6 +246,65 @@ class UserCreationFormTest(TestDataMixin, TestCase):\n                 model = CustomUserWithoutIsActiveField\n                 fields = (\"email\",)  # without USERNAME_FIELD\n \n+    def test_custom_form_saves_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization = Organization.objects.create(name=\"organization 1\")\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertTrue(form.is_valid())\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization])\n+\n+    def test_custom_form_saves_many_to_many_field_with_multiple_organizations(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization1 = Organization.objects.create(name=\"organization 1\")\n+        organization2 = Organization.objects.create(name=\"organization 2\")\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization1.pk), str(organization2.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertTrue(form.is_valid())\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization1, organization2])\n+\n+    def test_custom_form_does_not_save_m2m_field_on_partial_commit(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization = Organization.objects.create(name=\"organization 1\")\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertTrue(form.is_valid())\n+        user = form.save(commit=False)\n+        user.save()  # Simulate an external save call\n+        self.assertSequenceEqual(user.orgs.all(), [])\n+\n         data = {\n             \"email\": \"testclient@example.com\",\n             \"password1\": \"testclient\",\n",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..241aa20 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.test import TestCase\n@@ -170,6 +171,18 @@ class TimesinceTests(TestCase):\n         past = datetime.datetime(1980, 1, 1, tzinfo=naive())\n         self.assertEqual(timeuntil(past), \"0\\xa0minutes\")\n \n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_timesince_with_timezone_aware_datetime(self):\n+        now = timezone.now()\n+        # Create a timezone-aware datetime object one month in the past\n+        past = now - datetime.timedelta(days=31)\n+        self.assertEqual(timesince(past, now), \"1\\xa0month\")\n+\n+        # Create a timezone-aware datetime object two months in the past\n+        past_two_months = now - datetime.timedelta(days=62)\n+        self.assertEqual(timesince(past_two_months, now), \"2\\xa0months\")\n+\n     def test_thousand_years_ago(self):\n         t = datetime.datetime(1007, 8, 14, 13, 46, 0)\n         self.assertEqual(timesince(t, self.t), \"1000\\xa0years\")\n",
  "django__django-16454": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 8d0729b..bbdea76 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -469,6 +469,25 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertEqual(out.strip(), \"Set foo\")\n \n \n+from django.core.management import call_command\n+from django.core.management.base import CommandError\n+from django.test import SimpleTestCase\n+import io\n+import sys\n+\n+class SubparserErrorFormattingTests(SimpleTestCase):\n+    def test_missing_subparser_argument_error_formatting(self):\n+        # Simulate running the management command without the required 'name' argument\n+        with self.assertRaises(CommandError) as cm:\n+            call_command('cheeses', 'create')\n+        self.assertIn(\"Error: the following arguments are required: name\", str(cm.exception))\n+\n+    def test_invalid_subparser_argument_error_formatting(self):\n+        # Simulate running the management command with an invalid 'bar' argument\n+        with self.assertRaises(CommandError) as cm:\n+            call_command('subparser', 'foo', 'twelve')\n+        self.assertIn(\"manage.py subparser foo: error: argument bar: invalid int value: 'twelve'\", str(cm.exception))\n+\n class UtilsTests(SimpleTestCase):\n     def test_no_existent_external_program(self):\n         msg = \"Error executing a_42_command_that_doesnt_exist_42\"\n",
  "django__django-16485": "",
  "django__django-16493": "diff --git a/tests/file_storage/models.py b/tests/file_storage/models.py\nindex 3513a6b..64bfd0f 100644\n--- a/tests/file_storage/models.py\n+++ b/tests/file_storage/models.py\n@@ -59,6 +59,9 @@ class Storage(models.Model):\n     storage_callable = models.FileField(\n         storage=callable_storage, upload_to=\"storage_callable\"\n     )\n+    storage_callable_default = models.FileField(\n+        storage=callable_default_storage, upload_to=\"storage_callable_default\"\n+    )\n     storage_callable_class = models.FileField(\n         storage=CallableStorage, upload_to=\"storage_callable_class\"\n     )\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..0b1bd9e 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,8 +1,11 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n from django.contrib.admin.templatetags.admin_list import date_hierarchy\n from django.contrib.admin.templatetags.admin_modify import submit_row\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n@@ -54,6 +57,41 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n                     template_context[\"show_save_and_add_another\"], expected_flag\n                 )\n \n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        \"\"\"\n+        Test that the \"show_save_as_new\" button is only displayed when the user\n+        has both add and change permissions.\n+        \"\"\"\n+        # User with only change permission\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        # User with both add and change permissions\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n+\n     def test_override_change_form_template_tags(self):\n         \"\"\"\n         admin_modify template tags follow the standard search pattern\n",
  "django__django-16560": "diff --git a/tests/constraints/tests.py b/tests/constraints/tests.py\nindex 13854a9..76d8c84 100644\n--- a/tests/constraints/tests.py\n+++ b/tests/constraints/tests.py\n@@ -109,7 +109,28 @@ class BaseConstraintTests(SimpleTestCase):\n \n \n class CheckConstraintTests(TestCase):\n-    def test_eq(self):\n+    def test_custom_violation_code_message_check_constraint(self):\n+        check1 = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check1, name=\"price\", violation_error_code=\"custom_code\"\n+        )\n+        self.assertEqual(constraint.violation_error_code, \"custom_code\")\n+        invalid_product = Product(price=10, discounted_price=42)\n+        with self.assertRaisesMessage(ValidationError, \"Constraint \u201cprice\u201d is violated.\") as cm:\n+            constraint.validate(Product, invalid_product)\n+        self.assertEqual(cm.exception.code, \"custom_code\")\n+\n+    def test_custom_violation_code_message_unique_constraint(self):\n+        constraint = models.UniqueConstraint(\n+            fields=[\"name\", \"color\"],\n+            name=\"unique_name_color\",\n+            violation_error_code=\"custom_unique_code\"\n+        )\n+        self.assertEqual(constraint.violation_error_code, \"custom_unique_code\")\n+        non_unique_product = UniqueConstraintProduct(name=self.p1.name, color=self.p1.color)\n+        with self.assertRaisesMessage(ValidationError, \"Unique constraint product with this Name and Color already exists.\") as cm:\n+            constraint.validate(UniqueConstraintProduct, non_unique_product)\n+        self.assertEqual(cm.exception.code, \"custom_unique_code\")\n         check1 = models.Q(price__gt=models.F(\"discounted_price\"))\n         check2 = models.Q(price__lt=models.F(\"discounted_price\"))\n         self.assertEqual(\n@@ -289,7 +310,28 @@ class UniqueConstraintTests(TestCase):\n         cls.p1 = UniqueConstraintProduct.objects.create(name=\"p1\", color=\"red\")\n         cls.p2 = UniqueConstraintProduct.objects.create(name=\"p2\")\n \n-    def test_eq(self):\n+    def test_custom_violation_code_message_check_constraint(self):\n+        check1 = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check1, name=\"price\", violation_error_code=\"custom_code\"\n+        )\n+        self.assertEqual(constraint.violation_error_code, \"custom_code\")\n+        invalid_product = Product(price=10, discounted_price=42)\n+        with self.assertRaisesMessage(ValidationError, \"Constraint \u201cprice\u201d is violated.\") as cm:\n+            constraint.validate(Product, invalid_product)\n+        self.assertEqual(cm.exception.code, \"custom_code\")\n+\n+    def test_custom_violation_code_message_unique_constraint(self):\n+        constraint = models.UniqueConstraint(\n+            fields=[\"name\", \"color\"],\n+            name=\"unique_name_color\",\n+            violation_error_code=\"custom_unique_code\"\n+        )\n+        self.assertEqual(constraint.violation_error_code, \"custom_unique_code\")\n+        non_unique_product = UniqueConstraintProduct(name=self.p1.name, color=self.p1.color)\n+        with self.assertRaisesMessage(ValidationError, \"Unique constraint product with this Name and Color already exists.\") as cm:\n+            constraint.validate(UniqueConstraintProduct, non_unique_product)\n+        self.assertEqual(cm.exception.code, \"custom_unique_code\")\n         self.assertEqual(\n             models.UniqueConstraint(fields=[\"foo\", \"bar\"], name=\"unique\"),\n             models.UniqueConstraint(fields=[\"foo\", \"bar\"], name=\"unique\"),\n",
  "django__django-16569": "",
  "django__django-16595": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3979e76..386d5be 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -43,6 +43,57 @@ class OptimizerTests(SimpleTestCase):\n     def assertDoesNotOptimize(self, operations, **kwargs):\n         self.assertOptimizesTo(operations, operations, **kwargs)\n \n+    def test_alter_alter_field(self):\n+        # AlterField should collapse into the second.\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AlterField(\"Foo\", \"name\", models.IntegerField()),\n+                migrations.AlterField(\"Foo\", \"name\", models.IntegerField(help_text=\"help\")),\n+            ],\n+            [\n+                migrations.AlterField(\"Foo\", \"name\", models.IntegerField(help_text=\"help\")),\n+            ]\n+        )\n+\n+    def test_multiple_alterfields(self):\n+        # Multiple AlterField operations should collapse into the last one.\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=256, null=True)),\n+                migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, null=True)),\n+                migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\")),\n+                migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\", default=None)),\n+            ],\n+            [\n+                migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\", default=None)),\n+            ]\n+        )\n+\n+    def test_add_and_alterfields(self):\n+        # AddField followed by multiple AlterField should result in the last AlterField.\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AddField(\"Book\", \"title\", models.CharField(max_length=256, null=True)),\n+                migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, null=True)),\n+                migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\")),\n+            ],\n+            [\n+                migrations.AddField(\"Book\", \"title\", models.CharField(max_length=256, null=True)),\n+                migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\")),\n+            ]\n+        )\n+\n+    def test_non_elidable_with_alterfields(self):\n+        # Non-elidable operation between AddField and AlterField keeps all operations.\n+        self.assertDoesNotOptimize(\n+            [\n+                migrations.AddField(\"Book\", \"title\", models.CharField(max_length=256, null=True)),\n+                migrations.RunPython(noop),\n+                migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, null=True)),\n+                migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\")),\n+            ]\n+        )\n+\n     def test_none_app_label(self):\n         optimizer = MigrationOptimizer()\n         with self.assertRaisesMessage(TypeError, \"app_label must be a str\"):\n",
  "django__django-16612": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 9120571..df87932 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -8464,6 +8464,58 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         )\n \n     @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_with_multiple_query_params(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1&status=active\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1&status=active\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+        \n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_with_encoded_chars_in_query(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1&name=John%20Doe\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1&name=John%20Doe\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_with_empty_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n     def test_missing_slash_append_slash_true_script_name(self):\n         superuser = User.objects.create_user(\n             username=\"staff\",\n@@ -8500,6 +8552,58 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         )\n \n     @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_with_multiple_query_params(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1&status=active\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1&status=active\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+        \n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_with_encoded_chars_in_query(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1&name=John%20Doe\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1&name=John%20Doe\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_with_empty_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n         user = User.objects.create_user(\n             username=\"user\",\n",
  "django__django-16642": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 499356e..c4827f5 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -255,6 +255,8 @@ class FileResponseTests(SimpleTestCase):\n             (\".tar.gz\", \"application/gzip\"),\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n+            (\".tar.br\", \"application/x-brotli\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n         )\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n@@ -263,6 +265,26 @@ class FileResponseTests(SimpleTestCase):\n                 self.assertEqual(response.headers[\"Content-Type\"], mimetype)\n                 self.assertFalse(response.has_header(\"Content-Encoding\"))\n \n+    def test_compressed_response_br(self):\n+        \"\"\"Test content type for brotli compressed files\"\"\"\n+        with tempfile.NamedTemporaryFile(suffix=\".br\") as tmp:\n+            response = FileResponse(tmp)\n+            self.assertEqual(response.headers[\"Content-Type\"], \"application/x-brotli\")\n+            self.assertFalse(response.has_header(\"Content-Encoding\"))\n+\n+    def test_compressed_response_Z(self):\n+        \"\"\"Test content type for Z compressed files\"\"\"\n+        with tempfile.NamedTemporaryFile(suffix=\".Z\") as tmp:\n+            response = FileResponse(tmp)\n+            self.assertEqual(response.headers[\"Content-Type\"], \"application/x-compress\")\n+            self.assertFalse(response.has_header(\"Content-Encoding\"))\n+        for extension, mimetype in test_tuples:\n+            with self.subTest(ext=extension):\n+                with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n+                    response = FileResponse(tmp)\n+                self.assertEqual(response.headers[\"Content-Type\"], mimetype)\n+                self.assertFalse(response.has_header(\"Content-Encoding\"))\n+\n     def test_unicode_attachment(self):\n         response = FileResponse(\n             ContentFile(b\"binary content\", name=\"\u795d\u60a8\u5e73\u5b89.odt\"),\n",
  "django__django-16661": "diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py\nindex 8cb88da..ff42af4 100644\n--- a/tests/modeladmin/tests.py\n+++ b/tests/modeladmin/tests.py\n@@ -149,11 +149,83 @@ class ModelAdminTests(TestCase):\n         self.assertIs(\n             ma.lookup_allowed(\"employee__employeeinfo__description\", \"test_value\"), True\n         )\n+\n+    @isolate_apps('modeladmin')\n+    def test_lookup_allowed_foreign_primary(self):\n+        class Country(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class Place(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+\n+        class Restaurant(models.Model):\n+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)\n+\n+        class Waiter(models.Model):\n+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n+\n+        class WaiterAdmin(ModelAdmin):\n+            list_filter = [\n+                'restaurant__place__country',\n+                'restaurant__place__country__name',\n+            ]\n+\n+        ma = WaiterAdmin(Waiter, self.site)\n+        self.assertIs(ma.lookup_allowed('restaurant__place__country', '1'), True)\n+        self.assertIs(\n+            ma.lookup_allowed('restaurant__place__country__id__exact', '1'), True\n+        )\n+        self.assertIs(\n+            ma.lookup_allowed('restaurant__place__country__name', 'test_value'), True\n+        )\n+        # Additional test cases for thorough testing\n+        self.assertIs(\n+            ma.lookup_allowed('restaurant__place__country__name__startswith', 'A'), True\n+        )\n+        self.assertIs(\n+            ma.lookup_allowed('restaurant__place__country__name__icontains', 'test'), True\n+        )\n         # OneToOneField and ForeignKey\n         self.assertIs(\n             ma.lookup_allowed(\"employee__department__code\", \"test_value\"), True\n         )\n \n+    @isolate_apps('modeladmin')\n+    def test_lookup_allowed_foreign_primary(self):\n+        class Country(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class Place(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+\n+        class Restaurant(models.Model):\n+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)\n+\n+        class Waiter(models.Model):\n+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n+\n+        class WaiterAdmin(ModelAdmin):\n+            list_filter = [\n+                'restaurant__place__country',\n+                'restaurant__place__country__name',\n+            ]\n+\n+        ma = WaiterAdmin(Waiter, self.site)\n+        self.assertIs(ma.lookup_allowed('restaurant__place__country', '1'), True)\n+        self.assertIs(\n+            ma.lookup_allowed('restaurant__place__country__id__exact', '1'), True\n+        )\n+        self.assertIs(\n+            ma.lookup_allowed('restaurant__place__country__name', 'test_value'), True\n+        )\n+        # Additional test cases for thorough testing\n+        self.assertIs(\n+            ma.lookup_allowed('restaurant__place__country__name__startswith', 'A'), True\n+        )\n+        self.assertIs(\n+            ma.lookup_allowed('restaurant__place__country__name__icontains', 'test'), True\n+        )\n+\n     def test_field_arguments(self):\n         # If fields is specified, fieldsets_add and fieldsets_change should\n         # just stick the fields into a formsets structure and return it.\n",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..2dddbe0 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -922,7 +922,51 @@ class WriterTests(SimpleTestCase):\n             output,\n         )\n \n-    def test_migration_file_header_comments(self):\n+    def test_sorted_imports_with_multiple_imports(self):\n+        \"\"\"\n+        Test that multiple imports are sorted correctly, following the Django\n+        import style and isort defaults.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.RunPython(\n+                        code=migrations.RunPython.noop\n+                    ),\n+                ]\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        self.assertIn(\n+            \"import datetime\\nimport time\\nfrom django.db import migrations, models\\n\",\n+            output,\n+        )\n+\n+    def test_imports_with_additional_modules(self):\n+        \"\"\"\n+        Test that additional standard and third-party modules are sorted\n+        correctly in the imports.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.RunPython(\n+                        code=migrations.RunPython.noop\n+                    ),\n+                ]\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        self.assertIn(\n+            \"import datetime\\nimport json\\nfrom django.db import migrations, models\\n\",\n+            output,\n+        )\n         \"\"\"\n         Test comments at top of file.\n         \"\"\"\n",
  "django__django-16801": "diff --git a/tests/model_fields/test_imagefield.py b/tests/model_fields/test_imagefield.py\nindex 9bf7f7d..daffcb0 100644\n--- a/tests/model_fields/test_imagefield.py\n+++ b/tests/model_fields/test_imagefield.py\n@@ -319,8 +319,25 @@ class ImageFieldTwoDimensionsTests(ImageFieldTestMixin, TestCase):\n         # Dimensions were recalculated, and hence file should have opened.\n         self.assertIs(p.mugshot.was_opened, True)\n \n+from django.db.models import signals\n \n @skipIf(Image is None, \"Pillow is required to test ImageField\")\n+def test_imagefield_post_init_signal_not_connected_without_dimensions():\n+    \"\"\"\n+    Test that the post_init signal is not connected when\n+    ImageField does not have width_field and height_field set.\n+    \"\"\"\n+    class ModelWithoutDimensions(models.Model):\n+        image = models.ImageField()\n+\n+    # Get the id of the model to check in signal receivers\n+    model_id = id(ModelWithoutDimensions)\n+    \n+    # Ensure the post_init signal handler is not connected\n+    assert model_id not in [sender_id for (_, sender_id) in signals.post_init.receivers]\n+    \n+    # Clean up connections to avoid side effects on other tests\n+    signals.post_init.disconnect(sender=ModelWithoutDimensions)\n class ImageFieldNoDimensionsTests(ImageFieldTwoDimensionsTests):\n     \"\"\"\n     Tests behavior of an ImageField with no dimension fields.\n@@ -328,8 +345,25 @@ class ImageFieldNoDimensionsTests(ImageFieldTwoDimensionsTests):\n \n     PersonModel = Person\n \n+from django.db.models import signals\n \n @skipIf(Image is None, \"Pillow is required to test ImageField\")\n+def test_imagefield_post_init_signal_not_connected_without_dimensions():\n+    \"\"\"\n+    Test that the post_init signal is not connected when\n+    ImageField does not have width_field and height_field set.\n+    \"\"\"\n+    class ModelWithoutDimensions(models.Model):\n+        image = models.ImageField()\n+\n+    # Get the id of the model to check in signal receivers\n+    model_id = id(ModelWithoutDimensions)\n+    \n+    # Ensure the post_init signal handler is not connected\n+    assert model_id not in [sender_id for (_, sender_id) in signals.post_init.receivers]\n+    \n+    # Clean up connections to avoid side effects on other tests\n+    signals.post_init.disconnect(sender=ModelWithoutDimensions)\n class ImageFieldOneDimensionTests(ImageFieldTwoDimensionsTests):\n     \"\"\"\n     Tests behavior of an ImageField with one dimensions field.\n",
  "django__django-16819": "",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..c54cdef 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -798,8 +798,9 @@ class SystemChecksTestCase(SimpleTestCase):\n         errors = SongAdmin(Song, AdminSite()).check()\n         expected = [\n             checks.Error(\n-                \"The value of 'readonly_fields[1]' is not a callable, an attribute \"\n-                \"of 'SongAdmin', or an attribute of 'admin_checks.Song'.\",\n+                \"The value of 'readonly_fields[1]' refers to 'nonexistent', which is \"\n+                \"not a callable, an attribute of 'SongAdmin', or an attribute of \"\n+                \"'admin_checks.Song'.\",\n                 obj=SongAdmin,\n                 id=\"admin.E035\",\n             )\n@@ -814,8 +815,9 @@ class SystemChecksTestCase(SimpleTestCase):\n         errors = CityInline(State, AdminSite()).check()\n         expected = [\n             checks.Error(\n-                \"The value of 'readonly_fields[0]' is not a callable, an attribute \"\n-                \"of 'CityInline', or an attribute of 'admin_checks.City'.\",\n+                \"The value of 'readonly_fields[0]' refers to 'i_dont_exist', which is \"\n+                \"not a callable, an attribute of 'CityInline', or an attribute of \"\n+                \"'admin_checks.City'.\",\n                 obj=CityInline,\n                 id=\"admin.E035\",\n             )\n",
  "django__django-16901": "",
  "django__django-17029": "diff --git a/tests/apps/tests.py b/tests/apps/tests.py\nindex f7c2c67..4a69d40 100644\n--- a/tests/apps/tests.py\n+++ b/tests/apps/tests.py\n@@ -138,6 +138,9 @@ class AppsTests(SimpleTestCase):\n             config = apps.get_app_config(\"two_configs_one_default_app\")\n         self.assertIsInstance(config, TwoConfig)\n \n+    from django.apps import apps\n+    from django.test import SimpleTestCase, override_settings\n+\n     @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n     def test_get_app_configs(self):\n         \"\"\"\n@@ -148,6 +151,9 @@ class AppsTests(SimpleTestCase):\n             [app_config.name for app_config in app_configs], SOME_INSTALLED_APPS_NAMES\n         )\n \n+    from django.apps import apps\n+    from django.test import SimpleTestCase, override_settings\n+\n     @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n     def test_get_app_config(self):\n         \"\"\"\n@@ -166,6 +172,9 @@ class AppsTests(SimpleTestCase):\n         with self.assertRaisesMessage(LookupError, msg):\n             apps.get_app_config(\"django.contrib.auth\")\n \n+    from django.apps import apps\n+    from django.test import SimpleTestCase, override_settings\n+\n     @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n     def test_is_installed(self):\n         \"\"\"\n@@ -176,6 +185,9 @@ class AppsTests(SimpleTestCase):\n         self.assertIs(apps.is_installed(\"django.contrib.staticfiles\"), True)\n         self.assertIs(apps.is_installed(\"django.contrib.admindocs\"), False)\n \n+    from django.apps import apps\n+    from django.test import SimpleTestCase, override_settings\n+\n     @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n     def test_get_model(self):\n         \"\"\"\n",
  "django__django-17084": "",
  "django__django-17087": "",
  "django__django-7530": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex a74680b..da00bfd 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -641,6 +641,23 @@ class MakeMigrationsTests(MigrationTestBase):\n                 allow_migrate.assert_called_with('other', 'migrations', model_name='UnicodeModel')\n                 self.assertEqual(ensure_schema.call_count, 4)\n \n+    def test_allow_migrate_called_with_correct_app_models(self):\n+        \"\"\"\n+        Test that makemigrations calls router.allow_migrate() with only the models\n+        of the app specified, not models from across all apps.\n+        \"\"\"\n+        with self.settings(INSTALLED_APPS=['migrations', 'migrations2']):\n+            with mock.patch('migrations.routers.TestRouter.allow_migrate', return_value=True) as allow_migrate:\n+                call_command('makemigrations', 'migrations', verbosity=0)\n+                for call in allow_migrate.mock_calls:\n+                    _, call_args, call_kwargs = call\n+                    connection_alias, app_label = call_args\n+                    model_name = call_kwargs['model_name']\n+                    # Only models from the 'migrations' app should be checked\n+                    self.assertIn(app_label, ['migrations'])\n+                    # Ensure the model exists in the app's configuration\n+                    apps.get_app_config(app_label).get_model(model_name)\n+                    \n     def test_failing_migration(self):\n         # If a migration fails to serialize, it shouldn't generate an empty file. #21280\n         apps.register_model('migrations', UnserializableModel)\n",
  "django__django-9296": "",
  "matplotlib__matplotlib-13989": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5483eef..d672dfe 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6359,8 +6359,28 @@ def test_hist_auto_bins():\n \n def test_hist_nan_data():\n     fig, (ax1, ax2) = plt.subplots(2)\n+import numpy as np\n+import matplotlib.pyplot as plt\n \n-    data = [1, 2, 3]\n+def test_hist_range_and_density():\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_large_data_density():\n+    _, bins, _ = plt.hist(np.random.rand(1000), \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_density_false():\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=False)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_negative_range():\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(-1, 1), density=True)\n+    assert bins[0] == -1\n+    assert bins[-1] == 1\n     nan_data = data + [np.nan]\n \n     bins, edges, _ = ax1.hist(data)\n@@ -6368,4 +6388,4 @@ def test_hist_nan_data():\n         nanbins, nanedges, _ = ax2.hist(nan_data)\n \n     assert np.allclose(bins, nanbins)\n-    assert np.allclose(edges, nanedges)\n+    assert np.allclose(edges, nanedges)\n",
  "matplotlib__matplotlib-14623": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c9ad946..e0438df 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -930,6 +930,34 @@ def test_inverted_limits():\n     assert ax.get_ylim() == (-3, 5)\n     plt.close()\n \n+def test_invert_log_scale_axis():\n+    # Test for inverting a log scale axis using its limits\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(100, 1)  # Attempt to invert the log scale axis\n+    assert ax.get_ylim() == (100, 1), \"Log scale axis limits not inverted properly\"\n+    plt.close()\n+\n+    fig, ax = plt.subplots()\n+    ax.set_xscale(\"log\")\n+    ax.set_xlim(100, 1)  # Test inverting x-axis in log scale\n+    assert ax.get_xlim() == (100, 1), \"Log scale x-axis limits not inverted properly\"\n+    plt.close()\n+\n+def test_invert_linear_scale_axis():\n+    # Ensure original behavior for linear scale inversion is preserved\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"linear\")\n+    ax.set_ylim(100, 1)\n+    assert ax.get_ylim() == (100, 1), \"Linear scale y-axis limits not inverted properly\"\n+    plt.close()\n+\n+    fig, ax = plt.subplots()\n+    ax.set_xscale(\"linear\")\n+    ax.set_xlim(100, 1)\n+    assert ax.get_xlim() == (100, 1), \"Linear scale x-axis limits not inverted properly\"\n+    plt.close()\n+\n     fig, ax = plt.subplots()\n     ax.invert_yaxis()\n     ax.plot([-5, -3, 2, 4], [1, 2, -3, 5])\n@@ -938,6 +966,34 @@ def test_inverted_limits():\n     assert ax.get_ylim() == (5, -3)\n     plt.close()\n \n+def test_invert_log_scale_axis():\n+    # Test for inverting a log scale axis using its limits\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(100, 1)  # Attempt to invert the log scale axis\n+    assert ax.get_ylim() == (100, 1), \"Log scale axis limits not inverted properly\"\n+    plt.close()\n+\n+    fig, ax = plt.subplots()\n+    ax.set_xscale(\"log\")\n+    ax.set_xlim(100, 1)  # Test inverting x-axis in log scale\n+    assert ax.get_xlim() == (100, 1), \"Log scale x-axis limits not inverted properly\"\n+    plt.close()\n+\n+def test_invert_linear_scale_axis():\n+    # Ensure original behavior for linear scale inversion is preserved\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"linear\")\n+    ax.set_ylim(100, 1)\n+    assert ax.get_ylim() == (100, 1), \"Linear scale y-axis limits not inverted properly\"\n+    plt.close()\n+\n+    fig, ax = plt.subplots()\n+    ax.set_xscale(\"linear\")\n+    ax.set_xlim(100, 1)\n+    assert ax.get_xlim() == (100, 1), \"Linear scale x-axis limits not inverted properly\"\n+    plt.close()\n+\n \n @image_comparison(baseline_images=['nonfinite_limits'])\n def test_nonfinite_limits():\n",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..e6ba24e 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6960,6 +6960,25 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[3].hist(np.arange(10), color=color.reshape((1, -1)))\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n+from matplotlib.testing.decorators import check_figures_equal\n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear(fig_test, fig_ref):\n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    # Reference plot without clearing axes\n+    axs_ref = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_ref.flat:\n+        ax.plot(x, y)\n+\n+    # Test plot with clearing axes\n+    axs_test = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_test.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n \n def test_shared_axes_retick():\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "diff --git a/lib/matplotlib/tests/test_category.py b/lib/matplotlib/tests/test_category.py\nindex 40c4dcf..07b1fd2 100644\n--- a/lib/matplotlib/tests/test_category.py\n+++ b/lib/matplotlib/tests/test_category.py\n@@ -307,8 +307,19 @@ def test_overriding_units_in_plot(fig_test, fig_ref):\n         assert y_units is ax.yaxis.units\n \n \n-def test_hist():\n+def test_no_deprecation_on_empty_data_with_categories():\n+    \"\"\"\n+    Test that no deprecation warning is emitted when plotting empty data\n+    with category units on the x-axis.\n+    \"\"\"\n+    import matplotlib.pyplot as plt\n+    with pytest.warns(None) as recorded_warnings:  # Use pytest to catch warnings\n+        f, ax = plt.subplots()\n+        ax.xaxis.update_units([\"a\", \"b\"])\n+        ax.plot([], [])\n+    assert not any(isinstance(w.message, MatplotlibDeprecationWarning) for w in recorded_warnings), \\\n+        \"Deprecation warning was emitted unexpectedly.\"\n     fig, ax = plt.subplots()\n     n, bins, patches = ax.hist(['a', 'b', 'a', 'c', 'ff'])\n     assert n.shape == (10,)\n-    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n+    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n",
  "matplotlib__matplotlib-22865": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex 2c28713..1c4524f 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -918,8 +918,31 @@ def test_proportional_colorbars():\n                                      extend=extends[i])\n             fig.colorbar(CS3, spacing=spacings[j], ax=axs[i, j])\n \n+from matplotlib.colors import from_levels_and_colors\n+import pytest\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import matplotlib.colors as mcolors\n+from matplotlib.colorbar import Colorbar\n \n-def test_negative_boundarynorm():\n+@pytest.mark.parametrize(\"extend, expected_num_segments\", [\n+    ('both', 4),  # Should have 4 dividers, including the two extremes\n+    ('min', 3),   # Should have 3 dividers, includes the lower extreme\n+    ('max', 3),   # Should have 3 dividers, includes the upper extreme\n+    ('neither', 2) # Default case, only internal dividers\n+])\n+def test_colorbar_extend_edges(extend, expected_num_segments):\n+    cmap = plt.get_cmap(\"viridis\")\n+    bounds = np.arange(3)\n+    colors = cmap(np.linspace(0, 1, len(bounds) + 1))\n+    cmap, norm = from_levels_and_colors(bounds, colors, extend=extend)\n+\n+    fig, ax = plt.subplots(figsize=(5, 1))\n+    cbar = Colorbar(ax, cmap=cmap, norm=norm, orientation='horizontal', drawedges=True)\n+    \n+    # Verify the number of divider segments matches our expectations\n+    segments = cbar.dividers.get_segments()\n+    assert len(segments) == expected_num_segments\n     fig, ax = plt.subplots(figsize=(1, 3))\n     cmap = plt.get_cmap(\"viridis\")\n \n",
  "matplotlib__matplotlib-23299": "",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..75e94e1 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -14,6 +14,7 @@ from matplotlib.collections import LineCollection, PolyCollection\n from matplotlib.patches import Circle\n \n import matplotlib.pyplot as plt\n+from matplotlib.testing.decorators import check_figures_equal\n import numpy as np\n \n \n@@ -21,7 +22,16 @@ mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n \n-def test_aspect_equal_error():\n+@check_figures_equal(extensions=[\"png\"])\n+def test_set_visible_on_3d_axes(fig_test, fig_ref):\n+    # Testing if 3D axes are invisible when set_visible(False) is applied\n+    ax = fig_test.add_subplot(111, projection='3d')\n+    ax.scatter([1], [1], [1])  # Add a simple scatter plot\n+    ax.set_visible(False)  # Make the axes invisible\n+\n+    ax_ref = fig_ref.add_subplot(111, projection='3d')\n+    ax_ref.scatter([1], [1], [1])  # Add a simple scatter plot\n+    # Reference should just be an empty plot without making axes invisible\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n     with pytest.raises(NotImplementedError):\n",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..c35eb30 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -148,6 +148,29 @@ def test_rotate_rect_draw(fig_test, fig_ref):\n     rect_test.set_angle(angle)\n     assert rect_test.get_angle() == angle\n \n+from matplotlib.testing.decorators import check_figures_equal\n+from matplotlib.patches import Rectangle\n+import matplotlib.pyplot as plt\n+\n+@check_figures_equal(extensions=['png'])\n+def test_dash_offset_patch_draw(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n+\n+    loc = (0.1, 0.1)\n+    width, height = (0.8, 0.8)\n+    \n+    # Reference: lines with no offset and with offset\n+    rect_ref = Rectangle(loc, width, height, linewidth=3, edgecolor='b', linestyle=(0, [6, 6]))\n+    rect_ref2 = Rectangle(loc, width, height, linewidth=3, edgecolor='r', linestyle=(6, [6, 6]))\n+    ax_ref.add_patch(rect_ref)\n+    ax_ref.add_patch(rect_ref2)\n+\n+    # Test: same lines; should match the reference\n+    rect_test = Rectangle(loc, width, height, linewidth=3, edgecolor='b', linestyle=(0, [6, 6]))\n+    rect_test2 = Rectangle(loc, width, height, linewidth=3, edgecolor='r', linestyle=(6, [6, 6]))\n+    ax_test.add_patch(rect_test)\n+    ax_test.add_patch(rect_test2)\n \n def test_negative_rect():\n     # These two rectangles have the same vertices, but starting from a\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..3141f81 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2866,8 +2866,18 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n-\n-@image_comparison(['stackplot_test_baseline'], remove_text=True)\n+def test_stackplot_with_color_aliases():\n+    import matplotlib.pyplot as plt\n+    from matplotlib.patches import Rectangle\n+    import numpy as np\n+\n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    fig, ax = plt.subplots()\n+    ax.plot([1, 3], [1, 3], color='C0')  # Using color alias 'C0'\n+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))  # Using color alias 'C1'\n+    # Attempt to use stackplot with color aliases; should not raise an error\n+    ax.stackplot([1, 2, 3], my_data, colors=['C2', 'C3', 'C4'])\n+    plt.show()\n def test_stackplot_baseline():\n     np.random.seed(0)\n \n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 45f9c04..d0d6a6d 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -13,7 +13,7 @@ from matplotlib.backend_bases import MouseButton, MouseEvent\n \n from matplotlib.offsetbox import (\n     AnchoredOffsetbox, AnnotationBbox, AnchoredText, DrawingArea, OffsetBox,\n-    OffsetImage, TextArea, _get_packed_offsets)\n+    OffsetImage, TextArea, _get_packed_offsets, HPacker, VPacker)\n \n \n @image_comparison(['offsetbox_clipping'], remove_text=True)\n@@ -327,7 +327,26 @@ def test_zorder():\n     assert OffsetBox(zorder=42).zorder == 42\n \n \n-def test_arrowprops_copied():\n+@pytest.mark.parametrize(\"align\", [\"bottom\", \"top\"])\n+def test_hpacker_align_top_bottom(align):\n+    # Test HPacker with align='top' and 'bottom' to verify correct behavior\n+    fig = plt.figure(dpi=72)\n+    x1, y1 = 10, 20\n+    x2, y2 = 10, 30\n+    r1 = DrawingArea(x1, y1)\n+    r2 = DrawingArea(x2, y2)\n+\n+    hpacker = HPacker(children=[r1, r2], pad=0, sep=0, align=align)\n+    renderer = fig.canvas.get_renderer()\n+\n+    # HPacker\n+    *extents, offset_pairs = hpacker.get_extent_offsets(renderer)\n+    # width, height, xdescent, ydescent should be same as length of total size + pads\n+    assert_allclose((x1 + x2, max(y1, y2), 0, 0), extents)\n+    \n+    # internal element placement\n+    y_height = 0 if align == \"bottom\" else y2 - y1\n+    assert_allclose([(0, y_height), (x1, 0)], offset_pairs)\n     da = DrawingArea(20, 20, 0, 0, clip=True)\n     arrowprops = {\"arrowstyle\": \"->\", \"relpos\": (.3, .7)}\n     ab = AnnotationBbox(da, [.5, .5], xybox=(-0.2, 0.5), xycoords='data',\n",
  "matplotlib__matplotlib-24627": "",
  "matplotlib__matplotlib-24637": "",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..da19bac 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -20,6 +20,21 @@ import matplotlib.scale as mscale\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n \n \n+import pytest\n+import numpy as np\n+from numpy.testing import assert_array_equal\n+import matplotlib as mpl\n+\n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.float16, float, np.int32])\n+def test_index_dtype_no_deprecation(dtype):\n+    cm = mpl.colormaps[\"viridis\"]\n+    with pytest.warns(None) as record:\n+        result = cm(dtype(0))\n+    # Ensure no warnings were raised\n+    assert len(record) == 0\n+    # Check that the result is as expected\n+    assert_array_equal(result, cm(0))\n+\n @pytest.mark.parametrize('N, result', [\n     (5, [1, .6, .2, .1, 0]),\n     (2, [1, 0]),\n",
  "matplotlib__matplotlib-25122": "",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..b337f80 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,6 +7801,30 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+def test_xaxis_offsetText_color():\n+    plt.rcParams['xtick.labelcolor'] = 'blue'\n+    ax = plt.axes()\n+    assert ax.xaxis.offsetText.get_color() == 'blue'\n+\n+    plt.rcParams['xtick.color'] = 'yellow'\n+    plt.rcParams['xtick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    assert ax.xaxis.offsetText.get_color() == 'yellow'\n+\n+\n+def test_yaxis_offsetText_color():\n+    plt.rcParams['ytick.labelcolor'] = 'green'\n+    ax = plt.axes()\n+    assert ax.yaxis.offsetText.get_color() == 'green'\n+\n+    plt.rcParams['ytick.color'] = 'red'\n+    plt.rcParams['ytick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    assert ax.yaxis.offsetText.get_color() == 'red'\n+\n+import matplotlib.pyplot as plt\n+import pytest\n+\n def test_ytickcolor_is_not_yticklabelcolor():\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..ec30277 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -89,8 +90,26 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n-\n @mpl.style.context(\"default\")\n+def test_pickle_figure_with_draggable_legend():\n+    fig, ax = plt.subplots()\n+    ax.plot([0, 1, 2], [3, 4, 5], label='line')\n+    legend = ax.legend()\n+    legend.set_draggable(True)\n+\n+    # Attempt to pickle the figure\n+    fig_pickle = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+\n+    # Ensure that the canvas is not part of the pickle stream\n+    assert \"FigureCanvasQTAgg\" not in [arg for op, arg, pos in pickletools.genops(fig_pickle)]\n+\n+    # Load the figure back\n+    loaded_fig = pickle.loads(fig_pickle)\n+    assert isinstance(loaded_fig, plt.Figure)\n+\n+    # Clean up\n+    plt.close(fig)\n+    plt.close(loaded_fig)\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..731cefd 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -35,6 +35,26 @@ def test_simple():\n \n     plt.figure()\n     plt.bar(x=np.arange(10), height=np.arange(10))\n+\n+    # Test pickling a figure after calling align_labels()\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+    \n+    # Call align_labels() and test pickling\n+    fig.align_labels()\n+\n+    pkl = BytesIO()\n+    pickle.dump(fig, pkl, pickle.HIGHEST_PROTOCOL)\n+    loaded = pickle.loads(pkl.getvalue())\n+    assert isinstance(loaded, plt.Figure)\n     pickle.dump(plt.gca(), BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n     fig = plt.figure()\n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..53e6a89 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -999,6 +999,48 @@ def test_hexbin_log_clim():\n     assert h.get_clim() == (2, 100)\n \n \n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_behavior_with_and_without_C(fig_test, fig_ref):\n+    # Test case for ensuring consistent behavior of mincnt with and without C parameter\n+    # see: gh:12926\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    # without C parameter\n+    ax_ref = fig_ref.subplots()\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+        cmap='Blues'\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # with C parameter\n+    ax_test = fig_test.subplots()\n+    ax_test.hexbin(\n+        X, Y,\n+        C=[1] * len(X),\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+        cmap='Blues'\n+    )\n+    ax_test.set_facecolor(\"green\")\n+\n def test_inverted_limits():\n     # Test gh:1553\n     # Calling invert_xaxis prior to plotting should not disable autoscaling\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex 700190c..fccd758 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -88,8 +88,41 @@ def test_contour_no_valid_levels():\n     # no warning if z is uniform.\n     ax.contour(np.ones((9, 9)))\n \n+from matplotlib.testing.decorators import check_figures_equal, image_comparison\n+from matplotlib import pyplot as plt\n+from numpy.testing import assert_array_equal\n+import numpy as np\n \n-def test_contour_Nlevels():\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths(fig_test, fig_ref):\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+    \n+    # Create a contour set for both test and reference figures\n+    cs_test = ax_test.contour([[0, 1], [1, 2]])\n+    cs_ref = ax_ref.contour([[1, 0], [2, 1]])\n+    \n+    # Transform paths from ref to test using the set_paths method\n+    cs_test.set_paths(cs_ref.get_paths())\n+    \n+    # Assert that the paths have been correctly transferred\n+    for path_test, path_ref in zip(cs_test.get_paths(), cs_ref.get_paths()):\n+        assert_array_equal(path_test.vertices, path_ref.vertices)\n+\n+def test_set_paths_with_transformation():\n+    fig, ax = plt.subplots()\n+    cs = ax.contour([[0, 1], [2, 3]])\n+    original_paths = cs.get_paths()\n+    \n+    # Manually transform paths (for test purposes, do an identity transform)\n+    transformed_paths = [path.transformed(ax.transData.get_affine()) for path in original_paths]\n+    \n+    # Use set_paths to apply the transformation\n+    cs.set_paths(transformed_paths)\n+    \n+    # Assert that the paths are equivalent to the manually transformed paths\n+    for path, transformed_path in zip(cs.get_paths(), transformed_paths):\n+        assert_array_equal(path.vertices, transformed_path.vertices)\n     # A scalar levels arg or kwarg should trigger auto level generation.\n     # https://github.com/matplotlib/matplotlib/issues/11913\n     z = np.arange(12).reshape((3, 4))\n",
  "mwaskom__seaborn-3069": "diff --git a/tests/_core/test_plot.py b/tests/_core/test_plot.py\nindex 3d202bc..2f21be1 100644\n--- a/tests/_core/test_plot.py\n+++ b/tests/_core/test_plot.py\n@@ -646,6 +646,11 @@ class TestScaling:\n             p.plot()\n \n \n+import pytest\n+import matplotlib as mpl\n+from seaborn import Plot\n+from seaborn._core.scales import Nominal\n+\n class TestPlotting:\n \n     def test_matplotlib_object_creation(self):\n@@ -661,7 +666,45 @@ class TestPlotting:\n         Plot().plot()\n         assert m.n_splits == 0\n \n-    def test_single_split_single_layer(self, long_df):\n+    def test_nominal_x_axis_tweaks(self):\n+\n+        p = Plot(x=[\"a\", \"b\", \"c\"], y=[1, 2, 3])\n+        ax1 = p.plot()._figure.axes[0]\n+        assert ax1.get_xlim() == (-.5, 2.5)\n+        assert not any(x.get_visible() for x in ax1.xaxis.get_gridlines())\n+\n+        lim = (-1, 2.1)\n+        ax2 = p.limit(x=lim).plot()._figure.axes[0]\n+        assert ax2.get_xlim() == lim\n+\n+    def test_nominal_y_axis_tweaks(self):\n+\n+        p = Plot(x=[1, 2, 3], y=[\"a\", \"b\", \"c\"])\n+        ax1 = p.plot()._figure.axes[0]\n+        assert ax1.get_ylim() == (2.5, -.5)\n+        assert not any(y.get_visible() for y in ax1.yaxis.get_gridlines())\n+\n+        lim = (-1, 2.1)\n+        ax2 = p.limit(y=lim).plot()._figure.axes[0]\n+        assert ax2.get_ylim() == lim\n+\n+    def test_nominal_axis_respects_user_grid_setting(self):\n+        \"\"\"Test that grids can be activated if the user explicitly requests.\"\"\"\n+        mpl.style.use('seaborn-darkgrid')\n+        p = Plot(x=[\"a\", \"b\", \"c\"], y=[1, 2, 3])\n+        ax = p.plot()._figure.axes[0]\n+        ax.grid(True)\n+        assert any(x.get_visible() for x in ax.xaxis.get_gridlines())\n+\n+    def test_nominal_axis_inversion_logic(self):\n+        \"\"\"Ensure y-axis inversion logic is correctly applied.\"\"\"\n+        p = Plot(x=[1, 2, 3], y=[\"a\", \"b\", \"c\"])\n+        ax = p.plot()._figure.axes[0]\n+        assert ax.get_ylim() == (2.5, -.5)\n+\n+        # Now invert and check\n+        ax.invert_yaxis()\n+        assert ax.get_ylim() == (-.5, 2.5)\n \n         m = MockMark()\n         p = Plot(long_df, x=\"f\", y=\"z\").add(m).plot()\n",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..459736d 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -244,6 +244,9 @@ def test_default_static_max_age(app):\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n \n+import pytest\n+import flask\n+\n def test_templates_list(test_apps):\n     from blueprintapp import app\n \n",
  "psf__requests-1142": "",
  "psf__requests-1724": "",
  "psf__requests-1766": "",
  "psf__requests-1921": "",
  "psf__requests-2317": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex 76c9998..12295f1 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -424,9 +424,57 @@ class Session(SessionRedirectMixin):\n         :param cert: (optional) if String, path to ssl client cert file (.pem).\n             If Tuple, ('cert', 'key') pair.\n         \"\"\"\n-\n+import requests\n+import pytest  # Assuming the use of pytest for testing.\n+import httpbin  # Assuming httpbin is set up for testing purposes.\n+\n+# Existing test function\n+def test_encoded_methods():\n+    \"\"\"See: https://github.com/kennethreitz/requests/issues/2316\"\"\"\n+    r = requests.request(b'GET', httpbin('get'))\n+    assert r.ok\n+\n+# New test functions\n+def test_encoded_methods_post():\n+    \"\"\"Test a POST request using a binary method.\"\"\"\n+    r = requests.request(b'POST', httpbin('post'), data={'key': 'value'})\n+    assert r.ok\n+\n+def test_encoded_methods_mixed_case():\n+    \"\"\"Test a GET request with a mixed-case binary method.\"\"\"\n+    r = requests.request(b'GeT', httpbin('get'))\n+    assert r.ok\n+\n+def test_invalid_encoded_method():\n+    \"\"\"Test an invalid binary HTTP method.\"\"\"\n+    with pytest.raises(requests.exceptions.RequestException):\n+        requests.request(b'INVALID', httpbin('invalid'))\n         method = builtin_str(method)\n-\n+import requests\n+import pytest  # Assuming the use of pytest for testing.\n+import httpbin  # Assuming httpbin is set up for testing purposes.\n+\n+# Existing test function\n+def test_encoded_methods():\n+    \"\"\"See: https://github.com/kennethreitz/requests/issues/2316\"\"\"\n+    r = requests.request(b'GET', httpbin('get'))\n+    assert r.ok\n+\n+# New test functions\n+def test_encoded_methods_post():\n+    \"\"\"Test a POST request using a binary method.\"\"\"\n+    r = requests.request(b'POST', httpbin('post'), data={'key': 'value'})\n+    assert r.ok\n+\n+def test_encoded_methods_mixed_case():\n+    \"\"\"Test a GET request with a mixed-case binary method.\"\"\"\n+    r = requests.request(b'GeT', httpbin('get'))\n+    assert r.ok\n+\n+def test_invalid_encoded_method():\n+    \"\"\"Test an invalid binary HTTP method.\"\"\"\n+    with pytest.raises(requests.exceptions.RequestException):\n+        requests.request(b'INVALID', httpbin('invalid'))\n         # Create the Request.\n         req = Request(\n             method = method.upper(),\n",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..3de6f29 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,6 +81,7 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://.example.com'),  # Test case for the issue\n         ))\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..ed92139 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2308,8 +2308,32 @@ class TestAsCompatibleData:\n         orig = Variable(dims=(\"x\"), data=array, attrs={\"foo\": \"bar\"})\n         assert isinstance(orig._data, CustomIndexable)\n \n+import numpy as np\n+import pytest\n+from xarray import Variable\n+\n+def test_setitem_no_coercion_on_values_property():\n+    # Test that __setitem__ does not coerce objects with a 'values' property\n+\n+    # A class with a 'values' property\n+    class HasValues:\n+        def __init__(self, value):\n+            self.values = value\n+\n+    # Create a Variable with object dtype\n+    obj_array = Variable(dims=(\"x\"), data=np.array([None], dtype=object))\n+\n+    # Assign an instance of HasValues to the Variable\n+    instance = HasValues(5)\n+    obj_array[0] = instance\n+\n+    # Assert that the instance is stored correctly, not coerced\n+    assert isinstance(obj_array.values[0], HasValues)\n+    assert obj_array.values[0].values == 5\n \n-def test_raise_no_warning_for_nan_in_binary_ops():\n+    # Test with a set object to ensure non-coercion\n+    obj_array[0] = set()\n+    assert isinstance(obj_array.values[0], set)\n     with pytest.warns(None) as record:\n         Variable(\"x\", [1, 2, np.NaN]) > 0\n     assert len(record) == 0\n",
  "pydata__xarray-3095": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex d6a4400..1679821 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -2069,7 +2069,22 @@ class TestDataset:\n \n             assert data.attrs['Test'] is not copied.attrs['Test']\n \n-    def test_copy_with_data(self):\n+    def test_copy_unicode_index(self):\n+        ds = xr.Dataset(\n+            coords={'x': ['foo'], 'y': ('x', ['bar'])},\n+            data_vars={'z': ('x', ['baz'])}\n+        )\n+        copied_ds = ds.copy(deep=True)\n+        \n+        # Ensure that the dtype of the 'x' coordinate is still unicode\n+        assert copied_ds.coords['x'].dtype.kind == 'U'\n+        assert copied_ds.coords['y'].dtype.kind == 'U'\n+        assert copied_ds.data_vars['z'].dtype.kind == 'U'\n+        \n+        copied_ds_shallow = ds.copy(deep=False)\n+        assert copied_ds_shallow.coords['x'].dtype.kind == 'U'\n+        assert copied_ds_shallow.coords['y'].dtype.kind == 'U'\n+        assert copied_ds_shallow.data_vars['z'].dtype.kind == 'U'\n         orig = create_test_data()\n         new_data = {k: np.random.randn(*v.shape)\n                     for k, v in orig.data_vars.items()}\n",
  "pydata__xarray-3151": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 026dec9..4f312eb 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -611,7 +611,31 @@ class TestCombineAuto:\n         expected = Dataset({'x': 0, 'y': 1, 'z': 2})\n         assert_identical(expected, actual)\n \n-    def test_check_for_impossible_ordering(self):\n+    def test_non_monotonic_identical_coords(self):\n+        # Test for non-monotonic, identical coordinate dimensions\n+        yCoord = ['a', 'c', 'b']\n+\n+        data1 = np.random.rand(3, 3)\n+        data2 = np.random.rand(4, 3)\n+\n+        ds1 = Dataset(\n+            data_vars=dict(data=(['x', 'y'], data1)),\n+            coords=dict(x=[1, 2, 3], y=yCoord)\n+        )\n+\n+        ds2 = Dataset(\n+            data_vars=dict(data=(['x', 'y'], data2)),\n+            coords=dict(x=[4, 5, 6, 7], y=yCoord)\n+        )\n+\n+        expected_data = np.concatenate([data1, data2], axis=0)\n+        expected = Dataset(\n+            data_vars=dict(data=(['x', 'y'], expected_data)),\n+            coords=dict(x=[1, 2, 3, 4, 5, 6, 7], y=yCoord)\n+        )\n+\n+        actual = combine_by_coords([ds1, ds2])\n+        assert_identical(expected, actual)\n         ds0 = Dataset({'x': [0, 1, 5]})\n         ds1 = Dataset({'x': [2, 3]})\n         with raises_regex(ValueError, \"does not have monotonic global indexes\"\n",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..51f1afb 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2310,6 +2310,28 @@ class TestDataArray:\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n \n+    def test_quantile_keep_attrs(self):\n+        # Test if attributes are kept when keep_attrs=True\n+        da = DataArray([0, 0], dims=\"x\", attrs={'units': 'K'})\n+        result = da.quantile(.9, dim='x', keep_attrs=True)\n+        assert result.attrs == {'units': 'K'}\n+\n+        # Test if attributes are not kept when keep_attrs=False\n+        result_no_attrs = da.quantile(.9, dim='x', keep_attrs=False)\n+        assert result_no_attrs.attrs == {}\n+\n+        # Test with multiple quantiles and keep_attrs=True\n+        result_multi = da.quantile([0.1, 0.9], dim='x', keep_attrs=True)\n+        assert result_multi.attrs == {'units': 'K'}\n+\n+        # Test with multiple quantiles and keep_attrs=False\n+        result_multi_no_attrs = da.quantile([0.1, 0.9], dim='x', keep_attrs=False)\n+        assert result_multi_no_attrs.attrs == {}\n+\n+        # Test with no dimension specified (should result in single value)\n+        result_no_dim = da.quantile(.5, keep_attrs=True)\n+        assert result_no_dim.attrs == {'units': 'K'}\n+\n     def test_reduce_keep_attrs(self):\n         # Test dropped attrs\n         vm = self.va.mean()\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..ff12791 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,8 +1,10 @@\n+\n import numpy as np\n import pytest\n \n import xarray as xr\n from xarray.core import dtypes, merge\n+from xarray.testing import assert_identical\n \n from . import raises_regex\n from .test_dataset import create_test_data\n@@ -159,6 +161,15 @@ class TestMergeMethod:\n         with raises_regex(ValueError, \"should be coordinates or not\"):\n             data.merge(data.reset_coords())\n \n+    def test_merge_dataarray(self):\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+\n+        # Check that ds.merge(da) works as expected\n+        expected = xr.merge([ds, da])\n+        actual = ds.merge(da)\n+        assert_identical(actual, expected)\n+\n     def test_merge_broadcast_equals(self):\n         ds1 = xr.Dataset({\"x\": 0})\n         ds2 = xr.Dataset({\"x\": (\"y\", [0, 0])})\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "diff --git a/xarray/tests/test_duck_array_ops.py b/xarray/tests/test_duck_array_ops.py\nindex 0c63f0f..ccf3228 100644\n--- a/xarray/tests/test_duck_array_ops.py\n+++ b/xarray/tests/test_duck_array_ops.py\n@@ -595,7 +595,20 @@ def test_min_count(dim_num, dtype, dask, func, aggdim):\n     assert_dask_array(actual, dask)\n \n \n+@pytest.mark.parametrize(\"dtype\", [float, int, np.float32, np.bool_])\n+@pytest.mark.parametrize(\"dask\", [False, True])\n @pytest.mark.parametrize(\"func\", [\"sum\", \"prod\"])\n+def test_min_count_multiple_dims(dtype, dask, func):\n+    if dask and not has_dask:\n+        pytest.skip(\"requires dask\")\n+    da = construct_dataarray(3, dtype, contains_nan=True, dask=dask)\n+\n+    # Test min_count with multiple dimensions\n+    min_count = 3\n+    actual = getattr(da, func)(dim=[\"x\", \"y\", \"z\"], skipna=True, min_count=min_count)\n+    expected = getattr(da, func)(dim=..., skipna=True, min_count=min_count)\n+    assert_allclose(actual, expected)\n+    assert_dask_array(actual, dask)\n def test_min_count_dataset(func):\n     da = construct_dataarray(2, dtype=float, contains_nan=True, dask=False)\n     ds = Dataset({\"var1\": da}, coords={\"scalar\": 0})\n@@ -604,9 +617,22 @@ def test_min_count_dataset(func):\n     assert_allclose(actual, expected)\n \n \n+@pytest.mark.parametrize(\"dtype\", [float, int, np.float32, np.bool_])\n+@pytest.mark.parametrize(\"dask\", [False, True])\n @pytest.mark.parametrize(\"dtype\", [float, int, np.float32, np.bool_])\n @pytest.mark.parametrize(\"dask\", [False, True])\n @pytest.mark.parametrize(\"func\", [\"sum\", \"prod\"])\n+def test_min_count_multiple_dims(dtype, dask, func):\n+    if dask and not has_dask:\n+        pytest.skip(\"requires dask\")\n+    da = construct_dataarray(3, dtype, contains_nan=True, dask=dask)\n+\n+    # Test min_count with multiple dimensions\n+    min_count = 3\n+    actual = getattr(da, func)(dim=[\"x\", \"y\", \"z\"], skipna=True, min_count=min_count)\n+    expected = getattr(da, func)(dim=..., skipna=True, min_count=min_count)\n+    assert_allclose(actual, expected)\n+    assert_dask_array(actual, dask)\n def test_multiple_dims(dtype, dask, func):\n     if dask and not has_dask:\n         pytest.skip(\"requires dask\")\n",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..8610c89 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -109,7 +109,26 @@ class TestMergeFunction:\n             expected.attrs = expected_attrs\n             assert actual.identical(expected)\n \n-    def test_merge_dicts_simple(self):\n+    def test_merge_attrs_override_copy(self):\n+        # Initial datasets with distinct attributes\n+        ds1 = xr.Dataset(attrs={\"key1\": \"value1\"})\n+        ds2 = xr.Dataset(attrs={\"key1\": \"value2\"})\n+        \n+        # Merge with combine_attrs='override'\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        \n+        # Modify the merged dataset's attributes\n+        ds3.attrs[\"key1\"] = \"new_value\"\n+        \n+        # Ensure the original datasets' attributes are unchanged\n+        assert ds1.attrs[\"key1\"] == \"value1\"\n+        assert ds2.attrs[\"key1\"] == \"value2\"\n+        assert ds3.attrs[\"key1\"] == \"new_value\"\n+\n+        # Additional check: Modify original and ensure merged dataset is unaffected\n+        ds1.attrs[\"key1\"] = \"changed_value1\"\n+        assert ds1.attrs[\"key1\"] == \"changed_value1\"\n+        assert ds3.attrs[\"key1\"] == \"new_value\"\n         actual = xr.merge([{\"foo\": 0}, {\"bar\": \"one\"}, {\"baz\": 3.5}])\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n         assert actual.identical(expected)\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..c755c1e 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1921,6 +1921,27 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n+def test_where_attrs() -> None:\n+    # Test for preserving the attributes when keep_attrs=True\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+\n+    # Test with keep_attrs=True\n+    actual = xr.where(cond, x, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected, actual)\n+\n+    # Test with keep_attrs=False (default behavior)\n+    actual = xr.where(cond, x, y, keep_attrs=False)\n+    expected = xr.DataArray([1, 0], dims=\"x\")\n+    assert_identical(expected, actual)\n+\n+    # Test with implicit keyword argument (default keep_attrs=False)\n+    actual = xr.where(cond, x, y)\n+    expected = xr.DataArray([1, 0], dims=\"x\")\n+    assert_identical(expected, actual)\n+\n \n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n",
  "pydata__xarray-4695": "",
  "pydata__xarray-4966": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex 2dbb0b4..0e1a67c 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -13,8 +13,33 @@ from . import assert_allclose, assert_equal, assert_identical, requires_dask\n with suppress(ImportError):\n     import dask.array as da\n \n+import numpy as np\n \n-def test_CFMaskCoder_decode():\n+@pytest.mark.parametrize(\"bits\", [1, 2, 4, 8])\n+def test_decode_unsigned_from_signed(bits):\n+    unsigned_dtype = np.dtype(f\"u{bits}\")\n+    signed_dtype = np.dtype(f\"i{bits}\")\n+    original_values = np.array([np.iinfo(unsigned_dtype).max], dtype=unsigned_dtype)\n+    encoded = xr.Variable(\n+        (\"x\",), original_values.astype(signed_dtype), attrs={\"_Unsigned\": \"true\"}\n+    )\n+    coder = variables.UnsignedIntegerCoder()\n+    decoded = coder.decode(encoded)\n+    assert decoded.dtype == unsigned_dtype\n+    assert np.array_equal(decoded.values, original_values)\n+\n+@pytest.mark.parametrize(\"bits\", [1, 2, 4, 8])\n+def test_decode_signed_from_unsigned(bits):\n+    unsigned_dtype = np.dtype(f\"u{bits}\")\n+    signed_dtype = np.dtype(f\"i{bits}\")\n+    original_values = np.array([-1], dtype=signed_dtype)\n+    encoded = xr.Variable(\n+        (\"x\",), original_values.astype(unsigned_dtype), attrs={\"_Unsigned\": \"false\"}\n+    )\n+    coder = variables.UnsignedIntegerCoder()\n+    decoded = coder.decode(encoded)\n+    assert decoded.dtype == signed_dtype\n+    assert np.array_equal(decoded.values, original_values)\n     original = xr.Variable((\"x\",), [0, -1, 1], {\"_FillValue\": -1})\n     expected = xr.Variable((\"x\",), [0, np.nan, 1])\n     coder = variables.CFMaskCoder()\n",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..d32697a 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1928,6 +1928,25 @@ def test_where_attrs() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n     assert_identical(expected, actual)\n \n+def test_where_scalar_with_keep_attrs_true() -> None:\n+    # Test using scalar values for x and y with keep_attrs=True\n+    cond = xr.DataArray([True, False, True], dims=\"x\")\n+    actual_scalar_x = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected_scalar_x = xr.DataArray([1, 0, 1], dims=\"x\")\n+    assert_identical(expected_scalar_x, actual_scalar_x)\n+\n+    # Test with scalar x and y and DataArray cond\n+    cond_with_attrs = xr.DataArray([True, False, True], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    actual_scalar_with_attrs = xr.where(cond_with_attrs, 1, 0, keep_attrs=True)\n+    expected_scalar_with_attrs = xr.DataArray([1, 0, 1], dims=\"x\")\n+    assert_identical(expected_scalar_with_attrs, actual_scalar_with_attrs)\n+\n+    # Ensure keep_attrs doesn't affect the actual DataArray content when using scalar x or y\n+    cond = xr.DataArray([False, True, False], dims=\"x\")\n+    actual_scalar_y = xr.where(cond, 0, 1, keep_attrs=True)\n+    expected_scalar_y = xr.DataArray([1, 0, 1], dims=\"x\")\n+    assert_identical(expected_scalar_y, actual_scalar_y)\n+\n \n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n",
  "pydata__xarray-6599": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f1ec005..d8b1dba 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -2010,6 +2010,40 @@ def test_where_attrs() -> None:\n             ),\n             id=\"datetime\",\n         ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array([1000, 2000, 3000], dtype=\"timedelta64[ns]\"), dims=\"x\"\n+            ),\n+            xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n+            xr.DataArray([1000.0, 2000.0, 3000.0], dims=\"x\"),\n+            id=\"timedelta\",\n+        ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array(\n+                    [\"2021-04-01T05:25:19\", \"2021-04-01T05:25:29\", \"2021-04-01T05:25:39\"],\n+                    dtype=\"datetime64[ns]\"\n+                ), \n+                dims=\"x\",\n+                coords={\"x\": np.array([0, 10, 20], dtype=\"timedelta64[s]\")}\n+            ),\n+            xr.DataArray(\n+                [[2.33333335e-43, 1.62499999e-43, 2.79166678e-43],\n+                 [-1.15316667e-30, 1.49518518e-31, 9.08833333e-31],\n+                 [-2.50272583e-18, -1.23851062e-18, -2.99098229e-18],\n+                 [5.83965193e-06, -1.53321770e-07, -4.84640242e-06],\n+                 [4.44739216e06, 1.45053974e06, 5.29960857e06]],\n+                dims=(\"degree\", \"axis\"),\n+                coords={\"axis\": [0, 1, 2], \"degree\": [4, 3, 2, 1, 0]}\n+            ),\n+            xr.DataArray(\n+                [[4447392.16, 1450539.74, 5299608.57],\n+                 [4505537.25588366, 1448882.82238152, 5250846.359196],\n+                 [4563174.92026797, 1446979.12250014, 5201491.44401733]],\n+                dims=(\"x\", \"axis\")\n+            ),\n+            id=\"datetime_with_polyfit\",\n+        ),\n     ],\n )\n def test_polyval(\n",
  "pydata__xarray-6721": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex cab9007..b239450 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -221,7 +221,17 @@ class InaccessibleVariableDataStore(backends.InMemoryDataStore):\n \n \n class TestDataset:\n-    def test_repr(self) -> None:\n+    @requires_zarr\n+    def test_chunks_does_not_load_data(self) -> None:\n+        # This is a test for the issue where accessing the chunks attribute\n+        # unnecessarily loads the entire dataset into memory.\n+        url = \"https://ncsa.osn.xsede.org/Pangeo/pangeo-forge/swot_adac/FESOM/surf/fma.zarr\"\n+        ds = xr.open_dataset(url, engine='zarr')\n+        \n+        # Accessing chunks should not trigger loading the data into memory\n+        # We should verify that no data is accessed when calling ds.chunks\n+        with pytest.raises(UnexpectedDataAccess, match=r\"unexpected data access\"):\n+            ds.chunks\n         data = create_test_data(seed=123)\n         data.attrs[\"foo\"] = \"bar\"\n         # need to insert str dtype at runtime to handle different endianness\n",
  "pydata__xarray-6744": "diff --git a/xarray/tests/test_rolling.py b/xarray/tests/test_rolling.py\nindex 0a9ef75..7ff1035 100644\n--- a/xarray/tests/test_rolling.py\n+++ b/xarray/tests/test_rolling.py\n@@ -26,7 +26,28 @@ pytestmark = [\n \n \n class TestDataArrayRolling:\n-    @pytest.mark.parametrize(\"da\", (1, 2), indirect=True)\n+    @pytest.mark.parametrize(\"center\", [True, False])\n+    @pytest.mark.parametrize(\"size\", [1, 2, 3, 7])\n+    def test_rolling_iter_center(self, center, size) -> None:\n+        my_data = xr.DataArray(np.arange(1, 10), dims=\"x\")\n+        rolling_obj = my_data.rolling(x=size, center=center)\n+        rolling_obj_mean = rolling_obj.mean()\n+\n+        # Verify manual iteration\n+        result_manual = [window.mean().values.item() for label, window in rolling_obj]\n+        result_auto = rolling_obj_mean.values\n+\n+        if center:\n+            # Results should be center-justified\n+            expected = np.full_like(result_auto, np.nan)\n+            half_window = size // 2\n+            expected[half_window:len(my_data) - half_window] = np.arange(1, len(my_data) - size + 2)\n+            np.testing.assert_array_equal(result_manual, expected)\n+        else:\n+            # No center justification\n+            expected = np.arange(1, len(my_data) - size + 2)\n+            expected = np.concatenate((np.full(size - 1, np.nan), expected))\n+            np.testing.assert_array_equal(result_manual, expected)\n     def test_rolling_iter(self, da) -> None:\n         rolling_obj = da.rolling(time=7)\n         rolling_obj_mean = rolling_obj.mean()\n",
  "pydata__xarray-7233": "diff --git a/xarray/core/rolling.py b/xarray/core/rolling.py\nindex d923cdb..34038b5 100644\n--- a/xarray/core/rolling.py\n+++ b/xarray/core/rolling.py\n@@ -960,8 +960,13 @@ class Coarsen(CoarsenArithmetic, Generic[T_Xarray]):\n             obj = self.obj\n \n         reshaped.attrs = obj.attrs if keep_attrs else {}\n+        # Testing the fix for demoted non-dimensional coordinates issue\n+        # Add additional test case to ensure coordinates remain after coarsen.construct\n \n         for key, var in obj.variables.items():\n+            dim_is_coord = [dim in self.obj.coords for dim in var.dims]\n+            if all(dim_is_coord) and key in self.obj.coords:\n+                reshaped.coords[key] = var\n             reshaped_dims = tuple(\n                 itertools.chain(*[window_dim.get(dim, [dim]) for dim in list(var.dims)])\n             )\n",
  "pydata__xarray-7393": "",
  "pylint-dev__pylint-4970": "diff --git a/tests/checkers/unittest_similar.py b/tests/checkers/unittest_similar.py\nindex 97cd4d0..18063ef 100644\n--- a/tests/checkers/unittest_similar.py\n+++ b/tests/checkers/unittest_similar.py\n@@ -493,12 +493,44 @@ def test_get_map_data() -> None:\n             sim.append_stream(source_fname, stream)\n         # The map bit, can you tell? ;)\n         data.extend(sim.get_map_data())\n+import pytest\n+from io import StringIO\n+from contextlib import redirect_stdout\n+from pylint.checkers.similar import Run\n+\n+def test_set_duplicate_lines_to_zero() -> None:\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        Run([\"--duplicates=0\", \"file1.py\", \"file2.py\"])\n+    # Test that it exits without finding duplicates\n+    assert ex.value.code == 0\n+    assert output.getvalue() == \"\"\n \n-    assert len(expected_linelists) == len(data)\n+def test_no_arguments_passed() -> None:\n+    with pytest.raises(SystemExit) as ex:\n+        Run([])\n+    # Test that it exits with an error code if no files are provided\n+    assert ex.value.code == 1\n+\n+def test_ignore_comments_option() -> None:\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        Run([\"--duplicates=1\", \"--ignore-comments\", \"file1.py\", \"file2.py\"])\n+    # Ensure code runs and exits without error, modify based on expected behavior\n+    assert ex.value.code == 0  # Assuming no duplicates found with comments ignored\n+    assert \"file1.py\" in output.getvalue()\n+\n+def test_ignore_docstrings_option() -> None:\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        Run([\"--duplicates=1\", \"--ignore-docstrings\", \"file1.py\", \"file2.py\"])\n+    # Ensure code runs and exits without error, modify based on expected behavior\n+    assert ex.value.code == 0  # Assuming no duplicates found with docstrings ignored\n+    assert \"file1.py\" in output.getvalue()\n     for source_fname, expected_lines, lineset_obj in zip(\n         source_streams, expected_linelists, data\n     ):\n         assert source_fname == lineset_obj.name\n         # There doesn't seem to be a faster way of doing this, yet.\n         lines = (linespec.text for linespec in lineset_obj.stripped_lines)\n-        assert tuple(expected_lines) == tuple(lines)\n+        assert tuple(expected_lines) == tuple(lines)\n",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..04d6214 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -94,9 +94,25 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+import pytest\n+from pylint.lint import Run\n+from _pytest.capture import CaptureFixture\n+\n+def test_short_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the -v flag.\"\"\"\n+    Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n+def test_long_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the --verbose flag.\"\"\"\n+    Run([str(EMPTY_MODULE), \"--verbose\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex d5ccd91..24d4315 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -863,8 +863,33 @@ def test_by_module_statement_value(initialized_linter: PyLinter) -> None:\n         # computed for that module\n         assert module_stats[\"statement\"] == linter2.stats.statement\n \n+import os\n+from pylint.lint import Run\n+from os.path import join\n+import pytest\n+\n+@pytest.mark.parametrize(\n+    \"ignore_parameter,ignore_value\",\n+    [\n+        (\"--ignore\", \".a\"),\n+        (\"--ignore-patterns\", \"^\\\\.a\"),\n+        (\"--ignore-paths\", \"^\\\\.a\")\n+    ],\n+)\n+def test_pylint_recursive_ignore(ignore_parameter, ignore_value) -> None:\n+    \"\"\"Test that Pylint ignores files according to ignore patterns in recursive mode.\"\"\"\n+    run = Run(\n+        [\"--recursive=y\", ignore_parameter, ignore_value, \".\"],\n+        exit=False,\n+    )\n+\n+    linted_files = run.linter._iterate_file_descrs(\n+        tuple(run.linter._discover_files([\".\"]))\n+    )\n+    linted_file_paths = [file_item.filepath for file_item in linted_files]\n \n-def test_import_sibling_module_from_namespace(initialized_linter: PyLinter) -> None:\n+    ignored_file = os.path.abspath(\".a/foo.py\")\n+    assert ignored_file not in linted_file_paths\n     \"\"\"If the parent directory above `namespace` is on sys.path, ensure that\n     modules under `namespace` can import each other without raising `import-error`.\"\"\"\n     linter = initialized_linter\n",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "",
  "pylint-dev__pylint-7277": "",
  "pytest-dev__pytest-10051": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex 26c4c15..17acfd6 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -159,8 +159,40 @@ def logging_during_setup_and_teardown(caplog):\n     logger.info(\"a_teardown_log\")\n     assert [x.message for x in caplog.get_records(\"teardown\")] == [\"a_teardown_log\"]\n \n+def test_caplog_clear_and_get_records_consistency(caplog):\n+    \"\"\"Test that caplog.get_records() remains consistent with caplog.records after clear().\"\"\"\n \n-def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardown):\n+    # Logging before clearing\n+    logger.info(\"initial_log\")\n+    assert [record.message for record in caplog.records] == [\"initial_log\"]\n+    assert [record.message for record in caplog.get_records(\"call\")] == [\"initial_log\"]\n+\n+    caplog.clear()\n+\n+    # Verify that records and get_records(\"call\") are both cleared\n+    assert caplog.records == []\n+    assert caplog.get_records(\"call\") == []\n+\n+    # Logging after clearing\n+    logger.info(\"log_after_clear\")\n+    assert [record.message for record in caplog.records] == [\"log_after_clear\"]\n+    assert [record.message for record in caplog.get_records(\"call\")] == [\"log_after_clear\"]\n+\n+def test_caplog_multiple_clears(caplog):\n+    \"\"\"Test caplog behavior when clear is called multiple times.\"\"\"\n+\n+    logger.info(\"first_log\")\n+    caplog.clear()\n+\n+    logger.info(\"second_log\")\n+    assert [record.message for record in caplog.records] == [\"second_log\"]\n+    assert [record.message for record in caplog.get_records(\"call\")] == [\"second_log\"]\n+\n+    caplog.clear()\n+\n+    # Ensure everything is cleared after second clear\n+    assert caplog.records == []\n+    assert caplog.get_records(\"call\") == []\n     assert not caplog.records\n     assert not caplog.get_records(\"call\")\n     logger.info(\"a_call_log\")\n",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_debugging.py b/testing/test_debugging.py\nindex 912abd7..87cb2eb 100644\n--- a/testing/test_debugging.py\n+++ b/testing/test_debugging.py\n@@ -192,6 +192,49 @@ class TestPDB:\n         child.sendeof()\n         self.flush(child)\n \n+    def test_pdb_unittest_teardown_not_called_for_skipped_classes(self, pytester: Pytester) -> None:\n+        \"\"\"Ensure tearDown is not called for classes skipped with unittest.skip\"\"\"\n+        p1 = pytester.makepyfile(\n+            \"\"\"\n+            import unittest\n+            import pytest\n+\n+            tracked_teardowns = []\n+\n+            @unittest.skip(\"class skipped\")\n+            class MyTestCase(unittest.TestCase):\n+                def setUp(self):\n+                    pass\n+\n+                def test_something(self):\n+                    pass\n+\n+                def tearDown(self):\n+                    tracked_teardowns.append(self.id())\n+\n+            def test_teardown_not_called():\n+                assert not tracked_teardowns, \"tearDown should not be called for skipped classes\"\n+        \"\"\"\n+        )\n+        result = pytester.runpytest_inprocess(\"--pdb\", p1)\n+        result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n+        assert \"tearDown should not be called for skipped classes\" not in result.stdout.str()\n+        \"\"\"Test for issue #2137\"\"\"\n+        p1 = pytester.makepyfile(\n+            \"\"\"\n+            import unittest\n+            @unittest.skipIf(True, 'Skipping also with pdb active')\n+            class MyTestCase(unittest.TestCase):\n+                def test_one(self):\n+                    assert 0\n+        \"\"\"\n+        )\n+        child = pytester.spawn_pytest(f\"-rs --pdb {p1}\")\n+        child.expect(\"Skipping also with pdb active\")\n+        child.expect_exact(\"= 1 skipped in\")\n+        child.sendeof()\n+        self.flush(child)\n+\n     def test_pdb_print_captured_stdout_and_stderr(self, pytester: Pytester) -> None:\n         p1 = pytester.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-5262": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 1f092b0..467db5f 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -1042,6 +1042,22 @@ class TestFDCapture(object):\n             os.write(1, b\"world\")\n             sys.stdout.write(\"qlwkej\")\n             assert not cap.snap()\n+\n+    def test_capfd_sys_stdout_mode(self, capfd):\n+        # Ensure 'b' is not in sys.stdout.mode\n+        captured = capfd.readouterr()\n+        assert \"b\" not in sys.stdout.mode\n+\n+    def test_write_string_to_encoded_file(self, capfd):\n+        # This tests that writing a string to the encoded file works as expected\n+        sys.stdout.write(\"This is a test.\\n\")\n+        captured = capfd.readouterr()\n+        assert captured.out == \"This is a test.\\n\"\n+\n+    def test_encoded_file_rejects_bytes(self, capfd):\n+        # This tests that writing bytes raises a TypeError as expected\n+        with pytest.raises(TypeError):\n+            sys.stdout.buffer.write(b\"This is a byte test.\\n\")\n             cap.resume()\n             os.write(1, b\"but now\")\n             sys.stdout.write(\" yes\\n\")\n",
  "pytest-dev__pytest-5631": "",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..ca71360 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -116,7 +116,7 @@ class TestPaste(object):\n             monkeypatch.setattr(urllib, \"urlopen\", mocked)\n         else:\n             import urllib.request\n-\n+            \n             monkeypatch.setattr(urllib.request, \"urlopen\", mocked)\n         return calls\n \n@@ -126,8 +126,19 @@ class TestPaste(object):\n         assert len(mocked_urlopen) == 1\n         url, data = mocked_urlopen[0]\n         assert type(data) is bytes\n-        lexer = \"python3\" if sys.version_info[0] >= 3 else \"python\"\n         assert url == \"https://bpaste.net\"\n-        assert \"lexer=%s\" % lexer in data.decode()\n+        assert \"lexer=text\" in data.decode()  # The lexer should be 'text' now\n         assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n+\n+    def test_create_new_paste_with_special_content(self, pastebin, mocked_urlopen):\n+        special_content = b'Some special content with symbols !@#$%^&*()'\n+        result = pastebin.create_new_paste(special_content)\n+        assert result == \"https://bpaste.net/show/3c0c6750bd\"\n+        assert len(mocked_urlopen) == 1\n+        url, data = mocked_urlopen[0]\n+        assert type(data) is bytes\n+        assert url == \"https://bpaste.net\"\n+        assert \"lexer=text\" in data.decode()  # Ensure lexer is 'text'\n+        assert \"code=Some+special+content+with+symbols+%21%40%23%24%25%5E%26%2A%28%29\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n",
  "pytest-dev__pytest-6202": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex fb6b260..831679c 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -673,6 +673,27 @@ class Test_genitems:\n                 pass\n         \"\"\"\n         )\n+\n+        p_with_special_param = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+\n+            @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+            def test_special_characters(arg0):\n+                pass\n+\n+            class TestZ:\n+                @pytest.mark.parametrize(\"arg1\", [\"..[\"])\n+                def test_special_characters_in_class(self, arg1):\n+                    pass\n+            \"\"\"\n+        )\n+        items_with_special_param, _ = testdir.inline_genitems(p_with_special_param)\n+        assert len(items_with_special_param) == 2\n+        assert items_with_special_param[0].name == \"test_special_characters[.[]\"\n+        assert items_with_special_param[0].getmodpath() == \"test_special_characters[.[]\"\n+        assert items_with_special_param[1].name == \"test_special_characters_in_class[..[]\"\n+        assert items_with_special_param[1].getmodpath() == \"TestZ.test_special_characters_in_class[..[]\"\n         p.copy(p.dirpath(p.purebasename + \"2\" + \".py\"))\n         items, reprec = testdir.inline_genitems(p.dirpath())\n         assert len(items) == 4\n@@ -696,6 +717,27 @@ class Test_genitems:\n                 pass\n         \"\"\"\n         )\n+\n+        p_with_special_param = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+\n+            @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+            def test_special_characters(arg0):\n+                pass\n+\n+            class TestZ:\n+                @pytest.mark.parametrize(\"arg1\", [\"..[\"])\n+                def test_special_characters_in_class(self, arg1):\n+                    pass\n+            \"\"\"\n+        )\n+        items_with_special_param, _ = testdir.inline_genitems(p_with_special_param)\n+        assert len(items_with_special_param) == 2\n+        assert items_with_special_param[0].name == \"test_special_characters[.[]\"\n+        assert items_with_special_param[0].getmodpath() == \"test_special_characters[.[]\"\n+        assert items_with_special_param[1].name == \"test_special_characters_in_class[..[]\"\n+        assert items_with_special_param[1].getmodpath() == \"TestZ.test_special_characters_in_class[..[]\"\n         items, reprec = testdir.inline_genitems(p)\n         assert len(items) == 3\n         assert items[0].name == \"testone\"\n",
  "pytest-dev__pytest-7205": "diff --git a/testing/test_setuponly.py b/testing/test_setuponly.py\nindex 8211d39..31f337a 100644\n--- a/testing/test_setuponly.py\n+++ b/testing/test_setuponly.py\n@@ -1,3 +1,4 @@\n+\n import pytest\n from _pytest.config import ExitCode\n \n@@ -200,6 +201,21 @@ def test_show_fixtures_with_parameter_ids_function(testdir, mode):\n \n     result.stdout.fnmatch_lines([\"*SETUP    F foobar?FOO?\", \"*SETUP    F foobar?BAR?\"])\n \n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue: BytesWarning when using --setup-show with bytes parameter\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n+\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n \n def test_dynamic_fixture_request(testdir):\n     p = testdir.makepyfile(\n",
  "pytest-dev__pytest-7236": "diff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py\nindex 28ce115..55ec807 100644\n--- a/src/_pytest/unittest.py\n+++ b/src/_pytest/unittest.py\n@@ -210,7 +210,42 @@ class TestCaseFunction(Function):\n \n         maybe_wrap_pytest_function_for_tracing(self)\n \n+        import pytest\n+\n         # let the unittest framework handle async functions\n+\n+        @pytest.mark.parametrize(\"mark\", [\"@unittest.skip\", \"@pytest.mark.skip\"])\n+        def test_pdb_teardown_skipped(testdir, monkeypatch, mark):\n+            \"\"\"\n+            With --pdb, setUp and tearDown should not be called for skipped tests.\n+            \"\"\"\n+            tracked = []\n+            monkeypatch.setattr(pytest, \"test_pdb_teardown_skipped\", tracked, raising=False)\n+\n+            testdir.makepyfile(\n+                \"\"\"\n+                import unittest\n+                import pytest\n+\n+                class MyTestCase(unittest.TestCase):\n+\n+                    def setUp(self):\n+                        pytest.test_pdb_teardown_skipped.append(\"setUp:\" + self.id())\n+\n+                    def tearDown(self):\n+                        pytest.test_pdb_teardown_skipped.append(\"tearDown:\" + self.id())\n+\n+                    {mark}(\"skipped for reasons\")\n+                    def test_1(self):\n+                        pass\n+\n+                \"\"\".format(\n+                    mark=mark\n+                )\n+            )\n+            result = testdir.runpytest_inprocess(\"--pdb\")\n+            result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n+            assert tracked == []\n         if is_async_function(self.obj):\n             self._testcase(self)\n         else:\n",
  "pytest-dev__pytest-7432": "",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..20b7dc2 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -545,6 +546,32 @@ class TestXFail:\n         assert result.ret == (1 if strict else 0)\n \n \n+class TestDynamicXFail:\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Issue #7486: Test that dynamically adding an xfail marker during a test works.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Issue #7486: Test that dynamically adding a strict xfail marker during a test causes failure.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n+\n class TestXFailwithSetupTeardown:\n     def test_failing_setup_issue9(self, testdir):\n         testdir.makepyfile(\n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..b500a84 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -512,6 +512,12 @@ class TestCaptureFixture:\n                 capfd.close()\n             \"\"\"\n         )\n+\n+    @pytest.mark.parametrize(\"nl\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_cafd_preserves_newlines(self, capfd, nl):\n+        print(\"test\", end=nl)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(nl)\n         reprec.assertoutcome(passed=1)\n \n     def test_capfdbinary(self, testdir):\n@@ -526,6 +532,12 @@ class TestCaptureFixture:\n                 assert err == b''\n             \"\"\"\n         )\n+\n+    @pytest.mark.parametrize(\"nl\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_cafd_preserves_newlines(self, capfd, nl):\n+        print(\"test\", end=nl)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(nl)\n         reprec.assertoutcome(passed=1)\n \n     def test_capsysbinary(self, testdir):\n",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..47943a0 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,6 +1,9 @@\n+\n import logging\n \n import pytest\n+from _pytest.pytester import Testdir\n+\n from _pytest.logging import caplog_records_key\n \n logger = logging.getLogger(__name__)\n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..6b9cbc4 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,4 +1,42 @@\n+\n import os\n+def test_collect_symlink_dir(pytester: Pytester) -> None:\n+    \"\"\"A symlinked directory is collected.\"\"\"\n+    dir = pytester.mkdir(\"dir\")\n+    dir.joinpath(\"test_it.py\").write_text(\"def test_it(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_dir\").symlink_to(dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+def test_symlink_to_non_test_dir(pytester: Pytester) -> None:\n+    \"\"\"A symlink to a non-test directory should not collect tests.\"\"\"\n+    dir = pytester.mkdir(\"non_test_dir\")\n+    dir.joinpath(\"not_a_test_file.py\").write_text(\"def not_a_test(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_non_test_dir\").symlink_to(dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=0)\n+\n+def test_symlink_loop_detection(pytester: Pytester) -> None:\n+    \"\"\"Ensure that symlink loops are detected and handled gracefully.\"\"\"\n+    dir1 = pytester.mkdir(\"dir1\")\n+    dir2 = pytester.mkdir(\"dir2\")\n+    dir1.joinpath(\"test_file.py\").write_text(\"def test_in_dir1(): pass\", \"utf-8\")\n+    dir2.joinpath(\"test_file.py\").write_text(\"def test_in_dir2(): pass\", \"utf-8\")\n+    dir1.joinpath(\"loop_symlink\").symlink_to(dir2)\n+    dir2.joinpath(\"loop_symlink\").symlink_to(dir1)\n+    pytester.path.joinpath(\"symlink_to_dir1\").symlink_to(dir1)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+def test_symlink_to_nested_dir(pytester: Pytester) -> None:\n+    \"\"\"Test that symlinked nested directories are collected.\"\"\"\n+    outer_dir = pytester.mkdir(\"outer_dir\")\n+    inner_dir = outer_dir.mkdir(\"inner_dir\")\n+    inner_dir.joinpath(\"test_nested.py\").write_text(\"def test_nested(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_nested_dir\").symlink_to(inner_dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=1)\n+\n import pprint\n import sys\n import textwrap\n@@ -9,7 +47,7 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n-from _pytest.pytester import Testdir\n+from _pytest.pytester import Pytester, Testdir\n \n \n class TestCollector:\n",
  "pytest-dev__pytest-8399": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 2c720b0..3f2cbd7 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -301,8 +301,33 @@ def test_setup_setUpClass(pytester: Pytester) -> None:\n     reprec = pytester.inline_run(testpath)\n     reprec.assertoutcome(passed=3)\n \n+def test_fixtures_unittest_setUpClass_visibility(pytester: Pytester) -> None:\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+\n+        class MyTestCase(unittest.TestCase):\n+            @classmethod\n+            def setUpClass(cls):\n+                pass\n \n-def test_setup_class(pytester: Pytester) -> None:\n+            def test_func1(self):\n+                pass\n+\n+            @classmethod\n+            def tearDownClass(cls):\n+                pass\n+        \"\"\"\n+    )\n+    # Run pytest with --fixtures to check if the setUpClass fixture is hidden\n+    result = pytester.runpytest(\"--fixtures\")\n+    assert result.ret == 0\n+    result.stdout.no_fnmatch_line(\"*unittest_setUpClass_fixture_MyTestCase*\")\n+\n+    # Run pytest with --fixtures -v to check if the setUpClass fixture is visible\n+    result = pytester.runpytest(\"--fixtures\", \"-v\")\n+    assert result.ret == 0\n+    result.stdout.fnmatch_lines([\"*unittest_setUpClass_fixture_MyTestCase*\"])\n     testpath = pytester.makepyfile(\n         \"\"\"\n         import unittest\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..8d2f9c2 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -573,8 +573,29 @@ def test_class_weights_cv():\n \n     assert_array_equal(reg.predict([[-.2, 2]]), np.array([-1]))\n \n+from sklearn.linear_model import RidgeClassifierCV\n \n-def test_ridgecv_store_cv_values():\n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    rng = np.random.RandomState(42)\n+\n+    n_samples = 8\n+    n_features = 5\n+    x = rng.randn(n_samples, n_features)\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+    # with len(y.shape) == 1\n+    y = rng.choice([-1, 1], size=n_samples)\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_alphas)\n+\n+    # with len(y.shape) == 2\n+    y = rng.choice([-1, 1], size=(n_samples, 3))\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, 3, n_alphas)\n     # Test _RidgeCV's store_cv_values attribute.\n     rng = rng = np.random.RandomState(42)\n \n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..81f1ddb 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -184,7 +184,17 @@ def test_int_overflow_mutual_info_score():\n     assert_all_finite(mutual_info_score(x.ravel(), y.ravel()))\n \n \n-def test_entropy():\n+def test_int_overflow_fowlkes_mallows_score():\n+    # Test overflow situation in fowlkes_mallows_score\n+    x = np.array([1] * (52632 + 2529) + [2] * (14660 + 793) + [3] * (3271 +\n+                 204) + [4] * (814 + 39) + [5] * (316 + 20))\n+    y = np.array([0] * 52632 + [1] * 2529 + [0] * 14660 + [1] * 793 +\n+                 [0] * 3271 + [1] * 204 + [0] * 814 + [1] * 39 + [0] * 316 +\n+                 [1] * 20)\n+\n+    score = fowlkes_mallows_score(x.ravel(), y.ravel())\n+    assert_all_finite(score)\n+    assert score >= 0  # Ensure score is a valid FMI\n     ent = entropy([0, 0, 42.])\n     assert_almost_equal(ent, 0.6365141, 5)\n     assert_almost_equal(entropy([]), 1)\n",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..6e7f0a7 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -558,8 +558,24 @@ def test_feature_names():\n     for idx, name in enumerate(feature_names):\n         assert_equal(idx, cv.vocabulary_.get(name))\n \n+def test_countvectorizer_with_predefined_vocabulary():\n+    vocab = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    cv = CountVectorizer(vocabulary=vocab)\n+    \n+    # We expect no error when calling get_feature_names_ with a predefined vocabulary\n+    feature_names = cv.get_feature_names()\n+    assert_array_equal(vocab, feature_names)\n+\n+    corpus = [\n+        'This is the first document.',\n+        'This is the second second document.',\n+        'And the third one.',\n+        'Is this the first document?',\n+    ]\n \n-def test_vectorizer_max_features():\n+    # Transform should succeed without fitting because vocabulary is predefined\n+    X = cv.transform(corpus)\n+    assert_equal(X.shape, (4, 9))\n     vec_factories = (\n         CountVectorizer,\n         TfidfVectorizer,\n",
  "scikit-learn__scikit-learn-11310": "diff --git a/sklearn/model_selection/tests/test_search.py b/sklearn/model_selection/tests/test_search.py\nindex 0b1d5f9..d5b6fe6 100644\n--- a/sklearn/model_selection/tests/test_search.py\n+++ b/sklearn/model_selection/tests/test_search.py\n@@ -1151,6 +1151,9 @@ def test_search_cv_results_none_param():\n \n @ignore_warnings()\n def test_search_cv_timing():\n+    from sklearn.utils.testing import assert_true, assert_greater_equal\n+    import time\n+\n     svc = LinearSVC(random_state=0)\n \n     X = [[1, ], [2, ], [3, ], [4, ]]\n@@ -1161,6 +1164,22 @@ def test_search_cv_timing():\n \n     for search in (gs, rs):\n         search.fit(X, y)\n+        # Check if refit_time_ exists and is a float\n+        assert_true(hasattr(search, \"refit_time_\"))\n+        assert_true(isinstance(search.refit_time_, float))\n+        \n+        # Timing the refitting process manually to double check\n+        start_time = time.time()\n+        search.best_estimator_.fit(X, y)\n+        end_time = time.time()\n+        manual_refit_time = end_time - start_time\n+\n+        # Check if refit_time_ is non-negative\n+        assert_greater_equal(search.refit_time_, 0)\n+\n+        # Allow a small difference in timing due to overhead\n+        assert_true(abs(search.refit_time_ - manual_refit_time) < 0.1)\n+\n         for key in ['mean_fit_time', 'std_fit_time']:\n             # NOTE The precision of time.time in windows is not high\n             # enough for the fit/score times to be non-zero for trivial X and y\n",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..61d8165 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -21,6 +21,10 @@ from sklearn.utils.testing import assert_true\n from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import ignore_warnings\n from sklearn.utils.testing import assert_warns_message\n+from sklearn.utils import extmath\n+from sklearn.preprocessing import LabelBinarizer\n+from sklearn.metrics import log_loss\n+from sklearn.linear_model import _log_reg_scoring_path\n \n from sklearn.exceptions import ConvergenceWarning\n from sklearn.exceptions import ChangedBehaviorWarning\n@@ -490,9 +494,41 @@ def test_logistic_cv():\n     assert_array_equal(lr_cv.Cs_.shape, (1,))\n     scores = np.asarray(list(lr_cv.scores_.values()))\n     assert_array_equal(scores.shape, (1, 3, 1))\n+def test_logistic_regression_cv_multinomial_predict_proba():\n+    # Test that LogisticRegressionCV with multi_class='multinomial' uses\n+    # softmax in predict_proba, not OvR.\n+\n+    np.random.seed(42)\n+    X = np.random.rand(100, 5)\n+    y = np.random.choice(['class1', 'class2', 'class3'], size=100)\n+\n+    # Split into a training and test set\n+    train_idx = np.random.choice(range(100), size=80, replace=False)\n+    test_idx = np.array([i for i in range(100) if i not in train_idx])\n+\n+    # Train LogisticRegressionCV with multinomial\n+    lr_cv = LogisticRegressionCV(multi_class='multinomial', solver='lbfgs')\n+    lr_cv.fit(X[train_idx], y[train_idx])\n+\n+    # Get the probability estimates\n+    probas = lr_cv.predict_proba(X[test_idx])\n+    decision_function = lr_cv.decision_function(X[test_idx])\n+    probas_softmax = extmath.softmax(decision_function)\n+\n+    # Assert that the probabilities match\n+    assert_array_almost_equal(probas, probas_softmax)\n+\n+    # Check that the neg_log_loss scorer provides expected scores\n+    scorer = get_scorer('neg_log_loss')\n+    score = scorer(lr_cv, X[test_idx], y[test_idx])\n \n+    # Manually calculate log loss with softmax probabilities\n+    lb = LabelBinarizer()\n+    lb.fit(y[train_idx])\n+    y_test_bin = lb.transform(y[test_idx])\n+    manual_log_loss = -log_loss(y_test_bin, probas_softmax, normalize=True)\n \n-def test_multinomial_logistic_regression_string_inputs():\n+    assert np.isclose(score, manual_log_loss)\n     # Test with string labels for LogisticRegression(CV)\n     n_samples, n_features, n_classes = 50, 5, 3\n     X_ref, y = make_classification(n_samples=n_samples, n_features=n_features,\n",
  "scikit-learn__scikit-learn-12585": "diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 4752f9c..a565cc1 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -167,7 +167,20 @@ def test_clone_sparse_matrices():\n         assert_array_equal(clf.empty.toarray(), clf_cloned.empty.toarray())\n \n \n-def test_repr():\n+def test_clone_estimator_types():\n+    # Check that clone works for parameters that are types rather than\n+    # instances\n+    from sklearn.base import clone\n+    class MyEstimator:\n+        def __init__(self, empty=None):\n+            self.empty = empty\n+        def get_params(self, deep=False):\n+            return {\"empty\": self.empty}\n+\n+    clf = MyEstimator(empty=MyEstimator)\n+    clf2 = clone(clf)\n+\n+    assert clf.empty is clf2.empty\n     # Smoke test the repr of the base estimator.\n     my_estimator = MyEstimator()\n     repr(my_estimator)\n",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..44ac787 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -7,7 +7,8 @@ from scipy import linalg\n \n import pytest\n \n-from sklearn.model_selection import train_test_split\n+from sklearn.linear_model.least_angle import LassoLarsIC\n+import numpy as np\n from sklearn.utils.testing import assert_equal\n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_less\n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..32d5082 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -493,6 +493,32 @@ def test_shuffle_stratifiedkfold():\n         assert_not_equal(set(test0), set(test1))\n     check_cv_coverage(kf0, X_40, y, groups=None, expected_n_splits=5)\n \n+def test_shuffling_effects_in_stratifiedkfold():\n+    # Test to ensure the shuffle parameter works as intended in StratifiedKFold\n+\n+    # Test different random states lead to different splits\n+    X_20 = np.arange(20)\n+    y_balanced = [0] * 10 + [1] * 10\n+    skf1 = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n+    skf2 = StratifiedKFold(n_splits=5, shuffle=True, random_state=99)\n+    splits1 = [test for _, test in skf1.split(X_20, y_balanced)]\n+    splits2 = [test for _, test in skf2.split(X_20, y_balanced)]\n+    assert splits1 != splits2, \"Different random states should yield different splits when shuffle=True\"\n+\n+    # Test same random state yields same splits\n+    skf3 = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n+    splits3 = [test for _, test in skf3.split(X_20, y_balanced)]\n+    assert splits1 == splits3, \"Same random state should yield same splits when shuffle=True\"\n+\n+    # Test shuffling within each class\n+    y_unbalanced = [0] * 15 + [1] * 5\n+    skf4 = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n+    splits4 = [test for _, test in skf4.split(X_20, y_unbalanced)]\n+    # For each fold, check if the distribution is stratified and shuffle within classes\n+    for test_indices in splits4:\n+        classes_in_test = y_unbalanced[test_indices]\n+        assert len(set(classes_in_test)) > 1, \"Test set should contain samples from both classes due to stratification\"\n+        assert sorted(classes_in_test) != classes_in_test, \"Classes within each fold should be shuffled\"\n \n def test_kfold_can_detect_dependent_samples_on_digits():  # see #2372\n     # The digits samples are dependent: they are apparently grouped by authors\n",
  "scikit-learn__scikit-learn-13135": "diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py\nindex a18a1c5..4de5ade 100644\n--- a/sklearn/preprocessing/tests/test_discretization.py\n+++ b/sklearn/preprocessing/tests/test_discretization.py\n@@ -185,11 +185,27 @@ def test_invalid_strategy_option():\n \n \n @pytest.mark.parametrize(\n-    'strategy, expected_2bins, expected_3bins',\n-    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2]),\n-     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2]),\n-     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2])])\n-def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n+    'strategy, expected_2bins, expected_3bins, expected_5bins',\n+    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2], [0, 0, 1, 1, 4, 4]),\n+     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2], [0, 0, 1, 2, 3, 4]),\n+     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2], [0, 1, 2, 3, 4, 4])])\n+def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins, expected_5bins):\n+    X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n+\n+    # with 2 bins\n+    est = KBinsDiscretizer(n_bins=2, strategy=strategy, encode='ordinal')\n+    Xt = est.fit_transform(X)\n+    assert_array_equal(expected_2bins, Xt.ravel())\n+\n+    # with 3 bins\n+    est = KBinsDiscretizer(n_bins=3, strategy=strategy, encode='ordinal')\n+    Xt = est.fit_transform(X)\n+    assert_array_equal(expected_3bins, Xt.ravel())\n+\n+    # with 5 bins\n+    est = KBinsDiscretizer(n_bins=5, strategy=strategy, encode='ordinal')\n+    Xt = est.fit_transform(X)\n+    assert_array_equal(expected_5bins, Xt.ravel())\n     X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n \n     # with 2 bins\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..04977d2 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -597,6 +597,30 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_array_equal(Y_pred1, Y_pred2)\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n+\n+def test_gaussian_mixture_fit_predict_different_random_state():\n+    # Check that fit_predict is equivalent to fit.predict when n_init > 1 with different random_state\n+    X = np.random.RandomState(1).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=10, random_state=1)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n+\n+def test_gaussian_mixture_fit_predict_large_n_init():\n+    # Check that fit_predict is equivalent to fit.predict when n_init is very large\n+    X = np.random.RandomState(2).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=50, random_state=2)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n+\n \n def test_gaussian_mixture_fit():\n     # recover the ground truth\n",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "",
  "scikit-learn__scikit-learn-13496": "",
  "scikit-learn__scikit-learn-13779": "",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..d0f2717 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -397,7 +397,25 @@ def test_export_text():\n     assert export_text(reg, decimals=1, show_weights=True) == expected_report\n \n \n-def test_plot_tree_entropy(pyplot):\n+def test_single_feature_export_text():\n+    # Test export_text for a tree with a single feature to ensure no IndexError\n+    X_single_feature = [[-2], [-1], [0], [1], [2]]\n+    y_single_feature = [-1, -1, 0, 1, 1]\n+    \n+    clf = DecisionTreeClassifier(random_state=0)\n+    clf.fit(X_single_feature, y_single_feature)\n+    \n+    expected_report = dedent(\"\"\"\n+    |--- feature_0 <= 0.5\n+    |   |--- feature_0 <= -0.5\n+    |   |   |--- class: -1\n+    |   |--- feature_0 >  -0.5\n+    |   |   |--- class: 0\n+    |--- feature_0 >  0.5\n+    |   |--- class: 1\n+    \"\"\").lstrip()\n+    \n+    assert export_text(clf) == expected_report\n     # mostly smoke tests\n     # Check correctness of export_graphviz for criterion = entropy\n     clf = DecisionTreeClassifier(max_depth=3,\n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..a5c971b 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1531,8 +1531,36 @@ def test_LogisticRegressionCV_GridSearchCV_elastic_net_ovr():\n     assert (lrcv.predict(X_train) == gs.predict(X_train)).mean() >= .8\n     assert (lrcv.predict(X_test) == gs.predict(X_test)).mean() >= .8\n \n+import pytest\n+import numpy as np\n+from sklearn.linear_model import LogisticRegressionCV\n+from sklearn.datasets import make_classification\n+\n+@pytest.mark.parametrize('penalty', ('l2', 'elasticnet'))\n+@pytest.mark.parametrize('solver', ('liblinear', 'saga'))\n+@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial', 'auto'))\n+def test_LogisticRegressionCV_no_refit_penalty_solver_multi_class(penalty, solver, multi_class):\n+    # Test LogisticRegressionCV with different penalties and solvers when refit is False\n+    \n+    n_samples = 100\n+    n_classes = 2\n+    n_features = 5\n+    X, y = make_classification(n_samples=n_samples, n_classes=n_classes,\n+                               n_informative=n_classes, n_features=n_features,\n+                               random_state=42)\n+    \n+    Cs = np.logspace(-2, 2, 4)\n+    l1_ratios = np.linspace(0, 1, 3) if penalty == 'elasticnet' else None\n+\n+    lrcv = LogisticRegressionCV(penalty=penalty, Cs=Cs, solver=solver,\n+                                l1_ratios=l1_ratios, multi_class=multi_class,\n+                                refit=False, random_state=42)\n+    lrcv.fit(X, y)\n \n-@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial'))\n+    if penalty == 'elasticnet':\n+        assert lrcv.l1_ratio_.shape == (n_classes,)\n+    assert lrcv.C_.shape == (n_classes,)\n+    assert lrcv.coef_.shape == (n_classes, n_features)\n def test_LogisticRegressionCV_no_refit(multi_class):\n     # Test LogisticRegressionCV attribute shapes when refit is False\n \n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/tests/test_show_versions.py b/sklearn/utils/tests/test_show_versions.py\nindex fa39255..a08a368 100644\n--- a/sklearn/utils/tests/test_show_versions.py\n+++ b/sklearn/utils/tests/test_show_versions.py\n@@ -24,10 +24,18 @@ def test_get_deps_info():\n     assert 'pandas' in deps_info\n     assert 'matplotlib' in deps_info\n \n+def test_joblib_in_deps_info():\n+    deps_info = _get_deps_info()\n+    assert 'joblib' in deps_info\n+\n+def test_joblib_in_show_versions(capsys):\n+    show_versions()\n+    out, err = capsys.readouterr()\n+    assert 'joblib' in out\n \n def test_show_versions_with_blas(capsys):\n     show_versions()\n     out, err = capsys.readouterr()\n     assert 'python' in out\n     assert 'numpy' in out\n-    assert 'BLAS' in out\n+    assert 'BLAS' in out\n",
  "scikit-learn__scikit-learn-14496": "diff --git a/sklearn/cluster/tests/test_optics.py b/sklearn/cluster/tests/test_optics.py\nindex 6c9dac3..d5ee735 100644\n--- a/sklearn/cluster/tests/test_optics.py\n+++ b/sklearn/cluster/tests/test_optics.py\n@@ -77,8 +77,37 @@ def test_the_extract_xi_labels(ordering, clusters, expected):\n \n     assert_array_equal(labels, expected)\n \n+from sklearn.cluster import OPTICS\n+import numpy as np\n+from numpy.testing import assert_array_equal\n+from sklearn.utils import shuffle\n+\n+def test_optics_float_min_samples():\n+    # Test to verify that using a float for min_samples is handled correctly.\n+    rng = np.random.RandomState(42)\n+    n_points_per_cluster = 10\n+    C1 = [-5, -2] + 0.8 * rng.randn(n_points_per_cluster, 2)\n+    C2 = [4, -1] + 0.1 * rng.randn(n_points_per_cluster, 2)\n+    C3 = [1, -2] + 0.2 * rng.randn(n_points_per_cluster, 2)\n+\n+    X = np.vstack((C1, C2, C3))\n+    expected_labels = np.r_[[0] * n_points_per_cluster, \n+                            [1] * n_points_per_cluster, \n+                            [2] * n_points_per_cluster]\n+    X, expected_labels = shuffle(X, expected_labels, random_state=rng)\n+\n+    # Using min_samples as a float\n+    min_samples_float = 0.1  # 10% of the total samples\n+    clust = OPTICS(min_samples=min_samples_float, min_cluster_size=0.1,\n+                   max_eps=20, cluster_method='xi', xi=0.1).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n \n-def test_extract_xi():\n+    # Check with a smaller dataset\n+    X_small = X[:5]\n+    clust_small = OPTICS(min_samples=0.4, min_cluster_size=0.1, \n+                         max_eps=20, cluster_method='xi', xi=0.1).fit(X_small)\n+    # Expecting noise for small dataset as clusters can't form with <= 5 points\n+    assert len(set(clust_small.labels_)) == 1 and clust_small.labels_[0] == -1\n     # small and easy test (no clusters around other clusters)\n     # but with a clear noise data.\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-14710": "",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..c77eb07 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,7 +680,21 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n-def test_sparse_precomputed():\n+from scipy import sparse\n+from sklearn import svm\n+import numpy as np\n+\n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for the issue with empty support_vectors_\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear', C=316.227766017, max_iter=15000, epsilon=0.1)\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size, \"Support vectors should be empty\"\n+    assert model.dual_coef_.shape == (1, 0), \"dual_coef_ should be a sparse matrix with shape (1, 0)\"\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n     try:\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..00568a7 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -93,6 +93,27 @@ def test_strip_accents():\n     assert strip_accents_unicode(a) == expected\n \n     # mix letters accentuated and not\n+\n+    # strings that are already decomposed\n+    a = \"o\\u0308\"  # o with diaeresis\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # combining marks by themselves\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"  # various combining marks\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Multiple combining marks on one character\n+    a = \"o\\u0308\\u0304\"  # o with diaeresis and macron\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Additional test for NFKD form\n+    s1 = chr(241)  # LATIN SMALL LETTER N WITH TILDE\n+    s2 = chr(110) + chr(771)  # LATIN SMALL LETTER N followed by COMBINING TILDE\n+    assert strip_accents_unicode(s1) == \"n\"\n+    assert strip_accents_unicode(s2) == \"n\"\n     a = \"this is \u00e0 test\"\n     expected = 'this is a test'\n     assert strip_accents_unicode(a) == expected\n",
  "scikit-learn__scikit-learn-25102": "diff --git a/sklearn/feature_selection/tests/test_base.py b/sklearn/feature_selection/tests/test_base.py\nindex bf2d07e..a89179f 100644\n--- a/sklearn/feature_selection/tests/test_base.py\n+++ b/sklearn/feature_selection/tests/test_base.py\n@@ -108,9 +108,40 @@ def test_inverse_transform_sparse():\n     with pytest.raises(ValueError):\n         sel.inverse_transform(np.array([[1], [2]]))\n \n+def test_output_dataframe():\n+    \"\"\"Check output dtypes for dataframes is consistent with the input dtypes.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+\n+    X = pd.DataFrame(\n+        {\n+            \"a\": pd.Series([1.0, 2.4, 4.5], dtype=np.float32),\n+            \"b\": pd.Series([\"a\", \"b\", \"a\"], dtype=\"category\"),\n+            \"c\": pd.Series([\"j\", \"b\", \"b\"], dtype=\"category\"),\n+            \"d\": pd.Series([3.0, 2.4, 1.2], dtype=np.float64),\n+        }\n+    )\n+\n+    for step in [2, 3]:\n+        sel = StepSelector(step=step).set_output(transform=\"pandas\")\n+        sel.fit(X)\n+\n+        output = sel.transform(X)\n+        for name, dtype in output.dtypes.items():\n+            assert dtype == X.dtypes[name]\n+\n+    # step=0 will select nothing\n+    sel0 = StepSelector(step=0).set_output(transform=\"pandas\")\n+    sel0.fit(X, y)\n+\n+    msg = \"No features were selected\"\n+    with pytest.warns(UserWarning, match=msg):\n+        output0 = sel0.transform(X)\n+\n+    assert_array_equal(output0.index, X.index)\n+    assert output0.shape == (X.shape[0], 0)\n \n def test_get_support():\n     sel = StepSelector()\n     sel.fit(X, y)\n     assert_array_equal(support, sel.get_support())\n-    assert_array_equal(support_inds, sel.get_support(indices=True))\n+    assert_array_equal(support_inds, sel.get_support(indices=True))\n",
  "scikit-learn__scikit-learn-25232": "diff --git a/sklearn/impute/tests/test_impute.py b/sklearn/impute/tests/test_impute.py\nindex ee482a8..8ae3291 100644\n--- a/sklearn/impute/tests/test_impute.py\n+++ b/sklearn/impute/tests/test_impute.py\n@@ -1511,7 +1511,10 @@ def test_most_frequent(expected, array, dtype, extra_value, n_repeat):\n )\n def test_iterative_imputer_keep_empty_features(initial_strategy):\n     \"\"\"Check the behaviour of the iterative imputer with different initial strategy\n-    and keeping empty features (i.e. features containing only missing values).\n+import numpy as np\n+import pytest\n+from sklearn.impute import IterativeImputer\n+from numpy.testing import assert_array_equal, assert_allclose\n     \"\"\"\n     X = np.array([[1, np.nan, 2], [3, np.nan, np.nan]])\n \n@@ -1520,10 +1523,70 @@ def test_iterative_imputer_keep_empty_features(initial_strategy):\n     )\n     X_imputed = imputer.fit_transform(X)\n     assert_allclose(X_imputed[:, 1], 0)\n+\n+\n+def test_iterative_imputer_constant_fill_value():\n+    \"\"\"Check that we propagate properly the parameter `fill_value`.\"\"\"\n+    X = np.array([[-1, 2, 3, -1], [4, -1, 5, -1], [6, 7, -1, -1], [8, 9, 0, -1]])\n+\n+    fill_value = 100\n+    imputer = IterativeImputer(\n+        missing_values=-1,\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+    )\n+    X_imputed = imputer.fit_transform(X)\n+    assert_array_equal(imputer.initial_imputer_.statistics_, fill_value)\n+\n+    \n+def test_iterative_imputer_constant_fill_value_with_nan():\n+    \"\"\"Check if fill_value can be set to np.nan when initial_strategy is 'constant'.\"\"\"\n+    X = np.array([[-1, 2, 3, -1], [4, -1, 5, -1], [6, 7, -1, -1], [8, 9, 0, -1]])\n+\n+    fill_value = np.nan\n+    imputer = IterativeImputer(\n+        missing_values=-1,\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+    )\n+    X_imputed = imputer.fit_transform(X)\n+    assert np.isnan(imputer.initial_imputer_.statistics_).all()\n     X_imputed = imputer.transform(X)\n     assert_allclose(X_imputed[:, 1], 0)\n \n \n+def test_iterative_imputer_constant_fill_value():\n+    \"\"\"Check that we propagate properly the parameter `fill_value`.\"\"\"\n+    X = np.array([[-1, 2, 3, -1], [4, -1, 5, -1], [6, 7, -1, -1], [8, 9, 0, -1]])\n+\n+    fill_value = 100\n+    imputer = IterativeImputer(\n+        missing_values=-1,\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+    )\n+    X_imputed = imputer.fit_transform(X)\n+    assert_array_equal(imputer.initial_imputer_.statistics_, fill_value)\n+\n+    \n+def test_iterative_imputer_constant_fill_value_with_nan():\n+    \"\"\"Check if fill_value can be set to np.nan when initial_strategy is 'constant'.\"\"\"\n+    X = np.array([[-1, 2, 3, -1], [4, -1, 5, -1], [6, 7, -1, -1], [8, 9, 0, -1]])\n+\n+    fill_value = np.nan\n+    imputer = IterativeImputer(\n+        missing_values=-1,\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+    )\n+    X_imputed = imputer.fit_transform(X)\n+    assert np.isnan(imputer.initial_imputer_.statistics_).all()\n+\n+\n @pytest.mark.parametrize(\"keep_empty_features\", [True, False])\n def test_knn_imputer_keep_empty_features(keep_empty_features):\n     \"\"\"Check the behaviour of `keep_empty_features` for `KNNImputer`.\"\"\"\n",
  "scikit-learn__scikit-learn-25931": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3714d1a..d6b6b55 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -330,7 +330,27 @@ def test_iforest_with_n_jobs_does_not_segfault():\n def test_base_estimator_property_deprecated():\n     X = np.array([[1, 2], [3, 4]])\n     y = np.array([1, 0])\n-    model = IsolationForest()\n+    import pytest\n+    import warnings\n+    import numpy as np\n+    import pandas as pd\n+    from sklearn.ensemble import IsolationForest\n+\n+    def test_iforest_preserve_feature_names():\n+        \"\"\"Check that feature names are preserved when contamination is not \"auto\".\n+\n+        Feature names are required for consistency checks during scoring.\n+\n+        Non-regression test for Issue #25844\n+        \"\"\"\n+        rng = np.random.RandomState(0)\n+\n+        X = pd.DataFrame(data=rng.randn(4, 1), columns=[\"a\"])\n+        model = IsolationForest(random_state=0, contamination=0.05)\n+\n+        with warnings.catch_warnings():\n+            warnings.simplefilter(\"error\", UserWarning)\n+            model.fit(X)\n     model.fit(X, y)\n \n     warn_msg = (\n@@ -338,4 +358,4 @@ def test_base_estimator_property_deprecated():\n         \"will be removed in 1.4. Use `estimator_` instead.\"\n     )\n     with pytest.warns(FutureWarning, match=warn_msg):\n-        model.base_estimator_\n+        model.base_estimator_\n",
  "scikit-learn__scikit-learn-25973": "",
  "scikit-learn__scikit-learn-26323": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex b52e888..d16f434 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -22,7 +22,32 @@ from sklearn.compose import (\n from sklearn.exceptions import NotFittedError\n from sklearn.preprocessing import FunctionTransformer\n from sklearn.preprocessing import StandardScaler, Normalizer, OneHotEncoder\n+from sklearn.feature_selection import VarianceThreshold\n+import pandas as pd\n+import pytest\n+import numpy as np\n+\n+def test_remainder_set_output():\n+    \"\"\"Check that the output is set for the remainder.\n+\n+    Non-regression test for #26306.\n+    \"\"\"\n+\n+    df = pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3]})\n+\n+    ct = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+\n+    out = ct.fit_transform(df)\n+    pd.testing.assert_frame_equal(out, df)\n \n+    ct.set_output(transform=\"default\")\n+    out = ct.fit_transform(df)\n+    assert isinstance(out, np.ndarray)\n \n class Trans(TransformerMixin, BaseEstimator):\n     def fit(self, X, y=None):\n",
  "scikit-learn__scikit-learn-9288": "diff --git a/sklearn/cluster/tests/test_k_means.py b/sklearn/cluster/tests/test_k_means.py\nindex abeeff0..c4b83e2 100644\n--- a/sklearn/cluster/tests/test_k_means.py\n+++ b/sklearn/cluster/tests/test_k_means.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for K-means\"\"\"\n import sys\n \n@@ -944,6 +945,30 @@ def test_k_means_empty_cluster_relocated():\n     assert len(set(km.labels_)) == 2\n     assert_allclose(km.cluster_centers_, [[-1], [1]])\n \n+def test_result_of_kmeans_equal_in_diff_n_jobs():\n+    # PR 9288\n+    rnd = np.random.RandomState(0)\n+    X = rnd.normal(size=(50, 10))\n+\n+    # Ensuring inertia consistency for different n_jobs\n+    inertia_1 = KMeans(n_clusters=3, random_state=0, n_jobs=1).fit(X).inertia_\n+    inertia_2 = KMeans(n_clusters=3, random_state=0, n_jobs=2).fit(X).inertia_\n+    inertia_3 = KMeans(n_clusters=3, random_state=0, n_jobs=3).fit(X).inertia_\n+    inertia_4 = KMeans(n_clusters=3, random_state=0, n_jobs=4).fit(X).inertia_\n+\n+    assert_almost_equal(inertia_1, inertia_2)\n+    assert_almost_equal(inertia_1, inertia_3)\n+    assert_almost_equal(inertia_1, inertia_4)\n+\n+    # Ensuring labels consistency for different n_jobs\n+    result_1 = KMeans(n_clusters=3, random_state=0, n_jobs=1).fit(X).labels_\n+    result_2 = KMeans(n_clusters=3, random_state=0, n_jobs=2).fit(X).labels_\n+    result_3 = KMeans(n_clusters=3, random_state=0, n_jobs=3).fit(X).labels_\n+    result_4 = KMeans(n_clusters=3, random_state=0, n_jobs=4).fit(X).labels_\n+\n+    assert_array_equal(result_1, result_2)\n+    assert_array_equal(result_1, result_3)\n+    assert_array_equal(result_1, result_4)\n \n def test_minibatch_kmeans_partial_fit_int_data():\n     # Issue GH #14314\n",
  "sphinx-doc__sphinx-10323": "diff --git a/tests/test_directive_code.py b/tests/test_directive_code.py\nindex 949c70e..b5b12cd 100644\n--- a/tests/test_directive_code.py\n+++ b/tests/test_directive_code.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the code-block directive.\"\"\"\n \n import os\n@@ -249,9 +250,23 @@ def test_LiteralIncludeReader_dedent(literal_inc_path):\n     assert content == (\"def baz():\\n\"\n                        \"    pass\\n\"\n                        \"\\n\")\n-\n-\n @pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n+def test_LiteralIncludeReader_prepend_with_indentation(literal_inc_path):\n+    # Test case for issue with prepend and indentation\n+    options = {\n+        'lines': '15-19',\n+        'dedent': None,\n+        'prepend': '      <plugin>',\n+    }\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    assert content == (\"      <plugin>\\n\"\n+                       \"        <groupId>com.github.ekryd.sortpom</groupId>\\n\"\n+                       \"        <artifactId>sortpom-maven-plugin</artifactId>\\n\"\n+                       \"        <version>2.15.0</version>\\n\"\n+                       \"        <configuration>\\n\"\n+                       \"          <verifyFailOn>strict</verifyFailOn>\\n\"\n+                       \"        </configuration>\\n\")\n def test_LiteralIncludeReader_tabwidth(testroot):\n     # tab-width: 4\n     options = {'tab-width': 4, 'pyobject': 'Qux'}\n",
  "sphinx-doc__sphinx-10449": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 82ec43a..85bd657 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1023,6 +1023,27 @@ def test_autodoc_typehints_description_no_undoc_doc_rtype(app):\n             '   Return type:\\n'\n             '      None\\n' == context)\n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\"})\n+def test_autodoc_typehints_description_no_class_return_type(app):\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: target.typehints.Square\\n'\n+        '   :members:\\n',\n+        encoding='utf8'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n+    assert ('class target.typehints.Square\\n'\n+            '\\n'\n+            '   A class representing a square figure.\\n'\n+            '\\n'\n+            '   __init__(width, height)\\n'\n+            '\\n'\n+            '      Parameters:\\n'\n+            '         **width** (*int*) --\\n'\n+            '\\n'\n+            '         **height** (*int*) --\\n'\n+            '\\n' in context)\n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\"})\n",
  "sphinx-doc__sphinx-10466": "diff --git a/tests/test_build_gettext.py b/tests/test_build_gettext.py\nindex a6fc946..ad8b103 100644\n--- a/tests/test_build_gettext.py\n+++ b/tests/test_build_gettext.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the build process with gettext builder with the test root.\"\"\"\n \n import gettext\n@@ -9,6 +10,7 @@ from subprocess import PIPE, CalledProcessError\n import pytest\n \n from sphinx.util.osutil import cd\n+from sphinx.builders.gettext import Catalog, MsgOrigin\n \n \n @pytest.mark.sphinx('gettext', srcdir='root-gettext')\n",
  "sphinx-doc__sphinx-10673": "diff --git a/tests/test_environment_toctree.py b/tests/test_environment_toctree.py\nindex d3bf6a2..9b10212 100644\n--- a/tests/test_environment_toctree.py\n+++ b/tests/test_environment_toctree.py\n@@ -337,6 +337,25 @@ def test_get_toctree_for_includehidden(app):\n                  [list_item, compact_paragraph, reference, \"foo.1\"],\n                  [list_item, compact_paragraph, reference, \"foo.2\"]))\n \n+import pytest\n+from sphinx.testing.util import SphinxTestApp\n+from sphinx import addnodes\n+from sphinx.testing.util import assert_node\n+\n+@pytest.mark.sphinx('xml', testroot='toctree-index')\n+def test_toctree_index_integration(app: SphinxTestApp):\n+    app.build()\n+    toctree = app.env.tocs['index']\n+    assert_node(toctree,\n+                [addnodes.bullet_list, ([addnodes.list_item, \n+                                           (addnodes.compact_paragraph,  \n+                                            [addnodes.bullet_list, (addnodes.toctree,  \n+                                                                   addnodes.toctree)])])])\n+    assert_node(toctree[0][1][1], addnodes.toctree,\n+                caption=\"Indices\", glob=False, hidden=False,\n+                titlesonly=False, maxdepth=-1, numbered=0,\n+                entries=[(None, 'genindex'), (None, 'modindex'), (None, 'search')])\n+\n     assert_node(toctree[1][0][0][0], reference, refuri=\"foo\", secnumber=[1])\n     assert_node(toctree[1][0][1][0][0][0], reference, refuri=\"quux\", secnumber=[1, 1])\n     assert_node(toctree[1][0][1][1][0][0], reference, refuri=\"foo#foo-1\", secnumber=[1, 2])\n@@ -345,4 +364,4 @@ def test_get_toctree_for_includehidden(app):\n     assert_node(toctree[1][2][0][0], reference, refuri=\"http://sphinx-doc.org/\")\n \n     assert_node(toctree[2],\n-                [bullet_list, list_item, compact_paragraph, reference, \"baz\"])\n+                [bullet_list, list_item, compact_paragraph, reference, \"baz\"])\n",
  "sphinx-doc__sphinx-7440": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 975a00f..fc509a7 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -147,6 +147,35 @@ def test_glossary(app):\n     assert (\"term3\", \"term3\", \"term\", \"index\", \"term-term3\", -1) in objects\n     assert (\"term4\", \"term4\", \"term\", \"index\", \"term-term4\", -1) in objects\n \n+    # Test for case sensitivity in glossary terms\n+    text_case_sensitive = (\".. glossary::\\n\"\n+                           \"\\n\"\n+                           \"   MySQL\\n\"\n+                           \"       description for MySQL\\n\"\n+                           \"\\n\"\n+                           \"   mysql\\n\"\n+                           \"       description for mysql\\n\")\n+\n+    # doctree\n+    doctree_case_sensitive = restructuredtext.parse(app, text_case_sensitive)\n+    assert_node(doctree_case_sensitive, (\n+        [glossary, definition_list, ([definition_list_item, ([term, (\"MySQL\",\n+                                                                     index)],\n+                                                             definition)],\n+                                     [definition_list_item, ([term, (\"mysql\",\n+                                                                     index)],\n+                                                             definition)])],\n+    ))\n+    assert_node(doctree_case_sensitive[0][0][0][0][1],\n+                entries=[(\"single\", \"MySQL\", \"term-MySQL\", \"main\", None)])\n+    assert_node(doctree_case_sensitive[0][0][0][1][1],\n+                entries=[(\"single\", \"mysql\", \"term-mysql\", \"main\", None)])\n+\n+    # index for case-sensitive terms\n+    objects_case_sensitive = list(app.env.get_domain(\"std\").get_objects())\n+    assert (\"MySQL\", \"MySQL\", \"term\", \"index\", \"term-MySQL\", -1) in objects_case_sensitive\n+    assert (\"mysql\", \"mysql\", \"term\", \"index\", \"term-mysql\", -1) in objects_case_sensitive\n+\n \n def test_glossary_warning(app, status, warning):\n     # empty line between terms\n",
  "sphinx-doc__sphinx-7757": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex b3053d1..9d1b931 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -341,7 +341,15 @@ def test_signature_from_str_positionaly_only_args():\n     assert sig.parameters['b'].kind == Parameter.POSITIONAL_OR_KEYWORD\n \n \n-def test_signature_from_str_invalid():\n+def test_signature_with_positional_only_defaults():\n+    sig = inspect.signature_from_str('(a, b=0, /, c=1)')\n+    assert list(sig.parameters.keys()) == ['a', 'b', 'c']\n+    assert sig.parameters['a'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['a'].default == Parameter.empty\n+    assert sig.parameters['b'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['b'].default == '0'\n+    assert sig.parameters['c'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['c'].default == '1'\n     with pytest.raises(SyntaxError):\n         inspect.signature_from_str('')\n \n",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..df71e0f 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -14,6 +15,7 @@ from importlib import import_module\n \n import pytest\n \n+from typing import TypeVar\n from sphinx.ext.autodoc.mock import _MockModule, _MockObject, mock\n \n \n@@ -32,7 +34,19 @@ def test_MockModule():\n     assert repr(mock) == 'mocked_module'\n \n \n-def test_MockObject():\n+def test_MockObject_with_generics():\n+    T = TypeVar('T')\n+    \n+    class SubClassWithGenerics(mock.SomeClass[T]):\n+        \"\"\"docstring of SubClassWithGenerics\"\"\"\n+        \n+        def method(self) -> T:\n+            return \"generic value\"\n+    \n+    obj = SubClassWithGenerics()\n+    assert SubClassWithGenerics.__doc__ == \"docstring of SubClassWithGenerics\"\n+    assert isinstance(obj, SubClassWithGenerics)\n+    assert obj.method() == \"generic value\"\n     mock = _MockObject()\n     assert isinstance(mock.some_attr, _MockObject)\n     assert isinstance(mock.some_method, _MockObject)\n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_napoleon.py b/tests/test_ext_napoleon.py\nindex 0676869..874b5e3 100644\n--- a/tests/test_ext_napoleon.py\n+++ b/tests/test_ext_napoleon.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_napoleon\n     ~~~~~~~~~~~~~\n@@ -14,6 +15,7 @@ from collections import namedtuple\n from unittest import TestCase, mock\n \n from sphinx.application import Sphinx\n+from sphinx.testing.util import simple_decorator\n from sphinx.ext.napoleon import _process_docstring, _skip_member, Config, setup\n \n \n@@ -170,7 +172,15 @@ class SkipMemberTest(TestCase):\n                         SampleClass.__special_undoc__, True,\n                         'napoleon_include_special_with_doc')\n \n-    def test_exception_private_doc(self):\n+    def test_decorated_init(self):\n+        class SampleClass:\n+            @simple_decorator\n+            def __init__(self):\n+                \"\"\"Docstring for decorated __init__\"\"\"\n+                pass\n+\n+        self.assertSkip('class', '__init__', SampleClass.__init__, False,\n+                        'napoleon_include_init_with_doc')\n         self.assertSkip('exception', '_private_doc',\n                         SampleError._private_doc, False,\n                         'napoleon_include_private_with_doc')\n@@ -180,7 +190,15 @@ class SkipMemberTest(TestCase):\n                         SampleError._private_undoc, True,\n                         'napoleon_include_private_with_doc')\n \n-    def test_exception_special_doc(self):\n+    def test_decorated_method(self):\n+        class SampleClass:\n+            @simple_decorator\n+            def decorated_method(self):\n+                \"\"\"Docstring for decorated method\"\"\"\n+                pass\n+\n+        self.assertSkip('class', 'decorated_method', SampleClass.decorated_method, False,\n+                        'napoleon_include_special_with_doc')\n         self.assertSkip('exception', '__special_doc__',\n                         SampleError.__special_doc__, False,\n                         'napoleon_include_special_with_doc')\n",
  "sphinx-doc__sphinx-7985": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 5b1b2ed..09ec70b 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -8,6 +8,44 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+@pytest.fixture(scope='function', autouse=True)\n+def setup_and_teardown():\n+    # Setup: Create a temporary directory and files for local links\n+    if not os.path.exists('temp'):\n+        os.mkdir('temp')\n+    with open('temp/valid_local_file.txt', 'w') as f:\n+        f.write('This is a valid local file.')\n+\n+    yield\n+\n+    # Teardown: Remove the temporary directory and files after tests\n+    if os.path.exists('temp'):\n+        shutil.rmtree('temp')\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n+def test_local_links(app, status, warning):\n+    (app.srcdir / 'index.rst').write_text(\"\"\"\n+    Valid local link_ and invalid local link_\n+\n+    .. _local-link: temp/valid_local_file.txt\n+    .. _invalid-local-link: temp/notfound.txt\n+    \"\"\")\n+\n+    app.builder.build_all()\n+\n+    assert (app.outdir / 'output.txt').exists()\n+    content = (app.outdir / 'output.txt').read_text()\n+\n+    print(content)\n+    # looking for valid local file should succeed\n+    assert \"ok        temp/valid_local_file.txt\" in content\n+    # looking for invalid local file should fail\n+    assert \"[broken] temp/notfound.txt\" in content\n+    assert len(content.splitlines()) == 3\n+\n+import os\n+import shutil\n+\n import json\n import re\n from unittest import mock\n",
  "sphinx-doc__sphinx-8035": "diff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex ad1d950..b83737b 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_private_members\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -16,6 +17,33 @@ from test_ext_autodoc import do_autodoc\n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_private_field(app):\n     app.config.autoclass_content = 'class'\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_specific_private_members(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None,\n+               \"private-members\": \"_specific_private_function,_another_private_function\"}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        '',\n+        '.. py:function:: _specific_private_function(name)',\n+        '   :module: target.private',\n+        '',\n+        '   specific_private_function is a docstring().',\n+        '',\n+        '   :meta public:',\n+        '',\n+        '.. py:function:: _another_private_function(name)',\n+        '   :module: target.private',\n+        '',\n+        '   another_private_function is a docstring().',\n+        '',\n+        '   :meta public:',\n+        '',\n+    ]\n     options = {\"members\": None}\n     actual = do_autodoc(app, 'module', 'target.private', options)\n     assert list(actual) == [\n",
  "sphinx-doc__sphinx-8120": "diff --git a/tests/test_intl.py b/tests/test_intl.py\nindex 58339b1..24cb636 100644\n--- a/tests/test_intl.py\n+++ b/tests/test_intl.py\n@@ -1287,5 +1287,41 @@ def test_image_glob_intl_using_figure_language_filename(app):\n                             'image/svg+xml': 'subdir/svgimg.svg'})\n \n \n+from babel.messages import pofile\n+from babel.messages.catalog import Catalog\n+from sphinx import locale\n+\n+import pytest\n+\n+@pytest.mark.sphinx('html', testroot='basic', confoverrides={'language': 'da'})\n+def test_custom_da_translation(make_app, app_params, sphinx_test_tempdir):\n+    try:\n+        # Clear translators cache\n+        locale.translators.clear()\n+\n+        # Prepare custom message catalog (.po)\n+        locale_dir = sphinx_test_tempdir / 'basic' / 'locales' / 'da' / 'LC_MESSAGES'\n+        locale_dir.makedirs()\n+        with (locale_dir / 'sphinx.po').open('wb') as f:\n+            catalog = Catalog()\n+            catalog.add('Fig. %s', 'Foobar %s')\n+            catalog.add('Listing %s', 'Whatever %s')\n+            pofile.write_po(f, catalog)\n+        \n+        # Construct application and convert po file to .mo\n+        args, kwargs = app_params\n+        app = make_app(*args, **kwargs)\n+        assert (locale_dir / 'sphinx.mo').exists()\n+        assert app.translator.gettext('Fig. %s') == 'Foobar %s'\n+        assert app.translator.gettext('Listing %s') == 'Whatever %s'\n+\n+        app.build()\n+        content = (app.outdir / 'index.html').read_text()\n+        assert 'Foobar 1' in content\n+        assert 'Whatever 1' in content\n+    finally:\n+        locale.translators.clear()\n+\n+\n def getwarning(warnings):\n-    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n+    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n",
  "sphinx-doc__sphinx-8269": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 7842f56..1f7d893 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -107,6 +107,40 @@ def test_anchors_ignored(app, status, warning):\n     assert not content\n \n \n+import http.server\n+import threading\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_anchor_not_found_reports_http_error(app, status, warning):\n+    server_thread = HttpServerThread(NotFoundHandler, daemon=True)\n+    server_thread.start()\n+    try:\n+        app.builder.build_all()\n+    finally:\n+        server_thread.terminate()\n+    content = (app.outdir / 'output.txt').read_text()\n+    assert content == (\n+        \"index.rst:1: [broken] http://localhost:7778/#anchor: \"\n+        \"404 Client Error: Not Found for url: http://localhost:7778/\\n\"\n+    )\n+\n+class HttpServerThread(threading.Thread):\n+    def __init__(self, handler, *args, **kwargs):\n+        super().__init__(*args, **kwargs)\n+        self.server = http.server.HTTPServer((\"localhost\", 7778), handler)\n+    \n+    def run(self):\n+        self.server.serve_forever(poll_interval=0.01)\n+    \n+    def terminate(self):\n+        self.server.shutdown()\n+        self.server.server_close()\n+        self.join()\n+\n+class NotFoundHandler(http.server.BaseHTTPRequestHandler):\n+    def do_GET(self):\n+        self.send_error(404, \"Not Found\")\n+\n @pytest.mark.sphinx(\n     'linkcheck', testroot='linkcheck', freshenv=True,\n     confoverrides={'linkcheck_auth': [\n@@ -159,4 +193,11 @@ def test_linkcheck_request_headers(app, status, warning):\n                 assert headers[\"Accept\"] == \"text/html,application/xhtml+xml;q=0.9,*/*;q=0.8\"\n                 assert headers[\"X-Secret\"] == \"open sesami\"\n             else:\n-                assert headers[\"Accept\"] == \"text/html,application/xhtml+xml;q=0.9,*/*;q=0.8\"\n+                assert headers[\"Accept\"] == \"text/html,application/xhtml+xml;q=0.9,*/*;q=0.8\"\n+\n+\n+\n+\n+\n+\n+\n",
  "sphinx-doc__sphinx-8459": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex d1881df..68e047f 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_configs\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -8,12 +9,46 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+@pytest.mark.skipif(sys.version_info < (3, 7), reason='python 3.7+ is required.')\n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    srcdir='autodoc_typehints_description_and_type_aliases_extended',\n+                    confoverrides={\n+                        'autodoc_typehints': \"description\",\n+                        'autodoc_type_aliases': {'JSONObject': 'types.JSONObject'}\n+                    })\n+def test_autodoc_typehints_description_with_aliases(app):\n+    # Write custom rst file for the test\n+    (app.srcdir / 'types.rst').write_text('.. autofunction:: types.sphinx_doc')\n+\n+    # Run the Sphinx build\n+    app.build()\n+    \n+    # Read the output from the build\n+    context = (app.outdir / 'types.txt').read_text()\n+\n+    # Assert that the type alias is correctly used in the output\n+    assert ('types.sphinx_doc(data)\\\\n'\n+            '\\\\n'\n+            '   Does it work.\\\\n'\n+            '\\\\n'\n+            '   Parameters:\\\\n'\n+            '      * **data** (*types.JSONObject*) --\\\\n'\n+            '         Does it args.\\\\n'\n+            '\\\\n'\n+            '   Returns\\\\n'\n+            '      Does it work in return.\\\\n'\n+            '\\\\n'\n+            '   Return type\\\\n'\n+            '      types.JSONObject\\\\n') in context\n+\n import platform\n import sys\n \n import pytest\n \n from sphinx.testing import restructuredtext\n+import pytest\n+import sys\n \n from .test_ext_autodoc import do_autodoc\n \n",
  "sphinx-doc__sphinx-8475": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 41632e7..d479546 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -372,13 +372,64 @@ def test_connect_to_selfsigned_nonexistent_cert_file(app):\n     with https_server(OKHandler):\n         app.builder.build_all()\n \n+import pytest\n+import json\n+import http.server\n+from sphinx.testing.util import SphinxTestApp\n+from sphinx.util import requests\n+\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_TooManyRedirects_on_HEAD(app: SphinxTestApp):\n+    class InfiniteRedirectOnHeadHandler(http.server.BaseHTTPRequestHandler):\n+        def do_HEAD(self):\n+            self.send_response(302, \"Found\")\n+            self.send_header(\"Location\", \"http://localhost:7777/\")\n+            self.end_headers()\n+\n+        def do_GET(self):\n+            self.send_response(200, \"OK\")\n+            self.end_headers()\n+            self.wfile.write(b\"ok\\n\")\n+\n+    with http_server(InfiniteRedirectOnHeadHandler):\n+        app.builder.build_all()\n+\n     with open(app.outdir / 'output.json') as fp:\n         content = json.load(fp)\n     assert content == {\n         \"code\": 0,\n-        \"status\": \"broken\",\n+        \"status\": \"working\",\n         \"filename\": \"index.rst\",\n         \"lineno\": 1,\n-        \"uri\": \"https://localhost:7777/\",\n-        \"info\": \"Could not find a suitable TLS CA certificate bundle, invalid path: does/not/exist\",\n-    }\n+        \"uri\": \"http://localhost:7777/\",\n+        \"info\": \"\",\n+    }\n+\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_TooManyRedirects_with_anchor(app: SphinxTestApp):\n+    class InfiniteRedirectOnHeadHandlerWithAnchor(http.server.BaseHTTPRequestHandler):\n+        def do_HEAD(self):\n+            self.send_response(302, \"Found\")\n+            self.send_header(\"Location\", \"http://localhost:7777/#anchor\")\n+            self.end_headers()\n+\n+        def do_GET(self):\n+            self.send_response(200, \"OK\")\n+            self.end_headers()\n+            self.wfile.write(b\"<html><body><a name='anchor'></a>ok</body></html>\\n\")\n+\n+    with http_server(InfiniteRedirectOnHeadHandlerWithAnchor):\n+        app.builder.build_all()\n+\n+    with open(app.outdir / 'output.json') as fp:\n+        content = json.load(fp)\n+    assert content == {\n+        \"code\": 0,\n+        \"status\": \"working\",\n+        \"filename\": \"index.rst\",\n+        \"lineno\": 1,\n+        \"uri\": \"http://localhost:7777/#anchor\",\n+        \"info\": \"\",\n+    }\n",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8721": "",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex 577c367..106f28d 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -299,6 +299,35 @@ def test_autodoc_process_signature_typing_generic(app):\n         '',\n     ]\n \n+def test_enum_signature_rendering(app):\n+    # Define an Enum for testing\n+    class MyEnum(enum.Enum):\n+        ValueA = 10\n+        ValueB = 20\n+\n+    # Function using an Enum with a default value\n+    def ugly_enum_func(e: MyEnum = MyEnum.ValueA) -> None:\n+        \"\"\"Function using an Enum with a default value\"\"\"\n+\n+    # Capture the generated signature\n+    captured = []\n+\n+    def process_signature(*args):\n+        captured.append(args)\n+\n+    app.connect('autodoc-process-signature', process_signature)\n+\n+    directive = make_directive_bridge(app.env)\n+    inst = app.registry.documenters['function'](directive, 'ugly_enum_func')\n+    inst.fullname = 'ugly_enum_func'\n+    inst.object = ugly_enum_func\n+    inst.objpath = ['ugly_enum_func']\n+    inst.format_signature()\n+\n+    # Check that the Enum is rendered without its value\n+    assert captured == [(app, 'function', 'ugly_enum_func', ugly_enum_func,\n+                         directive.genopt, '(e: MyEnum = MyEnum.ValueA)', 'None')]\n+\n \n def test_autodoc_process_signature_typehints(app):\n     captured = []\n",
  "sphinx-doc__sphinx-9320": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\nindex ff8df08..931ed7a 100644\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -9,6 +9,7 @@\n \"\"\"\n \n import time\n+import sys\n from io import StringIO\n \n import pytest\n",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..285ce81 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -54,6 +54,7 @@ from sphinx.pycode import ast\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n     (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n+    (\"(1,)\", \"(1,)\"),                             # Tuple (single element)\n     (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n",
  "sphinx-doc__sphinx-9591": "",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..c636965 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -756,7 +756,7 @@ def test_pymethod_options(app):\n \n     # :property:\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
  "sphinx-doc__sphinx-9711": "diff --git a/sphinx/extension.py b/sphinx/extension.py\nindex 6ac780b..a64fc7f 100644\n--- a/sphinx/extension.py\n+++ b/sphinx/extension.py\n@@ -11,6 +11,7 @@\n from typing import TYPE_CHECKING, Any, Dict\n \n from sphinx.config import Config\n+from packaging.version import Version\n from sphinx.errors import VersionRequirementError\n from sphinx.locale import __\n from sphinx.util import logging\n@@ -51,7 +52,7 @@ def verify_needs_extensions(app: \"Sphinx\", config: Config) -> None:\n                               'but it is not loaded.'), extname)\n             continue\n \n-        if extension.version == 'unknown version' or reqversion > extension.version:\n+        if extension.version == 'unknown version' or Version(reqversion) > Version(extension.version):\n             raise VersionRequirementError(__('This project needs the extension %s at least in '\n                                              'version %s and therefore cannot be built with '\n                                              'the loaded version (%s).') %\n",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..4366fd9 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -236,6 +236,37 @@ def test_Point2D():\n     assert p2.distance(p3) == sqrt(17)/2\n \n \n+from sympy.geometry import Point, Point2D, Point3D\n+from sympy import sqrt\n+\n+def test_issue_11617():\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point2D(2, 0)\n+    assert p1.distance(p2) == sqrt(5)\n+\n+def test_distance_2d_to_3d():\n+    p1 = Point2D(0, 0)\n+    p2 = Point3D(0, 0, 3)\n+    assert p1.distance(p2) == 3\n+\n+def test_distance_3d_to_3d():\n+    p1 = Point3D(1, 2, 3)\n+    p2 = Point3D(4, 6, 8)\n+    assert p1.distance(p2) == sqrt(3**2 + 4**2 + 5**2)\n+\n+def test_distance_2d_to_2d():\n+    p1 = Point2D(1, 1)\n+    p2 = Point2D(4, 5)\n+    assert p1.distance(p2) == 5\n+\n+def test_same_point_2d():\n+    p1 = Point2D(1, 1)\n+    assert p1.distance(p1) == 0\n+\n+def test_same_point_3d():\n+    p1 = Point3D(1, 1, 1)\n+    assert p1.distance(p1) == 0\n+\n def test_issue_9214():\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..95bba4b 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -741,7 +741,17 @@ def test_special_printers():\n     assert isinstance(func1(), mpi)\n     assert isinstance(func2(), mpi)\n \n-def test_true_false():\n+from sympy.utilities.lambdify import implemented_function\n+from sympy import Float\n+\n+def test_issue_12092():\n+    f = implemented_function('f', lambda x: x**2)\n+    g = implemented_function('g', lambda x: 2 * x)\n+    assert f(f(2)).evalf() == Float(16)\n+    assert g(f(2)).evalf() == Float(8)\n+    assert f(g(2)).evalf() == Float(16)\n+    assert f(g(g(2))).evalf() == Float(64)\n+    assert g(f(g(2))).evalf() == Float(32)\n     # We want exact is comparison here, not just ==\n     assert lambdify([], true)() is True\n     assert lambdify([], false)() is False\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..d9d5480 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -72,7 +72,16 @@ def test_ZeroMatrix_doit():\n     assert isinstance(Znn.doit().rows, Mul)\n \n \n+from sympy import Symbol, symbols, Sum, Q as Query, assuming, ask\n+\n def test_Identity():\n+    # Test for the issue where the sum of all elements of an identity matrix is expected to be 'n'\n+    n = Symbol('n', integer=True, positive=True)\n+    i, j = symbols('i j', integer=True)\n+    In = Identity(n)\n+\n+    # Total sum of the elements is expected to be 'n'\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n     A = MatrixSymbol('A', n, m)\n     In = Identity(n)\n     Im = Identity(m)\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..bc93ad6 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -330,6 +330,14 @@ def test_args():\n     assert p._array_form == [3, 2, 0, 1, 5, 4]\n     p = Permutation((0, 3, 1, 2))\n     assert p._cyclic_form is None\n+\n+    # Test non-disjoint cycles\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])  # Identity permutation\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([0, 2, 1])  # Non-disjoint cycles should be applied in left-to-right order\n+    assert Permutation([[0, 1, 2], [2, 3]]) == Permutation([0, 1, 3, 2])  # Overlapping cycles\n+    assert Permutation([[0, 3], [1, 2, 3]]) == Permutation([0, 2, 3, 1])  # Another case of overlapping cycles\n+    assert Permutation([[1, 2], [0, 1]]) == Permutation([1, 0, 2])  # Different permutations\n+    assert Permutation([[0, 2], [2, 3], [3, 0]]) == Permutation([3, 1, 0, 2])  # Cycles forming a loop\n     assert p._array_form == [0, 3, 1, 2]\n     assert Permutation([0]) == Permutation((0, ))\n     assert Permutation([[0], [1]]) == Permutation(((0, ), (1, ))) == \\\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex fa86bc3..fcb809d 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -1273,8 +1273,33 @@ def test_zeros_ones_fill():\n     assert zeros(2, 3) == Matrix(2, 3, [0]*6)\n     assert ones(2, 3) == Matrix(2, 3, [1]*6)\n \n-\n-def test_empty_zeros():\n+def test_matrix_hstack_vstack_zero_matrices():\n+    # Testing hstack with matrices having zero rows\n+    M1 = Matrix.zeros(0, 0)\n+    M2 = Matrix.zeros(0, 1)\n+    M3 = Matrix.zeros(0, 2)\n+    M4 = Matrix.zeros(0, 3)\n+    assert Matrix.hstack(M1, M2, M3, M4).shape == (0, 6)\n+\n+    # Testing vstack with matrices having zero columns\n+    M1 = Matrix.zeros(0, 0)\n+    M2 = Matrix.zeros(1, 0)\n+    M3 = Matrix.zeros(2, 0)\n+    M4 = Matrix.zeros(3, 0)\n+    assert Matrix.vstack(M1, M2, M3, M4).shape == (6, 0)\n+\n+    # Testing with non-zero matrices to ensure consistency\n+    M1 = Matrix.zeros(1, 0)\n+    M2 = Matrix.zeros(1, 1)\n+    M3 = Matrix.zeros(1, 2)\n+    M4 = Matrix.zeros(1, 3)\n+    assert Matrix.hstack(M1, M2, M3, M4).shape == (1, 6)\n+\n+    M1 = Matrix.zeros(0, 1)\n+    M2 = Matrix.zeros(1, 1)\n+    M3 = Matrix.zeros(2, 1)\n+    M4 = Matrix.zeros(3, 1)\n+    assert Matrix.vstack(M1, M2, M3, M4).shape == (6, 1)\n     a = zeros(0)\n     assert a == Matrix()\n     a = zeros(0, 2)\n",
  "sympy__sympy-13372": "diff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\nindex e95146a..7dd0f82 100644\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -170,6 +170,19 @@ def test_evalf_ramanujan():\n \n # Input that for various reasons have failed at some point\n \n+from sympy import Mul, Max, NS, Symbol\n+\n+x = Symbol('x')\n+y = Symbol('y')\n+\n+def test_issue_13076():\n+    # Original test case\n+    assert NS(Mul(Max(0, y), x, evaluate=False).evalf()) == 'x*Max(0, y)'\n+\n+    # Additional test cases to ensure robustness\n+    assert NS(Mul(x, Max(0, y), evaluate=False).evalf()) == 'x*Max(0, y)'\n+    assert NS(Mul(Max(0, x), y, evaluate=False).evalf()) == 'y*Max(0, x)'\n+    assert NS(Mul(y, Max(x, 0), evaluate=False).evalf()) == 'y*Max(x, 0)'\n \n def test_evalf_bugs():\n     assert NS(sin(1) + exp(-10**10), 10) == NS(sin(1), 10)\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..69055fa 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -203,6 +203,27 @@ def test_tanh():\n \n     assert tanh(k*pi*I/2) == tan(k*pi/2)*I\n \n+def test_coth_log_tan_subs():\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+    \n+    # Test cases for the originally failing values\n+    assert e.subs(x, 2).simplify() == coth(log(tan(2))).simplify()\n+    assert e.subs(x, 3).simplify() == coth(log(tan(3))).simplify()\n+    assert e.subs(x, 5).simplify() == coth(log(tan(5))).simplify()\n+    assert e.subs(x, 6).simplify() == coth(log(tan(6))).simplify()\n+    assert e.subs(x, 8).simplify() == coth(log(tan(8))).simplify()\n+    assert e.subs(x, 9).simplify() == coth(log(tan(9))).simplify()\n+    assert e.subs(x, 11).simplify() == coth(log(tan(11))).simplify()\n+    assert e.subs(x, 12).simplify() == coth(log(tan(12))).simplify()\n+    assert e.subs(x, 13).simplify() == coth(log(tan(13))).simplify()\n+    assert e.subs(x, 15).simplify() == coth(log(tan(15))).simplify()\n+    assert e.subs(x, 18).simplify() == coth(log(tan(18))).simplify()\n+\n+    # Additionally, test for values that did not cause errors\n+    assert e.subs(x, 1).simplify() == coth(log(tan(1))).simplify()\n+    assert e.subs(x, 4).simplify() == coth(log(tan(4))).simplify()\n+\n \n def test_tanh_series():\n     x = Symbol('x')\n",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..be9c758 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -165,6 +165,46 @@ def test_difference():\n     assert -1 in S.Reals - S.Naturals\n \n \n+from sympy import Complement, FiniteSet, Interval, Symbol\n+\n+x = Symbol('x')\n+y = Symbol('y')\n+z = Symbol('z')\n+\n+def test_issue_12712():\n+    # Original test case related to the issue\n+    assert Complement(FiniteSet(x, y, 2), Interval(-10, 10)) == \\\n+           Complement(FiniteSet(x, y), Interval(-10, 10))\n+\n+    # Additional test cases\n+    # Test with different interval\n+    assert Complement(FiniteSet(x, y, 2), Interval(0, 5)) == \\\n+           Complement(FiniteSet(x, y, 2), Interval(0, 5))\n+    \n+    # Test with extra symbol\n+    assert Complement(FiniteSet(x, y, z, 2), Interval(-10, 10)) == \\\n+           Complement(FiniteSet(x, y, z), Interval(-10, 10))\n+    \n+    # Test with multiple numbers\n+    assert Complement(FiniteSet(x, y, 2, 3), Interval(1, 4)) == \\\n+           Complement(FiniteSet(x, y), Interval(1, 4))\n+    \n+    # Test with no overlap with interval\n+    assert Complement(FiniteSet(x, y, 20), Interval(-10, 10)) == \\\n+           FiniteSet(x, y, 20)\n+\n+    # Test with only numbers in the FiniteSet\n+    assert Complement(FiniteSet(2, 3), Interval(1, 4)) == FiniteSet()\n+\n+    # Test with only symbols in the FiniteSet\n+    assert Complement(FiniteSet(x, y), Interval(-10, 10)) == FiniteSet(x, y)\n+\n+    # Test with an empty FiniteSet\n+    assert Complement(FiniteSet(), Interval(-10, 10)) == FiniteSet()\n+\n+    # Test with an empty Interval\n+    assert Complement(FiniteSet(x, y, 2), Interval(10, 10)) == FiniteSet(x, y, 2)\n+\n def test_Complement():\n     assert Complement(Interval(1, 3), Interval(1, 2)) == Interval(2, 3, True)\n     assert Complement(FiniteSet(1, 3, 4), FiniteSet(3, 4)) == FiniteSet(1)\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..79b6145 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,6 +201,22 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n+def test_issue_13643():\n+    import sympy as sm\n+\n+    M = sm.eye(6)\n+    V = 2 * sm.ones(6, 2)\n+    result = M.col_insert(3, V)\n+    expected = sm.Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert result == expected, f\"Expected {expected}, but got {result}\"\n+\n def test_extract():\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..5bf60b2 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -678,7 +678,20 @@ def test_Poly_mul():\n     assert 2 * Poly(x, x) == Poly(2*x, x)\n \n \n-def test_Poly_sqr():\n+def test_issue_13079():\n+    # Original test cases from the patch provided\n+    assert Poly(x) * x == Poly(x**2, x, domain='ZZ')\n+    assert x * Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert -2 * Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2) * Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert Poly(x) * S(-2) == Poly(-2*x, x, domain='ZZ')\n+\n+    # Additional test cases to verify the fix\n+    assert Poly(x + 1) * x == Poly(x**2 + x, x, domain='ZZ')\n+    assert x * Poly(x + 1) == Poly(x**2 + x, x, domain='ZZ')\n+    assert Poly(x) * Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert (Poly(x) * x).as_expr() == x**2  # Ensure conversion to expression is correct\n+    assert (x * Poly(x)).as_expr() == x**2  # Ensure conversion to expression is correct\n     assert Poly(x*y, x, y).sqr() == Poly(x**2*y**2, x, y)\n \n \n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..04ca422 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -54,8 +54,21 @@ def test_printmethod():\n             return \"foo\"\n     assert latex(R(x)) == \"foo\"\n \n-\n-def test_latex_basic():\n+from sympy import symbols, latex, S, Integral\n+import sympy\n+\n+x, y = symbols('x y')\n+\n+def test_custom_mul_symbol():\n+    assert latex(3*x**2*y, mul_symbol='\\\\,') == r\"3\\,x^{2}\\,y\"\n+    assert latex(1.5*3**x, mul_symbol='\\\\,') == r\"1.5\\,3^{x}\"\n+    # Test with different mul_symbols for comparison\n+    assert latex(3*x*y, mul_symbol='times') == r\"3 \\times x \\times y\"\n+    assert latex(3*x*y, mul_symbol='dot') == r\"3 \\cdot x \\cdot y\"\n+    # Test with no mul_symbol should fallback to default\n+    assert latex(3*x*y) == r\"3 x y\"\n+    # Test Integral with default behavior to ensure compatibility\n+    assert latex(Integral(2*x**2*y, x)) == r\"\\int 2 x^{2} y\\, dx\"\n     assert latex(1 + x) == \"x + 1\"\n     assert latex(x**2) == \"x^{2}\"\n     assert latex(x**(1 + x)) == \"x^{x + 1}\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..56eaf4d 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -307,8 +307,20 @@ def test_tolist():\n     m = Matrix(lst)\n     assert m.tolist() == lst\n \n-\n-def test_as_mutable():\n+def test_issue_13835_determinant_symbolic_entries():\n+    from sympy import Matrix, symbols\n+\n+    a = symbols('a')\n+    f = lambda n: Matrix([[i + a*j for i in range(n)] for j in range(n)]).det()\n+    \n+    assert f(1) == 0\n+    assert f(2) == -a\n+    assert f(3) == 2*a*(a + 2) + 2*a*(2*a + 1) - 3*a*(2*a + 2)\n+    assert f(4) == 0\n+\n+    # Adding assert to ensure that the issue is resolved\n+    assert f(5) == 0\n+    assert f(6) == 0\n     assert zeros(0, 3).as_mutable() == zeros(0, 3)\n     assert zeros(0, 3).as_immutable() == ImmutableMatrix(zeros(0, 3))\n     assert zeros(3, 0).as_immutable() == ImmutableMatrix(zeros(3, 0))\n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..9e4f369 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -176,7 +176,56 @@ def test_ContinuousRV():\n     assert P(X > 0) == P(Y > 0)\n \n \n-def test_arcsin():\n+def test_precomputed_cdf_issue():\n+    x = Symbol('x', real=True)\n+    \n+    # Test Arcsin distribution\n+    X_arcsin = Arcsin(\"x\", 0, 3)\n+    assert simplify(cdf(X_arcsin)(1)).equals(2*asin(sqrt(1/3))/pi)\n+    \n+    # Test Dagum distribution\n+    X_dagum = Dagum(\"x\", Rational(1, 3), Rational(1, 5), 2)\n+    assert simplify(cdf(X_dagum)(3)) == (1 + (3/2)**(-Rational(1, 3)))**(-Rational(1, 5))\n+    \n+    # Test Erlang distribution\n+    X_erlang = Erlang(\"x\", 1, 1)\n+    assert cdf(X_erlang)(1) == 1 - exp(-1)\n+    \n+    # Test Frechet distribution\n+    X_frechet = Frechet(\"x\", Rational(4, 3), 1, 2)\n+    assert simplify(cdf(X_frechet)(3)) == exp(-((3 - 2)**(-Rational(4, 3))))\n+    \n+    # Test Gamma distribution\n+    X_gamma = Gamma(\"x\", 0.1, 2)\n+    assert simplify(cdf(X_gamma)(3)) == lowergamma(0.1, 1.5) / gamma(0.1)\n+    \n+    # Test Gamma Inverse distribution\n+    X_gamma_inv = GammaInverse(\"x\", Rational(5, 7), 2)\n+    assert simplify(cdf(X_gamma_inv)(3)) == uppergamma(Rational(5, 7), 2/3) / gamma(Rational(5, 7))\n+    \n+    # Test Kumaraswamy distribution\n+    X_kumaraswamy = Kumaraswamy(\"x\", Rational(1, 123), 5)\n+    assert simplify(cdf(X_kumaraswamy)(Rational(1, 3))) == 1 - (1 - (Rational(1, 3))**(Rational(1, 123)))**5\n+    \n+    # Test Laplace distribution\n+    X_laplace = Laplace(\"x\", 2, 3)\n+    assert simplify(cdf(X_laplace)(5)) == 1 - exp(-1)\n+    \n+    # Test Logistic distribution\n+    X_logistic = Logistic(\"x\", 1, 0.1)\n+    assert simplify(cdf(X_logistic)(2)) == 1 / (1 + exp(-10))\n+    \n+    # Test Nakagami distribution\n+    X_nakagami = Nakagami(\"x\", Rational(7, 3), 1)\n+    assert simplify(cdf(X_nakagami)(2)) == lowergamma(Rational(7, 3), Rational(14, 3)) / gamma(Rational(7, 3))\n+    \n+    # Test StudentT distribution\n+    X_studentt = StudentT(\"x\", 10)\n+    assert tn(cdf(X_studentt)(2), 0.952267, x)\n+    \n+    # Test UniformSum distribution\n+    X_uniformsum = UniformSum(\"x\", 5)\n+    assert tn(cdf(X_uniformsum)(2), 0.0, x)\n     a = Symbol(\"a\", real=True)\n     b = Symbol(\"b\", real=True)\n \n",
  "sympy__sympy-13974": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bd3e825..98ad45c 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -45,7 +45,31 @@ def test_tensor_product_commutator():\n         TP(A, B)*TP(B, C) - TP(B, C)*TP(A, B)\n \n \n+from sympy import symbols\n+from sympy.physics.quantum import TensorProduct as TP, tensor_product_simp\n+from sympy.physics.paulialgebra import Pauli\n+\n def test_tensor_product_simp():\n+    A, B, C, D = symbols('A,B,C,D', commutative=False)\n+    # Test cases from original patch\n+    x = symbols('x', commutative=True)\n+    assert tensor_product_simp(TP(A, B)**x) == TP(A**x, B**x)\n+    assert tensor_product_simp(x*TP(A, B)**2) == x*TP(A**2,B**2)\n+    assert tensor_product_simp(x*(TP(A, B)**2)*TP(C,D)) == x*TP(A**2*C,B**2*D)\n+    assert tensor_product_simp(TP(A,B)-TP(C,D)**x) == TP(A,B)-TP(C**x,D**x)\n+    \n+    # New test cases to cover issue\n+    # Test with numerical values and Pauli matrices\n+    t1 = TP(1, 1)*TP(1, 1)\n+    assert tensor_product_simp(t1) == TP(1, 1)**2\n+\n+    a = symbols('a', commutative=False)\n+    assert tensor_product_simp(TP(1, 1)*TP(1, a)).subs(a, 1) == TP(1, 1)\n+\n+    t2 = TP(1, Pauli(3))*TP(1, Pauli(3))\n+    assert tensor_product_simp(t2) == TP(1, Pauli(3))**2\n+\n+    assert tensor_product_simp(TP(1, Pauli(3))*TP(1, a)).subs(a, Pauli(3)) == TP(1, 1)\n     assert tensor_product_simp(TP(A, B)*TP(B, C)) == TP(A*B, B*C)\n \n \n",
  "sympy__sympy-14531": "",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..6e6f2c3 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -4,6 +4,10 @@ from sympy.abc import x, y, z\n from sympy.utilities.pytest import raises\n \n \n+from sympy.physics.vector import ReferenceFrame, Vector\n+\n+N = ReferenceFrame('N')\n+\n Vector.simp = True\n A = ReferenceFrame('A')\n \n@@ -19,6 +23,16 @@ def test_Vector():\n     v4 = v1 - v2\n \n     assert isinstance(v1, Vector)\n+\n+    # Test case for vector addition issue with 0\n+    assert A.x + 0 == A.x\n+    assert sum([N.x, (0 * N.x)]) == N.x\n+    \n+    # Additional test cases for edge scenarios\n+    assert A.x + 0 * A.x == A.x\n+    assert 0 * A.x + A.x == A.x\n+    assert sum([(0 * A.x), (0 * A.y), (0 * A.z)]) == 0 * A.x  # Should be zero vector\n+    assert sum([A.x, 0, A.y]) == A.x + A.y\n     assert dot(v1, A.x) == x\n     assert dot(v1, A.y) == y\n     assert dot(v1, A.z) == z\n",
  "sympy__sympy-14976": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..18c341a 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1,3 +1,4 @@\n+\n from distutils.version import LooseVersion as V\n from itertools import product\n import math\n@@ -133,7 +134,27 @@ def test_math_lambda():\n            # if this succeeds, it can't be a python math function\n \n \n+from sympy import RisingFactorial as rf\n+\n @conserve_mpmath_dps\n+def test_rational_wrapping_in_mpmath():\n+    \"\"\"\n+    Test that lambdify with mpmath wraps rationals correctly,\n+    ensuring computations use full precision.\n+    \"\"\"\n+    x = symbols('x')\n+    eqn = Eq(rf(18, x), 77 + Rational(1, 3))\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    \n+    # Ensure the lambdified function has wrapped the rational number correctly\n+    src = inspect.getsource(f)\n+    assert 'mpmath.mpf(232)/mpmath.mpf(3)' in src\n+\n+    # Test nsolve with high precision\n+    x0 = nsolve(eqn, Float('1.5', 64), prec=64)\n+    rf_val = rf(18, x0).evalf(64)\n+    expected_val = (77 + Rational(1, 3)).evalf(64)\n+    assert abs(rf_val - expected_val) < mpmath.mpf('1e-60')\n def test_mpmath_lambda():\n     mpmath.mp.dps = 50\n     sin02 = mpmath.mpf(\"0.19866933079506121545941262711838975037020672954020\")\n@@ -144,7 +165,27 @@ def test_mpmath_lambda():\n            # if this succeeds, it can't be a mpmath function\n \n \n+from sympy import RisingFactorial as rf\n+\n @conserve_mpmath_dps\n+def test_rational_wrapping_in_mpmath():\n+    \"\"\"\n+    Test that lambdify with mpmath wraps rationals correctly,\n+    ensuring computations use full precision.\n+    \"\"\"\n+    x = symbols('x')\n+    eqn = Eq(rf(18, x), 77 + Rational(1, 3))\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    \n+    # Ensure the lambdified function has wrapped the rational number correctly\n+    src = inspect.getsource(f)\n+    assert 'mpmath.mpf(232)/mpmath.mpf(3)' in src\n+\n+    # Test nsolve with high precision\n+    x0 = nsolve(eqn, Float('1.5', 64), prec=64)\n+    rf_val = rf(18, x0).evalf(64)\n+    expected_val = (77 + Rational(1, 3)).evalf(64)\n+    assert abs(rf_val - expected_val) < mpmath.mpf('1e-60')\n def test_number_precision():\n     mpmath.mp.dps = 50\n     sin02 = mpmath.mpf(\"0.19866933079506121545941262711838975037020672954020\")\n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/ndim_array.py b/sympy/tensor/array/ndim_array.py\nindex 0b1a18b..84bf1a6 100644\n--- a/sympy/tensor/array/ndim_array.py\n+++ b/sympy/tensor/array/ndim_array.py\n@@ -174,12 +174,28 @@ class NDimArray(object):\n         >>> len(a)\n         9\n \n-        \"\"\"\n+        Returns number of elements in array, even for rank-0 arrays where it returns 1.\n+\n+        Examples\n+        ========\n+\n+        >>> from sympy.tensor.array import ImmutableDenseNDimArray\n+        >>> a = ImmutableDenseNDimArray(5)\n+        >>> len(a)\n+        1\n         return self._loop_size\n \n     @property\n     def shape(self):\n-        \"\"\"\n+        Returns number of elements in array, even for rank-0 arrays where it returns 1.\n+\n+        Examples\n+        ========\n+\n+        >>> from sympy.tensor.array import ImmutableDenseNDimArray\n+        >>> a = ImmutableDenseNDimArray(5)\n+        >>> len(a)\n+        1\n         Returns array shape (dimension).\n \n         Examples\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..0bfd54b 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,21 @@\n+\n+def test_Max_Min():\n+    # Test the specific issue reported\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[x, 2]\"  # Order should be x, 2 for consistency\n+    \n+    # Test additional cases for thoroughness\n+    assert mcode(Max(3, x, y, 5)) == \"Max[3, x, y, 5]\"\n+    assert mcode(Max(y, x, 2, 3)) == \"Max[y, x, 2, 3]\"  # Order should be preserved as given in argument\n+    \n+    # Original test case\n+    assert mcode(Max(x, y, z) * Min(y, z)) == \"Max[x, y, z]*Min[y, z]\"\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n",
  "sympy__sympy-15349": "diff --git a/sympy/algebras/tests/test_quaternion.py b/sympy/algebras/tests/test_quaternion.py\nindex c486cc1..a575ea3 100644\n--- a/sympy/algebras/tests/test_quaternion.py\n+++ b/sympy/algebras/tests/test_quaternion.py\n@@ -112,6 +112,47 @@ def test_quaternion_conversions():\n                                                [sin(theta),  cos(theta), 0],\n                                                [0,           0,          1]])\n \n+def test_quaternion_rotation_matrix():\n+    from sympy import symbols, cos, sin, Matrix, trigsimp\n+    from sympy.algebras.quaternion import Quaternion\n+\n+    x = symbols('x')\n+    # Test case from the original issue with the correct expected matrix\n+    q1 = Quaternion(cos(x/2), sin(x/2), 0, 0)\n+    expected_matrix_1 = Matrix([\n+        [1,      0,        0],\n+        [0, cos(x), -sin(x)],\n+        [0, sin(x),  cos(x)]\n+    ])\n+    assert trigsimp(q1.to_rotation_matrix()) == expected_matrix_1\n+\n+    # Additional test case: 90 degrees (pi/2 rotation around x-axis)\n+    q2 = Quaternion(cos(pi/4), sin(pi/4), 0, 0)\n+    expected_matrix_2 = Matrix([\n+        [1, 0, 0],\n+        [0, 0, -1],\n+        [0, 1, 0]\n+    ])\n+    assert trigsimp(q2.to_rotation_matrix()) == expected_matrix_2\n+\n+    # Additional test case: 180 degrees (pi rotation around x-axis)\n+    q3 = Quaternion(0, 1, 0, 0)\n+    expected_matrix_3 = Matrix([\n+        [1,  0,  0],\n+        [0, -1,  0],\n+        [0,  0, -1]\n+    ])\n+    assert trigsimp(q3.to_rotation_matrix()) == expected_matrix_3\n+\n+    # Additional test case: Zero rotation (identity quaternion)\n+    q4 = Quaternion(1, 0, 0, 0)\n+    expected_matrix_4 = Matrix([\n+        [1, 0, 0],\n+        [0, 1, 0],\n+        [0, 0, 1]\n+    ])\n+    assert trigsimp(q4.to_rotation_matrix()) == expected_matrix_4\n+\n     assert q2.to_axis_angle() == ((0, 0, sin(theta/2)/Abs(sin(theta/2))),\n                                    2*acos(cos(theta/2)))\n \n@@ -119,4 +160,4 @@ def test_quaternion_conversions():\n                [cos(theta), -sin(theta), 0, sin(theta) - cos(theta) + 1],\n                [sin(theta),  cos(theta), 0, -sin(theta) - cos(theta) + 1],\n                [0,           0,          1,  0],\n-               [0,           0,          0,  1]])\n+               [0,           0,          0,  1]])\n",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..f0cc24f 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1625,7 +1625,19 @@ def test_Mod():\n     assert (3*i*x) % (2*i*y) == i*Mod(3*x, 2*y)\n     assert Mod(4*i, 4) == 0\n \n-    # issue 8677\n+    # issue 15493\n+    i, j = symbols('i j', integer=True, positive=True)\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+    assert Mod(8*i/j, 4) == 4*Mod(2*i/j, 1)\n+    assert Mod(8*i, 4) == 0\n+\n+    # Additional tests to verify the fix\n+    assert Mod(6*i, 2) == 0   # Should simplify since 6 is a multiple of 2\n+    assert Mod(9*i, 3) == 0   # Should simplify since 9 is a multiple of 3\n+    assert Mod(15*i, 5) == 0  # Should simplify since 15 is a multiple of 5\n+    assert Mod(12*i + 5, 3) == Mod(2*i + 2, 3)  # Simplification with addition\n+    assert Mod(3*i + 1, 2) == Mod(i + 1, 2)    # Check with an offset\n+    assert Mod(3*i + 4, 2) == Mod(i, 2)        # Simplification with constant\n     n = Symbol('n', integer=True, positive=True)\n     assert factorial(n) % n == 0\n     assert factorial(n + 2) % n == 0\n",
  "sympy__sympy-15809": "diff --git a/sympy/functions/elementary/tests/test_miscellaneous.py b/sympy/functions/elementary/tests/test_miscellaneous.py\nindex 821fd0c..190f582 100644\n--- a/sympy/functions/elementary/tests/test_miscellaneous.py\n+++ b/sympy/functions/elementary/tests/test_miscellaneous.py\n@@ -85,7 +85,9 @@ def test_Min():\n     assert Min(p, p_).func is Min\n \n     # lists\n-    raises(ValueError, lambda: Min())\n+    from sympy import Min, Max, S, Symbol\n+    \n+    assert Min() == S.Infinity\n     assert Min(x, y) == Min(y, x)\n     assert Min(x, y, z) == Min(z, y, x)\n     assert Min(x, Min(y, z)) == Min(z, y, x)\n@@ -156,7 +158,7 @@ def test_Max():\n \n     # lists\n \n-    raises(ValueError, lambda: Max())\n+    assert Max() == S.NegativeInfinity\n     assert Max(x, y) == Max(y, x)\n     assert Max(x, y, z) == Max(z, y, x)\n     assert Max(x, Max(y, z)) == Max(z, y, x)\n",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..6fe8fa2 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1987,10 +1987,39 @@ def test_Add_is_zero():\n     assert (x + y).is_zero\n \n \n-def test_issue_14392():\n+def test_issue_15873():\n+    from sympy import I, simplify\n+\n+    # Original test case from the patch\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None\n+\n+    # Additional test cases\n+    e_simplified = simplify(e)\n+    assert e_simplified.is_zero is True\n+\n+    # Test with purely real numbers that sum to zero\n+    f = 2 - 2\n+    assert f.is_zero is True\n+\n+    # Test with purely imaginary numbers that sum to zero\n+    g = 3*I - 3*I\n+    assert g.is_zero is True\n+\n+    # Test with a combination of real and imaginary that sum to zero\n+    h = 1 + 2*I + (-1) - 2*I\n+    assert h.is_zero is True\n+\n+    # Test with complex numbers that don't sum to zero\n+    i = 1 + 2*I + 1 + 2*I\n+    assert i.is_zero is False\n+\n+    # Another complex expression that evaluates to zero\n+    j = (1 + I)*(1 - I) - 2\n+    assert j.is_zero is True\n     assert (sin(zoo)**2).as_real_imag() == (nan, nan)\n \n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..9c21eee 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -512,7 +512,17 @@ def test_posify():\n         'Sum(_x**(-n), (n, 1, 3))'\n \n \n-def test_issue_4194():\n+def test_issue_posify_finite():\n+    # Test for issue where posify should preserve finite assumption\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0 == {\n+        'positive': True, 'zero': False, 'imaginary': False, \n+        'nonpositive': False, 'commutative': True, 'hermitian': True, \n+        'real': True, 'nonzero': True, 'nonnegative': True, \n+        'negative': False, 'complex': True, 'finite': True, 'infinite': False\n+    }\n+    assert eq.is_finite == True\n     # simplify should call cancel\n     from sympy.abc import x, y\n     f = Function('f')\n",
  "sympy__sympy-16766": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 51a287f..f2defc3 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n \n@@ -13,6 +14,7 @@ from sympy.printing.pycode import (\n )\n from sympy.utilities.pytest import raises\n \n+from sympy.tensor import IndexedBase, Idx\n x, y, z = symbols('x y z')\n \n \n@@ -35,6 +37,14 @@ def test_PythonCodePrinter():\n                                                         ' (3) if (x > 0) else None)'\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n \n+    # Test for Indexed support in PythonCodePrinter\n+    p = IndexedBase(\"p\")\n+    i, j = symbols('i j')\n+    assert prntr.doprint(p[0]) == 'p[0]'\n+    assert prntr.doprint(p[i]) == 'p[i]'\n+    assert prntr.doprint(p[i, j]) == 'p[i, j]'\n+    assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n+\n \n def test_MpmathPrinter():\n     p = MpmathPrinter()\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py\nindex 23fddca..69e349a 100644\n--- a/sympy/utilities/tests/test_autowrap.py\n+++ b/sympy/utilities/tests/test_autowrap.py\n@@ -31,6 +31,9 @@ def get_string(dump_fn, routines, prefix=\"file\", **kwargs):\n     return source\n \n \n+from sympy import MatrixSymbol\n+import numpy as np\n+\n def test_cython_wrapper_scalar_function():\n     x, y, z = symbols('x,y,z')\n     expr = (x + y)*z\n@@ -48,7 +51,13 @@ def test_cython_wrapper_scalar_function():\n     assert source == expected\n \n \n-def test_cython_wrapper_outarg():\n+def test_cython_unused_array_arg():\n+    x = MatrixSymbol('x', 2, 1)\n+    # x does not appear in the output expression\n+    expr = 1.0\n+    f = autowrap(expr, args=(x,), backend='cython')\n+    result = f(np.array([[1.0], [2.0]]))\n+    assert result == 1.0\n     from sympy import Equality\n     x, y, z = symbols('x,y,z')\n     code_gen = CythonCodeWrapper(C99CodeGen())\n",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..d33c96e 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -248,8 +248,8 @@ def test_encode_morse():\n     assert encode_morse(' ', sep='``') == '````'\n     assert encode_morse('!@#$%^&*()_+') == '-.-.--|.--.-.|...-..-|-.--.|-.--.-|..--.-|.-.-.'\n \n-\n-def test_decode_morse():\n+    # New test case to check if the mapping for \"1\" is correct\n+    assert encode_morse('1') == '.----'\n     assert decode_morse('-.-|.|-.--') == 'KEY'\n     assert decode_morse('.-.|..-|-.||') == 'RUN'\n     raises(KeyError, lambda: decode_morse('.....----'))\n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..a6fcc5a 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -801,6 +801,8 @@ def test_nc_simplify():\n     # commutative expressions should be returned without an error\n     assert nc_simplify(2*x**2) == 2*x**2\n \n+from sympy import Symbol, simplify, cos, I\n+\n def test_issue_15965():\n     A = Sum(z*x**y, (x, 1, a))\n     anew = z*Sum(x**y, (x, 1, a))\n@@ -811,7 +813,16 @@ def test_issue_15965():\n     assert simplify(B) == bnew\n \n \n-def test_issue_7971():\n+def test_issue_17137():\n+    x = Symbol('x')\n+    # Test cases for the issue with complex exponents\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+    # Additional cases to ensure robustness\n+    assert simplify(cos(x)**(I + I)) == cos(x)**(2*I)\n+    assert simplify(cos(x)**(-I)) == cos(x)**(-I)\n+    assert simplify(cos(x)**0) == 1  # Identity property\n+    assert simplify(cos(x)**1) == cos(x)  # Identity property\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..b4dda93 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,4 +1,7 @@\n-from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n+\n+from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos, I\n+from sympy.simplify.sqrtdenest import _sqrt_match\n+from sympy.core.expr import unchanged\n from sympy.simplify.sqrtdenest import _subsets as subsets\n from sympy.utilities.pytest import slow\n \n@@ -175,8 +178,20 @@ def test_subsets():\n         [0, 1, 1, 0], [1, 1, 1, 0], [0, 0, 0, 1], [1, 0, 0, 1], [0, 1, 0, 1],\n         [1, 1, 0, 1], [0, 0, 1, 1], [1, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]]\n \n+def test_issue_12420():\n+    assert _sqrt_match(4 + I) == []\n+    # Test the specific case that caused the IndexError\n+    expr = (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2\n+    result = sqrtdenest(expr)\n+    assert result == expr  # Since the expression cannot be denested, it should return unchanged\n+\n+    # Additional test cases\n+    expr2 = 3 - sqrt(2)*sqrt(4 + I) + 3*I\n+    assert sqrtdenest(expr2) == expr2  # This should also return unchanged\n \n-def test_issue_5653():\n+    # Test with real numbers that can't be denested\n+    expr3 = sqrt(2) + sqrt(3)\n+    assert sqrtdenest(expr3) == expr3  # Should return unchanged since it can't be denested\n     assert sqrtdenest(\n         sqrt(2 + sqrt(2 + sqrt(2)))) == sqrt(2 + sqrt(2 + sqrt(2)))\n \n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..bf5d044 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,7 +1,8 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n-from sympy.matrices import Matrix\n+import sympy\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.pytest import raises, warns\n \n@@ -82,8 +83,13 @@ def test_point():\n         assert Point.is_concyclic(*pts) is False\n     assert Point.is_concyclic(p4, p4 * 2, p4 * 3) is False\n     assert Point(0, 0).is_concyclic((1, 1), (2, 2), (2, 1)) is False\n+    \n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n \n-    assert p4.scale(2, 3) == Point(2, 3)\n+    # Test for issue: multiplying Point and number\n+    assert point1 + point2 * sympy.sympify(2.0) == Point(2, 2)\n+    assert point1 + sympy.sympify(2.0) * point2 == Point(2, 2)\n     assert p3.scale(2, 3) == p3\n \n     assert p4.rotate(pi, Point(0.5, 0.5)) == p3\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..64debd8 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -548,6 +548,14 @@ def test_diophantine():\n         set([(-1, 1), (-4, -1), (1, -1), (1, 1), (-4, 1), (-1, -1), (4, 1), (4, -1)])\n \n     # issue 18122\n+\n+    # issue 18186\n+    x, y = symbols('x y')\n+    eq1 = y**4 + x**4 - 2**4 - 3**4\n+    expected_sol = set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    \n+    assert diophantine(eq1, syms=(x, y), permute=True) == expected_sol\n+    assert diophantine(eq1, syms=(y, x), permute=True) == expected_sol\n     assert check_solutions(x**2-y)\n     assert check_solutions(y**2-x)\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..92450f1 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -672,12 +672,33 @@ def test_latex_derivatives():\n         r'\\frac{d^{\\max\\left(n_{1}, n_{2}\\right)}}{d x^{\\max\\left(n_{1}, n_{2}\\right)}} f{\\left(x \\right)}'\n \n \n+from sympy import Subs, latex\n+from sympy.abc import x, y, z\n+\n def test_latex_subs():\n     assert latex(Subs(x*y, (\n         x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n \n-\n-def test_latex_integrals():\n+def test_latex_subs_complex():\n+    # Original test patch\n+    assert latex(3*Subs(-x+y, (x,),(1,))) == r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+    \n+    # Additional test cases\n+    # Test with multiple substitutions\n+    assert latex(Subs(x*y + z, (x, y), (1, 2))) == r'\\left. \\left(x y + z\\right) \\right|_{\\substack{ x=1\\\\ y=2 }}'\n+    \n+    # Test with more complex expression\n+    assert latex(2*Subs(x**2 + y**2, (x,), (z,))) == r'2 \\left. \\left(x^{2} + y^{2}\\right) \\right|_{\\substack{ x=z }}'\n+    \n+    # Test with nested Subs\n+    nested_subs = Subs(Subs(x + y, (x,), (z,)), (y,), (1,))\n+    assert latex(nested_subs) == r'\\left. \\left(\\left. \\left(x + y\\right) \\right|_{\\substack{ x=z }}\\right) \\right|_{\\substack{ y=1 }}'\n+\n+    # Test without multiplicative coefficient\n+    assert latex(Subs(-x+y, (x,), (1,))) == r'\\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+\n+    # Ensure that the original simple test case still passes\n+    assert latex(Subs(x*y, (x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n     assert latex(Integral(log(x), x)) == r\"\\int \\log{\\left(x \\right)}\\, dx\"\n     assert latex(Integral(x**2, (x, 0, 1))) == \\\n         r\"\\int\\limits_{0}^{1} x^{2}\\, dx\"\n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "diff --git a/sympy/sets/tests/test_conditionset.py b/sympy/sets/tests/test_conditionset.py\nindex 68ee5d6..24401ac 100644\n--- a/sympy/sets/tests/test_conditionset.py\n+++ b/sympy/sets/tests/test_conditionset.py\n@@ -1,3 +1,4 @@\n+\n from sympy.sets import (ConditionSet, Intersection, FiniteSet,\n     EmptySet, Union, Contains)\n from sympy import (Symbol, Eq, S, Abs, sin, pi, Interval,\n@@ -126,6 +127,12 @@ def test_subs_CondSet():\n         n, n < x, Interval(0, oo)).subs(x, p) == Interval(0, oo)\n     assert ConditionSet(\n         n, n < x, Interval(-oo, 0)).subs(x, p) == S.EmptySet\n+    # Additional test case for issue with ConditionSet and ImageSet substitution\n+    k = Symbol('k')\n+    img1 = imageset(Lambda(k, 2*k*pi + asin(y)), S.Integers)\n+    img2 = imageset(Lambda(k, 2*k*pi + asin(S.One/3)), S.Integers)\n+    assert ConditionSet(x, Contains(y, Interval(-1, 1)), img1).subs(y, S.One/3).dummy_eq(img2)\n+\n     assert ConditionSet(f(x), f(x) < 1, {w, z}\n         ).subs(f(x), y) == ConditionSet(y, y < 1, {w, z})\n \n",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..f3774c5 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -513,8 +513,29 @@ def test_kernS():\n     one = kernS('x - (x - 1)')\n     assert one != 1 and one.expand() == 1\n \n+def test_kernS_issue_handling():\n+    # Test with a simple expression to ensure no UnboundLocalError\n+    s = '(2*x)/(x-1)'\n+    assert kernS(s) == 2*x/(x-1)\n \n-def test_issue_6540_6552():\n+    # Test with unmatched parentheses to check for SympifyError\n+    try:\n+        kernS('(x + 1')\n+        assert False, \"Expected a SympifyError due to unmatched parentheses\"\n+    except SympifyError:\n+        pass\n+\n+    # Test with special characters that might interfere with kern\n+    assert kernS('-1 - 2*(-(-x + 1/x)/(x*(x - 1/x)**2) - 1/(x*(x - 1/x)))').simplify() == -1\n+\n+    # Test with expressions that have spaces\n+    assert kernS('2*( x + y)') == 2*(x + y)\n+\n+    # Test expression that doesn't require 'kern' to be added\n+    assert kernS('x - (x - 1)') == 1\n+    \n+    # Test expression with nested parentheses\n+    assert kernS('((x + y))*(z)') == (x + y)*z\n     assert S('[[1/3,2], (2/5,)]') == [[Rational(1, 3), 2], (Rational(2, 5),)]\n     assert S('[[2/6,2], (2/4,)]') == [[Rational(1, 3), 2], (S.Half,)]\n     assert S('[[[2*(1)]]]') == [[[2]]]\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_operator.py b/sympy/physics/quantum/tests/test_operator.py\nindex 799aaae..a84fac4 100644\n--- a/sympy/physics/quantum/tests/test_operator.py\n+++ b/sympy/physics/quantum/tests/test_operator.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Derivative, diff, Function, Integer, Mul, pi, sin, Symbol,\n                    symbols)\n from sympy.physics.quantum.qexpr import QExpr\n@@ -75,6 +76,23 @@ def test_unitary():\n     U = UnitaryOperator('U')\n \n     assert isinstance(U, UnitaryOperator)\n+    \n+def test_dagger_identity_mul():\n+    O = Operator('O')\n+    I = IdentityOperator()\n+    D = Dagger(O)\n+\n+    # Test direct multiplication\n+    assert D * I == D\n+    assert I * D == D\n+\n+    # Test qapply to ensure the correct application\n+    assert qapply(D * I) == D\n+    assert qapply(I * D) == D\n+\n+    # Ensure the identity property remains for operators\n+    assert O * I == O\n+    assert I * O == O\n     assert isinstance(U, Operator)\n \n     assert U.inv() == Dagger(U)\n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..487e8e1 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -906,7 +906,42 @@ def test_sylow_subgroup():\n     assert G.order()/S.order() % 2 > 0\n \n \n-@slow\n+def test_issue_sylow_subgroup_indexerror():\n+    from sympy.combinatorics import DihedralGroup\n+\n+    # Test case for DihedralGroup(18), p=2\n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(2)\n+    assert S.order() == 4\n+\n+    # Test case for DihedralGroup(50), p=2\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(2)\n+    assert S.order() == 4\n+\n+    # Additional test cases for coverage\n+\n+    # Test case for DihedralGroup(2*25), p=2\n+    G = DihedralGroup(2 * 25)\n+    S = G.sylow_subgroup(2)\n+    assert S.order() == 4\n+\n+    # Test case for a smaller DihedralGroup\n+    G = DihedralGroup(6)\n+    S = G.sylow_subgroup(3)\n+    assert S.order() == 3\n+\n+    # Test case for a DihedralGroup with a different prime\n+    G = DihedralGroup(8)\n+    S = G.sylow_subgroup(2)\n+    assert S.order() == 4\n+\n+    # Confirm functionality with different primes and orders\n+    G = DihedralGroup(32)\n+    S3 = G.sylow_subgroup(3)\n+    assert S3.order() == 1  # 3 is not a divisor of 32\n+    S2 = G.sylow_subgroup(2)\n+    assert S2.order() == 32  # should capture the full group\n def test_presentation():\n     def _test(P):\n         G = P.presentation()\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..49bd016 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -470,8 +470,23 @@ def test_multiset_permutations():\n         [1, 1, 0, 0, 0]\n         6\\n''')\n \n+from sympy.utilities.iterables import partitions\n \n def test_partitions():\n+    # Test that no partition is reused by modifying a partition and checking others\n+    partition_list = list(partitions(6, k=2))\n+    partition_list[0][2] = 0  # modify one partition\n+    assert partition_list == [\n+        {2: 0, 1: 2, 2: 2},  # modified first partition\n+        {1: 2, 2: 2},\n+        {1: 4, 2: 1},\n+        {1: 6},\n+    ]\n+    # Test to check that modifying one element doesn't affect others\n+    partition1 = next(partitions(6, k=2))\n+    partition2 = next(partitions(6, k=2))\n+    partition1[3] = 0\n+    assert partition2 != partition1\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n         assert list(partitions(0, size=i)) == ans[i]\n",
  "sympy__sympy-20801": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e1c7e2..2923810 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -583,6 +583,12 @@ def test_Float():\n         assert Float(i) is a\n \n \n+def test_zero_not_false():\n+    # https://github.com/sympy/sympy/issues/20796\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n \n @conserve_mpmath_dps\n def test_float_mpf():\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..5cb20f8 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -20,7 +21,20 @@ def test_subs():\n     assert e == Rational(6)\n \n \n-def test_subs_Matrix():\n+def test_issue_21373():\n+    from sympy.functions.elementary.trigonometric import sinh\n+    from sympy.functions.elementary.piecewise import Piecewise\n+\n+    x_r, y_r = symbols('x_r y_r', real=True)\n+    z = symbols('z')\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    \n+    # Test that substitution does not raise exceptions\n+    expr.subs({1: 1.0})\n+    \n+    # Additional checks to ensure the expression behaves as expected\n+    assert expr.subs({x_r: 1, y_r: 2, z: 1}) == exp(sinh(Piecewise((1, True), (2, True))))\n+    assert expr.subs({x_r: 1, y_r: 0, z: 1}) == exp(sinh(Piecewise((1, False), (0, True))))\n     z = zeros(2)\n     z1 = ZeroMatrix(2, 2)\n     assert (x*y).subs({x:z, y:0}) in [z, z1]\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..d30d152 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -13,10 +13,19 @@ from sympy.polys.polyerrors import ExactQuotientFailed\n \n from sympy.abc import a, b, c, x, y, z\n from sympy.core import S, symbols\n+from sympy.polys.monomials import itermonomials\n+from sympy.polys.orderings import monomial_key\n from sympy.testing.pytest import raises\n \n-\n-def test_monomials():\n+def test_issue_with_itermonomials_min_degrees():\n+    # Test case for the specific issue described\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    states = [x1, x2, x3]\n+    max_degrees = 3\n+    min_degrees = 3\n+    expected_monomials = {x1**3, x2**3, x3**3, x1*x2**2, x1**2*x2, x1*x3**2, x1**2*x3, x2*x3**2, x2**2*x3, x1*x2*x3}\n+    result_monomials = set(itermonomials(states, max_degrees, min_degrees=min_degrees))\n+    assert result_monomials == expected_monomials\n \n     # total_degree tests\n     assert set(itermonomials([], 0)) == {S.One}\n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..bdbd22e 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -267,6 +267,22 @@ def test_String():\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n+    assert st.func(*st.args) == st  # additional test for argument invariance\n+\n+    # Edge case: Empty String\n+    st_empty = String('')\n+    assert st_empty.func(*st_empty.args) == st_empty\n+    assert st_empty.func(**st_empty.kwargs()) == st_empty\n+\n+    # Test with QuotedString (subclass of String)\n+    qs = QuotedString('\"quoted\"')\n+    assert qs.func(*qs.args) == qs\n+    assert qs.func(**qs.kwargs()) == qs\n+\n+    # Test with Comment (subclass of String)\n+    comment = Comment('This is a comment')\n+    assert comment.func(*comment.args) == comment\n+    assert comment.func(**comment.kwargs()) == comment\n \n \n     class Signifier(String):\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..e480878 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,6 @@\n+\n from sympy.core.basic import Basic\n+from sympy.core.parameters import evaluate\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n@@ -440,7 +442,38 @@ def test_unit():\n     assert Point(1, 1).unit == Point(sqrt(2)/2, sqrt(2)/2)\n \n \n-def test_dot():\n+def test_issue_22684():\n+    # Used to give an error\n+    with evaluate(False):\n+        Point(1, 2)\n+\n+def test_point_with_evaluate_false():\n+    # Test for Point2D initialization with evaluate(False)\n+    with evaluate(False):\n+        p = Point2D(1, 2)\n+        assert p.x == 1\n+        assert p.y == 2\n+    \n+    # Test with non-integer coordinates\n+    with evaluate(False):\n+        p = Point2D(Rational(1, 3), Rational(2, 3))\n+        assert p.x == Rational(1, 3)\n+        assert p.y == Rational(2, 3)\n+\n+    # Check that imaginary parts raise an error\n+    with raises(ValueError, match='Imaginary coordinates are not permitted.'):\n+        with evaluate(False):\n+            Point2D(1 + I, 2)\n+    \n+    # Check normal behavior without evaluate(False)\n+    p = Point2D(1 + I, 2)\n+    assert p == Point2D(1 + I, 2)\n+\n+    with evaluate(False):\n+        # Check Point2D with float coordinates\n+        p = Point2D(0.5, 0.25)\n+        assert p.x == 0.5\n+        assert p.y == 0.25\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n \n",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..e2b6979 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..636100c 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1181,8 +1181,27 @@ def test_lambdify_inspect():\n     # details\n     assert 'x**2' in inspect.getsource(f)\n \n-\n-def test_issue_14941():\n+def test_tuple_with_one_element():\n+    f = lambdify([], (1,))\n+    assert f() == (1,)\n+    \n+    f2 = lambdify([], (1, 2))\n+    assert f2() == (1, 2)\n+\n+    # Additional test for different types inside a tuple\n+    f3 = lambdify([], (1.5,))\n+    assert f3() == (1.5,)\n+\n+    f4 = lambdify([], ('a',))\n+    assert f4() == ('a',)\n+\n+    f5 = lambdify([], (False,))\n+    assert f5() == (False,)\n+    \n+    # Testing with symbolic expressions\n+    from sympy.abc import x\n+    f6 = lambdify([], (x,))\n+    assert f6() == (x,)\n     x, y = Dummy(), Dummy()\n \n     # test dict\n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..ad30ddf 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,8 +1,10 @@\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n from sympy.core.sympify import sympify  # can't import as S yet\n-from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n+from sympy.core.symbol import uniquely_named_symbol, _symbol, Str, symbols\n+from sympy.core.function import Function, UndefinedFunction\n \n from sympy.testing.pytest import raises\n from sympy.core.symbol import disambiguate\n@@ -291,6 +293,11 @@ def test_symbols():\n     ad = Symbol('ad')\n \n     assert symbols('aa:d') == (aa, ab, ac, ad)\n+\n+def test_symbols_with_extra_parentheses():\n+    q, u = symbols(('q:2', 'u:2'), cls=Function)\n+    assert isinstance(q[0], UndefinedFunction), \"Expected UndefinedFunction, got {}\".format(type(q[0]))\n+    assert isinstance(u[0], UndefinedFunction), \"Expected UndefinedFunction, got {}\".format(type(u[0]))\n     assert symbols('aa:d,x:z') == (aa, ab, ac, ad, x, y, z)\n     assert symbols(('aa:d','x:z')) == ((aa, ab, ac, ad), (x, y, z))\n \n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..bfbb72d 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -183,6 +183,10 @@ def execute_gamma_simplify_tests_for_function(tfunc, D):\n     assert _is_tensor_eq(st, t)\n \n \n+import sympy\n+from sympy.physics.hep.gamma_matrices import GammaMatrix as G, kahane_simplify\n+from sympy.tensor.tensor import tensor_indices, LorentzIndex\n+\n def test_kahane_algorithm():\n     # Wrap this function to convert to and from TIDS:\n \n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..5bd1de1 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -30,6 +30,29 @@ def test_issue_10326():\n     assert Contains(-oo, Interval(-oo, oo)) == False\n \n \n+from sympy import Contains, S, Symbol, FiniteSet, raises\n+\n+def test_contains_as_set():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    # Testing the fixed behavior of as_set method\n+    assert Contains(x, FiniteSet(y)).as_set() == FiniteSet(y)\n+    assert Contains(x, S.Integers).as_set() == S.Integers\n+    assert Contains(x, S.Reals).as_set() == S.Reals\n+\n+    # Additional test cases to ensure robustness\n+    z = Symbol('z')\n+    assert Contains(x, FiniteSet(y, z)).as_set() == FiniteSet(y, z)\n+    assert Contains(x, S.Naturals).as_set() == S.Naturals\n+\n+    # Test with Piecewise\n+    from sympy import Piecewise\n+    assert Piecewise((6, Contains(x, S.Reals).as_set()), (7, True)).subs(x, 5) == 6\n+    assert Piecewise((6, Contains(x, S.Reals).as_set()), (7, True)).subs(x, \"string\") == 7\n+\n+    # Ensure that using 'as_set' on objects that cannot be sets raises an error\n+    raises(NotImplementedError, lambda: Contains(x, FiniteSet(y, FiniteSet(z))).as_set())\n+\n def test_binary_symbols():\n     x = Symbol('x')\n     y = Symbol('y')\n@@ -48,4 +71,4 @@ def test_as_set():\n \n def test_type_error():\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..60f8a5b 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,6 +528,29 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n+def test_issue_collect_factor_and_dimension():\n+    from sympy import exp\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units.systems.si import SI\n+    from sympy.physics.units import Quantity\n+    from sympy.physics.units.dimensions import Dimension\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + exp(1), Dimension(1))\n+\n def test_issue_20288():\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..c06005c 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -558,6 +558,64 @@ def test_issue_24062():\n     dim = SI._collect_factor_and_dimension(expr)[1]\n     assert SI.get_dimension_system().is_dimensionless(dim)\n \n+def test_issue_24211():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+    from sympy.physics.units.systems.si import SI\n+\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+def test_issue_24211_with_different_scale_factors():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+    from sympy.physics.units.systems.si import SI\n+\n+    # Setup quantities with different scale factors\n+    V2 = Quantity('V2')\n+    SI.set_quantity_dimension(V2, velocity)\n+    SI.set_quantity_scale_factor(V2, 3 * meter / second)\n+\n+    A2 = Quantity('A2')\n+    SI.set_quantity_dimension(A2, acceleration)\n+    SI.set_quantity_scale_factor(A2, 2 * meter / second**2)\n+\n+    T2 = Quantity('T2')\n+    SI.set_quantity_dimension(T2, time)\n+    SI.set_quantity_scale_factor(T2, 1.5 * second)\n+\n+    expr2 = A2*T2 + V2\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr2)\n+\n+    # Negative scale factors\n+    V3 = Quantity('V3')\n+    SI.set_quantity_dimension(V3, velocity)\n+    SI.set_quantity_scale_factor(V3, -4 * meter / second)\n+\n+    A3 = Quantity('A3')\n+    SI.set_quantity_dimension(A3, acceleration)\n+    SI.set_quantity_scale_factor(A3, -2 * meter / second**2)\n+\n+    T3 = Quantity('T3')\n+    SI.set_quantity_dimension(T3, time)\n+    SI.set_quantity_scale_factor(T3, 2 * second)\n+\n+    expr3 = A3*T3 + V3\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr3)\n+\n     exp_expr = 1 + exp(expr)\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..3915dad 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,3 +1,4 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n@@ -103,6 +104,11 @@ def test_isomorphisms():\n \n \n def test_check_homomorphism():\n+    # Test for the issue described with _check_homomorphism for PermutationGroups\n+    D3 = DihedralGroup(3)\n+    # This should work without raising an error if the issue is fixed\n+    T = homomorphism(D3, D3, D3.generators, D3.generators)\n+    assert T.is_isomorphism()\n     a = Permutation(1,2,3,4)\n     b = Permutation(1,3)\n     G = PermutationGroup([a, b])\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..af665e2 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -270,7 +270,41 @@ def test_PolyElement_as_expr():\n     R, = ring(\"\", ZZ)\n     assert R(3).as_expr() == 3\n \n-def test_PolyElement_from_expr():\n+def test_PolyElement_as_expr_with_custom_symbols():\n+    R, x, y, z = ring(\"x,y,z\", ZZ)\n+    f = 3*x**2*y - x*y*z + 7*z**3 + 1\n+\n+    # Test with different symbols\n+    U, V, W = symbols(\"u,v,w\")\n+    g = 3*U**2*V - U*V*W + 7*W**3 + 1\n+\n+    # Check if the custom symbols are considered\n+    assert f.as_expr(U, V, W) == g\n+\n+    # Test with incorrect number of symbols should raise an error\n+    raises(ValueError, lambda: f.as_expr(U, V))\n+\n+    # Test with no symbols should default to ring symbols\n+    default_expr = 3*x**2*y - x*y*z + 7*z**3 + 1\n+    assert f.as_expr() == default_expr\n+\n+    # Single variable polynomial\n+    R, x = ring(\"x\", ZZ)\n+    f = 3*x**2 + 2*x + 1\n+    U = symbols(\"u\")\n+    g = 3*U**2 + 2*U + 1\n+    assert f.as_expr(U) == g\n+\n+    # Zero polynomial\n+    R, x, y, z = ring(\"x,y,z\", ZZ)\n+    f = R.zero\n+    assert f.as_expr(U, V, W) == 0\n+\n+    # Test with large number of variables\n+    R, *gens = ring(\"x1,x2,x3,x4,x5,x6,x7,x8,x9,x10\", ZZ)\n+    f = R(1)\n+    symbols_list = symbols(\"u1:11\")\n+    assert f.as_expr(*symbols_list) == 1\n     x, y, z = symbols(\"x,y,z\")\n     R, X, Y, Z = ring((x, y, z), ZZ)\n \n",
  "sympy__sympy-24661": "diff --git a/sympy/parsing/tests/test_sympy_parser.py b/sympy/parsing/tests/test_sympy_parser.py\nindex 3723931..fd2a77a 100644\n--- a/sympy/parsing/tests/test_sympy_parser.py\n+++ b/sympy/parsing/tests/test_sympy_parser.py\n@@ -273,8 +273,22 @@ def test_convert_equals_signs():\n     assert parse_expr(\"(2*y = x) = False\",\n         transformations=transformations) == Eq(Eq(2*y, x), False)\n \n+def test_issue_24288():\n+    from sympy.parsing.sympy_parser import parse_expr\n+    from sympy.core import Eq, Lt, Le, Gt, Ge, Ne\n \n-def test_parse_function_issue_3539():\n+    inputs = {\n+        \"1 < 2\": Lt(1, 2, evaluate=False),\n+        \"1 <= 2\": Le(1, 2, evaluate=False),\n+        \"1 > 2\": Gt(1, 2, evaluate=False),\n+        \"1 >= 2\": Ge(1, 2, evaluate=False),\n+        \"1 != 2\": Ne(1, 2, evaluate=False),\n+        \"1 == 2\": Eq(1, 2, evaluate=False)\n+    }\n+    \n+    for text, expected in inputs.items():\n+        result = parse_expr(text, evaluate=False)\n+        assert result == expected, f\"Failed for input: {text}, got {result}\"\n     x = Symbol('x')\n     f = Function('f')\n     assert parse_expr('f(x)') == f(x)\n",
  "astropy__astropy-14369": "diff --git a/astropy/units/tests/test_format.py b/astropy/units/tests/test_format.py\nindex 062b5f4..37e4db3 100644\n--- a/astropy/units/tests/test_format.py\n+++ b/astropy/units/tests/test_format.py\n@@ -30,6 +30,8 @@ from astropy.units.utils import is_effectively_unity\n         # This is the VOUnits documentation, but doesn't seem to follow the\n         # unity grammar ([\"3.45 10**(-4)Jy\"], 3.45 * 1e-4 * u.Jy)\n         ([\"sqrt(m)\"], u.m**0.5),\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.J / u.m / u.s / u.kpc**2)),\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.J / u.s / u.kpc**2)),\n         ([\"dB(mW)\", \"dB (mW)\"], u.DecibelUnit(u.mW)),\n         ([\"mag\"], u.mag),\n         ([\"mag(ct/s)\"], u.MagUnit(u.ct / u.s)),\n",
  "astropy__astropy-14598": "",
  "django__django-11299": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex b3dc643..ec0da2c 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1898,6 +1898,27 @@ class OperationTests(OperationTestBase):\n         author = Author.objects.create(name='Albert', rebate='10%')\n         self.assertEqual(Author.objects.get(), author)\n \n+    @skipUnlessDBFeature('supports_table_check_constraints')\n+    def test_check_constraint_with_or(self):\n+        app_label = 'test_checkconstraint_or'\n+        constraint_name = 'field_1_has_value_if_flag_set'\n+        from_state = self.set_up_test_model(app_label, fields=[\n+            ('field_1', models.IntegerField(blank=True, null=True)),\n+            ('flag', models.BooleanField()),\n+        ])\n+        check = models.Q(flag__exact=True, field_1__isnull=False) | models.Q(flag__exact=False)\n+        constraint = models.CheckConstraint(check=check, name=constraint_name)\n+        operation = migrations.AddConstraint('TestConstraint', constraint)\n+        to_state = from_state.clone()\n+        operation.state_forwards(app_label, to_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, from_state, to_state)\n+        TestConstraint = to_state.apps.get_model(app_label, 'TestConstraint')\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            TestConstraint.objects.create(field_1=None, flag=True)\n+        TestConstraint.objects.create(field_1=1, flag=True)\n+        TestConstraint.objects.create(field_1=None, flag=False)\n+\n     @skipUnlessDBFeature('supports_table_check_constraints')\n     def test_remove_constraint(self):\n         project_state = self.set_up_test_model(\"test_removeconstraint\", constraints=[\n",
  "django__django-11477": "diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex e4898b6..29c149f 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -163,6 +163,54 @@ class URLTranslationTests(URLTestCaseBase):\n             self.assertEqual(translate_url('/nl/gebruikers/', 'en'), '/en/users/')\n             self.assertEqual(translation.get_language(), 'nl')\n \n+    def test_translate_url_with_optional_named_groups(self):\n+        # Test cases for optional named groups in URL patterns\n+        with translation.override('en'):\n+            # Case where the optional group is present\n+            self.assertEqual(\n+                translate_url('/en/with-arguments/regular-argument/optional.html', 'nl'),\n+                '/nl/with-arguments/regular-argument/optional.html'\n+            )\n+\n+            # Case where the optional group is missing\n+            self.assertEqual(\n+                translate_url('/en/with-arguments/regular-argument/', 'nl'),\n+                '/nl/with-arguments/regular-argument/'\n+            )\n+\n+            # Regex-based URL with optional segment present\n+            self.assertEqual(\n+                translate_url('/en/regex_optional/1/2/', 'nl'),\n+                '/nl/regex_optional/1/2/'\n+            )\n+\n+            # Regex-based URL with optional segment missing\n+            self.assertEqual(\n+                translate_url('/en/regex_optional/1/', 'nl'),\n+                '/nl/regex_optional/1/'\n+            )\n+\n+        with translation.override('nl'):\n+            # Reverse check from Dutch to English\n+            self.assertEqual(\n+                translate_url('/nl/with-arguments/regular-argument/optional.html', 'en'),\n+                '/en/with-arguments/regular-argument/optional.html'\n+            )\n+\n+            self.assertEqual(\n+                translate_url('/nl/with-arguments/regular-argument/', 'en'),\n+                '/en/with-arguments/regular-argument/'\n+            )\n+\n+            self.assertEqual(\n+                translate_url('/nl/regex_optional/1/2/', 'en'),\n+                '/en/regex_optional/1/2/'\n+            )\n+\n+            self.assertEqual(\n+                translate_url('/nl/regex_optional/1/', 'en'),\n+                '/en/regex_optional/1/'\n+            )\n \n class URLNamespaceTests(URLTestCaseBase):\n     \"\"\"\n",
  "django__django-12273": "",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..43c6337 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -606,7 +606,23 @@ class DeletionTests(TestCase):\n \n class FastDeleteTests(TestCase):\n \n-    def test_fast_delete_fk(self):\n+    def test_fast_delete_all(self):\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        # No subqueries are used when performing a full delete.\n+        self.assertNotIn('SELECT', sql)\n+\n+    def test_delete_with_locked_tables(self):\n+        # Simulate the LOCK TABLES scenario described in the issue\n+        with connection.cursor() as cursor:\n+            cursor.execute('LOCK TABLE testapp_user WRITE')\n+            try:\n+                with self.assertRaises(Exception) as cm:\n+                    User.objects.all().delete()\n+                self.assertIn('locked', str(cm.exception).lower())\n+            finally:\n+                cursor.execute('UNLOCK TABLES')\n         u = User.objects.create(\n             avatar=Avatar.objects.create()\n         )\n@@ -702,4 +718,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..47762d0 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from decimal import Decimal\n \n@@ -25,7 +26,11 @@ class DecimalFieldTests(TestCase):\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n \n-    def test_default(self):\n+    def test_to_python_with_dict(self):\n+        field = models.DecimalField(max_digits=4, decimal_places=2)\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        with self.assertRaisesMessage(ValidationError, msg % ({},)):\n+            field.to_python({})\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n \n",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..b7ccc7b 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n \n@@ -253,6 +254,25 @@ class PickleabilityTestCase(TestCase):\n         with self.assertRaisesMessage(RuntimeWarning, msg):\n             pickle.loads(pickle.dumps(qs))\n \n+    def test_issue_pickle_values_annotate(self):\n+        # Test pickling a queryset using values() and annotate() to verify it unpickles correctly.\n+        Happening.objects.create(name='event1')\n+        Happening.objects.create(name='event2')\n+        \n+        # Use values() and annotate() to create a queryset\n+        qs = Happening.objects.values('name').annotate(max_when=models.Max('when'))\n+        \n+        # Pickle and unpickle the queryset\n+        unpickled_qs = pickle.loads(pickle.dumps(qs))\n+        \n+        # The unpickled queryset should behave like the original queryset\n+        original_results = list(qs)\n+        unpickled_results = list(unpickled_qs)\n+        self.assertEqual(original_results, unpickled_results)\n+        \n+        # Ensure the results are dictionaries, not model instances\n+        self.assertIsInstance(unpickled_results[0], dict)\n+        \n     def test_order_by_model_with_abstract_inheritance_and_meta_ordering(self):\n         group = Group.objects.create(name='test')\n         event = MyEvent.objects.create(title='test event', group=group)\n",
  "django__django-13449": "diff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\nindex 3f59cdf..d9c7568 100644\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -11,4 +11,5 @@ class Employee(models.Model):\n     department = models.CharField(max_length=40, blank=False, null=False)\n     hire_date = models.DateField(blank=False, null=False)\n     age = models.IntegerField(blank=False, null=False)\n-    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\n",
  "django__django-13512": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex a61da37..59db4a0 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -187,6 +187,12 @@ class UtilsTests(SimpleTestCase):\n             (['a', 'b'], '[\"a\", \"b\"]'),\n             ('a', '\"a\"'),\n             ({('a', 'b'): 'c'}, \"{('a', 'b'): 'c'}\"),  # Invalid JSON.\n+            # Test case for Unicode characters (Chinese)\n+            ({'a': '\u4f60\u597d\uff0c\u4e16\u754c'}, '{\"a\": \"\u4f60\u597d\uff0c\u4e16\u754c\"}'),\n+            # Test case for Unicode emoji characters\n+            ({'emoji': '\ud83d\ude00\ud83d\udc31'}, '{\"emoji\": \"\ud83d\ude00\ud83d\udc31\"}'),\n+            # Test case for mixed Unicode and ASCII\n+            (['\u4f60\u597d\uff0c\u4e16\u754c', 'ja\u017a\u0144'], '[\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]'),\n         ]\n         for value, display_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-14404": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 8fb91af..0345e9f 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -6602,6 +6602,42 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         response = self.client.get(known_url[:-1])\n         self.assertRedirects(response, known_url, status_code=301, target_status_code=403)\n \n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/custom/')\n+    def test_missing_slash_with_custom_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/custom' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/anotherprefix/')\n+    def test_missing_slash_with_another_prefix(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/anotherprefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n     @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n         user = User.objects.create_user(\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..fe099ea 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -691,7 +691,45 @@ class WriterTests(SimpleTestCase):\n         result = self.safe_exec(output)\n         self.assertIn(\"Migration\", result)\n \n-    def test_migration_path(self):\n+    def test_migration_with_mixin_and_abstract_base(self):\n+        \"\"\"\n+        Tests that the migration writer correctly includes necessary imports\n+        for models when using mixins and abstract base models.\n+        \"\"\"\n+        class MyField(models.TextField):\n+            pass\n+\n+        class MyBaseModel(models.Model):\n+            class Meta:\n+                abstract = True\n+\n+        class MyMixin:\n+            pass\n+\n+        class MyModel(MyMixin, MyBaseModel):\n+            name = MyField(primary_key=True)\n+\n+        migration = type(\"Migration\", (migrations.Migration,), {\n+            \"operations\": [\n+                migrations.CreateModel(\n+                    name='MyModel',\n+                    fields=[\n+                        ('name', MyField(primary_key=True, serialize=False)),\n+                    ],\n+                    options={\n+                        'abstract': False,\n+                    },\n+                    bases=(MyMixin, models.Model),\n+                ),\n+            ],\n+            \"dependencies\": [],\n+        })\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+\n+        # Execute the generated migration script to ensure it does not cause a NameError\n+        result = self.safe_exec(output)\n+        self.assertIn(\"Migration\", result)\n         test_apps = [\n             'migrations.migrations_test_apps.normal',\n             'migrations.migrations_test_apps.with_package_model',\n",
  "django__django-15375": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1d4ef56..f0f08e0 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1630,6 +1630,12 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertAlmostEqual(result['value'], Decimal('61.72'), places=2)\n \n+    def test_aggregation_default_after_annotation_with_id(self):\n+        result = Book.objects.annotate(\n+            idx=F(\"id\"),\n+        ).aggregate(value=Sum(\"id\", default=0))\n+        self.assertEqual(result[\"value\"], 4560)\n+\n     def test_exists_none_with_aggregate(self):\n         qs = Book.objects.all().annotate(\n             count=Count('id'),\n@@ -1642,4 +1648,4 @@ class AggregateTestCase(TestCase):\n             count=Count('id'),\n             exists=Exists(Author.objects.extra(where=['1=0'])),\n         )\n-        self.assertEqual(len(qs), 6)\n+        self.assertEqual(len(qs), 6)\n",
  "django__django-15695": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 99db46a..f5b40c3 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -2988,6 +2988,10 @@ class OperationTests(OperationTestBase):\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             operation.database_backwards(app_label, editor, new_state, project_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+        # Test renaming index forwards and backwards\n+        self._test_rename_index_forwards_and_backwards(\n+            app_label, table_name, operation, project_state, new_state\n+        )\n         # Deconstruction.\n         definition = operation.deconstruct()\n         self.assertEqual(definition[0], \"RenameIndex\")\n",
  "django__django-15732": "",
  "django__django-15916": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex cc5e08c..198dd26 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -3497,7 +3497,42 @@ class FormFieldCallbackTests(SimpleTestCase):\n             )\n \n \n-class LocalizedModelFormTest(TestCase):\n+class FormFieldCallbackTest(TestCase):\n+    def test_formfield_callback_respected_by_modelform_factory(self):\n+        def callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea)\n+\n+        class BaseForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = ['id', 'name']\n+                formfield_callback = callback\n+\n+        FactoryForm = modelform_factory(model=Person, form=BaseForm)\n+\n+        for field in FactoryForm.base_fields.values():\n+            self.assertEqual(type(field.widget), forms.Textarea)\n+\n+    def test_formfield_callback_inherited(self):\n+        def callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea)\n+\n+        class BaseForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = ['id', 'name']\n+                formfield_callback = callback\n+\n+        NewForm = modelform_factory(model=Person, form=BaseForm)\n+\n+        class InheritedForm(NewForm):\n+            pass\n+\n+        for name in NewForm.base_fields:\n+            self.assertEqual(\n+                type(InheritedForm.base_fields[name].widget),\n+                type(NewForm.base_fields[name].widget),\n+            )\n     def test_model_form_applies_localize_to_some_fields(self):\n         class PartiallyLocalizedTripleForm(forms.ModelForm):\n             class Meta:\n",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..59b6a92 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -5,18 +5,58 @@ import re\n \n from django.core import serializers\n from django.core.serializers.base import DeserializationError\n-from django.core.serializers.json import DjangoJSONEncoder\n+from django.core import serializers\n+from django.db import models\n+from django.core.exceptions import FieldError\n from django.db import models\n from django.test import SimpleTestCase, TestCase, TransactionTestCase\n from django.test.utils import isolate_apps\n from django.utils.translation import gettext_lazy, override\n \n-from .models import Score\n+from django.test import TestCase\n+from django.db import models\n+from django.db.models import Manager\n from .tests import SerializersTestBase, SerializersTransactionTestBase\n \n \n+class TestTagManager(Manager):\n+    def get_queryset(self):\n+        qs = super().get_queryset()\n+        qs = qs.select_related(\"master\")\n+        return qs\n+\n+\n+class TestTagMaster(models.Model):\n+    name = models.CharField(max_length=120)\n+\n+\n+class TestTag(models.Model):\n+    objects = TestTagManager()\n+    name = models.CharField(max_length=120)\n+    master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)\n+\n+\n+class Test(models.Model):\n+    name = models.CharField(max_length=120)\n+    tags = models.ManyToManyField(TestTag, blank=True)\n+\n+\n class JsonSerializerTestCase(SerializersTestBase, TestCase):\n     serializer_name = \"json\"\n+\n+    def test_m2m_serialization_with_custom_manager(self):\n+        tag_master = TestTagMaster.objects.create(name=\"master\")\n+        tag = TestTag.objects.create(name=\"tag\", master=tag_master)\n+        test = Test.objects.create(name=\"test\")\n+        test.tags.add(tag)\n+        test.save()\n+\n+        try:\n+            data = serializers.serialize(\"json\", [test])\n+            self.assertTrue(data)\n+        except FieldError as e:\n+            self.fail(f\"Serialization raised an unexpected FieldError: {e}\")\n+    serializer_name = \"json\"\n     pkless_str = \"\"\"[\n     {\n         \"pk\": null,\n",
  "matplotlib__matplotlib-23476": "",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 87375f2..3190e6c 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6603,8 +6603,26 @@ def test_integrate(dask):\n     with pytest.raises(ValueError):\n         da.integrate(\"x2d\")\n \n-\n @pytest.mark.parametrize(\"dask\", [True, False])\n+def test_dataarray_integrate_coord():\n+    da = xr.DataArray(\n+        np.random.rand(5, 5),\n+        dims=(\"x\", \"y\"),\n+        coords={\"x\": np.arange(5), \"y\": np.arange(5)}\n+    )\n+\n+    # Test with the new 'coord' argument\n+    result = da.integrate(coord=\"x\")\n+    expected = xr.DataArray(\n+        np.trapz(da, da[\"x\"], axis=0),\n+        dims=[\"y\"],\n+        coords={k: v for k, v in da.coords.items() if \"x\" not in v.dims},\n+    )\n+    assert_allclose(result, expected)\n+\n+    # Test deprecation warning with 'dim' argument\n+    with pytest.warns(FutureWarning):\n+        da.integrate(dim=\"x\")\n @pytest.mark.parametrize(\"which_datetime\", [\"np\", \"cftime\"])\n def test_trapz_datetime(dask, which_datetime):\n     rs = np.random.RandomState(42)\n",
  "pydata__xarray-4094": "",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..0504164 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -131,6 +131,33 @@ def test_regex_error(capsys: CaptureFixture) -> None:\n     assert assertString in output.err\n \n \n+CSV_REGEX_COMMA_CASES = [\n+    (\"foo\", [\"foo\"]),\n+    (\"foo,bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar{1,3}\", [\"foo\", \"bar{1,3}\"]),\n+    (\"foo{1,3}, bar{1,5}\", [\"foo{1,3}\", \"bar{1,5}\"]),\n+    (\"foo{1,3}\", [\"foo{1,3}\"]),\n+    (\"foo{1}\", [\"foo{1}\"]),\n+    (\"foo{2,}\", [\"foo{2,}\"]),\n+    (\"foo{,3}\", [\"foo{,3}\"]),\n+]\n+\n+@pytest.mark.parametrize(\"in_string,expected\", CSV_REGEX_COMMA_CASES)\n+def test_csv_regex_comma_in_quantifier(in_string: str, expected: list[str]) -> None:\n+    \"\"\"Check that we correctly parse a comma-separated regex when there are one\n+    or more commas within quantifier expressions.\n+    \"\"\"\n+    def _template_run(in_string: str) -> list[re.Pattern[Any]]:\n+        r = Run(\n+            [str(EMPTY_MODULE), rf\"--bad-names-rgx={in_string}\"],\n+            exit=False,\n+        )\n+        bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs\n+        return bad_names_rgxs\n+\n+    assert _template_run(in_string) == [re.compile(regex) for regex in expected]\n+\n def test_csv_regex_error(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error when an option is passed and one\n     of its comma-separated regular expressions values is an invalid regular expression.\n",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..067d17b 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1156,6 +1156,28 @@ def test_summary_list_after_errors(testdir):\n     )\n \n \n+import pytest\n+from _pytest.main import ExitCode\n+\n+def test_does_not_eagerly_collect_packages(testdir):\n+    testdir.makepyfile(\"def test(): pass\")\n+    pydir = testdir.mkpydir(\"foopkg\")\n+    pydir.join(\"__init__.py\").write(\"assert False\")\n+    result = testdir.runpytest()\n+    assert result.ret == ExitCode.OK\n+\n+def test_does_not_put_src_on_path(testdir):\n+    # `src` is not on sys.path so it should not be importable\n+    testdir.tmpdir.join(\"src/nope/__init__.py\").ensure()\n+    testdir.makepyfile(\n+        \"import pytest\\n\",\n+        \"def test():\\n\",\n+        \"    with pytest.raises(ImportError):\\n\",\n+        \"        import nope\\n\",\n+    )\n+    result = testdir.runpytest()\n+    assert result.ret == ExitCode.OK\n+\n def test_importorskip():\n     with pytest.raises(\n         pytest.skip.Exception,\n@@ -1184,4 +1206,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "diff --git a/testing/test_mark_expression.py b/testing/test_mark_expression.py\nindex 10b71e9..18396b3 100644\n--- a/testing/test_mark_expression.py\n+++ b/testing/test_mark_expression.py\n@@ -133,6 +133,7 @@ def test_syntax_errors(expr: str, column: int, message: str) -> None:\n         \"if\",\n         \"else\",\n         \"while\",\n+        \"None\",\n     ),\n )\n def test_valid_idents(ident: str) -> None:\n",
  "scikit-learn__scikit-learn-25747": "",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex f07be18..bc2db15 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -30,4 +30,22 @@ def test_autodoc(app, status, warning):\n my_name\n \n alias of bug2437.autodoc_dummy_foo.Foo\"\"\"\n-    assert warning.getvalue() == ''\n+    assert warning.getvalue() == ''\n+\n+@pytest.mark.sphinx('html', testroot='autodoc_typehints')\n+def test_autodoc_typehints_none_in_description(app, status, warning):\n+    app.config.autodoc_typehints = 'description'\n+    app.builder.build_all()\n+\n+    content = (app.outdir / 'index.html').read_text()\n+    assert 'https://docs.python.org/3/library/constants.html#None' in content\n+    assert 'https://docs.python.org/3/library/functions.html#int' in content\n+\n+@pytest.mark.sphinx('html', testroot='autodoc_typehints')\n+def test_autodoc_typehints_none_in_signature(app, status, warning):\n+    app.config.autodoc_typehints = 'signature'\n+    app.builder.build_all()\n+\n+    content = (app.outdir / 'index.html').read_text()\n+    assert 'https://docs.python.org/3/library/constants.html#None' not in content\n+    assert 'https://docs.python.org/3/library/functions.html#int' in content\n",
  "sphinx-doc__sphinx-8056": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 1d6a8cf..93fd8db 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1316,8 +1316,31 @@ class NumpyDocstringTest(BaseDocstringTest):\n             actual = str(NumpyDocstring(dedent(docstring), config))\n             expected = dedent(expected)\n             self.assertEqual(expected, actual)\n+    def test_multiple_parameters_with_optional(self):\n+        # This test checks the issue of rendering multiple parameters with optional keyword\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n \n-    def test_parameters_with_class_reference(self):\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`, *optional*\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`, *optional*\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n         docstring = \"\"\"\\\n Parameters\n ----------\n",
  "sphinx-doc__sphinx-8551": "",
  "sphinx-doc__sphinx-8593": "diff --git a/tests/roots/test-ext-autodoc/target/private.py b/tests/roots/test-ext-autodoc/target/private.py\nindex 677b469..47d8fdb 100644\n--- a/tests/roots/test-ext-autodoc/target/private.py\n+++ b/tests/roots/test-ext-autodoc/target/private.py\n@@ -1,3 +1,7 @@\n+\n+PRIVATE_CONSTANT = None  #: :meta private:\n+_PUBLIC_CONSTANT = None  #: :meta public:\n+\n def private_function(name):\n     \"\"\"private_function is a docstring().\n \n@@ -8,4 +12,4 @@ def _public_function(name):\n     \"\"\"public_function is a docstring().\n \n     :meta public:\n-    \"\"\"\n+    \"\"\"\n",
  "sphinx-doc__sphinx-9230": "",
  "sphinx-doc__sphinx-9258": "",
  "sphinx-doc__sphinx-9673": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex aa0401e..7ddadb3 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -833,6 +833,25 @@ def test_autodoc_typehints_description(app):\n             '   docstring\\n'\n             in context)\n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\",\n+                                   'autodoc_typehints_description_target': 'documented'})\n+def test_autodoc_typehints_with_napoleon(app):\n+    # Test that the return type is documented when using Napoleon with Google style.\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autofunction:: target.typehints.decr\\n'\n+        '\\n'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text()\n+    assert ('target.typehints.decr(a, b=1)\\n'\n+            '\\n'\n+            '   Returns:\\n'\n+            '      decremented number\\n'\n+            '\\n'\n+            '   Return type:\\n'\n+            '      int\\n'\n+            in context)\n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\",\n",
  "sympy__sympy-18211": "diff --git a/sympy/solvers/tests/test_solveset.py b/sympy/solvers/tests/test_solveset.py\nindex 7bd9e29..882dae8 100644\n--- a/sympy/solvers/tests/test_solveset.py\n+++ b/sympy/solvers/tests/test_solveset.py\n@@ -1049,6 +1049,22 @@ def test__solveset_multi():\n \n \n def test_conditionset():\n+    # Adding test case for issue where solveset should return ConditionSet\n+    # instead of raising NotImplementedError. \n+    # Original issue: Eq(n*cos(n) - 3*sin(n), 0).as_set() should return ConditionSet.\n+\n+    from sympy import cos, sin, Eq, Reals, ConditionSet\n+    n = Symbol('n', real=True)\n+    \n+    # Test case for the originally reported issue\n+    result1 = Eq(n*cos(n) - 3*sin(n), 0)\n+    assert result1.as_set() == ConditionSet(n, Eq(n*cos(n) - 3*sin(n), 0), Reals)\n+\n+    # Another test case for complex expression\n+    result2 = Eq(n**2 + sqrt(n*2) + sin(n), 0)\n+    assert result2.as_set() == ConditionSet(n, Eq(sqrt(2)*sqrt(n) + n**2 + sin(n), 0), Reals)\n+\n+    # Ensuring existing test cases are not affected\n     assert solveset(Eq(sin(x)**2 + cos(x)**2, 1), x, domain=S.Reals) == \\\n         ConditionSet(x, True, S.Reals)\n \n",
  "sympy__sympy-18698": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 38de6f6..81bfa7f 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3264,6 +3264,21 @@ def test_noncommutative():\n     assert cancel(e + foo(e)) == c + foo(c)\n     assert cancel(e*foo(c)) == c*foo(c)\n \n+from sympy import symbols, sqf_list\n+\n+x, y = symbols('x y')\n+\n+def test_issue_sqf_list_inconsistency():\n+    # Verify the resolution of the issue: square-free factorization should be correct.\n+    p1 = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3\n+    expected1 = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\n+    assert sqf_list(p1) == expected1\n+\n+    # Verify that existing correct behavior is maintained with another example.\n+    p2 = x**5 - 2*x**4 - 2*x**3 + 4*x**2 + x - 2\n+    expected2 = (1, [(x - 2, 1), (x**2 - 1, 2)])\n+    assert sqf_list(p2) == expected2\n+\n \n def test_to_rational_coeffs():\n     assert to_rational_coeffs(\n",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..bafb42d 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3241,8 +3241,13 @@ def test_keep_coeff():\n     assert _keep_coeff(x, 1/x) == 1\n     assert _keep_coeff(x + 1, S(2)) == u\n \n+from sympy import symbols, I, expand, factor\n \n-def test_poly_matching_consistency():\n+def test_factor_with_extension():\n+    x, y = symbols('x y')\n+    expr = expand((x - 1)*(y - 1))\n+    factored = factor(expr, extension=[I])\n+    assert factored == (x - 1)*(y - 1)\n     # Test for this issue:\n     # https://github.com/sympy/sympy/issues/5514\n     assert I * Poly(x, x) == Poly(I*x, x)\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..3b8b3bb 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"This tests sympy/core/basic.py with (ideally) no reference to subclasses\n of Basic or Atom.\"\"\"\n \n@@ -8,6 +9,7 @@ from sympy.core.basic import (Basic, Atom, preorder_traversal, as_Basic,\n from sympy.core.singleton import S\n from sympy.core.symbol import symbols, Symbol, Dummy\n from sympy.core.sympify import SympifyError\n+from sympy import Symbol\n from sympy.core.function import Function, Lambda\n from sympy.core.compatibility import default_sort_key\n \n@@ -24,7 +26,12 @@ b21 = Basic(b2, b1)\n \n def test__aresame():\n     assert not _aresame(Basic([]), Basic())\n-    assert not _aresame(Basic([]), Basic(()))\n+def test_symbol_dict_attribute():\n+    # Check that Symbol instances do not have __dict__ attribute\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__')\n+    assert hasattr(s, '__slots__')\n+    assert 'name' in s.__slots__\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n",
  "sympy__sympy-24562": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 13e3235..672a4d9 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -370,7 +370,26 @@ def test_Rational_new():\n     assert n.p == -2\n \n \n-def test_Number_new():\n+def test_issue_24543_additional_cases():\n+    # Test string numerator and denominator inputs\n+    assert Rational('0.5', '100') == Rational(1, 200)\n+    assert Rational('1.5', '100') == Rational(3, 200)\n+    \n+    # Test mixed types: string numerator with integer denominator\n+    assert Rational('0.5', 100) == Rational(1, 200)\n+    \n+    # Test numeric numerator with string denominator\n+    assert Rational(0.5, '100') == Rational(1, 200)\n+    \n+    # Test float numerator and integer denominator\n+    assert Rational(0.5, 100) == Rational(1, 200)\n+    \n+    # Test integer numerator and string denominator\n+    assert Rational(1, '200') == Rational(1, 200)\n+\n+    # Ensure no regression on earlier version behavior\n+    assert Rational('2.5', '1000') == Rational(1, 400)\n+    assert Rational(2.5, 1000) == Rational(1, 400)\n     \"\"\"\"\n     Test for Number constructor\n     \"\"\"\n",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..af51e60 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,6 +3202,22 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n+    def test_boundwidget_id_for_label_with_custom_id(self):\n+        \"\"\"\n+        Ensure id_for_label uses the id from the widget's attrs if specified,\n+        particularly for subwidgets of CheckboxSelectMultiple.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'Option A'), ('b', 'Option B')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'custom_id_%s'})\n+            )\n+\n+        form = SomeForm()\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_id_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_id_1')\n+\n     def test_boundfield_widget_type(self):\n         class SomeForm(Form):\n             first_name = CharField()\n",
  "matplotlib__matplotlib-20676": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex b009975..085cbd6 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -302,6 +302,32 @@ def test_tool_line_handle():\n     assert tool_line_handle.positions == positions\n \n \n+from matplotlib import pyplot as plt\n+import pytest\n+from matplotlib import widgets\n+from matplotlib.testing.decorators import image_comparison\n+\n+@pytest.mark.parametrize('direction', (\"horizontal\", \"vertical\"))\n+def test_span_selector_no_zero_inclusion(direction):\n+    fig, ax = plt.subplots()\n+    ax.plot([10, 20], [10, 30])\n+    ax.figure.canvas.draw()\n+    x_bound = ax.get_xbound()\n+    y_bound = ax.get_ybound()\n+\n+    tool = widgets.SpanSelector(ax, print, direction, interactive=True)\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    # Simulate user interaction\n+    do_event(tool, 'press', xdata=11, ydata=15, button=1)\n+    do_event(tool, 'onmove', xdata=15, ydata=25, button=1)\n+    do_event(tool, 'release', xdata=15, ydata=25, button=1)\n+\n+    # Ensure bounds remain unchanged after interaction\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n def check_lasso_selector(**kwargs):\n     ax = get_ax()\n \n",
  "scikit-learn__scikit-learn-12682": "diff --git a/sklearn/decomposition/tests/test_dict_learning.py b/sklearn/decomposition/tests/test_dict_learning.py\nindex 35a43f8..ea2494b 100644\n--- a/sklearn/decomposition/tests/test_dict_learning.py\n+++ b/sklearn/decomposition/tests/test_dict_learning.py\n@@ -51,6 +51,61 @@ def test_dict_learning_shapes():\n     assert_equal(dico.transform(X).shape, (X.shape[0], n_components))\n \n \n+import numpy as np\n+import pytest\n+from sklearn.decomposition import SparseCoder\n+from sklearn.exceptions import ConvergenceWarning\n+\n+def test_sparse_coder_max_iter():\n+    def ricker_function(resolution, center, width):\n+        \"\"\"Discrete sub-sampled Ricker (Mexican hat) wavelet\"\"\"\n+        x = np.linspace(0, resolution - 1, resolution)\n+        x = ((2 / (np.sqrt(3 * width) * np.pi ** .25))\n+             * (1 - (x - center) ** 2 / width ** 2)\n+             * np.exp(-(x - center) ** 2 / (2 * width ** 2)))\n+        return x\n+\n+    def ricker_matrix(width, resolution, n_components):\n+        \"\"\"Dictionary of Ricker (Mexican hat) wavelets\"\"\"\n+        centers = np.linspace(0, resolution - 1, n_components)\n+        D = np.empty((n_components, resolution))\n+        for i, center in enumerate(centers):\n+            D[i] = ricker_function(resolution, center, width)\n+        D /= np.sqrt(np.sum(D ** 2, axis=1))[:, np.newaxis]\n+        return D\n+\n+    transform_algorithm = 'lasso_cd'\n+    resolution = 1024\n+    subsampling = 3  # subsampling factor\n+    n_components = resolution // subsampling\n+\n+    # Compute a wavelet dictionary\n+    D_multi = np.r_[tuple(ricker_matrix(width=w, resolution=resolution,\n+                                        n_components=n_components // 5)\n+                          for w in (10, 50, 100, 500, 1000))]\n+\n+    X = np.linspace(0, resolution - 1, resolution)\n+    first_quarter = X < resolution / 4\n+    X[first_quarter] = 3.\n+    X[np.logical_not(first_quarter)] = -1.\n+    X = X.reshape(1, -1)\n+\n+    # Check that the underlying model fails to converge\n+    with pytest.warns(ConvergenceWarning):\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=1)\n+        model.fit_transform(X)\n+\n+    # Check that the underlying model converges without warnings\n+    with pytest.warns(None) as record:\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=2000)\n+        model.fit_transform(X)\n+    assert not record.list\n+\n+# Add additional test cases if needed to confirm that no other\n+# functionalities are affected by the change.\n+\n def test_dict_learning_overcomplete():\n     n_components = 12\n     dico = DictionaryLearning(n_components, random_state=0).fit(X)\n",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..6db4085 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -148,6 +148,23 @@ def test_multi_target_sample_weights():\n     assert_almost_equal(rgr.predict(X_test), rgr_w.predict(X_test))\n \n \n+import pytest\n+import numpy as np\n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.model_selection import cross_val_predict\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+from sklearn.utils._testing import assert_array_equal\n+\n+def test_cross_val_predict_predict_proba_with_multioutput():\n+    X, Y = make_multilabel_classification(n_samples=100, n_features=20, n_classes=3, n_labels=2, random_state=0)\n+    mo_clf = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+    # Test that cross_val_predict does not raise an error when using 'predict_proba'\n+    pred_proba = cross_val_predict(mo_clf, X, Y, cv=5, method='predict_proba')\n+    assert len(pred_proba) == Y.shape[1]\n+    for i in range(len(pred_proba)):\n+        assert pred_proba[i].shape == (X.shape[0], len(np.unique(Y[:, i])))\n+\n # Import the data\n iris = datasets.load_iris()\n # create a multiple targets by randomized shuffling and concatenating y.\n",
  "sphinx-doc__sphinx-9658": "",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..2dbdc3a 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -348,6 +348,32 @@ def test_reverse_order():\n            Product(x*y, (x, b + 1, a - 1), (y, 6, 1))\n \n \n+def test_issue_13546():\n+    n = Symbol('n')\n+    k = Symbol('k')\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 2).doit() == S(15)/2\n+\n+def test_issue_13546_extended():\n+    from sympy import simplify\n+    n = Symbol('n', integer=True, positive=True)\n+    k = Symbol('k', integer=True, positive=True)\n+    \n+    # Test for n=3\n+    p3 = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p3.subs(n, 3).doit() == S(21)/4  # (3 + 2^0) * (3 + 2^(-1)) * (3 + 2^(-2)) = 21/4\n+\n+    # Test for n=4\n+    p4 = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p4.subs(n, 4).doit() == S(165)/16  # (4 + 2^0) * (4 + 2^(-1)) * (4 + 2^(-2)) * (4 + 2^(-3)) = 165/16\n+\n+    # Symbolic test\n+    pn = Product(n + 1 / 2**k, (k, 0, n-1))\n+    simplified_expression = simplify(pn.doit())\n+    # Assert that the simplified expression does not equate to the incorrect form\n+    assert simplified_expression != 2**(n*(-n + 1)/2) + n**n\n+\n+\n def test_issue_9983():\n     n = Symbol('n', integer=True, positive=True)\n     p = Product(1 + 1/n**(S(2)/3), (n, 1, oo))\n@@ -357,4 +383,4 @@ def test_issue_9983():\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}