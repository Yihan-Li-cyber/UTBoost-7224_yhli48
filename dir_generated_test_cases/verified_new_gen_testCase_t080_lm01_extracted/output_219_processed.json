{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..90d24e6 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -55,6 +55,39 @@ compound_models = {\n             )\n }\n \n+def test_nested_compound_model_separable():\n+    from astropy.modeling import models as m\n+    from astropy.modeling.separable import separability_matrix\n+    import numpy as np\n+\n+    # Simple nested compound model\n+    cm = m.Linear1D(10) & m.Linear1D(5)\n+    nested_cm = m.Pix2Sky_TAN() & cm\n+    expected_separability_matrix = np.array([\n+        [True,  True, False, False],\n+        [True,  True, False, False],\n+        [False, False, True,  True],\n+        [False, False, True,  True]\n+    ])\n+    actual_separability_matrix = separability_matrix(nested_cm)\n+\n+    assert np.array_equal(actual_separability_matrix, expected_separability_matrix), \\\n+        \"Separability matrix for nested compound model is incorrect.\"\n+   \n+    # Additional nested compound model\n+    additional_nested_cm = (m.Linear1D(10) & m.Linear1D(5)) & (m.Pix2Sky_TAN() & m.Linear1D(10))\n+    additional_expected_separability_matrix = np.array([\n+        [True,  False, False, False, False],\n+        [False,  True, False, False, False],\n+        [False, False, True,  True, False],\n+        [False, False, True,  True, False],\n+        [False, False, False, False,  True]\n+    ])\n+    additional_actual_separability_matrix = separability_matrix(additional_nested_cm)\n+\n+    assert np.array_equal(additional_actual_separability_matrix, additional_expected_separability_matrix), \\\n+        \"Separability matrix for additional nested compound model is incorrect.\"\n+\n \n def test_coord_matrix():\n     c = _coord_matrix(p2, 'left', 2)\n",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "diff --git a/astropy/io/fits/tests/test_connect.py b/astropy/io/fits/tests/test_connect.py\nindex 00deafe..ba528aa 100644\n--- a/astropy/io/fits/tests/test_connect.py\n+++ b/astropy/io/fits/tests/test_connect.py\n@@ -1,3 +1,4 @@\n+\n import gc\n import warnings\n \n@@ -7,7 +8,7 @@ from numpy.testing import assert_allclose, assert_array_equal\n \n from astropy import units as u\n from astropy.io import fits\n-from astropy.io.fits import BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu\n+from astropy.io.fits import BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu, connect\n from astropy.io.fits.column import (\n     _fortran_to_python_format,\n     _parse_tdisp_format,\n",
  "astropy__astropy-14508": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex 6bdf92c..cf490fc 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -127,6 +127,46 @@ class TestHeaderFunctions(FitsTestCase):\n         c = fits.Card(\"long_int\", -467374636747637647347374734737437)\n         assert str(c) == _pad(\"LONG_INT= -467374636747637647347374734737437\")\n \n+    def test_floating_point_string_representation_card(self):\n+        \"\"\"\n+        Ensures Card formats float values with the correct precision, avoiding\n+        comment truncation\n+\n+        Regression test for https://github.com/astropy/astropy/issues/14507\n+        \"\"\"\n+        k = \"HIERARCH ABC DEF GH IJKLMN\"\n+        com = \"[m] abcdef ghijklm nopqrstu vw xyzab\"\n+\n+        # Original test cases\n+        c = fits.Card(k, 0.009125, com)\n+        expected_str = f\"{k} = 0.009125 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, 8.95, com)\n+        expected_str = f\"{k} = 8.95 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, -99.9, com)\n+        expected_str = f\"{k} = -99.9 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Additional test cases for further coverage\n+        c = fits.Card(k, 1.23e-10, com)\n+        expected_str = f\"{k} = 1.23E-10 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, 1.23456789012345, com)\n+        expected_str = f\"{k} = 1.23456789012345 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, 3.141592653589793, com)\n+        expected_str = f\"{k} = 3.141592653589793 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, 2.718281828459045, com)\n+        expected_str = f\"{k} = 2.718281828459045 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n     def test_floating_point_value_card(self):\n         \"\"\"Test Card constructor with floating point value\"\"\"\n \n",
  "astropy__astropy-14539": "",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..7d19e17 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -88,8 +88,20 @@ def test_inherit_docstrings():\n         # TODO: Maybe if __doc__ is None this test should be skipped instead?\n         assert Subclass.__call__.__doc__ == \"FOO\"\n \n+def test_inherit_docstrings_with_properties():\n+    class Base(metaclass=misc.InheritDocstrings):\n+        @property\n+        def bar(self):\n+            \"BAR\"\n+            pass\n+\n+    class Subclass(Base):\n+        @property\n+        def bar(self):\n+            return 42\n \n-def test_set_locale():\n+    if Base.bar.__doc__ is not None:\n+        assert Subclass.bar.__doc__ == \"BAR\"\n     # First, test if the required locales are available\n     current = locale.setlocale(locale.LC_ALL)\n     try:\n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..23de5b7 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -188,6 +188,15 @@ def test_unknown_unit3():\n     with pytest.raises(ValueError):\n         unit._get_converter(unit3)\n \n+    # Test equality with None for UnrecognizedUnit\n+    # This is to verify that comparing the unit to None does not raise a TypeError\n+    assert unit != None  # noqa\n+    assert unit not in (None, u.m)\n+    \n+    # Ensure no exception is raised and comparison is False\n+    null_unit = u.Unit('asdf', parse_strict='silent')\n+    assert null_unit != None\n+\n     x = unit.to_string('latex')\n     y = unit2.to_string('cgs')\n \n",
  "astropy__astropy-7671": "diff --git a/astropy/utils/tests/test_introspection.py b/astropy/utils/tests/test_introspection.py\nindex 852d721..e7661fc 100644\n--- a/astropy/utils/tests/test_introspection.py\n+++ b/astropy/utils/tests/test_introspection.py\n@@ -68,8 +68,24 @@ def test_minversion():\n     test_module = ModuleType(str(\"test_module\"))\n     test_module.__version__ = '0.12.2'\n     good_versions = ['0.12', '0.12.1', '0.12.0.dev']\n-    bad_versions = ['1', '1.2rc1']\n+    bad_versions = ['1', '1.2rc1', '1.14dev']\n+    \n+    # Additional test cases based on the issue\n+    # Simulating the version comparison issue with LooseVersion\n+    test_module.__version__ = '1.14.3'\n+    assert not minversion(test_module, '1.14dev')\n+    assert minversion(test_module, '1.14')\n+\n+    test_module.__version__ = '1.14dev'\n+    assert minversion(test_module, '1.14dev')\n+    assert not minversion(test_module, '1.15')\n+\n+    # Adding a version with both numeric and dev components\n+    test_module.__version__ = '1.14.3dev'\n+    assert minversion(test_module, '1.14dev')\n+    assert minversion(test_module, '1.14.3')\n+    assert not minversion(test_module, '1.15')\n     for version in good_versions:\n         assert minversion(test_module, version)\n     for version in bad_versions:\n-        assert not minversion(test_module, version)\n+        assert not minversion(test_module, version)\n",
  "astropy__astropy-8707": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex a2103c6..46bfd1d 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -2329,8 +2329,27 @@ class TestHeaderFunctions(FitsTestCase):\n             else:\n                 c.verify('exception')\n \n+    def test_card_from_str(self):\n+        \"\"\"\n+        Test loading a Card from a `str` object.\n+        \"\"\"\n+        c = fits.Card.fromstring(\"ABC     = 'abc'\")\n+        assert c.keyword == 'ABC'\n+        assert c.value == 'abc'\n+\n+    def test_header_fromstring_str(self):\n+        \"\"\"\n+        Test reading a Header from a `str` string.\n+\n+        See https://github.com/astropy/astropy/issues/8706\n+        \"\"\"\n+        with open(self.data('test0.fits'), 'r') as fobj:\n+            pri_hdr_from_str = fits.Header.fromstring(fobj.read())\n \n-class TestRecordValuedKeywordCards(FitsTestCase):\n+        pri_hdr = fits.getheader(self.data('test0.fits'))\n+        assert pri_hdr['NAXIS'] == pri_hdr_from_str['NAXIS']\n+        assert pri_hdr == pri_hdr_from_str\n+        assert pri_hdr.tostring() == pri_hdr_from_str.tostring()\n     \"\"\"\n     Tests for handling of record-valued keyword cards as used by the\n     `FITS WCS distortion paper\n",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..db348d4 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -139,6 +139,10 @@ class TestQuantityCreation:\n         assert q2.unit == q1.unit\n \n         # but we should preserve float32\n+        # also test float16\n+        a3_16 = np.array([1., 2.], dtype=np.float16)\n+        q3_16 = u.Quantity(a3_16, u.yr)\n+        assert q3_16.dtype == a3_16.dtype\n         a3 = np.array([1., 2.], dtype=np.float32)\n         q3 = u.Quantity(a3, u.yr)\n         assert q3.dtype == a3.dtype\n",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..d02a698 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -225,6 +225,16 @@ TEST_DATA = [\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br ', ValidationError),\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br z', ValidationError),\n \n+    # New test cases for checking invalid characters in username and password\n+    # These URLs should be rejected as invalid.\n+    (URLValidator(), 'http://foo@bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo/bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar@baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar/baz@example.com', ValidationError),\n+    (URLValidator(), 'http://invalid-.com/?m=foo@example.com', ValidationError),\n+    (URLValidator(), \"http://-.~_!$&'()*+,;=%40:80%2f@example.com\", ValidationError),\n+\n     (BaseValidator(True), True, None),\n     (BaseValidator(True), False, ValidationError),\n \n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..b77504c 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -9,6 +10,7 @@ from django.db.models import (\n     Max, Min, Sum, Value,\n )\n from django.test import TestCase\n+from django.db.models.expressions import Case, When\n from django.test.utils import Approximate, CaptureQueriesContext\n from django.utils import timezone\n \n@@ -389,6 +391,28 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n+    def test_count_distinct_expression(self):\n+        # Original test case\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=300, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n+\n+        # Additional case: No books with pages > 500, should return 0\n+        aggs_empty = Book.objects.aggregate(\n+            distinct_ratings_empty=Count(Case(When(pages__gt=500, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs_empty['distinct_ratings_empty'], 0)\n+\n+        # Additional case: Multiple conditions in Case\n+        aggs_multiple_conditions = Book.objects.aggregate(\n+            distinct_multiple_conditions=Count(Case(\n+                When(pages__gt=300, rating__gt=3, then='rating')\n+            ), distinct=True),\n+        )\n+        # Assuming books with pages > 300 and rating > 3 are fewer\n+        self.assertEqual(aggs_multiple_conditions['distinct_multiple_conditions'], 2)\n+\n     def test_count_star(self):\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n",
  "django__django-10914": "",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..7833b8b 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,5 +1,7 @@\n+\n import os\n import signal\n+import subprocess\n from unittest import mock\n \n from django.db.backends.postgresql.client import DatabaseClient\n@@ -56,7 +58,24 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n-    def test_column(self):\n+    def test_subprocess_run_with_pgpassword(self):\n+        def _mock_subprocess_run(*args, env=os.environ, **kwargs):\n+            self.pgpassword = env.get('PGPASSWORD')\n+            return subprocess.CompletedProcess(args, 0)\n+\n+        self.subprocess_args = None\n+        self.pgpassword = None\n+\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            DatabaseClient.runshell_db({\n+                'database': 'testdb',\n+                'user': 'testuser',\n+                'password': 'testpass',\n+                'host': 'localhost',\n+                'port': '5432',\n+            })\n+        \n+        self.assertEqual(self.pgpassword, 'testpass')\n         self.assertEqual(\n             self._run_it({\n                 'database': 'dbname',\n@@ -113,4 +132,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..ee1fdc6 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -3,6 +3,7 @@ from django.conf import settings\n from django.contrib.contenttypes import management as contenttypes_management\n from django.contrib.contenttypes.models import ContentType\n from django.core.management import call_command\n+from django.contrib.contenttypes.models import ContentType\n from django.db import migrations, models\n from django.test import TransactionTestCase, override_settings\n \n@@ -38,7 +39,29 @@ class ContentTypeOperationsTests(TransactionTestCase):\n                     self.assertEqual(next_operation.old_model, operation.old_name_lower)\n                     self.assertEqual(next_operation.new_model, operation.new_name_lower)\n \n-    def test_existing_content_type_rename(self):\n+    class TestRouter:\n+        def db_for_write(self, model, **hints):\n+            return 'default'\n+\n+    @override_settings(DATABASE_ROUTERS=[TestRouter()])\n+    def test_existing_content_type_rename_other_database(self):\n+        # Create content type in the 'other' database\n+        ContentType.objects.using('other').create(app_label='contenttypes_tests', model='foo')\n+        other_content_types = ContentType.objects.using('other').filter(app_label='contenttypes_tests')\n+\n+        # Run migrations on the 'other' database\n+        call_command('migrate', 'contenttypes_tests', database='other', interactive=False, verbosity=0)\n+\n+        # Check that model 'foo' is renamed to 'renamedfoo' in 'other' database\n+        self.assertFalse(other_content_types.filter(model='foo').exists())\n+        self.assertTrue(other_content_types.filter(model='renamedfoo').exists())\n+\n+        # Rollback migrations in the 'other' database\n+        call_command('migrate', 'contenttypes_tests', 'zero', database='other', interactive=False, verbosity=0)\n+\n+        # Check that model 'foo' is restored and 'renamedfoo' is removed in 'other' database\n+        self.assertTrue(other_content_types.filter(model='foo').exists())\n+        self.assertFalse(other_content_types.filter(model='renamedfoo').exists())\n         ContentType.objects.create(app_label='contenttypes_tests', model='foo')\n         call_command('migrate', 'contenttypes_tests', database='default', interactive=False, verbosity=0,)\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n@@ -63,4 +86,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..b423bc3 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -248,7 +248,25 @@ class UsernameValidatorsTests(SimpleTestCase):\n                 with self.assertRaises(ValidationError):\n                     v(invalid)\n \n-    def test_ascii_validator(self):\n+    def test_trailing_newline_unicode_validator(self):\n+        invalid_usernames = [\n+            'trailingnewline\\n', 'newline\\u000A', 'namewithnewlineatend\\n'\n+        ]\n+        v = validators.UnicodeUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+\n+    def test_trailing_newline_ascii_validator(self):\n+        invalid_usernames = [\n+            'trailingnewline\\n', 'newline\\u000A', 'namewithnewlineatend\\n'\n+        ]\n+        v = validators.ASCIIUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n         invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n         v = validators.ASCIIUsernameValidator()\n@@ -258,4 +276,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..fdc3374 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -10,12 +10,35 @@ from .utils import ROOT, TEMPLATE_DIR\n OTHER_DIR = os.path.join(ROOT, 'other_templates')\n \n \n+import os\n+from django.template import Template\n+\n class RenderToStringTest(SimpleTestCase):\n \n     def setUp(self):\n         self.engine = Engine(dirs=[TEMPLATE_DIR])\n \n-    def test_basic_context(self):\n+    def test_autoescape_off(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:<script>\\n',\n+        )\n+\n+    def test_autoescape_on(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n+\n+    def test_autoescape_default(self):\n+        # Assuming the default behavior is autoescape=True\n+        engine = Engine(dirs=[TEMPLATE_DIR])\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n         self.assertEqual(\n             self.engine.render_to_string('test_context.html', {'obj': 'test'}),\n             'obj:test\\n',\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..08709ef 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -330,6 +330,10 @@ class HttpResponseTests(unittest.TestCase):\n         with self.assertRaises(UnicodeError):\n             r.__setitem__('f\u00f8\u00f8'.encode(), 'bar')\n \n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n     def test_long_line(self):\n         # Bug #20889: long lines trigger newlines to be added to headers\n         # (which is not allowed due to bug #10188)\n",
  "django__django-11141": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex b5a87e7..959e84d 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -501,7 +501,16 @@ class LoaderTests(TestCase):\n         self.assertEqual(plan, expected_plan)\n \n     @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_private'})\n-    def test_ignore_files(self):\n+    @override_settings(\n+        MIGRATION_MODULES={'migrations_ns': 'migrations.test_migrations_namespace_package'},\n+    )\n+    def test_loading_namespace_package_with_multiple_migrations(self):\n+        \"\"\"Multiple migrations in a directory without an __init__.py file are loaded.\"\"\"\n+        migration_loader = MigrationLoader(connection)\n+        self.assertEqual(\n+            migration_loader.graph.forwards_plan(('migrations_ns', '0001_initial')),\n+            [('migrations_ns', '0001_initial'), ('migrations_ns', '0002_auto')],\n+        )\n         \"\"\"Files prefixed with underscore, tilde, or dot aren't loaded.\"\"\"\n         loader = MigrationLoader(connection)\n         loader.load_disk()\n@@ -509,6 +518,8 @@ class LoaderTests(TestCase):\n         self.assertEqual(migrations, ['0001_initial'])\n \n \n+from django.test.utils import override_settings\n+\n class PycLoaderTests(MigrationTestBase):\n \n     def test_valid(self):\n",
  "django__django-11149": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 296cfba..1049654 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -751,8 +751,53 @@ class TestInlinePermissions(TestCase):\n             '<input type=\"hidden\" id=\"id_inner2_set-0-id\" value=\"%i\" name=\"inner2_set-0-id\">' % self.inner2.id,\n             html=True\n         )\n+    \n+    def test_inline_add_m2m_view_only_perm(self):\n+        # Grant the user only view permission for books\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(reverse('admin:admin_inlines_author_add'))\n+        \n+        # Check that the inline formset has view permission\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        # Ensure that add, change, and delete permissions are False\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        # Inline should be view-only and not allow adding new relationships\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"0\" id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n \n-    def test_inline_change_fk_change_del_perm(self):\n+    def test_inline_change_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(self.author_change_url)\n+        \n+        # Check that the inline formset has view permission\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        # Ensure that add, change, and delete permissions are False\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        # Check that the inline is marked read-only and doesn't allow deletions\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"1\" id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        # The inline should be read-only\n+        self.assertContains(response, '<p>The inline Book</p>')\n+        self.assertNotContains(\n+            response,\n+            '<input type=\"checkbox\" name=\"Author_books-0-DELETE\" id=\"id_Author_books-0-DELETE\">',\n+            html=True,\n+        )\n         permission = Permission.objects.get(codename='change_inner2', content_type=self.inner_ct)\n         self.user.user_permissions.add(permission)\n         permission = Permission.objects.get(codename='delete_inner2', content_type=self.inner_ct)\n",
  "django__django-11163": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex b25d077..895a9ab 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2898,8 +2898,26 @@ class StrictAssignmentTests(SimpleTestCase):\n             'title': ['This field cannot be blank.']\n         })\n \n+from django.test import TestCase\n+from django.forms.models import model_to_dict\n+from .models import BetterWriter, Colour, ColourfulItem\n \n class ModelToDictTests(TestCase):\n+    def test_model_to_dict_empty_fields(self):\n+        \"\"\"Test model_to_dict with an empty list of fields returns an empty dict.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(model_to_dict(bw, fields=[]), {})\n+\n+    def test_model_to_dict_specific_fields(self):\n+        \"\"\"Test model_to_dict with specific fields.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(sorted(model_to_dict(bw, fields=['id', 'name'])), ['id', 'name'])\n+\n+    def test_model_to_dict_exclude_fields(self):\n+        \"\"\"Test model_to_dict with excluded fields.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(sorted(model_to_dict(bw, exclude=[])), ['id', 'name', 'score', 'writer_ptr'])\n+        self.assertEqual(sorted(model_to_dict(bw, exclude=['id', 'name'])), ['score', 'writer_ptr'])\n     def test_many_to_many(self):\n         \"\"\"Data for a ManyToManyField is a list rather than a lazy QuerySet.\"\"\"\n         blue = Colour.objects.create(name='blue')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..57b01d3 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,6 +1,8 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n+from django.db.models.deletion import Collector\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n@@ -471,6 +473,27 @@ class FastDeleteTests(TestCase):\n         self.assertEqual(User.objects.count(), 1)\n         self.assertTrue(User.objects.filter(pk=u2.pk).exists())\n \n+    def test_fast_delete_instance_set_pk_none(self):\n+        # Create a User instance\n+        u = User.objects.create()\n+        # User can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        # Delete the user and check if the PK is set to None\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n+    def test_delete_non_fast_deletable_instance_set_pk_none(self):\n+        # Create an Avatar instance with a User dependency\n+        a = Avatar.objects.create(desc='avatar')\n+        u = User.objects.create(avatar=a)\n+        # User can't be fast-deleted due to dependency\n+        collector = Collector(using='default')\n+        self.assertFalse(collector.can_fast_delete(u))\n+        # Delete the user and check if the PK is set to None\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n     def test_fast_delete_joined_qs(self):\n         a = Avatar.objects.create(desc='a')\n         User.objects.create(avatar=a)\n@@ -481,6 +504,27 @@ class FastDeleteTests(TestCase):\n         self.assertEqual(User.objects.count(), 1)\n         self.assertTrue(User.objects.filter(pk=u2.pk).exists())\n \n+    def test_fast_delete_instance_set_pk_none(self):\n+        # Create a User instance\n+        u = User.objects.create()\n+        # User can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        # Delete the user and check if the PK is set to None\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n+    def test_delete_non_fast_deletable_instance_set_pk_none(self):\n+        # Create an Avatar instance with a User dependency\n+        a = Avatar.objects.create(desc='avatar')\n+        u = User.objects.create(avatar=a)\n+        # User can't be fast-deleted due to dependency\n+        collector = Collector(using='default')\n+        self.assertFalse(collector.can_fast_delete(u))\n+        # Delete the user and check if the PK is set to None\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n     def test_fast_delete_inheritance(self):\n         c = Child.objects.create()\n         p = Parent.objects.create()\n",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..efba225 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -95,6 +95,14 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+            # Test case for verifying the issue with very small decimals using exponential notation.\n+            ('1e-199', 2, '0.00'),\n+            ('1e-200', 2, '0.00'),\n+            ('1e-201', 2, '0.00'),\n+            # Additional test cases for small decimals with varying decimal positions.\n+            ('1e-10', 10, '0.0000000001'),\n+            ('1e-10', 5, '0.00000'),\n+            ('1e-100', 5, '0.00000'),\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-11211": "diff --git a/tests/prefetch_related/tests.py b/tests/prefetch_related/tests.py\nindex 1dc206f..51eef6e 100644\n--- a/tests/prefetch_related/tests.py\n+++ b/tests/prefetch_related/tests.py\n@@ -1,3 +1,5 @@\n+\n+import uuid\n from django.contrib.contenttypes.models import ContentType\n from django.core.exceptions import ObjectDoesNotExist\n from django.db import connection\n@@ -885,7 +887,20 @@ class GenericRelationTests(TestCase):\n             qs = Comment.objects.prefetch_related('content_object')\n             [c.content_object for c in qs]\n \n-    def test_traverse_GFK(self):\n+    def test_prefetch_GFK_uuid_pk(self):\n+        \"\"\"\n+        Test that prefetch_related works for models with a UUID primary key.\n+        \"\"\"\n+        # Create an Article instance with a UUID primary key.\n+        article = Article.objects.create(name='Django UUID Test')\n+        \n+        # Create a Comment that links to the Article using a GenericForeignKey.\n+        comment = Comment.objects.create(comment='Great article!', content_object=article)\n+        \n+        # Use prefetch_related to fetch related objects and ensure it works.\n+        with self.assertNumQueries(2):  # One for Comment and one for Article.\n+            qs = Comment.objects.prefetch_related('content_object')\n+            self.assertEqual([c.content_object for c in qs], [article])\n         \"\"\"\n         A 'content_object' can be traversed with prefetch_related() and\n         get to related objects on the other side (assuming it is suitably\n",
  "django__django-11239": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex b843072..7522957 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -81,7 +81,31 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n-    def test_sigint_handler(self):\n+    def test_ssl_certificate(self):\n+        self.assertEqual(\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+                'sslmode': 'verify-ca',\n+                'sslrootcert': 'root.crt',\n+                'sslcert': 'client.crt',\n+                'sslkey': 'client.key',\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                None,\n+            )\n+        )\n+        self.assertEqual(\n+            self.pg_env, \n+            {\n+                'PGSSLCERT': 'client.crt',\n+                'PGSSLKEY': 'client.key',\n+                'PGSSLMODE': 'verify-ca',\n+                'PGSSLROOTCERT': 'root.crt',\n+            }\n+        )\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n         def _mock_subprocess_run(*args, **kwargs):\n             handler = signal.getsignal(signal.SIGINT)\n",
  "django__django-11265": "diff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py\nindex a587c22..0177484 100644\n--- a/tests/filtered_relation/tests.py\n+++ b/tests/filtered_relation/tests.py\n@@ -98,7 +98,34 @@ class FilteredRelationTests(TestCase):\n             [self.author1]\n         )\n \n-    def test_with_join_and_complex_condition(self):\n+    def test_with_exclude(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2],\n+        )\n+\n+    def test_with_exclude_no_matches(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='nonexistent title')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author1, self.author2],\n+        )\n+        \n+    def test_with_exclude_and_complex_condition(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation(\n+                    'book', condition=Q(\n+                        Q(book__title__iexact='poem by alice') |\n+                        Q(book__state=Book.RENTED)\n+                    ),\n+                ),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2],\n+        )\n         self.assertSequenceEqual(\n             Author.objects.annotate(\n                 book_alice=FilteredRelation(\n",
  "django__django-11276": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 4051a05..da6e306 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -28,7 +28,18 @@ class TestUtilsHtml(SimpleTestCase):\n             ('>', '&gt;'),\n             ('\"', '&quot;'),\n             (\"'\", '&#39;'),\n+            (\"'\", '&#x27;'),  # html.escape() result\n         )\n+        # Check for backward compatibility with Django's original behavior\n+        items_django = (\n+            (\"'\", '&#x27;'),  # Original Django escape result\n+        )\n+        for value, output in items_django:\n+            with self.subTest(value=value, output=output):\n+                for pattern in patterns:\n+                    with self.subTest(value=value, output=output, pattern=pattern):\n+                        self.check_output(escape, pattern % value, pattern % output)\n+                        self.check_output(escape, lazystr(pattern % value), pattern % output)\n         # Substitution patterns for testing the above items.\n         patterns = (\"%s\", \"asdf%sfdsa\", \"%s1\", \"1%sb\")\n         for value, output in items:\n",
  "django__django-11292": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex b016284..9031503 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -243,6 +243,30 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertNoOutput(err)\n         self.assertEqual(out.strip(), '/PREFIX/some/url/')\n \n+    def test_skip_checks_with_no_errors(self):\n+        \"\"\"\n+        Test that the --skip-checks option skips system checks and allows \n+        the command to proceed even if there would normally be check errors.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            # This should raise a system check error.\n+            'STATICFILES_DIRS': '\"foo\"',\n+        })\n+        out, err = self.run_manage(['set_option', '--skip-checks', '--set', 'foo'])\n+        self.assertNoOutput(err)\n+        self.assertEqual(out.strip(), 'Set foo')\n+\n+    def test_skip_checks_ignored_when_not_provided(self):\n+        \"\"\"\n+        Test that system checks are not skipped if --skip-checks isn't provided.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            # This should raise a system check error.\n+            'STATICFILES_DIRS': '\"foo\"',\n+        })\n+        with self.assertRaises(SomeExpectedException):  # Replace with the actual exception raised by the check.\n+            self.run_manage(['set_option', '--set', 'foo'])\n+\n     def test_disallowed_abbreviated_options(self):\n         \"\"\"\n         To avoid conflicts with custom options, commands don't allow\n",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..92c288b 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,6 +1,9 @@\n+\n from django.test import SimpleTestCase\n from django.urls.resolvers import RegexPattern, RoutePattern\n from django.utils.translation import gettext_lazy as _\n+from django.test.utils import override_settings\n+from django.urls.resolvers import get_resolver\n \n \n class RegexPatternTests(SimpleTestCase):\n@@ -9,7 +12,36 @@ class RegexPatternTests(SimpleTestCase):\n         self.assertEqual(str(RegexPattern(_('^translated/$'))), '^translated/$')\n \n \n-class RoutePatternTests(SimpleTestCase):\n+class ResolverCacheTests(SimpleTestCase):\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_default_root_urlconf(self):\n+        # resolver for a default URLconf (passing no argument) and for the\n+        # settings.ROOT_URLCONF is the same cached object.\n+        self.assertIs(get_resolver(), get_resolver('urlpatterns.path_urls'))\n+        self.assertIsNot(get_resolver(), get_resolver('urlpatterns.path_dynamic_urls'))\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_before_and_after_set_urlconf(self):\n+        # Simulate calling reverse (or similar) before handling a request\n+        resolver_before = get_resolver()\n+        \n+        # Manually change the URLConf to simulate set_urlconf call\n+        with override_settings(ROOT_URLCONF='urlpatterns.path_dynamic_urls'):\n+            resolver_after = get_resolver()\n+        \n+        # Ensure that after the URLConf is set, the resolver cache uses the new URLConf\n+        self.assertIsNot(resolver_before, resolver_after)\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_consistency(self):\n+        # Ensure that repeated calls with the same URLconf return the same cached resolver\n+        resolver1 = get_resolver('urlpatterns.path_urls')\n+        resolver2 = get_resolver('urlpatterns.path_urls')\n+        self.assertIs(resolver1, resolver2)\n+\n+        # Ensure that different URLconfs do not share the same cache\n+        resolver_dynamic = get_resolver('urlpatterns.path_dynamic_urls')\n+        self.assertIsNot(resolver1, resolver_dynamic)\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\nindex b010b42..d255c9c 100644\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -241,8 +241,29 @@ class ModelBackendTest(BaseModelBackendTest, TestCase):\n             email='test2@example.com',\n             password='test',\n         )\n+    def test_no_db_query_when_username_none(self):\n+        \"\"\"\n+        Test that no database query is made when username is None.\n+        \"\"\"\n+        with self.assertNumQueries(0):\n+            result = authenticate(password='test')\n+        self.assertIsNone(result)\n \n-    def test_authenticate_inactive(self):\n+    def test_no_db_query_when_username_is_blank(self):\n+        \"\"\"\n+        Test that no database query is made when username is an empty string.\n+        \"\"\"\n+        with self.assertNumQueries(0):\n+            result = authenticate(username='', password='test')\n+        self.assertIsNone(result)\n+\n+    def test_no_db_query_when_password_none(self):\n+        \"\"\"\n+        Test that no database query is made when password is None.\n+        \"\"\"\n+        with self.assertNumQueries(0):\n+            result = authenticate(username='test')\n+        self.assertIsNone(result)\n         \"\"\"\n         An inactive user can't authenticate.\n         \"\"\"\n",
  "django__django-11490": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex e627a0d..d7b2a96 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -124,7 +124,16 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.union(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n-    def test_union_with_two_annotated_values_list(self):\n+    def test_column_change_with_values_list(self):\n+        ReservedName.objects.create(name='a', order=2)\n+        qs1 = ReservedName.objects.all()\n+        # Test changing the columns with values_list\n+        reserved_order = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(reserved_order, (2,))\n+        reserved_name = qs1.union(qs1).values_list('name').get()\n+        self.assertEqual(reserved_name, ('a',))\n+        reserved_id = qs1.union(qs1).values_list('id').get()\n+        self.assertIsInstance(reserved_id[0], int)\n         qs1 = Number.objects.filter(num=1).annotate(\n             count=Value(0, IntegerField()),\n         ).values_list('num', 'count')\n",
  "django__django-11532": "diff --git a/tests/mail/tests.py b/tests/mail/tests.py\nindex a6f0e17..2e13e2a 100644\n--- a/tests/mail/tests.py\n+++ b/tests/mail/tests.py\n@@ -355,6 +355,33 @@ class MailTests(HeadersCheckMixin, SimpleTestCase):\n         it has attachments.\n         \"\"\"\n         msg = EmailMultiAlternatives(body='')\n+\n+    @mock.patch('socket.getfqdn', return_value='\u6f22\u5b57')\n+    def test_non_ascii_dns_non_unicode_email(self, mocked_getfqdn):\n+        \"\"\"\n+        Test that non-ASCII DNS names in email headers are properly handled\n+        when email encoding is set to non-Unicode (e.g., iso-8859-1).\n+        \"\"\"\n+        from django.core.mail.message import DNS_NAME\n+        delattr(DNS_NAME, '_fqdn')  # Clear cached DNS name\n+        email = EmailMessage('Subject', 'Body', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        message = email.message()\n+        # Check if the Punycode representation of '\u6f22\u5b57' is in Message-ID\n+        self.assertIn('@xn--p8s937b', message['Message-ID'])\n+\n+    @mock.patch('socket.getfqdn', return_value='\u6b63\u5b97')\n+    def test_different_non_ascii_dns_non_unicode_email(self, mocked_getfqdn):\n+        \"\"\"\n+        Test with a different non-ASCII DNS name.\n+        \"\"\"\n+        from django.core.mail.message import DNS_NAME\n+        delattr(DNS_NAME, '_fqdn')  # Clear cached DNS name\n+        email = EmailMessage('Subject', 'Body', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        message = email.message()\n+        # Check if the Punycode representation of '\u6b63\u5b97' is in Message-ID\n+        self.assertIn('@xn--fiqs8s', message['Message-ID'])\n         html_content = '<p>This is <strong>html</strong></p>'\n         msg.attach_alternative(html_content, 'text/html')\n         msg.attach('example.txt', 'Text file content', 'text/plain')\n",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..78f5c45 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,9 +1,10 @@\n+\n from django import forms\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n-from django.db.models import F\n+from django.db.models import F, Field, Model\n from django.db.models.functions import Upper\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n@@ -11,6 +12,53 @@ from django.test import SimpleTestCase\n from .models import (\n     Band, Song, User, ValidationTestInlineModel, ValidationTestModel,\n )\n+class ListDisplayFieldCheckTests(CheckTestCase):\n+\n+    def test_field_accessible_via_instance(self):\n+        class PositionField(Field):\n+            \"\"\"Custom field accessible only via instance.\"\"\"\n+            def contribute_to_class(self, cls, name):\n+                super().contribute_to_class(cls, name)\n+                setattr(cls, self.name, self)\n+\n+            def __get__(self, instance, owner):\n+                if instance is None:\n+                    raise AttributeError()\n+\n+        class TestModel(Model):\n+            field = PositionField()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('field',)\n+\n+        self.assertIsValid(TestModelAdmin, TestModel)\n+\n+    def test_non_callable_non_attribute(self):\n+        class TestModel(Model):\n+            field = Field()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('non_existent_field',)\n+\n+        self.assertIsInvalid(\n+            TestModelAdmin, TestModel,\n+            \"The value of 'list_display[0]' refers to 'non_existent_field', which is not a callable, \"\n+            \"an attribute of 'TestModelAdmin', or an attribute or method on 'TestModel'.\",\n+            'admin.E108'\n+        )\n+\n+    def test_many_to_many_field(self):\n+        class TestModel(Model):\n+            many_to_many_field = models.ManyToManyField('self')\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('many_to_many_field',)\n+\n+        self.assertIsInvalid(\n+            TestModelAdmin, TestModel,\n+            \"The value of 'list_display[0]' must not be a ManyToManyField.\",\n+            'admin.E109'\n+        )\n \n \n class CheckTestCase(SimpleTestCase):\n",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..7c31e32 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -9,7 +9,7 @@ from django.db.models.functions import Upper\n from django.test import TestCase\n from django.utils.deprecation import RemovedInDjango31Warning\n \n-from .models import Article, Author, OrderedByFArticle, Reference\n+from .models import Article, Author, ChildArticle, OrderedByFArticle, Reference\n \n \n class OrderingTests(TestCase):\n@@ -462,6 +462,36 @@ class OrderingTests(TestCase):\n             attrgetter('headline')\n         )\n \n+    def test_order_by_expression_on_parent_model(self):\n+        ca1 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_2,\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca3 = ChildArticle.objects.create(\n+            headline='h3',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca4 = ChildArticle.objects.create(\n+            headline='h1',\n+            pub_date=datetime(2005, 7, 28)\n+        )\n+\n+        # Test ordering explicitly by the parent's ID field\n+        articles = ChildArticle.objects.order_by('article_ptr_id')\n+        self.assertSequenceEqual(articles, [ca1, ca2, ca3, ca4])\n+\n+        # Test ordering by expression involving the author's name\n+        articles_by_expression = ChildArticle.objects.order_by(F('author__name').asc())\n+        self.assertIn(ca1, articles_by_expression)\n+        self.assertIn(ca2, articles_by_expression)\n+\n     def test_deprecated_values_annotate(self):\n         msg = (\n             \"Article QuerySet won't use Meta.ordering in Django 3.1. Add \"\n",
  "django__django-11603": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 2b8f813..330e61d 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -391,6 +391,20 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n+    def test_distinct_avg(self):\n+        \"\"\"\n+        Test Avg aggregation with distinct support.\n+        \"\"\"\n+        result = Book.objects.aggregate(distinct_avg_rating=Avg('rating', distinct=True))\n+        self.assertEqual(result['distinct_avg_rating'], 4.125)\n+\n+    def test_distinct_sum(self):\n+        \"\"\"\n+        Test Sum aggregation with distinct support.\n+        \"\"\"\n+        result = Book.objects.aggregate(distinct_sum_rating=Sum('rating', distinct=True))\n+        self.assertEqual(result['distinct_sum_rating'], 16.5)\n+\n     def test_count_star(self):\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n",
  "django__django-11740": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a98fff5..0675729 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2086,19 +2086,29 @@ class AutodetectorTests(TestCase):\n         )\n         self.assertNotIn(\"_order\", [name for name, field in changes['testapp'][0].operations[0].fields])\n \n-    def test_alter_model_managers(self):\n+    def test_change_uuid_to_fk_creates_dependency(self):\n         \"\"\"\n-        Changing the model managers adds a new operation.\n+        Tests that changing a UUIDField to a ForeignKey correctly creates a dependency\n+        on the related app.\n         \"\"\"\n-        changes = self.get_changes([self.other_pony], [self.other_pony_food])\n-        # Right number/type of migrations?\n-        self.assertNumberMigrations(changes, 'otherapp', 1)\n-        self.assertOperationTypes(changes, 'otherapp', 0, [\"AlterModelManagers\"])\n-        self.assertOperationAttributes(changes, 'otherapp', 0, 0, name=\"pony\")\n-        self.assertEqual([name for name, mgr in changes['otherapp'][0].operations[0].managers],\n-                         ['food_qs', 'food_mgr', 'food_mgr_kwargs'])\n-        self.assertEqual(changes['otherapp'][0].operations[0].managers[1][1].args, ('a', 'b', 1, 2))\n-        self.assertEqual(changes['otherapp'][0].operations[0].managers[2][1].args, ('x', 'y', 3, 4))\n+        app1_uuid_to_fk = ModelState(\"app1\", \"Model1\", [\n+            (\"id\", models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)),\n+            (\"related\", models.UUIDField(null=True, blank=True)),\n+        ])\n+        app1_fk = ModelState(\"app1\", \"Model1\", [\n+            (\"id\", models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)),\n+            (\"related\", models.ForeignKey(\"app2.Model2\", null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState(\"app2\", \"Model2\", [\n+            (\"id\", models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)),\n+            (\"name\", models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([app1_uuid_to_fk, app2], [app1_fk, app2])\n+        # Ensure the correct number of migrations\n+        self.assertNumberMigrations(changes, 'app1', 1)\n+        self.assertOperationTypes(changes, 'app1', 0, [\"AlterField\"])\n+        # Ensure the migration depends on the initial migration of app2\n+        self.assertMigrationDependencies(changes, 'app1', 0, [('app2', '__first__')])\n \n     def test_swappable_first_inheritance(self):\n         \"\"\"Swappable models get their CreateModel first.\"\"\"\n@@ -2399,4 +2409,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-11749": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex a0e1530..09e2427 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -224,7 +224,26 @@ class CommandTests(SimpleTestCase):\n         management.call_command('subparser_dest', 'foo', bar=12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n \n-    def test_subparser_dest_required_args(self):\n+    def test_mutually_exclusive_group_required_options(self):\n+        out = io.StringIO()\n+        management.call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+        management.call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            management.call_command('mutually_exclusive_required', stdout=out)\n+\n+    def test_mutually_exclusive_group_with_kwargs(self):\n+        out = io.StringIO()\n+        management.call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+\n+    def test_mutually_exclusive_group_no_args(self):\n+        out = io.StringIO()\n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            management.call_command('mutually_exclusive_required', stdout=out)\n         out = StringIO()\n         management.call_command('subparser_required', 'foo_1', 'foo_2', bar=12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n",
  "django__django-11790": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 440150b..ac2d2da 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -437,6 +437,13 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         self.assertEqual(form.fields['username'].max_length, 254)\n         self.assertEqual(form.errors, {})\n \n+    def test_username_field_max_length_attr_in_widget(self):\n+        \"\"\"\n+        Test that the maxlength attribute is correctly set in the username field's widget.\n+        \"\"\"\n+        form = AuthenticationForm()\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 150)\n+\n     def test_username_field_label(self):\n \n         class CustomAuthenticationForm(AuthenticationForm):\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..24e3175 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -252,7 +252,22 @@ class WriterTests(SimpleTestCase):\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n         self.assertEqual(self.serialize_round_trip(lazy_pattern), pattern)\n \n-    def test_serialize_enums(self):\n+    def test_serialize_translated_enum(self):\n+        from django.utils.translation import gettext_lazy as _\n+\n+        class TranslatedEnum(enum.Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+\n+        field = models.CharField(default=TranslatedEnum.GOOD, choices=[(m.value, m) for m in TranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        expected = (\n+            \"models.CharField(choices=[\"\n+            \"('Good', migrations.test_writer.TranslatedEnum['GOOD']), \"\n+            \"('Bad', migrations.test_writer.TranslatedEnum['BAD'])], \"\n+            \"default=migrations.test_writer.TranslatedEnum['GOOD'])\"\n+        )\n+        self.assertEqual(string, expected)\n         class TextEnum(enum.Enum):\n             A = 'a-value'\n             B = 'value-b'\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..dc6d937 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,6 @@\n+\n import unittest\n-from datetime import datetime\n+from datetime import datetime, timedelta\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -316,9 +317,30 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_rfc850(self):\n-        parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n-        self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_two_digit_year(self, mocked_datetime):\n+        \"\"\" Test parsing of RFC850 dates with two-digit years based on current date context.\n+        \"\"\"\n+        # Mock the current datetime to a known value\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        # Define test cases based on the RFC 7231 specification\n+        current_year = 2023  # Example current year\n+        mocked_datetime.utcnow.return_value = datetime(current_year, 11, 6, 8, 49, 37)\n+\n+        # Check for two-digit years interpreted correctly relative to the current year\n+        tests = [\n+            ('Monday, 01-Jan-70 08:49:37 GMT', datetime(1970, 1, 1, 8, 49, 37)),  # 1970 is past\n+            ('Tuesday, 31-Dec-69 08:49:37 GMT', datetime(2069, 12, 31, 8, 49, 37)),  # 2069 is future\n+            ('Wednesday, 10-Nov-28 08:49:37 GMT', datetime(2028, 11, 10, 8, 49, 37)),  # 2028 is near future\n+            ('Thursday, 10-Nov-72 08:49:37 GMT', datetime(1972, 11, 10, 8, 49, 37)),  # 1972 is past\n+        ]\n+        \n+        for rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n \n     def test_parsing_asctime(self):\n         parsed = parse_http_date('Sun Nov  6 08:49:37 1994')\n",
  "django__django-11880": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 95afc0d..42bdc3f 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3686,6 +3686,44 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertIsInstance(p.files, MultiValueDict)\n \n \n+import copy\n+from django.forms import CharField, Form\n+from unittest import TestCase\n+\n+class FormFieldDeepCopyTests(TestCase):\n+    def test_field_deep_copy_error_messages(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        self.assertIsInstance(field_copy, CustomCharField)\n+        self.assertIsNot(field_copy.error_messages, field.error_messages)\n+\n+    def test_field_modifying_original_does_not_affect_copy(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        field.error_messages['invalid'] = 'Changed error message.'\n+        self.assertNotEqual(field_copy.error_messages['invalid'], field.error_messages['invalid'])\n+\n+    def test_field_modifying_copy_does_not_affect_original(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        field_copy.error_messages['invalid'] = 'Changed in copy.'\n+        self.assertNotEqual(field_copy.error_messages['invalid'], field.error_messages['invalid'])\n+\n class CustomRenderer(DjangoTemplates):\n     pass\n \n",
  "django__django-11951": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex f2f6bbd..f6a2792 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -1,3 +1,5 @@\n+\n+from math import ceil\n from operator import attrgetter\n \n from django.db import IntegrityError, NotSupportedError, connection\n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..5459be3 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -39,8 +39,36 @@ class Gender(models.TextChoices):\n \n     __empty__ = '(Undeclared)'\n \n+from django.utils.translation import gettext_lazy as _\n+from django.test import TestCase\n+from django.db import models\n \n-class ChoicesTests(SimpleTestCase):\n+class MyChoice(models.TextChoices):\n+    FIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n+    SECOND_CHOICE = \"second\", _(\"The second choice, it is\")\n+\n+class MyObject(models.Model):\n+    my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n+class EnumTest(TestCase):\n+    def setUp(self) -> None:\n+        self.my_object = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n+\n+    def test_created_object_is_str(self):\n+        my_object = self.my_object\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(str(my_object.my_str_value), \"first\")\n+    \n+    def test_retrieved_object_is_str(self):\n+        my_object = MyObject.objects.last()\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(str(my_object.my_str_value), \"first\")\n+\n+    def test_str(self):\n+        for test in [Gender, Suit, YearInSchool, Vehicle]:\n+            for member in test:\n+                with self.subTest(member=member):\n+                    self.assertEqual(str(test[member.name]), str(member.value))\n     def test_integerchoices(self):\n         self.assertEqual(Suit.choices, [(1, 'Diamond'), (2, 'Spade'), (3, 'Heart'), (4, 'Club')])\n         self.assertEqual(Suit.labels, ['Diamond', 'Spade', 'Heart', 'Club'])\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..f22e42c 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -148,7 +148,20 @@ class ChoicesTests(SimpleTestCase):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n \n-class GetFieldDisplayTests(SimpleTestCase):\n+from django.test import TestCase\n+from django.db import models\n+\n+class OverridingFieldDisplayTests(TestCase):\n+\n+    def test_overriding_get_field_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n \n     def test_choices_and_field_display(self):\n         \"\"\"\n@@ -162,7 +175,22 @@ class GetFieldDisplayTests(SimpleTestCase):\n         self.assertEqual(Whiz(c='').get_c_display(), '')        # Empty value\n         self.assertEqual(WhizDelayed(c=0).get_c_display(), 'Other')  # Delayed choices\n \n-    def test_get_FIELD_display_translated(self):\n+    def test_get_field_display_functionality_with_override(self):\n+        \"\"\"\n+        Test that overriding get_FIELD_display() does not affect the original functionality.\n+        \"\"\"\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'override'\n+\n+        instance = FooBar(foo_bar=1)\n+        self.assertEqual(instance.get_foo_bar_display(), 'override')\n+        # Ensure original usage is not affected\n+        FooBar.get_foo_bar_display = models.Model.get_foo_bar_display\n+        instance = FooBar(foo_bar=1)\n+        self.assertEqual(instance.get_foo_bar_display(), 'foo')\n         \"\"\"A translated display value is coerced to str.\"\"\"\n         val = Whiz(c=5).get_c_display()\n         self.assertIsInstance(val, str)\n",
  "django__django-12039": "diff --git a/tests/indexes/tests.py b/tests/indexes/tests.py\nindex 700f574..4fd4952 100644\n--- a/tests/indexes/tests.py\n+++ b/tests/indexes/tests.py\n@@ -70,6 +70,46 @@ class SchemaIndexesTests(TestCase):\n             index_sql[0]\n         )\n \n+    def test_columns_list_sql(self):\n+        index = Index(fields=['headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_descending_columns_list_sql(self):\n+        index = Index(fields=['-headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s DESC)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_ops_class_columns_lists_sql(self):\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_ops_class_descending_columns_list_sql(self):\n+        index = Index(\n+            fields=['-headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops DESC)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n     def test_index_together_single_list(self):\n         # Test for using index_together with a single list (#22172)\n         index_sql = connection.schema_editor()._model_indexes_sql(IndexTogetherSingleList)\n",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..c66c454 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,7 +1,9 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n-from django.db.models import CharField, F, Q\n+from django.db.models import CharField, F, Q, Value\n+from django.db.models.functions import Cast\n from django.db.models.expressions import SimpleCol\n from django.db.models.fields.related_lookups import RelatedIsNull\n from django.db.models.functions import Lower\n@@ -107,7 +109,26 @@ class TestQuery(SimpleTestCase):\n         self.assertIsInstance(b_isnull.lhs, SimpleCol)\n         self.assertEqual(b_isnull.lhs.target, ObjectC._meta.get_field('objectb'))\n \n-    def test_clone_select_related(self):\n+    def test_iterable_lookup_value(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=['a', 'b']))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ['a', 'b'])\n+\n+    def test_iterable_lookup_value_with_tuple(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=('a', 'b')))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ('a', 'b'))\n+\n+    def test_casting_charfield_to_text(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=Cast(Value('test'), output_field=CharField())))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs.output_field.get_internal_type(), 'CharField')\n         query = Query(Item)\n         query.add_select_related(['creator'])\n         clone = query.clone()\n",
  "django__django-12125": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex e62f7b0..efaaf2a 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -744,6 +744,20 @@ class WriterTests(SimpleTestCase):\n         with self.assertRaisesMessage(ValueError, 'Cannot serialize: (1+2j)'):\n             self.assertSerializedEqual(complex(1, 2))\n \n-    def test_register_non_serializer(self):\n+    def test_serialize_inner_class_field(self):\n+        class OuterClass:\n+            class InnerField(models.CharField):\n+                pass\n+\n+        class TestModel(models.Model):\n+            field = OuterClass.InnerField(max_length=255)\n+\n+        field = TestModel._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"test_writer.OuterClass.InnerField(max_length=255)\"\n+        )\n+        self.assertIn(\"from test_writer import OuterClass\", imports)\n         with self.assertRaisesMessage(ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "django__django-12143": "",
  "django__django-12155": "diff --git a/tests/admin_docs/test_utils.py b/tests/admin_docs/test_utils.py\nindex 6cae16b..9599fc7 100644\n--- a/tests/admin_docs/test_utils.py\n+++ b/tests/admin_docs/test_utils.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n \n from django.contrib.admindocs.utils import (\n@@ -95,7 +96,14 @@ class TestUtils(AdminDocsSimpleTestCase):\n         output = parse_rst(header, 'header')\n         self.assertIn('<h3>Header</h3>', output)\n \n-    def test_parse_rst(self):\n+    def test_parse_docstring_with_non_empty_first_line(self):\n+        \"\"\"\n+        Test parse_docstring with a docstring where the first line is not empty.\n+        \"\"\"\n+        docstring = 'First line\\n\\n    Second line indented\\nThird line'\n+        title, body, _ = parse_docstring(docstring)\n+        self.assertEqual(title, 'First line')\n+        self.assertEqual(body, 'Second line indented\\nThird line')\n         \"\"\"\n         parse_rst() should use `cmsreference` as the default role.\n         \"\"\"\n",
  "django__django-12193": "diff --git a/tests/forms_tests/widget_tests/test_checkboxinput.py b/tests/forms_tests/widget_tests/test_checkboxinput.py\nindex 5c5e45d..09a841e 100644\n--- a/tests/forms_tests/widget_tests/test_checkboxinput.py\n+++ b/tests/forms_tests/widget_tests/test_checkboxinput.py\n@@ -82,10 +82,49 @@ class CheckboxInputTest(WidgetTest):\n         \"\"\"\n         self.assertFalse(self.widget.value_from_datadict({}, {}, 'testing'))\n \n+    def test_get_context_does_not_mutate_attrs(self):\n+        widget = forms.CheckboxInput()\n+        attrs = {'checked': False}\n+        widget.get_context('name', True, attrs)\n+        self.assertIs(attrs['checked'], False)\n+\n+    def test_checkbox_get_context_attrs(self):\n+        context = SplitArrayWidget(\n+            forms.CheckboxInput(),\n+            size=2,\n+        ).get_context('name', [True, False])\n+        self.assertEqual(context['widget']['value'], '[True, False]')\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{'checked': True}, {}]\n+        )\n+\n+    def test_checkbox_get_context_multiple_true(self):\n+        context = SplitArrayWidget(\n+            forms.CheckboxInput(),\n+            size=3,\n+        ).get_context('name', [True, True, False])\n+        self.assertEqual(context['widget']['value'], '[True, True, False]')\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{'checked': True}, {'checked': True}, {}]\n+        )\n+\n+    def test_checkbox_get_context_all_false(self):\n+        context = SplitArrayWidget(\n+            forms.CheckboxInput(),\n+            size=3,\n+        ).get_context('name', [False, False, False])\n+        self.assertEqual(context['widget']['value'], '[False, False, False]')\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{}, {}, {}]\n+        )\n+\n     def test_value_from_datadict_string_int(self):\n         value = self.widget.value_from_datadict({'testing': '0'}, {}, 'testing')\n         self.assertIs(value, True)\n \n     def test_value_omitted_from_data(self):\n         self.assertIs(self.widget.value_omitted_from_data({'field': 'value'}, {}, 'field'), False)\n-        self.assertIs(self.widget.value_omitted_from_data({}, {}, 'field'), False)\n+        self.assertIs(self.widget.value_omitted_from_data({}, {}, 'field'), False)\n",
  "django__django-12209": "diff --git a/tests/serializers/models/data.py b/tests/serializers/models/data.py\nindex 946715d..e94ff23 100644\n--- a/tests/serializers/models/data.py\n+++ b/tests/serializers/models/data.py\n@@ -253,6 +253,12 @@ class SmallPKData(models.Model):\n #    data = models.TimeField(primary_key=True)\n \n \n+import uuid\n+from django.db import models\n+\n+class UUIDDefaultData(models.Model):\n+    data = models.UUIDField(primary_key=True, default=uuid.uuid4)\n+\n class UUIDData(models.Model):\n     data = models.UUIDField(primary_key=True)\n \n",
  "django__django-12262": "diff --git a/tests/template_tests/test_custom.py b/tests/template_tests/test_custom.py\nindex 8a8c535..dd58e1f 100644\n--- a/tests/template_tests/test_custom.py\n+++ b/tests/template_tests/test_custom.py\n@@ -77,8 +77,26 @@ class SimpleTagTests(TagTestCase):\n                 'simple_only_unlimited_args - Expected result: 37, 42, 56, 89'),\n             ('{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 56 eggs=\"scrambled\" four=1|add:3 %}',\n                 'simple_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4'),\n+            ('{% load custom %}{% hello greeting=\"hi\" %}', 'hello - Expected result: hi world'),\n+            ('{% load custom %}{% hi greeting=\"hello\" %}', 'hi - Expected result: hello world'),\n         ]\n \n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n+        # Add specific cases for testing TemplateSyntaxError related to keyword-only arguments\n+        error_cases = [\n+            (\"'hello' received unexpected keyword argument 'greeting'\",\n+                '{% load custom %}{% hello greeting=\"hi\" greeting=\"hello\" %}'),\n+            (\"'hi' received multiple values for keyword argument 'greeting'\",\n+                '{% load custom %}{% hi greeting=\"hi\" greeting=\"hello\" %}'),\n+        ]\n+\n+        for entry in error_cases:\n+            with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n+                self.engine.from_string(entry[1])\n+\n         for entry in templates:\n             t = self.engine.from_string(entry[0])\n             self.assertEqual(t.render(c), entry[1])\n@@ -101,8 +119,26 @@ class SimpleTagTests(TagTestCase):\n                 '{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 eggs=\"scrambled\" 56 four=1|add:3 %}'),\n             (\"'simple_unlimited_args_kwargs' received multiple values for keyword argument 'eggs'\",\n                 '{% load custom %}{% simple_unlimited_args_kwargs 37 eggs=\"scrambled\" eggs=\"scrambled\" %}'),\n+            ('{% load custom %}{% hello greeting=\"hi\" %}', 'hello - Expected result: hi world'),\n+            ('{% load custom %}{% hi greeting=\"hello\" %}', 'hi - Expected result: hello world'),\n         ]\n \n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n+        # Add specific cases for testing TemplateSyntaxError related to keyword-only arguments\n+        error_cases = [\n+            (\"'hello' received unexpected keyword argument 'greeting'\",\n+                '{% load custom %}{% hello greeting=\"hi\" greeting=\"hello\" %}'),\n+            (\"'hi' received multiple values for keyword argument 'greeting'\",\n+                '{% load custom %}{% hi greeting=\"hi\" greeting=\"hello\" %}'),\n+        ]\n+\n+        for entry in error_cases:\n+            with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n+                self.engine.from_string(entry[1])\n+\n         for entry in errors:\n             with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n                 self.engine.from_string(entry[1])\n@@ -190,12 +226,30 @@ class InclusionTagTests(TagTestCase):\n                 'inclusion_only_unlimited_args - Expected result: 37, 42, 56, 89\\n'),\n             ('{% load inclusion %}{% inclusion_unlimited_args_kwargs 37 40|add:2 56 eggs=\"scrambled\" four=1|add:3 %}',\n                 'inclusion_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4\\n'),\n+            ('{% load custom %}{% hello greeting=\"hi\" %}', 'hello - Expected result: hi world'),\n+            ('{% load custom %}{% hi greeting=\"hello\" %}', 'hi - Expected result: hello world'),\n         ]\n \n         for entry in templates:\n             t = self.engine.from_string(entry[0])\n             self.assertEqual(t.render(c), entry[1])\n \n+        # Add specific cases for testing TemplateSyntaxError related to keyword-only arguments\n+        error_cases = [\n+            (\"'hello' received unexpected keyword argument 'greeting'\",\n+                '{% load custom %}{% hello greeting=\"hi\" greeting=\"hello\" %}'),\n+            (\"'hi' received multiple values for keyword argument 'greeting'\",\n+                '{% load custom %}{% hi greeting=\"hi\" greeting=\"hello\" %}'),\n+        ]\n+\n+        for entry in error_cases:\n+            with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n+                self.engine.from_string(entry[1])\n+\n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n     def test_inclusion_tag_errors(self):\n         errors = [\n             (\"'inclusion_one_default' received unexpected keyword argument 'three'\",\n",
  "django__django-12276": "diff --git a/tests/forms_tests/widget_tests/test_fileinput.py b/tests/forms_tests/widget_tests/test_fileinput.py\nindex c3ea9d6..6209472 100644\n--- a/tests/forms_tests/widget_tests/test_fileinput.py\n+++ b/tests/forms_tests/widget_tests/test_fileinput.py\n@@ -15,6 +15,16 @@ class FileInputTest(WidgetTest):\n         self.check_html(self.widget, 'email', '', html='<input type=\"file\" name=\"email\">')\n         self.check_html(self.widget, 'email', None, html='<input type=\"file\" name=\"email\">')\n \n+    def test_fileinput_required_attribute_without_initial(self):\n+        widget = FileInput()\n+        html = widget.render('file1', None, attrs={'required': True})\n+        self.assertHTMLEqual(html, '<input type=\"file\" name=\"file1\" required>')\n+\n+    def test_fileinput_required_attribute_with_initial(self):\n+        widget = FileInput()\n+        html = widget.render('file1', 'resume.txt', attrs={'required': True})\n+        self.assertHTMLEqual(html, '<input type=\"file\" name=\"file1\">')\n+\n     def test_value_omitted_from_data(self):\n         self.assertIs(self.widget.value_omitted_from_data({}, {}, 'field'), True)\n-        self.assertIs(self.widget.value_omitted_from_data({}, {'field': 'value'}, 'field'), False)\n+        self.assertIs(self.widget.value_omitted_from_data({}, {'field': 'value'}, 'field'), False)\n",
  "django__django-12304": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 6cabf01..e7c72bd 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import decimal\n import ipaddress\n@@ -6,6 +7,7 @@ import uuid\n from django.db import models\n from django.test import SimpleTestCase\n from django.utils.functional import Promise\n+from django.template import Context, Template\n from django.utils.translation import gettext_lazy as _\n \n \n@@ -137,7 +139,14 @@ class ChoicesTests(SimpleTestCase):\n                 # A string is not permitted as the second argument to int().\n                 ONE = 1, 'X', 'Invalid'\n \n-        msg = \"duplicate values found in <enum 'Fruit'>: PINEAPPLE -> APPLE\"\n+    def test_enum_in_template(self):\n+        template = Template('{% if student.year_in_school == YearInSchool.FRESHMAN %}Freshman{% endif %}')\n+        context = Context({'student': {'year_in_school': YearInSchool.FRESHMAN}})\n+        self.assertEqual(template.render(context), 'Freshman')\n+\n+        template = Template('{{ Suit.DIAMOND.label }}|{{ Suit.DIAMOND.value }}')\n+        context = Context({'Suit': Suit})\n+        self.assertEqual(template.render(context), 'Diamond|1')\n         with self.assertRaisesMessage(ValueError, msg):\n             class Fruit(models.IntegerChoices):\n                 APPLE = 1, 'Apple'\n",
  "django__django-12308": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex acbcf33..626e7b6 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -167,6 +167,23 @@ class UtilsTests(SimpleTestCase):\n         self.assertHTMLEqual(display_value, expected)\n \n         display_value = display_for_field(None, models.BooleanField(null=True), self.empty_value)\n+\n+    def test_json_display_for_field(self):\n+        \"\"\"\n+        Test JSONField display in admin when readonly.\n+        \"\"\"\n+        tests = [\n+            ({\"a\": {\"b\": \"c\"}}, '{\"a\": {\"b\": \"c\"}}'),  # Proper JSON format\n+            ([\"a\", \"b\"], '[\"a\", \"b\"]'),  # Proper JSON format for list\n+            (\"a\", '\"a\"'),  # Proper JSON format for string\n+            ({(\"a\", \"b\"): \"c\"}, \"{('a', 'b'): 'c'}\"),  # Invalid JSON\n+        ]\n+        for value, display_value in tests:\n+            with self.subTest(value=value):\n+                self.assertEqual(\n+                    display_for_field(value, models.JSONField(), self.empty_value),\n+                    display_value,\n+                )\n         expected = '<img src=\"%sadmin/img/icon-unknown.svg\" alt=\"None\" />' % settings.STATIC_URL\n         self.assertHTMLEqual(display_value, expected)\n \n",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..d2b2c8d 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1015,7 +1015,34 @@ class OtherModelTests(SimpleTestCase):\n             class ParkingLot(Place):\n                 parent = models.OneToOneField(Place, models.CASCADE)\n \n-    def test_m2m_table_name_clash(self):\n+    def test_multiple_onetoone_with_order_variation(self):\n+        # Test that the order of OneToOneField definitions doesn't matter when parent_link is specified correctly.\n+        class Document(models.Model):\n+            pass\n+\n+        class Picking(Document):\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+\n+        self.assertEqual(Picking.check(), [])\n+\n+        # Reverse the order and ensure behavior is consistent.\n+        class PickingReversed(Document):\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+\n+        self.assertEqual(PickingReversed.check(), [])\n+\n+    def test_onetoone_without_parent_link_should_fail(self):\n+        # Ensure that missing parent_link on MTI setup raises ImproperlyConfigured\n+        msg = \"Add parent_link=True to invalid_models_tests.Picking.origin.\"\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            class Document(models.Model):\n+                pass\n+\n+            class Picking(Document):\n+                origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+                document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, related_name='+')\n         class Foo(models.Model):\n             bar = models.ManyToManyField('Bar', db_table='myapp_bar')\n \n",
  "django__django-12419": "diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py\nindex 7af62eb..2d518f0 100644\n--- a/tests/middleware/test_security.py\n+++ b/tests/middleware/test_security.py\n@@ -247,6 +247,15 @@ class SecurityMiddlewareTest(SimpleTestCase):\n             with self.subTest(value=value), override_settings(SECURE_REFERRER_POLICY=value):\n                 self.assertEqual(self.process_response()['Referrer-Policy'], expected)\n \n+    @override_settings(SECURE_REFERRER_POLICY=None)\n+    def test_referrer_policy_default(self):\n+        \"\"\"\n+        With SECURE_REFERRER_POLICY unset, the middleware should default to\n+        adding a \"Referrer-Policy: same-origin\" header to the response.\n+        \"\"\"\n+        response = self.process_response()\n+        self.assertEqual(response['Referrer-Policy'], 'same-origin')\n+\n     @override_settings(SECURE_REFERRER_POLICY='strict-origin')\n     def test_referrer_policy_already_present(self):\n         \"\"\"\n@@ -254,4 +263,4 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         present in the response.\n         \"\"\"\n         response = self.process_response(headers={'Referrer-Policy': 'unsafe-url'})\n-        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n",
  "django__django-12663": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 872551b..7945785 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -22,8 +22,10 @@ from django.db.models.sql.datastructures import Join\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import Approximate, isolate_apps\n \n+from django.contrib.auth.models import User\n+from django.utils.functional import SimpleLazyObject\n from .models import (\n-    UUID, UUIDPK, Company, Employee, Experiment, Number, RemoteEmployee,\n+    UUID, UUIDPK, Company, Employee, Experiment, Manager, Number, RemoteEmployee,\n     Result, SimulationRun, Time,\n )\n \n",
  "django__django-12708": "diff --git a/tests/migrations/test_base.py b/tests/migrations/test_base.py\nindex d6e6fdb..256ca2c 100644\n--- a/tests/migrations/test_base.py\n+++ b/tests/migrations/test_base.py\n@@ -48,6 +48,13 @@ class MigrationTestBase(TransactionTestCase):\n \n     def _get_column_allows_null(self, table, column, using):\n         return [c.null_ok for c in self.get_table_description(table, using=using) if c.name == column][0]\n+    def assertUniqueConstraintExists(self, table, columns, value=True, using='default'):\n+        with connections[using].cursor() as cursor:\n+            constraints = connections[using].introspection.get_constraints(cursor, table).values()\n+            self.assertEqual(\n+                value,\n+                any(c['unique'] for c in constraints if c['columns'] == list(columns)),\n+            )\n \n     def assertColumnNull(self, table, column, using='default'):\n         self.assertTrue(self._get_column_allows_null(table, column, using))\n",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..22787b8 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -4,6 +4,48 @@ import re\n from datetime import datetime, timedelta\n from importlib import import_module\n \n+from .models import Band, Member  # Ensure Band and Member models are available for testing\n+\n+class FormfieldOverridesManyToManyTestCase(TestCase):\n+    def test_formfield_overrides_m2m_autocomplete_widget(self):\n+        \"\"\"\n+        Test that the autocomplete widget for ManyToManyFields can be overridden.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            autocomplete_fields = ['members']\n+            formfield_overrides = {\n+                ManyToManyField: {'widget': forms.CheckboxSelectMultiple},\n+            }\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, forms.CheckboxSelectMultiple)\n+\n+    def test_formfield_overrides_m2m_raw_id_widget(self):\n+        \"\"\"\n+        Test that the raw_id widget for ManyToManyFields can be overridden.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            raw_id_fields = ['members']\n+            formfield_overrides = {\n+                ManyToManyField: {'widget': forms.CheckboxSelectMultiple},\n+            }\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, forms.CheckboxSelectMultiple)\n+\n+    def test_formfield_overrides_m2m_filtered_widget(self):\n+        \"\"\"\n+        Test that the filtered widget for ManyToManyFields can be overridden.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            filter_horizontal = ['members']\n+            formfield_overrides = {\n+                ManyToManyField: {'widget': forms.CheckboxSelectMultiple},\n+            }\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, forms.CheckboxSelectMultiple)\n+\n import pytz\n \n from django import forms\n@@ -14,8 +56,8 @@ from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.auth.models import User\n from django.core.files.storage import default_storage\n from django.core.files.uploadedfile import SimpleUploadedFile\n-from django.db.models import CharField, DateField, DateTimeField, UUIDField\n-from django.test import SimpleTestCase, TestCase, override_settings\n+from django.db.models import CharField, DateField, DateTimeField, UUIDField, ManyToManyField\n+from django.test import TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n \n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..b0ffe95 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,7 +172,7 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n@@ -181,4 +181,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 17e707b..3724f05 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2444,8 +2444,30 @@ class AutodetectorTests(TestCase):\n         self.assertNumberMigrations(changes, 'testapp', 1)\n         self.assertOperationTypes(changes, 'testapp', 0, [\"AddField\", \"AddField\"])\n         self.assertOperationAttributes(changes, 'testapp', 0, 0)\n-\n-    def test_mti_inheritance_model_removal(self):\n+    def test_add_model_with_field_removed_from_base_model(self):\n+        \"\"\"\n+        Removing a base field takes place before adding a new inherited model\n+        that has a field with the same name.\n+        \"\"\"\n+        before = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('title', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        after = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+            ]),\n+            ModelState('app', 'book', [\n+                ('title', models.CharField(max_length=200)),\n+            ], bases=('app.readable',)),\n+        ]\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'app', 1)\n+        self.assertOperationTypes(changes, 'app', 0, ['RemoveField', 'CreateModel'])\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='title', model_name='readable')\n+        self.assertOperationAttributes(changes, 'app', 0, 1, name='book')\n         Animal = ModelState('app', 'Animal', [\n             (\"id\", models.AutoField(primary_key=True)),\n         ])\n@@ -2453,4 +2475,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..21043cc 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -8,7 +8,7 @@ from django.db import connection\n from django.db.models import Exists, Max, OuterRef\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n-from django.utils.deprecation import RemovedInDjango40Warning\n+from django.test.utils import isolate_apps\n \n from .models import (\n     Article, Author, Freebie, Game, IsNullWithNoneAsRHS, Player, Season, Tag,\n@@ -179,7 +179,43 @@ class LookupTests(TestCase):\n         with self.assertNumQueries(expected_num_queries):\n             self.assertEqual(Author.objects.in_bulk(authors), authors)\n \n-    def test_in_bulk_with_field(self):\n+    def test_in_bulk_meta_constraint(self):\n+        season_2011 = Season.objects.create(year=2011)\n+        season_2012 = Season.objects.create(year=2012)\n+        Season.objects.create(year=2013)\n+        self.assertEqual(\n+            Season.objects.in_bulk(\n+                [season_2011.year, season_2012.year],\n+                field_name='year',\n+            ),\n+            {season_2011.year: season_2011, season_2012.year: season_2012},\n+        )\n+\n+    @isolate_apps('lookup')\n+    def test_in_bulk_non_unique_meta_constraint(self):\n+        class Model(models.Model):\n+            ean = models.CharField(max_length=100)\n+            brand = models.CharField(max_length=100)\n+            name = models.CharField(max_length=80)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=['ean'],\n+                        name='partial_ean_unique',\n+                        condition=models.Q(is_active=True)\n+                    ),\n+                    models.UniqueConstraint(\n+                        fields=['brand', 'name'],\n+                        name='together_brand_name_unique',\n+                    ),\n+                ]\n+\n+        msg = \"in_bulk()'s field_name must be a unique field but '%s' isn't.\"\n+        for field_name in ['brand', 'ean']:\n+            with self.subTest(field_name=field_name):\n+                with self.assertRaisesMessage(ValueError, msg % field_name):\n+                    Model.objects.in_bulk(field_name=field_name)\n         self.assertEqual(\n             Article.objects.in_bulk([self.a1.slug, self.a2.slug, self.a3.slug], field_name='slug'),\n             {\n",
  "django__django-12858": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 3b6974f..9818e09 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -883,7 +883,20 @@ class OtherModelTests(SimpleTestCase):\n             )\n         ])\n \n-    def test_ordering_allows_registered_lookups(self):\n+    def test_ordering_across_multiple_null_fk(self):\n+        class Product(models.Model):\n+            parent = models.ForeignKey('self', models.CASCADE, null=True)\n+\n+        class Supply(models.Model):\n+            product = models.ForeignKey(Product, models.CASCADE)\n+\n+        class Stock(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('supply__product__parent__isnull',)\n+\n+        self.assertEqual(Stock.check(), [])\n         class Model(models.Model):\n             test = models.CharField(max_length=100)\n \n",
  "django__django-13012": "",
  "django__django-13028": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 70329a0..77499d3 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -1210,8 +1210,28 @@ class Queries1Tests(TestCase):\n             [],\n         )\n \n+from django.db import models\n+from django.test import TestCase\n+from .models import Author, ExtraInfo, Note\n \n-class Queries2Tests(TestCase):\n+class FilterableFieldTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.note = Note.objects.create(note='Test note', misc='bar')\n+        cls.extra_info = ExtraInfo.objects.create(info='Test info', note=cls.note, value=100, filterable=False)\n+        cls.author = Author.objects.create(name='Test Author', num=123, extra=cls.extra_info)\n+\n+    def test_filter_with_filterable_false(self):\n+        # This test checks that filtering with a field with filterable=False works correctly.\n+        authors = Author.objects.filter(extra=self.extra_info)\n+        self.assertIn(self.author, authors)\n+\n+    def test_filter_with_filterable_true(self):\n+        # This test checks that filtering with a field with filterable=True works correctly.\n+        self.extra_info.filterable = True\n+        self.extra_info.save()\n+        authors = Author.objects.filter(extra=self.extra_info)\n+        self.assertIn(self.author, authors)\n     @classmethod\n     def setUpTestData(cls):\n         Number.objects.create(num=4)\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..4ab3949 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,6 +343,38 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_order_by_self_referential_fk(self):\n+        # Setup: Create authors and articles with self-referencing editors\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\")\n+        editor_1 = Author.objects.create(name=\"Editor 1\", editor=author_1)\n+        editor_2 = Author.objects.create(name=\"Editor 2\", editor=author_2)\n+\n+        article_1 = Article.objects.create(\n+            author=editor_1,\n+            headline=\"Article 1\",\n+            pub_date=\"2023-10-01\"\n+        )\n+        article_2 = Article.objects.create(\n+            author=editor_2,\n+            headline=\"Article 2\",\n+            pub_date=\"2023-10-02\"\n+        )\n+\n+        # Test ordering by self-referential foreign key directly\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline'),\n+        )\n+        \n+        # Test ordering by self-referential foreign key ID\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline'),\n+        )\n+\n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n",
  "django__django-13089": "diff --git a/django/core/cache/backends/db.py b/django/core/cache/backends/db.py\nindex a65b985..45383f9 100644\n--- a/django/core/cache/backends/db.py\n+++ b/django/core/cache/backends/db.py\n@@ -267,13 +267,15 @@ class DatabaseCache(BaseDatabaseCache):\n                 cursor.execute(\n                     connection.ops.cache_key_culling_sql() % table,\n                     [cull_num])\n-                cursor.execute(\"DELETE FROM %s \"\n-                               \"WHERE cache_key < %%s\" % table,\n-                               [cursor.fetchone()[0]])\n+                row = cursor.fetchone()\n+                if row is not None:\n+                    cursor.execute(\"DELETE FROM %s \"\n+                                   \"WHERE cache_key < %%s\" % table,\n+                                   [row[0]])\n \n     def clear(self):\n         db = router.db_for_write(self.cache_model_class)\n         connection = connections[db]\n         table = connection.ops.quote_name(self._table)\n         with connection.cursor() as cursor:\n-            cursor.execute('DELETE FROM %s' % table)\n+            cursor.execute('DELETE FROM %s' % table)\n",
  "django__django-13109": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex d60d822..321d653 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -1645,6 +1645,10 @@ class ModelFormBasicTests(TestCase):\n         obj.full_clean()\n \n \n+from django.test import TestCase\n+from django import forms\n+from .models import Article, Writer, FavoriteArticle\n+\n class ModelMultipleChoiceFieldTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-13112": "",
  "django__django-13121": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex a684d7e..c644498 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1210,13 +1210,61 @@ class ExpressionOperatorTests(TestCase):\n         self.assertEqual(Number.objects.get(pk=self.n.pk).integer, 1764)\n         self.assertEqual(Number.objects.get(pk=self.n.pk).float, Approximate(61.02, places=2))\n \n-    @unittest.skipIf(connection.vendor == 'oracle', \"Oracle doesn't support bitwise XOR.\")\n+    def test_duration_expressions_with_multiple_deltas(self):\n+        deltas = [\n+            datetime.timedelta(days=1),\n+            datetime.timedelta(hours=2, minutes=30),\n+            datetime.timedelta(weeks=1),\n+            datetime.timedelta(seconds=3600),\n+        ]\n+        for delta in deltas:\n+            with self.subTest(delta=delta):\n+                qs = Experiment.objects.annotate(duration=F('estimated_time') + delta)\n+                for obj in qs:\n+                    self.assertEqual(obj.duration, obj.estimated_time + delta)\n+            \n+    def test_duration_expression_negative_delta(self):\n+        delta = datetime.timedelta(days=-1)\n+        qs = Experiment.objects.annotate(duration=F('estimated_time') + delta)\n+        for obj in qs:\n+            expected_duration = obj.estimated_time + delta\n+            self.assertEqual(obj.duration, expected_duration)\n+\n+    def test_duration_expression_zero_delta(self):\n+        delta = datetime.timedelta(0)\n+        qs = Experiment.objects.annotate(duration=F('estimated_time') + delta)\n+        for obj in qs:\n+            self.assertEqual(obj.duration, obj.estimated_time)\n     def test_lefthand_bitwise_xor(self):\n         Number.objects.update(integer=F('integer').bitxor(48))\n         self.assertEqual(Number.objects.get(pk=self.n.pk).integer, 26)\n         self.assertEqual(Number.objects.get(pk=self.n1.pk).integer, -26)\n \n-    @unittest.skipIf(connection.vendor == 'oracle', \"Oracle doesn't support bitwise XOR.\")\n+    def test_duration_expressions_with_multiple_deltas(self):\n+        deltas = [\n+            datetime.timedelta(days=1),\n+            datetime.timedelta(hours=2, minutes=30),\n+            datetime.timedelta(weeks=1),\n+            datetime.timedelta(seconds=3600),\n+        ]\n+        for delta in deltas:\n+            with self.subTest(delta=delta):\n+                qs = Experiment.objects.annotate(duration=F('estimated_time') + delta)\n+                for obj in qs:\n+                    self.assertEqual(obj.duration, obj.estimated_time + delta)\n+            \n+    def test_duration_expression_negative_delta(self):\n+        delta = datetime.timedelta(days=-1)\n+        qs = Experiment.objects.annotate(duration=F('estimated_time') + delta)\n+        for obj in qs:\n+            expected_duration = obj.estimated_time + delta\n+            self.assertEqual(obj.duration, expected_duration)\n+\n+    def test_duration_expression_zero_delta(self):\n+        delta = datetime.timedelta(0)\n+        qs = Experiment.objects.annotate(duration=F('estimated_time') + delta)\n+        for obj in qs:\n+            self.assertEqual(obj.duration, obj.estimated_time)\n     def test_lefthand_bitwise_xor_null(self):\n         employee = Employee.objects.create(firstname='John', lastname='Doe')\n         Employee.objects.update(salary=F('salary').bitxor(48))\n",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..177cb35 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1627,7 +1627,14 @@ class FTimeDeltaTests(TestCase):\n         for e in qs:\n             self.assertEqual(e.delta, delta)\n \n-    def test_duration_with_datetime(self):\n+    @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_without_expression_wrapper(self):\n+        # Test temporal subtraction without using ExpressionWrapper.\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for experiment in queryset:\n+            self.assertEqual(experiment.delta, experiment.end - experiment.start)\n         # Exclude e1 which has very high precision so we can test this on all\n         # backends regardless of whether or not it supports\n         # microsecond_precision.\n",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..da1102c 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,5 +1,7 @@\n import operator\n \n+import operator\n+\n from django.db import DatabaseError, NotSupportedError, connection\n from django.db.models import Exists, F, IntegerField, OuterRef, Value\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n@@ -39,7 +41,12 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.intersection(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n-    @skipUnlessDBFeature('supports_select_difference')\n+    def test_union_with_none(self):\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        qs3 = qs1.union(qs2)\n+        self.assertNumbersEqual(qs3, [0, 1, 8, 9], ordered=False)\n+        self.assertNumbersEqual(qs3.none(), [], ordered=False)\n     def test_simple_difference(self):\n         qs1 = Number.objects.filter(num__lte=5)\n         qs2 = Number.objects.filter(num__lte=4)\n",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..da40131 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -323,7 +323,24 @@ class SessionTestsMixin:\n             {'a test key': 'a test value'},\n         )\n \n-    def test_decode_failure_logged_to_security(self):\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    @override_settings(DEFAULT_HASHING_ALGORITHM='sha1')\n+    def test_default_hashing_algorithm_with_legacy_data(self):\n+        # Emulates legacy session data encoding under sha1\n+        data = {'another test key': 'another test value'}\n+        encoded = self.session.encode(data)\n+        self.assertEqual(self.session._legacy_decode(encoded), data)\n+\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_corrupted_legacy_signature(self):\n+        # Test that corrupted legacy signature results in empty session\n+        legacy_encoded_corrupted = (\n+            'OWUzNTNmNWQxNTBjOWExZmM4MmQ3NzNhMDRmMjU4NmYwNDUyNGI2NEco3ImEgdGVzd'\n+            'CBrZXkiOiJhIHRlc3QgdmFsdWUifQ=='\n+        )\n+        with self.assertLogs('django.security.SuspiciousSession', 'WARNING') as cm:\n+            self.assertEqual({}, self.session.decode(legacy_encoded_corrupted))\n+        self.assertIn('corrupted', cm.output[0])\n         bad_encode = base64.b64encode(b'flaskdj:alkdjf').decode('ascii')\n         with self.assertLogs('django.security.SuspiciousSession', 'WARNING') as cm:\n             self.assertEqual({}, self.session.decode(bad_encode))\n",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..f573807 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -8,6 +8,10 @@ from django.test import (\n from django.test.utils import require_jinja2\n from django.urls import resolve\n from django.utils.deprecation import RemovedInDjango40Warning\n+from django.utils.functional import SimpleLazyObject\n+from django.urls import path\n+from django.shortcuts import get_object_or_404\n+from .models import Artist\n from django.views.generic import RedirectView, TemplateView, View\n \n from . import views\n@@ -590,7 +594,21 @@ class DeprecationTests(SimpleTestCase):\n         self.assertEqual(response.context['key'], 'value')\n         self.assertIsInstance(response.context['view'], View)\n \n-    def test_template_params_warning(self):\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_template_params_filtering_with_simplelazyobject(self):\n+        \"\"\"Test filtering with a SimpleLazyObject in URL kwargs.\"\"\"\n+        class ArtistView(TemplateView):\n+            template_name = 'generic_views/about.html'\n+\n+            def get_context_data(self, *, artist_name, **kwargs):\n+                context = super().get_context_data(**kwargs)\n+                artist = get_object_or_404(Artist, name=str(artist_name))\n+                return {**context, 'artist': artist}\n+\n+        artist_name_lazy = SimpleLazyObject(lambda: 'Rene Magritte')\n+        artist = Artist.objects.create(name='Rene Magritte')\n+        response = ArtistView.as_view()(self.rf.get('/'), artist_name=artist_name_lazy)\n+        self.assertEqual(response.context_data['artist'], artist)\n         response = self.client.get('/template/custom/bar1/bar2/')\n         self.assertEqual(response.status_code, 200)\n         msg = (\n",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..076125e 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -15,6 +15,7 @@ from django.forms.models import (\n     modelform_factory,\n )\n from django.template import Context, Template\n+from django.test.utils import isolate_apps\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n \n from .models import (\n@@ -2829,6 +2830,77 @@ class LimitChoicesToTests(TestCase):\n             StumpJokeForm()\n             self.assertEqual(today_callable_dict.call_count, 3)\n \n+class LimitChoicesToNoDuplicatesTests(TestCase):\n+    def setUp(self):\n+        self.marley = Character.objects.create(username='Marley', last_action='2023-10-01')\n+        self.threepwood = Character.objects.create(username='Threepwood', last_action='2023-10-02')\n+\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        joke1 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.threepwood,\n+        )\n+        joke2 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.threepwood,\n+        )\n+        joke3 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.marley,\n+        )\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=self.marley)\n+        joke1.has_fooled_today.add(self.marley, self.threepwood)\n+        joke2.has_fooled_today.add(self.marley)\n+        joke3.has_fooled_today.add(self.marley, self.threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+\n \n class FormFieldCallbackTests(SimpleTestCase):\n \n",
  "django__django-13343": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex a5ab3a0..a9a0362 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -21,6 +21,8 @@ from django.core.files.uploadedfile import (\n     InMemoryUploadedFile, SimpleUploadedFile, TemporaryUploadedFile,\n )\n from django.db.models import FileField\n+from django.core.files.storage import Storage\n+from .models import (callable_storage,)\n from django.db.models.fields.files import FileDescriptor\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n@@ -34,7 +36,29 @@ from .models import Storage, temp_storage, temp_storage_location\n FILE_SUFFIX_REGEX = '[A-Za-z0-9]{7}'\n \n \n-class GetStorageClassTests(SimpleTestCase):\n+class DeconstructCallableStorageTests(TestCase):\n+\n+    def test_filefield_with_callable_storage_deconstruction(self):\n+        \"\"\"\n+        Ensure that a FileField with a callable storage does not evaluate\n+        the callable when deconstructed.\n+        \"\"\"\n+        obj = Storage()\n+        field = obj._meta.get_field('storage_callable')\n+        _, _, kwargs = field.deconstruct()\n+        storage = kwargs['storage']\n+        self.assertIs(storage, callable_storage)\n+\n+    def test_filefield_with_non_callable_storage_deconstruction(self):\n+        \"\"\"\n+        Ensure that a FileField with a non-callable storage deconstructs\n+        to the evaluated storage.\n+        \"\"\"\n+        obj = Storage()\n+        field = obj._meta.get_field('storage_non_callable')\n+        _, _, kwargs = field.deconstruct()\n+        storage = kwargs['storage']\n+        self.assertIsInstance(storage, Storage)\n \n     def test_get_filesystem_storage(self):\n         \"\"\"\n",
  "django__django-13346": "",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..b837a14 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -1133,7 +1133,41 @@ class DateFunctionWithTimeZoneTests(DateFunctionTests):\n         self.assertEqual(model.melb_year.year, 2016)\n         self.assertEqual(model.pacific_year.year, 2015)\n \n-    def test_trunc_ambiguous_and_invalid_times(self):\n+    def test_truncdate_with_tzinfo(self):\n+        start_datetime = datetime(2023, 3, 15, 15, 30, 0)\n+        start_datetime = timezone.make_aware(start_datetime, timezone.utc)\n+\n+        ny_tz = pytz.timezone('America/New_York')\n+        london_tz = pytz.timezone('Europe/London')\n+\n+        model = DTModel.objects.annotate(\n+            ny_date=TruncDate('start_datetime', tzinfo=ny_tz),\n+            london_date=TruncDate('start_datetime', tzinfo=london_tz),\n+        ).order_by('start_datetime').get()\n+\n+        ny_start_datetime = start_datetime.astimezone(ny_tz)\n+        london_start_datetime = start_datetime.astimezone(london_tz)\n+\n+        self.assertEqual(model.ny_date, ny_start_datetime.date())\n+        self.assertEqual(model.london_date, london_start_datetime.date())\n+\n+    def test_trunctime_with_tzinfo(self):\n+        start_datetime = datetime(2023, 3, 15, 15, 30, 0)\n+        start_datetime = timezone.make_aware(start_datetime, timezone.utc)\n+\n+        ny_tz = pytz.timezone('America/New_York')\n+        london_tz = pytz.timezone('Europe/London')\n+\n+        model = DTModel.objects.annotate(\n+            ny_time=TruncTime('start_datetime', tzinfo=ny_tz),\n+            london_time=TruncTime('start_datetime', tzinfo=london_tz),\n+        ).order_by('start_datetime').get()\n+\n+        ny_start_datetime = start_datetime.astimezone(ny_tz)\n+        london_start_datetime = start_datetime.astimezone(london_tz)\n+\n+        self.assertEqual(model.ny_time, ny_start_datetime.time())\n+        self.assertEqual(model.london_time, london_start_datetime.time())\n         sao = pytz.timezone('America/Sao_Paulo')\n         utc = pytz.timezone('UTC')\n         start_datetime = utc.localize(datetime(2016, 10, 16, 13))\n",
  "django__django-13401": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e39d03e..3a3ce12 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -102,8 +102,40 @@ class BasicFieldTests(SimpleTestCase):\n         name, path, args, kwargs = Nested.Field().deconstruct()\n         self.assertEqual(path, 'model_fields.tests.Nested.Field')\n \n+from django.test import SimpleTestCase\n+from django.db import models\n+from django.db.models import IntegerField\n+\n+class FieldEqualityTests(SimpleTestCase):\n+    def test_abstract_inherited_fields(self):\n+        \"\"\"Field instances from abstract models are not equal.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        self.assertNotEqual(abstract_model_field, inherit1_model_field)\n+        self.assertNotEqual(abstract_model_field, inherit2_model_field)\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+\n+        self.assertLess(abstract_model_field, inherit1_model_field)\n+        self.assertLess(abstract_model_field, inherit2_model_field)\n+        self.assertLess(inherit1_model_field, inherit2_model_field)\n \n-class ChoicesTests(SimpleTestCase):\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit1_model_field))\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit2_model_field))\n+        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n \n     @classmethod\n     def setUpClass(cls):\n",
  "django__django-13410": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 1285e22..6ac7e30 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -1,3 +1,4 @@\n+\n import errno\n import gzip\n import os\n@@ -16,7 +17,8 @@ from django.core.files.uploadedfile import (\n     InMemoryUploadedFile, SimpleUploadedFile, TemporaryUploadedFile,\n     UploadedFile,\n )\n-from django.test import override_settings\n+from django.core.files import locks\n+from pathlib import Path\n \n try:\n     from PIL import Image\n",
  "django__django-13417": "",
  "django__django-13516": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 89f7c38..ed58db5 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -335,13 +335,36 @@ class CommandTests(SimpleTestCase):\n             with self.assertRaisesMessage(TypeError, msg):\n                 management.call_command('subparser_dest', subcommand='foo', bar=12)\n \n-    def test_create_parser_kwargs(self):\n+    def test_outputwrapper_flush_during_command(self):\n+        \"\"\"\n+        Test that flush() works as expected in a management command.\n+        \"\"\"\n+        out = StringIO()\n+        with mock.patch.object(out, 'flush') as mocked_flush:\n+            management.call_command('outputwrapper', stdout=out)\n+            self.assertIn('Working...', out.getvalue())\n+            mocked_flush.assert_called()\n+        \n+    def test_migrate_command_output_flush(self):\n+        \"\"\"\n+        Test that the migrate command outputs intermediate steps with flush.\n+        \"\"\"\n+        out = StringIO()\n+        with mock.patch('django.db.migrations.executor.MigrationExecutor.progress_callback') as mocked_callback:\n+            mocked_callback.side_effect = lambda *args: out.write(f'{args}\\n') or out.flush()\n+            management.call_command('migrate', stdout=out)\n+            self.assertIn('apply_start', out.getvalue())\n+            self.assertIn('apply_success', out.getvalue())\n         \"\"\"BaseCommand.create_parser() passes kwargs to CommandParser.\"\"\"\n         epilog = 'some epilog text'\n         parser = BaseCommand().create_parser('prog_name', 'subcommand', epilog=epilog)\n         self.assertEqual(parser.epilog, epilog)\n \n \n+from io import StringIO\n+from unittest import mock\n+from django.core import management\n+\n class CommandRunTests(AdminScriptTestCase):\n     \"\"\"\n     Tests that need to run by simulating the command line, not by call_command.\n",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..af17a0c 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,11 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n+from .models.with_custom_email_field import CustomEmailField\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n@@ -25,7 +27,26 @@ class TokenGeneratorTest(TestCase):\n         tk1 = p0.make_token(user)\n         self.assertIs(p0.check_token(user, tk1), True)\n \n-    def test_10265(self):\n+    def test_token_with_email_change(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                self.assertIs(p0.check_token(user, tk1), False)\n         \"\"\"\n         The token generated for a user created in the same request\n         will work correctly.\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..0af8daf 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,9 +1,11 @@\n+\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n from django.contrib.auth.models import AbstractBaseUser\n from django.core import checks\n from django.db import models\n+from django.db.models import Q, UniqueConstraint\n from django.test import (\n     SimpleTestCase, override_settings, override_system_checks,\n )\n",
  "django__django-13569": "",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..abe7da4 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -886,7 +887,28 @@ class IterableLookupInnerExpressionsTests(TestCase):\n \n     @unittest.skipUnless(connection.vendor == 'sqlite',\n                          \"This defensive test only works on databases that don't validate parameter types\")\n-    def test_complex_expressions_do_not_introduce_sql_injection_via_untrusted_string_inclusion(self):\n+    def test_range_lookup_namedtuple(self):\n+        # Original test to verify named tuple usage with range lookup\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n+    def test_range_lookup_namedtuple_edge_case(self):\n+        # New test case for edge case: empty range\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        # Testing with a range that does not match any Company\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=150, maximum=200),\n+        )\n+        self.assertSequenceEqual(qs, [])\n+\n+        # New test case for reversed range values\n+        qs_reversed = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=100, maximum=51),\n+        )\n+        self.assertSequenceEqual(qs_reversed, [])\n         \"\"\"\n         This tests that SQL injection isn't possible using compilation of\n         expressions in iterable filters, as their compilation happens before\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..f620c68 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -16,6 +16,7 @@ from unittest import mock\n \n from django import conf, get_version\n from django.conf import settings\n+from django.test.utils import captured_stderr, captured_stdout\n from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n )\n@@ -37,6 +38,42 @@ custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates\n SYSTEM_CHECK_MSG = 'System check identified no issues'\n \n \n+class ExecuteFromCommandLine(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_prog_name_with_custom_argv(self):\n+        \"\"\"\n+        Test that execute_from_command_line correctly uses a custom argv\n+        to set the program name.\n+        \"\"\"\n+        args = ['help', 'check']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['incorrect-prog-name'] + args):\n+                execute_from_command_line(['my-django-admin'] + args)\n+        self.assertIn('usage: my-django-admin check', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_prog_name_when_sys_argv_is_none(self):\n+        \"\"\"\n+        Test that execute_from_command_line works when sys.argv[0] is None.\n+        \"\"\"\n+        args = ['help', 'migrate']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['another-django-admin'] + args)\n+        self.assertIn('usage: another-django-admin migrate', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n class AdminScriptTestCase(SimpleTestCase):\n     def setUp(self):\n         tmpdir = tempfile.TemporaryDirectory()\n",
  "django__django-13670": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 6f0b13f..5cdab70 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -1,3 +1,4 @@\n+\n from datetime import date, datetime\n \n from django.test import SimpleTestCase, override_settings\n@@ -75,8 +76,22 @@ class DateFormatTests(SimpleTestCase):\n         # Regression test for #18951\n         dt = datetime(2009, 5, 16, microsecond=123)\n         self.assertEqual(dateformat.format(dt, 'u'), '000123')\n-\n-    def test_date_formats(self):\n+    def test_year_before_1000(self):\n+        tests = [\n+            (476, '76'),\n+            (42, '42'),\n+            (4, '04'),\n+            (999, '99'),\n+            (123, '23'),\n+            (1, '01'),\n+            (0, '00'),\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n         my_birthday = datetime(1979, 7, 8, 22, 00)\n         timestamp = datetime(2008, 5, 19, 11, 45, 23, 123456)\n \n@@ -164,4 +179,4 @@ class DateFormatTests(SimpleTestCase):\n             self.assertEqual(\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+            )\n",
  "django__django-13741": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex ca66cd5..7f769aa 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1020,6 +1020,17 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n+    def test_readonly_password_hash_field_is_disabled(self):\n+        field = ReadOnlyPasswordHashField()\n+        self.assertIs(field.disabled, True)\n+\n+    def test_readonly_password_hash_field_bound_data(self):\n+        field = ReadOnlyPasswordHashField()\n+        initial_value = 'initial_hash'\n+        submitted_value = 'tampered_hash'\n+        bound_data = field.bound_data(submitted_value, initial_value)\n+        self.assertEqual(bound_data, initial_value)\n+\n     def test_readonly_field_has_changed(self):\n         field = ReadOnlyPasswordHashField()\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n",
  "django__django-13786": "",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..794e45a 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,9 +1,12 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n from django.test import SimpleTestCase\n \n from ..utils import setup\n+from django.utils.functional import lazy\n+from django.utils.translation import gettext_lazy\n \n \n class AddTests(SimpleTestCase):\n@@ -47,6 +50,27 @@ class AddTests(SimpleTestCase):\n         self.assertEqual(output, 'Jan. 11, 2000')\n \n \n+    @setup({'add08': '{{ s1|add:lazy_s2 }}'})\n+    def test_add08(self):\n+        output = self.engine.render_to_string(\n+            'add08',\n+            {'s1': 'string', 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    @setup({'add09': '{{ lazy_s1|add:lazy_s2 }}'})\n+    def test_add09(self):\n+        output = self.engine.render_to_string(\n+            'add09',\n+            {'lazy_s1': gettext_lazy('string'), 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    def test_lazy_add(self):\n+        lazy_4 = lazy(lambda: 4, int)\n+        lazy_5 = lazy(lambda: 5, int)\n+        self.assertEqual(lazy_4() + lazy_5(), 9)\n+\n class FunctionTests(SimpleTestCase):\n \n     def test_add(self):\n",
  "django__django-13807": "diff --git a/tests/backends/models.py b/tests/backends/models.py\nindex a2fd310..478d44b 100644\n--- a/tests/backends/models.py\n+++ b/tests/backends/models.py\n@@ -134,9 +134,17 @@ class RawData(models.Model):\n     raw_data = models.BinaryField()\n \n \n+class SQLKeywordsModel(models.Model):\n+    id = models.AutoField(primary_key=True, db_column='select')\n+    reporter = models.ForeignKey('Reporter', models.CASCADE, db_column='where')\n+\n+    class Meta:\n+        db_table = 'order'\n+\n+\n class Author(models.Model):\n     name = models.CharField(max_length=255, unique=True)\n \n \n class Book(models.Model):\n-    author = models.ForeignKey(Author, models.CASCADE, to_field='name')\n+    author = models.ForeignKey(Author, models.CASCADE, to_field='name')\n",
  "django__django-13809": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex d88ea78..8b5d4f4 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1342,15 +1342,25 @@ class ManageRunserverMigrationWarning(TestCase):\n             'app_waiting_migration.', output\n         )\n \n+import mock\n+from django.core.management import call_command\n+from io import StringIO\n \n-class ManageRunserverEmptyAllowedHosts(AdminScriptTestCase):\n+class RunserverSkipChecksTestCase(TestCase):\n     def setUp(self):\n-        super().setUp()\n-        self.write_settings('settings.py', sdict={\n-            'ALLOWED_HOSTS': [],\n-            'DEBUG': False,\n-        })\n+        self.output = StringIO()\n \n+    @mock.patch('django.core.management.base.BaseCommand.check')\n+    def test_runserver_with_skip_checks(self, mocked_check):\n+        call_command('runserver', '--skip-checks', stdout=self.output)\n+        self.assertNotIn('Performing system checks...', self.output.getvalue())\n+        mocked_check.assert_not_called()\n+\n+    @mock.patch('django.core.management.base.BaseCommand.check')\n+    def test_runserver_without_skip_checks(self, mocked_check):\n+        call_command('runserver', stdout=self.output)\n+        self.assertIn('Performing system checks...', self.output.getvalue())\n+        mocked_check.assert_called()\n     def test_empty_allowed_hosts_error(self):\n         out, err = self.run_manage(['runserver'])\n         self.assertNoOutput(out)\n",
  "django__django-13810": "",
  "django__django-13820": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex 594c01e..f0d0d1d 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -1,3 +1,4 @@\n+\n import compileall\n import os\n \n@@ -7,6 +8,7 @@ from django.db.migrations.exceptions import (\n )\n from django.db.migrations.loader import MigrationLoader\n from django.db.migrations.recorder import MigrationRecorder\n+from importlib import import_module\n from django.test import TestCase, modify_settings, override_settings\n \n from .test_base import MigrationTestBase\n@@ -512,6 +514,35 @@ class LoaderTests(TestCase):\n         migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n         self.assertEqual(migrations, [])\n \n+    @override_settings(\n+        MIGRATION_MODULES={'migrations': 'migrations.test_migrations_no_file'},\n+    )\n+    def test_loading_package_without_file_in_frozen_environment(self):\n+        \"\"\"\n+        Test that MigrationLoader can load migrations from packages without\n+        a __file__ attribute in frozen environments.\n+        \"\"\"\n+        test_module = import_module('migrations.test_migrations_no_file')\n+        loader = MigrationLoader(connection)\n+        module_file = getattr(test_module, '__file__', None)\n+        module_origin = test_module.__spec__.origin\n+        module_has_location = test_module.__spec__.has_location\n+\n+        try:\n+            delattr(test_module, '__file__')\n+            test_module.__spec__.origin = None\n+            test_module.__spec__.has_location = False\n+            loader.load_disk()\n+            migrations = [\n+                name for app, name in loader.disk_migrations if app == 'migrations'\n+            ]\n+            self.assertCountEqual(migrations, ['0001_initial', '0002_second'])\n+        finally:\n+            if module_file is not None:\n+                test_module.__file__ = module_file\n+            test_module.__spec__.origin = module_origin\n+            test_module.__spec__.has_location = module_has_location\n+\n \n class PycLoaderTests(MigrationTestBase):\n \n",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..d026652 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -10,7 +10,9 @@ from unittest import mock\n from django.core.exceptions import ImproperlyConfigured\n from django.db import NotSupportedError, connection, transaction\n from django.db.models import Aggregate, Avg, CharField, StdDev, Sum, Variance\n-from django.db.utils import ConnectionHandler\n+from django.db.utils import ConnectionHandler, ImproperlyConfigured\n+import unittest\n+from unittest import mock\n from django.test import (\n     TestCase, TransactionTestCase, override_settings, skipIfDBFeature,\n )\n@@ -30,6 +32,11 @@ class Tests(TestCase):\n     longMessage = True\n \n     def test_check_sqlite_version(self):\n+        msg = 'SQLite 3.9.0 or later is required (found 3.8.11.1).'\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 8, 11, 1)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.8.11.1'), \\\n+                self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            check_sqlite_version()\n         msg = 'SQLite 3.8.3 or later is required (found 3.8.2).'\n         with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 8, 2)), \\\n                 mock.patch.object(dbapi2, 'sqlite_version', '3.8.2'), \\\n",
  "django__django-13837": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 10ffa22..972c91f 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -155,8 +155,19 @@ class TestIterModulesAndFiles(SimpleTestCase):\n                     frozenset(),\n                 )\n \n+from .test_module import __main__ as test_main\n \n class TestChildArguments(SimpleTestCase):\n+\n+    @mock.patch.dict(sys.modules, {'__main__': django.__main__})\n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n+        )\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n     def test_run_as_module(self):\n",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..a2770fc 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -282,8 +282,28 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n         )\n \n \n+from django.test import TestCase\n+from django.forms import ModelChoiceField, ModelMultipleChoiceField\n+from .models import ChoiceModel\n+from .mixins import AssertFormErrorsMixin\n+\n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n-    def test_modelchoicefield(self):\n+    def test_modelchoicefield_value_placeholder(self):\n+        ChoiceModel.objects.create(pk=1, name='a')\n+        ChoiceModel.objects.create(pk=2, name='b')\n+        ChoiceModel.objects.create(pk=3, name='c')\n+\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            'invalid',\n+        )\n         # Create choices for the model choice field tests below.\n         ChoiceModel.objects.create(pk=1, name='a')\n         ChoiceModel.objects.create(pk=2, name='b')\n@@ -307,4 +327,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py\nindex 1078928..8031800 100644\n--- a/tests/many_to_one/models.py\n+++ b/tests/many_to_one/models.py\n@@ -63,6 +63,13 @@ class Third(models.Model):\n     third = models.ForeignKey('self', models.SET_NULL, null=True, related_name='child_set')\n \n \n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n+\n+\n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n+\n class Parent(models.Model):\n     name = models.CharField(max_length=20, unique=True)\n     bestchild = models.ForeignKey('Child', models.SET_NULL, null=True, related_name='favored_by')\n",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..fe7f20b 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,5 +1,8 @@\n+\n from django.db import IntegrityError, transaction\n-from django.test import TestCase, skipIfDBFeature\n+from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from .fields import MyWrapper\n+from .models import CustomAutoFieldModel\n \n from .models import Bar, Business, Employee, Foo\n \n@@ -220,7 +223,22 @@ class CustomPKTests(TestCase):\n         self.assertEqual(f, new_foo),\n         self.assertEqual(f.bar, new_bar)\n \n-    # SQLite lets objects be saved with an empty primary key, even though an\n+    def test_auto_field_subclass_create(self):\n+        \"\"\"\n+        Test that MyAutoField calls from_db_value on create.\n+        \"\"\"\n+        obj = CustomAutoFieldModel.objects.create()\n+        self.assertIsInstance(obj.id, MyWrapper)\n+\n+    @skipUnlessDBFeature('can_return_rows_from_bulk_insert')\n+    def test_auto_field_subclass_bulk_create(self):\n+        \"\"\"\n+        Test that MyAutoField calls from_db_value on bulk_create.\n+        \"\"\"\n+        objs = [CustomAutoFieldModel() for _ in range(2)]\n+        CustomAutoFieldModel.objects.bulk_create(objs)\n+        for obj in objs:\n+            self.assertIsInstance(obj.id, MyWrapper)\n     # integer is expected. So we can't check for an error being raised in that\n     # case for SQLite. Remove it from the suite for this next bit.\n     @skipIfDBFeature('supports_unspecified_pk')\n",
  "django__django-14017": "",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..3161044 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -205,6 +205,42 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yields_in_post_process(self):\n+        collectstatic_args = {\n+            'interactive': False,\n+            'clear': False,\n+            'dry_run': False,\n+            'post_process': True,\n+            'use_default_ignore_patterns': True,\n+            'ignore_patterns': ['*.ignoreme'],\n+        }\n+\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(**collectstatic_args)\n+        stats = collectstatic_cmd.collect()\n+        \n+        # No file should be yielded twice\n+        self.assertCountEqual(stats['post_processed'], set(stats['post_processed']))\n+\n+    def test_correct_number_of_files_post_processed(self):\n+        collectstatic_args = {\n+            'interactive': False,\n+            'clear': False,\n+            'dry_run': False,\n+            'post_process': True,\n+            'use_default_ignore_patterns': True,\n+            'ignore_patterns': ['*.ignoreme'],\n+        }\n+\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(**collectstatic_args)\n+        stats = collectstatic_cmd.collect()\n+        \n+        # Ensure that the count of post-processed files matches expectations\n+        expected_post_processed_count = len(set(stats['post_processed']))\n+        actual_post_processed_count = len(stats['post_processed'])\n+        self.assertEqual(expected_post_processed_count, actual_post_processed_count)\n+\n     def test_css_import_case_insensitive(self):\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n         self.assertEqual(relpath, \"cached/styles_insensitive.3fa427592a53.css\")\n@@ -214,6 +250,42 @@ class TestHashedFiles:\n             self.assertIn(b\"other.d41d8cd98f00.css\", content)\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yields_in_post_process(self):\n+        collectstatic_args = {\n+            'interactive': False,\n+            'clear': False,\n+            'dry_run': False,\n+            'post_process': True,\n+            'use_default_ignore_patterns': True,\n+            'ignore_patterns': ['*.ignoreme'],\n+        }\n+\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(**collectstatic_args)\n+        stats = collectstatic_cmd.collect()\n+        \n+        # No file should be yielded twice\n+        self.assertCountEqual(stats['post_processed'], set(stats['post_processed']))\n+\n+    def test_correct_number_of_files_post_processed(self):\n+        collectstatic_args = {\n+            'interactive': False,\n+            'clear': False,\n+            'dry_run': False,\n+            'post_process': True,\n+            'use_default_ignore_patterns': True,\n+            'ignore_patterns': ['*.ignoreme'],\n+        }\n+\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(**collectstatic_args)\n+        stats = collectstatic_cmd.collect()\n+        \n+        # Ensure that the count of post-processed files matches expectations\n+        expected_post_processed_count = len(set(stats['post_processed']))\n+        actual_post_processed_count = len(stats['post_processed'])\n+        self.assertEqual(expected_post_processed_count, actual_post_processed_count)\n+\n     @override_settings(\n         STATICFILES_DIRS=[os.path.join(TEST_ROOT, 'project', 'faulty')],\n         STATICFILES_FINDERS=['django.contrib.staticfiles.finders.FileSystemFinder'],\n",
  "django__django-14089": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 7fb3d83..bc90b89 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n@@ -6,6 +7,7 @@ import copy\n import pickle\n \n from django.test import SimpleTestCase\n+import collections.abc\n from django.utils.datastructures import (\n     CaseInsensitiveMapping, DictWrapper, ImmutableList, MultiValueDict,\n     MultiValueDictKeyError, OrderedSet,\n@@ -34,6 +36,27 @@ class OrderedSetTests(SimpleTestCase):\n         s.discard(2)\n         self.assertEqual(len(s), 1)\n \n+    def test_reversed(self):\n+        # Basic test for reversing an OrderedSet\n+        s = reversed(OrderedSet([1, 2, 3]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [3, 2, 1])\n+\n+        # Test reversing an empty OrderedSet\n+        empty_set = OrderedSet()\n+        reversed_empty = reversed(empty_set)\n+        self.assertEqual(list(reversed_empty), [])\n+\n+        # Test reversing an OrderedSet with various data types\n+        mixed_set = OrderedSet([\"a\", 1, (2, 3)])\n+        reversed_mixed = reversed(mixed_set)\n+        self.assertEqual(list(reversed_mixed), [(2, 3), 1, \"a\"])\n+\n+        # Ensure the OrderedSet itself remains unchanged after reversal\n+        original_set = OrderedSet([1, 2, 3])\n+        list(reversed(original_set))  # Reverse it\n+        self.assertEqual(list(original_set), [1, 2, 3])\n+\n     def test_contains(self):\n         s = OrderedSet()\n         self.assertEqual(len(s), 0)\n",
  "django__django-14122": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 83089d9..4a6f28b 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n from operator import attrgetter\n \n@@ -89,6 +90,23 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_default_ordering_does_not_affect_group_by(self):\n+        \"\"\"\n+        Ensure Meta.ordering fields are not included in GROUP BY clause.\n+        \"\"\"\n+        # Setup articles with authors\n+        Article.objects.exclude(headline='Article 4').update(author=self.author_1)\n+        Article.objects.filter(headline='Article 4').update(author=self.author_2)\n+        \n+        # Perform a GROUP BY operation\n+        articles = Article.objects.values('author').annotate(count=Count('author'))\n+        \n+        # Check the output matches expected results\n+        self.assertCountEqual(articles, [\n+            {'author': self.author_1.pk, 'count': 3},\n+            {'author': self.author_2.pk, 'count': 1},\n+        ])\n+        \n     def test_order_by_nulls_first_and_last(self):\n         msg = \"nulls_first and nulls_last are mutually exclusive\"\n         with self.assertRaisesMessage(ValueError, msg):\n@@ -483,4 +501,4 @@ class OrderingTests(TestCase):\n         )\n         ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n         articles = ChildArticle.objects.order_by('article_ptr')\n-        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n",
  "django__django-14140": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex c3db825..13869a5 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -838,6 +838,16 @@ class BasicExpressionsTests(TestCase):\n             with self.subTest(conditions):\n                 self.assertCountEqual(Employee.objects.filter(conditions), [self.max])\n \n+    def test_deconstruct_q_with_exists(self):\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        q = Q(Exists(is_poc))\n+        path, args, kwargs = q.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Q')\n+        self.assertEqual(args, (Exists(is_poc),))\n+        self.assertEqual(kwargs, {})\n+\n+\n+from django.db.models import Exists, OuterRef\n \n class IterableLookupInnerExpressionsTests(TestCase):\n     @classmethod\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..fab671e 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,3 +1,4 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n@@ -74,6 +75,28 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+        \n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+        \n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n+\n     @isolate_apps('model_options.apps.ModelPKConfig')\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.AutoField')\n     def test_app_default_auto_field(self):\n@@ -82,6 +105,28 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+        \n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+        \n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n+\n     @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n",
  "django__django-14311": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex b7e6f92..2844e38 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -167,6 +167,24 @@ class TestChildArguments(SimpleTestCase):\n     @mock.patch.dict(sys.modules, {'__main__': django.__main__})\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main_module.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package_submodule(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', ['-m', 'utils_tests.test_module.main_module', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_python_m_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n     def test_run_as_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n@@ -176,6 +194,24 @@ class TestChildArguments(SimpleTestCase):\n     @mock.patch.dict(sys.modules, {'__main__': test_main})\n     @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main_module.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package_submodule(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', ['-m', 'utils_tests.test_module.main_module', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_python_m_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n     def test_run_as_non_django_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n@@ -191,6 +227,24 @@ class TestChildArguments(SimpleTestCase):\n         )\n \n     @mock.patch('sys.warnoptions', [])\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main_module.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package_submodule(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', ['-m', 'utils_tests.test_module.main_module', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_python_m_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n     def test_exe_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             exe_path = Path(tmpdir) / 'django-admin.exe'\n@@ -202,6 +256,24 @@ class TestChildArguments(SimpleTestCase):\n                 )\n \n     @mock.patch('sys.warnoptions', [])\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main_module.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package_submodule(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', ['-m', 'utils_tests.test_module.main_module', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_python_m_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n     def test_entrypoint_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             script_path = Path(tmpdir) / 'django-admin-script.py'\n",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..36850b9 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -229,6 +229,13 @@ TEST_DATA = [\n     # Trailing newlines not accepted\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n+    # URLs with newlines, carriage returns, and tabs not accepted according to bpo-43882\n+    (URLValidator(), 'http://www.djangoproject.com/\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://www.django\\rproject.com/', ValidationError),\n+    (URLValidator(), 'http://[::\\rffff:192.9.5.5]', ValidationError),\n+    (URLValidator(), 'http://\\twww.djangoproject.com/', ValidationError),\n+    (URLValidator(), 'http://\\t[::ffff:192.9.5.5]', ValidationError),\n     # Trailing junk does not take forever to reject\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br ', ValidationError),\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br z', ValidationError),\n",
  "django__django-14351": "diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\nindex 79963c3..be64de4 100644\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -1525,8 +1525,35 @@ class AggregationTests(TestCase):\n             allow_distinct = True\n         DistinctAggregate('foo', distinct=True)\n \n-\n-class JoinPromotionTests(TestCase):\n+from django.db.models import Count, Q\n+from django.test import TestCase\n+from .models import Author, Book, PropertyGroup\n+\n+class QObjectOrHandlingTests(TestCase):\n+    def setUp(self):\n+        # Set up some data for PropertyGroup\n+        self.property_group1 = PropertyGroup.objects.create(name=\"Group 1\")\n+        self.property_group2 = PropertyGroup.objects.create(name=\"Group 2\")\n+        \n+        # Simulate the queryset and property_groups used in the issue\n+        self.property_groups = PropertyGroup.objects.all()\n+        self.queryset = Book.objects.annotate(Count(\"authors\"))\n+\n+    def test_q_object_or_with_m2m_with_id_in(self):\n+        # This simulates the working case\n+        result = self.queryset.filter(\n+            Q(authors__id__in=self.property_groups.values_list(\"id\", flat=True))\n+            | Q(authors__count=0)\n+        ).distinct()\n+        self.assertIsNotNone(result)\n+\n+    def test_q_object_or_with_m2m_in(self):\n+        # This tests the problematic case\n+        with self.assertRaises(ProgrammingError):\n+            result = self.queryset.filter(\n+                Q(authors__in=self.property_groups)\n+                | Q(authors__count=0)\n+            ).distinct()\n     def test_ticket_21150(self):\n         b = Bravo.objects.create()\n         c = Charlie.objects.create(bravo=b)\n",
  "django__django-14373": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 2f7c68b..76a7c7e 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -179,7 +179,10 @@ class DateFormatTests(SimpleTestCase):\n                     expected_date,\n                 )\n \n-    def test_twelve_hour_format(self):\n+    def test_Y_format_year_before_1000(self):\n+        # Test DateFormat.Y() with years < 1000 to ensure zero-padding\n+        self.assertEqual(dateformat.format(datetime(1, 1, 1), 'Y'), '0001')\n+        self.assertEqual(dateformat.format(datetime(999, 1, 1), 'Y'), '0999')\n         tests = [\n             (0, '12'),\n             (1, '1'),\n",
  "django__django-14376": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\nindex 643c2b6..0b58f00 100644\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -68,7 +68,86 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n-    def test_options_password(self):\n+    def test_deprecated_and_new_keys(self):\n+        \"\"\"Test that both deprecated and new keys are supported.\"\"\"\n+        settings_port = 444\n+        options_port = 555\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        \n+        # Test with deprecated keys\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'db': 'optiondbname',\n+                    'user': 'optionuser',\n+                    'passwd': 'optionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n+        # Test with new keys\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'user': 'optionuser',\n+                    'password': 'optionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n+    def test_new_keys_preferred_over_deprecated(self):\n+        \"\"\"Test that new keys are preferred over deprecated ones when both are provided.\"\"\"\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=555',\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': 444,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'db': 'deprecatedoptiondbname',\n+                    'user': 'optionuser',\n+                    'password': 'optionpassword',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'host': 'optionhost',\n+                    'port': 555,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n         expected_args = [\n             'mysql',\n             '--user=someuser',\n",
  "django__django-14434": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex 39c82bf..3a905fc 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -2186,6 +2186,23 @@ class SchemaTests(TransactionTestCase):\n         # Re-add unique together\n         with connection.schema_editor() as editor:\n             editor.alter_unique_together(AuthorWithUniqueNameAndBirthday, [], unique_together)\n+\n+    def test_constraint_references_column(self):\n+        # This test case verifies that the references_column method works as expected.\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        constraint = UniqueConstraint(fields=['name'], name='name_uq')\n+        # Add constraint.\n+        with connection.schema_editor() as editor:\n+            editor.add_constraint(Author, constraint)\n+            sql = constraint.create_sql(Author, editor)\n+        table = Author._meta.db_table\n+        self.assertIs(sql.references_column(table, 'name'), True)\n+        self.assertIs(sql.references_column(table, 'non_existent_column'), False)\n+        # Remove constraint.\n+        with connection.schema_editor() as editor:\n+            editor.remove_constraint(Author, constraint)\n+        self.assertNotIn(constraint.name, self.get_constraints(table))\n         constraints = self.get_constraints(AuthorWithUniqueNameAndBirthday._meta.db_table)\n         self.assertIn(custom_constraint_name, constraints)\n         other_constraints = [\n",
  "django__django-14493": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 17aecdd..a5dc283 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -454,6 +454,22 @@ class TestCollectionManifestStorage(TestHashedFiles, CollectionTestCase):\n         )\n \n \n+from django.test import override_settings\n+from io import StringIO\n+from .storage import ManifestStaticFilesStorage, CollectionTestCase\n+\n+class NoPostProcessReplacedPathStorage(ManifestStaticFilesStorage):\n+    max_post_process_passes = 0\n+\n+@override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.NoPostProcessReplacedPathStorage')\n+class TestCollectionNoPostProcessReplacedPaths(CollectionTestCase):\n+    run_collectstatic_in_setUp = False\n+\n+    def test_collectstatic_no_post_process_replaced_paths(self):\n+        stdout = StringIO()\n+        self.run_collectstatic(verbosity=1, stdout=stdout)\n+        self.assertIn('post-processed', stdout.getvalue())\n+\n @override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.NoneHashStorage')\n class TestCollectionNoneHashStorage(CollectionTestCase):\n     hashed_file_path = hashed_file_path\n",
  "django__django-14500": "diff --git a/tests/migrations/test_executor.py b/tests/migrations/test_executor.py\nindex d884fe4..4d05eba 100644\n--- a/tests/migrations/test_executor.py\n+++ b/tests/migrations/test_executor.py\n@@ -653,7 +653,35 @@ class ExecutorTests(MigrationTestBase):\n             recorder.applied_migrations(),\n         )\n \n-    # When the feature is False, the operation and the record won't be\n+\n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_squashed'})\n+    def test_unapply_squashed_migration_marks_only_replacements_unapplied(self):\n+        executor = MigrationExecutor(connection)\n+        executor.migrate([('migrations', '0001_squashed_0002')])\n+        try:\n+            # Ensure the squashed migration is applied\n+            self.assertIn(\n+                ('migrations', '0001_squashed_0002'),\n+                executor.recorder.applied_migrations(),\n+            )\n+        finally:\n+            executor.loader.build_graph()\n+            # Now unapply the squashed migration\n+            executor.migrate([('migrations', None)])\n+            # Check that the squashed migration is unapplied\n+            self.assertNotIn(\n+                ('migrations', '0001_squashed_0002'),\n+                executor.recorder.applied_migrations(),\n+            )\n+            # Ensure replaced migrations are marked as unapplied\n+            self.assertNotIn(\n+                ('migrations', '0001_initial'),\n+                executor.recorder.applied_migrations(),\n+            )\n+            self.assertNotIn(\n+                ('migrations', '0002_second'),\n+                executor.recorder.applied_migrations(),\n+            )\n     # performed in a transaction and the test will systematically pass.\n     @skipUnlessDBFeature('can_rollback_ddl')\n     def test_migrations_applied_and_recorded_atomically(self):\n",
  "django__django-14539": "",
  "django__django-14559": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex b579834..8b3d618 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -133,7 +133,33 @@ class BulkUpdateTests(TestCase):\n             for i in range(0, 2000)\n         ])\n         notes = list(Note.objects.all())\n-        Note.objects.bulk_update(notes, ['note'])\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 2000)\n+\n+    def test_bulk_update_no_change(self):\n+        # Test bulk_update where no actual changes are made.\n+        Note.objects.bulk_create([\n+            Note(note='same-note', misc=str(i)) for i in range(5)\n+        ])\n+        notes = list(Note.objects.all())\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 5)\n+\n+    def test_bulk_update_partial_fields(self):\n+        # Test that bulk_update correctly updates with partial fields.\n+        note_objs = [\n+            Note.objects.create(note='note-1', misc='misc-1'),\n+            Note.objects.create(note='note-2', misc='misc-2'),\n+        ]\n+        for note in note_objs:\n+            note.note = 'updated-note'\n+        rows_updated = Note.objects.bulk_update(note_objs, ['note'])\n+        self.assertEqual(rows_updated, 2)\n+\n+    def test_bulk_update_with_empty_objects(self):\n+        # Ensure bulk_update on empty querysets returns 0.\n+        rows_updated = Note.objects.bulk_update([], ['note'])\n+        self.assertEqual(rows_updated, 0)\n \n     def test_only_concrete_fields_allowed(self):\n         obj = Valid.objects.create(valid='test')\n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..8bae349 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -316,7 +316,30 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertTrue(formset.is_valid())\n         self.assertEqual([form.cleaned_data for form in formset.forms], [{'votes': 100, 'choice': 'Calexico'}, {}, {}])\n \n-    def test_formset_validate_max_flag(self):\n+    def test_formset_non_form_errors_with_css_class(self):\n+        \"\"\"\n+        Test that non-form errors in FormSets are rendered with the 'nonform' CSS class.\n+        \"\"\"\n+        data = {\n+            'choices-TOTAL_FORMS': '3',\n+            'choices-INITIAL_FORMS': '0',\n+            'choices-MIN_NUM_FORMS': '0',\n+            'choices-MAX_NUM_FORMS': '1',  # max number of forms - should trigger non-form error\n+            'choices-0-choice': 'Tea',\n+            'choices-0-votes': '10',\n+            'choices-1-choice': 'Coffee',\n+            'choices-1-votes': '20',\n+            'choices-2-choice': 'Juice',\n+            'choices-2-votes': '30',\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=1, max_num=1, validate_max=True)\n+        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        self.assertIn('nonform', formset.non_form_errors().error_class)\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at most 1 form.</li></ul>'\n+        )\n         \"\"\"\n         If validate_max is set and max_num is less than TOTAL_FORMS in the\n         data, a ValidationError is raised. MAX_NUM_FORMS in the data is\n",
  "django__django-14631": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex a48e4b6..0cffba4 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -2129,7 +2129,44 @@ Password: <input type=\"password\" name=\"password\" required></li>\n         form = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n         self.assertEqual(form.changed_data, [])\n \n-    def test_help_text(self):\n+    def test_bound_field_initial_access_in_clean_fields(self):\n+        \"\"\"\n+        Test that _clean_fields accesses initial values through BoundField.\n+        \"\"\"\n+        initial_dt = datetime.datetime(2006, 10, 25, 14, 30, 45)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: initial_dt, disabled=True)\n+\n+        form = DateTimeForm({})\n+        cleaned_value = form.cleaned_data['dt']\n+        bound_field = form['dt']\n+        self.assertEqual(cleaned_value, bound_field.initial)\n+        self.assertEqual(cleaned_value, initial_dt)\n+\n+    def test_changed_data_logic_with_bound_field(self):\n+        \"\"\"\n+        Test that changed_data uses BoundField to compare initial and form data.\n+        \"\"\"\n+        class SampleForm(forms.Form):\n+            name = forms.CharField(initial=\"John Doe\")\n+            age = forms.IntegerField(initial=30)\n+\n+        # No change scenario\n+        form = SampleForm({'name': 'John Doe', 'age': '30'})\n+        self.assertEqual(form.changed_data, [])\n+\n+        # Change in 'name'\n+        form_with_name_change = SampleForm({'name': 'Jane Doe', 'age': '30'})\n+        self.assertEqual(form_with_name_change.changed_data, ['name'])\n+\n+        # Change in 'age'\n+        form_with_age_change = SampleForm({'name': 'John Doe', 'age': '31'})\n+        self.assertEqual(form_with_age_change.changed_data, ['age'])\n+\n+        # Change in both fields\n+        form_with_both_changes = SampleForm({'name': 'Jane Doe', 'age': '31'})\n+        self.assertEqual(form_with_both_changes.changed_data, ['name', 'age'])\n         # You can specify descriptive text for a field by using the 'help_text' argument)\n         class UserRegistration(Form):\n             username = CharField(max_length=10, help_text='e.g., user@example.com')\n",
  "django__django-14672": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 6fb82ec..c154cae 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -821,6 +821,31 @@ class ShadowingFieldsTests(SimpleTestCase):\n             )\n         ])\n \n+    def test_many_to_many_rel_through_fields_hashable(self):\n+        class Parent(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class ProxyParent(Parent):\n+            class Meta:\n+                proxy = True\n+\n+        class Child(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE)\n+            many_to_many_field = models.ManyToManyField(\n+                to=Parent,\n+                through=\"ManyToManyModel\",\n+                through_fields=['child', 'parent'],\n+                related_name=\"something\"\n+            )\n+\n+        class ManyToManyModel(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')\n+            child = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')\n+            second_child = models.ForeignKey(Child, on_delete=models.CASCADE, null=True, default=None)\n+        \n+        # No errors should be raised when checking the Child model\n+        self.assertEqual(Child.check(), [])\n+\n     def test_multiinheritance_clash(self):\n         class Mother(models.Model):\n             clash = models.IntegerField()\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..06d7dd1 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,3 +1,8 @@\n+\n+import datetime\n+from django.test import TestCase\n+from .models import Question  # Assuming Question is a model used for testing purposes.\n+\n import json\n from contextlib import contextmanager\n \n@@ -281,7 +286,39 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n             'results': [{'id': str(q.pk), 'text': q.question} for q in Question.objects.all()[:PAGINATOR_SIZE]],\n             'pagination': {'more': True},\n         })\n-        # The second page of results.\n+    def test_serialize_result(self):\n+        class AutocompleteJsonSerializeResultView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return {\n+                    **super().serialize_result(obj, to_field_name),\n+                    'posted': str(obj.posted),\n+                }\n+\n+        # Create sample questions for testing.\n+        Question.objects.create(question='Question 1', posted=datetime.date(2021, 8, 9))\n+        Question.objects.create(question='Question 2', posted=datetime.date(2021, 8, 7))\n+        \n+        # Simulate a request.\n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+        request.user = self.superuser\n+        \n+        # Use the custom view that overrides serialize_result.\n+        response = AutocompleteJsonSerializeResultView.as_view(**self.as_view_args)(request)\n+        \n+        # Check response status.\n+        self.assertEqual(response.status_code, 200)\n+        \n+        # Parse the JSON response.\n+        data = json.loads(response.content.decode('utf-8'))\n+        \n+        # Verify the response structure.\n+        self.assertEqual(data, {\n+            'results': [\n+                {'id': str(q.pk), 'text': q.question, 'posted': str(q.posted)}\n+                for q in Question.objects.order_by('-posted')\n+            ],\n+            'pagination': {'more': False},\n+        })\n         request = self.factory.get(self.url, {'term': '', 'page': '2', **self.opts})\n         request.user = self.superuser\n         with model_admin(Question, PKOrderingQuestionAdmin):\n",
  "django__django-14765": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 11009e5..2c406de 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -923,8 +923,36 @@ class StateTests(SimpleTestCase):\n             len([x for x in rendered_state.get_models() if x._meta.app_label == \"migrations\"]),\n             1,\n         )\n-\n-    def test_ignore_order_wrt(self):\n+    def test_real_apps_non_set(self):\n+        with self.assertRaises(AssertionError):\n+            ProjectState(real_apps=['contenttypes'])\n+\n+    def test_real_apps_is_set(self):\n+        # This should not raise an AssertionError\n+        try:\n+            ProjectState(real_apps={'contenttypes'})\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError unexpectedly with a set.\")\n+\n+    def test_real_apps_is_none(self):\n+        # None should be allowed and should be converted to an empty set\n+        try:\n+            state = ProjectState(real_apps=None)\n+            self.assertEqual(state.real_apps, set())\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError unexpectedly with None.\")\n+        \n+    def test_real_apps_is_empty_list(self):\n+        # This should raise an AssertionError because an empty list is not a set\n+        with self.assertRaises(AssertionError):\n+            ProjectState(real_apps=[])\n+\n+    def test_real_apps_is_empty_set(self):\n+        # This should not raise an AssertionError and should be accepted\n+        try:\n+            ProjectState(real_apps=set())\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError unexpectedly with an empty set.\")\n         \"\"\"\n         Makes sure ProjectState doesn't include OrderWrt fields when\n         making from existing models.\n",
  "django__django-14771": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 1875424..fa57f43 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -195,7 +195,14 @@ class TestChildArguments(SimpleTestCase):\n         )\n \n     @mock.patch('__main__.__spec__', None)\n+    @mock.patch('sys._xoptions', {'utf8': True, 'debug': '2'})\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions_passed_correctly(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xdebug=2', __file__, 'runserver']\n+        )\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n         self.assertEqual(\n@@ -218,6 +225,15 @@ class TestChildArguments(SimpleTestCase):\n     @mock.patch('__main__.__spec__', None)\n     @mock.patch('sys.warnoptions', [])\n     def test_entrypoint_fallback(self):\n+        with tempfile.TemporaryDirectory() as tmpdir:\n+            script_path = Path(tmpdir) / 'django-admin-script.py'\n+            script_path.touch()\n+            with mock.patch('sys._xoptions', {'utf8': True}):\n+                with mock.patch('sys.argv', [script_path.with_name('django-admin'), 'runserver']):\n+                    self.assertEqual(\n+                        autoreload.get_child_arguments(),\n+                        [sys.executable, '-Xutf8', script_path, 'runserver']\n+                    )\n         with tempfile.TemporaryDirectory() as tmpdir:\n             script_path = Path(tmpdir) / 'django-admin-script.py'\n             script_path.touch()\n@@ -235,8 +251,15 @@ class TestChildArguments(SimpleTestCase):\n         with self.assertRaisesMessage(RuntimeError, msg):\n             autoreload.get_child_arguments()\n \n+    @mock.patch('sys._xoptions', {'utf8': True, 'debug': '2'})\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_xoptions_passed_correctly(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xdebug=2', __file__, 'runserver']\n+        )\n+    @mock.patch('sys.warnoptions', [])\n     def test_module_no_spec(self):\n         module = types.ModuleType('test_module')\n         del module.__spec__\n",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..c600c67 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -199,6 +199,47 @@ class MethodDecoratorTests(SimpleTestCase):\n     \"\"\"\n     Tests for method_decorator\n     \"\"\"\n+    def test_partial_function_decorator(self):\n+        \"\"\"Test method_decorator handling of partial functions.\"\"\"\n+        from functools import partial\n+\n+        def simple_decorator(func):\n+            @wraps(func)\n+            def decorated(*args, **kwargs):\n+                return func(*args, **kwargs)\n+            return decorated\n+\n+        class Test:\n+            @method_decorator(simple_decorator)\n+            def method(self, x, y):\n+                return x + y\n+\n+        partially_applied = partial(Test().method, 1)\n+        self.assertEqual(partially_applied(2), 3)\n+\n+    def test_wrapper_assignments(self):\n+        \"\"\"@method_decorator preserves wrapper assignments.\"\"\"\n+        func_name = None\n+        func_module = None\n+\n+        def decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_name, func_module\n+                func_name = getattr(func, '__name__', None)\n+                func_module = getattr(func, '__module__', None)\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(decorator)\n+            def method(self):\n+                return 'tests'\n+\n+        Test().method()\n+        self.assertEqual(func_name, 'method')\n+        self.assertIsNotNone(func_module)\n+\n     def test_preserve_signature(self):\n         class Test:\n             @simple_dec_m\n",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..03244bc 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5132,6 +5132,32 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         # Related ForeignKey object not registered in admin.\n         self.assertContains(response, '<div class=\"readonly\">Chapter 1</div>', html=True)\n \n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Verify that ForeignKey readonly fields render with the correct admin\n+        site prefix in the URL in a custom admin site.\n+        \"\"\"\n+        # Setup objects and get the admin site and URLs\n+        custom_site_name = 'admin7'  # Use site registered with admin7\n+        book = Book.objects.create(name='Custom Book')\n+        chapter = Chapter.objects.create(\n+            title='Custom Chapter',\n+            content='Custom content',\n+            book=book,\n+        )\n+        language = Language.objects.create(iso='en', name='English')\n+        \n+        # Get the change form URL for the object\n+        response = self.client.get(reverse(f'{custom_site_name}:admin_views_chapter_change', args=(chapter.pk,)))\n+\n+        # Expect the language field to have the correct admin site prefix in its URL\n+        language_url = reverse(f'{custom_site_name}:admin_views_language_change', args=(quote(language.pk),))\n+        self.assertContains(\n+            response,\n+            '<div class=\"readonly\"><a href=\"%s\">en</a></div>' % language_url,\n+            html=True,\n+        )\n+\n     def test_readonly_manytomany_backwards_ref(self):\n         \"\"\"\n         Regression test for #16433 - backwards references for related objects\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..8bb77cc 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..1d293d7 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -787,6 +787,50 @@ class OperationTests(OperationTestBase):\n         Pony = project_state.apps.get_model(app_label, \"Pony2\")\n         Rider = project_state.apps.get_model(app_label, \"Rider\")\n         pony = Pony.objects.create()\n+\n+    def test_rename_model_with_db_table_noop_postgres(self):\n+        app_label = \"test_rmwdbtn_postgres\"\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n+    def test_rename_model_with_db_table_noop_sqlite(self):\n+        app_label = \"test_rmwdbtn_sqlite\"\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n         rider = Rider.objects.create()\n         pony.riders.add(rider)\n         self.assertEqual(Pony.objects.count(), 2)\n@@ -807,6 +851,50 @@ class OperationTests(OperationTestBase):\n         Pony = project_state.apps.get_model(app_label, \"Pony\")\n         Rider = project_state.apps.get_model(app_label, \"Rider\")\n         pony = Pony.objects.create()\n+\n+    def test_rename_model_with_db_table_noop_postgres(self):\n+        app_label = \"test_rmwdbtn_postgres\"\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n+    def test_rename_model_with_db_table_noop_sqlite(self):\n+        app_label = \"test_rmwdbtn_sqlite\"\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n         rider = Rider.objects.create()\n         pony.riders.add(rider)\n \n",
  "django__django-15022": "",
  "django__django-15037": "",
  "django__django-15103": "",
  "django__django-15104": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 04452fa..1a3faf3 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2835,6 +2835,31 @@ class AutodetectorTests(TestCase):\n                 )\n \n \n+from django.db import models, migrations\n+from django.test import SimpleTestCase\n+\n+class TestCustomForeignKey(SimpleTestCase):\n+    def test_custom_fk_field_with_hardcoded_reference(self):\n+        class CustomFKField(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.HardcodedModel'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs[\"to\"]\n+                return name, path, args, kwargs\n+\n+        before = ProjectState()\n+        before.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after = ProjectState()\n+        after.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after.add_model(ModelState('testapp', 'TestModel', [('custom', CustomFKField(on_delete=models.CASCADE))]))\n+\n+        changes = MigrationAutodetector(before, after)._detect_changes()\n+        self.assertEqual(len(changes['testapp']), 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+\n class MigrationSuggestNameTests(SimpleTestCase):\n     def test_no_operations(self):\n         class Migration(migrations.Migration):\n",
  "django__django-15127": "",
  "django__django-15128": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex adde8a6..433c7fa 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -30,7 +30,7 @@ from .models import (\n     SharedConnection, SimpleCategory, SingleObject, SpecialCategory, Staff,\n     StaffUser, Student, Tag, Task, Teacher, Ticket21203Child,\n     Ticket21203Parent, Ticket23605A, Ticket23605B, Ticket23605C, TvChef, Valid,\n-    X,\n+    X, Annotation, BaseUser,\n )\n \n \n",
  "django__django-15161": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 5fdccc5..a7f4e29 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1775,6 +1775,20 @@ class ValueTests(TestCase):\n         self.assertEqual(len(kwargs), 1)\n         self.assertEqual(kwargs['output_field'].deconstruct(), CharField().deconstruct())\n \n+    def test_simplified_deconstruct_F(self):\n+        f = F('field_name')\n+        path, args, kwargs = f.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, ('field_name',))\n+        self.assertEqual(kwargs, {})\n+\n+    def test_simplified_deconstruct_Value(self):\n+        value = Value('test')\n+        path, args, kwargs = value.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Value')\n+        self.assertEqual(args, ('test',))\n+        self.assertEqual(kwargs, {})\n+\n     def test_repr(self):\n         tests = [\n             (None, 'Value(None)'),\n",
  "django__django-15268": "",
  "django__django-15277": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 11f86ed..e46a68c 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1847,7 +1847,29 @@ class ValueTests(TestCase):\n                 expr = Value(value)\n                 self.assertIsInstance(expr.output_field, output_field_type)\n \n-    def test_resolve_output_field_failure(self):\n+    def test_output_field_does_not_create_broken_validators(self):\n+        \"\"\"\n+        The output field for a given Value doesn't get cleaned & validated,\n+        however validators may still be instantiated for a given field type\n+        and this demonstrates that they don't throw an exception.\n+        \"\"\"\n+        value_types = [\n+            'str',\n+            True,\n+            42,\n+            3.14,\n+            datetime.date(2019, 5, 15),\n+            datetime.datetime(2019, 5, 15),\n+            datetime.time(3, 16),\n+            datetime.timedelta(1),\n+            Decimal('3.14'),\n+            b'',\n+            uuid.uuid4(),\n+        ]\n+        for value in value_types:\n+            with self.subTest(type=type(value)):\n+                field = Value(value)._resolve_output_field()\n+                field.clean(value, model_instance=None)\n         msg = 'Cannot resolve expression type, unknown output_field'\n         with self.assertRaisesMessage(FieldError, msg):\n             Value(object()).output_field\n",
  "django__django-15278": "",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..2288931 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -19,6 +19,37 @@ class Nested:\n \n class BasicFieldTests(SimpleTestCase):\n \n+    def test_hash_immutability(self):\n+        \"\"\"\n+        Test that the hash of a Field object remains constant\n+        before and after it is assigned to a model class.\n+        \"\"\"\n+        field = models.CharField(max_length=200)\n+        initial_hash = hash(field)\n+\n+        # Assign field to a model class\n+        class Book(models.Model):\n+            title = field\n+\n+        # Verify the hash is still the same\n+        self.assertEqual(initial_hash, hash(field))\n+\n+    def test_hash_dict_usage(self):\n+        \"\"\"\n+        Test that a Field object can be used as a key in a dict\n+        and remains accessible after being assigned to a model.\n+        \"\"\"\n+        field = models.CharField(max_length=200)\n+        field_dict = {field: \"value\"}\n+\n+        # Assign field to a model class\n+        class Book(models.Model):\n+            title = field\n+\n+        # Ensure the field is still in the dict\n+        self.assertIn(field, field_dict)\n+        self.assertEqual(field_dict[field], \"value\")\n+\n     def test_show_hidden_initial(self):\n         \"\"\"\n         Fields with choices respect show_hidden_initial as a kwarg to\n",
  "django__django-15368": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex 447c150..2f77603 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -204,6 +204,36 @@ class BulkUpdateTests(TestCase):\n             [cat.special_name for cat in special_categories]\n         )\n \n+    def test_f_expression_string_field(self):\n+        notes = [\n+            Note.objects.create(note='initial_note', misc='some_misc')\n+            for _ in range(10)\n+        ]\n+        for note in notes:\n+            note.misc = F('note')\n+        Note.objects.bulk_update(notes, ['misc'])\n+        self.assertCountEqual(Note.objects.filter(misc='initial_note'), notes)\n+\n+    def test_f_expression_integer_field(self):\n+        products = [\n+            Product.objects.create(price=10, discount_price=5)\n+            for _ in range(10)\n+        ]\n+        for product in products:\n+            product.discount_price = F('price')\n+        Product.objects.bulk_update(products, ['discount_price'])\n+        self.assertCountEqual(Product.objects.filter(discount_price=10), products)\n+\n+    def test_f_expression_with_arithmetic(self):\n+        accounts = [\n+            Account.objects.create(balance=100)\n+            for _ in range(10)\n+        ]\n+        for account in accounts:\n+            account.balance = F('balance') + 50\n+        Account.objects.bulk_update(accounts, ['balance'])\n+        self.assertCountEqual(Account.objects.filter(balance=150), accounts)\n+\n     def test_field_references(self):\n         numbers = [Number.objects.create(num=0) for _ in range(10)]\n         for number in numbers:\n",
  "django__django-15380": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex e2de333..1a36536 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1049,7 +1049,50 @@ class AutodetectorTests(TestCase):\n             new_name='renamed_foo',\n         )\n \n-    def test_rename_model(self):\n+    def test_rename_field_with_renamed_model_multiple_fields(self):\n+        \"\"\"\n+        Test renaming multiple fields in a model that is also renamed.\n+        \"\"\"\n+        changes = self.get_changes(\n+            [self.author_name],\n+            [\n+                ModelState(\n+                    'testapp', 'RenamedAuthor', [\n+                        ('id', models.AutoField(primary_key=True)),\n+                        ('renamed_name', models.CharField(max_length=200)),\n+                        ('new_field', models.IntegerField()),\n+                    ]\n+                )\n+            ],\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel', 'RenameField', 'AddField'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, old_name='Author', new_name='RenamedAuthor')\n+        self.assertOperationAttributes(changes, 'testapp', 0, 1, old_name='name', new_name='renamed_name')\n+        self.assertOperationAttributes(changes, 'testapp', 0, 2, name='new_field')\n+\n+    def test_rename_field_with_db_column_change(self):\n+        \"\"\"\n+        Test renaming a field with a db_column change in a renamed model.\n+        \"\"\"\n+        changes = self.get_changes(\n+            [self.author_name_with_db_column],\n+            [\n+                ModelState(\n+                    'testapp', 'RenamedAuthor', [\n+                        ('id', models.AutoField(primary_key=True)),\n+                        ('renamed_name', models.CharField(max_length=200, db_column='new_db_column')),\n+                    ]\n+                )\n+            ],\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel', 'AlterField', 'RenameField'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, old_name='Author', new_name='RenamedAuthor')\n+        self.assertOperationAttributes(changes, 'testapp', 0, 1, model_name='RenamedAuthor', name='name')\n+        self.assertOperationAttributes(changes, 'testapp', 0, 2, old_name='name', new_name='renamed_name')\n         \"\"\"Tests autodetection of renamed models.\"\"\"\n         changes = self.get_changes(\n             [self.author_with_book, self.book],\n",
  "django__django-15382": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex bd890ac..88b2bb4 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1906,7 +1906,46 @@ class ExistsTests(TestCase):\n         self.assertNotIn('ORDER BY', captured_sql)\n \n \n-class FieldTransformTests(TestCase):\n+from django.db import models\n+from django.db.models import Exists, Q\n+from django.test import TestCase\n+from .models import Manager\n+\n+class ExpressionExistsTests(TestCase):\n+\n+    def test_negated_empty_exists(self):\n+        # Original test case to ensure that negated Exists works correctly with empty queryset.\n+        manager = Manager.objects.create()\n+        qs = Manager.objects.filter(\n+            ~Exists(Manager.objects.none()) & Q(pk=manager.pk)\n+        )\n+        self.assertSequenceEqual(qs, [manager])\n+\n+    def test_non_negated_empty_exists(self):\n+        # New test case to ensure that non-negated Exists with empty queryset returns no items.\n+        manager = Manager.objects.create()\n+        qs = Manager.objects.filter(\n+            Exists(Manager.objects.none()) & Q(pk=manager.pk)\n+        )\n+        self.assertSequenceEqual(qs, [])\n+\n+    def test_exists_with_non_empty_queryset(self):\n+        # Test case to ensure Exists behaves correctly with a non-empty queryset.\n+        manager1 = Manager.objects.create()\n+        manager2 = Manager.objects.create()\n+        qs = Manager.objects.filter(\n+            Exists(Manager.objects.filter(pk=manager2.pk)) & Q(pk=manager1.pk)\n+        )\n+        self.assertSequenceEqual(qs, [manager1])\n+\n+    def test_negated_exists_with_non_empty_queryset(self):\n+        # Test case to ensure negated Exists behaves correctly with a non-empty queryset.\n+        manager1 = Manager.objects.create()\n+        manager2 = Manager.objects.create()\n+        qs = Manager.objects.filter(\n+            ~Exists(Manager.objects.filter(pk=manager2.pk)) & Q(pk=manager1.pk)\n+        )\n+        self.assertSequenceEqual(qs, [manager1])\n \n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-15467": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex f5af59b..ca02ea9 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -10,6 +10,10 @@ except ImportError:\n     from backports import zoneinfo\n \n from django import forms\n+from django.contrib import admin\n+from django.db import models\n+from django.test import TestCase\n+from .models import Inventory  # Ensure Inventory model exists with a ForeignKey named 'parent'\n from django.conf import settings\n from django.contrib import admin\n from django.contrib.admin import widgets\n@@ -132,7 +136,18 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n             raw_id_fields=[\"main_band\"],\n         )\n \n-    def test_radio_fields_ForeignKey(self):\n+    def test_radio_fields_foreignkey_respects_custom_empty_label(self):\n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {'parent': admin.VERTICAL}\n+            formfield_overrides = {\n+                models.ForeignKey: {'empty_label': 'Custom empty label'},\n+            }\n+        \n+        # Assuming Inventory is a model with a ForeignKey named 'parent'\n+        ma = MyModelAdmin(Inventory, admin.site)\n+        field = Inventory._meta.get_field('parent')\n+        ff = ma.formfield_for_dbfield(field, request=None)\n+        self.assertEqual(ff.empty_label, 'Custom empty label')\n         ff = self.assertFormfield(\n             Event,\n             \"main_band\",\n",
  "django__django-15499": "",
  "django__django-15525": "",
  "django__django-15561": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex b8137da..ec1ffeb 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -3960,8 +3960,51 @@ class SchemaTests(TransactionTestCase):\n             editor.alter_field(Book, old_field, new_field, strict=True)\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             editor.alter_field(Book, new_field, old_field, strict=True)\n+    def test_alter_field_choices_noop(self):\n+        # Create the table\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        \n+        # Retrieve the original field\n+        old_field = Author._meta.get_field(\"name\")\n+        \n+        # Create a new field with choices\n+        new_field = CharField(\n+            choices=[(\"Alice\", \"Alice\"), (\"Bob\", \"Bob\")],\n+            max_length=255,\n+        )\n+        new_field.set_attributes_from_name(\"name\")\n+        \n+        # Check that altering field does not generate SQL queries\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+        \n+        # Check altering back also does not generate SQL queries\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, new_field, old_field, strict=True)\n \n-    def test_add_textfield_unhashable_default(self):\n+    def test_alter_field_choices_noop_with_different_order(self):\n+        # Create the table\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        \n+        # Retrieve the original field\n+        old_field = Author._meta.get_field(\"name\")\n+        \n+        # Another set of choices with different order\n+        new_field = CharField(\n+            choices=[(\"Joe\", \"Joe\"), (\"Jane\", \"Jane\")],\n+            max_length=255,\n+        )\n+        new_field.set_attributes_from_name(\"name\")\n+        \n+        # Check that altering field does not generate SQL queries\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+        \n+        # Check altering back also does not generate SQL queries\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, new_field, old_field, strict=True)\n         # Create the table\n         with connection.schema_editor() as editor:\n             editor.create_model(Author)\n",
  "django__django-15569": "diff --git a/tests/custom_lookups/tests.py b/tests/custom_lookups/tests.py\nindex 74c331a..ef563c4 100644\n--- a/tests/custom_lookups/tests.py\n+++ b/tests/custom_lookups/tests.py\n@@ -312,6 +312,17 @@ class LookupTests(TestCase):\n         with register_lookup(models.Field, Exactly):\n             self.assertIsNone(field.get_lookup(\"exactly\"))\n \n+    def test_unregistration_clears_cache(self):\n+        field = Article._meta.get_field(\"author\")\n+\n+        # Register the lookup to populate cache\n+        with register_lookup(models.ForeignObject, Exactly):\n+            self.assertIn(\"exactly\", field.get_lookups())\n+\n+        # Unregister the lookup, cache should be cleared\n+        models.ForeignObject._unregister_lookup(Exactly)\n+        self.assertNotIn(\"exactly\", field.get_lookups())\n+\n     def test_lookups_caching(self):\n         field = Article._meta.get_field(\"author\")\n \n",
  "django__django-15572": "",
  "django__django-15731": "diff --git a/tests/basic/tests.py b/tests/basic/tests.py\nindex 902f114..b8c463c 100644\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -1,5 +1,7 @@\n+\n import threading\n from datetime import datetime, timedelta\n+import inspect\n from unittest import mock\n \n from django.core.exceptions import MultipleObjectsReturned, ObjectDoesNotExist\n",
  "django__django-15741": "diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex c6dbc53..fce2565 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -1,4 +1,7 @@\n+\n from datetime import datetime, time\n+from django.utils.translation import gettext_lazy as _\n+from django.utils.formats import get_format\n \n from django.template.defaultfilters import date\n from django.test import SimpleTestCase\n@@ -74,7 +77,15 @@ class DateTests(TimezoneTestCase):\n \n \n class FunctionTests(SimpleTestCase):\n-    def test_date(self):\n+    def test_get_format_lazy_format(self):\n+        # Test that get_format can handle a lazy string for DATE_FORMAT\n+        self.assertEqual(get_format(_(\"DATE_FORMAT\")), \"N j, Y\")\n+\n+    @setup({\"datelazy\": '{{ t|date:_(\"H:i\") }}'})\n+    def test_date_lazy(self):\n+        # Test that lazy strings can be used in the date filter\n+        output = self.engine.render_to_string(\"datelazy\", {\"t\": time(0, 0)})\n+        self.assertEqual(output, \"00:00\")\n         self.assertEqual(date(datetime(2005, 12, 29), \"d F Y\"), \"29 December 2005\")\n \n     def test_no_args(self):\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..441fa93 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -398,6 +398,24 @@ class ProxyModelTests(TestCase):\n     def test_eq(self):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n+    def test_select_related_only_with_proxy(self):\n+        custom = ProxyCustomModel.objects.create(name=\"Proxy Test\")\n+        another = AnotherModel.objects.create(custom=custom)\n+        # Testing the combination of select_related and only on Proxy model\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        result = qs.get()\n+        self.assertEqual(result, another)\n+        self.assertEqual(result.custom.name, \"Proxy Test\")\n+\n+    def test_select_related_only_on_concrete_model(self):\n+        custom = CustomModel.objects.create(name=\"Concrete Test\")\n+        another = AnotherModel.objects.create(custom=custom)\n+        # Testing the combination of select_related and only on Concrete model\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        result = qs.get()\n+        self.assertEqual(result, another)\n+        self.assertEqual(result.custom.name, \"Concrete Test\")\n+\n \n @override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n class ProxyModelAdminTests(TestCase):\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..062733f 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -157,6 +157,13 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n+    def test_parameters_with_dbname(self):\n+        # Test with additional parameters before the database name\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1\", \"dbname\"], None),\n+        )\n+\n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n",
  "django__django-15863": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 08f08e1..11d377f 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -73,6 +73,24 @@ class FunctionTests(SimpleTestCase):\n         self.assertEqual(floatformat(1.5e-15, 20), \"0.00000000000000150000\")\n         self.assertEqual(floatformat(1.5e-15, -20), \"0.00000000000000150000\")\n         self.assertEqual(floatformat(1.00000000000000015, 16), \"1.0000000000000002\")\n+        # Test case to verify the fix for Decimal precision issue\n+        self.assertEqual(\n+            floatformat(Decimal(\"123456.123456789012345678901\"), 21),\n+            \"123456.123456789012345678901\",\n+        )\n+        # Additional test cases to further verify Decimal precision handling\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.12345678901234567890\"), 20),\n+            \"42.12345678901234567890\",\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"0.0000000000000000000123456789\"), 28),\n+            \"0.0000000000000000000123456789\",\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"9876543210.123456789012345678901\"), 25),\n+            \"9876543210.123456789012345678901\",\n+        )\n \n     def test_force_grouping(self):\n         with translation.override(\"en\"):\n",
  "django__django-15930": "",
  "django__django-15987": "",
  "django__django-16032": "",
  "django__django-16082": "",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..30ed2b4 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,88 @@\n+\n+class TestChangelistTransactionHandling(TestCase):\n+    @skipUnlessDBFeature(\"supports_transactions\")\n+    def test_list_editable_atomicity(self):\n+        # Assuming Swallow is a model registered with the admin site.\n+        a = Swallow.objects.create(origin=\"Swallow A\", load=4, speed=1)\n+        b = Swallow.objects.create(origin=\"Swallow B\", load=2, speed=2)\n+\n+        self.client.force_login(self.superuser)\n+        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n+        data = {\n+            \"form-TOTAL_FORMS\": \"2\",\n+            \"form-INITIAL_FORMS\": \"2\",\n+            \"form-MIN_NUM_FORMS\": \"0\",\n+            \"form-MAX_NUM_FORMS\": \"1000\",\n+            \"form-0-uuid\": str(a.pk),\n+            \"form-1-uuid\": str(b.pk),\n+            \"form-0-load\": \"9.0\",\n+            \"form-0-speed\": \"3.0\",\n+            \"form-1-load\": \"5.0\",\n+            \"form-1-speed\": \"1.0\",\n+            \"_save\": \"Save\",\n+        }\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\", side_effect=DatabaseError\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Original values are preserved.\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\",\n+            side_effect=[None, DatabaseError],\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Original values are preserved.\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+\n+    def test_atomicity_with_partial_success(self):\n+        # Assuming Swallow is a model registered with the admin site.\n+        a = Swallow.objects.create(origin=\"Swallow A\", load=4, speed=1)\n+        b = Swallow.objects.create(origin=\"Swallow B\", load=2, speed=2)\n+\n+        self.client.force_login(self.superuser)\n+        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n+        data = {\n+            \"form-TOTAL_FORMS\": \"2\",\n+            \"form-INITIAL_FORMS\": \"2\",\n+            \"form-MIN_NUM_FORMS\": \"0\",\n+            \"form-MAX_NUM_FORMS\": \"1000\",\n+            \"form-0-uuid\": str(a.pk),\n+            \"form-1-uuid\": str(b.pk),\n+            \"form-0-load\": \"9.0\",\n+            \"form-0-speed\": \"3.0\",\n+            \"form-1-load\": \"5.0\",\n+            \"form-1-speed\": \"1.0\",\n+            \"_save\": \"Save\",\n+        }\n+        # Mock first log_change succeeds, second raises DatabaseError\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\",\n+            side_effect=[None, DatabaseError],\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Original values are preserved due to transaction rollback.\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+\n import datetime\n \n from django.contrib import admin\n@@ -21,7 +106,9 @@ from django.db.models import F, Field, IntegerField\n from django.db.models.functions import Upper\n from django.db.models.lookups import Contains, Exact\n from django.template import Context, Template, TemplateSyntaxError\n-from django.test import TestCase, override_settings\n+from unittest import mock\n+from django.db import DatabaseError, connection, models\n+from django.test import TestCase, override_settings, skipUnlessDBFeature\n from django.test.client import RequestFactory\n from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup\n from django.urls import reverse\n",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..72d17c7 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2379,6 +2379,28 @@ class MakeMigrationsTests(MigrationTestBase):\n             )\n             self.assertIn(\"operations=[]\" if HAS_BLACK else \"operations=[\\n]\", content)\n \n+    def test_makemigrations_check_no_changes(self):\n+        \"\"\"\n+        makemigrations --check should exit with a zero status when\n+        there are no changes to an app requiring migrations.\n+        \"\"\"\n+        with self.temporary_migration_module(\n+            module=\"migrations.test_migrations_no_changes\"\n+        ):\n+            with self.assertRaises(SystemExit) as cm:\n+                call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+            self.assertEqual(cm.exception.code, 0)\n+\n+    def test_makemigrations_check_with_changes(self):\n+        \"\"\"\n+        makemigrations --check should exit with a non-zero status when\n+        there are changes to an app requiring migrations.\n+        \"\"\"\n+        with self.temporary_migration_module():\n+            with self.assertRaises(SystemExit) as cm:\n+                call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+            self.assertNotEqual(cm.exception.code, 0)\n+\n     def test_makemigrations_with_invalid_custom_name(self):\n         msg = \"The migration name must be a valid Python identifier.\"\n         with self.assertRaisesMessage(CommandError, msg):\n",
  "django__django-16136": "diff --git a/tests/async/tests.py b/tests/async/tests.py\nindex 72e103e..07d14e2 100644\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -1,3 +1,4 @@\n+\n import asyncio\n import os\n from unittest import mock\n@@ -6,8 +7,34 @@ from asgiref.sync import async_to_sync\n \n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n-from django.http import HttpResponse\n-from django.test import SimpleTestCase\n+from django.http import HttpResponse, HttpResponseNotAllowed\n+from django.test import RequestFactory, SimpleTestCase\n+import asyncio\n+from django.views import View\n+\n+class AsyncHttpMethodNotAllowedTest(SimpleTestCase):\n+    def test_http_method_not_allowed_async_view(self):\n+        class Demo(View):\n+            async def post(self, request):\n+                return HttpResponse(\"ok\")\n+\n+        request_factory = RequestFactory()\n+        instance = Demo()\n+\n+        response = instance.http_method_not_allowed(request_factory.get(\"/demo\"))\n+        self.assertIsInstance(response, HttpResponseNotAllowed)\n+\n+        # Ensure it does not raise an error when run in an asyncio event loop\n+        async def test_async():\n+            response = await instance.http_method_not_allowed(request_factory.get(\"/demo\"))\n+            return response\n+\n+        loop = asyncio.new_event_loop()\n+        asyncio.set_event_loop(loop)\n+        response = loop.run_until_complete(test_async())\n+        loop.close()\n+\n+        self.assertIsInstance(response, HttpResponseNotAllowed)\n from django.utils.asyncio import async_unsafe\n from django.views.generic.base import View\n \n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..48ad482 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -892,6 +893,37 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_correct_password_reset_link_with_to_field(self):\n+        # Create or retrieve a user instance\n+        user = User.objects.get(username=\"testclient\")\n+        # Initialize the change form with the user instance\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        # Extract the URL from the password help text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        # Ensure regex found a match\n+        self.assertIsNotNone(matches, \"Password help text should contain a reset link\")\n+\n+        # URL to UserChangeForm in admin via to_field (uuid instead of pk)\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        \n+        # Join the extracted URL relative path with the user admin change URL\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        # URL to PasswordChangeForm in admin for the user using pk\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+\n+        # Check that the constructed URL matches the expected password change URL\n+        self.assertEqual(joined_url, pw_change_url)\n+\n     def test_custom_form(self):\n         class CustomUserChangeForm(UserChangeForm):\n             class Meta(UserChangeForm.Meta):\n",
  "django__django-16145": "",
  "django__django-16255": "",
  "django__django-16315": "diff --git a/tests/bulk_create/models.py b/tests/bulk_create/models.py\nindex c5f5c07..7e99864 100644\n--- a/tests/bulk_create/models.py\n+++ b/tests/bulk_create/models.py\n@@ -59,6 +59,10 @@ class Pizzeria(Restaurant):\n     pass\n \n \n+class FieldsWithDbColumns(models.Model):\n+    rank = models.IntegerField(unique=True, db_column=\"rAnK\")\n+    name = models.CharField(max_length=15, null=True, db_column=\"oTheRNaMe\")\n+\n class State(models.Model):\n     two_letter_code = models.CharField(max_length=2, primary_key=True)\n \n",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..f251f88 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,4 +1,6 @@\n+\n import datetime\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n import re\n import urllib.parse\n from unittest import mock\n",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..b7248be 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.test import TestCase\n@@ -167,6 +168,29 @@ class TimesinceTests(TestCase):\n \n         future = datetime.datetime(2080, 1, 1, tzinfo=naive())\n         self.assertEqual(timesince(future), \"0\\xa0minutes\")\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_timesince_with_aware_datetimes_long_interval(self):\n+        \"\"\"Test timesince with aware datetimes and USE_TZ=True for long intervals\"\"\"\n+        now = timezone.now()\n+        past = now - datetime.timedelta(days=31)\n+        past_aware = timezone.make_aware(past, timezone.get_default_timezone())\n+        now_aware = timezone.make_aware(now, timezone.get_default_timezone())\n+        \n+        # Check if timesince handles aware datetimes correctly with a long interval\n+        self.assertEqual(timesince(past_aware, now_aware), \"1\\xa0month\")\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_timesince_with_naive_and_aware_datetimes(self):\n+        \"\"\"Test timesince with naive past and aware current datetime raises TypeError\"\"\"\n+        now = timezone.now()\n+        past = now - datetime.timedelta(days=31)\n+        now_aware = timezone.make_aware(now, timezone.get_default_timezone())\n+\n+        with self.assertRaises(TypeError):\n+            timesince(past, now_aware)\n         past = datetime.datetime(1980, 1, 1, tzinfo=naive())\n         self.assertEqual(timeuntil(past), \"0\\xa0minutes\")\n \n",
  "django__django-16454": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 8d0729b..68e53ca 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -475,6 +475,28 @@ class UtilsTests(SimpleTestCase):\n         with self.assertRaisesMessage(CommandError, msg):\n             popen_wrapper([\"a_42_command_that_doesnt_exist_42\"])\n \n+    def test_subparser_missing_argument(self):\n+        self.write_settings(\"settings.py\", apps=[\"user_commands\"])\n+        out, err = self.run_manage([\"subparser\", \"foo\"])\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertGreater(len(err_lines), 0)\n+        self.assertIn(\n+            \"manage.py subparser foo: error: the following arguments are required: bar\",\n+            err_lines[-1],\n+        )\n+\n+    def test_subparser_invalid_argument_type(self):\n+        self.write_settings(\"settings.py\", apps=[\"user_commands\"])\n+        out, err = self.run_manage([\"subparser\", \"foo\", \"not_a_number\"])\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertGreater(len(err_lines), 0)\n+        self.assertIn(\n+            \"manage.py subparser foo: error: argument bar: invalid int value: 'not_a_number'\",\n+            err_lines[-1],\n+        )\n+\n     def test_get_random_secret_key(self):\n         key = get_random_secret_key()\n         self.assertEqual(len(key), 50)\n",
  "django__django-16485": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 1623d39..7903dc6 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -112,7 +112,20 @@ class FunctionTests(SimpleTestCase):\n             floatformat(0.000000000000000000015, 20), \"0.00000000000000000002\"\n         )\n \n-    def test_negative_zero_values(self):\n+    def test_floatformat_issue_zero_string(self):\n+        # Test the issue case where '0.00' as a string should result in '0'\n+        self.assertEqual(floatformat(\"0.00\", 0), \"0\")\n+\n+    def test_floatformat_issue_zero_decimal(self):\n+        # Test the issue case where Decimal('0.00') should result in '0'\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), 0), \"0\")\n+\n+    def test_floatformat_additional_cases(self):\n+        # Test similar edge cases to ensure stability\n+        self.assertEqual(floatformat(\"0.01\", 1), \"0.0\")\n+        self.assertEqual(floatformat(\"1.99\", 0), \"2\")\n+        self.assertEqual(floatformat(\"-0.01\", 1), \"-0.0\")\n+        self.assertEqual(floatformat(Decimal(\"-0.00\"), 1), \"0.0\")\n         tests = [\n             (-0.01, -1, \"0.0\"),\n             (-0.001, 2, \"0.00\"),\n",
  "django__django-16493": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex 20567e7..a416dbf 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -1018,6 +1018,15 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         storage = kwargs[\"storage\"]\n         self.assertIs(storage, callable_storage)\n \n+    def test_deconstruction_storage_callable_default(self):\n+        \"\"\"\n+        A callable that returns default_storage is not omitted when deconstructing.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"storage_callable_default\").deconstruct()\n+        storage = kwargs[\"storage\"]\n+        self.assertIs(storage, callable_default_storage)\n+\n \n # Tests for a race condition on file saving (#4948).\n # This is written in such a way that it'll always pass on platforms\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..370c2b9 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,8 +1,11 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n from django.contrib.admin.templatetags.admin_list import date_hierarchy\n from django.contrib.admin.templatetags.admin_modify import submit_row\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n@@ -33,6 +36,42 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n         self.assertIs(template_context[\"extra\"], True)\n         self.assertIs(template_context[\"show_save\"], True)\n \n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        \"\"\"\n+        Test that 'show_save_as_new' is only True if the user has both \n+        'add' and 'change' permissions, along with other conditions.\n+        \"\"\"\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n+\n     def test_override_show_save_and_add_another(self):\n         request = self.request_factory.get(\n             reverse(\"admin:auth_user_change\", args=[self.superuser.pk]),\n",
  "django__django-16560": "diff --git a/tests/constraints/tests.py b/tests/constraints/tests.py\nindex 13854a9..b35e549 100644\n--- a/tests/constraints/tests.py\n+++ b/tests/constraints/tests.py\n@@ -107,8 +107,16 @@ class BaseConstraintTests(SimpleTestCase):\n         c = BaseConstraint(\"name\", \"custom %(name)s message\")\n         self.assertEqual(c.get_violation_error_message(), \"custom name message\")\n \n+from django.core.exceptions import ValidationError\n+from django.db import models\n \n-class CheckConstraintTests(TestCase):\n+class BaseConstraintTests(TestCase):\n+    def test_custom_violation_error_code(self):\n+        constraint = BaseConstraint(\n+            name=\"base_name\",\n+            violation_error_code=\"custom_code\"\n+        )\n+        self.assertEqual(constraint.violation_error_code, \"custom_code\")\n     def test_eq(self):\n         check1 = models.Q(price__gt=models.F(\"discounted_price\"))\n         check2 = models.Q(price__lt=models.F(\"discounted_price\"))\n@@ -217,7 +225,18 @@ class CheckConstraintTests(TestCase):\n         constraints = get_constraints(ChildModel._meta.db_table)\n         self.assertIn(\"constraints_childmodel_adult\", constraints)\n \n-    def test_validate(self):\n+    def test_custom_violation_error_code(self):\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price\",\n+            violation_error_code=\"custom_code\"\n+        )\n+        # This should raise a ValidationError with the custom code.\n+        invalid_product = Product(price=10, discounted_price=42)\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(Product, invalid_product)\n+        self.assertEqual(cm.exception.code, \"custom_code\")\n         check = models.Q(price__gt=models.F(\"discounted_price\"))\n         constraint = models.CheckConstraint(check=check, name=\"price\")\n         # Invalid product.\n@@ -654,7 +673,18 @@ class UniqueConstraintTests(TestCase):\n         with self.assertRaisesMessage(ValidationError, msg):\n             NoCodeErrorConstraintModel(name=\"test\").validate_constraints()\n \n-    def test_validate(self):\n+    def test_custom_violation_error_code(self):\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price\",\n+            violation_error_code=\"custom_code\"\n+        )\n+        # This should raise a ValidationError with the custom code.\n+        invalid_product = Product(price=10, discounted_price=42)\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(Product, invalid_product)\n+        self.assertEqual(cm.exception.code, \"custom_code\")\n         constraint = UniqueConstraintProduct._meta.constraints[0]\n         msg = \"Unique constraint product with this Name and Color already exists.\"\n         non_unique_product = UniqueConstraintProduct(\n@@ -693,7 +723,13 @@ class UniqueConstraintTests(TestCase):\n             )\n \n     @skipUnlessDBFeature(\"supports_partial_indexes\")\n-    def test_validate_condition(self):\n+    def test_custom_violation_error_code(self):\n+        constraint = UniqueConstraintProduct._meta.constraints[0]\n+        constraint.violation_error_code = \"custom_unique_code\"\n+        non_unique_product = UniqueConstraintProduct(name=self.p1.name, color=self.p1.color)\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(UniqueConstraintProduct, non_unique_product)\n+        self.assertEqual(cm.exception.code, \"custom_unique_code\")\n         p1 = UniqueConstraintConditionProduct.objects.create(name=\"p1\")\n         constraint = UniqueConstraintConditionProduct._meta.constraints[0]\n         msg = \"Constraint \u201cname_without_color_uniq\u201d is violated.\"\n",
  "django__django-16569": "",
  "django__django-16595": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3979e76..5901b6c 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -43,6 +43,32 @@ class OptimizerTests(SimpleTestCase):\n     def assertDoesNotOptimize(self, operations, **kwargs):\n         self.assertOptimizesTo(operations, operations, **kwargs)\n \n+    def test_alter_alter_field(self):\n+        # Test that multiple AlterField operations on the same field will collapse into the last one.\n+        operations = [\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=256, null=True)),\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True)),\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\")),\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\", default=None)),\n+        ]\n+        expected = [\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\", default=None)),\n+        ]\n+        self.assertOptimizesTo(operations, expected)\n+\n+    def test_alter_and_add_field(self):\n+        # Test that if an AddField operation is present, AlterField operations should collapse.\n+        operations = [\n+            migrations.AddField(\"book\", \"title\", models.CharField(max_length=256, null=True)),\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True)),\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\")),\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\", default=None)),\n+        ]\n+        expected = [\n+            migrations.AddField(\"book\", \"title\", models.CharField(max_length=256, null=True)),\n+        ]\n+        self.assertOptimizesTo(operations, expected)\n+\n     def test_none_app_label(self):\n         optimizer = MigrationOptimizer()\n         with self.assertRaisesMessage(TypeError, \"app_label must be a str\"):\n",
  "django__django-16612": "",
  "django__django-16642": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 499356e..7cbc710 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -256,6 +256,16 @@ class FileResponseTests(SimpleTestCase):\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n         )\n+        test_tuples_extended = (\n+            (\".tar.br\", \"application/x-brotli\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n+        )\n+        for extension, mimetype in test_tuples_extended:\n+            with self.subTest(ext=extension):\n+                with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n+                    response = FileResponse(tmp)\n+                self.assertEqual(response.headers[\"Content-Type\"], mimetype)\n+                self.assertFalse(response.has_header(\"Content-Encoding\"))\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n                 with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n",
  "django__django-16661": "diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py\nindex 8cb88da..0eee5d9 100644\n--- a/tests/modeladmin/tests.py\n+++ b/tests/modeladmin/tests.py\n@@ -154,6 +154,58 @@ class ModelAdminTests(TestCase):\n             ma.lookup_allowed(\"employee__department__code\", \"test_value\"), True\n         )\n \n+    @isolate_apps(\"modeladmin\")\n+    def test_lookup_allowed_foreign_primary(self):\n+        class Country(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class Place(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+\n+        class Restaurant(models.Model):\n+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)\n+\n+        class Waiter(models.Model):\n+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n+\n+        class WaiterAdmin(ModelAdmin):\n+            list_filter = [\n+                \"restaurant__place__country\",\n+                \"restaurant__place__country__name\",\n+            ]\n+\n+        ma = WaiterAdmin(Waiter, self.site)\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country\", \"1\"), True)\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__id__exact\", \"1\"), True\n+        )\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__name\", \"test_value\"), True\n+        )\n+\n+    @isolate_apps(\"modeladmin\")\n+    def test_lookup_allowed_with_multiple_filters(self):\n+        class Book(models.Model):\n+            title = models.CharField(max_length=256)\n+\n+        class Library(models.Model):\n+            book = models.OneToOneField(Book, models.CASCADE, primary_key=True)\n+\n+        class Librarian(models.Model):\n+            library = models.ForeignKey(Library, models.CASCADE)\n+\n+        class LibrarianAdmin(ModelAdmin):\n+            list_filter = [\n+                \"library__book\",\n+                \"library__book__title\",\n+            ]\n+\n+        ma = LibrarianAdmin(Librarian, self.site)\n+        self.assertIs(ma.lookup_allowed(\"library__book\", \"1\"), True)\n+        self.assertIs(\n+            ma.lookup_allowed(\"library__book__title__exact\", \"Great Expectations\"), True\n+        )\n+\n     def test_field_arguments(self):\n         # If fields is specified, fieldsets_add and fieldsets_change should\n         # just stick the fields into a formsets structure and return it.\n",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..3261df7 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -896,7 +896,7 @@ class WriterTests(SimpleTestCase):\n \n     def test_sorted_imports(self):\n         \"\"\"\n-        #24155 - Tests ordering of imports.\n+        #24155 - Tests ordering of imports with additional imports.\n         \"\"\"\n         migration = type(\n             \"Migration\",\n@@ -912,7 +912,59 @@ class WriterTests(SimpleTestCase):\n                             ),\n                         ),\n                     ),\n-                ]\n+                ],\n+                \"dependencies\": [(\"app1\", \"0001_initial\")],\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        self.assertIn(\n+            \"import datetime\\nfrom django.db import migrations, models\\n\",\n+            output,\n+        )\n+\n+    def test_sorted_imports_multiple(self):\n+        \"\"\"\n+        Test multiple import sorting.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield\",\n+                        models.DateTimeField(\n+                            default=datetime.datetime.now\n+                        ),\n+                    ),\n+                ],\n+                \"dependencies\": [(\"app1\", \"0001_initial\")],\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        self.assertIn(\n+            \"import datetime\\nfrom django.db import migrations, models\\n\",\n+            output,\n+        )\n+\n+    def test_sorted_imports_with_time(self):\n+        \"\"\"\n+        Test import sorting with time module.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield2\",\n+                        models.FloatField(default=datetime.datetime.now().timestamp),\n+                    ),\n+                ],\n             },\n         )\n         writer = MigrationWriter(migration)\n",
  "django__django-16801": "diff --git a/tests/model_fields/test_imagefield.py b/tests/model_fields/test_imagefield.py\nindex 9bf7f7d..9c1811a 100644\n--- a/tests/model_fields/test_imagefield.py\n+++ b/tests/model_fields/test_imagefield.py\n@@ -319,6 +319,38 @@ class ImageFieldTwoDimensionsTests(ImageFieldTestMixin, TestCase):\n         # Dimensions were recalculated, and hence file should have opened.\n         self.assertIs(p.mugshot.was_opened, True)\n \n+    def test_post_init_not_connected(self):\n+        \"\"\"\n+        Test that the post_init signal is not connected when width_field and height_field are not used.\n+        \"\"\"\n+        person_model_id = id(self.PersonModel)\n+        self.assertNotIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id), *_ in signals.post_init.receivers],\n+        )\n+\n+@skipIf(Image is None, \"Pillow is required to test ImageField\")\n+class ImageFieldPostInitSignalTests(TestCase):\n+    \"\"\"\n+    Additional tests to ensure ImageField does not connect post_init when width/height fields are absent.\n+    \"\"\"\n+\n+    def setUp(self):\n+        class PersonWithoutDimensions(models.Model):\n+            mugshot = models.ImageField(upload_to='images/')\n+        \n+        self.PersonWithoutDimensions = PersonWithoutDimensions\n+\n+    def test_imagefield_no_post_init_signal(self):\n+        \"\"\"\n+        Verify that ImageField does not connect to post_init signal when no dimensions are used.\n+        \"\"\"\n+        person_model_id = id(self.PersonWithoutDimensions)\n+        self.assertNotIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id), *_ in signals.post_init.receivers],\n+        )\n+\n \n @skipIf(Image is None, \"Pillow is required to test ImageField\")\n class ImageFieldNoDimensionsTests(ImageFieldTwoDimensionsTests):\n",
  "django__django-16819": "",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..4f968d6 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -791,9 +791,37 @@ class SystemChecksTestCase(SimpleTestCase):\n         errors = SongAdmin(Song, AdminSite()).check()\n         self.assertEqual(errors, [])\n \n-    def test_nonexistent_field(self):\n+    def test_nonexistent_field_in_readonly_fields(self):\n         class SongAdmin(admin.ModelAdmin):\n             readonly_fields = (\"title\", \"nonexistent\")\n+        \n+        errors = SongAdmin(Song, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[1]' refers to 'nonexistent', \"\n+                \"which is not a callable, an attribute of 'SongAdmin', or an attribute \"\n+                \"of 'admin_checks.Song'.\",\n+                obj=SongAdmin,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n+\n+    def test_nonexistent_field_on_inline_readonly_fields(self):\n+        class CityInline(admin.TabularInline):\n+            model = City\n+            readonly_fields = [\"i_dont_exist\"]\n+\n+        errors = CityInline(State, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' refers to 'i_dont_exist', \"\n+                \"which is not a callable, an attribute of 'CityInline', or an attribute \"\n+                \"of 'admin_checks.City'.\",\n+                obj=CityInline,\n+                id=\"admin.E035\",\n+            )\n+        ]\n \n         errors = SongAdmin(Song, AdminSite()).check()\n         expected = [\n",
  "django__django-16901": "",
  "django__django-17029": "",
  "django__django-17084": "",
  "django__django-17087": "",
  "django__django-7530": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex a74680b..cea9534 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -598,7 +598,22 @@ class MakeMigrationsTests(MigrationTestBase):\n                 init_file = os.path.join(migration_dir, '__init__.py')\n                 self.assertTrue(os.path.exists(init_file))\n \n-    def test_makemigrations_consistency_checks_respect_routers(self):\n+    def test_makemigrations_router_allow_migrate_called_correctly(self):\n+        \"\"\"\n+        Test that makemigrations calls allow_migrate() with correct app_label and model_name pairs.\n+        \"\"\"\n+        apps.register_model('migrations', UnicodeModel)\n+        apps.register_model('migrations2', UnicodeModel)  # Assuming a model with the same name in a different app\n+        \n+        with self.settings(DATABASE_ROUTERS=['migrations.routers.TestRouter']):\n+            with mock.patch.object(TestRouter, 'allow_migrate', return_value=True) as allow_migrate:\n+                call_command('makemigrations', stdout=six.StringIO())\n+                \n+            expected_calls = [\n+                mock.call('default', 'migrations', model_name='UnicodeModel'),\n+                mock.call('default', 'migrations2', model_name='UnicodeModel'),\n+            ]\n+            allow_migrate.assert_has_calls(expected_calls, any_order=True)\n         \"\"\"\n         The history consistency checks in makemigrations respect\n         settings.DATABASE_ROUTERS.\n",
  "django__django-9296": "diff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\nindex b9b5fbc..61deb12 100644\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -298,7 +298,37 @@ class PaginationTests(SimpleTestCase):\n             paginator.get_page(1)\n \n \n-class ModelPaginationTests(TestCase):\n+    def test_empty_paginator_iteration(self):\n+        paginator = Paginator([], 2)\n+        page_iterator = iter(paginator)\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_single_page_paginator_iteration(self):\n+        paginator = Paginator([1], 2)\n+        page_iterator = iter(paginator)\n+        self.assertEqual([1], list(next(page_iterator)))\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_multiple_full_pages_iteration(self):\n+        paginator = Paginator([1, 2, 3, 4, 5, 6], 2)\n+        page_iterator = iter(paginator)\n+        self.assertEqual([1, 2], list(next(page_iterator)))\n+        self.assertEqual([3, 4], list(next(page_iterator)))\n+        self.assertEqual([5, 6], list(next(page_iterator)))\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_multiple_partial_pages_iteration(self):\n+        paginator = Paginator([1, 2, 3, 4, 5, 6, 7], 2)\n+        page_iterator = iter(paginator)\n+        self.assertEqual([1, 2], list(next(page_iterator)))\n+        self.assertEqual([3, 4], list(next(page_iterator)))\n+        self.assertEqual([5, 6], list(next(page_iterator)))\n+        self.assertEqual([7], list(next(page_iterator)))\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n     \"\"\"\n     Test pagination with Django model instances\n     \"\"\"\n",
  "matplotlib__matplotlib-13989": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5483eef..f8d6087 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6360,7 +6360,29 @@ def test_hist_auto_bins():\n def test_hist_nan_data():\n     fig, (ax1, ax2) = plt.subplots(2)\n \n-    data = [1, 2, 3]\n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n+def test_hist_range_and_density():\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_and_density_custom_bins():\n+    # Additional test: Check with a specific bin count\n+    data = np.random.rand(100)\n+    _, bins, _ = plt.hist(data, bins=5, range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+    assert len(bins) == 6  # 5 bins imply 6 bin edges\n+\n+def test_hist_range_and_density_different_range():\n+    # Test with a different range\n+    data = np.random.rand(100)\n+    _, bins, _ = plt.hist(data, bins=5, range=(0.2, 0.8), density=True)\n+    assert bins[0] == 0.2\n+    assert bins[-1] == 0.8\n+    assert len(bins) == 6  # 5 bins imply 6 bin edges\n     nan_data = data + [np.nan]\n \n     bins, edges, _ = ax1.hist(data)\n@@ -6368,4 +6390,4 @@ def test_hist_nan_data():\n         nanbins, nanedges, _ = ax2.hist(nan_data)\n \n     assert np.allclose(bins, nanbins)\n-    assert np.allclose(edges, nanedges)\n+    assert np.allclose(edges, nanedges)\n",
  "matplotlib__matplotlib-14623": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c9ad946..2ee23d8 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -938,8 +938,20 @@ def test_inverted_limits():\n     assert ax.get_ylim() == (5, -3)\n     plt.close()\n \n+def test_invert_axis_with_log_scale():\n+    # Test inverting y-axis with log scale\n+    fig, ax = plt.subplots()\n+    ax.set_yscale('log')\n+    ax.set_ylim(10, 1)  # Attempt to invert the axis\n+    assert ax.get_ylim() == (10, 1)\n+    plt.close()\n \n-@image_comparison(baseline_images=['nonfinite_limits'])\n+    # Test inverting x-axis with log scale\n+    fig, ax = plt.subplots()\n+    ax.set_xscale('log')\n+    ax.set_xlim(10, 1)  # Attempt to invert the axis\n+    assert ax.get_xlim() == (10, 1)\n+    plt.close()\n def test_nonfinite_limits():\n     x = np.arange(0., np.e, 0.01)\n     # silence divide by zero warning from log(0)\n",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..39220b3 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6960,8 +6960,31 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[3].hist(np.arange(10), color=color.reshape((1, -1)))\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n+from matplotlib.testing.decorators import check_figures_equal\n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear(fig_test, fig_ref):\n+    x = np.arange(0.0, 2 * np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    # Reference figure\n+    axs_ref = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_ref.flat:\n+        ax.plot(x, y)\n+\n+    # Test figure\n+    axs_test = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_test.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n \n-def test_shared_axes_retick():\n+    # Ensure that axis sharing is respected after clearing\n+    for ax in axs_test[0, :]:\n+        assert not ax.get_xticklabels(minor=False, which='both', visible=True)\n+    for ax in axs_test[:, 1]:\n+        assert not ax.get_yticklabels(minor=False, which='both', visible=True)\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n \n     for ax in axs.flat:\n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "",
  "matplotlib__matplotlib-22865": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex 2c28713..df791ea 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -918,8 +918,36 @@ def test_proportional_colorbars():\n                                      extend=extends[i])\n             fig.colorbar(CS3, spacing=spacings[j], ax=axs[i, j])\n \n+import matplotlib.colors as mcolors\n+import matplotlib.pyplot as plt\n+import numpy as np\n+from matplotlib.colorbar import Colorbar\n+from matplotlib.colors import BoundaryNorm\n \n-def test_negative_boundarynorm():\n+import pytest\n+\n+@pytest.mark.parametrize(\"extend, coloroffset, res\", [\n+    ('both', 1, [np.array([[0., 0.], [0., 1.]]),\n+                 np.array([[1., 0.], [1., 1.]]),\n+                 np.array([[2., 0.], [2., 1.]])]),\n+    ('min', 0, [np.array([[0., 0.], [0., 1.]]),\n+                np.array([[1., 0.], [1., 1.]])]),\n+    ('max', 0, [np.array([[1., 0.], [1., 1.]]),\n+                np.array([[2., 0.], [2., 1.]])]),\n+    ('neither', -1, [np.array([[1., 0.], [1., 1.]])])\n+])\n+def test_colorbar_extend_drawedges(extend, coloroffset, res):\n+    cmap = plt.get_cmap(\"viridis\")\n+    bounds = np.arange(3)\n+    nb_colors = len(bounds) + coloroffset\n+    colors = cmap(np.linspace(100, 255, nb_colors).astype(int))\n+    cmap, norm = mcolors.from_levels_and_colors(bounds, colors, extend=extend)\n+\n+    plt.figure(figsize=(5, 1))\n+    ax = plt.subplot(111)\n+    cbar = Colorbar(ax, cmap=cmap, norm=norm, orientation='horizontal',\n+                    drawedges=True)\n+    assert np.all(np.equal(cbar.dividers.get_segments(), res))\n     fig, ax = plt.subplots(figsize=(1, 3))\n     cmap = plt.get_cmap(\"viridis\")\n \n",
  "matplotlib__matplotlib-23299": "",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..9c61af5 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -15,13 +15,27 @@ from matplotlib.patches import Circle\n \n import matplotlib.pyplot as plt\n import numpy as np\n+from matplotlib.testing.decorators import check_figures_equal\n \n \n mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n-\n-def test_aspect_equal_error():\n+@check_figures_equal(extensions=[\"png\"])\n+def test_set_visible_3d(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot(projection='3d')\n+    ax_ref = fig_ref.add_subplot(projection='3d')\n+    \n+    # Add some data to both axes\n+    ax_test.scatter([1, 2, 3], [1, 2, 3], [1, 2, 3])\n+    ax_ref.scatter([1, 2, 3], [1, 2, 3], [1, 2, 3])\n+    \n+    # Set the test axis to invisible\n+    ax_test.set_visible(False)\n+\n+    # The reference figure should have the axis visible, test figure should not\n+    assert not ax_test.get_visible()\n+    assert ax_ref.get_visible()\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n     with pytest.raises(NotImplementedError):\n",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..095ae18 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -148,6 +148,44 @@ def test_rotate_rect_draw(fig_test, fig_ref):\n     rect_test.set_angle(angle)\n     assert rect_test.get_angle() == angle\n \n+from matplotlib import pyplot as plt\n+from matplotlib.patches import Rectangle\n+import numpy as np\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=['png'])\n+def test_dash_offset_patch_draw(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n+\n+    loc = (0.1, 0.1)\n+    width, height = (0.8, 0.8)\n+    rect_ref = Rectangle(loc, width, height, linewidth=3, edgecolor='b',\n+                         linestyle=(0, [6, 6]))\n+    # fill the line gaps using a linestyle (0, [0, 6, 6, 0]), which is\n+    # equivalent to (6, [6, 6]) but has 0 dash offset\n+    rect_ref2 = Rectangle(loc, width, height, linewidth=3, edgecolor='r',\n+                          linestyle=(0, [0, 6, 6, 0]))\n+    assert rect_ref.get_linestyle() == (0, [6, 6])\n+    assert rect_ref2.get_linestyle() == (0, [0, 6, 6, 0])\n+\n+    ax_ref.add_patch(rect_ref)\n+    ax_ref.add_patch(rect_ref2)\n+\n+    # Check that the dash offset of the rect is the same if we pass it in the\n+    # init method and if we create two rects with appropriate onoff sequence\n+    # of linestyle.\n+\n+    rect_test = Rectangle(loc, width, height, linewidth=3, edgecolor='b',\n+                          linestyle=(0, [6, 6]))\n+    rect_test2 = Rectangle(loc, width, height, linewidth=3, edgecolor='r',\n+                           linestyle=(6, [6, 6]))\n+    assert rect_test.get_linestyle() == (0, [6, 6])\n+    assert rect_test2.get_linestyle() == (6, [6, 6])\n+\n+    ax_test.add_patch(rect_test)\n+    ax_test.add_patch(rect_test2)\n+\n \n def test_negative_rect():\n     # These two rectangles have the same vertices, but starting from a\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..4e36c9f 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2866,9 +2866,27 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n-\n-@image_comparison(['stackplot_test_baseline'], remove_text=True)\n-def test_stackplot_baseline():\n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.patches import Rectangle\n+\n+def test_stackplot_color_cycle():\n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    fig, ax = plt.subplots()\n+    # Test line using color cycle\n+    ax.plot([1, 3], [1, 3], color='C0')\n+    # Test rectangle using color cycle\n+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))\n+    # Test stackplot with color cycle\n+    ax.stackplot([1, 2, 3], my_data, colors=['C2', 'C3', 'C4'])\n+    \n+    # Check that colors are as expected (if matplotlib had a way to directly check the color cycle)\n+    lines = ax.get_lines()\n+    assert lines[0].get_color() == 'C0'\n+    rectangles = [patch for patch in ax.patches if isinstance(patch, Rectangle)]\n+    assert rectangles[0].get_facecolor()[:3] == plt.cm.get_cmap('tab10')(1)[:3]\n+\n+    # Ensure no exceptions are raised and the plot renders correctly\n     np.random.seed(0)\n \n     def layers(n, m):\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 45f9c04..5288e63 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -16,7 +16,30 @@ from matplotlib.offsetbox import (\n     OffsetImage, TextArea, _get_packed_offsets)\n \n \n-@image_comparison(['offsetbox_clipping'], remove_text=True)\n+@pytest.mark.parametrize(\"align, expected_y_height\", [\n+    (\"bottom\", 0),\n+    (\"top\", 10),  # y2 - y1 = 30 - 20 = 10\n+    (\"center\", 5)  # (y2 - y1) / 2 = 5\n+])\n+def test_hpacker_alignment(align, expected_y_height):\n+    # Create a figure for rendering\n+    fig = plt.figure(dpi=72)\n+    x1, y1 = 10, 20\n+    x2, y2 = 10, 30\n+    r1 = DrawingArea(x1, y1)\n+    r2 = DrawingArea(x2, y2)\n+\n+    # Create an HPacker with reversed alignment test\n+    hpacker = HPacker(children=[r1, r2], pad=0, sep=0, align=align)\n+    renderer = fig.canvas.get_renderer()\n+    \n+    # Get the extents and offsets\n+    *extents, offset_pairs = hpacker.get_extent_offsets(renderer)\n+\n+    # Check the internal placement matches expected\n+    assert_allclose([(0, expected_y_height), (x1, 0)], offset_pairs)\n+\n+    plt.close(fig)\n def test_offsetbox_clipping():\n     # - create a plot\n     # - put an AnchoredOffsetbox with a child DrawingArea\n",
  "matplotlib__matplotlib-24627": "",
  "matplotlib__matplotlib-24637": "",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..efc5ee9 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -20,6 +20,19 @@ import matplotlib.scale as mscale\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n \n \n+import pytest\n+import numpy as np\n+import matplotlib as mpl\n+from numpy.testing import assert_array_equal\n+\n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.float16, float])\n+def test_index_dtype_no_deprecation_warnings(dtype):\n+    cm = mpl.colormaps[\"viridis\"]\n+    with pytest.warns(None) as record:\n+        result = cm(dtype(0))\n+        assert len(record) == 0, \"Deprecation warnings found\"\n+        assert_array_equal(result, cm(0))\n+\n @pytest.mark.parametrize('N, result', [\n     (5, [1, .6, .2, .1, 0]),\n     (2, [1, 0]),\n",
  "matplotlib__matplotlib-25122": "diff --git a/lib/matplotlib/tests/test_mlab.py b/lib/matplotlib/tests/test_mlab.py\nindex 51d0c35..7ab811c 100644\n--- a/lib/matplotlib/tests/test_mlab.py\n+++ b/lib/matplotlib/tests/test_mlab.py\n@@ -580,8 +580,28 @@ class TestSpectral:\n         # these should not be almost equal\n         with pytest.raises(AssertionError):\n             assert_allclose(spec_b, spec_c, atol=1e-08)\n+    from scipy import signal\n+    import numpy as np\n+    import pytest\n+    from numpy.testing import assert_allclose\n \n-    def test_psd_window_hanning(self):\n+    def test_psd_window_flattop(self):\n+        # Test to verify the issue with window correction using flattop window\n+        if self.NFFT_density is None:\n+            return\n+        ydata = np.arange(self.NFFT_density)\n+        window_vals = signal.windows.flattop(self.NFFT_density)\n+        spec, fsp = mlab.psd(x=ydata,\n+                             NFFT=self.NFFT_density,\n+                             Fs=self.Fs,\n+                             noverlap=0,\n+                             sides=self.sides,\n+                             window=window_vals,\n+                             scale_by_freq=False)\n+        # Expected correction should align with scipy's handling (PSD should match)\n+        spec_corrected = spec * (np.abs(window_vals).sum()**2) / (window_vals**2).sum()\n+        # Check that the correction aligns with expected behavior\n+        assert_allclose(spec_corrected.sum(), spec.sum(), atol=1e-08)\n         if self.NFFT_density is None:\n             return\n         ydata = np.arange(self.NFFT_density)\n",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..6205606 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,6 +7801,8 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+import matplotlib.pyplot as plt\n+\n def test_ytickcolor_is_not_yticklabelcolor():\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..31e3e91 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -89,8 +90,22 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import pickletools\n \n @mpl.style.context(\"default\")\n+def test_pickle_figure_with_draggable_legend():\n+    fig, ax = plt.subplots()\n+    ax.plot([0, 1, 2], [0, 1, 4], label='Test Line')\n+    legend = ax.legend(draggable=True)\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+    \n+    # Verify \"FigureCanvasAgg\" is not in the pickle stream\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+    \n+    # Attempt to load the pickled figure\n+    loaded_fig = pickle.loads(pkl)\n+    loaded_fig.canvas.draw()\n+    plt.close(loaded_fig)\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..3c71822 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -35,6 +35,28 @@ def test_simple():\n \n     plt.figure()\n     plt.bar(x=np.arange(10), height=np.arange(10))\n+\n+    # Test for issue with align_labels and pickling\n+    def test_pickle_with_aligned_labels():\n+        fig = plt.figure()\n+        ax1 = fig.add_subplot(211)\n+        ax2 = fig.add_subplot(212)\n+        time = [0, 1, 2, 3, 4]\n+        speed = [40000, 4300, 4500, 4700, 4800]\n+        acc = [10, 11, 12, 13, 14]\n+        ax1.plot(time, speed)\n+        ax1.set_ylabel('speed')\n+        ax2.plot(time, acc)\n+        ax2.set_ylabel('acc')\n+\n+        fig.align_labels()\n+\n+        pkl = BytesIO()\n+        pickle.dump(fig, pkl, pickle.HIGHEST_PROTOCOL)\n+        loaded = pickle.loads(pkl.getbuffer())\n+        loaded.canvas.draw()\n+\n+        plt.close(loaded)\n     pickle.dump(plt.gca(), BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n     fig = plt.figure()\n@@ -44,6 +66,11 @@ def test_simple():\n     pickle.dump(fig, BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+import pickle\n+from io import BytesIO\n+\n def _generate_complete_test_figure(fig_ref):\n     fig_ref.set_size_inches((10, 6))\n     plt.figure(fig_ref)\n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..5b5b254 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -991,8 +991,45 @@ def test_hexbin_linear():\n     ax.hexbin(x, y, gridsize=(10, 5), marginals=True,\n               reduce_C_function=np.sum)\n \n+from matplotlib.testing.decorators import check_figures_equal\n \n-def test_hexbin_log_clim():\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_behavior_upon_C_parameter_varied_mincnt(fig_test, fig_ref):\n+    # see: gh:12926\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    for mincnt in range(3):\n+        ax_test = fig_test.add_subplot(1, 3, mincnt+1)\n+        ax_ref = fig_ref.add_subplot(1, 3, mincnt+1)\n+\n+        # without C parameter\n+        ax_ref.hexbin(\n+            X, Y,\n+            extent=extent,\n+            gridsize=gridsize,\n+            mincnt=mincnt,\n+        )\n+        ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+        # with C parameter\n+        ax_test.hexbin(\n+            X, Y,\n+            C=[1] * len(X),\n+            reduce_C_function=lambda v: sum(v),\n+            mincnt=mincnt,\n+            extent=extent,\n+            gridsize=gridsize,\n+        )\n+        ax_test.set_facecolor(\"green\")\n     x, y = np.arange(200).reshape((2, 100))\n     fig, ax = plt.subplots()\n     h = ax.hexbin(x, y, bins='log', vmin=2, vmax=100)\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex 700190c..13f4364 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -89,6 +89,44 @@ def test_contour_no_valid_levels():\n     ax.contour(np.ones((9, 9)))\n \n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths(fig_test, fig_ref):\n+    # Create contour sets\n+    cs_test = fig_test.subplots().contour([[0, 1], [1, 2]])\n+    cs_ref = fig_ref.subplots().contour([[1, 0], [2, 1]])\n+\n+    # Set paths using the new method\n+    cs_test.set_paths(cs_ref.get_paths())\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths_transformed(fig_test, fig_ref):\n+    # Create a transformation\n+    from matplotlib.transforms import Affine2D\n+    transform = Affine2D().rotate_deg(45)\n+\n+    # Create contour sets\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+    cs_test = ax_test.contour([[0, 1], [1, 2]])\n+    cs_ref = ax_ref.contour([[1, 0], [2, 1]])\n+\n+    # Transform paths and set them using set_paths\n+    transformed_paths = [transform.transform_path(p) for p in cs_ref.get_paths()]\n+    cs_test.set_paths(transformed_paths)\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths_empty(fig_test, fig_ref):\n+    # Test behavior with empty paths\n+    cs_test = fig_test.subplots().contour([[0, 1], [1, 2]])\n+    cs_ref = fig_ref.subplots().contour([[1, 0], [2, 1]])\n+    cs_test.set_paths([])  # Set empty paths\n+\n+# Other existing tests...\n+\n def test_contour_Nlevels():\n     # A scalar levels arg or kwarg should trigger auto level generation.\n     # https://github.com/matplotlib/matplotlib/issues/11913\n",
  "mwaskom__seaborn-3069": "",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..382f838 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -244,7 +244,23 @@ def test_default_static_max_age(app):\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n \n-def test_templates_list(test_apps):\n+import pytest\n+import flask\n+\n+def test_empty_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"\", __name__)\n+\n+def test_whitespace_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"   \", __name__)\n+\n+def test_valid_name_allowed(app, client):\n+    try:\n+        bp = flask.Blueprint(\"valid_name\", __name__)\n+        assert bp.name == \"valid_name\"\n+    except ValueError:\n+        pytest.fail(\"Blueprint with a valid name raised ValueError unexpectedly\")\n     from blueprintapp import app\n \n     templates = sorted(app.jinja_env.list_templates())\n",
  "psf__requests-1142": "",
  "psf__requests-1724": "diff --git a/requests/api.py b/requests/api.py\nindex 66d7f21..1a75e4b 100644\n--- a/requests/api.py\n+++ b/requests/api.py\n@@ -47,6 +47,39 @@ def request(method, url, **kwargs):\n def get(url, **kwargs):\n     \"\"\"Sends a GET request. Returns :class:`Response` object.\n \n+def test_unicode_method_name():\n+    import requests\n+    from httpbin import url as httpbin\n+    files = {'file': open('test_requests.py', 'rb')}\n+    r = requests.request(method=u'POST', url=httpbin('post'), files=files)\n+    assert r.status_code == 200\n+\n+def test_unicode_get_method_name():\n+    import requests\n+    from httpbin import url as httpbin\n+    r = requests.request(method=u'GET', url=httpbin('get'))\n+    assert r.status_code == 200\n+\n+def test_unicode_put_method_name():\n+    import requests\n+    from httpbin import url as httpbin\n+    data = {'key': 'value'}\n+    r = requests.request(method=u'PUT', url=httpbin('put'), data=data)\n+    assert r.status_code == 200\n+\n+def test_unicode_delete_method_name():\n+    import requests\n+    from httpbin import url as httpbin\n+    r = requests.request(method=u'DELETE', url=httpbin('delete'))\n+    assert r.status_code == 200\n+\n+def test_unicode_patch_method_name():\n+    import requests\n+    from httpbin import url as httpbin\n+    data = {'key': 'value'}\n+    r = requests.request(method=u'PATCH', url=httpbin('patch'), data=data)\n+    assert r.status_code == 200\n+\n     :param url: URL for the new :class:`Request` object.\n     :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n     \"\"\"\n",
  "psf__requests-1766": "",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..a2e7199 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,6 +81,8 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://*example.com'),\n+            (InvalidURL, 'http://.example.com'),\n         ))\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..20728c6 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2308,8 +2308,33 @@ class TestAsCompatibleData:\n         orig = Variable(dims=(\"x\"), data=array, attrs={\"foo\": \"bar\"})\n         assert isinstance(orig._data, CustomIndexable)\n \n-\n-def test_raise_no_warning_for_nan_in_binary_ops():\n+import numpy as np\n+import xarray as xr\n+\n+def test_preserve_object_with_values_attribute():\n+    # Test that objects with a 'values' attribute can be stored without coercion\n+    class HasValues:\n+        values = 5\n+\n+    good_indexed, bad_indexed = xr.DataArray([None]), xr.DataArray([None])\n+    \n+    # Assign a set (works correctly)\n+    good_indexed.loc[{'dim_0': 0}] = set()\n+    assert good_indexed.values[0] == set()\n+\n+    # Assign an object with a 'values' attribute\n+    bad_indexed.loc[{'dim_0': 0}] = HasValues()\n+    assert isinstance(bad_indexed.values[0], HasValues)\n+\n+def test_custom_with_values_attr():\n+    # Type with data stored in values attribute\n+    class CustomWithValuesAttr:\n+        def __init__(self, array):\n+            self.values = array\n+\n+    array = CustomWithValuesAttr(np.arange(3))\n+    orig = xr.Variable(dims=(), data=array)\n+    assert isinstance(orig._data.item(), CustomWithValuesAttr)\n     with pytest.warns(None) as record:\n         Variable(\"x\", [1, 2, np.NaN]) > 0\n     assert len(record) == 0\n",
  "pydata__xarray-3095": "",
  "pydata__xarray-3151": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 026dec9..48c01fd 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -574,7 +574,42 @@ class TestCombineAuto:\n         def test_empty_input(self):\n             assert_identical(Dataset(), combine_by_coords([]))\n \n-    def test_infer_order_from_coords(self):\n+    def test_combine_by_coords_non_monotonic(self):\n+        # Test non-monotonic identical coordinates\n+        yCoord = ['a', 'c', 'b']\n+\n+        ds1 = Dataset(\n+            data_vars=dict(\n+                data=(['x', 'y'], np.random.rand(3, 3))\n+            ),\n+            coords=dict(\n+                x=[1, 2, 3],\n+                y=yCoord\n+            )\n+        )\n+\n+        ds2 = Dataset(\n+            data_vars=dict(\n+                data=(['x', 'y'], np.random.rand(4, 3))\n+            ),\n+            coords=dict(\n+                x=[4, 5, 6, 7],\n+                y=yCoord\n+            )\n+        )\n+\n+        expected = Dataset(\n+            data_vars=dict(\n+                data=(['x', 'y'], np.random.rand(7, 3))\n+            ),\n+            coords=dict(\n+                x=[1, 2, 3, 4, 5, 6, 7],\n+                y=yCoord\n+            )\n+        )\n+\n+        actual = combine_by_coords((ds1, ds2))\n+        assert_identical(expected, actual)\n         data = create_test_data()\n         objs = [data.isel(dim2=slice(4, 9)), data.isel(dim2=slice(4))]\n         actual = combine_by_coords(objs)\n",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..b9c55c1 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2309,8 +2309,25 @@ class TestDataArray:\n                     self.dv.values, np.array(q) * 100, axis=axis\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n-\n-    def test_reduce_keep_attrs(self):\n+    def test_quantile_keep_attrs(self):\n+        # Original scenario: Single quantile with keep_attrs=True\n+        da = DataArray([0, 0], dims=\"x\", attrs={'units': 'K'})\n+        result = da.quantile(0.9, dim='x', keep_attrs=True)\n+        assert result.attrs == {'units': 'K'}\n+\n+        # Additional tests: Multiple quantiles with keep_attrs=True\n+        da_multiple = DataArray([0, 1, 2, 3, 4], dims=\"x\", attrs={'description': 'test array'})\n+        result_multiple = da_multiple.quantile([0.25, 0.5, 0.75], dim='x', keep_attrs=True)\n+        assert result_multiple.attrs == {'description': 'test array'}\n+\n+        # Ensure keep_attrs=False clears attributes as expected\n+        result_no_attrs = da.quantile(0.9, dim='x', keep_attrs=False)\n+        assert result_no_attrs.attrs == {}\n+\n+        # Edge case: No attributes to keep\n+        da_no_attrs = DataArray([0, 0], dims=\"x\")\n+        result_no_attrs = da_no_attrs.quantile(0.9, dim='x', keep_attrs=True)\n+        assert result_no_attrs.attrs == {}\n         # Test dropped attrs\n         vm = self.va.mean()\n         assert len(vm.attrs) == 0\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..f9ae197 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import pytest\n \n@@ -159,6 +160,29 @@ class TestMergeMethod:\n         with raises_regex(ValueError, \"should be coordinates or not\"):\n             data.merge(data.reset_coords())\n \n+    def test_merge_dataarray(self):\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+\n+        # Verify using merge method on Dataset\n+        result = ds.merge(da)\n+        expected = xr.merge([ds, da])\n+        assert_identical(result, expected)\n+\n+        # Test merging a DataArray with matching dimensions\n+        ds2 = xr.Dataset({\"c\": (\"x\", [1, 2, 3])})\n+        da2 = xr.DataArray([4, 5, 6], dims=\"x\", name=\"d\")\n+        expected2 = xr.merge([ds2, da2])\n+        result2 = ds2.merge(da2)\n+        assert_identical(result2, expected2)\n+\n+        # Test merging a DataArray with a different dimension\n+        ds3 = xr.Dataset({\"e\": (\"y\", [1, 2, 3])})\n+        da3 = xr.DataArray([4, 5, 6], dims=\"z\", name=\"f\")\n+        expected3 = xr.merge([ds3, da3])\n+        result3 = ds3.merge(da3)\n+        assert_identical(result3, expected3)\n+\n     def test_merge_broadcast_equals(self):\n         ds1 = xr.Dataset({\"x\": 0})\n         ds2 = xr.Dataset({\"x\": (\"y\", [0, 0])})\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..656b0f0 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -109,7 +109,24 @@ class TestMergeFunction:\n             expected.attrs = expected_attrs\n             assert actual.identical(expected)\n \n-    def test_merge_dicts_simple(self):\n+    def test_merge_attrs_override_copy(self):\n+        import xarray as xr\n+        ds1 = xr.Dataset(attrs={\"x\": 0})\n+        ds2 = xr.Dataset(attrs={\"x\": 1})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"x\"] = 2\n+        assert ds1.attrs[\"x\"] == 0\n+        assert ds3.attrs[\"x\"] == 2\n+\n+    def test_merge_attrs_override_no_reference(self):\n+        import xarray as xr\n+        ds1 = xr.Dataset(attrs={\"a\": \"b\"})\n+        ds2 = xr.Dataset(attrs={\"a\": \"c\"})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"a\"] = \"d\"\n+        assert ds1.attrs[\"a\"] == \"b\"\n+        assert ds2.attrs[\"a\"] == \"c\"\n+        assert ds3.attrs[\"a\"] == \"d\"\n         actual = xr.merge([{\"foo\": 0}, {\"bar\": \"one\"}, {\"baz\": 3.5}])\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n         assert actual.identical(expected)\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..e72eb09 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1916,6 +1916,27 @@ def test_dot_align_coords(use_dask) -> None:\n \n \n def test_where() -> None:\n+    # Test where without attributes\n+    cond = xr.DataArray([True, False], dims=\"x\")\n+    actual = xr.where(cond, 1, 0)\n+    expected = xr.DataArray([1, 0], dims=\"x\")\n+    assert_identical(expected, actual)\n+\n+def test_where_attrs() -> None:\n+    # Test where with attributes preservation\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    actual = xr.where(cond, x, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected, actual)\n+\n+def test_where_dtype_preservation() -> None:\n+    # Test where with dtype preservation\n+    data = xr.DataArray(np.ones([10, 10], dtype=np.int8), attrs={\"description\": \"test array\"})\n+    result = xr.where(data == 1, 5, 0, keep_attrs=True)\n+    assert result.dtype == np.int8\n+    assert result.attrs[\"description\"] == \"test array\"\n     cond = xr.DataArray([True, False], dims=\"x\")\n     actual = xr.where(cond, 1, 0)\n     expected = xr.DataArray([1, 0], dims=\"x\")\n",
  "pydata__xarray-4695": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex 3a4b8ad..4b6872c 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -63,6 +63,39 @@ class TestDataArray:\n             [[\"a\", \"b\"], [1, 2]], names=(\"level_1\", \"level_2\")\n         )\n         self.mda = DataArray([0, 1, 2, 3], coords={\"x\": self.mindex}, dims=\"x\")\n+    def test_loc_dim_name_collision_with_sel_params(self):\n+        da = xr.DataArray(\n+            [[0, 0], [1, 1]],\n+            dims=[\"dim1\", \"method\"],\n+            coords={\"dim1\": [\"x\", \"y\"], \"method\": [\"a\", \"b\"]},\n+        )\n+        np.testing.assert_array_equal(\n+            da.loc[dict(dim1=[\"x\", \"y\"], method=[\"a\"])], [[0], [1]]\n+        )\n+\n+    def test_loc_with_method_dim_single_selection(self):\n+        da = xr.DataArray(\n+            [[0, 1, 2], [3, 4, 5]],\n+            dims=[\"method\", \"value\"],\n+            coords={\"method\": [\"m1\", \"m2\"], \"value\": [\"a\", \"b\", \"c\"]},\n+        )\n+        result = da.loc[dict(method=\"m1\", value=\"b\")]\n+        expected = 1\n+        assert result == expected\n+\n+    def test_loc_with_method_dim_multi_selection(self):\n+        da = xr.DataArray(\n+            [[0, 1, 2], [3, 4, 5]],\n+            dims=[\"method\", \"value\"],\n+            coords={\"method\": [\"m1\", \"m2\"], \"value\": [\"a\", \"b\", \"c\"]},\n+        )\n+        result = da.loc[dict(method=[\"m1\", \"m2\"], value=[\"a\", \"c\"])]\n+        expected = xr.DataArray(\n+            [[0, 2], [3, 5]],\n+            dims=[\"method\", \"value\"],\n+            coords={\"method\": [\"m1\", \"m2\"], \"value\": [\"a\", \"c\"]},\n+        )\n+        assert_identical(result, expected)\n \n     def test_repr(self):\n         v = Variable([\"time\", \"x\"], [[1, 2, 3], [4, 5, 6]], {\"foo\": \"bar\"})\n",
  "pydata__xarray-4966": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex 2dbb0b4..e21008e 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -13,8 +13,16 @@ from . import assert_allclose, assert_equal, assert_identical, requires_dask\n with suppress(ImportError):\n     import dask.array as da\n \n+import numpy as np\n \n-def test_CFMaskCoder_decode():\n+@pytest.mark.parametrize(\"engine, expected_values\", [\n+    (\"netcdf4\", [-128.0, -1.0, 0.0, 1.0, 2.0, np.nan, 127.0]),\n+    (\"pydap\", [-128.0, -1.0, 0.0, 1.0, 2.0, np.nan, 127.0])\n+])\n+def test_engine_unsigned_handling(engine, expected_values):\n+    url = \"https://observations.ipsl.fr/thredds/dodsC/EUREC4A/PRODUCTS/testdata/netcdf_testfiles/test_NC_BYTE_neg.nc\"\n+    ds = xr.open_dataset(url, engine=engine)\n+    np.testing.assert_array_equal(ds.coords['test'].values, expected_values)\n     original = xr.Variable((\"x\",), [0, -1, 1], {\"_FillValue\": -1})\n     expected = xr.Variable((\"x\",), [0, np.nan, 1])\n     coder = variables.CFMaskCoder()\n",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..4c06c1c 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1928,6 +1928,15 @@ def test_where_attrs() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n     assert_identical(expected, actual)\n \n+def test_where_with_scalar_and_keep_attrs():\n+    # Test where with scalar and keep_attrs=True\n+    cond = xr.DataArray([True, False, True], dims=\"x\", attrs={\"condition_attr\": \"value\"})\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\")\n+    # Check that the result does not have attributes\n+    assert actual.attrs == {}\n+    # Check that the data values are correct\n+    assert_identical(expected, actual)\n \n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n",
  "pydata__xarray-6599": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f1ec005..891a4c7 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -2000,6 +2000,14 @@ def test_where_attrs() -> None:\n             xr.Dataset({\"a\": (\"x\", [1, 2, 3]), \"b\": (\"y\", [3, 4, 5])}),\n             id=\"dataset-dataset\",\n         ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array([1000, 2000, 3000], dtype=\"timedelta64[ns]\"), dims=\"x\"\n+            ),\n+            xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n+            xr.DataArray([1000.0, 2000.0, 3000.0], dims=\"x\"),\n+            id=\"timedelta\",\n+        ),\n         pytest.param(\n             xr.DataArray(pd.date_range(\"1970-01-01\", freq=\"s\", periods=3), dims=\"x\"),\n             xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n",
  "pydata__xarray-6721": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex cab9007..be0603d 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -220,7 +220,33 @@ class InaccessibleVariableDataStore(backends.InMemoryDataStore):\n         return {k: lazy_inaccessible(k, v) for k, v in self._variables.items()}\n \n \n+from contextlib import contextmanager\n+import pytest\n+import xarray as xr\n+import numpy as np\n+import dask.array as da\n+from xarray.tests import (\n+    create_test_data,\n+    create_test_multiindex,\n+    create_test_stacked_array,\n+    assert_equal,\n+    assert_identical,\n+    UnexpectedDataAccess,\n+    InaccessibleVariableDataStore,\n+    open_dataset,\n+)\n+@contextmanager\n+def raise_if_lazy_load():\n+    with pytest.raises(UnexpectedDataAccess):\n+        yield\n+\n class TestDataset:\n+    def test_chunks_does_not_load_data(self) -> None:\n+        store = InaccessibleVariableDataStore()\n+        create_test_data().dump_to_store(store)\n+        ds = open_dataset(store)\n+        with raise_if_lazy_load():\n+            ds.chunks\n     def test_repr(self) -> None:\n         data = create_test_data(seed=123)\n         data.attrs[\"foo\"] = \"bar\"\n",
  "pydata__xarray-6744": "",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "diff --git a/xarray/tests/test_indexes.py b/xarray/tests/test_indexes.py\nindex fa8bd84..0b6fab2 100644\n--- a/xarray/tests/test_indexes.py\n+++ b/xarray/tests/test_indexes.py\n@@ -688,7 +688,21 @@ def test_safe_cast_to_index_cftimeindex():\n         assert isinstance(actual, type(expected))\n \n \n-# Test that datetime.datetime objects are never used in a CFTimeIndex\n+import pytest\n+import numpy as np\n+import xarray as xr\n+\n+@pytest.mark.parametrize(\"dtype\", [\"int32\", \"float32\"])\n+def test_restore_dtype_on_multiindexes(dtype: str) -> None:\n+    foo = xr.Dataset(coords={\"bar\": (\"bar\", np.array([0, 1], dtype=dtype))})\n+    foo = foo.stack(baz=(\"bar\",))\n+    assert str(foo[\"bar\"].values.dtype) == dtype\n+\n+@pytest.mark.parametrize(\"dtype\", [\"int32\", \"int64\", \"float32\", \"float64\"])\n+def test_stack_preserves_dtype(dtype: str) -> None:\n+    ds = xr.Dataset(coords={'a': np.array([0, 1, 2], dtype=dtype)})\n+    stacked = ds.stack(b=('a',))\n+    assert str(ds['a'].values.dtype) == str(stacked['a'].values.dtype)\n @requires_cftime\n def test_safe_cast_to_index_datetime_datetime():\n     dates = [datetime(1, 1, day) for day in range(1, 20)]\n@@ -696,4 +710,4 @@ def test_safe_cast_to_index_datetime_datetime():\n     expected = pd.Index(dates)\n     actual = safe_cast_to_index(np.array(dates))\n     assert_array_equal(expected, actual)\n-    assert isinstance(actual, pd.Index)\n+    assert isinstance(actual, pd.Index)\n",
  "pylint-dev__pylint-4970": "diff --git a/tests/checkers/unittest_similar.py b/tests/checkers/unittest_similar.py\nindex 97cd4d0..d942e23 100644\n--- a/tests/checkers/unittest_similar.py\n+++ b/tests/checkers/unittest_similar.py\n@@ -494,11 +494,17 @@ def test_get_map_data() -> None:\n         # The map bit, can you tell? ;)\n         data.extend(sim.get_map_data())\n \n-    assert len(expected_linelists) == len(data)\n+def test_set_duplicate_lines_to_zero_no_errors():\n+    \"\"\"Test that setting min-similarity-lines to 0 disables duplicate code check\"\"\"\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        Run([\"--duplicates=0\", \"test_file1.py\", \"test_file2.py\"])\n+    assert ex.value.code == 0\n+    assert output.getvalue() == \"\"\n     for source_fname, expected_lines, lineset_obj in zip(\n         source_streams, expected_linelists, data\n     ):\n         assert source_fname == lineset_obj.name\n         # There doesn't seem to be a faster way of doing this, yet.\n         lines = (linespec.text for linespec in lineset_obj.stripped_lines)\n-        assert tuple(expected_lines) == tuple(lines)\n+        assert tuple(expected_lines) == tuple(lines)\n",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..5b75a1d 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -94,9 +94,35 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+def test_short_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the -v flag without argument.\"\"\"\n+    Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n+def test_long_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the --verbose flag without argument.\"\"\"\n+    Run([str(EMPTY_MODULE), \"--verbose\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n+def test_short_verbose_argument_error(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that using -v with an argument raises an error.\"\"\"\n+    with pytest.raises(SystemExit):\n+        Run([str(EMPTY_MODULE), \"-v\", \"unexpected_arg\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"error: argument -v: not expected\" in output.err\n+\n+def test_long_verbose_argument_error(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that using --verbose with an argument raises an error.\"\"\"\n+    with pytest.raises(SystemExit):\n+        Run([str(EMPTY_MODULE), \"--verbose\", \"unexpected_arg\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"error: argument --verbose: not expected\" in output.err\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9123ae4..b4c04e2 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1233,6 +1233,66 @@ class TestRunTC:\n             expected_output=\"No such file or directory\",\n         )\n \n+    def test_recursive_ignore(self):\n+        \"\"\"Test Pylint's behavior with --ignore in recursive mode.\"\"\"\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore=ignored_subdirectory\",\n+            ],\n+            code=0,\n+        )\n+\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore=failing.py\",\n+            ],\n+            code=0,\n+        )\n+\n+    def test_recursive_ignore_patterns(self):\n+        \"\"\"Test Pylint's behavior with --ignore-patterns in recursive mode.\"\"\"\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-patterns=ignored_.*\",\n+            ],\n+            code=0,\n+        )\n+\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-patterns=failing.*\",\n+            ],\n+            code=0,\n+        )\n+\n+    def test_recursive_ignore_paths(self):\n+        \"\"\"Test Pylint's behavior with --ignore-paths in recursive mode.\"\"\"\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-paths=.*ignored.*\",\n+            ],\n+            code=0,\n+        )\n+\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-paths=.*failing.*\",\n+            ],\n+            code=0,\n+        )\n+\n     def test_recursive(self):\n         self._runtest(\n             [join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"), \"--recursive=y\"],\n",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..8cd07c3 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,35 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_paths_with_recursive(self) -> None:\n+        \"\"\"Test that ignore-paths in pyproject.toml is respected with --recursive=y.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                # Change directory to where the test files are located\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                # Create a mock pyproject.toml file with ignore-paths configuration\n+                with open('pyproject.toml', 'w') as f:\n+                    f.write(\"\"\"\n+[tool.pylint.MASTER]\n+ignore-paths = [\n+  \"^ignored_subdirectory/.*$\",\n+]\n+\"\"\")\n+                # Ensure the ignored path is not linted\n+                self._runtest(\n+                    [\n+                        \".\", \n+                        \"--recursive=y\", \n+                        \"--rcfile=pyproject.toml\"\n+                    ],\n+                    code=0,\n+                )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7277": "",
  "pytest-dev__pytest-10051": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex 26c4c15..fc3ca6d 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -172,7 +172,38 @@ def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardow\n     assert set(caplog._item.stash[caplog_records_key]) == {\"setup\", \"call\"}\n \n \n-def test_ini_controls_global_log_level(pytester: Pytester) -> None:\n+def test_caplog_clear_resets_records_properly(caplog):\n+    logger = logging.getLogger(__name__)\n+    \n+    # Verify initial state: no records\n+    assert not caplog.records\n+    assert not caplog.get_records(\"call\")\n+    \n+    # Log a message and verify it's captured\n+    logger.warning(\"initial_log\")\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"initial_log\"]\n+    assert [x.message for x in caplog.records] == [\"initial_log\"]\n+    \n+    # Clear logs and verify they are cleared\n+    caplog.clear()\n+    assert caplog.get_records(\"call\") == []\n+    assert caplog.records == []\n+    \n+    # Log another message after clearing and verify it's captured\n+    logger.info(\"new_log_after_clear\")\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"new_log_after_clear\"]\n+    assert [x.message for x in caplog.records] == [\"new_log_after_clear\"]\n+\n+    # Clear again and verify\n+    caplog.clear()\n+    assert caplog.get_records(\"call\") == []\n+    assert caplog.records == []\n+\n+    # Log multiple messages after clearing\n+    logger.debug(\"log1\")\n+    logger.error(\"log2\")\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"log1\", \"log2\"]\n+    assert [x.message for x in caplog.records] == [\"log1\", \"log2\"]\n     pytester.makepyfile(\n         \"\"\"\n         import pytest\n",
  "pytest-dev__pytest-10081": "",
  "pytest-dev__pytest-5262": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 1f092b0..503d99c 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -1051,9 +1051,20 @@ class TestFDCapture(object):\n             cap.done()\n             pytest.raises(AttributeError, cap.suspend)\n \n-\n-@contextlib.contextmanager\n-def saved_fd(fd):\n+def test_encoded_file_mode():\n+    import _pytest.capture\n+    import io\n+    buffer = io.StringIO()\n+    encoded_file = _pytest.capture.EncodedFile(buffer, encoding='utf-8')\n+    assert 'b' not in encoded_file.buffer.mode\n+\n+def test_encoded_file_write_str():\n+    import _pytest.capture\n+    import io\n+    buffer = io.StringIO()\n+    encoded_file = _pytest.capture.EncodedFile(buffer, encoding='utf-8')\n+    encoded_file.write(\"test string\")\n+    assert buffer.getvalue() == \"test string\"\n     new_fd = os.dup(fd)\n     try:\n         yield\n",
  "pytest-dev__pytest-5631": "diff --git a/testing/python/integration.py b/testing/python/integration.py\nindex 044a31a..c101df4 100644\n--- a/testing/python/integration.py\n+++ b/testing/python/integration.py\n@@ -178,6 +178,22 @@ class TestMockDecoration:\n         reprec = testdir.inline_run()\n         reprec.assertoutcome(passed=2)\n \n+    def test_mock_sentinel_check_with_numpy_array(self, testdir):\n+        \"\"\"Ensure patching with numpy array doesn't raise ValueError during collection.\"\"\"\n+        testdir.makepyfile(\n+            \"\"\"\n+            from unittest.mock import patch\n+            import numpy as np\n+\n+            class TestNumpyPatch:\n+                @patch(\"numpy.array\", new=np.array([-5.5, 3.0]))\n+                def test_array_patch(self):\n+                    assert True\n+            \"\"\"\n+        )\n+        reprec = testdir.inline_run()\n+        reprec.assertoutcome(passed=1)\n+\n     def test_mock(self, testdir):\n         pytest.importorskip(\"mock\", \"1.0.1\")\n         testdir.makepyfile(\n",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..eb8b965 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -116,7 +116,6 @@ class TestPaste(object):\n             monkeypatch.setattr(urllib, \"urlopen\", mocked)\n         else:\n             import urllib.request\n-\n             monkeypatch.setattr(urllib.request, \"urlopen\", mocked)\n         return calls\n \n@@ -126,8 +125,19 @@ class TestPaste(object):\n         assert len(mocked_urlopen) == 1\n         url, data = mocked_urlopen[0]\n         assert type(data) is bytes\n-        lexer = \"python3\" if sys.version_info[0] >= 3 else \"python\"\n         assert url == \"https://bpaste.net\"\n-        assert \"lexer=%s\" % lexer in data.decode()\n+        assert \"lexer=text\" in data.decode()\n         assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n+\n+    def test_create_new_paste_with_special_content(self, pastebin, mocked_urlopen):\n+        special_content = b\"some special content that caused HTTP 400 errors\"\n+        result = pastebin.create_new_paste(special_content)\n+        assert result == \"https://bpaste.net/show/3c0c6750bd\"\n+        assert len(mocked_urlopen) == 1\n+        url, data = mocked_urlopen[0]\n+        assert type(data) is bytes\n+        assert url == \"https://bpaste.net\"\n+        assert \"lexer=text\" in data.decode()\n+        assert \"code=some+special+content+that+caused+HTTP+400+errors\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n",
  "pytest-dev__pytest-6202": "",
  "pytest-dev__pytest-7205": "diff --git a/testing/test_setuponly.py b/testing/test_setuponly.py\nindex 8211d39..bcac95e 100644\n--- a/testing/test_setuponly.py\n+++ b/testing/test_setuponly.py\n@@ -1,3 +1,4 @@\n+\n import pytest\n from _pytest.config import ExitCode\n \n@@ -201,6 +202,23 @@ def test_show_fixtures_with_parameter_ids_function(testdir, mode):\n     result.stdout.fnmatch_lines([\"*SETUP    F foobar?FOO?\", \"*SETUP    F foobar?BAR?\"])\n \n \n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue 7126, BytesWarning when using --setup-show with bytes parameter\n+    import sys\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n+\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n+\n def test_dynamic_fixture_request(testdir):\n     p = testdir.makepyfile(\n         \"\"\"\n",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..a2c4db6 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,6 +1,8 @@\n+\n import sys\n \n import pytest\n+from _pytest.pytester import Testdir\n from _pytest.runner import runtestprotocol\n from _pytest.skipping import evaluate_skip_marks\n from _pytest.skipping import evaluate_xfail_marks\n@@ -344,6 +346,32 @@ class TestXFail:\n         result.stdout.fnmatch_lines([\"*XPASS*test_that*\", \"*1 xpassed*\"])\n         assert result.ret == 0\n \n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        \"\"\"Test that a dynamically added xfail marker during runtest on a failed test is handled.\"\"\"\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        \"\"\"Test that a dynamically added xfail marker during runtest on a passed test with strict=True is handled as a failure.\"\"\"\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+                assert 1\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n+\n     def test_xfail_imperative(self, testdir):\n         p = testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..7fe17c1 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -514,6 +514,17 @@ class TestCaptureFixture:\n         )\n         reprec.assertoutcome(passed=1)\n \n+    @pytest.mark.parametrize(\"newline\", [\"\\n\", \"\\r\\n\", \"\\r\"])\n+    def test_cafd_preserves_various_newlines(self, capfd, newline):\n+        print(\"line\", end=newline)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(newline)\n+\n+    def test_cafd_includes_carriage_return(self, capfd):\n+        print('Greetings from DOS', end='\\r')\n+        out, err = capfd.readouterr()\n+        assert out.endswith('\\r')\n+\n     def test_capfdbinary(self, testdir):\n         reprec = testdir.inline_runsource(\n             \"\"\"\\\n",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..e00aa82 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,6 +1,31 @@\n+\n import logging\n \n import pytest\n+def test_change_level_undos_handler_level(testdir):\n+    \"\"\"Ensure that 'set_level' is undone after the end of the test (handler).\"\"\"\n+\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test1(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(41)\n+            assert caplog.handler.level == 41\n+\n+        def test2(caplog):\n+            assert caplog.handler.level == 0\n+\n+        def test3(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(43)\n+            assert caplog.handler.level == 43\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=3)\n+\n from _pytest.logging import caplog_records_key\n \n logger = logging.getLogger(__name__)\n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..113ead7 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,3 +1,4 @@\n+\n import os\n import pprint\n import sys\n@@ -9,7 +10,7 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n-from _pytest.pytester import Testdir\n+from _pytest.pytester import Testdir, Pytester\n \n \n class TestCollector:\n@@ -1178,6 +1179,36 @@ def test_collect_symlink_out_of_tree(testdir):\n     assert result.ret == 0\n \n \n+def test_collect_symlink_dir(pytester: Pytester) -> None:\n+    \"\"\"A symlinked directory is collected.\"\"\"\n+    dir = pytester.mkdir(\"dir\")\n+    dir.joinpath(\"test_it.py\").write_text(\"def test_it(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_dir\").symlink_to(dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+\n+def test_collect_nested_symlink_dir(pytester: Pytester) -> None:\n+    \"\"\"A symlinked directory within another directory is collected.\"\"\"\n+    outer_dir = pytester.mkdir(\"outer_dir\")\n+    inner_dir = outer_dir.mkdir(\"inner_dir\")\n+    inner_dir.joinpath(\"test_inner.py\").write_text(\"def test_inner(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_outer\").symlink_to(outer_dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+\n+def test_collect_symlink_to_symlink_dir(pytester: Pytester) -> None:\n+    \"\"\"A symlink to a symlinked directory is collected.\"\"\"\n+    dir = pytester.mkdir(\"dir\")\n+    dir.joinpath(\"test_symlink.py\").write_text(\"def test_symlink(): pass\", \"utf-8\")\n+    symlink_dir = pytester.path.joinpath(\"symlink_dir\")\n+    symlink_dir.symlink_to(dir)\n+    pytester.path.joinpath(\"symlink_to_symlink\").symlink_to(symlink_dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+\n def test_collectignore_via_conftest(testdir):\n     \"\"\"collect_ignore in parent conftest skips importing child (issue #4592).\"\"\"\n     tests = testdir.mkpydir(\"tests\")\n",
  "pytest-dev__pytest-8399": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 2c720b0..f20c789 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -301,8 +301,30 @@ def test_setup_setUpClass(pytester: Pytester) -> None:\n     reprec = pytester.inline_run(testpath)\n     reprec.assertoutcome(passed=3)\n \n+def test_unittest_setUpClass_fixture_private(pytester: Pytester) -> None:\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+        class MyTestCase(unittest.TestCase):\n+            @classmethod\n+            def setUpClass(cls):\n+                pass\n+            def test_func1(self):\n+                pass\n+            @classmethod\n+            def tearDownClass(cls):\n+                pass\n+        \"\"\"\n+    )\n+    # Check default behavior: setUpClass fixture should not be shown without -v\n+    result = pytester.runpytest(\"--fixtures\")\n+    assert result.ret == 0\n+    result.stdout.no_fnmatch_line(\"*unittest_setUpClass_fixture_MyTestCase*\")\n \n-def test_setup_class(pytester: Pytester) -> None:\n+    # Check verbose behavior: setUpClass fixture should be shown with -v\n+    result = pytester.runpytest(\"--fixtures\", \"-v\")\n+    assert result.ret == 0\n+    result.stdout.fnmatch_lines([\"*unittest_setUpClass_fixture_MyTestCase*\"])\n     testpath = pytester.makepyfile(\n         \"\"\"\n         import unittest\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..a28fc99 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -597,8 +597,30 @@ def test_ridgecv_store_cv_values():\n     r.fit(x, y)\n     assert_equal(r.cv_values_.shape, (n_samples, n_responses, n_alphas))\n \n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    rng = np.random.RandomState(42)\n+\n+    # Create random dataset\n+    n_samples = 8\n+    n_features = 5\n+    x = rng.randn(n_samples, n_features)\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    # Instantiate RidgeClassifierCV with store_cv_values=True\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+    # with len(y.shape) == 1\n+    y = rng.randint(0, 2, size=n_samples)\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, 1, n_alphas), \"cv_values_ has unexpected shape\"\n \n-def test_ridgecv_sample_weight():\n+    # with len(y.shape) == 2 (one-vs-all case)\n+    n_classes = 2\n+    y = rng.randint(0, n_classes, size=(n_samples, n_classes))\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_classes, n_alphas), \"cv_values_ has unexpected shape\"\n     rng = np.random.RandomState(0)\n     alphas = (0.1, 1.0, 10.0)\n \n",
  "scikit-learn__scikit-learn-10844": "",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..fc041e5 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -558,8 +558,31 @@ def test_feature_names():\n     for idx, name in enumerate(feature_names):\n         assert_equal(idx, cv.vocabulary_.get(name))\n \n-\n-def test_vectorizer_max_features():\n+def test_countvectorizer_with_custom_vocabulary():\n+    # Defining a custom vocabulary\n+    vocab = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    \n+    # Initialize CountVectorizer with the custom vocabulary\n+    cv = CountVectorizer(vocabulary=vocab)\n+    \n+    # Ensure get_feature_names does not raise NotFittedError\n+    feature_names = cv.get_feature_names()\n+    assert_array_equal(feature_names, vocab)\n+    \n+    # Test transforming a corpus without fitting\n+    corpus = [\n+        'This is the first document.',\n+        'This is the second second document.',\n+        'And the third one.',\n+        'Is this the first document?',\n+    ]\n+    X = cv.transform(corpus)\n+    \n+    # Check that the transformed matrix has the expected shape\n+    assert_equal(X.shape, (4, 9))\n+    \n+    # Ensure the vocabulary_ attribute is set after transform\n+    assert_true(hasattr(cv, 'vocabulary_'))\n     vec_factories = (\n         CountVectorizer,\n         TfidfVectorizer,\n",
  "scikit-learn__scikit-learn-11310": "diff --git a/sklearn/model_selection/tests/test_search.py b/sklearn/model_selection/tests/test_search.py\nindex 0b1d5f9..9688375 100644\n--- a/sklearn/model_selection/tests/test_search.py\n+++ b/sklearn/model_selection/tests/test_search.py\n@@ -1159,8 +1159,17 @@ def test_search_cv_timing():\n     gs = GridSearchCV(svc, {'C': [0, 1]}, cv=2, error_score=0)\n     rs = RandomizedSearchCV(svc, {'C': [0, 1]}, cv=2, error_score=0, n_iter=2)\n \n+    from sklearn.utils._testing import assert_true\n+    from sklearn.utils._testing import assert_greater_equal\n+\n     for search in (gs, rs):\n         search.fit(X, y)\n+\n+        # Check for the presence of the refit_time_ attribute\n+        assert_true(hasattr(search, \"refit_time_\"))\n+        assert_true(isinstance(search.refit_time_, float))\n+        assert_greater_equal(search.refit_time_, 0)\n+        search.fit(X, y)\n         for key in ['mean_fit_time', 'std_fit_time']:\n             # NOTE The precision of time.time in windows is not high\n             # enough for the fit/score times to be non-zero for trivial X and y\n",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..995356e 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -491,8 +491,53 @@ def test_logistic_cv():\n     scores = np.asarray(list(lr_cv.scores_.values()))\n     assert_array_equal(scores.shape, (1, 3, 1))\n \n-\n-def test_multinomial_logistic_regression_string_inputs():\n+from sklearn.metrics import log_loss\n+from sklearn.model_selection import train_test_split\n+from sklearn.metrics import make_scorer\n+\n+# Existing test case\n+def test_logistic_cv_multinomial_score(scoring, multiclass_agg_list):\n+    # test that LogisticRegressionCV uses the right score to compute its\n+    # cross-validation scores when using a multinomial scoring\n+    # see https://github.com/scikit-learn/scikit-learn/issues/8720\n+    X, y = make_classification(n_samples=100, random_state=0, n_classes=3,\n+                               n_informative=6)\n+    train, test = np.arange(80), np.arange(80, 100)\n+    lr = LogisticRegression(C=1., solver='lbfgs', multi_class='multinomial')\n+    # we use lbfgs to support multinomial\n+    params = lr.get_params()\n+    # we store the params to set them further in _log_reg_scoring_path\n+    for key in ['C', 'n_jobs', 'warm_start']:\n+        del params[key]\n+    lr.fit(X[train], y[train])\n+    for averaging in multiclass_agg_list:\n+        scorer = get_scorer(scoring + averaging)\n+        assert_array_almost_equal(\n+            _log_reg_scoring_path(X, y, train, test, Cs=[1.],\n+                                  scoring=scorer, **params)[2][0],\n+            scorer(lr, X[test], y[test]))\n+\n+# New test case \n+def test_logistic_regression_cv_multinomial_predict_proba():\n+    # Test to ensure predict_proba uses multinomial probabilities\n+    X, y = make_classification(n_samples=200, n_features=5, n_classes=3,\n+                               n_informative=3, random_state=42)\n+    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,\n+                                                        random_state=42)\n+    clf = LogisticRegressionCV(multi_class='multinomial', cv=5, solver='lbfgs')\n+    clf.fit(X_train, y_train)\n+    \n+    # Obtain predicted probabilities from LogisticRegressionCV\n+    probs = clf.predict_proba(X_test)\n+    \n+    # Calculate log loss using sklearn's log_loss\n+    calculated_log_loss = log_loss(y_test, probs)\n+    \n+    # Get the scorer and calculate the score using the scorer\n+    neg_log_loss_scorer = make_scorer(log_loss, greater_is_better=False, needs_proba=True)\n+    score = neg_log_loss_scorer(clf, X_test, y_test)\n+    \n+    assert np.isclose(-calculated_log_loss, score), \"The score from scorer doesn't match calculated log loss\"\n     # Test with string labels for LogisticRegression(CV)\n     n_samples, n_features, n_classes = 50, 5, 3\n     X_ref, y = make_classification(n_samples=n_samples, n_features=n_features,\n",
  "scikit-learn__scikit-learn-12585": "diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 4752f9c..f205769 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -167,6 +167,23 @@ def test_clone_sparse_matrices():\n         assert_array_equal(clf.empty.toarray(), clf_cloned.empty.toarray())\n \n \n+def test_clone_estimator_types_class_param():\n+    # Test that clone works when estimator parameters are types (classes) rather than instances\n+    from sklearn.preprocessing import StandardScaler\n+    from sklearn.base import clone\n+    class MyEstimator:\n+        def __init__(self, empty=None):\n+            self.empty = empty\n+\n+        def get_params(self, deep=False):\n+            return {\"empty\": self.empty}\n+\n+    # Clone an estimator that has a class type as a parameter\n+    clf = MyEstimator(empty=StandardScaler)\n+    clf2 = clone(clf)\n+\n+    assert clf.empty is clf2.empty\n+\n def test_repr():\n     # Smoke test the repr of the base estimator.\n     my_estimator = MyEstimator()\n",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..0cda80c 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -7,6 +7,32 @@ from scipy import linalg\n \n import pytest\n \n+\n+@pytest.mark.parametrize('copy_X_init, copy_X_fit', [(True, None), (False, None), (True, True), (False, True), (True, False), (False, False)])\n+def test_lasso_lars_ic_copyX_resolution(copy_X_init, copy_X_fit):\n+    \"\"\"\n+    Test that the `copy_X` parameter set during initialization and fit behaves as expected.\n+    \"\"\"\n+    lasso_lars = LassoLarsIC(copy_X=copy_X_init, precompute=False)\n+    rng = np.random.RandomState(0)\n+    X = rng.normal(0, 1, (100, 5))\n+    X_copy = X.copy()\n+    y = X[:, 2]\n+    \n+    # Fit the model\n+    if copy_X_fit is not None:\n+        lasso_lars.fit(X, y, copy_X=copy_X_fit)\n+        expected_copy_X = copy_X_fit\n+    else:\n+        lasso_lars.fit(X, y)\n+        expected_copy_X = copy_X_init\n+        \n+    # Verify that the copying behavior is as expected\n+    assert (expected_copy_X == np.array_equal(X, X_copy)), \\\n+        f\"Expected copy_X to be {expected_copy_X}, but got {np.array_equal(X, X_copy)}\"\n+\n+import pytest\n+\n from sklearn.model_selection import train_test_split\n from sklearn.utils.testing import assert_equal\n from sklearn.utils.testing import assert_array_almost_equal\n@@ -18,7 +44,8 @@ from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import TempMemmap\n from sklearn.exceptions import ConvergenceWarning\n from sklearn import linear_model, datasets\n-from sklearn.linear_model.least_angle import _lars_path_residues\n+from sklearn.linear_model.least_angle import _lars_path_residues, LassoLarsIC\n+import numpy as np\n \n diabetes = datasets.load_diabetes()\n X, y = diabetes.data, diabetes.target\n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..7c2e76c 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -493,6 +493,41 @@ def test_shuffle_stratifiedkfold():\n         assert_not_equal(set(test0), set(test1))\n     check_cv_coverage(kf0, X_40, y, groups=None, expected_n_splits=5)\n \n+def test_stratifiedkfold_different_random_state():\n+    import numpy as np\n+    from sklearn.model_selection import StratifiedKFold\n+\n+    # Check for different random states resulting in different splits\n+    X = np.arange(20)\n+    y = np.array([0] * 10 + [1] * 10)\n+\n+    kf1 = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n+    kf2 = StratifiedKFold(n_splits=5, shuffle=True, random_state=43)\n+    \n+    test_set1 = [test for _, test in kf1.split(X, y)]\n+    test_set2 = [test for _, test in kf2.split(X, y)]\n+    \n+    # The test sets should differ due to different random states\n+    for ts1, ts2 in zip(test_set1, test_set2):\n+        assert not np.array_equal(ts1, ts2)\n+\n+def test_stratifiedkfold_same_random_state():\n+    import numpy as np\n+    from sklearn.model_selection import StratifiedKFold\n+\n+    # Check for same random states to produce consistent splits\n+    X = np.arange(20)\n+    y = np.array([0] * 10 + [1] * 10)\n+\n+    kf1 = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n+    kf2 = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n+    \n+    test_set1 = [test for _, test in kf1.split(X, y)]\n+    test_set2 = [test for _, test in kf2.split(X, y)]\n+    \n+    # The test sets should be the same due to the same random state\n+    for ts1, ts2 in zip(test_set1, test_set2):\n+        assert np.array_equal(ts1, ts2)\n \n def test_kfold_can_detect_dependent_samples_on_digits():  # see #2372\n     # The digits samples are dependent: they are apparently grouped by authors\n",
  "scikit-learn__scikit-learn-13135": "diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py\nindex a18a1c5..de20a94 100644\n--- a/sklearn/preprocessing/tests/test_discretization.py\n+++ b/sklearn/preprocessing/tests/test_discretization.py\n@@ -203,6 +203,29 @@ def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n     assert_array_equal(expected_3bins, Xt.ravel())\n \n \n+@pytest.mark.parametrize(\n+    'strategy, expected_2bins, expected_3bins, expected_5bins',\n+    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2], [0, 0, 1, 1, 4, 4]),\n+     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2], [0, 0, 1, 2, 3, 4]),\n+     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2], [0, 1, 2, 3, 4, 4])])\n+def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins, expected_5bins):\n+    X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n+\n+    # with 2 bins\n+    est = KBinsDiscretizer(n_bins=2, strategy=strategy, encode='ordinal')\n+    Xt = est.fit_transform(X)\n+    assert_array_equal(expected_2bins, Xt.ravel())\n+\n+    # with 3 bins\n+    est = KBinsDiscretizer(n_bins=3, strategy=strategy, encode='ordinal')\n+    Xt = est.fit_transform(X)\n+    assert_array_equal(expected_3bins, Xt.ravel())\n+\n+    # with 5 bins\n+    est = KBinsDiscretizer(n_bins=5, strategy=strategy, encode='ordinal')\n+    Xt = est.fit_transform(X)\n+    assert_array_equal(expected_5bins, Xt.ravel())\n+\n @pytest.mark.parametrize('strategy', ['uniform', 'kmeans', 'quantile'])\n @pytest.mark.parametrize('encode', ['ordinal', 'onehot', 'onehot-dense'])\n def test_inverse_transform(strategy, encode):\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..1f56b89 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -598,7 +598,17 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n \n-def test_gaussian_mixture_fit():\n+import numpy as np\n+from sklearn.mixture import GaussianMixture\n+from sklearn.utils.testing import assert_array_equal\n+\n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n     rand_data = RandomData(rng)\n",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\nindex 318940e..f02836e 100644\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -1057,6 +1057,31 @@ def test_pipeline_memory():\n     finally:\n         shutil.rmtree(cachedir)\n \n+def test_pipeline_len():\n+    from sklearn.pipeline import Pipeline\n+    from sklearn.feature_selection import SelectKBest\n+    from sklearn.feature_selection import f_regression\n+    from sklearn.svm import SVC\n+\n+    # Define a simple pipeline\n+    pipe = Pipeline([\n+        ('select', SelectKBest(f_regression, k=10)),\n+        ('svc', SVC(kernel='linear'))\n+    ])\n+\n+    # Test the length of the pipeline\n+    assert len(pipe) == 2, \"Pipeline length should be 2\"\n+\n+    # Test a pipeline with no steps\n+    empty_pipe = Pipeline([])\n+    assert len(empty_pipe) == 0, \"Pipeline length should be 0 for empty pipeline\"\n+\n+    # Test a pipeline with one step\n+    single_step_pipe = Pipeline([\n+        ('svc', SVC(kernel='linear'))\n+    ])\n+    assert len(single_step_pipe) == 1, \"Pipeline length should be 1 for single step pipeline\"\n+\n \n def test_make_pipeline_memory():\n     cachedir = mkdtemp()\n@@ -1070,4 +1095,4 @@ def test_make_pipeline_memory():\n     pipeline = make_pipeline(DummyTransf(), SVC())\n     assert pipeline.memory is None\n \n-    shutil.rmtree(cachedir)\n+    shutil.rmtree(cachedir)\n",
  "scikit-learn__scikit-learn-13496": "",
  "scikit-learn__scikit-learn-13779": "",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..d6ae4e1 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -396,8 +396,26 @@ def test_export_text():\n     assert export_text(reg, decimals=1) == expected_report\n     assert export_text(reg, decimals=1, show_weights=True) == expected_report\n \n+def test_export_text_single_feature():\n+    # Test export_text with a decision tree using only one feature to ensure no IndexError\n+    from sklearn.tree import DecisionTreeClassifier\n+    from sklearn.tree import export_text\n+    from sklearn.datasets import load_iris\n \n-def test_plot_tree_entropy(pyplot):\n+    X, y = load_iris(return_X_y=True)\n+    X = X[:, 0].reshape(-1, 1)  # Use only the first feature\n+\n+    clf = DecisionTreeClassifier(max_depth=2, random_state=0)\n+    clf.fit(X, y)\n+\n+    expected_report = dedent(\"\"\"\n+    |--- sepal_length <= 5.55\n+    |   |--- class: 0\n+    |--- sepal_length >  5.55\n+    |   |--- class: 1\n+    \"\"\").lstrip()\n+\n+    assert export_text(clf, feature_names=['sepal_length']) == expected_report\n     # mostly smoke tests\n     # Check correctness of export_graphviz for criterion = entropy\n     clf = DecisionTreeClassifier(max_depth=3,\n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..8660cc0 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1531,8 +1531,23 @@ def test_LogisticRegressionCV_GridSearchCV_elastic_net_ovr():\n     assert (lrcv.predict(X_train) == gs.predict(X_train)).mean() >= .8\n     assert (lrcv.predict(X_test) == gs.predict(X_test)).mean() >= .8\n \n-\n-@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial'))\n+import pytest\n+import numpy as np\n+from sklearn.linear_model import LogisticRegressionCV\n+from sklearn.datasets import make_classification\n+\n+@pytest.mark.parametrize('solver', ('saga', 'liblinear'))\n+def test_LogisticRegressionCV_index_error(solver):\n+    # Test for the IndexError when refit=False in LogisticRegressionCV\n+    np.random.seed(29)\n+    X = np.random.normal(size=(1000, 3))\n+    beta = np.random.normal(size=3)\n+    intercept = np.random.normal(size=None)\n+    y = np.sign(intercept + X @ beta)\n+\n+    # This should not raise an error\n+    lrcv = LogisticRegressionCV(cv=5, solver=solver, tol=1e-2, refit=False)\n+    lrcv.fit(X, y)\n def test_LogisticRegressionCV_no_refit(multi_class):\n     # Test LogisticRegressionCV attribute shapes when refit is False\n \n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/tests/test_show_versions.py b/sklearn/utils/tests/test_show_versions.py\nindex fa39255..f09393a 100644\n--- a/sklearn/utils/tests/test_show_versions.py\n+++ b/sklearn/utils/tests/test_show_versions.py\n@@ -23,6 +23,7 @@ def test_get_deps_info():\n     assert 'Cython' in deps_info\n     assert 'pandas' in deps_info\n     assert 'matplotlib' in deps_info\n+    assert 'joblib' in deps_info\n \n \n def test_show_versions_with_blas(capsys):\n@@ -30,4 +31,5 @@ def test_show_versions_with_blas(capsys):\n     out, err = capsys.readouterr()\n     assert 'python' in out\n     assert 'numpy' in out\n-    assert 'BLAS' in out\n+    assert 'BLAS' in out\n+    assert 'joblib' in out\n",
  "scikit-learn__scikit-learn-14496": "diff --git a/sklearn/cluster/tests/test_optics.py b/sklearn/cluster/tests/test_optics.py\nindex 6c9dac3..94a0c72 100644\n--- a/sklearn/cluster/tests/test_optics.py\n+++ b/sklearn/cluster/tests/test_optics.py\n@@ -77,6 +77,24 @@ def test_the_extract_xi_labels(ordering, clusters, expected):\n \n     assert_array_equal(labels, expected)\n \n+from sklearn.datasets import make_blobs\n+from sklearn.cluster import OPTICS\n+import numpy as np\n+from sklearn.utils import shuffle\n+from numpy.testing import assert_array_equal\n+\n+def test_float_min_samples_conversion():\n+    # Generate sample data\n+    X, _ = make_blobs(n_samples=100, centers=3, random_state=42)\n+    \n+    # Expected behavior: min_samples should be converted to integer\n+    try:\n+        clust = OPTICS(min_samples=0.1, min_cluster_size=0.08,\n+                       max_eps=20, cluster_method='xi', xi=0.4).fit(X)\n+        print(\"Test passed: min_samples successfully converted to integer\")\n+    except TypeError as e:\n+        print(\"Test failed: min_samples was not converted to integer\")\n+        raise e\n \n def test_extract_xi():\n     # small and easy test (no clusters around other clusters)\n",
  "scikit-learn__scikit-learn-14710": "",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..3dde086 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,7 +680,43 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n-def test_sparse_precomputed():\n+import numpy as np\n+from scipy import sparse\n+from sklearn import svm\n+\n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for the issue with empty support_vectors_ in sparse fit\n+    X_train = sparse.csr_matrix([\n+        [0, 1, 0, 0],\n+        [0, 0, 0, 1],\n+        [0, 0, 1, 0],\n+        [0, 0, 0, 1]\n+    ])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear', C=316.227766017, epsilon=0.1, max_iter=15000, tol=0.001)\n+    \n+    model.fit(X_train, y_train)\n+    \n+    # Assert that the support_vectors_ and dual_coef_ are properly set even when empty\n+    assert not model.support_vectors_.data.size, \"Expected empty support_vectors_\"\n+    assert not model.dual_coef_.toarray().size, \"Expected empty dual_coef_\"\n+\n+def test_sparse_fit_no_support_vectors_issue():\n+    # Test the fix for when support_vectors_ are empty due to the data characteristics\n+    X_train = sparse.csr_matrix([\n+        [0, 0, 0, 0],\n+        [0, 0, 0, 0],\n+        [0, 0, 0, 0],\n+        [0, 0, 0, 0]\n+    ])\n+    y_train = np.array([0.0, 0.0, 0.0, 0.0])\n+    model = svm.SVR(kernel='linear', C=1.0, epsilon=0.1, max_iter=15000, tol=0.001)\n+    \n+    model.fit(X_train, y_train)\n+    \n+    # Assert that no error is raised, and the model handles empty support_vectors gracefully\n+    assert not model.support_vectors_.data.size, \"Expected empty support_vectors_ due to zero data\"\n+    assert not model.dual_coef_.toarray().size, \"Expected empty dual_coef_ due to zero data\"\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n     try:\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..e8deed3 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -97,8 +97,29 @@ def test_strip_accents():\n     expected = 'this is a test'\n     assert strip_accents_unicode(a) == expected\n \n+def test_strip_accents_nfkd():\n+    from sklearn.feature_extraction.text import strip_accents_unicode\n \n-def test_to_ascii():\n+    # strings that are already decomposed\n+    a = \"o\\u0308\"  # o with diaresis\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # combining marks by themselves\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"  # grave, acute, circumflex, tilde\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Multiple combining marks on one character\n+    a = \"o\\u0308\\u0304\"  # o with diaresis and macron\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Test the issue described in the report\n+    s1 = chr(241)  # LATIN SMALL LETTER N WITH TILDE\n+    s2 = chr(110) + chr(771)  # LATIN SMALL LETTER N followed by COMBINING TILDE\n+    assert strip_accents_unicode(s1) == \"n\"\n+    assert strip_accents_unicode(s2) == \"n\"\n     # check some classical latin accentuated symbols\n     a = '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb'\n     expected = 'aaaaaaceeee'\n",
  "scikit-learn__scikit-learn-25102": "diff --git a/sklearn/feature_selection/tests/test_feature_select.py b/sklearn/feature_selection/tests/test_feature_select.py\nindex 1bc044a..07f0cba 100644\n--- a/sklearn/feature_selection/tests/test_feature_select.py\n+++ b/sklearn/feature_selection/tests/test_feature_select.py\n@@ -943,4 +943,26 @@ def test_mutual_info_regression():\n     support = univariate_filter.get_support()\n     gtruth = np.zeros(10)\n     gtruth[:2] = 1\n-    assert_array_equal(support, gtruth)\n+    assert_array_equal(support, gtruth)\n+\n+def test_transformer_preserves_input_dtypes():\n+    \"\"\"Test that transformers preserve input dtypes when transforming.\"\"\"\n+\n+    pd = pytest.importorskip(\"pandas\")\n+\n+    X = pd.DataFrame(\n+        {\n+            \"a\": pd.Series([1.0, 2.4, 4.5], dtype=np.float32),\n+            \"b\": pd.Series([\"a\", \"b\", \"a\"], dtype=\"category\"),\n+            \"c\": pd.Series([\"j\", \"b\", \"b\"], dtype=\"category\"),\n+            \"d\": pd.Series([3.0, 2.4, 1.2], dtype=np.float64),\n+        }\n+    )\n+\n+    # Use a transformer that should not modify input values\n+    selector = SelectKBest(lambda X, y: np.ones(X.shape[1]), k=2).set_output(transform=\"pandas\")\n+    output = selector.fit_transform(X, np.ones(X.shape[0]))  # Dummy y\n+\n+    # Check that the output dtypes are the same as the input dtypes for selected features\n+    for name, dtype in output.dtypes.items():\n+        assert dtype == X.dtypes[name]\n",
  "scikit-learn__scikit-learn-25232": "diff --git a/sklearn/impute/tests/test_impute.py b/sklearn/impute/tests/test_impute.py\nindex ee482a8..f48f524 100644\n--- a/sklearn/impute/tests/test_impute.py\n+++ b/sklearn/impute/tests/test_impute.py\n@@ -1520,9 +1520,55 @@ def test_iterative_imputer_keep_empty_features(initial_strategy):\n     )\n     X_imputed = imputer.fit_transform(X)\n     assert_allclose(X_imputed[:, 1], 0)\n+\n+@pytest.mark.parametrize(\"fill_value\", [100, -999, np.nan])\n+def test_iterative_imputer_with_custom_fill_value(fill_value):\n+    \"\"\"Test IterativeImputer with initial_strategy='constant' and various fill_value.\"\"\"\n+    X = np.array([\n+        [-1, 2, np.nan, -1],\n+        [4, -1, 5, -1],\n+        [6, 7, -1, -1],\n+        [8, 9, 0, -1]\n+    ])\n+\n+    imputer = IterativeImputer(\n+        missing_values=-1,\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+    )\n+    X_imputed = imputer.fit_transform(X)\n+    if np.isnan(fill_value):\n+        expected = np.array([fill_value, 2, 5, fill_value])\n+    else:\n+        expected = np.full(X.shape[1], fill_value)\n+    assert_array_equal(imputer.initial_imputer_.statistics_, expected)\n     X_imputed = imputer.transform(X)\n     assert_allclose(X_imputed[:, 1], 0)\n \n+@pytest.mark.parametrize(\"fill_value\", [100, -999, np.nan])\n+def test_iterative_imputer_with_custom_fill_value(fill_value):\n+    \"\"\"Test IterativeImputer with initial_strategy='constant' and various fill_value.\"\"\"\n+    X = np.array([\n+        [-1, 2, np.nan, -1],\n+        [4, -1, 5, -1],\n+        [6, 7, -1, -1],\n+        [8, 9, 0, -1]\n+    ])\n+\n+    imputer = IterativeImputer(\n+        missing_values=-1,\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+    )\n+    X_imputed = imputer.fit_transform(X)\n+    if np.isnan(fill_value):\n+        expected = np.array([fill_value, 2, 5, fill_value])\n+    else:\n+        expected = np.full(X.shape[1], fill_value)\n+    assert_array_equal(imputer.initial_imputer_.statistics_, expected)\n+\n \n @pytest.mark.parametrize(\"keep_empty_features\", [True, False])\n def test_knn_imputer_keep_empty_features(keep_empty_features):\n",
  "scikit-learn__scikit-learn-25931": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3714d1a..1ec5d9e 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -338,4 +338,51 @@ def test_base_estimator_property_deprecated():\n         \"will be removed in 1.4. Use `estimator_` instead.\"\n     )\n     with pytest.warns(FutureWarning, match=warn_msg):\n-        model.base_estimator_\n+        model.base_estimator_\n+\n+def test_iforest_preserve_feature_names():\n+    \"\"\"Check that feature names are preserved when contamination is not \"auto\".\n+\n+    Feature names are required for consistency checks during scoring.\n+\n+    Non-regression test for Issue #25844\n+    \"\"\"\n+    import pandas as pd\n+    import numpy as np\n+    import warnings\n+\n+    rng = np.random.RandomState(0)\n+\n+    # Single column DataFrame\n+    X_single_col = pd.DataFrame(data=rng.randn(4), columns=[\"a\"])\n+    model = IsolationForest(random_state=0, contamination=0.05)\n+\n+    with warnings.catch_warnings():\n+        warnings.simplefilter(\"error\", UserWarning)\n+        model.fit(X_single_col)\n+\n+    # Multi-column DataFrame\n+    X_multi_col = pd.DataFrame(data=rng.randn(4, 2), columns=[\"a\", \"b\"])\n+    model = IsolationForest(random_state=0, contamination=0.1)\n+\n+    with warnings.catch_warnings():\n+        warnings.simplefilter(\"error\", UserWarning)\n+        model.fit(X_multi_col)\n+\n+    # Check with contamination set to \"auto\"\n+    X_single_col_auto = pd.DataFrame(data=rng.randn(4), columns=[\"a\"])\n+    model = IsolationForest(random_state=0, contamination=\"auto\")\n+    model.fit(X_single_col_auto)\n+\n+    # Check if no warnings are raised with numpy array input\n+    X_numpy = rng.randn(4, 2)\n+    model = IsolationForest(random_state=0, contamination=0.05)\n+    model.fit(X_numpy)\n+    model.fit(X, y)\n+\n+    warn_msg = (\n+        \"Attribute `base_estimator_` was deprecated in version 1.2 and \"\n+        \"will be removed in 1.4. Use `estimator_` instead.\"\n+    )\n+    with pytest.warns(FutureWarning, match=warn_msg):\n+        model.base_estimator_\n",
  "scikit-learn__scikit-learn-25973": "",
  "scikit-learn__scikit-learn-26323": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex b52e888..263af7e 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -22,6 +22,10 @@ from sklearn.compose import (\n from sklearn.exceptions import NotFittedError\n from sklearn.preprocessing import FunctionTransformer\n from sklearn.preprocessing import StandardScaler, Normalizer, OneHotEncoder\n+from sklearn.feature_selection import VarianceThreshold\n+import pandas as pd\n+import pytest\n+import numpy as np\n \n \n class Trans(TransformerMixin, BaseEstimator):\n@@ -2177,11 +2181,77 @@ def test_raise_error_if_index_not_aligned():\n             (\"num2\", reset_index_transformer, [\"b\"]),\n         ],\n     )\n+\n+def test_remainder_set_output():\n+    \"\"\"Check that the output is set for the remainder.\n+    \n+    Non-regression test for the issue regarding ColumnTransformer's set_output\n+    ignoring the remainder when it's an estimator.\n+    \"\"\"\n+    df = pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3]})\n+\n+    # Test case where remainder is an estimator\n+    ct1 = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct1.set_output(transform=\"pandas\")\n+    out1 = ct1.fit_transform(df)\n+    pd.testing.assert_frame_equal(out1, df)\n+\n+    # Test case where each column is explicitly defined\n+    ct2 = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        (VarianceThreshold(), make_column_selector(dtype_exclude=bool)),\n+        verbose_feature_names_out=False,\n+    )\n+    ct2.set_output(transform=\"pandas\")\n+    out2 = ct2.fit_transform(df)\n+    pd.testing.assert_frame_equal(out2, df)\n+\n+    # Check default transformation\n+    ct1.set_output(transform=\"default\")\n+    out1_default = ct1.fit_transform(df)\n+    assert isinstance(out1_default, np.ndarray)\n     ct.set_output(transform=\"pandas\")\n     msg = (\n         \"Concatenating DataFrames from the transformer's output lead to\"\n         \" an inconsistent number of samples. The output may have Pandas\"\n         \" Indexes that do not match.\"\n     )\n+\n+def test_remainder_set_output():\n+    \"\"\"Check that the output is set for the remainder.\n+    \n+    Non-regression test for the issue regarding ColumnTransformer's set_output\n+    ignoring the remainder when it's an estimator.\n+    \"\"\"\n+    df = pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3]})\n+\n+    # Test case where remainder is an estimator\n+    ct1 = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct1.set_output(transform=\"pandas\")\n+    out1 = ct1.fit_transform(df)\n+    pd.testing.assert_frame_equal(out1, df)\n+\n+    # Test case where each column is explicitly defined\n+    ct2 = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        (VarianceThreshold(), make_column_selector(dtype_exclude=bool)),\n+        verbose_feature_names_out=False,\n+    )\n+    ct2.set_output(transform=\"pandas\")\n+    out2 = ct2.fit_transform(df)\n+    pd.testing.assert_frame_equal(out2, df)\n+\n+    # Check default transformation\n+    ct1.set_output(transform=\"default\")\n+    out1_default = ct1.fit_transform(df)\n+    assert isinstance(out1_default, np.ndarray)\n     with pytest.raises(ValueError, match=msg):\n         ct.fit_transform(X)\n",
  "scikit-learn__scikit-learn-9288": "diff --git a/sklearn/cluster/tests/test_k_means.py b/sklearn/cluster/tests/test_k_means.py\nindex abeeff0..006c1f5 100644\n--- a/sklearn/cluster/tests/test_k_means.py\n+++ b/sklearn/cluster/tests/test_k_means.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for K-means\"\"\"\n import sys\n \n@@ -944,8 +945,23 @@ def test_k_means_empty_cluster_relocated():\n     assert len(set(km.labels_)) == 2\n     assert_allclose(km.cluster_centers_, [[-1], [1]])\n \n+def test_result_of_kmeans_inertia_equal_in_diff_n_jobs():\n+    from sklearn.cluster import KMeans\n+    from sklearn.datasets import make_blobs\n+\n+    # Generate some data\n+    X, _ = make_blobs(n_samples=1000, centers=10, n_features=2, random_state=2)\n+\n+    # Test KMeans with various n_jobs values\n+    inertia_values = []\n+    for n_jobs in range(1, 5):\n+        kmeans = KMeans(n_clusters=10, random_state=2, n_jobs=n_jobs)\n+        kmeans.fit(X)\n+        inertia_values.append(kmeans.inertia_)\n \n-def test_minibatch_kmeans_partial_fit_int_data():\n+    # Assert that all inertia values are the same\n+    assert inertia_values.count(inertia_values[0]) == len(inertia_values), \\\n+        f\"Inertia values differ for different n_jobs settings: {inertia_values}\"\n     # Issue GH #14314\n     X = np.array([[-1], [1]], dtype=np.int)\n     km = MiniBatchKMeans(n_clusters=2)\n",
  "sphinx-doc__sphinx-10323": "diff --git a/tests/test_directive_code.py b/tests/test_directive_code.py\nindex 949c70e..73da709 100644\n--- a/tests/test_directive_code.py\n+++ b/tests/test_directive_code.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the code-block directive.\"\"\"\n \n import os\n@@ -250,6 +251,26 @@ def test_LiteralIncludeReader_dedent(literal_inc_path):\n                        \"    pass\\n\"\n                        \"\\n\")\n \n+@pytest.mark.xfail(reason=\"Prepend indentation issue may not be resolved\")\n+def test_LiteralIncludeReader_prepend_with_indent(literal_inc_path):\n+    # Scenario: Prepend with leading whitespace that should be preserved\n+    options = {\n+        'lines': '19-23',  # corresponds to the inner plugin block\n+        'prepend': '      <plugin>',\n+        'dedent': 6\n+    }\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    assert content == (\n+        \"      <plugin>\\n\"\n+        \"      <groupId>com.github.ekryd.sortpom</groupId>\\n\"\n+        \"      <artifactId>sortpom-maven-plugin</artifactId>\\n\"\n+        \"      <version>2.15.0</version>\\n\"\n+        \"      <configuration>\\n\"\n+        \"        <verifyFailOn>strict</verifyFailOn>\\n\"\n+        \"      </configuration>\\n\"\n+        \"    </plugin>\\n\"\n+    )\n \n @pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n def test_LiteralIncludeReader_tabwidth(testroot):\n",
  "sphinx-doc__sphinx-10449": "",
  "sphinx-doc__sphinx-10466": "diff --git a/tests/test_build_gettext.py b/tests/test_build_gettext.py\nindex a6fc946..c6340ad 100644\n--- a/tests/test_build_gettext.py\n+++ b/tests/test_build_gettext.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the build process with gettext builder with the test root.\"\"\"\n \n import gettext\n@@ -5,6 +6,7 @@ import os\n import re\n import subprocess\n from subprocess import PIPE, CalledProcessError\n+from sphinx.builders.gettext import Catalog, MsgOrigin\n \n import pytest\n \n",
  "sphinx-doc__sphinx-10673": "diff --git a/tests/test_environment_toctree.py b/tests/test_environment_toctree.py\nindex d3bf6a2..06a0bb4 100644\n--- a/tests/test_environment_toctree.py\n+++ b/tests/test_environment_toctree.py\n@@ -337,6 +337,16 @@ def test_get_toctree_for_includehidden(app):\n                  [list_item, compact_paragraph, reference, \"foo.1\"],\n                  [list_item, compact_paragraph, reference, \"foo.2\"]))\n \n+@pytest.mark.sphinx('html', testroot='toctree-index')\n+def test_toctree_with_indices(app):\n+    app.build()\n+    toctree = app.env.tocs['index']\n+    # Verify the toctree includes references to the special indices\n+    assert_node(toctree[1][1], addnodes.toctree,\n+                caption=\"Indices and tables\", glob=False, hidden=False,\n+                titlesonly=False, maxdepth=1,\n+                entries=[(None, 'genindex'), (None, 'modindex'), (None, 'search')])\n+\n     assert_node(toctree[1][0][0][0], reference, refuri=\"foo\", secnumber=[1])\n     assert_node(toctree[1][0][1][0][0][0], reference, refuri=\"quux\", secnumber=[1, 1])\n     assert_node(toctree[1][0][1][1][0][0], reference, refuri=\"foo#foo-1\", secnumber=[1, 2])\n@@ -345,4 +355,4 @@ def test_get_toctree_for_includehidden(app):\n     assert_node(toctree[1][2][0][0], reference, refuri=\"http://sphinx-doc.org/\")\n \n     assert_node(toctree[2],\n-                [bullet_list, list_item, compact_paragraph, reference, \"baz\"])\n+                [bullet_list, list_item, compact_paragraph, reference, \"baz\"])\n",
  "sphinx-doc__sphinx-7440": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 975a00f..e439d37 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -95,6 +95,39 @@ def test_get_full_qualified_name():\n     assert domain.get_full_qualified_name(node) == 'ls.-l'\n \n \n+from sphinx import addnodes\n+from sphinx.testing.util import assert_node\n+from sphinx.domains.std import StandardDomain\n+\n+...\n+\n+def test_glossary_case_sensitivity(app):\n+    text = (\".. glossary::\\n\"\n+            \"\\n\"\n+            \"   MySQL\\n\"\n+            \"       A relational database management system\\n\"\n+            \"\\n\"\n+            \"   mysql\\n\"\n+            \"       A command-line client for MySQL\\n\")\n+\n+    # Parse the glossary text\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (\n+        [glossary, definition_list, ([definition_list_item, ([term, (\"MySQL\", index)],\n+                                                             definition)],\n+                                     [definition_list_item, ([term, (\"mysql\", index)],\n+                                                             definition)])],\n+    ))\n+    assert_node(doctree[0][0][0][0][1],\n+                entries=[(\"single\", \"MySQL\", \"term-MySQL\", \"main\", None)])\n+    assert_node(doctree[0][0][1][0][1],\n+                entries=[(\"single\", \"mysql\", \"term-mysql\", \"main\", None)])\n+\n+    # Verify terms are considered distinct in index\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert (\"MySQL\", \"MySQL\", \"term\", \"index\", \"term-MySQL\", -1) in objects\n+    assert (\"mysql\", \"mysql\", \"term\", \"index\", \"term-mysql\", -1) in objects\n+\n def test_glossary(app):\n     text = (\".. glossary::\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-7757": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex b3053d1..8a88448 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -325,6 +325,17 @@ def test_signature_from_str_complex_annotations():\n \n def test_signature_from_str_kwonly_args():\n     sig = inspect.signature_from_str('(a, *, b)')\n+\n+def test_signature_from_str_positional_only_default():\n+    # Test case for positional-only parameter with default value\n+    sig = inspect.signature_from_str('(a, b=0, /, c=1)')\n+    assert list(sig.parameters.keys()) == ['a', 'b', 'c']\n+    assert sig.parameters['a'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['a'].default == Parameter.empty\n+    assert sig.parameters['b'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['b'].default == 0\n+    assert sig.parameters['c'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['c'].default == 1\n     assert list(sig.parameters.keys()) == ['a', 'b']\n     assert sig.parameters['a'].kind == Parameter.POSITIONAL_OR_KEYWORD\n     assert sig.parameters['a'].default == Parameter.empty\n",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..6df74ac 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -32,6 +33,8 @@ def test_MockModule():\n     assert repr(mock) == 'mocked_module'\n \n \n+from typing import TypeVar\n+\n def test_MockObject():\n     mock = _MockObject()\n     assert isinstance(mock.some_attr, _MockObject)\n@@ -47,6 +50,16 @@ def test_MockObject():\n \n     obj = SubClass()\n     assert SubClass.__doc__ == \"docstring of SubClass\"\n+\n+    # Test case for generically-typed class\n+    T = TypeVar('T')\n+\n+    class GenericSubClass(mock.SomeClass[T]):\n+        \"\"\"docstring of GenericSubClass\"\"\"\n+\n+    generic_obj = GenericSubClass()\n+    assert GenericSubClass.__doc__ == \"docstring of GenericSubClass\"\n+    assert isinstance(generic_obj, GenericSubClass)\n     assert isinstance(obj, SubClass)\n     assert obj.method() == \"string\"\n     assert isinstance(obj.other_method(), SubClass)\n",
  "sphinx-doc__sphinx-7910": "",
  "sphinx-doc__sphinx-7985": "",
  "sphinx-doc__sphinx-8035": "diff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex ad1d950..0e1464e 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_private_members\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -11,6 +12,7 @@\n import pytest\n \n from test_ext_autodoc import do_autodoc\n+from sphinx.ext.autodoc import ALL\n \n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n",
  "sphinx-doc__sphinx-8120": "diff --git a/tests/test_intl.py b/tests/test_intl.py\nindex 58339b1..22f33ef 100644\n--- a/tests/test_intl.py\n+++ b/tests/test_intl.py\n@@ -1281,11 +1281,81 @@ def test_image_glob_intl_using_figure_language_filename(app):\n                 candidates={'application/pdf': 'subdir/svgimg.pdf',\n                             'image/svg+xml': 'subdir/svgimg.svg'})\n \n+\n+from babel.messages.catalog import Catalog\n+import pytest\n+from sphinx import locale\n+from sphinx.util import pofile\n+\n+@pytest.mark.sphinx('html', testroot='basic', confoverrides={'language': 'da'})\n+def test_custom_translation_da(make_app, app_params, sphinx_test_tempdir):\n+    try:\n+        # clear translators cache\n+        locale.translators.clear()\n+\n+        # prepare message catalog (.po)\n+        locale_dir = sphinx_test_tempdir / 'basic' / 'locales' / 'da' / 'LC_MESSAGES'\n+        locale_dir.makedirs()\n+        with (locale_dir / 'sphinx.po').open('wb') as f:\n+            catalog = Catalog()\n+            catalog.add('Fig. %s', 'Foobar %s')\n+            catalog.add('Listing %s', 'Whatever %s')\n+            pofile.write_po(f, catalog)\n+\n+        # construct application and convert po file to .mo\n+        args, kwargs = app_params\n+        app = make_app(*args, **kwargs)\n+        assert (locale_dir / 'sphinx.mo').exists()\n+        assert app.translator.gettext('Fig. %s') == 'Foobar %s'\n+        assert app.translator.gettext('Listing %s') == 'Whatever %s'\n+\n+        app.build()\n+        content = (app.outdir / 'index.html').read_text()\n+        assert 'Foobar 1' in content\n+        assert 'Whatever 1' in content\n+    finally:\n+        locale.translators.clear()\n+\n     assert isinstance(doctree[0][3], nodes.figure)\n     assert_node(doctree[0][3][0], nodes.image, uri='subdir/svgimg.*',\n                 candidates={'application/pdf': 'subdir/svgimg.pdf',\n                             'image/svg+xml': 'subdir/svgimg.svg'})\n \n \n+from babel.messages.catalog import Catalog\n+import pytest\n+from sphinx import locale\n+from sphinx.util import pofile\n+\n+@pytest.mark.sphinx('html', testroot='basic', confoverrides={'language': 'da'})\n+def test_custom_translation_da(make_app, app_params, sphinx_test_tempdir):\n+    try:\n+        # clear translators cache\n+        locale.translators.clear()\n+\n+        # prepare message catalog (.po)\n+        locale_dir = sphinx_test_tempdir / 'basic' / 'locales' / 'da' / 'LC_MESSAGES'\n+        locale_dir.makedirs()\n+        with (locale_dir / 'sphinx.po').open('wb') as f:\n+            catalog = Catalog()\n+            catalog.add('Fig. %s', 'Foobar %s')\n+            catalog.add('Listing %s', 'Whatever %s')\n+            pofile.write_po(f, catalog)\n+\n+        # construct application and convert po file to .mo\n+        args, kwargs = app_params\n+        app = make_app(*args, **kwargs)\n+        assert (locale_dir / 'sphinx.mo').exists()\n+        assert app.translator.gettext('Fig. %s') == 'Foobar %s'\n+        assert app.translator.gettext('Listing %s') == 'Whatever %s'\n+\n+        app.build()\n+        content = (app.outdir / 'index.html').read_text()\n+        assert 'Foobar 1' in content\n+        assert 'Whatever 1' in content\n+    finally:\n+        locale.translators.clear()\n+\n+\n def getwarning(warnings):\n-    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n+    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n",
  "sphinx-doc__sphinx-8269": "",
  "sphinx-doc__sphinx-8459": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex d1881df..b659be9 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_configs\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -8,6 +9,74 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+import pytest\n+import sys\n+from sphinx.testing.path import path\n+\n+@pytest.mark.sphinx('text', testroot='autodoc_type_aliases', confoverrides={\n+    'autodoc_typehints': 'description',\n+    'autodoc_type_aliases': {'JSONObject': 'types.JSONObject'},\n+})\n+def test_autodoc_type_aliases_with_description(app, status, warning):\n+    (app.srcdir / 'types.py').write_text(\n+        \"from typing import Any, Dict\\n\"\n+        \"\\n\"\n+        \"JSONObject = Dict[str, Any]\\n\"\n+        \"\\n\"\n+        \"def sphinx_doc(data: JSONObject) -> JSONObject:\\n\"\n+        \"    \\\"\\\"\\\"Does it work.\\n\"\n+        \"\\n\"\n+        \"    Args:\\n\"\n+        \"        data: Does it args.\\n\"\n+        \"\\n\"\n+        \"    Returns:\\n\"\n+        \"        Does it work in return.\\n\"\n+        \"    \\\"\\\"\\\"\\n\"\n+        \"    return {}\\n\"\n+    )\n+\n+    (app.srcdir / 'conf.py').write_text(\n+        \"autodoc_typehints = 'description'\\n\"\n+        \"autodoc_type_aliases = {\\n\"\n+        \"    'JSONObject': 'types.JSONObject',\\n\"\n+        \"}\\n\"\n+    )\n+\n+    (app.srcdir / 'index.rst').write_text('.. automodule:: types\\n   :members:\\n')\n+\n+    app.build()\n+    content = (app.outdir / 'index.txt').read_text()\n+    assert 'data (types.JSONObject)' in content\n+    assert 'Return type\\n   types.JSONObject' in content\n+\n+@pytest.mark.sphinx('text', testroot='autodoc_type_aliases', confoverrides={\n+    'autodoc_typehints': 'signature',\n+    'autodoc_type_aliases': {'JSONObject': 'types.JSONObject'},\n+})\n+def test_autodoc_type_aliases_with_signature(app, status, warning):\n+    (app.srcdir / 'types.py').write_text(\n+        \"from typing import Any, Dict\\n\"\n+        \"\\n\"\n+        \"JSONObject = Dict[str, Any]\\n\"\n+        \"\\n\"\n+        \"def sphinx_doc(data: JSONObject) -> JSONObject:\\n\"\n+        \"    \\\"\\\"\\\"Does it work.\\n\"\n+        \"\\n\"\n+        \"    Args:\\n\"\n+        \"        data: Does it args.\\n\"\n+        \"\\n\"\n+        \"    Returns:\\n\"\n+        \"        Does it work in return.\\n\"\n+        \"    \\\"\\\"\\\"\\n\"\n+        \"    return {}\\n\"\n+    )\n+\n+    (app.srcdir / 'index.rst').write_text('.. automodule:: types\\n   :members:\\n')\n+\n+    app.build()\n+    content = (app.outdir / 'index.txt').read_text()\n+    assert 'types.sphinx_doc(data: types.JSONObject) -> types.JSONObject' in content\n+\n import platform\n import sys\n \n",
  "sphinx-doc__sphinx-8475": "",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8721": "",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex 3c31d3d..d8d25dd 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -515,8 +515,16 @@ def test_dict_customtype():\n     # Type is unsortable, just check that it does not crash\n     assert \"<CustomType(2)>: 2\" in description\n \n+def test_object_description_enum():\n+    import enum\n \n-def test_getslots():\n+    class MyEnum(enum.Enum):\n+        ValueA = 10\n+        ValueB = 20\n+\n+    # Check if the object_description of an enum member is correctly formatted\n+    assert inspect.object_description(MyEnum.ValueA) == \"MyEnum.ValueA\"\n+    assert inspect.object_description(MyEnum.ValueB) == \"MyEnum.ValueB\"\n     class Foo:\n         pass\n \n",
  "sphinx-doc__sphinx-9320": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\nindex ff8df08..ec0cb7d 100644\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -10,6 +10,7 @@\n \n import time\n from io import StringIO\n+import sys\n \n import pytest\n \n@@ -241,7 +242,23 @@ def test_default_filename(tempdir):\n     exec(conffile.read_text(), ns)\n \n \n-def test_extensions(tempdir):\n+def test_exits_when_existing_confpy(monkeypatch):\n+    # The code detects existing conf.py with path.isfile()\n+    # so we mock it as True with pytest's monkeypatch\n+    def mock_isfile(path):\n+        return True\n+    monkeypatch.setattr(path, 'isfile', mock_isfile)\n+\n+    # Mock input to simulate pressing 'Enter'\n+    def mock_input(prompt):\n+        return ''\n+    monkeypatch.setattr('builtins.input', mock_input)\n+\n+    d = {}\n+\n+    # Capture the SystemExit exception\n+    with pytest.raises(SystemExit):\n+        qs.ask_user(d)\n     qs.main(['-q', '-p', 'project_name', '-a', 'author',\n              '--extensions', 'foo,bar,baz', tempdir])\n \n",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..285ce81 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -54,6 +54,7 @@ from sphinx.pycode import ast\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n     (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n+    (\"(1,)\", \"(1,)\"),                             # Tuple (single element)\n     (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n",
  "sphinx-doc__sphinx-9591": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 29731ea..3ac2c42 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -844,6 +844,34 @@ def test_pyproperty(app):\n     assert 'Class.prop1' in domain.objects\n     assert domain.objects['Class.prop1'] == ('index', 'Class.prop1', 'property', False)\n     assert 'Class.prop2' in domain.objects\n+    # Test for cross-referencing in property type annotations\n+    text_with_cross_ref = (\".. py:class:: Square\\n\"\n+                           \"\\n\"\n+                           \"   .. py:property:: end\\n\"\n+                           \"      :type: Point\\n\"\n+                           \"\\n\"\n+                           \".. py:class:: Rectangle\\n\"\n+                           \"\\n\"\n+                           \"   .. py:property:: end\\n\"\n+                           \"      :type: Point\\n\")\n+\n+    doctree_with_cross_ref = restructuredtext.parse(app, text_with_cross_ref)\n+\n+    # Test Square class\n+    assert_node(doctree_with_cross_ref[0][1][0], addnodes.index,\n+                entries=[('single', 'end (Square property)', 'Square.end', '', None)])\n+    assert_node(doctree_with_cross_ref[0][1][1], ([desc_signature, ([desc_annotation, \"property \"],\n+                                                                    [desc_name, \"end\"],\n+                                                                    [pending_xref, \"\", [desc_annotation, \"Point\"]])],\n+                                                  [desc_content, ()]))\n+\n+    # Test Rectangle class\n+    assert_node(doctree_with_cross_ref[1][1][0], addnodes.index,\n+                entries=[('single', 'end (Rectangle property)', 'Rectangle.end', '', None)])\n+    assert_node(doctree_with_cross_ref[1][1][1], ([desc_signature, ([desc_annotation, \"property \"],\n+                                                                    [desc_name, \"end\"],\n+                                                                    [pending_xref, \"\", [desc_annotation, \"Point\"]])],\n+                                                  [desc_content, ()]))\n     assert domain.objects['Class.prop2'] == ('index', 'Class.prop2', 'property', False)\n \n \n",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..d7dacef 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -755,8 +755,9 @@ def test_pymethod_options(app):\n     assert domain.objects['Class.meth4'] == ('index', 'Class.meth4', 'method', False)\n \n     # :property:\n+    # :property: - Fix to ensure no parentheses for properties\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
  "sphinx-doc__sphinx-9711": "",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..579e650 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -235,8 +235,29 @@ def test_Point2D():\n     assert p1.distance(p2) == sqrt(61)/2\n     assert p2.distance(p3) == sqrt(17)/2\n \n-\n-def test_issue_9214():\n+def test_issue_11617():\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point2D(2, 0)\n+    \n+    assert p1.distance(p2) == sqrt(5)\n+\n+def test_2d_distance():\n+    p1 = Point2D(1, 0)\n+    p2 = Point2D(4, 3)\n+    \n+    assert p1.distance(p2) == 5\n+\n+def test_3d_distance():\n+    p1 = Point3D(1, 2, 3)\n+    p2 = Point3D(4, 6, 8)\n+    \n+    assert p1.distance(p2) == sqrt(50)\n+\n+def test_mixed_dimension_distance():\n+    p1 = Point3D(1, 2, 3)\n+    p2 = Point2D(4, 6)\n+    \n+    assert p1.distance(p2) == sqrt(29)\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n     p3 = Point3D(7, 2, 3)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..9868d78 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -741,6 +741,16 @@ def test_special_printers():\n     assert isinstance(func1(), mpi)\n     assert isinstance(func2(), mpi)\n \n+from sympy.utilities.lambdify import implemented_function\n+from sympy import Float\n+\n+def test_issue_12092():\n+    f = implemented_function('f', lambda x: x**2)\n+    g = implemented_function('g', lambda x: 2 * x)\n+    assert f(f(2)).evalf() == Float(16)\n+    assert g(g(2)).evalf() == Float(8)\n+    assert f(g(2)).evalf() == Float(16)  # f(g(2)) should equal f(4) = 16\n+\n def test_true_false():\n     # We want exact is comparison here, not just ==\n     assert lambdify([], true)() is True\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..8de9302 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,8 +83,17 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n+from sympy import Identity, Sum, symbols\n \n-def test_Identity_doit():\n+def test_Identity_sum():\n+    n = symbols('n', integer=True, positive=True)\n+    In = Identity(n)\n+\n+    # This should be true for any size of identity matrix.\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n+\n+    # Specific test case for a 3x3 identity matrix\n+    assert Sum(Sum(In[i, j], (i, 0, 2)), (j, 0, 2)).doit() == 3\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..2ef209c 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -330,6 +330,16 @@ def test_args():\n     assert p._array_form == [3, 2, 0, 1, 5, 4]\n     p = Permutation((0, 3, 1, 2))\n     assert p._cyclic_form is None\n+\n+    # Test non-disjoint cycles\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+    assert Permutation([[0, 2], [2, 0]]) == Permutation([0, 1, 2])\n+    assert Permutation([[1, 2], [2, 3], [3, 1]]) == Permutation([0, 3, 1, 2])\n+    assert Permutation([[0, 1], [1, 2], [0, 1]]) == Permutation([1, 0, 2])\n+    \n+    # Edge case with empty cycles and identity permutation\n+    assert Permutation([[], []]) == Permutation([])\n+    assert Permutation([[], [0]]) == Permutation([0])\n     assert p._array_form == [0, 3, 1, 2]\n     assert Permutation([0]) == Permutation((0, ))\n     assert Permutation([[0], [1]]) == Permutation(((0, ), (1, ))) == \\\n",
  "sympy__sympy-13031": "",
  "sympy__sympy-13372": "diff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\nindex e95146a..df3085c 100644\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -170,6 +170,14 @@ def test_evalf_ramanujan():\n \n # Input that for various reasons have failed at some point\n \n+from sympy import Mul, Max, NS\n+from sympy.abc import x, y\n+\n+def test_evalf_issue_13076():\n+    # Original test from the issue\n+    assert NS(Mul(Max(0, y), x, evaluate=False).evalf()) == 'x*Max(0, y)'\n+    # Additional test to verify different argument order does not raise\n+    assert NS(Mul(x, Max(0, y), evaluate=False).evalf()) == 'x*Max(0, y)'\n \n def test_evalf_bugs():\n     assert NS(sin(1) + exp(-10**10), 10) == NS(sin(1), 10)\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..c92d62f 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -200,6 +200,22 @@ def test_tanh():\n \n     assert tanh(k*pi*I) == 0\n     assert tanh(17*k*pi*I) == 0\n+    from sympy import log, tan, coth, Symbol\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+\n+    # Test cases for substitution that previously caused issues\n+    assert e.subs(x, 2) == coth(log(tan(2)))\n+    assert e.subs(x, 3) == coth(log(tan(3)))\n+    assert e.subs(x, 5) == coth(log(tan(5)))\n+    assert e.subs(x, 6) == coth(log(tan(6)))\n+    assert e.subs(x, 8) == coth(log(tan(8)))\n+    assert e.subs(x, 9) == coth(log(tan(9)))\n+    assert e.subs(x, 11) == coth(log(tan(11)))\n+    assert e.subs(x, 12) == coth(log(tan(12)))\n+    assert e.subs(x, 13) == coth(log(tan(13)))\n+    assert e.subs(x, 15) == coth(log(tan(15)))\n+    assert e.subs(x, 18) == coth(log(tan(18)))\n \n     assert tanh(k*pi*I/2) == tan(k*pi/2)*I\n \n",
  "sympy__sympy-13615": "",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..af62f9e 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -195,6 +195,44 @@ def test_row_insert():\n         assert flatten(eye_Shaping(3).row_insert(i, r4).col(0).tolist()) == l\n \n def test_col_insert():\n+    # issue 13643 - Test inserting a matrix in the middle of an identity matrix\n+    M = eye_Shaping(6)\n+    V = Matrix([[2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2]])\n+    expected_result = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert M.col_insert(3, V) == expected_result\n+\n+    # Additional test cases for various scenarios\n+    # Test inserting at the beginning\n+    M_start = eye_Shaping(3)\n+    V_start = Matrix([[9], [9], [9]])\n+    expected_start = Matrix([\n+        [9, 1, 0, 0],\n+        [9, 0, 1, 0],\n+        [9, 0, 0, 1]\n+    ])\n+    assert M_start.col_insert(0, V_start) == expected_start\n+\n+    # Test inserting at the end\n+    M_end = eye_Shaping(3)\n+    V_end = Matrix([[5, 5], [5, 5], [5, 5]])\n+    expected_end = Matrix([\n+        [1, 0, 0, 5, 5],\n+        [0, 1, 0, 5, 5],\n+        [0, 0, 1, 5, 5]\n+    ])\n+    assert M_end.col_insert(3, V_end) == expected_end\n+\n+    # Test inserting an empty matrix\n+    M_empty = eye_Shaping(3)\n+    V_empty = Matrix([])\n+    assert M_empty.col_insert(1, V_empty) == M_empty\n     c4 = Matrix([4, 4, 4])\n     for i in range(-4, 5):\n         l = [0, 0, 0]\n",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..993bbb4 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -677,8 +677,25 @@ def test_Poly_mul():\n     assert Poly(x, x) * 2 == Poly(2*x, x)\n     assert 2 * Poly(x, x) == Poly(2*x, x)\n \n-\n-def test_Poly_sqr():\n+def test_issue_multiplication_with_Poly():\n+    from sympy import Poly, Symbol, S\n+\n+    x = Symbol('x')\n+    \n+    # Original issue cases\n+    assert Poly(x)*x == Poly(x**2, x, domain='ZZ')\n+    assert x*Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert -2*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2)*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert Poly(x)*S(-2) == Poly(-2*x, x, domain='ZZ')\n+    \n+    # Additional cases\n+    assert Poly(x, x) * x**3 == Poly(x**4, x, domain='ZZ')\n+    assert x**3 * Poly(x, x) == Poly(x**4, x, domain='ZZ')\n+    assert Poly(x**2, x) * x == Poly(x**3, x, domain='ZZ')\n+    assert x * Poly(x**2, x) == Poly(x**3, x, domain='ZZ')\n+    assert Poly(2*x + 1, x) * x == Poly(2*x**2 + x, x, domain='ZZ')\n+    assert x * Poly(2*x + 1, x) == Poly(2*x**2 + x, x, domain='ZZ')\n     assert Poly(x*y, x, y).sqr() == Poly(x**2*y**2, x, y)\n \n \n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..a9b4570 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -54,6 +54,29 @@ def test_printmethod():\n             return \"foo\"\n     assert latex(R(x)) == \"foo\"\n \n+def test_latex_mul_symbol():\n+    # Original test cases\n+    assert latex(3*x**2*y, mul_symbol='\\\\,') == r\"3\\,x^{2}\\,y\"\n+    assert latex(1.5*3**x, mul_symbol='\\\\,') == r\"1.5 \\cdot 3^{x}\"\n+\n+    # Additional test cases to verify fix\n+    # Testing with a thin space symbol\n+    assert latex(4*x**3*z**2, mul_symbol='\\\\,') == r\"4\\,x^{3}\\,z^{2}\"\n+    \n+    # Testing with a different custom symbol for multiplication\n+    custom_symbol = r\" \\ast \"  # Asterisk for multiplication\n+    assert latex(2*x*y, mul_symbol=custom_symbol) == r\"2 \\ast x \\ast y\"\n+    \n+    # Testing with numbers and expressions\n+    assert latex(3.5*x**5*y**2, mul_symbol='\\\\,') == r\"3.5\\,x^{5}\\,y^{2}\"\n+    \n+    # Check that no symbol is inserted if an empty string is provided\n+    assert latex(3*x**2*y, mul_symbol='') == r\"3x^{2}y\"\n+    \n+    # Ensuring backward compatibility with the default behavior\n+    assert latex(2*x*y) == \"2 x y\"\n+    assert latex(2*x*y, mul_symbol='dot') == r\"2 \\cdot x \\cdot y\"\n+\n \n def test_latex_basic():\n     assert latex(1 + x) == \"x + 1\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..34b9b59 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -307,8 +307,23 @@ def test_tolist():\n     m = Matrix(lst)\n     assert m.tolist() == lst\n \n-\n-def test_as_mutable():\n+from sympy import symbols, Matrix\n+\n+def test_issue_13835():\n+    # Test the determinant of a matrix containing symbolic elements\n+    a = symbols('a')\n+    M = lambda n: Matrix([[i + a*j for i in range(n)] for j in range(n)])\n+    \n+    # Verify the behavior for the problematic cases described in the issue\n+    assert M(5).det() == 0, \"Expected determinant to be 0 for matrix size 5\"\n+    assert M(6).det() == 0, \"Expected determinant to be 0 for matrix size 6\"\n+    assert M(7).det() == 0, \"Expected determinant to be 0 for matrix size 7\"\n+\n+    # Additional tests for smaller matrices\n+    assert M(1).det() == 0, \"Expected determinant to be 0 for matrix size 1\"\n+    assert M(2).det() == -a, \"Expected determinant to be -a for matrix size 2\"\n+    assert isinstance(M(3).det(), (int, float, symbols)), \"Expected a symbolic expression for matrix size 3\"\n+    assert M(4).det() == 0, \"Expected determinant to be 0 for matrix size 4\"\n     assert zeros(0, 3).as_mutable() == zeros(0, 3)\n     assert zeros(0, 3).as_immutable() == ImmutableMatrix(zeros(0, 3))\n     assert zeros(3, 0).as_immutable() == ImmutableMatrix(zeros(3, 0))\n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..0d565d3 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -708,9 +708,74 @@ def test_issue_10003():\n     G = Gamma('g', 1, 2)\n     assert P(X < -1) == S.Zero\n     assert P(G < -1) == S.Zero\n+from sympy import symbols, Piecewise, exp, sqrt, pi, gamma, uppergamma, lowergamma, hyper, erf, erfc, beta_fn\n+from sympy.stats import Arcsin, Dagum, Erlang, Frechet, Gamma, GammaInverse, Kumaraswamy, Laplace, Logistic, Nakagami, StudentT, UniformSum, density, cdf\n+from sympy.utilities.randtest import verify_numerically as tn\n \n def test_precomputed_cdf():\n     x = symbols(\"x\", real=True, finite=True)\n+\n+def test_precomputed_cdf_issue():\n+    x = symbols(\"x\", real=True, finite=True)\n+\n+    # Test Arcsin\n+    a, b = 0, 3\n+    X = Arcsin('x', a, b)\n+    assert cdf(X)(1).simplify() == Piecewise((0, x < a), (2/pi*sqrt((x-a)/(b-a)), x <= b), (1, True)).subs(x, 1)\n+\n+    # Test Dagum\n+    p, a, b = S(1)/3, S(1)/5, 2\n+    X = Dagum('x', p, a, b)\n+    assert tn(cdf(X)(3).simplify(), 1/(1 + (b/3)**a)**p, x)\n+\n+    # Test Erlang\n+    k, l = 1, 1\n+    X = Erlang(\"x\", k, l)\n+    assert cdf(X)(1) == lowergamma(k, l*1)/gamma(k)\n+\n+    # Test Frechet\n+    a, s, m = S(4)/3, 1, 2\n+    X = Frechet('x', a, s, m)\n+    assert tn(cdf(X)(3).simplify(), exp(-((3-m)/s)**-a), x)\n+\n+    # Test Gamma\n+    k, theta = 0.1, 2\n+    X = Gamma(\"x\", k, theta)\n+    assert cdf(X)(3) == lowergamma(k, 3/theta)/gamma(k)\n+\n+    # Test GammaInverse\n+    a, b = S(5)/7, 2\n+    X = GammaInverse('x', a, b)\n+    assert tn(cdf(X)(3).simplify(), uppergamma(a, b/3)/gamma(a), x)\n+\n+    # Test Kumaraswamy\n+    a, b = S(1)/123, 5\n+    X = Kumaraswamy('x', a, b)\n+    assert cdf(X)(S(1)/3).simplify() == 1 - (1 - (S(1)/3)**a)**b\n+\n+    # Test Laplace\n+    mu, b = 2, 3\n+    X = Laplace(\"x\", mu, b)\n+    assert cdf(X)(5).simplify() == 1 - exp(-(5 - mu)/b)/2\n+\n+    # Test Logistic\n+    mu, s = 1, 0.1\n+    X = Logistic('x', mu, s)\n+    assert cdf(X)(2).simplify() == 1/(1+exp(-(x-mu)/s)).subs(x, 2)\n+\n+    # Test Nakagami\n+    mu, omega = S(7)/3, 1\n+    X = Nakagami('x', mu, omega)\n+    assert tn(cdf(X)(2).simplify(), lowergamma(mu, mu*2**2/omega)/gamma(mu), x)\n+\n+    # Test StudentT\n+    nu = 10\n+    X = StudentT('x', nu)\n+    assert tn(cdf(X)(2).simplify(), 0.5 + x*gamma(nu/2 + S.Half)*hyper((S.Half, nu/2 + S.Half), (S(3)/2,), -x**2/nu)/(sqrt(pi)*sqrt(nu)*gamma(nu/2)), x)\n+\n+    # Test UniformSum\n+    X = UniformSum('x', 5)\n+    assert tn(diff(cdf(X)(x), x).simplify(), density(X)(x).simplify(), x)\n     mu = symbols(\"mu\", real=True, finite=True)\n     sigma, xm, alpha = symbols(\"sigma xm alpha\", positive=True, finite=True)\n     n = symbols(\"n\", integer=True, positive=True, finite=True)\n",
  "sympy__sympy-13974": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bd3e825..2d33c63 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -48,8 +48,25 @@ def test_tensor_product_commutator():\n def test_tensor_product_simp():\n     assert tensor_product_simp(TP(A, B)*TP(B, C)) == TP(A*B, B*C)\n \n-\n-def test_issue_5923():\n+def test_tensor_product_powers():\n+    # Import the necessary symbols and functions\n+    from sympy import Symbol\n+    from sympy.physics.quantum import TensorProduct as TP\n+    from sympy.physics.quantum import tensor_product_simp\n+\n+    # Define non-commutative symbols\n+    A, B, C, D = symbols('A B C D', commutative=False)\n+    x = Symbol('x')\n+\n+    # Tests for powers of TensorProduct\n+    assert tensor_product_simp(TP(A, B)**x) == TP(A**x, B**x)\n+    assert tensor_product_simp(x*TP(A, B)**2) == x*TP(A**2, B**2)\n+    assert tensor_product_simp(x*(TP(A, B)**2)*TP(C, D)) == x*TP(A**2*C, B**2*D)\n+    assert tensor_product_simp(TP(A, B) - TP(C, D)**x) == TP(A, B) - TP(C**x, D**x)\n+\n+    # Additional test cases for powers and scalar multiplication\n+    assert tensor_product_simp(TP(A, B)**2) == TP(A**2, B**2)\n+    assert tensor_product_simp(2*TP(A, B)**3) == 2*TP(A**3, B**3)\n     # most of the issue regarding sympification of args has been handled\n     # and is tested internally by the use of args_cnc through the quantum\n     # module, but the following is a test from the issue that used to raise.\n",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_python.py b/sympy/printing/tests/test_python.py\nindex 73fc070..6dbb0a7 100644\n--- a/sympy/printing/tests/test_python.py\n+++ b/sympy/printing/tests/test_python.py\n@@ -79,7 +79,15 @@ def test_python_keyword_function_name_escaping():\n         5*Function(\"for\")(8)) == \"for_ = Function('for')\\ne = 5*for_(8)\"\n \n \n+from sympy import Symbol, Eq, Ne, Rational, Limit, sstr, python\n+\n def test_python_relational():\n+    # Additional test for verifying proper code generation\n+    assert python(Eq(Symbol('x'), Rational(1, 2))) == \"x = Symbol('x')\\ne = Eq(x, S(1)/2)\"\n+    assert python(Ne(Symbol('x')/(Symbol('y') + 1), Symbol('y')**2)) in [\n+        \"x = Symbol('x')\\ny = Symbol('y')\\ne = Ne(x/(1 + y), y**2)\",\n+        \"x = Symbol('x')\\ny = Symbol('y')\\ne = Ne(x/(y + 1), y**2)\"\n+    ]\n     assert python(Eq(x, y)) == \"e = Eq(x, y)\"\n     assert python(Ge(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x >= y\"\n     assert python(Le(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x <= y\"\n",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..31a9292 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -3,12 +3,14 @@ from sympy.physics.vector import ReferenceFrame, Vector, dynamicsymbols, dot\n from sympy.abc import x, y, z\n from sympy.utilities.pytest import raises\n \n-\n-Vector.simp = True\n+from sympy.physics.vector import ReferenceFrame, Vector\n A = ReferenceFrame('A')\n \n-\n-def test_Vector():\n+def test_vector_add_zero():\n+    N = ReferenceFrame('N')\n+    assert sum([N.x, (0 * N.x)]) == N.x\n+    assert sum([0 * N.x, N.x]) == N.x\n+    assert sum([0 * N.x, 0 * N.y, N.z]) == N.z\n     assert A.x != A.y\n     assert A.y != A.z\n     assert A.z != A.x\n",
  "sympy__sympy-14976": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..19458a5 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1,3 +1,4 @@\n+\n from distutils.version import LooseVersion as V\n from itertools import product\n import math\n@@ -143,6 +144,16 @@ def test_mpmath_lambda():\n     raises(TypeError, lambda: f(x))\n            # if this succeeds, it can't be a mpmath function\n \n+@conserve_mpmath_dps\n+def test_lambdify_rational_with_mpmath():\n+    x = symbols('x')\n+    eqn = Eq(rf(18, x), 77 + Rational(1, 3))\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    src = inspect.getsource(f)\n+    assert 'mpmath.mpf' in src  # Ensure that Rational(1, 3) is converted to mpmath.mpf\n+    x0 = nsolve(eqn, Float('1.5', 64), prec=64)\n+    assert abs(rf(18, x0).evalf(64) - 77.33333333333333) < 1e-14\n+\n \n @conserve_mpmath_dps\n def test_number_precision():\n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..d469e1b 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,7 +1,8 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n-from sympy import Symbol, Rational, SparseMatrix, Dict, diff, symbols, Indexed, IndexedBase\n+from sympy import Symbol, Rational, SparseMatrix, Dict, diff, symbols, Indexed, IndexedBase, Array\n from sympy.core.compatibility import long\n from sympy.matrices import Matrix\n from sympy.tensor.array.sparse_ndim_array import ImmutableSparseNDimArray\n@@ -71,13 +72,28 @@ def test_ndim_array_initiation():\n     assert vector_with_long_shape.rank() == 1\n     raises(ValueError, lambda: vector_with_long_shape[long(5)])\n \n-    from sympy.abc import x\n+    from sympy.abc import x, y\n     rank_zero_array = ImmutableDenseNDimArray(x)\n-    assert len(rank_zero_array) == 0\n-    assert rank_zero_array.shape == ()\n-    assert rank_zero_array.rank() == 0\n-    assert rank_zero_array[()] == x\n-    raises(ValueError, lambda: rank_zero_array[0])\n+    # Test with rank-0 array for new expected behavior\n+    rank_zero_array_new = ImmutableDenseNDimArray([x], shape=())\n+    assert len(rank_zero_array_new) == 1  # Expected to be 1 after fix\n+    assert rank_zero_array_new.shape == ()\n+    assert rank_zero_array_new.rank() == 0\n+    assert rank_zero_array_new[()] == x\n+    raises(IndexError, lambda: rank_zero_array_new[0])  # Should raise IndexError like numpy\n+\n+    # Additional test for rank-0 array with different scalar\n+    rank_zero_array_y = ImmutableDenseNDimArray([y], shape=())\n+    assert len(rank_zero_array_y) == 1\n+    assert rank_zero_array_y[()] == y\n+\n+    # Test using sympy.Array construction\n+    rank_zero_sympy_array = Array(x)\n+    assert len(rank_zero_sympy_array) == 1\n+    assert rank_zero_sympy_array.shape == ()\n+    assert rank_zero_sympy_array.rank() == 0\n+    assert rank_zero_sympy_array[()] == x\n+    raises(IndexError, lambda: rank_zero_sympy_array[0])\n \n \n def test_reshape():\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..e4c444b 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n@@ -18,6 +19,16 @@ def test_Integer():\n def test_Rational():\n     assert mcode(Rational(3, 7)) == \"3/7\"\n     assert mcode(Rational(18, 9)) == \"2\"\n+\n+def test_Max():\n+    # Test for the specific issue reported\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"\n+    # Test with more than two arguments\n+    assert mcode(Max(x, y, 2)) == \"Max[x, y, 2]\"\n+    assert mcode(Max(2, x, y)) == \"Max[2, x, y]\"\n+    # Test nested Max\n+    assert mcode(Max(Max(x, y), 2)) == \"Max[Max[x, y], 2]\"\n     assert mcode(Rational(3, -7)) == \"-3/7\"\n     assert mcode(Rational(-3, -7)) == \"3/7\"\n     assert mcode(x + Rational(3, 7)) == \"x + 3/7\"\n",
  "sympy__sympy-15349": "diff --git a/sympy/algebras/tests/test_quaternion.py b/sympy/algebras/tests/test_quaternion.py\nindex c486cc1..5f9638d 100644\n--- a/sympy/algebras/tests/test_quaternion.py\n+++ b/sympy/algebras/tests/test_quaternion.py\n@@ -111,12 +111,47 @@ def test_quaternion_conversions():\n                                                [cos(theta), -sin(theta), 0],\n                                                [sin(theta),  cos(theta), 0],\n                                                [0,           0,          1]])\n+from sympy import symbols, cos, sin, Matrix, trigsimp\n+from sympy.algebras.quaternion import Quaternion\n \n-    assert q2.to_axis_angle() == ((0, 0, sin(theta/2)/Abs(sin(theta/2))),\n-                                   2*acos(cos(theta/2)))\n+def test_quaternion_rotation_iss1593():\n+    \"\"\"\n+    There was a sign mistake in the definition of the rotation matrix. \n+    This tests that particular sign mistake. See issue 1593 for reference.\n+    See wikipedia https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation#Quaternion-derived_rotation_matrix\n+    for the correct definition\n+    \"\"\"\n+    x = symbols('x')\n+    q = Quaternion(cos(x/2), sin(x/2), 0, 0)\n+    assert(trigsimp(q.to_rotation_matrix()) == Matrix([\n+        [1,      0,      0],\n+        [0, cos(x), -sin(x)],\n+        [0, sin(x), cos(x)]]))\n+\n+def test_quaternion_rotation_y_axis():\n+    \"\"\"\n+    Test rotation around the y-axis.\n+    \"\"\"\n+    x = symbols('x')\n+    q = Quaternion(cos(x/2), 0, sin(x/2), 0)\n+    assert(trigsimp(q.to_rotation_matrix()) == Matrix([\n+        [ cos(x), 0, sin(x)],\n+        [      0, 1,      0],\n+        [-sin(x), 0, cos(x)]]))\n+\n+def test_quaternion_rotation_z_axis():\n+    \"\"\"\n+    Test rotation around the z-axis.\n+    \"\"\"\n+    x = symbols('x')\n+    q = Quaternion(cos(x/2), 0, 0, sin(x/2))\n+    assert(trigsimp(q.to_rotation_matrix()) == Matrix([\n+        [cos(x), -sin(x), 0],\n+        [sin(x),  cos(x), 0],\n+        [     0,       0, 1]]))\n \n     assert trigsimp(q2.to_rotation_matrix((1, 1, 1))) == Matrix([\n                [cos(theta), -sin(theta), 0, sin(theta) - cos(theta) + 1],\n                [sin(theta),  cos(theta), 0, -sin(theta) - cos(theta) + 1],\n                [0,           0,          1,  0],\n-               [0,           0,          0,  1]])\n+               [0,           0,          0,  1]])\n",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..b2f2989 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1625,7 +1625,16 @@ def test_Mod():\n     assert (3*i*x) % (2*i*y) == i*Mod(3*x, 2*y)\n     assert Mod(4*i, 4) == 0\n \n-    # issue 8677\n+    # Additional test cases for issue 15493\n+    i = Symbol('i', integer=True)\n+    j = Symbol('j', integer=True, positive=True)\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+    assert Mod(6*i, 2) == 0\n+    assert Mod(9*i + 1, 2) == Mod(i + 1, 2)\n+    assert Mod(8*i + 3*j, 2) == (j % 2)\n+    assert Mod(15*i*j, 5*j) == j*Mod(3*i, 5)\n+    assert Mod(12*i*j, 4*j) == 0\n+    assert Mod(7*i*j**2, 7*j**2) == 0\n     n = Symbol('n', integer=True, positive=True)\n     assert factorial(n) % n == 0\n     assert factorial(n + 2) % n == 0\n",
  "sympy__sympy-15809": "diff --git a/sympy/functions/elementary/tests/test_miscellaneous.py b/sympy/functions/elementary/tests/test_miscellaneous.py\nindex 821fd0c..df59349 100644\n--- a/sympy/functions/elementary/tests/test_miscellaneous.py\n+++ b/sympy/functions/elementary/tests/test_miscellaneous.py\n@@ -85,7 +85,8 @@ def test_Min():\n     assert Min(p, p_).func is Min\n \n     # lists\n-    raises(ValueError, lambda: Min())\n+    assert Min() == S.Infinity\n+    assert Min(x) == x\n     assert Min(x, y) == Min(y, x)\n     assert Min(x, y, z) == Min(z, y, x)\n     assert Min(x, Min(y, z)) == Min(z, y, x)\n@@ -156,7 +157,8 @@ def test_Max():\n \n     # lists\n \n-    raises(ValueError, lambda: Max())\n+    assert Max() == S.NegativeInfinity\n+    assert Max(x) == x\n     assert Max(x, y) == Max(y, x)\n     assert Max(x, y, z) == Max(z, y, x)\n     assert Max(x, Max(y, z)) == Max(z, y, x)\n",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..775feab 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1986,11 +1986,34 @@ def test_Add_is_zero():\n     x, y = symbols('x y', zero=True)\n     assert (x + y).is_zero\n \n+def test_issue_15873():\n+    from sympy import I, Add, simplify\n \n-def test_issue_14392():\n+    # Test the specific example given in the issue\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None\n+    assert simplify(e).is_zero is True\n+\n+    # Additional tests to ensure `is_zero` works correctly\n+    # on other complex expressions.\n+    e1 = (1 + I)*(1 - I) - 2\n+    assert e1.is_zero is None  # e1 simplifies to 0, but may not be obvious initially\n+    assert simplify(e1).is_zero is True\n+\n+    e2 = (2 + 3*I) - (2 + 3*I)\n+    assert e2.is_zero is True  # Direct zero\n+\n+    e3 = (I - I)\n+    assert e3.is_zero is True  # Direct zero\n+\n+    e4 = (1 + 2*I) + (3 - 2*I) - 4\n+    assert e4.is_zero is True  # Simplifies to zero\n+\n+    e5 = Add(1 + I, -1 - I, evaluate=False)\n+    assert e5.is_zero is None  # Not evaluated, should return None\n     assert (sin(zoo)**2).as_real_imag() == (nan, nan)\n \n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..48025af 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -511,8 +511,31 @@ def test_posify():\n     assert str(Sum(posify(1/x**n)[0], (n,1,3)).expand()) == \\\n         'Sum(_x**(-n), (n, 1, 3))'\n \n-\n-def test_issue_4194():\n+def test_posify_finite():\n+    from sympy import Symbol, posify\n+\n+    # Test case from the issue\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0['finite'] == True\n+    assert eq.assumptions0['infinite'] == False\n+\n+    # Additional checks for other assumptions\n+    y = Symbol('y', integer=True, finite=True)\n+    eq, rep = posify(y)\n+    assert eq.assumptions0['finite'] == True\n+    assert eq.assumptions0['integer'] == True\n+\n+    z = Symbol('z', rational=True, finite=True)\n+    eq, rep = posify(z)\n+    assert eq.assumptions0['finite'] == True\n+    assert eq.assumptions0['rational'] == True\n+\n+    # Check that posified assumptions don't affect commutative\n+    x = Symbol('x', commutative=False, finite=True)\n+    eq, rep = posify(x)\n+    assert eq.assumptions0['finite'] == True\n+    assert eq.assumptions0['commutative'] == False\n     # simplify should call cancel\n     from sympy.abc import x, y\n     f = Function('f')\n",
  "sympy__sympy-16766": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 51a287f..b791a64 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n \n@@ -12,6 +13,7 @@ from sympy.printing.pycode import (\n     MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter\n )\n from sympy.utilities.pytest import raises\n+from sympy.tensor import IndexedBase\n \n x, y, z = symbols('x y z')\n \n@@ -28,6 +30,10 @@ def test_PythonCodePrinter():\n     assert prntr.module_imports == {'math': {'pi'}}\n     assert prntr.doprint(acos(x)) == 'math.acos(x)'\n     assert prntr.doprint(Assignment(x, 2)) == 'x = 2'\n+    p = IndexedBase(\"p\")\n+    assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n+    assert prntr.doprint(p[x, y, z]) == 'p[x, y, z]'\n+\n     assert prntr.doprint(Piecewise((1, Eq(x, 0)),\n                         (2, x>6))) == '((1) if (x == 0) else (2) if (x > 6) else None)'\n     assert prntr.doprint(Piecewise((2, Le(x, 0)),\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py\nindex 23fddca..3b588e7 100644\n--- a/sympy/utilities/tests/test_autowrap.py\n+++ b/sympy/utilities/tests/test_autowrap.py\n@@ -47,8 +47,16 @@ def test_cython_wrapper_scalar_function():\n         \"    return test(x, y, z)\")\n     assert source == expected\n \n-\n-def test_cython_wrapper_outarg():\n+def test_autowrap_cython_unused_array_arg():\n+    from sympy.utilities.autowrap import autowrap\n+    from sympy import MatrixSymbol\n+    import numpy as np\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0\n+    f = autowrap(expr, args=(x,), backend='cython')\n+    \n+    assert f(np.array([[1.0], [2.0]])) == 1.0\n     from sympy import Equality\n     x, y, z = symbols('x,y,z')\n     code_gen = CythonCodeWrapper(C99CodeGen())\n",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..d8ad984 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -248,8 +248,16 @@ def test_encode_morse():\n     assert encode_morse(' ', sep='``') == '````'\n     assert encode_morse('!@#$%^&*()_+') == '-.-.--|.--.-.|...-..-|-.--.|-.--.-|..--.-|.-.-.'\n \n-\n-def test_decode_morse():\n+def test_encode_morse_numbers():\n+    # Test the Morse encoding for numbers to verify the issue fix\n+    assert encode_morse('1') == '.----'\n+    assert encode_morse('12') == '.----|..---'\n+    assert encode_morse('123') == '.----|..---|...--'\n+    assert encode_morse('1234') == '.----|..---|...--|....-'\n+    assert encode_morse('12345') == '.----|..---|...--|....-|.....'\n+    assert encode_morse('67890') == '-....|--...|---..|----.|-----'\n+    assert encode_morse('0') == '-----'\n+    assert encode_morse('6789012345') == '-....|--...|---..|----.|-----|.----|..---|...--|....-|.....'\n     assert decode_morse('-.-|.|-.--') == 'KEY'\n     assert decode_morse('.-.|..-|-.||') == 'RUN'\n     raises(KeyError, lambda: decode_morse('.....----'))\n",
  "sympy__sympy-17139": "",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..6eedf4d 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,6 +1,8 @@\n+\n from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n from sympy.simplify.sqrtdenest import _subsets as subsets\n-from sympy.utilities.pytest import slow\n+from sympy.simplify.sqrtdenest import _sqrt_match\n+from sympy.core.expr import unchanged\n \n r2, r3, r5, r6, r7, r10, r15, r29 = [sqrt(x) for x in [2, 3, 5, 6, 7, 10,\n                                           15, 29]]\n@@ -175,8 +177,22 @@ def test_subsets():\n         [0, 1, 1, 0], [1, 1, 1, 0], [0, 0, 0, 1], [1, 0, 0, 1], [0, 1, 0, 1],\n         [1, 1, 0, 1], [0, 0, 1, 1], [1, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]]\n \n+def test_issue_12420():\n+    I = S.ImaginaryUnit\n+    # Test the case that triggered the original IndexError\n+    expr = (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2\n+    assert sqrtdenest(expr) == expr\n+\n+    # Check that _sqrt_match doesn't match unexpected patterns\n+    assert _sqrt_match(4 + I) == []\n+\n+    # Verify that a similar expression is returned unchanged\n+    e = 3 - sqrt(2)*sqrt(4 + I) + 3*I\n+    assert sqrtdenest(e) == e\n \n-def test_issue_5653():\n+    # Additional test case: no denesting possible, return unchanged\n+    e2 = sqrt(5 + sqrt(6 + sqrt(5 + 2*I)))\n+    assert sqrtdenest(e2) == e2\n     assert sqrtdenest(\n         sqrt(2 + sqrt(2 + sqrt(2)))) == sqrt(2 + sqrt(2 + sqrt(2)))\n \n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..cb8d059 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,5 @@\n-from sympy import I, Rational, Symbol, pi, sqrt, S\n+\n+from sympy import I, Rational, Symbol, pi, sqrt, S, sympify\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n@@ -7,6 +8,13 @@ from sympy.utilities.pytest import raises, warns\n \n \n def test_point():\n+    # Additional test case for issue regarding unexpected exception in point multiplication\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+\n+    # Test multiplication order does not matter\n+    assert point1 + point2 * sympify(2.0) == Point(2, 2)\n+    assert point1 + sympify(2.0) * point2 == Point(2, 2)\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     x1 = Symbol('x1', real=True)\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..9909330 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -553,8 +553,23 @@ def test_diophantine():\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n     assert diophantine((y**2-x), t) == set([(t**2, -t)])\n \n-\n-def test_general_pythagorean():\n+# Test for issue 18186: diophantine incomplete results depending on syms order with permute=True\n+def test_issue_18186():\n+    from sympy import symbols, diophantine\n+\n+    x, y = symbols('x y')\n+    \n+    # Testing with syms=(x, y)\n+    result_xy = diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True)\n+    expected = set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert result_xy == expected, f\"Failed for syms=(x, y): {result_xy}\"\n+    \n+    # Testing with syms=(y, x)\n+    result_yx = diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True)\n+    assert result_yx == expected, f\"Failed for syms=(y, x): {result_yx}\"\n+\n+    # Additional check to ensure symbols' permutation order doesn't change result\n+    assert result_xy == result_yx, \"Results differ when syms are permuted.\"\n     from sympy.abc import a, b, c, d, e\n \n     assert check_solutions(a**2 + b**2 + c**2 - d**2)\n",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..72e334c 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -675,6 +675,16 @@ def test_latex_derivatives():\n def test_latex_subs():\n     assert latex(Subs(x*y, (\n         x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n+    \n+    # Test case added for verifying the fix of incorrect parenthesizing of Subs\n+    from sympy import Subs\n+    from sympy.abc import x, y\n+    assert latex(3*Subs(-x+y, (x,), (1,))) == r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+    \n+    # Additional test cases to verify parenthesis with multiplication\n+    assert latex(2*Subs(x - y, (x,), (1,))) == r'2 \\left. \\left(x - y\\right) \\right|_{\\substack{ x=1 }}'\n+    assert latex(Subs(x + y, (x, y), (1, 2))) == r'\\left. \\left(x + y\\right) \\right|_{\\substack{ x=1\\\\ y=2 }}'\n+    assert latex(-Subs(x + y, (x,), (1,))) == r'- \\left. \\left(x + y\\right) \\right|_{\\substack{ x=1 }}'\n \n \n def test_latex_integrals():\n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "diff --git a/sympy/sets/tests/test_conditionset.py b/sympy/sets/tests/test_conditionset.py\nindex 68ee5d6..d790fe1 100644\n--- a/sympy/sets/tests/test_conditionset.py\n+++ b/sympy/sets/tests/test_conditionset.py\n@@ -1,3 +1,4 @@\n+\n from sympy.sets import (ConditionSet, Intersection, FiniteSet,\n     EmptySet, Union, Contains)\n from sympy import (Symbol, Eq, S, Abs, sin, pi, Interval,\n@@ -128,6 +129,20 @@ def test_subs_CondSet():\n         n, n < x, Interval(-oo, 0)).subs(x, p) == S.EmptySet\n     assert ConditionSet(f(x), f(x) < 1, {w, z}\n         ).subs(f(x), y) == ConditionSet(y, y < 1, {w, z})\n+    \n+    # Test for issue with ConditionSet and ImageSet substitution\n+    from sympy import asin, imageset, Lambda, pi\n+\n+    # Issue demonstration\n+    k = Symbol('k')\n+    img1 = imageset(Lambda(k, 2*k*pi + asin(y)), S.Integers)\n+    img2 = imageset(Lambda(k, 2*k*pi + asin(S.One/3)), S.Integers)\n+    cond_set = ConditionSet(x, Contains(y, Interval(-1, 1)), img1)\n+    assert cond_set.subs(y, S.One/3).dummy_eq(img2)\n+\n+    # Additional test cases for substitution behavior\n+    img3 = imageset(Lambda(k, 2*k*pi + asin(z)), S.Integers)\n+    assert cond_set.subs(y, z).dummy_eq(ConditionSet(x, Contains(z, Interval(-1, 1)), img3))\n \n \n def test_subs_CondSet_tebr():\n",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..eaf4c49 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -483,7 +483,43 @@ def test_geometry():\n     assert L == Line((0, 1), (1, 0)) and isinstance(L, Line)\n \n \n+from sympy import Symbol, Add, Mul, exp, sin, cos, Interval\n+from sympy.abc import x, y\n+\n def test_kernS():\n+    # Test case from the original issue\n+    from sympy.core.sympify import kernS\n+\n+    # Test simple algebraic expression\n+    expr = kernS(\"(2*x)/(x-1)\")\n+    assert expr == (2*x)/(x-1)\n+\n+    # Test nested functions and operations\n+    expr = kernS(\"sin(x)**2 + cos(x)**2\")\n+    assert expr.simplify() == 1\n+\n+    # Test expression with negative and positive powers\n+    expr = kernS(\"x**-2 + x**2\")\n+    assert expr == x**-2 + x**2\n+\n+    # Test expression with multiple operations\n+    expr = kernS(\"2*(x + y) - 3/(x - y)\")\n+    assert expr == 2*(x + y) - 3/(x - y)\n+\n+    # Test special functions\n+    expr = kernS(\"E**-(x)\")\n+    assert expr == exp(-x)\n+\n+    # Test with complex numbers\n+    expr = kernS(\"I*x + 1\")\n+    assert expr == I*x + 1\n+\n+    # Test interval creation\n+    assert kernS('Interval(-1,-2 - 4*(-3))') == Interval(-1, Add(-2, Mul(12, 1, evaluate=False), evaluate=False))\n+\n+    # Test more complex expression with space handling\n+    expr = kernS(\"1 - 2*(1-y)*x\")\n+    assert expr == 1 - 2*x*(1 - y)\n     s =   '-1 - 2*(-(-x + 1/x)/(x*(x - 1/x)**2) - 1/(x*(x - 1/x)))'\n     # when 1497 is fixed, this no longer should pass: the expression\n     # should be unchanged\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_dagger.py b/sympy/physics/quantum/tests/test_dagger.py\nindex ad97a01..5f74f6b 100644\n--- a/sympy/physics/quantum/tests/test_dagger.py\n+++ b/sympy/physics/quantum/tests/test_dagger.py\n@@ -1,11 +1,19 @@\n+\n from sympy import I, Matrix, symbols, conjugate, Expr, Integer\n \n from sympy.physics.quantum.dagger import adjoint, Dagger\n+from sympy.physics.quantum.operator import Operator, IdentityOperator\n from sympy.external import import_module\n from sympy.testing.pytest import skip\n \n+def test_dagger_identity_operator():\n+    O = Operator('O')\n+    I = IdentityOperator()\n+    D = Dagger(O)\n \n-def test_scalars():\n+    # The issue specifically involves checking Dagger * IdentityOperator\n+    assert D * I == D\n+    assert I * D == D\n     x = symbols('x', complex=True)\n     assert Dagger(x) == conjugate(x)\n     assert Dagger(I*x) == -I*conjugate(x)\n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..1423800 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -906,7 +906,27 @@ def test_sylow_subgroup():\n     assert G.order()/S.order() % 2 > 0\n \n \n-@slow\n+def test_issue_sylow_subgroup_index_error():\n+    from sympy.combinatorics import DihedralGroup\n+\n+    # Test with DihedralGroup(18)\n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n+    # Test with DihedralGroup(50)\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n+    # Additional cases for different p\n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(p=3)\n+    assert S.order() == 3\n+\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(p=5)\n+    assert S.order() == 5\n def test_presentation():\n     def _test(P):\n         G = P.presentation()\n",
  "sympy__sympy-20154": "",
  "sympy__sympy-20801": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e1c7e2..19ce35f 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -583,8 +583,13 @@ def test_Float():\n         assert Float(i) is a\n \n \n-\n-@conserve_mpmath_dps\n+def test_zero_not_false():\n+    # Issue link: https://github.com/sympy/sympy/issues/20796\n+    from sympy import S\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n def test_float_mpf():\n     import mpmath\n     mpmath.mp.dps = 100\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..c9cd430 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -7,6 +8,9 @@ from sympy import (\n from sympy.core.basic import _aresame\n from sympy.testing.pytest import XFAIL\n from sympy.abc import a, x, y, z, t\n+from sympy.functions.elementary.trigonometric import sinh\n+from sympy.functions.elementary.piecewise import Piecewise\n+from sympy.core.cache import clear_cache\n \n def test_subs():\n     n3 = Rational(3)\n@@ -20,7 +24,43 @@ def test_subs():\n     assert e == Rational(6)\n \n \n-def test_subs_Matrix():\n+def test_issue_21373():\n+    # Verify that substituting into an expression with sinh and Piecewise does not raise PolynomialError.\n+    x_r, y_r = symbols('x_r y_r', real=True)\n+    \n+    # Clear the cache for consistent test results\n+    clear_cache()\n+    \n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    result = expr.subs({1: 1.0})\n+    \n+    # Since we are testing for absence of error, no assertion needed for result value\n+    assert result is not None  # Ensure substitution result is valid\n+\n+    # Test with other hyperbolic functions as mentioned in the issue\n+    expr_cosh = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    result_cosh = expr_cosh.subs({1: 1.0})\n+    assert result_cosh is not None\n+\n+    expr_tanh = exp(tanh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    result_tanh = expr_tanh.subs({1: 1.0})\n+    assert result_tanh is not None\n+\n+    # Testing without division by 'z'\n+    expr_no_div = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n+    result_no_div = expr_no_div.subs({1: 1.0})\n+    assert result_no_div is not None\n+\n+    # Testing without the exp\n+    expr_no_exp = sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z)\n+    result_no_exp = expr_no_exp.subs({1: 1.0})\n+    assert result_no_exp is not None\n+\n+    # Testing with non-real symbols for x and y\n+    x_nr, y_nr = symbols('x_nr y_nr')\n+    expr_non_real = exp(sinh(Piecewise((x_nr, y_nr > x_nr), (y_nr, True)) / z))\n+    result_non_real = expr_non_real.subs({1: 1.0})\n+    assert result_non_real is not None\n     z = zeros(2)\n     z1 = ZeroMatrix(2, 2)\n     assert (x*y).subs({x:z, y:0}) in [z, z1]\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..903534b 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -14,9 +14,27 @@ from sympy.polys.polyerrors import ExactQuotientFailed\n from sympy.abc import a, b, c, x, y, z\n from sympy.core import S, symbols\n from sympy.testing.pytest import raises\n-\n-\n-def test_monomials():\n+from sympy import symbols\n+from sympy.polys.monomials import itermonomials\n+\n+def test_issue_min_degrees():\n+    x1, x2, x3 = symbols('x1, x2, x3')\n+    # Test for issue with min_degrees and max_degrees both set to 3\n+    monomials = set(itermonomials([x1, x2, x3], 3, 3))\n+    expected_monomials = {\n+        x1**3, x2**3, x3**3, x1*x2**2, x2*x3**2, x1*x3**2,\n+        x1**2*x2, x1**2*x3, x2**2*x3, x1*x2*x3\n+    }\n+    assert monomials == expected_monomials\n+\n+    # Test for min_degrees set to 2 and max_degrees set to 3\n+    monomials = set(itermonomials([x1, x2, x3], 3, 2))\n+    expected_monomials = {\n+        x1**2, x1*x2, x1*x3, x2**2, x2*x3, x3**2,\n+        x1**3, x1**2*x2, x1**2*x3, x1*x2**2, x1*x2*x3, x1*x3**2,\n+        x2**3, x2**2*x3, x2*x3**2, x3**3\n+    }\n+    assert monomials == expected_monomials\n \n     # total_degree tests\n     assert set(itermonomials([], 0)) == {S.One}\n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..6b36610 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -264,6 +264,7 @@ def test_none():\n def test_String():\n     st = String('foobar')\n     assert st.is_Atom\n+    assert st.func(*st.args) == st  # Verifying argument invariance\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..3cdfe72 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,6 @@\n+\n from sympy.core.basic import Basic\n+from sympy.core.parameters import evaluate\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n@@ -443,8 +445,33 @@ def test_unit():\n def test_dot():\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n-\n-def test__normalize_dimension():\n+def test_issue_22684():\n+    # This test verifies the fix for the issue where Point2D with evaluate(False) would raise an error\n+    with evaluate(False):\n+        p = Point(1, 2)\n+        assert p == Point2D(1, 2)\n+        assert p.x == 1\n+        assert p.y == 2\n+\n+    # Additional test to ensure that using evaluate=False directly also works as expected\n+    p_eval_false = Point(1, 2, evaluate=False)\n+    assert p_eval_false == Point2D(1, 2)\n+    assert p_eval_false.x == 1\n+    assert p_eval_false.y == 2\n+\n+    # Ensure that using imaginary numbers still raises an error\n+    try:\n+        with evaluate(False):\n+            Point(1, I)\n+        assert False, \"Expected ValueError for imaginary coordinates\"\n+    except ValueError as e:\n+        assert str(e) == 'Imaginary coordinates are not permitted.'\n+\n+    try:\n+        Point(1, I, evaluate=False)\n+        assert False, \"Expected ValueError for imaginary coordinates\"\n+    except ValueError as e:\n+        assert str(e) == 'Imaginary coordinates are not permitted.'\n     assert Point._normalize_dimension(Point(1, 2), Point(3, 4)) == [\n         Point(1, 2), Point(3, 4)]\n     assert Point._normalize_dimension(\n",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..ce5b9d1 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n@@ -27,7 +28,13 @@ p = IndexedBase(\"p\")\n def test_PythonCodePrinter():\n     prntr = PythonCodePrinter()\n \n-    assert not prntr.module_imports\n+    # Test Min and Max with the PythonCodePrinter\n+    assert prntr.doprint(Min(x, y)) == \"min(x, y)\"\n+    assert prntr.doprint(Max(x, y)) == \"max(x, y)\"\n+    assert prntr.doprint(Min(x, y, z)) == \"min(x, y, z)\"\n+    assert prntr.doprint(Max(x, y, z)) == \"max(x, y, z)\"\n+    assert prntr.doprint(Min(x, 1)) == \"min(x, 1)\"\n+    assert prntr.doprint(Max(x, 1)) == \"max(x, 1)\"\n \n     assert prntr.doprint(x**y) == 'x**y'\n     assert prntr.doprint(Mod(x, 2)) == 'x % 2'\n@@ -35,7 +42,13 @@ def test_PythonCodePrinter():\n     assert prntr.doprint(Mod(-x, y)) == '(-x) % y'\n     assert prntr.doprint(And(x, y)) == 'x and y'\n     assert prntr.doprint(Or(x, y)) == 'x or y'\n-    assert not prntr.module_imports\n+    # Test Min and Max with the PythonCodePrinter\n+    assert prntr.doprint(Min(x, y)) == \"min(x, y)\"\n+    assert prntr.doprint(Max(x, y)) == \"max(x, y)\"\n+    assert prntr.doprint(Min(x, y, z)) == \"min(x, y, z)\"\n+    assert prntr.doprint(Max(x, y, z)) == \"max(x, y, z)\"\n+    assert prntr.doprint(Min(x, 1)) == \"min(x, 1)\"\n+    assert prntr.doprint(Max(x, 1)) == \"max(x, 1)\"\n \n     assert prntr.doprint(pi) == 'math.pi'\n     assert prntr.module_imports == {'math': {'pi'}}\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..61fe8d7 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,9 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+from sympy import lambdify, symbols, Dummy\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n",
  "sympy__sympy-23534": "",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..568957f 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -261,8 +261,33 @@ def test_kahane_simplify1():\n     r = kahane_simplify(t)\n     assert r.equals(-2*G(sigma)*G(rho)*G(nu))\n \n+def test_kahane_leading_gamma_matrix_bug():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n \n-def test_gamma_matrix_class():\n+    # Test case 1: contracted gamma matrices in the middle\n+    t1 = G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r1 = kahane_simplify(t1)\n+    assert r1.equals(4*G(rho)*G(sigma))\n+\n+    # Test case 2: contracted gamma matrices at the end\n+    t2 = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r2 = kahane_simplify(t2)\n+    assert r2.equals(4*G(rho)*G(sigma))\n+\n+    # Additional test case 3: contracted gamma matrices in the beginning\n+    t3 = G(mu)*G(-mu)*G(mu)*G(-mu)\n+    r3 = kahane_simplify(t3)\n+    assert r3.equals(16*eye(4))\n+\n+    # Additional test case 4: gamma matrices without contraction should remain unchanged\n+    t4 = G(rho)*G(sigma)\n+    r4 = kahane_simplify(t4)\n+    assert r4.equals(G(rho)*G(sigma))\n+\n+    # Additional test case 5: mixed order of contracted gamma matrices\n+    t5 = G(rho)*G(mu)*G(sigma)*G(-mu)\n+    r5 = kahane_simplify(t5)\n+    assert r5.equals(-2*G(sigma)*G(rho))\n     i, j, k = tensor_indices('i,j,k', LorentzIndex)\n \n     # define another type of TensorHead to see if exprs are correctly handled:\n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..1d139b9 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -30,6 +30,19 @@ def test_issue_10326():\n     assert Contains(-oo, Interval(-oo, oo)) == False\n \n \n+from sympy import S, Symbol, FiniteSet, Contains, Piecewise, raises\n+\n+def test_contains_as_set_not_implemented():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    # Test current behavior - should raise NotImplementedError\n+    raises(NotImplementedError, lambda: Contains(x, FiniteSet(y)).as_set())\n+\n+def test_piecewise_with_contains():\n+    x = Symbol('x')\n+    # Test Piecewise with Contains to reproduce the issue\n+    raises(AttributeError, lambda: Piecewise((6, Contains(x, S.Reals)), (7, True)))\n+\n def test_binary_symbols():\n     x = Symbol('x')\n     y = Symbol('y')\n@@ -48,4 +61,4 @@ def test_as_set():\n \n def test_type_error():\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..d936348 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,6 +528,29 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n+def test_issue_24062():\n+    from sympy import exp\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units import Quantity\n+    from sympy.physics.units.systems.si import SI\n+    from sympy.physics.units.dimensions import Dimension\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+    \n def test_issue_20288():\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..ea1726e 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -562,7 +562,42 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n-def test_prefixed_property():\n+def test_issue_24211():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+    from sympy.physics.units.systems.si import SI\n+\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+    # Additional test case with negative scale factor\n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * meter / second)\n+\n+    a1 = Quantity('a1')\n+    SI.set_quantity_dimension(a1, acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)\n+\n+    t1 = Quantity('t1')\n+    SI.set_quantity_dimension(t1, time)\n+    SI.set_quantity_scale_factor(t1, 5 * second)\n+\n+    expr1 = a1*t1 + v1\n+    # should not throw ValueError here as well\n+    SI._collect_factor_and_dimension(expr1)\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n     assert not day.is_prefixed\n",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..23afd2d 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,3 +1,4 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n@@ -106,4 +107,21 @@ def test_check_homomorphism():\n     a = Permutation(1,2,3,4)\n     b = Permutation(1,3)\n     G = PermutationGroup([a, b])\n-    raises(ValueError, lambda: homomorphism(G, G, [a], [a]))\n+    raises(ValueError, lambda: homomorphism(G, G, [a], [a]))\n+\n+    # Test case based on the issue description\n+    D3 = DihedralGroup(3)\n+    try:\n+        T = homomorphism(D3, D3, D3.generators, D3.generators)\n+        assert T.is_isomorphism()\n+    except ValueError as e:\n+        assert False, f\"Unexpected ValueError: {e}\"\n+\n+    # Additional test case: cyclic group homomorphism\n+    C3 = CyclicGroup(3)\n+    T = homomorphism(C3, D3, C3.generators, D3.generators[:1])\n+    assert not T.is_isomorphism()\n+    assert T.kernel().order() == 3\n+\n+    # Additional test case where the homomorphism should fail as images do not align\n+    raises(ValueError, lambda: homomorphism(D3, D3, D3.generators, [D3.generators[1], D3.generators[0]]))\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..ab81cb3 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -249,7 +249,41 @@ def test_PolyElement_copy():\n     g[(1, 1, 1)] = 7\n     assert f != g\n \n+from sympy import ring, ZZ, symbols, raises\n+\n def test_PolyElement_as_expr():\n+    # Test with symbols matching the number of generators in the ring\n+    R, x, y, z = ring(\"x,y,z\", ZZ)\n+    f = 3*x**2*y - x*y*z + 7*z**3 + 1\n+\n+    U, V, W = symbols(\"u,v,w\")\n+    g = 3*U**2*V - U*V*W + 7*W**3 + 1\n+\n+    assert f.as_expr(U, V, W) == g\n+\n+    # Test with an incorrect number of symbols (less than required)\n+    raises(ValueError, lambda: f.as_expr(U, V))\n+\n+    # Test with an incorrect number of symbols (more than required)\n+    X1, X2, X3, X4 = symbols(\"x1,x2,x3,x4\")\n+    raises(ValueError, lambda: f.as_expr(X1, X2, X3, X4))\n+\n+    # Ensure default behavior still works with no symbols passed\n+    X, Y, Z = R.symbols\n+    h = 3*X**2*Y - X*Y*Z + 7*Z**3 + 1\n+    assert f.as_expr() == h\n+\n+    # Test with a single variable ring\n+    R_single, a = ring(\"a\", ZZ)\n+    f_single = 5*a**3 + 2*a + 1\n+\n+    A = symbols(\"A\")\n+    g_single = 5*A**3 + 2*A + 1\n+    assert f_single.as_expr(A) == g_single\n+\n+    # Ensure an empty ring is handled correctly\n+    R_empty, = ring(\"\", ZZ)\n+    assert R_empty(3).as_expr() == 3\n     R, x, y, z = ring(\"x,y,z\", ZZ)\n     f = 3*x**2*y - x*y*z + 7*z**3 + 1\n \n",
  "sympy__sympy-24661": "diff --git a/sympy/parsing/tests/test_sympy_parser.py b/sympy/parsing/tests/test_sympy_parser.py\nindex 3723931..4819be3 100644\n--- a/sympy/parsing/tests/test_sympy_parser.py\n+++ b/sympy/parsing/tests/test_sympy_parser.py\n@@ -269,6 +269,48 @@ def test_convert_equals_signs():\n     x = Symbol('x')\n     y = Symbol('y')\n     assert parse_expr(\"1*2=x\", transformations=transformations) == Eq(2, x)\n+\n+def test_issue_24288_extended():\n+    # Original test cases\n+    inputs = {\n+        \"1 < 2\": Lt(1, 2, evaluate=False),\n+        \"1 <= 2\": Le(1, 2, evaluate=False),\n+        \"1 > 2\": Gt(1, 2, evaluate=False),\n+        \"1 >= 2\": Ge(1, 2, evaluate=False),\n+        \"1 != 2\": Ne(1, 2, evaluate=False),\n+        \"1 == 2\": Eq(1, 2, evaluate=False)\n+    }\n+    for text, result in inputs.items():\n+        assert parse_expr(text, evaluate=False) == result\n+\n+    # Additional scenarios\n+    x = Symbol('x')\n+    y = Symbol('y')\n+\n+    # Test relationals with symbolic expressions\n+    assert parse_expr(\"x < y\", evaluate=False) == Lt(x, y, evaluate=False)\n+    assert parse_expr(\"x <= y\", evaluate=False) == Le(x, y, evaluate=False)\n+    assert parse_expr(\"x > y\", evaluate=False) == Gt(x, y, evaluate=False)\n+    assert parse_expr(\"x >= y\", evaluate=False) == Ge(x, y, evaluate=False)\n+    assert parse_expr(\"x != y\", evaluate=False) == Ne(x, y, evaluate=False)\n+    assert parse_expr(\"x == y\", evaluate=False) == Eq(x, y, evaluate=False)\n+\n+    # Mixed numeric and symbolic expressions\n+    assert parse_expr(\"1 < x\", evaluate=False) == Lt(1, x, evaluate=False)\n+    assert parse_expr(\"x <= 2\", evaluate=False) == Le(x, 2, evaluate=False)\n+    assert parse_expr(\"3 > y\", evaluate=False) == Gt(3, y, evaluate=False)\n+    assert parse_expr(\"y >= 4\", evaluate=False) == Ge(y, 4, evaluate=False)\n+\n+    # Compound expressions\n+    assert parse_expr(\"x + 1 < y + 2\", evaluate=False) == Lt(x + 1, y + 2, evaluate=False)\n+    assert parse_expr(\"x * y >= 2 * x\", evaluate=False) == Ge(x * y, 2 * x, evaluate=False)\n+\n+    # Complex expressions with evaluate=False\n+    assert parse_expr(\"x**2 < y**2\", evaluate=False) == Lt(x**2, y**2, evaluate=False)\n+    assert parse_expr(\"x - y == y - x\", evaluate=False) == Eq(x - y, y - x, evaluate=False)\n+\n+    # Ensure no unwanted simplifications occur\n+    assert parse_expr(\"1 < 2 < 3\", evaluate=False) == And(Lt(1, 2, evaluate=False), Lt(2, 3, evaluate=False))\n     assert parse_expr(\"y = x\", transformations=transformations) == Eq(y, x)\n     assert parse_expr(\"(2*y = x) = False\",\n         transformations=transformations) == Eq(Eq(2*y, x), False)\n",
  "astropy__astropy-14369": "",
  "astropy__astropy-14598": "",
  "django__django-11299": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex b3dc643..989b6da 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1899,7 +1899,23 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Author.objects.get(), author)\n \n     @skipUnlessDBFeature('supports_table_check_constraints')\n-    def test_remove_constraint(self):\n+    @skipUnlessDBFeature('supports_table_check_constraints')\n+    def test_check_constraint_with_or_and(self):\n+        app_label = 'test_checkconstraint_or_and'\n+        constraint_name = 'check_flag_with_or_and'\n+        from_state = self.set_up_test_model(app_label)\n+        check = models.Q(flag__exact=True, field_1__isnull=False) | models.Q(flag__exact=False)\n+        constraint = models.CheckConstraint(check=check, name=constraint_name)\n+        operation = migrations.AddConstraint('TestConstraint', constraint)\n+        to_state = from_state.clone()\n+        operation.state_forwards(app_label, to_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, from_state, to_state)\n+        TestConstraint = to_state.apps.get_model(app_label, 'TestConstraint')\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            TestConstraint.objects.create(field_1=None, flag=True)\n+        TestConstraint.objects.create(field_1=1, flag=True)\n+        TestConstraint.objects.create(field_1=None, flag=False)\n         project_state = self.set_up_test_model(\"test_removeconstraint\", constraints=[\n             models.CheckConstraint(check=models.Q(pink__gt=2), name=\"test_remove_constraint_pony_pink_gt_2\"),\n             models.CheckConstraint(check=models.Q(pink__lt=100), name=\"test_remove_constraint_pony_pink_lt_100\"),\n",
  "django__django-11477": "",
  "django__django-12273": "",
  "django__django-12965": "",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..26463cf 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from decimal import Decimal\n \n@@ -25,7 +26,17 @@ class DecimalFieldTests(TestCase):\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n \n-    def test_default(self):\n+    def test_invalid_value(self):\n+        field = models.DecimalField(max_digits=4, decimal_places=2)\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        tests = [\n+            (), [], {}, set(), object(), complex(),\n+            'non-numeric string', b'non-numeric byte-string',\n+        ]\n+        for value in tests:\n+            with self.subTest(value=value):\n+                with self.assertRaisesMessage(ValidationError, msg % (value,)):\n+                    field.to_python(value)\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n \n",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..460e512 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,3 +1,7 @@\n+\n+from django.db.models import Sum\n+from .models import Toy\n+\n import datetime\n import pickle\n \n@@ -253,7 +257,39 @@ class PickleabilityTestCase(TestCase):\n         with self.assertRaisesMessage(RuntimeWarning, msg):\n             pickle.loads(pickle.dumps(qs))\n \n-    def test_order_by_model_with_abstract_inheritance_and_meta_ordering(self):\n+    def test_reloaded_values_queryset(self):\n+        # Setup test data\n+        Toy.objects.create(name='foo', price=10, material='wood')\n+        Toy.objects.create(name='bar', price=20, material='plastic')\n+        Toy.objects.create(name='baz', price=100, material='wood')\n+\n+        # Create a queryset with values and annotate\n+        prices = Toy.objects.values('material').annotate(total_price=Sum('price'))\n+        \n+        # Serialize and deserialize the queryset\n+        reloaded = Toy.objects.all()\n+        reloaded.query = pickle.loads(pickle.dumps(prices.query))\n+\n+        # Verify the reloaded queryset produces the correct output\n+        expected_result = list(prices)\n+        self.assertEqual(list(reloaded), expected_result)\n+\n+    def test_reloaded_values_list_queryset(self):\n+        # Setup test data\n+        Toy.objects.create(name='foo', price=10, material='wood')\n+        Toy.objects.create(name='bar', price=20, material='plastic')\n+        Toy.objects.create(name='baz', price=100, material='wood')\n+\n+        # Create a queryset with values_list\n+        prices = Toy.objects.values_list('material', flat=True).distinct()\n+\n+        # Serialize and deserialize the queryset\n+        reloaded = Toy.objects.all()\n+        reloaded.query = pickle.loads(pickle.dumps(prices.query))\n+\n+        # Verify the reloaded queryset produces the correct output\n+        expected_result = list(prices)\n+        self.assertEqual(list(reloaded), expected_result)\n         group = Group.objects.create(name='test')\n         event = MyEvent.objects.create(title='test event', group=group)\n         event.edition_set.create()\n",
  "django__django-13449": "diff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\nindex 3f59cdf..d9c7568 100644\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -11,4 +11,5 @@ class Employee(models.Model):\n     department = models.CharField(max_length=40, blank=False, null=False)\n     hire_date = models.DateField(blank=False, null=False)\n     age = models.IntegerField(blank=False, null=False)\n-    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\n",
  "django__django-13512": "diff --git a/tests/forms_tests/field_tests/test_jsonfield.py b/tests/forms_tests/field_tests/test_jsonfield.py\nindex e31bff4..1bdfca5 100644\n--- a/tests/forms_tests/field_tests/test_jsonfield.py\n+++ b/tests/forms_tests/field_tests/test_jsonfield.py\n@@ -30,6 +30,21 @@ class JSONFieldTest(SimpleTestCase):\n         self.assertEqual(field.prepare_value(None), 'null')\n         self.assertEqual(field.prepare_value('foo'), '\"foo\"')\n \n+    def test_unicode_characters(self):\n+        field = JSONField()\n+        # Test with Chinese characters\n+        self.assertEqual(field.prepare_value({'a': '\u4f60\u597d \u4e16\u754c'}), '{\"a\": \"\u4f60\u597d \u4e16\u754c\"}')\n+        self.assertEqual(field.prepare_value('\u4f60\u597d\uff0c\u4e16\u754c'), '\"\u4f60\u597d\uff0c\u4e16\u754c\"')\n+        \n+        # Test with Emoji\n+        self.assertEqual(field.prepare_value({'a': '\ud83d\ude00\ud83d\udc31'}), '{\"a\": \"\ud83d\ude00\ud83d\udc31\"}')\n+        \n+        # Test combination of different unicode characters\n+        self.assertEqual(\n+            field.prepare_value([\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]),\n+            '[\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]',\n+        )\n+        \n     def test_widget(self):\n         field = JSONField()\n         self.assertIsInstance(field.widget, Textarea)\n",
  "django__django-14404": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 8fb91af..67da1c5 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -6602,7 +6602,23 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         response = self.client.get(known_url[:-1])\n         self.assertRedirects(response, known_url, status_code=301, target_status_code=403)\n \n-    @override_settings(APPEND_SLASH=True)\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/script')\n+    def test_redirect_with_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/script' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n         user = User.objects.create_user(\n             username='user',\n@@ -6628,7 +6644,23 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         response = self.client.get(known_url[:-1])\n         self.assertEqual(response.status_code, 404)\n \n-    @override_settings(APPEND_SLASH=True)\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/script')\n+    def test_redirect_with_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/script' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n     def test_single_model_no_append_slash(self):\n         superuser = User.objects.create_user(\n             username='staff',\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..485d3d6 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -691,6 +691,49 @@ class WriterTests(SimpleTestCase):\n         result = self.safe_exec(output)\n         self.assertIn(\"Migration\", result)\n \n+    def test_serialize_mixin_model_migration(self):\n+        \"\"\"\n+        Test that migration writer includes all necessary imports for a model with mixins.\n+        \"\"\"\n+        class MyMixin:\n+            pass\n+\n+        class MyBaseModel(models.Model):\n+            class Meta:\n+                abstract = True\n+\n+        class MyField(models.TextField):\n+            pass\n+\n+        class MyModel(MyMixin, MyBaseModel):\n+            name = MyField(primary_key=True)\n+\n+        fields = {\n+            'name': MyField(primary_key=True, serialize=False),\n+        }\n+\n+        migration = type(\"Migration\", (migrations.Migration,), {\n+            \"operations\": [\n+                migrations.CreateModel(\n+                    name='MyModel',\n+                    fields=list(fields.items()),\n+                    options={'abstract': False},\n+                    bases=(MyMixin, models.Model),\n+                ),\n+            ],\n+            \"dependencies\": [],\n+        })\n+\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+\n+        # Ensure 'from django.db import models' is in the output\n+        self.assertIn(\"from django.db import models\", output)\n+        # Ensure MyMixin is defined in the migration output\n+        self.assertIn(\"class MyMixin:\", output)\n+        # Ensure MyField is correctly imported\n+        self.assertIn(\"import app.models\", output)\n+\n     def test_migration_path(self):\n         test_apps = [\n             'migrations.migrations_test_apps.normal',\n",
  "django__django-15375": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1d4ef56..daf0c28 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1637,9 +1637,33 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertEqual(len(qs), 6)\n \n+    def test_aggregate_with_default_after_annotate(self):\n+        result = Book.objects.annotate(idx=F('id')).aggregate(Sum('id', default=0))\n+        self.assertEqual(result['id__sum'], 4560)\n+\n+    def test_aggregate_without_default_after_annotate(self):\n+        result = Book.objects.annotate(idx=F('id')).aggregate(Sum('id'))\n+        self.assertEqual(result['id__sum'], 4560)\n+\n+    def test_aggregate_with_default_using_coalesce(self):\n+        result = Book.objects.annotate(idx=F('id')).aggregate(x=Coalesce(Sum('id'), 0))\n+        self.assertEqual(result['x'], 4560)\n+\n     def test_exists_extra_where_with_aggregate(self):\n         qs = Book.objects.all().annotate(\n             count=Count('id'),\n             exists=Exists(Author.objects.extra(where=['1=0'])),\n         )\n-        self.assertEqual(len(qs), 6)\n+        self.assertEqual(len(qs), 6)\n+\n+    def test_aggregate_with_default_after_annotate(self):\n+        result = Book.objects.annotate(idx=F('id')).aggregate(Sum('id', default=0))\n+        self.assertEqual(result['id__sum'], 4560)\n+\n+    def test_aggregate_without_default_after_annotate(self):\n+        result = Book.objects.annotate(idx=F('id')).aggregate(Sum('id'))\n+        self.assertEqual(result['id__sum'], 4560)\n+\n+    def test_aggregate_with_default_using_coalesce(self):\n+        result = Book.objects.annotate(idx=F('id')).aggregate(x=Coalesce(Sum('id'), 0))\n+        self.assertEqual(result['x'], 4560)\n",
  "django__django-15695": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 99db46a..4103151 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -2984,10 +2984,50 @@ class OperationTests(OperationTestBase):\n         with connection.schema_editor() as editor:\n             operation.database_forwards(app_label, editor, project_state, new_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+        # Test with unnamed indexes and unique_together constraint\n+        # 1. Initial rename should work with no issue.\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+\n+        # 2. Rolling back should restore the old auto-generated index name.\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        self.assertIndexNameExists(table_name, \"old_auto_generated_name\")  # Replace with actual expected old name\n+\n+        # 3. Reapply rename to ensure no crash occurs.\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+\n+        # 4. Reverse again and check for no crash.\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        self.assertIndexNameExists(table_name, \"old_auto_generated_name\")  # Replace with actual expected old name\n         # Reverse is a no-op.\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             operation.database_backwards(app_label, editor, new_state, project_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+        # Test with unnamed indexes and unique_together constraint\n+        # 1. Initial rename should work with no issue.\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+\n+        # 2. Rolling back should restore the old auto-generated index name.\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        self.assertIndexNameExists(table_name, \"old_auto_generated_name\")  # Replace with actual expected old name\n+\n+        # 3. Reapply rename to ensure no crash occurs.\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+\n+        # 4. Reverse again and check for no crash.\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        self.assertIndexNameExists(table_name, \"old_auto_generated_name\")  # Replace with actual expected old name\n         # Deconstruction.\n         definition = operation.deconstruct()\n         self.assertEqual(definition[0], \"RenameIndex\")\n",
  "django__django-15732": "",
  "django__django-15916": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex cc5e08c..f56d416 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -3487,13 +3487,56 @@ class FormFieldCallbackTests(SimpleTestCase):\n \n         NewForm = modelform_factory(Person, form=BaseForm, formfield_callback=callback)\n \n+from django import forms\n+from django.test import TestCase\n+from django.forms.models import modelform_factory\n+from .models import Person  # Assuming Person model is defined in models.py\n+\n+class CustomFormfieldCallbackTest(TestCase):\n+\n+    def callback(self, db_field, **kwargs):\n+        return forms.CharField(widget=forms.Textarea)\n+\n+    def test_custom_callback_in_meta_direct(self):\n+        class NewForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = [\"id\", \"name\"]\n+                formfield_callback = self.callback\n+\n+        for field in NewForm.base_fields.values():\n+            self.assertEqual(type(field.widget), forms.Textarea)\n+\n+    def test_custom_callback_via_modelform_factory(self):\n+        # Test if the Meta.formfield_callback in the base form is respected\n+        class BaseForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = \"__all__\"\n+                formfield_callback = self.callback\n+\n+        NewForm = modelform_factory(model=Person, form=BaseForm)\n+\n+        for field in NewForm.base_fields.values():\n+            self.assertEqual(type(field.widget), forms.Textarea)\n+\n+    def test_inherited_form_respects_callback(self):\n+        class BaseForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = \"__all__\"\n+                formfield_callback = self.callback\n+\n+        NewForm = modelform_factory(model=Person, form=BaseForm)\n+\n         class InheritedForm(NewForm):\n             pass\n \n-        for name in NewForm.base_fields:\n+        for name, field in NewForm.base_fields.items():\n+            self.assertEqual(type(field.widget), forms.Textarea)\n             self.assertEqual(\n+                type(field.widget),\n                 type(InheritedForm.base_fields[name].widget),\n-                type(NewForm.base_fields[name].widget),\n             )\n \n \n",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..e94a2df 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -9,7 +9,9 @@ from django.core.serializers.json import DjangoJSONEncoder\n from django.db import models\n from django.test import SimpleTestCase, TestCase, TransactionTestCase\n from django.test.utils import isolate_apps\n-from django.utils.translation import gettext_lazy, override\n+from django.core import serializers\n+from django.core.exceptions import FieldError\n+from django.db import models\n \n from .models import Score\n from .tests import SerializersTestBase, SerializersTransactionTestBase\n@@ -258,7 +260,35 @@ class JsonSerializerTestCase(SerializersTestBase, TestCase):\n             for obj in serializers.deserialize(\"json\", test_string, ignore=False):\n                 obj.save()\n \n-    def test_helpful_error_message_for_many2many_not_iterable(self):\n+    def test_serialization_m2m_with_custom_manager_select_related(self):\n+        class TestTagManager(models.Manager):\n+            def get_queryset(self):\n+                qs = super().get_queryset()\n+                qs = qs.select_related(\"master\")\n+                return qs\n+\n+        class TestTagMaster(models.Model):\n+            name = models.CharField(max_length=120)\n+\n+        class TestTag(models.Model):\n+            objects = TestTagManager()\n+            name = models.CharField(max_length=120)\n+            master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)\n+\n+        class TestModel(models.Model):\n+            name = models.CharField(max_length=120)\n+            tags = models.ManyToManyField(TestTag, blank=True)\n+\n+        tag_master = TestTagMaster.objects.create(name=\"master\")\n+        tag = TestTag.objects.create(name=\"tag\", master=tag_master)\n+        test_instance = TestModel.objects.create(name=\"test\")\n+        test_instance.tags.add(tag)\n+        test_instance.save()\n+\n+        try:\n+            serializers.serialize(\"json\", [test_instance])\n+        except FieldError as e:\n+            self.fail(f\"Serialization failed due to FieldError: {e}\")\n         \"\"\"\n         Not iterable many-to-many field value throws a helpful error message.\n         \"\"\"\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 53fdd55..fa53435 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -222,7 +222,26 @@ def test_mpl_toolkits():\n     assert type(pickle.loads(pickle.dumps(ax))) == parasite_axes.HostAxes\n \n \n-def test_standard_norm():\n+def test_dpi_after_unpickle():\n+    fig = plt.figure(dpi=200)\n+    x = np.linspace(0, 2 * np.pi)\n+    y = np.sin(x)\n+    plt.plot(x, y)\n+\n+    is_m1_mac = platform.system() == \"Darwin\" and \"arm64\" in platform.platform()\n+\n+    with open('test_figure.pickle', 'wb') as f:\n+        pickle.dump(fig, f)\n+\n+    with open('test_figure.pickle', 'rb') as f:\n+        fig_unpickled = pickle.load(f)\n+\n+    # If running on M1 Mac, assert that the DPI does not double\n+    if is_m1_mac:\n+        assert fig_unpickled.dpi == 200, \"DPI should remain the same after unpickling on M1 Mac\"\n+\n+    plt.close(fig)\n+    plt.close(fig_unpickled)\n     assert type(pickle.loads(pickle.dumps(mpl.colors.LogNorm()))) \\\n         == mpl.colors.LogNorm\n \n",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 87375f2..5bbd9a5 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6587,6 +6587,10 @@ def test_integrate(dask):\n \n     # along y\n     actual = da.integrate(\"y\")\n+    # Verify using 'coord' instead of 'dim' for DataArray\n+    with pytest.warns(FutureWarning):\n+        actual_coord = da.integrate(coord=\"y\")\n+    assert_equal(actual, actual_coord)\n     expected_y = xr.DataArray(\n         np.trapz(da, da[\"y\"], axis=1),\n         dims=[\"x\"],\n",
  "pydata__xarray-4094": "",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..6a7dedd 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -130,6 +130,32 @@ def test_regex_error(capsys: CaptureFixture) -> None:\n     )\n     assert assertString in output.err\n \n+import re\n+from typing import Any\n+import pytest\n+from pylint.lint import Run\n+from tests.test_helpers import EMPTY_MODULE\n+\n+CSV_REGEX_COMMA_CASES = [\n+    (\"foo\", [\"foo\"]),\n+    (\"foo,bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar{1,3}\", [\"foo\", \"bar{1,3}\"]),\n+    (\"(foo{1,3})\", [\"(foo{1,3})\"]),\n+]\n+\n+@pytest.mark.parametrize(\"in_string,expected\", CSV_REGEX_COMMA_CASES)\n+def test_csv_regex_comma_in_quantifier(in_string: str, expected: list[str]) -> None:\n+    \"\"\"Check that we correctly parse a comma-separated regex when there are one or more commas within quantifier expressions.\"\"\"\n+    def _template_run(in_string: str) -> list[re.Pattern[Any]]:\n+        r = Run(\n+            [str(EMPTY_MODULE), rf\"--bad-names-rgx={in_string}\"],\n+            exit=False,\n+        )\n+        bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs\n+        return bad_names_rgxs\n+\n+    assert _template_run(in_string) == [re.compile(regex) for regex in expected]\n \n def test_csv_regex_error(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error when an option is passed and one\n",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..3bfd2d6 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1156,6 +1156,9 @@ def test_summary_list_after_errors(testdir):\n     )\n \n \n+import pytest\n+from _pytest.main import ExitCode\n+\n def test_importorskip():\n     with pytest.raises(\n         pytest.skip.Exception,\n@@ -1184,4 +1187,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..4e0b88b 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,37 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+def test_feature_union_with_pandas_output():\n+    \"\"\"Test FeatureUnion with a custom transformer and pandas output.\"\"\"\n+    import pandas as pd\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn.pipeline import FeatureUnion, make_union\n+    from sklearn import set_config\n+    \n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y: pd.Series | None = None, **kwargs):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y: pd.Series | None = None) -> pd.DataFrame:\n+            return X[\"value\"].groupby(X[\"date\"]).sum().reset_index(drop=True)\n+\n+    # Set the configuration to pandas output\n+    set_config(transform_output=\"pandas\")\n+\n+    # Create a FeatureUnion with our custom transformer\n+    union = FeatureUnion([(\"my_transformer\", MyTransformer())])\n+\n+    # Transform the data\n+    transformed_data = union.fit_transform(data)\n+\n+    # Check if the transformed data is of type DataFrame\n+    assert isinstance(transformed_data, pd.DataFrame)\n+\n+    # Check the shape of the transformed data\n+    assert transformed_data.shape == (4, 1)  # We expect 4 rows, 1 column due to aggregation\n",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex f07be18..aab391d 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -11,6 +11,11 @@\n import pytest\n \n from sphinx import addnodes\n+from sphinx.testing.util import SphinxTestApp\n+from sphinx.util.docutils import new_document\n+from docutils import nodes\n+from sphinx.ext.autodoc import between\n+from sphinx.ext.autodoc.directive import AutodocDirective\n \n \n @pytest.mark.sphinx('dummy', testroot='ext-autodoc')\n@@ -30,4 +35,22 @@ def test_autodoc(app, status, warning):\n my_name\n \n alias of bug2437.autodoc_dummy_foo.Foo\"\"\"\n-    assert warning.getvalue() == ''\n+    assert warning.getvalue() == ''\n+    \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_autodoc_typehints_none_handling(app: SphinxTestApp, status, warning):\n+    # Test autodoc_typehints='description'\n+    app.config.autodoc_typehints = 'description'\n+    app.builder.build_all()\n+    content = (app.outdir / 'index.html').read_text()\n+\n+    # Check that a link to None's documentation is present\n+    assert '<a class=\"reference external\" href=\"https://docs.python.org/3/library/constants.html#None\"' in content\n+\n+    # Test autodoc_typehints='signature'\n+    app.config.autodoc_typehints = 'signature'\n+    app.builder.build_all()\n+    content = (app.outdir / 'index.html').read_text()\n+\n+    # Check that a link to None's documentation is NOT present\n+    assert '<a class=\"reference external\" href=\"https://docs.python.org/3/library/constants.html#None\"' not in content\n",
  "sphinx-doc__sphinx-8056": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 1d6a8cf..ff8fb3e 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1659,6 +1659,56 @@ Example Function\n             actual = str(NumpyDocstring(docstring, config, app, \"method\"))\n             self.assertEqual(expected, actual)\n \n+    def test_multiple_parameters_without_optional(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like\n+    Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: :class:`array_like`\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: :class:`array_like`\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_with_optional(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, optional) -- Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: :class:`array_like`, optional\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: :class:`array_like`, optional\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_xrefs_in_return_type(self):\n         docstring = \"\"\"\n Example Function\n",
  "sphinx-doc__sphinx-8551": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex fd4bdc4..457eb66 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -773,9 +773,54 @@ def test_pydecoratormethod_signature(app):\n     assert 'deco' in domain.objects\n     assert domain.objects['deco'] == ('index', 'deco', 'method')\n \n+import pytest\n+from sphinx.testing.restructuredtext import parse\n+from docutils import nodes\n+from sphinx import addnodes\n \n @pytest.mark.sphinx(freshenv=True)\n-def test_module_index(app):\n+def test_type_rtype_resolution(app):\n+    text = (\n+        \".. py:module:: mod\\n\"\n+        \".. py:class:: mod.A\\n\"\n+        \".. py:class:: mod.submod.A\\n\"\n+\n+        \".. py:function:: f()\\n\"\n+        \"   :param mod.A a:\\n\"\n+        \"   :param mod.submod.A b:\\n\"\n+        \"   :rtype: mod.A\\n\"\n+        \"   :rtype: mod.submod.A\\n\"\n+\n+        \".. py:currentmodule:: mod\\n\"\n+\n+        \".. py:function:: f()\\n\"\n+        \"   :param A a:\\n\"\n+        \"   :param mod.A b:\\n\"\n+        \"   :param mod.submod.A c:\\n\"\n+        \"   :rtype: A\\n\"\n+        \"   :rtype: mod.A\\n\"\n+        \"   :rtype: mod.submod.A\\n\"\n+\n+        \".. py:currentmodule:: mod.submod\\n\"\n+\n+        \".. py:function:: f()\\n\"\n+        \"   :param A a:\\n\"\n+        \"   :param mod.A b:\\n\"\n+        \"   :param mod.submod.A c:\\n\"\n+        \"   :rtype: A\\n\"\n+        \"   :rtype: mod.A\\n\"\n+        \"   :rtype: mod.submod.A\\n\"\n+    )\n+    # Parse the text using Sphinx application instance\n+    doctree = parse(app, text)\n+\n+    # Assertions on the parsed doctree to verify xref resolution\n+    for param_field in doctree.traverse(addnodes.field):\n+        # Check that all 'A' references resolve correctly\n+        if 'param' in param_field.astext() or 'rtype' in param_field.astext():\n+            xref = param_field.next_node(addnodes.pending_xref)\n+            assert xref['reftarget'] in ['mod.A', 'mod.submod.A']\n+            assert 'refspecific' in xref.attributes\n     text = (\".. py:module:: docutils\\n\"\n             \".. py:module:: sphinx\\n\"\n             \".. py:module:: sphinx.config\\n\"\n",
  "sphinx-doc__sphinx-8593": "",
  "sphinx-doc__sphinx-9230": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex e86a758..6fbf6be 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -983,8 +983,46 @@ def test_info_field_list(app):\n                 refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n+def test_dict_str_str_param_rendering(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:class:: Class\\n\"\n+            \"\\n\"\n+            \"   :param dict(str, str) opc_meta: (optional)\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree, (nodes.target,\n+                          addnodes.index,\n+                          addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                                    [desc_addname, \"example.\"],\n+                                                    [desc_name, \"Class\"])],\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree[3][1][0][0],\n+                ([nodes.field_name, \"Parameters\"],\n+                 [nodes.field_body, nodes.bullet_list, ([nodes.list_item, nodes.paragraph])]))\n \n-def test_info_field_list_var(app):\n+    # :param dict(str, str) opc_meta:\n+    assert_node(doctree[3][1][0][0][1][0][0][0],\n+                ([addnodes.literal_strong, \"opc_meta\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"dict\"],\n+                 [addnodes.literal_emphasis, \"(\"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \", \"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \")\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"(optional)\"))\n+    assert_node(doctree[3][1][0][0][1][0][0][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"dict\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n             \"   :var int attr: blah blah\\n\")\n",
  "sphinx-doc__sphinx-9258": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a7d51b6..ad4fc05 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -1009,6 +1009,42 @@ def test_info_field_list(app):\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n \n+def test_info_field_list_piped_type(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:class:: Class\\n\"\n+            \"\\n\"\n+            \"   :param age: blah blah\\n\"\n+            \"   :type age: int | str\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree,\n+                (nodes.target,\n+                 addnodes.index,\n+                 addnodes.index,\n+                 [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                           [desc_addname, \"example.\"],\n+                                           [desc_name, \"Class\"])],\n+                         [desc_content, nodes.field_list, nodes.field, (nodes.field_name,\n+                                                                        nodes.field_body)])]))\n+\n+    assert_node(doctree[3][1][0][0][1],\n+                ([nodes.paragraph, ([addnodes.literal_strong, \"age\"],\n+                                    \" (\",\n+                                    [pending_xref, addnodes.literal_emphasis, \"int\"],\n+                                    [addnodes.literal_emphasis, \" | \"],\n+                                    [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                                    \")\",\n+                                    \" -- \",\n+                                    \"blah blah\")],))\n+\n+    assert_node(doctree[3][1][0][0][1][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"int\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+\n+\n def test_info_field_list_var(app):\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-9673": "",
  "sympy__sympy-18211": "diff --git a/sympy/solvers/tests/test_solveset.py b/sympy/solvers/tests/test_solveset.py\nindex 7bd9e29..00e31cd 100644\n--- a/sympy/solvers/tests/test_solveset.py\n+++ b/sympy/solvers/tests/test_solveset.py\n@@ -1048,7 +1048,14 @@ def test__solveset_multi():\n             ImageSet(Lambda(((theta,),), (0, theta)), ImageSet(Lambda(theta, (theta,)), Interval(0, pi))))\n \n \n+from sympy import Eq, cos, sin, solveset, ConditionSet, Reals, sqrt\n+\n def test_conditionset():\n+    # Test case for the reported issue\n+    assert solveset(Eq(x*cos(x) - 3*sin(x), 0), x, domain=Reals) == ConditionSet(x, Eq(x*cos(x) - 3*sin(x), 0), Reals)\n+\n+    # Additional similar test case to verify consistent behavior\n+    assert solveset(Eq(x**2 + sqrt(x*2) + sin(x), 0), x, domain=Reals) == ConditionSet(x, Eq(sqrt(2)*sqrt(x) + x**2 + sin(x), 0), Reals)\n     assert solveset(Eq(sin(x)**2 + cos(x)**2, 1), x, domain=S.Reals) == \\\n         ConditionSet(x, True, S.Reals)\n \n",
  "sympy__sympy-18698": "",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..02d940a 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3254,8 +3254,11 @@ def test_issue_5786():\n     assert expand(factor(expand(\n         (x - I*y)*(z - I*t)), extension=[I])) == -I*t*x - t*y + x*z - I*y*z\n \n-\n-def test_noncommutative():\n+def test_issue_18895_factor_extension():\n+    # Test the specific issue where factor with extension drops a factor\n+    z = expand((x - 1)*(y - 1))\n+    assert factor(z) == (x - 1)*(y - 1)\n+    assert factor(z, extension=[I]) == (x - 1)*(y - 1)\n     class foo(Expr):\n         is_commutative=False\n     e = x/(x + x*y)\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..1c37c2d 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -1,3 +1,6 @@\n+\n+from sympy import Symbol\n+\n \"\"\"This tests sympy/core/basic.py with (ideally) no reference to subclasses\n of Basic or Atom.\"\"\"\n \n@@ -28,6 +31,10 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n+def test_symbol_no_dict():\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__'), \"Symbol instance should not have a __dict__\"\n+\n def test_structure():\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n",
  "sympy__sympy-24562": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 13e3235..50a71b5 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -369,6 +369,25 @@ def test_Rational_new():\n     assert n.q == 4\n     assert n.p == -2\n \n+def test_issue_rational_string_vs_numeric():\n+    # Original issue: Rational('0.5', '100') gives 1/100100 instead of 1/200\n+    assert Rational('0.5', '100') == Rational(1, 200)\n+\n+    # Additional tests to ensure the behavior across various inputs\n+    assert Rational('0.5', 100) == Rational(1, 200)\n+    assert Rational(0.5, '100') == Rational(1, 200)\n+\n+    # Test with integers as strings\n+    assert Rational('1', '2') == Rational(1, 2)\n+    assert Rational('2', 2) == Rational(1, 1)\n+\n+    # Test a valid fraction in string form\n+    assert Rational('1234/5678') == Rational(617, 2839)\n+\n+    # Test a more complex string input\n+    assert Rational('1e-2/3.2') == Rational(1, 320)\n+    assert Rational('1e-3/3.2e2') == Rational(1, 320000)\n+\n \n def test_Number_new():\n     \"\"\"\"\n",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..5fd9754 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3189,7 +3189,21 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n \n         self.assertEqual(SomeForm()['field'].id_for_label, 'id_field')\n \n-    def test_boundfield_id_for_label_override_by_attrs(self):\n+    def test_boundwidget_id_for_label_with_choicewidget_options(self):\n+        \"\"\"\n+        Verify that BoundWidget.id_for_label uses the id set by ChoiceWidget.options.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'custom_id'}),\n+            )\n+\n+        form = SomeForm(auto_id='prefix_%s')\n+        subwidgets = form['field'].subwidgets\n+        # Assuming the fix has been applied, these should use the id from attrs\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_id_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_id_1')\n         \"\"\"\n         If an id is provided in `Widget.attrs`, it overrides the generated ID,\n         unless it is `None`.\n",
  "matplotlib__matplotlib-20676": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex b009975..31961fd 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -301,8 +301,33 @@ def test_tool_line_handle():\n \n     assert tool_line_handle.positions == positions\n \n+import pytest\n+from matplotlib import pyplot as plt\n+from matplotlib import widgets\n+from matplotlib.testing.widgets import do_event\n \n-def check_lasso_selector(**kwargs):\n+@pytest.mark.parametrize('direction', (\"horizontal\", \"vertical\"))\n+def test_span_selector_bound_no_zero(direction):\n+    fig, ax = plt.subplots()\n+    ax.plot([10, 20], [10, 30])\n+    ax.set_xlim(10, 20)\n+    ax.set_ylim(10, 30)\n+    ax.figure.canvas.draw()\n+    \n+    orig_xlim = ax.get_xlim()\n+    orig_ylim = ax.get_ylim()\n+    \n+    ss = widgets.SpanSelector(ax, lambda vmin, vmax: None, direction, interactive=True)\n+    \n+    assert ax.get_xlim() == orig_xlim\n+    assert ax.get_ylim() == orig_ylim\n+    \n+    do_event(ss, 'press', xdata=15, ydata=20, button=1)\n+    do_event(ss, 'onmove', xdata=18, ydata=25, button=1)\n+    do_event(ss, 'release', xdata=18, ydata=25, button=1)\n+    \n+    assert ax.get_xlim() == orig_xlim\n+    assert ax.get_ylim() == orig_ylim\n     ax = get_ax()\n \n     def onselect(verts):\n",
  "scikit-learn__scikit-learn-12682": "diff --git a/sklearn/decomposition/tests/test_dict_learning.py b/sklearn/decomposition/tests/test_dict_learning.py\nindex 35a43f8..a992d7b 100644\n--- a/sklearn/decomposition/tests/test_dict_learning.py\n+++ b/sklearn/decomposition/tests/test_dict_learning.py\n@@ -51,6 +51,58 @@ def test_dict_learning_shapes():\n     assert_equal(dico.transform(X).shape, (X.shape[0], n_components))\n \n \n+import pytest\n+import numpy as np\n+from sklearn.decomposition import SparseCoder\n+from sklearn.exceptions import ConvergenceWarning\n+\n+def test_sparse_coder_max_iter_for_lasso():\n+    def ricker_function(resolution, center, width):\n+        \"\"\"Discrete sub-sampled Ricker (Mexican hat) wavelet\"\"\"\n+        x = np.linspace(0, resolution - 1, resolution)\n+        x = ((2 / (np.sqrt(3 * width) * np.pi ** .25))\n+             * (1 - (x - center) ** 2 / width ** 2)\n+             * np.exp(-(x - center) ** 2 / (2 * width ** 2)))\n+        return x\n+\n+    def ricker_matrix(width, resolution, n_components):\n+        \"\"\"Dictionary of Ricker (Mexican hat) wavelets\"\"\"\n+        centers = np.linspace(0, resolution - 1, n_components)\n+        D = np.empty((n_components, resolution))\n+        for i, center in enumerate(centers):\n+            D[i] = ricker_function(resolution, center, width)\n+        D /= np.sqrt(np.sum(D ** 2, axis=1))[:, np.newaxis]\n+        return D\n+\n+    transform_algorithm = 'lasso_cd'\n+    resolution = 1024\n+    subsampling = 3  # subsampling factor\n+    n_components = resolution // subsampling\n+\n+    # Compute a wavelet dictionary\n+    D_multi = np.r_[tuple(ricker_matrix(width=w, resolution=resolution,\n+                          n_components=n_components // 5)\n+                          for w in (10, 50, 100, 500, 1000))]\n+\n+    X = np.linspace(0, resolution - 1, resolution)\n+    first_quarter = X < resolution / 4\n+    X[first_quarter] = 3.\n+    X[np.logical_not(first_quarter)] = -1.\n+    X = X.reshape(1, -1)\n+\n+    # check that the underlying model fails to converge\n+    with pytest.warns(ConvergenceWarning):\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=1)\n+        model.fit_transform(X)\n+\n+    # check that the underlying model converges w/o warnings\n+    with pytest.warns(None) as record:\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=2000)\n+        model.fit_transform(X)\n+    assert not record.list\n+\n def test_dict_learning_overcomplete():\n     n_components = 12\n     dico = DictionaryLearning(n_components, random_state=0).fit(X)\n",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..f6e02d8 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -147,6 +147,47 @@ def test_multi_target_sample_weights():\n     X_test = [[1.5, 2.5, 3.5], [3.5, 4.5, 5.5]]\n     assert_almost_equal(rgr.predict(X_test), rgr_w.predict(X_test))\n \n+import pytest\n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+from sklearn.model_selection import cross_val_predict\n+from sklearn.ensemble import RandomForestClassifier\n+from numpy.testing import assert_array_equal\n+\n+def test_cross_val_predict_multioutput_predict_proba():\n+    # Create a multilabel classification problem\n+    X, Y = make_multilabel_classification(n_samples=100, n_classes=2, n_labels=1, random_state=42)\n+\n+    # Initialize a MultiOutputClassifier with a classifier that supports predict_proba\n+    clf = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+\n+    # cross_val_predict should work without throwing an exception\n+    try:\n+        pred_proba = cross_val_predict(clf, X, Y, cv=5, method='predict_proba')\n+        # Ensure the result is a list with the correct shape\n+        assert isinstance(pred_proba, list)\n+        assert len(pred_proba) == Y.shape[1]\n+        assert all(isinstance(p, np.ndarray) for p in pred_proba)\n+    except AttributeError as e:\n+        pytest.fail(f\"cross_val_predict raised an AttributeError: {e}\")\n+\n+@pytest.mark.parametrize(\n+    'estimator',\n+    [RandomForestClassifier(n_estimators=2),\n+     MultiOutputClassifier(RandomForestClassifier(n_estimators=2)),\n+     ClassifierChain(RandomForestClassifier(n_estimators=2))]\n+)\n+def test_multi_output_classes_(estimator):\n+    # Tests classes_ attribute of multioutput classifiers\n+    # RandomForestClassifier supports multioutput out-of-the-box\n+    estimator.fit(X, y)\n+    assert isinstance(estimator.classes_, list)\n+    assert len(estimator.classes_) == n_outputs\n+    for estimator_classes, expected_classes in zip(classes,\n+                                                   estimator.classes_):\n+        assert_array_equal(estimator_classes, expected_classes)\n+\n \n # Import the data\n iris = datasets.load_iris()\n",
  "sphinx-doc__sphinx-9658": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 072cdc7..05504d2 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -170,7 +170,19 @@ def test_restify_broken_type_hints():\n     assert restify(BrokenType) == ':py:class:`tests.test_util_typing.BrokenType`'\n \n \n-def test_stringify():\n+def test_restify_mock_base_class():\n+    with mock(['torch.nn']):\n+        import torch.nn as nn\n+        class MockedClass(nn.Module):\n+            pass\n+        assert restify(MockedClass) == ':py:class:`torch.nn.Module`'\n+\n+def test_stringify_mock_base_class():\n+    with mock(['torch.nn']):\n+        import torch.nn as nn\n+        class MockedClass(nn.Module):\n+            pass\n+        assert stringify(MockedClass) == 'torch.nn.Module'\n     assert stringify(int) == \"int\"\n     assert stringify(str) == \"str\"\n     assert stringify(None) == \"None\"\n",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..ab55ec5 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -347,6 +347,23 @@ def test_reverse_order():\n     assert Product(x*y, (x, a, b), (y, 2, 5)).reverse_order(y, x) == \\\n            Product(x*y, (x, b + 1, a - 1), (y, 6, 1))\n \n+def test_issue_13546():\n+    n = Symbol('n')\n+    k = Symbol('k')\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 2).doit() == S(15)/2\n+\n+    # Additional test cases\n+    assert p.subs(n, 1).doit() == S(3)  # (2 + 1) = 3\n+    assert p.subs(n, 3).doit() == S(63)/8  # (3 + 1) * (3 + 1/2) * (3 + 1/4) = 63/8\n+    assert p.subs(n, 4).doit() == S(255)/16  # (4 + 1) * (4 + 1/2) * (4 + 1/4) * (4 + 1/8) = 255/16\n+    \n+    # Symbolic test\n+    from sympy import q_pochhammer\n+    q = Rational(1, 2)\n+    expected = (n+1) * q_pochhammer(q, q, n-1)\n+    actual = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert simplify(actual - expected) == 0\n \n def test_issue_9983():\n     n = Symbol('n', integer=True, positive=True)\n@@ -357,4 +374,4 @@ def test_issue_9983():\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}