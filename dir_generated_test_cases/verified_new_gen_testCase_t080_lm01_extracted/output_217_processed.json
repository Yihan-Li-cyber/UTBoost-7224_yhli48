{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..3a41980 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -55,6 +55,31 @@ compound_models = {\n             )\n }\n \n+# Add imports for necessary modules\n+import numpy as np\n+from astropy.modeling import models as m\n+from astropy.modeling.separable import separability_matrix\n+\n+# Test case for the specific issue\n+def test_nested_compound_model_separability():\n+    # Create a nested compound model\n+    linear_cm = m.Linear1D(10) & m.Linear1D(5)\n+    model = m.Pix2Sky_TAN() & linear_cm\n+    \n+    # Get the separability matrix\n+    result = separability_matrix(model)\n+    \n+    # Expected result as per the issue's description\n+    expected_result = np.array([\n+        [True, True, False, False],\n+        [True, True, False, False],\n+        [False, False, True, False],\n+        [False, False, False, True]\n+    ])\n+    \n+    # Assert that the separability matrix is as expected\n+    assert np.array_equal(result, expected_result), f\"Expected {expected_result}, but got {result}\"\n+\n \n def test_coord_matrix():\n     c = _coord_matrix(p2, 'left', 2)\n",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "diff --git a/astropy/io/fits/tests/test_connect.py b/astropy/io/fits/tests/test_connect.py\nindex 00deafe..ba528aa 100644\n--- a/astropy/io/fits/tests/test_connect.py\n+++ b/astropy/io/fits/tests/test_connect.py\n@@ -1,3 +1,4 @@\n+\n import gc\n import warnings\n \n@@ -7,7 +8,7 @@ from numpy.testing import assert_allclose, assert_array_equal\n \n from astropy import units as u\n from astropy.io import fits\n-from astropy.io.fits import BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu\n+from astropy.io.fits import BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu, connect\n from astropy.io.fits.column import (\n     _fortran_to_python_format,\n     _parse_tdisp_format,\n",
  "astropy__astropy-14508": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex 6bdf92c..a02420d 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -144,6 +144,34 @@ class TestHeaderFunctions(FitsTestCase):\n         f1 = _pad(\"ABC     = (1.23453774378878E+88, 6.32476736476374E-15)\")\n         f2 = _pad(\"ABC     = (1.2345377437887E+088, 6.3247673647637E-015)\")\n         f3 = _pad(\"ABC     = (1.23453774378878E+88, 6.32476736476374E-15)\")\n+\n+    def test_floating_point_string_representation_card(self):\n+        \"\"\"Ensures Card formats float values with the correct precision, avoiding comment truncation\"\"\"\n+\n+        # Test case for the float value 0.009125 with a comment\n+        k = \"HIERARCH ABC DEF GH IJKLMN\"\n+        com = \"[m] abcdef ghijklm nopqrstu vw xyzab\"\n+        c = fits.Card(k, 0.009125, com)\n+        expected_str = f\"{k} = 0.009125 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Additional cases to ensure rounded string representation\n+        c = fits.Card(k, 8.95, com)\n+        expected_str = f\"{k} = 8.95 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, -99.9, com)\n+        expected_str = f\"{k} = -99.9 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Further tests to ensure robustness\n+        c = fits.Card(k, 123456789.0, com)\n+        expected_str = f\"{k} = 123456789.0 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, 0.000000123456789, com)\n+        expected_str = f\"{k} = 1.23456789E-07 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n         if str(c) != f1 and str(c) != f2:\n             assert str(c) == f3\n \n",
  "astropy__astropy-14539": "diff --git a/astropy/io/fits/tests/test_diff.py b/astropy/io/fits/tests/test_diff.py\nindex 9bf4897..9c0fbb8 100644\n--- a/astropy/io/fits/tests/test_diff.py\n+++ b/astropy/io/fits/tests/test_diff.py\n@@ -600,8 +600,24 @@ class TestDiff(FitsTestCase):\n         assert \"...and at 1 more indices.\\n Column D data differs in row 0:\" in report\n         assert \"13 different table data element(s) found (65.00% different)\" in report\n         assert report.count(\"more indices\") == 1\n-\n-    def test_identical_files_basic(self):\n+    \n+    def test_fitsdiff_identical_vla(self):\n+        \"\"\"\n+        Test that FITSDiff reports no differences when comparing a FITS file\n+        with VLAs to itself.\n+        \"\"\"\n+        from astropy.io import fits\n+        \n+        col = fits.Column('a', format='QD', array=[[0], [0, 0]])\n+        hdu = fits.BinTableHDU.from_columns([col])\n+        hdu.writeto('diffbug_vla_test.fits', overwrite=True)\n+        \n+        diff = fits.FITSDiff('diffbug_vla_test.fits', 'diffbug_vla_test.fits')\n+        assert diff.identical, \"FITSDiff should report identical for the same file.\"\n+        \n+        # Clean up the file created for the test\n+        import os\n+        os.remove('diffbug_vla_test.fits')\n         \"\"\"Test identicality of two simple, extensionless files.\"\"\"\n \n         a = np.arange(100).reshape(10, 10)\n",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..ff377a3 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -88,6 +88,23 @@ def test_inherit_docstrings():\n         # TODO: Maybe if __doc__ is None this test should be skipped instead?\n         assert Subclass.__call__.__doc__ == \"FOO\"\n \n+    # Test for property inheritance\n+    class BaseWithProperty(metaclass=misc.InheritDocstrings):\n+        @property\n+        def bar(self):\n+            \"BAR\"\n+            return 1\n+\n+    class SubclassWithProperty(BaseWithProperty):\n+        @property\n+        def bar(self):\n+            return 42\n+\n+    if BaseWithProperty.bar.__doc__ is not None:\n+        assert SubclassWithProperty.bar.__doc__ == \"BAR\"\n+        # TODO: Maybe if __doc__ is None this test should be skipped instead?\n+        assert Subclass.__call__.__doc__ == \"FOO\"\n+\n \n def test_set_locale():\n     # First, test if the required locales are available\n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..53345f6 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -188,6 +188,16 @@ def test_unknown_unit3():\n     with pytest.raises(ValueError):\n         unit._get_converter(unit3)\n \n+    # Test for equality with None\n+    assert unit != None  # noqa\n+    assert not (unit == None)  # Explicit check for False\n+    assert unit not in (None, u.m)\n+    # Ensure no TypeError is raised when comparing with None\n+    try:\n+        result = unit == None\n+    except TypeError:\n+        pytest.fail(\"Comparison with None raised TypeError\")\n+\n     x = unit.to_string('latex')\n     y = unit2.to_string('cgs')\n \n",
  "astropy__astropy-7671": "diff --git a/astropy/utils/tests/test_introspection.py b/astropy/utils/tests/test_introspection.py\nindex 852d721..6a0ee6b 100644\n--- a/astropy/utils/tests/test_introspection.py\n+++ b/astropy/utils/tests/test_introspection.py\n@@ -69,7 +69,17 @@ def test_minversion():\n     test_module.__version__ = '0.12.2'\n     good_versions = ['0.12', '0.12.1', '0.12.0.dev']\n     bad_versions = ['1', '1.2rc1']\n+    # Additional test cases to verify the fix for LooseVersion issues\n+    # caused by mixed alphanumeric version components\n+    test_module.__version__ = '1.14.3'\n+    assert not minversion(test_module, '1.14dev')  # Expect False, as per the issue demonstration\n+    test_module.__version__ = '1.14dev'\n+    assert minversion(test_module, '1.14dev')  # Expect True, as it's the same version\n+    assert not minversion(test_module, '1.15')  # Expect False, since 1.14dev < 1.15\n+    assert minversion(test_module, '1.14.2')  # Expect True, since 1.14dev is considered newer than 1.14.2\n+    assert minversion(test_module, '1.14.3')  # Expect True, same version\n+    assert not minversion(test_module, '1.14.4')  # Expect False, since 1.14dev < 1.14.4\n     for version in good_versions:\n         assert minversion(test_module, version)\n     for version in bad_versions:\n-        assert not minversion(test_module, version)\n+        assert not minversion(test_module, version)\n",
  "astropy__astropy-8707": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex a2103c6..90de842 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -77,7 +77,26 @@ class TestHeaderFunctions(FitsTestCase):\n         assert 'B' in header\n         assert header[0] == 'B'\n         assert header['B'] == 'B'\n-        assert header.comments['B'] == 'C'\n+    def test_card_from_unicode(self):\n+        \"\"\"Test loading a Card from a unicode string.\"\"\"\n+        c = Card.fromstring(\"DEF     = 'def'\")\n+        assert c.keyword == 'DEF'\n+        assert c.value == 'def'\n+\n+    def test_header_fromstring_unicode(self):\n+        \"\"\"Test reading a Header from a unicode string.\"\"\"\n+\n+        header_str = (\n+            \"SIMPLE  =                    T / conforms to FITS standard\\n\"\n+            \"BITPIX  =                    8 / array data type\\n\"\n+            \"NAXIS   =                    0 / number of array dimensions\\n\"\n+            \"END\\n\"\n+        )\n+        header = Header.fromstring(header_str)\n+        \n+        assert header['SIMPLE'] is True\n+        assert header['BITPIX'] == 8\n+        assert header['NAXIS'] == 0\n \n     def test_card_constructor_default_args(self):\n         \"\"\"Test Card constructor with default argument values.\"\"\"\n@@ -2330,6 +2349,11 @@ class TestHeaderFunctions(FitsTestCase):\n                 c.verify('exception')\n \n \n+import pytest\n+from astropy.io import fits\n+from astropy.io.fits.header import Header\n+from astropy.io.fits.card import Card\n+\n class TestRecordValuedKeywordCards(FitsTestCase):\n     \"\"\"\n     Tests for handling of record-valued keyword cards as used by the\n",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..6e522fe 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -32,7 +32,9 @@ except ImportError:\n     HAS_MATPLOTLIB = False\n \n \n-\"\"\" The Quantity class will represent a number + unit + uncertainty \"\"\"\n+import numpy as np\n+import astropy.units as u\n+import pytest\n \n \n class TestQuantityCreation:\n@@ -142,7 +144,14 @@ class TestQuantityCreation:\n         a3 = np.array([1., 2.], dtype=np.float32)\n         q3 = u.Quantity(a3, u.yr)\n         assert q3.dtype == a3.dtype\n-        # items stored as objects by numpy should be converted to float\n+        # Test preservation of float16 and float32 dtype\n+        a3_32 = np.array([1., 2.], dtype=np.float32)\n+        q3_32 = u.Quantity(a3_32, u.yr)\n+        assert q3_32.dtype == a3_32.dtype\n+\n+        a3_16 = np.array([1., 2.], dtype=np.float16)\n+        q3_16 = u.Quantity(a3_16, u.yr)\n+        assert q3_16.dtype == a3_16.dtype\n         # by default\n         q4 = u.Quantity(decimal.Decimal('10.25'), u.m)\n         assert q4.dtype == float\n",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..0a67822 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -218,6 +218,17 @@ TEST_DATA = [\n     (URLValidator(EXTENDED_SCHEMES), 'git+ssh://git@github.com/example/hg-git.git', None),\n \n     (URLValidator(EXTENDED_SCHEMES), 'git://-invalid.com', ValidationError),\n+    \n+    # New Test Cases for URLValidator to check rejection of invalid characters in username and password\n+    (URLValidator(), 'http://foo@bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo/bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar@baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar/baz@example.com', ValidationError),\n+    (URLValidator(), 'http://invalid-.com/?m=foo@example.com', ValidationError),\n+    (URLValidator(), \"http://-.~_!$&'()*+,;=%40:80%2f@example.com\", ValidationError),\n+    # Valid case with encoded characters\n+    (URLValidator(), 'http://foo%3Abar%40baz@example.com', None),\n     # Trailing newlines not accepted\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..f226369 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -9,6 +10,7 @@ from django.db.models import (\n     Max, Min, Sum, Value,\n )\n from django.test import TestCase\n+from django.db.models.expressions import Case, When\n from django.test.utils import Approximate, CaptureQueriesContext\n from django.utils import timezone\n \n@@ -389,7 +391,35 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n-    def test_count_star(self):\n+    def test_count_distinct_expression(self):\n+        # This test verifies that using Count with a Case condition and distinct=True\n+        # does not produce a query error.\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=300, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n+        \n+    def test_count_distinct_with_multiple_cases(self):\n+        # Test with multiple Case conditions and distinct=True\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings_and_prices=Count(\n+                Case(\n+                    When(pages__gt=300, then='rating'),\n+                    When(price__lt=20, then='price')\n+                ),\n+                distinct=True\n+            ),\n+        )\n+        # Expected result will depend on the fixture data. Adjust the expected value accordingly.\n+        # Assuming expected distinct rating or price entries count is 5\n+        self.assertEqual(aggs['distinct_ratings_and_prices'], 5)\n+\n+    def test_count_distinct_with_empty_result(self):\n+        # Test with a Case that results in no matches\n+        aggs = Book.objects.aggregate(\n+            distinct_no_match=Count(Case(When(pages__gt=5000, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_no_match'], 0)\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n         sql = ctx.captured_queries[0]['sql']\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..e2997d6 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1093,7 +1093,12 @@ class OverrideSettingsTests(SimpleTestCase):\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n \n-    def test_override_file_upload_permissions(self):\n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        Test that the default FILE_UPLOAD_PERMISSIONS is set to 0o644.\n+        \"\"\"\n+        default_permission = 0o644\n+        self.assertEqual(default_storage.file_permissions_mode, default_permission)\n         \"\"\"\n         Overriding the FILE_UPLOAD_PERMISSIONS setting should be reflected in\n         the file_permissions_mode attribute of\n@@ -1103,7 +1108,12 @@ class OverrideSettingsTests(SimpleTestCase):\n         with self.settings(FILE_UPLOAD_PERMISSIONS=0o777):\n             self.assertEqual(default_storage.file_permissions_mode, 0o777)\n \n-    def test_override_file_upload_directory_permissions(self):\n+    def test_explicit_file_upload_permissions(self):\n+        \"\"\"\n+        Test setting FILE_UPLOAD_PERMISSIONS to a specific value.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=0o600):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o600)\n         \"\"\"\n         Overriding the FILE_UPLOAD_DIRECTORY_PERMISSIONS setting should be\n         reflected in the directory_permissions_mode attribute of\n",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..e9c7ddd 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,3 +1,4 @@\n+\n import os\n import signal\n from unittest import mock\n@@ -29,6 +30,41 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             DatabaseClient.runshell_db(dbinfo)\n         return self.subprocess_args, self.pgpass\n \n+    def test_pgpassword_set(self):\n+        \"\"\"\n+        Test that the PGPASSWORD environment variable is set correctly \n+        when a password is provided.\n+        \"\"\"\n+        with mock.patch('subprocess.run') as mock_run:\n+            DatabaseClient.runshell_db({\n+                'database': 'dbname',\n+                'user': 'testuser',\n+                'password': 'testpassword',\n+                'host': 'localhost',\n+                'port': '5432',\n+            })\n+            mock_run.assert_called_once()\n+            _, kwargs = mock_run.call_args\n+            self.assertIn('env', kwargs)\n+            self.assertEqual(kwargs['env'].get('PGPASSWORD'), 'testpassword')\n+\n+    def test_pgpassword_not_set(self):\n+        \"\"\"\n+        Test that the PGPASSWORD environment variable is not set \n+        when no password is provided.\n+        \"\"\"\n+        with mock.patch('subprocess.run') as mock_run:\n+            DatabaseClient.runshell_db({\n+                'database': 'dbname',\n+                'user': 'testuser',\n+                'host': 'localhost',\n+                'port': '5432',\n+            })\n+            mock_run.assert_called_once()\n+            _, kwargs = mock_run.call_args\n+            self.assertIn('env', kwargs)\n+            self.assertIsNone(kwargs['env'].get('PGPASSWORD'))\n+\n     def test_basic(self):\n         self.assertEqual(\n             self._run_it({\n@@ -113,4 +149,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..ac0ae83 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -5,6 +5,7 @@ from django.contrib.contenttypes.models import ContentType\n from django.core.management import call_command\n from django.db import migrations, models\n from django.test import TransactionTestCase, override_settings\n+from django.contrib.contenttypes.models import ContentType\n \n \n @override_settings(\n@@ -38,6 +39,28 @@ class ContentTypeOperationsTests(TransactionTestCase):\n                     self.assertEqual(next_operation.old_model, operation.old_name_lower)\n                     self.assertEqual(next_operation.new_model, operation.new_name_lower)\n \n+    def test_existing_content_type_rename_other_database(self):\n+        # Custom database router for test\n+        class TestRouter:\n+            def db_for_write(self, model, **hints):\n+                return 'other'\n+        \n+        with override_settings(DATABASE_ROUTERS=[TestRouter()]):\n+            ContentType.objects.using('other').create(app_label='contenttypes_tests', model='foo')\n+            other_content_types = ContentType.objects.using('other').filter(app_label='contenttypes_tests')\n+            \n+            call_command('migrate', 'contenttypes_tests', database='other', interactive=False, verbosity=0)\n+            \n+            # Verify the content type was renamed in 'other' database\n+            self.assertFalse(other_content_types.filter(model='foo').exists())\n+            self.assertTrue(other_content_types.filter(model='renamedfoo').exists())\n+            \n+            call_command('migrate', 'contenttypes_tests', 'zero', database='other', interactive=False, verbosity=0)\n+            \n+            # Verify the rollback was successful in 'other' database\n+            self.assertTrue(other_content_types.filter(model='foo').exists())\n+            self.assertFalse(other_content_types.filter(model='renamedfoo').exists())\n+\n     def test_existing_content_type_rename(self):\n         ContentType.objects.create(app_label='contenttypes_tests', model='foo')\n         call_command('migrate', 'contenttypes_tests', database='default', interactive=False, verbosity=0,)\n@@ -63,4 +86,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "diff --git a/tests/generic_inline_admin/tests.py b/tests/generic_inline_admin/tests.py\nindex 9dd9fd9..9244e05 100644\n--- a/tests/generic_inline_admin/tests.py\n+++ b/tests/generic_inline_admin/tests.py\n@@ -428,4 +428,39 @@ class GenericInlineModelAdminTest(SimpleTestCase):\n         ma = EpisodeAdmin(Episode, self.site)\n         inlines = ma.get_inline_instances(request)\n         for (formset, inline), other_inline in zip(ma.get_formsets_with_inlines(request), inlines):\n-            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+\n+    def test_get_inlines_hook(self):\n+        class MediaInline(GenericTabularInline):\n+            model = Media\n+\n+        class AlternateInline(GenericTabularInline):\n+            model = Media\n+\n+        class EpisodeAdmin(admin.ModelAdmin):\n+            inlines = (AlternateInline, MediaInline)\n+\n+            def get_inlines(self, request, obj=None):\n+                if hasattr(request, 'name'):\n+                    if request.name == 'alternate':\n+                        return self.inlines[:1]\n+                    elif request.name == 'media':\n+                        return self.inlines[1:2]\n+                return []\n+\n+        request_alternate = type('Request', (object,), {'name': 'alternate'})()\n+        request_media = type('Request', (object,), {'name': 'media'})()\n+        request_none = type('Request', (object,), {})()\n+\n+        ma = EpisodeAdmin(Episode, self.site)\n+        \n+        # Test case where no specific inlines are returned\n+        self.assertEqual(ma.get_inlines(request_none, None), [])\n+        self.assertEqual(ma.get_inline_instances(request_none), [])\n+\n+        # Test specific cases for 'alternate' and 'media'\n+        self.assertEqual(ma.get_inlines(request_alternate, None), (AlternateInline,))\n+        self.assertEqual(type(ma.get_inline_instances(request_alternate)[0]), AlternateInline)\n+\n+        self.assertEqual(ma.get_inlines(request_media, None), (MediaInline,))\n+        self.assertEqual(type(ma.get_inline_instances(request_media)[0]), MediaInline)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..9edf299 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -248,7 +248,29 @@ class UsernameValidatorsTests(SimpleTestCase):\n                 with self.assertRaises(ValidationError):\n                     v(invalid)\n \n-    def test_ascii_validator(self):\n+    def test_trailing_newline_unicode_validator(self):\n+        # Adding a test case to ensure trailing newline is rejected for Unicode validator\n+        invalid_usernames = [\n+            \"username_with_newline\\n\",\n+            \"another_username_with_newline\\u000A\",\n+        ]\n+        v = validators.UnicodeUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+                    \n+    def test_trailing_newline_ascii_validator(self):\n+        # Adding a test case to ensure trailing newline is rejected for ASCII validator\n+        invalid_usernames = [\n+            \"username_with_newline\\n\",\n+            \"another_username_with_newline\\u000A\",\n+        ]\n+        v = validators.ASCIIUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n         invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n         v = validators.ASCIIUsernameValidator()\n@@ -258,4 +280,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..2062fcd 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -4,6 +4,7 @@ from django.core.exceptions import ImproperlyConfigured\n from django.template import Context\n from django.template.engine import Engine\n from django.test import SimpleTestCase, override_settings\n+from django.template import TemplateDoesNotExist\n \n from .utils import ROOT, TEMPLATE_DIR\n \n@@ -15,7 +16,24 @@ class RenderToStringTest(SimpleTestCase):\n     def setUp(self):\n         self.engine = Engine(dirs=[TEMPLATE_DIR])\n \n-    def test_basic_context(self):\n+    def test_autoescape_on(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n+\n+    def test_autoescape_off(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:<script>\\n',\n+        )\n+\n+    def test_template_not_found(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        with self.assertRaises(TemplateDoesNotExist):\n+            engine.render_to_string('non_existent_template.html', {'obj': 'test'})\n         self.assertEqual(\n             self.engine.render_to_string('test_context.html', {'obj': 'test'}),\n             'obj:test\\n',\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..ee8a4b6 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -278,6 +278,37 @@ class QueryDictTests(SimpleTestCase):\n         expected['\u028e\u01dd\u029e'] = '\u01ddnl\u0250\u028c'\n         self.assertEqual(q, expected)\n \n+    def test_memoryview_content(self):\n+        response = HttpResponse(memoryview(b\"My Content\"))\n+        self.assertEqual(response.content, b\"My Content\")\n+        \n+    def test_memoryview_content_with_empty(self):\n+        # Testing with an empty memoryview\n+        response = HttpResponse(memoryview(b\"\"))\n+        self.assertEqual(response.content, b\"\")\n+\n+    def test_memoryview_content_with_large_data(self):\n+        # Testing with a larger data set\n+        large_data = b\"a\" * 10000  # 10,000 bytes of 'a'\n+        response = HttpResponse(memoryview(large_data))\n+        self.assertEqual(response.content, large_data)\n+\n+    def test_memoryview_content_with_unicode(self):\n+        # Ensure that unicode characters encoded in a bytes object work with memoryview\n+        unicode_data = \"\u3053\u3093\u306b\u3061\u306f\".encode('utf-8')  # Japanese for \"Hello\"\n+        response = HttpResponse(memoryview(unicode_data))\n+        self.assertEqual(response.content, unicode_data)\n+\n+    def test_memoryview_content_with_non_ascii(self):\n+        non_ascii_data = b'\\xe2\\x9c\\x94'\n+        response = HttpResponse(memoryview(non_ascii_data))\n+        self.assertEqual(response.content, non_ascii_data)\n+\n+    def test_memoryview_content_with_type_error(self):\n+        # Ensure that passing a non-bytes object wrapped in memoryview raises a TypeError\n+        with self.assertRaises(TypeError):\n+            HttpResponse(memoryview(\"Non-bytes input\"))\n+\n     def test_fromkeys_empty_iterable(self):\n         self.assertEqual(QueryDict.fromkeys([]), QueryDict(''))\n \n",
  "django__django-11141": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex b5a87e7..3d1c308 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -509,6 +509,65 @@ class LoaderTests(TestCase):\n         self.assertEqual(migrations, ['0001_initial'])\n \n \n+from django.test import override_settings\n+from django.db import connection\n+from django.db.migrations.loader import MigrationLoader\n+from django.db.migrations.migration import Migration\n+from django.db import models\n+import os\n+import compileall\n+\n+...\n+\n+class NamespaceMigrationLoaderTests(MigrationTestBase):\n+    \n+    @override_settings(\n+        MIGRATION_MODULES={'migrations': 'migrations.test_migrations_namespace_package'},\n+    )\n+    def test_loading_namespace_package(self):\n+        \"\"\"Migration directories without an __init__.py file are loaded.\"\"\"\n+        migration_loader = MigrationLoader(connection)\n+        self.assertEqual(\n+            migration_loader.graph.forwards_plan(('migrations', '0001_initial')),\n+            [('migrations', '0001_initial')],\n+        )\n+\n+    @override_settings(\n+        MIGRATION_MODULES={\n+            'migrations': 'migrations.test_migrations_namespace_package',\n+            'another_app': 'another_app.migrations'\n+        }\n+    )\n+    def test_loading_multiple_namespace_packages(self):\n+        \"\"\"Test that multiple namespace packages can be loaded.\"\"\"\n+        migration_loader = MigrationLoader(connection)\n+        self.assertIn(('migrations', '0001_initial'), migration_loader.graph.nodes)\n+        self.assertIn(('another_app', '0001_initial'), migration_loader.graph.nodes)\n+\n+    def test_migrations_in_namespace_package(self):\n+        \"\"\"Test that migrations within a namespace package are detected.\"\"\"\n+        with self.temporary_migration_module(module='migrations.test_migrations_namespace_package') as migration_dir:\n+            # Simulate migrations in a namespace package.\n+            with open(os.path.join(migration_dir, '0001_initial.py'), 'w') as f:\n+                f.write(\n+                    'from django.db import migrations, models\\n'\n+                    'class Migration(migrations.Migration):\\n'\n+                    '    initial = True\\n'\n+                    '    dependencies = []\\n'\n+                    '    operations = [\\n'\n+                    '        migrations.CreateModel(\\n'\n+                    '            \"Author\",\\n'\n+                    '            [\\n'\n+                    '                (\"id\", models.AutoField(primary_key=True)),\\n'\n+                    '                (\"name\", models.CharField(max_length=255)),\\n'\n+                    '            ],\\n'\n+                    '        ),\\n'\n+                    '    ]\\n'\n+                )\n+            loader = MigrationLoader(connection)\n+            loader.load_disk()\n+            self.assertIn(('migrations', '0001_initial'), loader.disk_migrations)\n+\n class PycLoaderTests(MigrationTestBase):\n \n     def test_valid(self):\n",
  "django__django-11149": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 296cfba..283f883 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -665,7 +665,47 @@ class TestInlinePermissions(TestCase):\n         self.assertNotContains(response, 'id=\"id_Author_books-TOTAL_FORMS\"')\n         self.assertNotContains(response, 'id=\"id_Author_books-0-DELETE\"')\n \n-    def test_inline_change_m2m_change_perm(self):\n+    def test_inline_add_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(reverse('admin:admin_inlines_author_add'))\n+        # View-only permission, should display view-only inline without add, change, or delete options.\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"0\" '\n+            'id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n+\n+    def test_inline_change_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(self.author_change_url)\n+        # View-only permission, should display view-only inline without add, change, or delete options.\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"1\" '\n+            'id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        # Check that the inline field is read-only.\n+        self.assertContains(response, '<p>The inline Book</p>')\n+        self.assertNotContains(\n+            response,\n+            '<input type=\"checkbox\" name=\"Author_books-0-DELETE\" id=\"id_Author_books-0-DELETE\">',\n+            html=True,\n+        )\n         permission = Permission.objects.get(codename='change_book', content_type=self.book_ct)\n         self.user.user_permissions.add(permission)\n         response = self.client.get(self.author_change_url)\n",
  "django__django-11163": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex b25d077..9fc1368 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2899,8 +2899,25 @@ class StrictAssignmentTests(SimpleTestCase):\n         })\n \n \n+import unittest\n+from django.forms.models import model_to_dict\n+from myapp.models import BetterWriter  # Assuming BetterWriter is defined in myapp.models\n+\n class ModelToDictTests(TestCase):\n-    def test_many_to_many(self):\n+    def test_model_to_dict_with_empty_fields(self):\n+        \"\"\"Test model_to_dict with an empty list of fields.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(model_to_dict(bw, fields={}), {})\n+        \n+    def test_model_to_dict_with_non_empty_fields(self):\n+        \"\"\"Test model_to_dict with specific fields requested.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(sorted(model_to_dict(bw, fields=['id', 'name'])), ['id', 'name'])\n+\n+    def test_model_to_dict_with_exclude(self):\n+        \"\"\"Test model_to_dict with fields excluded.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(sorted(model_to_dict(bw, exclude=['id', 'name'])), ['score', 'writer_ptr'])\n         \"\"\"Data for a ManyToManyField is a list rather than a lazy QuerySet.\"\"\"\n         blue = Colour.objects.create(name='blue')\n         red = Colour.objects.create(name='red')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..6d3a64f 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,7 +1,9 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n+from django.db.models.deletion import Collector\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n from .models import (\n@@ -464,7 +466,31 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n-    def test_fast_delete_qs(self):\n+    def test_fast_delete_instance_set_pk_none(self):\n+        u = User.objects.create()\n+        # User can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n+    def test_fast_delete_instance_set_pk_none_multiple(self):\n+        u1 = User.objects.create()\n+        u2 = User.objects.create()\n+        # Both Users can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u1))\n+        self.assertTrue(collector.can_fast_delete(u2))\n+        u1.delete()\n+        u2.delete()\n+        self.assertIsNone(u1.pk)\n+        self.assertIsNone(u2.pk)\n+\n+    def test_fast_delete_instance_with_no_op(self):\n+        u = User()\n+        self.assertIsNone(u.pk)\n+        with self.assertRaises(ValueError):\n+            u.delete()\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n         self.assertNumQueries(1, User.objects.filter(pk=u1.pk).delete)\n",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..fac5172 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -95,6 +95,11 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+            # Test case for the issue: small decimals should not be rendered in exponential notation\n+            ('1e-199', 2, '0.00'),  # small number with 2 decimal places\n+            ('1e-200', 2, '0.00'),  # even smaller number with 2 decimal places\n+            ('1e-200', 10, '0.0000000000'),  # very small number with 10 decimal places\n+            ('1e-250', 5, '0.00000'),  # very small number with 5 decimal places\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-11211": "diff --git a/tests/prefetch_related/models.py b/tests/prefetch_related/models.py\nindex 3ce4b3f..e052a68 100644\n--- a/tests/prefetch_related/models.py\n+++ b/tests/prefetch_related/models.py\n@@ -1,3 +1,13 @@\n+\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=50)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(ContentType, related_name='actor', on_delete=models.CASCADE, db_index=True)\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n+\n import uuid\n \n from django.contrib.contenttypes.fields import (\n",
  "django__django-11239": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex b843072..2e0caa2 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,4 +1,6 @@\n import os\n+import os\n+\n import signal\n import subprocess\n from unittest import mock\n@@ -23,8 +25,32 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.run', new=_mock_subprocess_run):\n             DatabaseClient.runshell_db(dbinfo)\n         return self.subprocess_args, self.pgpassword\n-\n-    def test_basic(self):\n+    \n+    def test_ssl_certificate(self):\n+        self.assertEqual(\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+                'sslmode': 'verify-ca',\n+                'sslrootcert': 'root.crt',\n+                'sslcert': 'client.crt',\n+                'sslkey': 'client.key',\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                None,\n+            )\n+        )\n+        self.assertEqual(\n+            self.pg_env,\n+            {\n+                'PGSSLCERT': 'client.crt',\n+                'PGSSLKEY': 'client.key',\n+                'PGSSLMODE': 'verify-ca',\n+                'PGSSLROOTCERT': 'root.crt',\n+            }\n+        )\n         self.assertEqual(\n             self._run_it({\n                 'database': 'dbname',\n",
  "django__django-11265": "",
  "django__django-11276": "",
  "django__django-11292": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex b016284..68faa5e 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -243,7 +243,31 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertNoOutput(err)\n         self.assertEqual(out.strip(), '/PREFIX/some/url/')\n \n-    def test_disallowed_abbreviated_options(self):\n+    def test_skip_checks(self):\n+        \"\"\"\n+        Test the --skip-checks option to ensure it skips system checks.\n+        \"\"\"\n+        # Simulate a faulty settings.py that would normally trigger a system check error\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            'STATICFILES_DIRS': '\"foo\"',  # This would normally trigger staticfiles.E001 check\n+        })\n+        # Run the command with --skip-checks and ensure it doesn't output errors\n+        out, err = self.run_manage(['set_option', '--skip-checks', '--set', 'foo'])\n+        self.assertNoOutput(err)\n+        self.assertEqual(out.strip(), 'Set foo')\n+\n+    def test_no_skip_checks(self):\n+        \"\"\"\n+        Test without --skip-checks to ensure system checks are executed and errors are raised.\n+        \"\"\"\n+        # Simulate a faulty settings.py that would normally trigger a system check error\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            'STATICFILES_DIRS': '\"foo\"',  # This would normally trigger staticfiles.E001 check\n+        })\n+        # Run the command without --skip-checks and expect errors related to system checks\n+        out, err = self.run_manage(['set_option', '--set', 'foo'])\n+        self.assertIn('staticfiles.E001', err)\n+        self.assertNotEqual(out.strip(), 'Set foo')\n         \"\"\"\n         To avoid conflicts with custom options, commands don't allow\n         abbreviated forms of the --setting and --pythonpath options.\n",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..0cc98e7 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,5 +1,6 @@\n+\n from django.test import SimpleTestCase\n-from django.urls.resolvers import RegexPattern, RoutePattern\n+from django.urls.resolvers import RegexPattern, RoutePattern, get_resolver\n from django.utils.translation import gettext_lazy as _\n \n \n@@ -12,4 +13,4 @@ class RegexPatternTests(SimpleTestCase):\n class RoutePatternTests(SimpleTestCase):\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\nindex b010b42..8c37dee 100644\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -227,6 +227,12 @@ class BaseModelBackendTest:\n         self.assertEqual(CountingMD5PasswordHasher.calls, 1)\n \n \n+from django.contrib.auth import authenticate\n+from django.test import TestCase\n+from django.test.utils import override_settings\n+from django.contrib.auth.models import User\n+from auth_tests.test_auth_backends import CountingMD5PasswordHasher\n+\n class ModelBackendTest(BaseModelBackendTest, TestCase):\n     \"\"\"\n     Tests for the ModelBackend using the default User model.\n@@ -242,7 +248,19 @@ class ModelBackendTest(BaseModelBackendTest, TestCase):\n             password='test',\n         )\n \n-    def test_authenticate_inactive(self):\n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authentication_without_username_or_password(self):\n+        CountingMD5PasswordHasher.calls = 0\n+        credentials_list = [\n+            {},  # No username and no password\n+            {'username': getattr(self.user, self.UserModel.USERNAME_FIELD)},  # Only username\n+            {'password': 'test'},  # Only password\n+        ]\n+        for credentials in credentials_list:\n+            with self.subTest(credentials=credentials):\n+                with self.assertNumQueries(0):\n+                    authenticate(**credentials)\n+                self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n         \"\"\"\n         An inactive user can't authenticate.\n         \"\"\"\n",
  "django__django-11490": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex e627a0d..82aa97e 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -124,6 +124,21 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.union(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n+    def test_change_columns_with_values_list(self):\n+        # Creating a test object\n+        ReservedName.objects.create(name='a', order=2)\n+        \n+        # QuerySet with union and changing columns using values_list()\n+        qs1 = ReservedName.objects.all()\n+        \n+        # First evaluation with 'name' and 'order'\n+        reserved_name = qs1.union(qs1).values_list('name', 'order').get()\n+        self.assertEqual(reserved_name, ('a', 2))\n+        \n+        # Change columns to just 'order'\n+        reserved_order = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(reserved_order, (2,))\n+\n     def test_union_with_two_annotated_values_list(self):\n         qs1 = Number.objects.filter(num=1).annotate(\n             count=Value(0, IntegerField()),\n",
  "django__django-11532": "diff --git a/tests/mail/tests.py b/tests/mail/tests.py\nindex a6f0e17..51957a1 100644\n--- a/tests/mail/tests.py\n+++ b/tests/mail/tests.py\n@@ -15,6 +15,7 @@ from io import StringIO\n from smtplib import SMTP, SMTPAuthenticationError, SMTPException\n from ssl import SSLError\n \n+from unittest import mock\n from django.core import mail\n from django.core.mail import (\n     EmailMessage, EmailMultiAlternatives, mail_admins, mail_managers,\n@@ -365,7 +366,16 @@ class MailTests(HeadersCheckMixin, SimpleTestCase):\n         self.assertEqual(msg.body, '')\n         self.assertEqual(msg.message().get_payload(), '')\n \n-    def test_encoding(self):\n+    @mock.patch('socket.getfqdn', return_value='\u6f22\u5b57')\n+    def test_non_ascii_dns_non_unicode_email(self, mocked_getfqdn):\n+        \"\"\"\n+        Test email creation with non-ASCII DNS name using non-unicode email encoding.\n+        \"\"\"\n+        from django.core.mail.message import DNS_NAME\n+        delattr(DNS_NAME, '_fqdn')\n+        email = EmailMessage('subject', 'content', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        self.assertIn('@xn--p8s937b>', email.message()['Message-ID'])\n         \"\"\"\n         Regression for #12791 - Encode body correctly with other encodings\n         than utf-8\n",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..52fe856 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,9 +1,63 @@\n+\n+class TestFieldAccessibleViaInstance(CheckTestCase):\n+\n+    def test_valid_field_accessible_via_instance(self):\n+        class PositionField(Field):\n+            \"\"\"Custom field accessible only via instance.\"\"\"\n+            def contribute_to_class(self, cls, name):\n+                super().contribute_to_class(cls, name)\n+                setattr(cls, self.name, self)\n+\n+            def __get__(self, instance, owner):\n+                if instance is None:\n+                    raise AttributeError()\n+\n+        class TestModel(Model):\n+            field = PositionField()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('field',)\n+\n+        self.assertIsValid(TestModelAdmin, TestModel)\n+\n+    def test_invalid_field_not_in_model(self):\n+        class TestModel(Model):\n+            pass\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('non_existent_field',)\n+\n+        self.assertIsInvalid(\n+            TestModelAdmin, TestModel,\n+            \"The value of 'list_display[0]' refers to 'non_existent_field', \"\n+            \"which is not a callable, an attribute of 'TestModelAdmin', or an attribute \"\n+            \"or method on 'tests.modeladmin.TestModel'.\",\n+            'admin.E108'\n+        )\n+\n+    def test_field_is_many_to_many(self):\n+        class ManyToManyField(Field):\n+            \"\"\"Custom ManyToManyField simulation.\"\"\"\n+            pass\n+\n+        class TestModel(Model):\n+            field = ManyToManyField()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('field',)\n+\n+        self.assertIsInvalid(\n+            TestModelAdmin, TestModel,\n+            \"The value of 'list_display[0]' must not be a ManyToManyField.\",\n+            'admin.E109'\n+        )\n+\n from django import forms\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n-from django.db.models import F\n+from django.db.models import F, Field, Model\n from django.db.models.functions import Upper\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..73efdc6 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -2,6 +2,7 @@ from datetime import datetime\n from operator import attrgetter\n \n from django.core.exceptions import FieldError\n+from datetime import datetime\n from django.db.models import (\n     CharField, Count, DateTimeField, F, Max, OuterRef, Subquery, Value,\n )\n@@ -462,6 +463,32 @@ class OrderingTests(TestCase):\n             attrgetter('headline')\n         )\n \n+    def test_ordering_with_expression_in_meta(self):\n+        \"\"\"\n+        Test that ordering with expressions in Meta.ordering works as expected\n+        for a child model inheriting from a parent model with Meta.ordering.\n+        \"\"\"\n+        ca1 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_2,\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca3 = ChildArticle.objects.create(\n+            headline='h3',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n+\n+        # Order by the id field in ascending order to check if ordering expressions in Meta are handled\n+        articles = ChildArticle.objects.order_by('article_ptr_id')\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+\n     def test_deprecated_values_annotate(self):\n         msg = (\n             \"Article QuerySet won't use Meta.ordering in Django 3.1. Add \"\n",
  "django__django-11603": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 2b8f813..4e3b647 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -391,6 +391,32 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n+    def test_distinct_on_avg_and_sum(self):\n+        data = [\n+            {'rating': 3.0, 'pages': 200},\n+            {'rating': 4.0, 'pages': 300},\n+            {'rating': 4.0, 'pages': 300},\n+            {'rating': 5.0, 'pages': 250},\n+            {'rating': 5.0, 'pages': 350},\n+        ]\n+        for item in data:\n+            Book.objects.create(**item)\n+\n+        # Test Avg with distinct\n+        avg_distinct = Book.objects.aggregate(distinct_avg=Avg('rating', distinct=True))\n+        self.assertEqual(avg_distinct['distinct_avg'], 4.0)  # distinct ratings are 3.0, 4.0, 5.0\n+\n+        # Test Sum with distinct\n+        sum_distinct = Book.objects.aggregate(distinct_sum=Sum('rating', distinct=True))\n+        self.assertEqual(sum_distinct['distinct_sum'], 12.0)  # distinct ratings summed are 3.0 + 4.0 + 5.0\n+\n+        # Test Min and Max with distinct (though it is considered pointless)\n+        min_distinct = Book.objects.aggregate(distinct_min=Min('rating', distinct=True))\n+        self.assertEqual(min_distinct['distinct_min'], 3.0)  # minimum distinct rating is 3.0\n+\n+        max_distinct = Book.objects.aggregate(distinct_max=Max('rating', distinct=True))\n+        self.assertEqual(max_distinct['distinct_max'], 5.0)  # maximum distinct rating is 5.0\n+\n     def test_count_star(self):\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n",
  "django__django-11740": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a98fff5..2fc2cc8 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2010,7 +2010,29 @@ class AutodetectorTests(TestCase):\n         self.assertOperationAttributes(changes, \"testapp\", 0, 1, name=\"Author\")\n         self.assertOperationAttributes(changes, \"testapp\", 0, 2, name=\"Publisher\")\n \n-    def test_alter_model_options(self):\n+    def test_alter_field_uuid_to_fk_dependency(self):\n+        \"\"\"\n+        Test if changing a UUIDField to ForeignKey correctly adds migration dependencies.\n+        \"\"\"\n+        app1_initial = ModelState(\"testapp1\", \"App1\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+            (\"another_app\", models.UUIDField(null=True, blank=True))\n+        ])\n+        app1_modified = ModelState(\"testapp1\", \"App1\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+            (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL))\n+        ])\n+        app2 = ModelState(\"testapp2\", \"App2\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100))\n+        ])\n+        changes = self.get_changes([app1_initial, app2], [app1_modified, app2])\n+        # There should be a migration for altering the field in testapp1.\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, [\"AlterField\"])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [(\"testapp2\", \"__first__\")])\n         \"\"\"Changing a model's options should make a change.\"\"\"\n         changes = self.get_changes([self.author_empty], [self.author_with_options])\n         # Right number/type of migrations?\n@@ -2399,4 +2421,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-11749": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex a0e1530..75b630b 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -219,11 +219,59 @@ class CommandTests(SimpleTestCase):\n         management.call_command('subparser', 'foo', 12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n \n+    def test_mutually_exclusive_group_kwargs(self):\n+        out = StringIO()\n+        # Test passing 'foo_id' as a keyword argument\n+        management.call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+\n+        # Test passing 'foo_name' as a keyword argument\n+        out = StringIO()\n+        management.call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+\n+        # Test calling without required mutually exclusive group\n+        out = StringIO()\n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            management.call_command('mutually_exclusive_required', stdout=out)\n+\n+    def test_mutually_exclusive_group_both_args_provided(self):\n+        out = StringIO()\n+        # Test providing both mutually exclusive arguments should raise an error\n+        msg = 'Error: argument --foo-id: not allowed with argument --foo-name'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            management.call_command('mutually_exclusive_required', foo_id=1, foo_name='foo', stdout=out)\n+\n     def test_subparser_dest_args(self):\n         out = StringIO()\n         management.call_command('subparser_dest', 'foo', bar=12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n \n+    def test_mutually_exclusive_group_kwargs(self):\n+        out = StringIO()\n+        # Test passing 'foo_id' as a keyword argument\n+        management.call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+\n+        # Test passing 'foo_name' as a keyword argument\n+        out = StringIO()\n+        management.call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+\n+        # Test calling without required mutually exclusive group\n+        out = StringIO()\n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            management.call_command('mutually_exclusive_required', stdout=out)\n+\n+    def test_mutually_exclusive_group_both_args_provided(self):\n+        out = StringIO()\n+        # Test providing both mutually exclusive arguments should raise an error\n+        msg = 'Error: argument --foo-id: not allowed with argument --foo-name'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            management.call_command('mutually_exclusive_required', foo_id=1, foo_name='foo', stdout=out)\n+\n     def test_subparser_dest_required_args(self):\n         out = StringIO()\n         management.call_command('subparser_required', 'foo_1', 'foo_2', bar=12, stdout=out)\n",
  "django__django-11790": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 440150b..ba71017 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -437,7 +437,24 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         self.assertEqual(form.fields['username'].max_length, 254)\n         self.assertEqual(form.errors, {})\n \n-    def test_username_field_label(self):\n+    def test_username_field_has_maxlength_attribute(self):\n+        # Ensure the AuthenticationForm's username field has the correct maxlength HTML attribute\n+        data = {\n+            'username': 'u' * 255,\n+            'password': 'pwd',\n+        }\n+        form = AuthenticationForm(None, data)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), '255')\n+\n+    @override_settings(AUTH_USER_MODEL='auth_tests.IntegerUsernameUser')\n+    def test_username_field_defaults_maxlength_attribute(self):\n+        # Test with a user model where username max_length defaults to 254\n+        data = {\n+            'username': '0123456',\n+            'password': 'password',\n+        }\n+        form = AuthenticationForm(None, data)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), '254')\n \n         class CustomAuthenticationForm(AuthenticationForm):\n             username = CharField(label=\"Name\", max_length=75)\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..3f57eb7 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -306,7 +306,24 @@ class WriterTests(SimpleTestCase):\n             \"default=migrations.test_writer.IntEnum(1))\"\n         )\n \n-    def test_serialize_choices(self):\n+    def test_serialize_translated_enum(self):\n+        from enum import Enum\n+        from django.utils.translation import gettext_lazy as _\n+\n+        class TranslatedEnum(Enum):\n+            C = _('c-value')\n+            D = _('d-value')\n+\n+        # Test serialization of enum using its name instead of the translated value.\n+        field = models.CharField(default=TranslatedEnum.C, choices=[(m.value, m) for m in TranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('c-value', migrations.test_writer.TranslatedEnum['C']), \"\n+            \"('d-value', migrations.test_writer.TranslatedEnum['D'])], \"\n+            \"default=migrations.test_writer.TranslatedEnum['C'])\"\n+        )\n         class TextChoices(models.TextChoices):\n             A = 'A', 'A value'\n             B = 'B', 'B value'\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..34dbb4b 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from datetime import datetime\n \n@@ -316,7 +317,28 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_rfc850(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850(self, mocked_datetime):\n+        # Use side_effect to ensure that other datetime functions are not mocked\n+        mocked_datetime.side_effect = datetime\n+\n+        # Mock current dates for different test scenarios\n+        mocked_datetime.utcnow = mock.Mock()\n+        current_year_tests = [\n+            (datetime(2019, 11, 6, 8, 49, 37), 'Tuesday, 31-Dec-69 08:49:37 GMT', datetime(2069, 12, 31, 8, 49, 37)),\n+            (datetime(2019, 11, 6, 8, 49, 37), 'Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),\n+            (datetime(2019, 11, 6, 8, 49, 37), 'Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37)),\n+            (datetime(2020, 11, 6, 8, 49, 37), 'Wednesday, 31-Dec-70 08:49:37 GMT', datetime(2070, 12, 31, 8, 49, 37)),\n+            (datetime(2020, 11, 6, 8, 49, 37), 'Friday, 31-Dec-71 08:49:37 GMT', datetime(1971, 12, 31, 8, 49, 37)),\n+            (datetime(2048, 11, 6, 8, 49, 37), 'Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+            (datetime(2048, 11, 6, 8, 49, 37), 'Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+        ]\n+\n+        for mock_date, rfc850_date, expected in current_year_tests:\n+            with self.subTest(rfc850str=rfc850_date):\n+                mocked_datetime.utcnow.return_value = mock_date\n+                parsed = parse_http_date(rfc850_date)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected)\n         parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n",
  "django__django-11880": "",
  "django__django-11951": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex f2f6bbd..1111766 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -1,3 +1,5 @@\n+\n+from math import ceil\n from operator import attrgetter\n \n from django.db import IntegrityError, NotSupportedError, connection\n@@ -203,6 +205,28 @@ class BulkCreateTests(TestCase):\n \n     def test_empty_model(self):\n         NoFields.objects.bulk_create([NoFields() for i in range(2)])\n+\n+    @skipUnlessDBFeature('has_bulk_insert')\n+    def test_explicit_batch_size_respects_max_batch_size(self):\n+        objs = [Country() for i in range(1000)]\n+        fields = ['name', 'iso_two_letter', 'description']\n+        max_batch_size = max(connection.ops.bulk_batch_size(fields, objs), 1)\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            Country.objects.bulk_create(objs, batch_size=max_batch_size + 1)\n+\n+    @skipUnlessDBFeature('has_bulk_insert')\n+    def test_batch_size_none_respects_max_batch_size(self):\n+        objs = [Country() for i in range(1000)]\n+        fields = ['name', 'iso_two_letter', 'description']\n+        max_batch_size = connection.ops.bulk_batch_size(fields, objs)\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            Country.objects.bulk_create(objs, batch_size=None)\n+\n+    @skipUnlessDBFeature('has_bulk_insert')\n+    def test_small_batch_size(self):\n+        objs = [Country() for i in range(10)]\n+        with self.assertNumQueries(ceil(len(objs) / 5)):\n+            Country.objects.bulk_create(objs, batch_size=5)\n         self.assertEqual(NoFields.objects.count(), 2)\n \n     @skipUnlessDBFeature('has_bulk_insert')\n",
  "django__django-11964": "diff --git a/tests/model_fields/test_charfield.py b/tests/model_fields/test_charfield.py\nindex c6162e5..77eb037 100644\n--- a/tests/model_fields/test_charfield.py\n+++ b/tests/model_fields/test_charfield.py\n@@ -1,10 +1,31 @@\n+\n from unittest import skipIf\n \n from django.core.exceptions import ValidationError\n from django.db import connection, models\n from django.test import SimpleTestCase, TestCase\n+from django.utils.translation import gettext_lazy as _\n+\n+class MyChoice(models.TextChoices):\n+    FIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n+    SECOND_CHOICE = \"second\", _(\"The second choice, it is\")\n+\n+class MyObject(models.Model):\n+    my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n+class EnumTest(TestCase):\n+    def setUp(self) -> None:\n+        self.my_object = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n+\n+    def test_created_object_is_str(self):\n+        my_object = self.my_object\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(my_object.my_str_value, \"first\")\n \n-from .models import Post\n+    def test_retrieved_object_is_str(self):\n+        my_object = MyObject.objects.last()\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(my_object.my_str_value, \"first\")\n \n \n class TestCharField(TestCase):\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..02d76f0 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -168,7 +168,37 @@ class GetFieldDisplayTests(SimpleTestCase):\n         self.assertIsInstance(val, str)\n         self.assertEqual(val, 'translated')\n \n-    def test_iterator_choices(self):\n+class OverridingFieldDisplayTests(TestCase):\n+\n+    def test_overriding_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+\n+    def test_overriding_FIELD_display_with_charfield(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.CharField(max_length=10, choices=[('1', 'foo'), ('2', 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something else'\n+\n+        f = FooBar(foo_bar='1')\n+        self.assertEqual(f.get_foo_bar_display(), 'something else')\n+\n+    def test_overriding_FIELD_display_with_different_return_value(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'another thing'\n+\n+        f = FooBar(foo_bar=2)\n+        self.assertEqual(f.get_foo_bar_display(), 'another thing')\n         \"\"\"\n         get_choices() works with Iterators.\n         \"\"\"\n",
  "django__django-12039": "diff --git a/tests/indexes/tests.py b/tests/indexes/tests.py\nindex 700f574..bce2134 100644\n--- a/tests/indexes/tests.py\n+++ b/tests/indexes/tests.py\n@@ -9,12 +9,16 @@ from django.db.models.query_utils import Q\n from django.test import (\n     TestCase, TransactionTestCase, skipIfDBFeature, skipUnlessDBFeature,\n )\n+from django.db import connection\n+from django.db.models import Index\n from django.test.utils import override_settings\n from django.utils import timezone\n \n from .models import (\n     Article, ArticleTranslation, IndexedArticle2, IndexTogetherSingleList,\n )\n+from django.db import connection\n+from django.db.models import Index\n \n \n class SchemaIndexesTests(TestCase):\n@@ -22,7 +26,45 @@ class SchemaIndexesTests(TestCase):\n     Test index handling by the db.backends.schema infrastructure.\n     \"\"\"\n \n-    def test_index_name_hash(self):\n+    def test_columns_list_sql(self):\n+        index = Index(fields=['headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_descending_columns_list_sql(self):\n+        index = Index(fields=['-headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s DESC)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_ops_class_columns_lists_sql(self):\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_ops_class_descending_columns_list_sql(self):\n+        index = Index(\n+            fields=['-headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops DESC)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n         \"\"\"\n         Index names should be deterministic.\n         \"\"\"\n",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..84f9a95 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n@@ -7,6 +8,7 @@ from django.db.models.fields.related_lookups import RelatedIsNull\n from django.db.models.functions import Lower\n from django.db.models.lookups import Exact, GreaterThan, IsNull, LessThan\n from django.db.models.sql.query import Query\n+from django.db.models.lookups import In\n from django.db.models.sql.where import OR\n from django.test import SimpleTestCase\n from django.test.utils import register_lookup\n@@ -107,7 +109,34 @@ class TestQuery(SimpleTestCase):\n         self.assertIsInstance(b_isnull.lhs, SimpleCol)\n         self.assertEqual(b_isnull.lhs.target, ObjectC._meta.get_field('objectb'))\n \n-    def test_clone_select_related(self):\n+    def test_iterable_lookup_value(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=['a', 'b']))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        # Correct assertion to check if the rhs is still of type list and matches the input\n+        self.assertEqual(name_exact.rhs, ['a', 'b'])\n+\n+    def test_tuple_lookup_value(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=('a', 'b')))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ('a', 'b'))\n+\n+    def test_in_lookup_value_with_list(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name__in=['x', 'y', 'z']))\n+        name_in = where.children[0]\n+        self.assertIsInstance(name_in, In)\n+        self.assertEqual(name_in.rhs, ['x', 'y', 'z'])\n+\n+    def test_in_lookup_value_with_tuple(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name__in=('x', 'y', 'z')))\n+        name_in = where.children[0]\n+        self.assertIsInstance(name_in, In)\n+        self.assertEqual(name_in.rhs, ('x', 'y', 'z'))\n         query = Query(Item)\n         query.add_select_related(['creator'])\n         clone = query.clone()\n",
  "django__django-12125": "",
  "django__django-12143": "",
  "django__django-12155": "diff --git a/tests/admin_docs/test_utils.py b/tests/admin_docs/test_utils.py\nindex 6cae16b..c1b215b 100644\n--- a/tests/admin_docs/test_utils.py\n+++ b/tests/admin_docs/test_utils.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n \n from django.contrib.admindocs.utils import (\n@@ -5,6 +6,7 @@ from django.contrib.admindocs.utils import (\n )\n \n from .tests import AdminDocsSimpleTestCase\n+from django.test.utils import captured_stderr\n \n \n @unittest.skipUnless(docutils_is_available, \"no docutils installed.\")\n",
  "django__django-12193": "diff --git a/tests/postgres_tests/test_array.py b/tests/postgres_tests/test_array.py\nindex 6228cbc..ec3ebbd 100644\n--- a/tests/postgres_tests/test_array.py\n+++ b/tests/postgres_tests/test_array.py\n@@ -1103,6 +1103,24 @@ class TestSplitFormWidget(PostgreSQLWidgetTestCase):\n             }\n         )\n \n+    def test_split_array_widget_boolean_field(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=4)\n+        context = widget.get_context('name', [False, True, False, True])\n+        subwidgets_attrs = [subwidget['attrs'] for subwidget in context['widget']['subwidgets']]\n+        self.assertEqual(subwidgets_attrs, [{}, {'checked': True}, {}, {'checked': True}])\n+\n+    def test_split_array_widget_boolean_field_all_false(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=4)\n+        context = widget.get_context('name', [False, False, False, False])\n+        subwidgets_attrs = [subwidget['attrs'] for subwidget in context['widget']['subwidgets']]\n+        self.assertEqual(subwidgets_attrs, [{}, {}, {}, {}])\n+\n+    def test_split_array_widget_boolean_field_all_true(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=4)\n+        context = widget.get_context('name', [True, True, True, True])\n+        subwidgets_attrs = [subwidget['attrs'] for subwidget in context['widget']['subwidgets']]\n+        self.assertEqual(subwidgets_attrs, [{'checked': True}, {'checked': True}, {'checked': True}, {'checked': True}])\n+\n     def test_render(self):\n         self.check_html(\n             SplitArrayWidget(forms.TextInput(), size=2), 'array', None,\n@@ -1112,6 +1130,24 @@ class TestSplitFormWidget(PostgreSQLWidgetTestCase):\n             \"\"\"\n         )\n \n+    def test_split_array_widget_boolean_field(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=4)\n+        context = widget.get_context('name', [False, True, False, True])\n+        subwidgets_attrs = [subwidget['attrs'] for subwidget in context['widget']['subwidgets']]\n+        self.assertEqual(subwidgets_attrs, [{}, {'checked': True}, {}, {'checked': True}])\n+\n+    def test_split_array_widget_boolean_field_all_false(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=4)\n+        context = widget.get_context('name', [False, False, False, False])\n+        subwidgets_attrs = [subwidget['attrs'] for subwidget in context['widget']['subwidgets']]\n+        self.assertEqual(subwidgets_attrs, [{}, {}, {}, {}])\n+\n+    def test_split_array_widget_boolean_field_all_true(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=4)\n+        context = widget.get_context('name', [True, True, True, True])\n+        subwidgets_attrs = [subwidget['attrs'] for subwidget in context['widget']['subwidgets']]\n+        self.assertEqual(subwidgets_attrs, [{'checked': True}, {'checked': True}, {'checked': True}, {'checked': True}])\n+\n     def test_render_attrs(self):\n         self.check_html(\n             SplitArrayWidget(forms.TextInput(), size=2),\n",
  "django__django-12209": "diff --git a/tests/serializers/models/data.py b/tests/serializers/models/data.py\nindex 946715d..cfb988b 100644\n--- a/tests/serializers/models/data.py\n+++ b/tests/serializers/models/data.py\n@@ -252,8 +252,12 @@ class SmallPKData(models.Model):\n # class TimePKData(models.Model):\n #    data = models.TimeField(primary_key=True)\n \n+import uuid\n+from django.db import models\n \n-class UUIDData(models.Model):\n+class Sample(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4)\n+    name = models.CharField(blank=True, max_length=100)\n     data = models.UUIDField(primary_key=True)\n \n \n",
  "django__django-12262": "diff --git a/tests/template_tests/test_custom.py b/tests/template_tests/test_custom.py\nindex 8a8c535..0c87f7a 100644\n--- a/tests/template_tests/test_custom.py\n+++ b/tests/template_tests/test_custom.py\n@@ -77,6 +77,8 @@ class SimpleTagTests(TagTestCase):\n                 'simple_only_unlimited_args - Expected result: 37, 42, 56, 89'),\n             ('{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 56 eggs=\"scrambled\" four=1|add:3 %}',\n                 'simple_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4'),\n+            ('{% load custom %}{% hello greeting=\"hi\" %}', 'hello - Expected result: hi world'),\n+            ('{% load custom %}{% hello %}', 'hello - Expected result: hello world')\n         ]\n \n         for entry in templates:\n@@ -87,6 +89,14 @@ class SimpleTagTests(TagTestCase):\n             t = self.engine.from_string(\"%s as var %%}Result: {{ var }}\" % entry[0][0:-2])\n             self.assertEqual(t.render(c), \"Result: %s\" % entry[1])\n \n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n+        for entry in templates:\n+            t = self.engine.from_string(\"%s as var %%}Result: {{ var }}\" % entry[0][0:-2])\n+            self.assertEqual(t.render(c), \"Result: %s\" % entry[1])\n+\n     def test_simple_tag_errors(self):\n         errors = [\n             (\"'simple_one_default' received unexpected keyword argument 'three'\",\n@@ -101,8 +111,18 @@ class SimpleTagTests(TagTestCase):\n                 '{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 eggs=\"scrambled\" 56 four=1|add:3 %}'),\n             (\"'simple_unlimited_args_kwargs' received multiple values for keyword argument 'eggs'\",\n                 '{% load custom %}{% simple_unlimited_args_kwargs 37 eggs=\"scrambled\" eggs=\"scrambled\" %}'),\n+            ('{% load custom %}{% hello greeting=\"hi\" %}', 'hello - Expected result: hi world'),\n+            ('{% load custom %}{% hello %}', 'hello - Expected result: hello world')\n         ]\n \n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n+        for entry in templates:\n+            t = self.engine.from_string(\"%s as var %%}Result: {{ var }}\" % entry[0][0:-2])\n+            self.assertEqual(t.render(c), \"Result: %s\" % entry[1])\n+\n         for entry in errors:\n             with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n                 self.engine.from_string(entry[1])\n@@ -111,7 +131,30 @@ class SimpleTagTests(TagTestCase):\n             with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n                 self.engine.from_string(\"%s as var %%}\" % entry[1][0:-2])\n \n-    def test_simple_tag_escaping_autoescape_off(self):\n+    def test_custom_tag_keyword_only_arguments(self):\n+        # Test for keyword-only arguments in custom template tags\n+        c = Context({})\n+        templates = [\n+            ('{% load custom %}{% hello greeting=\"hi\" %}', 'hi world'),\n+            ('{% load custom %}{% hello %}', 'hello world'),\n+            ('{% load custom %}{% hello greeting=\"hi\" %}', 'hello - Expected result: hi world'),\n+            ('{% load custom %}{% hello %}', 'hello - Expected result: hello world')\n+        ]\n+\n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n+        for entry in templates:\n+            t = self.engine.from_string(\"%s as var %%}Result: {{ var }}\" % entry[0][0:-2])\n+            self.assertEqual(t.render(c), \"Result: %s\" % entry[1])\n+\n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n+        with self.assertRaisesMessage(TemplateSyntaxError, \"'hi' received multiple values for keyword argument 'greeting'\"):\n+            self.engine.from_string('{% load custom %}{% hi greeting=\"hi\" greeting=\"hello\" %}')\n         c = Context({'name': \"Jack & Jill\"}, autoescape=False)\n         t = self.engine.from_string(\"{% load custom %}{% escape_naive %}\")\n         self.assertEqual(t.render(c), \"Hello Jack & Jill!\")\n@@ -190,12 +233,22 @@ class InclusionTagTests(TagTestCase):\n                 'inclusion_only_unlimited_args - Expected result: 37, 42, 56, 89\\n'),\n             ('{% load inclusion %}{% inclusion_unlimited_args_kwargs 37 40|add:2 56 eggs=\"scrambled\" four=1|add:3 %}',\n                 'inclusion_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4\\n'),\n+            ('{% load custom %}{% hello greeting=\"hi\" %}', 'hello - Expected result: hi world'),\n+            ('{% load custom %}{% hello %}', 'hello - Expected result: hello world')\n         ]\n \n         for entry in templates:\n             t = self.engine.from_string(entry[0])\n             self.assertEqual(t.render(c), entry[1])\n \n+        for entry in templates:\n+            t = self.engine.from_string(\"%s as var %%}Result: {{ var }}\" % entry[0][0:-2])\n+            self.assertEqual(t.render(c), \"Result: %s\" % entry[1])\n+\n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n     def test_inclusion_tag_errors(self):\n         errors = [\n             (\"'inclusion_one_default' received unexpected keyword argument 'three'\",\n",
  "django__django-12276": "diff --git a/tests/forms_tests/widget_tests/test_fileinput.py b/tests/forms_tests/widget_tests/test_fileinput.py\nindex c3ea9d6..68b09b0 100644\n--- a/tests/forms_tests/widget_tests/test_fileinput.py\n+++ b/tests/forms_tests/widget_tests/test_fileinput.py\n@@ -10,6 +10,13 @@ class FileInputTest(WidgetTest):\n         \"\"\"\n         FileInput widgets never render the value attribute. The old value\n         isn't useful if a form is updated or an error occurred.\n+\n+    def test_use_required_attribute_with_initial(self):\n+        widget = FileInput()\n+        # Case where initial data exists, the required attribute should not be used\n+        self.assertIs(widget.use_required_attribute('resume.txt'), False)\n+        # Case where no initial data exists, the required attribute should be used\n+        self.assertIs(widget.use_required_attribute(None), True)\n         \"\"\"\n         self.check_html(self.widget, 'email', 'test@example.com', html='<input type=\"file\" name=\"email\">')\n         self.check_html(self.widget, 'email', '', html='<input type=\"file\" name=\"email\">')\n@@ -17,4 +24,4 @@ class FileInputTest(WidgetTest):\n \n     def test_value_omitted_from_data(self):\n         self.assertIs(self.widget.value_omitted_from_data({}, {}, 'field'), True)\n-        self.assertIs(self.widget.value_omitted_from_data({}, {'field': 'value'}, 'field'), False)\n+        self.assertIs(self.widget.value_omitted_from_data({}, {'field': 'value'}, 'field'), False)\n",
  "django__django-12304": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 6cabf01..846a6d3 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import decimal\n import ipaddress\n@@ -5,7 +6,7 @@ import uuid\n \n from django.db import models\n from django.test import SimpleTestCase\n-from django.utils.functional import Promise\n+from django.template import Context, Template\n from django.utils.translation import gettext_lazy as _\n \n \n@@ -137,7 +138,23 @@ class ChoicesTests(SimpleTestCase):\n                 # A string is not permitted as the second argument to int().\n                 ONE = 1, 'X', 'Invalid'\n \n-        msg = \"duplicate values found in <enum 'Fruit'>: PINEAPPLE -> APPLE\"\n+    def test_enum_in_template(self):\n+        template = Template('{{ Suit.DIAMOND.label }}|{{ Suit.DIAMOND.value }}')\n+        context = Context({'Suit': Suit})\n+        output = template.render(context)\n+        self.assertEqual(output, 'Diamond|1')\n+\n+    def test_enum_comparison_in_template(self):\n+        class YearInSchool(models.TextChoices):\n+            FRESHMAN = 'FR', _('Freshman')\n+            SOPHOMORE = 'SO', _('Sophomore')\n+            JUNIOR = 'JR', _('Junior')\n+            SENIOR = 'SR', _('Senior')\n+\n+        template = Template('{% if student.year_in_school == YearInSchool.FRESHMAN %}True{% else %}False{% endif %}')\n+        context = Context({'student': {'year_in_school': YearInSchool.FRESHMAN}, 'YearInSchool': YearInSchool})\n+        output = template.render(context)\n+        self.assertEqual(output, 'True')\n         with self.assertRaisesMessage(ValueError, msg):\n             class Fruit(models.IntegerChoices):\n                 APPLE = 1, 'Apple'\n",
  "django__django-12308": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex acbcf33..3a9682f 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -175,7 +175,20 @@ class UtilsTests(SimpleTestCase):\n \n         display_value = display_for_field(None, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, self.empty_value)\n-\n+    def test_json_display_for_field(self):\n+        tests = [\n+            ({'a': {'b': 'c'}}, '{\"a\": {\"b\": \"c\"}}'),\n+            (['a', 'b'], '[\"a\", \"b\"]'),\n+            ('a', '\"a\"'),\n+            ({('a', 'b'): 'c'}, \"{('a', 'b'): 'c'}\"),  # Invalid JSON.\n+        ]\n+        for value, display_value in tests:\n+            with self.subTest(value=value):\n+                self.assertEqual(\n+                    display_for_field(value, models.JSONField(), self.empty_value),\n+                    display_value,\n+                )\n+    \n     def test_number_formats_display_for_field(self):\n         display_value = display_for_field(12345.6789, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, '12345.6789')\n",
  "django__django-12325": "",
  "django__django-12419": "diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py\nindex 7af62eb..33db589 100644\n--- a/tests/middleware/test_security.py\n+++ b/tests/middleware/test_security.py\n@@ -231,7 +231,14 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         \"\"\"\n         self.assertNotIn('Referrer-Policy', self.process_response())\n \n-    def test_referrer_policy_on(self):\n+    @override_settings(SECURE_REFERRER_POLICY=None)\n+    def test_referrer_policy_default(self):\n+        \"\"\"\n+        When SECURE_REFERRER_POLICY is None (default), the \"Referrer-Policy\"\n+        should default to \"same-origin\".\n+        \"\"\"\n+        response = self.process_response()\n+        self.assertEqual(response.get('Referrer-Policy'), 'same-origin')\n         \"\"\"\n         With SECURE_REFERRER_POLICY set to a valid value, the middleware adds a\n         \"Referrer-Policy\" header to the response.\n@@ -247,11 +254,11 @@ class SecurityMiddlewareTest(SimpleTestCase):\n             with self.subTest(value=value), override_settings(SECURE_REFERRER_POLICY=value):\n                 self.assertEqual(self.process_response()['Referrer-Policy'], expected)\n \n-    @override_settings(SECURE_REFERRER_POLICY='strict-origin')\n+    @override_settings(SECURE_REFERRER_POLICY='same-origin')\n     def test_referrer_policy_already_present(self):\n         \"\"\"\n         The middleware will not override a \"Referrer-Policy\" header already\n         present in the response.\n         \"\"\"\n         response = self.process_response(headers={'Referrer-Policy': 'unsafe-url'})\n-        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n",
  "django__django-12663": "",
  "django__django-12708": "",
  "django__django-12713": "",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..b3b9956 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -166,13 +166,37 @@ class SqlFlushTests(TransactionTestCase):\n             self.assertIs(Author.objects.exists(), True)\n             self.assertIs(Book.objects.exists(), True)\n \n+        # New test to verify execute_sql_flush works without 'using' argument\n+        def test_execute_sql_flush_without_using(self):\n+            author = Author.objects.create(name='Ernest Hemingway')\n+            book = Book.objects.create(author=author)\n+            self.assertIs(Author.objects.exists(), True)\n+            self.assertIs(Book.objects.exists(), True)\n+\n+            sql_list = connection.ops.sql_flush(\n+                no_style(),\n+                [Author._meta.db_table, Book._meta.db_table],\n+                reset_sequences=True,\n+                allow_cascade=True,\n+            )\n+            connection.ops.execute_sql_flush(sql_list)\n+\n+            with transaction.atomic():\n+                self.assertIs(Author.objects.exists(), False)\n+                self.assertIs(Book.objects.exists(), False)\n+                if connection.features.supports_sequence_reset:\n+                    author = Author.objects.create(name='F. Scott Fitzgerald')\n+                    self.assertEqual(author.pk, 1)\n+                    book = Book.objects.create(author=author)\n+                    self.assertEqual(book.pk, 1)\n+\n         sql_list = connection.ops.sql_flush(\n             no_style(),\n             [Author._meta.db_table, Book._meta.db_table],\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n@@ -181,4 +205,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 17e707b..66b2d11 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2444,6 +2444,30 @@ class AutodetectorTests(TestCase):\n         self.assertNumberMigrations(changes, 'testapp', 1)\n         self.assertOperationTypes(changes, 'testapp', 0, [\"AddField\", \"AddField\"])\n         self.assertOperationAttributes(changes, 'testapp', 0, 0)\n+    def test_add_model_with_field_removed_from_base_model(self):\n+        \"\"\"\n+        Removing a base field takes place before adding a new inherited model\n+        that has a field with the same name.\n+        \"\"\"\n+        before = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('title', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        after = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+            ]),\n+            ModelState('app', 'book', [\n+                ('title', models.CharField(max_length=200)),\n+            ], bases=('app.readable',)),\n+        ]\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'app', 1)\n+        self.assertOperationTypes(changes, 'app', 0, ['RemoveField', 'CreateModel'])\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='title', model_name='readable')\n+        self.assertOperationAttributes(changes, 'app', 0, 1, name='book')\n \n     def test_mti_inheritance_model_removal(self):\n         Animal = ModelState('app', 'Animal', [\n@@ -2453,4 +2477,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..32c1166 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -8,7 +8,8 @@ from django.db import connection\n from django.db.models import Exists, Max, OuterRef\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n-from django.utils.deprecation import RemovedInDjango40Warning\n+from django.db import connection, models\n+from django.test.utils import isolate_apps\n \n from .models import (\n     Article, Author, Freebie, Game, IsNullWithNoneAsRHS, Player, Season, Tag,\n@@ -179,7 +180,28 @@ class LookupTests(TestCase):\n         with self.assertNumQueries(expected_num_queries):\n             self.assertEqual(Author.objects.in_bulk(authors), authors)\n \n-    def test_in_bulk_with_field(self):\n+    def test_in_bulk_with_unique_constraint(self):\n+        article_1 = Article.objects.create(slug=\"unique-slug-1\")\n+        article_2 = Article.objects.create(slug=\"unique-slug-2\")\n+        Article.objects.create(slug=\"unique-slug-3\")\n+        self.assertEqual(\n+            Article.objects.in_bulk([article_1.slug, article_2.slug], field_name=\"slug\"),\n+            {article_1.slug: article_1, article_2.slug: article_2},\n+        )\n+\n+    def test_in_bulk_with_non_unique_constraint(self):\n+        class TemporaryModel(models.Model):\n+            name = models.CharField(max_length=100)\n+\n+            class Meta:\n+                app_label = 'lookup'\n+                constraints = [\n+                    models.UniqueConstraint(fields=['name'], name='name_unique_constraint'),\n+                ]\n+\n+        msg = \"in_bulk()'s field_name must be a unique field but 'name' isn't.\"\n+        with self.assertRaisesMessage(ValueError, msg):\n+            TemporaryModel.objects.in_bulk(field_name='name')\n         self.assertEqual(\n             Article.objects.in_bulk([self.a1.slug, self.a2.slug, self.a3.slug], field_name='slug'),\n             {\n",
  "django__django-12858": "",
  "django__django-13012": "",
  "django__django-13028": "diff --git a/tests/queries/models.py b/tests/queries/models.py\nindex a43cfb4..ffffab0 100644\n--- a/tests/queries/models.py\n+++ b/tests/queries/models.py\n@@ -72,6 +72,8 @@ class ExtraInfo(models.Model):\n     class Meta:\n         ordering = ['info']\n \n+    filterable = models.BooleanField(default=True)\n+\n     def __str__(self):\n         return self.info\n \n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..9c33059 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,6 +343,37 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_order_by_self_referential_fk_id(self):\n+        # Test ordering with a self-referential foreign key\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\", editor=author_1)\n+        article_1 = Article.objects.create(headline=\"Article 1\", author=author_2, pub_date=\"2023-01-01\")\n+        article_2 = Article.objects.create(headline=\"Article 2\", author=author_1, pub_date=\"2023-01-02\")\n+\n+        # Ordering by 'author__editor_id' should not be affected by Author's default ordering\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            [\"Article 1\", \"Article 2\"],\n+            attrgetter('headline'),\n+        )\n+\n+        # Test the inversion of the order\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__editor_id'),\n+            [\"Article 2\", \"Article 1\"],\n+            attrgetter('headline'),\n+        )\n+\n+    def test_double_join_issue(self):\n+        # Test case to ensure no unnecessary joins are created\n+        author_1 = Author.objects.create()\n+        author_2 = Author.objects.create(editor=author_1)\n+        article_1 = Article.objects.create(headline=\"Article 1\", author=author_2, pub_date=\"2023-01-01\")\n+\n+        # Check the generated SQL query does not have double joins\n+        qs = Article.objects.filter(author__isnull=False).order_by('author__editor_id')\n+        self.assertNotIn(\"LEFT OUTER JOIN\", str(qs.query))\n+\n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n@@ -353,6 +384,37 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n+\n+    def test_order_by_self_referential_fk_id(self):\n+        # Test ordering with a self-referential foreign key\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\", editor=author_1)\n+        article_1 = Article.objects.create(headline=\"Article 1\", author=author_2, pub_date=\"2023-01-01\")\n+        article_2 = Article.objects.create(headline=\"Article 2\", author=author_1, pub_date=\"2023-01-02\")\n+\n+        # Ordering by 'author__editor_id' should not be affected by Author's default ordering\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            [\"Article 1\", \"Article 2\"],\n+            attrgetter('headline'),\n+        )\n+\n+        # Test the inversion of the order\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__editor_id'),\n+            [\"Article 2\", \"Article 1\"],\n+            attrgetter('headline'),\n+        )\n+\n+    def test_double_join_issue(self):\n+        # Test case to ensure no unnecessary joins are created\n+        author_1 = Author.objects.create()\n+        author_2 = Author.objects.create(editor=author_1)\n+        article_1 = Article.objects.create(headline=\"Article 1\", author=author_2, pub_date=\"2023-01-01\")\n+\n+        # Check the generated SQL query does not have double joins\n+        qs = Article.objects.filter(author__isnull=False).order_by('author__editor_id')\n+        self.assertNotIn(\"LEFT OUTER JOIN\", str(qs.query))\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline').asc()), [\n                 \"Article 1\",\n",
  "django__django-13089": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex e11856f..237fe07 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -615,6 +615,45 @@ class BaseCacheTests:\n                 count += 1\n         self.assertEqual(count, final_count)\n \n+    def test_cull_no_keys_to_cull(self):\n+        \"\"\"Test that _cull does not break when there are no keys to cull.\"\"\"\n+        try:\n+            cull_cache = caches['cull']\n+        except InvalidCacheBackendError:\n+            self.skipTest(\"Culling isn't implemented.\")\n+        \n+        old_max_entries = cull_cache._max_entries\n+        # Force the cache to cull immediately, when there are no entries.\n+        cull_cache._max_entries = 0\n+        try:\n+            cull_cache._cull('default', connection.cursor(), timezone.now())\n+            self.assertEqual(cull_cache._cache_model_class.objects.count(), 0)\n+        finally:\n+            cull_cache._max_entries = old_max_entries\n+\n+    def test_cull_with_no_rows_returned(self):\n+        \"\"\"Test that _cull handles when no rows are returned for culling.\"\"\"\n+        try:\n+            cull_cache = caches['cull']\n+        except InvalidCacheBackendError:\n+            self.skipTest(\"Culling isn't implemented.\")\n+        \n+        old_max_entries = cull_cache._max_entries\n+        # Force the cache to cull immediately, when there are entries.\n+        cull_cache._max_entries = 1\n+        try:\n+            cull_cache.set('key1', 'value1', timeout=1000)\n+            cull_cache.set('key2', 'value2', timeout=1000)\n+            # Manually adjust the database to simulate no key being returned.\n+            with connection.cursor() as cursor:\n+                cursor.execute(\"DELETE FROM %s WHERE 1=1\" % cull_cache._table)\n+            cull_cache._cull('default', connection.cursor(), timezone.now())\n+            # Ensure no exception occurs, and keys are still correct.\n+            self.assertFalse(cull_cache.has_key('key1'))\n+            self.assertFalse(cull_cache.has_key('key2'))\n+        finally:\n+            cull_cache._max_entries = old_max_entries\n+\n     def test_cull(self):\n         self._perform_cull_test('cull', 50, 29)\n \n",
  "django__django-13109": "",
  "django__django-13112": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 081eff8..50d9397 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -867,7 +867,44 @@ class StateTests(SimpleTestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             project_state.apps\n \n-    def test_real_apps(self):\n+    def test_reference_mixed_case_app_label(self):\n+        \"\"\"\n+        Test that ForeignKey references with mixed-case app labels are resolved correctly.\n+        \"\"\"\n+        new_apps = Apps()\n+\n+        class MixedAuthor(models.Model):\n+            class Meta:\n+                app_label = 'MiXedCase_migrations'\n+                apps = new_apps\n+\n+        class MixedBook(models.Model):\n+            author = models.ForeignKey(MixedAuthor, models.CASCADE)\n+\n+            class Meta:\n+                app_label = 'MiXedCase_migrations'\n+                apps = new_apps\n+\n+        class MixedMagazine(models.Model):\n+            authors = models.ManyToManyField(MixedAuthor)\n+\n+            class Meta:\n+                app_label = 'MiXedCase_migrations'\n+                apps = new_apps\n+\n+        project_state = ProjectState()\n+        project_state.add_model(ModelState.from_model(MixedAuthor))\n+        project_state.add_model(ModelState.from_model(MixedBook))\n+        project_state.add_model(ModelState.from_model(MixedMagazine))\n+        \n+        # Assert all models are registered correctly\n+        self.assertEqual(len(project_state.apps.get_models()), 3)\n+        \n+        # Validate that mixed-case app labels do not cause unresolved references\n+        model_names = {model.__name__ for model in project_state.apps.get_models()}\n+        self.assertIn('MixedAuthor', model_names)\n+        self.assertIn('MixedBook', model_names)\n+        self.assertIn('MixedMagazine', model_names)\n         \"\"\"\n         Including real apps can resolve dangling FK errors.\n         This test relies on the fact that contenttypes is always loaded.\n",
  "django__django-13121": "",
  "django__django-13128": "",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..b2742c7 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -45,6 +45,13 @@ class QuerySetSetOperationTests(TestCase):\n         qs2 = Number.objects.filter(num__lte=4)\n         self.assertNumbersEqual(qs1.difference(qs2), [5], ordered=False)\n \n+    def test_union_none_behavior(self):\n+        qs1 = Number.objects.filter(num__lt=2)\n+        qs2 = Number.objects.filter(num__gt=5)\n+        qs_union = qs1.union(qs2)\n+        self.assertNumbersEqual(qs_union, [0, 1, 6, 7, 8, 9], ordered=False)\n+        self.assertSequenceEqual(qs_union.none(), [])\n+\n     def test_union_distinct(self):\n         qs1 = Number.objects.all()\n         qs2 = Number.objects.all()\n",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..6f600b3 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -25,6 +25,7 @@ from django.contrib.sessions.models import Session\n from django.contrib.sessions.serializers import (\n     JSONSerializer, PickleSerializer,\n )\n+from django.utils.deprecation import RemovedInDjango40Warning\n from django.core import management\n from django.core.cache import caches\n from django.core.cache.backends.base import InvalidCacheBackendError\n@@ -33,6 +34,7 @@ from django.http import HttpResponse\n from django.test import (\n     RequestFactory, TestCase, ignore_warnings, override_settings,\n )\n+from django.utils.deprecation import RemovedInDjango40Warning\n from django.utils import timezone\n \n from .models import SessionStore as CustomDatabaseSession\n@@ -312,7 +314,12 @@ class SessionTestsMixin:\n         self.assertEqual(self.session.decode(encoded), data)\n \n     @override_settings(SECRET_KEY='django_tests_secret_key')\n-    def test_decode_legacy(self):\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_default_hashing_algorithm_legacy_decode(self):\n+        with self.settings(DEFAULT_HASHING_ALGORITHM='sha1'):\n+            data = {'a test key': 'a test value'}\n+            encoded = self.session.encode(data)\n+            self.assertEqual(self.session._legacy_decode(encoded), data)\n         # RemovedInDjango40Warning: pre-Django 3.1 sessions will be invalid.\n         legacy_encoded = (\n             'OWUzNTNmNWQxNTBjOWExZmM4MmQ3NzNhMDRmMjU4NmYwNDUyNGI2NDp7ImEgdGVzd'\n@@ -322,8 +329,21 @@ class SessionTestsMixin:\n             self.session.decode(legacy_encoded),\n             {'a test key': 'a test value'},\n         )\n-\n-    def test_decode_failure_logged_to_security(self):\n+    \n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_legacy_decode_invalid_hash(self):\n+        # Attempt to decode with an invalid hash\n+        with self.settings(DEFAULT_HASHING_ALGORITHM='sha1'):\n+            invalid_encoded = base64.b64encode(b'invalidhash:invaliddata').decode('ascii')\n+            self.assertEqual(self.session._legacy_decode(invalid_encoded), {})\n+\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_legacy_decode_corrupted_data(self):\n+        # Attempt to decode corrupted data\n+        corrupted_encoded = base64.b64encode(b'OWUzNTNmNWQxNTBjOg==').decode('ascii')\n+        with self.assertLogs('django.security.SuspiciousSession', 'WARNING') as cm:\n+            self.assertEqual(self.session._legacy_decode(corrupted_encoded), {})\n+        self.assertIn('Session data corrupted', cm.output[0])\n         bad_encode = base64.b64encode(b'flaskdj:alkdjf').decode('ascii')\n         with self.assertLogs('django.security.SuspiciousSession', 'WARNING') as cm:\n             self.assertEqual({}, self.session.decode(bad_encode))\n",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..a3302c8 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -2,6 +2,7 @@ import time\n \n from django.core.exceptions import ImproperlyConfigured\n from django.http import HttpResponse\n+from django.shortcuts import get_object_or_404\n from django.test import (\n     RequestFactory, SimpleTestCase, ignore_warnings, override_settings,\n )\n@@ -590,7 +591,22 @@ class DeprecationTests(SimpleTestCase):\n         self.assertEqual(response.context['key'], 'value')\n         self.assertIsInstance(response.context['view'], View)\n \n-    def test_template_params_warning(self):\n+    def test_template_params_filtering(self):\n+        \"\"\"Test that SimpleLazyObject does not crash when filtering with kwargs in Django 3.1.\"\"\"\n+        class OfferView(TemplateView):\n+            template_name = \"offers/offer.html\"\n+\n+            def get_context_data(self, **kwargs):\n+                offer_slug = kwargs.get(\"offer_slug\", \"\")\n+                # Simulate offer_slug being a SimpleLazyObject\n+                offer_slug = SimpleLazyObject(lambda: offer_slug)\n+                offer = get_object_or_404(Artist, slug=str(offer_slug))\n+                return {\"offer\": offer, \"offer_slug\": offer_slug}\n+\n+        artist = Artist.objects.create(name=\"Test Artist\", slug=\"test-artist\")\n+        response = OfferView.as_view()(self.rf.get('/'), offer_slug=artist.slug)\n+        self.assertEqual(response.context_data['offer'], artist)\n+        self.assertEqual(response.context_data['offer_slug'], artist.slug)\n         response = self.client.get('/template/custom/bar1/bar2/')\n         self.assertEqual(response.status_code, 200)\n         msg = (\n",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..4e7be6d 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -16,6 +16,7 @@ from django.forms.models import (\n )\n from django.template import Context, Template\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n+from django.test.utils import isolate_apps\n \n from .models import (\n     Article, ArticleStatus, Author, Author1, Award, BetterWriter, BigInt, Book,\n@@ -2819,7 +2820,40 @@ class LimitChoicesToTests(TestCase):\n         fields = fields_for_model(StumpJoke, ['has_fooled_today'])\n         self.assertSequenceEqual(fields['has_fooled_today'].queryset, [self.threepwood])\n \n-    def test_callable_called_each_time_form_is_instantiated(self):\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates_with_joins(self):\n+        # Setup additional data for testing joins in limit_choices_to\n+        character1 = Character.objects.create(username='char1', last_action='2023-10-01')\n+        character2 = Character.objects.create(username='char2', last_action='2023-10-01')\n+        \n+        joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=character1)\n+        joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=character2)\n+\n+        joke1.has_fooled_today.add(character1, character2)\n+        joke2.has_fooled_today.add(character1)\n+\n+        class CharacterDetailsWithJoin(models.Model):\n+            character = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_with_join_fk',\n+            )\n+\n+        class CharacterDetailsWithJoinForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetailsWithJoin\n+                fields = '__all__'\n+\n+        form = CharacterDetailsWithJoinForm()\n+        # Check that no duplicates appear in the queryset\n+        self.assertCountEqual(\n+            form.fields['character'].queryset,\n+            [character1, character2],\n+        )\n         field = StumpJokeForm.base_fields['most_recently_fooled']\n         with mock.patch.object(field, 'limit_choices_to') as today_callable_dict:\n             StumpJokeForm()\n",
  "django__django-13343": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex a5ab3a0..90e0cc6 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -20,7 +20,7 @@ from django.core.files.storage import (\n from django.core.files.uploadedfile import (\n     InMemoryUploadedFile, SimpleUploadedFile, TemporaryUploadedFile,\n )\n-from django.db.models import FileField\n+from django.db.models import FileField, ImageField\n from django.db.models.fields.files import FileDescriptor\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n@@ -29,7 +29,7 @@ from django.test.utils import requires_tz_support\n from django.urls import NoReverseMatch, reverse_lazy\n from django.utils import timezone\n \n-from .models import Storage, temp_storage, temp_storage_location\n+from .models import Storage, callable_storage, temp_storage, temp_storage_location\n \n FILE_SUFFIX_REGEX = '[A-Za-z0-9]{7}'\n \n@@ -906,6 +906,15 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         obj = FileField(storage=GetStorage)\n         self.assertIsInstance(obj.storage, BaseStorage)\n \n+    def test_deconstruction_with_callable_storage(self):\n+        \"\"\"\n+        Test that a FileField with callable storage deconstructs to the callable.\n+        \"\"\"\n+        field = FileField(storage=callable_storage)\n+        _, _, kwargs = field.deconstruct()\n+        self.assertIn('storage', kwargs)\n+        self.assertIs(kwargs['storage'], callable_storage)\n+\n     def test_callable_storage_file_field_in_model(self):\n         obj = Storage()\n         self.assertEqual(obj.storage_callable.storage, temp_storage)\n",
  "django__django-13346": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex b918d5c..94dfec7 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -632,6 +632,23 @@ class TestQuerying(TestCase):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='ar').exists(), False)\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='bar').exists(), True)\n \n+    def test_key_in_jsonfield(self):\n+        # Test with a single integer\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__key__in=[0]),\n+            [],\n+        )\n+        # Test with multiple integers\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__key__in=[0, 312]),\n+            [],\n+        )\n+        # Test with a string\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__key__in=['foo']),\n+            [],\n+        )\n+\n     def test_key_icontains(self):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__icontains='Ar').exists(), True)\n \n",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..c575eea 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -19,6 +19,8 @@ from django.test import (\n )\n from django.utils import timezone\n \n+import pytz\n+from datetime import datetime\n from ..models import Author, DTModel, Fan\n \n \n@@ -1133,7 +1135,43 @@ class DateFunctionWithTimeZoneTests(DateFunctionTests):\n         self.assertEqual(model.melb_year.year, 2016)\n         self.assertEqual(model.pacific_year.year, 2015)\n \n-    def test_trunc_ambiguous_and_invalid_times(self):\n+    def test_truncdate_with_tzinfo(self):\n+        melb = pytz.timezone('Australia/Melbourne')\n+        pacific = pytz.timezone('US/Pacific')\n+        start_datetime = datetime(2023, 10, 25, 15, 30)\n+        start_datetime = timezone.make_aware(start_datetime, timezone=pytz.UTC)\n+\n+        self.create_model(start_datetime, start_datetime)\n+\n+        model = DTModel.objects.annotate(\n+            melb_date=TruncDate('start_datetime', tzinfo=melb),\n+            pacific_date=TruncDate('start_datetime', tzinfo=pacific),\n+        ).get()\n+\n+        melb_start_datetime = start_datetime.astimezone(melb)\n+        pacific_start_datetime = start_datetime.astimezone(pacific)\n+\n+        self.assertEqual(model.melb_date, melb_start_datetime.date())\n+        self.assertEqual(model.pacific_date, pacific_start_datetime.date())\n+\n+    def test_trunctime_with_tzinfo(self):\n+        melb = pytz.timezone('Australia/Melbourne')\n+        pacific = pytz.timezone('US/Pacific')\n+        start_datetime = datetime(2023, 10, 25, 15, 30)\n+        start_datetime = timezone.make_aware(start_datetime, timezone=pytz.UTC)\n+\n+        self.create_model(start_datetime, start_datetime)\n+\n+        model = DTModel.objects.annotate(\n+            melb_time=TruncTime('start_datetime', tzinfo=melb),\n+            pacific_time=TruncTime('start_datetime', tzinfo=pacific),\n+        ).get()\n+\n+        melb_start_datetime = start_datetime.astimezone(melb)\n+        pacific_start_datetime = start_datetime.astimezone(pacific)\n+\n+        self.assertEqual(model.melb_time, melb_start_datetime.time())\n+        self.assertEqual(model.pacific_time, pacific_start_datetime.time())\n         sao = pytz.timezone('America/Sao_Paulo')\n         utc = pytz.timezone('UTC')\n         start_datetime = utc.localize(datetime(2016, 10, 16, 13))\n",
  "django__django-13401": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e39d03e..25441ea 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -102,8 +102,32 @@ class BasicFieldTests(SimpleTestCase):\n         name, path, args, kwargs = Nested.Field().deconstruct()\n         self.assertEqual(path, 'model_fields.tests.Nested.Field')\n \n+class TestAbstractFieldEquality(SimpleTestCase):\n \n-class ChoicesTests(SimpleTestCase):\n+    def test_fields_from_different_models_are_not_equal(self):\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+            \n+            class Meta:\n+                abstract = True\n+\n+        class Model1(AbstractModel):\n+            pass\n+\n+        class Model2(AbstractModel):\n+            pass\n+\n+        field_model1 = Model1._meta.get_field('field')\n+        field_model2 = Model2._meta.get_field('field')\n+\n+        # Ensure that fields from different models are not considered equal\n+        self.assertNotEqual(field_model1, field_model2)\n+\n+        # Ensure that the hashes are different\n+        self.assertNotEqual(hash(field_model1), hash(field_model2))\n+\n+        # Ensure the fields are ordered as expected (by creation_counter)\n+        self.assertLess(field_model1, field_model2)\n \n     @classmethod\n     def setUpClass(cls):\n",
  "django__django-13410": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 1285e22..da3d60e 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -1,3 +1,35 @@\n+\n+class FileLockTestCase(unittest.TestCase):\n+    def test_exclusive_lock(self):\n+        file_path = Path(__file__).parent / 'test_exclusive_lock.png'\n+        with open(file_path, 'wb') as f:\n+            f.write(b\"Test\")\n+        \n+        with open(file_path) as f1, open(file_path) as f2:\n+            self.assertIs(locks.lock(f1, locks.LOCK_EX), True)\n+            self.assertIs(locks.lock(f2, locks.LOCK_EX | locks.LOCK_NB), False)\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), False)\n+            self.assertIs(locks.unlock(f1), True)\n+\n+    def test_shared_lock(self):\n+        file_path = Path(__file__).parent / 'test_shared_lock.png'\n+        with open(file_path, 'wb') as f:\n+            f.write(b\"Test\")\n+        \n+        with open(file_path) as f1, open(file_path) as f2:\n+            self.assertIs(locks.lock(f1, locks.LOCK_SH), True)\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), True)\n+            self.assertIs(locks.unlock(f1), True)\n+            self.assertIs(locks.unlock(f2), True)\n+\n+    def test_unlock_without_lock(self):\n+        file_path = Path(__file__).parent / 'test_unlock.png'\n+        with open(file_path, 'wb') as f:\n+            f.write(b\"Test\")\n+\n+        with open(file_path) as f:\n+            self.assertIs(locks.unlock(f), True)\n+\n import errno\n import gzip\n import os\n@@ -16,7 +48,9 @@ from django.core.files.uploadedfile import (\n     InMemoryUploadedFile, SimpleUploadedFile, TemporaryUploadedFile,\n     UploadedFile,\n )\n+from django.core.files import locks\n from django.test import override_settings\n+from pathlib import Path\n \n try:\n     from PIL import Image\n",
  "django__django-13417": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 8130de5..5a77533 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2076,6 +2076,29 @@ class QuerysetOrderedTests(unittest.TestCase):\n     def test_empty_queryset(self):\n         self.assertIs(Annotation.objects.none().ordered, True)\n \n+    def test_annotated_default_ordering(self):\n+        qs = Tag.objects.annotate(num_notes=Count('pk'))\n+        self.assertIs(qs.ordered, False)\n+        self.assertIs(qs.order_by('name').ordered, True)\n+\n+    def test_annotated_values_default_ordering(self):\n+        qs = Tag.objects.values('name').annotate(num_notes=Count('pk'))\n+        self.assertIs(qs.ordered, False)\n+        self.assertIs(qs.order_by('name').ordered, True)\n+\n+    def test_group_by_no_ordering(self):\n+        qs = Annotation.objects.annotate(num_notes=Count('notes'))\n+        self.assertIs(qs.ordered, False)\n+        qs2 = Annotation.objects.annotate(num_notes=Count('notes')).order_by('id')\n+        self.assertIs(qs2.ordered, True)\n+\n+    def test_group_by_with_model_ordering(self):\n+        # Assuming Annotation model has Meta ordering by 'name'\n+        qs = Annotation.objects.annotate(num_notes=Count('notes'))\n+        self.assertIs(qs.ordered, False)\n+        qs2 = Annotation.objects.all().order_by('id')\n+        self.assertIs(qs2.ordered, True)\n+\n     def test_order_by_extra(self):\n         self.assertIs(Annotation.objects.all().extra(order_by=['id']).ordered, True)\n \n",
  "django__django-13516": "",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..276b332 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,10 +1,12 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n-from django.test.utils import ignore_warnings\n+from .models.with_custom_email_field import CustomEmailField\n+from .models import CustomEmailField as CustomEmailFieldModel\n from django.utils.deprecation import RemovedInDjango40Warning\n \n \n@@ -25,7 +27,17 @@ class TokenGeneratorTest(TestCase):\n         tk1 = p0.make_token(user)\n         self.assertIs(p0.check_token(user, tk1), True)\n \n-    def test_10265(self):\n+    def test_token_invalid_after_email_change_custom_user(self):\n+        \"\"\"Updating the custom user email address invalidates the token.\"\"\"\n+        user = CustomEmailField.objects.create_user(\n+            'changeemailuser', 'test4@example.com', 'testpw'\n+        )\n+        p0 = PasswordResetTokenGenerator()\n+        tk1 = p0.make_token(user)\n+        self.assertIs(p0.check_token(user, tk1), True)\n+        setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+        user.save()\n+        self.assertIs(p0.check_token(user, tk1), False)\n         \"\"\"\n         The token generated for a user created in the same request\n         will work correctly.\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..6a50176 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,7 +1,9 @@\n+\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n from django.contrib.auth.models import AbstractBaseUser\n+from django.db.models import Q, UniqueConstraint\n from django.core import checks\n from django.db import models\n from django.test import (\n@@ -194,7 +196,28 @@ class ModelsPermissionsChecksTests(SimpleTestCase):\n             ),\n         ])\n \n-    def test_custom_permission_name_max_length(self):\n+    @override_settings(AUTH_USER_MODEL='auth_tests.UserWithUniqueConstraint')\n+    def test_username_field_with_total_unique_constraints(self):\n+        \"\"\"\n+        Test if the auth.E003 error is skipped when a unique constraint is explicitly\n+        declared on USERNAME_FIELD in the model Meta constraints.\n+        \"\"\"\n+        class UserWithUniqueConstraint(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+            \n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(fields=['username'], name='username_unique_constraint')\n+                ]\n+\n+        # Run checks and expect no errors or warnings related to USERNAME_FIELD uniqueness.\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [])\n+\n+        with self.settings(AUTHENTICATION_BACKENDS=['my.custom.backend']):\n+            errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+            self.assertEqual(errors, [])\n         custom_permission_name = 'some ridiculously long verbose name that is out of control' * 5\n \n         class Checked(models.Model):\n",
  "django__django-13569": "",
  "django__django-13590": "",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..31fec95 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -15,6 +15,7 @@ from io import StringIO\n from unittest import mock\n \n from django import conf, get_version\n+from django.test.utils import captured_stderr, captured_stdout\n from django.conf import settings\n from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n@@ -32,6 +33,24 @@ from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n \n+class ExecuteFromCommandLineTests(SimpleTestCase):\n+    def test_prog_name_with_implicit_sys_argv(self):\n+        \"\"\"Test that prog_name is consistent with the default sys.argv behavior.\"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['incorrect_prog_name'] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_prog_name_with_custom_argv(self):\n+        \"\"\"Test that prog_name is consistent with the custom argv provided.\"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            execute_from_command_line(['custom-prog'] + args)\n+        self.assertIn('usage: custom-prog shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n \n SYSTEM_CHECK_MSG = 'System check identified no issues'\n",
  "django__django-13670": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 6f0b13f..32129b2 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -1,3 +1,4 @@\n+\n from datetime import date, datetime\n \n from django.test import SimpleTestCase, override_settings\n@@ -92,7 +93,21 @@ class DateFormatTests(SimpleTestCase):\n         self.assertEqual(dateformat.format(my_birthday, 'n'), '7')\n         self.assertEqual(dateformat.format(my_birthday, 'N'), 'July')\n \n-    def test_time_formats(self):\n+    def test_year_before_1000(self):\n+        tests = [\n+            (476, '76'),\n+            (42, '42'),\n+            (4, '04'),\n+            (123, '23'),\n+            (999, '99'),\n+            (1000, '00'),\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n         my_birthday = datetime(1979, 7, 8, 22, 00)\n \n         self.assertEqual(dateformat.format(my_birthday, 'P'), '10 p.m.')\n@@ -164,4 +179,4 @@ class DateFormatTests(SimpleTestCase):\n             self.assertEqual(\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+            )\n",
  "django__django-13741": "",
  "django__django-13786": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3782589..785c326 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -116,7 +116,53 @@ class OptimizerTests(SimpleTestCase):\n             ],\n             [\n                 migrations.CreateModel('Foo', fields=[], options={'verbose_name_plural': 'Foozes'}),\n-            ]\n+            ],\n+        )\n+\n+    def test_create_model_and_alter_model_options_unsetting(self):\n+        \"\"\"\n+        Test that AlterModelOptions unsets options when squashed with CreateModel.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'verbose_name': 'My Model', 'db_table': 'my_model_table'},\n+                ),\n+                migrations.AlterModelOptions(\n+                    'MyModel',\n+                    options={'verbose_name': 'My Model'},\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'verbose_name': 'My Model'},\n+                ),\n+            ],\n+        )\n+\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'verbose_name': 'My Model', 'db_table': 'my_model_table'},\n+                ),\n+                migrations.AlterModelOptions(\n+                    'MyModel',\n+                    options={},\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={},\n+                ),\n+            ],\n         )\n \n     def _test_create_alter_foo_delete_model(self, alter_foo):\n",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..0e649d3 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,7 +1,9 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n from django.test import SimpleTestCase\n+from django.utils.translation import gettext_lazy, lazy\n \n from ..utils import setup\n \n@@ -49,5 +51,26 @@ class AddTests(SimpleTestCase):\n \n class FunctionTests(SimpleTestCase):\n \n+    @setup({'add08': '{{ s1|add:lazy_s2 }}'})\n+    def test_add08(self):\n+        output = self.engine.render_to_string(\n+            'add08',\n+            {'s1': 'string', 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    @setup({'add09': '{{ lazy_s1|add:lazy_s2 }}'})\n+    def test_add09(self):\n+        output = self.engine.render_to_string(\n+            'add09',\n+            {'lazy_s1': gettext_lazy('string'), 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    def test_lazy_add(self):\n+        lazy_4 = lazy(lambda: 4, int)\n+        lazy_5 = lazy(lambda: 5, int)\n+        self.assertEqual(lazy_4() + lazy_5(), 9)\n+\n     def test_add(self):\n         self.assertEqual(add('1', '2'), 3)\n",
  "django__django-13807": "",
  "django__django-13809": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex d88ea78..3bf2bd1 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1343,6 +1343,36 @@ class ManageRunserverMigrationWarning(TestCase):\n         )\n \n \n+\n+class ManageRunserverSkipChecks(TestCase):\n+\n+    def setUp(self):\n+        self.stdout = StringIO()\n+        self.runserver_command = RunserverCommand(stdout=self.stdout)\n+\n+    @mock.patch('django.core.management.base.BaseCommand.check')\n+    def test_skip_checks(self, mocked_check):\n+        call_command(\n+            'runserver',\n+            use_reloader=False,\n+            skip_checks=True,\n+            stdout=self.stdout,\n+        )\n+        self.assertNotIn('Performing system checks...', self.stdout.getvalue())\n+        mocked_check.assert_not_called()\n+\n+        self.stdout.truncate(0)\n+        self.stdout.seek(0)\n+\n+        call_command(\n+            'runserver',\n+            use_reloader=False,\n+            skip_checks=False,\n+            stdout=self.stdout,\n+        )\n+        self.assertIn('Performing system checks...', self.stdout.getvalue())\n+        mocked_check.assert_called()\n+\n class ManageRunserverEmptyAllowedHosts(AdminScriptTestCase):\n     def setUp(self):\n         super().setUp()\n",
  "django__django-13810": "diff --git a/tests/middleware_exceptions/tests.py b/tests/middleware_exceptions/tests.py\nindex bb82f7d..55639f6 100644\n--- a/tests/middleware_exceptions/tests.py\n+++ b/tests/middleware_exceptions/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.conf import settings\n from django.core.exceptions import MiddlewareNotUsed\n from django.http import HttpResponse\n@@ -269,7 +270,35 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n     ])\n-    async def test_async_and_sync_middleware_async_call(self):\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.NotAsyncCapableMiddleware',\n+    ])\n+    async def test_async_middleware_with_middleware_not_used(self):\n+        # Test that MiddlewareNotUsed does not break the async middleware chain\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertIn(\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.NotAsyncCapableMiddleware'\",\n+            cm.output,\n+        )\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.NotAsyncCapableMiddleware',\n+    ])\n+    def test_sync_middleware_with_middleware_not_used(self):\n+        # Test that MiddlewareNotUsed does not break the sync middleware chain\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = self.client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertIn(\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.NotAsyncCapableMiddleware'\",\n+            cm.output,\n+        )\n         response = await self.async_client.get('/middleware_exceptions/view/')\n         self.assertEqual(response.content, b'OK')\n         self.assertEqual(response.status_code, 200)\n",
  "django__django-13820": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex 594c01e..efecf21 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -1,3 +1,4 @@\n+\n import compileall\n import os\n \n@@ -7,6 +8,7 @@ from django.db.migrations.exceptions import (\n )\n from django.db.migrations.loader import MigrationLoader\n from django.db.migrations.recorder import MigrationRecorder\n+from importlib import import_module\n from django.test import TestCase, modify_settings, override_settings\n \n from .test_base import MigrationTestBase\n@@ -512,6 +514,32 @@ class LoaderTests(TestCase):\n         migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n         self.assertEqual(migrations, [])\n \n+    @override_settings(\n+        MIGRATION_MODULES={'migrations': 'migrations.test_migrations_no_file'},\n+    )\n+    def test_loading_package_without_file_and_valid_path(self):\n+        \"\"\"\n+        Test loading migrations from a package with no __file__ but a valid __path__.\n+        \"\"\"\n+        test_module = import_module('migrations.test_migrations_no_file')\n+        loader = MigrationLoader(connection)\n+        \n+        # Remove __file__ and set a valid __path__\n+        module_file = test_module.__file__\n+        module_path = test_module.__path__\n+        try:\n+            del test_module.__file__\n+            self.assertIsInstance(module_path, list)\n+            loader.load_disk()\n+            migrations = [\n+                name\n+                for app, name in loader.disk_migrations\n+                if app == 'migrations'\n+            ]\n+            self.assertCountEqual(migrations, ['0001_initial', '0002_second'])\n+        finally:\n+            test_module.__file__ = module_file\n+\n \n class PycLoaderTests(MigrationTestBase):\n \n",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..f1585c5 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -10,6 +10,10 @@ from unittest import mock\n from django.core.exceptions import ImproperlyConfigured\n from django.db import NotSupportedError, connection, transaction\n from django.db.models import Aggregate, Avg, CharField, StdDev, Sum, Variance\n+import unittest\n+from unittest import mock\n+from django.core.exceptions import ImproperlyConfigured\n+from django.db.backends.sqlite3 import dbapi2\n from django.db.utils import ConnectionHandler\n from django.test import (\n     TestCase, TransactionTestCase, override_settings, skipIfDBFeature,\n",
  "django__django-13837": "",
  "django__django-13925": "diff --git a/tests/check_framework/test_model_checks.py b/tests/check_framework/test_model_checks.py\nindex 6424d89..2aaf6ea 100644\n--- a/tests/check_framework/test_model_checks.py\n+++ b/tests/check_framework/test_model_checks.py\n@@ -394,6 +394,66 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n                 id='models.W042',\n             ),\n         ])\n+    \n+    def test_inherited_explicit_pk_no_warning(self):\n+        class Parent(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class Child(Parent):\n+            pass\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n+    def test_inherited_parent_link_no_warning(self):\n+        class Parent(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class Child(Parent):\n+            parent_ptr = models.OneToOneField(Parent, models.CASCADE, parent_link=True)\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n+    def test_auto_created_and_inherited_pk_warning(self):\n+        class Parent(models.Model):\n+            pass\n+\n+        class Child(Parent):\n+            pass\n+\n+        self.assertEqual(\n+            checks.run_checks(app_configs=self.apps.get_app_configs()), \n+            [Warning(\n+                \"Auto-created primary key used when not defining a primary key type, by default 'django.db.models.AutoField'.\",\n+                hint=(\n+                    \"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    \"CheckDefaultPKConfig.default_auto_field attribute to point to a \"\n+                    \"subclass of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=Parent,\n+                id='models.W042',\n+            )]\n+        )\n+\n+    def test_auto_created_and_inherited_parent_link_warning(self):\n+        class Parent(models.Model):\n+            pass\n+\n+        class Child(Parent):\n+            parent_ptr = models.OneToOneField(Parent, models.CASCADE, parent_link=True)\n+\n+        self.assertEqual(\n+            checks.run_checks(app_configs=self.apps.get_app_configs()), \n+            [Warning(\n+                \"Auto-created primary key used when not defining a primary key type, by default 'django.db.models.AutoField'.\",\n+                hint=(\n+                    \"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    \"CheckDefaultPKConfig.default_auto_field attribute to point to a \"\n+                    \"subclass of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=Parent,\n+                id='models.W042',\n+            )]\n+        )\n \n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.BigAutoField')\n     def test_default_auto_field_setting(self):\n@@ -414,4 +474,4 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             class Meta:\n                 app_label = 'check_framework.apps.CheckPKConfig'\n \n-        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n+        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..672b8a7 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -298,6 +298,15 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['INVALID CHOICE'], f.clean, '4')\n \n+        # Test for ModelChoiceField invalid choice value display\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(['\"invalid\" is not one of the available choices.'], f.clean, 'invalid')\n+\n         # ModelMultipleChoiceField\n         e = {\n             'required': 'REQUIRED',\n@@ -307,4 +316,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/tests.py b/tests/many_to_one/tests.py\nindex 8af1b8e..2e51218 100644\n--- a/tests/many_to_one/tests.py\n+++ b/tests/many_to_one/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n from copy import deepcopy\n \n@@ -549,7 +550,37 @@ class ManyToOneTests(TestCase):\n         self.assertEqual(child.parent, parent)\n         self.assertEqual(child.parent_id, parent.name)\n \n-    def test_fk_to_bigautofield(self):\n+    def test_save_fk_after_parent_with_non_numeric_pk_set_on_child(self):\n+        parent = ParentStringPrimaryKey()\n+        child = ChildStringPrimaryKeyParent(parent=parent)\n+        child.parent.name = 'jeff'\n+        parent.save()\n+        child.save()\n+        child.refresh_from_db()\n+        self.assertEqual(child.parent, parent)\n+        self.assertEqual(child.parent_id, parent.name)\n+\n+    def test_save_fk_after_parent_with_non_numeric_pk_initialized(self):\n+        # This test verifies the correct behavior when the foreign key is assigned after the PK is set\n+        parent = ParentStringPrimaryKey(name='jeff')\n+        child = ChildStringPrimaryKeyParent(parent=parent)\n+        parent.save()\n+        child.save()\n+        child.refresh_from_db()\n+        self.assertEqual(child.parent, parent)\n+        self.assertEqual(child.parent_id, parent.name)\n+\n+    def test_save_fk_after_parent_with_non_numeric_pk_delayed_assignment(self):\n+        # This test checks the behavior when the FK is set after saving the parent\n+        parent = ParentStringPrimaryKey()\n+        parent.save()\n+        parent.name = 'jeff'\n+        child = ChildStringPrimaryKeyParent(parent=parent)\n+        parent.save()  # Save again to ensure the name is committed\n+        child.save()\n+        child.refresh_from_db()\n+        self.assertEqual(child.parent, parent)\n+        self.assertEqual(child.parent_id, parent.name)\n         ch = City.objects.create(name='Chicago')\n         District.objects.create(city=ch, name='Far South')\n         District.objects.create(city=ch, name='North')\n",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..e042884 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,5 +1,26 @@\n+\n+class AutoFieldSubclassTests(TestCase):\n+\n+    def test_auto_field_subclass_create(self):\n+        \"\"\"\n+        Test that MyAutoField uses from_db_value on object creation.\n+        \"\"\"\n+        obj = CustomAutoFieldModel.objects.create()\n+        self.assertIsInstance(obj.id, MyWrapper)\n+\n+    @skipUnlessDBFeature('can_return_rows_from_bulk_insert')\n+    def test_auto_field_subclass_bulk_create(self):\n+        \"\"\"\n+        Test that MyAutoField uses from_db_value on bulk creation.\n+        \"\"\"\n+        obj = CustomAutoFieldModel()\n+        CustomAutoFieldModel.objects.bulk_create([obj])\n+        self.assertIsInstance(obj.id, MyWrapper)\n+\n from django.db import IntegrityError, transaction\n-from django.test import TestCase, skipIfDBFeature\n+from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from .fields import MyWrapper\n+from .models import CustomAutoFieldModel\n \n from .models import Bar, Business, Employee, Foo\n \n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..c8e8d75 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -816,6 +816,33 @@ class BasicExpressionsTests(TestCase):\n             [self.example_inc.ceo, self.max],\n         )\n \n+    def test_q_and_exists_combination(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+\n+        # Test Q & Exists combinations to ensure no TypeError occurs\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q() & Exists(is_ceo)),\n+            [self.example_inc.ceo, self.foobar_ltd.ceo, self.max],\n+        )\n+\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q() & Exists(is_poc)),\n+            [self.max],\n+        )\n+\n+        # Test Exists & Q combinations to ensure commutativity\n+        self.assertCountEqual(\n+            Employee.objects.filter(Exists(is_ceo) & Q()),\n+            [self.example_inc.ceo, self.foobar_ltd.ceo, self.max],\n+        )\n+\n+        self.assertCountEqual(\n+            Employee.objects.filter(Exists(is_poc) & Q()),\n+            [self.max],\n+        )\n \n class IterableLookupInnerExpressionsTests(TestCase):\n     @classmethod\n",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..8fa9616 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -205,6 +205,43 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yields_during_post_process(self):\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(post_process=True)\n+        stats = collectstatic_cmd.collect()\n+\n+        # Ensure no file is yielded more than once\n+        post_processed_files = stats['post_processed']\n+        self.assertCountEqual(post_processed_files, set(post_processed_files))\n+\n+    def test_correct_stats_reporting(self):\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(post_process=True)\n+        stats = collectstatic_cmd.collect()\n+\n+        # Stats should reflect the correct number of files post-processed\n+        num_post_processed = len(stats['post_processed'])\n+        num_copied = len(stats['copied'])\n+        self.assertEqual(stats['total_post_processed'], num_post_processed)\n+        self.assertEqual(stats['total_copied'], num_copied)\n+\n+    def test_no_duplicate_operations(self):\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(post_process=True)\n+        stats = collectstatic_cmd.collect()\n+\n+        # Simulate checking that operations like compression aren't duplicated\n+        operation_tracker = {}\n+        for file in stats['post_processed']:\n+            if file not in operation_tracker:\n+                operation_tracker[file] = 1\n+            else:\n+                operation_tracker[file] += 1\n+\n+        for file, count in operation_tracker.items():\n+            # Each file should only be operated on once\n+            self.assertEqual(count, 1)\n+\n     def test_css_import_case_insensitive(self):\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n         self.assertEqual(relpath, \"cached/styles_insensitive.3fa427592a53.css\")\n@@ -214,6 +251,43 @@ class TestHashedFiles:\n             self.assertIn(b\"other.d41d8cd98f00.css\", content)\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yields_during_post_process(self):\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(post_process=True)\n+        stats = collectstatic_cmd.collect()\n+\n+        # Ensure no file is yielded more than once\n+        post_processed_files = stats['post_processed']\n+        self.assertCountEqual(post_processed_files, set(post_processed_files))\n+\n+    def test_correct_stats_reporting(self):\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(post_process=True)\n+        stats = collectstatic_cmd.collect()\n+\n+        # Stats should reflect the correct number of files post-processed\n+        num_post_processed = len(stats['post_processed'])\n+        num_copied = len(stats['copied'])\n+        self.assertEqual(stats['total_post_processed'], num_post_processed)\n+        self.assertEqual(stats['total_copied'], num_copied)\n+\n+    def test_no_duplicate_operations(self):\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(post_process=True)\n+        stats = collectstatic_cmd.collect()\n+\n+        # Simulate checking that operations like compression aren't duplicated\n+        operation_tracker = {}\n+        for file in stats['post_processed']:\n+            if file not in operation_tracker:\n+                operation_tracker[file] = 1\n+            else:\n+                operation_tracker[file] += 1\n+\n+        for file, count in operation_tracker.items():\n+            # Each file should only be operated on once\n+            self.assertEqual(count, 1)\n+\n     @override_settings(\n         STATICFILES_DIRS=[os.path.join(TEST_ROOT, 'project', 'faulty')],\n         STATICFILES_FINDERS=['django.contrib.staticfiles.finders.FileSystemFinder'],\n",
  "django__django-14089": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 7fb3d83..e941d7b 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n@@ -10,6 +11,7 @@ from django.utils.datastructures import (\n     CaseInsensitiveMapping, DictWrapper, ImmutableList, MultiValueDict,\n     MultiValueDictKeyError, OrderedSet,\n )\n+import collections.abc\n \n \n class OrderedSetTests(SimpleTestCase):\n@@ -18,7 +20,26 @@ class OrderedSetTests(SimpleTestCase):\n         s = OrderedSet([1, 2, 3])\n         self.assertEqual(list(s.dict.keys()), [1, 2, 3])\n \n-    def test_remove(self):\n+    def test_reversed(self):\n+        s = reversed(OrderedSet([1, 2, 3]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [3, 2, 1])\n+\n+    def test_reversed_empty(self):\n+        s = reversed(OrderedSet())\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [])\n+\n+    def test_reversed_single_element(self):\n+        s = reversed(OrderedSet([42]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [42])\n+\n+    def test_reversed_order_preservation(self):\n+        # Tests that reversed maintains the correct order when iterating\n+        original = OrderedSet([10, 20, 30, 40, 50])\n+        reversed_iter = reversed(original)\n+        self.assertEqual(list(reversed_iter), [50, 40, 30, 20, 10])\n         s = OrderedSet()\n         self.assertEqual(len(s), 0)\n         s.add(1)\n",
  "django__django-14122": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 83089d9..5ee98ad 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n from operator import attrgetter\n \n@@ -41,6 +42,18 @@ class OrderingTests(TestCase):\n         # Getting a single item should work too:\n         self.assertEqual(Article.objects.all()[0], self.a4)\n \n+    def test_default_ordering_does_not_affect_group_by(self):\n+        \"\"\"\n+        Ensure that Meta.ordering fields do not affect GROUP BY in aggregation.\n+        \"\"\"\n+        Article.objects.exclude(headline='Article 4').update(author=self.author_1)\n+        Article.objects.filter(headline='Article 4').update(author=self.author_2)\n+        articles = Article.objects.values('author').annotate(count=Count('author'))\n+        self.assertCountEqual(articles, [\n+            {'author': self.author_1.pk, 'count': 3},\n+            {'author': self.author_2.pk, 'count': 1},\n+        ])\n+\n     def test_default_ordering_override(self):\n         \"\"\"\n         Override ordering with order_by, which is in the same format as the\n@@ -483,4 +496,4 @@ class OrderingTests(TestCase):\n         )\n         ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n         articles = ChildArticle.objects.order_by('article_ptr')\n-        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n",
  "django__django-14140": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex c3db825..e560aec 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -838,6 +838,25 @@ class BasicExpressionsTests(TestCase):\n             with self.subTest(conditions):\n                 self.assertCountEqual(Employee.objects.filter(conditions), [self.max])\n \n+    def test_deconstruct_exists(self):\n+        tagged = Tag.objects.filter(category=OuterRef('pk'))\n+        q = Q(Exists(tagged))\n+        _, args, kwargs = q.deconstruct()\n+        self.assertEqual(args, (Exists(tagged),))\n+        self.assertEqual(kwargs, {})\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+        tests = [\n+            Exists(is_poc) & Q(),\n+            Q() & Exists(is_poc),\n+            Exists(is_poc) | Q(),\n+            Q() | Exists(is_poc),\n+        ]\n+        for conditions in tests:\n+            with self.subTest(conditions):\n+                self.assertCountEqual(Employee.objects.filter(conditions), [self.max])\n+\n \n class IterableLookupInnerExpressionsTests(TestCase):\n     @classmethod\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..2c42b2e 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,4 +1,6 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n+from django.test import TestCase  # Import TestCase to use for new tests\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n@@ -65,8 +67,26 @@ class TestDefaultPK(SimpleTestCase):\n         with self.assertRaisesMessage(ImproperlyConfigured, msg):\n             class Model(models.Model):\n                 pass\n+    \n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -81,8 +101,26 @@ class TestDefaultPK(SimpleTestCase):\n             pass\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n+    \n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14311": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex b7e6f92..4412fbd 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -167,6 +167,15 @@ class TestChildArguments(SimpleTestCase):\n     @mock.patch.dict(sys.modules, {'__main__': django.__main__})\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package_with_dotted_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n     def test_run_as_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n@@ -176,6 +185,15 @@ class TestChildArguments(SimpleTestCase):\n     @mock.patch.dict(sys.modules, {'__main__': test_main})\n     @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package_with_dotted_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n     def test_run_as_non_django_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n@@ -191,6 +209,15 @@ class TestChildArguments(SimpleTestCase):\n         )\n \n     @mock.patch('sys.warnoptions', [])\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package_with_dotted_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n     def test_exe_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             exe_path = Path(tmpdir) / 'django-admin.exe'\n@@ -202,6 +229,15 @@ class TestChildArguments(SimpleTestCase):\n                 )\n \n     @mock.patch('sys.warnoptions', [])\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package_with_dotted_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n     def test_entrypoint_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             script_path = Path(tmpdir) / 'django-admin-script.py'\n",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..d00a8bc 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -226,6 +226,13 @@ TEST_DATA = [\n     (URLValidator(), None, ValidationError),\n     (URLValidator(), 56, ValidationError),\n     (URLValidator(), 'no_scheme', ValidationError),\n+    # Newlines, carriage returns, and tabs are not accepted.\n+    (URLValidator(), 'http://www.djangoproject.com\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://\\twww.djangoproject.com', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\t', ValidationError),\n+    (URLValidator(), 'http://\\nwww.djangoproject.com', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n     # Trailing newlines not accepted\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n",
  "django__django-14351": "diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\nindex 79963c3..c24e98d 100644\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -1526,6 +1526,34 @@ class AggregationTests(TestCase):\n         DistinctAggregate('foo', distinct=True)\n \n \n+from django.test import TestCase\n+from django.db.models import Q, Count\n+from .models import Author, Book, PropertyGroup, ManagementAgent\n+\n+class QObjectOrTests(TestCase):\n+    def setUp(self):\n+        self.management_agent = ManagementAgent.objects.create()\n+        self.property_group1 = PropertyGroup.objects.create(management_agent=self.management_agent)\n+        self.property_group2 = PropertyGroup.objects.create(management_agent=self.management_agent)\n+\n+    def test_q_object_or_with_id_in(self):\n+        property_groups = PropertyGroup.objects.filter(management_agent=self.management_agent)\n+        queryset = Book.objects.annotate(Count(\"authors__property_groups\"))\n+        result = queryset.filter(\n+            Q(authors__property_groups__id__in=property_groups.values_list(\"id\", flat=True))\n+            | Q(authors__property_groups__count=0)\n+        ).distinct()\n+        self.assertIsNotNone(result)\n+\n+    def test_q_object_or_with_in(self):\n+        property_groups = PropertyGroup.objects.filter(management_agent=self.management_agent)\n+        queryset = Book.objects.annotate(Count(\"authors__property_groups\"))\n+        with self.assertRaises(ProgrammingError):\n+            queryset.filter(\n+                Q(authors__property_groups__in=property_groups)\n+                | Q(authors__property_groups__count=0)\n+            ).distinct()\n+\n class JoinPromotionTests(TestCase):\n     def test_ticket_21150(self):\n         b = Bravo.objects.create()\n",
  "django__django-14373": "",
  "django__django-14376": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\nindex 643c2b6..1e69bf4 100644\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -38,6 +38,58 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_deprecated_kwargs(self):\n+        \"\"\"Test handling of deprecated 'db' and 'passwd' kwargs.\"\"\"\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+\n+        # Test using deprecated 'db' and 'passwd'\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'db': 'optiondbname',\n+                    'user': 'optionuser',\n+                    'passwd': 'optionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n+        # Test using new 'database' and 'password'\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'user': 'optionuser',\n+                    'password': 'optionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n     def test_options_override_settings_proper_values(self):\n         settings_port = 444\n         options_port = 555\n@@ -68,6 +120,58 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_deprecated_kwargs(self):\n+        \"\"\"Test handling of deprecated 'db' and 'passwd' kwargs.\"\"\"\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+\n+        # Test using deprecated 'db' and 'passwd'\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'db': 'optiondbname',\n+                    'user': 'optionuser',\n+                    'passwd': 'optionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n+        # Test using new 'database' and 'password'\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'user': 'optionuser',\n+                    'password': 'optionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n     def test_options_password(self):\n         expected_args = [\n             'mysql',\n@@ -89,6 +193,58 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_deprecated_kwargs(self):\n+        \"\"\"Test handling of deprecated 'db' and 'passwd' kwargs.\"\"\"\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+\n+        # Test using deprecated 'db' and 'passwd'\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'db': 'optiondbname',\n+                    'user': 'optionuser',\n+                    'passwd': 'optionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n+        # Test using new 'database' and 'password'\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'user': 'optionuser',\n+                    'password': 'optionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n     def test_options_charset(self):\n         expected_args = [\n             'mysql',\n",
  "django__django-14434": "",
  "django__django-14493": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 17aecdd..cf0b9d6 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -454,6 +454,10 @@ class TestCollectionManifestStorage(TestHashedFiles, CollectionTestCase):\n         )\n \n \n+from io import StringIO\n+from django.test import override_settings\n+from django.core.management import call_command\n+\n @override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.NoneHashStorage')\n class TestCollectionNoneHashStorage(CollectionTestCase):\n     hashed_file_path = hashed_file_path\n@@ -463,6 +467,18 @@ class TestCollectionNoneHashStorage(CollectionTestCase):\n         self.assertEqual(relpath, 'cached/styles.css')\n \n \n+class NoPostProcessReplacedPathStorage(ManifestStaticFilesStorage):\n+    max_post_process_passes = 0\n+\n+@override_settings(STATICFILES_STORAGE='staticfiles_tests.test_storage.NoPostProcessReplacedPathStorage')\n+class TestCollectionNoPostProcessReplacedPaths(CollectionTestCase):\n+    run_collectstatic_in_setUp = False\n+\n+    def test_collectstatic_no_post_process_replaced_paths(self):\n+        stdout = StringIO()\n+        call_command('collectstatic', verbosity=1, interactive=False, stdout=stdout, clear=True)\n+        self.assertIn('post-processed', stdout.getvalue())\n+\n @override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.SimpleStorage')\n class TestCollectionSimpleStorage(CollectionTestCase):\n     hashed_file_path = hashed_file_path\n",
  "django__django-14500": "diff --git a/tests/migrations/test_executor.py b/tests/migrations/test_executor.py\nindex d884fe4..d7d2e17 100644\n--- a/tests/migrations/test_executor.py\n+++ b/tests/migrations/test_executor.py\n@@ -640,7 +640,22 @@ class ExecutorTests(MigrationTestBase):\n         \"\"\"\n         recorder = MigrationRecorder(connection)\n         # Record all replaced migrations as applied\n-        recorder.record_applied(\"migrations\", \"0001_initial\")\n+    def test_unapplied_squashed_migration(self):\n+        with override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_squashed'}):\n+            # Set up\n+            recorder = MigrationRecorder(connection)\n+            recorder.record_applied(\"migrations\", \"0001_initial\")\n+            recorder.record_applied(\"migrations\", \"0002_second\")\n+            \n+            executor = MigrationExecutor(connection)\n+            executor.migrate([(\"migrations\", \"0001_squashed_0002\")])\n+            self.assertIn((\"migrations\", \"0001_squashed_0002\"), recorder.applied_migrations())\n+\n+            # Unapply the squashed migration\n+            executor.migrate([(\"migrations\", None)])\n+            self.assertNotIn((\"migrations\", \"0001_squashed_0002\"), recorder.applied_migrations())\n+            self.assertNotIn((\"migrations\", \"0001_initial\"), recorder.applied_migrations())\n+            self.assertNotIn((\"migrations\", \"0002_second\"), recorder.applied_migrations())\n         recorder.record_applied(\"migrations\", \"0002_second\")\n         executor = MigrationExecutor(connection)\n         executor.migrate([(\"migrations\", \"0001_squashed_0002\")])\n",
  "django__django-14539": "",
  "django__django-14559": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex b579834..588f871 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -115,6 +115,31 @@ class BulkUpdateTests(TestCase):\n \n     pk_fields_error = 'bulk_update() cannot be used with primary key fields.'\n \n+    def test_bulk_update_return_value(self):\n+        # Test with an empty list of objects\n+        rows_updated = Note.objects.bulk_update([], ['note'])\n+        self.assertEqual(rows_updated, 0, \"Updating an empty list should return 0.\")\n+\n+        # Create 2000 Note objects\n+        Note.objects.bulk_create([\n+            Note(note=str(i), misc=str(i))\n+            for i in range(0, 2000)\n+        ])\n+        notes = list(Note.objects.all())\n+\n+        # Update notes and check the number of rows updated\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 2000, \"All 2000 notes should be updated.\")\n+\n+        # Test duplicates handling\n+        note = Note.objects.create(note='test-note', misc='test')\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'])\n+        self.assertEqual(rows_updated, 1, \"Duplicate notes should be counted once.\")\n+\n+        # Test with batch_size parameter\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'], batch_size=1)\n+        self.assertEqual(rows_updated, 2, \"Each duplicate should be counted in different batches.\")\n+\n     def test_update_primary_key(self):\n         with self.assertRaisesMessage(ValueError, self.pk_fields_error):\n             Note.objects.bulk_update([], ['id'])\n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..db72d32 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -984,7 +984,27 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n \n-    def test_formset_iteration(self):\n+    def test_formset_non_form_error_css_class(self):\n+        \"\"\"\n+        Test that the 'nonform' CSS class is added to non-form errors in FormSets.\n+        \"\"\"\n+        data = {\n+            'choices-TOTAL_FORMS': '3',\n+            'choices-INITIAL_FORMS': '0',\n+            'choices-MIN_NUM_FORMS': '0',\n+            'choices-MAX_NUM_FORMS': '0',\n+            'choices-0-choice': 'Duplicate',\n+            'choices-0-votes': '10',\n+            'choices-1-choice': 'Duplicate',\n+            'choices-1-votes': '20',\n+            'choices-2-choice': 'Unique',\n+            'choices-2-votes': '30',\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=3)\n+        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        self.assertIn('<ul class=\"errorlist nonform\">', str(formset.non_form_errors()))\n+        self.assertIn('You may only specify a choice once.</li></ul>', str(formset.non_form_errors()))\n         \"\"\"Formset instances are iterable.\"\"\"\n         ChoiceFormset = formset_factory(Choice, extra=3)\n         formset = ChoiceFormset()\n",
  "django__django-14631": "",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..855c212 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -1,7 +1,8 @@\n from datetime import date, datetime, timedelta\n from operator import attrgetter\n \n-from django.db import IntegrityError\n+from django.db import IntegrityError, models\n+from django.core.checks import Error\n from django.test import TestCase\n \n from .models import (\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..0e65135 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,3 +1,47 @@\n+\n+class AutocompleteJsonViewTests(TestCase):\n+    def setUp(self):\n+        self.superuser = User.objects.create_superuser(username='admin', password='secret', email='admin@example.com')\n+        self.url = reverse('admin:app_list', args=['app_label'])  # replace with actual URL for autocomplete\n+        self.factory = RequestFactory()\n+        self.opts = {'app_label': 'admin_views', 'model_name': 'question', 'field_name': 'question'}\n+\n+    def test_serialize_result_customization(self):\n+        class CustomAutocompleteJsonView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return {**super().serialize_result(obj, to_field_name), 'posted': str(obj.posted)}\n+\n+        Question.objects.create(question='Question 1', posted=datetime.date(2021, 8, 9))\n+        Question.objects.create(question='Question 2', posted=datetime.date(2021, 8, 7))\n+\n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+        request.user = self.superuser\n+\n+        response = CustomAutocompleteJsonView.as_view(admin_site=admin.site)(request)\n+        self.assertEqual(response.status_code, 200)\n+\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': [\n+                {'id': str(q.pk), 'text': q.question, 'posted': str(q.posted)}\n+                for q in Question.objects.order_by('-posted')\n+            ],\n+            'pagination': {'more': False},\n+        })\n+\n+    def test_default_serialize_result(self):\n+        Question.objects.create(question='Question 1', posted=datetime.date(2021, 8, 9))\n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+        request.user = self.superuser\n+\n+        response = AutocompleteJsonView.as_view(admin_site=admin.site)(request)\n+        self.assertEqual(response.status_code, 200)\n+\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data['results'], [\n+            {'id': str(q.pk), 'text': q.question} for q in Question.objects.all()\n+        ])\n+\n import json\n from contextlib import contextmanager\n \n@@ -10,6 +54,10 @@ from django.core.exceptions import PermissionDenied\n from django.http import Http404\n from django.test import RequestFactory, override_settings\n from django.urls import reverse, reverse_lazy\n+import datetime\n+from django.contrib.admin.views.autocomplete import AutocompleteJsonView\n+from django.test import TestCase\n+from .models import Question\n \n from .admin import AnswerAdmin, QuestionAdmin\n from .models import (\n",
  "django__django-14765": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 11009e5..973cc67 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -923,8 +923,24 @@ class StateTests(SimpleTestCase):\n             len([x for x in rendered_state.get_models() if x._meta.app_label == \"migrations\"]),\n             1,\n         )\n-\n-    def test_ignore_order_wrt(self):\n+    def test_real_apps_non_set(self):\n+        with self.assertRaises(AssertionError):\n+            ProjectState(real_apps=['contenttypes'])\n+\n+    def test_real_apps_as_set(self):\n+        # Test that passing a valid set works without error\n+        try:\n+            ProjectState(real_apps={'contenttypes'})\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError unexpectedly!\")\n+\n+    def test_real_apps_as_none(self):\n+        # Test that passing None defaults to an empty set\n+        try:\n+            state = ProjectState(real_apps=None)\n+            self.assertEqual(state.real_apps, set())\n+        except Exception as e:\n+            self.fail(f\"ProjectState raised an unexpected exception: {e}\")\n         \"\"\"\n         Makes sure ProjectState doesn't include OrderWrt fields when\n         making from existing models.\n",
  "django__django-14771": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 1875424..e21f57b 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -195,6 +195,15 @@ class TestChildArguments(SimpleTestCase):\n         )\n \n     @mock.patch('__main__.__spec__', None)\n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver'],\n+        )\n+\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n@@ -235,6 +244,15 @@ class TestChildArguments(SimpleTestCase):\n         with self.assertRaisesMessage(RuntimeError, msg):\n             autoreload.get_child_arguments()\n \n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver'],\n+        )\n+\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n     def test_module_no_spec(self):\n",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..ce06f99 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -271,7 +271,55 @@ class MethodDecoratorTests(SimpleTestCase):\n                 self.assertEqual(Test.method.__doc__, 'A method')\n                 self.assertEqual(Test.method.__name__, 'method')\n \n-    def test_new_attribute(self):\n+    def test_wrapper_assignments(self):\n+        \"\"\"@method_decorator preserves wrapper assignments.\"\"\"\n+        func_name = None\n+        func_module = None\n+\n+        def decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_name, func_module\n+                func_name = getattr(func, '__name__', None)\n+                func_module = getattr(func, '__module__', None)\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(decorator)\n+            def method(self):\n+                return 'tests'\n+\n+        Test().method()\n+        self.assertEqual(func_name, 'method')\n+        self.assertIsNotNone(func_module)\n+\n+    def test_partial_function_with_decorator(self):\n+        \"\"\"Test method_decorator with a partial function to ensure wrapper assignment preservation.\"\"\"\n+        from functools import partial\n+\n+        def base_function(x, y):\n+            \"\"\"A base function\"\"\"\n+            return x + y\n+\n+        partial_func = partial(base_function, y=2)\n+\n+        def example_decorator(func):\n+            @wraps(func)\n+            def wrapper(*args, **kwargs):\n+                return func(*args, **kwargs)\n+            return wrapper\n+\n+        class TestPartial:\n+            @method_decorator(example_decorator)\n+            def method(self):\n+                return partial_func(3)\n+\n+        instance = TestPartial()\n+        result = instance.method()\n+        self.assertEqual(result, 5)\n+        self.assertEqual(instance.method.__name__, 'method')\n+        self.assertEqual(instance.method.__doc__, 'A base function')\n         \"\"\"A decorator that sets a new attribute on the method.\"\"\"\n         def decorate(func):\n             func.x = 1\n",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..5f0e4f6 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5085,6 +5085,37 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         response = self.client.get(reverse('admin2:auth_user_password_change', args=(su.pk,)))\n         self.assertEqual(response.status_code, 404)\n \n+    def _test_readonly_foreignkey_links(self, admin_site_namespace):\n+        \"\"\"\n+        Helper function to check the URL in readonly foreignkey fields.\n+        \"\"\"\n+        chapter = Chapter.objects.create(\n+            title='Chapter 1',\n+            content='content',\n+            book=Book.objects.create(name='Book 1'),\n+        )\n+        language = Language.objects.create(iso='EN', name='English')\n+\n+        # Register the models in the custom admin site\n+        site2.register(Chapter)\n+        site2.register(Language)\n+\n+        # Generate the URL for a language object in the readonly field\n+        url = reverse(f'{admin_site_namespace}:admin_views_language_change', args=(language.pk,))\n+        self.assertIn(admin_site_namespace, url)\n+\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        \"\"\"\n+        Test the readonly ForeignKey field link for the default admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('admin')\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test the readonly ForeignKey field link for a custom admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('admin7')\n+\n     def test_change_form_renders_correct_null_choice_value(self):\n         \"\"\"\n         Regression test for #17911.\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..545b12c 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -279,6 +280,20 @@ class ModelChoiceFieldTests(TestCase):\n         field = CustomModelChoiceField(Category.objects.all())\n         self.assertIsInstance(field.choices, CustomModelChoiceIterator)\n \n+    def test_choice_value_hash(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(self.c1.pk, None)))\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+\n+    def test_model_choice_iterator_value_as_dict_key(self):\n+        # Test that ModelChoiceIteratorValue can be used as a dictionary key\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        test_dict = {value_1: 'value1', value_2: 'value2'}\n+        self.assertEqual(test_dict[value_1], 'value1')\n+        self.assertEqual(test_dict[value_2], 'value2')\n+\n     def test_choice_iterator_passes_model_to_widget(self):\n         class CustomCheckboxSelectMultiple(CheckboxSelectMultiple):\n             def create_option(self, name, value, label, selected, index, subindex=None, attrs=None):\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..bce6c60 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -784,6 +784,33 @@ class OperationTests(OperationTestBase):\n         project_state = self.apply_operations(app_label, project_state, operations=[\n             migrations.RenameModel(\"Pony\", \"Pony2\"),\n         ], atomic=connection.features.supports_atomic_references_rename)\n+\n+    def test_rename_model_with_db_table_noop(self):\n+        app_label = 'test_rmwdbtn'\n+        # Initial project state with models created\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        # Clone the state to simulate a forward operation\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            # Ensuring no queries are executed for forward operation\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        \n+        with connection.schema_editor() as editor:\n+            # Ensuring no queries are executed for backward operation\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n         Pony = project_state.apps.get_model(app_label, \"Pony2\")\n         Rider = project_state.apps.get_model(app_label, \"Rider\")\n         pony = Pony.objects.create()\n",
  "django__django-15022": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex e1920cd..402ee32 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -153,6 +153,36 @@ class ChangeListTests(TestCase):\n         cl = ia.get_changelist_instance(request)\n         self.assertEqual(cl.queryset.query.select_related, {'player': {}, 'band': {}})\n \n+    def test_unnecessary_joins_in_admin_changelist(self):\n+        \"\"\"\n+        Test to ensure that unnecessary joins are not performed in changelist queries\n+        with multiple search terms.\n+        \"\"\"\n+\n+        # Create a client and related offices for testing.\n+        client = Client.objects.create(name='Test Client', contact_person='John Doe')\n+        ClientOffice.objects.create(name='Main Office', client=client)\n+        ClientOffice.objects.create(name='Secondary Office', client=client)\n+\n+        # Setup the admin and request\n+        m = ClientAdmin(Client, site)\n+        request = self.factory.get('/client/', data={SEARCH_VAR: 'Test Office'})\n+        request.user = self.superuser\n+\n+        # Get the changelist instance\n+        cl = m.get_changelist_instance(request)\n+\n+        # Capture the queries\n+        with CaptureQueriesContext(connection) as context:\n+            object_count = cl.queryset.count()\n+\n+        # We expect at least one client with the name 'Test Client'\n+        self.assertEqual(object_count, 1)\n+\n+        # Verify that the number of JOINs is minimized\n+        # It should be 1 since we're joining on clientoffice in the search_fields\n+        self.assertEqual(context.captured_queries[0]['sql'].count('JOIN'), 1)\n+\n     def test_result_list_empty_changelist_value(self):\n         \"\"\"\n         Regression test for #14982: EMPTY_CHANGELIST_VALUE should be honored\n",
  "django__django-15037": "",
  "django__django-15103": "diff --git a/tests/template_tests/filter_tests/test_json_script.py b/tests/template_tests/filter_tests/test_json_script.py\nindex 607e24c..8284508 100644\n--- a/tests/template_tests/filter_tests/test_json_script.py\n+++ b/tests/template_tests/filter_tests/test_json_script.py\n@@ -1,5 +1,7 @@\n+\n from django.test import SimpleTestCase\n \n+from django.utils.html import json_script\n from ..utils import setup\n \n \n@@ -16,4 +18,4 @@ class JsonScriptTests(SimpleTestCase):\n             '<script id=\"test_id\" type=\"application/json\">'\n             '{\"a\": \"testing\\\\r\\\\njson \\'string\\\\\" \\\\u003Cb\\\\u003Eescaping\\\\u003C/b\\\\u003E\"}'\n             '</script>'\n-        )\n+        )\n",
  "django__django-15104": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 04452fa..1e20a17 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2835,6 +2835,54 @@ class AutodetectorTests(TestCase):\n                 )\n \n \n+class MigrationAutodetectorCustomFKFieldTests(TestCase):\n+    def test_add_custom_fk_with_hardcoded_to(self):\n+        class HardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.Author'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']\n+                return name, path, args, kwargs\n+\n+        book_hardcoded_fk_to = ModelState('testapp', 'Book', [\n+            ('author', HardcodedForeignKey(on_delete=models.CASCADE)),\n+        ])\n+        changes = self.get_changes(\n+            [self.author_empty],\n+            [self.author_empty, book_hardcoded_fk_to],\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='Book')\n+\n+    def test_autodetector_with_custom_fk_field(self):\n+        class CustomFKField(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.HardcodedModel'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs[\"to\"]\n+                return name, path, args, kwargs\n+\n+        before = ProjectState()\n+        before.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after = ProjectState()\n+        after.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after.add_model(ModelState('testapp', 'TestModel', [('custom', CustomFKField(on_delete=models.CASCADE))]))\n+        \n+        autodetector = MigrationAutodetector(before, after)\n+        changes = autodetector._detect_changes()\n+\n+        # Assert that the changes are detected correctly\n+        self.assertEqual(len(changes['testapp']), 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='TestModel')\n+\n class MigrationSuggestNameTests(SimpleTestCase):\n     def test_no_operations(self):\n         class Migration(migrations.Migration):\n",
  "django__django-15127": "diff --git a/tests/messages_tests/base.py b/tests/messages_tests/base.py\nindex 85a7769..0c2c528 100644\n--- a/tests/messages_tests/base.py\n+++ b/tests/messages_tests/base.py\n@@ -1,3 +1,4 @@\n+\n from django.contrib.messages import constants, get_level, set_level, utils\n from django.contrib.messages.api import MessageFailure\n from django.contrib.messages.constants import DEFAULT_LEVELS\n@@ -368,6 +369,41 @@ class BaseTests:\n         tags = [msg.level_tag for msg in storage]\n         self.assertEqual(tags, ['info', '', 'debug', 'warning', 'error', 'success'])\n \n+    @override_settings_tags(MESSAGE_TAGS={\n+        constants.INFO: 'info',\n+        constants.DEBUG: '',\n+        constants.WARNING: '',\n+        constants.ERROR: 'bad',\n+        29: 'custom',\n+    })\n+    def test_custom_tags(self):\n+        storage = self.get_storage()\n+        storage.level = 0\n+        add_level_messages(storage)\n+        tags = [msg.level_tag for msg in storage]\n+        self.assertEqual(tags, ['info', '', 'debug', 'warning', 'bad', 'success', 'custom'])\n+\n+    @override_settings_tags(MESSAGE_TAGS={\n+        constants.INFO: 'new_info',\n+        50: 'new_custom',\n+    })\n+    def test_override_settings_updates_level_tags(self):\n+        storage = self.get_storage()\n+        storage.level = 0\n+        add_level_messages(storage)\n+        # Adding a custom level 50 message to test the new custom tag\n+        storage.add(50, 'A custom level message')\n+        tags = [msg.level_tag for msg in storage]\n+        self.assertEqual(tags, ['new_info', '', 'debug', 'warning', 'error', 'success', 'new_info', 'new_custom'])\n+        self.assertEqual(tags, ['info', '', 'extra-tag debug', 'warning', 'error', 'success', 'info'])\n+\n+    def test_level_tag(self):\n+        storage = self.get_storage()\n+        storage.level = 0\n+        add_level_messages(storage)\n+        tags = [msg.level_tag for msg in storage]\n+        self.assertEqual(tags, ['info', '', 'debug', 'warning', 'error', 'success'])\n+\n     @override_settings_tags(MESSAGE_TAGS={\n         constants.INFO: 'info',\n         constants.DEBUG: '',\n",
  "django__django-15128": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex adde8a6..6d8c0a6 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2095,13 +2095,53 @@ class QuerySetBitwiseOperationTests(TestCase):\n         cls.room_3 = Classroom.objects.create(school=cls.school, has_blackboard=True, name='Room 3')\n         cls.room_4 = Classroom.objects.create(school=cls.school, has_blackboard=False, name='Room 4')\n \n-    @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n+    def test_conflicting_aliases_during_combine(self):\n+        tag = Tag.objects.create(name=\"tag\")\n+        annotation_1 = Annotation.objects.create(tag=tag)\n+        annotation_2 = Annotation.objects.create(tag=tag)\n+        note = annotation_1.notes.create(tag=tag)\n+        \n+        base_user_1 = BaseUser.objects.create(annotation=annotation_1)\n+        base_user_2 = BaseUser.objects.create(annotation=annotation_2)\n+        \n+        task = Task.objects.create(owner=base_user_2, creator=base_user_2, note=note)\n+        \n+        qs1 = annotation_1.baseuser_set.all()\n+        qs2 = BaseUser.objects.filter(\n+            Q(owner__note__in=annotation_1.notes.all()) |\n+            Q(creator__note__in=annotation_1.notes.all())\n+        )\n+        \n+        self.assertSequenceEqual(qs1, [base_user_1])\n+        self.assertSequenceEqual(qs2, [base_user_2])\n+        self.assertCountEqual(qs2 | qs1, qs1 | qs2)\n+        self.assertCountEqual(qs2 | qs1, [base_user_1, base_user_2])\n     def test_or_with_rhs_slice(self):\n         qs1 = Classroom.objects.filter(has_blackboard=True)\n         qs2 = Classroom.objects.filter(has_blackboard=False)[:1]\n         self.assertCountEqual(qs1 | qs2, [self.room_1, self.room_2, self.room_3])\n \n-    @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n+    def test_conflicting_aliases_during_combine(self):\n+        tag = Tag.objects.create(name=\"tag\")\n+        annotation_1 = Annotation.objects.create(tag=tag)\n+        annotation_2 = Annotation.objects.create(tag=tag)\n+        note = annotation_1.notes.create(tag=tag)\n+        \n+        base_user_1 = BaseUser.objects.create(annotation=annotation_1)\n+        base_user_2 = BaseUser.objects.create(annotation=annotation_2)\n+        \n+        task = Task.objects.create(owner=base_user_2, creator=base_user_2, note=note)\n+        \n+        qs1 = annotation_1.baseuser_set.all()\n+        qs2 = BaseUser.objects.filter(\n+            Q(owner__note__in=annotation_1.notes.all()) |\n+            Q(creator__note__in=annotation_1.notes.all())\n+        )\n+        \n+        self.assertSequenceEqual(qs1, [base_user_1])\n+        self.assertSequenceEqual(qs2, [base_user_2])\n+        self.assertCountEqual(qs2 | qs1, qs1 | qs2)\n+        self.assertCountEqual(qs2 | qs1, [base_user_1, base_user_2])\n     def test_or_with_lhs_slice(self):\n         qs1 = Classroom.objects.filter(has_blackboard=True)[:1]\n         qs2 = Classroom.objects.filter(has_blackboard=False)\n",
  "django__django-15161": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 5fdccc5..776ca83 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1775,7 +1775,23 @@ class ValueTests(TestCase):\n         self.assertEqual(len(kwargs), 1)\n         self.assertEqual(kwargs['output_field'].deconstruct(), CharField().deconstruct())\n \n-    def test_repr(self):\n+    def test_deconstruct_f(self):\n+        # Test that F expression deconstructs to its simplified path\n+        f_expression = F('field_name')\n+        path, args, kwargs = f_expression.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, ('field_name',))\n+        self.assertEqual(kwargs, {})\n+\n+    def test_deconstruct_expression_wrapper(self):\n+        # Test that ExpressionWrapper deconstructs to its full path\n+        wrapper = ExpressionWrapper(Value(1), output_field=IntegerField())\n+        path, args, kwargs = wrapper.deconstruct()\n+        self.assertEqual(path, 'django.db.models.ExpressionWrapper')\n+        self.assertEqual(len(args), 1)\n+        self.assertEqual(args[0].deconstruct(), Value(1).deconstruct())\n+        self.assertIn('output_field', kwargs)\n+        self.assertEqual(kwargs['output_field'].deconstruct(), IntegerField().deconstruct())\n         tests = [\n             (None, 'Value(None)'),\n             ('str', \"Value('str')\"),\n",
  "django__django-15268": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a6c0858..fcdf3d1 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1762,7 +1762,27 @@ class AutodetectorTests(TestCase):\n             index_together={('title', 'newfield2')},\n         )\n \n-    def test_proxy(self):\n+    def test_optimize_foo_together_operations(self):\n+        \"\"\"\n+        Test that multiple consecutive AlterFooTogether operations are optimized into a single operation.\n+        \"\"\"\n+        changes = self.get_changes(\n+            [self.author_empty, self.book],\n+            [self.author_empty, self.book_foo_together_4]\n+        )\n+        self.assertNumberMigrations(changes, \"otherapp\", 1)\n+        self.assertOperationTypes(changes, 'otherapp', 0, [\n+            'AlterUniqueTogether',\n+            'AlterIndexTogether',\n+        ])\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 0, name='book',\n+            unique_together={('title', 'newfield2')},\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 1, name='book',\n+            index_together={('title', 'newfield2')},\n+        )\n         \"\"\"The autodetector correctly deals with proxy models.\"\"\"\n         # First, we test adding a proxy model\n         changes = self.get_changes([self.author_empty], [self.author_empty, self.author_proxy])\n",
  "django__django-15277": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 11f86ed..5c58026 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1847,6 +1847,24 @@ class ValueTests(TestCase):\n                 expr = Value(value)\n                 self.assertIsInstance(expr.output_field, output_field_type)\n \n+    def test_value_resolves_charfield_without_validators(self):\n+        \"\"\"Test that CharField does not add a MaxLengthValidator for Value-based fields.\"\"\"\n+        test_values = [\n+            'test',\n+            '',\n+            'another test',\n+        ]\n+        for value in test_values:\n+            with self.subTest(value=value):\n+                field = Value(value)._resolve_output_field()\n+                self.assertNotIn(validators.MaxLengthValidator, \n+                                 [type(validator) for validator in field.validators])\n+\n+    def test_output_field_does_not_create_broken_validators(self):\n+            with self.subTest(type=type(value)):\n+                expr = Value(value)\n+                self.assertIsInstance(expr.output_field, output_field_type)\n+\n     def test_resolve_output_field_failure(self):\n         msg = 'Cannot resolve expression type, unknown output_field'\n         with self.assertRaisesMessage(FieldError, msg):\n",
  "django__django-15278": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex dd02aee..fa4c527 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -638,6 +638,31 @@ class SchemaTests(TransactionTestCase):\n             editor.add_field(Author, new_field)\n         columns = self.column_classes(Author)\n         # MySQL annoyingly uses the same backend, so it'll come back as one of\n+\n+    def test_add_nullable_onetoonefield(self):\n+        \"\"\"\n+        Test adding a nullable OneToOneField does not crash on SQLite.\n+        \"\"\"\n+        # Create the tables for both models\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+\n+        # Define a new nullable OneToOneField\n+        new_field = OneToOneField(Note, CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+\n+        # Attempt to add the new field to the Author model\n+        with connection.schema_editor() as editor:\n+            try:\n+                editor.add_field(Author, new_field)\n+            except OperationalError as e:\n+                self.fail(f\"Adding a nullable OneToOneField raised an error: {e}\")\n+\n+        # Verify the column was added successfully\n+        columns = self.column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        self.assertTrue(columns['note_id'][1][6])  # Check if the field is nullable\n         # these two types.\n         self.assertIn(columns['bits'][0], (\"BinaryField\", \"TextField\"))\n \n",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..8cb82ea 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -10,6 +10,8 @@ from .models import (\n     Bar, Choiceful, Foo, RenamedField, VerboseNameField, Whiz, WhizDelayed,\n     WhizIter, WhizIterEmpty,\n )\n+from django.db import models\n+import pickle\n \n \n class Nested:\n@@ -18,8 +20,37 @@ class Nested:\n \n \n class BasicFieldTests(SimpleTestCase):\n+    def test_hash_immutability(self):\n+        field = models.CharField(max_length=200)\n+        field_hash = hash(field)\n+\n+        class Book(models.Model):\n+            title = field\n+\n+        self.assertEqual(field_hash, hash(field))\n+\n+    def test_field_hash_in_dict(self):\n+        field = models.CharField(max_length=100)\n+        field_hash = hash(field)\n+        field_dict = {field: 'value'}\n+\n+        class Magazine(models.Model):\n+            name = field\n+\n+        self.assertIn(field, field_dict)\n+        self.assertEqual(field_hash, hash(field))\n+\n+    def test_field_hash_equality(self):\n+        field1 = models.CharField(max_length=100)\n+        field2 = models.CharField(max_length=100)\n+        self.assertNotEqual(hash(field1), hash(field2))\n \n-    def test_show_hidden_initial(self):\n+    def test_field_hash_picklable(self):\n+        field = models.CharField(max_length=100)\n+        # Ensure that the hash remains the same after pickling and unpickling\n+        pickled_field = pickle.dumps(field)\n+        unpickled_field = pickle.loads(pickled_field)\n+        self.assertEqual(hash(field), hash(unpickled_field))\n         \"\"\"\n         Fields with choices respect show_hidden_initial as a kwarg to\n         formfield().\n",
  "django__django-15368": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex 447c150..b18e3b0 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -204,7 +204,23 @@ class BulkUpdateTests(TestCase):\n             [cat.special_name for cat in special_categories]\n         )\n \n-    def test_field_references(self):\n+    def test_bulk_update_with_plain_f_expression(self):\n+        # Initial setup: create instances of SelfRef\n+        self_refs = [SelfRef.objects.create(name=f'name_{i}', c8='') for i in range(10)]\n+\n+        # Update instances using a plain F expression\n+        for self_ref in self_refs:\n+            self_ref.c8 = F('name')\n+        \n+        # Perform bulk update\n+        SelfRef.objects.bulk_update(self_refs, ['c8'])\n+\n+        # Verify that 'c8' field is updated to match 'name' field\n+        for self_ref in self_refs:\n+            self_ref.refresh_from_db()\n+            self.assertEqual(self_ref.c8, self_ref.name)\n+            \n+    def test_f_expression(self):\n         numbers = [Number.objects.create(num=0) for _ in range(10)]\n         for number in numbers:\n             number.num = F('num') + 1\n",
  "django__django-15380": "",
  "django__django-15382": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex bd890ac..a7bc95c 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1905,8 +1905,25 @@ class ExistsTests(TestCase):\n         )\n         self.assertNotIn('ORDER BY', captured_sql)\n \n-\n-class FieldTransformTests(TestCase):\n+from django.test import TestCase\n+from django.db.models import Exists, Q\n+from .models import Manager\n+\n+class ExistsSubqueryTests(TestCase):\n+    \n+    def test_negated_empty_exists(self):\n+        \"\"\"Test negated Exists with an empty queryset doesn't remove WHERE.\"\"\"\n+        manager = Manager.objects.create(name='test')\n+        \n+        qs = Manager.objects.filter(\n+            ~Exists(Manager.objects.none()) & Q(pk=manager.pk)\n+        )\n+        \n+        self.assertSequenceEqual(qs, [manager])\n+        \n+        sql = str(qs.query)\n+        self.assertIn('WHERE', sql, \"The WHERE clause is missing in the negated Exists SQL.\")\n+        self.assertIn(f'\"id\" = {manager.pk}', sql, \"The filter on primary key is missing in the SQL.\")\n \n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-15467": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex f5af59b..02272f0 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -9,9 +9,16 @@ try:\n except ImportError:\n     from backports import zoneinfo\n \n+# Additional model for test purposes\n+class Inventory(models.Model):\n+    parent = models.ForeignKey(Group, on_delete=models.CASCADE)\n+\n from django import forms\n from django.conf import settings\n from django.contrib import admin\n+from django.contrib.auth.models import Group\n+from django.db import models\n+from django.contrib.admin import ModelAdmin\n from django.contrib.admin import widgets\n from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.auth.models import User\n@@ -132,7 +139,18 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n             raw_id_fields=[\"main_band\"],\n         )\n \n-    def test_radio_fields_ForeignKey(self):\n+    def test_radio_fields_foreignkey_formfield_overrides_empty_label(self):\n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {\"parent\": admin.VERTICAL}\n+\n+            def formfield_for_foreignkey(self, db_field, request, **kwargs):\n+                if db_field.name == \"parent\":\n+                    kwargs[\"empty_label\"] = \"Custom empty label\"\n+                return super().formfield_for_foreignkey(db_field, request, **kwargs)\n+\n+        ma = MyModelAdmin(Inventory, admin.site)\n+        ff = ma.formfield_for_dbfield(Inventory._meta.get_field(\"parent\"), request=None)\n+        self.assertEqual(ff.empty_label, \"Custom empty label\")\n         ff = self.assertFormfield(\n             Event,\n             \"main_band\",\n",
  "django__django-15499": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 5df1b06..ff9dc3c 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -129,6 +129,81 @@ class OptimizerTests(SimpleTestCase):\n             ],\n         )\n \n+    def test_create_model_with_managers_only(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Bar\", fields=[]),\n+                migrations.AlterModelManagers(\n+                    name=\"Bar\",\n+                    managers=[\n+                        (\"main\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    managers=[\n+                        (\"main\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n+    def test_create_model_with_existing_managers_and_alter(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\",\n+                    fields=[],\n+                    managers=[(\"old_manager\", models.Manager())],\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Baz\",\n+                    managers=[\n+                        (\"new_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\",\n+                    fields=[],\n+                    managers=[\n+                        (\"new_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n+    def test_create_model_with_multiple_alter_model_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Qux\", fields=[]),\n+                migrations.AlterModelManagers(\n+                    name=\"Qux\",\n+                    managers=[\n+                        (\"first_manager\", models.Manager()),\n+                    ],\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Qux\",\n+                    managers=[\n+                        (\"second_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Qux\",\n+                    fields=[],\n+                    managers=[\n+                        (\"second_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n     def test_create_model_and_remove_model_options(self):\n         self.assertOptimizesTo(\n             [\n",
  "django__django-15525": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 3640e99..8adf60b 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -791,6 +791,33 @@ class NaturalKeyFixtureTests(TestCase):\n         )\n \n \n+class NaturalKeyFixtureOnOtherDatabaseTests(TestCase):\n+    databases = {\"default\", \"other\"}\n+\n+    def setUp(self):\n+        # Ensure the 'other' database is empty before each test case.\n+        NaturalKeyWithFKDependency.objects.using('other').all().delete()\n+        Person.objects.using('other').all().delete()\n+\n+    def test_natural_key_with_foreign_key_on_other_database(self):\n+        \"\"\"\n+        Test that loading data with a natural key dependency on a foreign key\n+        works correctly when using a non-default database.\n+        \"\"\"\n+        # Load the fixture data into the 'other' database.\n+        fixture_path = os.path.join(os.path.dirname(__file__), 'fixtures', 'nk_with_foreign_key.json')\n+        management.call_command('loaddata', fixture_path, database='other', verbosity=0)\n+\n+        # Fetch the object from the 'other' database and assert it loaded correctly.\n+        obj = NaturalKeyWithFKDependency.objects.using('other').get()\n+        self.assertEqual(obj.name, \"The Lord of the Rings\")\n+        self.assertEqual(obj.author.name, \"J.R.R. Tolkien\")\n+\n+import os\n+from django.core import management\n+from django.test import TestCase\n+from fixtures_regress.models import Person, NaturalKeyWithFKDependency\n+\n class M2MNaturalKeyFixtureTests(TestCase):\n     \"\"\"Tests for ticket #14426.\"\"\"\n \n",
  "django__django-15561": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex b8137da..dc33618 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -3961,6 +3961,49 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             editor.alter_field(Book, new_field, old_field, strict=True)\n \n+    def test_alter_field_choices_noop(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        old_field = Author._meta.get_field(\"name\")\n+        new_field = CharField(\n+            choices=((\"Jane\", \"Jane\"), (\"Joe\", \"Joe\")),\n+            max_length=255,\n+        )\n+        new_field.set_attributes_from_name(\"name\")\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, new_field, old_field, strict=True)\n+\n+    def test_alter_field_additional_noop_cases(self):\n+        # Test changing choices on a different field type\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        old_field = Author._meta.get_field(\"age\")\n+        new_field = IntegerField(\n+            choices=((1, \"One\"), (2, \"Two\")),\n+            default=1,\n+        )\n+        new_field.set_attributes_from_name(\"age\")\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, new_field, old_field, strict=True)\n+\n+    def test_alter_field_noop_for_non_choice_changes(self):\n+        # Ensure that changing choices is the only no-op and other changes generate SQL\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        old_field = Author._meta.get_field(\"name\")\n+        new_field = CharField(\n+            max_length=500,  # Change the max_length\n+        )\n+        new_field.set_attributes_from_name(\"name\")\n+        with connection.schema_editor() as editor:\n+            with self.assertRaises(AssertionError):\n+                with self.assertNumQueries(0):\n+                    editor.alter_field(Author, old_field, new_field, strict=True)\n+\n     def test_add_textfield_unhashable_default(self):\n         # Create the table\n         with connection.schema_editor() as editor:\n",
  "django__django-15569": "",
  "django__django-15572": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 188dca4..c055a6f 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -75,6 +75,34 @@ class TemplateReloadTests(SimpleTestCase):\n                 ROOT / \"templates\",\n             },\n         )\n+    \n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"DIRS\": [\"\", \"\", str(ROOT) + \"/valid_path\"],\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            }\n+        ]\n+    )\n+    def test_template_dirs_with_multiple_empty_paths(self):\n+        self.assertSetEqual(\n+            autoreload.get_template_directories(),\n+            {Path(str(ROOT) + \"/valid_path\")}\n+        )\n+\n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"DIRS\": [\"\", \"another/valid_path\", \"\"],\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            }\n+        ]\n+    )\n+    def test_template_dirs_mixed_empty_and_valid_paths(self):\n+        self.assertSetEqual(\n+            autoreload.get_template_directories(),\n+            {Path.cwd() / \"another/valid_path\"}\n+        )\n \n     @mock.patch(\"django.template.loaders.base.Loader.reset\")\n     def test_reset_all_loaders(self, mock_reset):\n",
  "django__django-15731": "diff --git a/tests/basic/tests.py b/tests/basic/tests.py\nindex 902f114..6505382 100644\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -1,3 +1,4 @@\n+\n import threading\n from datetime import datetime, timedelta\n from unittest import mock\n@@ -6,6 +7,7 @@ from django.core.exceptions import MultipleObjectsReturned, ObjectDoesNotExist\n from django.db import DEFAULT_DB_ALIAS, DatabaseError, connections, models\n from django.db.models.manager import BaseManager\n from django.db.models.query import MAX_GET_RESULTS, EmptyQuerySet\n+import inspect\n from django.test import (\n     SimpleTestCase,\n     TestCase,\n@@ -736,6 +738,29 @@ class ManagerTest(SimpleTestCase):\n             sorted(self.QUERYSET_PROXY_METHODS),\n         )\n \n+    def test_manager_method_signature(self):\n+        # Verify that inspect.signature returns the correct signature for manager methods\n+        self.assertEqual(\n+            str(inspect.signature(Article.objects.bulk_create)),\n+            \"(objs, batch_size=None, ignore_conflicts=False, update_conflicts=False, \"\n+            \"update_fields=None, unique_fields=None)\",\n+        )\n+        self.assertEqual(\n+            str(inspect.signature(Article.objects.get)),\n+            \"(args, **kwargs)\",\n+        )\n+        self.assertEqual(\n+            str(inspect.signature(Article.objects.filter)),\n+            \"(*args, **kwargs)\",\n+        )\n+\n+    def test_manager_method_attributes(self):\n+        # Verify that the method attributes (e.g., __name__, __doc__) are copied correctly\n+        self.assertEqual(Article.objects.get.__doc__, models.QuerySet.get.__doc__)\n+        self.assertEqual(Article.objects.count.__name__, models.QuerySet.count.__name__)\n+        self.assertEqual(Article.objects.bulk_create.__name__, models.QuerySet.bulk_create.__name__)\n+        self.assertEqual(Article.objects.bulk_create.__doc__, models.QuerySet.bulk_create.__doc__)\n+\n \n class SelectOnSaveTests(TestCase):\n     def test_select_on_save(self):\n",
  "django__django-15741": "diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex c6dbc53..b41de84 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -1,8 +1,11 @@\n+\n from datetime import datetime, time\n \n from django.template.defaultfilters import date\n from django.test import SimpleTestCase\n from django.utils import timezone, translation\n+from django.utils.translation import gettext_lazy\n+from django.utils.formats import get_format\n \n from ..utils import setup\n from .timezone_utils import TimezoneTestCase\n@@ -74,7 +77,13 @@ class DateTests(TimezoneTestCase):\n \n \n class FunctionTests(SimpleTestCase):\n-    def test_date(self):\n+    def test_get_format_lazy(self):\n+        self.assertEqual(get_format(gettext_lazy(\"DATE_FORMAT\")), \"N j, Y\")\n+        \n+    @setup({\"datelazy\": '{{ t|date:_(\"H:i\") }}'})\n+    def test_date_lazy(self):\n+        output = self.engine.render_to_string(\"datelazy\", {\"t\": time(0, 0)})\n+        self.assertEqual(output, \"00:00\")\n         self.assertEqual(date(datetime(2005, 12, 29), \"d F Y\"), \"29 December 2005\")\n \n     def test_no_args(self):\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..762061d 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -399,7 +399,24 @@ class ProxyModelTests(TestCase):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n \n-@override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n+from django.test import TestCase\n+from .models import CustomModel, ProxyCustomModel, AnotherModel\n+\n+class ProxyModelQuerySetTests(TestCase):\n+    def test_select_related_only_on_proxy(self):\n+        # Create an instance of ProxyCustomModel\n+        custom = ProxyCustomModel.objects.create(name=\"Proxy Name\")\n+        # Create an instance of AnotherModel with a foreign key to the ProxyCustomModel\n+        another_model_instance = AnotherModel.objects.create(custom=custom)\n+        \n+        # Query using select_related and only on the proxy model\n+        queryset = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        \n+        # Fetch the object\n+        obj = queryset.get(id=another_model_instance.id)\n+        \n+        # Assert that the related object's name is as expected\n+        self.assertEqual(obj.custom.name, \"Proxy Name\")\n class ProxyModelAdminTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..8dd32de 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -151,12 +151,26 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ),\n         )\n \n+    def test_additional_parameters_order(self):\n+        # This test checks that additional parameters are passed before the dbname\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1;\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1;\", \"dbname\"], None),\n+        )\n+\n     def test_parameters(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n+    def test_additional_parameters_order(self):\n+        # This test checks that additional parameters are passed before the dbname\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1;\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1;\", \"dbname\"], None),\n+        )\n+\n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n",
  "django__django-15863": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 08f08e1..fbfd6dd 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -31,6 +31,8 @@ class FloatformatTests(SimpleTestCase):\n         self.assertEqual(output, \"1.4 1.4\")\n \n \n+from decimal import Decimal\n+\n class FunctionTests(SimpleTestCase):\n     def test_inputs(self):\n         self.assertEqual(floatformat(7.7), \"7.7\")\n@@ -74,7 +76,31 @@ class FunctionTests(SimpleTestCase):\n         self.assertEqual(floatformat(1.5e-15, -20), \"0.00000000000000150000\")\n         self.assertEqual(floatformat(1.00000000000000015, 16), \"1.0000000000000002\")\n \n-    def test_force_grouping(self):\n+    def test_decimal_precision(self):\n+        # Test with high precision Decimal\n+        self.assertEqual(\n+            floatformat(Decimal(\"123456.123456789012345678901\"), 21),\n+            \"123456.123456789012345678901\"\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.12345678901234567890\"), 20),\n+            \"42.12345678901234567890000\"\n+        )\n+        # Test with Decimal that has no fractional part\n+        self.assertEqual(\n+            floatformat(Decimal(\"123456789012345678901.0\"), 0),\n+            \"123456789012345678901\"\n+        )\n+        # Test with Decimal that rounds to a whole number\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.50000000000000000001\"), 0),\n+            \"43\"\n+        )\n+        # Test with a negative Decimal\n+        self.assertEqual(\n+            floatformat(Decimal(\"-42.12345678901234567890\"), 20),\n+            \"-42.12345678901234567890000\"\n+        )\n         with translation.override(\"en\"):\n             self.assertEqual(floatformat(10000, \"g\"), \"10,000\")\n             self.assertEqual(floatformat(66666.666, \"1g\"), \"66,666.7\")\n",
  "django__django-15930": "diff --git a/tests/expressions_case/tests.py b/tests/expressions_case/tests.py\nindex 696f4d0..141b0b6 100644\n--- a/tests/expressions_case/tests.py\n+++ b/tests/expressions_case/tests.py\n@@ -405,6 +405,16 @@ class CaseExpressionTests(TestCase):\n             [1, 4, 3, 3, 3, 2, 2],\n         )\n \n+    def test_annotate_with_inverse_empty_q(self):\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+            )\n+        )\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n+\n     def test_annotate_with_empty_when(self):\n         objects = CaseTestModel.objects.annotate(\n             selected=Case(\n",
  "django__django-15987": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 5ac9ab9..9480f09 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n # Unittests for fixtures.\n import json\n import os\n@@ -11,6 +12,8 @@ from django.core.serializers.base import DeserializationError\n from django.db import IntegrityError, transaction\n from django.db.models import signals\n from django.test import (\n+    override_settings,\n+    TestCase,\n     TestCase,\n     TransactionTestCase,\n     override_settings,\n@@ -556,7 +559,20 @@ class TestFixtures(TestCase):\n             management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n \n     @override_settings(FIXTURE_DIRS=[os.path.join(_cur_dir, \"fixtures\")])\n-    def test_fixture_dirs_with_default_fixture_path(self):\n+    @override_settings(FIXTURE_DIRS=[Path(_cur_dir) / \"fixtures\"])\n+    def test_fixture_dirs_with_pathlib_default_fixture_path(self):\n+        \"\"\"\n+        settings.FIXTURE_DIRS cannot contain a default fixtures directory\n+        for application (app/fixtures) in order to avoid repeated fixture loading.\n+        This specifically tests with Path instances.\n+        \"\"\"\n+        msg = (\n+            \"'%s' is a default fixture directory for the '%s' app \"\n+            \"and cannot be listed in settings.FIXTURE_DIRS.\"\n+            % (os.path.join(_cur_dir, \"fixtures\"), \"fixtures_regress\")\n+        )\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n         \"\"\"\n         settings.FIXTURE_DIRS cannot contain a default fixtures directory\n         for application (app/fixtures) in order to avoid repeated fixture loading.\n",
  "django__django-16032": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex bcf8df9..8bde150 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -989,7 +989,29 @@ class NonAggregateAnnotationTestCase(TestCase):\n             publisher_books_qs, [{\"name\": \"Sams\"}, {\"name\": \"Morgan Kaufmann\"}]\n         )\n \n-    def test_annotation_exists_aggregate_values_chaining(self):\n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        self.assertCountEqual(\n+            publisher_books_qs,\n+            [\n+                {'name': 'Apress'},\n+                {'name': 'Sams'},\n+                {'name': 'Prentice Hall'},\n+                {'name': 'Morgan Kaufmann'}\n+            ]\n+        )\n         qs = (\n             Book.objects.values(\"publisher\")\n             .annotate(\n",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..c6202be 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2416,7 +2416,7 @@ class CombinedExpressionTests(SimpleTestCase):\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV, Combinable.MOD]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..d3b268b 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib import admin\n@@ -21,7 +22,9 @@ from django.db.models import F, Field, IntegerField\n from django.db.models.functions import Upper\n from django.db.models.lookups import Contains, Exact\n from django.template import Context, Template, TemplateSyntaxError\n-from django.test import TestCase, override_settings\n+from unittest import mock\n+from django.db import DatabaseError, connection, models\n+from django.test import TestCase, override_settings, skipUnlessDBFeature\n from django.test.client import RequestFactory\n from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup\n from django.urls import reverse\n@@ -400,6 +403,53 @@ class ChangeListTests(TestCase):\n         with self.assertRaises(IncorrectLookupParameters):\n             m.get_changelist_instance(request)\n \n+    @skipUnlessDBFeature(\"supports_transactions\")\n+    def test_list_editable_atomicity(self):\n+        a = Swallow.objects.create(origin=\"Swallow A\", load=4, speed=1)\n+        b = Swallow.objects.create(origin=\"Swallow B\", load=2, speed=2)\n+\n+        self.client.force_login(self.superuser)\n+        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n+        data = {\n+            \"form-TOTAL_FORMS\": \"2\",\n+            \"form-INITIAL_FORMS\": \"2\",\n+            \"form-MIN_NUM_FORMS\": \"0\",\n+            \"form-MAX_NUM_FORMS\": \"1000\",\n+            \"form-0-uuid\": str(a.pk),\n+            \"form-1-uuid\": str(b.pk),\n+            \"form-0-load\": \"9.0\",\n+            \"form-0-speed\": \"3.0\",\n+            \"form-1-load\": \"5.0\",\n+            \"form-1-speed\": \"1.0\",\n+            \"_save\": \"Save\",\n+        }\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\", side_effect=DatabaseError\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Original values are preserved.\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\",\n+            side_effect=[None, DatabaseError],\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Original values are preserved.\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+\n     def test_custom_paginator(self):\n         new_parent = Parent.objects.create(name=\"parent\")\n         for i in range(1, 201):\n",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..5ba81c9 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2400,7 +2400,15 @@ class MakeMigrationsTests(MigrationTestBase):\n         ):\n             call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n \n-    def test_makemigrations_migration_path_output(self):\n+    def test_makemigrations_check_no_migrations_created(self):\n+        \"\"\"\n+        makemigrations --check should not create any migration files.\n+        \"\"\"\n+        with self.temporary_migration_module() as tmpdir:\n+            with self.assertRaises(SystemExit):\n+                call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+            # Ensure no migration files are created\n+            self.assertFalse(os.path.exists(tmpdir))\n         \"\"\"\n         makemigrations should print the relative paths to the migrations unless\n         they are outside of the current tree, in which case the absolute path\n",
  "django__django-16136": "diff --git a/tests/async/tests.py b/tests/async/tests.py\nindex 72e103e..a2e556f 100644\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -1,3 +1,4 @@\n+\n import asyncio\n import os\n from unittest import mock\n@@ -6,8 +7,9 @@ from asgiref.sync import async_to_sync\n \n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n-from django.http import HttpResponse\n-from django.test import SimpleTestCase\n+from django.http import HttpResponse, HttpResponseNotAllowed\n+import asyncio\n+from django.test import SimpleTestCase, RequestFactory\n from django.utils.asyncio import async_unsafe\n from django.views.generic.base import View\n \n@@ -119,7 +121,24 @@ class ViewTests(SimpleTestCase):\n \n                 self.assertIsInstance(response, HttpResponse)\n \n-    def test_base_view_class_is_sync(self):\n+    def test_http_method_not_allowed_for_async_view(self):\n+        \"\"\"\n+        Test that an async view correctly handles a GET request with HttpResponseNotAllowed.\n+        \"\"\"\n+        class AsyncDemoView(View):\n+            async def post(self, request):\n+                return HttpResponse(\"ok\")\n+\n+        request_factory = RequestFactory()\n+        request = request_factory.get(\"/demo\")\n+\n+        view = AsyncDemoView.as_view()\n+        response = view(request)\n+\n+        if asyncio.iscoroutine(response):\n+            response = asyncio.run(response)\n+\n+        self.assertIsInstance(response, HttpResponseNotAllowed)\n         \"\"\"\n         View and by extension any subclasses that don't define handlers are\n         sync.\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..aff634f 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,4 +1,6 @@\n-import datetime\n+\n+import urllib.parse\n+from django.urls import reverse\n import re\n from unittest import mock\n \n@@ -881,7 +883,25 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         form = UserChangeForm(instance=user, data=post_data)\n \n         self.assertTrue(form.is_valid())\n-        # original hashed password contains $\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n         self.assertIn(\"$\", form.cleaned_data[\"password\"])\n \n     def test_bug_19349_bound_password_field(self):\n",
  "django__django-16145": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex 04d2f0e..aaf88df 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1600,7 +1600,20 @@ class ManageRunserver(SimpleTestCase):\n             \"2001:0db8:1234:5678::9\", \"7000\", ipv6=True, raw_ipv6=True\n         )\n \n-    def test_runner_hostname(self):\n+    def test_runserver_zero_ip_addr(self):\n+        \"\"\"Test that running the server with address '0:8000' outputs 'http://0.0.0.0:8000/'.\"\"\"\n+        output = StringIO()\n+        call_command(\n+            self.cmd,\n+            addrport=\"0:8000\",\n+            use_reloader=False,\n+            skip_checks=True,\n+            stdout=output,\n+        )\n+        self.assertIn(\n+            \"Starting development server at http://0.0.0.0:8000/\",\n+            output.getvalue(),\n+        )\n         call_command(self.cmd, addrport=\"localhost:8000\")\n         self.assertServerSettings(\"localhost\", \"8000\")\n \n",
  "django__django-16255": "",
  "django__django-16315": "",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..e91a3f2 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n import urllib.parse\n@@ -34,6 +35,7 @@ from .models.custom_user import (\n     ExtensionUser,\n )\n from .models.with_custom_email_field import CustomEmailField\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n from .models.with_integer_username import IntegerUsernameUser\n from .settings import AUTH_TEMPLATES\n \n@@ -252,6 +254,25 @@ class UserCreationFormTest(TestDataMixin, TestCase):\n         form = CustomUserCreationForm(data)\n         self.assertTrue(form.is_valid())\n \n+    def test_custom_form_saves_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization = Organization.objects.create(name=\"organization 1\")\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization])\n+\n     def test_password_whitespace_not_stripped(self):\n         data = {\n             \"username\": \"testuser\",\n",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..861b933 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.test import TestCase\n@@ -160,7 +161,26 @@ class TimesinceTests(TestCase):\n         self.assertEqual(timesince(t + self.oneday, now), \"0\\xa0minutes\")\n         self.assertEqual(timeuntil(t - self.oneday, now), \"0\\xa0minutes\")\n \n-    def test_naive_datetime_with_tzinfo_attribute(self):\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_exactly_one_month_with_tz(self):\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=30)  # Assuming 30 days as exactly one month\n+        self.assertEqual(timesince(d), \"1\\xa0month\")\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_multiple_months_with_tz(self):\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=62)  # Approximately 2 months\n+        self.assertEqual(timesince(d), \"2\\xa0months\")\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_timezone_aware_datetime(self):\n+        now = timezone.now()\n+        past = datetime.datetime(2022, 1, 1, tzinfo=timezone.utc)\n+        self.assertTrue(timesince(past))\n         class naive(datetime.tzinfo):\n             def utcoffset(self, dt):\n                 return None\n",
  "django__django-16454": "",
  "django__django-16485": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 1623d39..3cbd2c1 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -104,6 +104,11 @@ class FunctionTests(SimpleTestCase):\n             # Invalid suffix.\n             self.assertEqual(floatformat(66666.666, \"u2\"), \"66666.666\")\n \n+    def test_floatformat_zero_decimal(self):\n+        # Test cases specifically for the reported issue with '0.00'.\n+        self.assertEqual(floatformat(\"0.00\", 0), \"0\")\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), 0), \"0\")\n+\n     def test_zero_values(self):\n         self.assertEqual(floatformat(0, 6), \"0.000000\")\n         self.assertEqual(floatformat(0, 7), \"0.0000000\")\n",
  "django__django-16493": "",
  "django__django-16527": "",
  "django__django-16560": "",
  "django__django-16569": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 55da562..c6bba87 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1476,6 +1476,18 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertNotIn(\"DELETE\", formset.forms[1].fields)\n \n         formset = ChoiceFormFormset(initial=[{\"choice\": \"Zero\", \"votes\": \"1\"}])\n+\n+        # Test case for the issue where index is None\n+        class MyForm(forms.Form):\n+            my_field = forms.CharField()\n+\n+        MyFormSet = forms.formset_factory(\n+            form=MyForm,\n+            can_delete=True,\n+            can_delete_extra=False,\n+        )\n+        my_formset = MyFormSet(initial=None)\n+        self.assertNotIn(\"DELETE\", my_formset.empty_form.fields)\n         self.assertEqual(len(formset), 3)\n         self.assertIn(\"DELETE\", formset.forms[0].fields)\n         self.assertNotIn(\"DELETE\", formset.forms[1].fields)\n",
  "django__django-16595": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3979e76..f8ce669 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -43,6 +43,43 @@ class OptimizerTests(SimpleTestCase):\n     def assertDoesNotOptimize(self, operations, **kwargs):\n         self.assertOptimizesTo(operations, operations, **kwargs)\n \n+    def test_alter_alter_field(self):\n+        \"\"\"\n+        Test that multiple AlterField operations on the same field\n+        reduce to the final AlterField operation.\n+        \"\"\"\n+        operations = [\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=256, null=True),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\"),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+            ),\n+        ]\n+        # Only the last AlterField should remain after optimization.\n+        expected = [\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+            ),\n+        ]\n+        self.assertOptimizesTo(operations, expected)\n+\n     def test_none_app_label(self):\n         optimizer = MigrationOptimizer()\n         with self.assertRaisesMessage(TypeError, \"app_label must be a str\"):\n",
  "django__django-16612": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 9120571..c5343d8 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -8456,15 +8456,486 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             email=\"staff@example.com\",\n             is_staff=True,\n         )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article\"\n+            \"%3Fid%3D1\",\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_without_final_catch_all_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin10:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response, known_url, status_code=301, target_status_code=403\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article\"\n+            \"%3Fid%3D1\",\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_without_final_catch_all_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin10:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article\"\n+            \"%3Fid%3D1\",\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_without_final_catch_all_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin10:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            \"/prefix\" + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article\"\n+            \"%3Fid%3D1\",\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_without_final_catch_all_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin10:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME=\"/prefix/\")\n+    def test_missing_slash_append_slash_true_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article\"\n+            \"%3Fid%3D1\",\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_without_final_catch_all_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin10:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/prefix\" + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin:admin_views_article_changelist\")\n-        response = self.client.get(known_url[:-1])\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n         self.assertRedirects(\n-            response, known_url, status_code=301, target_status_code=403\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n         )\n \n     @override_settings(APPEND_SLASH=True)\n-    def test_missing_slash_append_slash_true_script_name(self):\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article\"\n+            \"%3Fid%3D1\",\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_without_final_catch_all_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin10:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_non_staff_user(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_string(self):\n         superuser = User.objects.create_user(\n             username=\"staff\",\n             password=\"secret\",\n@@ -8473,16 +8944,16 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         )\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin:admin_views_article_changelist\")\n-        response = self.client.get(known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n         self.assertRedirects(\n             response,\n-            \"/prefix\" + known_url,\n+            f\"{known_url}?id=1\",\n             status_code=301,\n             fetch_redirect_response=False,\n         )\n \n-    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME=\"/prefix/\")\n-    def test_missing_slash_append_slash_true_force_script_name(self):\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n         superuser = User.objects.create_user(\n             username=\"staff\",\n             password=\"secret\",\n@@ -8491,16 +8962,16 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         )\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin:admin_views_article_changelist\")\n-        response = self.client.get(known_url[:-1])\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n         self.assertRedirects(\n             response,\n-            \"/prefix\" + known_url,\n+            f\"/prefix{known_url}?id=1\",\n             status_code=301,\n             fetch_redirect_response=False,\n         )\n \n     @override_settings(APPEND_SLASH=True)\n-    def test_missing_slash_append_slash_true_non_staff_user(self):\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n         user = User.objects.create_user(\n             username=\"user\",\n             password=\"secret\",\n@@ -8509,6 +8980,32 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         )\n         self.client.force_login(user)\n         known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article\"\n+            \"%3Fid%3D1\",\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_without_final_catch_all_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin10:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1])\n         self.assertRedirects(\n             response,\n@@ -8622,6 +9119,77 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             email=\"staff@example.com\",\n             is_staff=True,\n         )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article\"\n+            \"%3Fid%3D1\",\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_without_final_catch_all_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin10:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin10:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1])\n@@ -8629,6 +9197,77 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             response, known_url, status_code=301, target_status_code=403\n         )\n \n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article\"\n+            \"%3Fid%3D1\",\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_without_final_catch_all_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin10:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n     @override_settings(APPEND_SLASH=False)\n     def test_missing_slash_append_slash_false_without_final_catch_all_view(self):\n         superuser = User.objects.create_user(\n@@ -8637,6 +9276,77 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             email=\"staff@example.com\",\n             is_staff=True,\n         )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article\"\n+            \"%3Fid%3D1\",\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_without_final_catch_all_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin10:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin10:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1])\n",
  "django__django-16642": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 499356e..5a3220c 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -255,6 +255,8 @@ class FileResponseTests(SimpleTestCase):\n             (\".tar.gz\", \"application/gzip\"),\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n+            (\".tar.br\", \"application/x-brotli\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n         )\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n",
  "django__django-16661": "diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py\nindex 8cb88da..c931696 100644\n--- a/tests/modeladmin/tests.py\n+++ b/tests/modeladmin/tests.py\n@@ -144,6 +144,35 @@ class ModelAdminTests(TestCase):\n                 \"employee__department__code\",\n             ]\n \n+    @isolate_apps('modeladmin')\n+    def test_lookup_allowed_foreign_primary(self):\n+        class Country(models.Model):\n+            name = models.CharField(max_length=256)\n+        class Place(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+        class Restaurant(models.Model):\n+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)\n+        class Waiter(models.Model):\n+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n+        class WaiterAdmin(ModelAdmin):\n+            list_filter = [\n+                \"restaurant__place__country\",\n+                \"restaurant__place__country__name\",\n+            ]\n+        ma = WaiterAdmin(Waiter, self.site)\n+        # Test for verifying correct lookup_allowed functionality\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country\", \"1\"), True)\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country__id__exact\", \"1\"), True)\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country__name\", \"test_value\"), True)\n+\n+        # Additional test cases for thorough coverage\n+        # Check a deeper lookup to ensure all nested lookups are allowed\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country__name__iexact\", \"test_value\"), True)\n+        # Check if a non-existent lookup raises an issue\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__non_existent_field\", \"test_value\"), False)\n+        # Ensure a valid but not listed filter raises no issues\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country__name__startswith\", \"test_value\"), True)\n+\n         ma = EmployeeProfileAdmin(EmployeeProfile, self.site)\n         # Reverse OneToOneField\n         self.assertIs(\n",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..0c724a5 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -922,7 +922,28 @@ class WriterTests(SimpleTestCase):\n             output,\n         )\n \n-    def test_migration_file_header_comments(self):\n+    def test_import_ordering(self):\n+        \"\"\"\n+        Test that the import ordering follows the specified style and isort defaults.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield\",\n+                        models.FloatField(default=time.time),\n+                    ),\n+                ]\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        \n+        # Ensure that 'import datetime' and 'import time' come before 'from django.db...'\n+        self.assertIn(\"import datetime\\nimport time\\nfrom django.db import migrations, models\\n\", output)\n         \"\"\"\n         Test comments at top of file.\n         \"\"\"\n",
  "django__django-16801": "diff --git a/tests/model_fields/test_imagefield.py b/tests/model_fields/test_imagefield.py\nindex 9bf7f7d..9a9ef2a 100644\n--- a/tests/model_fields/test_imagefield.py\n+++ b/tests/model_fields/test_imagefield.py\n@@ -328,6 +328,29 @@ class ImageFieldNoDimensionsTests(ImageFieldTwoDimensionsTests):\n \n     PersonModel = Person\n \n+    def test_post_init_not_connected(self):\n+        person_model_id = id(self.PersonModel)\n+        self.assertNotIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id) in signals.post_init.receivers],\n+        )\n+\n+\n+@skipIf(Image is None, \"Pillow is required to test ImageField\")\n+class ImageFieldWithDimensionsTests(ImageFieldTwoDimensionsTests):\n+    \"\"\"\n+    Tests behavior of an ImageField with both dimension fields.\n+    \"\"\"\n+\n+    PersonModel = PersonWithDimensions\n+\n+    def test_post_init_connected(self):\n+        person_model_id = id(self.PersonModel)\n+        self.assertIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id) in signals.post_init.receivers],\n+        )\n+\n \n @skipIf(Image is None, \"Pillow is required to test ImageField\")\n class ImageFieldOneDimensionTests(ImageFieldTwoDimensionsTests):\n",
  "django__django-16819": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex ac93153..5e07e98 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -1157,4 +1157,46 @@ class OptimizerTests(SimpleTestCase):\n                     \"Pony\", new_name=\"new_name\", old_fields=(\"weight\", \"pink\")\n                 ),\n             ]\n-        )\n+        )\n+\n+    def test_add_remove_index_multiple(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"weight\", \"pink\"], name=\"idx_pony_weight_pink\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_weight_pink\"),\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"height\", \"blue\"], name=\"idx_pony_height_blue\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_height_blue\"),\n+            ],\n+            [],\n+        )\n+\n+    def test_add_remove_index_interleaved(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"weight\", \"pink\"], name=\"idx_pony_weight_pink\"\n+                    ),\n+                ),\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"height\", \"blue\"], name=\"idx_pony_height_blue\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_weight_pink\"),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_height_blue\"),\n+            ],\n+            [],\n+        )\n",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..b8ee3b1 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -790,8 +790,36 @@ class SystemChecksTestCase(SimpleTestCase):\n \n         errors = SongAdmin(Song, AdminSite()).check()\n         self.assertEqual(errors, [])\n+    def test_readonly_field_name_included(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            readonly_fields = (\"title\", \"nonexistent\")\n+        \n+        errors = SongAdmin(Song, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[1]' refers to 'nonexistent', \"\n+                \"which is not a callable, an attribute of 'SongAdmin', or an attribute of 'admin_checks.Song'.\",\n+                obj=SongAdmin,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n+\n+    def test_readonly_field_name_included_on_inline(self):\n+        class CityInline(admin.TabularInline):\n+            model = City\n+            readonly_fields = [\"i_dont_exist\"]  # Missing attribute\n \n-    def test_nonexistent_field(self):\n+        errors = CityInline(State, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' refers to 'i_dont_exist', \"\n+                \"which is not a callable, an attribute of 'CityInline', or an attribute of 'admin_checks.City'.\",\n+                obj=CityInline,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n         class SongAdmin(admin.ModelAdmin):\n             readonly_fields = (\"title\", \"nonexistent\")\n \n",
  "django__django-16901": "diff --git a/tests/xor_lookups/tests.py b/tests/xor_lookups/tests.py\nindex 389d908..1ae0443 100644\n--- a/tests/xor_lookups/tests.py\n+++ b/tests/xor_lookups/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import Q\n from django.test import TestCase\n \n@@ -60,8 +61,22 @@ class XorLookupsTests(TestCase):\n             self.numbers[:2],\n         )\n \n-    def test_empty_in(self):\n+    def test_xor_parity(self):\n+        # Testing the parity behavior of XOR with odd and even number of conditions.\n+        # An odd number of true conditions should return true, even should return false.\n+        self.assertCountEqual(\n+            Number.objects.filter(\n+                Q(num__gte=1) ^ Q(num__gte=3) ^ Q(num__gte=5) ^ Q(num__gte=7) ^ Q(num__gte=9)\n+            ),\n+            self.numbers[1:3] + self.numbers[5:7] + self.numbers[9:],\n+        )\n+        self.assertCountEqual(\n+            Number.objects.filter(\n+                Q(num__gte=1) ^ Q(num__gte=3) ^ Q(num__gte=5) ^ Q(num__gte=7)\n+            ),\n+            self.numbers[1:3] + self.numbers[5:7],\n+        )\n         self.assertCountEqual(\n             Number.objects.filter(Q(pk__in=[]) ^ Q(num__gte=5)),\n             self.numbers[5:],\n-        )\n+        )\n",
  "django__django-17029": "diff --git a/tests/apps/tests.py b/tests/apps/tests.py\nindex f7c2c67..cd927a1 100644\n--- a/tests/apps/tests.py\n+++ b/tests/apps/tests.py\n@@ -24,6 +24,9 @@ SOME_INSTALLED_APPS = [\n     \"django.contrib.staticfiles\",\n ]\n \n+from django.test import override_settings\n+from django.apps import apps\n+\n SOME_INSTALLED_APPS_NAMES = [\n     \"django.contrib.admin\",\n     \"django.contrib.auth\",\n@@ -139,6 +142,20 @@ class AppsTests(SimpleTestCase):\n         self.assertIsInstance(config, TwoConfig)\n \n     @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n+    def test_clear_cache(self):\n+        \"\"\"\n+        Ensure apps.clear_cache() clears the cache for get_swappable_settings_name.\n+        \"\"\"\n+        # Set cache by calling the function\n+        self.assertIsNone(apps.get_swappable_settings_name(\"admin.LogEntry\"))\n+        apps.get_models()\n+\n+        # Clear the cache\n+        apps.clear_cache()\n+\n+        # Check that the cache size is zero\n+        self.assertEqual(apps.get_swappable_settings_name.cache_info().currsize, 0)\n+        self.assertEqual(apps.get_models.cache_info().currsize, 0)\n     def test_get_app_configs(self):\n         \"\"\"\n         Tests apps.get_app_configs().\n@@ -149,6 +166,20 @@ class AppsTests(SimpleTestCase):\n         )\n \n     @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n+    def test_clear_cache(self):\n+        \"\"\"\n+        Ensure apps.clear_cache() clears the cache for get_swappable_settings_name.\n+        \"\"\"\n+        # Set cache by calling the function\n+        self.assertIsNone(apps.get_swappable_settings_name(\"admin.LogEntry\"))\n+        apps.get_models()\n+\n+        # Clear the cache\n+        apps.clear_cache()\n+\n+        # Check that the cache size is zero\n+        self.assertEqual(apps.get_swappable_settings_name.cache_info().currsize, 0)\n+        self.assertEqual(apps.get_models.cache_info().currsize, 0)\n     def test_get_app_config(self):\n         \"\"\"\n         Tests apps.get_app_config().\n@@ -167,6 +198,20 @@ class AppsTests(SimpleTestCase):\n             apps.get_app_config(\"django.contrib.auth\")\n \n     @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n+    def test_clear_cache(self):\n+        \"\"\"\n+        Ensure apps.clear_cache() clears the cache for get_swappable_settings_name.\n+        \"\"\"\n+        # Set cache by calling the function\n+        self.assertIsNone(apps.get_swappable_settings_name(\"admin.LogEntry\"))\n+        apps.get_models()\n+\n+        # Clear the cache\n+        apps.clear_cache()\n+\n+        # Check that the cache size is zero\n+        self.assertEqual(apps.get_swappable_settings_name.cache_info().currsize, 0)\n+        self.assertEqual(apps.get_models.cache_info().currsize, 0)\n     def test_is_installed(self):\n         \"\"\"\n         Tests apps.is_installed().\n@@ -177,6 +222,20 @@ class AppsTests(SimpleTestCase):\n         self.assertIs(apps.is_installed(\"django.contrib.admindocs\"), False)\n \n     @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n+    def test_clear_cache(self):\n+        \"\"\"\n+        Ensure apps.clear_cache() clears the cache for get_swappable_settings_name.\n+        \"\"\"\n+        # Set cache by calling the function\n+        self.assertIsNone(apps.get_swappable_settings_name(\"admin.LogEntry\"))\n+        apps.get_models()\n+\n+        # Clear the cache\n+        apps.clear_cache()\n+\n+        # Check that the cache size is zero\n+        self.assertEqual(apps.get_swappable_settings_name.cache_info().currsize, 0)\n+        self.assertEqual(apps.get_models.cache_info().currsize, 0)\n     def test_get_model(self):\n         \"\"\"\n         Tests apps.get_model().\n",
  "django__django-17084": "",
  "django__django-17087": "",
  "django__django-7530": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex a74680b..0f5318f 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -641,6 +641,28 @@ class MakeMigrationsTests(MigrationTestBase):\n                 allow_migrate.assert_called_with('other', 'migrations', model_name='UnicodeModel')\n                 self.assertEqual(ensure_schema.call_count, 4)\n \n+    def test_correct_allow_migrate_calls_per_app(self):\n+        \"\"\"\n+        Test that makemigrations calls router.allow_migrate() with correct app_label and model_name pairs.\n+        \"\"\"\n+        apps.register_model('migrations', UnicodeModel)\n+\n+        with self.settings(DATABASE_ROUTERS=['migrations.routers.TestRouter']):\n+            with mock.patch.object(TestRouter, 'allow_migrate', return_value=True) as allow_migrate:\n+                with self.temporary_migration_module() as migration_dir:\n+                    call_command('makemigrations', 'migrations', verbosity=0)\n+                    \n+                    # Ensure allow_migrate was called with valid app_label, model_name pairs for 'migrations' app.\n+                    allow_migrate.assert_any_call('default', 'migrations', model_name='UnicodeModel')\n+                    allow_migrate.assert_any_call('other', 'migrations', model_name='UnicodeModel')\n+\n+                    # There should not be any calls with invalid combinations\n+                    for call_args in allow_migrate.call_args_list:\n+                        connection_alias, app_label, kwargs = call_args[0][0], call_args[0][1], call_args[1]\n+                        model_name = kwargs.get('model_name')\n+                        self.assertIn(app_label, ['migrations', 'migrations2'])\n+                        apps.get_app_config(app_label).get_model(model_name)\n+\n     def test_failing_migration(self):\n         # If a migration fails to serialize, it shouldn't generate an empty file. #21280\n         apps.register_model('migrations', UnserializableModel)\n",
  "django__django-9296": "diff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\nindex b9b5fbc..61b3ba5 100644\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -298,7 +298,36 @@ class PaginationTests(SimpleTestCase):\n             paginator.get_page(1)\n \n \n-class ModelPaginationTests(TestCase):\n+class PaginatorIterationTests(TestCase):\n+    \n+    def test_paginator_iteration(self):\n+        paginator = Paginator([1, 2, 3], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2], [3]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+\n+    def test_empty_paginator_iteration(self):\n+        paginator = Paginator([], 2)\n+        page_iterator = iter(paginator)\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_large_paginator_iteration(self):\n+        paginator = Paginator(range(1, 101), 10)\n+        page_iterator = iter(paginator)\n+        for page in range(1, 11):\n+            expected = list(range((page - 1) * 10 + 1, page * 10 + 1))\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+\n+    def test_iteration_exhaustion(self):\n+        paginator = Paginator([1, 2, 3, 4, 5], 2)\n+        page_iterator = iter(paginator)\n+        for _ in paginator:\n+            pass\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n     \"\"\"\n     Test pagination with Django model instances\n     \"\"\"\n",
  "matplotlib__matplotlib-13989": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5483eef..e4d309b 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6359,8 +6359,32 @@ def test_hist_auto_bins():\n \n def test_hist_nan_data():\n     fig, (ax1, ax2) = plt.subplots(2)\n+import numpy as np\n+import matplotlib.pyplot as plt\n \n-    data = [1, 2, 3]\n+def test_hist_range_and_density():\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_density_auto_bins():\n+    _, bins, _ = plt.hist(np.random.rand(1000), 'auto', range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_density_custom_bins():\n+    _, bins, _ = plt.hist(np.random.rand(1000), bins=100, range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_no_range_density():\n+    _, bins, _ = plt.hist(np.random.rand(1000), bins=100, density=True)\n+    assert bins[0] != 0 or bins[-1] != 1  # no range specified, bins are based on data range\n+\n+def test_hist_range_no_density():\n+    _, bins, _ = plt.hist(np.random.rand(1000), bins=100, range=(0, 1), density=False)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n     nan_data = data + [np.nan]\n \n     bins, edges, _ = ax1.hist(data)\n@@ -6368,4 +6392,4 @@ def test_hist_nan_data():\n         nanbins, nanedges, _ = ax2.hist(nan_data)\n \n     assert np.allclose(bins, nanbins)\n-    assert np.allclose(edges, nanedges)\n+    assert np.allclose(edges, nanedges)\n",
  "matplotlib__matplotlib-14623": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c9ad946..c74a06b 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -919,6 +919,41 @@ def test_hexbin_log():\n \n \n def test_inverted_limits():\n+    # Test inverting nonlinear axes using set_ylim.\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(10, 1)\n+    assert ax.get_ylim() == (10, 1)\n+    plt.close()\n+\n+    # Additional test case: inverting y-axis after plotting data on log scale.\n+    x = np.logspace(0, 2, 100)\n+    y = np.linspace(1e-1, 1e1, 100)\n+    fig, ax = plt.subplots()\n+    ax.plot(x, y)\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(y.max(), y.min())\n+    assert ax.get_ylim() == (10, 0.1)\n+    plt.close()\n+\n+    # Test inverting x-axis on log scale.\n+    fig, ax = plt.subplots()\n+    ax.plot(x, y)\n+    ax.set_xscale(\"log\")\n+    ax.set_xlim(x.max(), x.min())\n+    assert ax.get_xlim() == (100.0, 1.0)\n+    plt.close()\n+\n+    # Test inverting both axes on log scale.\n+    fig, ax = plt.subplots()\n+    ax.plot(x, y)\n+    ax.set_xscale(\"log\")\n+    ax.set_yscale(\"log\")\n+    ax.set_xlim(x.max(), x.min())\n+    ax.set_ylim(y.max(), y.min())\n+    assert ax.get_xlim() == (100.0, 1.0)\n+    assert ax.get_ylim() == (10.0, 0.1)\n+    plt.close()\n     # Test gh:1553\n     # Calling invert_xaxis prior to plotting should not disable autoscaling\n     # while still maintaining the inverted direction\n",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..783a985 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6961,6 +6961,34 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n \n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear(fig_test, fig_ref):\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    \n+    x = np.arange(0.0, 2 * np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    # Reference figure without clearing axes\n+    axs_ref = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_ref.flat:\n+        ax.plot(x, y)\n+\n+    # Test figure with clearing axes\n+    axs_test = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_test.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n+\n+    # Check all axes in fig_test to ensure only the required tick labels are visible\n+    assert all(ax.get_xticklabels()[0].get_visible() == False for ax in axs_test[1:, :].flat)  # Only the bottom row should have visible xticklabels\n+    assert all(ax.get_yticklabels()[0].get_visible() == False for ax in axs_test[:, 1:].flat)  # Only the first column should have visible yticklabels\n+\n+    # Additional tests can be added here to ensure that no extra ticks appear on the top/right\n+    for ax in axs_test.flat:\n+        assert len(ax.get_xticks()) <= len(axs_ref[0, 0].get_xticks())  # Ensure no extra ticks on x-axis\n+        assert len(ax.get_yticks()) <= len(axs_ref[0, 0].get_yticks())  # Ensure no extra ticks on y-axis\n+\n def test_shared_axes_retick():\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n \n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "diff --git a/lib/matplotlib/tests/test_category.py b/lib/matplotlib/tests/test_category.py\nindex 40c4dcf..0cd3b80 100644\n--- a/lib/matplotlib/tests/test_category.py\n+++ b/lib/matplotlib/tests/test_category.py\n@@ -306,9 +306,21 @@ def test_overriding_units_in_plot(fig_test, fig_ref):\n         assert x_units is ax.xaxis.units\n         assert y_units is ax.yaxis.units\n \n+import matplotlib.pyplot as plt\n+import pytest\n+\n+def test_no_deprecation_on_empty_data():\n+    \"\"\"\n+    Smoke test to check that no deprecation warning is emitted for empty data with category units.\n+    \"\"\"\n+    f, ax = plt.subplots()\n+    ax.xaxis.update_units([\"a\", \"b\"])\n+    with pytest.warns(None) as record:\n+        ax.plot([], [])\n+    assert not any(item.category == MatplotlibDeprecationWarning for item in record)\n \n def test_hist():\n     fig, ax = plt.subplots()\n     n, bins, patches = ax.hist(['a', 'b', 'a', 'c', 'ff'])\n     assert n.shape == (10,)\n-    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n+    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n",
  "matplotlib__matplotlib-22865": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex 2c28713..79db39d 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -918,8 +918,29 @@ def test_proportional_colorbars():\n                                      extend=extends[i])\n             fig.colorbar(CS3, spacing=spacings[j], ax=axs[i, j])\n \n+import numpy as np\n+import matplotlib as mpl\n+import matplotlib.pyplot as plt\n+from matplotlib.colors import BoundaryNorm, from_levels_and_colors\n+from matplotlib.colorbar import Colorbar\n \n-def test_negative_boundarynorm():\n+def test_colorbar_extend_drawedges_extremities():\n+    cmap = plt.get_cmap(\"viridis\")\n+    bounds = np.arange(10)\n+    nb_colors = len(bounds) + 1\n+    colors = cmap(np.linspace(100, 255, nb_colors).astype(int))\n+    my_cmap, my_norm = from_levels_and_colors(bounds, colors, extend='both')\n+\n+    fig = plt.figure(figsize=(5, 1))\n+    ax = plt.subplot(111)\n+    cbar = Colorbar(ax, cmap=my_cmap, norm=my_norm, orientation='horizontal', drawedges=True)\n+    \n+    # Check if the dividers are present at the extremities.\n+    assert len(cbar.dividers.get_segments()) > 0  # There should be segments present\n+    # Specific expected segments for the test\n+    expected_segments = [np.array([[0., 0.], [0., 1.]]), np.array([[1., 0.], [1., 1.]]), np.array([[2., 0.], [2., 1.]])]\n+    for segment in expected_segments:\n+        assert any(np.array_equal(segment, s) for s in cbar.dividers.get_segments())\n     fig, ax = plt.subplots(figsize=(1, 3))\n     cmap = plt.get_cmap(\"viridis\")\n \n",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..63c5590 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -495,8 +495,23 @@ def test_keymaps():\n     for k in key_list:\n         assert isinstance(mpl.rcParams[k], list)\n \n-\n-def test_rcparams_reset_after_fail():\n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend, rc_context\n+\n+def test_no_backend_reset_rccontext_figures():\n+    # This test ensures that calling `get_backend()` does not clear figures\n+    # created within an `rc_context`.\n+    \n+    with rc_context():\n+        fig = plt.figure()\n+    \n+    before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    get_backend()\n+    after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+\n+    assert before == after, (\n+        f\"Figures were unexpectedly modified: \\nBefore: {before}\\nAfter: {after}\"\n+    )\n     # There was previously a bug that meant that if rc_context failed and\n     # raised an exception due to issues in the supplied rc parameters, the\n     # global rc parameters were left in a modified state.\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..90121b6 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -11,7 +11,8 @@ from matplotlib import colors as mcolors\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n from matplotlib.testing.widgets import mock_event\n from matplotlib.collections import LineCollection, PolyCollection\n-from matplotlib.patches import Circle\n+from matplotlib.testing.decorators import check_figures_equal\n+from mpl_toolkits.mplot3d import Axes3D\n \n import matplotlib.pyplot as plt\n import numpy as np\n@@ -21,7 +22,20 @@ mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n \n-def test_aspect_equal_error():\n+@check_figures_equal(extensions=[\"png\"])\n+def test_3d_set_visible_false(fig_test, fig_ref):\n+    # Create a figure with two subplots, one of which will be invisible\n+    ax1 = fig_test.add_subplot(121, projection='3d')\n+    ax2 = fig_test.add_subplot(122, projection='3d')\n+    ax1.scatter(1, 1, 1)\n+    ax2.scatter(1, 1, 1)\n+\n+    # Make ax1 invisible\n+    ax1.set_visible(False)\n+\n+    # Reference figure with only one visible subplot\n+    ax2_ref = fig_ref.add_subplot(122, projection='3d')\n+    ax2_ref.scatter(1, 1, 1)\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n     with pytest.raises(NotImplementedError):\n",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..6d94c05 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -148,8 +148,25 @@ def test_rotate_rect_draw(fig_test, fig_ref):\n     rect_test.set_angle(angle)\n     assert rect_test.get_angle() == angle\n \n+from matplotlib.testing.decorators import check_figures_equal\n+import matplotlib.pyplot as plt\n+from matplotlib.patches import Rectangle\n+\n+@check_figures_equal(extensions=['png'])\n+def test_dash_offset_patch_rectangle(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n+\n+    # Reference uses Line2D for dashed line with offset for visual comparison\n+    ax_ref.plot([0, 1], [0, 1], linestyle=(0, (10, 10)), color='b', linewidth=4)\n+    ax_ref.plot([0, 1], [0, 1], linestyle=(10, (10, 10)), color='r', linewidth=4)\n+\n+    # Test using Rectangle patches\n+    rect1 = Rectangle((0, 0), 1, 1, linewidth=4, edgecolor='b', linestyle=(0, (10, 10)))\n+    rect2 = Rectangle((0, 0), 1, 1, linewidth=4, edgecolor='r', linestyle=(10, (10, 10)))\n \n-def test_negative_rect():\n+    ax_test.add_patch(rect1)\n+    ax_test.add_patch(rect2)\n     # These two rectangles have the same vertices, but starting from a\n     # different point.  (We also drop the last vertex, which is a duplicate.)\n     pos_vertices = Rectangle((-3, -2), 3, 2).get_verts()[:-1]\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..bf37bb9 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2866,8 +2866,19 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.patches import Rectangle\n+from matplotlib.testing.decorators import image_comparison\n \n-@image_comparison(['stackplot_test_baseline'], remove_text=True)\n+def test_stackplot_with_color_cycler():\n+    # Create a simple stackplot with color cycler references\n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    fig, ax = plt.subplots()\n+    ax.plot([1, 3], [1, 3], color='C0')\n+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))\n+    ax.stackplot([1, 2, 3], my_data, colors=['C2', 'C3', 'C4'])\n+    plt.close(fig)\n def test_stackplot_baseline():\n     np.random.seed(0)\n \n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 45f9c04..f7ec732 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -12,8 +12,11 @@ import matplotlib.lines as mlines\n from matplotlib.backend_bases import MouseButton, MouseEvent\n \n from matplotlib.offsetbox import (\n+    HPacker, VPacker,\n     AnchoredOffsetbox, AnnotationBbox, AnchoredText, DrawingArea, OffsetBox,\n     OffsetImage, TextArea, _get_packed_offsets)\n+import pytest\n+from numpy.testing import assert_allclose\n \n \n @image_comparison(['offsetbox_clipping'], remove_text=True)\n@@ -333,5 +336,24 @@ def test_arrowprops_copied():\n     ab = AnnotationBbox(da, [.5, .5], xybox=(-0.2, 0.5), xycoords='data',\n                         boxcoords=\"axes fraction\", box_alignment=(0., .5),\n                         arrowprops=arrowprops)\n+\n+@pytest.mark.parametrize(\"align, expected_y_offset\", [\n+    (\"bottom\", 0),\n+    (\"top\", 10),\n+    (\"center\", 5)\n+])\n+def test_hpacker_alignments(align, expected_y_offset):\n+    fig = plt.figure(dpi=72)\n+    da1 = DrawingArea(10, 20)\n+    da2 = DrawingArea(10, 30)\n+    pack = HPacker(children=[da1, da2], pad=0, sep=0, align=align)\n+    renderer = fig.canvas.get_renderer()\n+    \n+    extents, offset_pairs = pack.get_extent_offsets(renderer)\n+    \n+    # Check extents (width, height, xdescent, ydescent)\n+    assert_allclose(extents[:2], (20, 30))  # Total width, max height\n+    # Check y-offset based on alignment\n+    assert_allclose(offset_pairs[0][1], expected_y_offset)\n     assert ab.arrowprops is not ab\n     assert arrowprops[\"relpos\"] == (.3, .7)\n",
  "matplotlib__matplotlib-24627": "",
  "matplotlib__matplotlib-24637": "diff --git a/lib/matplotlib/tests/test_backend_svg.py b/lib/matplotlib/tests/test_backend_svg.py\nindex 8817464..c985cb6 100644\n--- a/lib/matplotlib/tests/test_backend_svg.py\n+++ b/lib/matplotlib/tests/test_backend_svg.py\n@@ -576,7 +576,88 @@ def test_svg_font_string(font_str, include_generic):\n         rest = rest + [generic]\n     plt.rcParams[f\"font.{generic}\"] = rest\n     plt.rcParams[\"font.size\"] = size\n-    plt.rcParams[\"svg.fonttype\"] = \"none\"\n+from io import BytesIO\n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.offsetbox import (OffsetImage, AnnotationBbox)\n+\n+def test_annotationbbox_gid():\n+    # Test that object gid appears in the AnnotationBbox in output svg.\n+    fig = plt.figure()\n+    ax = fig.add_subplot()\n+    arr_img = np.ones((32, 32))\n+    xy = (0.3, 0.55)\n+\n+    imagebox = OffsetImage(arr_img, zoom=0.1)\n+    imagebox.image.axes = ax\n+\n+    ab = AnnotationBbox(imagebox, xy,\n+                        xybox=(120., -80.),\n+                        xycoords='data',\n+                        boxcoords=\"offset points\",\n+                        pad=0.5,\n+                        arrowprops=dict(\n+                            arrowstyle=\"->\",\n+                            connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                        )\n+    ab.set_gid(\"a test for issue 20044\")\n+    ax.add_artist(ab)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n+\n+    expected = '<g id=\"a test for issue 20044\">'\n+    assert expected in buf\n+\n+\n+# Additional test case to ensure gid is applied correctly even with multiple\n+# AnnotationBbox instances and various other settings.\n+def test_multiple_annotationbbox_gid():\n+    fig, ax = plt.subplots()\n+    arr_img1 = np.ones((32, 32))\n+    arr_img2 = np.ones((32, 32))\n+    xy1 = (0.2, 0.5)\n+    xy2 = (0.4, 0.7)\n+\n+    imagebox1 = OffsetImage(arr_img1, zoom=0.1)\n+    imagebox1.image.axes = ax\n+\n+    imagebox2 = OffsetImage(arr_img2, zoom=0.1)\n+    imagebox2.image.axes = ax\n+\n+    ab1 = AnnotationBbox(imagebox1, xy1,\n+                         xybox=(110., -70.),\n+                         xycoords='data',\n+                         boxcoords=\"offset points\",\n+                         pad=0.5,\n+                         arrowprops=dict(\n+                             arrowstyle=\"->\",\n+                             connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                         )\n+    ab1.set_gid(\"image1_gid\")\n+    ax.add_artist(ab1)\n+\n+    ab2 = AnnotationBbox(imagebox2, xy2,\n+                         xybox=(130., -90.),\n+                         xycoords='data',\n+                         boxcoords=\"offset points\",\n+                         pad=0.5,\n+                         arrowprops=dict(\n+                             arrowstyle=\"->\",\n+                             connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                         )\n+    ab2.set_gid(\"image2_gid\")\n+    ax.add_artist(ab2)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n+\n+    expected1 = '<g id=\"image1_gid\">'\n+    expected2 = '<g id=\"image2_gid\">'\n+    assert expected1 in buf\n+    assert expected2 in buf\n \n     fig, ax = plt.subplots()\n     if generic == \"sans-serif\":\n",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..d6a2c0a 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -20,6 +20,19 @@ import matplotlib.scale as mscale\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n \n \n+import pytest\n+import numpy as np\n+import matplotlib as mpl\n+from numpy.testing import assert_array_equal, assert_array_almost_equal\n+\n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.float16, float])\n+def test_index_dtype_no_deprecation_warning(dtype):\n+    cm = mpl.colormaps[\"viridis\"]\n+    with pytest.warns(None) as record:\n+        cm(dtype(0))\n+    # Check that no warnings of type DeprecationWarning were raised\n+    assert not any(isinstance(warning.category, DeprecationWarning) for warning in record)\n+\n @pytest.mark.parametrize('N, result', [\n     (5, [1, .6, .2, .1, 0]),\n     (2, [1, 0]),\n",
  "matplotlib__matplotlib-25122": "diff --git a/lib/matplotlib/tests/test_mlab.py b/lib/matplotlib/tests/test_mlab.py\nindex 51d0c35..c0dc7cc 100644\n--- a/lib/matplotlib/tests/test_mlab.py\n+++ b/lib/matplotlib/tests/test_mlab.py\n@@ -669,9 +669,39 @@ class TestSpectral:\n         # these should not be almost equal\n         with pytest.raises(AssertionError):\n             assert_allclose(spec_b, spec_c, atol=1e-08)\n+    def test_psd_window_flattop(self):\n+        # Test for flattop window\n+        from numpy.testing import assert_allclose\n+        import numpy as np\n+        from matplotlib import mlab\n+        from scipy import signal\n \n-    def test_psd_windowarray(self):\n-        freqs = self.freqs_density\n+        # Generate a flattop window\n+        window = signal.windows.flattop(512)\n+\n+        # Generate a sample signal\n+        np.random.seed(0)\n+        x = np.random.randn(1024)\n+\n+        # Compute the PSD using matplotlib's mlab\n+        spec, fsp = mlab.psd(x=x,\n+                             NFFT=512,\n+                             Fs=2,\n+                             noverlap=256,\n+                             window=window,\n+                             scale_by_freq=True)\n+\n+        # Compute the PSD manually, using the correct window correction\n+        pad_to = 512\n+        scaling_factor = 2\n+        spec_manual = np.abs(np.fft.fft(x * window, n=pad_to)) ** 2\n+        spec_manual = spec_manual[:pad_to//2+1]\n+        spec_manual[1:-1] *= scaling_factor\n+        spec_manual /= (window**2).sum()\n+        spec_manual /= 2  # Scale by frequency (Fs=2)\n+\n+        # Assert that the computed PSD matches the manual calculation\n+        assert_allclose(spec, spec_manual, atol=1e-8)\n         spec, fsp = mlab.psd(x=self.y,\n                              NFFT=self.NFFT_density,\n                              Fs=self.Fs,\n",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..b337f80 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,6 +7801,30 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+def test_xaxis_offsetText_color():\n+    plt.rcParams['xtick.labelcolor'] = 'blue'\n+    ax = plt.axes()\n+    assert ax.xaxis.offsetText.get_color() == 'blue'\n+\n+    plt.rcParams['xtick.color'] = 'yellow'\n+    plt.rcParams['xtick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    assert ax.xaxis.offsetText.get_color() == 'yellow'\n+\n+\n+def test_yaxis_offsetText_color():\n+    plt.rcParams['ytick.labelcolor'] = 'green'\n+    ax = plt.axes()\n+    assert ax.yaxis.offsetText.get_color() == 'green'\n+\n+    plt.rcParams['ytick.color'] = 'red'\n+    plt.rcParams['ytick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    assert ax.yaxis.offsetText.get_color() == 'red'\n+\n+import matplotlib.pyplot as plt\n+import pytest\n+\n def test_ytickcolor_is_not_yticklabelcolor():\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..66a4a5f 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -89,8 +90,30 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import pickletools\n \n @mpl.style.context(\"default\")\n+def test_pickle_draggable_legend():\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111)\n+\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40, 43, 45, 47, 48]\n+\n+    ax.plot(time, speed, label=\"speed\")\n+\n+    leg = ax.legend()\n+    leg.set_draggable(True)  # Previously caused pickling issues\n+\n+    # Attempt to pickle the figure\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+\n+    # Check that there is no reference to 'FigureCanvasQTAgg' in the pickle stream\n+    assert \"FigureCanvasQTAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+\n+    loaded = pickle.loads(pkl)\n+    loaded.canvas.draw()\n+    plt.close(loaded)\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..4a52fe7 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -43,8 +43,32 @@ def test_simple():\n     ax.set_yscale('log')\n     pickle.dump(fig, BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+import pickle\n+from io import BytesIO\n \n-def _generate_complete_test_figure(fig_ref):\n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()\n+\n+    # Attempt to pickle the figure\n+    try:\n+        pickle_data = pickle.dumps(fig)\n+        print(\"Pickling successful.\")\n+    except Exception as e:\n+        print(\"Pickling failed with exception:\", e)\n+        raise\n     fig_ref.set_size_inches((10, 6))\n     plt.figure(fig_ref)\n \n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..ca9a9a5 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -998,6 +998,45 @@ def test_hexbin_log_clim():\n     h = ax.hexbin(x, y, bins='log', vmin=2, vmax=100)\n     assert h.get_clim() == (2, 100)\n \n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_behavior_upon_C_parameter(fig_test, fig_ref):\n+    # see: gh:12926\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # without C parameter\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # with C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=[1] * len(X),\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n \n def test_inverted_limits():\n     # Test gh:1553\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex 700190c..1319045 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -89,6 +89,75 @@ def test_contour_no_valid_levels():\n     ax.contour(np.ones((9, 9)))\n \n \n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.path import Path\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths_basic(fig_test, fig_ref):\n+    # Create original contour set\n+    ax_test = fig_test.subplots()\n+    cs_test = ax_test.contour([[0, 1], [1, 2]])\n+    \n+    # Create reference contour set with different data\n+    ax_ref = fig_ref.subplots()\n+    cs_ref = ax_ref.contour([[1, 0], [2, 1]])\n+    \n+    # Set paths from the reference to the test contour set\n+    cs_test.set_paths(cs_ref.get_paths())\n+    \n+    # They should now have the same paths\n+    assert all(\n+        np.array_equal(test_path.vertices, ref_path.vertices)\n+        for test_path, ref_path in zip(cs_test.get_paths(), cs_ref.get_paths())\n+    )\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths_transformed(fig_test, fig_ref):\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+    \n+    # Create contour sets\n+    cs_test = ax_test.contour([[0, 1], [1, 2]])\n+    cs_ref = ax_ref.contour([[0, 1], [1, 2]])\n+    \n+    # Apply a transformation to reference paths\n+    transformed_paths = [Path(path.vertices + 1) for path in cs_ref.get_paths()]\n+    \n+    # Set these transformed paths in the test contour set\n+    cs_test.set_paths(transformed_paths)\n+    \n+    # The test paths should be transformed\n+    assert all(\n+        np.array_equal(test_path.vertices, ref_path.vertices + 1)\n+        for test_path, ref_path in zip(cs_test.get_paths(), cs_ref.get_paths())\n+    )\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_paths_integrity_after_set(fig_test, fig_ref):\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+    \n+    # Initial contour set\n+    cs_test = ax_test.contour([[0, 1], [1, 2]])\n+    cs_ref = ax_ref.contour([[0, 1], [1, 2]])\n+    \n+    # Capture original paths\n+    original_paths = cs_test.get_paths()\n+    \n+    # Set paths\n+    cs_test.set_paths(cs_ref.get_paths())\n+    \n+    # Reset to original paths\n+    cs_test.set_paths(original_paths)\n+    \n+    # Ensure the paths are back to original\n+    assert all(\n+        np.array_equal(test_path.vertices, orig_path.vertices)\n+        for test_path, orig_path in zip(cs_test.get_paths(), original_paths)\n+    )\n+\n def test_contour_Nlevels():\n     # A scalar levels arg or kwarg should trigger auto level generation.\n     # https://github.com/matplotlib/matplotlib/issues/11913\n",
  "mwaskom__seaborn-3069": "diff --git a/tests/_core/test_plot.py b/tests/_core/test_plot.py\nindex 3d202bc..d84ae29 100644\n--- a/tests/_core/test_plot.py\n+++ b/tests/_core/test_plot.py\n@@ -646,6 +646,11 @@ class TestScaling:\n             p.plot()\n \n \n+import pytest\n+import matplotlib as mpl\n+from seaborn._core.plot import Plot\n+from seaborn._core.scales import Nominal\n+\n class TestPlotting:\n \n     def test_matplotlib_object_creation(self):\n@@ -661,7 +666,41 @@ class TestPlotting:\n         Plot().plot()\n         assert m.n_splits == 0\n \n-    def test_single_split_single_layer(self, long_df):\n+    def test_nominal_x_axis_behavior(self):\n+        # Test for nominal scale on x-axis with gridlines\n+        p = Plot(x=[\"a\", \"b\", \"c\"], y=[1, 2, 3], scales={\"x\": Nominal()})\n+        ax1 = p.plot()._figure.axes[0]\n+        assert ax1.get_xlim() == (-.5, 2.5)\n+        assert not any(x.get_visible() for x in ax1.xaxis.get_gridlines())\n+\n+        lim = (-1, 2.1)\n+        ax2 = p.limit(x=lim).plot()._figure.axes[0]\n+        assert ax2.get_xlim() == lim\n+\n+    def test_nominal_y_axis_behavior(self):\n+        # Test for nominal scale on y-axis with gridlines and inverted axis\n+        p = Plot(x=[1, 2, 3], y=[\"a\", \"b\", \"c\"], scales={\"y\": Nominal()})\n+        ax1 = p.plot()._figure.axes[0]\n+        assert ax1.get_ylim() == (2.5, -.5)\n+        assert not any(y.get_visible() for y in ax1.yaxis.get_gridlines())\n+\n+        lim = (-1, 2.1)\n+        ax2 = p.limit(y=lim).plot()._figure.axes[0]\n+        assert ax2.get_ylim() == lim\n+\n+    def test_nominal_grid_override(self):\n+        # Test for forcing gridlines display with theme override\n+        with mpl.style.context({'axes.grid': True}):\n+            p = Plot(x=[\"a\", \"b\", \"c\"], y=[1, 2, 3], scales={\"x\": Nominal()})\n+            ax = p.plot()._figure.axes[0]\n+            assert any(x.get_visible() for x in ax.xaxis.get_gridlines())\n+\n+    def test_nominal_empty_data(self):\n+        # Test nominal scale behavior with empty data\n+        p = Plot(x=[], y=[], scales={\"x\": Nominal(), \"y\": Nominal()})\n+        ax = p.plot()._figure.axes[0]\n+        assert not ax.xaxis.get_gridlines()  # No gridlines should be present\n+        assert ax.get_xlim() == (-.5, .5)  # Default margin for empty data\n \n         m = MockMark()\n         p = Plot(long_df, x=\"f\", y=\"z\").add(m).plot()\n",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..798a004 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -244,6 +244,20 @@ def test_default_static_max_age(app):\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n \n+def test_empty_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"\", __name__)\n+\n+def test_non_empty_name_allowed(app, client):\n+    try:\n+        bp = flask.Blueprint(\"valid_name\", __name__)\n+        assert bp.name == \"valid_name\"\n+    except ValueError:\n+        pytest.fail(\"Blueprint creation with non-empty name raised ValueError unexpectedly.\")\n+\n+import pytest\n+import flask\n+\n def test_templates_list(test_apps):\n     from blueprintapp import app\n \n",
  "psf__requests-1142": "",
  "psf__requests-1724": "diff --git a/requests/api.py b/requests/api.py\nindex 66d7f21..9ea6025 100644\n--- a/requests/api.py\n+++ b/requests/api.py\n@@ -10,6 +10,8 @@ This module implements the Requests API.\n :license: Apache2, see LICENSE for more details.\n \n \"\"\"\n+import requests\n+from .utils import httpbin\n \n from . import sessions\n \n@@ -39,6 +41,21 @@ def request(method, url, **kwargs):\n       >>> req = requests.request('GET', 'http://httpbin.org/get')\n       <Response [200]>\n     \"\"\"\n+    \n+    def test_unicode_method_name():\n+        files = {'file': open('test_requests.py', 'rb')}\n+        r = requests.request(method=u'POST', url=httpbin('post'), files=files)\n+        assert r.status_code == 200\n+\n+    def test_ascii_method_name():\n+        files = {'file': open('test_requests.py', 'rb')}\n+        r = requests.request(method='POST', url=httpbin('post'), files=files)\n+        assert r.status_code == 200\n+\n+    def test_mixed_unicode_ascii():\n+        files = {u'file': open(u'test_requests.py', 'rb')}\n+        r = requests.request(method=u'POST', url=httpbin('post'), files=files)\n+        assert r.status_code == 200\n \n     session = sessions.Session()\n     return session.request(method=method, url=url, **kwargs)\n@@ -50,6 +67,21 @@ def get(url, **kwargs):\n     :param url: URL for the new :class:`Request` object.\n     :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n     \"\"\"\n+    \n+    def test_unicode_method_name():\n+        files = {'file': open('test_requests.py', 'rb')}\n+        r = requests.request(method=u'POST', url=httpbin('post'), files=files)\n+        assert r.status_code == 200\n+\n+    def test_ascii_method_name():\n+        files = {'file': open('test_requests.py', 'rb')}\n+        r = requests.request(method='POST', url=httpbin('post'), files=files)\n+        assert r.status_code == 200\n+\n+    def test_mixed_unicode_ascii():\n+        files = {u'file': open(u'test_requests.py', 'rb')}\n+        r = requests.request(method=u'POST', url=httpbin('post'), files=files)\n+        assert r.status_code == 200\n \n     kwargs.setdefault('allow_redirects', True)\n     return request('get', url, **kwargs)\n",
  "psf__requests-1766": "",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..ce18978 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,12 +81,26 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://.example.com'),\n         ))\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n             requests.get(url)\n \n-    def test_basic_building(self):\n+    @pytest.mark.parametrize(\n+        'exception, url', (\n+            (InvalidURL, 'http://..example.com'),\n+            (InvalidURL, 'http://example..com'),\n+            (InvalidURL, 'http://example.com..'),\n+            (InvalidURL, 'http://-example.com'),\n+            (InvalidURL, 'http://example-.com'),\n+            (InvalidURL, 'http://.com'),\n+            (InvalidURL, 'http://com.'),\n+            (InvalidURL, 'http://.example.com'),\n+        ))\n+    def test_additional_invalid_urls(self, exception, url):\n+        with pytest.raises(exception):\n+            requests.get(url)\n         req = requests.Request()\n         req.url = 'http://kennethreitz.org/'\n         req.data = {'life': '42'}\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..1458492 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2308,8 +2308,34 @@ class TestAsCompatibleData:\n         orig = Variable(dims=(\"x\"), data=array, attrs={\"foo\": \"bar\"})\n         assert isinstance(orig._data, CustomIndexable)\n \n-\n-def test_raise_no_warning_for_nan_in_binary_ops():\n+def test_no_type_coercion_on_setitem_with_values_property():\n+    import numpy as np\n+    import xarray as xr\n+    \n+    # Type with data stored in values attribute\n+    class CustomWithValuesAttr:\n+        def __init__(self, array):\n+            self.values = array\n+\n+    # Minimal example from issue statement\n+    good_indexed, bad_indexed = xr.DataArray([None]), xr.DataArray([None])\n+\n+    class HasValues:\n+        values = 5\n+\n+    # Assigning a set object\n+    good_indexed.loc[{'dim_0': 0}] = set()\n+    assert good_indexed.values[0] == set()  # Expecting set() not coerced to array\n+\n+    # Assigning an object with a 'values' attribute\n+    bad_indexed.loc[{'dim_0': 0}] = HasValues()\n+    assert isinstance(bad_indexed.values[0], HasValues)  # Expecting HasValues instance, not array(5)\n+\n+    # Test case for CustomWithValuesAttr\n+    custom_data = CustomWithValuesAttr(np.arange(3))\n+    custom_array = xr.DataArray([None])\n+    custom_array.loc[{'dim_0': 0}] = custom_data\n+    assert custom_array.values[0] == custom_data  # Should store CustomWithValuesAttr instance\n     with pytest.warns(None) as record:\n         Variable(\"x\", [1, 2, np.NaN]) > 0\n     assert len(record) == 0\n",
  "pydata__xarray-3095": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex 9329f73..d3ad1f9 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -466,6 +466,13 @@ class VariableSubclassobjects:\n         actual = Variable.concat([a, b], dim='x')\n         expected = Variable('x', np.arange(5).astype(str))\n         assert_identical(expected, actual)\n+        # Test for regression: unicode indices should not be cast to object\n+        str_array = np.array(['a', 'b', 'c'], dtype='<U3')\n+        v = self.cls('x', str_array)\n+        for deep in [True, False]:\n+            w = v.copy(deep=deep)\n+            assert v.dtype == w.dtype\n+            assert_array_equal(v.values, w.values)\n         assert actual.dtype.kind == expected.dtype.kind\n \n     def test_concat_mixed_dtypes(self):\n@@ -474,6 +481,13 @@ class VariableSubclassobjects:\n         actual = Variable.concat([a, b], dim='x')\n         expected = Variable('x', np.array([0, 1, 'two'], dtype=object))\n         assert_identical(expected, actual)\n+        # Test for regression: unicode indices should not be cast to object\n+        str_array = np.array(['a', 'b', 'c'], dtype='<U3')\n+        v = self.cls('x', str_array)\n+        for deep in [True, False]:\n+            w = v.copy(deep=deep)\n+            assert v.dtype == w.dtype\n+            assert_array_equal(v.values, w.values)\n         assert actual.dtype == object\n \n     @pytest.mark.parametrize('deep', [True, False])\n",
  "pydata__xarray-3151": "",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..703b501 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2309,8 +2309,24 @@ class TestDataArray:\n                     self.dv.values, np.array(q) * 100, axis=axis\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n-\n-    def test_reduce_keep_attrs(self):\n+    def test_quantile_keep_attrs(self):\n+        # Test that attributes are kept when keep_attrs=True is specified\n+        da = DataArray([0, 0], dims=\"x\", attrs={'units':'K'})\n+        out = da.quantile(.9, dim='x', keep_attrs=True)\n+        assert out.attrs == {'units': 'K'}\n+\n+        # Test when keep_attrs=False (default), attributes should not be kept\n+        out = da.quantile(.9, dim='x', keep_attrs=False)\n+        assert out.attrs == {}\n+\n+        # Test with multiple quantiles\n+        out = da.quantile([0.1, 0.9], dim='x', keep_attrs=True)\n+        assert out.attrs == {'units': 'K'}\n+\n+        # Test with no attributes in the original DataArray and keep_attrs=True\n+        da_no_attrs = DataArray([0, 0], dims=\"x\")\n+        out = da_no_attrs.quantile(.9, dim='x', keep_attrs=True)\n+        assert out.attrs == {}\n         # Test dropped attrs\n         vm = self.va.mean()\n         assert len(vm.attrs) == 0\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..0aceb6e 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,8 +1,10 @@\n+\n import numpy as np\n import pytest\n \n import xarray as xr\n from xarray.core import dtypes, merge\n+from xarray.testing import assert_identical\n \n from . import raises_regex\n from .test_dataset import create_test_data\n@@ -159,7 +161,10 @@ class TestMergeMethod:\n         with raises_regex(ValueError, \"should be coordinates or not\"):\n             data.merge(data.reset_coords())\n \n-    def test_merge_broadcast_equals(self):\n+    def test_merge_dataarray(self):\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+        assert_identical(ds.merge(da), xr.merge([ds, da]))\n         ds1 = xr.Dataset({\"x\": 0})\n         ds2 = xr.Dataset({\"x\": (\"y\", [0, 0])})\n         actual = ds1.merge(ds2)\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..b438109 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -114,7 +114,25 @@ class TestMergeFunction:\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n         assert actual.identical(expected)\n \n-    def test_merge_dicts_dims(self):\n+    def test_merge_attrs_override_copy(self):\n+        import xarray as xr\n+        ds1 = xr.Dataset(attrs={\"x\": 0})\n+        ds2 = xr.Dataset(attrs={\"x\": 1})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"x\"] = 2\n+        assert ds1.attrs[\"x\"] == 0\n+        assert ds3.attrs[\"x\"] == 2\n+\n+    def test_merge_attrs_override_no_side_effects(self):\n+        import xarray as xr\n+        ds1 = xr.Dataset(attrs={\"a\": \"original\"})\n+        ds2 = xr.Dataset(attrs={\"a\": \"new\"})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"a\"] = \"changed\"\n+        # Check that ds1's attribute has not been altered\n+        assert ds1.attrs[\"a\"] == \"original\"\n+        # Check that ds3's attribute is changed as intended\n+        assert ds3.attrs[\"a\"] == \"changed\"\n         actual = xr.merge([{\"y\": (\"x\", [13])}, {\"x\": [12]}])\n         expected = xr.Dataset({\"x\": [12], \"y\": (\"x\", [13])})\n         assert actual.identical(expected)\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..9eb7695 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1921,6 +1921,21 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n+def test_where_keep_attrs():\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"condition\"})\n+    x = xr.DataArray([1, 2], dims=\"x\", attrs={\"attr\": \"x_values\"})\n+    y = xr.DataArray([3, 4], dims=\"x\", attrs={\"attr\": \"y_values\"})\n+\n+    # Test with keep_attrs=True\n+    actual = xr.where(cond, x, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 4], dims=\"x\", attrs={\"attr\": \"x_values\"})  # Expect x's attributes\n+    assert_identical(expected, actual)\n+\n+    # Test with keep_attrs=False (default behavior)\n+    actual_default = xr.where(cond, x, y)\n+    expected_default = xr.DataArray([1, 4], dims=\"x\")  # No attributes should be present\n+    assert_identical(expected_default, actual_default)\n+\n \n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n",
  "pydata__xarray-4695": "",
  "pydata__xarray-4966": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex 2dbb0b4..fc8151c 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -2,6 +2,24 @@ from contextlib import suppress\n \n import numpy as np\n import pandas as pd\n+@pytest.mark.parametrize(\"dtype_kind, unsigned_attr, expected_values\", [\n+    (\"u\", \"false\", [-128, -1, 0, 1, 2, np.nan, 127]),  # Treat unsigned as signed\n+    (\"i\", \"true\", [128, 255, 0, 1, 2, np.nan, 127]),   # Treat signed as unsigned\n+])\n+def test_decode_signed_unsigned_handling(dtype_kind, unsigned_attr, expected_values):\n+    dtype = np.dtype(f\"{dtype_kind}1\")  # Using 1-byte types for simplicity\n+    original_values = np.array([-128, -1, 0, 1, 2, np.nan, 127], dtype='float32')\n+    encoded_values = original_values.astype(dtype)\n+\n+    encoded = xr.Variable(\n+        (\"x\",), encoded_values, attrs={\"_Unsigned\": unsigned_attr}\n+    )\n+    coder = variables.UnsignedIntegerCoder()\n+    decoded = coder.decode(encoded)\n+\n+    expected = xr.Variable((\"x\",), np.array(expected_values, dtype='float32'))\n+    assert_identical(decoded, expected)\n+\n import pytest\n \n import xarray as xr\n@@ -9,6 +27,7 @@ from xarray.coding import variables\n from xarray.conventions import decode_cf_variable, encode_cf_variable\n \n from . import assert_allclose, assert_equal, assert_identical, requires_dask\n+import numpy as np\n \n with suppress(ImportError):\n     import dask.array as da\n",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..5da344e 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1920,6 +1920,19 @@ def test_where() -> None:\n     assert_identical(expected, actual)\n \n \n+def test_where_scalar_with_keep_attrs() -> None:\n+    cond = xr.DataArray([True, False, True], dims=\"x\")\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={})  # Scalars don't have attrs\n+    assert_identical(expected, actual)\n+\n+    # Additional test with a DataArray and scalar\n+    x = xr.DataArray([10, 20, 30], dims=\"x\", attrs={\"attr\": \"x\"})\n+    actual = xr.where(cond, 1, x, keep_attrs=True)\n+    expected = xr.DataArray([1, 20, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected, actual)\n+\n+\n def test_where_attrs() -> None:\n     cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n     x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n",
  "pydata__xarray-6599": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f1ec005..381ab8f 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -2010,6 +2010,14 @@ def test_where_attrs() -> None:\n             ),\n             id=\"datetime\",\n         ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array([1000, 2000, 3000], dtype=\"timedelta64[ns]\"), dims=\"x\"\n+            ),\n+            xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n+            xr.DataArray([1000.0, 2000.0, 3000.0], dims=\"x\"),\n+            id=\"timedelta\",\n+        ),\n     ],\n )\n def test_polyval(\n",
  "pydata__xarray-6721": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex cab9007..d6dd991 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -221,7 +221,27 @@ class InaccessibleVariableDataStore(backends.InMemoryDataStore):\n \n \n class TestDataset:\n-    def test_repr(self) -> None:\n+    def test_chunks_does_not_load_entire_array(self) -> None:\n+        # Test case for verifying the fix for issue where accessing chunks\n+        # on a Zarr-backed Xarray loads the entire dataset into memory.\n+        import xarray as xr\n+        from xarray.backends.zarr import ZarrBackendEntrypoint\n+\n+        # URL of the Zarr dataset\n+        url = \"https://ncsa.osn.xsede.org/Pangeo/pangeo-forge/swot_adac/FESOM/surf/fma.zarr\"\n+        \n+        # Open the dataset using the Zarr engine\n+        ds = xr.open_dataset(url, engine='zarr')\n+\n+        # Verify that accessing chunks does not load data into memory\n+        entry = ZarrBackendEntrypoint()\n+        store = entry.open_dataset(url, engine='zarr', chunks={}).store\n+        with pytest.raises(ValueError, match=r\"Cannot access data; it is not loaded in memory\"):\n+            store.getitems([\"0.0.0\"])\n+\n+        # Check the chunks\n+        chunks = ds.chunks\n+        assert isinstance(chunks, dict)\n         data = create_test_data(seed=123)\n         data.attrs[\"foo\"] = \"bar\"\n         # need to insert str dtype at runtime to handle different endianness\n",
  "pydata__xarray-6744": "diff --git a/xarray/tests/test_rolling.py b/xarray/tests/test_rolling.py\nindex 0a9ef75..f709075 100644\n--- a/xarray/tests/test_rolling.py\n+++ b/xarray/tests/test_rolling.py\n@@ -50,6 +50,22 @@ class TestDataArrayRolling:\n                 )\n \n     @pytest.mark.parametrize(\"da\", (1,), indirect=True)\n+    @pytest.mark.parametrize(\"center\", [True, False])\n+    @pytest.mark.parametrize(\"size\", [1, 2, 3, 7])\n+    def test_rolling_manual_iteration_center(self, da: DataArray, center: bool, size: int) -> None:\n+        rolling_obj = da.rolling(time=size, center=center)\n+        rolling_obj_mean = rolling_obj.mean()\n+\n+        manual_iterated_means = [window.mean().values.item() for _, window in rolling_obj]\n+\n+        # Construct the expected result with center alignment if center=True.\n+        if center:\n+            offset = size // 2\n+            expected_values = [np.nan] * offset + [np.mean(da.values[i:i+size]) for i in range(len(da.values) - size + 1)] + [np.nan] * (size - offset - 1)\n+        else:\n+            expected_values = [np.mean(da.values[i:i+size]) if i+size <= len(da.values) else np.nan for i in range(len(da.values))]\n+\n+        assert_array_equal(manual_iterated_means, expected_values)\n     def test_rolling_repr(self, da) -> None:\n         rolling_obj = da.rolling(time=7)\n         assert repr(rolling_obj) == \"DataArrayRolling [time->7]\"\n",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "diff --git a/xarray/tests/test_indexes.py b/xarray/tests/test_indexes.py\nindex fa8bd84..2610015 100644\n--- a/xarray/tests/test_indexes.py\n+++ b/xarray/tests/test_indexes.py\n@@ -688,12 +688,24 @@ def test_safe_cast_to_index_cftimeindex():\n         assert isinstance(actual, type(expected))\n \n \n-# Test that datetime.datetime objects are never used in a CFTimeIndex\n-@requires_cftime\n-def test_safe_cast_to_index_datetime_datetime():\n-    dates = [datetime(1, 1, day) for day in range(1, 20)]\n+import pytest\n+import numpy as np\n+import xarray as xr\n \n-    expected = pd.Index(dates)\n-    actual = safe_cast_to_index(np.array(dates))\n-    assert_array_equal(expected, actual)\n-    assert isinstance(actual, pd.Index)\n+@pytest.mark.parametrize(\"dtype\", [\"int32\", \"float32\", \"int16\", \"float64\", \"uint8\"])\n+def test_restore_dtype_on_multiindexes_extended(dtype: str) -> None:\n+    foo = xr.Dataset(coords={\"bar\": (\"bar\", np.array([0, 1], dtype=dtype))})\n+    foo = foo.stack(baz=(\"bar\",))\n+    assert str(foo[\"bar\"].values.dtype) == dtype\n+    \n+def test_multiindex_dtypes_with_unstack() -> None:\n+    ds = xr.Dataset(coords={\"x\": (\"x\", np.array([0, 1], dtype=\"int32\"))})\n+    stacked = ds.stack(z=(\"x\",))\n+    unstacked = stacked.unstack(\"z\")\n+    assert unstacked[\"x\"].values.dtype == \"int32\"\n+\n+def test_multiindex_round_trip_dtype() -> None:\n+    ds = xr.Dataset(coords={\"y\": (\"y\", np.array([0, 2, 4], dtype=\"int32\"))})\n+    stacked = ds.stack(a=(\"y\",))\n+    unstacked = stacked.unstack(\"a\")\n+    assert unstacked[\"y\"].values.dtype == \"int32\"\n",
  "pylint-dev__pylint-4970": "diff --git a/tests/checkers/unittest_similar.py b/tests/checkers/unittest_similar.py\nindex 97cd4d0..a21888d 100644\n--- a/tests/checkers/unittest_similar.py\n+++ b/tests/checkers/unittest_similar.py\n@@ -495,10 +495,57 @@ def test_get_map_data() -> None:\n         data.extend(sim.get_map_data())\n \n     assert len(expected_linelists) == len(data)\n+\n+def test_set_duplicate_lines_to_zero():\n+    from io import StringIO\n+    import pytest\n+    from pylint.checkers.similar import Run\n+    from contextlib import redirect_stdout\n+    \n+    SIMILAR1 = 'test_file1.py'\n+    SIMILAR2 = 'test_file2.py'\n+    \n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        Run([\"--duplicates=0\", SIMILAR1, SIMILAR2])\n+    assert ex.value.code == 0\n+    assert output.getvalue() == \"\"\n+\n+def test_no_duplicate_detection_with_zero_setting():\n+    from io import StringIO\n+    import pytest\n+    from pylint.checkers.similar import Run\n+    from contextlib import redirect_stdout\n+    \n+    SIMILAR1 = 'test_file1.py'\n+    SIMILAR2 = 'test_file2.py'\n+    \n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        # Assuming SIMILAR1 and SIMILAR2 contain similar code for this test\n+        Run([\"--duplicates=0\", SIMILAR1, SIMILAR2])\n+    assert ex.value.code == 0\n+    assert \"RP0801\" not in output.getvalue()  # Ensure no duplicate code message is reported\n+    \n+def test_duplicate_detection_with_non_zero_setting():\n+    from io import StringIO\n+    import pytest\n+    from pylint.checkers.similar import Run\n+    from contextlib import redirect_stdout\n+    \n+    SIMILAR1 = 'test_file1.py'\n+    SIMILAR2 = 'test_file2.py'\n+    \n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        # Assuming SIMILAR1 and SIMILAR2 contain similar code for this test\n+        Run([\"--duplicates=2\", SIMILAR1, SIMILAR2])\n+    assert ex.value.code == 1  # Expecting non-zero exit code for detected duplicates\n+    assert \"RP0801\" in output.getvalue()  # Ensure duplicate code message is reported\n     for source_fname, expected_lines, lineset_obj in zip(\n         source_streams, expected_linelists, data\n     ):\n         assert source_fname == lineset_obj.name\n         # There doesn't seem to be a faster way of doing this, yet.\n         lines = (linespec.text for linespec in lineset_obj.stripped_lines)\n-        assert tuple(expected_lines) == tuple(lines)\n+        assert tuple(expected_lines) == tuple(lines)\n",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..0ed1dfb 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -94,9 +94,35 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+from pylint import Run\n+import pytest\n+from pytest import CaptureFixture\n+\n+# Existing test case\n+def test_short_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the -v flag.\"\"\"\n+    Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n+# New test case for long verbose option\n+def test_long_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the --verbose flag.\"\"\"\n+    Run([str(EMPTY_MODULE), \"--verbose\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n+# New test case for verbose option with an argument (should fail)\n+def test_verbose_with_argument(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that the -v flag fails when an argument is provided.\"\"\"\n+    with pytest.raises(SystemExit):\n+        Run([str(EMPTY_MODULE), \"-v\", \"extra\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"argument --verbose/-v: expected no argument\" in output.err\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9123ae4..acd1685 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1233,6 +1233,66 @@ class TestRunTC:\n             expected_output=\"No such file or directory\",\n         )\n \n+    def test_ignore_recursive(self):\n+        \"\"\"Test that --ignore works correctly with --recursive=y.\"\"\"\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore=ignored_subdirectory\",\n+            ],\n+            code=0,\n+        )\n+\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore=failing.py\",\n+            ],\n+            code=0,\n+        )\n+\n+    def test_ignore_pattern_recursive(self):\n+        \"\"\"Test that --ignore-patterns works correctly with --recursive=y.\"\"\"\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-patterns=ignored_.*\",\n+            ],\n+            code=0,\n+        )\n+\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-patterns=failing.*\",\n+            ],\n+            code=0,\n+        )\n+\n+    def test_ignore_path_recursive(self):\n+        \"\"\"Test that --ignore-paths works correctly with --recursive=y.\"\"\"\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-paths=.*ignored.*\",\n+            ],\n+            code=0,\n+        )\n+\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-paths=.*failing.*\",\n+            ],\n+            code=0,\n+        )\n+\n     def test_recursive(self):\n         self._runtest(\n             [join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"), \"--recursive=y\"],\n",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..b9f7859 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1324,9 +1324,51 @@ class TestRunTC:\n                 if not os.path.basename(path) == \"regrtest_data\"\n             ]\n             with _test_cwd():\n-                os.chdir(join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"))\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^ignored_subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n+\n+    def test_ignore_path_recursive_specific_dir(self) -> None:\n+        \"\"\"Test that a specific path can be ignored when running recursively.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n                 self._runtest(\n-                    [\".\", \"--recursive=y\"],\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^subdirectory/ignored_subdir/.*\",\n+                    ],\n+                    code=0,\n+                )\n+\n+    def test_ignore_path_no_match(self) -> None:\n+        \"\"\"Test that specifying a non-matching ignore pattern does not exclude files.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^non_existent_path/.*\",\n+                    ],\n                     code=0,\n                 )\n \n",
  "pylint-dev__pylint-7277": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9f95f7b..95a5558 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -755,18 +755,105 @@ a.py:1:4: E0001: Parsing failed: 'invalid syntax (<unknown>, line 1)' (syntax-er\n             mock_getcwd.return_value = cwd\n             paths = [cwd, *default_paths]\n             sys.path = copy(paths)\n+\n+            # New test cases for verifying sys.path modification\n+            # Case where first item is \"\"\n+            paths = [\"\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:], \"Failed to remove empty string from sys.path\"\n+\n+            # Case where first item is \".\"\n+            paths = [\".\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:], \"Failed to remove '.' from sys.path\"\n+\n+            # Case where first item is os.getcwd()\n+            paths = [cwd, *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:], \"Failed to remove cwd from sys.path\"\n+\n+            # Case where first item should not be removed\n+            paths = [\"/do_not_remove\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths, \"Incorrectly removed first item from sys.path\"\n             with _test_environ_pythonpath():\n                 modify_sys_path()\n             assert sys.path == paths[1:]\n \n             paths = [cwd, cwd, *default_paths]\n             sys.path = copy(paths)\n+\n+            # New test cases for verifying sys.path modification\n+            # Case where first item is \"\"\n+            paths = [\"\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:], \"Failed to remove empty string from sys.path\"\n+\n+            # Case where first item is \".\"\n+            paths = [\".\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:], \"Failed to remove '.' from sys.path\"\n+\n+            # Case where first item is os.getcwd()\n+            paths = [cwd, *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:], \"Failed to remove cwd from sys.path\"\n+\n+            # Case where first item should not be removed\n+            paths = [\"/do_not_remove\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths, \"Incorrectly removed first item from sys.path\"\n             with _test_environ_pythonpath(\".\"):\n                 modify_sys_path()\n             assert sys.path == paths[1:]\n \n             paths = [cwd, \"/custom_pythonpath\", *default_paths]\n             sys.path = copy(paths)\n+\n+            # New test cases for verifying sys.path modification\n+            # Case where first item is \"\"\n+            paths = [\"\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:], \"Failed to remove empty string from sys.path\"\n+\n+            # Case where first item is \".\"\n+            paths = [\".\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:], \"Failed to remove '.' from sys.path\"\n+\n+            # Case where first item is os.getcwd()\n+            paths = [cwd, *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:], \"Failed to remove cwd from sys.path\"\n+\n+            # Case where first item should not be removed\n+            paths = [\"/do_not_remove\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths, \"Incorrectly removed first item from sys.path\"\n             with _test_environ_pythonpath(\"/custom_pythonpath\"):\n                 modify_sys_path()\n             assert sys.path == paths[1:]\n",
  "pytest-dev__pytest-10051": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex 26c4c15..7ddec62 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -172,6 +172,46 @@ def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardow\n     assert set(caplog._item.stash[caplog_records_key]) == {\"setup\", \"call\"}\n \n \n+\n+def test_caplog_get_records_after_clear(caplog):\n+    logger = logging.getLogger()\n+    \n+    # Initial check to make sure there are no records\n+    assert not caplog.records\n+    assert not caplog.get_records(\"call\")\n+\n+    # Log a message and check if it's captured\n+    logger.info(\"Initial log message\")\n+    assert [record.message for record in caplog.get_records(\"call\")] == [\"Initial log message\"]\n+\n+    # Clear logs and verify\n+    caplog.clear()\n+    assert not caplog.records  # Records should be cleared\n+    assert not caplog.get_records(\"call\")  # get_records should also reflect the clear\n+\n+    # Log another message and check if it's captured correctly\n+    logger.info(\"Log after clear\")\n+    assert [record.message for record in caplog.get_records(\"call\")] == [\"Log after clear\"]\n+\n+def test_caplog_clear_different_phases(caplog, logging_during_setup_and_teardown):\n+    logger = logging.getLogger()\n+    \n+    # Log in different phases\n+    logger.info(\"Log during call phase\")\n+    assert [record.message for record in caplog.get_records(\"call\")] == [\"Log during call phase\"]\n+\n+    # Check setup phase records\n+    assert [record.message for record in caplog.get_records(\"setup\")] == [\"a_setup_log\"]\n+\n+    # Clear call phase and check\n+    caplog.clear()\n+    assert not caplog.get_records(\"call\")  # call phase should be empty\n+    assert [record.message for record in caplog.get_records(\"setup\")] == [\"a_setup_log\"]  # setup phase should be unchanged\n+\n+    # Log another message and verify\n+    logger.info(\"Another log during call phase\")\n+    assert [record.message for record in caplog.get_records(\"call\")] == [\"Another log during call phase\"]\n+\n def test_ini_controls_global_log_level(pytester: Pytester) -> None:\n     pytester.makepyfile(\n         \"\"\"\n",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_debugging.py b/testing/test_debugging.py\nindex 912abd7..68001c3 100644\n--- a/testing/test_debugging.py\n+++ b/testing/test_debugging.py\n@@ -191,8 +191,26 @@ class TestPDB:\n         child.expect_exact(\"= 1 skipped in\")\n         child.sendeof()\n         self.flush(child)\n+    def test_pdb_unittest_teardown_not_called_on_skip_class(self, pytester: Pytester) -> None:\n+        \"\"\"Verify tearDown is not called for skipped classes when using --pdb.\"\"\"\n+        p1 = pytester.makepyfile(\n+            \"\"\"\n+            import unittest\n+            @unittest.skip(\"Skipping this entire class\")\n+            class MyTestCase(unittest.TestCase):\n+                def setUp(self):\n+                    raise Exception(\"setUp should not be called\")\n \n-    def test_pdb_print_captured_stdout_and_stderr(self, pytester: Pytester) -> None:\n+                def tearDown(self):\n+                    raise Exception(\"tearDown should not be called\")\n+\n+                def test_one(self):\n+                    pass\n+            \"\"\"\n+        )\n+        result = pytester.runpytest_inprocess(\"--pdb\", p1)\n+        result.stdout.fnmatch_lines([\"* 1 skipped in *\"])\n+        result.assert_outcomes(skipped=1)\n         p1 = pytester.makepyfile(\n             \"\"\"\n             def test_1():\n",
  "pytest-dev__pytest-5262": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 1f092b0..90ed7c6 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -1051,9 +1051,44 @@ class TestFDCapture(object):\n             cap.done()\n             pytest.raises(AttributeError, cap.suspend)\n \n+def test_encodedfile_mode_does_not_contain_b():\n+    import _pytest.capture\n \n-@contextlib.contextmanager\n-def saved_fd(fd):\n+    buffer = open('/dev/null', 'w')\n+    encoded_file = _pytest.capture.EncodedFile(buffer, encoding='utf-8')\n+    \n+    # Check that mode does not contain 'b'\n+    assert 'b' not in getattr(encoded_file.buffer, 'mode', '')\n+\n+    buffer.close()\n+\n+def test_encodedfile_write_str():\n+    import _pytest.capture\n+\n+    buffer = open('/dev/null', 'w')\n+    encoded_file = _pytest.capture.EncodedFile(buffer, encoding='utf-8')\n+    \n+    try:\n+        encoded_file.write(\"string input\")\n+    except Exception as e:\n+        assert False, f\"Expected no exception, but got: {e}\"\n+\n+    buffer.close()\n+\n+def test_encodedfile_write_bytes_raises_type_error():\n+    import _pytest.capture\n+\n+    buffer = open('/dev/null', 'w')\n+    encoded_file = _pytest.capture.EncodedFile(buffer, encoding='utf-8')\n+    \n+    try:\n+        encoded_file.write(b\"bytes input\")\n+    except TypeError as e:\n+        assert \"write() argument must be str, not bytes\" in str(e)\n+    else:\n+        assert False, \"Expected TypeError not raised\"\n+\n+    buffer.close()\n     new_fd = os.dup(fd)\n     try:\n         yield\n",
  "pytest-dev__pytest-5631": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex e422b03..f5ad575 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -3,15 +3,29 @@ import pprint\n import sys\n import textwrap\n \n-import py\n+import numpy as np\n \n import pytest\n from _pytest.main import _in_venv\n from _pytest.main import ExitCode\n from _pytest.main import Session\n \n+def test_patch_numpy_array(testdir):\n+    testdir.makepyfile(\n+        \"\"\"\n+        import numpy as np\n+        from unittest.mock import patch\n+\n+        class SomeClass:\n+            VALUE = np.array([1.0, 2.0])\n \n-class TestCollector:\n+        @patch.object(SomeClass, 'VALUE', new=np.array([-5.5, 3.0]))\n+        def test_patch_with_numpy():\n+            assert (SomeClass.VALUE == np.array([-5.5, 3.0])).all()\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.stdout.fnmatch_lines([\"*1 passed*\"])\n     def test_collect_versus_item(self):\n         from pytest import Collector, Item\n \n",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..aac0b65 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -126,8 +126,7 @@ class TestPaste(object):\n         assert len(mocked_urlopen) == 1\n         url, data = mocked_urlopen[0]\n         assert type(data) is bytes\n-        lexer = \"python3\" if sys.version_info[0] >= 3 else \"python\"\n         assert url == \"https://bpaste.net\"\n-        assert \"lexer=%s\" % lexer in data.decode()\n+        assert \"lexer=text\" in data.decode()\n         assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n",
  "pytest-dev__pytest-6202": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex fb6b260..1559a17 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -703,6 +703,28 @@ class Test_genitems:\n         assert items[2].name == \"testmethod_one\"\n \n         # let's also test getmodpath here\n+\n+    def test_parametrized_method_brackets(self, testdir):\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+\n+            @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+            def testmethod_two(arg0):\n+                pass\n+\n+            class TestY:\n+                @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+                def testmethod_two(self, arg0):\n+                    pass\n+        \"\"\"\n+        )\n+        items, reprec = testdir.inline_genitems(p)\n+        assert len(items) == 3  # testmethod_two should result in two items, one for the function and one for the method\n+        assert items[0].name == 'testmethod_two[.[]'\n+        assert items[1].getmodpath() == 'testmethod_two[.[]'\n+        assert items[2].name == 'testmethod_two[.[]'\n+        assert items[2].getmodpath() == 'TestY.testmethod_two[.[]'\n         assert items[0].getmodpath() == \"testone\"\n         assert items[1].getmodpath() == \"TestX.testmethod_one\"\n         assert items[2].getmodpath() == \"TestY.testmethod_one\"\n",
  "pytest-dev__pytest-7205": "diff --git a/testing/test_setuponly.py b/testing/test_setuponly.py\nindex 8211d39..e889306 100644\n--- a/testing/test_setuponly.py\n+++ b/testing/test_setuponly.py\n@@ -1,3 +1,4 @@\n+\n import pytest\n from _pytest.config import ExitCode\n \n@@ -200,6 +201,22 @@ def test_show_fixtures_with_parameter_ids_function(testdir, mode):\n \n     result.stdout.fnmatch_lines([\"*SETUP    F foobar?FOO?\", \"*SETUP    F foobar?BAR?\"])\n \n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue 7126, BytesWarning when using --setup-show with bytes parameter\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n+\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n+\n \n def test_dynamic_fixture_request(testdir):\n     p = testdir.makepyfile(\n",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..54263ec 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -607,7 +607,20 @@ class TestSkip:\n         result = testdir.runpytest(\"-rs\")\n         result.stdout.fnmatch_lines([\"*unconditional skip*\", \"*1 skipped*\"])\n \n-    def test_skip_with_reason(self, testdir):\n+    def test_skip_with_runxfail(self, testdir):\n+        # Create a test file with a skipped test\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            def test_always_skipped():\n+                assert 0\n+            \"\"\"\n+        )\n+        # Run the tests with --runxfail option\n+        result = testdir.runpytest(\"-rs\", \"--runxfail\")\n+        # Check that the skip location is correctly reported as the test itself\n+        result.stdout.fnmatch_lines([\"*SKIPPED [1] test_always_skipped.py:2: unconditional skip*\", \"*1 skipped*\"])\n         testdir.makepyfile(\n             \"\"\"\n             import pytest\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..477a2f3 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,8 +1,10 @@\n+\n import sys\n \n import pytest\n from _pytest.runner import runtestprotocol\n from _pytest.skipping import evaluate_skip_marks\n+from _pytest.pytester import Testdir\n from _pytest.skipping import evaluate_xfail_marks\n from _pytest.skipping import pytest_runtest_setup\n \n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..ee42d09 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -512,6 +512,12 @@ class TestCaptureFixture:\n                 capfd.close()\n             \"\"\"\n         )\n+    \n+    @pytest.mark.parametrize(\"nl\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_capfd_preserves_newlines(self, capfd, nl):\n+        print(\"test\", end=nl)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(nl)\n         reprec.assertoutcome(passed=1)\n \n     def test_capfdbinary(self, testdir):\n@@ -526,6 +532,12 @@ class TestCaptureFixture:\n                 assert err == b''\n             \"\"\"\n         )\n+    \n+    @pytest.mark.parametrize(\"nl\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_capfd_preserves_newlines(self, capfd, nl):\n+        print(\"test\", end=nl)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(nl)\n         reprec.assertoutcome(passed=1)\n \n     def test_capsysbinary(self, testdir):\n",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..c49152e 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import pytest\n@@ -50,7 +51,46 @@ def test_change_level_undo(testdir):\n     result.stdout.no_fnmatch_line(\"*log from test2*\")\n \n \n-def test_with_statement(caplog):\n+def test_handler_level_restoration(testdir):\n+    \"\"\"Ensure that handler level is correctly restored between tests.\"\"\"\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test4(caplog):\n+            # Before setting, verify the default level\n+            assert caplog.handler.level == 0\n+            caplog.set_level(logging.DEBUG)\n+            assert caplog.handler.level == logging.DEBUG\n+\n+        def test5(caplog):\n+            # Ensure the handler level is reset after test4\n+            assert caplog.handler.level == 0\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+def test_logger_level_restoration(testdir):\n+    \"\"\"Ensure that logger level is correctly restored between tests.\"\"\"\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test6(caplog):\n+            logger = logging.getLogger(\"test_logger\")\n+            assert logger.level == logging.NOTSET\n+            caplog.set_level(logging.WARNING, logger=\"test_logger\")\n+            assert logger.level == logging.WARNING\n+\n+        def test7(caplog):\n+            logger = logging.getLogger(\"test_logger\")\n+            # Ensure the logger level is reset after test6\n+            assert logger.level == logging.NOTSET\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=2)\n     with caplog.at_level(logging.INFO):\n         logger.debug(\"handler DEBUG level\")\n         logger.info(\"handler INFO level\")\n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..1d70b9e 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,3 +1,4 @@\n+\n import os\n import pprint\n import sys\n@@ -9,7 +10,7 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n-from _pytest.pytester import Testdir\n+from _pytest.pytester import Testdir, Pytester\n \n \n class TestCollector:\n@@ -1178,6 +1179,29 @@ def test_collect_symlink_out_of_tree(testdir):\n     assert result.ret == 0\n \n \n+def test_collect_symlink_dir(pytester: Pytester) -> None:\n+    \"\"\"A symlinked directory is collected.\"\"\"\n+    dir = pytester.mkdir(\"dir\")\n+    dir.joinpath(\"test_it.py\").write_text(\"def test_it(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_dir\").symlink_to(dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+\n+def test_symlink_to_multiple_directories(pytester: Pytester) -> None:\n+    \"\"\"Symlinks to multiple directories are collected.\"\"\"\n+    dir1 = pytester.mkdir(\"dir1\")\n+    dir1.joinpath(\"test_1.py\").write_text(\"def test_1(): pass\", \"utf-8\")\n+    \n+    dir2 = pytester.mkdir(\"dir2\")\n+    dir2.joinpath(\"test_2.py\").write_text(\"def test_2(): pass\", \"utf-8\")\n+\n+    pytester.path.joinpath(\"symlink_dir1\").symlink_to(dir1)\n+    pytester.path.joinpath(\"symlink_dir2\").symlink_to(dir2)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+\n def test_collectignore_via_conftest(testdir):\n     \"\"\"collect_ignore in parent conftest skips importing child (issue #4592).\"\"\"\n     tests = testdir.mkpydir(\"tests\")\n",
  "pytest-dev__pytest-8399": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 2c720b0..1b94f61 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -301,6 +301,32 @@ def test_setup_setUpClass(pytester: Pytester) -> None:\n     reprec = pytester.inline_run(testpath)\n     reprec.assertoutcome(passed=3)\n \n+def test_fixtures_setUpClass_private(pytester: Pytester) -> None:\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+\n+        class MyTestCase(unittest.TestCase):\n+            @classmethod\n+            def setUpClass(cls):\n+                pass\n+\n+            def test_func(self):\n+                pass\n+\n+            @classmethod\n+            def tearDownClass(cls):\n+                pass\n+        \"\"\"\n+    )\n+    result = pytester.runpytest(\"--fixtures\")\n+    assert result.ret == 0\n+    result.stdout.no_fnmatch_line(\"*unittest_setUpClass_fixture_MyTestCase*\")\n+\n+    result = pytester.runpytest(\"--fixtures\", \"-v\")\n+    assert result.ret == 0\n+    result.stdout.fnmatch_lines([\"*unittest_setUpClass_fixture_MyTestCase*\"])\n+\n \n def test_setup_class(pytester: Pytester) -> None:\n     testpath = pytester.makepyfile(\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..489cada 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -597,8 +597,28 @@ def test_ridgecv_store_cv_values():\n     r.fit(x, y)\n     assert_equal(r.cv_values_.shape, (n_samples, n_responses, n_alphas))\n \n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    rng = np.random.RandomState(42)\n+\n+    n_samples = 8\n+    n_features = 5\n+    X = rng.randn(n_samples, n_features)\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    # Create instance with store_cv_values=True\n+    clf = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+    # with len(y.shape) == 1 (single target)\n+    y = rng.choice([-1, 1], size=n_samples)\n+    clf.fit(X, y)\n+    assert clf.cv_values_.shape == (n_samples, n_alphas)\n \n-def test_ridgecv_sample_weight():\n+    # with len(y.shape) == 2 (multi-target)\n+    y_multi = rng.choice([-1, 1], size=(n_samples, 3))\n+    clf.fit(X, y_multi)\n+    assert clf.cv_values_.shape == (n_samples, y_multi.shape[1], n_alphas)\n     rng = np.random.RandomState(0)\n     alphas = (0.1, 1.0, 10.0)\n \n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..1131cf9 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -184,7 +184,14 @@ def test_int_overflow_mutual_info_score():\n     assert_all_finite(mutual_info_score(x.ravel(), y.ravel()))\n \n \n-def test_entropy():\n+def test_fowlkes_mallows_score_large_inputs():\n+    # Test fowlkes_mallows_score with large inputs to ensure no overflow\n+    labels_true = np.array([0] * 100000 + [1] * 50000)\n+    labels_pred = np.array([0] * 75000 + [1] * 75000)\n+    \n+    score = fowlkes_mallows_score(labels_true, labels_pred)\n+    assert_all_finite(score)\n+    assert score >= 0.0 and score <= 1.0\n     ent = entropy([0, 0, 42.])\n     assert_almost_equal(ent, 0.6365141, 5)\n     assert_almost_equal(entropy([]), 1)\n",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..c96b019 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -558,8 +558,13 @@ def test_feature_names():\n     for idx, name in enumerate(feature_names):\n         assert_equal(idx, cv.vocabulary_.get(name))\n \n-\n-def test_vectorizer_max_features():\n+def test_countvectorizer_get_feature_names_with_vocabulary():\n+    vocab = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    vectorizer = CountVectorizer(vocabulary=vocab)\n+    \n+    # Check that get_feature_names does not raise NotFittedError\n+    feature_names = vectorizer.get_feature_names()\n+    assert_array_equal(feature_names, vocab)\n     vec_factories = (\n         CountVectorizer,\n         TfidfVectorizer,\n",
  "scikit-learn__scikit-learn-11310": "diff --git a/sklearn/model_selection/tests/test_search.py b/sklearn/model_selection/tests/test_search.py\nindex 0b1d5f9..2478bc5 100644\n--- a/sklearn/model_selection/tests/test_search.py\n+++ b/sklearn/model_selection/tests/test_search.py\n@@ -1149,7 +1149,9 @@ def test_search_cv_results_none_param():\n                            [0, None])\n \n \n-@ignore_warnings()\n+from sklearn.utils.testing import assert_true\n+from sklearn.utils.testing import assert_greater_equal\n+from sklearn.utils.testing import assert_allclose\n def test_search_cv_timing():\n     svc = LinearSVC(random_state=0)\n \n",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..db75d41 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -491,8 +491,33 @@ def test_logistic_cv():\n     scores = np.asarray(list(lr_cv.scores_.values()))\n     assert_array_equal(scores.shape, (1, 3, 1))\n \n-\n-def test_multinomial_logistic_regression_string_inputs():\n+from sklearn.datasets import make_classification\n+from sklearn.preprocessing import LabelEncoder\n+import numpy as np\n+from sklearn.utils._testing import assert_array_almost_equal\n+from sklearn.linear_model import LogisticRegression, _log_reg_scoring_path\n+from sklearn.metrics.scorer import get_scorer\n+\n+def test_logistic_cv_multinomial_score():\n+    # Test that LogisticRegressionCV uses the correct scoring method with multinomial\n+    X, y = make_classification(n_samples=100, random_state=0, n_classes=3, n_informative=6)\n+    train, test = np.arange(80), np.arange(80, 100)\n+\n+    # Multinomial logistic regression\n+    lr = LogisticRegression(C=1., solver='lbfgs', multi_class='multinomial')\n+    params = lr.get_params()\n+    for key in ['C', 'n_jobs', 'warm_start']:\n+        del params[key]\n+\n+    lr.fit(X[train], y[train])\n+\n+    # Check the scores using different scorers\n+    for scoring in ['accuracy', 'neg_log_loss']:\n+        scorer = get_scorer(scoring)\n+        assert_array_almost_equal(\n+            _log_reg_scoring_path(X, y, train, test, Cs=[1.], scoring=scorer, **params)[2][0],\n+            scorer(lr, X[test], y[test])\n+        )\n     # Test with string labels for LogisticRegression(CV)\n     n_samples, n_features, n_classes = 50, 5, 3\n     X_ref, y = make_classification(n_samples=n_samples, n_features=n_features,\n",
  "scikit-learn__scikit-learn-12585": "diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 4752f9c..3464517 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -154,7 +154,19 @@ def test_clone_nan():\n     assert clf.empty is clf2.empty\n \n \n-def test_clone_sparse_matrices():\n+from sklearn.base import clone\n+from sklearn.preprocessing import StandardScaler\n+\n+...\n+\n+def test_clone_estimator_types():\n+    # Check that clone works for parameters that are types rather than instances\n+    # This tests the issue where clone was failing with estimator classes\n+    scaler = StandardScaler(with_mean=StandardScaler)\n+    cloned_scaler = clone(scaler)\n+    \n+    # Assert that the class type is preserved and no exception is thrown\n+    assert scaler.with_mean is cloned_scaler.with_mean\n     sparse_matrix_classes = [\n         getattr(sp, name)\n         for name in dir(sp) if name.endswith('_matrix')]\n",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..2b2956f 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -5,6 +5,31 @@ from distutils.version import LooseVersion\n import numpy as np\n from scipy import linalg\n \n+@pytest.mark.parametrize('init_copy_X, fit_copy_X, expected', [\n+    (True, None, True),  # Default behavior where init is used\n+    (False, None, False),  # Default behavior where init is used\n+    (True, True, True),  # Explicit fit param should be used\n+    (True, False, False),  # Explicit fit param should override init\n+    (False, True, True),  # Explicit fit param should override init\n+    (False, False, False)  # Explicit fit param should be used\n+])\n+def test_lasso_lars_copyX_fit_override(init_copy_X, fit_copy_X, expected):\n+    \"\"\"\n+    Test that the `copy_X` parameter passed to `fit` overrides the instance\n+    `copy_X` parameter when explicitly provided.\n+    \"\"\"\n+    lasso_lars = LassoLarsIC(copy_X=init_copy_X, precompute=False)\n+    rng = np.random.RandomState(0)\n+    X = rng.normal(0, 1, (100, 5))\n+    X_copy = X.copy()\n+    y = X[:, 2]\n+    # Pass copy_X explicitly to fit only if fit_copy_X is not None\n+    if fit_copy_X is not None:\n+        lasso_lars.fit(X, y, copy_X=fit_copy_X)\n+    else:\n+        lasso_lars.fit(X, y)\n+    assert expected == np.array_equal(X, X_copy)\n+\n import pytest\n \n from sklearn.model_selection import train_test_split\n@@ -18,7 +43,8 @@ from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import TempMemmap\n from sklearn.exceptions import ConvergenceWarning\n from sklearn import linear_model, datasets\n-from sklearn.linear_model.least_angle import _lars_path_residues\n+from sklearn.linear_model.least_angle import _lars_path_residues, LassoLarsIC\n+import numpy as np\n \n diabetes = datasets.load_diabetes()\n X, y = diabetes.data, diabetes.target\n",
  "scikit-learn__scikit-learn-13124": "",
  "scikit-learn__scikit-learn-13135": "diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py\nindex a18a1c5..aa1e6d0 100644\n--- a/sklearn/preprocessing/tests/test_discretization.py\n+++ b/sklearn/preprocessing/tests/test_discretization.py\n@@ -185,11 +185,11 @@ def test_invalid_strategy_option():\n \n \n @pytest.mark.parametrize(\n-    'strategy, expected_2bins, expected_3bins',\n-    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2]),\n-     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2]),\n-     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2])])\n-def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n+    'strategy, expected_2bins, expected_3bins, expected_5bins',\n+    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2], [0, 0, 1, 1, 4, 4]),\n+     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2], [0, 0, 1, 2, 3, 4]),\n+     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2], [0, 1, 2, 3, 4, 4])])\n+def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins, expected_5bins):\n     X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n \n     # with 2 bins\n",
  "scikit-learn__scikit-learn-13142": "",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/pipeline.py b/sklearn/pipeline.py\nindex 4594f40..8f6fc9c 100644\n--- a/sklearn/pipeline.py\n+++ b/sklearn/pipeline.py\n@@ -126,6 +126,10 @@ class Pipeline(_BaseComposition):\n     # BaseEstimator interface\n     _required_parameters = ['steps']\n \n+    def __len__(self):\n+        \"\"\"Returns the number of steps in the Pipeline.\"\"\"\n+        return len(self.steps)\n+\n     def __init__(self, steps, memory=None):\n         self.steps = steps\n         self._validate_steps()\n",
  "scikit-learn__scikit-learn-13496": "",
  "scikit-learn__scikit-learn-13779": "",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..f74ffc0 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -396,6 +396,22 @@ def test_export_text():\n     assert export_text(reg, decimals=1) == expected_report\n     assert export_text(reg, decimals=1, show_weights=True) == expected_report\n \n+    # Test case for the issue when the tree has only one feature\n+    X_single_feature = [[-2], [-1], [0], [1], [2]]\n+    y_single_feature = [-1, -1, -1, 1, 1]\n+\n+    clf_single = DecisionTreeClassifier(max_depth=2, random_state=0)\n+    clf_single.fit(X_single_feature, y_single_feature)\n+\n+    expected_report_single = dedent(\"\"\"\n+    |--- sepal_length <= 0.50\n+    |   |--- class: -1\n+    |--- sepal_length >  0.50\n+    |   |--- class: 1\n+    \"\"\").lstrip()\n+    \n+    assert export_text(clf_single, feature_names=['sepal_length']) == expected_report_single\n+\n \n def test_plot_tree_entropy(pyplot):\n     # mostly smoke tests\n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..b5bafcd 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1531,8 +1531,39 @@ def test_LogisticRegressionCV_GridSearchCV_elastic_net_ovr():\n     assert (lrcv.predict(X_train) == gs.predict(X_train)).mean() >= .8\n     assert (lrcv.predict(X_test) == gs.predict(X_test)).mean() >= .8\n \n+import pytest\n+import numpy as np\n+from sklearn.linear_model import LogisticRegressionCV\n+from sklearn.datasets import make_classification\n \n-@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial'))\n+@pytest.mark.parametrize('penalty', ('l2', 'elasticnet'))\n+@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial', 'auto'))\n+def test_LogisticRegressionCV_no_refit_parametrized(penalty, multi_class):\n+    # Test LogisticRegressionCV with various penalties and multi_class settings when refit is False\n+    n_classes = 3\n+    n_features = 20\n+    X, y = make_classification(n_samples=200, n_classes=n_classes,\n+                               n_informative=n_classes, n_features=n_features,\n+                               random_state=0)\n+\n+    Cs = np.logspace(-4, 4, 3)\n+    \n+    if penalty == 'elasticnet':\n+        solver = 'saga'\n+        l1_ratios = np.linspace(0, 1, 2)\n+    else:\n+        solver = 'liblinear'\n+        l1_ratios = None\n+\n+    lrcv = LogisticRegressionCV(penalty=penalty, Cs=Cs, solver=solver,\n+                                l1_ratios=l1_ratios, random_state=0,\n+                                multi_class=multi_class, refit=False)\n+    lrcv.fit(X, y)\n+\n+    assert lrcv.C_.shape == (n_classes,)\n+    if l1_ratios is not None:\n+        assert lrcv.l1_ratio_.shape == (n_classes,)\n+    assert lrcv.coef_.shape == (n_classes, n_features)\n def test_LogisticRegressionCV_no_refit(multi_class):\n     # Test LogisticRegressionCV attribute shapes when refit is False\n \n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/tests/test_show_versions.py b/sklearn/utils/tests/test_show_versions.py\nindex fa39255..322b624 100644\n--- a/sklearn/utils/tests/test_show_versions.py\n+++ b/sklearn/utils/tests/test_show_versions.py\n@@ -14,6 +14,13 @@ def test_get_sys_info():\n \n def test_get_deps_info():\n     deps_info = _get_deps_info()\n+    assert 'joblib' in deps_info\n+\n+def test_joblib_in_show_versions(capsys):\n+    show_versions()\n+    out, err = capsys.readouterr()\n+    assert 'joblib' in out\n+    deps_info = _get_deps_info()\n \n     assert 'pip' in deps_info\n     assert 'setuptools' in deps_info\n@@ -30,4 +37,4 @@ def test_show_versions_with_blas(capsys):\n     out, err = capsys.readouterr()\n     assert 'python' in out\n     assert 'numpy' in out\n-    assert 'BLAS' in out\n+    assert 'BLAS' in out\n",
  "scikit-learn__scikit-learn-14496": "",
  "scikit-learn__scikit-learn-14710": "",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..009aaf9 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,7 +680,51 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n-def test_sparse_precomputed():\n+import numpy as np\n+import pytest\n+from scipy import sparse\n+from sklearn import svm\n+\n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for the ZeroDivisionError when support_vectors_ is empty\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    \n+    # Assert no support vectors, handled by empty sparse matrix\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n+    # Additional check for model attributes\n+    assert model.dual_coef_.shape == (1, 0)  # dual_coef_ should be (n_class, n_SV)\n+    assert model.support_.size == 0\n+    assert model.intercept_.size == 1\n+\n+def test_sparse_fit_with_no_support():\n+    # Test scenario where the data leads to no support vectors being chosen\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0]])\n+    y_train = np.array([0.0, 0.0, 0.0])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    \n+    # Ensure the properties are correctly set\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n+def test_sparse_empty_input():\n+    # Test with completely empty sparse input\n+    X_train = sparse.csr_matrix((0, 4))  # 0 samples, 4 features\n+    y_train = np.array([])\n+    model = svm.SVR(kernel='linear')\n+    \n+    with pytest.raises(ValueError):\n+        model.fit(X_train, y_train)  # Should raise a ValueError due to empty input\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n     try:\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..dcac922 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -97,8 +97,28 @@ def test_strip_accents():\n     expected = 'this is a test'\n     assert strip_accents_unicode(a) == expected\n \n+def test_strip_accents_unicode_nfkd():\n+    # strings that are already decomposed\n+    a = \"o\\u0308\"  # o with diaresis\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # combining marks by themselves\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Multiple combining marks on one character\n+    a = \"o\\u0308\\u0304\"\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Test the original issue example s1 and s2\n+    s1 = chr(241)  # LATIN SMALL LETTER N WITH TILDE\n+    s2 = chr(110) + chr(771)  # LATIN SMALL LETTER N followed by COMBINING TILDE\n \n-def test_to_ascii():\n+    assert strip_accents_unicode(s1) == \"n\"\n+    assert strip_accents_unicode(s2) == \"n\"\n     # check some classical latin accentuated symbols\n     a = '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb'\n     expected = 'aaaaaaceeee'\n",
  "scikit-learn__scikit-learn-25102": "diff --git a/sklearn/feature_selection/tests/test_base.py b/sklearn/feature_selection/tests/test_base.py\nindex bf2d07e..be2fe52 100644\n--- a/sklearn/feature_selection/tests/test_base.py\n+++ b/sklearn/feature_selection/tests/test_base.py\n@@ -108,9 +108,33 @@ def test_inverse_transform_sparse():\n     with pytest.raises(ValueError):\n         sel.inverse_transform(np.array([[1], [2]]))\n \n-\n-def test_get_support():\n+from sklearn.datasets import load_iris\n+import numpy as np\n+import pytest\n+from sklearn.feature_selection import SelectKBest, chi2\n+from sklearn.utils._testing import assert_array_equal\n+\n+def test_output_dataframe_keeps_dtypes():\n+    \"\"\"Check output dtypes are consistent with input dtypes when using SelectKBest.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+\n+    X, y = load_iris(return_X_y=True, as_frame=True)\n+    X = X.astype(\n+       {\n+           \"petal width (cm)\": np.float16,\n+           \"petal length (cm)\": np.float16,\n+       }\n+    )\n+    X[\"cat\"] = y.astype(\"category\")\n+\n+    selector = SelectKBest(chi2, k=2).set_output(transform=\"pandas\")\n+    X_out = selector.fit_transform(X, y)\n+\n+    # Check that the output dtypes match the input dtypes for the selected columns\n+    expected_dtypes = X.dtypes.loc[X_out.columns]\n+    for col, dtype in X_out.dtypes.items():\n+        assert dtype == expected_dtypes[col], f\"Column {col} dtype mismatch\"\n     sel = StepSelector()\n     sel.fit(X, y)\n     assert_array_equal(support, sel.get_support())\n-    assert_array_equal(support_inds, sel.get_support(indices=True))\n+    assert_array_equal(support_inds, sel.get_support(indices=True))\n",
  "scikit-learn__scikit-learn-25232": "",
  "scikit-learn__scikit-learn-25931": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3714d1a..3de0b40 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -333,9 +333,29 @@ def test_base_estimator_property_deprecated():\n     model = IsolationForest()\n     model.fit(X, y)\n \n+def test_iforest_preserve_feature_names():\n+    \"\"\"Check that feature names are preserved when contamination is not 'auto'.\n+\n+    Feature names are required for consistency checks during scoring.\n+\n+    Non-regression test for Issue #25844\n+    \"\"\"\n+    import warnings\n+    import numpy as np\n+    import pytest\n+    pd = pytest.importorskip(\"pandas\")\n+    rng = np.random.RandomState(0)\n+\n+    X = pd.DataFrame(data=rng.randn(4, 1), columns=[\"a\"])\n+    model = IsolationForest(random_state=0, contamination=0.05)\n+\n+    with warnings.catch_warnings():\n+        warnings.simplefilter(\"error\", UserWarning)\n+        model.fit(X)\n+\n     warn_msg = (\n         \"Attribute `base_estimator_` was deprecated in version 1.2 and \"\n         \"will be removed in 1.4. Use `estimator_` instead.\"\n     )\n     with pytest.warns(FutureWarning, match=warn_msg):\n-        model.base_estimator_\n+        model.base_estimator_\n",
  "scikit-learn__scikit-learn-25973": "diff --git a/sklearn/feature_selection/tests/test_sequential.py b/sklearn/feature_selection/tests/test_sequential.py\nindex 42e1fbb..1a8bec2 100644\n--- a/sklearn/feature_selection/tests/test_sequential.py\n+++ b/sklearn/feature_selection/tests/test_sequential.py\n@@ -313,4 +313,33 @@ def test_backward_neg_tol():\n     new_score = lr.fit(Xr, y).score(Xr, y)\n \n     assert 0 < sfs.get_support().sum() < X.shape[1]\n-    assert new_score < initial_score\n+    assert new_score < initial_score\n+\n+def test_sequential_feature_selector_with_iterable_cv():\n+    \"\"\"Test SequentialFeatureSelector with an iterable of splits.\"\"\"\n+\n+    from sklearn.datasets import make_classification\n+    from sklearn.feature_selection import SequentialFeatureSelector\n+    from sklearn.neighbors import KNeighborsClassifier\n+    from sklearn.model_selection import LeaveOneGroupOut\n+    import numpy as np\n+\n+    # Generate a random dataset\n+    X, y = make_classification(random_state=0)\n+    \n+    # Create groups for the LeaveOneGroupOut cross-validator\n+    groups = np.zeros_like(y, dtype=int)\n+    groups[y.size // 2 :] = 1\n+    \n+    # Initialize the LeaveOneGroupOut cross-validator\n+    cv = LeaveOneGroupOut()\n+    splits = cv.split(X, y, groups=groups)\n+    \n+    # Initialize the classifier\n+    knc = KNeighborsClassifier(n_neighbors=5)\n+    \n+    # Initialize the SequentialFeatureSelector with the iterable splits\n+    sfs = SequentialFeatureSelector(knc, n_features_to_select=5, cv=splits)\n+    \n+    # Fit the model and ensure no exceptions are raised\n+    sfs.fit(X, y)\n",
  "scikit-learn__scikit-learn-26323": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex b52e888..6ca66c7 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -13,7 +13,11 @@ from sklearn.utils._testing import assert_array_equal\n from sklearn.utils._testing import assert_allclose_dense_sparse\n from sklearn.utils._testing import assert_almost_equal\n \n-from sklearn.base import BaseEstimator, TransformerMixin\n+import pytest\n+import numpy as np\n+import pandas as pd\n+from sklearn.feature_selection import VarianceThreshold\n+from sklearn.utils._testing import assert_array_equal\n from sklearn.compose import (\n     ColumnTransformer,\n     make_column_transformer,\n@@ -24,7 +28,68 @@ from sklearn.preprocessing import FunctionTransformer\n from sklearn.preprocessing import StandardScaler, Normalizer, OneHotEncoder\n \n \n-class Trans(TransformerMixin, BaseEstimator):\n+def test_remainder_set_output():\n+    \"\"\"Check that the output is set for the remainder.\n+\n+    Non-regression test for #26306.\n+    \"\"\"\n+\n+    df = pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3]})\n+\n+    ct = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+\n+    out = ct.fit_transform(df)\n+    pd.testing.assert_frame_equal(out, df)\n+\n+    ct.set_output(transform=\"default\")\n+    out = ct.fit_transform(df)\n+    assert isinstance(out, np.ndarray)\n+\n+def test_remainder_set_output_multiple_types():\n+    \"\"\"Test set_output with different types of remainder and selectors.\"\"\"\n+\n+    df = pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3], \"c\": [1, 1, 1]})\n+\n+    # Test with a numerical selector\n+    ct_numeric = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct_numeric.set_output(transform=\"pandas\")\n+\n+    out_numeric = ct_numeric.fit_transform(df)\n+    expected_numeric = pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3], \"c\": [1, 1, 1]})\n+    pd.testing.assert_frame_equal(out_numeric, expected_numeric)\n+\n+    # Test with non-boolean selector\n+    ct_non_bool = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_exclude=bool)),\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct_non_bool.set_output(transform=\"pandas\")\n+\n+    out_non_bool = ct_non_bool.fit_transform(df)\n+    expected_non_bool = pd.DataFrame({\"b\": [1, 2, 3], \"c\": [1, 1, 1]})\n+    pd.testing.assert_frame_equal(out_non_bool, expected_non_bool)\n+\n+    # Test with passing None remainder\n+    ct_none = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=None,\n+        verbose_feature_names_out=False,\n+    )\n+    ct_none.set_output(transform=\"pandas\")\n+\n+    out_none = ct_none.fit_transform(df)\n+    expected_none = pd.DataFrame({\"a\": [True, False, True]})\n+    pd.testing.assert_frame_equal(out_none, expected_none)\n     def fit(self, X, y=None):\n         return self\n \n",
  "scikit-learn__scikit-learn-9288": "diff --git a/sklearn/cluster/tests/test_k_means.py b/sklearn/cluster/tests/test_k_means.py\nindex abeeff0..0192310 100644\n--- a/sklearn/cluster/tests/test_k_means.py\n+++ b/sklearn/cluster/tests/test_k_means.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for K-means\"\"\"\n import sys\n \n@@ -944,6 +945,24 @@ def test_k_means_empty_cluster_relocated():\n     assert len(set(km.labels_)) == 2\n     assert_allclose(km.cluster_centers_, [[-1], [1]])\n \n+def test_result_of_kmeans_equal_in_diff_n_jobs():\n+    # PR 9288\n+    rnd = np.random.RandomState(0)\n+    X = rnd.normal(size=(50, 10))\n+\n+    result_1 = KMeans(n_clusters=3, random_state=0, n_jobs=1).fit(X).labels_\n+    result_2 = KMeans(n_clusters=3, random_state=0, n_jobs=2).fit(X).labels_\n+    assert_array_equal(result_1, result_2)\n+\n+    # Check inertia\n+    inertia_1 = KMeans(n_clusters=3, random_state=0, n_jobs=1).fit(X).inertia_\n+    inertia_2 = KMeans(n_clusters=3, random_state=0, n_jobs=2).fit(X).inertia_\n+    assert_almost_equal(inertia_1, inertia_2)\n+\n+    # Check cluster centers\n+    centers_1 = KMeans(n_clusters=3, random_state=0, n_jobs=1).fit(X).cluster_centers_\n+    centers_2 = KMeans(n_clusters=3, random_state=0, n_jobs=2).fit(X).cluster_centers_\n+    assert_array_almost_equal(centers_1, centers_2)\n \n def test_minibatch_kmeans_partial_fit_int_data():\n     # Issue GH #14314\n",
  "sphinx-doc__sphinx-10323": "diff --git a/tests/test_directive_code.py b/tests/test_directive_code.py\nindex 949c70e..ffd7fb7 100644\n--- a/tests/test_directive_code.py\n+++ b/tests/test_directive_code.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the code-block directive.\"\"\"\n \n import os\n@@ -250,6 +251,43 @@ def test_LiteralIncludeReader_dedent(literal_inc_path):\n                        \"    pass\\n\"\n                        \"\\n\")\n \n+@pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n+def test_LiteralIncludeReader_dedent_and_prepend_indentation(testroot):\n+    # This test case is designed to check if 'prepend' maintains indentation\n+    # when used with XML content and dedent option.\n+\n+    xml_content = \"\"\"\\\n+    <plugin>\n+      <groupId>com.github.ekryd.sortpom</groupId>\n+      <artifactId>sortpom-maven-plugin</artifactId>\n+      <version>2.15.0</version>\n+      <configuration>\n+        <verifyFailOn>strict</verifyFailOn>\n+      </configuration>\n+    </plugin>\"\"\"\n+    \n+    # Assuming testroot / 'pom.xml' is a path to a test file with the XML content above.\n+    options = {\n+        'language': 'xml',\n+        'start-at': '<groupId>com.github.ekryd.sortpom</groupId>',\n+        'end-at': '</plugin>',\n+        'prepend': '      <plugin>',\n+        'dedent': 2\n+    }\n+    reader = LiteralIncludeReader(testroot / 'pom.xml', options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    \n+    expected_content = \"\"\"\\\n+      <plugin>\n+      <groupId>com.github.ekryd.sortpom</groupId>\n+      <artifactId>sortpom-maven-plugin</artifactId>\n+      <version>2.15.0</version>\n+      <configuration>\n+        <verifyFailOn>strict</verifyFailOn>\n+      </configuration>\n+    </plugin>\"\"\"\n+    \n+    assert content.strip() == expected_content.strip()\n \n @pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n def test_LiteralIncludeReader_tabwidth(testroot):\n",
  "sphinx-doc__sphinx-10449": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 82ec43a..d0dcb03 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1023,7 +1023,19 @@ def test_autodoc_typehints_description_no_undoc_doc_rtype(app):\n             '   Return type:\\n'\n             '      None\\n' == context)\n \n-\n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\"})\n+def test_autodoc_typehints_description_class_no_return_type(app):\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: target.simple_class.SimpleClass\\n',\n+        encoding='utf8'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n+    assert ('class target.simple_class.SimpleClass\\n'\n+            '\\n'\n+            '   A simple class with no return type in description.\\n' in context)\n+            \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\"})\n def test_autodoc_typehints_description_with_documented_init(app):\n",
  "sphinx-doc__sphinx-10466": "diff --git a/tests/test_build_gettext.py b/tests/test_build_gettext.py\nindex a6fc946..5eb4d37 100644\n--- a/tests/test_build_gettext.py\n+++ b/tests/test_build_gettext.py\n@@ -1,3 +1,51 @@\n+\n+def test_Catalog_no_duplicate_locations():\n+    catalog = Catalog()\n+    \n+    # Add the same message with the same origin multiple times\n+    catalog.add('duplicate_test', MsgOrigin('path/to/file', 10))\n+    catalog.add('duplicate_test', MsgOrigin('path/to/file', 10))\n+    catalog.add('duplicate_test', MsgOrigin('path/to/file', 10))\n+    \n+    # Add the same message with different origins\n+    catalog.add('duplicate_test', MsgOrigin('path/to/file', 20))\n+    catalog.add('duplicate_test', MsgOrigin('another/path/to/file', 30))\n+    \n+    # Verify that there are no duplicate locations\n+    messages = list(catalog)\n+    assert len(messages) == 1\n+    assert messages[0].text == 'duplicate_test'\n+    assert messages[0].locations == [\n+        ('path/to/file', 10),\n+        ('path/to/file', 20),\n+        ('another/path/to/file', 30)\n+    ]\n+\n+def test_Catalog_multiple_messages_no_duplicates():\n+    catalog = Catalog()\n+    \n+    # Add multiple messages with varying origins\n+    catalog.add('first_message', MsgOrigin('path/one', 5))\n+    catalog.add('first_message', MsgOrigin('path/one', 5))\n+    catalog.add('first_message', MsgOrigin('path/one', 10))\n+    catalog.add('second_message', MsgOrigin('path/two', 15))\n+    catalog.add('second_message', MsgOrigin('path/two', 15))\n+    catalog.add('second_message', MsgOrigin('path/two', 20))\n+    \n+    # Verify that each message has distinct locations\n+    messages = list(catalog)\n+    assert len(messages) == 2\n+    assert messages[0].text == 'first_message'\n+    assert messages[0].locations == [\n+        ('path/one', 5),\n+        ('path/one', 10)\n+    ]\n+    assert messages[1].text == 'second_message'\n+    assert messages[1].locations == [\n+        ('path/two', 15),\n+        ('path/two', 20)\n+    ]\n+\n \"\"\"Test the build process with gettext builder with the test root.\"\"\"\n \n import gettext\n@@ -9,6 +57,7 @@ from subprocess import PIPE, CalledProcessError\n import pytest\n \n from sphinx.util.osutil import cd\n+from sphinx.builders.gettext import Catalog, MsgOrigin\n \n \n @pytest.mark.sphinx('gettext', srcdir='root-gettext')\n",
  "sphinx-doc__sphinx-10673": "",
  "sphinx-doc__sphinx-7440": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 975a00f..5dc50b5 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -146,6 +146,40 @@ def test_glossary(app):\n     assert (\"term2\", \"term2\", \"term\", \"index\", \"term-term2\", -1) in objects\n     assert (\"term3\", \"term3\", \"term\", \"index\", \"term-term3\", -1) in objects\n     assert (\"term4\", \"term4\", \"term\", \"index\", \"term-term4\", -1) in objects\n+    \n+    # test case for case sensitivity in glossary terms\n+    text_case_sensitive = (\".. glossary::\\n\"\n+                           \"\\n\"\n+                           \"   mysql\\n\"\n+                           \"       description for lowercase mysql\\n\"\n+                           \"\\n\"\n+                           \"   MySQL\\n\"\n+                           \"       description for uppercase MySQL\\n\")\n+\n+    # doctree for case sensitivity\n+    doctree_case_sensitive = restructuredtext.parse(app, text_case_sensitive)\n+    assert_node(doctree_case_sensitive, (\n+        [glossary, definition_list, ([definition_list_item, ([term, (\"mysql\",\n+                                                                     index)],\n+                                                             definition)],\n+                                     [definition_list_item, ([term, (\"MySQL\",\n+                                                                     index)],\n+                                                             definition)])],\n+    ))\n+    assert_node(doctree_case_sensitive[0][0][0][0][1],\n+                entries=[(\"single\", \"mysql\", \"term-mysql\", \"main\", None)])\n+    assert_node(doctree_case_sensitive[0][0][0][1],\n+                [definition, nodes.paragraph, \"description for lowercase mysql\"])\n+    \n+    assert_node(doctree_case_sensitive[0][0][1][0][1],\n+                entries=[(\"single\", \"MySQL\", \"term-MySQL\", \"main\", None)])\n+    assert_node(doctree_case_sensitive[0][0][1][1],\n+                [definition, nodes.paragraph, \"description for uppercase MySQL\"])\n+\n+    # index for case sensitivity\n+    objects_case_sensitive = list(app.env.get_domain(\"std\").get_objects())\n+    assert (\"mysql\", \"mysql\", \"term\", \"index\", \"term-mysql\", -1) in objects_case_sensitive\n+    assert (\"MySQL\", \"MySQL\", \"term\", \"index\", \"term-MySQL\", -1) in objects_case_sensitive\n \n \n def test_glossary_warning(app, status, warning):\n",
  "sphinx-doc__sphinx-7757": "",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..da00653 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -11,6 +12,7 @@\n import abc\n import sys\n from importlib import import_module\n+from typing import TypeVar, Generic\n \n import pytest\n \n@@ -47,6 +49,21 @@ def test_MockObject():\n \n     obj = SubClass()\n     assert SubClass.__doc__ == \"docstring of SubClass\"\n+    \n+    # Test case for generically-typed class\n+    T = TypeVar('T')\n+\n+    class SubClass2(mock.SomeClass[T]):\n+        \"\"\"docstring of SubClass2\"\"\"\n+\n+        def method(self, value: T) -> T:\n+            return value\n+\n+    obj2 = SubClass2()\n+    assert SubClass2.__doc__ == \"docstring of SubClass2\"\n+    assert isinstance(obj2, SubClass2)\n+    assert obj2.method(10) == 10\n+    assert obj2.method(\"test\") == \"test\"\n     assert isinstance(obj, SubClass)\n     assert obj.method() == \"string\"\n     assert isinstance(obj.other_method(), SubClass)\n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex 464108d..5241b4d 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -1262,7 +1262,21 @@ def test_automethod_for_builtin(app):\n     ]\n \n \n+from sphinx.testing.util import simple_decorator\n+\n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_decorated_init_documentation(app):\n+    # Define a class with a decorated __init__ method\n+    class SampleClass:\n+        @simple_decorator\n+        def __init__(self):\n+            \"\"\"This is a decorated init method.\"\"\"\n+            pass\n+\n+    # Perform autodoc on the SampleClass to ensure __init__ is documented\n+    actual = do_autodoc(app, 'class', 'SampleClass')\n+    assert '.. py:method:: __init__' in actual\n+    assert 'This is a decorated init method.' in actual\n def test_automethod_for_decorated(app):\n     actual = do_autodoc(app, 'method', 'target.decorator.Bar.meth')\n     assert list(actual) == [\n@@ -1273,7 +1287,21 @@ def test_automethod_for_decorated(app):\n     ]\n \n \n+from sphinx.testing.util import simple_decorator\n+\n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_decorated_init_documentation(app):\n+    # Define a class with a decorated __init__ method\n+    class SampleClass:\n+        @simple_decorator\n+        def __init__(self):\n+            \"\"\"This is a decorated init method.\"\"\"\n+            pass\n+\n+    # Perform autodoc on the SampleClass to ensure __init__ is documented\n+    actual = do_autodoc(app, 'class', 'SampleClass')\n+    assert '.. py:method:: __init__' in actual\n+    assert 'This is a decorated init method.' in actual\n def test_abstractmethods(app):\n     options = {\"members\": None,\n                \"undoc-members\": None}\n",
  "sphinx-doc__sphinx-7985": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 5b1b2ed..1c8b5c4 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -32,6 +32,20 @@ def test_defaults(app, status, warning):\n     assert \"Not Found for url: https://www.google.com/image2.png\" in content\n     assert len(content.splitlines()) == 5\n \n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n+def test_local_links(app, status, warning):\n+    app.builder.build_all()\n+\n+    assert (app.outdir / 'output.txt').exists()\n+    content = (app.outdir / 'output.txt').read_text()\n+\n+    print(content)\n+    # Verify local links\n+    assert \"broken local-link\" in content\n+    assert \"[broken] doesntexist\" in content\n+    # The local link should be identified as broken\n+    assert len(content.splitlines()) == 6\n+\n \n @pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n def test_defaults_json(app, status, warning):\n",
  "sphinx-doc__sphinx-8035": "diff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex ad1d950..ec6c20a 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_private_members\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -14,7 +15,46 @@ from test_ext_autodoc import do_autodoc\n \n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n-def test_private_field(app):\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_specific_private_members(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None,\n+               \"private-members\": \"_private_method,_another_private_method\"}\n+    actual = do_autodoc(app, 'class', 'target.ClassWithPrivateMembers', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: ClassWithPrivateMembers',\n+        '   :module: target',\n+        '',\n+        '   ClassWithPrivateMembers docstring.',\n+        '',\n+        '',\n+        '   .. py:method:: ClassWithPrivateMembers._private_method(self)',\n+        '      :module: target',\n+        '',\n+        '      _private_method docstring.',\n+        '',\n+        '',\n+        '   .. py:method:: ClassWithPrivateMembers._another_private_method(self)',\n+        '      :module: target',\n+        '',\n+        '      _another_private_method docstring.',\n+        '',\n+    ]\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_no_private_members(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None}\n+    actual = do_autodoc(app, 'class', 'target.ClassWithPrivateMembers', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: ClassWithPrivateMembers',\n+        '   :module: target',\n+        '',\n+        '   ClassWithPrivateMembers docstring.',\n+        '',\n+    ]\n     app.config.autoclass_content = 'class'\n     options = {\"members\": None}\n     actual = do_autodoc(app, 'module', 'target.private', options)\n",
  "sphinx-doc__sphinx-8120": "diff --git a/tests/test_intl.py b/tests/test_intl.py\nindex 58339b1..837a81d 100644\n--- a/tests/test_intl.py\n+++ b/tests/test_intl.py\n@@ -1286,6 +1286,38 @@ def test_image_glob_intl_using_figure_language_filename(app):\n                 candidates={'application/pdf': 'subdir/svgimg.pdf',\n                             'image/svg+xml': 'subdir/svgimg.svg'})\n \n+from babel.messages import pofile\n+from sphinx import locale\n \n-def getwarning(warnings):\n-    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n+import pytest\n+from babel.messages.catalog import Catalog\n+\n+@pytest.mark.sphinx('html', testroot='basic', confoverrides={'language': 'da'})\n+def test_custom_locale_translation(make_app, app_params, sphinx_test_tempdir):\n+    try:\n+        # clear translators cache\n+        locale.translators.clear()\n+\n+        # prepare message catalog (.po)\n+        locale_dir = sphinx_test_tempdir / 'basic' / 'locale' / 'da' / 'LC_MESSAGES'\n+        locale_dir.makedirs()\n+        with (locale_dir / 'sphinx.po').open('wb') as f:\n+            catalog = Catalog()\n+            catalog.add('Fig. %s', 'Foobar %s')\n+            catalog.add('Listing %s', 'Whatever %s')\n+            pofile.write_po(f, catalog)\n+\n+        # construct application and convert po file to .mo\n+        args, kwargs = app_params\n+        app = make_app(*args, **kwargs)\n+        assert (locale_dir / 'sphinx.mo').exists()\n+        assert app.translator.gettext('Fig. %s') % '1' == 'Foobar 1'\n+        assert app.translator.gettext('Listing %s') % '1' == 'Whatever 1'\n+\n+        app.build()\n+        content = (app.outdir / 'index.html').read_text()\n+        assert 'Foobar 1' in content\n+        assert 'Whatever 1' in content\n+    finally:\n+        locale.translators.clear()\n+    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n",
  "sphinx-doc__sphinx-8269": "",
  "sphinx-doc__sphinx-8459": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex d1881df..3439743 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_configs\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -8,6 +9,44 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+import pytest\n+import sys\n+from sphinx.testing.path import path\n+from sphinx.testing.util import SphinxTestApp\n+\n+@pytest.mark.skipif(sys.version_info < (3, 7), reason='python 3.7+ is required.')\n+@pytest.mark.sphinx('text', testroot='ext-autodoc', srcdir='autodoc_typehints_description_and_type_aliases')\n+def test_autodoc_typehints_with_type_aliases(app: SphinxTestApp):\n+    \"\"\"Test if autodoc_type_aliases work with autodoc_typehints set to 'description'.\"\"\"\n+\n+    # Write the directive to the rst file\n+    (app.srcdir / 'annotations.rst').write_text('.. autofunction:: types.sphinx_doc\\n')\n+\n+    # Build the documentation\n+    app.build()\n+\n+    # Read the generated output\n+    context = (app.outdir / 'annotations.txt').read_text()\n+\n+    # Check if the type alias is correctly resolved\n+    expected_output = (\n+        \"types.sphinx_doc(data)\\n\"\n+        \"\\n\"\n+        \"   Does it work.\\n\"\n+        \"\\n\"\n+        \"   Parameters:\\n\"\n+        \"      * **data** (*types.JSONObject*) --\\n\"\n+        \"         Does it args.\\n\"\n+        \"\\n\"\n+        \"   Returns:\\n\"\n+        \"      Does it work in return.\\n\"\n+        \"\\n\"\n+        \"   Return type:\\n\"\n+        \"      types.JSONObject\\n\"\n+    )\n+\n+    assert expected_output in context\n+\n import platform\n import sys\n \n",
  "sphinx-doc__sphinx-8475": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 41632e7..fce30fe 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -372,6 +372,28 @@ def test_connect_to_selfsigned_nonexistent_cert_file(app):\n     with https_server(OKHandler):\n         app.builder.build_all()\n \n+import pytest\n+import http.server\n+import json\n+from sphinx_testing.util import SphinxTestApp\n+from sphinx.util import requests\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_TooManyRedirects_on_HEAD(app):\n+    class InfiniteRedirectOnHeadHandler(http.server.BaseHTTPRequestHandler):\n+        def do_HEAD(self):\n+            self.send_response(302, \"Found\")\n+            self.send_header(\"Location\", \"http://localhost:7777/\")\n+            self.end_headers()\n+\n+        def do_GET(self):\n+            self.send_response(200, \"OK\")\n+            self.end_headers()\n+            self.wfile.write(b\"ok\\\\n\")\n+\n+    with http_server(InfiniteRedirectOnHeadHandler):\n+        app.builder.build_all()\n+\n     with open(app.outdir / 'output.json') as fp:\n         content = json.load(fp)\n     assert content == {\n@@ -381,4 +403,4 @@ def test_connect_to_selfsigned_nonexistent_cert_file(app):\n         \"lineno\": 1,\n         \"uri\": \"https://localhost:7777/\",\n         \"info\": \"Could not find a suitable TLS CA certificate bundle, invalid path: does/not/exist\",\n-    }\n+    }\n",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..a9e98f2 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -20,6 +20,70 @@ from sphinx import addnodes\n from sphinx.ext.autodoc import ALL, ModuleLevelDocumenter, Options\n from sphinx.ext.autodoc.directive import DocumenterBridge, process_documenter_options\n from sphinx.testing.util import SphinxTestApp, Struct  # NOQA\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_resolved_issue_with_empty_all(app):\n+    # Verify that when __all__ is empty, no functions are documented\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.empty_all',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+    ]\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_explicit_members_ignore_all(app):\n+    # Verify that explicit members override empty __all__\n+    options = {'members': ['foo', 'bar']}\n+    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.empty_all',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+        '.. py:function:: foo()',\n+        '   :module: target.empty_all',\n+        '',\n+        '   docstring',\n+        '',\n+        '.. py:function:: bar()',\n+        '   :module: target.empty_all',\n+        '',\n+        '   docstring',\n+        '',\n+    ]\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_ignore_module_all_option(app):\n+    # Verify that using the :ignore-module-all: option documents all members\n+    options = {'members': True, 'ignore-module-all': True}\n+    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.empty_all',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+        '.. py:function:: foo()',\n+        '   :module: target.empty_all',\n+        '',\n+        '   docstring',\n+        '',\n+        '.. py:function:: bar()',\n+        '   :module: target.empty_all',\n+        '',\n+        '   docstring',\n+        '',\n+        '.. py:function:: baz()',\n+        '   :module: target.empty_all',\n+        '',\n+        '   docstring',\n+        '',\n+    ]\n+\n from sphinx.util.docutils import LoggingReporter\n \n try:\n",
  "sphinx-doc__sphinx-8721": "diff --git a/tests/test_ext_viewcode.py b/tests/test_ext_viewcode.py\nindex d4fba47..6f81a58 100644\n--- a/tests/test_ext_viewcode.py\n+++ b/tests/test_ext_viewcode.py\n@@ -61,6 +61,21 @@ def test_linkcode(app, status, warning):\n     assert 'http://foobar/cpp/' in stuff\n \n \n+\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode', confoverrides={'viewcode_enable_epub': False})\n+def test_viewcode_epub_disabled_explicitly(app, status, warning):\n+    app.builder.build_all()\n+\n+    # Confirm that module pages are not generated when viewcode_enable_epub=False\n+    assert not (app.outdir / '_modules/spam/mod1.xhtml').exists()\n+\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode', confoverrides={'viewcode_enable_epub': None})\n+def test_viewcode_epub_unspecified(app, status, warning):\n+    app.builder.build_all()\n+\n+    # Confirm that module pages are not generated when viewcode_enable_epub is not specified\n+    assert not (app.outdir / '_modules/spam/mod1.xhtml').exists()\n+\n @pytest.mark.sphinx(testroot='ext-viewcode-find')\n def test_local_source_files(app, status, warning):\n     def find_source(app, modname):\n",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex 577c367..3542800 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -320,8 +320,25 @@ def test_autodoc_process_signature_typehints(app):\n     assert captured == [(app, 'function', 'func', func,\n                          directive.genopt, '(x: int, y: int)', 'int')]\n \n+def test_enum_default_value_rendering(app):\n+    from sphinx.ext.autodoc import FunctionDocumenter\n \n-def test_get_doc(app):\n+    class MyEnum(enum.Enum):\n+        ValueA = 10\n+        ValueB = 20\n+\n+    def ugly_enum_func(e: MyEnum = MyEnum.ValueA) -> None:\n+        pass\n+\n+    directive = make_directive_bridge(app.env)\n+    function_doc = FunctionDocumenter(directive, 'ugly_enum_func')\n+    function_doc.fullname = 'ugly_enum_func'\n+    function_doc.object = ugly_enum_func\n+    function_doc.objpath = ['ugly_enum_func']\n+    signature = function_doc.format_signature()\n+\n+    # Assert that the signature is rendered correctly without the ugly repr of Enum\n+    assert signature == \"(e: ugly_enum.MyEnum = MyEnum.ValueA) -> None\"\n     directive = make_directive_bridge(app.env)\n \n     def getdocl(objtype, obj):\n",
  "sphinx-doc__sphinx-9320": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\nindex ff8df08..1eab46d 100644\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -241,6 +241,20 @@ def test_default_filename(tempdir):\n     exec(conffile.read_text(), ns)\n \n \n+def test_exits_when_existing_confpy(monkeypatch):\n+    # The code detects existing conf.py with path.isfile() \n+    # so we mock it as True with pytest's monkeypatch\n+    def mock_isfile(path):\n+        return True\n+    monkeypatch.setattr(path, 'isfile', mock_isfile)\n+\n+    qs.term_input = mock_input({\n+        'Please enter a new root path (or just Enter to exit)': ''\n+    })\n+    d = {}\n+    with pytest.raises(SystemExit):\n+        qs.ask_user(d)\n+\n def test_extensions(tempdir):\n     qs.main(['-q', '-p', 'project_name', '-a', 'author',\n              '--extensions', 'foo,bar,baz', tempdir])\n",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..285ce81 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -54,6 +54,7 @@ from sphinx.pycode import ast\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n     (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n+    (\"(1,)\", \"(1,)\"),                             # Tuple (single element)\n     (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n",
  "sphinx-doc__sphinx-9591": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 29731ea..70fc7b7 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -847,7 +847,38 @@ def test_pyproperty(app):\n     assert domain.objects['Class.prop2'] == ('index', 'Class.prop2', 'property', False)\n \n \n-def test_pydecorator_signature(app):\n+def test_property_type_annotation_cross_reference(app):\n+    # This test case ensures that cross-references work in property's type annotations\n+    text = (\".. py:class:: Point\\n\"\n+            \"   :module: module\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: x\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: y\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \".. py:class:: Square\\n\"\n+            \"   :module: module\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: start\\n\"\n+            \"      :type: Point\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: width\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: height\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\")\n+\n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n+    \n+    # Ensure cross-reference for property type annotation works\n+    assert_node(doctree[1][1][1][0][1][1], pending_xref, **{\"py:class\": \"Point\"})\n+    assert_node(doctree[1][1][1][0][1][3], pending_xref, **{\"py:class\": \"Point\"})\n     text = \".. py:decorator:: deco\"\n     domain = app.env.get_domain('py')\n     doctree = restructuredtext.parse(app, text)\n",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..c636965 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -756,7 +756,7 @@ def test_pymethod_options(app):\n \n     # :property:\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
  "sphinx-doc__sphinx-9711": "",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..4e44271 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -236,6 +236,29 @@ def test_Point2D():\n     assert p2.distance(p3) == sqrt(17)/2\n \n \n+def test_issue_distance_calculation_ignore_extra_dimensions():\n+    # Test for the issue: 3rd dimension being ignored in distance calculation when Points are zipped.\n+    p1 = Point3D(2, 0, 0)  # 3D Point\n+    p2 = Point3D(1, 0, 2)  # 3D Point\n+    assert p1.distance(p2) == sqrt(5)\n+\n+    p3 = Point2D(2, 0)  # 2D Point\n+    # Expect an exception or a specific behavior when mixing 2D and 3D points\n+    try:\n+        dist = p1.distance(p3)\n+        assert False, \"Expected an exception when calculating distance between 3D and 2D points\"\n+    except ValueError:\n+        pass\n+\n+    # Test 3D to 3D distance with all dimensions\n+    assert Point3D(1, 2, 3).distance(Point3D(4, 6, 8)) == sqrt(50)\n+\n+    # Test 2D to 2D distance\n+    assert Point2D(1, 1).distance(Point2D(4, 5)) == 5\n+\n+from sympy import sqrt\n+from sympy.geometry import Point, Point2D, Point3D\n+\n def test_issue_9214():\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..d362b48 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -741,7 +741,28 @@ def test_special_printers():\n     assert isinstance(func1(), mpi)\n     assert isinstance(func2(), mpi)\n \n-def test_true_false():\n+from sympy.utilities.lambdify import implemented_function\n+from sympy import Float\n+\n+def test_issue_12092():\n+    f = implemented_function('f', lambda x: x**2)\n+    assert f(f(2)).evalf() == Float(16)\n+\n+def test_evalf_recursive_issue():\n+    f = implemented_function('f', lambda x: x ** 2)\n+    g = implemented_function('g', lambda x: 2 * x)\n+    \n+    # Test single function evalf\n+    assert f(2).evalf() == Float(4)\n+    assert g(2).evalf() == Float(4)\n+    \n+    # Test composition of functions\n+    assert f(g(2)).evalf() == Float(16)\n+    assert g(f(2)).evalf() == Float(8)\n+    \n+    # Test deeper nesting\n+    assert f(f(g(2))).evalf() == Float(256)  # f(g(2)) = 16, then f(16) = 256\n+    assert g(g(f(2))).evalf() == Float(16)   # g(f(2)) = 8, then g(8) = 16\n     # We want exact is comparison here, not just ==\n     assert lambdify([], true)() is True\n     assert lambdify([], false)() is False\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..85336bf 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,8 +83,34 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n-\n-def test_Identity_doit():\n+def test_sum_of_identity_elements():\n+    n_val = 3  # Example value for n\n+    In = Identity(n_val)\n+\n+    # Verify sum of all elements in the identity matrix\n+    total_sum = Sum(Sum(In[i, j], (i, 0, n_val-1)), (j, 0, n_val-1)).doit()\n+    assert total_sum == n_val, f\"Expected sum: {n_val}, but got: {total_sum}\"\n+\n+    # Verify trace of the identity matrix\n+    trace_sum = Sum(In[i, i], (i, 0, n_val-1)).doit()\n+    assert trace_sum == n_val, f\"Expected trace sum: {n_val}, but got: {trace_sum}\"\n+\n+    # Test using sympy's built-in trace function\n+    assert In.trace() == n_val, f\"Expected trace: {n_val}, but got: {In.trace()}\"\n+\n+    # Using refine on symbolic expressions\n+    n = Symbol('n', integer=True, positive=True)\n+    M = MatrixSymbol('M', n, n)\n+    with assuming(Query.orthogonal(M)):\n+        e = refine((M.T * M).doit())\n+\n+        # Total sum of the elements of an identity matrix\n+        symbolic_sum = Sum(Sum(e[i, j], (i, 0, n-1)), (j, 0, n-1)).doit()\n+        assert symbolic_sum == n, f\"Expected symbolic sum: {n}, but got: {symbolic_sum}\"\n+\n+        # Trace of the identity matrix\n+        symbolic_trace = Sum(e[i, i], (i, 0, n-1)).doit()\n+        assert symbolic_trace == n, f\"Expected symbolic trace: {n}, but got: {symbolic_trace}\"\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..f041031 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -354,6 +354,21 @@ def test_args():\n     # but this is ok because cycles imply that only those listed moved\n     assert Permutation(4, 5) == Permutation([0, 1, 2, 3, 5, 4])\n \n+    # Test for non-disjoint cycles resolving to identity\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+    \n+    # Test for complex non-disjoint cycles\n+    assert Permutation([[0, 1, 2], [1, 2, 3]]) == Permutation([0, 2, 3, 1])\n+    \n+    # Test for overlapping non-disjoint cycles\n+    assert Permutation([[0, 2], [2, 3]]) == Permutation([0, 3, 2, 1])\n+    \n+    # Test for multiple identical cycles\n+    assert Permutation([[0, 1], [0, 1], [0, 1]]) == Permutation([0, 1])\n+    \n+    # Test for cycles that partially overlap and do not cause issues\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([0, 2, 1])\n+\n \n def test_Cycle():\n     assert str(Cycle()) == '()'\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex fa86bc3..a48c9e8 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -1273,8 +1273,40 @@ def test_zeros_ones_fill():\n     assert zeros(2, 3) == Matrix(2, 3, [0]*6)\n     assert ones(2, 3) == Matrix(2, 3, [1]*6)\n \n-\n-def test_empty_zeros():\n+from sympy import Matrix\n+\n+def test_hstack_vstack_issue():\n+    # Test hstack with 0-row matrices\n+    M1 = Matrix.zeros(0, 0)\n+    M2 = Matrix.zeros(0, 1)\n+    M3 = Matrix.zeros(0, 2)\n+    M4 = Matrix.zeros(0, 3)\n+    result_hstack_0_rows = Matrix.hstack(M1, M2, M3, M4)\n+    assert result_hstack_0_rows.shape == (0, 6)\n+\n+    # Test hstack with 1-row matrices\n+    M1 = Matrix.zeros(1, 0)\n+    M2 = Matrix.zeros(1, 1)\n+    M3 = Matrix.zeros(1, 2)\n+    M4 = Matrix.zeros(1, 3)\n+    result_hstack_1_row = Matrix.hstack(M1, M2, M3, M4)\n+    assert result_hstack_1_row.shape == (1, 6)\n+\n+    # Test vstack with 0-column matrices\n+    M1 = Matrix.zeros(0, 0)\n+    M2 = Matrix.zeros(1, 0)\n+    M3 = Matrix.zeros(2, 0)\n+    M4 = Matrix.zeros(3, 0)\n+    result_vstack_0_cols = Matrix.vstack(M1, M2, M3, M4)\n+    assert result_vstack_0_cols.shape == (6, 0)\n+\n+    # Test vstack with 1-column matrices\n+    M1 = Matrix.zeros(0, 1)\n+    M2 = Matrix.zeros(1, 1)\n+    M3 = Matrix.zeros(2, 1)\n+    M4 = Matrix.zeros(3, 1)\n+    result_vstack_1_col = Matrix.vstack(M1, M2, M3, M4)\n+    assert result_vstack_1_col.shape == (6, 1)\n     a = zeros(0)\n     assert a == Matrix()\n     a = zeros(0, 2)\n",
  "sympy__sympy-13372": "diff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\nindex e95146a..e145e2f 100644\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -171,7 +171,19 @@ def test_evalf_ramanujan():\n # Input that for various reasons have failed at some point\n \n \n-def test_evalf_bugs():\n+from sympy import Mul, Max, NS, Symbol\n+\n+def test_issue_13076():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    # Test the original issue\n+    assert NS(Mul(Max(0, y), x, evaluate=False).evalf()) == 'x*Max(0, y)'\n+    assert NS(Mul(x, Max(0, y), evaluate=False).evalf()) == 'x*Max(0, y)'\n+    # Ensure commutativity and that different orderings do not affect the result\n+    assert NS(Mul(x, Max(2, y), evaluate=False).evalf()) == 'x*Max(2, y)'\n+    assert NS(Mul(Max(2, y), x, evaluate=False).evalf()) == 'x*Max(2, y)'\n+    assert NS(Mul(Max(y, 0), x, evaluate=False).evalf()) == 'x*Max(y, 0)'\n+    assert NS(Mul(x, Max(y, 0), evaluate=False).evalf()) == 'x*Max(y, 0)'\n     assert NS(sin(1) + exp(-10**10), 10) == NS(sin(1), 10)\n     assert NS(exp(10**10) + sin(1), 10) == NS(exp(10**10), 10)\n     assert NS('log(1+1/10**50)', 20) == '1.0000000000000000000e-50'\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..c0b8c5b 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -272,8 +272,24 @@ def test_coth():\n \n     assert coth(k*pi*I) == -cot(k*pi)*I\n \n-\n-def test_coth_series():\n+from sympy import Symbol, coth, log, tan\n+\n+def test_coth_substitution():\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+\n+    # Test specific integral values where the error was reported\n+    assert e.subs(x, 2) is not None\n+    assert e.subs(x, 3) is not None\n+    assert e.subs(x, 5) is not None\n+    assert e.subs(x, 6) is not None\n+    assert e.subs(x, 8) is not None\n+    assert e.subs(x, 9) is not None\n+    assert e.subs(x, 11) is not None\n+    assert e.subs(x, 12) is not None\n+    assert e.subs(x, 13) is not None\n+    assert e.subs(x, 15) is not None\n+    assert e.subs(x, 18) is not None\n     x = Symbol('x')\n     assert coth(x).series(x, 0, 8) == \\\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..b50b502 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -166,7 +166,28 @@ def test_difference():\n \n \n def test_Complement():\n+    from sympy import FiniteSet, Interval, Complement, symbols\n+    \n+    x, y, z = symbols('x y z')\n+    \n     assert Complement(Interval(1, 3), Interval(1, 2)) == Interval(2, 3, True)\n+\n+    # Test case for issue 12712\n+    assert Complement(FiniteSet(x, y, 2), Interval(-10, 10)) == \\\n+            Complement(FiniteSet(x, y), Interval(-10, 10))\n+\n+    # Additional cases\n+    assert Complement(FiniteSet(x, 5, 7), Interval(0, 10)) == \\\n+            Complement(FiniteSet(x), Interval(0, 10))\n+\n+    assert Complement(FiniteSet(x, y, 2, -5), Interval(-10, 0)) == \\\n+            Complement(FiniteSet(x, y, 2), Interval(-10, 0))\n+\n+    assert Complement(FiniteSet(1, 3, 5, 7, 9), Interval(2, 8)) == \\\n+            FiniteSet(1, 9)\n+\n+    assert Complement(FiniteSet(z, 1, 3), Interval(0, 2)) == \\\n+            Complement(FiniteSet(z, 3), Interval(0, 2))\n     assert Complement(FiniteSet(1, 3, 4), FiniteSet(3, 4)) == FiniteSet(1)\n     assert Complement(Union(Interval(0, 2),\n                             FiniteSet(2, 3, 4)), Interval(1, 3)) == \\\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..52f5a4c 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,6 +201,22 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n+def test_col_insert_issue_13643():\n+    # Test for issue 13643\n+    import sympy as sm\n+    M = sm.eye(6)\n+    V = 2 * sm.ones(6, 2)\n+    result = M.col_insert(3, V)\n+    expected = sm.Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert result == expected\n+\n def test_extract():\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..1391b91 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -675,9 +675,26 @@ def test_Poly_mul():\n     assert Poly(1, x) * sin(x) == sin(x)\n \n     assert Poly(x, x) * 2 == Poly(2*x, x)\n+    # Test cases for issue described\n+    assert Poly(x)*x == Poly(x**2, x, domain='ZZ')\n+    assert x*Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert -2*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2)*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert Poly(x)*S(-2) == Poly(-2*x, x, domain='ZZ')\n+    # Additional test cases to ensure correctness\n+    assert Poly(x + 1)*x == Poly(x**2 + x, x, domain='ZZ')\n+    assert x*Poly(x + 1) == Poly(x**2 + x, x, domain='ZZ')\n+    assert Poly(x)*Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert Poly(x + 1)*Poly(x - 1) == Poly(x**2 - 1, x, domain='ZZ')\n+    assert Poly(x)*0 == Poly(0, x)\n+    assert 0*Poly(x) == Poly(0, x)\n     assert 2 * Poly(x, x) == Poly(2*x, x)\n \n \n+from sympy import Poly, S, symbols\n+\n+x = symbols('x')\n+\n def test_Poly_sqr():\n     assert Poly(x*y, x, y).sqr() == Poly(x**2*y**2, x, y)\n \n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..ce0238f 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -54,6 +54,24 @@ def test_printmethod():\n             return \"foo\"\n     assert latex(R(x)) == \"foo\"\n \n+from sympy import symbols, latex, S, Integral\n+\n+x, y = symbols('x y')\n+\n+def test_latex_mul_symbol_custom():\n+    # Test the original issue request to use `\\,` as the mul_symbol\n+    assert latex(3 * x**2 * y, mul_symbol='\\\\,') == r\"3\\,x^{2}\\,y\"\n+    assert latex(1.5 * 3**x, mul_symbol='\\\\,') == r\"1.5 \\, 3^{x}\"\n+    \n+    # Test using no symbol which should default to space\n+    assert latex(3 * x**2 * y, mul_symbol=None) == r\"3 x^{2} y\"\n+    \n+    # Test using a custom symbol not originally listed, e.g., asterisk\n+    assert latex(3 * x**2 * y, mul_symbol='*') == r\"3*x^{2}*y\"\n+    \n+    # Verify that existing functionality is not affected\n+    assert latex(3 * x**2 * y, mul_symbol='dot') == r\"3 \\cdot x^{2} \\cdot y\"\n+    assert latex(3 * x**2 * y, mul_symbol='times') == r\"3 \\times x^{2} \\times y\"\n \n def test_latex_basic():\n     assert latex(1 + x) == \"x + 1\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..7eb2bdf 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -402,8 +402,17 @@ def test_determinant():\n     assert M.det(method=\"bareiss\") == z**2 - x*y\n     assert M.det(method=\"berkowitz\") == z**2 - x*y\n \n-\n-def test_det_LU_decomposition():\n+def test_issue_13835():\n+    from sympy import symbols, Matrix\n+    a = symbols('a')\n+    M = lambda n: Matrix([[i + a*j for i in range(n)] for j in range(n)])\n+    assert M(1).det() == 0\n+    assert M(2).det() == -a\n+    assert M(3).det().simplify() == 0\n+    assert M(4).det() == 0\n+    assert M(5).det() == 0\n+    assert M(6).det() == 0\n+    assert M(7).det() == 0\n \n     for M in [Matrix(), Matrix([[1]])]:\n         assert M.det(method=\"lu\") == 1\n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..b89d73b 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -725,8 +725,21 @@ def test_precomputed_cdf():\n         compdiff = cdf(X)(x) - simplify(X.pspace.density.compute_cdf()(x))\n         compdiff = simplify(compdiff.rewrite(erfc))\n         assert compdiff == 0\n-\n-def test_issue_13324():\n+def test_distribution_cdfs():\n+    x = symbols('x', real=True)\n+\n+    assert cdf(Arcsin(\"A\", 0, 3))(1) == Piecewise((0, x < 0), (2*asin(sqrt((-0 + x)/(-0 + 3)))/pi, x <= 3), (1, True))\n+    assert cdf(Dagum(\"D\", S(1)/3, S(1)/5, 2))(3) == Piecewise(((1 + (3/(S(1)/5))**(-S(1)/3))**(-2), 3 >= 0), (0, True))\n+    assert cdf(Erlang(\"E\", 1, 1))(1) == Piecewise((lowergamma(1, 1*1)/gamma(1), 1 > 0), (0, True))\n+    assert cdf(Frechet(\"F\", S(4)/3, 1, 2))(3) == Piecewise((exp(-((3 - 2)/1)**(-S(4)/3)), 3 >= 2), (0, True))\n+    assert cdf(Gamma(\"G\", 0.1, 2))(3) == Piecewise((lowergamma(0.1, 3/2)/gamma(0.1), 3 > 0), (0, True))\n+    assert cdf(GammaInverse(\"GI\", S(5)/7, 2))(3) == Piecewise((uppergamma(S(5)/7, 2/3)/gamma(S(5)/7), 3 > 0), (0, True))\n+    assert cdf(Kumaraswamy(\"K\", S(1)/123, 5))(S(1)/3) == Piecewise((0, S(1)/3 < 0), (-(-S(1)/3**(S(1)/123) + 1)**5 + 1, S(1)/3 <= 1), (1, True))\n+    assert cdf(Laplace(\"LA\", 2, 3))(5) == Piecewise((exp((5 - 2)/3)/2, 2 > 5), (-exp((2 - 5)/3)/2 + 1, True))\n+    assert cdf(Logistic(\"L\", 1, 0.1))(2) == 1/(exp((1 - 2)/0.1) + 1)\n+    assert cdf(Nakagami(\"N\", S(7)/3, 1))(2) == Piecewise((lowergamma(S(7)/3, (S(7)/3)*2**2/1)/gamma(S(7)/3), 2 > 0), (0, True))\n+    assert cdf(StudentT(\"S\", 10))(2) == 1/2 + 2*gamma(10/2 + 1/2)*hyper((1/2, 10/2 + 1/2), (3/2,), -2**2/10)/(sqrt(pi)*sqrt(10)*gamma(10/2))\n+    # UniformSum CDF test not included due to complexity of symbolic representation\n     X = Uniform('X', 0, 1)\n     assert E(X, X > Rational(1,2)) == Rational(3,4)\n     assert E(X, X > 0) == Rational(1,2)\n",
  "sympy__sympy-13974": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bd3e825..53a898b 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -38,6 +38,10 @@ def test_tensor_product_expand():\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n \n+from sympy import symbols\n+from sympy.physics.quantum import TensorProduct as TP\n+from sympy.physics.quantum import tensor_product_simp\n+\n def test_tensor_product_commutator():\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n         TP(A*B, C) - TP(B*A, C)\n@@ -49,7 +53,32 @@ def test_tensor_product_simp():\n     assert tensor_product_simp(TP(A, B)*TP(B, C)) == TP(A*B, B*C)\n \n \n-def test_issue_5923():\n+def test_tensor_product_powers():\n+    A, B, C, D = symbols('A, B, C, D', commutative=False)\n+\n+    # Test for simple powers of TensorProduct\n+    assert tensor_product_simp(TP(A, B)**2) == TP(A**2, B**2)\n+    assert tensor_product_simp(TP(A, B)**3) == TP(A**3, B**3)\n+\n+    # Test for powers with a scalar multiplier\n+    x = symbols('x')\n+    assert tensor_product_simp(x*TP(A, B)**2) == x*TP(A**2, B**2)\n+\n+    # Test for mixed tensor products and powers\n+    assert tensor_product_simp(TP(A, B)*TP(C, D)**2) == TP(A*C**2, B*D**2)\n+\n+    # Test tensor product with symbolic exponents\n+    assert tensor_product_simp(TP(A, B)**x) == TP(A**x, B**x)\n+\n+    # Confirm behavior from the example issue\n+    t1 = TP(1,1)*TP(1,1)\n+    t2 = TP(1, Pauli(3))*TP(1, Pauli(3))\n+    assert tensor_product_simp(t1) == TP(1, 1**2)\n+    assert tensor_product_simp(t2) == TP(1, Pauli(3)**2)\n+\n+    # Test with more complex expressions\n+    expr = TP(A, B)**2 * TP(C, D)\n+    assert tensor_product_simp(expr) == TP(A**2*C, B**2*D)\n     # most of the issue regarding sympification of args has been handled\n     # and is tested internally by the use of args_cnc through the quantum\n     # module, but the following is a test from the issue that used to raise.\n",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_python.py b/sympy/printing/tests/test_python.py\nindex 73fc070..8a1ffdc 100644\n--- a/sympy/printing/tests/test_python.py\n+++ b/sympy/printing/tests/test_python.py\n@@ -80,7 +80,8 @@ def test_python_keyword_function_name_escaping():\n \n \n def test_python_relational():\n-    assert python(Eq(x, y)) == \"e = Eq(x, y)\"\n+    # New test case to check the expected behavior with Eq() and symbols generation\n+    assert python(Eq(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = Eq(x, y)\"\n     assert python(Ge(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x >= y\"\n     assert python(Le(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x <= y\"\n     assert python(Gt(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x > y\"\n",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..3c47d28 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -4,7 +4,17 @@ from sympy.abc import x, y, z\n from sympy.utilities.pytest import raises\n \n \n-Vector.simp = True\n+def test_Vector_addition_with_zero():\n+    N = ReferenceFrame('N')\n+    # Testing adding zero multiplied with a vector component\n+    assert N.x + 0 * N.x == N.x\n+    # Testing addition of zero vector to another vector\n+    assert N.x + Vector(0) == N.x\n+    # Testing sum function with zero-multiplied vector component\n+    assert sum([N.x, 0 * N.x]) == N.x\n+    # Testing summing a list that includes zero vector\n+    assert sum([N.x, Vector(0)]) == N.x\n+from sympy.physics.vector import ReferenceFrame, Vector\n A = ReferenceFrame('A')\n \n \n",
  "sympy__sympy-14976": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex fbe0d75..2cfced6 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import (absolute_import, division, print_function)\n \n@@ -35,6 +36,8 @@ def test_PythonCodePrinter():\n                         (3, Gt(x, 0)), evaluate=False)) == '((2) if (x <= 0) else'\\\n                                                         ' (3) if (x > 0) else None)'\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n+    # Test MpmathPrinter for Rational\n+    assert p.doprint(Rational(1, 2)) == 'mpmath.mpf(1)/mpmath.mpf(2)'\n \n \n def test_MpmathPrinter():\n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..22c996a 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -73,7 +74,8 @@ def test_ndim_array_initiation():\n \n     from sympy.abc import x\n     rank_zero_array = ImmutableDenseNDimArray(x)\n-    assert len(rank_zero_array) == 0\n+    # After the fix, len should return 1 for a rank-0 array\n+    assert len(rank_zero_array) == 1\n     assert rank_zero_array.shape == ()\n     assert rank_zero_array.rank() == 0\n     assert rank_zero_array[()] == x\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..7eaf694 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n",
  "sympy__sympy-15349": "diff --git a/sympy/algebras/tests/test_quaternion.py b/sympy/algebras/tests/test_quaternion.py\nindex c486cc1..7ed694b 100644\n--- a/sympy/algebras/tests/test_quaternion.py\n+++ b/sympy/algebras/tests/test_quaternion.py\n@@ -112,6 +112,48 @@ def test_quaternion_conversions():\n                                                [sin(theta),  cos(theta), 0],\n                                                [0,           0,          1]])\n \n+def test_quaternion_to_rotation_matrix_sign_correction():\n+    from sympy import symbols, cos, sin, trigsimp\n+    from sympy.algebras.quaternion import Quaternion\n+\n+    # Test case from the issue description\n+    x = symbols('x')\n+    q = Quaternion(cos(x/2), sin(x/2), 0, 0)\n+    expected_matrix = Matrix([\n+        [1,      0,      0],\n+        [0, cos(x), -sin(x)],\n+        [0, sin(x),  cos(x)]\n+    ])\n+    assert trigsimp(q.to_rotation_matrix()) == expected_matrix\n+\n+    # Additional test cases for different quaternions\n+    # Test quaternion representing a 90-degree rotation around the z-axis\n+    q_z_90 = Quaternion(cos(pi/4), 0, 0, sin(pi/4))\n+    expected_matrix_z_90 = Matrix([\n+        [0, -1, 0],\n+        [1,  0, 0],\n+        [0,  0, 1]\n+    ])\n+    assert trigsimp(q_z_90.to_rotation_matrix()) == expected_matrix_z_90\n+\n+    # Test quaternion representing a 90-degree rotation around the y-axis\n+    q_y_90 = Quaternion(cos(pi/4), 0, sin(pi/4), 0)\n+    expected_matrix_y_90 = Matrix([\n+        [0, 0, 1],\n+        [0, 1, 0],\n+        [-1, 0, 0]\n+    ])\n+    assert trigsimp(q_y_90.to_rotation_matrix()) == expected_matrix_y_90\n+\n+    # Test quaternion representing a 90-degree rotation around the x-axis\n+    q_x_90 = Quaternion(cos(pi/4), sin(pi/4), 0, 0)\n+    expected_matrix_x_90 = Matrix([\n+        [1, 0, 0],\n+        [0, 0, -1],\n+        [0, 1, 0]\n+    ])\n+    assert trigsimp(q_x_90.to_rotation_matrix()) == expected_matrix_x_90\n+\n     assert q2.to_axis_angle() == ((0, 0, sin(theta/2)/Abs(sin(theta/2))),\n                                    2*acos(cos(theta/2)))\n \n@@ -119,4 +161,4 @@ def test_quaternion_conversions():\n                [cos(theta), -sin(theta), 0, sin(theta) - cos(theta) + 1],\n                [sin(theta),  cos(theta), 0, -sin(theta) - cos(theta) + 1],\n                [0,           0,          1,  0],\n-               [0,           0,          0,  1]])\n+               [0,           0,          0,  1]])\n",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..f59fdc9 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1508,7 +1508,33 @@ def test_issue_5919():\n     assert (x/(y*(1 + y))).expand() == x/(y**2 + y)\n \n \n+from sympy import symbols, Mod\n+from sympy.abc import x, y, a\n+from sympy import Symbol, Integer\n+from sympy import factorial, nan, sqrt, Rational, Float, Pow, comp, verify_numerically, S, Add, Mul, pi\n+import pytest\n+from sympy.core.mod import Mod\n+\n def test_Mod():\n+    # Test case for issue 15493\n+    i, j = symbols('i j', integer=True, positive=True)\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+    assert Mod(8*i/j, 4) == 4*Mod(2*i/j, 1)\n+    assert Mod(8*i, 4) == 0\n+\n+    # Additional test cases for thorough verification\n+    assert Mod(6*i, 2) == 0  # Multiple of modulus\n+    assert Mod(9*i, 2) == Mod(i, 2)  # Coefficient change\n+    assert Mod(12*i, 3) == 0  # Different modulus\n+    assert Mod(15*i, 5) == 0  # Another multiple\n+    assert Mod(15*i, 7) == Mod(i, 7)  # Prime modulus\n+    assert Mod(0*i, 2) == 0  # Zero coefficient\n+    assert Mod(i, 1) == 0  # Modulus of 1\n+\n+    # Edge cases\n+    assert Mod(1*i, 0) == 0  # Zero modulus, expecting ZeroDivisionError\n+    with pytest.raises(ZeroDivisionError):\n+        Mod(i, 0).doit()\n     assert Mod(x, 1).func is Mod\n     assert pi % pi == S.Zero\n     assert Mod(5, 3) == 2\n",
  "sympy__sympy-15809": "",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..a50abc2 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1987,10 +1987,39 @@ def test_Add_is_zero():\n     assert (x + y).is_zero\n \n \n-def test_issue_14392():\n+def test_issue_15873():\n+    from sympy import I, simplify\n+\n+    # Original test case\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None\n+\n+    # Additional test cases\n+    f = I\n+    assert f.is_zero is False  # I is not zero\n+\n+    g = 1 + I\n+    assert g.is_zero is False  # 1 + I is not zero\n+\n+    h = 0 + 0*I\n+    assert h.is_zero is True  # 0 + 0*I is zero\n+\n+    # More complex checks\n+    i = (1 + I) + (-1 - I)\n+    assert i.is_zero is True  # These cancel out to zero\n+\n+    j = (2 + 3*I) + (-2 - 3*I)\n+    assert j.is_zero is True  # These also cancel out to zero\n+\n+    k = (2 + 3*I) + (-2 - 2*I)\n+    assert k.is_zero is None  # Not definitively zero without further simplification\n+\n+    # Check with simplify, which should resolve indecision\n+    assert simplify(e).is_zero is True\n+    assert simplify(k).is_zero is False\n     assert (sin(zoo)**2).as_real_imag() == (nan, nan)\n \n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "",
  "sympy__sympy-16766": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 51a287f..06bb111 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n \n@@ -12,6 +13,7 @@ from sympy.printing.pycode import (\n     MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter\n )\n from sympy.utilities.pytest import raises\n+from sympy.tensor import IndexedBase\n \n x, y, z = symbols('x y z')\n \n@@ -36,7 +38,20 @@ def test_PythonCodePrinter():\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n \n \n-def test_MpmathPrinter():\n+def test_PythonCodePrinter_with_Indexed():\n+    prntr = PythonCodePrinter()\n+    p = IndexedBase(\"p\")\n+    # Test with single index\n+    assert prntr.doprint(p[0]) == 'p[0]'\n+    # Test with multiple indices\n+    assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n+    assert prntr.doprint(p[x, y, z]) == 'p[x, y, z]'\n+    # Test with a symbolic index\n+    i, j = symbols('i j')\n+    assert prntr.doprint(p[i, j]) == 'p[i, j]'\n+    # Ensure the base and indices are printed correctly when they are expressions\n+    q = IndexedBase(x + y)\n+    assert prntr.doprint(q[0, 1]) == '(x + y)[0, 1]'\n     p = MpmathPrinter()\n     assert p.doprint(sign(x)) == 'mpmath.sign(x)'\n     assert p.doprint(Rational(1, 2)) == 'mpmath.mpf(1)/mpmath.mpf(2)'\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py\nindex 23fddca..94ca2ec 100644\n--- a/sympy/utilities/tests/test_autowrap.py\n+++ b/sympy/utilities/tests/test_autowrap.py\n@@ -48,7 +48,17 @@ def test_cython_wrapper_scalar_function():\n     assert source == expected\n \n \n-def test_cython_wrapper_outarg():\n+def test_autowrap_cython_with_unused_array_arg():\n+    from sympy import MatrixSymbol\n+    import numpy as np\n+    from sympy.utilities.autowrap import autowrap\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0  # Expression does not depend on `x`\n+    f = autowrap(expr, args=(x,), backend='cython')\n+\n+    # Call the generated function and check if it returns 1.0\n+    assert f(np.array([[1.0], [2.0]])) == 1.0\n     from sympy import Equality\n     x, y, z = symbols('x,y,z')\n     code_gen = CythonCodeWrapper(C99CodeGen())\n",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..a49ebab 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -249,11 +249,35 @@ def test_encode_morse():\n     assert encode_morse('!@#$%^&*()_+') == '-.-.--|.--.-.|...-..-|-.--.|-.--.-|..--.-|.-.-.'\n \n \n+def test_encode_morse():\n+    assert encode_morse('ABC') == '.-|-...|-.-.'\n+    assert encode_morse('SMS ') == '...|--|...||'\n+    assert encode_morse('SMS\\n') == '...|--|...||'\n+    assert encode_morse('') == ''\n+    assert encode_morse(' ') == '||'\n+    assert encode_morse(' ', sep='`') == '``'\n+    assert encode_morse(' ', sep='``') == '````'\n+    assert encode_morse('!@#$%^&*()_+') == '-.-.--|.--.-.|...-..-|-.--.|-.--.-|..--.-|.-.-.'\n+    # New test cases for numbers\n+    assert encode_morse('1') == '.----'\n+    assert encode_morse('10') == '.----|-----'\n+    assert encode_morse('01') == '-----|.----'\n+    assert encode_morse('111') == '.----|.----|.----'\n+\n def test_decode_morse():\n     assert decode_morse('-.-|.|-.--') == 'KEY'\n     assert decode_morse('.-.|..-|-.||') == 'RUN'\n     raises(KeyError, lambda: decode_morse('.....----'))\n \n+def test_morse_number_decoding():\n+    assert decode_morse('.----') == '1'\n+    assert decode_morse('.----|-----') == '10'\n+    assert decode_morse('-----|.----') == '01'\n+    assert decode_morse('.----|.----|.----') == '111'\n+    assert decode_morse('-.-|.|-.--') == 'KEY'\n+    assert decode_morse('.-.|..-|-.||') == 'RUN'\n+    raises(KeyError, lambda: decode_morse('.....----'))\n+\n \n def test_lfsr_sequence():\n     raises(TypeError, lambda: lfsr_sequence(1, [1], 1))\n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..9550be8 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -811,7 +811,15 @@ def test_issue_15965():\n     assert simplify(B) == bnew\n \n \n-def test_issue_7971():\n+def test_issue_17137():\n+    x = Symbol('x')\n+    # Test cases to ensure complex exponent simplification does not raise errors.\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+    assert simplify(sin(x)**I) == sin(x)**I\n+    assert simplify(sin(x)**(2*I + 1)) == sin(x)**(2*I + 1)\n+    assert simplify(exp(I*x)) == exp(I*x)\n+    assert simplify(exp(-I*x)) == exp(-I*x)\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..55e4d7c 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,4 +1,7 @@\n-from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n+\n+from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos, I\n+from sympy.simplify.sqrtdenest import _sqrt_match\n+from sympy.core.expr import unchanged\n from sympy.simplify.sqrtdenest import _subsets as subsets\n from sympy.utilities.pytest import slow\n \n@@ -176,7 +179,33 @@ def test_subsets():\n         [1, 1, 0, 1], [0, 0, 1, 1], [1, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]]\n \n \n-def test_issue_5653():\n+def test_issue_12420():\n+    I = S.ImaginaryUnit\n+    # Test the _sqrt_match function\n+    assert _sqrt_match(4 + I) == []\n+\n+    # Test the original issue with sqrtdenest\n+    expr = (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2\n+    result = sqrtdenest(expr)\n+    assert unchanged(sqrtdenest, expr)  # Check if the expression remains unchanged\n+    \n+    # Assert that the result does not raise an IndexError and is returned unchanged\n+    assert result == expr\n+\n+    # Additional test case to ensure robustness\n+    expr2 = 3 - sqrt(2)*sqrt(4 + I) + 3*I\n+    result2 = sqrtdenest(expr2)\n+    assert unchanged(sqrtdenest, expr2)  # Check if the expression remains unchanged\n+    assert result2 == expr2\n+\n+    # Test with different structure but similar complexity\n+    expr3 = sqrt(5 + sqrt(6 - sqrt(7)))\n+    result3 = sqrtdenest(expr3)\n+    assert result3 == expr3  # Not denestable, should be unchanged\n+\n+    # Denestable case for comparison\n+    denestable_expr = sqrt(2 + sqrt(3))\n+    assert sqrtdenest(denestable_expr) != denestable_expr  # Should be denested\n     assert sqrtdenest(\n         sqrt(2 + sqrt(2 + sqrt(2)))) == sqrt(2 + sqrt(2 + sqrt(2)))\n \n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..e3ffd86 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,12 +1,18 @@\n-from sympy import I, Rational, Symbol, pi, sqrt, S\n+\n+from sympy import I, Rational, Symbol, pi, sqrt, S, sympify\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.pytest import raises, warns\n \n+def test_multiply_point_with_number():\n+    p1 = Point(0, 0)\n+    p2 = Point(1, 1)\n \n-def test_point():\n+    # Test multiplication with sympified number\n+    assert (p1 + p2 * sympify(2.0)) == Point(2, 2)\n+    assert (p1 + sympify(2.0) * p2) == Point(2, 2)\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     x1 = Symbol('x1', real=True)\n@@ -91,6 +97,7 @@ def test_point():\n     assert (-p3).__rsub__(p4) == p3.midpoint(p4).scale(2, 2)\n \n     assert p4 * 5 == Point(5, 5)\n+    assert 5 * p4 == Point(5, 5)\n     assert p4 / 5 == Point(0.2, 0.2)\n \n     raises(ValueError, lambda: Point(0, 0) + 10)\n@@ -168,6 +175,7 @@ def test_point3D():\n \n \n     assert p4 * 5 == Point3D(5, 5, 5)\n+    assert 5 * p4 == Point3D(5, 5, 5)\n     assert p4 / 5 == Point3D(0.2, 0.2, 0.2)\n \n     raises(ValueError, lambda: Point3D(0, 0, 0) + 10)\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..840399d 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -553,6 +553,23 @@ def test_diophantine():\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n     assert diophantine((y**2-x), t) == set([(t**2, -t)])\n \n+def test_issue_18186():\n+    # These test the consistency of diophantine results with sym order and permute=True\n+    from sympy.abc import x, y\n+\n+    # Original patch test: the order of x and y doesn't matter with permute=True\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+\n+    # Additional test: using different symbols\n+    from sympy import symbols\n+    a, b = symbols('a b', integer=True)\n+    assert diophantine(a**4 + b**4 - 2**4 - 3**4, syms=(a, b), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(a**4 + b**4 - 2**4 - 3**4, syms=(b, a), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n \n def test_general_pythagorean():\n     from sympy.abc import a, b, c, d, e\n",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..33eed52 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -677,7 +677,18 @@ def test_latex_subs():\n         x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n \n \n-def test_latex_integrals():\n+def test_latex_subs_parenthesizing():\n+    from sympy import Subs, symbols, latex\n+    x, y, z = symbols('x y z')\n+\n+    # Test with a negative sign and multiple variables\n+    assert latex(3*Subs(-x + y, (x,), (1,))) == r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+    # Test with subtraction and multiplication\n+    assert latex(Subs(x - y*z, (x, y), (2, 3))) == r'\\left. \\left(x - y z\\right) \\right|_{\\substack{ x=2\\\\ y=3 }}'\n+    # Test with more complex expressions\n+    assert latex(5*Subs(x**2 + y**2, (x, y), (1, 2))) == r'5 \\left. \\left(x^{2} + y^{2}\\right) \\right|_{\\substack{ x=1\\\\ y=2 }}'\n+    # Test with nested substitutions\n+    assert latex(Subs(x + Subs(y + z, (y,), (2,)), (x,), (3,))) == r'\\left. \\left(x + \\left. \\left(y + z\\right) \\right|_{\\substack{ y=2 }}\\right) \\right|_{\\substack{ x=3 }}'\n     assert latex(Integral(log(x), x)) == r\"\\int \\log{\\left(x \\right)}\\, dx\"\n     assert latex(Integral(x**2, (x, 0, 1))) == \\\n         r\"\\int\\limits_{0}^{1} x^{2}\\, dx\"\n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "diff --git a/sympy/sets/tests/test_conditionset.py b/sympy/sets/tests/test_conditionset.py\nindex 68ee5d6..8a77e57 100644\n--- a/sympy/sets/tests/test_conditionset.py\n+++ b/sympy/sets/tests/test_conditionset.py\n@@ -1,3 +1,4 @@\n+\n from sympy.sets import (ConditionSet, Intersection, FiniteSet,\n     EmptySet, Union, Contains)\n from sympy import (Symbol, Eq, S, Abs, sin, pi, Interval,\n@@ -129,6 +130,21 @@ def test_subs_CondSet():\n     assert ConditionSet(f(x), f(x) < 1, {w, z}\n         ).subs(f(x), y) == ConditionSet(y, y < 1, {w, z})\n \n+    # New test case for issue related to ConditionSet and ImageSet\n+    k = Symbol('k')\n+    img1 = imageset(Lambda(k, 2*k*pi + asin(y)), S.Integers)\n+    img2 = imageset(Lambda(k, 2*k*pi + asin(S.One/3)), S.Integers)\n+    conditionset_expr = ConditionSet(x, Contains(y, Interval(-1, 1)), img1)\n+\n+    # Test the substitution directly on the ConditionSet\n+    assert conditionset_expr.subs(y, S.One/3).dummy_eq(img2)\n+\n+    # Test the substitution with the simultaneous flag\n+    assert conditionset_expr.subs({y: S.One/3}, simultaneous=True) == img2\n+\n+    # Test xreplace with the same substitution\n+    assert conditionset_expr.xreplace({y: S.One/3}) == img2\n+\n \n def test_subs_CondSet_tebr():\n     with warns_deprecated_sympy():\n",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..142fb37 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -514,7 +514,33 @@ def test_kernS():\n     assert one != 1 and one.expand() == 1\n \n \n-def test_issue_6540_6552():\n+from sympy import Symbol, Interval, exp, Add, Mul, sin, cos, Matrix, Rational\n+from sympy.abc import x, y\n+\n+def test_kernS_issue():\n+    # Test with simple expressions\n+    assert kernS(\"(2*x)/(x-1)\") == 2*x/(x-1)\n+    assert kernS(\"3*(x + y)\") == 3*(x + y)\n+    \n+    # Test with complex expressions\n+    expr_str = \"sin(x)**2 + (cos(x) + sin(x))**3\"\n+    assert kernS(expr_str) == sin(x)**2 + (cos(x) + sin(x))**3\n+\n+    # Test with negative and nested parentheses\n+    assert kernS(\"-(x + y)*(2-x)\") == -(x + y)*(2-x)\n+    assert kernS(\"((x + y)*(x - y))\") == (x + y)*(x - y)\n+\n+    # Test with mixed operations and functions\n+    assert kernS(\"exp(-(x**2)) + sin(x*y)\") == exp(-(x**2)) + sin(x*y)\n+\n+    # Test with number literals and symbol\n+    assert kernS(\"1.5*x**2 - 3.4*y\") == 1.5*x**2 - 3.4*y\n+\n+    # Ensure no UnboundLocalError occurs\n+    try:\n+        kernS(\"(2*x)/(x-1)\")\n+    except UnboundLocalError:\n+        assert False, \"UnboundLocalError was raised unexpectedly\"\n     assert S('[[1/3,2], (2/5,)]') == [[Rational(1, 3), 2], (Rational(2, 5),)]\n     assert S('[[2/6,2], (2/4,)]') == [[Rational(1, 3), 2], (S.Half,)]\n     assert S('[[[2*(1)]]]') == [[[2]]]\n",
  "sympy__sympy-19783": "",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..7f74152 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -906,7 +906,30 @@ def test_sylow_subgroup():\n     assert G.order()/S.order() % 2 > 0\n \n \n-@slow\n+def test_issue_sylow_subgroup_indexerror():\n+    # Test cases based on the reported issue\n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4  # Sylow 2-subgroup of DihedralGroup(18) should have order 4\n+\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4  # Sylow 2-subgroup of DihedralGroup(50) should have order 4\n+\n+    # Additional edge cases\n+    G = DihedralGroup(2)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 1  # Sylow 2-subgroup of DihedralGroup(2) should have order 1\n+\n+    G = DihedralGroup(3)\n+    S = G.sylow_subgroup(p=3)\n+    assert S.order() == 1  # There should be no Sylow 3-subgroup in DihedralGroup(3)\n+\n+    G = DihedralGroup(30)\n+    S2 = G.sylow_subgroup(p=2)\n+    S3 = G.sylow_subgroup(p=3)\n+    assert S2.order() == 4  # Sylow 2-subgroup should have order 4\n+    assert S3.order() == 3  # Sylow 3-subgroup should have order 3\n def test_presentation():\n     def _test(P):\n         G = P.presentation()\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..603d3f3 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -513,6 +513,33 @@ def test_partitions():\n             i += 1\n         assert i == RGS_enum(n)\n \n+def test_partitions_reuse():\n+    # Test list comprehension with partitions to ensure it doesn't reuse the same dictionary\n+    # and produces correct partitions each time it's called.\n+    \n+    iter_one = list(partitions(6, k=2))\n+    iter_two = list(partitions(6, k=2))\n+\n+    # Ensure both iterations produce the same results and are not affecting each other\n+    assert iter_one == iter_two\n+    assert iter_one == [\n+        {2: 3},\n+        {1: 2, 2: 2},\n+        {1: 4, 2: 1},\n+        {1: 6}\n+    ]\n+\n+    # Check that modifying a dictionary from one iteration doesn't affect the other\n+    for p in iter_one:\n+        p.clear()\n+    \n+    # Verify iter_two is still intact\n+    assert iter_two == [\n+        {2: 3},\n+        {1: 2, 2: 2},\n+        {1: 4, 2: 1},\n+        {1: 6}\n+    ]\n \n def test_binary_partitions():\n     assert [i[:] for i in binary_partitions(10)] == [[8, 2], [8, 1, 1],\n",
  "sympy__sympy-20801": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e1c7e2..97a311f 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -571,25 +571,60 @@ def test_Float():\n     raises(ValueError, lambda: Float(\"1.23\", dps=\"\", precision=10))\n     raises(ValueError, lambda: Float(\"1.23\", dps=3, precision=\"\"))\n     raises(ValueError, lambda: Float(\"1.23\", dps=\"\", precision=\"\"))\n-\n+from sympy import S\n+\n+def test_zero_not_false():\n+    # https://github.com/sympy/sympy/issues/20796\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n     # from NumberSymbol\n     assert same_and_same_prec(Float(pi, 32), pi.evalf(32))\n     assert same_and_same_prec(Float(Catalan), Catalan.evalf())\n-\n+from sympy import S\n+\n+def test_zero_not_false():\n+    # https://github.com/sympy/sympy/issues/20796\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n     # oo and nan\n     u = ['inf', '-inf', 'nan', 'iNF', '+inf']\n     v = [oo, -oo, nan, oo, oo]\n     for i, a in zip(u, v):\n         assert Float(i) is a\n-\n-\n-\n+from sympy import S\n+\n+def test_zero_not_false():\n+    # https://github.com/sympy/sympy/issues/20796\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n+\n+from sympy import S\n+\n+def test_zero_not_false():\n+    # https://github.com/sympy/sympy/issues/20796\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n @conserve_mpmath_dps\n def test_float_mpf():\n     import mpmath\n     mpmath.mp.dps = 100\n     mp_pi = mpmath.pi()\n-\n+from sympy import S\n+\n+def test_zero_not_false():\n+    # https://github.com/sympy/sympy/issues/20796\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n     assert Float(mp_pi, 100) == Float(mp_pi._mpf_, 100) == pi.evalf(100)\n \n     mpmath.mp.dps = 15\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..85fcd8e 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -20,7 +21,34 @@ def test_subs():\n     assert e == Rational(6)\n \n \n-def test_subs_Matrix():\n+def test_issue_21373():\n+    from sympy.functions.elementary.trigonometric import sinh, cosh, tanh\n+    from sympy.functions.elementary.piecewise import Piecewise\n+\n+    # Test for sinh with Piecewise inside exp\n+    x_r, y_r, z_r = symbols('x_r y_r z_r', real=True)\n+    expr1 = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    expr2 = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    expr3 = exp(tanh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+\n+    try:\n+        expr1.subs({1: 1.0})\n+        expr2.subs({1: 1.0})\n+        expr3.subs({1: 1.0})\n+    except PolynomialError as e:\n+        assert False, f\"Unexpected PolynomialError: {e}\"\n+    \n+    # Additional check without the division by z\n+    expr_no_div = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n+    expr_no_div.subs({1: 1.0})  # Should not raise an error\n+\n+    # Additional check without the exponential\n+    expr_no_exp = sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r)\n+    expr_no_exp.subs({1: 1.0})  # Should not raise an error\n+    \n+    # Ensure that we are testing with other functions\n+    expr_sin = sin(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r)\n+    expr_sin.subs({1: 1.0})  # Should not raise an error\n     z = zeros(2)\n     z1 = ZeroMatrix(2, 2)\n     assert (x*y).subs({x:z, y:0}) in [z, z1]\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..3931594 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -78,7 +78,37 @@ def test_monomials():\n                             x * i * j, x * j * i\n             }\n \n-    # degree_list tests\n+    # Test for issue with min_degrees and max_degrees\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    \n+    # Test with three variables and total degree of 3, expecting all monomials of degree 3\n+    assert set(itermonomials([x1, x2, x3], 3, 3)) == {\n+        x1**3, x2**3, x3**3,\n+        x1*x2**2, x1*x3**2, x2*x1**2, x2*x3**2, x3*x1**2, x3*x2**2,\n+        x1**2*x2, x1**2*x3, x2**2*x1, x2**2*x3, x3**2*x1, x3**2*x2,\n+        x1*x2*x3, x1*x3*x2, x2*x1*x3, x2*x3*x1, x3*x1*x2, x3*x2*x1\n+    }\n+    \n+    # Test with min_degrees 2, expecting monomials of degree 2 or more\n+    assert set(itermonomials([x1, x2], 3, 2)) == {\n+        x1**3, x2**3, x1**2*x2, x1*x2**2, x1*x2, x1**2, x2**2\n+    }\n+\n+    # Test for issue in the original patch\n+    assert set(itermonomials([x, y], 3, 3)) == {x**3, x**2*y, x*y**2, y**3}\n+    assert set(itermonomials([x, y], 3, 2)) == {x**2, x*y, y**2, x**3, x**2*y, x*y**2, y**3}\n+\n+    # Additional tests for non-commutative symbols\n+    i, j, k = symbols('i j k', commutative=False)\n+    \n+    assert set(itermonomials([i, j, k], 2, 2)) == \\\n+        {k*i, i**2, i*j, j*k, j*i, k**2, j**2, k*j, i*k}\n+    assert set(itermonomials([i, j, k], 3, 2)) == \\\n+        {j*k**2, i*k**2, k*i*j, k*i**2, k**2, j*k*j, k*j**2, i*k*i, i*j,\n+         j**2*k, i**2*j, j*i*k, j**3, i**3, k*j*i, j*k*i, j*i,\n+         k**2*j, j*i**2, k*j, k*j*k, i*j*i, j*i*j, i*j**2, j**2,\n+         k*i*k, i**2, j*k, i*k, i*k*j, k**3, i**2*k, j**2*i, k**2*i,\n+         i*j*k, k*i}\n     assert set(itermonomials([], [])) == {S.One}\n \n     raises(ValueError, lambda: set(itermonomials([], [0])))\n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..2dfef56 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -267,6 +267,7 @@ def test_String():\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n+    assert st.func(*st.args) == st  # Added test for argument invariance\n \n \n     class Signifier(String):\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..90fe895 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -10,6 +11,8 @@ from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n from sympy.testing.pytest import raises, warns\n+from sympy.core.parameters import evaluate\n+from sympy.geometry import Point2D\n \n \n def test_point():\n@@ -440,7 +443,23 @@ def test_unit():\n     assert Point(1, 1).unit == Point(sqrt(2)/2, sqrt(2)/2)\n \n \n-def test_dot():\n+def test_issue_22684():\n+    # Verify that using evaluate(False) does not raise an error\n+    with evaluate(False):\n+        p = Point2D(1, 2)\n+        assert p == Point2D(1, 2)\n+\n+    # Ensure the same works without evaluate(False)\n+    p = Point2D(1, 2)\n+    assert p == Point2D(1, 2)\n+\n+    # Test with evaluate=False as a parameter\n+    p = Point2D(1, 2, evaluate=False)\n+    assert p == Point2D(1, 2)\n+\n+    # Verify imaginary coordinates raise an error\n+    with raises(ValueError, match=\"Imaginary coordinates are not permitted.\"):\n+        Point2D(1 + I, 2)\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n \n",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..d1c9151 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n@@ -56,6 +57,23 @@ def test_PythonCodePrinter():\n     assert prntr.doprint(KroneckerDelta(x,y)) == '(1 if x == y else 0)'\n \n     assert prntr.doprint((2,3)) == \"(2, 3)\"\n+    \n+    # Test cases for Min and Max\n+    assert prntr.doprint(Min(x, y)) == \"min(x, y)\"\n+    assert prntr.doprint(Max(x, y)) == \"max(x, y)\"\n+\n+    # Additional test cases\n+    a, b, c = symbols('a b c')\n+    assert prntr.doprint(Min(a, b, c)) == \"min(a, b, c)\"\n+    assert prntr.doprint(Max(a, b, c)) == \"max(a, b, c)\"\n+    \n+    # Test with numeric values\n+    assert prntr.doprint(Min(1, 2, 3)) == \"min(1, 2, 3)\"\n+    assert prntr.doprint(Max(4, 5, 6)) == \"max(4, 5, 6)\"\n+    \n+    # Test with expressions\n+    assert prntr.doprint(Min(x + y, y - x)) == \"min(x + y, y - x)\"\n+    assert prntr.doprint(Max(x * y, y / x)) == \"max(x * y, y / x)\"\n     assert prntr.doprint([2,3]) == \"[2, 3]\"\n \n \n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..008fabe 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,23 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+from sympy import lambdify, symbols\n+\n+def test_lambdify_tuple_one_element():\n+    # Test lambdify with a single-element tuple\n+    f = lambdify([], (1,))\n+    assert f() == (1,)\n+    source_code = inspect.getsource(f)\n+    assert \"return (1,)\" in source_code\n+\n+def test_lambdify_tuple_multiple_elements():\n+    # Test lambdify with a multiple-element tuple\n+    f = lambdify([], (1, 2))\n+    assert f() == (1, 2)\n+    source_code = inspect.getsource(f)\n+    assert \"return (1, 2)\" in source_code\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..fccf068 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n from sympy.core.sympify import sympify  # can't import as S yet\n-from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n+from sympy.core.function import Function, UndefinedFunction\n \n from sympy.testing.pytest import raises\n from sympy.core.symbol import disambiguate\n@@ -292,7 +293,12 @@ def test_symbols():\n \n     assert symbols('aa:d') == (aa, ab, ac, ad)\n     assert symbols('aa:d,x:z') == (aa, ab, ac, ad, x, y, z)\n-    assert symbols(('aa:d','x:z')) == ((aa, ab, ac, ad), (x, y, z))\n+    assert symbols(('aa:d', 'x:z')) == ((aa, ab, ac, ad), (x, y, z))\n+    \n+    # Test for issue: Using symbols with extra parentheses should create Function instances\n+    q, u = symbols(('q:2', 'u:2'), cls=Function)\n+    assert isinstance(q[0], UndefinedFunction)\n+    assert isinstance(u[1], UndefinedFunction)\n \n \n     # issue 6675\n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..6ed1cbd 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -182,8 +182,41 @@ def execute_gamma_simplify_tests_for_function(tfunc, D):\n     st = tfunc(t)\n     assert _is_tensor_eq(st, t)\n \n+from sympy import eye\n+from sympy.physics.hep.gamma_matrices import GammaMatrix as G, kahane_simplify\n+from sympy.tensor.tensor import tensor_indices, LorentzIndex\n \n-def test_kahane_algorithm():\n+def test_kahane_leading_gamma_matrix_bug():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n+    \n+    # Test case from the issue description\n+    t = G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma)), \"Leading gamma matrices should remain in the same order\"\n+\n+    t = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma)), \"Leading gamma matrices should remain in the same order\"\n+\n+    # Additional test cases\n+    # Testing with more gamma matrices\n+    t = G(mu)*G(-mu)*G(rho)*G(sigma)*G(nu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma)*G(nu)), \"Order of gamma matrices rho, sigma, nu should be preserved\"\n+\n+    t = G(rho)*G(sigma)*G(nu)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma)*G(nu)), \"Order of gamma matrices rho, sigma, nu should be preserved\"\n+\n+    # Test with no contraction (should return the same expression)\n+    t = G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(G(rho)*G(sigma)), \"Expression with no contraction should remain unchanged\"\n+\n+    # Test with reordered gamma matrices\n+    t = G(sigma)*G(rho)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(sigma)*G(rho)), \"Order of gamma matrices sigma, rho should be preserved\"\n     # Wrap this function to convert to and from TIDS:\n \n     def tfunc(e):\n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..0f5c8dd 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -45,7 +45,13 @@ def test_as_set():\n     # containment in a Set -- rewriting as a Set is not yet implemented\n     raises(NotImplementedError, lambda:\n            Contains(x, FiniteSet(y)).as_set())\n-\n-def test_type_error():\n+def test_issue_as_set_not_implemented():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    z = Symbol('z')\n+    # Test for the expected NotImplementedError when calling as_set\n+    # on the Contains object, as per the issue description\n+    raises(NotImplementedError, lambda: Contains(x, Reals).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, FiniteSet(y, z)).as_set())\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..77a82e8 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -541,7 +541,31 @@ def test_issue_20288():\n     assert SI._collect_factor_and_dimension(expr) == (1 + E, Dimension(1))\n \n \n-def test_prefixed_property():\n+\n+def test_issue_24062():\n+    from sympy import exp\n+    from sympy.physics.units import ohm, farad, second\n+    from sympy.physics.units.systems.si import SI\n+    from sympy.physics.units import Quantity\n+    from sympy.core.numbers import E\n+    from sympy.physics.units.dimensions import Dimension\n+    \n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, units.impedance)\n+    SI.set_quantity_dimension(C, units.capacitance)\n+    SI.set_quantity_dimension(T, units.time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    \n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n     assert not day.is_prefixed\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..8fd2179 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -562,6 +562,45 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n+from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+from sympy.physics.units.systems.si import SI\n+\n+def test_issue_24211():\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+def test_addition_of_equivalent_dimensions():\n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * meter / second)\n+\n+    a1 = Quantity('a1')\n+    SI.set_quantity_dimension(a1, acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)\n+\n+    t1 = Quantity('t1')\n+    SI.set_quantity_dimension(t1, time)\n+    SI.set_quantity_scale_factor(t1, 5 * second)\n+\n+    expr = a1*t1 + v1\n+    # This should not raise an error if dimensions are handled correctly\n+    factor, dim = SI._collect_factor_and_dimension(expr)\n+    assert dim == SI.get_quantity_dimension(v1)  # Expecting velocity dimension\n+    assert factor == -9.8 * 5 + 2  # Calculate manually to verify\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..aa70f92 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,9 +1,11 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n from sympy.combinatorics.free_groups import free_group\n from sympy.combinatorics.fp_groups import FpGroup\n from sympy.combinatorics.named_groups import AlternatingGroup, DihedralGroup, CyclicGroup\n+from sympy.combinatorics.named_groups import SymmetricGroup\n from sympy.testing.pytest import raises\n \n def test_homomorphism():\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..e926cec 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -266,6 +266,22 @@ def test_PolyElement_as_expr():\n     assert f.as_expr(X, Y, Z) == g\n \n     raises(ValueError, lambda: f.as_expr(X))\n+    \n+    # Additional tests to verify symbol handling\n+    U, V, W = symbols(\"u,v,w\")\n+    g = 3*U**2*V - U*V*W + 7*W**3 + 1\n+    assert f.as_expr(U, V, W) == g  # Correct number of symbols\n+\n+    # Test with too few symbols\n+    raises(ValueError, lambda: f.as_expr(U, V))\n+\n+    # Test with too many symbols\n+    raises(ValueError, lambda: f.as_expr(U, V, W, X))\n+\n+    # Test with different types of symbols\n+    A, B, C = symbols(\"alpha, beta, gamma\")\n+    g_diff = 3*A**2*B - A*B*C + 7*C**3 + 1\n+    assert f.as_expr(A, B, C) == g_diff\n \n     R, = ring(\"\", ZZ)\n     assert R(3).as_expr() == 3\n",
  "sympy__sympy-24661": "diff --git a/sympy/parsing/tests/test_sympy_parser.py b/sympy/parsing/tests/test_sympy_parser.py\nindex 3723931..3de3dfa 100644\n--- a/sympy/parsing/tests/test_sympy_parser.py\n+++ b/sympy/parsing/tests/test_sympy_parser.py\n@@ -274,6 +274,31 @@ def test_convert_equals_signs():\n         transformations=transformations) == Eq(Eq(2*y, x), False)\n \n \n+from sympy.parsing.sympy_parser import parse_expr\n+from sympy.core import Symbol, Function, Float, Rational, Integer, I, Mul, Pow, Eq, Lt, Le, Gt, Ge, Ne\n+\n+def test_issue_24288():\n+    inputs = {\n+        \"1 < 2\": Lt(1, 2, evaluate=False),\n+        \"1 <= 2\": Le(1, 2, evaluate=False),\n+        \"1 > 2\": Gt(1, 2, evaluate=False),\n+        \"1 >= 2\": Ge(1, 2, evaluate=False),\n+        \"1 != 2\": Ne(1, 2, evaluate=False),\n+        \"1 == 2\": Eq(1, 2, evaluate=False)\n+    }\n+    for text, result in inputs.items():\n+        assert parse_expr(text, evaluate=False) == result\n+\n+def test_advanced_relational_parsing():\n+    expressions = {\n+        \"3 < 4 < 5\": And(Lt(3, 4, evaluate=False), Lt(4, 5, evaluate=False)),\n+        \"x < y < z\": And(Lt(Symbol('x'), Symbol('y'), evaluate=False), Lt(Symbol('y'), Symbol('z'), evaluate=False)),\n+        \"1 < 2 <= 3\": And(Lt(1, 2, evaluate=False), Le(2, 3, evaluate=False)),\n+        \"x > y >= z\": And(Gt(Symbol('x'), Symbol('y'), evaluate=False), Ge(Symbol('y'), Symbol('z'), evaluate=False))\n+    }\n+    for text, result in expressions.items():\n+        assert parse_expr(text, evaluate=False) == result\n+\n def test_parse_function_issue_3539():\n     x = Symbol('x')\n     f = Function('f')\n",
  "astropy__astropy-14369": "",
  "astropy__astropy-14598": "",
  "django__django-11299": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex b3dc643..bdacb76 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1889,6 +1889,29 @@ class OperationTests(OperationTestBase):\n         from_state = to_state\n         to_state = from_state.clone()\n         operation.state_forwards(app_label, to_state)\n+        \n+    @skipUnlessDBFeature('supports_table_check_constraints')\n+    def test_or_and_constraint(self):\n+        app_label = 'test_or_and_constraint'\n+        constraint_name = 'or_and_constraint'\n+        from_state = self.set_up_test_model(app_label)\n+        check = models.Q(pink__isnull=False, weight__gt=2) | models.Q(weight__lt=0)\n+        constraint = models.CheckConstraint(check=check, name=constraint_name)\n+        operation = migrations.AddConstraint('Pony', constraint)\n+        to_state = from_state.clone()\n+        operation.state_forwards(app_label, to_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, from_state, to_state)\n+        Pony = to_state.apps.get_model(app_label, 'Pony')\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            Pony.objects.create(pink=None, weight=3.0)\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            Pony.objects.create(pink='test', weight=1.0)\n+        Pony.objects.bulk_create([\n+            Pony(pink='test', weight=-1.0),\n+            Pony(pink=None, weight=-1.0),\n+            Pony(pink='test', weight=3.0),\n+        ])\n         Author = to_state.apps.get_model(app_label, 'Author')\n         with connection.schema_editor() as editor:\n             operation.database_forwards(app_label, editor, from_state, to_state)\n",
  "django__django-11477": "diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex e4898b6..3415264 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -145,8 +145,45 @@ class URLTranslationTests(URLTestCaseBase):\n         with translation.override('nl'):\n             self.assertEqual(reverse('users'), '/nl/gebruikers/')\n             self.assertEqual(reverse('prefixed_xml'), '/nl/prefixed.xml')\n+from django.urls import resolve, re_path\n+from django.utils.translation import gettext_lazy as _\n+from . import views\n \n-        with translation.override('pt-br'):\n+class TranslateURLTests(URLTestCaseBase):\n+    def test_translate_url_with_optional_groups(self):\n+        # Test URL translation with optional named groups in the pattern\n+        with translation.override('en'):\n+            self.assertEqual(\n+                translate_url('/en/with-arguments/regular-argument/', 'nl'),\n+                '/nl/with-arguments/regular-argument/',\n+            )\n+            self.assertEqual(\n+                translate_url('/en/with-arguments/regular-argument/optional.html', 'nl'),\n+                '/nl/with-arguments/regular-argument/optional.html',\n+            )\n+            self.assertEqual(\n+                translate_url('/en/regex_optional/1/2/', 'nl'),\n+                '/nl/regex_optional/1/2/',\n+            )\n+            self.assertEqual(\n+                translate_url('/en/regex_optional/1/', 'nl'),\n+                '/nl/regex_optional/1/',\n+            )\n+\n+        # Test URL resolution with optional named groups\n+        def test_resolve_with_optional_parameter(self):\n+            for url, kwargs in (\n+                ('/regex_optional/1/2/', {'arg1': '1', 'arg2': '2'}),\n+                ('/regex_optional/1/', {'arg1': '1'}),\n+            ):\n+                with self.subTest(url=url):\n+                    match = resolve(url)\n+                    self.assertEqual(match.url_name, 'regex_optional')\n+                    self.assertEqual(match.kwargs, kwargs)\n+                    self.assertEqual(\n+                        match.route,\n+                        r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?',\n+                    )\n             self.assertEqual(reverse('users'), '/pt-br/usuarios/')\n \n     def test_translate_url_utility(self):\n",
  "django__django-12273": "diff --git a/tests/model_inheritance_regress/tests.py b/tests/model_inheritance_regress/tests.py\nindex d79faca..d5f6334 100644\n--- a/tests/model_inheritance_regress/tests.py\n+++ b/tests/model_inheritance_regress/tests.py\n@@ -1,4 +1,23 @@\n+\n \"\"\"\n+class ResetPrimaryKeyTestCase(TestCase):\n+    def test_reset_primary_key_creates_new_instance(self):\n+        # Create an initial Derived object\n+        derived_instance = Derived.objects.create(f=True)\n+        original_pk = derived_instance.pk\n+\n+        # Reset primary key and save\n+        derived_instance.reset()\n+        derived_instance.save()\n+\n+        # Check to see if a new object is created\n+        self.assertNotEqual(derived_instance.pk, original_pk)\n+        self.assertEqual(Derived.objects.count(), 2)\n+        \n+        # Ensure original object still exists\n+        original_instance = Derived.objects.get(pk=original_pk)\n+        self.assertTrue(original_instance.f)\n+\n Regression tests for Model inheritance behavior.\n \"\"\"\n import datetime\n",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..5ec795f 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -606,7 +606,12 @@ class DeletionTests(TestCase):\n \n class FastDeleteTests(TestCase):\n \n-    def test_fast_delete_fk(self):\n+    def test_fast_delete_all_without_subquery(self):\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        # Assert that no subquery is used in the generated SQL.\n+        self.assertNotIn('SELECT', sql)\n         u = User.objects.create(\n             avatar=Avatar.objects.create()\n         )\n@@ -702,4 +707,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..45375d3 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from decimal import Decimal\n \n@@ -24,8 +25,24 @@ class DecimalFieldTests(TestCase):\n         msg = '\u201cabc\u201d value must be a decimal number.'\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n-\n-    def test_default(self):\n+    \n+    def test_invalid_to_python_value(self):\n+        f = models.DecimalField(max_digits=4, decimal_places=2)\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        invalid_values = [\n+            {},\n+            [],\n+            (),\n+            set(),\n+            object(),\n+            complex(1, 1),\n+            'non-numeric string',\n+            b'non-numeric byte-string',\n+        ]\n+        for value in invalid_values:\n+            with self.subTest(value=value):\n+                with self.assertRaisesMessage(ValidationError, msg % (value,)):\n+                    f.to_python(value)\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n \n",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..29cb57d 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,3 +1,7 @@\n+\n+from django.db.models import Sum\n+from .models import Toy\n+\n import datetime\n import pickle\n \n@@ -9,6 +13,42 @@ from .models import Container, Event, Group, Happening, M2MModel, MyEvent\n \n \n class PickleabilityTestCase(TestCase):\n+    def test_pickle_values_and_annotate_query(self):\n+        # Create test data\n+        Toy.objects.create(name='foo', price=10, material='wood')\n+        Toy.objects.create(name='bar', price=20, material='plastic')\n+        Toy.objects.create(name='baz', price=100, material='wood')\n+        \n+        # Create a queryset with values and annotate\n+        qs = Toy.objects.values('material').annotate(total_price=Sum('price'))\n+        \n+        # Pickle and unpickle the query\n+        reloaded_qs = Toy.objects.all()\n+        reloaded_qs.query = pickle.loads(pickle.dumps(qs.query))\n+        \n+        # Check that the reloaded queryset returns dictionaries with correct data\n+        expected_results = [\n+            {'material': 'wood', 'total_price': 110},\n+            {'material': 'plastic', 'total_price': 20},\n+        ]\n+        self.assertEqual(list(reloaded_qs), expected_results)\n+        self.assertTrue(all(isinstance(entry, dict) for entry in reloaded_qs))\n+\n+    def test_pickle_values_list_query(self):\n+        # Create test data\n+        Toy.objects.create(name='foo', price=10, material='wood')\n+        Toy.objects.create(name='bar', price=20, material='plastic')\n+        \n+        # Create a queryset with values_list\n+        qs = Toy.objects.values_list('name', flat=True)\n+        \n+        # Pickle and unpickle the query\n+        reloaded_qs = Toy.objects.all()\n+        reloaded_qs.query = pickle.loads(pickle.dumps(qs.query))\n+        \n+        # Check that the reloaded queryset returns a list of names\n+        self.assertEqual(list(reloaded_qs), ['foo', 'bar'])\n+        self.assertTrue(all(isinstance(entry, str) for entry in reloaded_qs))\n     @classmethod\n     def setUpTestData(cls):\n         Happening.objects.create()  # make sure the defaults are working (#20158)\n",
  "django__django-13449": "diff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\nindex 3f59cdf..d9c7568 100644\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -11,4 +11,5 @@ class Employee(models.Model):\n     department = models.CharField(max_length=40, blank=False, null=False)\n     hire_date = models.DateField(blank=False, null=False)\n     age = models.IntegerField(blank=False, null=False)\n-    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\n",
  "django__django-13512": "diff --git a/tests/forms_tests/field_tests/test_jsonfield.py b/tests/forms_tests/field_tests/test_jsonfield.py\nindex e31bff4..dce63bc 100644\n--- a/tests/forms_tests/field_tests/test_jsonfield.py\n+++ b/tests/forms_tests/field_tests/test_jsonfield.py\n@@ -25,6 +25,11 @@ class JSONFieldTest(SimpleTestCase):\n             field.clean('{some badly formed: json}')\n \n     def test_prepare_value(self):\n+        field = JSONField()\n+        self.assertEqual(field.prepare_value({'a': '\u4f60\u597d \u4e16\u754c'}), '{\"a\": \"\u4f60\u597d \u4e16\u754c\"}')\n+        self.assertEqual(field.prepare_value('\u4f60\u597d\uff0c\u4e16\u754c'), '\"\u4f60\u597d\uff0c\u4e16\u754c\"')\n+        self.assertEqual(field.prepare_value({'a': '\ud83d\ude00\ud83d\udc31'}), '{\"a\": \"\ud83d\ude00\ud83d\udc31\"}')\n+        self.assertEqual(field.prepare_value([\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]), '[\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]')\n         field = JSONField()\n         self.assertEqual(field.prepare_value({'a': 'b'}), '{\"a\": \"b\"}')\n         self.assertEqual(field.prepare_value(None), 'null')\n",
  "django__django-14404": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 8fb91af..bc6dbac 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -6603,6 +6603,40 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         self.assertRedirects(response, known_url, status_code=301, target_status_code=403)\n \n     @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1], SCRIPT_NAME='/prefix/')\n+        self.assertRedirects(\n+            response,\n+            '/prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/prefix/')\n+    def test_missing_slash_append_slash_true_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n         user = User.objects.create_user(\n             username='user',\n@@ -6629,6 +6663,40 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         self.assertEqual(response.status_code, 404)\n \n     @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1], SCRIPT_NAME='/prefix/')\n+        self.assertRedirects(\n+            response,\n+            '/prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/prefix/')\n+    def test_missing_slash_append_slash_true_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n     def test_single_model_no_append_slash(self):\n         superuser = User.objects.create_user(\n             username='staff',\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..26e1a6c 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -655,6 +655,30 @@ class WriterTests(SimpleTestCase):\n         self.assertEqual(result.args, value.args)\n         self.assertEqual(result.keywords, value.keywords)\n \n+    def test_serialize_custom_field_and_mixin(self):\n+        \"\"\"\n+        Test serialization of a model with a custom field and mixin.\n+        \"\"\"\n+        fields = {\n+            'name': app.models.MyField(primary_key=True),\n+        }\n+\n+        migration = type(\"Migration\", (migrations.Migration,), {\n+            \"operations\": [\n+                migrations.CreateModel(\n+                    name=\"TestModel\",\n+                    fields=tuple(fields.items()),\n+                    bases=(app.models.MyMixin, models.Model),\n+                ),\n+            ],\n+            \"dependencies\": [],\n+        })\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        # Execute the generated migration script to ensure it runs without errors.\n+        result = self.safe_exec(output)\n+        self.assertIn(\"Migration\", result)\n+\n     def test_serialize_type_none(self):\n         self.assertSerializedEqual(type(None))\n \n",
  "django__django-15375": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1d4ef56..c3856c0 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1637,9 +1637,51 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertEqual(len(qs), 6)\n \n+    def test_aggregate_with_default_after_annotate(self):\n+        # This test case replicates the issue described where `aggregate` with `default` \n+        # after `annotate` causes an OperationalError.\n+        result = Book.objects.annotate(\n+            idx=F(\"id\")\n+        ).aggregate(\n+            total=Sum(\"id\", default=0)\n+        )\n+        # This should run without errors and return the correct sum\n+        self.assertEqual(result['total'], 4560)\n+\n+    def test_aggregate_with_default_long_form(self):\n+        # This test case is the working long form to ensure that using Coalesce explicitly works.\n+        result = Book.objects.annotate(\n+            idx=F(\"id\")\n+        ).aggregate(\n+            total=Coalesce(Sum(\"id\"), 0)\n+        )\n+        # This should return the correct sum as well\n+        self.assertEqual(result['total'], 4560)\n+\n     def test_exists_extra_where_with_aggregate(self):\n         qs = Book.objects.all().annotate(\n             count=Count('id'),\n             exists=Exists(Author.objects.extra(where=['1=0'])),\n         )\n-        self.assertEqual(len(qs), 6)\n+        self.assertEqual(len(qs), 6)\n+\n+    def test_aggregate_with_default_after_annotate(self):\n+        # This test case replicates the issue described where `aggregate` with `default` \n+        # after `annotate` causes an OperationalError.\n+        result = Book.objects.annotate(\n+            idx=F(\"id\")\n+        ).aggregate(\n+            total=Sum(\"id\", default=0)\n+        )\n+        # This should run without errors and return the correct sum\n+        self.assertEqual(result['total'], 4560)\n+\n+    def test_aggregate_with_default_long_form(self):\n+        # This test case is the working long form to ensure that using Coalesce explicitly works.\n+        result = Book.objects.annotate(\n+            idx=F(\"id\")\n+        ).aggregate(\n+            total=Coalesce(Sum(\"id\"), 0)\n+        )\n+        # This should return the correct sum as well\n+        self.assertEqual(result['total'], 4560)\n",
  "django__django-15695": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 99db46a..5c2f862 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -2980,6 +2980,9 @@ class OperationTests(OperationTestBase):\n \n         new_state = project_state.clone()\n         operation.state_forwards(app_label, new_state)\n+        # Test renaming an unnamed index that is auto-generated for unique_together\n+        self._test_rename_unnamed_index_auto_generated(app_label, project_state)\n+\n         # Rename index.\n         with connection.schema_editor() as editor:\n             operation.database_forwards(app_label, editor, project_state, new_state)\n",
  "django__django-15732": "",
  "django__django-15916": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex cc5e08c..7c4f532 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -3497,7 +3497,55 @@ class FormFieldCallbackTests(SimpleTestCase):\n             )\n \n \n-class LocalizedModelFormTest(TestCase):\n+from django.test import TestCase\n+from django import forms\n+from django.forms import modelform_factory\n+from .models import Person  # Assuming models.py contains a Person model as an example.\n+\n+class ModelFormFieldCallbackTest(TestCase):\n+    def test_formfield_callback_in_meta(self):\n+        \"\"\"Test if formfield_callback in Meta is respected.\"\"\"\n+        \n+        def sample_callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea)\n+        \n+        class CallbackForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = ['id', 'name']\n+                formfield_callback = sample_callback\n+        \n+        form = CallbackForm()\n+        \n+        for field in form.fields.values():\n+            self.assertIsInstance(field.widget, forms.Textarea)\n+\n+    def test_factory_respects_base_form_meta(self):\n+        \"\"\"Test if modelform_factory respects formfield_callback from base form's Meta.\"\"\"\n+        \n+        def sample_callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea)\n+        \n+        class BaseForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = '__all__'\n+                formfield_callback = sample_callback\n+        \n+        FactoryForm = modelform_factory(model=Person, form=BaseForm)\n+        form = FactoryForm()\n+        \n+        for field in form.fields.values():\n+            self.assertIsInstance(field.widget, forms.Textarea)\n+\n+        # Test inheritance from FactoryForm\n+        class InheritedForm(FactoryForm):\n+            pass\n+        \n+        inherited_form = InheritedForm()\n+        \n+        for name, field in inherited_form.fields.items():\n+            self.assertEqual(type(field.widget), type(form.fields[name].widget))\n     def test_model_form_applies_localize_to_some_fields(self):\n         class PartiallyLocalizedTripleForm(forms.ModelForm):\n             class Meta:\n",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..f219d6b 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -5,11 +5,31 @@ import re\n \n from django.core import serializers\n from django.core.serializers.base import DeserializationError\n+class MasterTestModel(models.Model):\n+    name = models.CharField(max_length=120)\n+\n+class TagTestManager(models.Manager):\n+    def get_queryset(self):\n+        return super().get_queryset().select_related(\"master\")\n+\n+class TagTestModel(models.Model):\n+    name = models.CharField(max_length=120)\n+    master = models.ForeignKey(MasterTestModel, on_delete=models.SET_NULL, null=True)\n+    objects = TagTestManager()\n+\n+class TestModel(models.Model):\n+    name = models.CharField(max_length=120)\n+    tags = models.ManyToManyField(TagTestModel, blank=True)\n+\n+class JsonSerializerTestCase(SerializersTestBase, TestCase):\n+    ...\n+\n from django.core.serializers.json import DjangoJSONEncoder\n from django.db import models\n from django.test import SimpleTestCase, TestCase, TransactionTestCase\n from django.test.utils import isolate_apps\n-from django.utils.translation import gettext_lazy, override\n+from django.db import models\n+from django.core import serializers\n \n from .models import Score\n from .tests import SerializersTestBase, SerializersTransactionTestBase\n@@ -258,7 +278,23 @@ class JsonSerializerTestCase(SerializersTestBase, TestCase):\n             for obj in serializers.deserialize(\"json\", test_string, ignore=False):\n                 obj.save()\n \n-    def test_helpful_error_message_for_many2many_not_iterable(self):\n+    def test_serialization_with_custom_manager_and_select_related(self):\n+        \"\"\"\n+        Serialization should succeed when using a custom manager with select_related\n+        on a many-to-many relationship.\n+        \"\"\"\n+        master = MasterTestModel.objects.create(name=\"master\")\n+        tag = TagTestModel.objects.create(name=\"tag\", master=master)\n+        test_obj = TestModel.objects.create(name=\"test\")\n+        test_obj.tags.add(tag)\n+\n+        try:\n+            serialized_data = serializers.serialize(\"json\", [test_obj])\n+            deserialized_objects = list(serializers.deserialize(\"json\", serialized_data))\n+            self.assertEqual(len(deserialized_objects), 1)\n+            self.assertEqual(deserialized_objects[0].object.name, \"test\")\n+        except Exception as e:\n+            self.fail(f\"Serialization raised an unexpected exception: {e}\")\n         \"\"\"\n         Not iterable many-to-many field value throws a helpful error message.\n         \"\"\"\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 53fdd55..1b7dd5b 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -206,8 +206,18 @@ def test_inset_and_secondary():\n def test_cmap(cmap):\n     pickle.dumps(cmap)\n \n+import matplotlib.pyplot as plt\n \n-def test_unpickle_canvas():\n+@pytest.mark.backend('macosx')\n+def test_unpickle_dpi_doubling_m1_mac():\n+    fig = plt.figure(dpi=200)\n+    initial_dpi = fig.dpi\n+    for i in range(5):\n+        out = BytesIO()\n+        pickle.dump(fig, out)\n+        out.seek(0)\n+        fig = pickle.load(out)\n+        assert fig.dpi == initial_dpi, f\"DPI doubled after unpickling on iteration {i}\"\n     fig = mfigure.Figure()\n     assert fig.canvas is not None\n     out = BytesIO()\n",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 87375f2..6d4ba16 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6600,6 +6600,24 @@ def test_integrate(dask):\n     actual = da.integrate((\"y\", \"x\"))\n     assert actual.ndim == 0\n \n+    with pytest.warns(FutureWarning):\n+        da.integrate(dim=\"x\")\n+\n+    # Test the correct behavior after deprecation\n+    actual_coord = da.integrate(coord=\"y\")\n+    expected_y = xr.DataArray(\n+        np.trapz(da, da[\"y\"], axis=1),\n+        dims=[\"x\"],\n+        coords={k: v for k, v in da.coords.items() if \"y\" not in v.dims},\n+    )\n+    assert_allclose(expected_y, actual_coord.compute())\n+    assert_equal(actual_coord, ds.integrate(coord=\"y\")[\"var\"])\n+    assert_equal(ds[\"var\"].integrate(coord=\"y\"), ds.integrate(coord=\"y\")[\"var\"])\n+\n+    # along x and y with coord\n+    actual_coord = da.integrate(coord=(\"y\", \"x\"))\n+    assert actual_coord.ndim == 0\n+\n     with pytest.raises(ValueError):\n         da.integrate(\"x2d\")\n \n",
  "pydata__xarray-4094": "",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..2e0249a 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -130,6 +130,34 @@ def test_regex_error(capsys: CaptureFixture) -> None:\n     )\n     assert assertString in output.err\n \n+from typing import Any\n+import re\n+import pytest\n+from pylint.config.argument import _regexp_csv_transfomer\n+from pylint.lint import Run\n+\n+CSV_REGEX_COMMA_CASES = [\n+    (\"foo\", [\"foo\"]),\n+    (\"foo,bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar{1,3}\", [\"foo\", \"bar{1,3}\"]),\n+]\n+\n+@pytest.mark.parametrize(\"in_string,expected\", CSV_REGEX_COMMA_CASES)\n+def test_csv_regex_comma_in_quantifier(in_string: str, expected: list[str]) -> None:\n+    \"\"\"Check that we correctly parse a comma-separated regex when there are one\n+    or more commas within quantifier expressions.\n+    \"\"\"\n+\n+    def _template_run(in_string: str) -> list[re.Pattern[Any]]:\n+        r = Run(\n+            [str(EMPTY_MODULE), rf\"--bad-names-rgx={in_string}\"],\n+            exit=False,\n+        )\n+        bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs\n+        return bad_names_rgxs\n+\n+    assert _template_run(in_string) == [re.compile(regex) for regex in expected]\n \n def test_csv_regex_error(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error when an option is passed and one\n",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..8d22b0a 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1156,7 +1156,24 @@ def test_summary_list_after_errors(testdir):\n     )\n \n \n-def test_importorskip():\n+def test_does_not_eagerly_collect_packages(testdir):\n+    testdir.makepyfile(\"def test(): pass\")\n+    pydir = testdir.mkpydir(\"foopkg\")\n+    pydir.join(\"__init__.py\").write(\"assert False\")\n+    result = testdir.runpytest()\n+    assert result.ret == ExitCode.OK\n+\n+def test_does_not_put_src_on_path(testdir):\n+    # `src` is not on sys.path so it should not be importable\n+    testdir.tmpdir.join(\"src/nope/__init__.py\").ensure()\n+    testdir.makepyfile(\n+        \"import pytest\\n\"\n+        \"def test():\\n\"\n+        \"    with pytest.raises(ImportError):\\n\"\n+        \"        import nope\\n\"\n+    )\n+    result = testdir.runpytest()\n+    assert result.ret == ExitCode.OK\n     with pytest.raises(\n         pytest.skip.Exception,\n         match=\"^could not import 'doesnotexist': No module named .*\",\n@@ -1184,4 +1201,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "diff --git a/testing/test_mark_expression.py b/testing/test_mark_expression.py\nindex 10b71e9..cc6da99 100644\n--- a/testing/test_mark_expression.py\n+++ b/testing/test_mark_expression.py\n@@ -139,6 +139,20 @@ def test_valid_idents(ident: str) -> None:\n     assert evaluate(ident, {ident: True}.__getitem__)\n \n \n+@pytest.mark.parametrize(\n+    \"ident\",\n+    (\n+        \"None\",\n+        \"True\",\n+        \"False\",\n+    ),\n+)\n+def test_reserved_keywords(ident: str) -> None:\n+    try:\n+        Expression.compile(ident)\n+    except AssertionError:\n+        pytest.fail(f\"AssertionError raised for keyword: {ident}\")\n+\n @pytest.mark.parametrize(\n     \"ident\",\n     (\n",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..e965de1 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -258,5 +258,32 @@ def test_set_output_mro():\n \n     class C(A, B):\n         pass\n+    assert C().transform(None) == \"B\"\n \n-    assert C().transform(None) == \"B\"\n+def test_feature_union_with_pandas_output():\n+    \"\"\"Test FeatureUnion with a custom transformer and pandas output.\"\"\"\n+\n+    import pandas as pd\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn.pipeline import make_union\n+    from sklearn import set_config\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y=None, **kwargs):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y=None) -> pd.DataFrame:\n+            return X[\"value\"].groupby(X[\"date\"]).sum().reset_index(drop=True)\n+\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    # Set the configuration to output pandas DataFrames\n+    set_config(transform_output=\"pandas\")\n+    result = make_union(MyTransformer()).fit_transform(data)\n+\n+    # Check the type of the result to ensure it's a DataFrame\n+    assert isinstance(result, pd.DataFrame)\n+    # Check the correctness of the sum aggregation\n+    assert (result.values.flatten() == [240] * len(pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\"))).all()\n",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex f07be18..8946dac 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -11,6 +11,27 @@\n import pytest\n \n from sphinx import addnodes\n+from sphinx.util.docutils import parse_rst\n+from sphinx.ext.autodoc import Options\n+\n+def test_autodoc_typehints_none(app):\n+    # Test with autodoc_typehints='signature'\n+    app.config.autodoc_typehints = 'signature'\n+    app.builder.build_all()\n+\n+    content = app.env.get_doctree('index')\n+    assert isinstance(content[3], addnodes.desc)\n+    assert content[3][1].astext() == 'Dummy function using dummy.*'\n+    # Ensure None does not have a link in the signature\n+    assert 'https://docs.python.org/3/library/constants.html#None' not in content[3].pformat()\n+\n+    # Test with autodoc_typehints='description'\n+    app.config.autodoc_typehints = 'description'\n+    app.builder.build_all()\n+    \n+    content = app.env.get_doctree('index')\n+    # Ensure None has a link in the description\n+    assert 'https://docs.python.org/3/library/constants.html#None' in content[3].pformat()\n \n \n @pytest.mark.sphinx('dummy', testroot='ext-autodoc')\n@@ -30,4 +51,4 @@ def test_autodoc(app, status, warning):\n my_name\n \n alias of bug2437.autodoc_dummy_foo.Foo\"\"\"\n-    assert warning.getvalue() == ''\n+    assert warning.getvalue() == ''\n",
  "sphinx-doc__sphinx-8056": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 1d6a8cf..b2405e0 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1317,7 +1317,40 @@ class NumpyDocstringTest(BaseDocstringTest):\n             expected = dedent(expected)\n             self.assertEqual(expected, actual)\n \n-    def test_parameters_with_class_reference(self):\n+    def test_multiple_parameters_issue(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like\n+    Input arrays, description of `x1`, `x2`.\n+\n+x3, x4 : array_like, optional\n+    Additional input arrays, optional description of `x3`, `x4`.\n+\"\"\"\n+\n+        # Test with napoleon_use_param=False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: * **x1, x2** (:class:`array_like`) -- Input arrays, description of ``x1``, ``x2``.\n+              * **x3, x4** (:class:`array_like`, *optional*) -- Additional input arrays, optional description of ``x3``, ``x4``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test with napoleon_use_param=True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: :class:`array_like`\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: :class:`array_like`\n+:param x3: Additional input arrays, optional description of ``x3``, ``x4``.\n+:type x3: :class:`array_like`, *optional*\n+:param x4: Additional input arrays, optional description of ``x3``, ``x4``.\n+:type x4: :class:`array_like`, *optional*\n+\"\"\"\n+        self.assertEqual(expected, actual)\n         docstring = \"\"\"\\\n Parameters\n ----------\n",
  "sphinx-doc__sphinx-8551": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex fd4bdc4..8770860 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -770,6 +770,58 @@ def test_pydecoratormethod_signature(app):\n     assert_node(doctree[1], addnodes.desc, desctype=\"method\",\n                 domain=\"py\", objtype=\"method\", noindex=False)\n \n+@pytest.mark.sphinx(freshenv=True)\n+def test_type_and_rtype_ambiguous_class_lookup(app):\n+    text = (\n+        \".. py:class:: mod.A\\n\"\n+        \".. py:class:: mod.submod.A\\n\"\n+        \"\\n\"\n+        \".. py:function:: f()\\n\"\n+        \"\\n\"\n+        \"   - :py:class:`mod.A`\\n\"\n+        \"   - :py:class:`mod.submod.A`\\n\"\n+        \"\\n\"\n+        \"   :param mod.A a:\\n\"\n+        \"   :param mod.submod.A b:\\n\"\n+        \"   :rtype: mod.A\\n\"\n+        \"   :rtype: mod.submod.A\\n\"\n+        \"\\n\"\n+        \".. py:currentmodule:: mod\\n\"\n+        \"\\n\"\n+        \".. py:function:: f()\\n\"\n+        \"\\n\"\n+        \"   - :py:class:`A`\\n\"\n+        \"   - :py:class:`mod.A`\\n\"\n+        \"   - :py:class:`mod.submod.A`\\n\"\n+        \"\\n\"\n+        \"   :param A a:\\n\"\n+        \"   :param mod.A b:\\n\"\n+        \"   :param mod.submod.A c:\\n\"\n+        \"   :rtype: A\\n\"\n+        \"   :rtype: mod.A\\n\"\n+        \"   :rtype: mod.submod.A\\n\"\n+        \"\\n\"\n+        \".. py:currentmodule:: mod.submod\\n\"\n+        \"\\n\"\n+        \".. py:function:: f()\\n\"\n+        \"\\n\"\n+        \"   - :py:class:`A`\\n\"\n+        \"   - :py:class:`mod.A`\\n\"\n+        \"   - :py:class:`mod.submod.A`\\n\"\n+        \"\\n\"\n+        \"   :param A a: BUG: links to mod.A instead of mod.submod.A\\n\"\n+        \"   :param mod.A b:\\n\"\n+        \"   :param mod.submod.A c:\\n\"\n+        \"   :rtype: A\\n\"\n+        \"   :rtype: mod.A\\n\"\n+        \"   :rtype: mod.submod.A\\n\"\n+    )\n+    with pytest.raises(SphinxWarning) as excinfo:\n+        restructuredtext.parse(app, text)\n+        \n+    warnings = excinfo.value.args[0].split('\\n')\n+    assert any(\"more than one target found for cross-reference 'A'\" in warning for warning in warnings)\n+\n     assert 'deco' in domain.objects\n     assert domain.objects['deco'] == ('index', 'deco', 'method')\n \n",
  "sphinx-doc__sphinx-8593": "diff --git a/tests/roots/test-ext-autodoc/target/private.py b/tests/roots/test-ext-autodoc/target/private.py\nindex 677b469..c5c7525 100644\n--- a/tests/roots/test-ext-autodoc/target/private.py\n+++ b/tests/roots/test-ext-autodoc/target/private.py\n@@ -1,3 +1,7 @@\n+\n+PRIVATE_CONSTANT = None  #: :meta private:\n+_public_constant = None  #: :meta public:\n+\n def private_function(name):\n     \"\"\"private_function is a docstring().\n \n@@ -8,4 +12,4 @@ def _public_function(name):\n     \"\"\"public_function is a docstring().\n \n     :meta public:\n-    \"\"\"\n+    \"\"\"\n",
  "sphinx-doc__sphinx-9230": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex e86a758..1b5861d 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -984,7 +984,47 @@ def test_info_field_list(app):\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n \n-def test_info_field_list_var(app):\n+\n+def test_info_field_list_dict_str_str(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:class:: Class\\n\"\n+            \"\\n\"\n+            \"   :param dict(str, str) opc_meta: (optional)\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree, (nodes.target,\n+                          addnodes.index,\n+                          addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                                    [desc_addname, \"example.\"],\n+                                                    [desc_name, \"Class\"])],\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree[3][1][0][0],\n+                ([nodes.field_name, \"Parameters\"],\n+                 [nodes.field_body, nodes.bullet_list, [nodes.list_item, nodes.paragraph]]))\n+\n+    # :param dict(str, str) opc_meta:\n+    assert_node(doctree[3][1][0][0][1][0][0][0],\n+                ([addnodes.literal_strong, \"opc_meta\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"dict\"],\n+                 [addnodes.literal_emphasis, \"(\"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \", \"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \")\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"(optional)\"))\n+    assert_node(doctree[3][1][0][0][1][0][0][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"dict\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n             \"   :var int attr: blah blah\\n\")\n",
  "sphinx-doc__sphinx-9258": "",
  "sphinx-doc__sphinx-9673": "",
  "sympy__sympy-18211": "",
  "sympy__sympy-18698": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 38de6f6..3d76d66 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3330,6 +3330,22 @@ def test_issue_17988():\n     M = Matrix([[poly(x + 1), poly(x + 1)]])\n     assert p * M == M * p == Matrix([[poly(x**2 - 1), poly(x**2 - 1)]])\n \n-def test_issue_18205():\n+from sympy import Symbol, sqf_list, poly\n+\n+x = Symbol('x')\n+\n+def test_sqf_issue_8695():\n+    p = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3\n+    expected_result = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\n+    assert sqf_list(p) == expected_result\n+\n+def test_sqf_simple_cases():\n+    assert sqf_list(x*(x + 1)) == (1, [(x, 1), (x + 1, 1)])\n+    assert sqf_list(x**2 + 2*x + 1) == (1, [(x + 1, 2)])\n+\n+def test_sqf_with_multiplicities():\n+    p = (x - 2)**3 * (x + 3)**2\n+    expected_result = (1, [(x - 2, 3), (x + 3, 2)])\n+    assert sqf_list(p) == expected_result\n     assert cancel((2 + I)*(3 - I)) == 7 + I\n     assert cancel((2 + I)*(2 - I)) == 5\n",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..69b6c6b 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3255,7 +3255,11 @@ def test_issue_5786():\n         (x - I*y)*(z - I*t)), extension=[I])) == -I*t*x - t*y + x*z - I*y*z\n \n \n-def test_noncommutative():\n+def test_issue_18895_factor_with_extension():\n+    # This test verifies that factor with extension=True does not drop factors.\n+    z = expand((x-1)*(y-1))\n+    assert factor(z, extension=True) == (x - 1)*(y - 1)\n+    assert factor(z, extension=[I]) == (x - 1)*(y - 1)\n     class foo(Expr):\n         is_commutative=False\n     e = x/(x + x*y)\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..15fd7ce 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"This tests sympy/core/basic.py with (ideally) no reference to subclasses\n of Basic or Atom.\"\"\"\n \n@@ -11,7 +12,7 @@ from sympy.core.sympify import SympifyError\n from sympy.core.function import Function, Lambda\n from sympy.core.compatibility import default_sort_key\n \n-from sympy import sin, Q, cos, gamma, Tuple, Integral, Sum\n+from sympy import sin, Q, cos, gamma, Tuple, Integral, Sum, Symbol\n from sympy.functions.elementary.exponential import exp\n from sympy.testing.pytest import raises\n from sympy.core import I, pi\n@@ -24,7 +25,11 @@ b21 = Basic(b2, b1)\n \n def test__aresame():\n     assert not _aresame(Basic([]), Basic())\n-    assert not _aresame(Basic([]), Basic(()))\n+def test_symbol_dict():\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__'), \"Symbol instances should not have a __dict__ attribute\"\n+    assert hasattr(s, '__slots__'), \"Symbol instances must have __slots__\"\n+    assert '__dict__' not in dir(s), \"__dict__ should not be in the dir() of a Symbol instance\"\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n",
  "sympy__sympy-24562": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 13e3235..29e9ae7 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -369,8 +369,35 @@ def test_Rational_new():\n     assert n.q == 4\n     assert n.p == -2\n \n+def test_issue_24543():\n+    from sympy import Rational\n \n-def test_Number_new():\n+    # Original test case that checks the specific issue\n+    assert Rational('0.5', '100') == Rational(1, 200)\n+\n+    # Additional test cases to verify behavior\n+    assert Rational('1.0', '2') == Rational(1, 2)  # Should parse correctly as a fraction\n+    assert Rational('3', '4') == Rational(3, 4)  # Should parse correctly as a fraction\n+    assert Rational('0.25', '1.5') == Rational(1, 6)  # '0.25/1.5' should result to 1/6\n+\n+    # Test with valid float arguments\n+    assert Rational(0.5, 100) == Rational(1, 200)\n+    assert Rational(0.1, 0.2) == Rational(1, 2)\n+\n+    # Test with integer arguments\n+    assert Rational(1, 3) == Rational(1, 3)\n+    assert Rational(4, 2) == Rational(2, 1)\n+\n+    # Test edge cases\n+    try:\n+        Rational('a', 'b')  # Should raise an error\n+    except ValueError:\n+        pass\n+\n+    try:\n+        Rational(0, 0)  # Should raise an error for indeterminate form\n+    except ValueError:\n+        pass\n     \"\"\"\"\n     Test for Number constructor\n     \"\"\"\n",
  "django__django-14534": "",
  "matplotlib__matplotlib-20676": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex b009975..001f7ab 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -301,8 +301,36 @@ def test_tool_line_handle():\n \n     assert tool_line_handle.positions == positions\n \n-\n-def check_lasso_selector(**kwargs):\n+import pytest\n+from matplotlib import widgets\n+\n+@pytest.mark.parametrize('direction', (\"horizontal\", \"vertical\"))\n+def test_span_selector_bound(direction):\n+    fig, ax = plt.subplots(1, 1)\n+    ax.plot([10, 20], [10, 30])\n+    ax.figure.canvas.draw()\n+    x_bound = ax.get_xbound()\n+    y_bound = ax.get_ybound()\n+\n+    tool = widgets.SpanSelector(ax, print, direction, interactive=True)\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    bound = x_bound if direction == 'horizontal' else y_bound\n+    assert tool._edge_handles.positions == list(bound)\n+\n+    press_data = [10.5, 11.5]\n+    move_data = [11, 13]  # Updating selector is done in onmove\n+    release_data = move_data\n+    do_event(tool, 'press', xdata=press_data[0], ydata=press_data[1], button=1)\n+    do_event(tool, 'onmove', xdata=move_data[0], ydata=move_data[1], button=1)\n+\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    index = 0 if direction == 'horizontal' else 1\n+    handle_positions = [press_data[index], release_data[index]]\n+    assert tool._edge_handles.positions == handle_positions\n     ax = get_ax()\n \n     def onselect(verts):\n",
  "scikit-learn__scikit-learn-12682": "diff --git a/sklearn/decomposition/tests/test_dict_learning.py b/sklearn/decomposition/tests/test_dict_learning.py\nindex 35a43f8..9c24bfe 100644\n--- a/sklearn/decomposition/tests/test_dict_learning.py\n+++ b/sklearn/decomposition/tests/test_dict_learning.py\n@@ -51,6 +51,58 @@ def test_dict_learning_shapes():\n     assert_equal(dico.transform(X).shape, (X.shape[0], n_components))\n \n \n+import numpy as np\n+import pytest\n+from sklearn.decomposition import SparseCoder\n+from sklearn.exceptions import ConvergenceWarning\n+\n+def test_sparse_coder_max_iter_exposure():\n+    def ricker_function(resolution, center, width):\n+        \"\"\"Discrete sub-sampled Ricker (Mexican hat) wavelet\"\"\"\n+        x = np.linspace(0, resolution - 1, resolution)\n+        x = ((2 / (np.sqrt(3 * width) * np.pi ** .25))\n+             * (1 - (x - center) ** 2 / width ** 2)\n+             * np.exp(-(x - center) ** 2 / (2 * width ** 2)))\n+        return x\n+\n+    def ricker_matrix(width, resolution, n_components):\n+        \"\"\"Dictionary of Ricker (Mexican hat) wavelets\"\"\"\n+        centers = np.linspace(0, resolution - 1, n_components)\n+        D = np.empty((n_components, resolution))\n+        for i, center in enumerate(centers):\n+            D[i] = ricker_function(resolution, center, width)\n+        D /= np.sqrt(np.sum(D ** 2, axis=1))[:, np.newaxis]\n+        return D\n+\n+    transform_algorithm = 'lasso_cd'\n+    resolution = 1024\n+    subsampling = 3  # subsampling factor\n+    n_components = resolution // subsampling\n+\n+    # Compute a wavelet dictionary\n+    D_multi = np.r_[tuple(ricker_matrix(width=w, resolution=resolution,\n+                                      n_components=n_components // 5)\n+                          for w in (10, 50, 100, 500, 1000))]\n+\n+    X = np.linspace(0, resolution - 1, resolution)\n+    first_quarter = X < resolution / 4\n+    X[first_quarter] = 3.\n+    X[np.logical_not(first_quarter)] = -1.\n+    X = X.reshape(1, -1)\n+\n+    # Check that the underlying model fails to converge with low max_iter\n+    with pytest.warns(ConvergenceWarning):\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=1)\n+        model.fit_transform(X)\n+\n+    # Check that the underlying model converges without warnings with a higher max_iter\n+    with pytest.warns(None) as record:\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=2000)\n+        model.fit_transform(X)\n+    assert not record.list\n+\n def test_dict_learning_overcomplete():\n     n_components = 12\n     dico = DictionaryLearning(n_components, random_state=0).fit(X)\n",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..4270ee6 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -147,6 +147,27 @@ def test_multi_target_sample_weights():\n     X_test = [[1.5, 2.5, 3.5], [3.5, 4.5, 5.5]]\n     assert_almost_equal(rgr.predict(X_test), rgr_w.predict(X_test))\n \n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+from sklearn.model_selection import cross_val_predict\n+\n+def test_cross_val_predict_with_multioutput_classifier_predict_proba():\n+    # Create a multilabel classification dataset\n+    X, Y = make_multilabel_classification(n_samples=100, n_features=20, n_classes=5, n_labels=2, random_state=0)\n+\n+    # Initialize MultiOutputClassifier with LinearDiscriminantAnalysis\n+    mo_clf = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+\n+    # Use cross_val_predict with method='predict_proba'\n+    try:\n+        pred_proba = cross_val_predict(mo_clf, X, Y, cv=5, method='predict_proba')\n+        assert isinstance(pred_proba, list), \"The prediction probabilities should be a list of arrays for each output.\"\n+        for proba in pred_proba:\n+            assert proba.shape == (X.shape[0], Y.shape[1]), \"Each probability array should match the shape of the output.\"\n+    except AttributeError as e:\n+        raise AssertionError(f\"cross_val_predict with method='predict_proba' raised an unexpected AttributeError: {e}\")\n+\n \n # Import the data\n iris = datasets.load_iris()\n",
  "sphinx-doc__sphinx-9658": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 072cdc7..66d6bee 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -170,7 +170,29 @@ def test_restify_broken_type_hints():\n     assert restify(BrokenType) == ':py:class:`tests.test_util_typing.BrokenType`'\n \n \n-def test_stringify():\n+def test_mocked_inherited_classes_restify():\n+    with mock(['torch.nn']):\n+        class MockedBase:\n+            __module__ = 'torch.nn'\n+            __name__ = 'Module'\n+        \n+        class Inherited(MockedBase):\n+            pass\n+\n+        result = restify(Inherited)\n+        assert result == ':py:class:`torch.nn.Module`', f\"Expected ':py:class:`torch.nn.Module`', got {result}\"\n+\n+def test_mocked_inherited_classes_stringify():\n+    with mock(['torch.nn']):\n+        class MockedBase:\n+            __module__ = 'torch.nn'\n+            __name__ = 'Module'\n+        \n+        class Inherited(MockedBase):\n+            pass\n+\n+        result = stringify(Inherited)\n+        assert result == 'torch.nn.Module', f\"Expected 'torch.nn.Module', got {result}\"\n     assert stringify(int) == \"int\"\n     assert stringify(str) == \"str\"\n     assert stringify(None) == \"None\"\n",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..7e65a8c 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -348,6 +348,18 @@ def test_reverse_order():\n            Product(x*y, (x, b + 1, a - 1), (y, 6, 1))\n \n \n+def test_issue_13546():\n+    from sympy import Product, Symbol, S\n+    n = Symbol('n')\n+    k = Symbol('k')\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 2).doit() == S(15)/2\n+    # Additional test cases\n+    assert p.subs(n, 3).doit() == S(175)/8\n+    assert p.subs(n, 1).doit() == S(2)\n+    assert p.subs(n, 0).doit() == S(1)\n+\n+\n def test_issue_9983():\n     n = Symbol('n', integer=True, positive=True)\n     p = Product(1 + 1/n**(S(2)/3), (n, 1, oo))\n@@ -357,4 +369,4 @@ def test_issue_9983():\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}