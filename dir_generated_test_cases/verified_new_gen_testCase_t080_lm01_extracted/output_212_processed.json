{
  "astropy__astropy-12907": "",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "diff --git a/astropy/io/fits/tests/test_connect.py b/astropy/io/fits/tests/test_connect.py\nindex 00deafe..3cace9b 100644\n--- a/astropy/io/fits/tests/test_connect.py\n+++ b/astropy/io/fits/tests/test_connect.py\n@@ -1,3 +1,21 @@\n+\n+def test_is_fits_gh_14305():\n+    \"\"\"Regression test for https://github.com/astropy/astropy/issues/14305\"\"\"\n+    assert not connect.is_fits(\"\", \"foo.bar\", None)\n+\n+def test_identify_format_with_incorrect_args():\n+    \"\"\"\n+    Test the identify_format function with incorrect arguments \n+    to ensure it raises no IndexError.\n+    \"\"\"\n+    from astropy.io.registry import identify_format\n+    from astropy.table import Table\n+\n+    # Ideally, identify_format should not raise any IndexError when called with empty args\n+    formats = identify_format(\"write\", Table, \"bububu.ecsv\", None, [], {})\n+    assert isinstance(formats, list)\n+    assert len(formats) == 0\n+\n import gc\n import warnings\n \n@@ -7,7 +25,7 @@ from numpy.testing import assert_allclose, assert_array_equal\n \n from astropy import units as u\n from astropy.io import fits\n-from astropy.io.fits import BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu\n+from astropy.io.fits import BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu, connect\n from astropy.io.fits.column import (\n     _fortran_to_python_format,\n     _parse_tdisp_format,\n",
  "astropy__astropy-14508": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex 6bdf92c..4186cfa 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -127,6 +127,40 @@ class TestHeaderFunctions(FitsTestCase):\n         c = fits.Card(\"long_int\", -467374636747637647347374734737437)\n         assert str(c) == _pad(\"LONG_INT= -467374636747637647347374734737437\")\n \n+    def test_floating_point_string_representation_card(self):\n+        \"\"\"\n+        Ensures Card formats float values with the correct precision, avoiding\n+        comment truncation.\n+\n+        Regression test for the issue where float values were expanded unnecessarily.\n+        \"\"\"\n+        k = \"HIERARCH ABC DEF GH IJKLMN\"\n+        com = \"[m] abcdef ghijklm nopqrstu vw xyzab\"\n+\n+        # Test case as described in the issue\n+        c = fits.Card(k, 0.009125, com)\n+        expected_str = f\"{k} = 0.009125 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Additional test cases\n+        c = fits.Card(k, 8.95, com)\n+        expected_str = f\"{k} = 8.95 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, -99.9, com)\n+        expected_str = f\"{k} = -99.9 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Check a float that might be tricky\n+        c = fits.Card(k, 1.2345678901234567, com)\n+        expected_str = f\"{k} = 1.234567890123457 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Check boundary case where float's string representation fits perfectly\n+        c = fits.Card(k, 123456789012345.7, com)\n+        expected_str = f\"{k} = 1.234567890123457E+14 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n     def test_floating_point_value_card(self):\n         \"\"\"Test Card constructor with floating point value\"\"\"\n \n",
  "astropy__astropy-14539": "diff --git a/astropy/io/fits/tests/test_diff.py b/astropy/io/fits/tests/test_diff.py\nindex 9bf4897..0f277ab 100644\n--- a/astropy/io/fits/tests/test_diff.py\n+++ b/astropy/io/fits/tests/test_diff.py\n@@ -601,7 +601,25 @@ class TestDiff(FitsTestCase):\n         assert \"13 different table data element(s) found (65.00% different)\" in report\n         assert report.count(\"more indices\") == 1\n \n-    def test_identical_files_basic(self):\n+    def test_fitsdiff_identical_files_with_vla(self):\n+        \"\"\"\n+        Test FITSDiff on files with VLAs to ensure no false differences are reported.\n+        \"\"\"\n+\n+        # Create a FITS file with a VLA column\n+        col = fits.Column('a', format='QD', array=[[0], [0, 0]])\n+        hdu = fits.BinTableHDU.from_columns([col])\n+        filename = 'test_vla.fits'\n+        hdu.writeto(filename, overwrite=True)\n+\n+        # Use FITSDiff to compare the file to itself\n+        diff = FITSDiff(filename, filename)\n+\n+        # Ensure it reports the files as identical\n+        assert diff.identical\n+\n+        # Clean up the test FITS file\n+        os.remove(filename)\n         \"\"\"Test identicality of two simple, extensionless files.\"\"\"\n \n         a = np.arange(100).reshape(10, 10)\n",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..8ddee61 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -88,8 +88,31 @@ def test_inherit_docstrings():\n         # TODO: Maybe if __doc__ is None this test should be skipped instead?\n         assert Subclass.__call__.__doc__ == \"FOO\"\n \n+def test_inherit_docstrings():\n+    class Base(metaclass=misc.InheritDocstrings):\n+        def __call__(self, *args):\n+            \"FOO\"\n+            pass\n+\n+        @property\n+        def bar(self):\n+            \"BAR\"\n+            pass\n+\n+    class Subclass(Base):\n+        def __call__(self, *args):\n+            pass\n+\n+        @property\n+        def bar(self):\n+            return 42\n+\n+    if Base.__call__.__doc__ is not None:\n+        # TODO: Maybe if __doc__ is None this test should be skipped instead?\n+        assert Subclass.__call__.__doc__ == \"FOO\"\n \n-def test_set_locale():\n+    if Base.bar.__doc__ is not None:\n+        assert Subclass.bar.__doc__ == \"BAR\"\n     # First, test if the required locales are available\n     current = locale.setlocale(locale.LC_ALL)\n     try:\n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..0cb052d 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -182,6 +182,11 @@ def test_unknown_unit3():\n     assert unit.is_equivalent(unit2)\n \n     unit3 = u.Unit(\"BAR\", parse_strict='silent')\n+\n+    # Test case for verifying unit equality comparison with None\n+    unrecognized_unit = u.Unit('asdf', parse_strict='silent')\n+    assert unrecognized_unit != None  # noqa\n+    assert unrecognized_unit not in (None, u.m)\n     assert unit != unit3\n     assert not unit.is_equivalent(unit3)\n \n",
  "astropy__astropy-7671": "diff --git a/astropy/utils/tests/test_introspection.py b/astropy/utils/tests/test_introspection.py\nindex 852d721..ee366ac 100644\n--- a/astropy/utils/tests/test_introspection.py\n+++ b/astropy/utils/tests/test_introspection.py\n@@ -68,8 +68,18 @@ def test_minversion():\n     test_module = ModuleType(str(\"test_module\"))\n     test_module.__version__ = '0.12.2'\n     good_versions = ['0.12', '0.12.1', '0.12.0.dev']\n-    bad_versions = ['1', '1.2rc1']\n+    bad_versions = ['1', '1.2rc1', '1.14dev', '1.14.3']\n+    dev_versions = ['1.14', '1.14.3']\n+\n+    # Test for versions that should fail due to the LooseVersion issue\n+    for version in bad_versions:\n+        assert not minversion(test_module, version), f\"Version {version} should not satisfy minversion\"\n+\n+    # Test for versions that should pass\n+    for version in dev_versions:\n+        # These versions should satisfy the minversion check if the issue is resolved\n+        assert minversion(test_module, version), f\"Version {version} should satisfy minversion\"\n     for version in good_versions:\n         assert minversion(test_module, version)\n     for version in bad_versions:\n-        assert not minversion(test_module, version)\n+        assert not minversion(test_module, version)\n",
  "astropy__astropy-8707": "",
  "astropy__astropy-8872": "",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..5ad7b48 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -226,6 +226,19 @@ TEST_DATA = [\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br z', ValidationError),\n \n     (BaseValidator(True), True, None),\n+\n+    # Test cases for URLValidator to ensure it rejects invalid characters in username and password\n+    (URLValidator(), 'http://foo@bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo/bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar@baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar/baz@example.com', ValidationError),\n+    (URLValidator(), 'http://invalid-.com/?m=foo@example.com', ValidationError),\n+    (URLValidator(), \"http://-.~_!$&'()*+,;=%40:80%2f@example.com\", ValidationError),\n+\n+    # Test cases for valid URLs to ensure the validator accepts them correctly\n+    (URLValidator(), 'http://user:pass@hostname.com', None), # Valid because characters are properly encoded\n+    (URLValidator(), 'http://user%40email.com:password%21@hostname.com', None), # Valid with percent encoding\n     (BaseValidator(True), False, ValidationError),\n \n     (RegexValidator(), '', None),\n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..94fe32a 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -9,6 +10,7 @@ from django.db.models import (\n     Max, Min, Sum, Value,\n )\n from django.test import TestCase\n+from django.db.models.expressions import Case, When\n from django.test.utils import Approximate, CaptureQueriesContext\n from django.utils import timezone\n \n@@ -389,6 +391,14 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n+    def test_count_distinct_expression(self):\n+        # This test verifies the issue where a Count annotation containing both a Case condition\n+        # and a distinct=True parameter produced a query error.\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=300, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n+\n     def test_count_star(self):\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n",
  "django__django-10914": "",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..4123a8b 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,5 +1,7 @@\n+\n import os\n import signal\n+import subprocess\n from unittest import mock\n \n from django.db.backends.postgresql.client import DatabaseClient\n@@ -29,7 +31,39 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             DatabaseClient.runshell_db(dbinfo)\n         return self.subprocess_args, self.pgpass\n \n-    def test_basic(self):\n+    def test_pgpassword_set(self):\n+        def _mock_subprocess_run(*args, env=os.environ, **kwargs):\n+            self.pgpassword = env.get('PGPASSWORD')\n+            return subprocess.CompletedProcess(args, 0)\n+\n+        dbinfo = {\n+            'database': 'dbname',\n+            'user': 'someuser',\n+            'password': 'somepassword',\n+            'host': 'somehost',\n+            'port': '444',\n+        }\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            result_args, pgpassword = self._run_it(dbinfo)\n+        \n+        expected_pgpassword = 'somehost:444:dbname:someuser:somepassword'\n+        self.assertEqual(pgpassword, expected_pgpassword)\n+\n+    def test_pgpassword_not_set_without_password(self):\n+        def _mock_subprocess_run(*args, env=os.environ, **kwargs):\n+            self.pgpassword = env.get('PGPASSWORD')\n+            return subprocess.CompletedProcess(args, 0)\n+\n+        dbinfo = {\n+            'database': 'dbname',\n+            'user': 'someuser',\n+            'host': 'somehost',\n+            'port': '444',\n+        }\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            result_args, pgpassword = self._run_it(dbinfo)\n+        \n+        self.assertIsNone(pgpassword)\n         self.assertEqual(\n             self._run_it({\n                 'database': 'dbname',\n@@ -113,4 +147,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..1f0b747 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -3,6 +3,8 @@ from django.conf import settings\n from django.contrib.contenttypes import management as contenttypes_management\n from django.contrib.contenttypes.models import ContentType\n from django.core.management import call_command\n+from django.contrib.contenttypes.models import ContentType\n+from django.db import transaction\n from django.db import migrations, models\n from django.test import TransactionTestCase, override_settings\n \n@@ -63,4 +65,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..ea82ded 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -238,6 +238,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n             \"en\\u2013dash\",\n+            'trailingnewline\\n',\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -258,4 +259,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..2a1f692 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -22,7 +22,30 @@ class RenderToStringTest(SimpleTestCase):\n         )\n \n \n-class GetDefaultTests(SimpleTestCase):\n+class RenderToStringTest(SimpleTestCase):\n+\n+    def setUp(self):\n+        self.engine = Engine(dirs=[TEMPLATE_DIR])\n+\n+    def test_basic_context(self):\n+        self.assertEqual(\n+            self.engine.render_to_string('test_context.html', {'obj': 'test'}),\n+            'obj:test\\n',\n+        )\n+\n+    def test_autoescape_off(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:<script>\\n',\n+        )\n+\n+    def test_autoescape_on(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n \n     @override_settings(TEMPLATES=[])\n     def test_no_engines_configured(self):\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..cc1edc0 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -413,7 +413,28 @@ class HttpResponseTests(unittest.TestCase):\n         self.assertEqual(list(i), [b'abc'])\n         self.assertEqual(list(i), [])\n \n-    def test_lazy_content(self):\n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n+    def test_memoryview_different_content(self):\n+        r = HttpResponse(memoryview(b'another_test_case'))\n+        self.assertEqual(r.content, b'another_test_case')\n+\n+    def test_memoryview_iter_content(self):\n+        r = HttpResponse(memoryview(b'iter_test'))\n+        self.assertEqual(r.content, b'iter_test')\n+\n+    def test_memoryview_unicode_content(self):\n+        # Test memoryview content with non-ASCII characters\n+        r = HttpResponse(memoryview('caf\u00e9'.encode('utf-8')))\n+        self.assertEqual(r.content, 'caf\u00e9'.encode('utf-8'))\n+        \n+    def test_memoryview_large_content(self):\n+        # Test memoryview with large data\n+        large_data = b'a' * (10**6)  # 1 million 'a' characters\n+        r = HttpResponse(memoryview(large_data))\n+        self.assertEqual(r.content, large_data)\n         r = HttpResponse(lazystr('helloworld'))\n         self.assertEqual(r.content, b'helloworld')\n \n",
  "django__django-11141": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex b5a87e7..be2fa4b 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -501,7 +501,18 @@ class LoaderTests(TestCase):\n         self.assertEqual(plan, expected_plan)\n \n     @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_private'})\n-    def test_ignore_files(self):\n+    def test_loading_namespace_package(self):\n+        \"\"\"Migration directories without an __init__.py file are loaded.\"\"\"\n+        with self.temporary_migration_module(module='migrations.test_migrations_namespace_package') as migration_dir:\n+            # Simulate a namespace package by removing the __init__.py file\n+            init_file = os.path.join(migration_dir, '__init__.py')\n+            if os.path.exists(init_file):\n+                os.remove(init_file)\n+                \n+            loader = MigrationLoader(connection)\n+            loader.load_disk()\n+            migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n+            self.assertEqual(migrations, ['0001_initial'])\n         \"\"\"Files prefixed with underscore, tilde, or dot aren't loaded.\"\"\"\n         loader = MigrationLoader(connection)\n         loader.load_disk()\n",
  "django__django-11149": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 296cfba..7860c30 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -733,7 +733,35 @@ class TestInlinePermissions(TestCase):\n             html=True,\n         )\n \n-    def test_inline_change_fk_add_change_perm(self):\n+    def test_inline_add_m2m_view_only_perm(self):\n+        # Grant only view permission for books\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(reverse('admin:admin_inlines_author_add'))\n+        # Verify presence of inline in a read-only state\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        # Ensure no add/change/delete buttons are present\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n+        self.assertContains(response, '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"0\"', html=True)\n+\n+    def test_inline_change_m2m_view_only_perm(self):\n+        # Grant only view permission for books\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(self.author_change_url)\n+        # Verify presence of inline in a read-only state\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        # Inline fields should be read-only\n+        self.assertContains(response, '<p>%s</p>' % self.author.books.first())\n+        self.assertNotContains(response, 'id=\"id_Author_books-0-DELETE\"')\n         permission = Permission.objects.get(codename='add_inner2', content_type=self.inner_ct)\n         self.user.user_permissions.add(permission)\n         permission = Permission.objects.get(codename='change_inner2', content_type=self.inner_ct)\n",
  "django__django-11163": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex b25d077..7a9a829 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2900,7 +2900,21 @@ class StrictAssignmentTests(SimpleTestCase):\n \n \n class ModelToDictTests(TestCase):\n-    def test_many_to_many(self):\n+    def test_empty_fields(self):\n+        \"\"\"Test model_to_dict with an empty list for fields should return an empty dict.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(model_to_dict(bw, fields=[]), {})\n+\n+    def test_specified_fields(self):\n+        \"\"\"Test model_to_dict with specified fields.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(sorted(model_to_dict(bw, fields=['id', 'name'])), ['id', 'name'])\n+\n+    def test_exclude_fields(self):\n+        \"\"\"Test model_to_dict with exclude option.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(sorted(model_to_dict(bw, exclude=[])), ['id', 'name', 'score', 'writer_ptr'])\n+        self.assertEqual(sorted(model_to_dict(bw, exclude=['id', 'name'])), ['score', 'writer_ptr'])\n         \"\"\"Data for a ManyToManyField is a list rather than a lazy QuerySet.\"\"\"\n         blue = Colour.objects.create(name='blue')\n         red = Colour.objects.create(name='red')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..2585a34 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,8 +1,10 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from django.db.models.deletion import Collector\n \n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..1f5f66d 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -95,6 +95,13 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+            # Additional test cases to verify the issue fix with small decimals\n+            ('1e-199', 2, '0.00'),\n+            ('1e-200', 2, '0.00'),\n+            ('1e-200', 10, '0.0000000000'),\n+            ('1e-200', None, '0.00'),\n+            ('1.23e-200', 3, '0.000'),\n+            ('0.{}1234'.format('0' * 198), 3, '0.000'),\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-11211": "diff --git a/tests/prefetch_related/models.py b/tests/prefetch_related/models.py\nindex 3ce4b3f..2a594de 100644\n--- a/tests/prefetch_related/models.py\n+++ b/tests/prefetch_related/models.py\n@@ -1,5 +1,18 @@\n+\n+import uuid\n import uuid\n \n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=50)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n from django.contrib.contenttypes.fields import (\n     GenericForeignKey, GenericRelation,\n )\n@@ -7,25 +20,85 @@ from django.contrib.contenttypes.models import ContentType\n from django.db import models\n from django.db.models.query import ModelIterable, QuerySet\n from django.utils.functional import cached_property\n+import uuid\n \n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=50)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n \n class Author(models.Model):\n     name = models.CharField(max_length=50, unique=True)\n     first_book = models.ForeignKey('Book', models.CASCADE, related_name='first_time_authors')\n     favorite_authors = models.ManyToManyField(\n         'self', through='FavoriteAuthors', symmetrical=False, related_name='favors_me')\n+import uuid\n \n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=50)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n     class Meta:\n         ordering = ['id']\n+import uuid\n \n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=50)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n     def __str__(self):\n         return self.name\n+import uuid\n \n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=50)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n \n class AuthorWithAge(Author):\n     author = models.OneToOneField(Author, models.CASCADE, parent_link=True)\n     age = models.IntegerField()\n+import uuid\n \n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=50)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n \n class FavoriteAuthors(models.Model):\n     author = models.ForeignKey(Author, models.CASCADE, to_field='name', related_name='i_like')\n@@ -164,13 +237,49 @@ class TaggedItem(models.Model):\n     )\n     favorite_fkey = models.CharField(max_length=64, null=True)\n     favorite = GenericForeignKey('favorite_ct', 'favorite_fkey')\n+import uuid\n \n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=50)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n     class Meta:\n         ordering = ['id']\n+import uuid\n \n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=50)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n     def __str__(self):\n         return self.tag\n+import uuid\n \n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=50)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n \n class Bookmark(models.Model):\n     url = models.URLField()\n@@ -179,31 +288,115 @@ class Bookmark(models.Model):\n                                     content_type_field='favorite_ct',\n                                     object_id_field='favorite_fkey',\n                                     related_query_name='favorite_bookmarks')\n+import uuid\n \n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=50)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n     class Meta:\n         ordering = ['id']\n+import uuid\n \n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=50)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n \n class Comment(models.Model):\n     comment = models.TextField()\n+import uuid\n \n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=50)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n     # Content-object field\n     content_type = models.ForeignKey(ContentType, models.CASCADE)\n     object_pk = models.TextField()\n     content_object = GenericForeignKey(ct_field=\"content_type\", fk_field=\"object_pk\")\n+import uuid\n \n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=50)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n     class Meta:\n         ordering = ['id']\n+import uuid\n \n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=50)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n \n # Models for lookup ordering tests\n+import uuid\n \n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=50)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n class House(models.Model):\n     name = models.CharField(max_length=50)\n     address = models.CharField(max_length=255)\n     owner = models.ForeignKey('Person', models.SET_NULL, null=True)\n     main_room = models.OneToOneField('Room', models.SET_NULL, related_name='main_room_of', null=True)\n+import uuid\n \n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=50)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n     class Meta:\n         ordering = ['id']\n \n",
  "django__django-11239": "",
  "django__django-11265": "",
  "django__django-11276": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 4051a05..ccd201d 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -28,7 +28,12 @@ class TestUtilsHtml(SimpleTestCase):\n             ('>', '&gt;'),\n             ('\"', '&quot;'),\n             (\"'\", '&#39;'),\n+            (\"'\", '&#x27;'),\n         )\n+        # Additional test for ensuring both escape mechanisms behave correctly.\n+        self.check_output(escape, \"It's a test\", \"It&#x27;s a test\")\n+        self.check_output(escape, '<tag>value</tag>', '&lt;tag&gt;value&lt;/tag&gt;')\n+        self.check_output(escape, 'Use & symbol', 'Use &amp; symbol')\n         # Substitution patterns for testing the above items.\n         patterns = (\"%s\", \"asdf%sfdsa\", \"%s1\", \"1%sb\")\n         for value, output in items:\n",
  "django__django-11292": "",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..784c9c1 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,5 +1,7 @@\n+\n from django.test import SimpleTestCase\n-from django.urls.resolvers import RegexPattern, RoutePattern\n+from django.urls.resolvers import RegexPattern, RoutePattern, get_resolver\n+from django.test.utils import override_settings\n from django.utils.translation import gettext_lazy as _\n \n \n@@ -12,4 +14,4 @@ class RegexPatternTests(SimpleTestCase):\n class RoutePatternTests(SimpleTestCase):\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\nindex b010b42..4e20121 100644\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -251,6 +251,15 @@ class ModelBackendTest(BaseModelBackendTest, TestCase):\n         self.user.save()\n         self.assertIsNone(authenticate(**self.user_credentials))\n \n+    def test_authenticate_with_none_username_and_password(self):\n+        \"\"\"\n+        Ensure no database queries or password hashing occur when both\n+        username and password are None.\n+        \"\"\"\n+        with self.assertNumQueries(0):\n+            self.assertIsNone(authenticate(username=None, password=None))\n+        self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n+\n     @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserWithoutIsActiveField')\n     def test_authenticate_user_without_is_active_field(self):\n         \"\"\"\n",
  "django__django-11490": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex e627a0d..5368d35 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -122,9 +122,26 @@ class QuerySetSetOperationTests(TestCase):\n         self.assertEqual(reserved_name['name'], 'a')\n         self.assertEqual(reserved_name['order'], 2)\n         reserved_name = qs1.union(qs1).values_list('name', 'order', 'id').get()\n+        # Test changing the list of columns using values_list on the same composed query\n+        reserved_order = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(reserved_order, (2,))\n+        reserved_name_only = qs1.union(qs1).values_list('name').get()\n+        self.assertEqual(reserved_name_only, ('a',))\n+        # Test using values() with different set of columns\n+        reserved_order_dict = qs1.union(qs1).values('order').get()\n+        self.assertEqual(reserved_order_dict['order'], 2)\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n-    def test_union_with_two_annotated_values_list(self):\n+    def test_union_with_different_values_sets(self):\n+        ReservedName.objects.create(name='b', order=3)\n+        qs1 = ReservedName.objects.all()\n+        # Test composed query with different sets of values and values_list\n+        reserved_name_and_id = qs1.union(qs1).values('name', 'id').get()\n+        self.assertIn(reserved_name_and_id['name'], ['a', 'b'])\n+        reserved_name_only = qs1.union(qs1).values_list('name').get()\n+        self.assertIn(reserved_name_only, [('a',), ('b',)])\n+        reserved_order_only = qs1.union(qs1).values_list('order').get()\n+        self.assertIn(reserved_order_only, [(2,), (3,)])\n         qs1 = Number.objects.filter(num=1).annotate(\n             count=Value(0, IntegerField()),\n         ).values_list('num', 'count')\n",
  "django__django-11532": "diff --git a/tests/mail/tests.py b/tests/mail/tests.py\nindex a6f0e17..c7673d3 100644\n--- a/tests/mail/tests.py\n+++ b/tests/mail/tests.py\n@@ -7,6 +7,7 @@ import smtpd\n import sys\n import tempfile\n import threading\n+from unittest import mock\n from email import charset, message_from_binary_file, message_from_bytes\n from email.header import Header\n from email.mime.text import MIMEText\n@@ -360,7 +361,36 @@ class MailTests(HeadersCheckMixin, SimpleTestCase):\n         msg.attach('example.txt', 'Text file content', 'text/plain')\n         self.assertIn(html_content, msg.message().as_string())\n \n-    def test_none_body(self):\n+    @mock.patch(\"django.core.mail.message.DNS_NAME\", \"\u6f22\u5b57\")\n+    def test_non_ascii_dns_non_unicode_email(self):\n+        \"\"\"\n+        Test that a non-ASCII DNS name is correctly handled by encoding it as Punycode\n+        when the email encoding is non-Unicode.\n+        \"\"\"\n+        # Reset the cached DNS name\n+        delattr(mail.message.DNS_NAME, '_fqdn')\n+        \n+        email = EmailMessage('subject', 'content', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        message = email.message()\n+        \n+        # Check that the Message-ID contains the punycode representation of the domain\n+        self.assertIn('@xn--p8s937b>', message['Message-ID'])\n+\n+    @mock.patch(\"django.core.mail.message.DNS_NAME\", \"\u6b63\u5b97\")\n+    def test_non_ascii_domain_in_message_id(self):\n+        \"\"\"\n+        Test another example to ensure non-ASCII domain names are converted to Punycode.\n+        \"\"\"\n+        # Reset the cached DNS name\n+        delattr(mail.message.DNS_NAME, '_fqdn')\n+        \n+        email = EmailMessage('Another subject', 'Different content', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        message = email.message()\n+        \n+        # Check that the Message-ID contains the punycode representation of the domain\n+        self.assertIn('@xn--y0q769b>', message['Message-ID'])\n         msg = EmailMessage('subject', None, 'from@example.com', ['to@example.com'])\n         self.assertEqual(msg.body, '')\n         self.assertEqual(msg.message().get_payload(), '')\n",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..0ee1244 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,9 +1,61 @@\n+\n+class TestListDisplayChecks(CheckTestCase):\n+\n+    def test_field_accessible_via_instance(self):\n+        class PositionField(Field):\n+            \"\"\"Custom field accessible only via instance.\"\"\"\n+            def contribute_to_class(self, cls, name):\n+                super().contribute_to_class(cls, name)\n+                setattr(cls, self.name, self)\n+\n+            def __get__(self, instance, owner):\n+                if instance is None:\n+                    raise AttributeError()\n+\n+        class TestModel(Model):\n+            field = PositionField()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('field',)\n+\n+        # This should pass validation as this field is accessible via an instance\n+        self.assertIsValid(TestModelAdmin, TestModel)\n+\n+    def test_non_existent_field(self):\n+        class TestModel(Model):\n+            pass\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('non_existent_field',)\n+\n+        self.assertIsInvalid(\n+            TestModelAdmin, TestModel,\n+            \"The value of 'list_display[0]' refers to 'non_existent_field', which is not a callable, \"\n+            \"an attribute of 'TestModelAdmin', or an attribute or method on 'app_label.TestModel'.\",\n+            'admin.E108'\n+        )\n+\n+    def test_many_to_many_field(self):\n+        from django.db import models\n+\n+        class TestModel(Model):\n+            many_to_many_field = models.ManyToManyField('self')\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('many_to_many_field',)\n+\n+        self.assertIsInvalid(\n+            TestModelAdmin, TestModel,\n+            \"The value of 'list_display[0]' must not be a ManyToManyField.\",\n+            'admin.E109'\n+        )\n+\n from django import forms\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n-from django.db.models import F\n+from django.db.models import F, Field, Model\n from django.db.models.functions import Upper\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..b0cce73 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -1,6 +1,8 @@\n from datetime import datetime\n from operator import attrgetter\n \n+from django.db.models import ExpressionWrapper, IntegerField\n+from datetime import datetime\n from django.core.exceptions import FieldError\n from django.db.models import (\n     CharField, Count, DateTimeField, F, Max, OuterRef, Subquery, Value,\n@@ -462,7 +464,38 @@ class OrderingTests(TestCase):\n             attrgetter('headline')\n         )\n \n-    def test_deprecated_values_annotate(self):\n+    def test_order_by_expression_in_meta_ordering(self):\n+        \"\"\"\n+        Test ordering with an expression in Meta.ordering to ensure no crash occurs.\n+        \"\"\"\n+        ca1 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_2\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1\n+        )\n+        ca3 = ChildArticle.objects.create(\n+            headline='h3',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1\n+        )\n+        ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n+        \n+        # Ordering by parent class's order_by which has expressions in Meta.ordering\n+        articles = ChildArticle.objects.order_by('article_ptr')\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+\n+    def test_order_by_expression_and_function(self):\n+        \"\"\"\n+        Test ordering with a combination of expression and function.\n+        \"\"\"\n+        expression = ExpressionWrapper(F('id') + F('author__id'), output_field=IntegerField())\n+        articles = Article.objects.order_by(expression)\n+        self.assertIsNotNone(articles)\n         msg = (\n             \"Article QuerySet won't use Meta.ordering in Django 3.1. Add \"\n             \".order_by('-pub_date', 'headline', OrderBy(F(author__name), \"\n",
  "django__django-11603": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 2b8f813..bfcd3c4 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -391,7 +391,23 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n-    def test_count_star(self):\n+    def test_distinct_on_aggregate_avg(self):\n+        books = Book.objects.aggregate(distinct_avg_rating=Avg('rating', distinct=True))\n+        self.assertEqual(books['distinct_avg_rating'], 4.125)\n+\n+    def test_distinct_on_aggregate_sum(self):\n+        books = Book.objects.aggregate(distinct_sum_rating=Sum('rating', distinct=True))\n+        self.assertEqual(books['distinct_sum_rating'], 16.5)\n+\n+    def test_distinct_on_aggregate_min(self):\n+        # While adding DISTINCT to Min is conceptually pointless, this tests for syntax correctness.\n+        books = Book.objects.aggregate(distinct_min_rating=Min('rating', distinct=True))\n+        self.assertEqual(books['distinct_min_rating'], 3.5)  # Assuming 3.5 is the minimum distinct rating\n+\n+    def test_distinct_on_aggregate_max(self):\n+        # While adding DISTINCT to Max is conceptually pointless, this tests for syntax correctness.\n+        books = Book.objects.aggregate(distinct_max_rating=Max('rating', distinct=True))\n+        self.assertEqual(books['distinct_max_rating'], 5.0)  # Assuming 5.0 is the maximum distinct rating\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n         sql = ctx.captured_queries[0]['sql']\n",
  "django__django-11740": "",
  "django__django-11749": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex a0e1530..07f82a6 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -224,6 +224,31 @@ class CommandTests(SimpleTestCase):\n         management.call_command('subparser_dest', 'foo', bar=12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n \n+    def test_mutually_exclusive_group_required_options(self):\n+        out = StringIO()\n+        management.call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+        management.call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            management.call_command('mutually_exclusive_required', stdout=out)\n+\n+    def test_mutually_exclusive_group_kwargs(self):\n+        out = StringIO()\n+        # Test passing the argument as kwargs\n+        management.call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+        out = StringIO()\n+        management.call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+\n+        # Test raising error when no argument is passed\n+        out = StringIO()\n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            management.call_command('mutually_exclusive_required', stdout=out)\n+\n     def test_subparser_dest_required_args(self):\n         out = StringIO()\n         management.call_command('subparser_required', 'foo_1', 'foo_2', bar=12, stdout=out)\n",
  "django__django-11790": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 440150b..82f0e07 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -437,7 +437,16 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         self.assertEqual(form.fields['username'].max_length, 254)\n         self.assertEqual(form.errors, {})\n \n-    def test_username_field_label(self):\n+    def test_username_field_maxlength_attribute_is_set(self):\n+        # Testing if the maxlength attribute is set correctly on the widget\n+        form = AuthenticationForm()\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 255)\n+\n+    @override_settings(AUTH_USER_MODEL='auth_tests.IntegerUsernameUser')\n+    def test_username_field_maxlength_defaults_to_254(self):\n+        # Testing if the maxlength defaults to 254 for a custom user model without max_length set\n+        form = AuthenticationForm()\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 254)\n \n         class CustomAuthenticationForm(AuthenticationForm):\n             username = CharField(label=\"Name\", max_length=75)\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..21880d2 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -251,8 +251,29 @@ class WriterTests(SimpleTestCase):\n         pattern = re.compile(r'^foo$')\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n         self.assertEqual(self.serialize_round_trip(lazy_pattern), pattern)\n+    \n+    def test_serialize_enum_with_translations(self):\n+        from django.utils.translation import gettext_lazy as _\n+        \n+        class TranslatedEnum(enum.Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+        \n+        # Verify serialization uses the enum name, not the translated value\n+        self.assertSerializedResultEqual(\n+            TranslatedEnum.GOOD,\n+            (\"migrations.test_writer.TranslatedEnum['GOOD']\", {'import migrations.test_writer'})\n+        )\n \n-    def test_serialize_enums(self):\n+        field = models.CharField(default=TranslatedEnum.GOOD, choices=[(m.value, m) for m in TranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('Good', migrations.test_writer.TranslatedEnum['GOOD']), \"\n+            \"('Bad', migrations.test_writer.TranslatedEnum['BAD'])], \"\n+            \"default=migrations.test_writer.TranslatedEnum['GOOD'])\"\n+        )\n         class TextEnum(enum.Enum):\n             A = 'a-value'\n             B = 'value-b'\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..bebc47b 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,6 +1,8 @@\n+\n import unittest\n from datetime import datetime\n \n+from unittest import mock\n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n from django.utils.deprecation import RemovedInDjango40Warning\n@@ -320,7 +322,22 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_asctime(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_edge_cases(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+        utcnow_2023 = datetime(2023, 1, 1, 0, 0, 0)\n+        tests = (\n+            (utcnow_2023, 'Wednesday, 31-Dec-49 23:59:59 GMT', datetime(2049, 12, 31, 23, 59, 59)),\n+            (utcnow_2023, 'Thursday, 01-Jan-50 00:00:00 GMT', datetime(1950, 1, 1, 0, 0, 0)),\n+            (utcnow_2023, 'Thursday, 31-Dec-50 23:59:59 GMT', datetime(1950, 12, 31, 23, 59, 59)),\n+            (utcnow_2023, 'Friday, 01-Jan-51 00:00:00 GMT', datetime(1951, 1, 1, 0, 0, 0)),\n+        )\n+        for utcnow, rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = utcnow\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n         parsed = parse_http_date('Sun Nov  6 08:49:37 1994')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n",
  "django__django-11880": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 95afc0d..6e63054 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3672,7 +3672,48 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n             '<input type=\"hidden\" name=\"data\" id=\"id_data\"></td></tr>'\n         )\n \n-    def test_field_named_data(self):\n+import copy\n+from django.forms import CharField, Form\n+from django.test import SimpleTestCase\n+\n+class FieldDeepCopyTests(SimpleTestCase):\n+    def test_field_deep_copy_error_messages(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        self.assertIsInstance(field_copy, CustomCharField)\n+        self.assertIsNot(field_copy.error_messages, field.error_messages)\n+    \n+    def test_deep_copy_does_not_affect_original_error_messages(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'required': 'This field is required.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        field_copy.error_messages['required'] = 'New required message.'\n+\n+        self.assertEqual(field.error_messages['required'], 'This field is required.')\n+        self.assertEqual(field_copy.error_messages['required'], 'New required message.')\n+\n+    def test_deep_copy_multiple_fields(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Invalid input.'}\n+                super().__init__(**kwargs)\n+\n+        field1 = CustomCharField()\n+        field2 = CustomCharField()\n+        field1_copy = copy.deepcopy(field1)\n+        field2_copy = copy.deepcopy(field2)\n+\n+        self.assertIsNot(field1_copy.error_messages, field2_copy.error_messages)\n+        self.assertEqual(field1_copy.error_messages['invalid'], field2_copy.error_messages['invalid'])\n         class DataForm(Form):\n             data = CharField(max_length=10)\n \n",
  "django__django-11951": "",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..c19a202 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -115,6 +115,23 @@ class ChoicesTests(SimpleTestCase):\n         self.assertEqual(Medal.labels, ['Gold', 'Silver', 'Bronze'])\n         self.assertEqual(Medal.values, ['GOLD', 'SILVER', 'BRONZE'])\n         self.assertEqual(Medal.names, ['GOLD', 'SILVER', 'BRONZE'])\n+    def test_str(self):\n+        for test in [Gender, Separator, Constants]:\n+            for member in test:\n+                with self.subTest(member=member):\n+                    self.assertEqual(str(test[member.name]), str(member.value))\n+\n+    def test_retrieved_value_type(self):\n+        # Assuming there's a mock model with a CharField using Gender choices\n+        class MockModel(models.Model):\n+            gender = models.CharField(max_length=1, choices=Gender.choices)\n+\n+        instance = MockModel(gender=Gender.MALE)\n+        instance.full_clean()\n+        instance.save()\n+        retrieved_instance = MockModel.objects.get()\n+        self.assertIsInstance(retrieved_instance.gender, str)\n+        self.assertEqual(retrieved_instance.gender, 'M')\n \n     def test_textchoices_containment(self):\n         self.assertIn(YearInSchool.FRESHMAN, YearInSchool)\n",
  "django__django-11999": "",
  "django__django-12039": "diff --git a/tests/indexes/tests.py b/tests/indexes/tests.py\nindex 700f574..f7541ad 100644\n--- a/tests/indexes/tests.py\n+++ b/tests/indexes/tests.py\n@@ -17,7 +17,49 @@ from .models import (\n )\n \n \n+from django.db.models import Index\n+from django.db import connection\n+\n class SchemaIndexesTests(TestCase):\n+    def test_columns_list_sql(self):\n+        index = Index(fields=['headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_descending_columns_list_sql(self):\n+        index = Index(fields=['-headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s DESC)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_ops_class_columns_list_sql(self):\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_ops_class_descending_columns_list_sql(self):\n+        index = Index(\n+            fields=['-headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops DESC)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n     \"\"\"\n     Test index handling by the db.backends.schema infrastructure.\n     \"\"\"\n",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..5b97a8f 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n@@ -8,6 +9,7 @@ from django.db.models.functions import Lower\n from django.db.models.lookups import Exact, GreaterThan, IsNull, LessThan\n from django.db.models.sql.query import Query\n from django.db.models.sql.where import OR\n+from django.db.models.lookups import In\n from django.test import SimpleTestCase\n from django.test.utils import register_lookup\n \n@@ -107,7 +109,30 @@ class TestQuery(SimpleTestCase):\n         self.assertIsInstance(b_isnull.lhs, SimpleCol)\n         self.assertEqual(b_isnull.lhs.target, ObjectC._meta.get_field('objectb'))\n \n-    def test_clone_select_related(self):\n+    def test_iterable_lookup_value(self):\n+        query = Query(Item)\n+        # Building a query with a list input to ensure it remains a list\n+        where = query.build_where(Q(name=['a', 'b']))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ['a', 'b'])  # Check that the rhs is still a list\n+        \n+        # Additional test with tuple input to check if it remains a tuple\n+        where_tuple = query.build_where(Q(name=('x', 'y', 'z')))\n+        name_exact_tuple = where_tuple.children[0]\n+        self.assertIsInstance(name_exact_tuple, Exact)\n+        self.assertEqual(name_exact_tuple.rhs, ('x', 'y', 'z'))  # Check that the rhs is a tuple\n+\n+        # Additional test for 'In' lookup ensuring list/tuple preservation\n+        where_in = query.build_where(Q(name__in=['c', 'd']))\n+        name_in = where_in.children[0]\n+        self.assertIsInstance(name_in, In)\n+        self.assertEqual(name_in.rhs, ['c', 'd'])  # Check that the rhs is a list\n+\n+        where_in_tuple = query.build_where(Q(name__in=('e', 'f')))\n+        name_in_tuple = where_in_tuple.children[0]\n+        self.assertIsInstance(name_in_tuple, In)\n+        self.assertEqual(name_in_tuple.rhs, ('e', 'f'))  # Check that the rhs is a tuple\n         query = Query(Item)\n         query.add_select_related(['creator'])\n         clone = query.clone()\n",
  "django__django-12125": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex e62f7b0..5a3b954 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -744,6 +744,38 @@ class WriterTests(SimpleTestCase):\n         with self.assertRaisesMessage(ValueError, 'Cannot serialize: (1+2j)'):\n             self.assertSerializedEqual(complex(1, 2))\n \n-    def test_register_non_serializer(self):\n+    def test_serialize_inner_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class TestModel(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        # Serialize the field and assert the correct import path\n+        field = TestModel._meta.get_field('field')\n+        \n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"migrations.test_writer.Outer.Inner\", string)\n+        self.assertIn('from django.db import models', imports)\n+\n+    def test_serialize_inner_enum_class(self):\n+        import enum\n+        from enumfields import Enum, EnumField\n+\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+            \n+            state = EnumField(enum=State)\n+\n+        # Serialize the field and assert the correct import path\n+        field = Thing._meta.get_field('state')\n+        \n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"migrations.test_writer.Thing.State\", string)\n+        self.assertIn('import migrations.test_writer', imports)\n         with self.assertRaisesMessage(ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "django__django-12143": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 2d13234..a99cc81 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -836,6 +836,17 @@ class ChangeListTests(TestCase):\n         changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n         m = SwallowAdmin(Swallow, custom_site)\n         request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form*')\n+        self.assertEqual(queryset.count(), 1)\n+        data['form*-0-uuid'] = 'INVALD_PRIMARY_KEY'\n+        # The unfiltered queryset is returned if there's invalid data.\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form*')\n+        self.assertEqual(queryset.count(), 2)\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n+        request = self.factory.post(changelist_url, data=data)\n         queryset = m._get_list_editable_queryset(request, prefix='form')\n         self.assertEqual(queryset.count(), 1)\n         data['form-0-uuid'] = 'INVALD_PRIMARY_KEY'\n",
  "django__django-12155": "",
  "django__django-12193": "diff --git a/tests/postgres_tests/test_array.py b/tests/postgres_tests/test_array.py\nindex 6228cbc..4260c9f 100644\n--- a/tests/postgres_tests/test_array.py\n+++ b/tests/postgres_tests/test_array.py\n@@ -1103,6 +1103,33 @@ class TestSplitFormWidget(PostgreSQLWidgetTestCase):\n             }\n         )\n \n+    def test_split_array_field_booleanfield(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('name', [True, False, False], {})\n+        subwidget_attrs = [subwidget['attrs'] for subwidget in context['widget']['subwidgets']]\n+        self.assertEqual(\n+            subwidget_attrs,\n+            [{'checked': True}, {}, {}],  # Only the first should be checked\n+        )\n+\n+    def test_split_array_field_booleanfield_all_true(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('name', [True, True, True], {})\n+        subwidget_attrs = [subwidget['attrs'] for subwidget in context['widget']['subwidgets']]\n+        self.assertEqual(\n+            subwidget_attrs,\n+            [{'checked': True}, {'checked': True}, {'checked': True}],\n+        )\n+\n+    def test_split_array_field_booleanfield_all_false(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('name', [False, False, False], {})\n+        subwidget_attrs = [subwidget['attrs'] for subwidget in context['widget']['subwidgets']]\n+        self.assertEqual(\n+            subwidget_attrs,\n+            [{}, {}, {}],\n+        )\n+\n     def test_render(self):\n         self.check_html(\n             SplitArrayWidget(forms.TextInput(), size=2), 'array', None,\n",
  "django__django-12209": "",
  "django__django-12262": "",
  "django__django-12276": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 61f7a13..fa18d2d 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import copy\n import datetime\n import json\n@@ -2431,6 +2432,17 @@ Password: <input type=\"password\" name=\"password\" required>\n         )\n \n         f = FileForm(data={}, files={}, auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n+        )\n+\n+        # Test case for the issue: FileInput shouldn't display required attribute when initial data exists\n+        f_required = FileForm(initial={'file1': SimpleUploadedFile('resume.txt', b'content')}, auto_id=False)\n+        self.assertHTMLEqual(\n+            f_required.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n+        )\n         self.assertHTMLEqual(\n             f.as_table(),\n             '<tr><th>File1:</th><td>'\n",
  "django__django-12304": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 6cabf01..3df4194 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import decimal\n import ipaddress\n@@ -6,6 +7,7 @@ import uuid\n from django.db import models\n from django.test import SimpleTestCase\n from django.utils.functional import Promise\n+from django.template import Context, Template\n from django.utils.translation import gettext_lazy as _\n \n \n@@ -137,7 +139,16 @@ class ChoicesTests(SimpleTestCase):\n                 # A string is not permitted as the second argument to int().\n                 ONE = 1, 'X', 'Invalid'\n \n-        msg = \"duplicate values found in <enum 'Fruit'>: PINEAPPLE -> APPLE\"\n+    def test_enum_usage_in_templates(self):\n+        template = Template('{% if student.year_in_school == YearInSchool.FRESHMAN %}True{% else %}False{% endif %}')\n+        context = Context({'student': {'year_in_school': YearInSchool.FRESHMAN}, 'YearInSchool': YearInSchool})\n+        output = template.render(context)\n+        self.assertEqual(output, 'True')\n+\n+        template = Template('{{ Suit.DIAMOND.label }}|{{ Suit.DIAMOND.value }}')\n+        context = Context({'Suit': Suit})\n+        output = template.render(context)\n+        self.assertEqual(output, 'Diamond|1')\n         with self.assertRaisesMessage(ValueError, msg):\n             class Fruit(models.IntegerChoices):\n                 APPLE = 1, 'Apple'\n",
  "django__django-12308": "",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..cbf6626 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1014,8 +1014,30 @@ class OtherModelTests(SimpleTestCase):\n \n             class ParkingLot(Place):\n                 parent = models.OneToOneField(Place, models.CASCADE)\n+    @isolate_apps('invalid_models_tests')\n+    def test_onetoone_with_parent_model_ordering(self):\n+        # Test case where the OneToOneField with parent_link=True is declared first.\n+        class Document(models.Model):\n+            pass\n+\n+        class Picking(Document):\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+\n+        # We expect no configuration errors because the parent_link is explicit.\n+        self.assertEqual(Picking.check(), [])\n \n-    def test_m2m_table_name_clash(self):\n+    @isolate_apps('invalid_models_tests')\n+    def test_onetoone_with_parent_model_ordering_incorrect(self):\n+        # Test case where the OneToOneField with parent_link=True is declared second, without parent_link=True on the first.\n+        class Document(models.Model):\n+            pass\n+\n+        msg = 'Add parent_link=True to invalid_models_tests.Picking.origin.'\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            class Picking(Document):\n+                origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+                document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n         class Foo(models.Model):\n             bar = models.ManyToManyField('Bar', db_table='myapp_bar')\n \n",
  "django__django-12419": "diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py\nindex 7af62eb..9b63089 100644\n--- a/tests/middleware/test_security.py\n+++ b/tests/middleware/test_security.py\n@@ -247,6 +247,15 @@ class SecurityMiddlewareTest(SimpleTestCase):\n             with self.subTest(value=value), override_settings(SECURE_REFERRER_POLICY=value):\n                 self.assertEqual(self.process_response()['Referrer-Policy'], expected)\n \n+    @override_settings(SECURE_REFERRER_POLICY=None)\n+    def test_referrer_policy_default(self):\n+        \"\"\"\n+        By default, the middleware should add a \"Referrer-Policy: same-origin\"\n+        header to the response when SECURE_REFERRER_POLICY is not set.\n+        \"\"\"\n+        response = self.process_response()\n+        self.assertEqual(response['Referrer-Policy'], 'same-origin')\n+\n     @override_settings(SECURE_REFERRER_POLICY='strict-origin')\n     def test_referrer_policy_already_present(self):\n         \"\"\"\n@@ -254,4 +263,4 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         present in the response.\n         \"\"\"\n         response = self.process_response(headers={'Referrer-Policy': 'unsafe-url'})\n-        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n",
  "django__django-12663": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 872551b..61d4ba3 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -19,6 +19,7 @@ from django.db.models.functions import (\n )\n from django.db.models.sql import constants\n from django.db.models.sql.datastructures import Join\n+from django.utils.functional import SimpleLazyObject\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import Approximate, isolate_apps\n \n@@ -31,6 +32,10 @@ from .models import (\n class BasicExpressionsTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n+        cls.manager = Manager.objects.create(name=\"Manager\")\n+        cls.max = Employee.objects.create(\n+            firstname=\"Max\", lastname=\"Doe\", salary=100, manager=cls.manager\n+        )\n         cls.example_inc = Company.objects.create(\n             name=\"Example Inc.\", num_employees=2300, num_chairs=5,\n             ceo=Employee.objects.create(firstname=\"Joe\", lastname=\"Smith\", salary=10)\n",
  "django__django-12708": "",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..64177dc 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -14,7 +14,8 @@ from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.auth.models import User\n from django.core.files.storage import default_storage\n from django.core.files.uploadedfile import SimpleUploadedFile\n-from django.db.models import CharField, DateField, DateTimeField, UUIDField\n+from django import forms\n+from django.db.models import CharField, DateField, DateTimeField, UUIDField, ManyToManyField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..08c348e 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -166,13 +166,16 @@ class SqlFlushTests(TransactionTestCase):\n             self.assertIs(Author.objects.exists(), True)\n             self.assertIs(Book.objects.exists(), True)\n \n+        # Ensure execute_sql_flush works without using parameter\n+        self._test_execute_sql_flush_without_using(sql_list)\n+\n         sql_list = connection.ops.sql_flush(\n             no_style(),\n             [Author._meta.db_table, Book._meta.db_table],\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n@@ -181,4 +184,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 17e707b..66b2d11 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2444,6 +2444,30 @@ class AutodetectorTests(TestCase):\n         self.assertNumberMigrations(changes, 'testapp', 1)\n         self.assertOperationTypes(changes, 'testapp', 0, [\"AddField\", \"AddField\"])\n         self.assertOperationAttributes(changes, 'testapp', 0, 0)\n+    def test_add_model_with_field_removed_from_base_model(self):\n+        \"\"\"\n+        Removing a base field takes place before adding a new inherited model\n+        that has a field with the same name.\n+        \"\"\"\n+        before = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('title', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        after = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+            ]),\n+            ModelState('app', 'book', [\n+                ('title', models.CharField(max_length=200)),\n+            ], bases=('app.readable',)),\n+        ]\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'app', 1)\n+        self.assertOperationTypes(changes, 'app', 0, ['RemoveField', 'CreateModel'])\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='title', model_name='readable')\n+        self.assertOperationAttributes(changes, 'app', 0, 1, name='book')\n \n     def test_mti_inheritance_model_removal(self):\n         Animal = ModelState('app', 'Animal', [\n@@ -2453,4 +2477,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..a7dc24c 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -10,6 +10,8 @@ from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n from django.utils.deprecation import RemovedInDjango40Warning\n \n+from django.db import models\n+from django.test.utils import isolate_apps\n from .models import (\n     Article, Author, Freebie, Game, IsNullWithNoneAsRHS, Player, Season, Tag,\n )\n@@ -194,7 +196,44 @@ class LookupTests(TestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             Article.objects.in_bulk([self.au1], field_name='author')\n \n-    def test_values(self):\n+    def test_in_bulk_meta_constraint(self):\n+        # Test with a field having a UniqueConstraint.\n+        season_2011 = Season.objects.create(year=2011)\n+        season_2012 = Season.objects.create(year=2012)\n+        Season.objects.create(year=2013)\n+        self.assertEqual(\n+            Season.objects.in_bulk(\n+                [season_2011.year, season_2012.year],\n+                field_name='year',\n+            ),\n+            {season_2011.year: season_2011, season_2012.year: season_2012},\n+        )\n+\n+    @isolate_apps('lookup')\n+    def test_in_bulk_non_unique_meta_constraint(self):\n+        class Model(models.Model):\n+            ean = models.CharField(max_length=100)\n+            brand = models.CharField(max_length=100)\n+            name = models.CharField(max_length=80)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=['ean'],\n+                        name='partial_ean_unique',\n+                        condition=models.Q(is_active=True)\n+                    ),\n+                    models.UniqueConstraint(\n+                        fields=['brand', 'name'],\n+                        name='together_brand_name_unique',\n+                    ),\n+                ]\n+\n+        msg = \"in_bulk()'s field_name must be a unique field but '%s' isn't.\"\n+        for field_name in ['brand', 'ean']:\n+            with self.subTest(field_name=field_name):\n+                with self.assertRaisesMessage(ValueError, msg % field_name):\n+                    Model.objects.in_bulk(field_name=field_name)\n         # values() returns a list of dictionaries instead of object instances --\n         # and you can specify which fields you want to retrieve.\n         self.assertSequenceEqual(\n",
  "django__django-12858": "",
  "django__django-13012": "",
  "django__django-13028": "diff --git a/tests/queries/models.py b/tests/queries/models.py\nindex a43cfb4..ffffab0 100644\n--- a/tests/queries/models.py\n+++ b/tests/queries/models.py\n@@ -72,6 +72,8 @@ class ExtraInfo(models.Model):\n     class Meta:\n         ordering = ['info']\n \n+    filterable = models.BooleanField(default=True)\n+\n     def __str__(self):\n         return self.info\n \n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..c92c49c 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,6 +343,29 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_self_referencing_fk_ordering(self):\n+        # Create instances of Author with a self-reference via the editor field\n+        author1 = Author.objects.create(name=\"Author 1\")\n+        author2 = Author.objects.create(name=\"Author 2\", editor=author1)\n+\n+        # Create articles for each author\n+        article1 = Article.objects.create(author=author1, headline=\"Article 1\", pub_date=\"2023-01-01\")\n+        article2 = Article.objects.create(author=author2, headline=\"Article 2\", pub_date=\"2023-01-02\")\n+        \n+        # This should order by author's default ordering first, then by editor\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline'),\n+        )\n+\n+        # Explicitly ordering by editor_id should override the default ordering\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline'),\n+        )\n+\n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n@@ -353,6 +376,29 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n+\n+    def test_self_referencing_fk_ordering(self):\n+        # Create instances of Author with a self-reference via the editor field\n+        author1 = Author.objects.create(name=\"Author 1\")\n+        author2 = Author.objects.create(name=\"Author 2\", editor=author1)\n+\n+        # Create articles for each author\n+        article1 = Article.objects.create(author=author1, headline=\"Article 1\", pub_date=\"2023-01-01\")\n+        article2 = Article.objects.create(author=author2, headline=\"Article 2\", pub_date=\"2023-01-02\")\n+        \n+        # This should order by author's default ordering first, then by editor\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline'),\n+        )\n+\n+        # Explicitly ordering by editor_id should override the default ordering\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline'),\n+        )\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline').asc()), [\n                 \"Article 1\",\n",
  "django__django-13089": "",
  "django__django-13109": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex d60d822..6e6801c 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -1645,6 +1645,46 @@ class ModelFormBasicTests(TestCase):\n         obj.full_clean()\n \n \n+class ForeignKeyValidationTests(TestCase):\n+    def setUp(self):\n+        class ArticleManager(models.Manager):\n+            def get_queryset(self):\n+                # Filter out archived articles by default.\n+                return super().get_queryset().filter(archived=False)\n+\n+        class Article(models.Model):\n+            title = models.CharField(max_length=100)\n+            archived = models.BooleanField(default=False)\n+            objects = ArticleManager()\n+\n+        class FavoriteArticle(models.Model):\n+            article = models.ForeignKey(Article, on_delete=models.CASCADE)\n+\n+        self.Article = Article\n+        self.FavoriteArticle = FavoriteArticle\n+\n+    def test_foreign_key_validation_uses_base_manager(self):\n+        # Create an archived article.\n+        archived_article = self.Article.objects.create(title='Archived Article', archived=True)\n+        \n+        class FavoriteArticleForm(forms.ModelForm):\n+            class Meta:\n+                model = self.FavoriteArticle\n+                fields = '__all__'\n+\n+            def __init__(self, *args, **kwargs):\n+                super().__init__(*args, **kwargs)\n+                # Use the base manager to allow archived articles.\n+                self.fields['article'].queryset = self.Article._base_manager.all()\n+        \n+        # Attempt to validate a FavoriteArticle with the archived article.\n+        form_data = {'article': archived_article.pk}\n+        form = FavoriteArticleForm(data=form_data)\n+        \n+        # The form should be valid if the ForeignKey validation uses the base manager.\n+        self.assertTrue(form.is_valid())\n+\n+\n class ModelMultipleChoiceFieldTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-13112": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 081eff8..f8b6c38 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -867,7 +867,30 @@ class StateTests(SimpleTestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             project_state.apps\n \n-    def test_real_apps(self):\n+    def test_mixed_case_app_label_foreign_key_resolution(self):\n+        \"\"\"\n+        Test ForeignKey resolution with mixed-case app label.\n+        \"\"\"\n+        new_apps = Apps()\n+\n+        class Category(models.Model):\n+            title = models.CharField(max_length=100, db_index=True)\n+\n+            class Meta:\n+                app_label = 'MiXeD_Case_App'\n+                apps = new_apps\n+\n+        class Content(models.Model):\n+            category = models.ForeignKey(Category, models.CASCADE)\n+\n+            class Meta:\n+                app_label = 'MiXeD_Case_App'\n+                apps = new_apps\n+\n+        project_state = ProjectState()\n+        project_state.add_model(ModelState.from_model(Category))\n+        project_state.add_model(ModelState.from_model(Content))\n+        self.assertEqual(len(project_state.apps.get_models()), 2)\n         \"\"\"\n         Including real apps can resolve dangling FK errors.\n         This test relies on the fact that contenttypes is always loaded.\n",
  "django__django-13121": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex a684d7e..539bd02 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1210,13 +1210,69 @@ class ExpressionOperatorTests(TestCase):\n         self.assertEqual(Number.objects.get(pk=self.n.pk).integer, 1764)\n         self.assertEqual(Number.objects.get(pk=self.n.pk).float, Approximate(61.02, places=2))\n \n-    @unittest.skipIf(connection.vendor == 'oracle', \"Oracle doesn't support bitwise XOR.\")\n+    from django.db.models import F\n+    from django.test import TestCase\n+    from datetime import timedelta\n+    from .models import Experiment\n+\n+    class DurationFieldTests(TestCase):\n+        \n+        def setUp(self):\n+            self.deltas = [timedelta(days=1), timedelta(hours=3, minutes=30), timedelta(weeks=2)]\n+            self.experiment1 = Experiment.objects.create(estimated_time=timedelta(days=5, hours=4))\n+            self.experiment2 = Experiment.objects.create(estimated_time=timedelta(hours=5, minutes=45))\n+\n+        def test_duration_expressions(self):\n+            for delta in self.deltas:\n+                qs = Experiment.objects.annotate(duration=F('estimated_time') + delta)\n+                for obj in qs:\n+                    self.assertEqual(obj.duration, obj.estimated_time + delta)\n+\n+        def test_duration_expression_with_negative_delta(self):\n+            negative_delta = timedelta(days=-1)\n+            qs = Experiment.objects.annotate(duration=F('estimated_time') + negative_delta)\n+            for obj in qs:\n+                self.assertEqual(obj.duration, obj.estimated_time + negative_delta)\n+\n+        def test_duration_expression_with_zero_delta(self):\n+            zero_delta = timedelta(0)\n+            qs = Experiment.objects.annotate(duration=F('estimated_time') + zero_delta)\n+            for obj in qs:\n+                self.assertEqual(obj.duration, obj.estimated_time)\n     def test_lefthand_bitwise_xor(self):\n         Number.objects.update(integer=F('integer').bitxor(48))\n         self.assertEqual(Number.objects.get(pk=self.n.pk).integer, 26)\n         self.assertEqual(Number.objects.get(pk=self.n1.pk).integer, -26)\n \n-    @unittest.skipIf(connection.vendor == 'oracle', \"Oracle doesn't support bitwise XOR.\")\n+    from django.db.models import F\n+    from django.test import TestCase\n+    from datetime import timedelta\n+    from .models import Experiment\n+\n+    class DurationFieldTests(TestCase):\n+        \n+        def setUp(self):\n+            self.deltas = [timedelta(days=1), timedelta(hours=3, minutes=30), timedelta(weeks=2)]\n+            self.experiment1 = Experiment.objects.create(estimated_time=timedelta(days=5, hours=4))\n+            self.experiment2 = Experiment.objects.create(estimated_time=timedelta(hours=5, minutes=45))\n+\n+        def test_duration_expressions(self):\n+            for delta in self.deltas:\n+                qs = Experiment.objects.annotate(duration=F('estimated_time') + delta)\n+                for obj in qs:\n+                    self.assertEqual(obj.duration, obj.estimated_time + delta)\n+\n+        def test_duration_expression_with_negative_delta(self):\n+            negative_delta = timedelta(days=-1)\n+            qs = Experiment.objects.annotate(duration=F('estimated_time') + negative_delta)\n+            for obj in qs:\n+                self.assertEqual(obj.duration, obj.estimated_time + negative_delta)\n+\n+        def test_duration_expression_with_zero_delta(self):\n+            zero_delta = timedelta(0)\n+            qs = Experiment.objects.annotate(duration=F('estimated_time') + zero_delta)\n+            for obj in qs:\n+                self.assertEqual(obj.duration, obj.estimated_time)\n     def test_lefthand_bitwise_xor_null(self):\n         employee = Employee.objects.create(firstname='John', lastname='Doe')\n         Employee.objects.update(salary=F('salary').bitxor(48))\n",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..3278eba 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1491,6 +1491,13 @@ class FTimeDeltaTests(TestCase):\n                 self.assertEqual(obj.duration, obj.estimated_time + delta)\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_datetime_direct_subtraction(self):\n+        # Test direct subtraction without ExpressionWrapper\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for obj in queryset:\n+            self.assertEqual(obj.delta, obj.end - obj.start)\n     def test_date_subtraction(self):\n         queryset = Experiment.objects.annotate(\n             completion_duration=ExpressionWrapper(\n@@ -1520,6 +1527,13 @@ class FTimeDeltaTests(TestCase):\n         self.assertIsNone(queryset.first().shifted)\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_datetime_direct_subtraction(self):\n+        # Test direct subtraction without ExpressionWrapper\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for obj in queryset:\n+            self.assertEqual(obj.delta, obj.end - obj.start)\n     def test_date_subquery_subtraction(self):\n         subquery = Experiment.objects.filter(pk=OuterRef('pk')).values('completed')\n         queryset = Experiment.objects.annotate(\n@@ -1530,6 +1544,13 @@ class FTimeDeltaTests(TestCase):\n         self.assertTrue(queryset.exists())\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_datetime_direct_subtraction(self):\n+        # Test direct subtraction without ExpressionWrapper\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for obj in queryset:\n+            self.assertEqual(obj.delta, obj.end - obj.start)\n     def test_date_case_subtraction(self):\n         queryset = Experiment.objects.annotate(\n             date_case=Case(\n@@ -1547,6 +1568,13 @@ class FTimeDeltaTests(TestCase):\n         self.assertEqual(queryset.get(), self.e0)\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_datetime_direct_subtraction(self):\n+        # Test direct subtraction without ExpressionWrapper\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for obj in queryset:\n+            self.assertEqual(obj.delta, obj.end - obj.start)\n     def test_time_subtraction(self):\n         Time.objects.create(time=datetime.time(12, 30, 15, 2345))\n         queryset = Time.objects.annotate(\n@@ -1573,6 +1601,13 @@ class FTimeDeltaTests(TestCase):\n         self.assertIsNone(queryset.first().shifted)\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_datetime_direct_subtraction(self):\n+        # Test direct subtraction without ExpressionWrapper\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for obj in queryset:\n+            self.assertEqual(obj.delta, obj.end - obj.start)\n     def test_time_subquery_subtraction(self):\n         Time.objects.create(time=datetime.time(12, 30, 15, 2345))\n         subquery = Time.objects.filter(pk=OuterRef('pk')).values('time')\n@@ -1584,6 +1619,13 @@ class FTimeDeltaTests(TestCase):\n         self.assertTrue(queryset.exists())\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_datetime_direct_subtraction(self):\n+        # Test direct subtraction without ExpressionWrapper\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for obj in queryset:\n+            self.assertEqual(obj.delta, obj.end - obj.start)\n     def test_datetime_subtraction(self):\n         under_estimate = [\n             e.name for e in Experiment.objects.filter(estimated_time__gt=F('end') - F('start'))\n@@ -1608,6 +1650,13 @@ class FTimeDeltaTests(TestCase):\n         self.assertIsNone(queryset.first().shifted)\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_datetime_direct_subtraction(self):\n+        # Test direct subtraction without ExpressionWrapper\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for obj in queryset:\n+            self.assertEqual(obj.delta, obj.end - obj.start)\n     def test_datetime_subquery_subtraction(self):\n         subquery = Experiment.objects.filter(pk=OuterRef('pk')).values('start')\n         queryset = Experiment.objects.annotate(\n@@ -1618,6 +1667,13 @@ class FTimeDeltaTests(TestCase):\n         self.assertTrue(queryset.exists())\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_datetime_direct_subtraction(self):\n+        # Test direct subtraction without ExpressionWrapper\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for obj in queryset:\n+            self.assertEqual(obj.delta, obj.end - obj.start)\n     def test_datetime_subtraction_microseconds(self):\n         delta = datetime.timedelta(microseconds=8999999999999999)\n         Experiment.objects.update(end=F('start') + delta)\n",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..9732b8c 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,5 +1,7 @@\n import operator\n \n+import operator\n+\n from django.db import DatabaseError, NotSupportedError, connection\n from django.db.models import Exists, F, IntegerField, OuterRef, Value\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n@@ -39,7 +41,26 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.intersection(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n-    @skipUnlessDBFeature('supports_select_difference')\n+    \n+    def test_union_none(self):\n+        # Setup initial querysets for union, similar to original test patch\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        qs3 = qs1.union(qs2)\n+        # Ensure that `none()` on a union queryset results in an empty result set\n+        self.assertSequenceEqual(qs3.none(), [])\n+        # Ensure the original union works as expected\n+        self.assertNumbersEqual(qs3, [0, 1, 8, 9], ordered=False)\n+\n+    def test_union_with_empty_result(self):\n+        # New test to ensure unions involving empty querysets work correctly\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__lt=0)  # This will return an empty queryset\n+        qs3 = qs1.union(qs2)\n+        # Ensure that `none()` on this union queryset results in an empty set\n+        self.assertSequenceEqual(qs3.none(), [])\n+        # Ensure the union only returns results from the non-empty queryset\n+        self.assertNumbersEqual(qs3, [0, 1], ordered=False)\n     def test_simple_difference(self):\n         qs1 = Number.objects.filter(num__lte=5)\n         qs2 = Number.objects.filter(num__lte=4)\n",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..691e426 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -312,7 +312,19 @@ class SessionTestsMixin:\n         self.assertEqual(self.session.decode(encoded), data)\n \n     @override_settings(SECRET_KEY='django_tests_secret_key')\n-    def test_decode_legacy(self):\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    @override_settings(DEFAULT_HASHING_ALGORITHM='sha1')\n+    def test_legacy_decode_with_sha1(self):\n+        data = {'another test key': 'another test value'}\n+        encoded = self.session.encode(data)\n+        self.assertEqual(self.session._legacy_decode(encoded), data)\n+\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    @override_settings(DEFAULT_HASHING_ALGORITHM='sha1')\n+    def test_decode_with_sha1(self):\n+        data = {'yet another test key': 'yet another test value'}\n+        encoded = self.session.encode(data)\n+        self.assertEqual(self.session.decode(encoded), data)\n         # RemovedInDjango40Warning: pre-Django 3.1 sessions will be invalid.\n         legacy_encoded = (\n             'OWUzNTNmNWQxNTBjOWExZmM4MmQ3NzNhMDRmMjU4NmYwNDUyNGI2NDp7ImEgdGVzd'\n",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..5250c83 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -2,6 +2,8 @@ import time\n \n from django.core.exceptions import ImproperlyConfigured\n from django.http import HttpResponse\n+from django.http import HttpResponse\n+from django.shortcuts import get_object_or_404\n from django.test import (\n     RequestFactory, SimpleTestCase, ignore_warnings, override_settings,\n )\n@@ -572,7 +574,38 @@ class SingleObjectTemplateResponseMixinTest(SimpleTestCase):\n \n @override_settings(ROOT_URLCONF='generic_views.urls')\n class DeprecationTests(SimpleTestCase):\n-    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_template_view_get_context_data_with_simplelazyobject(self):\n+        \"\"\"\n+        Test if TemplateView.get_context_data() properly handles SimpleLazyObject\n+        in kwargs for Django 3.1+ by ensuring the slug resolves correctly.\n+        \"\"\"\n+        class Account:\n+            def __init__(self, slug):\n+                self.slug = slug\n+\n+            @staticmethod\n+            def objects():\n+                return [Account(slug='test-slug')]\n+\n+            @staticmethod\n+            def get(slug):\n+                for account in Account.objects():\n+                    if account.slug == slug:\n+                        return account\n+                raise HttpResponse(status=404)\n+\n+        class OfferView(TemplateView):\n+            template_name = \"offers/offer.html\"\n+\n+            def get_context_data(self, **kwargs):\n+                offer_slug = kwargs.get(\"offer_slug\", \"\")\n+                offer = get_object_or_404(Account, slug=str(offer_slug))\n+                return {\"offer\": offer, \"offer_slug\": offer_slug}\n+\n+        request = self.rf.get('/offers/test-slug/')\n+        response = OfferView.as_view()(request, offer_slug='test-slug')\n+        self.assertEqual(response.context_data['offer'].slug, 'test-slug')\n+        self.assertEqual(response.context_data['offer_slug'], 'test-slug')\n     def test_template_params(self):\n         \"\"\"A generic template view passes kwargs as context.\"\"\"\n         response = self.client.get('/template/simple/bar/')\n@@ -580,7 +613,38 @@ class DeprecationTests(SimpleTestCase):\n         self.assertEqual(response.context['foo'], 'bar')\n         self.assertIsInstance(response.context['view'], View)\n \n-    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_template_view_get_context_data_with_simplelazyobject(self):\n+        \"\"\"\n+        Test if TemplateView.get_context_data() properly handles SimpleLazyObject\n+        in kwargs for Django 3.1+ by ensuring the slug resolves correctly.\n+        \"\"\"\n+        class Account:\n+            def __init__(self, slug):\n+                self.slug = slug\n+\n+            @staticmethod\n+            def objects():\n+                return [Account(slug='test-slug')]\n+\n+            @staticmethod\n+            def get(slug):\n+                for account in Account.objects():\n+                    if account.slug == slug:\n+                        return account\n+                raise HttpResponse(status=404)\n+\n+        class OfferView(TemplateView):\n+            template_name = \"offers/offer.html\"\n+\n+            def get_context_data(self, **kwargs):\n+                offer_slug = kwargs.get(\"offer_slug\", \"\")\n+                offer = get_object_or_404(Account, slug=str(offer_slug))\n+                return {\"offer\": offer, \"offer_slug\": offer_slug}\n+\n+        request = self.rf.get('/offers/test-slug/')\n+        response = OfferView.as_view()(request, offer_slug='test-slug')\n+        self.assertEqual(response.context_data['offer'].slug, 'test-slug')\n+        self.assertEqual(response.context_data['offer_slug'], 'test-slug')\n     def test_extra_template_params(self):\n         \"\"\"A template view can be customized to return extra context.\"\"\"\n         response = self.client.get('/template/custom/bar1/bar2/')\n",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..e47bb31 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -3,6 +3,78 @@ import os\n from decimal import Decimal\n from unittest import mock, skipUnless\n \n+class LimitChoicesToDuplicateOptionsTests(TestCase):\n+    def setUp(self):\n+        # Create Characters\n+        self.marley = Character.objects.create(username='Marley', last_action='2023-10-01')\n+        self.threepwood = Character.objects.create(username='Threepwood', last_action='2023-10-01')\n+\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        joke1 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.threepwood,\n+        )\n+        joke2 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.threepwood,\n+        )\n+        joke3 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.marley,\n+        )\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=self.marley)\n+        joke1.has_fooled_today.add(self.marley, self.threepwood)\n+        joke2.has_fooled_today.add(self.marley)\n+        joke3.has_fooled_today.add(self.marley, self.threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+\n from django import forms\n from django.core.exceptions import (\n     NON_FIELD_ERRORS, FieldError, ImproperlyConfigured, ValidationError,\n@@ -15,6 +87,7 @@ from django.forms.models import (\n     modelform_factory,\n )\n from django.template import Context, Template\n+from django.test.utils import isolate_apps\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n \n from .models import (\n",
  "django__django-13343": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex a5ab3a0..3055224 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -29,7 +29,7 @@ from django.test.utils import requires_tz_support\n from django.urls import NoReverseMatch, reverse_lazy\n from django.utils import timezone\n \n-from .models import Storage, temp_storage, temp_storage_location\n+from .models import Storage, callable_storage\n \n FILE_SUFFIX_REGEX = '[A-Za-z0-9]{7}'\n \n@@ -906,7 +906,14 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         obj = FileField(storage=GetStorage)\n         self.assertIsInstance(obj.storage, BaseStorage)\n \n-    def test_callable_storage_file_field_in_model(self):\n+    def test_callable_storage_file_field_deconstruction(self):\n+        \"\"\"\n+        Test that deconstructing a FileField with callable storage returns the callable.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field('storage_callable').deconstruct()\n+        storage = kwargs['storage']\n+        self.assertIs(storage, callable_storage)\n         obj = Storage()\n         self.assertEqual(obj.storage_callable.storage, temp_storage)\n         self.assertEqual(obj.storage_callable.storage.location, temp_storage_location)\n",
  "django__django-13346": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex b918d5c..2c9a6e5 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -616,6 +616,21 @@ class TestQuerying(TestCase):\n             (['bar'], [self.objs[7]]),\n             ('ar', []),\n         ]\n+\n+    def test_key_in_lookup_with_jsonfield(self):\n+        tests = [\n+            ('our_field__key__in', [0], self.objs[:312]),\n+            ('our_field__key__in', [0, 1], self.objs[:312]),\n+            ('our_field__key__in', [1], []),\n+            ('our_field__key', 0, self.objs[:312]),\n+            ('our_field__key', 1, []),\n+        ]\n+        for lookup, value, expected in tests:\n+            with self.subTest(lookup=lookup, value=value):\n+                self.assertSequenceEqual(\n+                    OurModel.objects.filter(**{lookup: value}),\n+                    expected,\n+                )\n         for value, expected in tests:\n             with self.subTest(value=value):\n                 self.assertSequenceEqual(\n",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..628471f 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -18,6 +18,10 @@ from django.test import (\n     TestCase, override_settings, skipIfDBFeature, skipUnlessDBFeature,\n )\n from django.utils import timezone\n+import pytz\n+from datetime import datetime\n+from django.db.models.functions import TruncDate, TruncTime\n+from .models import DTModel\n \n from ..models import Author, DTModel, Fan\n \n",
  "django__django-13401": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e39d03e..aeb76e4 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -102,8 +102,48 @@ class BasicFieldTests(SimpleTestCase):\n         name, path, args, kwargs = Nested.Field().deconstruct()\n         self.assertEqual(path, 'model_fields.tests.Nested.Field')\n \n+from django.db import models\n+from django.test import SimpleTestCase\n+\n+class ModelFieldEqualityTests(SimpleTestCase):\n+    \n+    def test_abstract_inherited_fields(self):\n+        \"\"\"Field instances from abstract models are not equal and behave correctly in collections.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n \n-class ChoicesTests(SimpleTestCase):\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        self.assertNotEqual(abstract_model_field, inherit1_model_field)\n+        self.assertNotEqual(abstract_model_field, inherit2_model_field)\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+\n+        self.assertLess(abstract_model_field, inherit1_model_field)\n+        self.assertLess(abstract_model_field, inherit2_model_field)\n+        self.assertLess(inherit1_model_field, inherit2_model_field)\n+\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit1_model_field))\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit2_model_field))\n+        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n+        \n+        # Test that fields can be used as keys in dictionaries and elements in sets\n+        field_set = {inherit1_model_field, inherit2_model_field}\n+        self.assertEqual(len(field_set), 2)\n+        field_dict = {inherit1_model_field: 'field1', inherit2_model_field: 'field2'}\n+        self.assertEqual(len(field_dict), 2)\n+        self.assertIn(inherit1_model_field, field_dict)\n+        self.assertIn(inherit2_model_field, field_dict)\n \n     @classmethod\n     def setUpClass(cls):\n",
  "django__django-13410": "",
  "django__django-13417": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 8130de5..3a1b048 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2084,6 +2084,25 @@ class QuerysetOrderedTests(unittest.TestCase):\n         self.assertIs(qs.ordered, False)\n         self.assertIs(qs.order_by('num_notes').ordered, True)\n \n+    def test_annotate_with_default_ordering(self):\n+        # Using a model with Meta.ordering\n+        qs = Foo.objects.annotate(Count('pk')).all()\n+        # Check if it correctly identifies that without explicit order_by, it should not be ordered\n+        self.assertIs(qs.ordered, False)\n+\n+        # Add explicit ordering to verify ordered becomes True\n+        qs_ordered = qs.order_by('name')\n+        self.assertIs(qs_ordered.ordered, True)\n+\n+    def test_annotate_values_with_default_ordering(self):\n+        # Using .values() with annotate should also not be ordered by default\n+        qs = Foo.objects.values('name').annotate(num_notes=Count('pk'))\n+        self.assertIs(qs.ordered, False)\n+\n+        # After applying order_by, it should be ordered\n+        qs_ordered = qs.order_by('name')\n+        self.assertIs(qs_ordered.ordered, True)\n+\n \n @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n class SubqueryTests(TestCase):\n",
  "django__django-13516": "",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..72b0add 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,11 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n+from .models.with_custom_email_field import CustomEmailField\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n@@ -37,7 +39,25 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n-    def test_timeout(self):\n+    def test_token_invalidation_on_email_change(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        user = CustomEmailField.objects.create_user(\n+            username='changeemailuser',\n+            email='test4@example.com',\n+            password='testpw',\n+        )\n+        token_generator = PasswordResetTokenGenerator()\n+        token = token_generator.make_token(user)\n+\n+        # Initially, the token should be valid\n+        self.assertTrue(token_generator.check_token(user, token))\n+\n+        # Change the user's email\n+        user.email_address = 'test4new@example.com'\n+        user.save()\n+\n+        # After changing the email, the token should be invalid\n+        self.assertFalse(token_generator.check_token(user, token))\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n         # the value of 'now'.\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..dcb8e4c 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,9 +1,11 @@\n+\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n from django.contrib.auth.models import AbstractBaseUser\n from django.core import checks\n from django.db import models\n+from django.db.models import Q, UniqueConstraint\n from django.test import (\n     SimpleTestCase, override_settings, override_system_checks,\n )\n@@ -138,7 +140,53 @@ class ModelsPermissionsChecksTests(SimpleTestCase):\n             ),\n         ])\n \n-    def test_non_clashing_custom_permissions(self):\n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserUniqueConstraintWithCondition')\n+    def test_username_unique_with_constraint_condition(self):\n+        \"\"\"\n+        Test that the auth.E003 error is not raised when USERNAME_FIELD is\n+        enforced through a UniqueConstraint with a condition.\n+        \"\"\"\n+        class CustomUserUniqueConstraintWithCondition(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(\n+                        fields=['username'],\n+                        name='username_unique_condition',\n+                        condition=Q(username__isnull=False),\n+                    ),\n+                ]\n+\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [])\n+\n+        with self.settings(AUTHENTICATION_BACKENDS=['my.custom.backend']):\n+            errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+            self.assertEqual(errors, [])\n+\n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserUniqueConstraintWithoutCondition')\n+    def test_username_unique_constraint_no_condition(self):\n+        \"\"\"\n+        Test that no error is raised when USERNAME_FIELD is enforced\n+        through a UniqueConstraint without a specific condition.\n+        \"\"\"\n+        class CustomUserUniqueConstraintWithoutCondition(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(fields=['username'], name='username_unique_no_condition'),\n+                ]\n+\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [])\n+\n+        with self.settings(AUTHENTICATION_BACKENDS=['my.custom.backend']):\n+            errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+            self.assertEqual(errors, [])\n         class Checked(models.Model):\n             class Meta:\n                 permissions = [\n",
  "django__django-13569": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex a44d0b6..c73ce19 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1314,4 +1314,23 @@ class AggregateTestCase(TestCase):\n         # non-multivalued JOINs, see Col.possibly_multivalued (refs #31150):\n         # with self.assertNumQueries(1) as ctx:\n         #     self.assertSequenceEqual(books_qs, [book])\n-        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n+        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n+\n+    def test_aggregation_order_by_random_does_not_affect_groupby(self):\n+        \"\"\"\n+        Test that using order_by('?') does not add RANDOM() into the GROUP BY clause\n+        and break the aggregation.\n+        \"\"\"\n+        t = Thing.objects.create()\n+        Related.objects.create(thing=t)\n+        Related.objects.create(thing=t)\n+\n+        # Perform the aggregation and order by a random order\n+        queryset = Thing.objects.annotate(rc=Count('related')).order_by('?').values('id', 'rc')\n+\n+        # Test that the aggregation still holds with rc being 2, not split into multiple rows\n+        self.assertQuerysetEqual(\n+            queryset,\n+            [{'id': t.id, 'rc': 2}],\n+            lambda x: x\n+        )\n",
  "django__django-13590": "",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..e169b33 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -16,6 +16,7 @@ from unittest import mock\n \n from django import conf, get_version\n from django.conf import settings\n+from django.test.utils import captured_stderr, captured_stdout\n from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n )\n@@ -32,7 +33,43 @@ from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n \n-custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n+class ExecuteFromCommandLine(SimpleTestCase):\n+    \n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_with_main(self):\n+        \"\"\"\n+        Test when sys.argv[0] is '__main__.py', the program name should be\n+        'python -m django'.\n+        \"\"\"\n+        args = ['help']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['__main__.py'] + args):\n+                execute_from_command_line(['python -m django'] + args)\n+        self.assertIn('usage: python -m django help', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_custom_program_name(self):\n+        \"\"\"\n+        Test with a custom program name different from sys.argv[0].\n+        \"\"\"\n+        custom_prog_name = 'custom-django-admin'\n+        args = ['help']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['sys_prog_name.py'] + args):\n+                execute_from_command_line([custom_prog_name] + args)\n+        self.assertIn(f'usage: {custom_prog_name} help', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n \n SYSTEM_CHECK_MSG = 'System check identified no issues'\n \n",
  "django__django-13670": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 6f0b13f..99bf2bd 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -1,3 +1,4 @@\n+\n from datetime import date, datetime\n \n from django.test import SimpleTestCase, override_settings\n@@ -61,7 +62,24 @@ class DateFormatTests(SimpleTestCase):\n         udt = datetime(1970, 1, 1, tzinfo=utc)\n         self.assertEqual(format(udt, 'U'), '0')\n \n-    def test_empty_format(self):\n+    def test_year_before_1000(self):\n+        tests = [\n+            (476, '76'),\n+            (42, '42'),\n+            (4, '04'),\n+            (999, '99'),\n+            (1000, '00'),\n+            (1001, '01'),\n+            (1010, '10'),\n+            (2000, '00'),\n+            (2023, '23'),\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n         my_birthday = datetime(1979, 7, 8, 22, 00)\n \n         self.assertEqual(dateformat.format(my_birthday, ''), '')\n@@ -164,4 +182,4 @@ class DateFormatTests(SimpleTestCase):\n             self.assertEqual(\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+            )\n",
  "django__django-13741": "",
  "django__django-13786": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3782589..5db844a 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -118,8 +118,44 @@ class OptimizerTests(SimpleTestCase):\n                 migrations.CreateModel('Foo', fields=[], options={'verbose_name_plural': 'Foozes'}),\n             ]\n         )\n-\n-    def _test_create_alter_foo_delete_model(self, alter_foo):\n+    def test_create_model_and_remove_model_options_with_additional_cases(self):\n+        \"\"\"\n+        Additional test cases for verifying the removal of model options when squashed.\n+        \"\"\"\n+        # Case where options are completely removed\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'AnotherModel',\n+                    fields=[],\n+                    options={'unique_together': {('field1', 'field2')}},\n+                ),\n+                migrations.AlterModelOptions('AnotherModel', options={}),\n+            ],\n+            [migrations.CreateModel('AnotherModel', fields=[])],\n+        )\n+        \n+        # Case with multiple options changed and removed\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'YetAnotherModel',\n+                    fields=[],\n+                    options={\n+                        'ordering': ['field1'],\n+                        'verbose_name': 'Yet Another Model',\n+                    },\n+                ),\n+                migrations.AlterModelOptions('YetAnotherModel', options={'ordering': ['field2']}),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    'YetAnotherModel',\n+                    fields=[],\n+                    options={'ordering': ['field2']},\n+                ),\n+            ],\n+        )\n         \"\"\"\n         CreateModel, AlterModelTable, AlterUniqueTogether/AlterIndexTogether/\n         AlterOrderWithRespectTo, and DeleteModel should collapse into nothing.\n",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..28578cf 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,8 +1,10 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n from django.test import SimpleTestCase\n \n+from django.utils.translation import gettext_lazy\n from ..utils import setup\n \n \n@@ -41,6 +43,27 @@ class AddTests(SimpleTestCase):\n         output = self.engine.render_to_string('add06', {'t1': (3, 4), 't2': (1, 2)})\n         self.assertEqual(output, '(3, 4, 1, 2)')\n \n+    @setup({'add08': '{{ s1|add:lazy_s2 }}'})\n+    def test_add08(self):\n+        output = self.engine.render_to_string(\n+            'add08',\n+            {'s1': 'string', 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    @setup({'add09': '{{ lazy_s1|add:lazy_s2 }}'})\n+    def test_add09(self):\n+        output = self.engine.render_to_string(\n+            'add09',\n+            {'lazy_s1': gettext_lazy('string'), 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    def test_lazy_add(self):\n+        lazy_4 = lazy(lambda: 4, int)\n+        lazy_5 = lazy(lambda: 5, int)\n+        self.assertEqual(lazy_4() + lazy_5(), 9)\n+\n     @setup({'add07': '{{ d|add:t }}'})\n     def test_add07(self):\n         output = self.engine.render_to_string('add07', {'d': date(2000, 1, 1), 't': timedelta(10)})\n",
  "django__django-13807": "",
  "django__django-13809": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex d88ea78..bed9666 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1314,6 +1314,48 @@ class ManageRunserver(SimpleTestCase):\n         self.assertIn('unapplied migration(s)', self.output.getvalue())\n \n \n+import mock\n+from django.core.management import call_command\n+from django.core.management.commands.runserver import Command as RunserverCommand\n+from django.test import TestCase\n+from io import StringIO\n+import autoreload\n+import importlib\n+\n+class TestRunserverSkipChecks(TestCase):\n+    def setUp(self):\n+        self.output = StringIO()\n+\n+    @mock.patch('django.core.management.commands.runserver.RunserverCommand.check')\n+    def test_skip_checks(self, mocked_check):\n+        call_command(\n+            'runserver',\n+            use_reloader=False,\n+            skip_checks=True,\n+            stdout=self.output,\n+        )\n+        self.assertNotIn('Performing system checks...', self.output.getvalue())\n+        mocked_check.assert_not_called()\n+\n+        self.output.truncate(0)\n+        self.output.seek(0)\n+\n+        call_command(\n+            'runserver',\n+            use_reloader=False,\n+            skip_checks=False,\n+            stdout=self.output,\n+        )\n+        self.assertIn('Performing system checks...', self.output.getvalue())\n+        mocked_check.assert_called()\n+\n+    def test_exception_handling(self):\n+        try:\n+            with self.assertRaises(Exception):\n+                autoreload.check_errors(importlib.import_module)('test_exception')\n+        finally:\n+            autoreload._exception = None\n+\n class ManageRunserverMigrationWarning(TestCase):\n \n     def setUp(self):\n",
  "django__django-13810": "",
  "django__django-13820": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex 594c01e..5a1e0ed 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -1,3 +1,4 @@\n+\n import compileall\n import os\n \n@@ -7,6 +8,7 @@ from django.db.migrations.exceptions import (\n )\n from django.db.migrations.loader import MigrationLoader\n from django.db.migrations.recorder import MigrationRecorder\n+from importlib import import_module\n from django.test import TestCase, modify_settings, override_settings\n \n from .test_base import MigrationTestBase\n",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..49dfbc4 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -15,6 +15,9 @@ from django.test import (\n     TestCase, TransactionTestCase, override_settings, skipIfDBFeature,\n )\n from django.test.utils import isolate_apps\n+from django.db.backends.sqlite3.base import dbapi2, ImproperlyConfigured\n+import unittest\n+from unittest import mock\n \n from ..models import Author, Item, Object, Square\n \n@@ -30,6 +33,7 @@ class Tests(TestCase):\n     longMessage = True\n \n     def test_check_sqlite_version(self):\n+        # Test with a version below the supported threshold\n         msg = 'SQLite 3.8.3 or later is required (found 3.8.2).'\n         with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 8, 2)), \\\n                 mock.patch.object(dbapi2, 'sqlite_version', '3.8.2'), \\\n",
  "django__django-13837": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 10ffa22..8efac97 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -158,7 +158,13 @@ class TestIterModulesAndFiles(SimpleTestCase):\n \n class TestChildArguments(SimpleTestCase):\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver']\n+        )\n     def test_run_as_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n@@ -173,7 +179,13 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-Werror', __file__, 'runserver']\n         )\n \n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver']\n+        )\n     def test_exe_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             exe_path = Path(tmpdir) / 'django-admin.exe'\n",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..9f2be11 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -272,8 +272,22 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n \n         class SomeForm(Form):\n             field = ModelMultipleChoiceField(ChoiceModel.objects.all())\n+    def test_modelchoicefield_value_placeholder(self):\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            'invalid',\n+        )\n \n-        f = SomeForm({'field': ['<script>']})\n+        # Test with a valid choice to ensure no error\n+        valid_choice = ChoiceModel.objects.create(pk=4, name='d')\n+        self.assertEqual(f.clean(valid_choice.pk), valid_choice)\n         self.assertHTMLEqual(\n             t.render(Context({'form': f})),\n             '<ul class=\"errorlist\"><li>field<ul class=\"errorlist\">'\n@@ -307,4 +321,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py\nindex 1078928..957e609 100644\n--- a/tests/many_to_one/models.py\n+++ b/tests/many_to_one/models.py\n@@ -63,6 +63,12 @@ class Third(models.Model):\n     third = models.ForeignKey('self', models.SET_NULL, null=True, related_name='child_set')\n \n \n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n+\n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n+\n class Parent(models.Model):\n     name = models.CharField(max_length=20, unique=True)\n     bestchild = models.ForeignKey('Child', models.SET_NULL, null=True, related_name='favored_by')\n",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..bff9500 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,5 +1,8 @@\n+\n from django.db import IntegrityError, transaction\n-from django.test import TestCase, skipIfDBFeature\n+from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from .fields import MyWrapper\n+from .models import CustomAutoFieldModel\n \n from .models import Bar, Business, Employee, Foo\n \n",
  "django__django-14017": "",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..f954d4d 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -205,6 +205,27 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n \n+    def test_no_file_yielded_twice(self):\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(dry_run=False, clear=False, post_process=True,\n+                                      use_default_ignore_patterns=True, ignore_patterns=['*.ignoreme'])\n+        stats = collectstatic_cmd.collect()\n+        \n+        # Extract all post-processed file names\n+        post_processed_files = [name for name, _, _ in stats['post_processed']]\n+        \n+        # Check that each file is only yielded once\n+        self.assertCountEqual(post_processed_files, set(post_processed_files))\n+\n+    def test_intermediate_files_not_yielded(self):\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(dry_run=False, clear=False, post_process=True,\n+                                      use_default_ignore_patterns=True, ignore_patterns=['*.ignoreme'])\n+        stats = collectstatic_cmd.collect()\n+        \n+        # Ensure no intermediate file names are yielded (e.g., only final hashed files appear)\n+        self.assertNotIn('admin/css/base.5af66c1b1797.css', stats['post_processed'])\n+\n     def test_css_import_case_insensitive(self):\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n         self.assertEqual(relpath, \"cached/styles_insensitive.3fa427592a53.css\")\n@@ -214,6 +235,27 @@ class TestHashedFiles:\n             self.assertIn(b\"other.d41d8cd98f00.css\", content)\n         self.assertPostCondition()\n \n+    def test_no_file_yielded_twice(self):\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(dry_run=False, clear=False, post_process=True,\n+                                      use_default_ignore_patterns=True, ignore_patterns=['*.ignoreme'])\n+        stats = collectstatic_cmd.collect()\n+        \n+        # Extract all post-processed file names\n+        post_processed_files = [name for name, _, _ in stats['post_processed']]\n+        \n+        # Check that each file is only yielded once\n+        self.assertCountEqual(post_processed_files, set(post_processed_files))\n+\n+    def test_intermediate_files_not_yielded(self):\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(dry_run=False, clear=False, post_process=True,\n+                                      use_default_ignore_patterns=True, ignore_patterns=['*.ignoreme'])\n+        stats = collectstatic_cmd.collect()\n+        \n+        # Ensure no intermediate file names are yielded (e.g., only final hashed files appear)\n+        self.assertNotIn('admin/css/base.5af66c1b1797.css', stats['post_processed'])\n+\n     @override_settings(\n         STATICFILES_DIRS=[os.path.join(TEST_ROOT, 'project', 'faulty')],\n         STATICFILES_FINDERS=['django.contrib.staticfiles.finders.FileSystemFinder'],\n",
  "django__django-14089": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 7fb3d83..ca2e725 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n@@ -40,6 +41,25 @@ class OrderedSetTests(SimpleTestCase):\n         s.add(1)\n         self.assertIn(1, s)\n \n+    def test_reversed(self):\n+        # Test that reversed works on a non-empty OrderedSet\n+        s = OrderedSet([1, 2, 3])\n+        reversed_s = reversed(s)\n+        self.assertIsInstance(reversed_s, collections.abc.Iterator)\n+        self.assertEqual(list(reversed_s), [3, 2, 1])\n+\n+        # Test that reversed works on an empty OrderedSet\n+        s = OrderedSet()\n+        reversed_s = reversed(s)\n+        self.assertIsInstance(reversed_s, collections.abc.Iterator)\n+        self.assertEqual(list(reversed_s), [])\n+\n+        # Test that reversed works on a single-element OrderedSet\n+        s = OrderedSet([42])\n+        reversed_s = reversed(s)\n+        self.assertIsInstance(reversed_s, collections.abc.Iterator)\n+        self.assertEqual(list(reversed_s), [42])\n+\n     def test_bool(self):\n         # Refs #23664\n         s = OrderedSet()\n",
  "django__django-14122": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 83089d9..52d3309 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -1,16 +1,44 @@\n+\n from datetime import datetime\n from operator import attrgetter\n \n from django.db.models import (\n     CharField, DateTimeField, F, Max, OuterRef, Subquery, Value,\n )\n-from django.db.models.functions import Upper\n+from django.db.models.functions import Upper, Coalesce\n from django.test import TestCase\n \n from .models import Article, Author, ChildArticle, OrderedByFArticle, Reference\n-\n-\n-class OrderingTests(TestCase):\n+class MetaOrderingTests(TestCase):\n+    \n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.author_1 = Author.objects.create(name=\"Author 1\")\n+        cls.author_2 = Author.objects.create(name=\"Author 2\")\n+        cls.article_1 = Article.objects.create(headline=\"Article 1\", author=cls.author_1)\n+        cls.article_2 = Article.objects.create(headline=\"Article 2\", author=cls.author_2)\n+    \n+    def test_aggregation_not_affected_by_meta_ordering(self):\n+        \"\"\"\n+        Ensure that aggregation is not affected by fields in Meta.ordering.\n+        \"\"\"\n+        articles = Article.objects.values('author').annotate(count=Count('author'))\n+        self.assertCountEqual(articles, [\n+            {'author': self.author_1.pk, 'count': 1},\n+            {'author': self.author_2.pk, 'count': 1},\n+        ])\n+        \n+    def test_group_by_exclusion_of_meta_ordering(self):\n+        \"\"\"\n+        Test that the Meta.ordering is not included in GROUP BY when aggregating.\n+        \"\"\"\n+        articles = Article.objects.values('author').annotate(\n+            max_headline_length=Max(Coalesce(F('headline__length'), Value(0)))\n+        )\n+        self.assertCountEqual(articles, [\n+            {'author': self.author_1.pk, 'max_headline_length': len(\"Article 1\")},\n+            {'author': self.author_2.pk, 'max_headline_length': len(\"Article 2\")},\n+        ])\n \n     @classmethod\n     def setUpTestData(cls):\n@@ -483,4 +511,4 @@ class OrderingTests(TestCase):\n         )\n         ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n         articles = ChildArticle.objects.order_by('article_ptr')\n-        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n",
  "django__django-14140": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex c3db825..160ad58 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -824,7 +824,19 @@ class BasicExpressionsTests(TestCase):\n             [self.example_inc.ceo, self.max],\n         )\n \n-    def test_boolean_expression_combined_with_empty_Q(self):\n+    def test_combining_q_with_boolean_expressions(self):\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+        tests = [\n+            Q(Exists(is_poc)) & Q(),\n+            Q() & Q(Exists(is_poc)),\n+            Q(Exists(is_poc)) | Q(),\n+            Q() | Q(Exists(is_poc)),\n+        ]\n+        for conditions in tests:\n+            with self.subTest(conditions):\n+                self.assertCountEqual(Employee.objects.filter(conditions), [self.max])\n         is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n         self.gmbh.point_of_contact = self.max\n         self.gmbh.save()\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..22b3b77 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,3 +1,4 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n@@ -66,7 +67,29 @@ class TestDefaultPK(SimpleTestCase):\n             class Model(models.Model):\n                 pass\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField'\n+    )\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField'\n+    )\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -82,7 +105,29 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField'\n+    )\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField'\n+    )\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14311": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex b7e6f92..b19b82d 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -166,7 +166,14 @@ class TestIterModulesAndFiles(SimpleTestCase):\n class TestChildArguments(SimpleTestCase):\n     @mock.patch.dict(sys.modules, {'__main__': django.__main__})\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main_module.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_dotted_name(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n     def test_run_as_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n@@ -175,7 +182,14 @@ class TestChildArguments(SimpleTestCase):\n \n     @mock.patch.dict(sys.modules, {'__main__': test_main})\n     @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main_module.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_dotted_name(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n     def test_run_as_non_django_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n@@ -190,7 +204,14 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-Werror', __file__, 'runserver']\n         )\n \n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main_module.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_dotted_name(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n     def test_exe_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             exe_path = Path(tmpdir) / 'django-admin.exe'\n@@ -201,7 +222,14 @@ class TestChildArguments(SimpleTestCase):\n                     [exe_path, 'runserver']\n                 )\n \n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main_module.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_dotted_name(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n     def test_entrypoint_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             script_path = Path(tmpdir) / 'django-admin-script.py'\n",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..fc94cc1 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -229,6 +229,13 @@ TEST_DATA = [\n     # Trailing newlines not accepted\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n+    # Newlines and tabs are not accepted.\n+    (URLValidator(), 'http://www.djangoproject.com/\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://www.django\\rproject.com/', ValidationError),\n+    (URLValidator(), 'http://[::\\rffff:192.9.5.5]', ValidationError),\n+    (URLValidator(), 'http://\\twww.djangoproject.com/', ValidationError),\n+    (URLValidator(), 'http://\\t[::ffff:192.9.5.5]', ValidationError),\n     # Trailing junk does not take forever to reject\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br ', ValidationError),\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br z', ValidationError),\n",
  "django__django-14351": "",
  "django__django-14373": "",
  "django__django-14376": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\nindex 643c2b6..120505d 100644\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -89,6 +89,65 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_deprecated_and_new_keys(self):\n+        settings_port = 444\n+        options_port = 555\n+        expected_args_deprecated = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'deprecatedoptiondbname',\n+        ]\n+        expected_env_deprecated = {'MYSQL_PWD': 'deprecatedoptionpassword'}\n+        \n+        expected_args_new = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env_new = {'MYSQL_PWD': 'optionpassword'}\n+        \n+        # Test with deprecated keys\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'db': 'deprecatedoptiondbname',\n+                    'user': 'optionuser',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args_deprecated, expected_env_deprecated),\n+        )\n+\n+        # Test with new keys\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'user': 'optionuser',\n+                    'password': 'optionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args_new, expected_env_new),\n+        )\n+\n     def test_options_charset(self):\n         expected_args = [\n             'mysql',\n",
  "django__django-14434": "",
  "django__django-14493": "diff --git a/tests/staticfiles_tests/storage.py b/tests/staticfiles_tests/storage.py\nindex dc966a1..5368df1 100644\n--- a/tests/staticfiles_tests/storage.py\n+++ b/tests/staticfiles_tests/storage.py\n@@ -94,6 +94,28 @@ class ExtraPatternsStorage(ManifestStaticFilesStorage):\n     )\n \n \n+import io\n+from django.core.management import call_command\n+from django.test.utils import override_settings\n+from .test import CollectionTestCase\n+from .storage import ManifestStaticFilesStorage\n+\n+class NoPostProcessReplacedPathStorage(ManifestStaticFilesStorage):\n+    max_post_process_passes = 0\n+\n+@override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.NoPostProcessReplacedPathStorage')\n+class TestCollectionNoPostProcessReplacedPaths(CollectionTestCase):\n+    run_collectstatic_in_setUp = False\n+\n+    def test_collectstatic_no_post_process_replaced_paths(self):\n+        stdout = io.StringIO()\n+        call_command('collectstatic', verbosity=1, stdout=stdout, interactive=False)\n+        output = stdout.getvalue()\n+        # Check that there's no crash and post-processing is mentioned\n+        self.assertIn('post-processing', output)\n+        # Ensure no error message related to 'substitutions'\n+        self.assertNotIn('UnboundLocalError', output)\n+\n class NoneHashStorage(ManifestStaticFilesStorage):\n     def file_hash(self, name, content=None):\n-        return None\n+        return None\n",
  "django__django-14500": "",
  "django__django-14539": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 23a1e0a..9531999 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -250,10 +250,42 @@ class TestUtilsHtml(SimpleTestCase):\n                 'Search for google.com/?q=! and see.',\n                 'Search for <a href=\"http://google.com/?q=\">google.com/?q=</a>! and see.'\n             ),\n+            (\n+                'Search for google.com/?q=1&lt! and see.',\n+                'Search for <a href=\"http://google.com/?q=1%3C\">google.com/?q=1&lt</a>! and see.'\n+            ),\n+            (\n+                'Visit example.com/path/to/resource/?param=1&amp;other=2&end.',\n+                'Visit <a href=\"http://example.com/path/to/resource/?param=1&amp;other=2\">example.com/path/to/resource/?param=1&amp;other=2</a>&amp;end.'\n+            ),\n+            (\n+                'Check out https://example.org/resource?q=2&gt; for info.',\n+                'Check out <a href=\"https://example.org/resource?q=2%3E\">https://example.org/resource?q=2&gt</a> for info.'\n+            ),\n+            (\n+                'Example of punctuation: example.com/path, and then some.',\n+                'Example of punctuation: <a href=\"http://example.com/path\">example.com/path</a>, and then some.'\n+            ),\n             (\n                 lazystr('Search for google.com/?q=!'),\n                 'Search for <a href=\"http://google.com/?q=\">google.com/?q=</a>!'\n             ),\n+            (\n+                'Search for google.com/?q=1&lt! and see.',\n+                'Search for <a href=\"http://google.com/?q=1%3C\">google.com/?q=1&lt</a>! and see.'\n+            ),\n+            (\n+                'Visit example.com/path/to/resource/?param=1&amp;other=2&end.',\n+                'Visit <a href=\"http://example.com/path/to/resource/?param=1&amp;other=2\">example.com/path/to/resource/?param=1&amp;other=2</a>&amp;end.'\n+            ),\n+            (\n+                'Check out https://example.org/resource?q=2&gt; for info.',\n+                'Check out <a href=\"https://example.org/resource?q=2%3E\">https://example.org/resource?q=2&gt</a> for info.'\n+            ),\n+            (\n+                'Example of punctuation: example.com/path, and then some.',\n+                'Example of punctuation: <a href=\"http://example.com/path\">example.com/path</a>, and then some.'\n+            ),\n             ('foo@example.com', '<a href=\"mailto:foo@example.com\">foo@example.com</a>'),\n         )\n         for value, output in tests:\n",
  "django__django-14559": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex b579834..d49fd30 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -127,6 +127,34 @@ class BulkUpdateTests(TestCase):\n         with self.assertNumQueries(0):\n             Note.objects.bulk_update([], ['note'])\n \n+    def test_bulk_update_returns_number_of_rows(self):\n+        # Test with empty bulk_update (should return 0)\n+        rows_updated = Note.objects.bulk_update([], ['note'])\n+        self.assertEqual(rows_updated, 0)\n+\n+        # Create multiple notes and update them\n+        Note.objects.bulk_create([\n+            Note(note=f'note-{i}', misc=f'misc-{i}')\n+            for i in range(10)\n+        ])\n+        notes = list(Note.objects.all())\n+\n+        # Update all notes and check if the number of updated rows is correct\n+        for note in notes:\n+            note.note = \"updated-note\"\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 10)\n+\n+        # Test updating when there are duplicate objects\n+        duplicate_note = notes[0]\n+        duplicate_note.note = \"duplicate-note\"\n+        rows_updated = Note.objects.bulk_update([duplicate_note, duplicate_note], ['note'])\n+        self.assertEqual(rows_updated, 1)\n+\n+        # Test with duplicates in different batches\n+        rows_updated = Note.objects.bulk_update([duplicate_note, duplicate_note], ['note'], batch_size=1)\n+        self.assertEqual(rows_updated, 2)\n+\n     def test_large_batch(self):\n         Note.objects.bulk_create([\n             Note(note=str(i), misc=str(i))\n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..4900df7 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -360,6 +360,25 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])\n \n+    def test_formset_nonform_css_class(self):\n+        \"\"\"\n+        Test that non-form errors in FormSets have the 'nonform' CSS class.\n+        \"\"\"\n+        data = {\n+            'choices-TOTAL_FORMS': '2',\n+            'choices-INITIAL_FORMS': '0',\n+            'choices-MIN_NUM_FORMS': '0',\n+            'choices-MAX_NUM_FORMS': '0',\n+            'choices-0-choice': 'Zero',\n+            'choices-0-votes': '0',\n+            'choices-1-choice': 'One',\n+            'choices-1-votes': '1',\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=1, min_num=3, validate_min=True)\n+        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        self.assertIn('nonform', str(formset.non_form_errors()))\n+        \n     def test_formset_validate_min_unchanged_forms(self):\n         \"\"\"\n         min_num validation doesn't consider unchanged forms with initial data\n",
  "django__django-14631": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex a48e4b6..7557e45 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -2121,6 +2121,9 @@ Password: <input type=\"password\" name=\"password\" required></li>\n         form = DateTimeForm({})\n         self.assertEqual(form.errors, {})\n         self.assertEqual(form.cleaned_data, {'dt': now})\n+        # New test to verify that _clean_fields uses BoundField for initial value\n+        bf = form['dt']\n+        self.assertEqual(form.cleaned_data['dt'], bf.initial)\n \n     def test_datetime_changed_data_callable_with_microseconds(self):\n         class DateTimeForm(forms.Form):\n@@ -2128,6 +2131,9 @@ Password: <input type=\"password\" name=\"password\" required></li>\n \n         form = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n         self.assertEqual(form.changed_data, [])\n+        # New test to verify that changed_data uses BoundField for initial value\n+        bf = form['dt']\n+        self.assertEqual(bf.initial, datetime.datetime(2006, 10, 25, 14, 30, 45, 123456))\n \n     def test_help_text(self):\n         # You can specify descriptive text for a field by using the 'help_text' argument)\n",
  "django__django-14672": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 6fb82ec..21d9c97 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -808,9 +808,31 @@ class ShadowingFieldsTests(SimpleTestCase):\n     def test_field_name_clash_with_child_accessor(self):\n         class Parent(models.Model):\n             pass\n+    def test_m2m_through_fields_hashable(self):\n+        class Parent(models.Model):\n+            name = models.CharField(max_length=256)\n \n-        class Child(Parent):\n-            child = models.CharField(max_length=100)\n+        class ProxyParent(Parent):\n+            class Meta:\n+                proxy = True\n+\n+        class Child(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE)\n+            many_to_many_field = models.ManyToManyField(\n+                to=Parent,\n+                through=\"ManyToManyModel\",\n+                through_fields=['child', 'parent'],\n+                related_name=\"something\"\n+            )\n+\n+        class ManyToManyModel(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')\n+            child = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')\n+            second_child = models.ForeignKey(Child, on_delete=models.CASCADE, null=True, default=None)\n+\n+        reverse_m2m = Child._meta.get_field('many_to_many_field')\n+        inherited_reverse_m2m = ProxyParent._meta.get_field('something')\n+        self.assertEqual(hash(reverse_m2m), hash(inherited_reverse_m2m))\n \n         self.assertEqual(Child.check(), [\n             Error(\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..b495feb 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,5 +1,8 @@\n+\n import json\n-from contextlib import contextmanager\n+import datetime\n+from django.test import TestCase\n+from .models import Question\n \n from django.contrib import admin\n from django.contrib.admin.tests import AdminSeleniumTestCase\n@@ -281,7 +284,28 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n             'results': [{'id': str(q.pk), 'text': q.question} for q in Question.objects.all()[:PAGINATOR_SIZE]],\n             'pagination': {'more': True},\n         })\n-        # The second page of results.\n+    def test_serialize_result(self):\n+        class AutocompleteJsonSerializeResultView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return {\n+                    **super().serialize_result(obj, to_field_name),\n+                    'posted': str(obj.posted),\n+                }\n+\n+        Question.objects.create(question='Question 1', posted=datetime.date(2021, 8, 9))\n+        Question.objects.create(question='Question 2', posted=datetime.date(2021, 8, 7))\n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+        request.user = self.superuser\n+        response = AutocompleteJsonSerializeResultView.as_view(**self.as_view_args)(request)\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': [\n+                {'id': str(q.pk), 'text': q.question, 'posted': str(q.posted)}\n+                for q in Question.objects.order_by('-posted')\n+            ],\n+            'pagination': {'more': False},\n+        })\n         request = self.factory.get(self.url, {'term': '', 'page': '2', **self.opts})\n         request.user = self.superuser\n         with model_admin(Question, PKOrderingQuestionAdmin):\n",
  "django__django-14765": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 11009e5..cbbd8bf 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -24,7 +24,8 @@ class StateTests(SimpleTestCase):\n \n     def test_create(self):\n         \"\"\"\n-        Tests making a ProjectState from an Apps\n+import unittest\n+from django.db.migrations.state import ProjectState\n         \"\"\"\n \n         new_apps = Apps([\"migrations\"])\n@@ -924,7 +925,30 @@ class StateTests(SimpleTestCase):\n             1,\n         )\n \n-    def test_ignore_order_wrt(self):\n+    def test_real_apps_non_set(self):\n+        \"\"\"\n+        Test that ProjectState.__init__() raises an AssertionError\n+        if real_apps is not a set.\n+        \"\"\"\n+        with self.assertRaises(AssertionError):\n+            ProjectState(real_apps=['contenttypes'])\n+\n+    def test_real_apps_none(self):\n+        \"\"\"\n+        Test that ProjectState.__init__() handles None for real_apps correctly,\n+        setting it to an empty set.\n+        \"\"\"\n+        project_state = ProjectState(real_apps=None)\n+        self.assertEqual(project_state.real_apps, set())\n+\n+    def test_real_apps_is_set(self):\n+        \"\"\"\n+        Test that ProjectState.__init__() accepts real_apps as a set and correctly\n+        assigns it.\n+        \"\"\"\n+        real_apps = {'contenttypes', 'auth'}\n+        project_state = ProjectState(real_apps=real_apps)\n+        self.assertEqual(project_state.real_apps, real_apps)\n         \"\"\"\n         Makes sure ProjectState doesn't include OrderWrt fields when\n         making from existing models.\n",
  "django__django-14771": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 1875424..38105ed 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -195,6 +195,15 @@ class TestChildArguments(SimpleTestCase):\n         )\n \n     @mock.patch('__main__.__spec__', None)\n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions_in_child_arguments(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver']\n+        )\n+\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n@@ -235,6 +244,15 @@ class TestChildArguments(SimpleTestCase):\n         with self.assertRaisesMessage(RuntimeError, msg):\n             autoreload.get_child_arguments()\n \n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions_in_child_arguments(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver']\n+        )\n+\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n     def test_module_no_spec(self):\n",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..d6a1141 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -199,6 +199,29 @@ class MethodDecoratorTests(SimpleTestCase):\n     \"\"\"\n     Tests for method_decorator\n     \"\"\"\n+    def test_wrapper_assignments(self):\n+        \"\"\"@method_decorator preserves wrapper assignments.\"\"\"\n+        func_name = None\n+        func_module = None\n+\n+        def decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_name, func_module\n+                func_name = getattr(func, '__name__', None)\n+                func_module = getattr(func, '__module__', None)\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(decorator)\n+            def method(self):\n+                return 'tests'\n+\n+        Test().method()\n+        self.assertEqual(func_name, 'method')\n+        self.assertIsNotNone(func_module)\n+\n     def test_preserve_signature(self):\n         class Test:\n             @simple_dec_m\n@@ -426,6 +449,12 @@ class MethodDecoratorTests(SimpleTestCase):\n                     return \"tests\"\n \n \n+import functools\n+from django.utils.decorators import method_decorator\n+from django.test import TestCase\n+from functools import wraps\n+import logging\n+\n class XFrameOptionsDecoratorsTests(TestCase):\n     \"\"\"\n     Tests for the X-Frame-Options decorators.\n",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..a9af365 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5085,6 +5085,48 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         response = self.client.get(reverse('admin2:auth_user_password_change', args=(su.pk,)))\n         self.assertEqual(response.status_code, 404)\n \n+    def _test_readonly_foreignkey_links(self, admin_site):\n+        \"\"\"\n+        Helper method to test readonly ForeignKey links in different Admin Sites.\n+        \"\"\"\n+        chapter = Chapter.objects.create(\n+            title='Chapter 1',\n+            content='content',\n+            book=Book.objects.create(name='Book 1'),\n+        )\n+        language = Language.objects.create(iso='_40', name='Test')\n+        obj = ReadOnlyRelatedField.objects.create(\n+            chapter=chapter,\n+            language=language,\n+        )\n+        url = reverse(\n+            f'{admin_site}:admin_views_readonlyrelatedfield_change',\n+            args=(obj.pk,)\n+        )\n+        response = self.client.get(url)\n+        self.assertEqual(response.status_code, 200)\n+        language_url = reverse(\n+            f'{admin_site}:admin_views_language_change',\n+            args=(quote(language.pk),),\n+        )\n+        self.assertContains(\n+            response,\n+            '<div class=\"readonly\"><a href=\"%s\">_40</a></div>' % language_url,\n+            html=True,\n+        )\n+\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        \"\"\"\n+        Test readonly ForeignKey links in the default admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('admin')\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test readonly ForeignKey links in a custom admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('namespaced_admin')\n+\n     def test_change_form_renders_correct_null_choice_value(self):\n         \"\"\"\n         Regression test for #17911.\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..ba07933 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -341,6 +342,27 @@ class ModelChoiceFieldTests(TestCase):\n </div>\"\"\" % (self.c1.pk, self.c2.pk, self.c3.pk),\n         )\n \n+    def test_choice_value_hash(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(self.c1.pk, None)))\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+\n+    def test_choice_value_equality(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c1.pk, None)\n+        value_3 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        self.assertTrue(value_1 == value_2)\n+        self.assertFalse(value_1 == value_3)\n+\n+    def test_choice_value_inequality_with_non_iterator_value(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        self.assertNotEqual(value_1, self.c2.pk)\n+\n+    def test_choice_value_hash_consistency(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        self.assertEqual(hash(value_1), hash(value_1))  # Hash should be consistent\n+\n     def test_choices_not_fetched_when_not_rendering(self):\n         with self.assertNumQueries(1):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..cb4b4a6 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -793,6 +793,31 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n \n+    def test_rename_model_with_db_table_noop(self):\n+        app_label = 'test_rmwdbtn'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        # Ensure no changes to the database are made in forward direction\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+\n+        # Ensure no changes to the database are made in backward direction\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n     def test_rename_m2m_target_model(self):\n         app_label = \"test_rename_m2m_target_model\"\n         project_state = self.apply_operations(app_label, ProjectState(), operations=[\n",
  "django__django-15022": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex e1920cd..1b075d1 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -147,11 +147,51 @@ class ChangeListTests(TestCase):\n             def get_list_select_related(self, request):\n                 return ('band', 'player')\n \n-        ia = GetListSelectRelatedAdmin(Invitation, custom_site)\n-        request = self.factory.get('/invitation/')\n+from django.test import TestCase\n+from django.contrib.admin.sites import AdminSite\n+from .models import Parent, Child\n+from .admin import ParentAdmin, ParentAdminTwoSearchFields\n+from django.db import connection\n+from django.test.utils import CaptureQueriesContext\n+\n+class TestUnnecessaryJoins(TestCase):\n+    def setUp(self):\n+        self.site = AdminSite()\n+        self.superuser = User.objects.create_superuser('admin', 'admin@example.com', 'password')\n+        self.factory = RequestFactory()\n+\n+    def test_many_search_terms(self):\n+        parent = Parent.objects.create(name='Mary')\n+        Child.objects.create(parent=parent, name='Danielle')\n+        Child.objects.create(parent=parent, name='Daniel')\n+\n+        m = ParentAdmin(Parent, self.site)\n+        request = self.factory.get('/parent/', data={SEARCH_VAR: 'daniel ' * 80})\n         request.user = self.superuser\n-        cl = ia.get_changelist_instance(request)\n-        self.assertEqual(cl.queryset.query.select_related, {'player': {}, 'band': {}})\n+\n+        cl = m.get_changelist_instance(request)\n+        with CaptureQueriesContext(connection) as context:\n+            object_count = cl.queryset.count()\n+\n+        self.assertEqual(object_count, 1)\n+        self.assertEqual(context.captured_queries[0]['sql'].count('JOIN'), 1)\n+\n+    def test_related_field_multiple_search_terms(self):\n+        parent = Parent.objects.create(name='Mary')\n+        Child.objects.create(parent=parent, name='Danielle', age=18)\n+        Child.objects.create(parent=parent, name='Daniel', age=19)\n+\n+        m = ParentAdminTwoSearchFields(Parent, self.site)\n+\n+        request = self.factory.get('/parent/', data={SEARCH_VAR: 'danielle 19'})\n+        request.user = self.superuser\n+        cl = m.get_changelist_instance(request)\n+        self.assertEqual(cl.queryset.count(), 0)\n+\n+        request = self.factory.get('/parent/', data={SEARCH_VAR: 'daniel 19'})\n+        request.user = self.superuser\n+        cl = m.get_changelist_instance(request)\n+        self.assertEqual(cl.queryset.count(), 1)\n \n     def test_result_list_empty_changelist_value(self):\n         \"\"\"\n",
  "django__django-15037": "",
  "django__django-15103": "diff --git a/tests/template_tests/filter_tests/test_json_script.py b/tests/template_tests/filter_tests/test_json_script.py\nindex 607e24c..8284508 100644\n--- a/tests/template_tests/filter_tests/test_json_script.py\n+++ b/tests/template_tests/filter_tests/test_json_script.py\n@@ -1,5 +1,7 @@\n+\n from django.test import SimpleTestCase\n \n+from django.utils.html import json_script\n from ..utils import setup\n \n \n@@ -16,4 +18,4 @@ class JsonScriptTests(SimpleTestCase):\n             '<script id=\"test_id\" type=\"application/json\">'\n             '{\"a\": \"testing\\\\r\\\\njson \\'string\\\\\" \\\\u003Cb\\\\u003Eescaping\\\\u003C/b\\\\u003E\"}'\n             '</script>'\n-        )\n+        )\n",
  "django__django-15104": "",
  "django__django-15127": "",
  "django__django-15128": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex adde8a6..a803f94 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -30,10 +30,34 @@ from .models import (\n     SharedConnection, SimpleCategory, SingleObject, SpecialCategory, Staff,\n     StaffUser, Student, Tag, Task, Teacher, Ticket21203Child,\n     Ticket21203Parent, Ticket23605A, Ticket23605B, Ticket23605C, TvChef, Valid,\n-    X,\n+    X, Annotation, BaseUser\n )\n \n \n+class ConflictAliasTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.tag = Tag.objects.create(name='test_tag')\n+        cls.annotation_1 = Annotation.objects.create(tag=cls.tag)\n+        cls.annotation_2 = Annotation.objects.create(tag=cls.tag)\n+        cls.note = cls.annotation_1.notes.create(tag=cls.tag)\n+        cls.base_user_1 = BaseUser.objects.create(annotation=cls.annotation_1)\n+        cls.base_user_2 = BaseUser.objects.create(annotation=cls.annotation_2)\n+        cls.task = Task.objects.create(\n+            owner=cls.base_user_2, creator=cls.base_user_2, note=cls.note\n+        )\n+\n+    def test_conflicting_aliases_during_combine(self):\n+        qs1 = self.annotation_1.baseuser_set.all()\n+        qs2 = BaseUser.objects.filter(\n+            Q(owner__note__in=self.annotation_1.notes.all()) |\n+            Q(creator__note__in=self.annotation_1.notes.all())\n+        )\n+        self.assertSequenceEqual(qs1, [self.base_user_1])\n+        self.assertSequenceEqual(qs2, [self.base_user_2])\n+        self.assertCountEqual(qs2 | qs1, qs1 | qs2)\n+        self.assertCountEqual(qs2 | qs1, [self.base_user_1, self.base_user_2])\n+\n class Queries1Tests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-15161": "",
  "django__django-15268": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a6c0858..4028665 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1661,7 +1661,29 @@ class AutodetectorTests(TestCase):\n             changes, 'otherapp', 0, 4, model_name='book', name='newfield',\n         )\n \n-    def test_alter_field_and_foo_together(self):\n+    def test_optimized_foo_together_operations(self):\n+        \"\"\"\n+        Test that consecutive AlterFooTogether operations are optimized into one.\n+        \"\"\"\n+        initial_state = [self.author_empty, self.book_foo_together]\n+        final_state = [self.author_empty, self.book_foo_together_2]\n+        \n+        changes = self.get_changes(initial_state, final_state)\n+        \n+        # Ensure the optimizer reduces separate operations into one for each constraint type.\n+        self.assertNumberMigrations(changes, \"otherapp\", 1)\n+        self.assertOperationTypes(changes, 'otherapp', 0, [\n+            'AlterUniqueTogether', \n+            'AlterIndexTogether',\n+        ])\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 0, name='book',\n+            unique_together={('title', 'author')},\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 1, name='book',\n+            index_together={('title', 'author')},\n+        )\n         \"\"\"Fields are altered after deleting some index/unique_together.\"\"\"\n         initial_author = ModelState('testapp', 'Author', [\n             ('id', models.AutoField(primary_key=True)),\n",
  "django__django-15277": "",
  "django__django-15278": "",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..3048e55 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -19,7 +19,45 @@ class Nested:\n \n class BasicFieldTests(SimpleTestCase):\n \n-    def test_show_hidden_initial(self):\n+    def test_hash_immutability(self):\n+        field = models.IntegerField()\n+        field_hash = hash(field)\n+\n+        class MyModel(models.Model):\n+            rank = field\n+\n+        self.assertEqual(field_hash, hash(field))\n+\n+    def test_hash_with_multiple_models(self):\n+        field = models.CharField(max_length=200)\n+        field_hash = hash(field)\n+\n+        class FirstModel(models.Model):\n+            name = field\n+\n+        self.assertEqual(field_hash, hash(field))\n+\n+        class SecondModel(models.Model):\n+            title = field\n+\n+        self.assertEqual(field_hash, hash(field))\n+\n+    def test_hash_with_different_fields(self):\n+        field1 = models.CharField(max_length=200)\n+        field2 = models.IntegerField()\n+\n+        self.assertNotEqual(hash(field1), hash(field2))\n+\n+    def test_hash_in_dict(self):\n+        field = models.CharField(max_length=200)\n+        field_hash = hash(field)\n+        d = {field: 1}\n+\n+        class MyModel(models.Model):\n+            title = field\n+\n+        self.assertEqual(d[field], 1)\n+        self.assertEqual(field_hash, hash(field))\n         \"\"\"\n         Fields with choices respect show_hidden_initial as a kwarg to\n         formfield().\n",
  "django__django-15368": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex 447c150..deb964e 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -204,7 +204,15 @@ class BulkUpdateTests(TestCase):\n             [cat.special_name for cat in special_categories]\n         )\n \n-    def test_field_references(self):\n+    def test_f_expression(self):\n+        notes = [\n+            Note.objects.create(note='test_note', misc='test_misc')\n+            for _ in range(10)\n+        ]\n+        for note in notes:\n+            note.misc = F('note')\n+        Note.objects.bulk_update(notes, ['misc'])\n+        self.assertCountEqual(Note.objects.filter(misc='test_note'), notes)\n         numbers = [Number.objects.create(num=0) for _ in range(10)]\n         for number in numbers:\n             number.num = F('num') + 1\n",
  "django__django-15380": "",
  "django__django-15382": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex bd890ac..1fa6fc1 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1906,6 +1906,35 @@ class ExistsTests(TestCase):\n         self.assertNotIn('ORDER BY', captured_sql)\n \n \n+class ExistsFilterTests(TestCase):\n+\n+    def test_negated_empty_exists(self):\n+        manager = Manager.objects.create()\n+        qs = Manager.objects.filter(\n+            ~Exists(Manager.objects.none()) & Q(pk=manager.pk)\n+        )\n+        self.assertSequenceEqual(qs, [manager])\n+\n+    def test_exists_with_non_empty_queryset(self):\n+        manager = Manager.objects.create()\n+        qs = Manager.objects.filter(\n+            Exists(Manager.objects.filter(pk=manager.pk))\n+        )\n+        self.assertSequenceEqual(qs, [manager])\n+\n+    def test_negated_exists_with_non_empty_queryset(self):\n+        manager = Manager.objects.create()\n+        qs = Manager.objects.filter(\n+            ~Exists(Manager.objects.filter(pk=manager.pk))\n+        )\n+        self.assertSequenceEqual(qs, [])\n+\n+    def test_exists_on_empty_model(self):\n+        qs = Manager.objects.filter(\n+            Exists(Manager.objects.all())\n+        )\n+        self.assertSequenceEqual(qs, [])\n+\n class FieldTransformTests(TestCase):\n \n     @classmethod\n",
  "django__django-15467": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex f5af59b..b3596a9 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -26,7 +26,34 @@ from django.db.models import (\n )\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n-from django.utils import translation\n+from django.contrib import admin\n+from django.db import models\n+from django.test import TestCase\n+from django.contrib.admin.sites import AdminSite\n+\n+# Assume Inventory is a model with a ForeignKey field called 'parent'\n+class Parent(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+class Inventory(models.Model):\n+    parent = models.ForeignKey(Parent, on_delete=models.CASCADE, blank=True, null=True)\n+\n+class MyModelAdmin(admin.ModelAdmin):\n+    radio_fields = {\"parent\": admin.VERTICAL}\n+\n+    def formfield_for_foreignkey(self, db_field, request, **kwargs):\n+        if db_field.name == \"parent\":\n+            kwargs[\"empty_label\"] = \"Custom empty label\"\n+        return super().formfield_for_foreignkey(db_field, request, **kwargs)\n+\n+class MyModelAdminTests(TestCase):\n+    def setUp(self):\n+        self.site = AdminSite()\n+\n+    def test_radio_fields_foreignkey_respects_custom_empty_label(self):\n+        model_admin = MyModelAdmin(Inventory, self.site)\n+        field = model_admin.formfield_for_dbfield(Inventory._meta.get_field('parent'), request=None)\n+        self.assertEqual(field.empty_label, \"Custom empty label\")\n \n from .models import (\n     Advisor,\n",
  "django__django-15499": "",
  "django__django-15525": "diff --git a/tests/fixtures_regress/models.py b/tests/fixtures_regress/models.py\nindex 6245d2f..13aea5b 100644\n--- a/tests/fixtures_regress/models.py\n+++ b/tests/fixtures_regress/models.py\n@@ -14,9 +14,40 @@ class Animal(models.Model):\n     def __str__(self):\n         return self.name\n \n+class PersonManager(models.Manager):\n+    def get_by_natural_key(self, name):\n+        return self.get(name=name)\n \n-class Plant(models.Model):\n-    name = models.CharField(max_length=150)\n+\n+class Person(models.Model):\n+    name = models.CharField(max_length=255, unique=True)\n+    objects = PersonManager()\n+\n+    def natural_key(self):\n+        return (self.name,)\n+\n+    def __str__(self):\n+        return self.name\n+\n+\n+class NaturalKeyWithFKDependencyManager(models.Manager):\n+    def get_by_natural_key(self, name, author):\n+        return self.get(name=name, author__name=author)\n+\n+\n+class NaturalKeyWithFKDependency(models.Model):\n+    name = models.CharField(max_length=255)\n+    author = models.ForeignKey(Person, models.CASCADE)\n+\n+    objects = NaturalKeyWithFKDependencyManager()\n+\n+    class Meta:\n+        unique_together = [\"name\", \"author\"]\n+\n+    def natural_key(self):\n+        return (self.name,) + self.author.natural_key()\n+\n+    natural_key.dependencies = [\"fixtures_regress.Person\"]\n \n     class Meta:\n         # For testing when upper case letter in app name; regression for #4057\n",
  "django__django-15561": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex b8137da..d28abc8 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -3961,7 +3961,28 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             editor.alter_field(Book, new_field, old_field, strict=True)\n \n-    def test_add_textfield_unhashable_default(self):\n+    def test_alter_field_choices_noop(self):\n+        # Create the initial model\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        \n+        # Fetch the existing field\n+        old_field = Author._meta.get_field(\"name\")\n+        \n+        # Define a new field with choices\n+        new_field = CharField(\n+            choices=((\"Jane\", \"Jane\"), (\"Joe\", \"Joe\")),\n+            max_length=255,\n+        )\n+        new_field.set_attributes_from_name(\"name\")\n+        \n+        # Check no SQL queries are generated\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+        \n+        # Revert field back to old one and check no queries\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, new_field, old_field, strict=True)\n         # Create the table\n         with connection.schema_editor() as editor:\n             editor.create_model(Author)\n",
  "django__django-15569": "diff --git a/tests/custom_lookups/tests.py b/tests/custom_lookups/tests.py\nindex 74c331a..f0c136c 100644\n--- a/tests/custom_lookups/tests.py\n+++ b/tests/custom_lookups/tests.py\n@@ -324,6 +324,17 @@ class LookupTests(TestCase):\n             # getting the lookups again should re-cache\n             self.assertIn(\"exactly\", field.get_lookups())\n \n+    def test_unregister_lookup_clears_cache(self):\n+        field = Article._meta.get_field(\"author\")\n+\n+        # Register the Exactly lookup to ensure it's in the cache\n+        with register_lookup(models.ForeignObject, Exactly):\n+            self.assertIn(\"exactly\", field.get_lookups())\n+\n+        # Unregister the lookup and ensure the cache is cleared\n+        models.ForeignObject._unregister_lookup(Exactly)\n+        self.assertNotIn(\"exactly\", field.get_lookups())\n+\n \n class BilateralTransformTests(TestCase):\n     def test_bilateral_upper(self):\n",
  "django__django-15572": "",
  "django__django-15731": "",
  "django__django-15741": "diff --git a/tests/i18n/tests.py b/tests/i18n/tests.py\nindex 1f80a63..fa95998 100644\n--- a/tests/i18n/tests.py\n+++ b/tests/i18n/tests.py\n@@ -1,3 +1,7 @@\n+\n+from django.utils.translation import gettext_lazy as _\n+from django.utils.formats import get_format\n+\n import datetime\n import decimal\n import gettext as gettext_module\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..603d4ae 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -390,7 +390,18 @@ class ProxyModelTests(TestCase):\n             repr(resp), \"<ProxyImprovement: ProxyImprovement:improve that>\"\n         )\n \n-    def test_proxy_load_from_fixture(self):\n+    def test_select_related_only_on_proxy_model(self):\n+        # Create instances for testing\n+        custom_model_instance = CustomModel.objects.create(name=\"Test Name\")\n+        another_model_instance = AnotherModel.objects.create(custom=custom_model_instance)\n+\n+        # Use select_related and only on proxy model\n+        queryset = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        result = queryset.get()\n+\n+        # Verify that the result is as expected\n+        self.assertEqual(result, another_model_instance)\n+        self.assertEqual(result.custom.name, \"Test Name\")\n         management.call_command(\"loaddata\", \"mypeople.json\", verbosity=0)\n         p = MyPerson.objects.get(pk=100)\n         self.assertEqual(p.name, \"Elvis Presley\")\n@@ -399,6 +410,9 @@ class ProxyModelTests(TestCase):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n \n+from django.test import TestCase\n+from django.db import models\n+\n @override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n class ProxyModelAdminTests(TestCase):\n     @classmethod\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..84e2440 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -157,6 +157,12 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n+    def test_parameters_with_command(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n+        )\n+\n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n",
  "django__django-15863": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 08f08e1..5ebc3de 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -74,6 +74,29 @@ class FunctionTests(SimpleTestCase):\n         self.assertEqual(floatformat(1.5e-15, -20), \"0.00000000000000150000\")\n         self.assertEqual(floatformat(1.00000000000000015, 16), \"1.0000000000000002\")\n \n+    def test_decimal_precision(self):\n+        # This test verifies that the floatformat filter maintains precision for Decimal numbers.\n+        self.assertEqual(\n+            floatformat(Decimal(\"123456.123456789012345678901\"), 21),\n+            \"123456.123456789012345678901\",\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.12345678901234567890\"), 20),\n+            \"42.12345678901234567890\",\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"0.00000000000000000012345678901234567890\"), 38),\n+            \"0.00000000000000000012345678901234567890\",\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"-42.12345678901234567890\"), 20),\n+            \"-42.12345678901234567890\",\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"12345678901234567890.12345678901234567890\"), 40),\n+            \"12345678901234567890.12345678901234567890\",\n+        )\n+\n     def test_force_grouping(self):\n         with translation.override(\"en\"):\n             self.assertEqual(floatformat(10000, \"g\"), \"10,000\")\n",
  "django__django-15930": "",
  "django__django-15987": "",
  "django__django-16032": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex bcf8df9..b20cd8f 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -985,10 +985,110 @@ class NonAggregateAnnotationTestCase(TestCase):\n             )\n             .values(\"name\")\n         )\n+\n+    def test_alias_after_annotate_subquery(self):\n+        # This test reproduces the issue where alias() after annotate() causes an error with __in filtering\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+            .values('id')  # Ensure only id is selected\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        self.assertCountEqual(\n+            publisher_books_qs,\n+            [\n+                {'name': 'Apress'},\n+                {'name': 'Sams'},\n+                {'name': 'Prentice Hall'},\n+                {'name': 'Morgan Kaufmann'}\n+            ]\n+        )\n+\n+    def test_alias_and_filter_combination(self):\n+        # Test additional scenarios with alias and filter combinations\n+        medium_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=100,\n+                pages__lte=400,\n+            )\n+            .annotate(book_annotate=Value(2))\n+            .alias(book_alias=Value(2))\n+            .values('id')  # Ensure only id is selected\n+        )\n+        publisher_medium_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=medium_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        self.assertCountEqual(\n+            publisher_medium_books_qs,\n+            [\n+                # Add expected publisher names based on your test data\n+            ]\n+        )\n         self.assertCountEqual(\n             publisher_books_qs, [{\"name\": \"Sams\"}, {\"name\": \"Morgan Kaufmann\"}]\n         )\n \n+    def test_alias_after_annotate_subquery(self):\n+        # This test reproduces the issue where alias() after annotate() causes an error with __in filtering\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+            .values('id')  # Ensure only id is selected\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        self.assertCountEqual(\n+            publisher_books_qs,\n+            [\n+                {'name': 'Apress'},\n+                {'name': 'Sams'},\n+                {'name': 'Prentice Hall'},\n+                {'name': 'Morgan Kaufmann'}\n+            ]\n+        )\n+\n+    def test_alias_and_filter_combination(self):\n+        # Test additional scenarios with alias and filter combinations\n+        medium_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=100,\n+                pages__lte=400,\n+            )\n+            .annotate(book_annotate=Value(2))\n+            .alias(book_alias=Value(2))\n+            .values('id')  # Ensure only id is selected\n+        )\n+        publisher_medium_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=medium_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        self.assertCountEqual(\n+            publisher_medium_books_qs,\n+            [\n+                # Add expected publisher names based on your test data\n+            ]\n+        )\n+\n     def test_annotation_exists_aggregate_values_chaining(self):\n         qs = (\n             Book.objects.values(\"publisher\")\n@@ -1001,6 +1101,56 @@ class NonAggregateAnnotationTestCase(TestCase):\n             .values_list(\"max_pubdate\", flat=True)\n             .order_by(\"max_pubdate\")\n         )\n+\n+    def test_alias_after_annotate_subquery(self):\n+        # This test reproduces the issue where alias() after annotate() causes an error with __in filtering\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+            .values('id')  # Ensure only id is selected\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        self.assertCountEqual(\n+            publisher_books_qs,\n+            [\n+                {'name': 'Apress'},\n+                {'name': 'Sams'},\n+                {'name': 'Prentice Hall'},\n+                {'name': 'Morgan Kaufmann'}\n+            ]\n+        )\n+\n+    def test_alias_and_filter_combination(self):\n+        # Test additional scenarios with alias and filter combinations\n+        medium_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=100,\n+                pages__lte=400,\n+            )\n+            .annotate(book_annotate=Value(2))\n+            .alias(book_alias=Value(2))\n+            .values('id')  # Ensure only id is selected\n+        )\n+        publisher_medium_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=medium_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        self.assertCountEqual(\n+            publisher_medium_books_qs,\n+            [\n+                # Add expected publisher names based on your test data\n+            ]\n+        )\n         self.assertCountEqual(\n             qs,\n             [\n",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..c6202be 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2416,7 +2416,7 @@ class CombinedExpressionTests(SimpleTestCase):\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV, Combinable.MOD]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..5d11b15 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib import admin\n@@ -21,7 +22,10 @@ from django.db.models import F, Field, IntegerField\n from django.db.models.functions import Upper\n from django.db.models.lookups import Contains, Exact\n from django.template import Context, Template, TemplateSyntaxError\n-from django.test import TestCase, override_settings\n+from django.test import TestCase, override_settings, skipUnlessDBFeature\n+from unittest import mock\n+from django.db import DatabaseError\n+from django.urls import reverse\n from django.test.client import RequestFactory\n from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup\n from django.urls import reverse\n@@ -400,7 +404,56 @@ class ChangeListTests(TestCase):\n         with self.assertRaises(IncorrectLookupParameters):\n             m.get_changelist_instance(request)\n \n-    def test_custom_paginator(self):\n+    @skipUnlessDBFeature(\"supports_transactions\")\n+    def test_list_editable_atomicity(self):\n+        # Create test data\n+        a = Swallow.objects.create(origin=\"Swallow A\", load=4, speed=1)\n+        b = Swallow.objects.create(origin=\"Swallow B\", load=2, speed=2)\n+\n+        self.client.force_login(self.superuser)\n+        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n+        data = {\n+            \"form-TOTAL_FORMS\": \"2\",\n+            \"form-INITIAL_FORMS\": \"2\",\n+            \"form-MIN_NUM_FORMS\": \"0\",\n+            \"form-MAX_NUM_FORMS\": \"1000\",\n+            \"form-0-uuid\": str(a.pk),\n+            \"form-1-uuid\": str(b.pk),\n+            \"form-0-load\": \"9.0\",\n+            \"form-0-speed\": \"3.0\",\n+            \"form-1-load\": \"5.0\",\n+            \"form-1-speed\": \"1.0\",\n+            \"_save\": \"Save\",\n+        }\n+\n+        # Simulate a database error on the first call to log_change\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\", side_effect=DatabaseError\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Ensure that original values are preserved\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+\n+        # Simulate a database error on the second call to log_change\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\",\n+            side_effect=[None, DatabaseError],\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Ensure that original values are preserved\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n         new_parent = Parent.objects.create(name=\"parent\")\n         for i in range(1, 201):\n             Child.objects.create(name=\"name %s\" % i, parent=new_parent)\n",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..d6bf448 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2400,7 +2400,24 @@ class MakeMigrationsTests(MigrationTestBase):\n         ):\n             call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n \n-    def test_makemigrations_migration_path_output(self):\n+    def test_makemigrations_check_with_dry_run(self):\n+        \"\"\"\n+        makemigrations --check --dry-run should exit with a non-zero status\n+        if there are changes but should not create any migration files.\n+        \"\"\"\n+        with self.temporary_migration_module() as tmpdir:\n+            with self.assertRaises(SystemExit):\n+                call_command(\"makemigrations\", \"--check\", \"--dry-run\", \"migrations\", verbosity=0)\n+            # Ensure no migration files were created\n+            self.assertFalse(os.path.exists(tmpdir))\n+\n+    def test_makemigrations_check_no_changes(self):\n+        \"\"\"\n+        makemigrations --check should exit with a zero status when there are\n+        no changes to an app requiring migrations.\n+        \"\"\"\n+        with self.temporary_migration_module(module=\"migrations.test_migrations_no_changes\"):\n+            call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n         \"\"\"\n         makemigrations should print the relative paths to the migrations unless\n         they are outside of the current tree, in which case the absolute path\n",
  "django__django-16136": "diff --git a/tests/async/tests.py b/tests/async/tests.py\nindex 72e103e..a9c9a1c 100644\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -1,3 +1,4 @@\n+\n import asyncio\n import os\n from unittest import mock\n@@ -6,8 +7,10 @@ from asgiref.sync import async_to_sync\n \n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n-from django.http import HttpResponse\n-from django.test import SimpleTestCase\n+from django.http import HttpResponse, HttpResponseNotAllowed\n+from django.test import SimpleTestCase, RequestFactory\n+import asyncio\n+from django.views import View\n from django.utils.asyncio import async_unsafe\n from django.views.generic.base import View\n \n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..750e1d6 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -24,7 +25,9 @@ from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n+from django.urls import reverse\n from django.utils.translation import gettext as _\n+import urllib.parse\n \n from .models.custom_user import (\n     CustomUser,\n@@ -884,6 +887,26 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # original hashed password contains $\n         self.assertIn(\"$\", form.cleaned_data[\"password\"])\n \n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_with_uuid_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        # Simulate accessing UserAdmin via a to_field reference (uuid).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n     def test_bug_19349_bound_password_field(self):\n         user = User.objects.get(username=\"testclient\")\n         form = UserChangeForm(data={}, instance=user)\n",
  "django__django-16145": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex 04d2f0e..fb0d3b6 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1600,6 +1600,38 @@ class ManageRunserver(SimpleTestCase):\n             \"2001:0db8:1234:5678::9\", \"7000\", ipv6=True, raw_ipv6=True\n         )\n \n+    @mock.patch(\"django.core.management.commands.runserver.run\")\n+    @mock.patch(\"django.core.management.base.BaseCommand.check_migrations\")\n+    def test_zero_ip_addr_with_port(self, *mocked_objects):\n+        output = io.StringIO()\n+        call_command(\n+            self.cmd,\n+            addrport=\"0:8000\",\n+            use_reloader=False,\n+            skip_checks=True,\n+            stdout=output,\n+        )\n+        self.assertIn(\n+            \"Starting development server at http://0.0.0.0:8000/\",\n+            output.getvalue(),\n+        )\n+        \n+    @mock.patch(\"django.core.management.commands.runserver.run\")\n+    @mock.patch(\"django.core.management.base.BaseCommand.check_migrations\")\n+    def test_zero_ip_addr_without_port(self, *mocked_objects):\n+        output = io.StringIO()\n+        call_command(\n+            self.cmd,\n+            addrport=\"0\",\n+            use_reloader=False,\n+            skip_checks=True,\n+            stdout=output,\n+        )\n+        self.assertIn(\n+            \"Starting development server at http://0.0.0.0:8000/\",\n+            output.getvalue(),\n+        )\n+\n     def test_runner_hostname(self):\n         call_command(self.cmd, addrport=\"localhost:8000\")\n         self.assertServerSettings(\"localhost\", \"8000\")\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..82bc4b4 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -508,7 +508,41 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n \n-# RemovedInDjango50Warning\n+from django.contrib.sitemaps import Sitemap\n+from django.test import TestCase\n+from django.urls import reverse\n+\n+class CallableLastmodNoItemsSitemap(Sitemap):\n+    location = \"/location/\"\n+\n+    def items(self):\n+        return []\n+\n+    def lastmod(self, obj):\n+        return obj.lastmod\n+\n+class SitemapEmptyItemsTest(TestCase):\n+    def setUp(self):\n+        self.sitemap = CallableLastmodNoItemsSitemap()\n+    \n+    def test_callable_lastmod_with_no_items(self):\n+        # Access the sitemap index view URL\n+        response = self.client.get(reverse('django.contrib.sitemaps.views.index', kwargs={'sitemaps': {'callable-lastmod': self.sitemap}}))\n+        \n+        # Ensure there is no ValueError raised by confirming the response is successful\n+        self.assertEqual(response.status_code, 200)\n+        \n+        # Check that the response does not include a Last-Modified header\n+        self.assertNotIn('Last-Modified', response)\n+        \n+        # Check if the XML structure is correct even with an empty items list\n+        expected_content_index = (\n+            '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n'\n+            '<sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\\n'\n+            '<sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\\n'\n+            '</sitemapindex>'\n+        )\n+        self.assertXMLEqual(response.content.decode(), expected_content_index)\n class DeprecatedTests(SitemapTestsBase):\n     @override_settings(\n         TEMPLATES=[\n",
  "django__django-16315": "",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..20aca58 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n import urllib.parse\n@@ -22,6 +23,7 @@ from django.core.exceptions import ValidationError\n from django.core.mail import EmailMultiAlternatives\n from django.forms import forms\n from django.forms.fields import CharField, Field, IntegerField\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n@@ -252,7 +254,73 @@ class UserCreationFormTest(TestDataMixin, TestCase):\n         form = CustomUserCreationForm(data)\n         self.assertTrue(form.is_valid())\n \n-    def test_password_whitespace_not_stripped(self):\n+    def test_custom_form_saves_many_to_many_field(self):\n+        # Custom form for creating user with M2M fields\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        # Create an organization\n+        organization = Organization.objects.create(name=\"organization 1\")\n+\n+        # Form data including the organization\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization.pk)],\n+        }\n+        \n+        # Test form validation and saving\n+        form = CustomUserCreationForm(data)\n+        self.assertTrue(form.is_valid())\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization])\n+\n+    def test_custom_form_saves_many_to_many_with_multiple_orgs(self):\n+        # Custom form for creating user with M2M fields\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        # Create multiple organizations\n+        organization1 = Organization.objects.create(name=\"organization 1\")\n+        organization2 = Organization.objects.create(name=\"organization 2\")\n+\n+        # Form data including multiple organizations\n+        data = {\n+            \"username\": \"testclient2@example.com\",\n+            \"password1\": \"testclient2\",\n+            \"password2\": \"testclient2\",\n+            \"orgs\": [str(organization1.pk), str(organization2.pk)],\n+        }\n+        \n+        # Test form validation and saving\n+        form = CustomUserCreationForm(data)\n+        self.assertTrue(form.is_valid())\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization1, organization2])\n+\n+    def test_custom_form_fails_with_invalid_orgs(self):\n+        # Custom form for creating user with M2M fields\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        # Invalid form data with non-existent organization\n+        data = {\n+            \"username\": \"testclient3@example.com\",\n+            \"password1\": \"testclient3\",\n+            \"password2\": \"testclient3\",\n+            \"orgs\": [\"999\"],  # Non-existent org\n+        }\n+        \n+        # Test form validation failure\n+        form = CustomUserCreationForm(data)\n+        self.assertFalse(form.is_valid())\n         data = {\n             \"username\": \"testuser\",\n             \"password1\": \"   testpassword   \",\n",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..07c8674 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.test import TestCase\n@@ -7,6 +8,8 @@ from django.utils.timesince import timesince, timeuntil\n from django.utils.translation import npgettext_lazy\n \n \n+from django.test.utils import override_settings, requires_tz_support\n+\n class TimesinceTests(TestCase):\n     def setUp(self):\n         self.t = datetime.datetime(2007, 8, 14, 13, 46, 0)\n@@ -236,6 +239,30 @@ class TimesinceTests(TestCase):\n             with self.subTest():\n                 self.assertEqual(timesince(t, value), expected)\n \n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_timesince_with_tz_aware_datetime(self):\n+        now = timezone.now()\n+        # A datetime object 1 month and 1 day ago\n+        past = now - datetime.timedelta(days=32)\n+        self.assertEqual(timesince(past), \"1\\xa0month, 1\\xa0day\")\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_timesince_with_exactly_one_month(self):\n+        now = timezone.now()\n+        # A datetime object exactly 1 month ago\n+        past = now - datetime.timedelta(days=31)\n+        self.assertEqual(timesince(past), \"1\\xa0month\")\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_timesince_with_more_than_a_month_and_tz(self):\n+        now = timezone.now()\n+        # A datetime object 2 months ago\n+        past = now - datetime.timedelta(days=62)\n+        self.assertEqual(timesince(past), \"2\\xa0months\")\n+\n     def test_depth_invalid(self):\n         msg = \"depth must be greater than 0.\"\n         with self.assertRaisesMessage(ValueError, msg):\n",
  "django__django-16454": "",
  "django__django-16485": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 1623d39..344eba5 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -104,6 +104,18 @@ class FunctionTests(SimpleTestCase):\n             # Invalid suffix.\n             self.assertEqual(floatformat(66666.666, \"u2\"), \"66666.666\")\n \n+    def test_floatformat_issue_zero_string(self):\n+        self.assertEqual(floatformat(\"0.00\", 0), \"0\")\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), 0), \"0\")\n+\n+    def test_floatformat_additional_cases(self):\n+        self.assertEqual(floatformat(\"0.00000\", 2), \"0.00\")\n+        self.assertEqual(floatformat(Decimal(\"0.00000\"), 2), \"0.00\")\n+        self.assertEqual(floatformat(\"0.001\", 3), \"0.001\")\n+        self.assertEqual(floatformat(Decimal(\"0.001\"), 3), \"0.001\")\n+        self.assertEqual(floatformat(\"0.001\", -3), \"0.001\")\n+        self.assertEqual(floatformat(Decimal(\"0.001\"), -3), \"0.001\")\n+\n     def test_zero_values(self):\n         self.assertEqual(floatformat(0, 6), \"0.000000\")\n         self.assertEqual(floatformat(0, 7), \"0.0000000\")\n",
  "django__django-16493": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex 20567e7..c2b792e 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -1018,6 +1018,15 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         storage = kwargs[\"storage\"]\n         self.assertIs(storage, callable_storage)\n \n+    def test_deconstruction_storage_callable_default(self):\n+        \"\"\"\n+        A callable that returns default_storage is not omitted when\n+        deconstructing.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"storage_callable_default\").deconstruct()\n+        self.assertIs(kwargs[\"storage\"], callable_default_storage)\n+\n \n # Tests for a race condition on file saving (#4948).\n # This is written in such a way that it'll always pass on platforms\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..571c7df 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,7 +1,10 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n from django.contrib.admin.templatetags.admin_list import date_hierarchy\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n from django.contrib.admin.templatetags.admin_modify import submit_row\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n@@ -16,7 +19,40 @@ from .tests import AdminViewBasicTestCase\n class AdminTemplateTagsTest(AdminViewBasicTestCase):\n     request_factory = RequestFactory()\n \n-    def test_submit_row(self):\n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        \"\"\"\n+        Test that the 'show_save_as_new' button is only shown when the user\n+        has both add and change permissions.\n+        \"\"\"\n+        # User with only change permission\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        # User with both add and change permissions\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n         \"\"\"\n         submit_row template tag should pass whole context.\n         \"\"\"\n",
  "django__django-16560": "",
  "django__django-16569": "",
  "django__django-16595": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3979e76..560f907 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -43,6 +43,28 @@ class OptimizerTests(SimpleTestCase):\n     def assertDoesNotOptimize(self, operations, **kwargs):\n         self.assertOptimizesTo(operations, operations, **kwargs)\n \n+    def test_alter_alter_field(self):\n+        # Test that multiple AlterField operations on the same field are reduced to the last one.\n+        operations = [\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=256, null=True)),\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True)),\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\")),\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\", default=None)),\n+        ]\n+        expected = [\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\", default=None)),\n+        ]\n+        self.assertOptimizesTo(operations, expected)\n+\n+    def test_alter_field_different_fields(self):\n+        # Test that AlterField operations on different fields are not reduced.\n+        operations = [\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=256, null=True)),\n+            migrations.AlterField(\"book\", \"author\", models.CharField(max_length=128, null=True)),\n+        ]\n+        # Expect no optimization as fields are different\n+        self.assertDoesNotOptimize(operations)\n+\n     def test_none_app_label(self):\n         optimizer = MigrationOptimizer()\n         with self.assertRaisesMessage(TypeError, \"app_label must be a str\"):\n",
  "django__django-16612": "",
  "django__django-16642": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 499356e..4ec37e6 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -256,6 +256,16 @@ class FileResponseTests(SimpleTestCase):\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n         )\n+        test_tuples = (\n+            (\".tar.br\", \"application/x-brotli\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n+        )\n+        for extension, mimetype in test_tuples:\n+            with self.subTest(ext=extension):\n+                with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n+                    response = FileResponse(tmp)\n+                self.assertEqual(response.headers[\"Content-Type\"], mimetype)\n+                self.assertFalse(response.has_header(\"Content-Encoding\"))\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n                 with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n",
  "django__django-16661": "diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py\nindex 8cb88da..0c541c2 100644\n--- a/tests/modeladmin/tests.py\n+++ b/tests/modeladmin/tests.py\n@@ -154,6 +154,49 @@ class ModelAdminTests(TestCase):\n             ma.lookup_allowed(\"employee__department__code\", \"test_value\"), True\n         )\n \n+    @isolate_apps(\"modeladmin\")\n+    def test_lookup_allowed_foreign_primary_extended(self):\n+        class Country(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class Place(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+\n+        class Restaurant(models.Model):\n+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)\n+\n+        class Waiter(models.Model):\n+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n+\n+        class WaiterAdmin(ModelAdmin):\n+            list_filter = [\n+                \"restaurant__place__country\",\n+                \"restaurant__place__country__name\",\n+            ]\n+\n+        ma = WaiterAdmin(Waiter, self.site)\n+        # Basic check from the original patch\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country\", \"1\"), True)\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__id__exact\", \"1\"), True\n+        )\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__name\", \"test_value\"), True\n+        )\n+        # Additional checks for extended functionality\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__name__exact\", \"test_value\"), True\n+        )\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__name__iexact\", \"test_value\"), True\n+        )\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__name__contains\", \"test_value\"), True\n+        )\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__name__icontains\", \"test_value\"), True\n+        )\n+\n     def test_field_arguments(self):\n         # If fields is specified, fieldsets_add and fieldsets_change should\n         # just stick the fields into a formsets structure and return it.\n",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..55b79d0 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -922,7 +922,30 @@ class WriterTests(SimpleTestCase):\n             output,\n         )\n \n-    def test_migration_file_header_comments(self):\n+    def test_multiple_imports_ordering(self):\n+        \"\"\"\n+        Test ordering of multiple imports to ensure they're sorted correctly.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield2\",\n+                        models.FloatField(default=time.time),\n+                    ),\n+                    migrations.RunPython(lambda apps, schema_editor: None),\n+                ]\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        self.assertIn(\n+            \"import datetime\\nimport time\\nfrom django.db import migrations, models\\n\",\n+            output,\n+        )\n         \"\"\"\n         Test comments at top of file.\n         \"\"\"\n",
  "django__django-16801": "diff --git a/tests/model_fields/test_imagefield.py b/tests/model_fields/test_imagefield.py\nindex 9bf7f7d..d0b8111 100644\n--- a/tests/model_fields/test_imagefield.py\n+++ b/tests/model_fields/test_imagefield.py\n@@ -328,6 +328,25 @@ class ImageFieldNoDimensionsTests(ImageFieldTwoDimensionsTests):\n \n     PersonModel = Person\n \n+    def test_post_init_not_connected(self):\n+        person_model_id = id(self.PersonModel)\n+        self.assertNotIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id), *_ in signals.post_init.receivers],\n+        )\n+\n+    def test_noop_update_dimension_fields(self):\n+        \"\"\"\n+        Test that update_dimension_fields is a noop when width_field and height_field\n+        are not set, ensuring no unnecessary recalculations are performed.\n+        \"\"\"\n+        instance = self.PersonModel()\n+        # Mock the update_dimension_fields to ensure it doesn't perform any operations\n+        with mock.patch.object(instance._meta.get_field('mugshot'), 'update_dimension_fields') as mock_update:\n+            instance.mugshot.field.update_dimension_fields(instance)\n+            mock_update.assert_called_once_with(instance)\n+            mock_update.return_value = None\n+\n \n @skipIf(Image is None, \"Pillow is required to test ImageField\")\n class ImageFieldOneDimensionTests(ImageFieldTwoDimensionsTests):\n",
  "django__django-16819": "",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..c54cdef 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -798,8 +798,9 @@ class SystemChecksTestCase(SimpleTestCase):\n         errors = SongAdmin(Song, AdminSite()).check()\n         expected = [\n             checks.Error(\n-                \"The value of 'readonly_fields[1]' is not a callable, an attribute \"\n-                \"of 'SongAdmin', or an attribute of 'admin_checks.Song'.\",\n+                \"The value of 'readonly_fields[1]' refers to 'nonexistent', which is \"\n+                \"not a callable, an attribute of 'SongAdmin', or an attribute of \"\n+                \"'admin_checks.Song'.\",\n                 obj=SongAdmin,\n                 id=\"admin.E035\",\n             )\n@@ -814,8 +815,9 @@ class SystemChecksTestCase(SimpleTestCase):\n         errors = CityInline(State, AdminSite()).check()\n         expected = [\n             checks.Error(\n-                \"The value of 'readonly_fields[0]' is not a callable, an attribute \"\n-                \"of 'CityInline', or an attribute of 'admin_checks.City'.\",\n+                \"The value of 'readonly_fields[0]' refers to 'i_dont_exist', which is \"\n+                \"not a callable, an attribute of 'CityInline', or an attribute of \"\n+                \"'admin_checks.City'.\",\n                 obj=CityInline,\n                 id=\"admin.E035\",\n             )\n",
  "django__django-16901": "",
  "django__django-17029": "diff --git a/tests/apps/tests.py b/tests/apps/tests.py\nindex f7c2c67..f4900dc 100644\n--- a/tests/apps/tests.py\n+++ b/tests/apps/tests.py\n@@ -139,6 +139,24 @@ class AppsTests(SimpleTestCase):\n         self.assertIsInstance(config, TwoConfig)\n \n     @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n+    def test_clear_cache_swappable_settings(self):\n+        \"\"\"\n+        Test that apps.clear_cache() also clears the cache for\n+        get_swappable_settings_name.\n+        \"\"\"\n+        # Set cache by calling the method\n+        self.assertIsNone(apps.get_swappable_settings_name(\"admin.LogEntry\"))\n+        \n+        # Check if the cache is set\n+        cache_info = apps.get_swappable_settings_name.cache_info()\n+        self.assertGreater(cache_info.currsize, 0, \"Cache should be set\")\n+\n+        # Clear cache\n+        apps.clear_cache()\n+\n+        # Check if the cache is cleared\n+        cache_info = apps.get_swappable_settings_name.cache_info()\n+        self.assertEqual(cache_info.currsize, 0, \"Cache should be cleared\")\n     def test_get_app_configs(self):\n         \"\"\"\n         Tests apps.get_app_configs().\n@@ -149,6 +167,24 @@ class AppsTests(SimpleTestCase):\n         )\n \n     @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n+    def test_clear_cache_swappable_settings(self):\n+        \"\"\"\n+        Test that apps.clear_cache() also clears the cache for\n+        get_swappable_settings_name.\n+        \"\"\"\n+        # Set cache by calling the method\n+        self.assertIsNone(apps.get_swappable_settings_name(\"admin.LogEntry\"))\n+        \n+        # Check if the cache is set\n+        cache_info = apps.get_swappable_settings_name.cache_info()\n+        self.assertGreater(cache_info.currsize, 0, \"Cache should be set\")\n+\n+        # Clear cache\n+        apps.clear_cache()\n+\n+        # Check if the cache is cleared\n+        cache_info = apps.get_swappable_settings_name.cache_info()\n+        self.assertEqual(cache_info.currsize, 0, \"Cache should be cleared\")\n     def test_get_app_config(self):\n         \"\"\"\n         Tests apps.get_app_config().\n@@ -167,6 +203,24 @@ class AppsTests(SimpleTestCase):\n             apps.get_app_config(\"django.contrib.auth\")\n \n     @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n+    def test_clear_cache_swappable_settings(self):\n+        \"\"\"\n+        Test that apps.clear_cache() also clears the cache for\n+        get_swappable_settings_name.\n+        \"\"\"\n+        # Set cache by calling the method\n+        self.assertIsNone(apps.get_swappable_settings_name(\"admin.LogEntry\"))\n+        \n+        # Check if the cache is set\n+        cache_info = apps.get_swappable_settings_name.cache_info()\n+        self.assertGreater(cache_info.currsize, 0, \"Cache should be set\")\n+\n+        # Clear cache\n+        apps.clear_cache()\n+\n+        # Check if the cache is cleared\n+        cache_info = apps.get_swappable_settings_name.cache_info()\n+        self.assertEqual(cache_info.currsize, 0, \"Cache should be cleared\")\n     def test_is_installed(self):\n         \"\"\"\n         Tests apps.is_installed().\n@@ -177,6 +231,24 @@ class AppsTests(SimpleTestCase):\n         self.assertIs(apps.is_installed(\"django.contrib.admindocs\"), False)\n \n     @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n+    def test_clear_cache_swappable_settings(self):\n+        \"\"\"\n+        Test that apps.clear_cache() also clears the cache for\n+        get_swappable_settings_name.\n+        \"\"\"\n+        # Set cache by calling the method\n+        self.assertIsNone(apps.get_swappable_settings_name(\"admin.LogEntry\"))\n+        \n+        # Check if the cache is set\n+        cache_info = apps.get_swappable_settings_name.cache_info()\n+        self.assertGreater(cache_info.currsize, 0, \"Cache should be set\")\n+\n+        # Clear cache\n+        apps.clear_cache()\n+\n+        # Check if the cache is cleared\n+        cache_info = apps.get_swappable_settings_name.cache_info()\n+        self.assertEqual(cache_info.currsize, 0, \"Cache should be cleared\")\n     def test_get_model(self):\n         \"\"\"\n         Tests apps.get_model().\n",
  "django__django-17084": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1e0d80c..7e84388 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -29,6 +29,9 @@ from django.db.models import (\n     Variance,\n     When,\n )\n+from django.db.models import F, Window, Avg, Count\n+from django.db.models.functions import Coalesce\n+\n from django.db.models.expressions import Func, RawSQL\n from django.db.models.functions import (\n     Cast,\n@@ -2206,4 +2209,33 @@ class AggregateAnnotationPruningTests(TestCase):\n             )\n         sql = ctx.captured_queries[0][\"sql\"].lower()\n         self.assertEqual(sql.count(\"select\"), 3, \"Subquery wrapping required\")\n+\n+    @skipUnlessDBFeature(\"supports_over_clause\")\n+    def test_aggregate_over_window_function_should_fail(self):\n+        # Setup query that should reproduce the issue\n+        queryset = Author.objects.annotate(\n+            cumul_books=Coalesce(Window(Sum(\"total_books\"), order_by=F(\"id\").asc()), 0.0)\n+        )\n+        with self.assertRaises(psycopg2.errors.GroupingError):\n+            queryset.aggregate(\n+                total_books=Sum(\"total_books\"),\n+                cumul_books_total=Sum(\"cumul_books\"),\n+            )\n+\n+    @skipUnlessDBFeature(\"supports_over_clause\")\n+    def test_aggregate_over_window_function_fixed(self):\n+        # Assuming the issue is fixed in Django\n+        queryset = Author.objects.annotate(\n+            cumul_books=Coalesce(Window(Sum(\"total_books\"), order_by=F(\"id\").asc()), 0.0)\n+        )\n+        with self.assertNumQueries(1) as ctx:\n+            aggregate = queryset.aggregate(\n+                total_books=Sum(\"total_books\"),\n+                cumul_books_total=Sum(\"cumul_books\"),\n+            )\n+        sql = ctx.captured_queries[0][\"sql\"].lower()\n+        # Check for subquery wrapping as part of the fix\n+        self.assertGreaterEqual(sql.count(\"select\"), 2, \"Subquery wrapping required\")\n+        # Check the expected result structure\n+        self.assertIsInstance(aggregate, dict)\n         self.assertEqual(aggregate, {\"sum_total_books\": 3})\n",
  "django__django-17087": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex a812969..68eb85e 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -535,7 +535,28 @@ class WriterTests(SimpleTestCase):\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(string, \"models.FilePathField(path=%r)\" % path_like.path)\n \n-    def test_serialize_functions(self):\n+    def test_serialize_nested_class_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\n+            \"default=migrations.test_writer.WriterTests.test_serialize_nested_class_method_as_default.<locals>.Profile.Capability.default\",\n+            string\n+        )\n         with self.assertRaisesMessage(ValueError, \"Cannot serialize function: lambda\"):\n             self.assertSerializedEqual(lambda x: 42)\n         self.assertSerializedEqual(models.SET_NULL)\n@@ -1032,4 +1053,4 @@ class WriterTests(SimpleTestCase):\n         with self.assertRaisesMessage(\n             ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"\n         ):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "django__django-7530": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex a74680b..35cab1e 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -641,7 +641,31 @@ class MakeMigrationsTests(MigrationTestBase):\n                 allow_migrate.assert_called_with('other', 'migrations', model_name='UnicodeModel')\n                 self.assertEqual(ensure_schema.call_count, 4)\n \n-    def test_failing_migration(self):\n+    def test_allow_migrate_called_with_correct_model_per_app(self):\n+        \"\"\"\n+        Test that allow_migrate is called with the correct (app_label, model_name)\n+        pairs for each app to ensure proper database routing logic.\n+        \"\"\"\n+        with self.settings(DATABASE_ROUTERS=['migrations.routers.TestRouter']):\n+            with mock.patch('migrations.routers.TestRouter.allow_migrate') as allow_migrate:\n+                # Setup the models for each application\n+                apps.register_model('migrations', UnicodeModel)\n+                apps.register_model('migrations2', AnotherModel)\n+\n+                # Call makemigrations for both apps\n+                call_command('makemigrations', 'migrations', 'migrations2', verbosity=0)\n+\n+                # Verify that allow_migrate is called with the correct models for each app\n+                allow_migrate.assert_any_call('default', 'migrations', model_name='UnicodeModel')\n+                allow_migrate.assert_any_call('default', 'migrations2', model_name='AnotherModel')\n+\n+                # Ensure no incorrect app_label, model_name combinations are made\n+                for mock_call in allow_migrate.mock_calls:\n+                    _, call_args, call_kwargs = mock_call\n+                    connection_alias, app_label = call_args\n+                    model_name = call_kwargs['model_name']\n+                    # Check that the model belongs to the specified app_label\n+                    self.assertIn(model_name, [m.__name__ for m in apps.get_app_config(app_label).get_models()])\n         # If a migration fails to serialize, it shouldn't generate an empty file. #21280\n         apps.register_model('migrations', UnserializableModel)\n \n",
  "django__django-9296": "diff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\nindex b9b5fbc..dc5ba87 100644\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -298,6 +298,10 @@ class PaginationTests(SimpleTestCase):\n             paginator.get_page(1)\n \n \n+from django.core.paginator import Paginator, EmptyPage\n+from django.test import TestCase\n+from datetime import datetime\n+\n class ModelPaginationTests(TestCase):\n     \"\"\"\n     Test pagination with Django model instances\n@@ -309,6 +313,39 @@ class ModelPaginationTests(TestCase):\n             a = Article(headline='Article %s' % x, pub_date=datetime(2005, 7, 29))\n             a.save()\n \n+    def test_paginator_iteration(self):\n+        paginator = Paginator([1, 2, 3], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2], [3]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+\n+    def test_paginator_empty_list(self):\n+        \"\"\"Test paginator iteration with an empty list.\"\"\"\n+        paginator = Paginator([], 2)\n+        page_iterator = iter(paginator)\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_paginator_single_page(self):\n+        \"\"\"Test paginator iteration with a list that fits within a single page.\"\"\"\n+        paginator = Paginator([1], 2)\n+        page_iterator = iter(paginator)\n+        with self.subTest(page=1):\n+            self.assertEqual([1], list(next(page_iterator)))\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_paginator_multiple_full_pages(self):\n+        \"\"\"Test paginator iteration with a list that spans multiple full pages.\"\"\"\n+        paginator = Paginator([1, 2, 3, 4], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2], [3, 4]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n     def test_first_page(self):\n         paginator = Paginator(Article.objects.order_by('id'), 5)\n         p = paginator.page(1)\n",
  "matplotlib__matplotlib-13989": "",
  "matplotlib__matplotlib-14623": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c9ad946..667a356 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -919,6 +919,19 @@ def test_hexbin_log():\n \n \n def test_inverted_limits():\n+    # Test inverting nonlinear axes using set_ylim on log scale\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(10, 1)\n+    assert ax.get_ylim() == (10, 1)\n+    plt.close()\n+    \n+    # Additional test for inverting x-axis using log scale\n+    fig, ax = plt.subplots()\n+    ax.set_xscale(\"log\")\n+    ax.set_xlim(10, 1)\n+    assert ax.get_xlim() == (10, 1)\n+    plt.close()\n     # Test gh:1553\n     # Calling invert_xaxis prior to plotting should not disable autoscaling\n     # while still maintaining the inverted direction\n",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..2238f1c 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6961,7 +6961,30 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n \n-def test_shared_axes_retick():\n+from matplotlib.testing.decorators import check_figures_equal\n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear_ticks(fig_test, fig_ref):\n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    axs_ref = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_ref.flat:\n+        ax.plot(x, y)\n+\n+    axs_test = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_test.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n+\n+    # Ensure that after ax.clear(), ticks and labels are consistent with reference\n+    for ax_test, ax_ref in zip(axs_test.flat, axs_ref.flat):\n+        assert len(ax_test.get_xticklabels()) == len(ax_ref.get_xticklabels()), \\\n+            \"Mismatch in number of x tick labels after clear\"\n+        assert len(ax_test.get_yticklabels()) == len(ax_ref.get_yticklabels()), \\\n+            \"Mismatch in number of y tick labels after clear\"\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n \n     for ax in axs.flat:\n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "diff --git a/lib/matplotlib/tests/test_category.py b/lib/matplotlib/tests/test_category.py\nindex 40c4dcf..8a9af95 100644\n--- a/lib/matplotlib/tests/test_category.py\n+++ b/lib/matplotlib/tests/test_category.py\n@@ -311,4 +311,40 @@ def test_hist():\n     fig, ax = plt.subplots()\n     n, bins, patches = ax.hist(['a', 'b', 'a', 'c', 'ff'])\n     assert n.shape == (10,)\n-    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n+\n+def test_no_deprecation_on_empty_data():\n+    \"\"\"\n+    Smoke test to check that no deprecation warning is emitted when empty data \n+    is used with categorical units. See #22640.\n+    \"\"\"\n+    import matplotlib.pyplot as plt\n+    import warnings\n+\n+    f, ax = plt.subplots()\n+    ax.xaxis.update_units([\"a\", \"b\"])\n+\n+    # Check if any warning is raised\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        ax.plot([], [])\n+        # Verify no warnings of any type were raised\n+        assert len(w) == 0\n+\n+def test_no_deprecation_on_mixed_data():\n+    \"\"\"\n+    Test to check that no deprecation warning is emitted when mixed numeric \n+    and categorical data is used.\n+    \"\"\"\n+    import matplotlib.pyplot as plt\n+    import warnings\n+\n+    f, ax = plt.subplots()\n+    ax.xaxis.update_units([\"a\", \"b\", 1, 2])\n+\n+    # Check if any warning is raised\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        ax.plot([1, 2], [\"a\", \"b\"])\n+        # Verify no warnings of any type were raised\n+        assert len(w) == 0\n+    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n",
  "matplotlib__matplotlib-22865": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex 2c28713..db90624 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -919,7 +919,33 @@ def test_proportional_colorbars():\n             fig.colorbar(CS3, spacing=spacings[j], ax=axs[i, j])\n \n \n-def test_negative_boundarynorm():\n+import matplotlib.pyplot as plt\n+import numpy as np\n+import matplotlib.colors as mcolors\n+from matplotlib.colorbar import Colorbar\n+import pytest\n+\n+@pytest.mark.parametrize(\"extend, coloroffset, expected_dividers\", [\n+    ('both', 1, [np.array([[0., 0.], [0., 1.]]),\n+                 np.array([[1., 0.], [1., 1.]]),\n+                 np.array([[2., 0.], [2., 1.]])]),\n+    ('min', 0, [np.array([[0., 0.], [0., 1.]]),\n+                np.array([[1., 0.], [1., 1.]])]),\n+    ('max', 0, [np.array([[1., 0.], [1., 1.]]),\n+                np.array([[2., 0.], [2., 1.]])]),\n+    ('neither', -1, [np.array([[1., 0.], [1., 1.]])])\n+])\n+def test_colorbar_extend_drawedges(extend, coloroffset, expected_dividers):\n+    cmap = plt.get_cmap(\"viridis\")\n+    bounds = np.arange(3)\n+    nb_colors = len(bounds) + coloroffset\n+    colors = cmap(np.linspace(100, 255, nb_colors).astype(int))\n+    cmap, norm = mcolors.from_levels_and_colors(bounds, colors, extend=extend)\n+\n+    plt.figure(figsize=(5, 1))\n+    ax = plt.subplot(111)\n+    cbar = Colorbar(ax, cmap=cmap, norm=norm, orientation='horizontal', drawedges=True)\n+    assert np.all(np.equal(cbar.dividers.get_segments(), expected_dividers))\n     fig, ax = plt.subplots(figsize=(1, 3))\n     cmap = plt.get_cmap(\"viridis\")\n \n",
  "matplotlib__matplotlib-23299": "",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..82d4a12 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -14,6 +14,7 @@ from matplotlib.collections import LineCollection, PolyCollection\n from matplotlib.patches import Circle\n \n import matplotlib.pyplot as plt\n+from matplotlib.testing.decorators import check_figures_equal\n import numpy as np\n \n \n@@ -28,6 +29,16 @@ def test_aspect_equal_error():\n         ax.set_aspect('equal')\n \n \n+@check_figures_equal(extensions=[\"png\"])\n+def test_invisible_axes_3d(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot(111, projection='3d')\n+    ax_test.scatter(1, 1, 1)\n+    ax_test.set_visible(False)\n+\n+    ax_ref = fig_ref.add_subplot(111, projection='3d')\n+    ax_ref.scatter(1, 1, 1)\n+    ax_ref.set_visible(False)\n+\n @mpl3d_image_comparison(['bar3d.png'])\n def test_bar3d():\n     fig = plt.figure()\n",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..25e9d46 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -139,8 +139,52 @@ def test_rotate_rect_draw(fig_test, fig_ref):\n     rect_ref = Rectangle(loc, width, height, angle=angle)\n     ax_ref.add_patch(rect_ref)\n     assert rect_ref.get_angle() == angle\n+from matplotlib.patches import Rectangle\n+from matplotlib.testing.decorators import check_figures_equal\n \n-    # Check that when the angle is updated after adding to an Axes, that the\n+@check_figures_equal(extensions=['png'])\n+def test_dash_offset_patch_draw(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n+\n+    loc = (0.1, 0.1)\n+    width, height = (0.8, 0.8)\n+    rect_ref = Rectangle(loc, width, height, linewidth=3, edgecolor='b',\n+                                                linestyle=(0, [6, 6]))\n+    # fill the line gaps using a linestyle (0, [0, 6, 6, 0]), which is\n+    # equivalent to (6, [6, 6]) but has 0 dash offset\n+    rect_ref2 = Rectangle(loc, width, height, linewidth=3, edgecolor='r',\n+                                            linestyle=(0, [0, 6, 6, 0]))\n+    assert rect_ref.get_linestyle() == (0, [6, 6])\n+    assert rect_ref2.get_linestyle() == (0, [0, 6, 6, 0])\n+\n+    ax_ref.add_patch(rect_ref)\n+    ax_ref.add_patch(rect_ref2)\n+\n+    # Check that the dash offset of the rect is the same if we pass it in the\n+    # init method and if we create two rects with appropriate onoff sequence\n+    # of linestyle.\n+\n+    rect_test = Rectangle(loc, width, height, linewidth=3, edgecolor='b',\n+                                                    linestyle=(0, [6, 6]))\n+    rect_test2 = Rectangle(loc, width, height, linewidth=3, edgecolor='r',\n+                                                    linestyle=(6, [6, 6]))\n+    assert rect_test.get_linestyle() == (0, [6, 6])\n+    assert rect_test2.get_linestyle() == (6, [6, 6])\n+\n+    ax_test.add_patch(rect_test)\n+    ax_test.add_patch(rect_test2)\n+\n+    # Additional test case for different offsets\n+    rect_test3 = Rectangle(loc, width, height, linewidth=3, edgecolor='g',\n+                                                    linestyle=(3, [6, 6]))\n+    rect_ref3 = Rectangle(loc, width, height, linewidth=3, edgecolor='g',\n+                                                linestyle=(3, [6, 6]))\n+    assert rect_test3.get_linestyle() == (3, [6, 6])\n+    assert rect_ref3.get_linestyle() == (3, [6, 6])\n+\n+    ax_test.add_patch(rect_test3)\n+    ax_ref.add_patch(rect_ref3)\n     # patch is marked stale and redrawn in the correct location\n     rect_test = Rectangle(loc, width, height)\n     assert rect_test.get_angle() == 0\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..ccfa9fe 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2866,8 +2866,30 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+from matplotlib.patches import Rectangle\n+import pytest\n+\n+def test_stackplot_color_cycler():\n+    x = np.array([1, 2, 3])\n+    y1 = np.array([1, 2, 3])\n+    y2 = np.array([2, 3, 4])\n+    y3 = np.array([3, 4, 5])\n+    data = np.vstack([y1, y2, y3])\n+    \n+    fig, ax = plt.subplots()\n+    ax.plot(x, y1, color='C0')  # Use color cycler reference\n+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))\n+    \n+    try:\n+        ax.stackplot(x, data, colors=['C2', 'C3', 'C4'])  # Should not raise an error\n+    except ValueError as e:\n+        pytest.fail(f\"stackplot raised an unexpected ValueError: {e}\")\n \n-@image_comparison(['stackplot_test_baseline'], remove_text=True)\n+    # Validate that colors are correctly applied\n+    assert ax.get_lines()[0].get_color() == 'C0', \"Line should have color C0\"\n+    assert ax.patches[0].get_facecolor() == plt.cm.tab10(1), \"Rectangle should have color C1\"\n def test_stackplot_baseline():\n     np.random.seed(0)\n \n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 45f9c04..a38ebec 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -12,6 +12,7 @@ import matplotlib.lines as mlines\n from matplotlib.backend_bases import MouseButton, MouseEvent\n \n from matplotlib.offsetbox import (\n+    HPacker, VPacker, DrawingArea, TextArea, AnchoredOffsetbox,\n     AnchoredOffsetbox, AnnotationBbox, AnchoredText, DrawingArea, OffsetBox,\n     OffsetImage, TextArea, _get_packed_offsets)\n \n",
  "matplotlib__matplotlib-24627": "",
  "matplotlib__matplotlib-24637": "",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..c389b48 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -20,6 +20,18 @@ import matplotlib.scale as mscale\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n \n \n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib import colormaps as mpl_colormaps\n+from numpy.testing import assert_array_equal\n+import pytest\n+\n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.float16, float])\n+def test_index_dtype(dtype):\n+    # We use subtraction in the indexing, so need to verify that uint8 works\n+    cm = mpl_colormaps[\"viridis\"]\n+    assert_array_equal(cm(dtype(0)), cm(0))\n+\n @pytest.mark.parametrize('N, result', [\n     (5, [1, .6, .2, .1, 0]),\n     (2, [1, 0]),\n@@ -30,7 +42,14 @@ def test_create_lookup_table(N, result):\n     assert_array_almost_equal(mcolors._create_lookup_table(N, data), result)\n \n \n-def test_resampled():\n+def test_colormap_out_of_bounds_handling():\n+    cmap = plt.get_cmap(\"viridis\")\n+    \n+    # Check various out-of-bounds scenarios\n+    cmap(np.array([-1, 0, 256, 257], dtype=np.uint8))\n+    cmap(np.array([-1, 0, 256, 257], dtype=int))\n+    cmap(np.array([-1.0, 0.0, 256.0, 257.0], dtype=np.float16))\n+    cmap(np.array([-1.0, 0.0, 256.0, 257.0], dtype=float))\n     \"\"\"\n     GitHub issue #6025 pointed to incorrect ListedColormap.resampled;\n     here we test the method for LinearSegmentedColormap as well.\n",
  "matplotlib__matplotlib-25122": "diff --git a/lib/matplotlib/tests/test_mlab.py b/lib/matplotlib/tests/test_mlab.py\nindex 51d0c35..0c04dcc 100644\n--- a/lib/matplotlib/tests/test_mlab.py\n+++ b/lib/matplotlib/tests/test_mlab.py\n@@ -622,8 +622,32 @@ class TestSpectral:\n         # these should not be almost equal\n         with pytest.raises(AssertionError):\n             assert_allclose(spec_b, spec_c, atol=1e-08)\n-\n-    def test_psd_window_hanning_detrend_linear(self):\n+    def test_psd_window_flattop(self):\n+        # Test using a flattop window with negative values\n+        if self.NFFT_density is None:\n+            return\n+        ydata = np.arange(self.NFFT_density)\n+        windowVals = signal.windows.flattop(self.NFFT_density)\n+        ycontrol = ydata * windowVals\n+        ydatab = np.tile(ydata, (20, 1)).flatten()\n+        ycontrol = np.tile(ycontrol, (20, 1)).flatten()\n+        \n+        spec, fsp = mlab.psd(x=ydatab,\n+                             NFFT=self.NFFT_density,\n+                             Fs=self.Fs,\n+                             noverlap=0,\n+                             sides=self.sides,\n+                             window=windowVals)\n+        spec_c, fsp_c = mlab.psd(x=ycontrol,\n+                                 NFFT=self.NFFT_density,\n+                                 Fs=self.Fs,\n+                                 noverlap=0,\n+                                 sides=self.sides,\n+                                 window=mlab.window_none)\n+        spec_c *= len(ycontrol)/(windowVals**2).sum()\n+        \n+        assert_array_equal(fsp, fsp_c)\n+        assert_allclose(spec*windowVals.sum()**2, spec_c*self.Fs*(windowVals**2).sum(), atol=1e-08)\n         if self.NFFT_density is None:\n             return\n         ydata = np.arange(self.NFFT_density)\n",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..8917528 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,6 +7801,9 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+import matplotlib.pyplot as plt\n+import pytest\n+\n def test_ytickcolor_is_not_yticklabelcolor():\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..fd50b8c 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -89,8 +90,26 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import pickletools\n \n @mpl.style.context(\"default\")\n+def test_pickling_draggable_legend():\n+    fig, ax = plt.subplots()\n+    ax.plot([0, 1, 2], [0, 1, 4], label='quadratic')\n+    leg = ax.legend()\n+    leg.set_draggable(True)\n+    \n+    # Attempt to pickle the figure\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+    \n+    # Ensure no references to non-picklable objects\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+    \n+    loaded_fig = pickle.loads(pkl)\n+    loaded_fig.canvas.draw() # Ensure the figure can be drawn\n+    \n+    plt.close(fig)\n+    plt.close(loaded_fig)\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..6498bfd 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -43,8 +43,32 @@ def test_simple():\n     ax.set_yscale('log')\n     pickle.dump(fig, BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n+def test_pickle_figure_with_aligned_labels():\n+    import matplotlib.pyplot as plt\n+    import pickle\n+    from io import BytesIO\n+\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()\n+\n+    # Attempt to pickle the figure to ensure it works without errors\n+    try:\n+        pickle.dumps(fig)\n+        print(\"Figure pickling successful.\")\n+    except Exception as e:\n+        print(f\"Figure pickling failed with error: {e}\")\n \n-def _generate_complete_test_figure(fig_ref):\n+    plt.close(fig)\n     fig_ref.set_size_inches((10, 6))\n     plt.figure(fig_ref)\n \n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..b8c2a8a 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -991,8 +991,125 @@ def test_hexbin_linear():\n     ax.hexbin(x, y, gridsize=(10, 5), marginals=True,\n               reduce_C_function=np.sum)\n \n+from matplotlib.testing.decorators import check_figures_equal\n+import matplotlib.pyplot as plt\n+import numpy as np\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_behavior_upon_C_parameter(fig_test, fig_ref):\n+    # see: gh:12926\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # without C parameter\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # with C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=[1] * len(X),\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_zero_with_C(fig_test, fig_ref):\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n \n-def test_hexbin_log_clim():\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # Expected behavior: all bins with at least one data point are shown\n+    ax_ref.hexbin(\n+        X, Y,\n+        C=C,\n+        reduce_C_function=np.sum,\n+        mincnt=0,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # with C parameter, mincnt=0\n+    ax_test.hexbin(\n+        X, Y,\n+        C=C,\n+        reduce_C_function=np.sum,\n+        mincnt=0,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_two_with_C(fig_test, fig_ref):\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # Expected behavior: only bins with at least two data points are shown\n+    ax_ref.hexbin(\n+        X, Y,\n+        C=C,\n+        reduce_C_function=np.sum,\n+        mincnt=2,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # with C parameter, mincnt=2\n+    ax_test.hexbin(\n+        X, Y,\n+        C=C,\n+        reduce_C_function=np.sum,\n+        mincnt=2,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n     x, y = np.arange(200).reshape((2, 100))\n     fig, ax = plt.subplots()\n     h = ax.hexbin(x, y, bins='log', vmin=2, vmax=100)\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex 700190c..a6d66d7 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -89,6 +89,49 @@ def test_contour_no_valid_levels():\n     ax.contour(np.ones((9, 9)))\n \n \n+@check_figures_equal(extensions=['png'])\n+def test_set_paths_transforms(fig_test, fig_ref):\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    z = np.array([[0, 1], [1, 2]])\n+    cs_test = ax_test.contour(z)\n+    cs_ref = ax_ref.contour(-z)\n+\n+    # Get paths from cs_ref and set them to cs_test\n+    paths_ref = cs_ref.get_paths()\n+    cs_test.set_paths(paths_ref)\n+\n+    # Now cs_test should display contours similar to cs_ref\n+    assert len(cs_test.collections) == len(cs_ref.collections)\n+    for col_test, col_ref in zip(cs_test.collections, cs_ref.collections):\n+        paths_test = col_test.get_paths()\n+        paths_ref = col_ref.get_paths()\n+        assert len(paths_test) == len(paths_ref)\n+        for path_test, path_ref in zip(paths_test, paths_ref):\n+            assert np.allclose(path_test.vertices, path_ref.vertices)\n+            assert np.array_equal(path_test.codes, path_ref.codes)\n+\n+@check_figures_equal(extensions=['png'])\n+def test_set_paths_with_empty(fig_test, fig_ref):\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    z = np.array([[0, 1], [1, 2]])\n+    cs_test = ax_test.contour(z)\n+    cs_ref = ax_ref.contour(z)\n+\n+    # Set empty paths to cs_test\n+    cs_test.set_paths([])\n+\n+    # cs_test should now have no visible paths\n+    assert len(cs_test.collections) == 0\n+\n+from matplotlib.testing.decorators import check_figures_equal, image_comparison\n+import matplotlib.pyplot as plt\n+import numpy as np\n+from matplotlib.contour import ContourSet\n+\n def test_contour_Nlevels():\n     # A scalar levels arg or kwarg should trigger auto level generation.\n     # https://github.com/matplotlib/matplotlib/issues/11913\n",
  "mwaskom__seaborn-3069": "diff --git a/tests/_core/test_plot.py b/tests/_core/test_plot.py\nindex 3d202bc..44108d0 100644\n--- a/tests/_core/test_plot.py\n+++ b/tests/_core/test_plot.py\n@@ -646,6 +646,62 @@ class TestScaling:\n             p.plot()\n \n \n+import pytest\n+import numpy as np\n+from seaborn import Plot\n+from seaborn._core.scales import Nominal\n+import matplotlib as mpl\n+\n+class TestNominalScale:\n+\n+    def test_nominal_x_axis_tweaks(self):\n+        p = Plot(x=[\"a\", \"b\", \"c\"], y=[1, 2, 3])\n+        ax1 = p.plot()._figure.axes[0]\n+        assert ax1.get_xlim() == (-.5, 2.5)\n+        assert not any(x.get_visible() for x in ax1.xaxis.get_gridlines())\n+\n+        lim = (-1, 2.1)\n+        ax2 = p.limit(x=lim).plot()._figure.axes[0]\n+        assert ax2.get_xlim() == lim\n+\n+    def test_nominal_y_axis_tweaks(self):\n+        p = Plot(x=[1, 2, 3], y=[\"a\", \"b\", \"c\"])\n+        ax1 = p.plot()._figure.axes[0]\n+        assert ax1.get_ylim() == (2.5, -.5)\n+        assert not any(y.get_visible() for y in ax1.yaxis.get_gridlines())\n+\n+        lim = (-1, 2.1)\n+        ax2 = p.limit(y=lim).plot()._figure.axes[0]\n+        assert ax2.get_ylim() == lim\n+\n+    def test_nominal_tick_params(self):\n+        # Ensure tick parameters are set up correctly\n+        p = Plot(x=[\"a\", \"b\", \"c\"], y=[1, 2, 3])\n+        nominal_scale = Nominal()\n+        assert nominal_scale.tick()._tick_params is not None\n+\n+    def test_nominal_label_params(self):\n+        # Ensure label parameters are set up correctly\n+        p = Plot(x=[\"a\", \"b\", \"c\"], y=[1, 2, 3])\n+        nominal_scale = Nominal()\n+        assert nominal_scale.label()._label_params is not None\n+\n+    def test_inverted_y_axis(self):\n+        # Test that y-axis is inverted when using Nominal scale\n+        p = Plot(x=[1, 2, 3], y=[\"a\", \"b\", \"c\"])\n+        ax = p.plot()._figure.axes[0]\n+        assert ax.get_ylim() == (2.5, -.5)\n+\n+    def test_grid_visibility_on_nominal_axis(self):\n+        # Test that grids are not visible on nominal axis\n+        p = Plot(x=[\"a\", \"b\", \"c\"], y=[1, 2, 3])\n+        ax = p.plot()._figure.axes[0]\n+        assert not any(x.get_visible() for x in ax.xaxis.get_gridlines())\n+\n+        p2 = Plot(x=[1, 2, 3], y=[\"a\", \"b\", \"c\"])\n+        ax2 = p2.plot()._figure.axes[0]\n+        assert not any(y.get_visible() for y in ax2.yaxis.get_gridlines())\n+\n class TestPlotting:\n \n     def test_matplotlib_object_creation(self):\n",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..f5be62f 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -244,6 +244,9 @@ def test_default_static_max_age(app):\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n \n+import flask\n+import pytest\n+\n def test_templates_list(test_apps):\n     from blueprintapp import app\n \n",
  "psf__requests-1142": "",
  "psf__requests-1724": "",
  "psf__requests-1766": "",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..40bf5a5 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,6 +81,13 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://.example.com'),\n+            (InvalidURL, 'http://*.example.com'),\n+            (InvalidURL, 'http://example..com'),\n+            (InvalidURL, 'http://example.-com'),\n+            (InvalidURL, 'http://-example.com'),\n+            (InvalidURL, 'http://exam_ple.com'),\n+            (InvalidURL, 'http://example.com:99999'),  # Invalid port number\n         ))\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..c09efac 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2308,8 +2308,26 @@ class TestAsCompatibleData:\n         orig = Variable(dims=(\"x\"), data=array, attrs={\"foo\": \"bar\"})\n         assert isinstance(orig._data, CustomIndexable)\n \n-\n-def test_raise_no_warning_for_nan_in_binary_ops():\n+def test_setitem_with_object_having_values_property():\n+    import numpy as np\n+    from xarray import Variable\n+\n+    # Type with data stored in values attribute\n+    class CustomWithValuesAttr:\n+        def __init__(self, array):\n+            self.values = array\n+\n+    # Create a variable and perform the setitem operation\n+    data_array = np.array([None], dtype=object)\n+    var = Variable(dims=(\"x\"), data=data_array)\n+    custom_obj = CustomWithValuesAttr(np.arange(3))\n+\n+    # Assign the custom object to the Variable\n+    var[{\"x\": 0}] = custom_obj\n+\n+    # Assert that the object is stored correctly without coercion\n+    assert isinstance(var.values[0], CustomWithValuesAttr)\n+    assert np.array_equal(var.values[0].values, np.arange(3))\n     with pytest.warns(None) as record:\n         Variable(\"x\", [1, 2, np.NaN]) > 0\n     assert len(record) == 0\n",
  "pydata__xarray-3095": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex 274cb25..dd50526 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -3480,7 +3480,13 @@ class TestDataArray:\n \n         assert_identical(da['a'], expected_orig)\n \n-    def test_real_and_imag(self):\n+    @pytest.mark.parametrize('deep', [True, False])\n+    def test_copy_unicode_index(self, deep):\n+        # Test that unicode indices are not cast to objects on copy\n+        da = xr.DataArray([1, 2, 3], dims='x', coords={'x': np.array(['foo', 'bar', 'baz'], dtype='<U3')})\n+        da_copy = da.copy(deep=deep)\n+        assert da.x.dtype == da_copy.x.dtype\n+        assert da.x.dtype == '<U3'\n         array = DataArray(1 + 2j)\n         assert_identical(array.real, DataArray(1))\n         assert_identical(array.imag, DataArray(2))\n",
  "pydata__xarray-3151": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 026dec9..a11de19 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -574,6 +574,32 @@ class TestCombineAuto:\n         def test_empty_input(self):\n             assert_identical(Dataset(), combine_by_coords([]))\n \n+    def test_issue_3150_non_monotonic_identical_coords(self):\n+        # Test for issue where non-monotonic but identical coordinates should not raise an error\n+        yCoord = ['a', 'c', 'b']  # non-monotonic coordinate\n+\n+        data1 = np.random.rand(3, 3)\n+        data2 = np.random.rand(4, 3)\n+\n+        ds1 = Dataset(\n+            data_vars=dict(data=(['x', 'y'], data1)),\n+            coords=dict(x=[1, 2, 3], y=yCoord)\n+        )\n+\n+        ds2 = Dataset(\n+            data_vars=dict(data=(['x', 'y'], data2)),\n+            coords=dict(x=[4, 5, 6, 7], y=yCoord)\n+        )\n+\n+        expected_data = np.concatenate([data1, data2], axis=0)\n+        expected = Dataset(\n+            data_vars=dict(data=(['x', 'y'], expected_data)),\n+            coords=dict(x=[1, 2, 3, 4, 5, 6, 7], y=yCoord)\n+        )\n+\n+        actual = combine_by_coords((ds1, ds2))\n+        assert_identical(expected, actual)\n+\n     def test_infer_order_from_coords(self):\n         data = create_test_data()\n         objs = [data.isel(dim2=slice(4, 9)), data.isel(dim2=slice(4))]\n",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..b479906 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2309,6 +2309,21 @@ class TestDataArray:\n                     self.dv.values, np.array(q) * 100, axis=axis\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n+    def test_quantile_keep_attrs(self):\n+        # Create a DataArray with attributes\n+        da = xr.DataArray([0, 0, 1], dims=\"x\", attrs={'units': 'K', 'description': 'temperature'})\n+        quantiles = [0.25, 0.5, 0.75]\n+\n+        for q in quantiles:\n+            # Calculate quantile with keep_attrs=True\n+            result = da.quantile(q, dim='x', keep_attrs=True)\n+            # Assert that attributes are preserved\n+            assert result.attrs == da.attrs\n+\n+            # Calculate quantile with keep_attrs=False\n+            result_no_attrs = da.quantile(q, dim='x', keep_attrs=False)\n+            # Assert that attributes are not preserved\n+            assert result_no_attrs.attrs == {}\n \n     def test_reduce_keep_attrs(self):\n         # Test dropped attrs\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..0558983 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import pytest\n \n@@ -5,6 +6,7 @@ import xarray as xr\n from xarray.core import dtypes, merge\n \n from . import raises_regex\n+from xarray.testing import assert_identical\n from .test_dataset import create_test_data\n \n \n@@ -159,6 +161,22 @@ class TestMergeMethod:\n         with raises_regex(ValueError, \"should be coordinates or not\"):\n             data.merge(data.reset_coords())\n \n+    def test_merge_dataarray(self):\n+        ds = xr.Dataset({'a': 0})\n+        da = xr.DataArray(data=1, name='b')\n+        \n+        # Test if merging Dataset with DataArray using merge method works\n+        expected = xr.merge([ds, da])\n+        actual = ds.merge(da)\n+        assert_identical(expected, actual)\n+\n+        # Test with different data and dimension\n+        ds2 = xr.Dataset({'c': ('x', [1, 2, 3]), 'x': [0, 1, 2]})\n+        da2 = xr.DataArray(data=[4, 5, 6], dims='x', name='d')\n+        expected2 = xr.merge([ds2, da2])\n+        actual2 = ds2.merge(da2)\n+        assert_identical(expected2, actual2)\n+\n     def test_merge_broadcast_equals(self):\n         ds1 = xr.Dataset({\"x\": 0})\n         ds2 = xr.Dataset({\"x\": (\"y\", [0, 0])})\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..4443f50 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -109,7 +109,22 @@ class TestMergeFunction:\n             expected.attrs = expected_attrs\n             assert actual.identical(expected)\n \n-    def test_merge_dicts_simple(self):\n+    def test_merge_attrs_override_copy(self):\n+        ds1 = xr.Dataset(attrs={\"x\": 0})\n+        ds2 = xr.Dataset(attrs={\"x\": 1})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"x\"] = 2\n+        assert ds1.attrs[\"x\"] == 0  # Ensures ds1's attrs remain unchanged\n+        assert ds3.attrs[\"x\"] == 2  # Ensures ds3's attrs changed correctly\n+\n+    def test_merge_attrs_override_independence(self):\n+        ds1 = xr.Dataset(attrs={\"a\": \"b\"})\n+        ds2 = xr.Dataset(attrs={\"a\": \"c\"})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"a\"] = \"d\"\n+        assert ds1.attrs[\"a\"] == \"b\"  # Check ds1 remains unchanged\n+        assert ds2.attrs[\"a\"] == \"c\"  # Check ds2 remains unchanged\n+        assert ds3.attrs[\"a\"] == \"d\"  # Check ds3 reflects the change\n         actual = xr.merge([{\"foo\": 0}, {\"bar\": \"one\"}, {\"baz\": 3.5}])\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n         assert actual.identical(expected)\n",
  "pydata__xarray-4687": "",
  "pydata__xarray-4695": "",
  "pydata__xarray-4966": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex 2dbb0b4..05c4486 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -10,11 +10,56 @@ from xarray.conventions import decode_cf_variable, encode_cf_variable\n \n from . import assert_allclose, assert_equal, assert_identical, requires_dask\n \n-with suppress(ImportError):\n-    import dask.array as da\n-\n+import numpy as np\n+import pytest\n+import xarray as xr\n+from xarray.coding import variables\n \n-def test_CFMaskCoder_decode():\n+@pytest.mark.parametrize(\"signed_dtype, unsigned_dtype\", [\n+    (np.dtype(\"i1\"), np.dtype(\"u1\")),\n+    (np.dtype(\"i2\"), np.dtype(\"u2\")),\n+    (np.dtype(\"i4\"), np.dtype(\"u4\")),\n+    (np.dtype(\"i8\"), np.dtype(\"u8\")),\n+])\n+def test_correct_handling_signed_bytes(signed_dtype, unsigned_dtype):\n+    # Original values as signed\n+    original_signed_values = np.array([-128, -1, 0, 1, 127], dtype=signed_dtype)\n+    \n+    # Encode them as unsigned, using the _Unsigned attribute\n+    encoded = xr.Variable(\n+        (\"x\",), original_signed_values.astype(unsigned_dtype), attrs={\"_Unsigned\": \"false\"}\n+    )\n+    \n+    # Decode using the UnsignedIntegerCoder\n+    coder = variables.UnsignedIntegerCoder()\n+    decoded = coder.decode(encoded)\n+    \n+    # Check that the decoded values match the original signed values\n+    assert decoded.dtype == signed_dtype\n+    np.testing.assert_array_equal(decoded.values, original_signed_values)\n+\n+@pytest.mark.parametrize(\"signed_dtype, unsigned_dtype\", [\n+    (np.dtype(\"i1\"), np.dtype(\"u1\")),\n+    (np.dtype(\"i2\"), np.dtype(\"u2\")),\n+    (np.dtype(\"i4\"), np.dtype(\"u4\")),\n+    (np.dtype(\"i8\"), np.dtype(\"u8\")),\n+])\n+def test_correct_handling_unsigned_bytes(signed_dtype, unsigned_dtype):\n+    # Original values as unsigned\n+    original_unsigned_values = np.array([0, 1, 127, 128, 255], dtype=unsigned_dtype)\n+    \n+    # Encode them as signed, using the _Unsigned attribute\n+    encoded = xr.Variable(\n+        (\"x\",), original_unsigned_values.astype(signed_dtype), attrs={\"_Unsigned\": \"true\"}\n+    )\n+    \n+    # Decode using the UnsignedIntegerCoder\n+    coder = variables.UnsignedIntegerCoder()\n+    decoded = coder.decode(encoded)\n+    \n+    # Check that the decoded values match the original unsigned values\n+    assert decoded.dtype == unsigned_dtype\n+    np.testing.assert_array_equal(decoded.values, original_unsigned_values)\n     original = xr.Variable((\"x\",), [0, -1, 1], {\"_FillValue\": -1})\n     expected = xr.Variable((\"x\",), [0, np.nan, 1])\n     coder = variables.CFMaskCoder()\n",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..4aec7a9 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1919,8 +1919,23 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n+import pytest\n+import xarray as xr\n+import numpy as np\n \n def test_where_attrs() -> None:\n+    # Test for the issue where xr.where with a scalar as the second argument fails with keep_attrs=True\n+    cond = xr.DataArray([True, False, True], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={})\n+    assert_identical(expected, actual)\n+\n+    # Additional test to verify behavior with keep_attrs=False\n+    actual_no_attrs = xr.where(cond, 1, 0, keep_attrs=False)\n+    expected_no_attrs = xr.DataArray([1, 0, 1], dims=\"x\")\n+    assert_identical(expected_no_attrs, actual_no_attrs)\n+\n+    # Test with DataArray inputs for both x and y\n     cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n     x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n     y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n",
  "pydata__xarray-6599": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f1ec005..891a4c7 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -2000,6 +2000,14 @@ def test_where_attrs() -> None:\n             xr.Dataset({\"a\": (\"x\", [1, 2, 3]), \"b\": (\"y\", [3, 4, 5])}),\n             id=\"dataset-dataset\",\n         ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array([1000, 2000, 3000], dtype=\"timedelta64[ns]\"), dims=\"x\"\n+            ),\n+            xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n+            xr.DataArray([1000.0, 2000.0, 3000.0], dims=\"x\"),\n+            id=\"timedelta\",\n+        ),\n         pytest.param(\n             xr.DataArray(pd.date_range(\"1970-01-01\", freq=\"s\", periods=3), dims=\"x\"),\n             xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n",
  "pydata__xarray-6721": "",
  "pydata__xarray-6744": "diff --git a/xarray/tests/test_rolling.py b/xarray/tests/test_rolling.py\nindex 0a9ef75..87f8b91 100644\n--- a/xarray/tests/test_rolling.py\n+++ b/xarray/tests/test_rolling.py\n@@ -49,7 +49,25 @@ class TestDataArrayRolling:\n                     expected.values[expected.values.nonzero()],\n                 )\n \n-    @pytest.mark.parametrize(\"da\", (1,), indirect=True)\n+    @pytest.mark.parametrize(\"da\", (1, 2), indirect=True)\n+    @pytest.mark.parametrize(\"size\", [1, 2, 3, 7])\n+    @pytest.mark.parametrize(\"center\", [True, False])\n+    def test_rolling_manual_iteration(self, da, size, center) -> None:\n+        rolling_obj = da.rolling(time=size, center=center)\n+        rolling_obj_mean = rolling_obj.mean()\n+\n+        manual_means = [\n+            window.mean(\"time\").values\n+            for _, window in rolling_obj\n+        ]\n+\n+        expected_means = rolling_obj_mean.values\n+\n+        np.testing.assert_allclose(\n+            manual_means,\n+            expected_means,\n+            err_msg=f\"Manual iteration does not match rolling.mean() for size={size}, center={center}\"\n+        )\n     def test_rolling_repr(self, da) -> None:\n         rolling_obj = da.rolling(time=7)\n         assert repr(rolling_obj) == \"DataArrayRolling [time->7]\"\n",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "diff --git a/xarray/tests/test_indexes.py b/xarray/tests/test_indexes.py\nindex fa8bd84..c6465ea 100644\n--- a/xarray/tests/test_indexes.py\n+++ b/xarray/tests/test_indexes.py\n@@ -688,12 +688,12 @@ def test_safe_cast_to_index_cftimeindex():\n         assert isinstance(actual, type(expected))\n \n \n-# Test that datetime.datetime objects are never used in a CFTimeIndex\n-@requires_cftime\n-def test_safe_cast_to_index_datetime_datetime():\n-    dates = [datetime(1, 1, day) for day in range(1, 20)]\n+import pytest\n+import numpy as np\n+import xarray as xr\n \n-    expected = pd.Index(dates)\n-    actual = safe_cast_to_index(np.array(dates))\n-    assert_array_equal(expected, actual)\n-    assert isinstance(actual, pd.Index)\n+@pytest.mark.parametrize(\"dtype\", [\"int32\", \"float32\", \"int64\"])\n+def test_stack_dtype_preservation(dtype):\n+    ds = xr.Dataset(coords={'a': np.array([0, 1], dtype=dtype)})\n+    stacked = ds.stack(b=('a',))\n+    assert str(stacked['a'].values.dtype) == dtype\n",
  "pylint-dev__pylint-4970": "diff --git a/tests/checkers/unittest_similar.py b/tests/checkers/unittest_similar.py\nindex 97cd4d0..ef0579e 100644\n--- a/tests/checkers/unittest_similar.py\n+++ b/tests/checkers/unittest_similar.py\n@@ -493,12 +493,22 @@ def test_get_map_data() -> None:\n             sim.append_stream(source_fname, stream)\n         # The map bit, can you tell? ;)\n         data.extend(sim.get_map_data())\n+from io import StringIO\n+from contextlib import redirect_stdout\n+import pytest\n+from pylint.checkers.similar import Run\n \n-    assert len(expected_linelists) == len(data)\n+def test_disable_duplicate_code_check():\n+    # Test that setting min-similarity-lines to 0 disables the duplicate code check\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        Run([\"--duplicates=0\", \"file1.py\", \"file2.py\"])  # Replace with actual test file paths\n+    assert ex.value.code == 0\n+    assert output.getvalue() == \"\"\n     for source_fname, expected_lines, lineset_obj in zip(\n         source_streams, expected_linelists, data\n     ):\n         assert source_fname == lineset_obj.name\n         # There doesn't seem to be a faster way of doing this, yet.\n         lines = (linespec.text for linespec in lineset_obj.stripped_lines)\n-        assert tuple(expected_lines) == tuple(lines)\n+        assert tuple(expected_lines) == tuple(lines)\n",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..37f67ae 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -94,9 +94,19 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n-def test_unknown_py_version(capsys: CaptureFixture) -> None:\n+def test_short_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the -v flag.\"\"\"\n+    Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n+def test_long_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the --verbose flag.\"\"\"\n+    Run([str(EMPTY_MODULE), \"--verbose\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..f8608e2 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,26 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_paths_recursive(self) -> None:\n+        \"\"\"Tests that files in ignored paths are not analyzed when --recursive=y is used.\"\"\"\n+        with _test_sys_path():\n+            # Clean up sys.path for the test environment.\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\"))\n+                self._runtest(\n+                    [\n+                        \"directory\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^directory/ignored_subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7277": "",
  "pytest-dev__pytest-10051": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex 26c4c15..659cf08 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -160,6 +160,9 @@ def logging_during_setup_and_teardown(caplog):\n     assert [x.message for x in caplog.get_records(\"teardown\")] == [\"a_teardown_log\"]\n \n \n+import logging\n+from _pytest.logging import caplog_records_key\n+\n def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardown):\n     assert not caplog.records\n     assert not caplog.get_records(\"call\")\n",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 561df7f..7a638ea 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -1273,6 +1273,33 @@ def test_pdb_teardown_skipped(\n     result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n     assert tracked == []\n \n+def test_pdb_teardown_not_executed_when_skipped(pytester: Pytester, monkeypatch: MonkeyPatch) -> None:\n+    \"\"\"\n+    Ensure tearDown is not called for unittest.TestCase classes with class-level skip.\n+    \"\"\"\n+    tracked = []\n+    monkeypatch.setattr(pytest, \"track_pdb_teardown_skipped\", tracked, raising=False)\n+\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+        import pytest\n+\n+        @unittest.skip(\"skipped class\")\n+        class MyTestCase(unittest.TestCase):\n+            def setUp(self):\n+                pytest.track_pdb_teardown_skipped.append(\"setUp:\" + self.id())\n+\n+            def tearDown(self):\n+                pytest.track_pdb_teardown_skipped.append(\"tearDown:\" + self.id())\n+\n+            def test_1(self):\n+                pass\n+        \"\"\"\n+    )\n+    result = pytester.runpytest_inprocess(\"--pdb\")\n+    result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n+    assert tracked == []\n \n def test_async_support(pytester: Pytester) -> None:\n     pytest.importorskip(\"unittest.async_case\")\n",
  "pytest-dev__pytest-5262": "",
  "pytest-dev__pytest-5631": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex e422b03..106de4f 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -6,6 +6,7 @@ import textwrap\n import py\n \n import pytest\n+import numpy as np\n from _pytest.main import _in_venv\n from _pytest.main import ExitCode\n from _pytest.main import Session\n@@ -85,7 +86,21 @@ class TestCollector:\n         assert len(nodes) == 1\n         assert isinstance(nodes[0], pytest.File)\n \n-    def test_can_skip_class_with_test_attr(self, testdir):\n+    def test_mock_numpy_array_patch(self, testdir):\n+        \"\"\"Test patching with a numpy array to ensure no ValueError occurs during test collection.\"\"\"\n+        testdir.makepyfile(\n+            \"\"\"\n+            from unittest.mock import patch\n+            import numpy as np\n+            import foo_module  # Assume foo_module is the actual module being patched\n+\n+            @patch('foo_module.some_array', new=np.array([1, 2, 3]))\n+            def test_array_patch():\n+                assert True\n+            \"\"\"\n+        )\n+        result = testdir.runpytest()\n+        result.assert_outcomes(passed=1)\n         \"\"\"Assure test class is skipped when using `__test__=False` (See #2007).\"\"\"\n         testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..10f33e8 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -119,8 +119,16 @@ class TestPaste(object):\n \n             monkeypatch.setattr(urllib.request, \"urlopen\", mocked)\n         return calls\n-\n-    def test_create_new_paste(self, pastebin, mocked_urlopen):\n+    def test_create_new_paste_with_text_lexer(self, pastebin, mocked_urlopen):\n+        result = pastebin.create_new_paste(b\"full-paste-contents\")\n+        assert result == \"https://bpaste.net/show/3c0c6750bd\"\n+        assert len(mocked_urlopen) == 1\n+        url, data = mocked_urlopen[0]\n+        assert type(data) is bytes\n+        assert url == \"https://bpaste.net\"\n+        assert \"lexer=text\" in data.decode()  # Updated to check for 'text' lexer\n+        assert \"code=full-paste-contents\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n         result = pastebin.create_new_paste(b\"full-paste-contents\")\n         assert result == \"https://bpaste.net/show/3c0c6750bd\"\n         assert len(mocked_urlopen) == 1\n@@ -130,4 +138,4 @@ class TestPaste(object):\n         assert url == \"https://bpaste.net\"\n         assert \"lexer=%s\" % lexer in data.decode()\n         assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n",
  "pytest-dev__pytest-6202": "",
  "pytest-dev__pytest-7205": "diff --git a/testing/test_setuponly.py b/testing/test_setuponly.py\nindex 8211d39..9ece7e3 100644\n--- a/testing/test_setuponly.py\n+++ b/testing/test_setuponly.py\n@@ -1,3 +1,4 @@\n+\n import pytest\n from _pytest.config import ExitCode\n \n@@ -200,8 +201,21 @@ def test_show_fixtures_with_parameter_ids_function(testdir, mode):\n \n     result.stdout.fnmatch_lines([\"*SETUP    F foobar?FOO?\", \"*SETUP    F foobar?BAR?\"])\n \n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue: BytesWarning when using --setup-show with bytes parameter\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n \n-def test_dynamic_fixture_request(testdir):\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n     p = testdir.makepyfile(\n         \"\"\"\n         import pytest\n",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..56cebea 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -607,6 +607,31 @@ class TestSkip:\n         result = testdir.runpytest(\"-rs\")\n         result.stdout.fnmatch_lines([\"*unconditional skip*\", \"*1 skipped*\"])\n \n+    @pytest.mark.parametrize(\n+        \"test_input,expected\",\n+        [\n+            (\n+                [\"-rs\"],\n+                [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"],\n+            ),\n+            (\n+                [\"-rs\", \"--runxfail\"],\n+                [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"],\n+            ),\n+        ],\n+    )\n+    def test_xfail_run_with_skip_mark(self, testdir, test_input, expected):\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            def test_skip_location() -> None:\n+                assert 0\n+        \"\"\"\n+        )\n+        result = testdir.runpytest(*test_input)\n+        result.stdout.fnmatch_lines(expected)\n+\n     def test_skip_with_reason(self, testdir):\n         testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..ec03d35 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -219,21 +220,30 @@ class TestXFail:\n         assert str(callreport.longrepr) == \"[XPASS(strict)] nope\"\n         assert not hasattr(callreport, \"wasxfail\")\n \n-    def test_xfail_run_anyway(self, testdir):\n-        testdir.makepyfile(\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n             \"\"\"\n             import pytest\n-            @pytest.mark.xfail\n-            def test_func():\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n                 assert 0\n-            def test_func2():\n-                pytest.xfail(\"hello\")\n-        \"\"\"\n+            \"\"\"\n         )\n-        result = testdir.runpytest(\"--runxfail\")\n-        result.stdout.fnmatch_lines(\n-            [\"*def test_func():*\", \"*assert 0*\", \"*1 failed*1 pass*\"]\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n         )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n \n     @pytest.mark.parametrize(\n         \"test_input,expected\",\n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..2972940 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -514,6 +514,17 @@ class TestCaptureFixture:\n         )\n         reprec.assertoutcome(passed=1)\n \n+    @pytest.mark.parametrize(\"newline\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_capfd_preserves_carriage_return(self, capfd, newline):\n+        print(\"test\", end=newline)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(newline)\n+\n+    def test_capfd_includes_carriage_return(self, capfd):\n+        print('Greetings from DOS', end='\\r')\n+        out, err = capfd.readouterr()\n+        assert out.endswith('\\r')\n+\n     def test_capfdbinary(self, testdir):\n         reprec = testdir.inline_runsource(\n             \"\"\"\\\n",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..e556be9 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import pytest\n@@ -50,7 +51,22 @@ def test_change_level_undo(testdir):\n     result.stdout.no_fnmatch_line(\"*log from test2*\")\n \n \n-def test_with_statement(caplog):\n+def test_additional_log_level_restoration(testdir):\n+    \"\"\"Ensure that 'set_level' in one test does not affect others (especially root logger).\"\"\"\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test_set_custom_level(caplog):\n+            caplog.set_level(50)  # Custom log level\n+            assert caplog.handler.level == 50\n+\n+        def test_check_default_level(caplog):\n+            assert caplog.handler.level == 0  # Default log level\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=2)\n     with caplog.at_level(logging.INFO):\n         logger.debug(\"handler DEBUG level\")\n         logger.info(\"handler INFO level\")\n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..c3740a8 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,3 +1,4 @@\n+\n import os\n import pprint\n import sys\n@@ -9,7 +10,7 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n-from _pytest.pytester import Testdir\n+from _pytest.pytester import Testdir, Pytester\n \n \n class TestCollector:\n",
  "pytest-dev__pytest-8399": "",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..12d782d 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -597,7 +597,38 @@ def test_ridgecv_store_cv_values():\n     r.fit(x, y)\n     assert_equal(r.cv_values_.shape, (n_samples, n_responses, n_alphas))\n \n+def test_ridge_classifier_cv_store_cv_values():\n+    from sklearn.linear_model import RidgeClassifierCV\n+    import numpy as np\n \n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-.8, -1.0],\n+                  [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+\n+    n_samples = x.shape[0]\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+    # with len(y.shape) == 1\n+    n_targets = 1\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n+\n+    # with len(y.shape) == 2\n+    y = np.array([[1, 1, 1, -1, -1],\n+                  [1, -1, 1, -1, 1],\n+                  [-1, -1, 1, -1, -1]]).transpose()\n+    n_targets = y.shape[1]\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n+\n+    # Test that an error is raised when store_cv_values is False\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=False)\n+    r.fit(x, y)\n+    assert not hasattr(r, 'cv_values_')\n+    \n def test_ridgecv_sample_weight():\n     rng = np.random.RandomState(0)\n     alphas = (0.1, 1.0, 10.0)\n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..587297e 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -184,7 +184,21 @@ def test_int_overflow_mutual_info_score():\n     assert_all_finite(mutual_info_score(x.ravel(), y.ravel()))\n \n \n-def test_entropy():\n+from sklearn.metrics import fowlkes_mallows_score\n+from sklearn.utils._testing import assert_all_finite\n+\n+def test_int_overflow_fowlkes_mallows_score():\n+    # Test potential overflow in fowlkes_mallows_score\n+    # Construct labels to ensure large contingency matrix\n+    labels_true = np.array([1] * (52632 + 2529) + [2] * (14660 + 793) + [3] * (3271 +\n+                  204) + [4] * (814 + 39) + [5] * (316 + 20))\n+    labels_pred = np.array([0] * 52632 + [1] * 2529 + [0] * 14660 + [1] * 793 +\n+                  [0] * 3271 + [1] * 204 + [0] * 814 + [1] * 39 + [0] * 316 +\n+                  [1] * 20)\n+\n+    # Expect no RuntimeWarning and finite score\n+    score = fowlkes_mallows_score(labels_true.ravel(), labels_pred.ravel())\n+    assert_all_finite(score)\n     ent = entropy([0, 0, 42.])\n     assert_almost_equal(ent, 0.6365141, 5)\n     assert_almost_equal(entropy([]), 1)\n",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..2ac41e4 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -558,8 +558,19 @@ def test_feature_names():\n     for idx, name in enumerate(feature_names):\n         assert_equal(idx, cv.vocabulary_.get(name))\n \n+def test_countvectorizer_with_predefined_vocabulary_get_feature_names():\n+    # Define a fixed vocabulary\n+    vocabulary = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n \n-def test_vectorizer_max_features():\n+    # Initialize CountVectorizer with predefined vocabulary\n+    cv = CountVectorizer(vocabulary=vocabulary)\n+\n+    # Test that get_feature_names does not raise NotFittedError\n+    feature_names = cv.get_feature_names()\n+    assert_array_equal(vocabulary, feature_names)\n+\n+    # Ensure no vocabulary fitting has occurred\n+    assert not hasattr(cv, 'vocabulary_')\n     vec_factories = (\n         CountVectorizer,\n         TfidfVectorizer,\n",
  "scikit-learn__scikit-learn-11310": "diff --git a/sklearn/model_selection/tests/test_search.py b/sklearn/model_selection/tests/test_search.py\nindex 0b1d5f9..8dc7c46 100644\n--- a/sklearn/model_selection/tests/test_search.py\n+++ b/sklearn/model_selection/tests/test_search.py\n@@ -1173,7 +1173,35 @@ def test_search_cv_timing():\n             assert_true(np.all(search.cv_results_[key] < 1))\n \n \n-def test_grid_search_correct_score_results():\n+def test_refit_time_attribute():\n+    # Test to ensure `refit_time_` attribute is added and is of correct type\n+    X, y = sklearn.datasets.load_iris(return_X_y=True)\n+    svc = sklearn.svm.SVC()\n+\n+    # GridSearchCV with refit=True\n+    search = sklearn.model_selection.GridSearchCV(\n+        estimator=svc,\n+        param_grid={'C': [0.1, 1, 10]},\n+        refit=True\n+    )\n+    search.fit(X, y)\n+\n+    assert_true(hasattr(search, \"refit_time_\"), \"The `refit_time_` attribute should exist.\")\n+    assert_true(isinstance(search.refit_time_, float), \"The `refit_time_` should be a float.\")\n+    assert_greater_equal(search.refit_time_, 0, \"The `refit_time_` should be non-negative.\")\n+\n+    # RandomizedSearchCV with refit=True\n+    search = sklearn.model_selection.RandomizedSearchCV(\n+        estimator=svc,\n+        param_distributions={'C': [0.1, 1, 10]},\n+        n_iter=2,\n+        refit=True\n+    )\n+    search.fit(X, y)\n+\n+    assert_true(hasattr(search, \"refit_time_\"), \"The `refit_time_` attribute should exist.\")\n+    assert_true(isinstance(search.refit_time_, float), \"The `refit_time_` should be a float.\")\n+    assert_greater_equal(search.refit_time_, 0, \"The `refit_time_` should be non-negative.\")\n     # test that correct scores are used\n     n_splits = 3\n     clf = LinearSVC(random_state=0)\n",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..0f98c4e 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -491,8 +491,37 @@ def test_logistic_cv():\n     scores = np.asarray(list(lr_cv.scores_.values()))\n     assert_array_equal(scores.shape, (1, 3, 1))\n \n+@pytest.mark.parametrize('scoring', ['neg_log_loss'])\n+def test_logistic_cv_multinomial_score(scoring):\n+    # Test that LogisticRegressionCV uses the correct scoring method when\n+    # using `multi_class='multinomial'`. This ensures multinomial probabilities\n+    # are utilized by the scorer, not OvR.\n \n-def test_multinomial_logistic_regression_string_inputs():\n+    # Generate a simple multiclass dataset\n+    X, y = make_classification(n_samples=100, n_features=20, n_classes=3,\n+                               n_informative=10, n_redundant=5, random_state=42)\n+\n+    # Split the dataset into training and testing parts\n+    train, test = np.arange(80), np.arange(80, 100)\n+\n+    # Initialize the Logistic Regression model with multinomial option\n+    lr = LogisticRegressionCV(cv=3, solver='lbfgs', multi_class='multinomial', scoring=scoring)\n+    lr.fit(X[train], y[train])\n+\n+    # Get the params to use in _log_reg_scoring_path\n+    params = lr.get_params()\n+    del params['Cs']\n+    del params['cv']\n+    del params['scoring']\n+\n+    # Manually calculate scores using _log_reg_scoring_path\n+    scorer = get_scorer(scoring)\n+    calculated_scores = _log_reg_scoring_path(X, y, train, test, Cs=[1.0], scoring=scorer, **params)[2][0]\n+\n+    # Assert that the scores match those of the fitted model's predict_proba output\n+    expected_score = scorer(lr, X[test], y[test])\n+\n+    assert_array_almost_equal(calculated_scores, expected_score)\n     # Test with string labels for LogisticRegression(CV)\n     n_samples, n_features, n_classes = 50, 5, 3\n     X_ref, y = make_classification(n_samples=n_samples, n_features=n_features,\n",
  "scikit-learn__scikit-learn-12585": "diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 4752f9c..4312f9c 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -154,7 +154,31 @@ def test_clone_nan():\n     assert clf.empty is clf2.empty\n \n \n-def test_clone_sparse_matrices():\n+from sklearn.base import BaseEstimator, clone\n+from sklearn.utils.estimator_checks import check_estimator\n+\n+class MyEstimator(BaseEstimator):\n+    def __init__(self, empty=None):\n+        self.empty = empty\n+\n+def test_clone_estimator_types():\n+    # Check that clone works for parameters that are types rather than\n+    # instances\n+    clf = MyEstimator(empty=MyEstimator)\n+    clf2 = clone(clf)\n+\n+    assert clf.empty is clf2.empty\n+\n+def test_clone_with_estimator_classes():\n+    # Check that `clone` can handle estimator class parameters without error\n+    from sklearn.preprocessing import StandardScaler\n+    \n+    # Create an instance with a class as a parameter\n+    estimator = MyEstimator(empty=StandardScaler)\n+    cloned_estimator = clone(estimator)\n+\n+    # Verify that the class parameter is the same in the cloned object\n+    assert cloned_estimator.empty == StandardScaler\n     sparse_matrix_classes = [\n         getattr(sp, name)\n         for name in dir(sp) if name.endswith('_matrix')]\n",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..632ab55 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -18,6 +18,7 @@ from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import TempMemmap\n from sklearn.exceptions import ConvergenceWarning\n from sklearn import linear_model, datasets\n+import numpy as np  # Ensure numpy is imported for generating random test data\n from sklearn.linear_model.least_angle import _lars_path_residues\n \n diabetes = datasets.load_diabetes()\n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..d9b3470 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -480,8 +480,29 @@ def test_shuffle_kfold_stratifiedkfold_reproducibility():\n                 with pytest.raises(AssertionError):\n                     np.testing.assert_array_equal(test_a, test_b)\n \n-\n def test_shuffle_stratifiedkfold():\n+    # Ensure that shuffling is happening when requested, and for proper sample coverage\n+    X_40 = np.ones(40)\n+    y = [0] * 20 + [1] * 20\n+    \n+    # Test different random states produce different splits\n+    kf1 = StratifiedKFold(5, shuffle=True, random_state=0)\n+    kf2 = StratifiedKFold(5, shuffle=True, random_state=1)\n+    test_set1 = sorted([tuple(s[1]) for s in kf1.split(X_40, y)])\n+    test_set2 = sorted([tuple(s[1]) for s in kf2.split(X_40, y)])\n+    assert test_set1 != test_set2\n+\n+    # Test consistent splits when shuffle=False\n+    kf_no_shuffle = StratifiedKFold(5, shuffle=False)\n+    test_sets_no_shuffle = [sorted([tuple(s[1]) for s in kf_no_shuffle.split(X_40, y)]) for _ in range(3)]\n+    assert all(ts == test_sets_no_shuffle[0] for ts in test_sets_no_shuffle)\n+    \n+    # Test shuffling within each class\n+    X = np.arange(20)\n+    y = [0] * 10 + [1] * 10\n+    kf = StratifiedKFold(5, shuffle=True, random_state=42)\n+    for train_index, test_index in kf.split(X, y):\n+        assert len(set(y[test_index])) == 2  # Ensure both classes are in test set\n     # Check that shuffling is happening when requested, and for proper\n     # sample coverage\n     X_40 = np.ones(40)\n",
  "scikit-learn__scikit-learn-13135": "diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py\nindex a18a1c5..aa1e6d0 100644\n--- a/sklearn/preprocessing/tests/test_discretization.py\n+++ b/sklearn/preprocessing/tests/test_discretization.py\n@@ -185,11 +185,11 @@ def test_invalid_strategy_option():\n \n \n @pytest.mark.parametrize(\n-    'strategy, expected_2bins, expected_3bins',\n-    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2]),\n-     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2]),\n-     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2])])\n-def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n+    'strategy, expected_2bins, expected_3bins, expected_5bins',\n+    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2], [0, 0, 1, 1, 4, 4]),\n+     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2], [0, 0, 1, 2, 3, 4]),\n+     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2], [0, 1, 2, 3, 4, 4])])\n+def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins, expected_5bins):\n     X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n \n     # with 2 bins\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..3f3a0c6 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -597,6 +597,14 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_array_equal(Y_pred1, Y_pred2)\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n+\n \n def test_gaussian_mixture_fit():\n     # recover the ground truth\n",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..77f3b12 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -11,6 +12,8 @@ import pytest\n import numpy as np\n \n from sklearn.utils.testing import assert_array_equal\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_raises\n from sklearn.utils.testing import assert_raises_regex\n",
  "scikit-learn__scikit-learn-13779": "",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..4f4d3f5 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -396,6 +396,28 @@ def test_export_text():\n     assert export_text(reg, decimals=1) == expected_report\n     assert export_text(reg, decimals=1, show_weights=True) == expected_report\n \n+    # Test case for issue: IndexError when the tree has only one feature\n+    X_single = [[-2], [-1], [-1], [1], [1], [2]]\n+    y_single = [-1, -1, -1, 1, 1, 1]\n+    clf_single_feature = DecisionTreeClassifier(max_depth=2, random_state=0)\n+    clf_single_feature.fit(X_single, y_single)\n+\n+    expected_report_single = dedent(\"\"\"\n+    |--- feature_0 <= 0.0\n+    |   |--- class: -1\n+    |--- feature_0 >  0.0\n+    |   |--- class: 1\n+    \"\"\").lstrip()\n+    assert export_text(clf_single_feature, decimals=1) == expected_report_single\n+\n+    expected_report_single_named = dedent(\"\"\"\n+    |--- feature <= 0.0\n+    |   |--- class: -1\n+    |--- feature >  0.0\n+    |   |--- class: 1\n+    \"\"\").lstrip()\n+    assert export_text(clf_single_feature, feature_names=['feature'], decimals=1) == expected_report_single_named\n+\n \n def test_plot_tree_entropy(pyplot):\n     # mostly smoke tests\n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..36de06e 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1532,6 +1532,30 @@ def test_LogisticRegressionCV_GridSearchCV_elastic_net_ovr():\n     assert (lrcv.predict(X_test) == gs.predict(X_test)).mean() >= .8\n \n \n+@pytest.mark.parametrize('penalty', ('l2', 'elasticnet'))\n+@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial', 'auto'))\n+def test_LogisticRegressionCV_no_refit_varied_parameters(penalty, multi_class):\n+    # Test LogisticRegressionCV for different penalties and multi_class settings with refit=False\n+\n+    n_classes = 3\n+    n_features = 20\n+    X, y = make_classification(n_samples=200, n_classes=n_classes,\n+                               n_informative=n_classes, n_features=n_features,\n+                               random_state=0)\n+\n+    Cs = np.logspace(-4, 4, 3)\n+    l1_ratios = np.linspace(0, 1, 2) if penalty == 'elasticnet' else None\n+\n+    lrcv = LogisticRegressionCV(penalty=penalty, Cs=Cs, solver='saga',\n+                                l1_ratios=l1_ratios, random_state=0,\n+                                multi_class=multi_class, refit=False)\n+    lrcv.fit(X, y)\n+\n+    assert lrcv.C_.shape == (n_classes,)\n+    if penalty == 'elasticnet':\n+        assert lrcv.l1_ratio_.shape == (n_classes,)\n+    assert lrcv.coef_.shape == (n_classes, n_features)\n+\n @pytest.mark.parametrize('multi_class', ('ovr', 'multinomial'))\n def test_LogisticRegressionCV_no_refit(multi_class):\n     # Test LogisticRegressionCV attribute shapes when refit is False\n",
  "scikit-learn__scikit-learn-14141": "",
  "scikit-learn__scikit-learn-14496": "diff --git a/sklearn/cluster/tests/test_optics.py b/sklearn/cluster/tests/test_optics.py\nindex 6c9dac3..ecf139c 100644\n--- a/sklearn/cluster/tests/test_optics.py\n+++ b/sklearn/cluster/tests/test_optics.py\n@@ -124,8 +124,30 @@ def test_extract_xi():\n                    xi=0.04).fit(X)\n     assert_array_equal(clust.labels_, expected_labels)\n \n+def test_float_min_samples():\n+    # Test to ensure that float `min_samples` is handled correctly\n+    rng = np.random.RandomState(0)\n+    n_points_per_cluster = 5\n+    \n+    # Create some sample data\n+    C1 = [-5, -2] + .8 * rng.randn(n_points_per_cluster, 2)\n+    C2 = [4, -1] + .1 * rng.randn(n_points_per_cluster, 2)\n+    C3 = [1, -2] + .2 * rng.randn(n_points_per_cluster, 2)\n+\n+    X = np.vstack((C1, C2, C3))\n+    expected_labels = np.r_[[0] * 5, [1] * 5, [2] * 5]\n+    X, expected_labels = shuffle(X, expected_labels, random_state=rng)\n+\n+    # Test with float `min_samples`\n+    clust = OPTICS(min_samples=0.1, min_cluster_size=0.08,\n+                   max_eps=20, cluster_method='xi',\n+                   xi=0.4).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n \n-def test_cluster_hierarchy_():\n+    # Ensure that the number of neighbors in NearestNeighbors is an integer\n+    n_samples = X.shape[0]\n+    expected_min_samples = int(round(max(2, 0.1 * n_samples)))\n+    assert clust.min_samples_ == expected_min_samples\n     rng = np.random.RandomState(0)\n     n_points_per_cluster = 100\n     C1 = [0, 0] + 2 * rng.randn(n_points_per_cluster, 2)\n",
  "scikit-learn__scikit-learn-14710": "",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..6aa8d28 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,7 +680,33 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n-def test_sparse_precomputed():\n+from scipy import sparse\n+import numpy as np\n+from sklearn import svm\n+\n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for #14893\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n+def test_sparse_fit_no_error_when_no_support_vectors():\n+    # Test to ensure no ZeroDivisionError occurs when there are no support vectors\n+    X_train = sparse.csr_matrix([[0, 0, 0, 0],\n+                                 [0, 0, 0, 0],\n+                                 [0, 0, 0, 0],\n+                                 [0, 0, 0, 0]])\n+    y_train = np.array([0, 0, 0, 0])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    # Check that the model doesn't crash and handles empty support vectors\n+    assert model.dual_coef_.shape == (1, 0)\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n     try:\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..b04e92d 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -88,6 +88,27 @@ def test_strip_accents():\n     assert strip_accents_unicode(a) == expected\n \n     # check some arabic\n+\n+    # strings that are already decomposed\n+    a = \"o\\u0308\"  # o with diaresis\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # combining marks by themselves\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Multiple combining marks on one character\n+    a = \"o\\u0308\\u0304\"\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Test original issue scenario\n+    # This string contains two code points, \"LATIN SMALL LETTER N\" followed by \"COMBINING TILDE\"\n+    s2 = chr(110) + chr(771)\n+    expected = \"n\"\n+    assert strip_accents_unicode(s2) == expected\n     a = '\\u0625'  # alef with a hamza below: \u0625\n     expected = '\\u0627'  # simple alef: \u0627\n     assert strip_accents_unicode(a) == expected\n",
  "scikit-learn__scikit-learn-25102": "",
  "scikit-learn__scikit-learn-25232": "",
  "scikit-learn__scikit-learn-25931": "",
  "scikit-learn__scikit-learn-25973": "diff --git a/sklearn/feature_selection/tests/test_sequential.py b/sklearn/feature_selection/tests/test_sequential.py\nindex 42e1fbb..b3477cf 100644\n--- a/sklearn/feature_selection/tests/test_sequential.py\n+++ b/sklearn/feature_selection/tests/test_sequential.py\n@@ -313,4 +313,33 @@ def test_backward_neg_tol():\n     new_score = lr.fit(Xr, y).score(Xr, y)\n \n     assert 0 < sfs.get_support().sum() < X.shape[1]\n-    assert new_score < initial_score\n+    assert new_score < initial_score\n+\n+def test_sequential_feature_selector_with_cv_generator():\n+    \"\"\"Test if SequentialFeatureSelector works with a generator for cv.\"\"\"\n+    from sklearn.feature_selection import SequentialFeatureSelector\n+    from sklearn.datasets import make_classification\n+    from sklearn.model_selection import LeaveOneGroupOut\n+    from sklearn.neighbors import KNeighborsClassifier\n+    import numpy as np\n+    \n+    # Create a synthetic dataset\n+    X, y = make_classification(random_state=0)\n+    \n+    # Define groups for LeaveOneGroupOut cross-validation\n+    groups = np.zeros_like(y, dtype=int)\n+    groups[y.size // 2:] = 1\n+    \n+    # Initialize LeaveOneGroupOut and create splits\n+    cv = LeaveOneGroupOut()\n+    splits = cv.split(X, y, groups=groups)\n+    \n+    # Initialize KNeighborsClassifier\n+    knc = KNeighborsClassifier(n_neighbors=5)\n+    \n+    # Initialize and fit SequentialFeatureSelector with generator cv\n+    sfs = SequentialFeatureSelector(knc, n_features_to_select=5, cv=splits)\n+    sfs.fit(X, y)\n+\n+    # Assert that the fit was successful by checking the number of selected features\n+    assert sfs.get_support().sum() == 5\n",
  "scikit-learn__scikit-learn-26323": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex b52e888..0d28ee7 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -23,6 +23,10 @@ from sklearn.exceptions import NotFittedError\n from sklearn.preprocessing import FunctionTransformer\n from sklearn.preprocessing import StandardScaler, Normalizer, OneHotEncoder\n \n+from sklearn.feature_selection import VarianceThreshold\n+import pandas as pd\n+import pytest\n+import numpy as np\n \n class Trans(TransformerMixin, BaseEstimator):\n     def fit(self, X, y=None):\n",
  "scikit-learn__scikit-learn-9288": "diff --git a/sklearn/cluster/tests/test_k_means.py b/sklearn/cluster/tests/test_k_means.py\nindex abeeff0..4231ef0 100644\n--- a/sklearn/cluster/tests/test_k_means.py\n+++ b/sklearn/cluster/tests/test_k_means.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for K-means\"\"\"\n import sys\n \n@@ -944,8 +945,25 @@ def test_k_means_empty_cluster_relocated():\n     assert len(set(km.labels_)) == 2\n     assert_allclose(km.cluster_centers_, [[-1], [1]])\n \n-\n-def test_minibatch_kmeans_partial_fit_int_data():\n+def test_result_of_kmeans_equal_in_diff_n_jobs():\n+    # This test checks that KMeans results are consistent for different n_jobs\n+    from sklearn.cluster import KMeans\n+    from sklearn.datasets import make_blobs\n+    import numpy as np\n+\n+    # Generate synthetic data\n+    X, _ = make_blobs(n_samples=1000, centers=10, n_features=2, random_state=42)\n+\n+    # Run KMeans with different n_jobs settings\n+    result_1 = KMeans(n_clusters=10, random_state=42, n_jobs=1).fit(X).inertia_\n+    result_2 = KMeans(n_clusters=10, random_state=42, n_jobs=2).fit(X).inertia_\n+    result_3 = KMeans(n_clusters=10, random_state=42, n_jobs=3).fit(X).inertia_\n+    result_4 = KMeans(n_clusters=10, random_state=42, n_jobs=4).fit(X).inertia_\n+\n+    # Check all results match\n+    assert_almost_equal(result_1, result_2)\n+    assert_almost_equal(result_1, result_3)\n+    assert_almost_equal(result_1, result_4)\n     # Issue GH #14314\n     X = np.array([[-1], [1]], dtype=np.int)\n     km = MiniBatchKMeans(n_clusters=2)\n",
  "sphinx-doc__sphinx-10323": "",
  "sphinx-doc__sphinx-10449": "",
  "sphinx-doc__sphinx-10466": "diff --git a/tests/test_build_gettext.py b/tests/test_build_gettext.py\nindex a6fc946..33f1796 100644\n--- a/tests/test_build_gettext.py\n+++ b/tests/test_build_gettext.py\n@@ -1,3 +1,23 @@\n+\n+def test_Catalog_unique_locations():\n+    catalog = Catalog()\n+    catalog.add('duplicate', MsgOrigin('/path/to/file', 10))\n+    catalog.add('duplicate', MsgOrigin('/path/to/file', 10))\n+    catalog.add('duplicate', MsgOrigin('/path/to/file', 20))\n+    catalog.add('duplicate', MsgOrigin('/path/to/another', 30))\n+\n+    catalog.add('unique', MsgOrigin('/path/to/file', 40))\n+\n+    assert len(list(catalog)) == 2\n+\n+    msg1, msg2 = list(catalog)\n+    assert msg1.text == 'duplicate'\n+    assert sorted(msg1.locations) == sorted([('/path/to/file', 10),\n+                                             ('/path/to/file', 20),\n+                                             ('/path/to/another', 30)])\n+    assert msg2.text == 'unique'\n+    assert msg2.locations == [('/path/to/file', 40)]\n+\n \"\"\"Test the build process with gettext builder with the test root.\"\"\"\n \n import gettext\n@@ -9,6 +29,7 @@ from subprocess import PIPE, CalledProcessError\n import pytest\n \n from sphinx.util.osutil import cd\n+from sphinx.builders.gettext import Catalog, MsgOrigin\n \n \n @pytest.mark.sphinx('gettext', srcdir='root-gettext')\n",
  "sphinx-doc__sphinx-10673": "",
  "sphinx-doc__sphinx-7440": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 975a00f..a84b7b1 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -148,7 +148,34 @@ def test_glossary(app):\n     assert (\"term4\", \"term4\", \"term\", \"index\", \"term-term4\", -1) in objects\n \n \n-def test_glossary_warning(app, status, warning):\n+def test_glossary_case_sensitivity(app):\n+    text = (\".. glossary::\\n\"\n+            \"\\n\"\n+            \"   MySQL\\n\"\n+            \"       A popular open-source database.\\n\"\n+            \"\\n\"\n+            \"   mysql\\n\"\n+            \"       A command-line client for MySQL.\\n\")\n+\n+    # parse the document\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (\n+        [glossary, definition_list, ([definition_list_item, ([term, (\"MySQL\",\n+                                                                     index)],\n+                                                             definition)],\n+                                     [definition_list_item, ([term, (\"mysql\",\n+                                                                     index)],\n+                                                             definition)])],\n+    ))\n+    assert_node(doctree[0][0][0][0][1],\n+                entries=[(\"single\", \"MySQL\", \"term-MySQL\", \"main\", None)])\n+    assert_node(doctree[0][0][1][0][1],\n+                entries=[(\"single\", \"mysql\", \"term-mysql\", \"main\", None)])\n+\n+    # index\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert (\"MySQL\", \"MySQL\", \"term\", \"index\", \"term-MySQL\", -1) in objects\n+    assert (\"mysql\", \"mysql\", \"term\", \"index\", \"term-mysql\", -1) in objects\n     # empty line between terms\n     text = (\".. glossary::\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-7757": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex b3053d1..eee1a62 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -325,6 +325,20 @@ def test_signature_from_str_complex_annotations():\n \n def test_signature_from_str_kwonly_args():\n     sig = inspect.signature_from_str('(a, *, b)')\n+\n+@pytest.mark.skipif(sys.version_info < (3, 8),\n+                    reason='python-3.8 or above is required')\n+def test_signature_with_positional_only_defaults():\n+    # Test positional-only arguments with default values\n+    sig = inspect.signature_from_str('(a, b=0, /, c=1)')\n+\n+    assert list(sig.parameters.keys()) == ['a', 'b', 'c']\n+    assert sig.parameters['a'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['a'].default == Parameter.empty\n+    assert sig.parameters['b'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['b'].default == '0'\n+    assert sig.parameters['c'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['c'].default == '1'\n     assert list(sig.parameters.keys()) == ['a', 'b']\n     assert sig.parameters['a'].kind == Parameter.POSITIONAL_OR_KEYWORD\n     assert sig.parameters['a'].default == Parameter.empty\n",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..5dff9c0 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -32,7 +33,17 @@ def test_MockModule():\n     assert repr(mock) == 'mocked_module'\n \n \n-def test_MockObject():\n+from typing import TypeVar\n+\n+def test_generic_typed_class():\n+    T = TypeVar('T')\n+    \n+    class GenericClass(mock.SomeClass[T]):\n+        \"\"\"docstring of GenericClass\"\"\"\n+    \n+    obj = GenericClass()\n+    assert GenericClass.__doc__ == \"docstring of GenericClass\"\n+    assert isinstance(obj, GenericClass)\n     mock = _MockObject()\n     assert isinstance(mock.some_attr, _MockObject)\n     assert isinstance(mock.some_method, _MockObject)\n@@ -52,7 +63,15 @@ def test_MockObject():\n     assert isinstance(obj.other_method(), SubClass)\n \n \n-def test_mock():\n+def test_subclass_with_generic():\n+    T = TypeVar('T')\n+\n+    class SubClassWithGenericType(mock.SomeClass[T]):\n+        \"\"\"docstring of SubClassWithGenericType\"\"\"\n+        \n+    obj = SubClassWithGenericType()\n+    assert SubClassWithGenericType.__doc__ == \"docstring of SubClassWithGenericType\"\n+    assert isinstance(obj, SubClassWithGenericType)\n     modname = 'sphinx.unknown'\n     submodule = modname + '.submodule'\n     assert modname not in sys.modules\n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_napoleon.py b/tests/test_ext_napoleon.py\nindex 0676869..9fb2a0a 100644\n--- a/tests/test_ext_napoleon.py\n+++ b/tests/test_ext_napoleon.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_napoleon\n     ~~~~~~~~~~~~~\n@@ -185,6 +186,19 @@ class SkipMemberTest(TestCase):\n                         SampleError.__special_doc__, False,\n                         'napoleon_include_special_with_doc')\n \n+    def test_decorated_init_doc(self):\n+        @simple_decorator\n+        def __init__(self):\n+            \"\"\"Initialize with a simple decorator.\"\"\"\n+            self.value = 42\n+\n+        class DecoratedInitClass:\n+            __init__ = __init__\n+\n+        self.assertSkip('class', '__init__',\n+                        DecoratedInitClass.__init__, False,\n+                        'napoleon_include_init_with_doc')\n+\n     def test_exception_special_undoc(self):\n         self.assertSkip('exception', '__special_undoc__',\n                         SampleError.__special_undoc__, True,\n",
  "sphinx-doc__sphinx-7985": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 5b1b2ed..734d3ad 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -100,7 +100,36 @@ def test_anchors_ignored(app, status, warning):\n     assert (app.outdir / 'output.txt').exists()\n     content = (app.outdir / 'output.txt').read_text()\n \n-    # expect all ok when excluding #top\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n+def test_local_links(app, status, warning):\n+    app.builder.build_all()\n+\n+    assert (app.outdir / 'output.txt').exists()\n+    content = (app.outdir / 'output.txt').read_text()\n+\n+    print(content)\n+    # Check for expected failure of non-existent local link\n+    assert \"local\" in content\n+    assert \"doesntexist\" in content\n+    assert len(content.splitlines()) == 6\n+    \n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n+def test_local_links_json(app, status, warning):\n+    app.builder.build_all()\n+\n+    assert (app.outdir / 'output.json').exists()\n+    content = (app.outdir / 'output.json').read_text()\n+    print(content)\n+\n+    rows = [json.loads(x) for x in content.splitlines()]\n+    rowsby = {row[\"uri\"]: row for row in rows}\n+\n+    # Check for local link status\n+    local_row = rowsby.get('doesntexist')\n+    assert local_row is not None, \"Local link 'doesntexist' should have been processed\"\n+    assert local_row['status'] == 'local'\n+    assert local_row['filename'] == 'index.rst'\n+    assert local_row['info'] == ''\n     assert not content\n \n \n",
  "sphinx-doc__sphinx-8035": "diff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex ad1d950..94457fb 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_private_members\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -11,6 +12,8 @@\n import pytest\n \n from test_ext_autodoc import do_autodoc\n+from sphinx.ext.autodoc import ALL\n+from sphinx.ext.autodoc import members_option\n \n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n",
  "sphinx-doc__sphinx-8120": "diff --git a/tests/test_intl.py b/tests/test_intl.py\nindex 58339b1..a99b2b9 100644\n--- a/tests/test_intl.py\n+++ b/tests/test_intl.py\n@@ -1286,6 +1286,40 @@ def test_image_glob_intl_using_figure_language_filename(app):\n                 candidates={'application/pdf': 'subdir/svgimg.pdf',\n                             'image/svg+xml': 'subdir/svgimg.svg'})\n \n-\n-def getwarning(warnings):\n-    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n+import os\n+import pytest\n+from babel.messages import pofile\n+from babel.messages.catalog import Catalog\n+from sphinx import locale\n+\n+@pytest.mark.sphinx('html', testroot='basic', confoverrides={'language': 'da'})\n+def test_custom_translation_overrides(make_app, app_params, sphinx_test_tempdir):\n+    try:\n+        # Clear translators cache\n+        locale.translators.clear()\n+\n+        # Prepare the message catalog (.po) with custom translations\n+        locale_dir = sphinx_test_tempdir / 'basic' / 'locale' / 'da' / 'LC_MESSAGES'\n+        locale_dir.makedirs()\n+        with (locale_dir / 'sphinx.po').open('wb') as f:\n+            catalog = Catalog()\n+            catalog.add('Fig. %s', 'Foobar %s')\n+            catalog.add('Listing %s', 'Whatever %s')\n+            pofile.write_po(f, catalog)\n+\n+        # Construct application and convert po file to .mo\n+        args, kwargs = app_params\n+        app = make_app(*args, **kwargs)\n+        assert (locale_dir / 'sphinx.mo').exists()\n+\n+        # Ensure the translations are correctly overridden\n+        assert app.translator.gettext('Fig. %s') % 1 == 'Foobar 1'\n+        assert app.translator.gettext('Listing %s') % 1 == 'Whatever 1'\n+\n+        app.build()\n+        content = (app.outdir / 'index.html').read_text()\n+        assert 'Foobar 1' in content\n+        assert 'Whatever 1' in content\n+    finally:\n+        locale.translators.clear()\n+    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n",
  "sphinx-doc__sphinx-8269": "",
  "sphinx-doc__sphinx-8459": "",
  "sphinx-doc__sphinx-8475": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 41632e7..22c1c49 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -372,6 +372,28 @@ def test_connect_to_selfsigned_nonexistent_cert_file(app):\n     with https_server(OKHandler):\n         app.builder.build_all()\n \n+import json\n+import pytest\n+import http.server\n+from sphinx.testing.util import SphinxTestApp\n+from sphinx.util import requests\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_TooManyRedirects_on_HEAD(app: SphinxTestApp):\n+    class InfiniteRedirectOnHeadHandler(http.server.BaseHTTPRequestHandler):\n+        def do_HEAD(self):\n+            self.send_response(302, \"Found\")\n+            self.send_header(\"Location\", \"http://localhost:7777/\")\n+            self.end_headers()\n+\n+        def do_GET(self):\n+            self.send_response(200, \"OK\")\n+            self.end_headers()\n+            self.wfile.write(b\"ok\\n\")\n+\n+    with http_server(InfiniteRedirectOnHeadHandler):\n+        app.builder.build_all()\n+\n     with open(app.outdir / 'output.json') as fp:\n         content = json.load(fp)\n     assert content == {\n@@ -381,4 +403,4 @@ def test_connect_to_selfsigned_nonexistent_cert_file(app):\n         \"lineno\": 1,\n         \"uri\": \"https://localhost:7777/\",\n         \"info\": \"Could not find a suitable TLS CA certificate bundle, invalid path: does/not/exist\",\n-    }\n+    }\n",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8721": "diff --git a/tests/test_ext_viewcode.py b/tests/test_ext_viewcode.py\nindex d4fba47..440c916 100644\n--- a/tests/test_ext_viewcode.py\n+++ b/tests/test_ext_viewcode.py\n@@ -49,6 +49,15 @@ def test_viewcode(app, status, warning):\n             '<span>    &quot;&quot;&quot;</span></div>\\n') in result\n \n \n+import pytest\n+\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode', confoverrides={'viewcode_enable_epub': False})\n+def test_viewcode_epub_disabled(app, status, warning):\n+    app.builder.build_all()\n+\n+    # Assert that module pages are not generated when viewcode_enable_epub is False\n+    assert not (app.outdir / '_modules/spam/mod1.xhtml').exists()\n+\n @pytest.mark.sphinx(testroot='ext-viewcode', tags=['test_linkcode'])\n def test_linkcode(app, status, warning):\n     app.builder.build(['objects'])\n",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex 3c31d3d..a480cff 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -515,8 +515,15 @@ def test_dict_customtype():\n     # Type is unsortable, just check that it does not crash\n     assert \"<CustomType(2)>: 2\" in description\n \n+def test_object_description_enum():\n+    import enum\n \n-def test_getslots():\n+    class MyEnum(enum.Enum):\n+        ValueA = 10\n+        ValueB = 20\n+\n+    assert inspect.object_description(MyEnum.ValueA) == \"MyEnum.ValueA\"\n+    assert inspect.object_description(MyEnum.ValueB) == \"MyEnum.ValueB\"\n     class Foo:\n         pass\n \n",
  "sphinx-doc__sphinx-9320": "",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..285ce81 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -54,6 +54,7 @@ from sphinx.pycode import ast\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n     (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n+    (\"(1,)\", \"(1,)\"),                             # Tuple (single element)\n     (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n",
  "sphinx-doc__sphinx-9591": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 29731ea..aef5e11 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -847,7 +847,35 @@ def test_pyproperty(app):\n     assert domain.objects['Class.prop2'] == ('index', 'Class.prop2', 'property', False)\n \n \n-def test_pydecorator_signature(app):\n+def test_property_type_annotation_cross_reference(app):\n+    text = (\".. py:class:: Point\\n\"\n+            \"\\n\"\n+            \"   .. attribute:: x\\n\"\n+            \"   .. attribute:: y\\n\"\n+            \"\\n\"\n+            \".. py:class:: Square\\n\"\n+            \"\\n\"\n+            \"   .. attribute:: start\\n\"\n+            \"      :type: Point\\n\"\n+            \"\\n\"\n+            \"   .. attribute:: width\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \"   .. attribute:: height\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\")\n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n+    \n+    # Check if the 'end' property has the correct cross-reference\n+    assert_node(doctree[1][1][7], ([desc_signature, ([desc_annotation, \"property \"],\n+                                                     [desc_name, \"end\"],\n+                                                     [desc_annotation, \": \"],\n+                                                     [pending_xref, \"Point\"])]))\n+    assert 'Square.end' in domain.objects\n+    assert domain.objects['Square.end'] == ('index', 'Square.end', 'property', False)\n     text = \".. py:decorator:: deco\"\n     domain = app.env.get_domain('py')\n     doctree = restructuredtext.parse(app, text)\n",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..c636965 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -756,7 +756,7 @@ def test_pymethod_options(app):\n \n     # :property:\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
  "sphinx-doc__sphinx-9711": "",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..708046d 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -236,6 +236,39 @@ def test_Point2D():\n     assert p2.distance(p3) == sqrt(17)/2\n \n \n+def test_issue_11617():\n+    # Original test case for the issue\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point2D(2, 0)\n+    \n+    assert p1.distance(p2) == sqrt(5)\n+\n+    # Additional test case 1: Checking the distance for reversed points\n+    assert p2.distance(p1) == sqrt(5)\n+\n+    # Additional test case 2: Distance between two 3D points\n+    p3 = Point3D(4, 0, 0)\n+    assert p1.distance(p3) == sqrt(10)\n+\n+    # Additional test case 3: Distance between a 2D point and a 3D point with zero z-coordinate\n+    p4 = Point3D(2, 0, 0)\n+    assert p2.distance(p4) == 0\n+\n+    # Additional test case 4: Distance between two 2D points\n+    p5 = Point2D(0, 0)\n+    assert p2.distance(p5) == 2\n+\n+    # Additional test case 5: Distance between two identical 3D points\n+    assert p1.distance(Point3D(1, 0, 2)) == 0\n+\n+    # Additional test case 6: Testing with symbolic expressions\n+    from sympy.abc import x, y, z\n+    p6 = Point3D(x, y, z)\n+    assert p6.distance(Point3D(0, 0, 0)) == sqrt(x**2 + y**2 + z**2)\n+\n+from sympy import sqrt\n+from sympy.geometry import Point2D, Point3D\n+\n def test_issue_9214():\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..89785f3 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -741,7 +741,22 @@ def test_special_printers():\n     assert isinstance(func1(), mpi)\n     assert isinstance(func2(), mpi)\n \n-def test_true_false():\n+from sympy.utilities.lambdify import implemented_function\n+from sympy import Float\n+\n+def test_issue_12092():\n+    f = implemented_function('f', lambda x: x**2)\n+    g = implemented_function('g', lambda x: 2 * x)\n+    # Verify individual function evaluations\n+    assert f(2).evalf() == Float(4)\n+    assert g(2).evalf() == Float(4)\n+    # Verify composition of functions\n+    assert f(g(2)).evalf() == Float(16)\n+    assert f(f(2)).evalf() == Float(16)\n+    # Additional test cases\n+    assert g(f(2)).evalf() == Float(8)\n+    assert f(f(g(2))).evalf() == Float(256)\n+    assert f(g(f(2))).evalf() == Float(64)\n     # We want exact is comparison here, not just ==\n     assert lambdify([], true)() is True\n     assert lambdify([], false)() is False\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..5e32362 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -72,7 +72,10 @@ def test_ZeroMatrix_doit():\n     assert isinstance(Znn.doit().rows, Mul)\n \n \n+from sympy import symbols, Identity, Sum\n+\n def test_Identity():\n+    n = symbols('n', integer=True, positive=True)\n     A = MatrixSymbol('A', n, m)\n     In = Identity(n)\n     Im = Identity(m)\n@@ -81,6 +84,9 @@ def test_Identity():\n     assert In*A == A\n \n     assert transpose(In) == In\n+\n+    # Test: Sum of elements of an identity matrix should be equal to n\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n     assert In.inverse() == In\n     assert In.conjugate() == In\n \n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..3926fa5 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -330,6 +330,22 @@ def test_args():\n     assert p._array_form == [3, 2, 0, 1, 5, 4]\n     p = Permutation((0, 3, 1, 2))\n     assert p._cyclic_form is None\n+    \n+    # Test that non-disjoint cycles are processed correctly\n+    # This should create the identity permutation because the cycles cancel each other\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+\n+    # Additional test cases for non-disjoint cycles\n+    # These should be applied in left-to-right order\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([0, 2, 1])\n+    assert Permutation([[1, 2], [0, 1]]) == Permutation([1, 0, 2])\n+\n+    # More complex non-disjoint cycle test\n+    # This should cycle as: 0->1->2->0 with additional 2->3->4->2\n+    assert Permutation([[0, 1, 2], [2, 3, 4]]) == Permutation([1, 2, 4, 0, 3])\n+\n+    # Repeated identity cycles should still result in identity\n+    assert Permutation([[0], [0], [0]]) == Permutation([0])\n     assert p._array_form == [0, 3, 1, 2]\n     assert Permutation([0]) == Permutation((0, ))\n     assert Permutation([[0], [1]]) == Permutation(((0, ), (1, ))) == \\\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..e34b322 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -489,8 +489,32 @@ def test_errors():\n     raises(ShapeError,\n         lambda: SparseMatrix(1, 2, [1, 2]) + SparseMatrix(2, 1, [2, 1]))\n \n-\n-def test_len():\n+def test_sparse_hstack_vstack_zero_dimension():\n+    # Test hstack with zero-dimension matrices\n+    M1 = SparseMatrix.zeros(0, 0)\n+    M2 = SparseMatrix.zeros(0, 1)\n+    M3 = SparseMatrix.zeros(0, 2)\n+    M4 = SparseMatrix.zeros(0, 3)\n+    assert SparseMatrix.hstack(M1, M2, M3, M4).shape == (0, 6), \"Expected (0, 6) for hstack of zero-dimension matrices\"\n+\n+    M1 = SparseMatrix.zeros(1, 0)\n+    M2 = SparseMatrix.zeros(1, 1)\n+    M3 = SparseMatrix.zeros(1, 2)\n+    M4 = SparseMatrix.zeros(1, 3)\n+    assert SparseMatrix.hstack(M1, M2, M3, M4).shape == (1, 6), \"Expected (1, 6) for hstack of zero-dimension matrices with rows\"\n+\n+    # Test vstack with zero-dimension matrices\n+    M1 = SparseMatrix.zeros(0, 0)\n+    M2 = SparseMatrix.zeros(1, 0)\n+    M3 = SparseMatrix.zeros(2, 0)\n+    M4 = SparseMatrix.zeros(3, 0)\n+    assert SparseMatrix.vstack(M1, M2, M3, M4).shape == (6, 0), \"Expected (6, 0) for vstack of zero-dimension matrices\"\n+\n+    M1 = SparseMatrix.zeros(0, 1)\n+    M2 = SparseMatrix.zeros(1, 1)\n+    M3 = SparseMatrix.zeros(2, 1)\n+    M4 = SparseMatrix.zeros(3, 1)\n+    assert SparseMatrix.vstack(M1, M2, M3, M4).shape == (6, 1), \"Expected (6, 1) for vstack of zero-dimension matrices with columns\"\n     assert not SparseMatrix()\n     assert SparseMatrix() == SparseMatrix([])\n     assert SparseMatrix() == SparseMatrix([[]])\n",
  "sympy__sympy-13372": "",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..66833dc 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -200,8 +200,23 @@ def test_tanh():\n \n     assert tanh(k*pi*I) == 0\n     assert tanh(17*k*pi*I) == 0\n-\n-    assert tanh(k*pi*I/2) == tan(k*pi/2)*I\n+    from sympy import coth, log, tan, Symbol, I, pi, sqrt\n+\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+\n+    # Test cases for the specific issue mentioned\n+    assert e.subs(x, 2)  # Ensure no error is raised\n+    assert e.subs(x, 3)  # Ensure no error is raised\n+    assert e.subs(x, 5)  # Ensure no error is raised\n+    assert e.subs(x, 6)  # Ensure no error is raised\n+    assert e.subs(x, 8)  # Ensure no error is raised\n+    assert e.subs(x, 9)  # Ensure no error is raised\n+    assert e.subs(x, 11) # Ensure no error is raised\n+    assert e.subs(x, 12) # Ensure no error is raised\n+    assert e.subs(x, 13) # Ensure no error is raised\n+    assert e.subs(x, 15) # Ensure no error is raised\n+    assert e.subs(x, 18) # Ensure no error is raised\n \n \n def test_tanh_series():\n",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..b9af705 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -176,6 +176,26 @@ def test_Complement():\n     assert -1 in Complement(S.Reals, S.Naturals, evaluate=False)\n     assert not 1 in Complement(S.Reals, S.Naturals, evaluate=False)\n \n+from sympy import FiniteSet, Interval, Complement, symbols, EmptySet\n+\n+x, y, z = symbols('x y z')\n+\n+def test_issue_complement_mixed_symbols_numbers():\n+    # Original issue test case\n+    assert Complement(FiniteSet(x, y, 2), Interval(-10, 10)) == FiniteSet(x, y)\n+    \n+    # Additional test cases\n+    # Test with different numbers\n+    assert Complement(FiniteSet(x, y, 2, 5.5), Interval(-10, 10)) == FiniteSet(x, y)\n+    # Test with different interval ranges\n+    assert Complement(FiniteSet(x, y, z, 10), Interval(0, 10, False, True)) == FiniteSet(x, y, z, 10)\n+    # Test with symbols only\n+    assert Complement(FiniteSet(x, y, z), Interval(-10, 10)) == FiniteSet(x, y, z)\n+    # Test with numbers only\n+    assert Complement(FiniteSet(1, 5, 10), Interval(0, 10)) == FiniteSet(1)\n+    # Test with no intersection\n+    assert Complement(FiniteSet(12, x, y), Interval(-10, 10)) == FiniteSet(12, x, y)\n+    \n     assert Complement(S.Integers, S.UniversalSet) == EmptySet()\n     assert S.UniversalSet.complement(S.Integers) == EmptySet()\n \n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..59a2d1e 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,29 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643_col_insert():\n+    from sympy import eye, Matrix, ones\n+\n+    # Initial 6x6 identity matrix\n+    M = eye(6)\n+\n+    # 6x2 matrix filled with twos\n+    V = 2 * ones(6, 2)\n+\n+    # Insert V at column index 3 in M\n+    result = M.col_insert(3, V)\n+\n+    # Expected result after column insertion\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1],\n+    ])\n+\n+    assert result == expected, \"The column insertion did not produce the correct result.\"\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..d477c78 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -677,8 +677,23 @@ def test_Poly_mul():\n     assert Poly(x, x) * 2 == Poly(2*x, x)\n     assert 2 * Poly(x, x) == Poly(2*x, x)\n \n-\n-def test_Poly_sqr():\n+def test_issue_poly_multiplication():\n+    from sympy import Poly, Symbol, S\n+    x = Symbol('x')\n+\n+    # Test case for the original issue\n+    assert Poly(x)*x == Poly(x**2, x, domain='ZZ')\n+    assert x*Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert -2*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2)*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert Poly(x)*S(-2) == Poly(-2*x, x, domain='ZZ')\n+\n+    # Additional test cases to check other multiplications\n+    assert Poly(x)**2 == Poly(x**2, x)\n+    assert x**2 * Poly(x) == Poly(x**3, x, domain='ZZ')\n+    assert Poly(x) * x**2 == Poly(x**3, x, domain='ZZ')\n+    assert 0 * Poly(x) == Poly(0, x, domain='ZZ')\n+    assert Poly(x) * 0 == Poly(0, x, domain='ZZ')\n     assert Poly(x*y, x, y).sqr() == Poly(x**2*y**2, x, y)\n \n \n",
  "sympy__sympy-13798": "",
  "sympy__sympy-13877": "",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..ca0241a 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -710,6 +710,29 @@ def test_issue_10003():\n     assert P(G < -1) == S.Zero\n \n def test_precomputed_cdf():\n+    from sympy import S, Piecewise, asin, exp, Abs, sqrt, gamma, pi, hyper, lowergamma, uppergamma\n+    from sympy.stats import (\n+        Arcsin, Dagum, Erlang, Frechet, Gamma, GammaInverse, Kumaraswamy, Laplace,\n+        Logistic, Nakagami, StudentT, UniformSum, cdf, density\n+    )\n+\n+    x = symbols(\"x\", real=True, finite=True)\n+\n+    # Adding individual test cases for the different distributions\n+    assert cdf(Arcsin(\"x\", 0, 3))(1) == 2*asin(sqrt(1/3))/pi\n+    assert cdf(Dagum(\"x\", S(1)/3, S(1)/5, 2))(3) == (1 + (3/2)**(-S(1)/3))**(-S(1)/5)\n+    assert cdf(Erlang(\"x\", 1, 1))(1) == 1 - exp(-1)\n+    assert cdf(Frechet(\"x\", S(4)/3, 1, 2))(3) == exp(-1)\n+    assert cdf(Gamma(\"x\", 0.1, 2))(3).evalf() == lowergamma(S(0.1), 1.5)/gamma(S(0.1))\n+    assert cdf(GammaInverse(\"x\", S(5)/7, 2))(3) == uppergamma(S(5)/7, 2/3)/gamma(S(5)/7)\n+    assert cdf(Kumaraswamy(\"x\", S(1)/123, 5))(S(1)/3) == 1 - (1 - (S(1)/3)**(S(1)/123))**5\n+    assert cdf(Laplace(\"x\", 2, 3))(5) == S.Half + S.Half*exp(-1)\n+    assert cdf(Logistic(\"x\", 1, 0.1))(2) == 1/(1 + exp(-10))\n+    assert cdf(Nakagami(\"x\", S(7)/3, 1))(2) == lowergamma(S(7)/3, (7/9))/gamma(S(7)/3)\n+    assert cdf(StudentT(\"x\", 10))(2) == S.Half + 2*gamma(S(11)/2)*hyper((S.Half, S(11)/2), (S(3)/2,), -4)/(sqrt(pi)*sqrt(10)*gamma(S(5)/2))\n+\n+    US = UniformSum(\"x\", 5)\n+    assert cdf(US)(2) == Piecewise((0, x < 0), (Sum((-1)**k*binomial(5, k)*(2 - k)**5, (k, 0, floor(2))), x <= 5), (1, True))\n     x = symbols(\"x\", real=True, finite=True)\n     mu = symbols(\"mu\", real=True, finite=True)\n     sigma, xm, alpha = symbols(\"sigma xm alpha\", positive=True, finite=True)\n",
  "sympy__sympy-13974": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bd3e825..34aa111 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -46,6 +46,18 @@ def test_tensor_product_commutator():\n \n \n def test_tensor_product_simp():\n+    # Adding tests for powers of TensorProduct\n+    assert tensor_product_simp(TP(A, B)**2) == TP(A**2, B**2)\n+    assert tensor_product_simp(TP(A, B)**x) == TP(A**x, B**x)\n+    assert tensor_product_simp(x*TP(A, B)**2) == x*TP(A**2, B**2)\n+    assert tensor_product_simp(x*(TP(A, B)**2)*TP(C,D)) == x*TP(A**2*C, B**2*D)\n+    assert tensor_product_simp(TP(A, B) - TP(C, D)**x) == TP(A, B) - TP(C**x, D**x)\n+\n+    # Additional test cases for the specific issue examples\n+    t1 = TP(1, 1)*TP(1, 1)\n+    assert tensor_product_simp(t1).subs(1, 1) == TP(1, 1)\n+    t2 = TP(1, Pauli(3))*TP(1, Pauli(3))\n+    assert tensor_product_simp(t2).subs(Pauli(3), Pauli(3)) == TP(1, 1)\n     assert tensor_product_simp(TP(A, B)*TP(B, C)) == TP(A*B, B*C)\n \n \n",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_python.py b/sympy/printing/tests/test_python.py\nindex 73fc070..7c4b540 100644\n--- a/sympy/printing/tests/test_python.py\n+++ b/sympy/printing/tests/test_python.py\n@@ -79,7 +79,10 @@ def test_python_keyword_function_name_escaping():\n         5*Function(\"for\")(8)) == \"for_ = Function('for')\\ne = 5*for_(8)\"\n \n \n+from sympy import Symbol, Eq, Ne, PythonPrinter, sstr\n+\n def test_python_relational():\n+    # Original test case\n     assert python(Eq(x, y)) == \"e = Eq(x, y)\"\n     assert python(Ge(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x >= y\"\n     assert python(Le(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x <= y\"\n@@ -88,7 +91,22 @@ def test_python_relational():\n     assert python(Ne(x/(y + 1), y**2)) in [\"e = Ne(x/(1 + y), y**2)\", \"e = Ne(x/(y + 1), y**2)\"]\n \n \n-def test_python_functions():\n+def test_strprinter_issue():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    \n+    # Test the string conversion of an equation using the python printer\n+    assert python(Eq(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = Eq(x, y)\"\n+    \n+    # Test another relational expression\n+    assert python(Ne(x / (y + 1), y**2)) in [\n+        \"x = Symbol('x')\\ny = Symbol('y')\\ne = Ne(x/(1 + y), y**2)\",\n+        \"x = Symbol('x')\\ny = Symbol('y')\\ne = Ne(x/(y + 1), y**2)\"\n+    ]\n+\n+    # Test sstr with sympy_integers option\n+    assert sstr(Eq(x, Rational(2, 3)), sympy_integers=True) == \"Eq(x, S(2)/3)\"\n+    assert sstr(Limit(x, x, Rational(7, 2)), sympy_integers=True) == \"Limit(x, x, S(7)/2)\"\n     # Simple\n     assert python((2*x + exp(x))) in \"x = Symbol('x')\\ne = 2*x + exp(x)\"\n     assert python(sqrt(2)) == 'e = sqrt(2)'\n",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..b28b33e 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -3,6 +3,7 @@ from sympy.physics.vector import ReferenceFrame, Vector, dynamicsymbols, dot\n from sympy.abc import x, y, z\n from sympy.utilities.pytest import raises\n \n+from sympy.physics.vector import ReferenceFrame\n \n Vector.simp = True\n A = ReferenceFrame('A')\n",
  "sympy__sympy-14976": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex fbe0d75..1fe9ae0 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import (absolute_import, division, print_function)\n \n@@ -40,6 +41,7 @@ def test_PythonCodePrinter():\n def test_MpmathPrinter():\n     p = MpmathPrinter()\n     assert p.doprint(sign(x)) == 'mpmath.sign(x)'\n+    assert p.doprint(Rational(1, 2)) == 'mpmath.mpf(1)/mpmath.mpf(2)'\n \n \n def test_NumPyPrinter():\n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..a2a7a63 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -71,7 +72,18 @@ def test_ndim_array_initiation():\n     assert vector_with_long_shape.rank() == 1\n     raises(ValueError, lambda: vector_with_long_shape[long(5)])\n \n+    from sympy import Array\n     from sympy.abc import x\n+\n+    # Test cases for issue where len(rank-0 array) should be 1\n+    rank_zero_array_test = ImmutableDenseNDimArray(3)\n+    assert len(rank_zero_array_test) == 1  # Correct behavior is to return 1\n+    assert list(rank_zero_array_test) == [3]  # Ensure it can be iterated as one element\n+\n+    # Repeat the test with another scalar\n+    rank_zero_array_test_2 = Array(7)  # Using Array to ensure consistent behavior\n+    assert len(rank_zero_array_test_2) == 1\n+    assert list(rank_zero_array_test_2) == [7]\n     rank_zero_array = ImmutableDenseNDimArray(x)\n     assert len(rank_zero_array) == 0\n     assert rank_zero_array.shape == ()\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..1f4e343 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n@@ -29,6 +30,20 @@ def test_Function():\n     assert mcode(sin(x) ** cos(x)) == \"Sin[x]^Cos[x]\"\n     assert mcode(conjugate(x)) == \"Conjugate[x]\"\n \n+def test_Max_Min():\n+    # Test cases for Max function\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"\n+    assert mcode(Max(x, y, z)) == \"Max[x, y, z]\"\n+    \n+    # Test cases for Min function to ensure it's still correct\n+    assert mcode(Min(x, 2)) == \"Min[x, 2]\"\n+    assert mcode(Min(2, x)) == \"Min[2, x]\"\n+    assert mcode(Min(x, y, z)) == \"Min[x, y, z]\"\n+\n+    # Mixed Max and Min\n+    assert mcode(Max(x, 2) * Min(y, z)) == \"Max[x, 2]*Min[y, z]\"\n+\n \n def test_Pow():\n     assert mcode(x**3) == \"x^3\"\n",
  "sympy__sympy-15349": "diff --git a/sympy/algebras/tests/test_quaternion.py b/sympy/algebras/tests/test_quaternion.py\nindex c486cc1..3ddf67f 100644\n--- a/sympy/algebras/tests/test_quaternion.py\n+++ b/sympy/algebras/tests/test_quaternion.py\n@@ -112,6 +112,35 @@ def test_quaternion_conversions():\n                                                [sin(theta),  cos(theta), 0],\n                                                [0,           0,          1]])\n \n+def test_quaternion_to_rotation_matrix():\n+    # Test for a rotation around the x-axis\n+    x = symbols('x')\n+    q_x = Quaternion(cos(x/2), sin(x/2), 0, 0)\n+    expected_matrix_x = Matrix([\n+        [1,      0,      0],\n+        [0, cos(x), -sin(x)],\n+        [0, sin(x),  cos(x)]\n+    ])\n+    assert trigsimp(q_x.to_rotation_matrix()) == expected_matrix_x\n+\n+    # Test for a rotation around the y-axis\n+    q_y = Quaternion(cos(x/2), 0, sin(x/2), 0)\n+    expected_matrix_y = Matrix([\n+        [ cos(x), 0, sin(x)],\n+        [      0, 1,      0],\n+        [-sin(x), 0, cos(x)]\n+    ])\n+    assert trigsimp(q_y.to_rotation_matrix()) == expected_matrix_y\n+\n+    # Test for a rotation around the z-axis\n+    q_z = Quaternion(cos(x/2), 0, 0, sin(x/2))\n+    expected_matrix_z = Matrix([\n+        [cos(x), -sin(x), 0],\n+        [sin(x),  cos(x), 0],\n+        [     0,       0, 1]\n+    ])\n+    assert trigsimp(q_z.to_rotation_matrix()) == expected_matrix_z\n+\n     assert q2.to_axis_angle() == ((0, 0, sin(theta/2)/Abs(sin(theta/2))),\n                                    2*acos(cos(theta/2)))\n \n@@ -119,4 +148,4 @@ def test_quaternion_conversions():\n                [cos(theta), -sin(theta), 0, sin(theta) - cos(theta) + 1],\n                [sin(theta),  cos(theta), 0, -sin(theta) - cos(theta) + 1],\n                [0,           0,          1,  0],\n-               [0,           0,          0,  1]])\n+               [0,           0,          0,  1]])\n",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..f41cdaa 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1625,9 +1625,16 @@ def test_Mod():\n     assert (3*i*x) % (2*i*y) == i*Mod(3*x, 2*y)\n     assert Mod(4*i, 4) == 0\n \n-    # issue 8677\n-    n = Symbol('n', integer=True, positive=True)\n-    assert factorial(n) % n == 0\n+    # Test for issue 15493\n+    i, j = symbols('i j', integer=True, positive=True)\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+    assert Mod(-3*i, 2) == Mod(-i, 2)\n+    assert Mod(9*i, 3) == 0  # Check full division simplification\n+    assert Mod(6*i + 3, 2) == Mod(i + 1, 2)  # Mixed term simplification\n+    assert Mod(8*i/j, 4) == 4*Mod(2*i/j, 1)\n+    assert Mod(8*i, 4) == 0\n+\n+    # Verify original test is unaffected\n     assert factorial(n + 2) % n == 0\n     assert (factorial(n + 4) % (n + 5)).func is Mod\n \n",
  "sympy__sympy-15809": "diff --git a/sympy/functions/elementary/tests/test_miscellaneous.py b/sympy/functions/elementary/tests/test_miscellaneous.py\nindex 821fd0c..f87bc21 100644\n--- a/sympy/functions/elementary/tests/test_miscellaneous.py\n+++ b/sympy/functions/elementary/tests/test_miscellaneous.py\n@@ -76,6 +76,14 @@ def test_Min():\n     assert Min(oo, nn) == nn\n     assert Min(p, p) == p\n     assert Min(p, oo) == p\n+\n+    # Test for zero-argument behavior\n+    assert Min() == S.Infinity\n+    assert Max() == S.NegativeInfinity\n+\n+    # Ensure single argument behavior is consistent\n+    assert Min(x) == x\n+    assert Max(x) == x\n     assert Min(oo, p) == p\n     assert Min(oo, oo) == oo\n \n@@ -85,7 +93,8 @@ def test_Min():\n     assert Min(p, p_).func is Min\n \n     # lists\n-    raises(ValueError, lambda: Min())\n+    # Previous behavior test: removed as issue was fixed\n+    # raises(ValueError, lambda: Min())\n     assert Min(x, y) == Min(y, x)\n     assert Min(x, y, z) == Min(z, y, x)\n     assert Min(x, Min(y, z)) == Min(z, y, x)\n@@ -154,9 +163,18 @@ def test_Max():\n \n     assert Max(5, 4) == 5\n \n+    # Test for zero-argument behavior\n+    assert Min() == S.Infinity\n+    assert Max() == S.NegativeInfinity\n+\n+    # Ensure single argument behavior is consistent\n+    assert Min(x) == x\n+    assert Max(x) == x\n+\n     # lists\n \n-    raises(ValueError, lambda: Max())\n+    # Previous behavior test: removed as issue was fixed\n+    # raises(ValueError, lambda: Max())\n     assert Max(x, y) == Max(y, x)\n     assert Max(x, y, z) == Max(z, y, x)\n     assert Max(x, Max(y, z)) == Max(z, y, x)\n",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..e9b2ac8 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1986,11 +1986,32 @@ def test_Add_is_zero():\n     x, y = symbols('x y', zero=True)\n     assert (x + y).is_zero\n \n+from sympy import I, simplify, symbols\n \n-def test_issue_14392():\n+def test_issue_15873():\n+    # Original test patch\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None\n+    assert simplify(e).is_zero is True\n+\n+    # Additional test cases\n+    f = (3 + 4*I) - (3 + 4*I)\n+    assert f.is_zero is True  # Simplifies to zero\n+\n+    g = 2*I + 3 + (-2*I - 3)\n+    assert g.is_zero is True  # Simplifies to zero\n+\n+    h = (1 + I) * (1 - I) - 2\n+    assert h.is_zero is None  # Should be None because it simplifies to zero\n+\n+    i = (1 + I)**2 + (1 - I)**2\n+    assert i.is_zero is False  # Simplifies to 4, not zero\n+\n+    j = (1 + I)**2 - (1 + I)**2\n+    assert j.is_zero is True  # Simplifies to zero\n     assert (sin(zoo)**2).as_real_imag() == (nan, nan)\n \n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..1b6c2fa 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -478,6 +478,29 @@ def test_logcombine_complex_coeff():\n         i + log(x**2)\n \n \n+from sympy import Symbol, posify\n+\n+def test_posify_preserves_assumptions():\n+    # Test for preserving the 'finite' assumption\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0['finite'] == True\n+    assert eq.assumptions0['infinite'] == False\n+\n+    # Test for preserving other assumptions\n+    k = Symbol('k', integer=True, rational=True, prime=True, even=False, odd=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0['integer'] == True\n+    assert eq.assumptions0['rational'] == True\n+    assert eq.assumptions0['prime'] == True\n+    assert eq.assumptions0['even'] == False\n+    assert eq.assumptions0['odd'] == True\n+\n+    # Additional test to ensure commutativity and other assumptions are preserved\n+    k = Symbol('k', commutative=False)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0['commutative'] == False\n+\n def test_issue_5950():\n     x, y = symbols(\"x,y\", positive=True)\n     assert logcombine(log(3) - log(2)) == log(Rational(3,2), evaluate=False)\n",
  "sympy__sympy-16766": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 51a287f..3e4b21f 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n \n@@ -11,7 +12,7 @@ from sympy.matrices import SparseMatrix, MatrixSymbol\n from sympy.printing.pycode import (\n     MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter\n )\n-from sympy.utilities.pytest import raises\n+from sympy.tensor import IndexedBase\n \n x, y, z = symbols('x y z')\n \n@@ -35,6 +36,13 @@ def test_PythonCodePrinter():\n                                                         ' (3) if (x > 0) else None)'\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n \n+    # Test case for Indexed objects\n+    p = IndexedBase(\"p\")\n+    assert prntr.doprint(p[0]) == 'p[0]'\n+    assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n+    q = IndexedBase(\"q\")\n+    assert prntr.doprint(q[x, y, z]) == 'q[x, y, z]'\n+\n \n def test_MpmathPrinter():\n     p = MpmathPrinter()\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py\nindex 23fddca..1042a62 100644\n--- a/sympy/utilities/tests/test_autowrap.py\n+++ b/sympy/utilities/tests/test_autowrap.py\n@@ -48,7 +48,17 @@ def test_cython_wrapper_scalar_function():\n     assert source == expected\n \n \n-def test_cython_wrapper_outarg():\n+\n+def test_cython_autowrap_unused_array_arg():\n+    from sympy import MatrixSymbol\n+    from sympy.utilities.autowrap import autowrap\n+    import numpy as np\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0\n+    f = autowrap(expr, args=(x,), backend='cython')\n+\n+    assert f(np.array([[1.0], [2.0]])) == 1.0\n     from sympy import Equality\n     x, y, z = symbols('x,y,z')\n     code_gen = CythonCodeWrapper(C99CodeGen())\n",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..3b78673 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -238,6 +238,14 @@ def test_decipher_kid_rsa():\n     assert decipher_kid_rsa(2, (7, 4)) == 1\n \n \n+from sympy.crypto.crypto import encode_morse\n+\n+def test_encode_morse_numbers():\n+    assert encode_morse('12345') == '.----|..---|...--|....-|.....'\n+    assert encode_morse('67890') == '-....|--...|---..|----.|-----'\n+    # Specifically test the encoding for '1'\n+    assert encode_morse('1') == '.----'\n+\n def test_encode_morse():\n     assert encode_morse('ABC') == '.-|-...|-.-.'\n     assert encode_morse('SMS ') == '...|--|...||'\n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_fu.py b/sympy/simplify/tests/test_fu.py\nindex 135b4cd..2a879d9 100644\n--- a/sympy/simplify/tests/test_fu.py\n+++ b/sympy/simplify/tests/test_fu.py\n@@ -81,9 +81,12 @@ def test_TR5():\n     assert TR5(sin(x)**2) == -cos(x)**2 + 1\n     assert TR5(sin(x)**-2) == sin(x)**(-2)\n     assert TR5(sin(x)**4) == (-cos(x)**2 + 1)**2\n-\n-\n-def test_TR6():\n+def test_issue_17137_fu():\n+    from sympy import sin, cos, I, Symbol\n+    x = Symbol('x')\n+    h = lambda x: 1 - x\n+    assert T(sin(x)**I, sin, cos, h, 4, True) == sin(x)**I\n+    assert T(sin(x)**(2*I + 1), sin, cos, h, 4, True) == sin(x)**(2*I + 1)\n     assert TR6(cos(x)**2) == -sin(x)**2 + 1\n     assert TR6(cos(x)**-2) == cos(x)**(-2)\n     assert TR6(cos(x)**4) == (-sin(x)**2 + 1)**2\n",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..e0556d7 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,5 +1,7 @@\n+\n from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n-from sympy.simplify.sqrtdenest import _subsets as subsets\n+from sympy.simplify.sqrtdenest import _subsets as subsets, _sqrt_match\n+from sympy.core.expr import unchanged\n from sympy.utilities.pytest import slow\n \n r2, r3, r5, r6, r7, r10, r15, r29 = [sqrt(x) for x in [2, 3, 5, 6, 7, 10,\n@@ -176,7 +178,24 @@ def test_subsets():\n         [1, 1, 0, 1], [0, 0, 1, 1], [1, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]]\n \n \n-def test_issue_5653():\n+def test_issue_12420():\n+    I = S.ImaginaryUnit\n+    # Verify that _sqrt_match does not match incorrectly\n+    assert _sqrt_match(4 + I) == []\n+    \n+    # Verify sqrtdenest does not raise an error and returns expression unchanged\n+    expr = (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2\n+    assert unchanged(sqrtdenest, expr)\n+    assert sqrtdenest(expr) == expr\n+    \n+    # Another expression that should remain unchanged\n+    e = 3 - sqrt(2)*sqrt(4 + I) + 3*I\n+    assert sqrtdenest(e) == e\n+    \n+    # Additional test to verify unchanged behavior for a different complex expression\n+    expr2 = sqrt(2 + sqrt(3 + sqrt(5)))\n+    assert unchanged(sqrtdenest, expr2)\n+    assert sqrtdenest(expr2) == expr2\n     assert sqrtdenest(\n         sqrt(2 + sqrt(2 + sqrt(2)))) == sqrt(2 + sqrt(2 + sqrt(2)))\n \n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..bd3e272 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,9 +1,11 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.pytest import raises, warns\n+from sympy import sympify\n \n \n def test_point():\n@@ -91,6 +93,15 @@ def test_point():\n     assert (-p3).__rsub__(p4) == p3.midpoint(p4).scale(2, 2)\n \n     assert p4 * 5 == Point(5, 5)\n+    # Test multiplication of Point with sympify number\n+    assert p4 * sympify(2.0) == Point(2, 2)\n+    assert sympify(2.0) * p4 == Point(2, 2)\n+\n+    # Test for the specific issue mentioned\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+    assert point1 + point2 * sympify(2.0) == Point(2, 2)\n+    assert point1 + sympify(2.0) * point2 == Point(2, 2)\n     assert p4 / 5 == Point(0.2, 0.2)\n \n     raises(ValueError, lambda: Point(0, 0) + 10)\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..7f6a3ca 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -501,7 +501,17 @@ def test_diophantine():\n     assert diophantine(eq, permute=True) == complete_soln\n \n     assert diophantine(x**2 + x*Rational(15, 14) - 3) == set()\n-    # test issue 11049\n+    # Test issue 18186\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+\n+    # Additional test for different order of symbols\n+    assert diophantine(x**4 + y**4 - 2**4 - 3**4, syms=(x, y), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(x**4 + y**4 - 2**4 - 3**4, syms=(y, x), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n     eq = 92*x**2 - 99*y**2 - z**2\n     coeff = eq.as_coefficients_dict()\n     assert _diop_ternary_quadratic_normal((x, y, z), coeff) == \\\n",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..8f7c311 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -677,7 +677,17 @@ def test_latex_subs():\n         x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n \n \n-def test_latex_integrals():\n+def test_latex_subs_with_multiplication():\n+    from sympy import Subs, symbols\n+    x, y = symbols('x y')\n+    \n+    # Test the original issue example\n+    assert latex(3*Subs(-x+y, (x,), (1,))) == r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+    \n+    # Additional test cases to ensure comprehensive checks\n+    assert latex(2*Subs(x - y, (x,), (1,))) == r'2 \\left. \\left(x - y\\right) \\right|_{\\substack{ x=1 }}'\n+    assert latex(-Subs(x + y, (x,), (1,))) == r'- \\left. \\left(x + y\\right) \\right|_{\\substack{ x=1 }}'\n+    assert latex(-3*Subs(x*y, (x,), (1,))) == r'-3 \\left. \\left(x y\\right) \\right|_{\\substack{ x=1 }}'\n     assert latex(Integral(log(x), x)) == r\"\\int \\log{\\left(x \\right)}\\, dx\"\n     assert latex(Integral(x**2, (x, 0, 1))) == \\\n         r\"\\int\\limits_{0}^{1} x^{2}\\, dx\"\n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..7f9e5d9 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -473,7 +473,8 @@ def test_issue_4988_builtins():\n     assert exp1 == C  # Make sure it did not get mixed up with sympy.C\n \n     exp2 = sympify('C', vars)\n-    assert exp2 == C  # Make sure it did not get mixed up with sympy.C\n+from sympy.abc import x\n+from sympy import Rational, Add, Mul, Interval, Symbol, exp, sin, cos\n \n \n def test_geometry():\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_operator.py b/sympy/physics/quantum/tests/test_operator.py\nindex 799aaae..2800531 100644\n--- a/sympy/physics/quantum/tests/test_operator.py\n+++ b/sympy/physics/quantum/tests/test_operator.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Derivative, diff, Function, Integer, Mul, pi, sin, Symbol,\n                    symbols)\n from sympy.physics.quantum.qexpr import QExpr\n@@ -93,6 +94,18 @@ def test_identity():\n     assert isinstance(I, Operator)\n \n     assert I * O == O\n+    # Additional tests for Dagger and IdentityOperator\n+    D = Dagger(O)\n+    assert D * I == D\n+    assert I * D == D\n+    assert Dagger(D) * I == O\n+    assert I * Dagger(D) == O\n+    # Test with associative property\n+    assert O * I * D == O * D\n+    assert D * I * O == D * O\n+    # Test with multiple identity operators\n+    assert D * I * I == D\n+    assert I * I * D == D\n     assert O * I == O\n     assert isinstance(I * I, IdentityOperator)\n     assert isinstance(3 * I, Mul)\n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..627b0c3 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -856,6 +856,16 @@ def test_generator_product():\n \n def test_sylow_subgroup():\n     P = PermutationGroup(Permutation(1, 5)(2, 4), Permutation(0, 1, 2, 3, 4, 5))\n+\n+    # Test for issue with DihedralGroup(18)\n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n+    # Test for issue with DihedralGroup(50)\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n     S = P.sylow_subgroup(2)\n     assert S.order() == 4\n \n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..bd78d6d 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -472,6 +472,17 @@ def test_multiset_permutations():\n \n \n def test_partitions():\n+    # Test to ensure partitions do not reuse dictionary objects\n+    def check_distinct_objects(partitions_iter):\n+        partition_list = list(partitions_iter)\n+        assert all(p1 is not p2 for i, p1 in enumerate(partition_list) for p2 in partition_list[i+1:]), \"Reused dictionary objects detected\"\n+\n+    check_distinct_objects(partitions(6, k=2))\n+    check_distinct_objects(partitions(6, k=3))\n+    check_distinct_objects(partitions(8, k=4, m=3))\n+    check_distinct_objects(partitions(S(3), m=2))\n+    check_distinct_objects(partitions(4, k=3))\n+    check_distinct_objects(partitions(4))\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n         assert list(partitions(0, size=i)) == ans[i]\n",
  "sympy__sympy-20801": "",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..298662f 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,6 +1,7 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n-    Integer, Eq, symbols, Add, I, Float, log, Rational,\n+    Integer, Eq, symbols, Add, I, Float, log, Rational, sinh, Piecewise,\n     Lambda, atan2, cse, cot, tan, S, Tuple, Basic, Dict,\n     Piecewise, oo, Mul, factor, nsimplify, zoo, Subs, RootOf,\n     AccumBounds, Matrix, zeros, ZeroMatrix)\n@@ -19,8 +20,34 @@ def test_subs():\n     e = e.subs(x, n3)\n     assert e == Rational(6)\n \n+    # Additional test cases for issue with PolynomialError in subs\n+\n+    # Test for sinh with Piecewise and division by symbol\n+    x_r, y_r, z_r = symbols('x_r y_r z_r', real=True)\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    # Ensure no PolynomialError is raised\n+    assert expr.subs({1: 1.0}) == exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+\n+    # Test for cosh with similar conditions\n+    expr_cosh = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    assert expr_cosh.subs({1: 1.0}) == exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+\n+    # Test for tanh with similar conditions\n+    expr_tanh = exp(tanh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    assert expr_tanh.subs({1: 1.0}) == exp(tanh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+\n+    # Test with exp removed\n+    expr_no_exp = sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r)\n+    assert expr_no_exp.subs({1: 1.0}) == sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r)\n+\n+    # Test with division removed\n+    expr_no_div = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n+    assert expr_no_div.subs({1: 1.0}) == exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n \n-def test_subs_Matrix():\n+    # Test with non-real symbols\n+    x_nr, y_nr, z_nr = symbols('x_nr y_nr z_nr')\n+    expr_non_real = exp(sinh(Piecewise((x_nr, y_nr > x_nr), (y_nr, True)) / z_nr))\n+    assert expr_non_real.subs({1: 1.0}) == exp(sinh(Piecewise((x_nr, y_nr > x_nr), (y_nr, True)) / z_nr))\n     z = zeros(2)\n     z1 = ZeroMatrix(2, 2)\n     assert (x*y).subs({x:z, y:0}) in [z, z1]\n",
  "sympy__sympy-21847": "",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..f44a795 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -267,6 +267,7 @@ def test_String():\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n+    assert st.func(*st.args) == st  # New test case to verify argument invariance\n \n \n     class Signifier(String):\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..97c66e1 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -451,8 +452,38 @@ def test__normalize_dimension():\n         Point(1, 2), Point(3, 4, 0), on_morph='ignore') == [\n         Point(1, 2, 0), Point(3, 4, 0)]\n \n-\n-def test_direction_cosine():\n+from sympy.core.parameters import evaluate\n+\n+def test_issue_22684():\n+    # Used to give an error with evaluate(False)\n+    with evaluate(False):\n+        p = Point(1, 2)\n+        assert isinstance(p, Point2D)\n+        assert p.equals(Point2D(1, 2))\n+\n+    # Test without evaluate=False to ensure normal behavior\n+    p = Point(1, 2)\n+    assert isinstance(p, Point2D)\n+    assert p.equals(Point2D(1, 2))\n+\n+    # Test with evaluate=False argument in Point constructor\n+    p = Point(1, 2, evaluate=False)\n+    assert isinstance(p, Point2D)\n+    assert p.equals(Point2D(1, 2))\n+\n+    # Ensure no imaginary coordinates are accepted\n+    with raises(ValueError, match='Imaginary coordinates are not permitted.'):\n+        Point(1, I)\n+\n+    # Test 3D points to ensure no regression\n+    with evaluate(False):\n+        p3d = Point(1, 2, 3)\n+        assert isinstance(p3d, Point3D)\n+        assert p3d.equals(Point3D(1, 2, 3))\n+\n+        p3d = Point(1, 2, 3, evaluate=False)\n+        assert isinstance(p3d, Point3D)\n+        assert p3d.equals(Point3D(1, 2, 3))\n     p1 = Point3D(0, 0, 0)\n     p2 = Point3D(1, 1, 1)\n \n",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..55f59e7 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n@@ -27,7 +28,8 @@ p = IndexedBase(\"p\")\n def test_PythonCodePrinter():\n     prntr = PythonCodePrinter()\n \n-    assert not prntr.module_imports\n+    assert prntr.doprint(Min(x, y)) == \"min(x, y)\"\n+    assert prntr.doprint(Max(x, y)) == \"max(x, y)\"\n \n     assert prntr.doprint(x**y) == 'x**y'\n     assert prntr.doprint(Mod(x, 2)) == 'x % 2'\n@@ -35,7 +37,8 @@ def test_PythonCodePrinter():\n     assert prntr.doprint(Mod(-x, y)) == '(-x) % y'\n     assert prntr.doprint(And(x, y)) == 'x and y'\n     assert prntr.doprint(Or(x, y)) == 'x or y'\n-    assert not prntr.module_imports\n+    assert prntr.doprint(Min(x, y)) == \"min(x, y)\"\n+    assert prntr.doprint(Max(x, y)) == \"max(x, y)\"\n \n     assert prntr.doprint(pi) == 'math.pi'\n     assert prntr.module_imports == {'math': {'pi'}}\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..7fdbdd2 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,27 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+from sympy import lambdify\n+\n+def test_lambdify_tuple_with_one_element():\n+    # Test for tuple with one element\n+    f_single = lambdify([], (1,))\n+    assert f_single() == (1,)\n+    \n+    # Verify the generated source code\n+    source = inspect.getsource(f_single)\n+    assert 'return (1,)' in source\n+\n+def test_lambdify_tuple_with_multiple_elements():\n+    # Test for tuple with multiple elements\n+    f_multiple = lambdify([], (1, 2))\n+    assert f_multiple() == (1, 2)\n+    \n+    # Verify the generated source code\n+    source = inspect.getsource(f_multiple)\n+    assert 'return (1, 2)' in source\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..8c0a3a9 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,8 +1,27 @@\n+\n+def test_symbols_function_with_parentheses():\n+    # Test case derived from the issue\n+    q, u = symbols(('q:2', 'u:2'), cls=Function)\n+    assert isinstance(q[0], UndefinedFunction)\n+    assert isinstance(q[1], UndefinedFunction)\n+    assert isinstance(u[0], UndefinedFunction)\n+    assert isinstance(u[1], UndefinedFunction)\n+\n+    # Additional cases to ensure consistency\n+    x, y = symbols(('x:3', 'y:3'), cls=Function)\n+    assert isinstance(x[0], UndefinedFunction)\n+    assert isinstance(x[1], UndefinedFunction)\n+    assert isinstance(x[2], UndefinedFunction)\n+    assert isinstance(y[0], UndefinedFunction)\n+    assert isinstance(y[1], UndefinedFunction)\n+    assert isinstance(y[2], UndefinedFunction)\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n from sympy.core.sympify import sympify  # can't import as S yet\n-from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n+from sympy.core.symbol import uniquely_named_symbol, _symbol, Str, symbols\n+from sympy.core.function import Function, UndefinedFunction\n \n from sympy.testing.pytest import raises\n from sympy.core.symbol import disambiguate\n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..b2b5c11 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -182,8 +182,45 @@ def execute_gamma_simplify_tests_for_function(tfunc, D):\n     st = tfunc(t)\n     assert _is_tensor_eq(st, t)\n \n+def test_kahane_leading_gamma_matrix_bug():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n+    \n+    # Test case from issue: contraction at the beginning\n+    t = G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+    \n+    # Test case from issue: contraction at the end\n+    t = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    # Additional test cases for deeper verification:\n+    \n+    # Test contraction in the middle\n+    t = G(mu)*G(rho)*G(-mu)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+    \n+    # Test multiple contractions\n+    t = G(mu)*G(-mu)*G(rho)*G(nu)*G(-nu)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(16*G(rho)*G(sigma))\n+    \n+    # Test no contraction, order should remain the same\n+    t = G(rho)*G(sigma)*G(mu)*G(nu)\n+    r = kahane_simplify(t)\n+    assert r.equals(G(rho)*G(sigma)*G(mu)*G(nu))\n+\n+    # Check with no gamma matrices, should return identity\n+    t = G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*eye(4))\n \n-def test_kahane_algorithm():\n+    # Check with identity elements\n+    t = G(mu)*G(-mu)*G(-rho)*G(rho)\n+    r = kahane_simplify(t)\n+    assert r.equals(16*eye(4))\n     # Wrap this function to convert to and from TIDS:\n \n     def tfunc(e):\n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..a7a2f47 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -37,10 +37,22 @@ def test_binary_symbols():\n     assert Contains(x, FiniteSet(y, Eq(z, True))\n         ).binary_symbols == {y, z}\n \n+from sympy import Symbol, Contains, FiniteSet, S, raises\n \n def test_as_set():\n     x = Symbol('x')\n     y = Symbol('y')\n+\n+    # Test to ensure as_set raises NotImplementedError for Contains\n+    raises(NotImplementedError, lambda: Contains(x, FiniteSet(y)).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, S.Integers).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, S.Reals).as_set())\n+\n+    # Test within a Piecewise function to ensure it raises the expected error\n+    from sympy import Piecewise\n+    raises(NotImplementedError, lambda: Piecewise((6, Contains(x, S.Reals).as_set()), (7, True)))\n+    x = Symbol('x')\n+    y = Symbol('y')\n     # Contains is a BooleanFunction whose value depends on an arg's\n     # containment in a Set -- rewriting as a Set is not yet implemented\n     raises(NotImplementedError, lambda:\n@@ -48,4 +60,4 @@ def test_as_set():\n \n def test_type_error():\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..00c38c1 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,6 +528,29 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n+from sympy import exp\n+from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+from sympy.physics.units.systems.si import SI\n+from sympy.physics.units import Quantity\n+\n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n def test_issue_20288():\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..ab99aba 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -561,6 +561,48 @@ def test_issue_24062():\n     exp_expr = 1 + exp(expr)\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n+def test_issue_collect_factor_and_dimension_equivalent_dimensions():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+    from sympy.physics.units.systems.si import SI\n+\n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * meter / second)\n+\n+    a1 = Quantity('a1')\n+    SI.set_quantity_dimension(a1, acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)\n+\n+    t1 = Quantity('t1')\n+    SI.set_quantity_dimension(t1, time)\n+    SI.set_quantity_scale_factor(t1, 5 * second)\n+\n+    expr1 = a1 * t1 + v1\n+    # should not throw ValueError here\n+    factor, dimension = SI._collect_factor_and_dimension(expr1)\n+    assert dimension == velocity\n+    assert factor == -49.0 * meter / second + 2 * meter / second\n+\n+def test_issue_24211():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+    from sympy.physics.units.systems.si import SI\n+\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1 * T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n \n def test_prefixed_property():\n     assert not meter.is_prefixed\n",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..879f873 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,3 +1,4 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n@@ -56,8 +57,30 @@ def test_homomorphism():\n     assert T.domain == F\n     assert T.codomain == D\n     assert T(a*b) == p\n+def test_check_homomorphism_permutation_group():\n+    from sympy.combinatorics.named_groups import DihedralGroup\n+    \n+    # Test case using DihedralGroup(3)\n+    D3 = DihedralGroup(3)\n+    T = homomorphism(D3, D3, D3.generators, D3.generators)\n+    assert T.is_isomorphism()\n \n-def test_isomorphisms():\n+    # Additional test case: exploiting inverses and identity\n+    a = Permutation(0, 1, 2)\n+    b = Permutation(0, 1)\n+    G = PermutationGroup([a, b])\n+    T = homomorphism(G, G, G.generators, G.generators)\n+    assert T.is_isomorphism()\n+    assert T.invert(a**2) == a**-2  # Ensure inverse is correctly computed\n+\n+    # Test with inverses directly\n+    T = homomorphism(G, G, G.generators, [a**-1, b**-1])\n+    assert not T.is_isomorphism()  # Different images should not form an isomorphism\n+\n+    # Identity check\n+    identity = Permutation([])\n+    T = homomorphism(G, G, G.generators, [identity, identity])\n+    assert T.is_trivial()\n \n     F, a, b = free_group(\"a, b\")\n     E, c, d = free_group(\"c, d\")\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..5edfd28 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -270,7 +270,27 @@ def test_PolyElement_as_expr():\n     R, = ring(\"\", ZZ)\n     assert R(3).as_expr() == 3\n \n-def test_PolyElement_from_expr():\n+def test_PolyElement_as_expr_with_different_symbols():\n+    from sympy import ring, ZZ, symbols\n+    R, x, y, z = ring(\"x,y,z\", ZZ)\n+    f = 3*x**2*y - x*y*z + 7*z**3 + 1\n+\n+    # Test case from the issue with new symbols\n+    U, V, W = symbols(\"u,v,w\")\n+    g = 3*U**2*V - U*V*W + 7*W**3 + 1\n+    assert f.as_expr(U, V, W) == g\n+\n+    # Test case with fewer symbols than expected\n+    raises(ValueError, lambda: f.as_expr(U, V))\n+\n+    # Test case with more symbols than expected\n+    extra_symbol = symbols(\"extra\")\n+    raises(ValueError, lambda: f.as_expr(U, V, W, extra_symbol))\n+\n+    # Test case with same symbols as the ring but different objects\n+    X, Y, Z = symbols(\"x,y,z\")\n+    g_same_symbols = 3*X**2*Y - X*Y*Z + 7*Z**3 + 1\n+    assert f.as_expr(X, Y, Z) == g_same_symbols\n     x, y, z = symbols(\"x,y,z\")\n     R, X, Y, Z = ring((x, y, z), ZZ)\n \n",
  "sympy__sympy-24661": "diff --git a/sympy/parsing/tests/test_sympy_parser.py b/sympy/parsing/tests/test_sympy_parser.py\nindex 3723931..462b834 100644\n--- a/sympy/parsing/tests/test_sympy_parser.py\n+++ b/sympy/parsing/tests/test_sympy_parser.py\n@@ -274,6 +274,37 @@ def test_convert_equals_signs():\n         transformations=transformations) == Eq(Eq(2*y, x), False)\n \n \n+from sympy.parsing.sympy_parser import parse_expr\n+from sympy.core import Symbol, Function, Float, Rational, Integer, I, Mul, Pow, Eq, Lt, Le, Gt, Ge, Ne\n+\n+def test_issue_24288():\n+    inputs = {\n+        \"1 < 2\": Lt(1, 2, evaluate=False),\n+        \"1 <= 2\": Le(1, 2, evaluate=False),\n+        \"1 > 2\": Gt(1, 2, evaluate=False),\n+        \"1 >= 2\": Ge(1, 2, evaluate=False),\n+        \"1 != 2\": Ne(1, 2, evaluate=False),\n+        \"1 == 2\": Eq(1, 2, evaluate=False)\n+    }\n+    for text, result in inputs.items():\n+        assert parse_expr(text, evaluate=False) == result\n+\n+def test_evaluate_false_with_symbols():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    assert parse_expr(\"x < y\", evaluate=False) == Lt(x, y, evaluate=False)\n+    assert parse_expr(\"x <= y\", evaluate=False) == Le(x, y, evaluate=False)\n+    assert parse_expr(\"x > y\", evaluate=False) == Gt(x, y, evaluate=False)\n+    assert parse_expr(\"x >= y\", evaluate=False) == Ge(x, y, evaluate=False)\n+    assert parse_expr(\"x != y\", evaluate=False) == Ne(x, y, evaluate=False)\n+    assert parse_expr(\"x == y\", evaluate=False) == Eq(x, y, evaluate=False)\n+\n+def test_evaluate_false_complex_expressions():\n+    x = Symbol('x')\n+    assert parse_expr(\"2*x < 4\", evaluate=False) == Lt(Mul(2, x), Integer(4), evaluate=False)\n+    assert parse_expr(\"2*x**2 >= 4\", evaluate=False) == Ge(Mul(2, x**2), Integer(4), evaluate=False)\n+    assert parse_expr(\"x**2 + 1 != x\", evaluate=False) == Ne(Pow(x, 2) + Integer(1), x, evaluate=False)\n+\n def test_parse_function_issue_3539():\n     x = Symbol('x')\n     f = Function('f')\n",
  "astropy__astropy-14369": "diff --git a/astropy/units/tests/test_format.py b/astropy/units/tests/test_format.py\nindex 062b5f4..8b7be3b 100644\n--- a/astropy/units/tests/test_format.py\n+++ b/astropy/units/tests/test_format.py\n@@ -61,6 +61,8 @@ def test_unit_grammar_fail(string):\n         ([\"mW/(m2)\"], u.Unit(u.erg / u.cm**2 / u.s)),\n         ([\"km/s\", \"km.s-1\"], u.km / u.s),\n         ([\"10pix/nm\"], u.Unit(10 * u.pix / u.nm)),\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.J / u.m / u.s / u.kpc**2)),\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.J / u.s / u.kpc**2)),\n         ([\"1.5x10+11m\"], u.Unit(1.5e11 * u.m)),\n         ([\"1.5\u00d710+11m\"], u.Unit(1.5e11 * u.m)),\n         ([\"m2\"], u.m**2),\n",
  "astropy__astropy-14598": "",
  "django__django-11299": "",
  "django__django-11477": "diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex e4898b6..e42b056 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -164,6 +164,56 @@ class URLTranslationTests(URLTestCaseBase):\n             self.assertEqual(translation.get_language(), 'nl')\n \n \n+from django.urls import re_path, resolve\n+from django.utils.translation import gettext_lazy as _\n+\n+...\n+\n+class URLTranslationTests(URLTestCaseBase):\n+\n+    def test_translate_url_with_optional_named_groups(self):\n+        # Test case for the issue described\n+        # Ensure that the translate_url correctly handles optional named groups\n+        with translation.override('en'):\n+            self.assertEqual(\n+                translate_url('/en/with-arguments/regular-argument/', 'nl'),\n+                '/nl/with-arguments/regular-argument/',\n+            )\n+            self.assertEqual(\n+                translate_url('/en/with-arguments/regular-argument/optional.html', 'nl'),\n+                '/nl/with-arguments/regular-argument/optional.html',\n+            )\n+            self.assertEqual(\n+                translate_url('/en/regex_optional/1/', 'nl'),\n+                '/nl/regex_optional/1/',\n+            )\n+            self.assertEqual(\n+                translate_url('/en/regex_optional/1/2/', 'nl'),\n+                '/nl/regex_optional/1/2/',\n+            )\n+\n+    def test_optional_named_groups_in_url_pattern(self):\n+        urlpatterns = [\n+            re_path(\n+                r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?$',\n+                views.empty_view,\n+                name='regex_optional'\n+            ),\n+        ]\n+\n+        for url, expected_kwargs in [\n+            ('/regex_optional/1/2/', {'arg1': '1', 'arg2': '2'}),\n+            ('/regex_optional/1/', {'arg1': '1', 'arg2': None}),\n+        ]:\n+            with self.subTest(url=url):\n+                match = resolve(url)\n+                self.assertEqual(match.url_name, 'regex_optional')\n+                self.assertEqual(match.kwargs, expected_kwargs)\n+                self.assertEqual(\n+                    match.route,\n+                    r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?',\n+                )\n+\n class URLNamespaceTests(URLTestCaseBase):\n     \"\"\"\n     Tests if the translations are still working within namespaces.\n",
  "django__django-12273": "diff --git a/tests/model_inheritance_regress/tests.py b/tests/model_inheritance_regress/tests.py\nindex d79faca..41bd050 100644\n--- a/tests/model_inheritance_regress/tests.py\n+++ b/tests/model_inheritance_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Regression tests for Model inheritance behavior.\n \"\"\"\n@@ -9,6 +10,7 @@ from django import forms\n from django.test import TestCase\n \n from .models import (\n+    Item, Derived,\n     ArticleWithAuthor, BachelorParty, BirthdayParty, BusStation, Child,\n     DerivedM, InternalCertificationAudit, ItalianRestaurant, M2MChild,\n     MessyBachelorParty, ParkingLot, ParkingLot3, ParkingLot4A, ParkingLot4B,\n",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..ff65622 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -604,8 +604,43 @@ class DeletionTests(TestCase):\n                 signal.disconnect(receiver, sender=Referrer)\n \n \n+from django.test import TestCase\n+from django.db import connection\n+from myapp.models import User, Avatar, Origin, Referrer\n+\n class FastDeleteTests(TestCase):\n \n+    def test_fast_delete_all(self):\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        # No subqueries should be used when performing a full delete.\n+        self.assertNotIn('SELECT', sql)\n+\n+    def test_delete_with_lock(self):\n+        \"\"\"\n+        Verify that DELETE doesn't use a subquery, which prevents locking issues.\n+        \"\"\"\n+        with connection.cursor() as cursor:\n+            cursor.execute('LOCK TABLES testapp_user WRITE')\n+            try:\n+                with self.assertNumQueries(1) as ctx:\n+                    User.objects.all().delete()\n+                sql = ctx.captured_queries[0]['sql']\n+                self.assertNotIn('SELECT', sql)\n+            finally:\n+                cursor.execute('UNLOCK TABLES')\n+\n+    def test_large_table_delete_performance(self):\n+        \"\"\"\n+        Ensure deletion performance is reasonable for large tables.\n+        \"\"\"\n+        User.objects.bulk_create(User() for _ in range(100000))\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        self.assertNotIn('SELECT', sql)\n+\n     def test_fast_delete_fk(self):\n         u = User.objects.create(\n             avatar=Avatar.objects.create()\n@@ -702,4 +737,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..a7237db 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from decimal import Decimal\n \n@@ -24,8 +25,27 @@ class DecimalFieldTests(TestCase):\n         msg = '\u201cabc\u201d value must be a decimal number.'\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n-\n-    def test_default(self):\n+    def test_invalid_value(self):\n+        field = models.DecimalField(max_digits=4, decimal_places=2)\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        tests = [\n+            {},\n+            [],\n+            (),\n+            set(),\n+            object(),\n+            complex(0, 1),\n+            'non-numeric string',\n+            b'non-numeric byte-string',\n+            # Additional test cases\n+            {'key': 'value'},\n+            [{'key': 'value'}],\n+            None,\n+        ]\n+        for value in tests:\n+            with self.subTest(value=value):\n+                with self.assertRaisesMessage(ValidationError, msg % (value,)):\n+                    field.clean(value, None)\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n \n",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..45353b2 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,8 +1,11 @@\n+\n import datetime\n import pickle\n \n import django\n from django.db import models\n+from django.db.models import Sum\n+from .models import Toy\n from django.test import TestCase\n \n from .models import Container, Event, Group, Happening, M2MModel, MyEvent\n@@ -29,7 +32,22 @@ class PickleabilityTestCase(TestCase):\n     def test_string_as_default(self):\n         self.assert_pickles(Happening.objects.filter(name=\"test\"))\n \n-    def test_standalone_method_as_default(self):\n+    def test_pickle_queryset_with_values_and_annotate(self):\n+        # Set up the data\n+        Toy.objects.create(name='foo', price=10, material='wood')\n+        Toy.objects.create(name='bar', price=20, material='plastic')\n+        Toy.objects.create(name='baz', price=100, material='wood')\n+\n+        # Create a queryset with values and annotate\n+        qs = Toy.objects.values('material').annotate(total_price=Sum('price'))\n+\n+        # Pickle and unpickle the queryset\n+        reloaded = Toy.objects.all()\n+        reloaded.query = pickle.loads(pickle.dumps(qs.query))\n+\n+        # Check that the reloaded queryset returns dictionaries as expected\n+        expected = [{'material': 'wood', 'total_price': 110}, {'material': 'plastic', 'total_price': 20}]\n+        self.assertEqual(list(reloaded), expected)\n         self.assert_pickles(Happening.objects.filter(number1=1))\n \n     def test_staticmethod_as_default(self):\n",
  "django__django-13449": "diff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\nindex 3f59cdf..d9c7568 100644\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -11,4 +11,5 @@ class Employee(models.Model):\n     department = models.CharField(max_length=40, blank=False, null=False)\n     hire_date = models.DateField(blank=False, null=False)\n     age = models.IntegerField(blank=False, null=False)\n-    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\n",
  "django__django-13512": "diff --git a/tests/forms_tests/field_tests/test_jsonfield.py b/tests/forms_tests/field_tests/test_jsonfield.py\nindex e31bff4..5f653cc 100644\n--- a/tests/forms_tests/field_tests/test_jsonfield.py\n+++ b/tests/forms_tests/field_tests/test_jsonfield.py\n@@ -30,7 +30,15 @@ class JSONFieldTest(SimpleTestCase):\n         self.assertEqual(field.prepare_value(None), 'null')\n         self.assertEqual(field.prepare_value('foo'), '\"foo\"')\n \n-    def test_widget(self):\n+    def test_prepare_value_with_unicode(self):\n+        field = JSONField()\n+        # Test Chinese characters\n+        self.assertEqual(field.prepare_value({'a': '\u4e2d\u56fd'}), '{\"a\": \"\u4e2d\u56fd\"}')\n+        self.assertEqual(field.prepare_value('\u4f60\u597d\uff0c\u4e16\u754c'), '\"\u4f60\u597d\uff0c\u4e16\u754c\"')\n+        # Test with emojis\n+        self.assertEqual(field.prepare_value({'a': '\ud83d\ude00\ud83d\udc31'}), '{\"a\": \"\ud83d\ude00\ud83d\udc31\"}')\n+        # Test with mixed Unicode and ASCII\n+        self.assertEqual(field.prepare_value(['Hello', '\u4f60\u597d']), '[\"Hello\", \"\u4f60\u597d\"]')\n         field = JSONField()\n         self.assertIsInstance(field.widget, Textarea)\n \n",
  "django__django-14404": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 8fb91af..6f4d50f 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -6602,6 +6602,42 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         response = self.client.get(known_url[:-1])\n         self.assertRedirects(response, known_url, status_code=301, target_status_code=403)\n \n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1], SCRIPT_NAME='/prefix/')\n+        self.assertRedirects(\n+            response,\n+            '/prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/prefix/')\n+    def test_missing_slash_append_slash_true_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n     @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n         user = User.objects.create_user(\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..465e994 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -691,7 +691,44 @@ class WriterTests(SimpleTestCase):\n         result = self.safe_exec(output)\n         self.assertIn(\"Migration\", result)\n \n-    def test_migration_path(self):\n+    def test_migration_imports_with_custom_field_and_mixin(self):\n+        \"\"\"\n+        Test that the generated migration for a model with a custom field and mixin\n+        correctly includes the necessary imports.\n+        \"\"\"\n+        class MyField(models.TextField):\n+            pass\n+\n+        class MyMixin:\n+            pass\n+\n+        class MyBaseModel(models.Model):\n+            class Meta:\n+                abstract = True\n+        \n+        fields = {\n+            'name': MyField(primary_key=True),\n+        }\n+\n+        migration = type(\"Migration\", (migrations.Migration,), {\n+            \"operations\": [\n+                migrations.CreateModel(\n+                    name='MyModel',\n+                    fields=tuple(fields.items()),\n+                    bases=(MyMixin, MyBaseModel),\n+                ),\n+            ],\n+            \"dependencies\": [],\n+        })\n+\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        result = self.safe_exec(output)\n+        # Check that the necessary imports are included\n+        self.assertIn(\"from django.db import models\", output)\n+        self.assertIn(\"import app.models\", output)\n+        # Ensure the migration runs without NameError\n+        self.assertIn(\"Migration\", result)\n         test_apps = [\n             'migrations.migrations_test_apps.normal',\n             'migrations.migrations_test_apps.with_package_model',\n",
  "django__django-15375": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1d4ef56..010ffe3 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1629,8 +1629,23 @@ class AggregateTestCase(TestCase):\n             value=Sum('price', filter=Q(rating__lt=3.0), default=Avg('pages') / 10.0),\n         )\n         self.assertAlmostEqual(result['value'], Decimal('61.72'), places=2)\n-\n-    def test_exists_none_with_aggregate(self):\n+    def test_aggregation_default_after_annotation(self):\n+        result = Book.objects.annotate(\n+            double_price=F('price') * 2,\n+        ).aggregate(value=Sum('double_price', default=0))\n+        self.assertGreaterEqual(result['value'], 0)\n+\n+    def test_aggregation_default_with_filter(self):\n+        result = Book.objects.annotate(\n+            double_price=F('price') * 2,\n+        ).aggregate(value=Sum('double_price', filter=Q(rating__gt=3.0), default=0))\n+        self.assertGreaterEqual(result['value'], 0)\n+\n+    def test_aggregation_default_with_no_data(self):\n+        result = Book.objects.filter(rating__gt=5).annotate(\n+            double_price=F('price') * 2,\n+        ).aggregate(value=Sum('double_price', default=0))\n+        self.assertEqual(result['value'], 0)\n         qs = Book.objects.all().annotate(\n             count=Count('id'),\n             exists=Exists(Author.objects.none()),\n@@ -1642,4 +1657,4 @@ class AggregateTestCase(TestCase):\n             count=Count('id'),\n             exists=Exists(Author.objects.extra(where=['1=0'])),\n         )\n-        self.assertEqual(len(qs), 6)\n+        self.assertEqual(len(qs), 6)\n",
  "django__django-15695": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 99db46a..5273bdf 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -2978,7 +2978,54 @@ class OperationTests(OperationTestBase):\n             \"rename_pony_weight_pink_new_pony_test_idx\",\n         )\n \n-        new_state = project_state.clone()\n+        import django\n+        from django.db import connection, migrations, models\n+        from django.test import TestCase\n+        from django.db.utils import ProgrammingError\n+\n+        class RenameIndexTests(TestCase):\n+            def test_rename_index_with_unnamed_index_moving_forward_and_backward(self):\n+                app_label = 'test_app'\n+                project_state = migrations.state.ProjectState()\n+                table_name = 'test_table'\n+                \n+                # Initial state with unnamed index\n+                with connection.schema_editor() as editor:\n+                    editor.create_model(models.Model(\n+                        'Pony',\n+                        (('weight', models.IntegerField()), ('pink', models.IntegerField())),\n+                        options={'unique_together': {('weight', 'pink')}},\n+                    ))\n+\n+                operation = migrations.RenameIndex(\n+                    model_name='Pony',\n+                    old_fields=('weight', 'pink'),\n+                    new_name='new_pony_test_idx',\n+                )\n+\n+                # Forward migration: Create new named index\n+                new_state = project_state.clone()\n+                operation.state_forwards(app_label, new_state)\n+                with connection.schema_editor() as editor:\n+                    operation.database_forwards(app_label, editor, project_state, new_state)\n+\n+                self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+\n+                # Backward migration: Should restore to old auto-generated name\n+                with connection.schema_editor() as editor:\n+                    try:\n+                        operation.database_backwards(app_label, editor, new_state, project_state)\n+                    except ProgrammingError:\n+                        self.fail(\"Backward migration failed due to existing index\")\n+\n+                # Reapply forward migration: Should not crash\n+                with connection.schema_editor() as editor:\n+                    try:\n+                        operation.database_forwards(app_label, editor, project_state, new_state)\n+                    except ProgrammingError:\n+                        self.fail(\"Reapplying forward migration failed due to existing index\")\n+\n+                self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n         operation.state_forwards(app_label, new_state)\n         # Rename index.\n         with connection.schema_editor() as editor:\n",
  "django__django-15732": "",
  "django__django-15916": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex cc5e08c..0a5326b 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -3497,7 +3497,43 @@ class FormFieldCallbackTests(SimpleTestCase):\n             )\n \n \n-class LocalizedModelFormTest(TestCase):\n+from django import forms\n+from django.test import TestCase\n+from .models import Person, Triple\n+\n+class ModelFormFieldCallbackTest(TestCase):\n+    def test_modelform_factory_uses_meta_formfield_callback(self):\n+        def callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea)\n+\n+        class BaseForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = ['id', 'name']\n+                formfield_callback = callback\n+\n+        FactoryForm = modelform_factory(Person, form=BaseForm)\n+        \n+        for field in FactoryForm.base_fields.values():\n+            self.assertEqual(type(field.widget), forms.Textarea)\n+\n+    def test_modelform_factory_overrides_with_function_argument(self):\n+        def meta_callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea)\n+        \n+        def factory_callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.PasswordInput)\n+\n+        class BaseForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = ['id', 'name']\n+                formfield_callback = meta_callback\n+\n+        FactoryForm = modelform_factory(Person, form=BaseForm, formfield_callback=factory_callback)\n+        \n+        for field in FactoryForm.base_fields.values():\n+            self.assertEqual(type(field.widget), forms.PasswordInput)\n     def test_model_form_applies_localize_to_some_fields(self):\n         class PartiallyLocalizedTripleForm(forms.ModelForm):\n             class Meta:\n",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..0a9245e 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -12,7 +12,41 @@ from django.test.utils import isolate_apps\n from django.utils.translation import gettext_lazy, override\n \n from .models import Score\n-from .tests import SerializersTestBase, SerializersTransactionTestBase\n+from django.db import models\n+from django.core import serializers\n+from django.test import TestCase\n+\n+class TestTagMaster(models.Model):\n+    name = models.CharField(max_length=120)\n+\n+class TestTagManager(models.Manager):\n+    def get_queryset(self):\n+        return super().get_queryset().select_related(\"master\")\n+\n+class TestTag(models.Model):\n+    objects = TestTagManager()\n+    name = models.CharField(max_length=120)\n+    master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)\n+\n+class Test(models.Model):\n+    name = models.CharField(max_length=120)\n+    tags = models.ManyToManyField(TestTag, blank=True)\n+\n+class M2MCustomManagerSerializationTest(TestCase):\n+    def test_serialization_with_custom_manager_and_select_related(self):\n+        # Setup the test data\n+        tag_master = TestTagMaster.objects.create(name=\"master\")\n+        tag = TestTag.objects.create(name=\"tag\", master=tag_master)\n+        test = Test.objects.create(name=\"test\")\n+        test.tags.add(tag)\n+        test.save()\n+        \n+        # Attempt to serialize\n+        try:\n+            json_data = serializers.serialize(\"json\", [test])\n+            print(json_data)  # Output serialized data for verification\n+        except Exception as e:\n+            self.fail(f\"Serialization raised an exception: {e}\")\n \n \n class JsonSerializerTestCase(SerializersTestBase, TestCase):\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 53fdd55..9b03911 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -222,7 +222,16 @@ def test_mpl_toolkits():\n     assert type(pickle.loads(pickle.dumps(ax))) == parasite_axes.HostAxes\n \n \n-def test_standard_norm():\n+@pytest.mark.skipif(\n+    platform.system() != 'Darwin' or platform.machine() != 'arm64',\n+    reason=\"This test is specific to M1 Macs with macOS.\"\n+)\n+def test_dpi_after_unpickle():\n+    \"\"\"Test that DPI remains constant after unpickling on M1 Mac.\"\"\"\n+    fig = plt.figure(dpi=200)\n+    pickled_fig = pickle.dumps(fig)\n+    unpickled_fig = pickle.loads(pickled_fig)\n+    assert fig.dpi == unpickled_fig.dpi, \"DPI should remain the same after unpickling\"\n     assert type(pickle.loads(pickle.dumps(mpl.colors.LogNorm()))) \\\n         == mpl.colors.LogNorm\n \n",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 87375f2..a09a694 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6604,7 +6604,31 @@ def test_integrate(dask):\n         da.integrate(\"x2d\")\n \n \n+import pytest\n+import xarray as xr\n+import numpy as np\n+from xarray.testing import assert_allclose, assert_equal\n+\n @pytest.mark.parametrize(\"dask\", [True, False])\n+\n+def test_dataarray_integrate_deprecation_warning():\n+    da = xr.DataArray(np.random.rand(4, 3), dims=(\"x\", \"y\"), coords={\"x\": np.arange(4), \"y\": np.arange(3)})\n+\n+    # Check for FutureWarning when using 'dim' argument\n+    with pytest.warns(FutureWarning, match=\"Using the 'dim' argument is deprecated; use 'coord' instead\"):\n+        result = da.integrate(dim=\"x\")\n+\n+    # Check that using 'coord' works without warnings and produces correct results\n+    with pytest.warns(None) as record:\n+        result_coord = da.integrate(coord=\"x\")\n+    assert len(record) == 0  # No warnings should be raised with 'coord'\n+    \n+    expected_result = xr.DataArray(\n+        np.trapz(da.values, da[\"x\"].values, axis=0),\n+        dims=[\"y\"],\n+        coords={\"y\": da.coords[\"y\"].values},\n+    )\n+    assert_allclose(result_coord, expected_result)\n @pytest.mark.parametrize(\"which_datetime\", [\"np\", \"cftime\"])\n def test_trapz_datetime(dask, which_datetime):\n     rs = np.random.RandomState(42)\n",
  "pydata__xarray-4094": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex a2826fa..f76dc8a 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -3045,7 +3045,13 @@ class TestDataset:\n         d0 = D.isel(x=0)\n         assert_identical(d0, x0)\n \n-    def test_to_stacked_array_to_unstacked_dataset_different_dimension(self):\n+    def test_to_unstacked_dataset_single_dim_variable(self):\n+        # single dimension: regression test for issue GH4049\n+        arr = xr.DataArray(np.arange(3), coords=[(\"x\", [0, 1, 2])])\n+        data = xr.Dataset({\"a\": arr, \"b\": arr})\n+        stacked = data.to_stacked_array(\"y\", sample_dims=[\"x\"])\n+        unstacked = stacked.to_unstacked_dataset(\"y\")\n+        assert_identical(unstacked, data)\n         # test when variables have different dimensionality\n         a, b = create_test_stacked_array()\n         sample_dims = [\"x\"]\n",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..fd455d2 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -131,6 +131,37 @@ def test_regex_error(capsys: CaptureFixture) -> None:\n     assert assertString in output.err\n \n \n+from typing import Any\n+import pytest\n+import re\n+from pylint.lint import Run\n+from pylint.testutils import EMPTY_MODULE\n+\n+CSV_REGEX_COMMA_CASES = [\n+    (\"foo\", [\"foo\"]),\n+    (\"foo,bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar{1,3}\", [\"foo\", \"bar{1,3}\"]),\n+    (\"(foo{1,3}), (bar{2,4})\", [\"(foo{1,3})\", \"(bar{2,4})\"]),\n+    (\"name_(attr{1,3}), (foo_{1,3})\", [\"name_(attr{1,3})\", \"(foo_{1,3})\"]),\n+    (\"(foo{1,3},bar{1,3})\", [\"(foo{1,3},bar{1,3})\"]),\n+]\n+\n+@pytest.mark.parametrize(\"in_string,expected\", CSV_REGEX_COMMA_CASES)\n+def test_csv_regex_comma_in_quantifier(in_string: str, expected: list[str]) -> None:\n+    \"\"\"Check that we correctly parse a comma-separated regex when there are one\n+    or more commas within quantifier expressions.\n+    \"\"\"\n+    def _template_run(in_string: str) -> list[re.Pattern[Any]]:\n+        r = Run(\n+            [str(EMPTY_MODULE), rf\"--bad-names-rgx={in_string}\"],\n+            exit=False,\n+        )\n+        bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs\n+        return bad_names_rgxs\n+\n+    assert _template_run(in_string) == [re.compile(regex) for regex in expected]\n+\n def test_csv_regex_error(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error when an option is passed and one\n     of its comma-separated regular expressions values is an invalid regular expression.\n",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..3bfd2d6 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1156,6 +1156,9 @@ def test_summary_list_after_errors(testdir):\n     )\n \n \n+import pytest\n+from _pytest.main import ExitCode\n+\n def test_importorskip():\n     with pytest.raises(\n         pytest.skip.Exception,\n@@ -1184,4 +1187,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "diff --git a/testing/test_mark_expression.py b/testing/test_mark_expression.py\nindex 10b71e9..b7027d9 100644\n--- a/testing/test_mark_expression.py\n+++ b/testing/test_mark_expression.py\n@@ -133,9 +133,16 @@ def test_syntax_errors(expr: str, column: int, message: str) -> None:\n         \"if\",\n         \"else\",\n         \"while\",\n+        \"NoneKeyword\",\n+        \"TrueKeyword\",\n+        \"FalseKeyword\",\n     ),\n )\n def test_valid_idents(ident: str) -> None:\n+    # Test to ensure compile works with reserved keywords used as identifiers\n+    Expression.compile(\"None\")\n+    Expression.compile(\"True\")\n+    Expression.compile(\"False\")\n     assert evaluate(ident, {ident: True}.__getitem__)\n \n \n",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..1855ffa 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,30 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+\n+def test_feature_union_with_pandas_output():\n+    \"\"\"Test FeatureUnion with pandas output using a custom transformer that aggregates data.\"\"\"\n+    import pandas as pd\n+    import pytest\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn.pipeline import FeatureUnion\n+    from sklearn import set_config\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y: pd.Series | None = None, **kwargs):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y: pd.Series | None = None) -> pd.DataFrame:\n+            return X[\"value\"].groupby(X[\"date\"]).sum()\n+\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    # Test with pandas output, expecting a failure due to issue described\n+    set_config(transform_output=\"pandas\")\n+    union = FeatureUnion([(\"custom\", MyTransformer())])\n+    with pytest.raises(ValueError, match=\"Length mismatch\"):\n+        union.fit_transform(data)\n",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex f07be18..dc24d8d 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -11,6 +11,21 @@\n import pytest\n \n from sphinx import addnodes\n+from sphinx.testing.util import assert_node\n+from sphinx.ext.autodoc.typehints import _parse_annotation\n+\n+def test_parse_annotation_for_None():\n+    # Verify if None is correctly linked in both modes\n+\n+    # Case 1: autodoc_typehints='description'\n+    doctree = _parse_annotation(\"None\")\n+    assert_node(doctree, ([pending_xref, \"None\"],))\n+    assert_node(doctree[0], pending_xref, refdomain=\"py\", reftype=\"obj\", reftarget=\"None\")\n+\n+    # Case 2: autodoc_typehints='signature'\n+    doctree = _parse_annotation(\"None\")\n+    assert_node(doctree, ([pending_xref, \"None\"],))\n+    assert_node(doctree[0], pending_xref, refdomain=\"py\", reftype=\"obj\", reftarget=\"None\")\n \n \n @pytest.mark.sphinx('dummy', testroot='ext-autodoc')\n@@ -30,4 +45,4 @@ def test_autodoc(app, status, warning):\n my_name\n \n alias of bug2437.autodoc_dummy_foo.Foo\"\"\"\n-    assert warning.getvalue() == ''\n+    assert warning.getvalue() == ''\n",
  "sphinx-doc__sphinx-8056": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 1d6a8cf..9ed2dcc 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1096,6 +1096,32 @@ Do as you please\n \"\"\"\n         self.assertEqual(expected, actual)\n \n+    def test_combined_parameters_optional(self):\n+        # Test case for the reported issue with combined parameters with \"optional\"\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))        \n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`, *optional*\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`, *optional*\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n+\n \n class NumpyDocstringTest(BaseDocstringTest):\n     docstrings = [(\n@@ -1332,6 +1358,32 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n \"\"\"\n         self.assertEqual(expected, actual)\n \n+    def test_combined_parameters_optional(self):\n+        # Test case for the reported issue with combined parameters with \"optional\"\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))        \n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`, *optional*\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`, *optional*\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n+\n         config = Config(napoleon_use_param=True)\n         actual = str(NumpyDocstring(docstring, config))\n         expected = \"\"\"\\\n@@ -1340,6 +1392,32 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n \"\"\"\n         self.assertEqual(expected, actual)\n \n+    def test_combined_parameters_optional(self):\n+        # Test case for the reported issue with combined parameters with \"optional\"\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))        \n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`, *optional*\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`, *optional*\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n+\n     def test_parameters_without_class_reference(self):\n         docstring = \"\"\"\\\n Parameters\n@@ -1355,6 +1433,32 @@ param1 : MyClass instance\n \"\"\"\n         self.assertEqual(expected, actual)\n \n+    def test_combined_parameters_optional(self):\n+        # Test case for the reported issue with combined parameters with \"optional\"\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))        \n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`, *optional*\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`, *optional*\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n+\n         config = Config(napoleon_use_param=True)\n         actual = str(NumpyDocstring(dedent(docstring), config))\n         expected = \"\"\"\\\n@@ -1363,6 +1467,32 @@ param1 : MyClass instance\n \"\"\"\n         self.assertEqual(expected, actual)\n \n+    def test_combined_parameters_optional(self):\n+        # Test case for the reported issue with combined parameters with \"optional\"\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))        \n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`, *optional*\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`, *optional*\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n+\n     def test_see_also_refs(self):\n         docstring = \"\"\"\\\n numpy.multivariate_normal(mean, cov, shape=None, spam=None)\n@@ -1388,6 +1518,32 @@ numpy.multivariate_normal(mean, cov, shape=None, spam=None)\n \"\"\"\n         self.assertEqual(expected, actual)\n \n+    def test_combined_parameters_optional(self):\n+        # Test case for the reported issue with combined parameters with \"optional\"\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))        \n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`, *optional*\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`, *optional*\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n+\n         docstring = \"\"\"\\\n numpy.multivariate_normal(mean, cov, shape=None, spam=None)\n \n@@ -1414,6 +1570,32 @@ numpy.multivariate_normal(mean, cov, shape=None, spam=None)\n \"\"\"\n         self.assertEqual(expected, actual)\n \n+    def test_combined_parameters_optional(self):\n+        # Test case for the reported issue with combined parameters with \"optional\"\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))        \n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`, *optional*\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`, *optional*\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n+\n     def test_colon_in_return_type(self):\n         docstring = \"\"\"\n Summary\n@@ -1437,6 +1619,32 @@ Summary\n \n         self.assertEqual(expected, actual)\n \n+    def test_combined_parameters_optional(self):\n+        # Test case for the reported issue with combined parameters with \"optional\"\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))        \n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`, *optional*\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`, *optional*\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n+\n     def test_underscore_in_attribute(self):\n         docstring = \"\"\"\n Attributes\n@@ -1457,6 +1665,32 @@ arg_ : type\n \n         self.assertEqual(expected, actual)\n \n+    def test_combined_parameters_optional(self):\n+        # Test case for the reported issue with combined parameters with \"optional\"\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))        \n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`, *optional*\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`, *optional*\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n+\n     def test_underscore_in_attribute_strip_signature_backslash(self):\n         docstring = \"\"\"\n Attributes\n@@ -1478,6 +1712,32 @@ arg_ : type\n \n         self.assertEqual(expected, actual)\n \n+    def test_combined_parameters_optional(self):\n+        # Test case for the reported issue with combined parameters with \"optional\"\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))        \n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`, *optional*\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`, *optional*\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n+\n     def test_raises_types(self):\n         docstrings = [(\"\"\"\n Example Function\n@@ -1681,6 +1941,32 @@ Example Function\n         actual = str(NumpyDocstring(docstring, config, app, \"method\"))\n         self.assertEqual(expected, actual)\n \n+    def test_combined_parameters_optional(self):\n+        # Test case for the reported issue with combined parameters with \"optional\"\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))        \n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`, *optional*\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`, *optional*\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n+\n     def test_section_header_underline_length(self):\n         docstrings = [(\"\"\"\n Summary line\n@@ -1927,6 +2213,32 @@ definition_after_normal_text : int\n         actual = str(NumpyDocstring(docstring, config))\n         self.assertEqual(expected, actual)\n \n+    def test_combined_parameters_optional(self):\n+        # Test case for the reported issue with combined parameters with \"optional\"\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))        \n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`, *optional*\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`, *optional*\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n+\n         expected = \"\"\"One line summary.\n \n :Parameters: * **no_list** (:class:`int`)\n@@ -2019,6 +2331,32 @@ definition_after_normal_text : int\n         actual = str(NumpyDocstring(docstring, config))\n         self.assertEqual(expected, actual)\n \n+    def test_combined_parameters_optional(self):\n+        # Test case for the reported issue with combined parameters with \"optional\"\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))        \n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`, *optional*\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`, *optional*\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n+\n     def test_token_type(self):\n         tokens = (\n             (\"1\", \"literal\"),\n@@ -2201,6 +2539,32 @@ definition_after_normal_text : int\n         actual = str(NumpyDocstring(docstring, config))\n         self.assertEqual(expected, actual)\n \n+    def test_combined_parameters_optional(self):\n+        # Test case for the reported issue with combined parameters with \"optional\"\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))        \n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`, *optional*\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`, *optional*\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n+\n \n @contextmanager\n def warns(warning, match):\n",
  "sphinx-doc__sphinx-8551": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex fd4bdc4..3542bad 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -773,9 +773,41 @@ def test_pydecoratormethod_signature(app):\n     assert 'deco' in domain.objects\n     assert domain.objects['deco'] == ('index', 'deco', 'method')\n \n-\n @pytest.mark.sphinx(freshenv=True)\n-def test_module_index(app):\n+def test_type_rtype_class_lookup(app):\n+    text = \"\"\"\n+.. py:module:: mod\n+\n+.. py:class:: A\n+.. py:class:: submod.A\n+\n+.. py:function:: f()\n+\n+   :param A a:\n+   :param submod.A b:\n+   :rtype: A\n+   :rtype: submod.A\n+\n+.. py:currentmodule:: mod.submod\n+\n+.. py:function:: g()\n+\n+   :param A a: Links to mod.submod.A\n+   :param mod.A b:\n+   :rtype: A\n+\"\"\"\n+    # Parse the provided RST text\n+    doctree = restructuredtext.parse(app, text)\n+\n+    # Check if the cross-references are resolved correctly without ambiguity\n+    assert_node(doctree[2][2][0][0][2], pending_xref, reftarget=\"mod.submod.A\")\n+    assert_node(doctree[2][2][1][0][2], pending_xref, reftarget=\"mod.A\")\n+    assert_node(doctree[2][3][0][2], pending_xref, reftarget=\"mod.submod.A\")\n+\n+    # Checking 'g' function in submod\n+    assert_node(doctree[4][2][0][0][2], pending_xref, reftarget=\"mod.submod.A\")\n+    assert_node(doctree[4][2][1][0][2], pending_xref, reftarget=\"mod.A\")\n+    assert_node(doctree[4][3][0][2], pending_xref, reftarget=\"mod.submod.A\")\n     text = (\".. py:module:: docutils\\n\"\n             \".. py:module:: sphinx\\n\"\n             \".. py:module:: sphinx.config\\n\"\n",
  "sphinx-doc__sphinx-8593": "",
  "sphinx-doc__sphinx-9230": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex e86a758..f82f8ba 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -922,7 +922,91 @@ def test_info_field_list(app):\n             \"   :param age: blah blah\\n\"\n             \"   :type age: int\\n\"\n             \"   :param items: blah blah\\n\"\n-            \"   :type items: Tuple[str, ...]\\n\")\n+            \"   :type items: Tuple[str, ...]\\n\"\n+            \"   :param dict(str, str) opc_meta: (optional)\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+    print(doctree)\n+\n+    assert_node(doctree, (nodes.target,\n+                          addnodes.index,\n+                          addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                                    [desc_addname, \"example.\"],\n+                                                    [desc_name, \"Class\"])],\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree[3][1][0][0],\n+                ([nodes.field_name, \"Parameters\"],\n+                 [nodes.field_body, nodes.bullet_list, ([nodes.list_item, nodes.paragraph],\n+                                                        [nodes.list_item, nodes.paragraph],\n+                                                        [nodes.list_item, nodes.paragraph],\n+                                                        [nodes.list_item, nodes.paragraph])]))\n+\n+    # :param str name:\n+    assert_node(doctree[3][1][0][0][1][0][0][0],\n+                ([addnodes.literal_strong, \"name\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"blah blah\"))\n+    assert_node(doctree[3][1][0][0][1][0][0][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+\n+    # :param age: + :type age:\n+    assert_node(doctree[3][1][0][0][1][0][1][0],\n+                ([addnodes.literal_strong, \"age\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"int\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"blah blah\"))\n+    assert_node(doctree[3][1][0][0][1][0][1][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"int\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+\n+    # :param items: + :type items:\n+    assert_node(doctree[3][1][0][0][1][0][2][0],\n+                ([addnodes.literal_strong, \"items\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"Tuple\"],\n+                 [addnodes.literal_emphasis, \"[\"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \", \"],\n+                 [addnodes.literal_emphasis, \"...\"],\n+                 [addnodes.literal_emphasis, \"]\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"blah blah\"))\n+    assert_node(doctree[3][1][0][0][1][0][2][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"Tuple\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][2][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+\n+    # :param dict(str, str) opc_meta: (optional)\n+    assert_node(doctree[3][1][0][0][1][0][3][0],\n+                ([addnodes.literal_strong, \"opc_meta\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"dict\"],\n+                 [addnodes.literal_emphasis, \"(\"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \", \"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \")\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"(optional)\"))\n+    assert_node(doctree[3][1][0][0][1][0][3][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"dict\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][3][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][3][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n     doctree = restructuredtext.parse(app, text)\n     print(doctree)\n \n",
  "sphinx-doc__sphinx-9258": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a7d51b6..f890d00 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -1009,6 +1009,43 @@ def test_info_field_list(app):\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n \n+def test_info_field_list_piped_type_with_multiple(app):\n+    text = (\".. py:function:: foo\\n\"\n+            \"\\n\"\n+            \"   :param value: blah blah\\n\"\n+            \"   :type value: bytes | str | int | float\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree, (addnodes.index,\n+                          [desc, (desc_signature,\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree[1][1][0][0], \n+                ([nodes.field_name, \"Parameters\"],\n+                 [nodes.field_body, \n+                  [nodes.paragraph, ([addnodes.literal_strong, \"value\"],\n+                                     \" (\",\n+                                     [pending_xref, addnodes.literal_emphasis, \"bytes\"],\n+                                     [addnodes.literal_emphasis, \" | \"],\n+                                     [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                                     [addnodes.literal_emphasis, \" | \"],\n+                                     [pending_xref, addnodes.literal_emphasis, \"int\"],\n+                                     [addnodes.literal_emphasis, \" | \"],\n+                                     [pending_xref, addnodes.literal_emphasis, \"float\"],\n+                                     \")\",\n+                                     \" -- \",\n+                                     \"blah blah\")]]))\n+\n+    # Check all targets are correctly identified\n+    assert_node(doctree[1][1][0][0][1][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"bytes\")\n+    assert_node(doctree[1][1][0][0][1][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\")\n+    assert_node(doctree[1][1][0][0][1][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"int\")\n+    assert_node(doctree[1][1][0][0][1][0][8], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"float\")\n+\n+\n def test_info_field_list_var(app):\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-9673": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex aa0401e..81cda87 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -850,6 +850,26 @@ def test_autodoc_typehints_description_no_undoc(app):\n         '   :return: another tuple\\n'\n     )\n     app.build()\n+\n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\",\n+                                   'autodoc_typehints_description_target': 'documented',\n+                                   'napoleon_numpy_docstring': False})\n+def test_autodoc_typehints_with_napoleon(app):\n+    # This test checks the behavior of autodoc_typehints_description_target with Napoleon\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autofunction:: target.typehints.decr\\n'\n+        '\\n'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text()\n+    assert ('target.typehints.decr(a, b=1)\\n'\n+            '   Returns:\\n'\n+            '      decremented number\\n'\n+            '\\n'\n+            '   Return type:\\n'\n+            '      int\\n'\n+            in context)\n     context = (app.outdir / 'index.txt').read_text()\n     assert ('target.typehints.incr(a, b=1)\\n'\n             '\\n'\n",
  "sympy__sympy-18211": "diff --git a/sympy/solvers/tests/test_solveset.py b/sympy/solvers/tests/test_solveset.py\nindex 7bd9e29..d3e24e1 100644\n--- a/sympy/solvers/tests/test_solveset.py\n+++ b/sympy/solvers/tests/test_solveset.py\n@@ -1048,7 +1048,23 @@ def test__solveset_multi():\n             ImageSet(Lambda(((theta,),), (0, theta)), ImageSet(Lambda(theta, (theta,)), Interval(0, pi))))\n \n \n-def test_conditionset():\n+from sympy import Eq, cos, sin, solveset, ConditionSet, Reals, sqrt, symbols\n+\n+x = symbols('x')\n+n = symbols('n')\n+\n+def test_issue_18188():\n+    # Test for the specific issue reported\n+    result1 = Eq(n*cos(n) - 3*sin(n), 0)\n+    assert result1.as_set() == ConditionSet(n, Eq(n*cos(n) - 3*sin(n), 0), Reals)\n+\n+    # Additional related test cases\n+    result2 = Eq(x**2 + sqrt(2)*sqrt(x) + sin(x), 0)\n+    assert result2.as_set() == ConditionSet(x, Eq(sqrt(2)*sqrt(x) + x**2 + sin(x), 0), Reals)\n+\n+    # Another test with a more complex trigonometric equation\n+    result3 = Eq(sin(n) + cos(n) + n, 0)\n+    assert result3.as_set() == ConditionSet(n, Eq(sin(n) + cos(n) + n, 0), Reals)\n     assert solveset(Eq(sin(x)**2 + cos(x)**2, 1), x, domain=S.Reals) == \\\n         ConditionSet(x, True, S.Reals)\n \n",
  "sympy__sympy-18698": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 38de6f6..1460662 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3260,9 +3260,10 @@ def test_noncommutative():\n         is_commutative=False\n     e = x/(x + x*y)\n     c = 1/( 1 + y)\n-    assert cancel(foo(e)) == foo(c)\n-    assert cancel(e + foo(e)) == c + foo(c)\n-    assert cancel(e*foo(c)) == c*foo(c)\n+from sympy import Symbol, sqf_list, Poly, cancel\n+\n+x = Symbol('x')\n+y = Symbol('y')\n \n \n def test_to_rational_coeffs():\n@@ -3276,7 +3277,23 @@ def test_factor_terms():\n     assert sqf_list(x*(x + y)) == (1, [(x, 1), (x + y, 1)])\n \n \n-def test_as_list():\n+def test_issue_8695():\n+    # Test case for the issue described\n+    p = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3\n+    result = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\n+    assert sqf_list(p) == result\n+\n+def test_sqf_list_additional_cases():\n+    # Additional test cases to verify the fix\n+    # A case with a polynomial having multiple distinct roots\n+    p1 = x**6 - 9*x**4 + 27*x**2 - 27\n+    result1 = (1, [(x - 3, 2), (x + 3, 2), (x**2 + 3, 1)])\n+    assert sqf_list(p1) == result1\n+\n+    # A case with a polynomial having higher multiplicities\n+    p2 = (x - 1)**4 * (x + 2)**5\n+    result2 = (1, [(x - 1, 4), (x + 2, 5)])\n+    assert sqf_list(p2) == result2\n     # issue 14496\n     assert Poly(x**3 + 2, x, domain='ZZ').as_list() == [1, 0, 0, 2]\n     assert Poly(x**2 + y + 1, x, y, domain='ZZ').as_list() == [[1], [], [1, 1]]\n",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..11ff009 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3255,7 +3255,12 @@ def test_issue_5786():\n         (x - I*y)*(z - I*t)), extension=[I])) == -I*t*x - t*y + x*z - I*y*z\n \n \n-def test_noncommutative():\n+from sympy import symbols, expand, factor, I\n+\n+def test_factor_with_extension_issue_18895():\n+    x, y = symbols('x y')\n+    z = expand((x-1)*(y-1))\n+    assert factor(z, extension=[I]) == (x - 1) * (y - 1)\n     class foo(Expr):\n         is_commutative=False\n     e = x/(x + x*y)\n",
  "sympy__sympy-20590": "",
  "sympy__sympy-24562": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..752081a 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,7 +3202,35 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n-    def test_boundfield_widget_type(self):\n+    def test_boundwidget_id_for_label_with_auto_id(self):\n+        \"\"\"\n+        Test BoundWidget.id_for_label with auto_id in CheckboxSelectMultiple.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+\n+        form = SomeForm(auto_id='prefix_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'prefix_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'prefix_field_1')\n+\n+    def test_boundwidget_id_for_label_with_custom_id(self):\n+        \"\"\"\n+        Test BoundWidget.id_for_label with custom ID set in CheckboxSelectMultiple.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('x', 'X'), ('y', 'Y')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'custom_id'}),\n+            )\n+\n+        form = SomeForm()\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_id_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_id_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "matplotlib__matplotlib-20676": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex b009975..0e1a72b 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -301,6 +301,9 @@ def test_tool_line_handle():\n \n     assert tool_line_handle.positions == positions\n \n+import pytest\n+from matplotlib import pyplot as plt\n+from matplotlib import widgets\n \n def check_lasso_selector(**kwargs):\n     ax = get_ax()\n",
  "scikit-learn__scikit-learn-12682": "diff --git a/sklearn/decomposition/tests/test_dict_learning.py b/sklearn/decomposition/tests/test_dict_learning.py\nindex 35a43f8..1106c49 100644\n--- a/sklearn/decomposition/tests/test_dict_learning.py\n+++ b/sklearn/decomposition/tests/test_dict_learning.py\n@@ -51,6 +51,58 @@ def test_dict_learning_shapes():\n     assert_equal(dico.transform(X).shape, (X.shape[0], n_components))\n \n \n+import numpy as np\n+import pytest\n+from sklearn.decomposition import SparseCoder\n+from sklearn.exceptions import ConvergenceWarning\n+\n+def test_sparse_coder_lasso_cd_max_iter():\n+    def ricker_function(resolution, center, width):\n+        \"\"\"Discrete sub-sampled Ricker (Mexican hat) wavelet\"\"\"\n+        x = np.linspace(0, resolution - 1, resolution)\n+        x = ((2 / (np.sqrt(3 * width) * np.pi ** .25))\n+             * (1 - (x - center) ** 2 / width ** 2)\n+             * np.exp(-(x - center) ** 2 / (2 * width ** 2)))\n+        return x\n+\n+    def ricker_matrix(width, resolution, n_components):\n+        \"\"\"Dictionary of Ricker (Mexican hat) wavelets\"\"\"\n+        centers = np.linspace(0, resolution - 1, n_components)\n+        D = np.empty((n_components, resolution))\n+        for i, center in enumerate(centers):\n+            D[i] = ricker_function(resolution, center, width)\n+        D /= np.sqrt(np.sum(D ** 2, axis=1))[:, np.newaxis]\n+        return D\n+\n+    transform_algorithm = 'lasso_cd'\n+    resolution = 1024\n+    subsampling = 3  # subsampling factor\n+    n_components = resolution // subsampling\n+\n+    # Compute a wavelet dictionary\n+    D_multi = np.r_[tuple(ricker_matrix(width=w, resolution=resolution,\n+                                        n_components=n_components // 5)\n+                          for w in (10, 50, 100, 500, 1000))]\n+\n+    X = np.linspace(0, resolution - 1, resolution)\n+    first_quarter = X < resolution / 4\n+    X[first_quarter] = 3.\n+    X[np.logical_not(first_quarter)] = -1.\n+    X = X.reshape(1, -1)\n+\n+    # Check that the underlying model fails to converge with low max_iter\n+    with pytest.warns(ConvergenceWarning):\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=1)\n+        model.fit_transform(X)\n+\n+    # Check that the underlying model converges without warnings with higher max_iter\n+    with pytest.warns(None) as record:\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=2000)\n+        model.fit_transform(X)\n+    assert not record.list\n+\n def test_dict_learning_overcomplete():\n     n_components = 12\n     dico = DictionaryLearning(n_components, random_state=0).fit(X)\n",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..ca29330 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -148,6 +148,29 @@ def test_multi_target_sample_weights():\n     assert_almost_equal(rgr.predict(X_test), rgr_w.predict(X_test))\n \n \n+import numpy as np\n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+from sklearn.model_selection import cross_val_predict\n+import pytest\n+\n+def test_cross_val_predict_multioutput_predict_proba():\n+    # Generate a multilabel classification problem\n+    X, Y = make_multilabel_classification()\n+\n+    # Instantiate a MultiOutputClassifier with LinearDiscriminantAnalysis\n+    mo_lda = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+\n+    # Generate prediction probabilities using cross_val_predict\n+    pred_proba = cross_val_predict(mo_lda, X, Y, cv=5, method='predict_proba')\n+\n+    # Assert that the prediction probabilities are returned for each output\n+    assert isinstance(pred_proba, list)\n+    assert len(pred_proba) == Y.shape[1]\n+    for proba in pred_proba:\n+        assert proba.shape == (X.shape[0], len(np.unique(Y)))\n+\n # Import the data\n iris = datasets.load_iris()\n # create a multiple targets by randomized shuffling and concatenating y.\n",
  "sphinx-doc__sphinx-9658": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 072cdc7..4ad10dd 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -158,6 +158,10 @@ def test_restify_pep_585():\n                                                    \"[:py:class:`int`, ...]]\")\n \n \n+import pytest\n+from sphinx.ext.autodoc.mock import mock\n+from sphinx.util.typing import restify, stringify\n+\n @pytest.mark.skipif(sys.version_info < (3, 10), reason='python 3.10+ is required.')\n def test_restify_type_union_operator():\n     assert restify(int | None) == \":py:class:`int` | :py:obj:`None`\"  # type: ignore\n@@ -165,6 +169,22 @@ def test_restify_type_union_operator():\n     assert restify(int | str | None) == (\":py:class:`int` | :py:class:`str` | \"  # type: ignore\n                                          \":py:obj:`None`\")\n \n+def test_restify_mocked_inheritance():\n+    with mock(['torch.nn']):\n+        import torch\n+        class MockedModule(torch.nn.Module):\n+            pass\n+\n+        assert restify(MockedModule) == ':py:class:`MockedModule`'\n+\n+def test_stringify_mocked_inheritance():\n+    with mock(['torch.nn']):\n+        import torch\n+        class MockedModule(torch.nn.Module):\n+            pass\n+\n+        assert stringify(MockedModule) == 'MockedModule'\n+\n \n def test_restify_broken_type_hints():\n     assert restify(BrokenType) == ':py:class:`tests.test_util_typing.BrokenType`'\n",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..ab8d442 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -348,6 +348,21 @@ def test_reverse_order():\n            Product(x*y, (x, b + 1, a - 1), (y, 6, 1))\n \n \n+def test_issue_13546():\n+    from sympy import Product, Symbol, S\n+    n = Symbol('n')\n+    k = Symbol('k')\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 2).doit() == S(15)/2\n+    # Additional test cases\n+    assert p.subs(n, 3).doit() == S(35)/4  # Expected: (3 + 1) * (3 + 1/2) * (3 + 1/4) = 35/4\n+    assert p.subs(n, 4).doit() == S(315)/16  # Expected: (4 + 1) * (4 + 1/2) * (4 + 1/4) * (4 + 1/8) = 315/16\n+    # Testing the symbolic simplified form\n+    from sympy import simplify\n+    assert simplify(p.subs(n, 3)) == p.subs(n, 3).doit()\n+    assert simplify(p.subs(n, 4)) == p.subs(n, 4).doit()\n+\n+\n def test_issue_9983():\n     n = Symbol('n', integer=True, positive=True)\n     p = Product(1 + 1/n**(S(2)/3), (n, 1, oo))\n@@ -357,4 +372,4 @@ def test_issue_9983():\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}