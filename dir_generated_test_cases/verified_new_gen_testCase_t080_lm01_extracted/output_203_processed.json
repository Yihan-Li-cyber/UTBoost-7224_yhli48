{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..4619350 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -49,6 +49,13 @@ compound_models = {\n             (np.array([False, False]),\n              np.array([[True], [True]]))\n             ),\n+    'nested_compound_model': (m.Pix2Sky_TAN() & cm,\n+            (np.array([False, False, True, True]),\n+             np.array([[True, True, False, False],\n+                       [True, True, False, False],\n+                       [False, False, True, False],\n+                       [False, False, False, True]]))\n+            ),\n     'cm7': (map2 | p2 & sh1,\n             (np.array([False, True]),\n              np.array([[True, False], [False, True]]))\n",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "diff --git a/astropy/io/fits/tests/test_connect.py b/astropy/io/fits/tests/test_connect.py\nindex 00deafe..ba528aa 100644\n--- a/astropy/io/fits/tests/test_connect.py\n+++ b/astropy/io/fits/tests/test_connect.py\n@@ -1,3 +1,4 @@\n+\n import gc\n import warnings\n \n@@ -7,7 +8,7 @@ from numpy.testing import assert_allclose, assert_array_equal\n \n from astropy import units as u\n from astropy.io import fits\n-from astropy.io.fits import BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu\n+from astropy.io.fits import BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu, connect\n from astropy.io.fits.column import (\n     _fortran_to_python_format,\n     _parse_tdisp_format,\n",
  "astropy__astropy-14508": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex 6bdf92c..9ab9dde 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -137,6 +137,45 @@ class TestHeaderFunctions(FitsTestCase):\n         ):\n             assert str(c) == _pad(\"FLOATNUM= -4.6737463674763E+32\")\n \n+    def test_floating_point_string_representation_card(self):\n+        \"\"\"\n+        Ensures Card formats float values with the correct precision, avoiding\n+        comment truncation.\n+\n+        Regression test for https://github.com/astropy/astropy/issues/14507\n+        \"\"\"\n+        k = \"HIERARCH ABC DEF GH IJKLMN\"\n+        com = \"[m] abcdef ghijklm nopqrstu vw xyzab\"\n+        \n+        # Test with the float value directly from the issue description\n+        c = fits.Card(k, 0.009125, com)\n+        expected_str = f\"{k} = 0.009125 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Additional test cases to ensure robustness\n+        c = fits.Card(k, 8.95, com)\n+        expected_str = f\"{k} = 8.95 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, -99.9, com)\n+        expected_str = f\"{k} = -99.9 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Test with a float value that could cause rounding issues\n+        c = fits.Card(k, 0.123456789012345, com)\n+        expected_str = f\"{k} = 0.123456789012345 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Test with very small float value\n+        c = fits.Card(k, 1e-10, com)\n+        expected_str = f\"{k} = 1.0E-10 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Test with a zero float value\n+        c = fits.Card(k, 0.0, com)\n+        expected_str = f\"{k} = 0.0 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n     def test_complex_value_card(self):\n         \"\"\"Test Card constructor with complex value\"\"\"\n \n",
  "astropy__astropy-14539": "diff --git a/astropy/io/fits/tests/test_diff.py b/astropy/io/fits/tests/test_diff.py\nindex 9bf4897..851f95f 100644\n--- a/astropy/io/fits/tests/test_diff.py\n+++ b/astropy/io/fits/tests/test_diff.py\n@@ -601,7 +601,17 @@ class TestDiff(FitsTestCase):\n         assert \"13 different table data element(s) found (65.00% different)\" in report\n         assert report.count(\"more indices\") == 1\n \n-    def test_identical_files_basic(self):\n+    def test_fitssdiff_identical_file_with_vla(self):\n+        \"\"\"Test that FITSDiff reports identical when comparing a file to itself, including VLAs.\"\"\"\n+        col = fits.Column(name='a', format='QD', array=[[0], [0, 0]])\n+        hdu = fits.BinTableHDU.from_columns([col])\n+        hdu.writeto('diffbug.fits', overwrite=True)\n+\n+        diff = fits.FITSDiff('diffbug.fits', 'diffbug.fits')\n+        assert diff.identical, \"FITSDiff should report identical for the same file\"\n+        \n+        report = diff.report()\n+        assert 'different' not in report, \"No differences should be reported for the same file\"\n         \"\"\"Test identicality of two simple, extensionless files.\"\"\"\n \n         a = np.arange(100).reshape(10, 10)\n",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..4b63aa2 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -88,6 +88,23 @@ def test_inherit_docstrings():\n         # TODO: Maybe if __doc__ is None this test should be skipped instead?\n         assert Subclass.__call__.__doc__ == \"FOO\"\n \n+def test_inherit_docstrings_for_properties():\n+    class BaseWithProperty(metaclass=misc.InheritDocstrings):\n+        @property\n+        def bar(self):\n+            \"BAR\"\n+            return 42\n+\n+    class SubclassWithProperty(BaseWithProperty):\n+        @property\n+        def bar(self):\n+            return super().bar\n+\n+    if BaseWithProperty.bar.__doc__ is not None:\n+        assert SubclassWithProperty.bar.__doc__ == \"BAR\"\n+        # TODO: Maybe if __doc__ is None this test should be skipped instead?\n+        assert Subclass.__call__.__doc__ == \"FOO\"\n+\n \n def test_set_locale():\n     # First, test if the required locales are available\n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..fd42153 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -194,6 +194,20 @@ def test_unknown_unit3():\n     with pytest.raises(ValueError):\n         unit4 = u.Unit(\"BAR\", parse_strict='strict')\n \n+    # Test equality comparison with None\n+    assert (unit == None) is False  # noqa: E711\n+    assert (unit != None) is True  # noqa: E711\n+\n+    # Test comprehensive checks for None comparisons\n+    unit_none = u.Unit(None, parse_strict='silent')\n+    assert (unit_none == None) is True  # noqa: E711\n+    assert (unit_none != None) is False  # noqa: E711\n+   \n+    # Test if units are not equal to None and check their presence in collections\n+    assert unit not in (None, u.m)\n+    assert unit not in [None, u.m]\n+    assert None not in {unit, u.m}\n+\n     with pytest.raises(TypeError):\n         unit5 = u.Unit(None)\n \n",
  "astropy__astropy-7671": "",
  "astropy__astropy-8707": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex a2103c6..3afb8b5 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -79,6 +79,41 @@ class TestHeaderFunctions(FitsTestCase):\n         assert header['B'] == 'B'\n         assert header.comments['B'] == 'C'\n \n+    def test_card_from_bytes(self):\n+        \"\"\"\n+        Test loading a Card from a `bytes` object (assuming latin-1 encoding).\n+        \"\"\"\n+        c = fits.Card.fromstring(b\"ABC     = 'abc'\")\n+        assert c.keyword == 'ABC'\n+        assert c.value == 'abc'\n+\n+    def test_header_fromstring_bytes(self):\n+        \"\"\"\n+        Test reading a Header from a `bytes` string.\n+\n+        See https://github.com/astropy/astropy/issues/8706\n+        \"\"\"\n+        with open(self.data('test0.fits'), 'rb') as fobj:\n+            pri_hdr_from_bytes = fits.Header.fromstring(fobj.read())\n+\n+        pri_hdr = fits.getheader(self.data('test0.fits'))\n+        assert pri_hdr['NAXIS'] == pri_hdr_from_bytes['NAXIS']\n+        assert pri_hdr == pri_hdr_from_bytes\n+        assert pri_hdr.tostring() == pri_hdr_from_bytes.tostring()\n+\n+    def test_header_fromstring_unicode(self):\n+        \"\"\"\n+        Test reading a Header from a unicode string.\n+        \"\"\"\n+        with open(self.data('test0.fits'), 'r', encoding='ascii') as fobj:\n+            header_str = fobj.read()\n+            pri_hdr_from_unicode = fits.Header.fromstring(header_str)\n+\n+        pri_hdr = fits.getheader(self.data('test0.fits'))\n+        assert pri_hdr['NAXIS'] == pri_hdr_from_unicode['NAXIS']\n+        assert pri_hdr == pri_hdr_from_unicode\n+        assert pri_hdr.tostring() == pri_hdr_from_unicode.tostring()\n+\n     def test_card_constructor_default_args(self):\n         \"\"\"Test Card constructor with default argument values.\"\"\"\n \n",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..ac9ae2f 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -142,6 +142,14 @@ class TestQuantityCreation:\n         a3 = np.array([1., 2.], dtype=np.float32)\n         q3 = u.Quantity(a3, u.yr)\n         assert q3.dtype == a3.dtype\n+        # but we should preserve any float32 or even float16\n+        a3_32 = np.array([1., 2.], dtype=np.float32)\n+        q3_32 = u.Quantity(a3_32, u.yr)\n+        assert q3_32.dtype == a3_32.dtype\n+        a3_16 = np.array([1., 2.], dtype=np.float16)\n+        q3_16 = u.Quantity(a3_16, u.yr)\n+        assert q3_16.dtype == a3_16.dtype\n+        \n         # items stored as objects by numpy should be converted to float\n         # by default\n         q4 = u.Quantity(decimal.Decimal('10.25'), u.m)\n",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..744d2d3 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -28,6 +28,9 @@ else:\n NOW = datetime.now()\n EXTENDED_SCHEMES = ['http', 'https', 'ftp', 'ftps', 'git', 'file', 'git+ssh']\n \n+from django.core.validators import URLValidator\n+from django.core.exceptions import ValidationError\n+\n TEST_DATA = [\n     # (validator, value, expected),\n     (validate_integer, '42', None),\n@@ -214,7 +217,16 @@ TEST_DATA = [\n     (MinLengthValidator(10), '', ValidationError),\n \n     (URLValidator(EXTENDED_SCHEMES), 'file://localhost/path', None),\n-    (URLValidator(EXTENDED_SCHEMES), 'git://example.com/', None),\n+    # Test cases for issue #20003 fix.\n+    # URLs with invalid characters in username and password fields.\n+\n+    (URLValidator(EXTENDED_SCHEMES), 'http://foo@bar@example.com', ValidationError),  # Invalid '@' in username\n+    (URLValidator(EXTENDED_SCHEMES), 'http://foo/bar@example.com', ValidationError),  # Invalid '/' in username\n+    (URLValidator(EXTENDED_SCHEMES), 'http://foo:bar:baz@example.com', ValidationError),  # Invalid ':' in password\n+    (URLValidator(EXTENDED_SCHEMES), 'http://foo:bar@baz@example.com', ValidationError),  # Invalid '@' in password\n+    (URLValidator(EXTENDED_SCHEMES), 'http://foo:bar/baz@example.com', ValidationError),  # Invalid '/' in password\n+    (URLValidator(EXTENDED_SCHEMES), 'http://invalid-.com/?m=foo@example.com', ValidationError),  # Invalid query string\n+    (URLValidator(EXTENDED_SCHEMES), \"http://-.~_!$&'()*+,;=%40:80%2f@example.com\", ValidationError),  # Complex invalid URL\n     (URLValidator(EXTENDED_SCHEMES), 'git+ssh://git@github.com/example/hg-git.git', None),\n \n     (URLValidator(EXTENDED_SCHEMES), 'git://-invalid.com', ValidationError),\n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..199551a 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -8,6 +9,7 @@ from django.db.models import (\n     Avg, Count, DecimalField, DurationField, F, FloatField, Func, IntegerField,\n     Max, Min, Sum, Value,\n )\n+from django.db.models.expressions import Case, When\n from django.test import TestCase\n from django.test.utils import Approximate, CaptureQueriesContext\n from django.utils import timezone\n@@ -389,7 +391,23 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n-    def test_count_star(self):\n+    def test_count_distinct_expression(self):\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=300, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n+\n+    def test_count_distinct_expression_with_different_condition(self):\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=200, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 6)\n+\n+    def test_count_distinct_expression_with_no_match(self):\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=1000, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 0)\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n         sql = ctx.captured_queries[0]['sql']\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..0f68d63 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1090,6 +1090,8 @@ class OverrideSettingsTests(SimpleTestCase):\n         base_url attribute of django.core.files.storage.default_storage.\n         \"\"\"\n         self.assertEqual(default_storage.base_location, '')\n+        # Check default file permissions when not explicitly set\n+        self.assertEqual(default_storage.file_permissions_mode, 0o644)\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n \n@@ -1099,6 +1101,10 @@ class OverrideSettingsTests(SimpleTestCase):\n         the file_permissions_mode attribute of\n         django.core.files.storage.default_storage.\n         \"\"\"\n+        # When FILE_UPLOAD_PERMISSIONS is not set, default should be 0o644\n+        with self.settings():\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n+\n         self.assertIsNone(default_storage.file_permissions_mode)\n         with self.settings(FILE_UPLOAD_PERMISSIONS=0o777):\n             self.assertEqual(default_storage.file_permissions_mode, 0o777)\n",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..21437fd 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,5 +1,7 @@\n+\n import os\n import signal\n+import subprocess\n from unittest import mock\n \n from django.db.backends.postgresql.client import DatabaseClient\n@@ -70,6 +72,35 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n+    def test_use_subprocess_run_with_pgpassword(self):\n+        \"\"\"\n+        Test that subprocess.run is called with the correct environment variable PGPASSWORD.\n+        \"\"\"\n+        def _mock_subprocess_run(*args, env=None, **kwargs):\n+            self.subprocess_args = args[0]\n+            self.pgpassword = env.get('PGPASSWORD')\n+            return subprocess.CompletedProcess(args[0], 0)\n+\n+        dbinfo = {\n+            'database': 'dbname',\n+            'user': 'someuser',\n+            'password': 'somepassword',\n+            'host': 'somehost',\n+            'port': '444',\n+        }\n+\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            self.subprocess_args = None\n+            self.pgpassword = None\n+            DatabaseClient.runshell_db(dbinfo)\n+            self.assertEqual(\n+                (self.subprocess_args, self.pgpassword),\n+                (\n+                    ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                    'somepassword'\n+                )\n+            )\n+\n     def test_escape_characters(self):\n         self.assertEqual(\n             self._run_it({\n@@ -113,4 +144,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..48a9bfa 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -3,6 +3,8 @@ from django.conf import settings\n from django.contrib.contenttypes import management as contenttypes_management\n from django.contrib.contenttypes.models import ContentType\n from django.core.management import call_command\n+from django.contrib.contenttypes.models import ContentType\n+from django.test.utils import override_settings\n from django.db import migrations, models\n from django.test import TransactionTestCase, override_settings\n \n@@ -38,7 +40,20 @@ class ContentTypeOperationsTests(TransactionTestCase):\n                     self.assertEqual(next_operation.old_model, operation.old_name_lower)\n                     self.assertEqual(next_operation.new_model, operation.new_name_lower)\n \n-    def test_existing_content_type_rename(self):\n+    class TestRouter:\n+        def db_for_write(self, model, **hints):\n+            return 'default'\n+\n+    @override_settings(DATABASE_ROUTERS=[TestRouter()])\n+    def test_existing_content_type_rename_other_database(self):\n+        ContentType.objects.using('other').create(app_label='contenttypes_tests', model='foo')\n+        other_content_types = ContentType.objects.using('other').filter(app_label='contenttypes_tests')\n+        call_command('migrate', 'contenttypes_tests', database='other', interactive=False, verbosity=0)\n+        self.assertFalse(other_content_types.filter(model='foo').exists())\n+        self.assertTrue(other_content_types.filter(model='renamedfoo').exists())\n+        call_command('migrate', 'contenttypes_tests', 'zero', database='other', interactive=False, verbosity=0)\n+        self.assertTrue(other_content_types.filter(model='foo').exists())\n+        self.assertFalse(other_content_types.filter(model='renamedfoo').exists())\n         ContentType.objects.create(app_label='contenttypes_tests', model='foo')\n         call_command('migrate', 'contenttypes_tests', database='default', interactive=False, verbosity=0,)\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n@@ -63,4 +78,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "diff --git a/tests/generic_inline_admin/tests.py b/tests/generic_inline_admin/tests.py\nindex 9dd9fd9..6ccce86 100644\n--- a/tests/generic_inline_admin/tests.py\n+++ b/tests/generic_inline_admin/tests.py\n@@ -425,7 +425,36 @@ class GenericInlineModelAdminTest(SimpleTestCase):\n             inlines = [\n                 AlternateInline, MediaInline\n             ]\n+\n+            def get_inlines(self, request, obj=None):\n+                if hasattr(request, 'name'):\n+                    if request.name == 'alternate':\n+                        return self.inlines[:1]\n+                    elif request.name == 'media':\n+                        return self.inlines[1:2]\n+                return []\n+\n+        def test_get_inlines_method(self):\n+            request = type('Request', (object,), {})()  # Mock request object\n+            ma = EpisodeAdmin(Episode, self.site)\n+            \n+            # Test default return value with no request name\n+            self.assertEqual(ma.get_inlines(request, None), [])\n+            \n+            # Test with request name 'alternate'\n+            request.name = 'alternate'\n+            self.assertEqual(ma.get_inlines(request, None), (AlternateInline,))\n+            \n+            # Test with request name 'media'\n+            request.name = 'media'\n+            self.assertEqual(ma.get_inlines(request, None), (MediaInline,))\n+            \n+            # Test get_inline_instances method to ensure it uses get_inlines correctly\n+            self.assertEqual(type(ma.get_inline_instances(request)[0]), AlternateInline)\n+            request.name = 'media'\n+            self.assertEqual(type(ma.get_inline_instances(request)[0]), MediaInline)\n+\n         ma = EpisodeAdmin(Episode, self.site)\n         inlines = ma.get_inline_instances(request)\n         for (formset, inline), other_inline in zip(ma.get_formsets_with_inlines(request), inlines):\n-            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..6282d61 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -238,6 +238,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n             \"en\\u2013dash\",\n+            \"en\\u2013dash\", 'trailingnewline\\n',\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -248,6 +249,18 @@ class UsernameValidatorsTests(SimpleTestCase):\n                 with self.assertRaises(ValidationError):\n                     v(invalid)\n \n+    def test_ascii_validator(self):\n+        valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n+        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\", 'trailingnewline\\n']\n+        v = validators.UnicodeUsernameValidator()\n+        for valid in valid_usernames:\n+            with self.subTest(valid=valid):\n+                v(valid)\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+\n     def test_ascii_validator(self):\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n         invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n@@ -258,4 +271,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..f73a3ca 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -12,6 +12,27 @@ OTHER_DIR = os.path.join(ROOT, 'other_templates')\n \n class RenderToStringTest(SimpleTestCase):\n \n+    def test_autoescape_on(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n+        \n+    def test_autoescape_off_with_different_context(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<b>bold</b>'}),\n+            'obj:<b>bold</b>\\n',\n+        )\n+        \n+    def test_autoescape_on_with_different_context(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<b>bold</b>'}),\n+            'obj:&lt;b&gt;bold&lt;/b&gt;\\n',\n+        )\n+\n     def setUp(self):\n         self.engine = Engine(dirs=[TEMPLATE_DIR])\n \n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..345b13b 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -413,6 +413,18 @@ class HttpResponseTests(unittest.TestCase):\n         self.assertEqual(list(i), [b'abc'])\n         self.assertEqual(list(i), [])\n \n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n+    def test_memoryview_empty_content(self):\n+        r = HttpResponse(memoryview(b''))\n+        self.assertEqual(r.content, b'')\n+\n+    def test_memoryview_combined_with_bytes(self):\n+        r = HttpResponse(memoryview(b'123') + b'456')\n+        self.assertEqual(r.content, b'123456')\n+\n     def test_lazy_content(self):\n         r = HttpResponse(lazystr('helloworld'))\n         self.assertEqual(r.content, b'helloworld')\n",
  "django__django-11141": "",
  "django__django-11149": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 296cfba..0db9406 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -665,7 +665,44 @@ class TestInlinePermissions(TestCase):\n         self.assertNotContains(response, 'id=\"id_Author_books-TOTAL_FORMS\"')\n         self.assertNotContains(response, 'id=\"id_Author_books-0-DELETE\"')\n \n-    def test_inline_change_m2m_change_perm(self):\n+    def test_inline_add_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(reverse('admin:admin_inlines_author_add'))\n+        # View-only inlines. No permissions to add new relationships.\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"0\" id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n+\n+    def test_inline_change_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(self.author_change_url)\n+        # View-only inlines. No permissions to change relationships.\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"1\" id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        self.assertContains(response, '<p>%s</p>' % self.book)\n+        self.assertNotContains(\n+            response,\n+            '<input type=\"checkbox\" name=\"Author_books-0-DELETE\" id=\"id_Author_books-0-DELETE\">',\n+            html=True,\n+        )\n         permission = Permission.objects.get(codename='change_book', content_type=self.book_ct)\n         self.user.user_permissions.add(permission)\n         response = self.client.get(self.author_change_url)\n",
  "django__django-11163": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex b25d077..dfa8e73 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2900,6 +2900,20 @@ class StrictAssignmentTests(SimpleTestCase):\n \n \n class ModelToDictTests(TestCase):\n+    def test_model_to_dict_empty_fields(self):\n+        \"\"\"\n+        model_to_dict() should return an empty dict when fields=[]\n+        \"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(model_to_dict(bw, fields=[]), {})\n+\n+    def test_model_to_dict_with_specific_fields(self):\n+        \"\"\"\n+        model_to_dict() should return a dict with only the specified fields.\n+        \"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(sorted(model_to_dict(bw, fields=['id', 'name'])), ['id', 'name'])\n+\n     def test_many_to_many(self):\n         \"\"\"Data for a ManyToManyField is a list rather than a lazy QuerySet.\"\"\"\n         blue = Colour.objects.create(name='blue')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..0c5a152 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,3 +1,5 @@\n+\n+from django.db.models.deletion import Collector\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..3381b1d 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -95,6 +95,14 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+            # New test cases to verify the fix:\n+            # Very small numbers should not use exponential notation if decimal_pos is set\n+            ('1e-199', 2, '0.00'),\n+            ('1e-200', 2, '0.00'),\n+            ('5e-201', 5, '0.00000'),\n+            ('1e-100', 102, '0.' + '0' * 100 + '1'),\n+            # Numbers that exceed the cutoff should still be in exponential notation\n+            ('1e-201', None, '1e-201'),\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-11211": "diff --git a/tests/prefetch_related/models.py b/tests/prefetch_related/models.py\nindex 3ce4b3f..b01d75f 100644\n--- a/tests/prefetch_related/models.py\n+++ b/tests/prefetch_related/models.py\n@@ -1,3 +1,4 @@\n+\n import uuid\n \n from django.contrib.contenttypes.fields import (\n@@ -192,6 +193,18 @@ class Comment(models.Model):\n     object_pk = models.TextField()\n     content_object = GenericForeignKey(ct_field=\"content_type\", fk_field=\"object_pk\")\n \n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=50)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n+\n     class Meta:\n         ordering = ['id']\n \n",
  "django__django-11239": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex b843072..0e320cc 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,6 +1,7 @@\n import os\n import signal\n import subprocess\n+import os\n from unittest import mock\n \n from django.db.backends.postgresql.client import DatabaseClient\n",
  "django__django-11265": "diff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py\nindex a587c22..4e2c507 100644\n--- a/tests/filtered_relation/tests.py\n+++ b/tests/filtered_relation/tests.py\n@@ -82,6 +82,47 @@ class FilteredRelationTests(TestCase):\n                     (self.book4, self.author1),\n                 ], lambda x: (x, x.author_join))\n \n+    def test_with_exclude(self):\n+        # This test checks if using exclude works correctly with FilteredRelation annotations\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2]\n+        )\n+\n+    def test_with_exclude_no_matches(self):\n+        # Check excluding when no related objects match the condition\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='nonexistent title')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author1, self.author2]\n+        )\n+\n+    def test_with_exclude_complex_condition(self):\n+        # Testing exclude with a complex condition in FilteredRelation\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation(\n+                    'book', condition=Q(\n+                        ~Q(book__title__iexact='poem by alice') & \n+                        Q(book__state=Book.RENTED)\n+                    ),\n+                ),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author1, self.author2]\n+        )\n+\n+    def test_with_exclude_all(self):\n+        # Ensure exclude is effectively filtering out all authors\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=True),\n+            []\n+        )\n+\n     def test_without_join(self):\n         self.assertSequenceEqual(\n             Author.objects.annotate(\n",
  "django__django-11276": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 4051a05..4771491 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -27,7 +27,7 @@ class TestUtilsHtml(SimpleTestCase):\n             ('<', '&lt;'),\n             ('>', '&gt;'),\n             ('\"', '&quot;'),\n-            (\"'\", '&#39;'),\n+            (\"'\", '&#x27;'),\n         )\n         # Substitution patterns for testing the above items.\n         patterns = (\"%s\", \"asdf%sfdsa\", \"%s1\", \"1%sb\")\n",
  "django__django-11292": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex b016284..1deee51 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -253,8 +253,28 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertNoOutput(err)\n         self.assertEqual(out.strip(), 'Set foo')\n \n+    def test_skip_checks_not_present(self):\n+        \"\"\"\n+        Test that system checks are performed when --skip-checks is not present.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['user_commands'], sdict={\n+            # This should trigger an error if checks are executed.\n+            'STATICFILES_DIRS': '\"foo\"',\n+        })\n+        with self.assertRaises(SomeExpectedException):  # Replace with actual exception expected\n+            self.run_manage(['set_option', '--set', 'foo'])\n \n-class UtilsTests(SimpleTestCase):\n+    def test_skip_checks_override(self):\n+        \"\"\"\n+        Test that --skip-checks can override the default behavior.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['user_commands'], sdict={\n+            'STATICFILES_DIRS': '\"foo\"',\n+        })\n+        # Here, the command should not raise an exception because --skip-checks is used.\n+        out, err = self.run_manage(['set_option', '--skip-checks', '--set', 'foo'])\n+        self.assertNoOutput(err)\n+        self.assertEqual(out.strip(), 'Set foo')\n \n     def test_no_existent_external_program(self):\n         msg = 'Error executing a_42_command_that_doesnt_exist_42'\n",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..784c9c1 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,5 +1,7 @@\n+\n from django.test import SimpleTestCase\n-from django.urls.resolvers import RegexPattern, RoutePattern\n+from django.urls.resolvers import RegexPattern, RoutePattern, get_resolver\n+from django.test.utils import override_settings\n from django.utils.translation import gettext_lazy as _\n \n \n@@ -12,4 +14,4 @@ class RegexPatternTests(SimpleTestCase):\n class RoutePatternTests(SimpleTestCase):\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\nindex b010b42..b75f56f 100644\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -226,8 +226,31 @@ class BaseModelBackendTest:\n         authenticate(username='no_such_user', password='test')\n         self.assertEqual(CountingMD5PasswordHasher.calls, 1)\n \n+from django.test import TestCase, override_settings\n+from django.contrib.auth import get_user_model, authenticate\n+from auth_tests.test_auth_backends import CountingMD5PasswordHasher\n+\n+UserModel = get_user_model()\n \n class ModelBackendTest(BaseModelBackendTest, TestCase):\n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authentication_no_database_query_on_none_username_or_password(self):\n+        \"\"\"\n+        Test that authenticate() does not perform a database query\n+        when username or password is None.\n+        \"\"\"\n+        CountingMD5PasswordHasher.calls = 0\n+        test_cases = [\n+            {'username': None, 'password': 'some_password'},\n+            {'username': 'some_username', 'password': None},\n+            {'username': None, 'password': None},\n+        ]\n+        for credentials in test_cases:\n+            with self.subTest(credentials=credentials):\n+                with self.assertNumQueries(0):\n+                    result = authenticate(**credentials)\n+                self.assertIsNone(result)\n+                self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n     \"\"\"\n     Tests for the ModelBackend using the default User model.\n     \"\"\"\n",
  "django__django-11490": "",
  "django__django-11532": "diff --git a/tests/mail/tests.py b/tests/mail/tests.py\nindex a6f0e17..9aea33e 100644\n--- a/tests/mail/tests.py\n+++ b/tests/mail/tests.py\n@@ -8,6 +8,7 @@ import sys\n import tempfile\n import threading\n from email import charset, message_from_binary_file, message_from_bytes\n+from unittest import mock\n from email.header import Header\n from email.mime.text import MIMEText\n from email.utils import parseaddr\n@@ -365,7 +366,29 @@ class MailTests(HeadersCheckMixin, SimpleTestCase):\n         self.assertEqual(msg.body, '')\n         self.assertEqual(msg.message().get_payload(), '')\n \n-    def test_encoding(self):\n+    @mock.patch(\"django.core.mail.utils.DNS_NAME.get_fqdn\", return_value=\"\u6f22\u5b57\")\n+    def test_non_ascii_dns_non_unicode_email(self, mocked_getfqdn):\n+        \"\"\"\n+        Test handling of non-ASCII DNS names with non-unicode email encoding.\n+        \"\"\"\n+        from django.core.mail.utils import DNS_NAME\n+        delattr(DNS_NAME, '_fqdn')  # Clear cached DNS name\n+        email = EmailMessage('subject', '', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        message = email.message()\n+        self.assertIn('xn--p8s937b', message['Message-ID'])\n+\n+    @mock.patch(\"django.core.mail.utils.DNS_NAME.get_fqdn\", return_value=\"\u6b63\u5b97\")\n+    def test_non_ascii_dns_with_different_chars(self, mocked_getfqdn):\n+        \"\"\"\n+        Test handling of different non-ASCII DNS names with non-unicode email encoding.\n+        \"\"\"\n+        from django.core.mail.utils import DNS_NAME\n+        delattr(DNS_NAME, '_fqdn')  # Clear cached DNS name\n+        email = EmailMessage('subject', '', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        message = email.message()\n+        self.assertIn('xn--4rtw', message['Message-ID'])\n         \"\"\"\n         Regression for #12791 - Encode body correctly with other encodings\n         than utf-8\n",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..378e0c6 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,9 +1,10 @@\n+\n from django import forms\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n-from django.db.models import F\n+from django.db.models import F, Field, Model\n from django.db.models.functions import Upper\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..380e397 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -7,6 +7,8 @@ from django.db.models import (\n )\n from django.db.models.functions import Upper\n from django.test import TestCase\n+from django.db.models import OrderBy\n+from datetime import datetime\n from django.utils.deprecation import RemovedInDjango31Warning\n \n from .models import Article, Author, OrderedByFArticle, Reference\n@@ -461,8 +463,46 @@ class OrderingTests(TestCase):\n             articles, ['Article 1', 'Article 4', 'Article 3', 'Article 2'],\n             attrgetter('headline')\n         )\n+    def test_order_by_expression_with_meta_ordering(self):\n+        \"\"\"\n+        Test ordering using expressions in Meta.ordering and verify that\n+        it doesn't cause crashes or unexpected behavior.\n+        \"\"\"\n+        OrderedByFArticle.objects.create(\n+            headline=\"Article F1\", pub_date=datetime(2005, 7, 26), author=self.author_2\n+        )\n+        OrderedByFArticle.objects.create(\n+            headline=\"Article F2\", pub_date=datetime(2005, 7, 27), author=self.author_1\n+        )\n+        OrderedByFArticle.objects.create(\n+            headline=\"Article F3\", pub_date=datetime(2005, 7, 28), author=self.author_1\n+        )\n+        articles = OrderedByFArticle.objects.all()\n+        # Expecting ordering by author (asc, nulls first) and then by id\n+        self.assertQuerysetEqual(\n+            articles, ['Article F2', 'Article F1', 'Article F3'],\n+            attrgetter('headline')\n+        )\n \n-    def test_deprecated_values_annotate(self):\n+    def test_order_by_ptr_field_with_custom_ordering(self):\n+        \"\"\"\n+        Test ordering by a parent model's field with custom Meta.ordering\n+        in the child model.\n+        \"\"\"\n+        ca1 = ChildArticle.objects.create(\n+            headline='h2', pub_date=datetime(2005, 7, 27), author=self.author_2\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='h2', pub_date=datetime(2005, 7, 27), author=self.author_1\n+        )\n+        ca3 = ChildArticle.objects.create(\n+            headline='h3', pub_date=datetime(2005, 7, 27), author=self.author_1\n+        )\n+        ca4 = ChildArticle.objects.create(\n+            headline='h1', pub_date=datetime(2005, 7, 28)\n+        )\n+        articles = ChildArticle.objects.order_by('article_ptr')\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n         msg = (\n             \"Article QuerySet won't use Meta.ordering in Django 3.1. Add \"\n             \".order_by('-pub_date', 'headline', OrderBy(F(author__name), \"\n",
  "django__django-11603": "",
  "django__django-11740": "",
  "django__django-11749": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex a0e1530..4b87222 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -219,11 +219,63 @@ class CommandTests(SimpleTestCase):\n         management.call_command('subparser', 'foo', 12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n \n+    def test_mutually_exclusive_group_required_options_kwargs(self):\n+        out = StringIO()\n+        management.call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+        \n+        out = StringIO()\n+        management.call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+        \n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            management.call_command('mutually_exclusive_required', stdout=out)\n+\n+    def test_mutually_exclusive_group_required_options_args(self):\n+        out = StringIO()\n+        management.call_command('mutually_exclusive_required', '--foo-id=1', stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+        \n+        out = StringIO()\n+        management.call_command('mutually_exclusive_required', '--foo-name=foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+        \n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            management.call_command('mutually_exclusive_required', stdout=out)\n+\n     def test_subparser_dest_args(self):\n         out = StringIO()\n         management.call_command('subparser_dest', 'foo', bar=12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n \n+    def test_mutually_exclusive_group_required_options_kwargs(self):\n+        out = StringIO()\n+        management.call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+        \n+        out = StringIO()\n+        management.call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+        \n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            management.call_command('mutually_exclusive_required', stdout=out)\n+\n+    def test_mutually_exclusive_group_required_options_args(self):\n+        out = StringIO()\n+        management.call_command('mutually_exclusive_required', '--foo-id=1', stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+        \n+        out = StringIO()\n+        management.call_command('mutually_exclusive_required', '--foo-name=foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+        \n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            management.call_command('mutually_exclusive_required', stdout=out)\n+\n     def test_subparser_dest_required_args(self):\n         out = StringIO()\n         management.call_command('subparser_required', 'foo_1', 'foo_2', bar=12, stdout=out)\n",
  "django__django-11790": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 440150b..0763546 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -437,6 +437,15 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         self.assertEqual(form.fields['username'].max_length, 254)\n         self.assertEqual(form.errors, {})\n \n+    def test_username_field_maxlength_attribute(self):\n+        # Test to ensure that the maxlength attribute is correctly set in the HTML output\n+        data = {\n+            'username': 'testuser',\n+            'password': 'password',\n+        }\n+        form = AuthenticationForm(None, data)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), str(form.fields['username'].max_length))\n+\n     def test_username_field_label(self):\n \n         class CustomAuthenticationForm(AuthenticationForm):\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..23fff0c 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -269,6 +269,21 @@ class WriterTests(SimpleTestCase):\n             TextEnum.A,\n             (\"migrations.test_writer.TextEnum('a-value')\", {'import migrations.test_writer'})\n         )\n+\n+        # New test case to check serialization of translated enums\n+        class TextTranslatedEnum(enum.Enum):\n+            A = _('a-value')\n+            B = _('value-b')\n+\n+        field = models.CharField(default=TextTranslatedEnum.B, choices=[(m.value, m) for m in TextTranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('a-value', migrations.test_writer.TextTranslatedEnum['A']), \"\n+            \"('value-b', migrations.test_writer.TextTranslatedEnum['B'])], \"\n+            \"default=migrations.test_writer.TextTranslatedEnum['B'])\"\n+        )\n         self.assertSerializedResultEqual(\n             BinaryEnum.A,\n             (\"migrations.test_writer.BinaryEnum(b'a-value')\", {'import migrations.test_writer'})\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..bff1c25 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from datetime import datetime\n \n@@ -316,7 +317,27 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_rfc850(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+        utcnow_1 = datetime(2019, 11, 6, 8, 49, 37)\n+        utcnow_2 = datetime(2020, 11, 6, 8, 49, 37)\n+        utcnow_3 = datetime(2048, 11, 6, 8, 49, 37)\n+        tests = (\n+            (utcnow_1, 'Tuesday, 31-Dec-69 08:49:37 GMT', datetime(2069, 12, 31, 8, 49, 37)),\n+            (utcnow_1, 'Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),\n+            (utcnow_1, 'Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37)),\n+            (utcnow_2, 'Wednesday, 31-Dec-70 08:49:37 GMT', datetime(2070, 12, 31, 8, 49, 37)),\n+            (utcnow_2, 'Friday, 31-Dec-71 08:49:37 GMT', datetime(1971, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+        )\n+        for utcnow, rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = utcnow\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n         parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n",
  "django__django-11880": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 95afc0d..79fd2e3 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3672,7 +3672,50 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n             '<input type=\"hidden\" name=\"data\" id=\"id_data\"></td></tr>'\n         )\n \n-    def test_field_named_data(self):\n+import copy\n+from django.forms import Form, CharField\n+from django.test import SimpleTestCase\n+\n+class DeepCopyFieldTests(SimpleTestCase):\n+\n+    def test_field_deep_copy_error_messages(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        self.assertIsInstance(field_copy, CustomCharField)\n+        self.assertIsNot(field_copy.error_messages, field.error_messages)\n+\n+    def test_field_deep_copy_changes_do_not_affect_original(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        field_copy.error_messages['invalid'] = 'Different error message.'\n+\n+        # Ensure the original field's error message remains unchanged\n+        self.assertEqual(field.error_messages['invalid'], 'Form custom error message.')\n+        self.assertEqual(field_copy.error_messages['invalid'], 'Different error message.')\n+\n+    def test_field_deep_copy_additional_error_message(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        field_copy.error_messages['required'] = 'This field is required.'\n+\n+        # Ensure the original field's error messages remain unchanged\n+        self.assertNotIn('required', field.error_messages)\n+        self.assertIn('required', field_copy.error_messages)\n         class DataForm(Form):\n             data = CharField(max_length=10)\n \n",
  "django__django-11951": "",
  "django__django-11964": "diff --git a/tests/model_fields/test_charfield.py b/tests/model_fields/test_charfield.py\nindex c6162e5..c5cdea7 100644\n--- a/tests/model_fields/test_charfield.py\n+++ b/tests/model_fields/test_charfield.py\n@@ -1,3 +1,4 @@\n+\n from unittest import skipIf\n \n from django.core.exceptions import ValidationError\n@@ -6,6 +7,29 @@ from django.test import SimpleTestCase, TestCase\n \n from .models import Post\n \n+class TestTextChoicesField(TestCase):\n+    def setUp(self):\n+        class MyChoice(models.TextChoices):\n+            FIRST_CHOICE = \"first\", \"The first choice, it is\"\n+            SECOND_CHOICE = \"second\", \"The second choice, it is\"\n+\n+        class MyObject(models.Model):\n+            my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n+        self.MyChoice = MyChoice\n+        self.MyObject = MyObject\n+\n+    def test_created_object_is_str(self):\n+        my_object = self.MyObject.objects.create(my_str_value=self.MyChoice.FIRST_CHOICE)\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(my_object.my_str_value, \"first\")\n+\n+    def test_retrieved_object_is_str(self):\n+        self.MyObject.objects.create(my_str_value=self.MyChoice.FIRST_CHOICE)\n+        my_object = self.MyObject.objects.last()\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(my_object.my_str_value, \"first\")\n+\n \n class TestCharField(TestCase):\n \n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..7743c1a 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -168,6 +168,19 @@ class GetFieldDisplayTests(SimpleTestCase):\n         self.assertIsInstance(val, str)\n         self.assertEqual(val, 'translated')\n \n+    def test_override_get_FIELD_display(self):\n+        \"\"\"\n+        Test that get_FIELD_display function can be overridden.\n+        \"\"\"\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+\n     def test_iterator_choices(self):\n         \"\"\"\n         get_choices() works with Iterators.\n",
  "django__django-12039": "diff --git a/tests/indexes/tests.py b/tests/indexes/tests.py\nindex 700f574..bce2134 100644\n--- a/tests/indexes/tests.py\n+++ b/tests/indexes/tests.py\n@@ -9,12 +9,16 @@ from django.db.models.query_utils import Q\n from django.test import (\n     TestCase, TransactionTestCase, skipIfDBFeature, skipUnlessDBFeature,\n )\n+from django.db import connection\n+from django.db.models import Index\n from django.test.utils import override_settings\n from django.utils import timezone\n \n from .models import (\n     Article, ArticleTranslation, IndexedArticle2, IndexTogetherSingleList,\n )\n+from django.db import connection\n+from django.db.models import Index\n \n \n class SchemaIndexesTests(TestCase):\n@@ -22,7 +26,45 @@ class SchemaIndexesTests(TestCase):\n     Test index handling by the db.backends.schema infrastructure.\n     \"\"\"\n \n-    def test_index_name_hash(self):\n+    def test_columns_list_sql(self):\n+        index = Index(fields=['headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_descending_columns_list_sql(self):\n+        index = Index(fields=['-headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s DESC)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_ops_class_columns_lists_sql(self):\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_ops_class_descending_columns_list_sql(self):\n+        index = Index(\n+            fields=['-headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops DESC)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n         \"\"\"\n         Index names should be deterministic.\n         \"\"\"\n",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..04cd164 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n@@ -12,6 +13,7 @@ from django.test import SimpleTestCase\n from django.test.utils import register_lookup\n \n from .models import Author, Item, ObjectC, Ranking\n+from django.db.models.sql.where import WhereNode\n \n \n class TestQuery(SimpleTestCase):\n@@ -107,7 +109,26 @@ class TestQuery(SimpleTestCase):\n         self.assertIsInstance(b_isnull.lhs, SimpleCol)\n         self.assertEqual(b_isnull.lhs.target, ObjectC._meta.get_field('objectb'))\n \n-    def test_clone_select_related(self):\n+    def test_iterable_lookup_value(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=['a', 'b']))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ['a', 'b'])  # Ensure the type is a list, not a tuple.\n+\n+    def test_tuple_lookup_value(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=('a', 'b')))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ('a', 'b'))  # Ensure tuple remains tuple.\n+\n+    def test_non_iterable_lookup_value(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name='a'))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, 'a')  # Ensure non-iterable remains unchanged.\n         query = Query(Item)\n         query.add_select_related(['creator'])\n         clone = query.clone()\n",
  "django__django-12125": "",
  "django__django-12143": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 2d13234..543ba4a 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -832,6 +832,48 @@ class ChangeListTests(TestCase):\n             '_save': 'Save',\n         }\n         superuser = self._create_superuser('superuser')\n+\n+    def test_get_list_editable_queryset_with_regex_chars_in_prefix(self):\n+        \"\"\"Test handling of regex characters in formset prefix.\"\"\"\n+        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n+        Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n+        data = {\n+            'form$-TOTAL_FORMS': '2',\n+            'form$-INITIAL_FORMS': '2',\n+            'form$-MIN_NUM_FORMS': '0',\n+            'form$-MAX_NUM_FORMS': '1000',\n+            'form$-0-uuid': str(a.pk),\n+            'form$-0-load': '10',\n+            '_save': 'Save',\n+        }\n+        superuser = self._create_superuser('superuser')\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form$')\n+        self.assertEqual(queryset.count(), 1)\n+\n+    def test_get_list_editable_queryset_with_complex_regex_prefix(self):\n+        \"\"\"Test handling of complex regex characters in formset prefix.\"\"\"\n+        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n+        Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n+        data = {\n+            'form[abc]-TOTAL_FORMS': '2',\n+            'form[abc]-INITIAL_FORMS': '2',\n+            'form[abc]-MIN_NUM_FORMS': '0',\n+            'form[abc]-MAX_NUM_FORMS': '1000',\n+            'form[abc]-0-uuid': str(a.pk),\n+            'form[abc]-0-load': '10',\n+            '_save': 'Save',\n+        }\n+        superuser = self._create_superuser('superuser')\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form[abc]')\n+        self.assertEqual(queryset.count(), 1)\n         self.client.force_login(superuser)\n         changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n         m = SwallowAdmin(Swallow, custom_site)\n",
  "django__django-12155": "",
  "django__django-12193": "diff --git a/tests/postgres_tests/test_array.py b/tests/postgres_tests/test_array.py\nindex 6228cbc..867e6d6 100644\n--- a/tests/postgres_tests/test_array.py\n+++ b/tests/postgres_tests/test_array.py\n@@ -1103,6 +1103,20 @@ class TestSplitFormWidget(PostgreSQLWidgetTestCase):\n             }\n         )\n \n+    def test_split_array_widget_checkbox_input_no_mutation(self):\n+        \"\"\"\n+        Test that SplitArrayField with CheckboxInput does not mutate the attributes\n+        dict and correctly reflects the initial data.\n+        \"\"\"\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('name', [True, False, True])\n+\n+        # Ensure that the `checked` attribute is correctly set for each subwidget\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{'checked': True}, {}, {'checked': True}]\n+        )\n+\n     def test_render(self):\n         self.check_html(\n             SplitArrayWidget(forms.TextInput(), size=2), 'array', None,\n",
  "django__django-12209": "diff --git a/tests/serializers/models/data.py b/tests/serializers/models/data.py\nindex 946715d..d9ee98b 100644\n--- a/tests/serializers/models/data.py\n+++ b/tests/serializers/models/data.py\n@@ -246,11 +246,10 @@ class SlugPKData(models.Model):\n class SmallPKData(models.Model):\n     data = models.SmallIntegerField(primary_key=True)\n \n-# class TextPKData(models.Model):\n-#     data = models.TextField(primary_key=True)\n+import uuid  # Import uuid module for UUID generation\n \n-# class TimePKData(models.Model):\n-#    data = models.TimeField(primary_key=True)\n+class UUIDDefaultData(models.Model):\n+    data = models.UUIDField(primary_key=True, default=uuid.uuid4)\n \n \n class UUIDData(models.Model):\n",
  "django__django-12262": "",
  "django__django-12276": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 61f7a13..e596100 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import copy\n import datetime\n import json\n@@ -16,6 +17,7 @@ from django.forms import (\n )\n from django.forms.renderers import DjangoTemplates, get_default_renderer\n from django.forms.utils import ErrorList\n+from django.forms import FileInput\n from django.http import QueryDict\n from django.template import Context, Template\n from django.test import SimpleTestCase\n@@ -2486,6 +2488,28 @@ Password: <input type=\"password\" name=\"password\" required>\n         self.assertEqual(f.errors, {})\n         self.assertEqual(f.cleaned_data['file1'], 'resume.txt')\n \n+    def test_fileinput_no_required_when_initial_data(self):\n+        class FileForm(Form):\n+            file1 = FileField(widget=FileInput)\n+\n+        # Test that when there is initial data, the required attribute is not present\n+        f = FileForm(initial={'file1': 'initial.txt'}, auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n+        )\n+\n+    def test_fileinput_required_when_no_initial_data(self):\n+        class FileForm(Form):\n+            file1 = FileField(widget=FileInput)\n+\n+        # Test that when there is no initial data, the required attribute is present\n+        f = FileForm(auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n+        )\n+\n     def test_basic_processing_in_view(self):\n         class UserRegistration(Form):\n             username = CharField(max_length=10)\n",
  "django__django-12304": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 6cabf01..5c85438 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import decimal\n import ipaddress\n@@ -149,8 +150,26 @@ class ChoicesTests(SimpleTestCase):\n                 with self.subTest(member=member):\n                     self.assertEqual(str(test[member.name]), str(member.value))\n \n-\n-class Separator(bytes, models.Choices):\n+from django.template import Context, Template\n+\n+class EnumerationTemplateTests(SimpleTestCase):\n+    def test_enum_in_template(self):\n+        # Assuming YearInSchool is a defined enumeration similar to Suit\n+        class YearInSchool(models.TextChoices):\n+            FRESHMAN = 'FR', 'Freshman'\n+            SOPHOMORE = 'SO', 'Sophomore'\n+            JUNIOR = 'JR', 'Junior'\n+            SENIOR = 'SR', 'Senior'\n+        \n+        # Test using enumeration in template\n+        template = Template('{% if student.year_in_school == YearInSchool.FRESHMAN %}Yes{% else %}No{% endif %}')\n+        context = Context({'YearInSchool': YearInSchool, 'student': {'year_in_school': YearInSchool.FRESHMAN}})\n+        output = template.render(context)\n+        self.assertEqual(output, 'Yes')\n+\n+        context = Context({'YearInSchool': YearInSchool, 'student': {'year_in_school': YearInSchool.SOPHOMORE}})\n+        output = template.render(context)\n+        self.assertEqual(output, 'No')\n     FS = b'\\x1c', 'File Separator'\n     GS = b'\\x1d', 'Group Separator'\n     RS = b'\\x1e', 'Record Separator'\n",
  "django__django-12308": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex acbcf33..c77ec22 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -138,8 +138,22 @@ class UtilsTests(SimpleTestCase):\n                 resolved_value = display_for_field(resolved_value, field, self.empty_value)\n \n             self.assertEqual(value, resolved_value)\n-\n-    def test_null_display_for_field(self):\n+    def test_jsonfield_display_for_field(self):\n+        \"\"\"\n+        Test that JSONField values are displayed correctly when readonly in the admin.\n+        \"\"\"\n+        tests = [\n+            ({'foo': 'bar'}, '{\"foo\": \"bar\"}'),  # Valid JSON object\n+            (['foo', 'bar'], '[\"foo\", \"bar\"]'),  # Valid JSON array\n+            ('foo', '\"foo\"'),  # Valid JSON string\n+            ({'foo': None}, '{\"foo\": null}'),  # JSON null\n+            ({'nested': {'key': 'value'}}, '{\"nested\": {\"key\": \"value\"}}'),  # Nested JSON object\n+            (None, self.empty_value),  # None should be displayed as empty value\n+        ]\n+        for value, expected_display in tests:\n+            with self.subTest(value=value):\n+                display_value = display_for_field(value, models.JSONField(), self.empty_value)\n+                self.assertEqual(display_value, expected_display)\n         \"\"\"\n         Regression test for #12550: display_for_field should handle None\n         value.\n",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..4ab66f3 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1006,6 +1006,26 @@ class OtherModelTests(SimpleTestCase):\n \n         self.assertEqual(ShippingMethod.check(), [])\n \n+    def test_order_of_onetoonefield_declaration(self):\n+        \"\"\"\n+        Test the order of OneToOneField declarations with parent_link.\n+        \"\"\"\n+        class Document(models.Model):\n+            pass\n+\n+        # Case where declaration order matters\n+        with self.assertRaisesMessage(ImproperlyConfigured, \"Add parent_link=True to invalid_models_tests.Picking.origin.\"):\n+            class Picking(Document):\n+                document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+                origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+\n+        # Case where declaration order is correct\n+        class PickingCorrect(Document):\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+\n+        self.assertEqual(PickingCorrect.check(), [])\n+\n     def test_missing_parent_link(self):\n         msg = 'Add parent_link=True to invalid_models_tests.ParkingLot.parent.'\n         with self.assertRaisesMessage(ImproperlyConfigured, msg):\n",
  "django__django-12419": "diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py\nindex 7af62eb..539139f 100644\n--- a/tests/middleware/test_security.py\n+++ b/tests/middleware/test_security.py\n@@ -231,7 +231,12 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         \"\"\"\n         self.assertNotIn('Referrer-Policy', self.process_response())\n \n-    def test_referrer_policy_on(self):\n+    @override_settings(SECURE_REFERRER_POLICY='same-origin')\n+    def test_referrer_policy_default(self):\n+        \"\"\"\n+        Test that the default SECURE_REFERRER_POLICY is set to 'same-origin'.\n+        \"\"\"\n+        self.assertEqual(self.process_response().get('Referrer-Policy'), 'same-origin')\n         \"\"\"\n         With SECURE_REFERRER_POLICY set to a valid value, the middleware adds a\n         \"Referrer-Policy\" header to the response.\n@@ -248,10 +253,17 @@ class SecurityMiddlewareTest(SimpleTestCase):\n                 self.assertEqual(self.process_response()['Referrer-Policy'], expected)\n \n     @override_settings(SECURE_REFERRER_POLICY='strict-origin')\n-    def test_referrer_policy_already_present(self):\n+    @override_settings(SECURE_REFERRER_POLICY='same-origin')\n+    def test_referrer_policy_with_different_setting(self):\n+        \"\"\"\n+        Test that SECURE_REFERRER_POLICY set to 'same-origin' does not override\n+        a different existing 'Referrer-Policy' header in the response.\n+        \"\"\"\n+        response = self.process_response(headers={'Referrer-Policy': 'no-referrer'})\n+        self.assertEqual(response['Referrer-Policy'], 'no-referrer')\n         \"\"\"\n         The middleware will not override a \"Referrer-Policy\" header already\n         present in the response.\n         \"\"\"\n         response = self.process_response(headers={'Referrer-Policy': 'unsafe-url'})\n-        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n",
  "django__django-12663": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 872551b..1130403 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -22,13 +22,37 @@ from django.db.models.sql.datastructures import Join\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import Approximate, isolate_apps\n \n+from django.utils.functional import SimpleLazyObject\n from .models import (\n-    UUID, UUIDPK, Company, Employee, Experiment, Number, RemoteEmployee,\n+    UUID, UUIDPK, Company, Employee, Experiment, Manager, Number, RemoteEmployee,\n     Result, SimulationRun, Time,\n )\n \n \n-class BasicExpressionsTests(TestCase):\n+class SubqueryWithSimpleLazyObjectTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.manager = Manager.objects.create(name=\"Manager\")\n+        cls.employee_with_manager = Employee.objects.create(\n+            firstname='Max', lastname='Mustermann', salary=50000\n+        )\n+        cls.employee_with_manager.manager = cls.manager\n+        cls.employee_with_manager.save()\n+        cls.company = Company.objects.create(\n+            name=\"GmbH\", num_employees=1, num_chairs=1,\n+            ceo=cls.employee_with_manager\n+        )\n+    \n+    def test_subquery_filter_by_lazy(self):\n+        lazy_manager = SimpleLazyObject(lambda: Manager.objects.get(pk=self.manager.pk))\n+        qs = Company.objects.annotate(\n+            ceo_manager=Subquery(\n+                Employee.objects.filter(\n+                    lastname=OuterRef('ceo__lastname'),\n+                ).values('manager'),\n+            ),\n+        ).filter(ceo_manager=lazy_manager)\n+        self.assertEqual(qs.get(), self.company)\n     @classmethod\n     def setUpTestData(cls):\n         cls.example_inc = Company.objects.create(\n",
  "django__django-12708": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 2df48a2..fc713fa 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1759,7 +1759,40 @@ class OperationTests(OperationTestBase):\n         operation = migrations.AlterIndexTogether(\"Pony\", None)\n         self.assertEqual(operation.describe(), \"Alter index_together for Pony (0 constraint(s))\")\n \n-    @skipUnlessDBFeature('supports_table_check_constraints')\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_alter_index_together_remove_with_unique_together_and_recreate(self):\n+        app_label = 'test_alintoremove_wunto_recreate'\n+        table_name = '%s_pony' % app_label\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        \n+        # Add index together.\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        \n+        # Remove index together.\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+\n+        # Re-add index together with the new Options.indexes feature.\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n     def test_add_constraint(self):\n         project_state = self.set_up_test_model(\"test_addconstraint\")\n         gt_check = models.Q(pink__gt=2)\n",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..8a5a9d7 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -7,6 +7,7 @@ from importlib import import_module\n import pytz\n \n from django import forms\n+from django.contrib import admin\n from django.conf import settings\n from django.contrib import admin\n from django.contrib.admin import widgets\n@@ -14,7 +15,7 @@ from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.auth.models import User\n from django.core.files.storage import default_storage\n from django.core.files.uploadedfile import SimpleUploadedFile\n-from django.db.models import CharField, DateField, DateTimeField, UUIDField\n+from django.db.models import CharField, DateField, DateTimeField, UUIDField, ManyToManyField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..b0ffe95 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,7 +172,7 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n@@ -181,4 +181,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..42330b5 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -8,7 +8,8 @@ from django.db import connection\n from django.db.models import Exists, Max, OuterRef\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n-from django.utils.deprecation import RemovedInDjango40Warning\n+from django.db import models\n+from django.test.utils import isolate_apps\n \n from .models import (\n     Article, Author, Freebie, Game, IsNullWithNoneAsRHS, Player, Season, Tag,\n@@ -189,7 +190,44 @@ class LookupTests(TestCase):\n             }\n         )\n \n-    def test_in_bulk_non_unique_field(self):\n+    def test_in_bulk_meta_constraint(self):\n+        # Create seasons with unique years and test in_bulk with the unique constraint.\n+        season_2011 = Season.objects.create(year=2011)\n+        season_2012 = Season.objects.create(year=2012)\n+        Season.objects.create(year=2013)\n+        self.assertEqual(\n+            Season.objects.in_bulk(\n+                [season_2011.year, season_2012.year],\n+                field_name='year',\n+            ),\n+            {season_2011.year: season_2011, season_2012.year: season_2012},\n+        )\n+\n+    @isolate_apps('lookup')\n+    def test_in_bulk_non_unique_meta_constraint(self):\n+        class Model(models.Model):\n+            ean = models.CharField(max_length=100)\n+            brand = models.CharField(max_length=100)\n+            name = models.CharField(max_length=80)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=['ean'],\n+                        name='partial_ean_unique',\n+                        condition=models.Q(is_active=True)\n+                    ),\n+                    models.UniqueConstraint(\n+                        fields=['brand', 'name'],\n+                        name='together_brand_name_unique',\n+                    ),\n+                ]\n+\n+        msg = \"in_bulk()'s field_name must be a unique field but '%s' isn't.\"\n+        for field_name in ['brand', 'ean']:\n+            with self.subTest(field_name=field_name):\n+                with self.assertRaisesMessage(ValueError, msg % field_name):\n+                    Model.objects.in_bulk(field_name=field_name)\n         msg = \"in_bulk()'s field_name must be a unique field but 'author' isn't.\"\n         with self.assertRaisesMessage(ValueError, msg):\n             Article.objects.in_bulk([self.au1], field_name='author')\n",
  "django__django-12858": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 3b6974f..cdeafd4 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -905,7 +905,37 @@ class OtherModelTests(SimpleTestCase):\n \n         self.assertEqual(Child.check(), [])\n \n-    def test_ordering_pointing_to_foreignkey_field(self):\n+    def test_ordering_with_isnull_lookup(self):\n+        class Supply(models.Model):\n+            product = models.ForeignKey('Product', models.CASCADE)\n+\n+        class Product(models.Model):\n+            parent = models.ForeignKey('self', models.CASCADE, null=True)\n+\n+        class Stock(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('supply__product__parent__isnull',)\n+\n+        # Ensure that no errors are raised in ordering using isnull lookup\n+        self.assertEqual(Stock.check(), [])\n+\n+    def test_ordering_with_reverse_isnull_lookup(self):\n+        class Supply(models.Model):\n+            product = models.ForeignKey('Product', models.CASCADE)\n+\n+        class Product(models.Model):\n+            parent = models.ForeignKey('self', models.CASCADE, null=True)\n+\n+        class Stock(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('-supply__product__parent__isnull',)\n+\n+        # Ensure that no errors are raised in ordering using reverse isnull lookup\n+        self.assertEqual(Stock.check(), [])\n         class Parent(models.Model):\n             pass\n \n",
  "django__django-13012": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 87c0945..e2e1bc3 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1821,10 +1821,31 @@ class CombinableTests(SimpleTestCase):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             Combinable() | Combinable()\n \n-    def test_reversed_and(self):\n+class ExpressionWrapperTests(SimpleTestCase):\n+    def test_empty_group_by(self):\n+        expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [])\n+\n+    def test_non_empty_group_by(self):\n+        expr = ExpressionWrapper(Lower(Value('f')), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [expr.expression])\n+\n+    def test_constant_expression_not_in_group_by(self):\n+        # This test checks if a constant expression within ExpressionWrapper is not incorrectly added to GROUP BY\n+        expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+        class MockQuerySet:\n+            def annotate(self, **kwargs):\n+                return self\n+\n+            def values(self, *args, **kwargs):\n+                return self\n+\n+        qs = MockQuerySet()\n+        qs = qs.annotate(expr_res=expr).values('expr_res', 'column_a')\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [])\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             object() & Combinable()\n \n     def test_reversed_or(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n-            object() | Combinable()\n+            object() | Combinable()\n",
  "django__django-13028": "",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..b2b5056 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,6 +343,34 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_self_referencing_foreign_key_ordering(self):\n+        # Setting up models with self-referencing foreign keys\n+        root1 = Author.objects.create(name=\"Root1\")\n+        child1 = Author.objects.create(name=\"Child1\", editor=root1)\n+        child2 = Author.objects.create(name=\"Child2\", editor=root1)\n+        \n+        # Create articles for the authors\n+        article1 = Article.objects.create(author=child1, headline=\"Article 1\", pub_date=timezone.now())\n+        article2 = Article.objects.create(author=child2, headline=\"Article 2\", pub_date=timezone.now())\n+\n+        # Test ordering by self-referencing foreign key\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            [\"Article 1\", \"Article 2\"],\n+            attrgetter('headline')\n+        )\n+\n+        # Test ordering with a reversed order_by\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__editor_id'),\n+            [\"Article 2\", \"Article 1\"],\n+            attrgetter('headline')\n+        )\n+\n+        # Check SQL query correctness\n+        qs = Article.objects.filter(author__isnull=False).order_by('author__editor_id')\n+        print(qs.query)\n+\n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n@@ -353,6 +381,34 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n+\n+    def test_self_referencing_foreign_key_ordering(self):\n+        # Setting up models with self-referencing foreign keys\n+        root1 = Author.objects.create(name=\"Root1\")\n+        child1 = Author.objects.create(name=\"Child1\", editor=root1)\n+        child2 = Author.objects.create(name=\"Child2\", editor=root1)\n+        \n+        # Create articles for the authors\n+        article1 = Article.objects.create(author=child1, headline=\"Article 1\", pub_date=timezone.now())\n+        article2 = Article.objects.create(author=child2, headline=\"Article 2\", pub_date=timezone.now())\n+\n+        # Test ordering by self-referencing foreign key\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            [\"Article 1\", \"Article 2\"],\n+            attrgetter('headline')\n+        )\n+\n+        # Test ordering with a reversed order_by\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__editor_id'),\n+            [\"Article 2\", \"Article 1\"],\n+            attrgetter('headline')\n+        )\n+\n+        # Check SQL query correctness\n+        qs = Article.objects.filter(author__isnull=False).order_by('author__editor_id')\n+        print(qs.query)\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline').asc()), [\n                 \"Article 1\",\n",
  "django__django-13089": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex e11856f..98d8435 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -615,6 +615,38 @@ class BaseCacheTests:\n                 count += 1\n         self.assertEqual(count, final_count)\n \n+    def test_cull_no_data(self):\n+        \"\"\"\n+        Test that the _cull method does not fail when cursor.fetchone() returns None.\n+        \"\"\"\n+        from django.core.cache import caches\n+        from django.core.cache.backends.base import InvalidCacheBackendError\n+        import datetime\n+        from unittest.mock import Mock\n+\n+        try:\n+            cull_cache = caches['cull']\n+        except InvalidCacheBackendError:\n+            self.skipTest(\"Culling isn't implemented.\")\n+\n+        db = cull_cache._get_db()\n+        connection = connections[db]\n+        table = connection.ops.quote_name(cull_cache._table)\n+\n+        # Mock a cursor that returns None for fetchone\n+        cursor = Mock()\n+        cursor.fetchone.return_value = None\n+\n+        # Mock the connection's cursor method to return our mock cursor\n+        connection.cursor = Mock(return_value=cursor)\n+\n+        # Execute _cull and ensure no exception is thrown\n+        try:\n+            now = datetime.datetime.now()\n+            cull_cache._cull(db, cursor, now)\n+        except Exception as e:\n+            self.fail(f\"_cull raised an exception unexpectedly: {e}\")\n+\n     def test_cull(self):\n         self._perform_cull_test('cull', 50, 29)\n \n",
  "django__django-13109": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex d60d822..2d22b1b 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -1645,7 +1645,48 @@ class ModelFormBasicTests(TestCase):\n         obj.full_clean()\n \n \n-class ModelMultipleChoiceFieldTests(TestCase):\n+from django.test import TestCase\n+from django import forms\n+from django.core.exceptions import ValidationError\n+from .models import Article, Writer\n+\n+class ForeignKeyValidationTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.archived_writer = Writer.objects.create(name='Archived Writer', archived=True)\n+\n+    def test_foreign_key_validation_with_default_manager(self):\n+        class ArticleForm(forms.ModelForm):\n+            class Meta:\n+                model = Article\n+                fields = '__all__'\n+\n+        data = {\n+            'title': 'Test Article',\n+            'writer': self.archived_writer.pk,\n+        }\n+        form = ArticleForm(data)\n+        self.assertFalse(form.is_valid())\n+        self.assertEqual(form.errors['writer'], [\"Select a valid choice. That choice is not one of the available choices.\"])\n+\n+    def test_foreign_key_validation_with_base_manager(self):\n+        class ArticleForm(forms.ModelForm):\n+            class Meta:\n+                model = Article\n+                fields = '__all__'\n+\n+            def __init__(self, *args, **kwargs):\n+                super().__init__(*args, **kwargs)\n+                self.fields['writer'].queryset = Writer._base_manager.all()\n+\n+        data = {\n+            'title': 'Test Article',\n+            'writer': self.archived_writer.pk,\n+        }\n+        form = ArticleForm(data)\n+        self.assertTrue(form.is_valid())\n+        article = form.save()\n+        self.assertEqual(article.writer, self.archived_writer)\n     @classmethod\n     def setUpTestData(cls):\n         cls.c1 = Category.objects.create(name='Entertainment', slug='entertainment', url='entertainment')\n",
  "django__django-13112": "",
  "django__django-13121": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex a684d7e..1599395 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1216,6 +1216,21 @@ class ExpressionOperatorTests(TestCase):\n         self.assertEqual(Number.objects.get(pk=self.n.pk).integer, 26)\n         self.assertEqual(Number.objects.get(pk=self.n1.pk).integer, -26)\n \n+    def test_duration_expressions_with_delta(self):\n+        \"\"\"Test DurationField expressions with timedelta on SQLite and MySQL\"\"\"\n+        deltas = [datetime.timedelta(days=1), datetime.timedelta(hours=5, minutes=30)]\n+        for delta in deltas:\n+            qs = Experiment.objects.annotate(duration=F('estimated_time') + delta)\n+            for obj in qs:\n+                self.assertEqual(obj.duration, obj.estimated_time + delta)\n+\n+    def test_duration_expressions_with_zero_delta(self):\n+        \"\"\"Test DurationField expressions with zero timedelta to ensure no change\"\"\"\n+        delta = datetime.timedelta(0)\n+        qs = Experiment.objects.annotate(duration=F('estimated_time') + delta)\n+        for obj in qs:\n+            self.assertEqual(obj.duration, obj.estimated_time)\n+\n     @unittest.skipIf(connection.vendor == 'oracle', \"Oracle doesn't support bitwise XOR.\")\n     def test_lefthand_bitwise_xor_null(self):\n         employee = Employee.objects.create(firstname='John', lastname='Doe')\n",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..bac3bb2 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1618,7 +1618,21 @@ class FTimeDeltaTests(TestCase):\n         self.assertTrue(queryset.exists())\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n-    def test_datetime_subtraction_microseconds(self):\n+    def test_temporal_subtraction_without_expression_wrapper(self):\n+        # Test direct subtraction of DateTimeField fields without using ExpressionWrapper\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        expected_deltas = {\n+            'e0': datetime.timedelta(days=1),\n+            'e1': datetime.timedelta(days=2),\n+            'e2': datetime.timedelta(days=3),\n+            'e3': datetime.timedelta(days=4),\n+            'e4': datetime.timedelta(days=5),\n+            'e5': datetime.timedelta(days=6),\n+        }\n+        for experiment in queryset:\n+            self.assertEqual(experiment.delta, expected_deltas[experiment.name])\n         delta = datetime.timedelta(microseconds=8999999999999999)\n         Experiment.objects.update(end=F('start') + delta)\n         qs = Experiment.objects.annotate(\n",
  "django__django-13158": "",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..5b16f15 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -34,6 +34,7 @@ from django.test import (\n     RequestFactory, TestCase, ignore_warnings, override_settings,\n )\n from django.utils import timezone\n+from django.utils.deprecation import RemovedInDjango40Warning\n \n from .models import SessionStore as CustomDatabaseSession\n \n@@ -312,7 +313,12 @@ class SessionTestsMixin:\n         self.assertEqual(self.session.decode(encoded), data)\n \n     @override_settings(SECRET_KEY='django_tests_secret_key')\n-    def test_decode_legacy(self):\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    @override_settings(DEFAULT_HASHING_ALGORITHM='sha1')\n+    def test_default_hashing_algorithm_legacy_decode(self):\n+        data = {'a test key': 'a test value'}\n+        encoded = self.session.encode(data)\n+        self.assertEqual(self.session._legacy_decode(encoded), data)\n         # RemovedInDjango40Warning: pre-Django 3.1 sessions will be invalid.\n         legacy_encoded = (\n             'OWUzNTNmNWQxNTBjOWExZmM4MmQ3NzNhMDRmMjU4NmYwNDUyNGI2NDp7ImEgdGVzd'\n@@ -330,7 +336,20 @@ class SessionTestsMixin:\n         # The failed decode is logged.\n         self.assertIn('corrupted', cm.output[0])\n \n-    def test_actual_expiry(self):\n+    def test_decode_with_sha1_algorithm(self):\n+        # Test session decoding with sha1 hash algorithm setting\n+        with override_settings(DEFAULT_HASHING_ALGORITHM='sha1'):\n+            data = {'key1': 'value1', 'key2': 'value2'}\n+            encoded_data = self.session.encode(data)\n+            decoded_data = self.session.decode(encoded_data)\n+            self.assertEqual(data, decoded_data)\n+\n+    def test_decode_with_default_algorithm(self):\n+        # Test session decoding with default hash algorithm\n+        data = {'key3': 'value3', 'key4': 'value4'}\n+        encoded_data = self.session.encode(data)\n+        decoded_data = self.session.decode(encoded_data)\n+        self.assertEqual(data, decoded_data)\n         # this doesn't work with JSONSerializer (serializing timedelta)\n         with override_settings(SESSION_SERIALIZER='django.contrib.sessions.serializers.PickleSerializer'):\n             self.session = self.backend()  # reinitialize after overriding settings\n",
  "django__django-13297": "",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..04fefee 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -15,6 +15,7 @@ from django.forms.models import (\n     modelform_factory,\n )\n from django.template import Context, Template\n+from django.test.utils import isolate_apps\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n \n from .models import (\n@@ -2815,6 +2816,71 @@ class LimitChoicesToTests(TestCase):\n         f = StumpJokeWithCustomFieldForm()\n         self.assertEqual(f.fields['custom'].queryset, 42)\n \n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        # Create characters\n+        self.marley = Character.objects.create(username='Marley', last_action='2023-10-10')\n+        self.threepwood = Character.objects.create(username='Threepwood', last_action='2023-10-10')\n+\n+        # Create jokes\n+        joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.threepwood)\n+        joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.threepwood)\n+        joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.marley)\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=self.marley)\n+\n+        # Add ManyToMany relations\n+        joke1.has_fooled_today.add(self.marley, self.threepwood)\n+        joke2.has_fooled_today.add(self.marley)\n+        joke3.has_fooled_today.add(self.marley, self.threepwood)\n+\n+        # Define an inner class to avoid affecting the global state\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+\n     def test_fields_for_model_applies_limit_choices_to(self):\n         fields = fields_for_model(StumpJoke, ['has_fooled_today'])\n         self.assertSequenceEqual(fields['has_fooled_today'].queryset, [self.threepwood])\n",
  "django__django-13343": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex a5ab3a0..447f2e2 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -65,8 +65,32 @@ class GetStorageClassTests(SimpleTestCase):\n         with self.assertRaisesMessage(ImportError, \"No module named 'django.core.files.nonexistent_storage'\"):\n             get_storage_class('django.core.files.nonexistent_storage.NonexistentStorage')\n \n+from .models import callable_storage\n \n-class FileSystemStorageTests(unittest.TestCase):\n+\n+class FileFieldDeconstructionTests(TestCase):\n+    def test_filefield_with_callable_storage_deconstruction(self):\n+        \"\"\"\n+        Test that FileField with a callable storage parameter is deconstructed\n+        with the callable itself, not the evaluated storage instance.\n+        \"\"\"\n+        obj = Storage()\n+        _, _, kwargs = obj._meta.get_field('storage_callable').deconstruct()\n+        storage = kwargs['storage']\n+        self.assertIs(storage, callable_storage)\n+\n+    def test_filefield_with_callable_storage_runtime_variability(self):\n+        \"\"\"\n+        Ensure that the callable storage allows runtime variability,\n+        meaning the callable can return different storage instances.\n+        \"\"\"\n+        obj = Storage()\n+        \n+        # Assume callable_storage is a lambda or function returning a storage\n+        runtime_storage1 = callable_storage()\n+        runtime_storage2 = callable_storage()\n+        \n+        self.assertIsNot(runtime_storage1, runtime_storage2, \"The callable storage should allow different instances at runtime.\")\n \n     def test_deconstruction(self):\n         path, args, kwargs = temp_storage.deconstruct()\n",
  "django__django-13346": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex b918d5c..1908b97 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -632,7 +632,26 @@ class TestQuerying(TestCase):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='ar').exists(), False)\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='bar').exists(), True)\n \n-    def test_key_icontains(self):\n+    def test_key_in_lookup_transform(self):\n+        # Add test case to verify the fix for the reported issue\n+        # Ensure __in lookup works correctly with key transforms on JSONFields\n+        first_filter = {'value__key__in': [0]}\n+        first_items = NullableJSONModel.objects.filter(**first_filter)\n+        self.assertEqual(len(first_items), 0)  # Expected behavior after the fix\n+\n+        second_filter = {'value__key': 0}\n+        second_items = NullableJSONModel.objects.filter(**second_filter)\n+        self.assertEqual(len(second_items), 312)\n+\n+        # Additional tests for various key transforms and values\n+        third_filter = {'value__key__in': [0, 1]}\n+        third_items = NullableJSONModel.objects.filter(**third_filter)\n+        # Make a logical assertion based on what the expected behavior is post-fix\n+        self.assertEqual(len(third_items), 312)\n+\n+        fourth_filter = {'value__key': 1}\n+        fourth_items = NullableJSONModel.objects.filter(**fourth_filter)\n+        self.assertEqual(len(fourth_items), 0)\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__icontains='Ar').exists(), True)\n \n     def test_key_startswith(self):\n",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..f2a0d04 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -19,7 +19,10 @@ from django.test import (\n )\n from django.utils import timezone\n \n-from ..models import Author, DTModel, Fan\n+import pytz\n+from datetime import datetime\n+from django.db.models import Count\n+from ..models import Author, DTModel, Fan, TimeSlots\n \n \n def truncate_to(value, kind, tzinfo=None):\n",
  "django__django-13401": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e39d03e..9448b6e 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -103,7 +103,63 @@ class BasicFieldTests(SimpleTestCase):\n         self.assertEqual(path, 'model_fields.tests.Nested.Field')\n \n \n-class ChoicesTests(SimpleTestCase):\n+class AbstractFieldEqualityTests(TestCase):\n+    def test_abstract_inherited_fields(self):\n+        \"\"\"Field instances from abstract models are not equal.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        self.assertNotEqual(abstract_model_field, inherit1_model_field)\n+        self.assertNotEqual(abstract_model_field, inherit2_model_field)\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+\n+        self.assertLess(abstract_model_field, inherit1_model_field)\n+        self.assertLess(abstract_model_field, inherit2_model_field)\n+        self.assertLess(inherit1_model_field, inherit2_model_field)\n+\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit1_model_field))\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit2_model_field))\n+        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n+\n+    def test_equality_with_different_models(self):\n+        \"\"\"Fields from different models should not be equal.\"\"\"\n+        class Model1(models.Model):\n+            field = models.IntegerField()\n+\n+        class Model2(models.Model):\n+            field = models.IntegerField()\n+\n+        model1_field = Model1._meta.get_field('field')\n+        model2_field = Model2._meta.get_field('field')\n+\n+        self.assertNotEqual(model1_field, model2_field)\n+        self.assertNotEqual(hash(model1_field), hash(model2_field))\n+\n+    def test_lt_with_different_models(self):\n+        \"\"\"Test less than comparison with fields from different models.\"\"\"\n+        class Model1(models.Model):\n+            field = models.IntegerField()\n+\n+        class Model2(models.Model):\n+            field = models.IntegerField()\n+\n+        model1_field = Model1._meta.get_field('field')\n+        model2_field = Model2._meta.get_field('field')\n+\n+        self.assertLess(model1_field, model2_field)  # Based on creation order\n \n     @classmethod\n     def setUpClass(cls):\n",
  "django__django-13410": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 1285e22..b9af0db 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -1,3 +1,4 @@\n+\n import errno\n import gzip\n import os\n@@ -8,7 +9,7 @@ from io import BytesIO, StringIO, TextIOWrapper\n from pathlib import Path\n from unittest import mock\n \n-from django.core.files import File\n+from django.core.files import File, locks  # Added import for locks module\n from django.core.files.base import ContentFile\n from django.core.files.move import file_move_safe\n from django.core.files.temp import NamedTemporaryFile\n@@ -178,6 +179,27 @@ class NoNameFileTestCase(unittest.TestCase):\n     def test_noname_file_default_name(self):\n         self.assertIsNone(File(BytesIO(b'A file with no name')).name)\n \n+    def test_lock_exclusive_non_blocking(self):\n+        \"\"\"\n+        Test acquiring an exclusive lock with non-blocking flag.\n+        \"\"\"\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'w+') as f1, open(file_path, 'w+') as f2:\n+            self.assertIs(locks.lock(f1, locks.LOCK_EX), True, \"Should acquire exclusive lock on f1\")\n+            self.assertIs(locks.lock(f2, locks.LOCK_EX | locks.LOCK_NB), False, \"Should not acquire exclusive non-blocking lock on f2 when f1 is locked\")\n+            self.assertIs(locks.unlock(f1), True, \"Should successfully unlock f1\")\n+\n+    def test_lock_shared_non_blocking(self):\n+        \"\"\"\n+        Test acquiring a shared lock with non-blocking flag.\n+        \"\"\"\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'w+') as f1, open(file_path, 'w+') as f2:\n+            self.assertIs(locks.lock(f1, locks.LOCK_SH), True, \"Should acquire shared lock on f1\")\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), True, \"Should acquire shared non-blocking lock on f2\")\n+            self.assertIs(locks.unlock(f1), True, \"Should successfully unlock f1\")\n+            self.assertIs(locks.unlock(f2), True, \"Should successfully unlock f2\")\n+\n     def test_noname_file_get_size(self):\n         self.assertEqual(File(BytesIO(b'A file with no name')).size, 19)\n \n",
  "django__django-13417": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 8130de5..3eea6a0 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2084,6 +2084,16 @@ class QuerysetOrderedTests(unittest.TestCase):\n         self.assertIs(qs.ordered, False)\n         self.assertIs(qs.order_by('num_notes').ordered, True)\n \n+    def test_annotated_default_ordering(self):\n+        qs = Annotation.objects.annotate(num_notes=Count('pk'))\n+        self.assertIs(qs.ordered, False)  # Annotated queries should not be ordered by default\n+        self.assertIs(qs.order_by('name').ordered, True)\n+\n+    def test_annotated_values_default_ordering(self):\n+        qs = Annotation.objects.values('name').annotate(num_notes=Count('pk'))\n+        self.assertIs(qs.ordered, False)  # Annotated values queries should not be ordered by default\n+        self.assertIs(qs.order_by('name').ordered, True)\n+\n \n @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n class SubqueryTests(TestCase):\n",
  "django__django-13516": "",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..bffea36 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,11 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n+from .with_custom_email_field import CustomEmailField\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n@@ -25,7 +27,37 @@ class TokenGeneratorTest(TestCase):\n         tk1 = p0.make_token(user)\n         self.assertIs(p0.check_token(user, tk1), True)\n \n-    def test_10265(self):\n+    def test_token_invalidation_on_email_change(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        user = User.objects.create_user('testuser', 'test4@example.com', 'testpw')\n+        token_generator = PasswordResetTokenGenerator()\n+        token = token_generator.make_token(user)\n+        self.assertIs(token_generator.check_token(user, token), True)\n+        \n+        # Change the email and save the user\n+        user.email = 'newemail@example.com'\n+        user.save()\n+        \n+        # The token should now be invalid\n+        self.assertIs(token_generator.check_token(user, token), False)\n+\n+    def test_token_with_custom_email_field(self):\n+        \"\"\"Updating a CustomEmailField user's email address invalidates the token.\"\"\"\n+        user = CustomEmailField.objects.create_user(\n+            username='customtestuser',\n+            email='customemail@example.com',\n+            password='testpw'\n+        )\n+        token_generator = PasswordResetTokenGenerator()\n+        token = token_generator.make_token(user)\n+        self.assertIs(token_generator.check_token(user, token), True)\n+        \n+        # Change the custom email field and save the user\n+        setattr(user, user.EMAIL_FIELD, 'newcustomemail@example.com')\n+        user.save()\n+        \n+        # The token should now be invalid\n+        self.assertIs(token_generator.check_token(user, token), False)\n         \"\"\"\n         The token generated for a user created in the same request\n         will work correctly.\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..403c735 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,7 +1,9 @@\n+\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n from django.contrib.auth.models import AbstractBaseUser\n+from django.db.models import Q, UniqueConstraint\n from django.core import checks\n from django.db import models\n from django.test import (\n@@ -138,7 +140,51 @@ class ModelsPermissionsChecksTests(SimpleTestCase):\n             ),\n         ])\n \n-    def test_non_clashing_custom_permissions(self):\n+    @override_settings(AUTH_USER_MODEL='auth_tests.UserWithPartialUniqueConstraint')\n+    def test_username_partial_unique_constraint(self):\n+        \"\"\"\n+        Test that USERNAME_FIELD with a partial unique constraint raises a warning.\n+        \"\"\"\n+        class UserWithPartialUniqueConstraint(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(\n+                        fields=['username'],\n+                        name='username_partial_unique',\n+                        condition=Q(password__isnull=False),\n+                    ),\n+                ]\n+\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [\n+            checks.Warning(\n+                \"'UserWithPartialUniqueConstraint.username' is named as the \"\n+                \"'USERNAME_FIELD', but it is not unique.\",\n+                hint='Ensure that your authentication backend(s) can handle non-unique usernames.',\n+                obj=UserWithPartialUniqueConstraint,\n+                id='auth.W004',\n+            ),\n+        ])\n+\n+    @override_settings(AUTH_USER_MODEL='auth_tests.UserWithFullUniqueConstraint')\n+    def test_username_full_unique_constraint(self):\n+        \"\"\"\n+        Test that USERNAME_FIELD with a full unique constraint does not raise an error.\n+        \"\"\"\n+        class UserWithFullUniqueConstraint(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(fields=['username'], name='username_full_unique'),\n+                ]\n+\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [])\n         class Checked(models.Model):\n             class Meta:\n                 permissions = [\n",
  "django__django-13569": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex a44d0b6..5ed1b5e 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1314,4 +1314,27 @@ class AggregateTestCase(TestCase):\n         # non-multivalued JOINs, see Col.possibly_multivalued (refs #31150):\n         # with self.assertNumQueries(1) as ctx:\n         #     self.assertSequenceEqual(books_qs, [book])\n-        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n+        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n+\n+    def test_aggregation_random_ordering(self):\n+        \"\"\"Random() is not included in the GROUP BY when used for ordering.\"\"\"\n+        authors = Author.objects.annotate(contact_count=Count('book')).order_by('?')\n+        self.assertQuerysetEqual(authors, [\n+            ('Adrian Holovaty', 1),\n+            ('Jacob Kaplan-Moss', 1),\n+            ('Brad Dayley', 1),\n+            ('James Bennett', 1),\n+            ('Jeffrey Forcier', 1),\n+            ('Paul Bissex', 1),\n+            ('Wesley J. Chun', 1),\n+            ('Stuart Russell', 1),\n+            ('Peter Norvig', 2),\n+        ], lambda a: (a.name, a.contact_count), ordered=False)\n+\n+    def test_random_ordering_does_not_break_aggregation(self):\n+        \"\"\"Verify that order_by('?') does not break the aggregation.\"\"\"\n+        t = Thing.objects.create()\n+        Related.objects.create(thing=t)\n+        Related.objects.create(thing=t)\n+        qs = Thing.objects.annotate(rc=Count('related')).order_by('?').values('id', 'rc')\n+        self.assertEqual(list(qs), [{'id': t.id, 'rc': 2}])\n",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..9e8d988 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -801,8 +802,25 @@ class BasicExpressionsTests(TestCase):\n             [self.example_inc.ceo, self.max],\n         )\n \n+from collections import namedtuple\n \n class IterableLookupInnerExpressionsTests(TestCase):\n+    def test_range_lookup_namedtuple(self):\n+        # Create a namedtuple for the range\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        \n+        # Construct the namedtuple with a valid range\n+        employee_range = EmployeeRange(minimum=51, maximum=100)\n+        \n+        # Query using the namedtuple as a range argument\n+        queryset = Company.objects.filter(num_employees__range=employee_range)\n+        \n+        # Verify that the queryset returns the expected results\n+        self.assertQuerysetEqual(\n+            queryset,\n+            ['<Company: 99300 Ltd>'],\n+            ordered=False\n+        )\n     @classmethod\n     def setUpTestData(cls):\n         ceo = Employee.objects.create(firstname='Just', lastname='Doit', salary=30)\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..4e52f6e 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -31,6 +31,7 @@ from django.db.migrations.recorder import MigrationRecorder\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n+from django.test.utils import captured_stderr, captured_stdout\n \n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n \n",
  "django__django-13670": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 6f0b13f..e5ad11a 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -1,3 +1,4 @@\n+\n from datetime import date, datetime\n \n from django.test import SimpleTestCase, override_settings\n@@ -112,7 +113,25 @@ class DateFormatTests(SimpleTestCase):\n \n         self.assertEqual(dateformat.format(my_birthday, r'jS \\o\\f F'), '8th of July')\n \n-    def test_futuredates(self):\n+    def test_year_before_1000(self):\n+        \"\"\"\n+        Test formatting of years less than 1000 with the 'y' format character.\n+        \"\"\"\n+        tests = [\n+            (476, '76'),   # Year 476 should be '76'\n+            (42, '42'),    # Year 42 should be '42'\n+            (4, '04'),     # Year 4 should be '04'\n+            (123, '23'),   # Year 123 should be '23'\n+            (999, '99'),   # Year 999 should be '99'\n+            (1000, '00'),  # Year 1000 should be '00' as it starts a new century\n+            (2000, '00'),  # Year 2000 should be '00'\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n         the_future = datetime(2100, 10, 25, 0, 00)\n         self.assertEqual(dateformat.format(the_future, r'Y'), '2100')\n \n@@ -164,4 +183,4 @@ class DateFormatTests(SimpleTestCase):\n             self.assertEqual(\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+            )\n",
  "django__django-13741": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex ca66cd5..fb41027 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1020,6 +1020,10 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n+    def test_readonly_field_is_disabled(self):\n+        field = ReadOnlyPasswordHashField()\n+        self.assertIs(field.disabled, True)\n+\n     def test_readonly_field_has_changed(self):\n         field = ReadOnlyPasswordHashField()\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n",
  "django__django-13786": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3782589..11964e8 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -119,7 +119,58 @@ class OptimizerTests(SimpleTestCase):\n             ]\n         )\n \n-    def _test_create_alter_foo_delete_model(self, alter_foo):\n+    def test_create_model_and_remove_model_options_with_empty_dict(self):\n+        \"\"\"\n+        Test that squashing CreateModel and AlterModelOptions with empty options results in correct options.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'verbose_name': 'My Model', 'ordering': ['id']},\n+                ),\n+                migrations.AlterModelOptions('MyModel', options={}),\n+            ],\n+            [\n+                migrations.CreateModel('MyModel', fields=[]),\n+            ],\n+        )\n+\n+    def test_create_model_and_override_model_options(self):\n+        \"\"\"\n+        Test that squashing CreateModel and AlterModelOptions with overriding options results in correct options.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={\n+                        'verbose_name': 'My Model',\n+                        'verbose_name_plural': 'My Models',\n+                        'permissions': [('view_mymodel', 'Can view MyModel')]\n+                    },\n+                ),\n+                migrations.AlterModelOptions(\n+                    'MyModel',\n+                    options={\n+                        'verbose_name': 'My Updated Model',\n+                        'permissions': [('view_mymodel', 'Can view updated MyModel')]\n+                    },\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={\n+                        'verbose_name': 'My Updated Model',\n+                        'permissions': [('view_mymodel', 'Can view updated MyModel')]\n+                    },\n+                ),\n+            ],\n+        )\n         \"\"\"\n         CreateModel, AlterModelTable, AlterUniqueTogether/AlterIndexTogether/\n         AlterOrderWithRespectTo, and DeleteModel should collapse into nothing.\n",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..dd430be 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,8 +1,10 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n from django.test import SimpleTestCase\n \n+from django.utils.translation import gettext_lazy, lazy\n from ..utils import setup\n \n \n@@ -41,6 +43,27 @@ class AddTests(SimpleTestCase):\n         output = self.engine.render_to_string('add06', {'t1': (3, 4), 't2': (1, 2)})\n         self.assertEqual(output, '(3, 4, 1, 2)')\n \n+    @setup({'add08': '{{ s1|add:lazy_s2 }}'})\n+    def test_add08(self):\n+        output = self.engine.render_to_string(\n+            'add08',\n+            {'s1': 'string', 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    @setup({'add09': '{{ lazy_s1|add:lazy_s2 }}'})\n+    def test_add09(self):\n+        output = self.engine.render_to_string(\n+            'add09',\n+            {'lazy_s1': gettext_lazy('string'), 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    def test_lazy_add(self):\n+        lazy_4 = lazy(lambda: 4, int)\n+        lazy_5 = lazy(lambda: 5, int)\n+        self.assertEqual(lazy_4() + lazy_5(), 9)\n+\n     @setup({'add07': '{{ d|add:t }}'})\n     def test_add07(self):\n         output = self.engine.render_to_string('add07', {'d': date(2000, 1, 1), 't': timedelta(10)})\n",
  "django__django-13807": "diff --git a/tests/backends/tests.py b/tests/backends/tests.py\nindex 0aee2b6..5cbfa4c 100644\n--- a/tests/backends/tests.py\n+++ b/tests/backends/tests.py\n@@ -18,14 +18,26 @@ from django.test import (\n     skipUnlessDBFeature,\n )\n \n+from django.db import connection, IntegrityError, transaction\n from .models import (\n     Article, Object, ObjectReference, Person, Post, RawData, Reporter,\n     ReporterProxy, SchoolClass, Square,\n     VeryLongModelNameZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ,\n )\n \n+class SQLKeywordsTest(TransactionTestCase):\n+    available_apps = ['backends']\n \n-class DateQuotingTest(TestCase):\n+    def test_check_constraints_sql_keywords(self):\n+        with transaction.atomic():\n+            obj = SQLKeywordsModel.objects.create(reporter=self.r)\n+            obj.refresh_from_db()\n+            obj.reporter_id = 30\n+            with connection.constraint_checks_disabled():\n+                obj.save()\n+                with self.assertRaises(IntegrityError):\n+                    connection.check_constraints(table_names=['order'])\n+            transaction.set_rollback(True)\n \n     def test_django_date_trunc(self):\n         \"\"\"\n",
  "django__django-13809": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex d88ea78..f6e6da9 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1314,6 +1314,14 @@ class ManageRunserver(SimpleTestCase):\n         self.assertIn('unapplied migration(s)', self.output.getvalue())\n \n \n+import mock\n+from django.core.management import call_command\n+from django.core.management.commands.runserver import Command as RunserverCommand\n+from django.test import TestCase\n+from io import StringIO\n+from importlib import import_module\n+from django.utils import autoreload\n+\n class ManageRunserverMigrationWarning(TestCase):\n \n     def setUp(self):\n@@ -1342,8 +1350,66 @@ class ManageRunserverMigrationWarning(TestCase):\n             'app_waiting_migration.', output\n         )\n \n+class ManageRunserverSkipChecks(TestCase):\n+    def setUp(self):\n+        self.output = StringIO()\n+\n+    @mock.patch('django.core.management.commands.runserver.run')\n+    @mock.patch('django.core.management.base.BaseCommand.check_migrations')\n+    @mock.patch('django.core.management.base.BaseCommand.check')\n+    def test_skip_checks(self, mocked_check, *mocked_objects):\n+        # Test the --skip-checks option\n+        call_command(\n+            'runserver',\n+            use_reloader=False,\n+            skip_checks=True,\n+            stdout=self.output,\n+        )\n+        self.assertNotIn('Performing system checks...', self.output.getvalue())\n+        mocked_check.assert_not_called()\n+\n+        # Test without the --skip-checks option\n+        self.output.truncate(0)\n+        self.output.seek(0)\n+        call_command(\n+            'runserver',\n+            use_reloader=False,\n+            skip_checks=False,\n+            stdout=self.output,\n+        )\n+        self.assertIn('Performing system checks...', self.output.getvalue())\n+        mocked_check.assert_called()\n+\n+    @mock.patch('django.core.management.base.BaseCommand.check')\n+    def test_default_behavior_without_skip_checks(self, mocked_check):\n+        # Test default behavior (should perform checks)\n+        call_command(\n+            'runserver',\n+            use_reloader=False,\n+            stdout=self.output,\n+        )\n+        self.assertIn('Performing system checks...', self.output.getvalue())\n+        mocked_check.assert_called()\n \n-class ManageRunserverEmptyAllowedHosts(AdminScriptTestCase):\n+    @mock.patch('django.core.management.base.BaseCommand.check')\n+    def test_skip_checks_with_invalid_option(self, mocked_check):\n+        # Test invalid option handling\n+        with self.assertRaises(SystemExit):\n+            call_command(\n+                'runserver',\n+                '--invalid-option',\n+                use_reloader=False,\n+                stdout=self.output,\n+            )\n+        mocked_check.assert_not_called()\n+\n+    def test_inner_run_exception_handling(self):\n+        # Test exception handling in inner_run\n+        try:\n+            with self.assertRaises(Exception):\n+                autoreload.check_errors(import_module)('test_exception')\n+        finally:\n+            autoreload._exception = None\n     def setUp(self):\n         super().setUp()\n         self.write_settings('settings.py', sdict={\n",
  "django__django-13810": "",
  "django__django-13820": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex 594c01e..43c24d2 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -1,3 +1,4 @@\n+\n import compileall\n import os\n \n@@ -8,8 +9,44 @@ from django.db.migrations.exceptions import (\n from django.db.migrations.loader import MigrationLoader\n from django.db.migrations.recorder import MigrationRecorder\n from django.test import TestCase, modify_settings, override_settings\n+from importlib import import_module\n+from types import ModuleType\n+\n+class FrozenEnvironmentTests(MigrationTestBase):\n+    \"\"\"\n+    Additional tests to simulate frozen environments and ensure that migrations\n+    can be loaded when __file__ is not set but __path__ is a list.\n+    \"\"\"\n \n-from .test_base import MigrationTestBase\n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations'})\n+    def test_loading_module_without_file_with_list_path(self):\n+        \"\"\"\n+        Ensure MigrationLoader loads migrations from modules with no __file__\n+        and with __path__ as a list.\n+        \"\"\"\n+        # Simulate a module with __file__ removed and __path__ a list.\n+        test_module = import_module('migrations.test_migrations')\n+        original_file = getattr(test_module, '__file__', None)\n+        original_path = test_module.__path__\n+        \n+        try:\n+            # Remove __file__ and ensure __path__ is a list.\n+            if hasattr(test_module, '__file__'):\n+                del test_module.__file__\n+            test_module.__path__ = list(original_path)  # Ensure it's a list\n+\n+            loader = MigrationLoader(connection)\n+            loader.load_disk()\n+            \n+            # Check if migrations are loaded correctly.\n+            migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n+            self.assertCountEqual(migrations, ['0001_initial', '0002_second'])\n+        \n+        finally:\n+            # Restore original attributes to avoid side effects.\n+            if original_file is not None:\n+                test_module.__file__ = original_file\n+            test_module.__path__ = original_path\n \n \n class RecorderTests(TestCase):\n",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..c890280 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -18,11 +18,10 @@ from django.test.utils import isolate_apps\n \n from ..models import Author, Item, Object, Square\n \n-try:\n-    from django.db.backends.sqlite3.base import check_sqlite_version\n-except ImproperlyConfigured:\n-    # Ignore \"SQLite is too old\" when running tests on another database.\n-    pass\n+import mock\n+from django.core.exceptions import ImproperlyConfigured\n+from django.db.backends.sqlite3.base import check_sqlite_version\n+import sqlite3.dbapi2 as dbapi2\n \n \n @unittest.skipUnless(connection.vendor == 'sqlite', 'SQLite tests')\n@@ -36,7 +35,24 @@ class Tests(TestCase):\n                 self.assertRaisesMessage(ImproperlyConfigured, msg):\n             check_sqlite_version()\n \n-    def test_aggregation(self):\n+    def test_check_sqlite_version_3_8_11_1(self):\n+        msg = 'SQLite 3.9.0 or later is required (found 3.8.11.1).'\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 8, 11, 1)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.8.11.1'), \\\n+                self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            check_sqlite_version()\n+    \n+    def test_check_sqlite_version_3_9_0(self):\n+        # This should pass as 3.9.0 is the minimum supported version.\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 9, 0)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.9.0'):\n+            check_sqlite_version()\n+\n+    def test_check_sqlite_version_3_11_0(self):\n+        # This should pass as 3.11.0 is above the minimum version.\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 11, 0)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.11.0'):\n+            check_sqlite_version()\n         \"\"\"Raise NotSupportedError when aggregating on date/time fields.\"\"\"\n         for aggregate in (Sum, Avg, Variance, StdDev):\n             with self.assertRaises(NotSupportedError):\n",
  "django__django-13837": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 10ffa22..30a794d 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -158,7 +158,14 @@ class TestIterModulesAndFiles(SimpleTestCase):\n \n class TestChildArguments(SimpleTestCase):\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver']\n+        )\n     def test_run_as_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n@@ -173,7 +180,14 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-Werror', __file__, 'runserver']\n         )\n \n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver']\n+        )\n     def test_exe_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             exe_path = Path(tmpdir) / 'django-admin.exe'\n",
  "django__django-13925": "diff --git a/tests/check_framework/test_model_checks.py b/tests/check_framework/test_model_checks.py\nindex 6424d89..6bb50ee 100644\n--- a/tests/check_framework/test_model_checks.py\n+++ b/tests/check_framework/test_model_checks.py\n@@ -402,6 +402,50 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n \n         self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n \n+    def test_inherited_explicit_pk(self):\n+        class Parent(models.Model):\n+            parent_id = models.AutoField(primary_key=True)\n+\n+        class ChildWithExplicitPK(Parent):\n+            pass\n+\n+        # No warnings should be raised for this case.\n+        self.assertEqual(\n+            checks.run_checks(app_configs=self.apps.get_app_configs()),\n+            []\n+        )\n+\n+    def test_inherited_explicit_pk_with_parent_link(self):\n+        class Parent(models.Model):\n+            parent_id = models.AutoField(primary_key=True)\n+\n+        class ChildWithParentLink(Parent):\n+            parent_ptr = models.OneToOneField(\n+                Parent, models.CASCADE, parent_link=True\n+            )\n+\n+        # No warnings should be raised for this case.\n+        self.assertEqual(\n+            checks.run_checks(app_configs=self.apps.get_app_configs()),\n+            []\n+        )\n+\n+    def test_inherited_explicit_pk_multiple_inheritance(self):\n+        class ParentOne(models.Model):\n+            parent_one_id = models.AutoField(primary_key=True)\n+\n+        class ParentTwo(models.Model):\n+            parent_two_id = models.AutoField(primary_key=True)\n+\n+        class ChildMultipleInheritance(ParentOne, ParentTwo):\n+            pass\n+\n+        # No warnings should be raised for this case.\n+        self.assertEqual(\n+            checks.run_checks(app_configs=self.apps.get_app_configs()),\n+            []\n+        )\n+\n     def test_explicit_pk(self):\n         class Model(models.Model):\n             id = models.BigAutoField(primary_key=True)\n@@ -414,4 +458,4 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             class Meta:\n                 app_label = 'check_framework.apps.CheckPKConfig'\n \n-        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n+        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..c2eead0 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -281,6 +281,10 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n             '</ul></li></ul>'\n         )\n \n+from django.forms import ModelChoiceField, ModelMultipleChoiceField\n+from .models import ChoiceModel\n+from .mixins import AssertFormErrorsMixin\n+from django.test import TestCase\n \n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n     def test_modelchoicefield(self):\n@@ -298,7 +302,18 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['INVALID CHOICE'], f.clean, '4')\n \n-        # ModelMultipleChoiceField\n+    def test_modelchoicefield_value_placeholder(self):\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            'invalid',\n+        )\n         e = {\n             'required': 'REQUIRED',\n             'invalid_choice': '%(value)s IS INVALID CHOICE',\n@@ -307,4 +322,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py\nindex 1078928..957e609 100644\n--- a/tests/many_to_one/models.py\n+++ b/tests/many_to_one/models.py\n@@ -63,6 +63,12 @@ class Third(models.Model):\n     third = models.ForeignKey('self', models.SET_NULL, null=True, related_name='child_set')\n \n \n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n+\n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n+\n class Parent(models.Model):\n     name = models.CharField(max_length=20, unique=True)\n     bestchild = models.ForeignKey('Child', models.SET_NULL, null=True, related_name='favored_by')\n",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..4e66350 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,7 +1,29 @@\n+\n from django.db import IntegrityError, transaction\n from django.test import TestCase, skipIfDBFeature\n \n-from .models import Bar, Business, Employee, Foo\n+from .models import Bar, Business, Employee, Foo, CustomAutoFieldModel\n+from .fields import MyWrapper\n+from django.test import skipUnlessDBFeature\n+\n+\n+class AutoFieldSubclassTests(TestCase):\n+    def test_auto_field_subclass_create(self):\n+        \"\"\"\n+        Test that creating an instance uses the from_db_value wrapper.\n+        \"\"\"\n+        obj = CustomAutoFieldModel.objects.create()\n+        self.assertIsInstance(obj.id, MyWrapper)\n+\n+    @skipUnlessDBFeature('can_return_rows_from_bulk_insert')\n+    def test_auto_field_subclass_bulk_create(self):\n+        \"\"\"\n+        Test that bulk_create uses the from_db_value wrapper.\n+        \"\"\"\n+        objs = [CustomAutoFieldModel()]\n+        CustomAutoFieldModel.objects.bulk_create(objs)\n+        for obj in objs:\n+            self.assertIsInstance(obj.id, MyWrapper)\n \n \n class BasicCustomPKTests(TestCase):\n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..beaec87 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -817,6 +817,24 @@ class BasicExpressionsTests(TestCase):\n         )\n \n \n+    def test_combination_commutativity(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+        \n+        # Testing commutativity of & and | between Q and Exists\n+        test_cases = [\n+            (Exists(is_ceo) & Q(salary__gte=30), Q(salary__gte=30) & Exists(is_ceo)),\n+            (Exists(is_poc) | Q(salary__lt=15), Q(salary__lt=15) | Exists(is_poc)),\n+        ]\n+        \n+        for case in test_cases:\n+            with self.subTest(case=case):\n+                qs1 = Employee.objects.filter(case[0])\n+                qs2 = Employee.objects.filter(case[1])\n+                self.assertCountEqual(qs1, qs2)\n+\n class IterableLookupInnerExpressionsTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..3c3f546 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -205,6 +205,19 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yield_in_post_process(self):\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(\n+            clear=False,\n+            dry_run=False,\n+            post_process=True,\n+            use_default_ignore_patterns=True,\n+            ignore_patterns=['*.ignoreme'],\n+        )\n+        stats = collectstatic_cmd.collect()\n+        # Convert the list of post-processed filenames to a set and verify uniqueness.\n+        self.assertEqual(len(stats['post_processed']), len(set(stats['post_processed'])))\n+\n     def test_css_import_case_insensitive(self):\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n         self.assertEqual(relpath, \"cached/styles_insensitive.3fa427592a53.css\")\n@@ -214,6 +227,19 @@ class TestHashedFiles:\n             self.assertIn(b\"other.d41d8cd98f00.css\", content)\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yield_in_post_process(self):\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(\n+            clear=False,\n+            dry_run=False,\n+            post_process=True,\n+            use_default_ignore_patterns=True,\n+            ignore_patterns=['*.ignoreme'],\n+        )\n+        stats = collectstatic_cmd.collect()\n+        # Convert the list of post-processed filenames to a set and verify uniqueness.\n+        self.assertEqual(len(stats['post_processed']), len(set(stats['post_processed'])))\n+\n     @override_settings(\n         STATICFILES_DIRS=[os.path.join(TEST_ROOT, 'project', 'faulty')],\n         STATICFILES_FINDERS=['django.contrib.staticfiles.finders.FileSystemFinder'],\n",
  "django__django-14089": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 7fb3d83..23c0272 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n@@ -5,6 +6,7 @@ Tests for stuff in django.utils.datastructures.\n import copy\n import pickle\n \n+import collections.abc\n from django.test import SimpleTestCase\n from django.utils.datastructures import (\n     CaseInsensitiveMapping, DictWrapper, ImmutableList, MultiValueDict,\n@@ -27,6 +29,21 @@ class OrderedSetTests(SimpleTestCase):\n         self.assertEqual(len(s), 1)\n         self.assertNotIn(2, s)\n \n+    def test_reversed(self):\n+        s = reversed(OrderedSet([1, 2, 3]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [3, 2, 1])\n+\n+    def test_reversed_empty(self):\n+        s = reversed(OrderedSet())\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [])\n+\n+    def test_reversed_single_element(self):\n+        s = reversed(OrderedSet([42]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [42])\n+\n     def test_discard(self):\n         s = OrderedSet()\n         self.assertEqual(len(s), 0)\n",
  "django__django-14122": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 83089d9..a7a1f9f 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -1,9 +1,11 @@\n+\n from datetime import datetime\n from operator import attrgetter\n \n from django.db.models import (\n     CharField, DateTimeField, F, Max, OuterRef, Subquery, Value,\n )\n+from django.db.models import Count\n from django.db.models.functions import Upper\n from django.test import TestCase\n \n@@ -483,4 +485,4 @@ class OrderingTests(TestCase):\n         )\n         ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n         articles = ChildArticle.objects.order_by('article_ptr')\n-        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n",
  "django__django-14140": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex 7e095fe..448ab4a 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import F, Q\n from django.test import SimpleTestCase\n \n@@ -88,6 +89,17 @@ class QTests(SimpleTestCase):\n         self.assertEqual(args, (Q(price__gt=F('discounted_price')),))\n         self.assertEqual(kwargs, {})\n \n+    def test_deconstruct_with_exists(self):\n+        from django.contrib.auth import get_user_model\n+        from django.db.models import Exists, OuterRef\n+\n+        User = get_user_model()\n+        subquery = User.objects.filter(username=OuterRef('pk'))\n+        q = Q(Exists(subquery))\n+        path, args, kwargs = q.deconstruct()\n+        self.assertEqual(args, (Exists(subquery),))\n+        self.assertEqual(kwargs, {})\n+\n     def test_reconstruct(self):\n         q = Q(price__gt=F('discounted_price'))\n         path, args, kwargs = q.deconstruct()\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..b1dd358 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,7 +1,11 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n+from django.db import models\n+from django.test import SimpleTestCase, override_settings\n+from django.test.utils import isolate_apps\n \n \n @isolate_apps('model_options')\n@@ -66,7 +70,27 @@ class TestDefaultPK(SimpleTestCase):\n             class Model(models.Model):\n                 pass\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    class MyBigAutoField(models.BigAutoField):\n+        pass\n+\n+    class MySmallAutoField(models.SmallAutoField):\n+        pass\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -82,7 +106,27 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    class MyBigAutoField(models.BigAutoField):\n+        pass\n+\n+    class MySmallAutoField(models.SmallAutoField):\n+        pass\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14311": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex b7e6f92..ff764ce 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -182,6 +182,15 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n         )\n \n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package_with_dotted_name(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..839f87b 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -229,7 +229,13 @@ TEST_DATA = [\n     # Trailing newlines not accepted\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n-    # Trailing junk does not take forever to reject\n+    # Newlines and tabs are not accepted.\n+    (URLValidator(), 'http://www.djangoproject.com/\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://www.django\\rproject.com/', ValidationError),\n+    (URLValidator(), 'http://[::\\rffff:192.9.5.5]', ValidationError),\n+    (URLValidator(), 'http://\\twww.djangoproject.com/', ValidationError),\n+    (URLValidator(), 'http://\\t[::ffff:192.9.5.5]', ValidationError),\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br ', ValidationError),\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br z', ValidationError),\n \n",
  "django__django-14351": "diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\nindex 79963c3..fc0eeda 100644\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -1527,6 +1527,21 @@ class AggregationTests(TestCase):\n \n \n class JoinPromotionTests(TestCase):\n+    def test_ticket_33000_or_condition_with_subquery(self):\n+        # Setup models for the test\n+        agent = Agent.objects.create(name='Test Agent')\n+        property_group = PropertyGroup.objects.create(name='Test Group')\n+        agent.property_groups.add(property_group)\n+        queryset = Thing.objects.annotate(Count(\"agent__property_groups\"))\n+        # Simulate the original issue condition\n+        subquery = PropertyGroup.objects.filter(agent=agent)\n+        result = queryset.filter(\n+            Q(agent__property_groups__in=subquery) |\n+            Q(agent__property_groups__count=0)\n+        ).distinct()\n+        # Assert no ProgrammingError is raised and the query executes\n+        self.assertIsNotNone(result)\n+\n     def test_ticket_21150(self):\n         b = Bravo.objects.create()\n         c = Charlie.objects.create(bravo=b)\n",
  "django__django-14373": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 2f7c68b..f3daa37 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -179,7 +179,27 @@ class DateFormatTests(SimpleTestCase):\n                     expected_date,\n                 )\n \n-    def test_twelve_hour_format(self):\n+    def test_y_format_year_before_1000(self):\n+        self.assertEqual(dateformat.format(datetime(1, 1, 1), 'Y'), '0001')\n+        self.assertEqual(dateformat.format(datetime(999, 1, 1), 'Y'), '0999')\n+\n+    def test_Y_format_for_various_years(self):\n+        tests = [\n+            (0, '0000'),\n+            (1, '0001'),\n+            (100, '0100'),\n+            (999, '0999'),\n+            (1000, '1000'),\n+            (2023, '2023'),  # Assuming the current year is 2023\n+            (2050, '2050'),\n+            (9999, '9999'),\n+        ]\n+        for year, expected_year in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 1, 1), 'Y'),\n+                    expected_year,\n+                )\n         tests = [\n             (0, '12'),\n             (1, '1'),\n",
  "django__django-14376": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\nindex 643c2b6..a8c2613 100644\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -89,6 +89,40 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_options_deprecated_and_new_keys(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        \n+        for keys in [('database', 'password'), ('db', 'passwd')]:\n+            with self.subTest(keys=keys):\n+                database_key, password_key = keys\n+                self.assertEqual(\n+                    self.settings_to_cmd_args_env({\n+                        'NAME': 'settingdbname',\n+                        'USER': 'settinguser',\n+                        'PASSWORD': 'settingpassword',\n+                        'HOST': 'settinghost',\n+                        'PORT': settings_port,\n+                        'OPTIONS': {\n+                            database_key: 'optiondbname',\n+                            'user': 'optionuser',\n+                            password_key: 'optionpassword',\n+                            'host': 'optionhost',\n+                            'port': options_port,\n+                        },\n+                    }),\n+                    (expected_args, expected_env),\n+                )\n+\n     def test_options_charset(self):\n         expected_args = [\n             'mysql',\n",
  "django__django-14434": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex 39c82bf..090b0a9 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -2197,8 +2197,39 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor:\n             AuthorWithUniqueNameAndBirthday._meta.constraints = []\n             editor.remove_constraint(AuthorWithUniqueNameAndBirthday, constraint)\n+    def test_unique_constraint_with_multiple_columns(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        constraint = UniqueConstraint(fields=['name', 'email'], name='name_email_uq')\n+        # Add constraint.\n+        with connection.schema_editor() as editor:\n+            editor.add_constraint(Author, constraint)\n+            sql = constraint.create_sql(Author, editor)\n+        table = Author._meta.db_table\n+        self.assertIs(sql.references_table(table), True)\n+        self.assertIs(sql.references_column(table, 'name'), True)\n+        self.assertIs(sql.references_column(table, 'email'), True)\n+        # Remove constraint.\n+        with connection.schema_editor() as editor:\n+            editor.remove_constraint(Author, constraint)\n+        self.assertNotIn(constraint.name, self.get_constraints(table))\n \n-    @skipUnlessDBFeature('supports_expression_indexes')\n+    def test_unique_constraint_with_expression(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        constraint = UniqueConstraint(Upper('name'), name='upper_name_uq')\n+        # Add constraint.\n+        with connection.schema_editor() as editor:\n+            editor.add_constraint(Author, constraint)\n+            sql = constraint.create_sql(Author, editor)\n+        table = Author._meta.db_table\n+        self.assertIs(sql.references_table(table), True)\n+        # Since this involves an expression, references_column is not applicable.\n+        # We could add further checks related to expression handling if needed.\n+        # Remove constraint.\n+        with connection.schema_editor() as editor:\n+            editor.remove_constraint(Author, constraint)\n+        self.assertNotIn(constraint.name, self.get_constraints(table))\n     def test_func_unique_constraint(self):\n         with connection.schema_editor() as editor:\n             editor.create_model(Author)\n",
  "django__django-14493": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 17aecdd..1339ed6 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -454,6 +454,36 @@ class TestCollectionManifestStorage(TestHashedFiles, CollectionTestCase):\n         )\n \n \n+from io import StringIO\n+from django.test.utils import override_settings\n+from django.contrib.staticfiles.storage import ManifestStaticFilesStorage\n+\n+class NoPostProcessReplacedPathStorage(ManifestStaticFilesStorage):\n+    max_post_process_passes = 0\n+\n+@override_settings(STATICFILES_STORAGE='staticfiles_tests.test_storage.NoPostProcessReplacedPathStorage')\n+class TestCollectionNoPostProcessReplacedPaths(CollectionTestCase):\n+    \n+    def setUp(self):\n+        super().setUp()\n+        self.stdout = StringIO()\n+    \n+    def test_no_post_process_passes_zero(self):\n+        \"\"\"\n+        Test that setting max_post_process_passes to 0 doesn't cause a crash.\n+        \"\"\"\n+        self.run_collectstatic(verbosity=1, stdout=self.stdout)\n+        output = self.stdout.getvalue()\n+        self.assertNotIn('UnboundLocalError', output, \"The UnboundLocalError should not occur.\")\n+        self.assertIn('post-processed', output, \"Expected 'post-processed' in output.\")\n+\n+    def test_collectstatistic_no_post_process_replaced_paths(self):\n+        \"\"\"\n+        Original test to check output contains 'post-processed'.\n+        \"\"\"\n+        self.run_collectstatic(verbosity=1, stdout=self.stdout)\n+        self.assertIn('post-processed', self.stdout.getvalue())\n+\n @override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.NoneHashStorage')\n class TestCollectionNoneHashStorage(CollectionTestCase):\n     hashed_file_path = hashed_file_path\n",
  "django__django-14500": "diff --git a/tests/migrations/test_executor.py b/tests/migrations/test_executor.py\nindex d884fe4..0a88356 100644\n--- a/tests/migrations/test_executor.py\n+++ b/tests/migrations/test_executor.py\n@@ -640,7 +640,62 @@ class ExecutorTests(MigrationTestBase):\n         \"\"\"\n         recorder = MigrationRecorder(connection)\n         # Record all replaced migrations as applied\n-        recorder.record_applied(\"migrations\", \"0001_initial\")\n+from django.test import TestCase, override_settings\n+from django.db import connection\n+from django.db.migrations.executor import MigrationExecutor\n+\n+class SquashedMigrationTests(TestCase):\n+\n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_squashed'})\n+    def test_migrate_marks_replacement_unapplied(self):\n+        executor = MigrationExecutor(connection)\n+        executor.migrate([('migrations', '0001_squashed_0002')])\n+        try:\n+            self.assertIn(\n+                ('migrations', '0001_squashed_0002'),\n+                executor.recorder.applied_migrations(),\n+            )\n+        finally:\n+            executor.loader.build_graph()\n+            executor.migrate([('migrations', None)])\n+            self.assertNotIn(\n+                ('migrations', '0001_squashed_0002'),\n+                executor.recorder.applied_migrations(),\n+            )\n+\n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_squashed'})\n+    def test_unapply_squashed_migration_marks_only_replaced_as_unapplied(self):\n+        executor = MigrationExecutor(connection)\n+        executor.migrate([('migrations', '0001_squashed_0002')])\n+\n+        # Unapply the squashed migration\n+        executor.migrate([('migrations', None)])\n+\n+        # Verify that squashed migration is unapplied\n+        self.assertNotIn(\n+            ('migrations', '0001_squashed_0002'),\n+            executor.recorder.applied_migrations(),\n+        )\n+\n+        # Verify that the replaced migrations are unapplied\n+        self.assertNotIn(\n+            ('migrations', '0001_initial'),\n+            executor.recorder.applied_migrations(),\n+        )\n+        self.assertNotIn(\n+            ('migrations', '0002_second'),\n+            executor.recorder.applied_migrations(),\n+        )\n+\n+        # Now, apply only the replaced migrations\n+        executor.recorder.record_applied('migrations', '0001_initial')\n+        executor.recorder.record_applied('migrations', '0002_second')\n+\n+        # Verify that squashed migration is still unapplied\n+        self.assertNotIn(\n+            ('migrations', '0001_squashed_0002'),\n+            executor.recorder.applied_migrations(),\n+        )\n         recorder.record_applied(\"migrations\", \"0002_second\")\n         executor = MigrationExecutor(connection)\n         executor.migrate([(\"migrations\", \"0001_squashed_0002\")])\n",
  "django__django-14539": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 23a1e0a..e20f7e3 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -250,10 +250,34 @@ class TestUtilsHtml(SimpleTestCase):\n                 'Search for google.com/?q=! and see.',\n                 'Search for <a href=\"http://google.com/?q=\">google.com/?q=</a>! and see.'\n             ),\n+            (\n+                'Search for google.com/?q=1&lt! and see.',\n+                'Search for <a href=\"http://google.com/?q=1%3C\">google.com/?q=1&lt</a>! and see.'\n+            ),\n+            (\n+                'Check out example.org/?p=2&gt;. It\\'s amazing!',\n+                'Check out <a href=\"http://example.org/?p=2%3E\">example.org/?p=2&gt</a>. It\\'s amazing!'\n+            ),\n+            (\n+                'Try visiting https://example.com/path/?param=5&amp;other=2.</a>',\n+                'Try visiting <a href=\"https://example.com/path/?param=5&amp;other=2\">https://example.com/path/?param=5&amp;other=2</a>.</a>'\n+            ),\n             (\n                 lazystr('Search for google.com/?q=!'),\n                 'Search for <a href=\"http://google.com/?q=\">google.com/?q=</a>!'\n             ),\n+            (\n+                'Search for google.com/?q=1&lt! and see.',\n+                'Search for <a href=\"http://google.com/?q=1%3C\">google.com/?q=1&lt</a>! and see.'\n+            ),\n+            (\n+                'Check out example.org/?p=2&gt;. It\\'s amazing!',\n+                'Check out <a href=\"http://example.org/?p=2%3E\">example.org/?p=2&gt</a>. It\\'s amazing!'\n+            ),\n+            (\n+                'Try visiting https://example.com/path/?param=5&amp;other=2.</a>',\n+                'Try visiting <a href=\"https://example.com/path/?param=5&amp;other=2\">https://example.com/path/?param=5&amp;other=2</a>.</a>'\n+            ),\n             ('foo@example.com', '<a href=\"mailto:foo@example.com\">foo@example.com</a>'),\n         )\n         for value, output in tests:\n",
  "django__django-14559": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex b579834..e1ef13d 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -115,7 +115,34 @@ class BulkUpdateTests(TestCase):\n \n     pk_fields_error = 'bulk_update() cannot be used with primary key fields.'\n \n-    def test_update_primary_key(self):\n+    def test_bulk_update_return_value(self):\n+        # Create 2000 Note objects\n+        Note.objects.bulk_create([\n+            Note(note=str(i), misc=str(i)) for i in range(2000)\n+        ])\n+        # Retrieve all Note objects\n+        notes = list(Note.objects.all())\n+        \n+        # Test updating all notes with bulk_update\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 2000)  # Expecting 2000 rows updated\n+\n+    def test_bulk_update_with_empty_list(self):\n+        # Test bulk_update with an empty list\n+        rows_updated = Note.objects.bulk_update([], ['note'])\n+        self.assertEqual(rows_updated, 0)  # Expecting 0 rows updated\n+\n+    def test_bulk_update_with_duplicates(self):\n+        # Create a single Note object\n+        note = Note.objects.create(note='test-note', misc='test')\n+        \n+        # Test updating with duplicates in the list\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'])\n+        self.assertEqual(rows_updated, 1)  # Expecting 1 row updated\n+        \n+        # Test updating with duplicates in different batches\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'], batch_size=1)\n+        self.assertEqual(rows_updated, 2)  # Expecting 2 rows updated\n         with self.assertRaisesMessage(ValueError, self.pk_fields_error):\n             Note.objects.bulk_update([], ['id'])\n \n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..8fee425 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -337,6 +337,11 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at most 1 form.'])\n+        # Check if non-form errors are wrapped with the 'nonform' class\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at most 1 form.</li></ul>',\n+        )\n \n     def test_formset_validate_min_flag(self):\n         \"\"\"\n@@ -359,6 +364,11 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])\n+        # Check if non-form errors are wrapped with the 'nonform' class\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at least 3 forms.</li></ul>',\n+        )\n \n     def test_formset_validate_min_unchanged_forms(self):\n         \"\"\"\n@@ -983,6 +993,11 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = FavoriteDrinksFormSet(data, prefix='drinks')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n+        # Check if non-form errors are wrapped with the 'nonform' class\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>',\n+        )\n \n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n",
  "django__django-14631": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex a48e4b6..ba212b0 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -2129,7 +2129,36 @@ Password: <input type=\"password\" name=\"password\" required></li>\n         form = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n         self.assertEqual(form.changed_data, [])\n \n-    def test_help_text(self):\n+    def test_datetime_clean_fields_access_via_boundfield(self):\n+        \"\"\"\n+        Test that BaseForm._clean_fields accesses initial values via BoundField.\n+        \"\"\"\n+        now = datetime.datetime(2006, 10, 25, 14, 30, 45, 123456)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now, disabled=True)\n+\n+        form = DateTimeForm({})\n+        form._clean_fields()\n+        cleaned_value = form.cleaned_data['dt']\n+        bf_initial = form['dt'].initial\n+        self.assertEqual(cleaned_value, bf_initial)\n+        self.assertEqual(cleaned_value, now)\n+\n+    def test_datetime_changed_data_via_boundfield(self):\n+        \"\"\"\n+        Test that changed_data uses BoundField to determine changed data.\n+        \"\"\"\n+        initial_time = datetime.datetime(2006, 10, 25, 14, 30, 45, 123456)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: initial_time)\n+\n+        form = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n+        self.assertEqual(form.changed_data, [])\n+\n+        form_with_change = DateTimeForm({'dt': '2006-10-25 14:30:46'})\n+        self.assertEqual(form_with_change.changed_data, ['dt'])\n         # You can specify descriptive text for a field by using the 'help_text' argument)\n         class UserRegistration(Form):\n             username = CharField(max_length=10, help_text='e.g., user@example.com')\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..205b472 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -1,7 +1,43 @@\n from datetime import date, datetime, timedelta\n from operator import attrgetter\n \n-from django.db import IntegrityError\n+class TestThroughFieldsHashable(TestCase):\n+    def test_m2m_through_fields_must_be_hashable(self):\n+        class Parent(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class ProxyParent(Parent):\n+            class Meta:\n+                proxy = True\n+\n+        class Child(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE)\n+            many_to_many_field = models.ManyToManyField(\n+                to=Parent,\n+                through=\"ManyToManyModel\",\n+                through_fields=['child', 'parent'],\n+                related_name=\"something\"\n+            )\n+\n+        class ManyToManyModel(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')\n+            child = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')\n+            second_child = models.ForeignKey(Child, on_delete=models.CASCADE, null=True, default=None)\n+\n+        # This part shouldn't raise the TypeError anymore\n+        try:\n+            # Attempt to hash the field to trigger any unhashability issues\n+            m2m_field = Child._meta.get_field('many_to_many_field')\n+            hash(m2m_field)\n+            no_exception_raised = True\n+        except TypeError:\n+            no_exception_raised = False\n+\n+        self.assertTrue(no_exception_raised, \"The through_fields should be hashable without raising a TypeError.\")\n+\n+import django\n+from django.db import IntegrityError, models\n+from django.core.checks import Error\n from django.test import TestCase\n \n from .models import (\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..4b57f4a 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,5 +1,9 @@\n+\n import json\n+import datetime\n from contextlib import contextmanager\n+from django.test import TestCase\n+from .models import Question\n \n from django.contrib import admin\n from django.contrib.admin.tests import AdminSeleniumTestCase\n@@ -294,7 +298,37 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n         })\n \n \n-@override_settings(ROOT_URLCONF='admin_views.urls')\n+class AutocompleteJsonViewTests(TestCase):\n+    def setUp(self):\n+        self.superuser = User.objects.create_superuser(\n+            username='superuser', password='secret', email='superuser@example.com',\n+        )\n+        self.factory = RequestFactory()\n+        self.url = reverse('admin:autocomplete')\n+        self.opts = {'app_label': 'admin_views', 'model_name': 'question', 'field_name': 'question'}\n+\n+    def test_serialize_result(self):\n+        class AutocompleteJsonSerializeResultView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return {\n+                    **super().serialize_result(obj, to_field_name),\n+                    'posted': str(obj.posted),\n+                }\n+\n+        Question.objects.create(question='Question 1', posted=datetime.date(2021, 8, 9))\n+        Question.objects.create(question='Question 2', posted=datetime.date(2021, 8, 7))\n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+        request.user = self.superuser\n+        response = AutocompleteJsonSerializeResultView.as_view(admin_site=admin.site)(request)\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': [\n+                {'id': str(q.pk), 'text': q.question, 'posted': str(q.posted)}\n+                for q in Question.objects.order_by('-posted')\n+            ],\n+            'pagination': {'more': False},\n+        })\n class SeleniumTests(AdminSeleniumTestCase):\n     available_apps = ['admin_views'] + AdminSeleniumTestCase.available_apps\n \n",
  "django__django-14765": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 11009e5..548b133 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -923,8 +923,29 @@ class StateTests(SimpleTestCase):\n             len([x for x in rendered_state.get_models() if x._meta.app_label == \"migrations\"]),\n             1,\n         )\n+    def test_real_apps_as_none(self):\n+        \"\"\"\n+        Test that ProjectState initializes correctly when real_apps is None.\n+        \"\"\"\n+        try:\n+            state = ProjectState(real_apps=None)\n+            self.assertEqual(state.real_apps, set())\n+        except AssertionError:\n+            self.fail(\"ProjectState should not raise AssertionError if real_apps is None.\")\n \n-    def test_ignore_order_wrt(self):\n+    def test_real_apps_as_empty_set(self):\n+        \"\"\"\n+        Test that ProjectState initializes correctly when real_apps is an empty set.\n+        \"\"\"\n+        try:\n+            state = ProjectState(real_apps=set())\n+            self.assertEqual(state.real_apps, set())\n+        except AssertionError:\n+            self.fail(\"ProjectState should not raise AssertionError if real_apps is an empty set.\")\n+\n+    def test_real_apps_non_set(self):\n+        with self.assertRaises(AssertionError):\n+            ProjectState(real_apps=['contenttypes'])\n         \"\"\"\n         Makes sure ProjectState doesn't include OrderWrt fields when\n         making from existing models.\n",
  "django__django-14771": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 1875424..ba81d9a 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -246,6 +246,15 @@ class TestChildArguments(SimpleTestCase):\n                 [sys.executable, __file__, 'runserver']\n             )\n \n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver']\n+        )\n+\n \n class TestUtilities(SimpleTestCase):\n     def test_is_django_module(self):\n",
  "django__django-14787": "",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..ac9f678 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5085,6 +5085,52 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         response = self.client.get(reverse('admin2:auth_user_password_change', args=(su.pk,)))\n         self.assertEqual(response.status_code, 404)\n \n+    def _test_readonly_foreignkey_links(self, admin_site):\n+        \"\"\"\n+        Helper method to test readonly foreignkey links in both default and custom admin site\n+        \"\"\"\n+        chapter = Chapter.objects.create(\n+            title='Chapter 1',\n+            content='content',\n+            book=Book.objects.create(name='Book 2'),\n+        )\n+        language = Language.objects.create(iso='EN', name='English')\n+\n+        # Create a test object with a ForeignKey to Language\n+        test_obj = ReadOnlyRelatedField.objects.create(language=language, chapter=chapter)\n+        \n+        # Retrieve the object from the admin site\n+        response = self.client.get(\n+            reverse(f'{admin_site}:admin_views_readonlyrelatedfield_change', args=(test_obj.pk,))\n+        )\n+        \n+        # Assert that the link for the readonly ForeignKey field points to the correct admin site\n+        language_url = reverse(f'{admin_site}:admin_views_language_change', args=(quote(language.pk),))\n+        self.assertContains(\n+            response,\n+            f'<div class=\"readonly\"><a href=\"{language_url}\">EN</a></div>',\n+            html=True,\n+        )\n+        # Assert that the link for the readonly ForeignKey field points to the correct admin site\n+        chapter_url = reverse(f'{admin_site}:admin_views_chapter_change', args=(quote(chapter.pk),))\n+        self.assertContains(\n+            response,\n+            f'<div class=\"readonly\"><a href=\"{chapter_url}\">Chapter 1</a></div>',\n+            html=True,\n+        )\n+\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        \"\"\"\n+        Test the readonly foreignkey link in the default admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('admin')\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test the readonly foreignkey link in a custom admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('admin7')\n+\n     def test_change_form_renders_correct_null_choice_value(self):\n         \"\"\"\n         Regression test for #17911.\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..a4393c5 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,10 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n+import json\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -341,7 +343,22 @@ class ModelChoiceFieldTests(TestCase):\n </div>\"\"\" % (self.c1.pk, self.c2.pk, self.c3.pk),\n         )\n \n-    def test_choices_not_fetched_when_not_rendering(self):\n+    def test_choice_value_hash(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        # Test hashing\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(self.c1.pk, None)))\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+        \n+        # Test using ModelChoiceIteratorValue as dict keys\n+        choice_dict = {value_1: 'value1', value_2: 'value2'}\n+        self.assertEqual(choice_dict[ModelChoiceIteratorValue(self.c1.pk, None)], 'value1')\n+        self.assertEqual(choice_dict[ModelChoiceIteratorValue(self.c2.pk, None)], 'value2')\n+\n+        # Test using ModelChoiceIteratorValue in a set\n+        choice_set = {value_1, value_2}\n+        self.assertIn(ModelChoiceIteratorValue(self.c1.pk, None), choice_set)\n+        self.assertIn(ModelChoiceIteratorValue(self.c2.pk, None), choice_set)\n         with self.assertNumQueries(1):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n             self.assertEqual('Entertainment', field.clean(self.c1.pk).name)\n",
  "django__django-14999": "",
  "django__django-15022": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex e1920cd..f39fb80 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -153,7 +153,49 @@ class ChangeListTests(TestCase):\n         cl = ia.get_changelist_instance(request)\n         self.assertEqual(cl.queryset.query.select_related, {'player': {}, 'band': {}})\n \n-    def test_result_list_empty_changelist_value(self):\n+    def test_client_search_with_many_terms(self):\n+        \"\"\"\n+        Test that searching clients in admin with many terms does not stall\n+        and unnecessary joins are not created.\n+        \"\"\"\n+        client = Client.objects.create(name='Test Client', contact_person='John Doe')\n+        ClientOffice.objects.create(client=client, name='Head Office')\n+\n+        admin_instance = ClientAdmin(Client, admin.site)\n+        request = self.factory.get('/admin/', data={SEARCH_VAR: 'john ' * 80})\n+        request.user = self.superuser\n+\n+        changelist = admin_instance.get_changelist_instance(request)\n+        with CaptureQueriesContext(connection) as context:\n+            object_count = changelist.queryset.count()\n+\n+        self.assertEqual(object_count, 1)\n+        # Ensure that only one JOIN is made despite multiple search terms\n+        self.assertEqual(context.captured_queries[0]['sql'].count('JOIN'), 1)\n+\n+    def test_client_office_search(self):\n+        \"\"\"\n+        Test that searching by related ClientOffice fields works correctly.\n+        \"\"\"\n+        client = Client.objects.create(name='Client A')\n+        ClientOffice.objects.create(client=client, name='Main Office', name2='Backup Office')\n+\n+        admin_instance = ClientAdmin(Client, admin.site)\n+        request = self.factory.get('/admin/', data={SEARCH_VAR: 'Main Office'})\n+        request.user = self.superuser\n+\n+        changelist = admin_instance.get_changelist_instance(request)\n+        object_count = changelist.queryset.count()\n+\n+        self.assertEqual(object_count, 1)\n+\n+        request = self.factory.get('/admin/', data={SEARCH_VAR: 'Backup Office'})\n+        request.user = self.superuser\n+\n+        changelist = admin_instance.get_changelist_instance(request)\n+        object_count = changelist.queryset.count()\n+\n+        self.assertEqual(object_count, 1)\n         \"\"\"\n         Regression test for #14982: EMPTY_CHANGELIST_VALUE should be honored\n         for relationship fields\n",
  "django__django-15037": "diff --git a/tests/inspectdb/tests.py b/tests/inspectdb/tests.py\nindex 19402bb..f514e13 100644\n--- a/tests/inspectdb/tests.py\n+++ b/tests/inspectdb/tests.py\n@@ -204,7 +204,17 @@ class InspectDBTestCase(TestCase):\n             output,\n         )\n \n-    def test_digits_column_name_introspection(self):\n+    def test_foreign_key_to_specific_field(self):\n+        \"\"\"Test introspection of foreign keys to a specific field.\"\"\"\n+        out = StringIO()\n+        call_command('inspectdb', 'inspectdb_foreignkeytofield', stdout=out)\n+        output = out.getvalue()\n+\n+        # Check if the foreign key is correctly pointing to the specific field\n+        self.assertIn(\n+            \"to_field_fk = models.ForeignKey('InspectdbPeoplemoredata', models.CASCADE, to_field='people_unique')\",\n+            output,\n+        )\n         \"\"\"Introspection of column names consist/start with digits (#16536/#17676)\"\"\"\n         char_field_type = connection.features.introspected_field_types['CharField']\n         out = StringIO()\n",
  "django__django-15103": "diff --git a/tests/template_tests/filter_tests/test_json_script.py b/tests/template_tests/filter_tests/test_json_script.py\nindex 607e24c..2e5d702 100644\n--- a/tests/template_tests/filter_tests/test_json_script.py\n+++ b/tests/template_tests/filter_tests/test_json_script.py\n@@ -1,11 +1,20 @@\n+\n from django.test import SimpleTestCase\n \n from ..utils import setup\n \n \n class JsonScriptTests(SimpleTestCase):\n+    @setup({'json-tag02': '{{ value|json_script }}'})\n+    def test_without_id(self):\n+        output = self.engine.render_to_string('json-tag02', {'value': {}})\n+        self.assertEqual(output, '<script type=\"application/json\">{}</script>')\n \n-    @setup({'json-tag01': '{{ value|json_script:\"test_id\" }}'})\n+    def test_json_script_without_id(self):\n+        self.assertHTMLEqual(\n+            json_script({'key': 'value'}),\n+            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n+        )\n     def test_basic(self):\n         output = self.engine.render_to_string(\n             'json-tag01',\n@@ -16,4 +25,4 @@ class JsonScriptTests(SimpleTestCase):\n             '<script id=\"test_id\" type=\"application/json\">'\n             '{\"a\": \"testing\\\\r\\\\njson \\'string\\\\\" \\\\u003Cb\\\\u003Eescaping\\\\u003C/b\\\\u003E\"}'\n             '</script>'\n-        )\n+        )\n",
  "django__django-15104": "",
  "django__django-15127": "diff --git a/tests/messages_tests/base.py b/tests/messages_tests/base.py\nindex 85a7769..84d1fc1 100644\n--- a/tests/messages_tests/base.py\n+++ b/tests/messages_tests/base.py\n@@ -1,3 +1,4 @@\n+\n from django.contrib.messages import constants, get_level, set_level, utils\n from django.contrib.messages.api import MessageFailure\n from django.contrib.messages.constants import DEFAULT_LEVELS\n@@ -368,6 +369,21 @@ class BaseTests:\n         tags = [msg.level_tag for msg in storage]\n         self.assertEqual(tags, ['info', '', 'debug', 'warning', 'error', 'success'])\n \n+    @override_settings_tags(MESSAGE_TAGS={\n+        constants.INFO: 'info',\n+        constants.DEBUG: 'debug-tag',\n+        constants.WARNING: 'warn-tag',\n+        constants.ERROR: 'error-tag',\n+        constants.SUCCESS: 'success-tag',\n+        99: 'custom-tag',\n+    })\n+    def test_updated_level_tags(self):\n+        storage = self.get_storage()\n+        storage.level = 0\n+        add_level_messages(storage)\n+        tags = [msg.level_tag for msg in storage]\n+        self.assertEqual(tags, ['info', 'debug-tag', 'warn-tag', 'error-tag', 'success-tag', 'custom-tag'])\n+\n     @override_settings_tags(MESSAGE_TAGS={\n         constants.INFO: 'info',\n         constants.DEBUG: '',\n",
  "django__django-15128": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex adde8a6..91f3718 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2085,8 +2085,44 @@ class SubqueryTests(TestCase):\n             ).order_by('id').values_list('id', flat=True), [2, 4]\n         )\n \n+from django.test import TestCase\n+from django.db.models import Q\n+from .models import Foo, Bar, Baz, Qux\n \n class QuerySetBitwiseOperationTests(TestCase):\n+    \n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.qux = Qux.objects.create()\n+        cls.baz1 = Baz.objects.create()\n+        cls.baz2 = Baz.objects.create()\n+        cls.baz3 = Baz.objects.create()\n+        cls.qux.bazes.add(cls.baz1, cls.baz2)\n+        \n+        cls.foo1 = Foo.objects.create(qux=cls.qux)\n+        cls.foo2 = Foo.objects.create(qux=cls.qux)\n+        \n+        cls.bar1 = Bar.objects.create(foo=cls.foo1, another_foo=cls.foo2, baz=cls.baz1)\n+        cls.bar2 = Bar.objects.create(foo=cls.foo2, another_foo=cls.foo1, baz=cls.baz2)\n+    \n+    def test_or_operation_with_querysets(self):\n+        qs1 = self.qux.foos.all()\n+        qs2 = Foo.objects.filter(\n+            Q(bars__baz__in=self.qux.bazes.all()) | Q(other_bars__baz__in=self.qux.bazes.all())\n+        )\n+        \n+        # Verify commutative property does not raise errors and results are equal\n+        try:\n+            result1 = qs1 | qs2\n+            result2 = qs2 | qs1\n+            self.assertCountEqual(result1, result2)\n+            self.assertCountEqual(result1, [self.foo1, self.foo2])\n+        except AssertionError:\n+            self.fail(\"OR operation on QuerySets raised an unexpected AssertionError.\")\n+        \n+        # Ensure the original issue is resolved\n+        self.assertCountEqual(qs1, [self.foo1, self.foo2])\n+        self.assertCountEqual(qs2, [self.foo1, self.foo2])\n     @classmethod\n     def setUpTestData(cls):\n         cls.school = School.objects.create()\n",
  "django__django-15161": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 5fdccc5..d6ac2af 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1755,6 +1755,20 @@ class ValueTests(TestCase):\n         Time.objects.update(time=Value(datetime.time(1), output_field=TimeField()))\n         self.assertEqual(Time.objects.get().time, datetime.time(1))\n \n+    def test_deconstruct_F(self):\n+        f_expression = F('some_field')\n+        path, args, kwargs = f_expression.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, (f_expression.name,))\n+        self.assertEqual(kwargs, {})\n+\n+    def test_deconstruct_Value(self):\n+        value_expression = Value('test_value')\n+        path, args, kwargs = value_expression.deconstruct()\n+        self.assertEqual(path, 'django.db.models.expressions.Value')\n+        self.assertEqual(args, (value_expression.value,))\n+        self.assertEqual(kwargs, {})\n+\n     def test_update_UUIDField_using_Value(self):\n         UUID.objects.create()\n         UUID.objects.update(uuid=Value(uuid.UUID('12345678901234567890123456789012'), output_field=UUIDField()))\n",
  "django__django-15268": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a6c0858..cae5868 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1591,7 +1591,26 @@ class AutodetectorTests(TestCase):\n             index_together={('title', 'author')},\n         )\n \n-    def test_add_field_and_foo_together(self):\n+    def test_optimize_alter_foo_together(self):\n+        \"\"\"\n+        Test that consecutive AlterUniqueTogether and AlterIndexTogether\n+        operations are optimized into a single operation when possible.\n+        \"\"\"\n+        changes = self.get_changes(\n+            [self.author_empty, self.book],\n+            [self.author_empty, self.book_foo_together_optimized]\n+        )\n+        self.assertNumberMigrations(changes, \"otherapp\", 1)\n+        self.assertOperationTypes(changes, \"otherapp\", 0, [\n+            \"AlterUniqueTogether\",\n+            \"AlterIndexTogether\",\n+        ])\n+        self.assertOperationAttributes(\n+            changes, \"otherapp\", 0, 0, name=\"book\", unique_together={(\"col\",)},\n+        )\n+        self.assertOperationAttributes(\n+            changes, \"otherapp\", 0, 1, name=\"book\", index_together={(\"col\",)},\n+        )\n         \"\"\"\n         Added fields will be created before using them in index/unique_together.\n         \"\"\"\n",
  "django__django-15277": "",
  "django__django-15278": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex dd02aee..d706ed2 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -624,7 +624,21 @@ class SchemaTests(TransactionTestCase):\n         # Make sure the values were transformed correctly\n         self.assertEqual(Author.objects.extra(where=[\"thing = 1\"]).count(), 2)\n \n-    def test_add_field_binary(self):\n+    def test_add_field_o2o_nullable_with_unique(self):\n+        \"\"\"\n+        Test adding a nullable OneToOneField with a unique constraint on SQLite.\n+        \"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        new_field = OneToOneField(Note, CASCADE, null=True, unique=True, related_name=\"related_note\")\n+        new_field.set_attributes_from_name('note')\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n+        columns = self.column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        # Ensure the field is nullable\n+        self.assertTrue(columns['note_id'][1][6])\n         \"\"\"\n         Tests binary fields get a sane default (#22851)\n         \"\"\"\n",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..f88bf19 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -19,7 +19,51 @@ class Nested:\n \n class BasicFieldTests(SimpleTestCase):\n \n-    def test_show_hidden_initial(self):\n+    def test_hash_immutability(self):\n+        \"\"\"\n+        Test that the hash of a Field instance remains unchanged after\n+        assignment to a model class.\n+        \"\"\"\n+        field = models.IntegerField()\n+        field_hash = hash(field)\n+\n+        class MyModel(models.Model):\n+            rank = field\n+\n+        self.assertEqual(field_hash, hash(field))\n+\n+    def test_hash_immutability_with_multiple_fields(self):\n+        \"\"\"\n+        Test that the hash of multiple Field instances remains unchanged\n+        after assignment to a model class.\n+        \"\"\"\n+        field1 = models.CharField(max_length=100)\n+        field2 = models.IntegerField()\n+        field1_hash = hash(field1)\n+        field2_hash = hash(field2)\n+\n+        class MyModel(models.Model):\n+            name = field1\n+            rank = field2\n+\n+        self.assertEqual(field1_hash, hash(field1))\n+        self.assertEqual(field2_hash, hash(field2))\n+\n+    def test_hash_immutability_in_dict_usage(self):\n+        \"\"\"\n+        Test that Field instances can be used as dictionary keys\n+        without the hash value changing post-assignment.\n+        \"\"\"\n+        field = models.TextField()\n+        field_hash = hash(field)\n+        field_dict = {field: \"test value\"}\n+\n+        class AnotherModel(models.Model):\n+            content = field\n+\n+        self.assertTrue(field in field_dict)\n+        self.assertEqual(field_dict[field], \"test value\")\n+        self.assertEqual(field_hash, hash(field))\n         \"\"\"\n         Fields with choices respect show_hidden_initial as a kwarg to\n         formfield().\n",
  "django__django-15368": "",
  "django__django-15380": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex e2de333..fe4bf2b 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1038,6 +1038,29 @@ class AutodetectorTests(TestCase):\n         self.assertOperationAttributes(\n             changes, 'app', 0, 0, model_name='bar', name='foo',\n         )\n+\n+    def test_rename_model_and_field_simultaneously(self):\n+        \"\"\"Test autodetection when renaming a model and a field in one go.\"\"\"\n+        changes = self.get_changes(\n+            [self.author_name],\n+            [\n+                ModelState('testapp', 'RenamedAuthor', [\n+                    ('id', models.AutoField(primary_key=True)),\n+                    ('renamed_name', models.CharField(max_length=200)),\n+                ]),\n+            ],\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        # Check the number of migrations\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        # Check the operations for renaming model and field\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel', 'RenameField'])\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 0, old_name='Author', new_name='RenamedAuthor',\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 1, old_name='name', new_name='renamed_name',\n+        )\n         self.assertEqual(changes['app'][0].operations[0].field.deconstruct(), (\n             'foo',\n             'django.db.models.ForeignKey',\n",
  "django__django-15382": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex bd890ac..873772e 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1906,7 +1906,40 @@ class ExistsTests(TestCase):\n         self.assertNotIn('ORDER BY', captured_sql)\n \n \n-class FieldTransformTests(TestCase):\n+from django.test import TestCase\n+from django.db.models import Exists, Q\n+from .models import Manager\n+\n+class ExpressionTests(TestCase):\n+    def test_negated_empty_exists(self):\n+        manager = Manager.objects.create(name='manager1')\n+        qs = Manager.objects.filter(\n+            ~Exists(Manager.objects.none()) & Q(pk=manager.pk)\n+        )\n+        self.assertSequenceEqual(qs, [manager])\n+\n+    def test_exists_with_empty_queryset(self):\n+        manager = Manager.objects.create(name='manager2')\n+        qs = Manager.objects.filter(\n+            Exists(Manager.objects.none()) & Q(pk=manager.pk)\n+        )\n+        self.assertSequenceEqual(qs, [])\n+\n+    def test_exists_with_non_empty_queryset(self):\n+        manager = Manager.objects.create(name='manager3')\n+        other_manager = Manager.objects.create(name='manager4')\n+        qs = Manager.objects.filter(\n+            Exists(Manager.objects.filter(pk=other_manager.pk)) & Q(pk=manager.pk)\n+        )\n+        self.assertSequenceEqual(qs, [])\n+\n+    def test_negated_exists_with_non_empty_queryset(self):\n+        manager = Manager.objects.create(name='manager5')\n+        other_manager = Manager.objects.create(name='manager6')\n+        qs = Manager.objects.filter(\n+            ~Exists(Manager.objects.filter(pk=other_manager.pk)) & Q(pk=manager.pk)\n+        )\n+        self.assertSequenceEqual(qs, [manager])\n \n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-15467": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex f5af59b..1a2c1e3 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -17,6 +17,7 @@ from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.auth.models import User\n from django.core.files.storage import default_storage\n from django.core.files.uploadedfile import SimpleUploadedFile\n+from django.contrib import admin\n from django.db.models import (\n     CharField,\n     DateField,\n@@ -140,8 +141,21 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n             radio_fields={\"main_band\": admin.VERTICAL},\n         )\n         self.assertIsNone(ff.empty_label)\n-\n-    def test_many_to_many(self):\n+    def test_radio_fields_foreignkey_custom_empty_label(self):\n+        # Define a ModelAdmin with radio_fields and a custom empty_label for ForeignKey\n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {\"main_band\": admin.VERTICAL}\n+\n+            def formfield_for_foreignkey(self, db_field, request, **kwargs):\n+                if db_field.name == \"main_band\":\n+                    kwargs[\"empty_label\"] = \"Custom empty label\"\n+                return super().formfield_for_foreignkey(db_field, request, **kwargs)\n+\n+        # Instantiate the ModelAdmin and retrieve the form field for the ForeignKey\n+        ma = MyModelAdmin(Event, admin.site)\n+        ff = ma.formfield_for_dbfield(Event._meta.get_field(\"main_band\"), request=None)\n+        # Assert that the custom empty_label is used\n+        self.assertEqual(ff.empty_label, \"Custom empty label\")\n         self.assertFormfield(Band, \"members\", forms.SelectMultiple)\n \n     def test_raw_id_many_to_many(self):\n",
  "django__django-15499": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 5df1b06..4b721e3 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -129,6 +129,94 @@ class OptimizerTests(SimpleTestCase):\n             ],\n         )\n \n+    def test_create_alter_model_managers_with_different_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Bar\", fields=[]),\n+                migrations.AlterModelManagers(\n+                    name=\"Bar\",\n+                    managers=[\n+                        (\"default\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    managers=[\n+                        (\"default\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n+    def test_create_alter_model_managers_with_no_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Baz\", fields=[]),\n+                migrations.AlterModelManagers(\n+                    name=\"Baz\",\n+                    managers=[],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\",\n+                    fields=[],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n+                ),\n+            ],\n+        )\n+\n+    def test_create_alter_model_managers_with_different_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Bar\", fields=[]),\n+                migrations.AlterModelManagers(\n+                    name=\"Bar\",\n+                    managers=[\n+                        (\"default\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    managers=[\n+                        (\"default\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n+    def test_create_alter_model_managers_with_no_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Baz\", fields=[]),\n+                migrations.AlterModelManagers(\n+                    name=\"Baz\",\n+                    managers=[],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\",\n+                    fields=[],\n+                ),\n+            ],\n+        )\n+\n     def test_create_model_and_remove_model_options(self):\n         self.assertOptimizesTo(\n             [\n",
  "django__django-15525": "",
  "django__django-15561": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex b8137da..2130489 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -3961,6 +3961,36 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             editor.alter_field(Book, new_field, old_field, strict=True)\n \n+    def test_alter_field_choices_noop_integer(self):\n+        # Test no-op alter for IntegerField with choices on SQLite\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        old_field = Author._meta.get_field(\"id\")\n+        new_field = IntegerField(\n+            choices=((1, \"One\"), (2, \"Two\")),\n+        )\n+        new_field.set_attributes_from_name(\"id\")\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, new_field, old_field, strict=True)\n+\n+    def test_alter_field_remove_choices_noop(self):\n+        # Test no-op alter when removing choices from a CharField on SQLite\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        field_with_choices = CharField(\n+            choices=((\"Jane\", \"Jane\"), (\"Joe\", \"Joe\")),\n+            max_length=255,\n+        )\n+        field_with_choices.set_attributes_from_name(\"name\")\n+        field_without_choices = CharField(max_length=255)\n+        field_without_choices.set_attributes_from_name(\"name\")\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, field_with_choices, field_without_choices, strict=True)\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, field_without_choices, field_with_choices, strict=True)\n+\n     def test_add_textfield_unhashable_default(self):\n         # Create the table\n         with connection.schema_editor() as editor:\n",
  "django__django-15569": "",
  "django__django-15572": "",
  "django__django-15731": "diff --git a/tests/basic/tests.py b/tests/basic/tests.py\nindex 902f114..037e095 100644\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -1,3 +1,4 @@\n+\n import threading\n from datetime import datetime, timedelta\n from unittest import mock\n@@ -738,7 +739,17 @@ class ManagerTest(SimpleTestCase):\n \n \n class SelectOnSaveTests(TestCase):\n-    def test_select_on_save(self):\n+    def test_manager_method_signature_with_wraps(self):\n+        # Test that the manager method `bulk_create` has the correct signature after applying functools.wraps\n+        expected_signature = \"(objs, batch_size=None, ignore_conflicts=False, update_conflicts=False, update_fields=None, unique_fields=None)\"\n+        actual_signature = str(inspect.signature(Article.objects.bulk_create))\n+        self.assertEqual(actual_signature, expected_signature)\n+\n+    def test_manager_method_docstring_with_wraps(self):\n+        # Test that the manager method `bulk_create` has the correct docstring copied\n+        expected_docstring = models.QuerySet.bulk_create.__doc__\n+        actual_docstring = Article.objects.bulk_create.__doc__\n+        self.assertEqual(actual_docstring, expected_docstring)\n         a1 = Article.objects.create(pub_date=datetime.now())\n         with self.assertNumQueries(1):\n             a1.save()\n",
  "django__django-15741": "diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex c6dbc53..94acc93 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -1,6 +1,9 @@\n+\n from datetime import datetime, time\n \n from django.template.defaultfilters import date\n+from django.utils.translation import gettext_lazy as _\n+from django.utils.formats import get_format\n from django.test import SimpleTestCase\n from django.utils import timezone, translation\n \n@@ -77,7 +80,19 @@ class FunctionTests(SimpleTestCase):\n     def test_date(self):\n         self.assertEqual(date(datetime(2005, 12, 29), \"d F Y\"), \"29 December 2005\")\n \n-    def test_no_args(self):\n+    def test_get_format_with_lazy_string(self):\n+        \"\"\"\n+        Test get_format function with lazy translation strings.\n+        \"\"\"\n+        self.assertEqual(get_format(_(\"DATE_FORMAT\")), \"N j, Y\")\n+\n+    @setup({\"datelazy\": '{{ t|date:_(\"H:i\") }}'})\n+    def test_date_lazy(self):\n+        \"\"\"\n+        Test date template filter with lazy translation string.\n+        \"\"\"\n+        output = self.engine.render_to_string(\"datelazy\", {\"t\": time(0, 0)})\n+        self.assertEqual(output, \"00:00\")\n         self.assertEqual(date(\"\"), \"\")\n         self.assertEqual(date(None), \"\")\n \n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..f5aff1d 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -397,6 +397,19 @@ class ProxyModelTests(TestCase):\n \n     def test_eq(self):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n+    \n+    def test_select_related_only_on_proxy_model(self):\n+        # Setup data for testing\n+        custom_model = CustomModel.objects.create(name=\"Test Custom\")\n+        another_model = AnotherModel.objects.create(custom=custom_model)\n+\n+        # Test QuerySet.only() after select_related() on a proxy model.\n+        # This should reproduce the original issue.\n+        with self.assertRaises(ValueError) as context:\n+            list(AnotherModel.objects.select_related(\"custom\").only(\"custom__name\").all())\n+        \n+        # Check if the error message is as expected\n+        self.assertIn(\"'id' is not in list\", str(context.exception))\n \n \n @override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..ebb75ba 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -157,6 +157,12 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n+    def test_pgsql_parameters_before_dbname(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n+        )\n+\n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n",
  "django__django-15863": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 08f08e1..e336df8 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -74,6 +74,27 @@ class FunctionTests(SimpleTestCase):\n         self.assertEqual(floatformat(1.5e-15, -20), \"0.00000000000000150000\")\n         self.assertEqual(floatformat(1.00000000000000015, 16), \"1.0000000000000002\")\n \n+    def test_decimal_precision(self):\n+        # Test high precision decimal number\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.12345678901234567890\"), 20),\n+            \"42.12345678901234567890\"\n+        )\n+        # Test very small decimal number\n+        self.assertEqual(\n+            floatformat(Decimal(\"0.000000000000000000123456789\"), 27),\n+            \"0.000000000000000000123456789\"\n+        )\n+        # Test very large number with high precision\n+        self.assertEqual(\n+            floatformat(Decimal(\"9876543210.123456789012345678901\"), 21),\n+            \"9876543210.123456789012345678901\"\n+        )\n+        # Test rounding for decimal\n+        self.assertEqual(floatformat(Decimal(\"1.99999999999999999999\"), 2), \"2.00\")\n+        # Test zero precision with decimal\n+        self.assertEqual(floatformat(Decimal(\"123.456\"), 0), \"123\")\n+\n     def test_force_grouping(self):\n         with translation.override(\"en\"):\n             self.assertEqual(floatformat(10000, \"g\"), \"10,000\")\n",
  "django__django-15930": "",
  "django__django-15987": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 5ac9ab9..a56d489 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n # Unittests for fixtures.\n import json\n import os\n@@ -575,7 +576,23 @@ class TestFixtures(TestCase):\n             os.path.join(_cur_dir, \"fixtures_2\"),\n         ]\n     )\n-    def test_loaddata_with_valid_fixture_dirs(self):\n+    @override_settings(\n+        FIXTURE_DIRS=[\n+            Path(_cur_dir) / \"fixtures\",\n+            Path(_cur_dir) / \"fixtures\",\n+        ]\n+    )\n+    def test_fixture_dirs_duplicate_with_pathlib(self):\n+        \"\"\"\n+        Duplicate directories in FIXTURE_DIRS should raise ImproperlyConfigured\n+        even when using Path instances.\n+        \"\"\"\n+        msg = (\n+            \"'%s' is listed more than once in settings.FIXTURE_DIRS.\"\n+            % os.path.join(_cur_dir, \"fixtures\")\n+        )\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n         management.call_command(\n             \"loaddata\",\n             \"absolute.json\",\n",
  "django__django-16032": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex bcf8df9..83ec156 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -989,6 +989,39 @@ class NonAggregateAnnotationTestCase(TestCase):\n             publisher_books_qs, [{\"name\": \"Sams\"}, {\"name\": \"Morgan Kaufmann\"}]\n         )\n \n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        self.assertCountEqual(\n+            publisher_books_qs,\n+            [\n+                {'name': 'Apress'},\n+                {'name': 'Sams'},\n+                {'name': 'Prentice Hall'},\n+                {'name': 'Morgan Kaufmann'}\n+            ]\n+        )\n+\n+    def test_annotation_and_alias_filter_in_subquery_with_pk(self):\n+        awarded_publishers_qs = (\n+            Publisher.objects.filter(num_awards__gt=4)\n+            .annotate(publisher_annotate=Value(1))\n+            .alias(publisher_alias=Value(1))\n+        )\n+        qs = Publisher.objects.filter(pk__in=awarded_publishers_qs)\n+        self.assertCountEqual(qs, [self.p3, self.p4])\n+\n     def test_annotation_exists_aggregate_values_chaining(self):\n         qs = (\n             Book.objects.values(\"publisher\")\n",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..c6202be 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2416,7 +2416,7 @@ class CombinedExpressionTests(SimpleTestCase):\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV, Combinable.MOD]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..edd66cf 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib import admin\n@@ -21,7 +22,9 @@ from django.db.models import F, Field, IntegerField\n from django.db.models.functions import Upper\n from django.db.models.lookups import Contains, Exact\n from django.template import Context, Template, TemplateSyntaxError\n-from django.test import TestCase, override_settings\n+from unittest import mock\n+from django.db import DatabaseError\n+from django.test import TestCase, override_settings, skipUnlessDBFeature\n from django.test.client import RequestFactory\n from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup\n from django.urls import reverse\n@@ -400,7 +403,61 @@ class ChangeListTests(TestCase):\n         with self.assertRaises(IncorrectLookupParameters):\n             m.get_changelist_instance(request)\n \n-    def test_custom_paginator(self):\n+    @skipUnlessDBFeature(\"supports_transactions\")\n+    def test_list_editable_atomicity_with_transaction(self):\n+        # Setup test data\n+        a = Swallow.objects.create(origin=\"Swallow A\", load=4, speed=1)\n+        b = Swallow.objects.create(origin=\"Swallow B\", load=2, speed=2)\n+\n+        # Login as superuser\n+        self.client.force_login(self.superuser)\n+\n+        # Prepare data for changelist post\n+        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n+        data = {\n+            \"form-TOTAL_FORMS\": \"2\",\n+            \"form-INITIAL_FORMS\": \"2\",\n+            \"form-MIN_NUM_FORMS\": \"0\",\n+            \"form-MAX_NUM_FORMS\": \"1000\",\n+            \"form-0-uuid\": str(a.pk),\n+            \"form-1-uuid\": str(b.pk),\n+            \"form-0-load\": \"9.0\",\n+            \"form-0-speed\": \"3.0\",\n+            \"form-1-load\": \"5.0\",\n+            \"form-1-speed\": \"1.0\",\n+            \"_save\": \"Save\",\n+        }\n+\n+        # Simulate DatabaseError to test transaction rollback\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\", side_effect=DatabaseError\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+\n+        # Original values should be preserved due to transaction rollback\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+        \n+        # Partial success should also trigger a rollback.\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\",\n+            side_effect=[None, DatabaseError],\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+\n+        # Original values are preserved.\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n         new_parent = Parent.objects.create(name=\"parent\")\n         for i in range(1, 201):\n             Child.objects.create(name=\"name %s\" % i, parent=new_parent)\n",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..018d737 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2385,8 +2385,27 @@ class MakeMigrationsTests(MigrationTestBase):\n             call_command(\n                 \"makemigrations\", \"migrations\", \"--name\", \"invalid name\", \"--empty\"\n             )\n+    def test_makemigrations_check_exit_status(self):\n+        \"\"\"\n+        makemigrations --check should exit with a non-zero status when\n+        there are changes to an app requiring migrations.\n+        \"\"\"\n+        with self.temporary_migration_module():\n+            with self.assertRaises(SystemExit) as cm:\n+                call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+            self.assertNotEqual(cm.exception.code, 0)\n \n-    def test_makemigrations_check(self):\n+    def test_makemigrations_check_no_changes(self):\n+        \"\"\"\n+        makemigrations --check should exit with a zero status when\n+        there are no changes to an app requiring migrations.\n+        \"\"\"\n+        with self.temporary_migration_module(\n+            module=\"migrations.test_migrations_no_changes\"\n+        ):\n+            with self.assertRaises(SystemExit) as cm:\n+                call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+            self.assertEqual(cm.exception.code, 0)\n         \"\"\"\n         makemigrations --check should exit with a non-zero status when\n         there are changes to an app requiring migrations.\n",
  "django__django-16136": "diff --git a/tests/async/tests.py b/tests/async/tests.py\nindex 72e103e..481a0ca 100644\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -1,3 +1,4 @@\n+\n import asyncio\n import os\n from unittest import mock\n@@ -7,7 +8,9 @@ from asgiref.sync import async_to_sync\n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n from django.http import HttpResponse\n-from django.test import SimpleTestCase\n+import asyncio\n+from django.http import HttpResponseNotAllowed\n+from django.test import RequestFactory, SimpleTestCase\n from django.utils.asyncio import async_unsafe\n from django.views.generic.base import View\n \n@@ -119,7 +122,27 @@ class ViewTests(SimpleTestCase):\n \n                 self.assertIsInstance(response, HttpResponse)\n \n-    def test_base_view_class_is_sync(self):\n+    def test_http_method_not_allowed_responds_correctly(self):\n+        \"\"\"\n+        Test that HttpResponseNotAllowed is correctly handled, both in sync and async views.\n+        \"\"\"\n+        request_factory = RequestFactory()\n+        tests = [\n+            (SyncView, False),\n+            (AsyncView, True),\n+        ]\n+        for view_cls, is_coroutine in tests:\n+            with self.subTest(view_cls=view_cls, is_coroutine=is_coroutine):\n+                instance = view_cls()\n+                response = instance.http_method_not_allowed(request_factory.post(\"/\"))\n+                self.assertIs(\n+                    asyncio.iscoroutine(response),\n+                    is_coroutine,\n+                )\n+                if is_coroutine:\n+                    response = asyncio.run(response)\n+\n+                self.assertIsInstance(response, HttpResponseNotAllowed)\n         \"\"\"\n         View and by extension any subclasses that don't define handlers are\n         sync.\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..31dd5da 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -24,6 +25,9 @@ from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n+import urllib.parse\n+from django.urls import reverse\n+...\n from django.utils.translation import gettext as _\n \n from .models.custom_user import (\n@@ -884,6 +888,26 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # original hashed password contains $\n         self.assertIn(\"$\", form.cleaned_data[\"password\"])\n \n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.create_user(username=\"testclient\", password=\"testpassword\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n     def test_bug_19349_bound_password_field(self):\n         user = User.objects.get(username=\"testclient\")\n         form = UserChangeForm(data={}, instance=user)\n",
  "django__django-16145": "",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..d87f781 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -507,9 +507,27 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n+from django.test import TestCase\n+from django.urls import reverse\n+from django.contrib.sitemaps import Sitemap\n+from django.utils.decorators import method_decorator\n+\n+class CallableLastmodNoItemsSitemap(Sitemap):\n+    location = \"/location/\"\n+\n+    def items(self):\n+        return []\n \n-# RemovedInDjango50Warning\n-class DeprecatedTests(SitemapTestsBase):\n+    def lastmod(self, obj):\n+        return obj.lastmod\n+\n+class SitemapTest(TestCase):\n+\n+    def test_callable_lastmod_no_items(self):\n+        # Test that a sitemap with no items but a callable lastmod doesn't raise a ValueError\n+        response = self.client.get(reverse(\"django.contrib.sitemaps.views.index\", kwargs={\"sitemaps\": {\"callable-lastmod-no-items\": CallableLastmodNoItemsSitemap}}))\n+        self.assertEqual(response.status_code, 200)\n+        self.assertNotIn(\"Last-Modified\", response.headers)\n     @override_settings(\n         TEMPLATES=[\n             {\n",
  "django__django-16315": "",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..3e851cc 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n import urllib.parse\n@@ -35,7 +36,7 @@ from .models.custom_user import (\n )\n from .models.with_custom_email_field import CustomEmailField\n from .models.with_integer_username import IntegerUsernameUser\n-from .settings import AUTH_TEMPLATES\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n \n \n class TestDataMixin:\n@@ -252,6 +253,32 @@ class UserCreationFormTest(TestDataMixin, TestCase):\n         form = CustomUserCreationForm(data)\n         self.assertTrue(form.is_valid())\n \n+    def test_custom_form_saves_many_to_many_field(self):\n+        # Define a custom form to use in the test\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        # Create an organization instance for the test\n+        organization = Organization.objects.create(name=\"organization 1\")\n+\n+        # Define form data including the ManyToMany field\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization.pk)],\n+        }\n+\n+        # Initialize the form with the test data\n+        form = CustomUserCreationForm(data)\n+        # Validate the form\n+        self.assertTrue(form.is_valid())\n+        # Save the user and check the ManyToMany field is saved correctly\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization])\n+\n     def test_password_whitespace_not_stripped(self):\n         data = {\n             \"username\": \"testuser\",\n",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..f4fabf6 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.test import TestCase\n@@ -160,6 +161,28 @@ class TimesinceTests(TestCase):\n         self.assertEqual(timesince(t + self.oneday, now), \"0\\xa0minutes\")\n         self.assertEqual(timeuntil(t - self.oneday, now), \"0\\xa0minutes\")\n \n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_long_interval_with_tz_aware_datetime(self):\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=31)\n+        self.assertEqual(\n+            timesince(d), \"1\\xa0month\",\n+            \"Failed to correctly handle timezone-aware datetime objects for intervals >1 month\"\n+        )\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_long_interval_with_tz_aware_datetime_more_than_one_year(self):\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=400)\n+        expected_years = 400 // 365\n+        expected_months = (400 % 365) // 30\n+        self.assertEqual(\n+            timesince(d), f\"{expected_years}\\xa0years, {expected_months}\\xa0months\",\n+            \"Failed to correctly calculate years and months for timezone-aware datetime objects\"\n+        )\n+\n     def test_naive_datetime_with_tzinfo_attribute(self):\n         class naive(datetime.tzinfo):\n             def utcoffset(self, dt):\n",
  "django__django-16454": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 8d0729b..4a69fd2 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -469,7 +469,32 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertEqual(out.strip(), \"Set foo\")\n \n \n-class UtilsTests(SimpleTestCase):\n+from django.test import SimpleTestCase\n+from django.core.management import call_command, CommandError\n+import sys\n+from io import StringIO\n+\n+class SubparserErrorFormattingTests(SimpleTestCase):\n+    def setUp(self):\n+        self.out = StringIO()\n+        self.err = StringIO()\n+        self._out, self._err = sys.stdout, sys.stderr\n+        sys.stdout, sys.stderr = self.out, self.err\n+\n+    def tearDown(self):\n+        sys.stdout, sys.stderr = self._out, self._err\n+\n+    def test_missing_subparser_required_argument(self):\n+        with self.assertRaises(CommandError):\n+            call_command('cheeses', 'create')\n+        err_output = self.err.getvalue()\n+        self.assertIn('manage.py cheeses create: error: the following arguments are required: name', err_output)\n+\n+    def test_non_existent_subparser(self):\n+        with self.assertRaises(CommandError):\n+            call_command('cheeses', 'nonexistent_subparser')\n+        err_output = self.err.getvalue()\n+        self.assertIn('manage.py cheeses: error: invalid choice: \\'nonexistent_subparser\\'', err_output)\n     def test_no_existent_external_program(self):\n         msg = \"Error executing a_42_command_that_doesnt_exist_42\"\n         with self.assertRaisesMessage(CommandError, msg):\n",
  "django__django-16485": "",
  "django__django-16493": "diff --git a/tests/file_storage/models.py b/tests/file_storage/models.py\nindex 3513a6b..a037006 100644\n--- a/tests/file_storage/models.py\n+++ b/tests/file_storage/models.py\n@@ -50,25 +50,46 @@ class Storage(models.Model):\n     pathlib_callable = models.FileField(\n         storage=temp_storage, upload_to=pathlib_upload_to\n     )\n+    storage_callable_default = models.FileField(\n+        storage=get_storage, upload_to=\"storage_callable_default\"\n+    )\n     pathlib_direct = models.FileField(storage=temp_storage, upload_to=Path(\"bar\"))\n     random = models.FileField(storage=temp_storage, upload_to=random_upload_to)\n     custom_valid_name = models.FileField(\n         storage=CustomValidNameStorage(location=temp_storage_location),\n         upload_to=random_upload_to,\n     )\n+    storage_callable_default = models.FileField(\n+        storage=get_storage, upload_to=\"storage_callable_default\"\n+    )\n     storage_callable = models.FileField(\n         storage=callable_storage, upload_to=\"storage_callable\"\n     )\n+    storage_callable_default = models.FileField(\n+        storage=get_storage, upload_to=\"storage_callable_default\"\n+    )\n     storage_callable_class = models.FileField(\n         storage=CallableStorage, upload_to=\"storage_callable_class\"\n     )\n+    storage_callable_default = models.FileField(\n+        storage=get_storage, upload_to=\"storage_callable_default\"\n+    )\n     default = models.FileField(\n         storage=temp_storage, upload_to=\"tests\", default=\"tests/default.txt\"\n     )\n+    storage_callable_default = models.FileField(\n+        storage=get_storage, upload_to=\"storage_callable_default\"\n+    )\n     empty = models.FileField(storage=temp_storage)\n     limited_length = models.FileField(\n         storage=temp_storage, upload_to=\"tests\", max_length=20\n     )\n+    storage_callable_default = models.FileField(\n+        storage=get_storage, upload_to=\"storage_callable_default\"\n+    )\n     extended_length = models.FileField(\n         storage=temp_storage, upload_to=\"tests\", max_length=300\n+    )\n+    storage_callable_default = models.FileField(\n+        storage=get_storage, upload_to=\"storage_callable_default\"\n     )\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..ea91ca6 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n@@ -10,7 +11,8 @@ from django.urls import reverse\n \n from .admin import ArticleAdmin, site\n from .models import Article, Question\n-from .tests import AdminViewBasicTestCase\n+from django.contrib.auth import get_permission_codename\n+from .tests import AdminViewBasicTestCase, get_perm\n \n \n class AdminTemplateTagsTest(AdminViewBasicTestCase):\n@@ -33,6 +35,69 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n         self.assertIs(template_context[\"extra\"], True)\n         self.assertIs(template_context[\"show_save\"], True)\n \n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n+\n+    def test_submit_row_save_as_new_no_permissions(self):\n+        no_permission_user = User.objects.create_user(\n+            username=\"no_permission_user\", password=\"secret\", is_staff=True\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = no_permission_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+    def test_submit_row_save_as_new_only_add_permission(self):\n+        add_user_only = User.objects.create_user(\n+            username=\"add_user_only\", password=\"secret\", is_staff=True\n+        )\n+        add_user_only.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_user_only\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n     def test_override_show_save_and_add_another(self):\n         request = self.request_factory.get(\n             reverse(\"admin:auth_user_change\", args=[self.superuser.pk]),\n",
  "django__django-16560": "diff --git a/tests/constraints/tests.py b/tests/constraints/tests.py\nindex 13854a9..01b47d1 100644\n--- a/tests/constraints/tests.py\n+++ b/tests/constraints/tests.py\n@@ -217,7 +217,32 @@ class CheckConstraintTests(TestCase):\n         constraints = get_constraints(ChildModel._meta.db_table)\n         self.assertIn(\"constraints_childmodel_adult\", constraints)\n \n-    def test_validate(self):\n+    def test_custom_violation_error_code_set_properly(self):\n+        # Test that a custom violation error code is correctly set for CheckConstraint\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price\",\n+            violation_error_code=\"custom_error_code\",\n+        )\n+        # Validate the error code is set properly\n+        self.assertEqual(constraint.violation_error_code, \"custom_error_code\")\n+\n+    def test_validate_raises_custom_error_code(self):\n+        # Test that the custom error code is raised during validation\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price\",\n+            violation_error_message=\"Custom error message\",\n+            violation_error_code=\"custom_error_code\",\n+        )\n+        # Invalid product.\n+        invalid_product = Product(price=10, discounted_price=42)\n+        msg = \"Custom error message\"\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n+            constraint.validate(Product, invalid_product)\n+        self.assertEqual(cm.exception.code, \"custom_error_code\")\n         check = models.Q(price__gt=models.F(\"discounted_price\"))\n         constraint = models.CheckConstraint(check=check, name=\"price\")\n         # Invalid product.\n@@ -654,7 +679,32 @@ class UniqueConstraintTests(TestCase):\n         with self.assertRaisesMessage(ValidationError, msg):\n             NoCodeErrorConstraintModel(name=\"test\").validate_constraints()\n \n-    def test_validate(self):\n+    def test_custom_violation_error_code_set_properly(self):\n+        # Test that a custom violation error code is correctly set for CheckConstraint\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price\",\n+            violation_error_code=\"custom_error_code\",\n+        )\n+        # Validate the error code is set properly\n+        self.assertEqual(constraint.violation_error_code, \"custom_error_code\")\n+\n+    def test_validate_raises_custom_error_code(self):\n+        # Test that the custom error code is raised during validation\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price\",\n+            violation_error_message=\"Custom error message\",\n+            violation_error_code=\"custom_error_code\",\n+        )\n+        # Invalid product.\n+        invalid_product = Product(price=10, discounted_price=42)\n+        msg = \"Custom error message\"\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n+            constraint.validate(Product, invalid_product)\n+        self.assertEqual(cm.exception.code, \"custom_error_code\")\n         constraint = UniqueConstraintProduct._meta.constraints[0]\n         msg = \"Unique constraint product with this Name and Color already exists.\"\n         non_unique_product = UniqueConstraintProduct(\n",
  "django__django-16569": "",
  "django__django-16595": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3979e76..4927478 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -43,7 +43,40 @@ class OptimizerTests(SimpleTestCase):\n     def assertDoesNotOptimize(self, operations, **kwargs):\n         self.assertOptimizesTo(operations, operations, **kwargs)\n \n-    def test_none_app_label(self):\n+    def test_alterfield_reduction(self):\n+        \"\"\"\n+        Test that a series of AlterField operations on the same field\n+        reduces to a single AlterField operation representing the final state.\n+        \"\"\"\n+        operations = [\n+            migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=256)),\n+            migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128)),\n+            migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, help_text=\"help\")),\n+            migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, help_text=\"help\", default=None)),\n+        ]\n+        expected = [\n+            migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, help_text=\"help\", default=None)),\n+        ]\n+        self.assertOptimizesTo(operations, expected)\n+\n+    def test_alterfield_non_reduction_with_separation(self):\n+        \"\"\"\n+        Test that AlterField operations do not reduce if separated by a non-elidable operation.\n+        \"\"\"\n+        operations = [\n+            migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=256)),\n+            migrations.RunPython(lambda apps, schema_editor: None),  # Non-elidable operation\n+            migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128)),\n+            migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, help_text=\"help\")),\n+            migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, help_text=\"help\", default=None)),\n+        ]\n+        expected = [\n+            migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=256)),\n+            migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128)),\n+            migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, help_text=\"help\")),\n+            migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, help_text=\"help\", default=None)),\n+        ]\n+        self.assertDoesNotOptimize(operations, expected)\n         optimizer = MigrationOptimizer()\n         with self.assertRaisesMessage(TypeError, \"app_label must be a str\"):\n             optimizer.optimize([], None)\n",
  "django__django-16612": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 9120571..9f521dc 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -8456,6 +8456,52 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             email=\"staff@example.com\",\n             is_staff=True,\n         )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_preserves_query_string(self):\n+        # Test that the catch_all_view correctly appends a slash and preserves query strings\n+        superuser = User.objects.create_user(\n+            username=\"admin\",\n+            password=\"secret\",\n+            email=\"admin@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n+        self.assertRedirects(\n+            response, f\"{known_url}?id=123\", status_code=301, fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_without_query_string(self):\n+        # Test that the catch_all_view correctly appends a slash when there is no query string\n+        superuser = User.objects.create_user(\n+            username=\"admin\",\n+            password=\"secret\",\n+            email=\"admin@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response, known_url, status_code=301, fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=False)\n+    def test_no_append_slash_setting(self):\n+        # Check behavior when APPEND_SLASH is False\n+        superuser = User.objects.create_user(\n+            username=\"admin\",\n+            password=\"secret\",\n+            email=\"admin@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url}?id=123\")\n+        self.assertEqual(response.status_code, 200)\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1])\n@@ -8463,6 +8509,52 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             response, known_url, status_code=301, target_status_code=403\n         )\n \n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_preserves_query_string(self):\n+        # Test that the catch_all_view correctly appends a slash and preserves query strings\n+        superuser = User.objects.create_user(\n+            username=\"admin\",\n+            password=\"secret\",\n+            email=\"admin@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n+        self.assertRedirects(\n+            response, f\"{known_url}?id=123\", status_code=301, fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_without_query_string(self):\n+        # Test that the catch_all_view correctly appends a slash when there is no query string\n+        superuser = User.objects.create_user(\n+            username=\"admin\",\n+            password=\"secret\",\n+            email=\"admin@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response, known_url, status_code=301, fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=False)\n+    def test_no_append_slash_setting(self):\n+        # Check behavior when APPEND_SLASH is False\n+        superuser = User.objects.create_user(\n+            username=\"admin\",\n+            password=\"secret\",\n+            email=\"admin@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url}?id=123\")\n+        self.assertEqual(response.status_code, 200)\n+\n     @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_true_script_name(self):\n         superuser = User.objects.create_user(\n@@ -8471,6 +8563,52 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             email=\"staff@example.com\",\n             is_staff=True,\n         )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_preserves_query_string(self):\n+        # Test that the catch_all_view correctly appends a slash and preserves query strings\n+        superuser = User.objects.create_user(\n+            username=\"admin\",\n+            password=\"secret\",\n+            email=\"admin@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n+        self.assertRedirects(\n+            response, f\"{known_url}?id=123\", status_code=301, fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_without_query_string(self):\n+        # Test that the catch_all_view correctly appends a slash when there is no query string\n+        superuser = User.objects.create_user(\n+            username=\"admin\",\n+            password=\"secret\",\n+            email=\"admin@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response, known_url, status_code=301, fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=False)\n+    def test_no_append_slash_setting(self):\n+        # Check behavior when APPEND_SLASH is False\n+        superuser = User.objects.create_user(\n+            username=\"admin\",\n+            password=\"secret\",\n+            email=\"admin@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url}?id=123\")\n+        self.assertEqual(response.status_code, 200)\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n@@ -8481,6 +8619,52 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             fetch_redirect_response=False,\n         )\n \n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_preserves_query_string(self):\n+        # Test that the catch_all_view correctly appends a slash and preserves query strings\n+        superuser = User.objects.create_user(\n+            username=\"admin\",\n+            password=\"secret\",\n+            email=\"admin@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n+        self.assertRedirects(\n+            response, f\"{known_url}?id=123\", status_code=301, fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_without_query_string(self):\n+        # Test that the catch_all_view correctly appends a slash when there is no query string\n+        superuser = User.objects.create_user(\n+            username=\"admin\",\n+            password=\"secret\",\n+            email=\"admin@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response, known_url, status_code=301, fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=False)\n+    def test_no_append_slash_setting(self):\n+        # Check behavior when APPEND_SLASH is False\n+        superuser = User.objects.create_user(\n+            username=\"admin\",\n+            password=\"secret\",\n+            email=\"admin@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url}?id=123\")\n+        self.assertEqual(response.status_code, 200)\n+\n     @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME=\"/prefix/\")\n     def test_missing_slash_append_slash_true_force_script_name(self):\n         superuser = User.objects.create_user(\n@@ -8489,6 +8673,52 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             email=\"staff@example.com\",\n             is_staff=True,\n         )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_preserves_query_string(self):\n+        # Test that the catch_all_view correctly appends a slash and preserves query strings\n+        superuser = User.objects.create_user(\n+            username=\"admin\",\n+            password=\"secret\",\n+            email=\"admin@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n+        self.assertRedirects(\n+            response, f\"{known_url}?id=123\", status_code=301, fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_without_query_string(self):\n+        # Test that the catch_all_view correctly appends a slash when there is no query string\n+        superuser = User.objects.create_user(\n+            username=\"admin\",\n+            password=\"secret\",\n+            email=\"admin@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response, known_url, status_code=301, fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=False)\n+    def test_no_append_slash_setting(self):\n+        # Check behavior when APPEND_SLASH is False\n+        superuser = User.objects.create_user(\n+            username=\"admin\",\n+            password=\"secret\",\n+            email=\"admin@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url}?id=123\")\n+        self.assertEqual(response.status_code, 200)\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1])\n@@ -8499,6 +8729,52 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             fetch_redirect_response=False,\n         )\n \n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_preserves_query_string(self):\n+        # Test that the catch_all_view correctly appends a slash and preserves query strings\n+        superuser = User.objects.create_user(\n+            username=\"admin\",\n+            password=\"secret\",\n+            email=\"admin@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n+        self.assertRedirects(\n+            response, f\"{known_url}?id=123\", status_code=301, fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_without_query_string(self):\n+        # Test that the catch_all_view correctly appends a slash when there is no query string\n+        superuser = User.objects.create_user(\n+            username=\"admin\",\n+            password=\"secret\",\n+            email=\"admin@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response, known_url, status_code=301, fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=False)\n+    def test_no_append_slash_setting(self):\n+        # Check behavior when APPEND_SLASH is False\n+        superuser = User.objects.create_user(\n+            username=\"admin\",\n+            password=\"secret\",\n+            email=\"admin@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url}?id=123\")\n+        self.assertEqual(response.status_code, 200)\n+\n     @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n         user = User.objects.create_user(\n@@ -8507,6 +8783,52 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             email=\"user@example.com\",\n             is_staff=False,\n         )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_preserves_query_string(self):\n+        # Test that the catch_all_view correctly appends a slash and preserves query strings\n+        superuser = User.objects.create_user(\n+            username=\"admin\",\n+            password=\"secret\",\n+            email=\"admin@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n+        self.assertRedirects(\n+            response, f\"{known_url}?id=123\", status_code=301, fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_without_query_string(self):\n+        # Test that the catch_all_view correctly appends a slash when there is no query string\n+        superuser = User.objects.create_user(\n+            username=\"admin\",\n+            password=\"secret\",\n+            email=\"admin@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response, known_url, status_code=301, fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=False)\n+    def test_no_append_slash_setting(self):\n+        # Check behavior when APPEND_SLASH is False\n+        superuser = User.objects.create_user(\n+            username=\"admin\",\n+            password=\"secret\",\n+            email=\"admin@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url}?id=123\")\n+        self.assertEqual(response.status_code, 200)\n         self.client.force_login(user)\n         known_url = reverse(\"admin:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1])\n@@ -8622,6 +8944,52 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             email=\"staff@example.com\",\n             is_staff=True,\n         )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_preserves_query_string(self):\n+        # Test that the catch_all_view correctly appends a slash and preserves query strings\n+        superuser = User.objects.create_user(\n+            username=\"admin\",\n+            password=\"secret\",\n+            email=\"admin@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n+        self.assertRedirects(\n+            response, f\"{known_url}?id=123\", status_code=301, fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_without_query_string(self):\n+        # Test that the catch_all_view correctly appends a slash when there is no query string\n+        superuser = User.objects.create_user(\n+            username=\"admin\",\n+            password=\"secret\",\n+            email=\"admin@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response, known_url, status_code=301, fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=False)\n+    def test_no_append_slash_setting(self):\n+        # Check behavior when APPEND_SLASH is False\n+        superuser = User.objects.create_user(\n+            username=\"admin\",\n+            password=\"secret\",\n+            email=\"admin@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url}?id=123\")\n+        self.assertEqual(response.status_code, 200)\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin10:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1])\n@@ -8629,6 +8997,52 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             response, known_url, status_code=301, target_status_code=403\n         )\n \n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_preserves_query_string(self):\n+        # Test that the catch_all_view correctly appends a slash and preserves query strings\n+        superuser = User.objects.create_user(\n+            username=\"admin\",\n+            password=\"secret\",\n+            email=\"admin@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n+        self.assertRedirects(\n+            response, f\"{known_url}?id=123\", status_code=301, fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_without_query_string(self):\n+        # Test that the catch_all_view correctly appends a slash when there is no query string\n+        superuser = User.objects.create_user(\n+            username=\"admin\",\n+            password=\"secret\",\n+            email=\"admin@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response, known_url, status_code=301, fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=False)\n+    def test_no_append_slash_setting(self):\n+        # Check behavior when APPEND_SLASH is False\n+        superuser = User.objects.create_user(\n+            username=\"admin\",\n+            password=\"secret\",\n+            email=\"admin@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url}?id=123\")\n+        self.assertEqual(response.status_code, 200)\n+\n     @override_settings(APPEND_SLASH=False)\n     def test_missing_slash_append_slash_false_without_final_catch_all_view(self):\n         superuser = User.objects.create_user(\n@@ -8637,6 +9051,52 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             email=\"staff@example.com\",\n             is_staff=True,\n         )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_preserves_query_string(self):\n+        # Test that the catch_all_view correctly appends a slash and preserves query strings\n+        superuser = User.objects.create_user(\n+            username=\"admin\",\n+            password=\"secret\",\n+            email=\"admin@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n+        self.assertRedirects(\n+            response, f\"{known_url}?id=123\", status_code=301, fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_without_query_string(self):\n+        # Test that the catch_all_view correctly appends a slash when there is no query string\n+        superuser = User.objects.create_user(\n+            username=\"admin\",\n+            password=\"secret\",\n+            email=\"admin@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response, known_url, status_code=301, fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=False)\n+    def test_no_append_slash_setting(self):\n+        # Check behavior when APPEND_SLASH is False\n+        superuser = User.objects.create_user(\n+            username=\"admin\",\n+            password=\"secret\",\n+            email=\"admin@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url}?id=123\")\n+        self.assertEqual(response.status_code, 200)\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin10:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1])\n",
  "django__django-16642": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 499356e..8c5d4b9 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -256,6 +256,21 @@ class FileResponseTests(SimpleTestCase):\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n         )\n+\n+    def test_brotli_and_compress_mimetypes(self):\n+        \"\"\"\n+        Test that the correct MIME type is guessed for .br and .Z file extensions.\n+        \"\"\"\n+        test_tuples = (\n+            (\".tar.br\", \"application/x-brotli\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n+        )\n+        for extension, mimetype in test_tuples:\n+            with self.subTest(ext=extension):\n+                with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n+                    response = FileResponse(tmp)\n+                self.assertEqual(response.headers[\"Content-Type\"], mimetype)\n+                self.assertFalse(response.has_header(\"Content-Encoding\"))\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n                 with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n",
  "django__django-16661": "",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..c8174e2 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -922,7 +922,32 @@ class WriterTests(SimpleTestCase):\n             output,\n         )\n \n-    def test_migration_file_header_comments(self):\n+    def test_import_order_in_migration(self):\n+        \"\"\"\n+        Test that generated migrations have the correct import order.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield2\",\n+                        models.FloatField(\n+                            default=time.time,\n+                        ),\n+                    ),\n+                ]\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        # Check that imports are sorted correctly\n+        self.assertIn(\n+            \"import datetime\\nimport time\\nfrom django.db import migrations, models\\n\",\n+            output,\n+        )\n         \"\"\"\n         Test comments at top of file.\n         \"\"\"\n",
  "django__django-16801": "",
  "django__django-16819": "",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..df0f1b2 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -793,13 +793,21 @@ class SystemChecksTestCase(SimpleTestCase):\n \n     def test_nonexistent_field(self):\n         class SongAdmin(admin.ModelAdmin):\n-            readonly_fields = (\"title\", \"nonexistent\")\n+            readonly_fields = (\"title\", \"nonexistent\", \"another_nonexistent\")\n \n         errors = SongAdmin(Song, AdminSite()).check()\n         expected = [\n             checks.Error(\n-                \"The value of 'readonly_fields[1]' is not a callable, an attribute \"\n-                \"of 'SongAdmin', or an attribute of 'admin_checks.Song'.\",\n+                \"The value of 'readonly_fields[1]' refers to 'nonexistent', which is \"\n+                \"not a callable, an attribute of 'SongAdmin', or an attribute of \"\n+                \"'admin_checks.Song'.\",\n+                obj=SongAdmin,\n+                id=\"admin.E035\",\n+            ),\n+            checks.Error(\n+                \"The value of 'readonly_fields[2]' refers to 'another_nonexistent', which is \"\n+                \"not a callable, an attribute of 'SongAdmin', or an attribute of \"\n+                \"'admin_checks.Song'.\",\n                 obj=SongAdmin,\n                 id=\"admin.E035\",\n             )\n@@ -814,8 +822,9 @@ class SystemChecksTestCase(SimpleTestCase):\n         errors = CityInline(State, AdminSite()).check()\n         expected = [\n             checks.Error(\n-                \"The value of 'readonly_fields[0]' is not a callable, an attribute \"\n-                \"of 'CityInline', or an attribute of 'admin_checks.City'.\",\n+                \"The value of 'readonly_fields[0]' refers to 'i_dont_exist', which is \"\n+                \"not a callable, an attribute of 'CityInline', or an attribute of \"\n+                \"'admin_checks.City'.\",\n                 obj=CityInline,\n                 id=\"admin.E035\",\n             )\n",
  "django__django-16901": "diff --git a/tests/xor_lookups/tests.py b/tests/xor_lookups/tests.py\nindex 389d908..2b1ed65 100644\n--- a/tests/xor_lookups/tests.py\n+++ b/tests/xor_lookups/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import Q\n from django.test import TestCase\n \n@@ -9,6 +10,21 @@ class XorLookupsTests(TestCase):\n     def setUpTestData(cls):\n         cls.numbers = [Number.objects.create(num=i) for i in range(10)]\n \n+    def test_multiple_xor_parity(self):\n+        # Test for exactly one condition being true with multiple XORs\n+        self.assertCountEqual(\n+            Number.objects.filter(Q(num__gte=1) ^ Q(num__gte=3) ^ Q(num__gte=5) ^ Q(num__gte=7) ^ Q(num__gte=9)),\n+            self.numbers[1:3] + self.numbers[5:7] + self.numbers[9:],\n+        )\n+        self.assertCountEqual(\n+            Number.objects.filter(Q(num__gte=0) ^ Q(num__gte=2) ^ Q(num__gte=4) ^ Q(num__gte=6) ^ Q(num__gte=8)),\n+            self.numbers[:1] + self.numbers[3:5] + self.numbers[7:9],\n+        )\n+        self.assertCountEqual(\n+            Number.objects.filter(Q(num__gte=1) ^ Q(num__gte=2) ^ Q(num__gte=3) ^ Q(num__gte=4) ^ Q(num__gte=5)),\n+            self.numbers[1:2] + self.numbers[4:5],\n+        )\n+        \n     def test_filter(self):\n         self.assertCountEqual(\n             Number.objects.filter(num__lte=7) ^ Number.objects.filter(num__gte=3),\n@@ -64,4 +80,4 @@ class XorLookupsTests(TestCase):\n         self.assertCountEqual(\n             Number.objects.filter(Q(pk__in=[]) ^ Q(num__gte=5)),\n             self.numbers[5:],\n-        )\n+        )\n",
  "django__django-17029": "",
  "django__django-17084": "",
  "django__django-17087": "",
  "django__django-7530": "",
  "django__django-9296": "diff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\nindex b9b5fbc..1cfaecc 100644\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -298,6 +298,9 @@ class PaginationTests(SimpleTestCase):\n             paginator.get_page(1)\n \n \n+from django.test import TestCase\n+from django.core.paginator import Paginator, EmptyPage\n+\n class ModelPaginationTests(TestCase):\n     \"\"\"\n     Test pagination with Django model instances\n@@ -309,7 +312,25 @@ class ModelPaginationTests(TestCase):\n             a = Article(headline='Article %s' % x, pub_date=datetime(2005, 7, 29))\n             a.save()\n \n-    def test_first_page(self):\n+    def test_paginator_iteration(self):\n+        paginator = Paginator([1, 2, 3, 4, 5], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2], [3, 4], [5]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+\n+    def test_paginator_iteration_empty_list(self):\n+        paginator = Paginator([], 1)\n+        page_iterator = iter(paginator)\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_paginator_iteration_single_page(self):\n+        paginator = Paginator([1], 1)\n+        page_iterator = iter(paginator)\n+        self.assertEqual([1], list(next(page_iterator)))\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n         paginator = Paginator(Article.objects.order_by('id'), 5)\n         p = paginator.page(1)\n         self.assertEqual(\"<Page 1 of 2>\", str(p))\n",
  "matplotlib__matplotlib-13989": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5483eef..2addaa2 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6359,8 +6359,37 @@ def test_hist_auto_bins():\n \n def test_hist_nan_data():\n     fig, (ax1, ax2) = plt.subplots(2)\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import pytest\n \n-    data = [1, 2, 3]\n+def test_hist_range_and_density():\n+    # Original test case to check range is respected when density=True\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_density_false():\n+    # Test case to ensure range is respected when density=False\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=False)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_multiple_ranges():\n+    # Test case for checking multiple ranges\n+    data = np.random.rand(100)\n+    for r in [(0, 0.5), (0.2, 0.8), (0.3, 0.9)]:\n+        _, bins, _ = plt.hist(data, \"auto\", range=r, density=True)\n+        assert bins[0] == r[0]\n+        assert bins[-1] == r[1]\n+\n+def test_hist_with_weights():\n+    # Test case for checking density with weights\n+    data = np.random.rand(100)\n+    weights = np.random.rand(100)\n+    _, bins, _ = plt.hist(data, \"auto\", range=(0, 1), density=True, weights=weights)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n     nan_data = data + [np.nan]\n \n     bins, edges, _ = ax1.hist(data)\n@@ -6368,4 +6397,4 @@ def test_hist_nan_data():\n         nanbins, nanedges, _ = ax2.hist(nan_data)\n \n     assert np.allclose(bins, nanbins)\n-    assert np.allclose(edges, nanedges)\n+    assert np.allclose(edges, nanedges)\n",
  "matplotlib__matplotlib-14623": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c9ad946..5615836 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -930,6 +930,21 @@ def test_inverted_limits():\n     assert ax.get_ylim() == (-3, 5)\n     plt.close()\n \n+def test_invert_log_scale_axis():\n+    # Test whether inverting a log scale axis using its limits works\n+    fig, ax = plt.subplots()\n+    ax.set_yscale('log')\n+    ax.set_ylim(10, 1)\n+    # Verify if the limits are correctly inverted\n+    assert ax.get_ylim() == (10, 1), \"Failed to invert the y-axis for log scale\"\n+\n+    # Also test for x-axis inversion\n+    ax.set_xscale('log')\n+    ax.set_xlim(10, 1)\n+    assert ax.get_xlim() == (10, 1), \"Failed to invert the x-axis for log scale\"\n+\n+    plt.close()\n+\n     fig, ax = plt.subplots()\n     ax.invert_yaxis()\n     ax.plot([-5, -3, 2, 4], [1, 2, -3, 5])\n@@ -938,6 +953,21 @@ def test_inverted_limits():\n     assert ax.get_ylim() == (5, -3)\n     plt.close()\n \n+def test_invert_log_scale_axis():\n+    # Test whether inverting a log scale axis using its limits works\n+    fig, ax = plt.subplots()\n+    ax.set_yscale('log')\n+    ax.set_ylim(10, 1)\n+    # Verify if the limits are correctly inverted\n+    assert ax.get_ylim() == (10, 1), \"Failed to invert the y-axis for log scale\"\n+\n+    # Also test for x-axis inversion\n+    ax.set_xscale('log')\n+    ax.set_xlim(10, 1)\n+    assert ax.get_xlim() == (10, 1), \"Failed to invert the x-axis for log scale\"\n+\n+    plt.close()\n+\n \n @image_comparison(baseline_images=['nonfinite_limits'])\n def test_nonfinite_limits():\n",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..22246cb 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6961,6 +6961,25 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n \n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear(fig_test, fig_ref):\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+\n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    axs = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs.flat:\n+        ax.plot(x, y)\n+\n+    axs = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n+\n def test_shared_axes_retick():\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n \n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "diff --git a/lib/matplotlib/tests/test_category.py b/lib/matplotlib/tests/test_category.py\nindex 40c4dcf..a5b3ff2 100644\n--- a/lib/matplotlib/tests/test_category.py\n+++ b/lib/matplotlib/tests/test_category.py\n@@ -294,21 +294,22 @@ def test_overriding_units_in_plot(fig_test, fig_ref):\n \n     ax_test = fig_test.subplots()\n     ax_ref = fig_ref.subplots()\n-    for ax, kwargs in zip([ax_test, ax_ref],\n-                          ({}, dict(xunits=None, yunits=None))):\n-        # First call works\n-        ax.plot([t0, t1], [\"V1\", \"V2\"], **kwargs)\n-        x_units = ax.xaxis.units\n-        y_units = ax.yaxis.units\n-        # this should not raise\n-        ax.plot([t2, t3], [\"V1\", \"V2\"], **kwargs)\n-        # assert that we have not re-set the units attribute at all\n-        assert x_units is ax.xaxis.units\n-        assert y_units is ax.yaxis.units\n+import pytest\n+\n+def test_no_deprecation_on_empty_data():\n+    \"\"\"\n+    Test to ensure no deprecation warning is emitted with empty data.\n+    \"\"\"\n+    import matplotlib.pyplot as plt\n+    with pytest.warns(None) as record:\n+        f, ax = plt.subplots()\n+        ax.xaxis.update_units([\"a\", \"b\"])\n+        ax.plot([], [])\n+    assert not any(issubclass(w.category, MatplotlibDeprecationWarning) for w in record)\n \n \n def test_hist():\n     fig, ax = plt.subplots()\n     n, bins, patches = ax.hist(['a', 'b', 'a', 'c', 'ff'])\n     assert n.shape == (10,)\n-    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n+    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n",
  "matplotlib__matplotlib-22865": "",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..9c2fb81 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -490,6 +490,30 @@ def test_validate_fontstretch(stretch, parsed_stretch):\n         assert validate_fontstretch(stretch) == parsed_stretch\n \n \n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend, rc_context\n+import pytest\n+\n+def test_get_backend_does_not_clear_figs():\n+    \"\"\"Test that get_backend() does not clear figures from Gcf.figs \n+    if they were created under rc_context.\"\"\"\n+    # Ensure the backend is not 'module://aardvark' to avoid conflict with the original test\n+    assert mpl.rcParams['backend'] != 'module://aardvark'\n+\n+    # Create a figure within an rc_context\n+    with rc_context():\n+        fig2 = plt.figure()\n+\n+    # Capture Gcf state before calling get_backend()\n+    before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+\n+    # Call get_backend() and capture Gcf state after\n+    get_backend()\n+    after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+\n+    # Verify that the Gcf state has not changed\n+    assert before == after, '\\n' + before + '\\n' + after\n+\n def test_keymaps():\n     key_list = [k for k in mpl.rcParams if 'keymap' in k]\n     for k in key_list:\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..6d1eb02 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -12,10 +12,33 @@ from matplotlib.testing.decorators import image_comparison, check_figures_equal\n from matplotlib.testing.widgets import mock_event\n from matplotlib.collections import LineCollection, PolyCollection\n from matplotlib.patches import Circle\n-\n+import pytest\n+from matplotlib.testing.decorators import check_figures_equal\n import matplotlib.pyplot as plt\n import numpy as np\n \n+@check_figures_equal(extensions=[\"png\"])\n+def test_3d_set_visible_false(fig_test, fig_ref):\n+    # Create a figure with a 3D subplot, initially visible\n+    ax_test = fig_test.add_subplot(111, projection='3d')\n+    ax_test.scatter([1, 2], [1, 2], [1, 2], c='b')\n+    ax_test.set_visible(False)  # Set the visibility to False\n+\n+    # Create a reference figure without any subplot\n+    # This should be identical to the test figure if visibility is properly set\n+    pass\n+\n+@check_figures_equal(extensions=[\"png\"])\n+def test_3d_set_visible_true(fig_test, fig_ref):\n+    # Create a figure with a 3D subplot, initially visible\n+    ax_test = fig_test.add_subplot(111, projection='3d')\n+    ax_test.scatter([1, 2], [1, 2], [1, 2], c='b')\n+    ax_test.set_visible(True)  # Explicitly set the visibility to True\n+\n+    # Create a similar reference figure with the same subplot\n+    ax_ref = fig_ref.add_subplot(111, projection='3d')\n+    ax_ref.scatter([1, 2], [1, 2], [1, 2], c='b')\n+\n \n mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..61ac618 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -149,6 +149,11 @@ def test_rotate_rect_draw(fig_test, fig_ref):\n     assert rect_test.get_angle() == angle\n \n \n+import matplotlib.pyplot as plt\n+import matplotlib.patches as patches\n+import numpy as np\n+from matplotlib.testing.decorators import image_comparison, check_figures_equal\n+\n def test_negative_rect():\n     # These two rectangles have the same vertices, but starting from a\n     # different point.  (We also drop the last vertex, which is a duplicate.)\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..300ec97 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2866,8 +2866,29 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n+def test_stackplot_with_color_aliases():\n+    import matplotlib.pyplot as plt\n+    from matplotlib.patches import Rectangle\n+    import numpy as np\n \n-@image_comparison(['stackplot_test_baseline'], remove_text=True)\n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    fig, ax = plt.subplots()\n+    # Use color cycle with CN aliases\n+    line = ax.plot([1, 3], [1, 3], color='C0')\n+    rect = ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))\n+    try:\n+        ax.stackplot([1, 2, 3], my_data, colors=['C2', 'C3', 'C4'])\n+        result = True\n+    except ValueError:\n+        result = False\n+\n+    fig.canvas.draw()\n+\n+    # Ensure stackplot does not raise an error and colors are applied correctly\n+    assert result is True\n+    # Check if the color cycle is preserved after stackplot\n+    assert line[0].get_color() == 'C0'\n+    assert rect.get_facecolor() == plt.colors.to_rgba('C1')\n def test_stackplot_baseline():\n     np.random.seed(0)\n \n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 45f9c04..56a677c 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -12,10 +12,29 @@ import matplotlib.lines as mlines\n from matplotlib.backend_bases import MouseButton, MouseEvent\n \n from matplotlib.offsetbox import (\n+    HPacker, VPacker,  # Ensure HPacker and VPacker are imported\n     AnchoredOffsetbox, AnnotationBbox, AnchoredText, DrawingArea, OffsetBox,\n     OffsetImage, TextArea, _get_packed_offsets)\n \n \n+@pytest.mark.parametrize(\"align, expected_offsets\", [\n+    (\"top\", [(0, 10), (10, 0)]),  # Adjust expected offsets\n+    (\"bottom\", [(0, 0), (10, 10)]),\n+])\n+def test_hpacker_alignment(align, expected_offsets):\n+    fig = plt.figure(dpi=72)\n+    x1, y1 = 10, 20\n+    x2, y2 = 10, 30\n+    r1 = DrawingArea(x1, y1)\n+    r2 = DrawingArea(x2, y2)\n+    \n+    hpacker = HPacker(children=[r1, r2], pad=0, sep=0, align=align)\n+    renderer = fig.canvas.get_renderer()\n+    \n+    _, _, _, _, offset_pairs = hpacker.get_extent_offsets(renderer)\n+    \n+    assert_allclose(expected_offsets, offset_pairs)\n+\n @image_comparison(['offsetbox_clipping'], remove_text=True)\n def test_offsetbox_clipping():\n     # - create a plot\n",
  "matplotlib__matplotlib-24627": "",
  "matplotlib__matplotlib-24637": "diff --git a/lib/matplotlib/tests/test_backend_svg.py b/lib/matplotlib/tests/test_backend_svg.py\nindex 8817464..268c76f 100644\n--- a/lib/matplotlib/tests/test_backend_svg.py\n+++ b/lib/matplotlib/tests/test_backend_svg.py\n@@ -577,13 +577,77 @@ def test_svg_font_string(font_str, include_generic):\n     plt.rcParams[f\"font.{generic}\"] = rest\n     plt.rcParams[\"font.size\"] = size\n     plt.rcParams[\"svg.fonttype\"] = \"none\"\n+from matplotlib.offsetbox import (OffsetImage, AnnotationBbox)\n+import matplotlib.pyplot as plt\n+import numpy as np\n+from io import BytesIO\n+\n+def test_annotationbbox_gid():\n+    # Test that object gid appears in the AnnotationBbox in output SVG.\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111)\n+    arr_img = np.ones((32, 32))\n+    xy = (0.3, 0.55)\n+\n+    imagebox = OffsetImage(arr_img, zoom=0.1)\n+    imagebox.image.axes = ax\n+\n+    ab = AnnotationBbox(imagebox, xy,\n+                        xybox=(120., -80.),\n+                        xycoords='data',\n+                        boxcoords=\"offset points\",\n+                        pad=0.5,\n+                        arrowprops=dict(\n+                            arrowstyle=\"->\",\n+                            connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                        )\n+    ab.set_gid(\"test_annotation_bbox_gid\")\n+    ax.add_artist(ab)\n \n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n+\n+    expected = '<g id=\"test_annotation_bbox_gid\">'\n+    assert expected in buf\n     fig, ax = plt.subplots()\n     if generic == \"sans-serif\":\n         generic_options = [\"sans\", \"sans-serif\", \"sans serif\"]\n     else:\n         generic_options = [generic]\n+from matplotlib.offsetbox import (OffsetImage, AnnotationBbox)\n+import matplotlib.pyplot as plt\n+import numpy as np\n+from io import BytesIO\n+\n+def test_annotationbbox_gid():\n+    # Test that object gid appears in the AnnotationBbox in output SVG.\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111)\n+    arr_img = np.ones((32, 32))\n+    xy = (0.3, 0.55)\n+\n+    imagebox = OffsetImage(arr_img, zoom=0.1)\n+    imagebox.image.axes = ax\n+\n+    ab = AnnotationBbox(imagebox, xy,\n+                        xybox=(120., -80.),\n+                        xycoords='data',\n+                        boxcoords=\"offset points\",\n+                        pad=0.5,\n+                        arrowprops=dict(\n+                            arrowstyle=\"->\",\n+                            connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                        )\n+    ab.set_gid(\"test_annotation_bbox_gid\")\n+    ax.add_artist(ab)\n \n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n+\n+    expected = '<g id=\"test_annotation_bbox_gid\">'\n+    assert expected in buf\n     for generic_name in generic_options:\n         # test that fallback works\n         ax.text(0.5, 0.5, \"There are \u51e0\u4e2a\u6c49\u5b57 in between!\",\n@@ -592,11 +656,75 @@ def test_svg_font_string(font_str, include_generic):\n         ax.text(0.5, 0.1, \"There are \u51e0\u4e2a\u6c49\u5b57 in between!\",\n                 family=[explicit, *rest, generic_name], ha=\"center\")\n     ax.axis(\"off\")\n+from matplotlib.offsetbox import (OffsetImage, AnnotationBbox)\n+import matplotlib.pyplot as plt\n+import numpy as np\n+from io import BytesIO\n+\n+def test_annotationbbox_gid():\n+    # Test that object gid appears in the AnnotationBbox in output SVG.\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111)\n+    arr_img = np.ones((32, 32))\n+    xy = (0.3, 0.55)\n+\n+    imagebox = OffsetImage(arr_img, zoom=0.1)\n+    imagebox.image.axes = ax\n+\n+    ab = AnnotationBbox(imagebox, xy,\n+                        xybox=(120., -80.),\n+                        xycoords='data',\n+                        boxcoords=\"offset points\",\n+                        pad=0.5,\n+                        arrowprops=dict(\n+                            arrowstyle=\"->\",\n+                            connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                        )\n+    ab.set_gid(\"test_annotation_bbox_gid\")\n+    ax.add_artist(ab)\n \n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n+\n+    expected = '<g id=\"test_annotation_bbox_gid\">'\n+    assert expected in buf\n     with BytesIO() as fd:\n         fig.savefig(fd, format=\"svg\")\n         buf = fd.getvalue()\n+from matplotlib.offsetbox import (OffsetImage, AnnotationBbox)\n+import matplotlib.pyplot as plt\n+import numpy as np\n+from io import BytesIO\n+\n+def test_annotationbbox_gid():\n+    # Test that object gid appears in the AnnotationBbox in output SVG.\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111)\n+    arr_img = np.ones((32, 32))\n+    xy = (0.3, 0.55)\n+\n+    imagebox = OffsetImage(arr_img, zoom=0.1)\n+    imagebox.image.axes = ax\n+\n+    ab = AnnotationBbox(imagebox, xy,\n+                        xybox=(120., -80.),\n+                        xycoords='data',\n+                        boxcoords=\"offset points\",\n+                        pad=0.5,\n+                        arrowprops=dict(\n+                            arrowstyle=\"->\",\n+                            connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                        )\n+    ab.set_gid(\"test_annotation_bbox_gid\")\n+    ax.add_artist(ab)\n \n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n+\n+    expected = '<g id=\"test_annotation_bbox_gid\">'\n+    assert expected in buf\n     tree = xml.etree.ElementTree.fromstring(buf)\n     ns = \"http://www.w3.org/2000/svg\"\n     text_count = 0\n",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..61ddfbc 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -20,6 +20,21 @@ import matplotlib.scale as mscale\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n \n \n+import pytest\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import matplotlib.colors as mcolors\n+from numpy.testing import assert_array_equal, assert_array_almost_equal\n+\n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.float16, float])\n+def test_no_deprecation_warnings_for_uint8(dtype):\n+    # This test is designed to verify that using out-of-bound integers no longer raises warnings.\n+    cm = plt.get_cmap(\"viridis\")\n+    with pytest.warns(None) as record:\n+        result = cm(np.array([256, 257, 258], dtype=dtype))\n+    # Ensure no deprecation warnings are emitted\n+    assert len(record) == 0\n+\n @pytest.mark.parametrize('N, result', [\n     (5, [1, .6, .2, .1, 0]),\n     (2, [1, 0]),\n",
  "matplotlib__matplotlib-25122": "diff --git a/lib/matplotlib/tests/test_mlab.py b/lib/matplotlib/tests/test_mlab.py\nindex 51d0c35..5baac8d 100644\n--- a/lib/matplotlib/tests/test_mlab.py\n+++ b/lib/matplotlib/tests/test_mlab.py\n@@ -574,6 +574,37 @@ class TestSpectral:\n                                  Fs=self.Fs,\n                                  noverlap=0,\n                                  sides=self.sides)\n+    \n+    def test_psd_window_flattop(self):\n+        if self.NFFT_density is None:\n+            return\n+        \n+        # Create a flattop window using scipy\n+        from scipy import signal\n+        flattop_window = signal.windows.flattop(self.NFFT_density_real)\n+        \n+        # Compute PSD with the flattop window\n+        spec, fsp = mlab.psd(x=self.y,\n+                             NFFT=self.NFFT_density,\n+                             Fs=self.Fs,\n+                             noverlap=0,\n+                             sides=self.sides,\n+                             window=flattop_window,\n+                             scale_by_freq=True)\n+\n+        # Expected result with proper window correction applied\n+        spec_expected, fsp_expected = mlab.psd(x=self.y,\n+                                               NFFT=self.NFFT_density,\n+                                               Fs=self.Fs,\n+                                               noverlap=0,\n+                                               sides=self.sides,\n+                                               window=flattop_window,\n+                                               scale_by_freq=False)\n+\n+        # Assert that the results with and without scale_by_freq are close\n+        assert_allclose(spec * flattop_window.sum() ** 2,\n+                        spec_expected * self.Fs * (flattop_window ** 2).sum(),\n+                        atol=1e-08)\n         assert_array_equal(fsp_g, fsp_c)\n         assert_array_equal(fsp_b, fsp_c)\n         assert_allclose(spec_g, spec_c, atol=1e-08)\n",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..0c23f14 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,6 +7801,33 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+import pytest\n+import matplotlib as mpl\n+import matplotlib.pyplot as plt\n+import matplotlib.font_manager as mfont_manager\n+import numpy as np\n+\n+def test_xaxis_offsetText_color():\n+    plt.rcParams['xtick.labelcolor'] = 'blue'\n+    ax = plt.axes()\n+    assert ax.xaxis.offsetText.get_color() == 'blue'\n+\n+    plt.rcParams['xtick.color'] = 'yellow'\n+    plt.rcParams['xtick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    assert ax.xaxis.offsetText.get_color() == 'yellow'\n+\n+\n+def test_yaxis_offsetText_color():\n+    plt.rcParams['ytick.labelcolor'] = 'green'\n+    ax = plt.axes()\n+    assert ax.yaxis.offsetText.get_color() == 'green'\n+\n+    plt.rcParams['ytick.color'] = 'red'\n+    plt.rcParams['ytick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    assert ax.yaxis.offsetText.get_color() == 'red'\n+\n def test_ytickcolor_is_not_yticklabelcolor():\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..8acd0cb 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -89,8 +90,31 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import pickletools\n \n @mpl.style.context(\"default\")\n+def test_pickle_figure_with_draggable_legend():\n+    fig, ax = plt.subplots()\n+    ax.plot([0, 1, 2], [0, 1, 4], label='Quadratic')\n+    leg = ax.legend(draggable=True)\n+\n+    # Pickle the figure with the draggable legend\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+\n+    # Ensure no references to FigureCanvasAgg are in the pickle stream\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+\n+    # Attempt to unpickle the figure\n+    loaded_fig = pickle.loads(pkl)\n+    loaded_ax = loaded_fig.gca()\n+\n+    # Check the properties of the loaded figure\n+    assert len(loaded_ax.get_lines()) == 1\n+    assert loaded_ax.get_legend() is not None\n+    assert loaded_ax.get_legend().get_draggable() is True\n+\n+    plt.close(fig)\n+    plt.close(loaded_fig)\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..f342e7c 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -43,6 +43,32 @@ def test_simple():\n     ax.set_yscale('log')\n     pickle.dump(fig, BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n+def test_pickle_figure_with_aligned_labels():\n+    import matplotlib.pyplot as plt\n+    import pickle\n+    from io import BytesIO\n+\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    # Align labels and test if the figure can be pickled\n+    fig.align_labels()\n+    pkl = BytesIO()\n+    try:\n+        pickle.dump(fig, pkl, pickle.HIGHEST_PROTOCOL)\n+        print(\"Pickle successful after aligning labels.\")\n+    except Exception as e:\n+        print(f\"Pickle failed: {e}\")\n+        raise e\n+\n \n def _generate_complete_test_figure(fig_ref):\n     fig_ref.set_size_inches((10, 6))\n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..4cc2280 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -991,6 +991,48 @@ def test_hexbin_linear():\n     ax.hexbin(x, y, gridsize=(10, 5), marginals=True,\n               reduce_C_function=np.sum)\n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_behavior_upon_C_parameter(fig_test, fig_ref):\n+    # see: gh:12926\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # without C parameter\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # with C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=[1] * len(X),\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n \n def test_hexbin_log_clim():\n     x, y = np.arange(200).reshape((2, 100))\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex 700190c..d310a23 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -89,6 +89,55 @@ def test_contour_no_valid_levels():\n     ax.contour(np.ones((9, 9)))\n \n \n+from matplotlib.testing.decorators import check_figures_equal, image_comparison\n+import matplotlib.pyplot as plt\n+import numpy as np\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths(fig_test, fig_ref):\n+    # Create two contour plots with different data\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+    cs_test = ax_test.contour([[0, 1], [1, 2]])\n+    cs_ref = ax_ref.contour([[1, 0], [2, 1]])\n+\n+    # Set the paths of cs_test to be the same as cs_ref, effectively making them visually identical\n+    cs_test.set_paths(cs_ref.get_paths())\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths_no_change(fig_test, fig_ref):\n+    # Create two identical contour plots\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+    cs_test = ax_test.contour([[0, 1], [1, 2]])\n+    cs_ref = fig_ref.subplots().contour([[0, 1], [1, 2]])  # Same data\n+\n+    # Set paths of cs_test to be the same as itself to ensure no change\n+    cs_test.set_paths(cs_test.get_paths())\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths_different_length(fig_test, fig_ref):\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+    cs_test = ax_test.contour([[0, 1], [1, 2]])\n+    cs_ref = ax_ref.contour([[0, 1, 0], [1, 2, 1], [0, 1, 0]])\n+\n+    try:\n+        cs_test.set_paths(cs_ref.get_paths())  # Should raise an error due to different path lengths\n+    except ValueError as e:\n+        print(\"Caught expected ValueError:\", e)\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths_transformation(fig_test, fig_ref):\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+    original_paths = ax_test.contour([[0, 1], [1, 2]]).get_paths()\n+    transformed_paths = [path.transformed(ax_test.transAxes) for path in original_paths]\n+\n+    # Apply transformation and set paths\n+    cs_transformed = ax_ref.contour([[0.5, 1.5], [1.5, 2.5]])\n+    cs_transformed.set_paths(transformed_paths)\n+\n def test_contour_Nlevels():\n     # A scalar levels arg or kwarg should trigger auto level generation.\n     # https://github.com/matplotlib/matplotlib/issues/11913\n",
  "mwaskom__seaborn-3069": "",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..4bb911f 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -244,6 +244,13 @@ def test_default_static_max_age(app):\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n \n+def test_empty_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"\", __name__)\n+\n+import pytest\n+import flask\n+\n def test_templates_list(test_apps):\n     from blueprintapp import app\n \n",
  "psf__requests-1142": "",
  "psf__requests-1724": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex e1a79e6..cfad704 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -321,6 +321,11 @@ class Session(SessionRedirectMixin):\n             cookies = cookies,\n             hooks = hooks,\n         )\n+\n+        # Ensure method is str type to avoid unicode issues in Python 2.7\n+        if isinstance(method, unicode):\n+            method = str(method)\n+            \n         prep = self.prepare_request(req)\n \n         # Add param cookies to session cookies\n",
  "psf__requests-1766": "",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..34d57cf 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,6 +81,9 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://.example.com'),  # Test case for invalid URL with leading dot in hostname\n+            (InvalidURL, 'http://...'),  # Test case for only dots as hostname\n+            (InvalidURL, 'http://example..com'),  # Test case for double dots in hostname\n         ))\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..c21c952 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2308,8 +2308,27 @@ class TestAsCompatibleData:\n         orig = Variable(dims=(\"x\"), data=array, attrs={\"foo\": \"bar\"})\n         assert isinstance(orig._data, CustomIndexable)\n \n+def test_setitem_preserves_custom_objects():\n+    import numpy as np\n+    from xarray import Variable\n \n-def test_raise_no_warning_for_nan_in_binary_ops():\n+    class HasValues:\n+        values = 5\n+\n+    # Create a Variable with dtype=object\n+    obj_array = Variable(dims=(\"dim_0\",), data=[None])\n+\n+    # Assign a custom object with a `values` property\n+    obj_array[{'dim_0': 0}] = HasValues()\n+\n+    # Check if the assignment preserves the custom object\n+    assert isinstance(obj_array.data[0], HasValues)\n+\n+    # Assign a set to ensure normal object assignment works\n+    obj_array[{'dim_0': 0}] = set()\n+\n+    # Check the set is preserved\n+    assert isinstance(obj_array.data[0], set)\n     with pytest.warns(None) as record:\n         Variable(\"x\", [1, 2, np.NaN]) > 0\n     assert len(record) == 0\n",
  "pydata__xarray-3095": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex d6a4400..e5a80e4 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -2107,7 +2107,22 @@ class TestDataset:\n \n         assert_identical(ds.coords['a'], expected_orig)\n \n-    def test_copy_with_data_errors(self):\n+    def test_copy_unicode_indices(self):\n+        # Test to ensure unicode indices are not cast to object on deep copy\n+        ds = xr.Dataset(\n+            coords={'x': xr.IndexVariable('x', np.array(['foo'], dtype='<U3'))},\n+            data_vars={'z': ('x', ['baz'])}\n+        )\n+        \n+        # Perform a deep copy\n+        ds_copy = ds.copy(deep=True)\n+        \n+        # Check that the dtype of the coordinate is unchanged\n+        assert ds_copy.coords['x'].dtype == '<U3'\n+        assert ds_copy.coords['x'].data.item() == 'foo'\n+        \n+        # Also check that the data_vars are not affected\n+        assert ds_copy['z'].data[0] == 'baz'\n         orig = create_test_data()\n         new_var1 = np.arange(orig['var1'].size).reshape(orig['var1'].shape)\n         with raises_regex(ValueError, 'Data must be dict-like'):\n",
  "pydata__xarray-3151": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 026dec9..b23d26b 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -571,6 +571,21 @@ class TestCombineAuto:\n         with raises_regex(ValueError, 'Every dimension needs a coordinate'):\n             combine_by_coords(objs)\n \n+        def test_non_monotonic_identical_coords(self):\n+            # Check non-monotonic identical coordinates don't raise ValueError\n+            # when combining datasets\n+            ycoord = ['a', 'c', 'b']\n+            data = np.random.rand(7, 3)\n+\n+            ds1 = Dataset(data_vars=dict(data=(['x', 'y'], data[:3, :])),\n+                          coords=dict(x=[1, 2, 3], y=ycoord))\n+            ds2 = Dataset(data_vars=dict(data=(['x', 'y'], data[3:, :])),\n+                          coords=dict(x=[4, 5, 6, 7], y=ycoord))\n+            expected = Dataset(data_vars=dict(data=(['x', 'y'], data)),\n+                               coords=dict(x=[1, 2, 3, 4, 5, 6, 7], y=ycoord))\n+            actual = combine_by_coords((ds1, ds2))\n+            assert_identical(expected, actual)\n+\n         def test_empty_input(self):\n             assert_identical(Dataset(), combine_by_coords([]))\n \n",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..dc09335 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2310,7 +2310,13 @@ class TestDataArray:\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n \n-    def test_reduce_keep_attrs(self):\n+    def test_quantile_keep_attrs(self):\n+        # Create a DataArray with some attributes\n+        da = DataArray([0, 0], dims=\"x\", attrs={'units': 'K'})\n+        # Compute the quantile with keep_attrs=True\n+        out = da.quantile(0.9, dim='x', keep_attrs=True)\n+        # Check if the output DataArray retains the attributes\n+        assert out.attrs == da.attrs\n         # Test dropped attrs\n         vm = self.va.mean()\n         assert len(vm.attrs) == 0\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..5c193c0 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,8 +1,10 @@\n+\n import numpy as np\n import pytest\n \n import xarray as xr\n from xarray.core import dtypes, merge\n+from xarray.testing import assert_identical\n \n from . import raises_regex\n from .test_dataset import create_test_data\n@@ -159,6 +161,30 @@ class TestMergeMethod:\n         with raises_regex(ValueError, \"should be coordinates or not\"):\n             data.merge(data.reset_coords())\n \n+    def test_merge_dataarray(self):\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+\n+        # Simple merge: Dataset with DataArray\n+        expected = xr.merge([ds, da])\n+        assert_identical(ds.merge(da), expected)\n+\n+        # Test with different dimensions in DataArray\n+        ds2 = xr.Dataset({\"a\": (\"x\", [0])})\n+        da2 = xr.DataArray(data=[1, 2], dims=\"x\", name=\"b\")\n+        expected2 = xr.merge([ds2, da2])\n+        assert_identical(ds2.merge(da2), expected2)\n+\n+        # Test with existing variable in Dataset\n+        ds3 = xr.Dataset({\"a\": (\"x\", [0, 1]), \"b\": (\"x\", [2, 3])})\n+        da3 = xr.DataArray(data=[4, 5], dims=\"x\", name=\"b\")\n+        expected3 = xr.Dataset({\"a\": (\"x\", [0, 1]), \"b\": (\"x\", [4, 5])})\n+        assert_identical(ds3.merge(da3, compat=\"override\"), expected3)\n+\n+        # Test with conflicting DataArray and Dataset variable\n+        with pytest.raises(xr.MergeError):\n+            ds3.merge(da3)\n+\n     def test_merge_broadcast_equals(self):\n         ds1 = xr.Dataset({\"x\": 0})\n         ds2 = xr.Dataset({\"x\": (\"y\", [0, 0])})\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "diff --git a/xarray/tests/test_duck_array_ops.py b/xarray/tests/test_duck_array_ops.py\nindex 0c63f0f..99a4f70 100644\n--- a/xarray/tests/test_duck_array_ops.py\n+++ b/xarray/tests/test_duck_array_ops.py\n@@ -604,6 +604,30 @@ def test_min_count_dataset(func):\n     assert_allclose(actual, expected)\n \n \n+@pytest.mark.parametrize(\"dtype\", [float, int, np.float32, np.bool_])\n+@pytest.mark.parametrize(\"dask\", [False, True])\n+@pytest.mark.parametrize(\"func\", [\"sum\", \"prod\"])\n+def test_multiple_dims_with_min_count(dtype, dask, func):\n+    if dask and not has_dask:\n+        pytest.skip(\"requires dask\")\n+    da = construct_dataarray(3, dtype, contains_nan=True, dask=dask)\n+    min_count = 5\n+\n+    # Apply sum or prod over multiple dimensions with min_count\n+    actual = getattr(da, func)(dim=(\"x\", \"y\", \"z\"), skipna=True, min_count=min_count)\n+    \n+    # As a workaround, compute expected result by applying sum/prod over each dimension separately\n+    # and using min_count over the whole dataset\n+    da_reduced = da.dropna(dim='x', how='all').dropna(dim='y', how='all').dropna(dim='z', how='all')\n+    valid_count = da_reduced.notnull().sum().item()\n+    expected = getattr(da_reduced, func)(dim=(\"x\", \"y\", \"z\"), skipna=True)\n+\n+    if valid_count < min_count:\n+        expected = np.nan\n+\n+    assert_allclose(actual, expected)\n+    assert_dask_array(actual, dask)\n+\n @pytest.mark.parametrize(\"dtype\", [float, int, np.float32, np.bool_])\n @pytest.mark.parametrize(\"dask\", [False, True])\n @pytest.mark.parametrize(\"func\", [\"sum\", \"prod\"])\n",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..224903d 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -109,6 +109,28 @@ class TestMergeFunction:\n             expected.attrs = expected_attrs\n             assert actual.identical(expected)\n \n+    def test_merge_attrs_override_copy(self):\n+        ds1 = xr.Dataset(attrs={\"x\": 0})\n+        ds2 = xr.Dataset(attrs={\"x\": 1})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"x\"] = 2\n+        assert ds1.attrs[\"x\"] == 0\n+        assert ds2.attrs[\"x\"] == 1\n+        assert ds3.attrs[\"x\"] == 2\n+\n+    def test_merge_attrs_override_copy_multiple_attrs(self):\n+        ds1 = xr.Dataset(attrs={\"x\": 0, \"y\": 1})\n+        ds2 = xr.Dataset(attrs={\"x\": 1, \"z\": 2})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"x\"] = 2\n+        ds3.attrs[\"y\"] = 3\n+        assert ds1.attrs[\"x\"] == 0\n+        assert ds1.attrs[\"y\"] == 1\n+        assert ds2.attrs[\"x\"] == 1\n+        assert \"z\" in ds2.attrs\n+        assert ds3.attrs[\"x\"] == 2\n+        assert ds3.attrs[\"y\"] == 3\n+\n     def test_merge_dicts_simple(self):\n         actual = xr.merge([{\"foo\": 0}, {\"bar\": \"one\"}, {\"baz\": 3.5}])\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..126cfa9 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1921,6 +1921,26 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n+def test_where_attrs() -> None:\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+\n+    # Test with keep_attrs=True\n+    actual = xr.where(cond, x, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected, actual)\n+\n+    # Test with keep_attrs=False\n+    actual = xr.where(cond, x, y, keep_attrs=False)\n+    expected = xr.DataArray([1, 0], dims=\"x\")\n+    assert_identical(expected, actual)\n+\n+    # Test with keep_attrs not specified (default behavior)\n+    actual = xr.where(cond, x, y)\n+    expected = xr.DataArray([1, 0], dims=\"x\")\n+    assert_identical(expected, actual)\n+\n \n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n",
  "pydata__xarray-4695": "",
  "pydata__xarray-4966": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex 2dbb0b4..25388a5 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -9,6 +9,7 @@ from xarray.coding import variables\n from xarray.conventions import decode_cf_variable, encode_cf_variable\n \n from . import assert_allclose, assert_equal, assert_identical, requires_dask\n+import numpy as np\n \n with suppress(ImportError):\n     import dask.array as da\n",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..cc95802 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1928,6 +1928,17 @@ def test_where_attrs() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n     assert_identical(expected, actual)\n \n+def test_where_scalar_with_keep_attrs() -> None:\n+    cond = xr.DataArray([True, False, True], dims=\"x\", attrs={\"attr\": \"condition\"})\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={})\n+    assert_identical(expected, actual)\n+\n+    x = xr.DataArray([10, 20, 30], dims=\"x\", attrs={\"attr\": \"x_values\"})\n+    actual_with_attrs = xr.where(cond, x, 0, keep_attrs=True)\n+    expected_with_attrs = xr.DataArray([10, 0, 30], dims=\"x\", attrs={\"attr\": \"x_values\"})\n+    assert_identical(expected_with_attrs, actual_with_attrs)\n+\n \n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n",
  "pydata__xarray-6599": "",
  "pydata__xarray-6721": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex cab9007..ba05ea4 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -220,7 +220,25 @@ class InaccessibleVariableDataStore(backends.InMemoryDataStore):\n         return {k: lazy_inaccessible(k, v) for k, v in self._variables.items()}\n \n \n+import pytest\n+import xarray as xr\n+import dask.array as da\n+from xarray.backends.zarr import ZarrBackendEntrypoint\n+from xarray.testing import assert_chunks_equal\n+\n class TestDataset:\n+    def test_zarr_chunks_property(self):\n+        url = \"https://ncsa.osn.xsede.org/Pangeo/pangeo-forge/swot_adac/FESOM/surf/fma.zarr\"\n+        with xr.open_dataset(url, engine='zarr') as ds:\n+            # Check if accessing chunks does not load the entire dataset into memory\n+            chunks = ds.chunks\n+            assert isinstance(chunks, dict), \"Chunks should be a dictionary.\"\n+            assert all(isinstance(key, str) for key in chunks.keys()), \"Chunks keys should be strings.\"\n+            assert all(isinstance(val, tuple) for val in chunks.values()), \"Chunks values should be tuples.\"\n+            # Ensure dataset variables have Dask arrays with expected chunks\n+            for var in ds.variables:\n+                if isinstance(ds[var].data, da.Array):\n+                    assert_chunks_equal(ds[var].chunks, ds.chunks[var])\n     def test_repr(self) -> None:\n         data = create_test_data(seed=123)\n         data.attrs[\"foo\"] = \"bar\"\n",
  "pydata__xarray-6744": "diff --git a/xarray/tests/test_rolling.py b/xarray/tests/test_rolling.py\nindex 0a9ef75..f14b5d6 100644\n--- a/xarray/tests/test_rolling.py\n+++ b/xarray/tests/test_rolling.py\n@@ -49,7 +49,26 @@ class TestDataArrayRolling:\n                     expected.values[expected.values.nonzero()],\n                 )\n \n-    @pytest.mark.parametrize(\"da\", (1,), indirect=True)\n+    @pytest.mark.parametrize(\"da\", (1, 2), indirect=True)\n+    @pytest.mark.parametrize(\"center\", [True, False])\n+    def test_rolling_iter_manual_center(self, da, center) -> None:\n+        size = 3\n+        rolling_obj = da.rolling(time=size, center=center)\n+        rolling_obj_manual_means = [window.mean() for _, window in rolling_obj]\n+\n+        np_means = []\n+        for i in range(len(da['time'])):\n+            if center:\n+                start = max(0, i - size // 2)\n+                stop = min(len(da['time']), i + size // 2 + 1)\n+            else:\n+                start = max(0, i - size + 1)\n+                stop = i + 1\n+            window = da.isel(time=slice(start, stop)).mean()\n+            np_means.append(window)\n+\n+        for actual, expected in zip(rolling_obj_manual_means, np_means):\n+            assert_array_equal(actual.values, expected.values)\n     def test_rolling_repr(self, da) -> None:\n         rolling_obj = da.rolling(time=7)\n         assert repr(rolling_obj) == \"DataArrayRolling [time->7]\"\n",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "diff --git a/xarray/tests/test_indexes.py b/xarray/tests/test_indexes.py\nindex fa8bd84..175e3e4 100644\n--- a/xarray/tests/test_indexes.py\n+++ b/xarray/tests/test_indexes.py\n@@ -688,7 +688,22 @@ def test_safe_cast_to_index_cftimeindex():\n         assert isinstance(actual, type(expected))\n \n \n-# Test that datetime.datetime objects are never used in a CFTimeIndex\n+import pytest\n+import xarray as xr\n+import numpy as np\n+\n+@pytest.mark.parametrize(\"dtype\", [\"int32\", \"float32\", \"int64\", \"float64\"])\n+def test_restore_dtype_on_multiindexes(dtype: str) -> None:\n+    foo = xr.Dataset(coords={\"bar\": (\"bar\", np.array([0, 1], dtype=dtype))})\n+    foo = foo.stack(baz=(\"bar\",))\n+    assert str(foo[\"bar\"].values.dtype) == dtype\n+\n+def test_stack_preserves_dtype_with_multiple_coords():\n+    ds = xr.Dataset(coords={\"a\": np.array([0, 1], dtype=\"int32\"),\n+                            \"b\": np.array([2, 3], dtype=\"float32\")})\n+    stacked = ds.stack(c=(\"a\", \"b\"))\n+    assert stacked[\"a\"].values.dtype == np.dtype(\"int32\")\n+    assert stacked[\"b\"].values.dtype == np.dtype(\"float32\")\n @requires_cftime\n def test_safe_cast_to_index_datetime_datetime():\n     dates = [datetime(1, 1, day) for day in range(1, 20)]\n@@ -696,4 +711,4 @@ def test_safe_cast_to_index_datetime_datetime():\n     expected = pd.Index(dates)\n     actual = safe_cast_to_index(np.array(dates))\n     assert_array_equal(expected, actual)\n-    assert isinstance(actual, pd.Index)\n+    assert isinstance(actual, pd.Index)\n",
  "pylint-dev__pylint-4970": "diff --git a/tests/checkers/unittest_similar.py b/tests/checkers/unittest_similar.py\nindex 97cd4d0..92d5811 100644\n--- a/tests/checkers/unittest_similar.py\n+++ b/tests/checkers/unittest_similar.py\n@@ -493,12 +493,47 @@ def test_get_map_data() -> None:\n             sim.append_stream(source_fname, stream)\n         # The map bit, can you tell? ;)\n         data.extend(sim.get_map_data())\n+import pytest\n+from contextlib import redirect_stdout\n+from io import StringIO\n+from pylint.checkers.similar import Run\n+\n+SIMILAR1 = \"similar_code_1.py\"\n+SIMILAR2 = \"similar_code_2.py\"\n+\n+def test_set_duplicate_lines_to_zero() -> None:\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        Run([\"--duplicates=0\", SIMILAR1, SIMILAR2])\n+    assert ex.value.code == 0\n+    assert output.getvalue() == \"\"\n+\n+def test_set_duplicate_lines_to_default() -> None:\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        Run([\"--duplicates=5\", SIMILAR1, SIMILAR2])\n+    assert ex.value.code == 0\n+    # Assuming some output is expected when min-similarity-lines is set to 5\n+    assert \"Similar lines\" in output.getvalue()\n \n-    assert len(expected_linelists) == len(data)\n+def test_with_non_existent_files() -> None:\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        Run([\"--duplicates=0\", \"non_existent_file.py\"])\n+    assert ex.value.code == 1\n+    assert \"No such file or directory\" in output.getvalue()\n+\n+def test_ignore_comments_option() -> None:\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        Run([\"--duplicates=10\", \"--ignore-comments\", SIMILAR1, SIMILAR2])\n+    assert ex.value.code == 0\n+    # Validate if comments were ignored as expected\n+    assert \"Similar lines\" in output.getvalue()\n     for source_fname, expected_lines, lineset_obj in zip(\n         source_streams, expected_linelists, data\n     ):\n         assert source_fname == lineset_obj.name\n         # There doesn't seem to be a faster way of doing this, yet.\n         lines = (linespec.text for linespec in lineset_obj.stripped_lines)\n-        assert tuple(expected_lines) == tuple(lines)\n+        assert tuple(expected_lines) == tuple(lines)\n",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..64023d4 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -93,10 +93,23 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     output = capsys.readouterr()\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n+from pytest import CaptureFixture, raises\n+from pylint.lint.run import Run\n+from pylint.testutils.constants import EMPTY_MODULE\n \n-def test_unknown_py_version(capsys: CaptureFixture) -> None:\n+def test_short_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the -v flag.\"\"\"\n+    Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n+def test_long_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the --verbose flag.\"\"\"\n+    Run([str(EMPTY_MODULE), \"--verbose\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex d5ccd91..6646444 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -864,6 +864,51 @@ def test_by_module_statement_value(initialized_linter: PyLinter) -> None:\n         assert module_stats[\"statement\"] == linter2.stats.statement\n \n \n+import pytest\n+import os\n+from pylint.lint import Run\n+from os.path import join\n+\n+REGRTEST_DATA_DIR = os.path.join(os.path.dirname(__file__), \"regrtest_data\")\n+\n+@pytest.mark.parametrize(\n+    \"ignore_parameter,ignore_parameter_value\",\n+    [\n+        (\"--ignore\", \"ignored_subdirectory\"),\n+        (\"--ignore-patterns\", \"ignored_.*\"),\n+        (\"--ignore-paths\", \".*ignored_subdirectory.*\"),\n+    ],\n+)\n+def test_recursive_ignore(ignore_parameter, ignore_parameter_value) -> None:\n+    run = Run(\n+        [\n+            \"--recursive=y\",\n+            ignore_parameter,\n+            ignore_parameter_value,\n+            join(REGRTEST_DATA_DIR, \"directory\"),\n+        ],\n+        exit=False,\n+    )\n+\n+    linted_files = run.linter._iterate_file_descrs(\n+        tuple(run.linter._discover_files([join(REGRTEST_DATA_DIR, \"directory\")]))\n+    )\n+    linted_file_paths = [file_item.filepath for file_item in linted_files]\n+\n+    ignored_file = os.path.abspath(\n+        join(REGRTEST_DATA_DIR, \"directory\", \"ignored_subdirectory\", \"failing.py\")\n+    )\n+    assert ignored_file not in linted_file_paths\n+\n+    for regrtest_data_module in (\n+        (\"directory\", \"subdirectory\", \"subsubdirectory\", \"module.py\"),\n+        (\"directory\", \"subdirectory\", \"module.py\"),\n+        (\"directory\", \"package\", \"module.py\"),\n+        (\"directory\", \"package\", \"subpackage\", \"module.py\"),\n+    ):\n+        module = os.path.abspath(join(REGRTEST_DATA_DIR, *regrtest_data_module))\n+        assert module in linted_file_paths\n+\n def test_import_sibling_module_from_namespace(initialized_linter: PyLinter) -> None:\n     \"\"\"If the parent directory above `namespace` is on sys.path, ensure that\n     modules under `namespace` can import each other without raising `import-error`.\"\"\"\n",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..872cfa9 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1329,8 +1329,26 @@ class TestRunTC:\n                     [\".\", \"--recursive=y\"],\n                     code=0,\n                 )\n-\n-    def test_regression_recursive_current_dir(self):\n+    \n+    def test_ignore_paths_with_recursive_option(self):\n+        \"\"\"Tests that ignore-paths are respected when using --recursive=y.\"\"\"\n+        with _test_sys_path():\n+            # Adjust sys.path to avoid interference from regrtest_data\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\"))\n+                self._runtest(\n+                    [\n+                        \"directory\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^directory/ignored_subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n             # astroid to believe that directory is a package.\n",
  "pylint-dev__pylint-7277": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9f95f7b..b89d742 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -751,7 +751,18 @@ a.py:1:4: E0001: Parsing failed: 'invalid syntax (<unknown>, line 1)' (syntax-er\n             \"/usr/local/lib/python3.9/lib-dynload\",\n             \"/usr/local/lib/python3.9/site-packages\",\n         ]\n-        with _test_sys_path(), patch(\"os.getcwd\") as mock_getcwd:\n+from copy import copy\n+from unittest.mock import patch\n+\n+def test_modify_sys_path():\n+    default_paths = [\n+        \"/usr/local/lib/python39.zip\",\n+        \"/usr/local/lib/python3.9\",\n+        \"/usr/local/lib/python3.9/lib-dynload\",\n+        \"/usr/local/lib/python3.9/site-packages\",\n+    ]\n+\n+    with _test_sys_path(), patch(\"os.getcwd\") as mock_getcwd:\n             mock_getcwd.return_value = cwd\n             paths = [cwd, *default_paths]\n             sys.path = copy(paths)\n@@ -759,7 +770,27 @@ a.py:1:4: E0001: Parsing failed: 'invalid syntax (<unknown>, line 1)' (syntax-er\n                 modify_sys_path()\n             assert sys.path == paths[1:]\n \n-            paths = [cwd, cwd, *default_paths]\n+            # Add more scenarios to thoroughly test modify_sys_path behavior\n+            paths = [\"\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:], \"Failed to remove empty string from sys.path\"\n+\n+            paths = [\".\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:], \"Failed to remove '.' from sys.path\"\n+\n+            paths = [\"/do_not_remove\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths, \"Incorrect removal of element from sys.path\"\n+\n+            # Verify behavior when the first path is the current working directory\n+            paths = [cwd, *default_paths]\n             sys.path = copy(paths)\n             with _test_environ_pythonpath(\".\"):\n                 modify_sys_path()\n",
  "pytest-dev__pytest-10051": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex 26c4c15..f219987 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -160,6 +160,8 @@ def logging_during_setup_and_teardown(caplog):\n     assert [x.message for x in caplog.get_records(\"teardown\")] == [\"a_teardown_log\"]\n \n \n+import logging\n+\n def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardown):\n     assert not caplog.records\n     assert not caplog.get_records(\"call\")\n@@ -172,6 +174,28 @@ def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardow\n     assert set(caplog._item.stash[caplog_records_key]) == {\"setup\", \"call\"}\n \n \n+def test_caplog_get_records_and_clear_consistency(caplog):\n+    def verify_consistency():\n+        assert caplog.get_records(\"call\") == caplog.records\n+\n+    verify_consistency()\n+    logging.warning(\"test log entry\")\n+    verify_consistency()\n+    caplog.clear()\n+    verify_consistency()  # This assertion should pass if the issue is fixed\n+\n+    # After clearing, no logs should be present\n+    assert not caplog.get_records(\"call\")\n+    assert not caplog.records\n+\n+    # Log something new and verify it appears\n+    logging.info(\"new log entry\")\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"new log entry\"]\n+\n+    # Verify the records have been updated\n+    assert [x.message for x in caplog.records] == [\"new log entry\"]\n+\n+\n def test_ini_controls_global_log_level(pytester: Pytester) -> None:\n     pytester.makepyfile(\n         \"\"\"\n",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_debugging.py b/testing/test_debugging.py\nindex 912abd7..45c9afa 100644\n--- a/testing/test_debugging.py\n+++ b/testing/test_debugging.py\n@@ -191,8 +191,32 @@ class TestPDB:\n         child.expect_exact(\"= 1 skipped in\")\n         child.sendeof()\n         self.flush(child)\n+    def test_pdb_unittest_skip_class_teardown(self, pytester: Pytester) -> None:\n+        p1 = pytester.makepyfile(\n+            \"\"\"\n+            import unittest\n+            @unittest.skip(\"Skip this class completely\")\n+            class MyTestCase(unittest.TestCase):\n+                def setUp(self):\n+                    print(\"setUp\")\n+                \n+                def test_one(self):\n+                    pass\n \n-    def test_pdb_print_captured_stdout_and_stderr(self, pytester: Pytester) -> None:\n+                def tearDown(self):\n+                    print(\"tearDown\")\n+\n+            def test_skipped_tearDown():\n+                print(\"Test should be skipped\")\n+            \"\"\"\n+        )\n+        result = pytester.runpytest(\"-s --pdb\", p1)\n+        result.stdout.fnmatch_lines([\n+            \"*Skip this class completely*\",\n+            \"*1 skipped in*\"\n+        ])\n+        assert \"setUp\" not in result.stdout.str()\n+        assert \"tearDown\" not in result.stdout.str()\n         p1 = pytester.makepyfile(\n             \"\"\"\n             def test_1():\n",
  "pytest-dev__pytest-5262": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 1f092b0..55051f7 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -1051,6 +1051,24 @@ class TestFDCapture(object):\n             cap.done()\n             pytest.raises(AttributeError, cap.suspend)\n \n+def test_capfd_sys_stdout_mode(capfd):\n+    # Check that 'b' is not in sys.stdout.mode which implies non-binary mode\n+    assert 'b' not in sys.stdout.mode\n+\n+def test_encoded_file_write_str():\n+    # Test that EncodedFile can write a string without error\n+    buffer = open('/dev/null', 'w')\n+    encoded_file = _pytest.capture.EncodedFile(buffer, 'utf-8')\n+    encoded_file.write(\"test string\")\n+    buffer.close()\n+\n+def test_encoded_file_write_bytes_raises():\n+    # Test that EncodedFile raises TypeError when writing bytes in Python 3\n+    buffer = open('/dev/null', 'w')\n+    encoded_file = _pytest.capture.EncodedFile(buffer, 'utf-8')\n+    with pytest.raises(TypeError, match=\"write() argument must be str, not bytes\"):\n+        encoded_file.write(b\"test bytes\")\n+    buffer.close()\n \n @contextlib.contextmanager\n def saved_fd(fd):\n",
  "pytest-dev__pytest-5631": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex e422b03..15e4983 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -7,6 +7,8 @@ import py\n \n import pytest\n from _pytest.main import _in_venv\n+from unittest.mock import patch\n+import numpy as np\n from _pytest.main import ExitCode\n from _pytest.main import Session\n \n@@ -46,7 +48,29 @@ class TestCollector:\n             assert [1, 2, 3] != fn\n             assert modcol != fn\n \n-    def test_getparent(self, testdir):\n+    def test_mock_sentinel_check_against_numpy_array(self, testdir):\n+        \"\"\"Test patching with numpy array to ensure no ValueError is raised.\"\"\"\n+        testdir.makepyfile(\n+            dummy_module=\"\"\"\n+            import numpy as np\n+            class NumpyHolder:\n+                ARRAY = np.array([-5.5, 3.0])\n+            \"\"\"\n+        )\n+        testdir.makepyfile(\n+            \"\"\"\n+            from unittest.mock import patch\n+            import dummy_module\n+            import numpy as np\n+            \n+            class TestPatchArray:\n+                @patch(\"dummy_module.NumpyHolder.ARRAY\", new=np.array([1.0, 2.0, 3.0]))\n+                def test_patch_array(self):\n+                    assert (dummy_module.NumpyHolder.ARRAY == np.array([1.0, 2.0, 3.0])).all()\n+            \"\"\"\n+        )\n+        reprec = testdir.inline_run()\n+        reprec.assertoutcome(passed=1)\n         modcol = testdir.getmodulecol(\n             \"\"\"\n             class TestClass(object):\n",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..fb35a8f 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -116,8 +116,27 @@ class TestPaste(object):\n             monkeypatch.setattr(urllib, \"urlopen\", mocked)\n         else:\n             import urllib.request\n+    def test_create_new_paste_text_lexer(self, pastebin, monkeypatch):\n+        # Mocking urlopen to prevent real HTTP requests\n+        def mocked(request):\n+            class FakeResponse:\n+                def read(self):\n+                    return b'<a href=\"/raw/fakeid\">link</a>'\n+\n+            return FakeResponse()\n+\n+        monkeypatch.setattr(urllib.request, \"urlopen\", mocked)\n+        result = pastebin.create_new_paste(b\"full-paste-contents\")\n+        assert result == \"https://bpaste.net/show/fakeid\"\n+\n+        import urllib.parse as urlparse\n+        from urllib.parse import parse_qs\n \n-            monkeypatch.setattr(urllib.request, \"urlopen\", mocked)\n+        url, data = mocked.call_args[0][0], mocked.call_args[1]['data']\n+        query_params = parse_qs(urlparse.urlparse(data.decode('ascii')).query)\n+        assert query_params['lexer'] == ['text']\n+        assert query_params['code'] == ['full-paste-contents']\n+        assert query_params['expiry'] == ['1week']\n         return calls\n \n     def test_create_new_paste(self, pastebin, mocked_urlopen):\n@@ -130,4 +149,4 @@ class TestPaste(object):\n         assert url == \"https://bpaste.net\"\n         assert \"lexer=%s\" % lexer in data.decode()\n         assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n",
  "pytest-dev__pytest-6202": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex fb6b260..dd90f14 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -702,6 +702,46 @@ class Test_genitems:\n         assert items[1].name == \"testmethod_one\"\n         assert items[2].name == \"testmethod_one\"\n \n+    def test_parametrize_dot_square_bracket(self, testdir):\n+        # Create a test file with a parameterized test using '.['\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+\n+            @pytest.mark.parametrize(\"arg\", [\".[\"])\n+            def test_with_dot_square(arg):\n+                assert arg == \".[\"\n+            \"\"\"\n+        )\n+        items, reprec = testdir.inline_genitems(p)\n+        assert len(items) == 1\n+        assert items[0].name == \"test_with_dot_square[.[]\"\n+\n+        # Additionally, test the getmodpath method to ensure it's correct\n+        assert items[0].getmodpath() == \"test_with_dot_square[.[]\"\n+\n+    def test_inheritance_parametrize(self, testdir):\n+        # Test to ensure parametrize works correctly in inherited test classes\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+\n+            class BaseTest:\n+                @pytest.mark.parametrize(\"arg\", [\".[\"])\n+                def test_inherited(self, arg):\n+                    assert arg == \".[\"\n+            \n+            class InheritedTest(BaseTest):\n+                pass\n+            \"\"\"\n+        )\n+        items, reprec = testdir.inline_genitems(p)\n+        assert len(items) == 1\n+        assert items[0].name == \"test_inherited[.[]\"\n+\n+        # Confirm that the getmodpath method returns the correct value\n+        assert items[0].getmodpath() == \"InheritedTest.test_inherited[.[]\"\n+\n         # let's also test getmodpath here\n         assert items[0].getmodpath() == \"testone\"\n         assert items[1].getmodpath() == \"TestX.testmethod_one\"\n",
  "pytest-dev__pytest-7205": "diff --git a/testing/test_setuponly.py b/testing/test_setuponly.py\nindex 8211d39..5133d50 100644\n--- a/testing/test_setuponly.py\n+++ b/testing/test_setuponly.py\n@@ -1,3 +1,4 @@\n+\n import pytest\n from _pytest.config import ExitCode\n \n@@ -200,6 +201,23 @@ def test_show_fixtures_with_parameter_ids_function(testdir, mode):\n \n     result.stdout.fnmatch_lines([\"*SETUP    F foobar?FOO?\", \"*SETUP    F foobar?BAR?\"])\n \n+def test_show_fixture_action_with_bytes(testdir):\n+    # Test for BytesWarning when using --setup-show with bytes parameter\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n+\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n+\n \n def test_dynamic_fixture_request(testdir):\n     p = testdir.makepyfile(\n",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..7331466 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -607,6 +607,23 @@ class TestSkip:\n         result = testdir.runpytest(\"-rs\")\n         result.stdout.fnmatch_lines([\"*unconditional skip*\", \"*1 skipped*\"])\n \n+    def test_runxfail_with_skip(self, testdir):\n+        \"\"\"Test that --runxfail does not affect the skip location reporting.\"\"\"\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+\n+            @pytest.mark.skip(reason=\"Skip for testing\")\n+            def test_skip_location():\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(\"-rs\", \"--runxfail\")\n+        result.stdout.fnmatch_lines([\n+            \"SKIPPED [1] test_runxfail_with_skip.py:3: Skip for testing\",\n+            \"*1 skipped*\"\n+        ])\n+\n     def test_skip_with_reason(self, testdir):\n         testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..35ce09f 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,9 +1,11 @@\n+\n import sys\n \n import pytest\n from _pytest.runner import runtestprotocol\n from _pytest.skipping import evaluate_skip_marks\n from _pytest.skipping import evaluate_xfail_marks\n+from _pytest.pytester import Testdir\n from _pytest.skipping import pytest_runtest_setup\n \n \n@@ -397,7 +399,30 @@ class TestXFail:\n         result = testdir.runpytest(p, \"-rxX\")\n         result.stdout.fnmatch_lines([\"*XFAIL*test_this*\", \"*XPASS*test_that*\"])\n \n-    def test_dynamic_xfail_no_run(self, testdir):\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n         p = testdir.makepyfile(\n             \"\"\"\n             import pytest\n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..7e45d5b 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -513,6 +513,11 @@ class TestCaptureFixture:\n             \"\"\"\n         )\n         reprec.assertoutcome(passed=1)\n+    @pytest.mark.parametrize(\"newline_type\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_cafd_preserves_newlines(self, capfd, newline_type):\n+        print(\"test\", end=newline_type)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(newline_type)\n \n     def test_capfdbinary(self, testdir):\n         reprec = testdir.inline_runsource(\n",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..52a4c97 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import pytest\n@@ -50,6 +51,57 @@ def test_change_level_undo(testdir):\n     result.stdout.no_fnmatch_line(\"*log from test2*\")\n \n \n+def test_preserve_log_level_across_tests(testdir):\n+    \"\"\"Ensure that 'set_level' is undone even if the test is skipped or fails.\"\"\"\n+    \n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+        import pytest\n+\n+        def test_fail(caplog):\n+            caplog.set_level(logging.WARNING)\n+            logging.info(\"This should not appear\")\n+            assert False  # Test fails\n+\n+        @pytest.mark.skip(reason=\"Testing skip\")\n+        def test_skip(caplog):\n+            caplog.set_level(logging.DEBUG)\n+            logging.debug(\"This won't run\")\n+\n+        def test_check_level_after_fail(caplog):\n+            assert caplog.handler.level == 0\n+\n+        def test_check_level_after_skip(caplog):\n+            assert caplog.handler.level == 0\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(failed=1, skipped=1, passed=2)\n+\n+def test_multiple_levels_in_single_test(testdir):\n+    \"\"\"Test setting multiple log levels within a single test\"\"\"\n+    \n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test_multiple_levels(caplog):\n+            caplog.set_level(logging.WARNING)\n+            assert caplog.handler.level == 30  # WARNING level\n+            caplog.set_level(logging.ERROR)\n+            assert caplog.handler.level == 40  # ERROR level\n+            caplog.set_level(logging.CRITICAL)\n+            assert caplog.handler.level == 50  # CRITICAL level\n+\n+        def test_check_level_restoration(caplog):\n+            assert caplog.handler.level == 0\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+...\n def test_with_statement(caplog):\n     with caplog.at_level(logging.INFO):\n         logger.debug(\"handler DEBUG level\")\n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..8e9889e 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,3 +1,4 @@\n+\n import os\n import pprint\n import sys\n@@ -9,7 +10,7 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n-from _pytest.pytester import Testdir\n+from _pytest.pytester import Testdir, Pytester\n \n \n class TestCollector:\n@@ -1175,6 +1176,28 @@ def test_collect_symlink_out_of_tree(testdir):\n             \"test_real.py::test_nodeid PASSED\"\n         ]\n     )\n+\n+def test_collect_symlink_dir_with_subdirs(pytester: Pytester) -> None:\n+    \"\"\"A symlinked directory containing subdirectories is collected.\"\"\"\n+    dir = pytester.mkdir(\"dir\")\n+    subdir = dir.mkdir(\"subdir\")\n+    dir.joinpath(\"test_it.py\").write_text(\"def test_it(): pass\", \"utf-8\")\n+    subdir.joinpath(\"test_sub.py\").write_text(\"def test_sub(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_dir\").symlink_to(dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=3)\n+\n+\n+def test_collect_symlink_cyclic(pytester: Pytester) -> None:\n+    \"\"\"A symlinked directory with a cyclic symlink is collected without infinite loop.\"\"\"\n+    dir = pytester.mkdir(\"dir\")\n+    dir.joinpath(\"test_it.py\").write_text(\"def test_it(): pass\", \"utf-8\")\n+    cyclic_symlink = dir.joinpath(\"cyclic\")\n+    cyclic_symlink.symlink_to(dir)\n+    pytester.path.joinpath(\"symlink_dir\").symlink_to(dir)\n+    result = pytester.runpytest()\n+    # We expect it to run only the tests in 'dir', without looping into 'cyclic'.\n+    result.assert_outcomes(passed=2)\n     assert result.ret == 0\n \n \n",
  "pytest-dev__pytest-8399": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 2c720b0..3889694 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -301,8 +301,34 @@ def test_setup_setUpClass(pytester: Pytester) -> None:\n     reprec = pytester.inline_run(testpath)\n     reprec.assertoutcome(passed=3)\n \n+def test_fixtures_unittest_setUpClass_visibility(pytester: Pytester) -> None:\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+\n+        class MyTestCase(unittest.TestCase):\n+            @classmethod\n+            def setUpClass(cls):\n+                pass\n \n-def test_setup_class(pytester: Pytester) -> None:\n+            def test_func1(self):\n+                pass\n+\n+            @classmethod\n+            def tearDownClass(cls):\n+                pass\n+        \"\"\"\n+    )\n+    \n+    # Check that the setUpClass fixture is not shown without -v\n+    result = pytester.runpytest(\"--fixtures\")\n+    assert result.ret == 0\n+    result.stdout.no_fnmatch_line(\"*unittest_setUpClass_fixture_MyTestCase*\")\n+\n+    # Check that the setUpClass fixture is shown with -v\n+    result = pytester.runpytest(\"--fixtures\", \"-v\")\n+    assert result.ret == 0\n+    result.stdout.fnmatch_lines([\"*unittest_setUpClass_fixture_MyTestCase*\"])\n     testpath = pytester.makepyfile(\n         \"\"\"\n         import unittest\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..c3e918f 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -597,8 +597,39 @@ def test_ridgecv_store_cv_values():\n     r.fit(x, y)\n     assert_equal(r.cv_values_.shape, (n_samples, n_responses, n_alphas))\n \n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    import numpy as np\n+    from sklearn.linear_model import RidgeClassifierCV\n+    from sklearn.utils import assert_array_equal\n \n-def test_ridgecv_sample_weight():\n+    rng = np.random.RandomState(42)\n+\n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-.8, -1.0],\n+                  [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+\n+    n_samples = x.shape[0]\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+    # with len(y.shape) == 1\n+    n_targets = 1\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n+\n+    # with len(y.shape) == 2\n+    y = np.array([[1, 1, 1, -1, -1],\n+                  [1, -1, 1, -1, 1],\n+                  [-1, -1, 1, -1, -1]]).transpose()\n+    n_targets = y.shape[1]\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n+\n+    # Ensure that the best alpha is chosen\n+    assert r.alpha_ in alphas\n     rng = np.random.RandomState(0)\n     alphas = (0.1, 1.0, 10.0)\n \n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..9752834 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -184,7 +184,16 @@ def test_int_overflow_mutual_info_score():\n     assert_all_finite(mutual_info_score(x.ravel(), y.ravel()))\n \n \n-def test_entropy():\n+def test_fowlkes_mallows_score_large_numbers():\n+    # Create large input clusters to test for potential overflow\n+    labels_true = [0] * 100000 + [1] * 100000\n+    labels_pred = [0] * 50000 + [1] * 50000 + [0] * 50000 + [1] * 50000\n+\n+    # Ensure that fowlkes_mallows_score does not produce a RuntimeWarning\n+    # and returns a valid finite result\n+    score = fowlkes_mallows_score(labels_true, labels_pred)\n+    assert_all_finite(score)\n+    assert score >= 0.0\n     ent = entropy([0, 0, 42.])\n     assert_almost_equal(ent, 0.6365141, 5)\n     assert_almost_equal(entropy([]), 1)\n",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..dee6453 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -558,8 +558,27 @@ def test_feature_names():\n     for idx, name in enumerate(feature_names):\n         assert_equal(idx, cv.vocabulary_.get(name))\n \n+def test_countvectorizer_with_custom_vocabulary():\n+    vocab = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    cv = CountVectorizer(vocabulary=vocab)\n \n-def test_vectorizer_max_features():\n+    # Test if get_feature_names works without prior fitting\n+    feature_names = cv.get_feature_names()\n+    assert_array_equal(vocab, feature_names)\n+\n+    # Test if transform works with the pre-defined vocabulary\n+    corpus = [\n+        'This is the first document.',\n+        'This is the second second document.',\n+        'And the third one.',\n+        'Is this the first document?',\n+    ]\n+\n+    X = cv.transform(corpus)\n+    \n+    # Ensure transformation is successful and vocabulary_ is set\n+    assert_equal(X.shape, (4, 9))\n+    assert_true(hasattr(cv, \"vocabulary_\"))\n     vec_factories = (\n         CountVectorizer,\n         TfidfVectorizer,\n",
  "scikit-learn__scikit-learn-11310": "diff --git a/sklearn/model_selection/tests/test_search.py b/sklearn/model_selection/tests/test_search.py\nindex 0b1d5f9..2b16b6f 100644\n--- a/sklearn/model_selection/tests/test_search.py\n+++ b/sklearn/model_selection/tests/test_search.py\n@@ -1149,6 +1149,8 @@ def test_search_cv_results_none_param():\n                            [0, None])\n \n \n+from sklearn.utils.testing import assert_true, assert_greater_equal\n+\n @ignore_warnings()\n def test_search_cv_timing():\n     svc = LinearSVC(random_state=0)\n@@ -1159,7 +1161,14 @@ def test_search_cv_timing():\n     gs = GridSearchCV(svc, {'C': [0, 1]}, cv=2, error_score=0)\n     rs = RandomizedSearchCV(svc, {'C': [0, 1]}, cv=2, error_score=0, n_iter=2)\n \n+    from sklearn.utils.testing import assert_true, assert_greater_equal\n+\n     for search in (gs, rs):\n+        # Check if refit_time_ attribute is present\n+        assert_true(hasattr(search, \"refit_time_\"), \"refit_time_ attribute is missing\")\n+        # Check if refit_time_ is a non-negative float (i.e., the timing makes sense)\n+        assert_true(isinstance(search.refit_time_, float), \"refit_time_ is not a float\")\n+        assert_greater_equal(search.refit_time_, 0, \"refit_time_ is negative\")\n         search.fit(X, y)\n         for key in ['mean_fit_time', 'std_fit_time']:\n             # NOTE The precision of time.time in windows is not high\n",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..59b72fd 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -21,6 +21,12 @@ from sklearn.utils.testing import assert_true\n from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import ignore_warnings\n from sklearn.utils.testing import assert_warns_message\n+from sklearn.utils._testing import assert_array_almost_equal\n+from sklearn.metrics.scorer import get_scorer\n+from sklearn.linear_model.logistic import _log_reg_scoring_path\n+from sklearn.preprocessing import LabelBinarizer\n+from sklearn.datasets import make_classification\n+import numpy as np\n \n from sklearn.exceptions import ConvergenceWarning\n from sklearn.exceptions import ChangedBehaviorWarning\n",
  "scikit-learn__scikit-learn-12585": "diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 4752f9c..826b2d3 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -167,7 +167,22 @@ def test_clone_sparse_matrices():\n         assert_array_equal(clf.empty.toarray(), clf_cloned.empty.toarray())\n \n \n-def test_repr():\n+def test_clone_estimator_types():\n+    # Check that clone works for parameters that are types rather than\n+    # instances\n+    from sklearn.base import clone, BaseEstimator\n+\n+    class MyEstimator(BaseEstimator):\n+        def __init__(self, empty=None):\n+            self.empty = empty\n+\n+    # Test cloning of an estimator with a parameter that is a class\n+    clf = MyEstimator(empty=MyEstimator)\n+    clf2 = clone(clf)\n+\n+    assert clf.empty is clf2.empty\n+    assert isinstance(clf2.empty, type)\n+    assert issubclass(clf2.empty, BaseEstimator)\n     # Smoke test the repr of the base estimator.\n     my_estimator = MyEstimator()\n     repr(my_estimator)\n",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..79b3f53 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -17,6 +17,8 @@ from sklearn.utils.testing import ignore_warnings\n from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import TempMemmap\n from sklearn.exceptions import ConvergenceWarning\n+from sklearn.linear_model import LassoLarsIC\n+import numpy as np\n from sklearn import linear_model, datasets\n from sklearn.linear_model.least_angle import _lars_path_residues\n \n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..f90c45f 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -488,9 +488,19 @@ def test_shuffle_stratifiedkfold():\n     y = [0] * 20 + [1] * 20\n     kf0 = StratifiedKFold(5, shuffle=True, random_state=0)\n     kf1 = StratifiedKFold(5, shuffle=True, random_state=1)\n-    for (_, test0), (_, test1) in zip(kf0.split(X_40, y),\n-                                      kf1.split(X_40, y)):\n-        assert_not_equal(set(test0), set(test1))\n+    test_sets_0 = [set(test) for _, test in kf0.split(X_40, y)]\n+    test_sets_1 = [set(test) for _, test in kf1.split(X_40, y)]\n+    \n+    for test0, test1 in zip(test_sets_0, test_sets_1):\n+        assert_not_equal(test0, test1)\n+\n+    # Ensure that different random states lead to different test sets when shuffle=True\n+    assert_not_equal(sorted(test_sets_0), sorted(test_sets_1))\n+\n+    # Check that the same random state does not lead to the same test sets\n+    kf_same = StratifiedKFold(5, shuffle=True, random_state=0)\n+    test_sets_same = [set(test) for _, test in kf_same.split(X_40, y)]\n+    assert_equal(sorted(test_sets_0), sorted(test_sets_same))\n     check_cv_coverage(kf0, X_40, y, groups=None, expected_n_splits=5)\n \n \n",
  "scikit-learn__scikit-learn-13135": "diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py\nindex a18a1c5..fe9d492 100644\n--- a/sklearn/preprocessing/tests/test_discretization.py\n+++ b/sklearn/preprocessing/tests/test_discretization.py\n@@ -184,12 +184,17 @@ def test_invalid_strategy_option():\n                          est.fit, X)\n \n \n+from sklearn.utils._testing import assert_array_equal\n+import pytest\n+import numpy as np\n+from sklearn.preprocessing import KBinsDiscretizer\n+\n @pytest.mark.parametrize(\n-    'strategy, expected_2bins, expected_3bins',\n-    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2]),\n-     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2]),\n-     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2])])\n-def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n+    'strategy, expected_2bins, expected_3bins, expected_5bins',\n+    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2], [0, 0, 1, 1, 4, 4]),\n+     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2], [0, 0, 1, 2, 3, 4]),\n+     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2], [0, 1, 2, 3, 4, 4])])\n+def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins, expected_5bins):\n     X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n \n     # with 2 bins\n",
  "scikit-learn__scikit-learn-13142": "",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..061d4ff 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -10,6 +11,8 @@ import pytest\n \n import numpy as np\n \n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n from sklearn.utils.testing import assert_array_equal\n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_raises\n",
  "scikit-learn__scikit-learn-13779": "",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..592ca0a 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -396,8 +396,36 @@ def test_export_text():\n     assert export_text(reg, decimals=1) == expected_report\n     assert export_text(reg, decimals=1, show_weights=True) == expected_report\n \n+def test_export_text_single_feature():\n+    # Test for a single feature in DecisionTreeClassifier\n+    X, y = load_iris(return_X_y=True)\n+    X = X[:, 0].reshape(-1, 1)  # Use only one feature\n \n-def test_plot_tree_entropy(pyplot):\n+    clf = DecisionTreeClassifier(random_state=0)\n+    clf.fit(X, y)\n+\n+    expected_report_clf = dedent(\"\"\"\n+    |--- sepal_length <= 5.45\n+    |   |--- class: 0\n+    |--- sepal_length >  5.45\n+    |   |--- class: 1\n+    \"\"\").lstrip()  # This is a rough expected output, it may vary based on the dataset split\n+\n+    try:\n+        export_text_clf = export_text(clf, feature_names=['sepal_length'])\n+        assert export_text_clf.startswith(\"|--- sepal_length\")\n+    except IndexError as e:\n+        assert False, f\"Unexpected IndexError for single feature in classifier: {e}\"\n+\n+    # Test for a single feature in DecisionTreeRegressor\n+    reg = DecisionTreeRegressor(random_state=0)\n+    reg.fit(X, y)\n+\n+    try:\n+        export_text_reg = export_text(reg, feature_names=['sepal_length'])\n+        assert export_text_reg.startswith(\"|--- sepal_length\")\n+    except IndexError as e:\n+        assert False, f\"Unexpected IndexError for single feature in regressor: {e}\"\n     # mostly smoke tests\n     # Check correctness of export_graphviz for criterion = entropy\n     clf = DecisionTreeClassifier(max_depth=3,\n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..1975a56 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1554,6 +1554,44 @@ def test_LogisticRegressionCV_no_refit(multi_class):\n     assert lrcv.coef_.shape == (n_classes, n_features)\n \n \n+@pytest.mark.parametrize('penalty', ('l2', 'elasticnet'))\n+@pytest.mark.parametrize('solver', ('liblinear', 'saga'))\n+def test_LogisticRegressionCV_no_refit_additional_cases(penalty, solver):\n+    # Additional test cases for LogisticRegressionCV with refit=False,\n+    # testing multiple penalties and solvers\n+\n+    n_classes = 2\n+    n_features = 10\n+    X, y = make_classification(n_samples=100, n_classes=n_classes,\n+                               n_informative=n_classes, n_features=n_features,\n+                               random_state=42)\n+\n+    Cs = np.logspace(-3, 3, 5)\n+    l1_ratios = np.linspace(0, 1, 3) if penalty == 'elasticnet' else None\n+\n+    lrcv = LogisticRegressionCV(penalty=penalty, Cs=Cs, solver=solver,\n+                                l1_ratios=l1_ratios, random_state=42,\n+                                multi_class='ovr', refit=False)\n+    lrcv.fit(X, y)\n+    \n+    assert lrcv.C_.shape == (n_classes,)\n+    if penalty == 'elasticnet':\n+        assert lrcv.l1_ratio_.shape == (n_classes,)\n+    assert lrcv.coef_.shape == (n_classes, n_features)\n+\n+    # Additional checks for different solvers\n+    for solver in ['liblinear', 'saga']:\n+        lrcv = LogisticRegressionCV(penalty=penalty, Cs=Cs, solver=solver,\n+                                    l1_ratios=l1_ratios, random_state=42,\n+                                    multi_class='ovr', refit=False)\n+        lrcv.fit(X, y)\n+        assert lrcv.C_.shape == (n_classes,)\n+        if penalty == 'elasticnet':\n+            assert lrcv.l1_ratio_.shape == (n_classes,)\n+        assert lrcv.coef_.shape == (n_classes, n_features)\n+\n+\n+@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial'))\n def test_LogisticRegressionCV_elasticnet_attribute_shapes():\n     # Make sure the shapes of scores_ and coefs_paths_ attributes are correct\n     # when using elasticnet (added one dimension for l1_ratios)\n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/tests/test_show_versions.py b/sklearn/utils/tests/test_show_versions.py\nindex fa39255..c56629d 100644\n--- a/sklearn/utils/tests/test_show_versions.py\n+++ b/sklearn/utils/tests/test_show_versions.py\n@@ -30,4 +30,13 @@ def test_show_versions_with_blas(capsys):\n     out, err = capsys.readouterr()\n     assert 'python' in out\n     assert 'numpy' in out\n-    assert 'BLAS' in out\n+    assert 'BLAS' in out\n+\n+def test_joblib_in_deps():\n+    deps_info = _get_deps_info()\n+    assert 'joblib' in deps_info\n+    show_versions()\n+    out, err = capsys.readouterr()\n+    assert 'python' in out\n+    assert 'numpy' in out\n+    assert 'BLAS' in out\n",
  "scikit-learn__scikit-learn-14496": "diff --git a/sklearn/cluster/tests/test_optics.py b/sklearn/cluster/tests/test_optics.py\nindex 6c9dac3..2802a34 100644\n--- a/sklearn/cluster/tests/test_optics.py\n+++ b/sklearn/cluster/tests/test_optics.py\n@@ -124,6 +124,30 @@ def test_extract_xi():\n                    xi=0.04).fit(X)\n     assert_array_equal(clust.labels_, expected_labels)\n \n+def test_float_min_samples():\n+    # Test with a small synthetic dataset\n+    rng = np.random.RandomState(42)\n+    X = rng.rand(10, 2)\n+\n+    # Expected behavior: should not raise an error and convert min_samples to an int\n+    clust = OPTICS(min_samples=0.1, min_cluster_size=0.08,\n+                   max_eps=20, cluster_method='xi', xi=0.4).fit(X)\n+\n+    # There should be no error, and the labels should be computed, even if they are trivial\n+    assert clust.labels_.shape[0] == X.shape[0]\n+\n+    # Test with a larger dataset\n+    X_large = rng.rand(1000, 2)\n+\n+    # Running OPTICS with float min_samples\n+    clust_large = OPTICS(min_samples=0.05, min_cluster_size=0.05,\n+                         max_eps=20, cluster_method='xi', xi=0.4).fit(X_large)\n+\n+    # Ensure that the number of labels matches the number of samples\n+    assert clust_large.labels_.shape[0] == X_large.shape[0]\n+\n+    # Check that the computed min_samples is an integer\n+    assert isinstance(clust_large.min_samples, int)\n \n def test_cluster_hierarchy_():\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-14710": "",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..6ffa586 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,7 +680,33 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n-def test_sparse_precomputed():\n+import numpy as np\n+from scipy import sparse\n+from sklearn import svm\n+\n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for the mentioned issue related to ZeroDivisionError\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n+def test_sparse_fit_support_vectors_not_empty():\n+    # A test to ensure no error when support_vectors_ is not empty\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [1, 0, 0, 0],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert model.support_vectors_.data.size > 0\n+    assert model.dual_coef_.data.size > 0\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n     try:\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..edbc820 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -97,8 +97,33 @@ def test_strip_accents():\n     expected = 'this is a test'\n     assert strip_accents_unicode(a) == expected\n \n+def test_strip_accents_unicode_nfkd():\n+    from sklearn.feature_extraction.text import strip_accents_unicode\n \n-def test_to_ascii():\n+    # Test case for a string that is already in NFKD form\n+    a = \"n\\u0303\"\n+    expected = \"n\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Test case for multiple combining marks on one character\n+    a = \"o\\u0308\\u0304\"\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Test case for combining marks by themselves\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Test with string containing multiple characters with different accents\n+    a = \"e\\u0301e\\u0300e\\u0303\"\n+    expected = \"eee\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Test with a string that is not in NFKD form to confirm behavior consistency\n+    a = \"\\u00f1\"  # \u00f1\n+    expected = \"n\"\n+    assert strip_accents_unicode(a) == expected\n     # check some classical latin accentuated symbols\n     a = '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb'\n     expected = 'aaaaaaceeee'\n",
  "scikit-learn__scikit-learn-25102": "",
  "scikit-learn__scikit-learn-25232": "",
  "scikit-learn__scikit-learn-25931": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3714d1a..5770996 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -330,7 +330,54 @@ def test_iforest_with_n_jobs_does_not_segfault():\n def test_base_estimator_property_deprecated():\n     X = np.array([[1, 2], [3, 4]])\n     y = np.array([1, 0])\n-    model = IsolationForest()\n+    import pandas as pd\n+    import numpy as np\n+    import pytest\n+    import warnings\n+    from sklearn.ensemble import IsolationForest\n+\n+    def test_iforest_preserve_feature_names():\n+        \"\"\"Check that feature names are preserved when contamination is not \"auto\".\n+\n+        Feature names are required for consistency checks during scoring.\n+\n+        Non-regression test for Issue #25844\n+        \"\"\"\n+        pd = pytest.importorskip(\"pandas\")\n+        rng = np.random.RandomState(0)\n+\n+        X = pd.DataFrame(data=rng.randn(4, 1), columns=[\"a\"])\n+        model = IsolationForest(random_state=0, contamination=0.05)\n+\n+        with warnings.catch_warnings():\n+            warnings.simplefilter(\"error\", UserWarning)\n+            model.fit(X)\n+\n+    def test_iforest_multiple_columns():\n+        \"\"\"Test IsolationForest with multiple feature columns.\"\"\"\n+        X = pd.DataFrame(data=np.random.randn(4, 2), columns=[\"a\", \"b\"])\n+        model = IsolationForest(random_state=0, contamination=0.05)\n+\n+        with warnings.catch_warnings():\n+            warnings.simplefilter(\"error\", UserWarning)\n+            model.fit(X)\n+\n+    def test_iforest_ndarray():\n+        \"\"\"Test IsolationForest with ndarray to ensure warnings are raised.\"\"\"\n+        X = np.random.randn(4, 1)\n+        model = IsolationForest(random_state=0, contamination=0.05)\n+\n+        with pytest.warns(UserWarning, match=\"X does not have valid feature names\"):\n+            model.fit(X)\n+\n+    def test_iforest_auto_contamination():\n+        \"\"\"Test IsolationForest with contamination='auto'.\"\"\"\n+        X = pd.DataFrame(data=np.random.randn(4, 1), columns=[\"a\"])\n+        model = IsolationForest(random_state=0, contamination='auto')\n+\n+        with warnings.catch_warnings():\n+            warnings.simplefilter(\"error\", UserWarning)\n+            model.fit(X)\n     model.fit(X, y)\n \n     warn_msg = (\n@@ -338,4 +385,4 @@ def test_base_estimator_property_deprecated():\n         \"will be removed in 1.4. Use `estimator_` instead.\"\n     )\n     with pytest.warns(FutureWarning, match=warn_msg):\n-        model.base_estimator_\n+        model.base_estimator_\n",
  "scikit-learn__scikit-learn-25973": "",
  "scikit-learn__scikit-learn-26323": "",
  "scikit-learn__scikit-learn-9288": "diff --git a/sklearn/cluster/tests/test_k_means.py b/sklearn/cluster/tests/test_k_means.py\nindex abeeff0..0ef6707 100644\n--- a/sklearn/cluster/tests/test_k_means.py\n+++ b/sklearn/cluster/tests/test_k_means.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for K-means\"\"\"\n import sys\n \n@@ -944,6 +945,17 @@ def test_k_means_empty_cluster_relocated():\n     assert len(set(km.labels_)) == 2\n     assert_allclose(km.cluster_centers_, [[-1], [1]])\n \n+def test_result_of_kmeans_equal_in_diff_n_jobs_inertia():\n+    # Verify that the inertia is the same for different n_jobs settings\n+    rnd = np.random.RandomState(0)\n+    X, _ = make_blobs(n_samples=1000, centers=10, n_features=2, random_state=0)\n+\n+    inertia_1 = KMeans(n_clusters=10, random_state=0, n_jobs=1).fit(X).inertia_\n+    inertia_2 = KMeans(n_clusters=10, random_state=0, n_jobs=2).fit(X).inertia_\n+    inertia_3 = KMeans(n_clusters=10, random_state=0, n_jobs=3).fit(X).inertia_\n+\n+    assert_almost_equal(inertia_1, inertia_2, decimal=5)\n+    assert_almost_equal(inertia_1, inertia_3, decimal=5)\n \n def test_minibatch_kmeans_partial_fit_int_data():\n     # Issue GH #14314\n",
  "sphinx-doc__sphinx-10323": "diff --git a/tests/test_directive_code.py b/tests/test_directive_code.py\nindex 949c70e..9a232c3 100644\n--- a/tests/test_directive_code.py\n+++ b/tests/test_directive_code.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the code-block directive.\"\"\"\n \n import os\n@@ -250,6 +251,31 @@ def test_LiteralIncludeReader_dedent(literal_inc_path):\n                        \"    pass\\n\"\n                        \"\\n\")\n \n+@pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n+def test_LiteralIncludeReader_dedent_prepend_indentation(literal_inc_path):\n+    # Test case for issue where prepend does not maintain indentation\n+    # Setup the options to use dedent and prepend with indentation\n+    options = {\n+        'lines': '9-13',  # Select lines containing the <plugin> block\n+        'dedent': 2,\n+        'prepend': '      <plugin>'\n+    }\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+\n+    # Expected content with correct indentation\n+    expected_content = (\n+        \"      <plugin>\\n\"\n+        \"  <groupId>com.github.ekryd.sortpom</groupId>\\n\"\n+        \"  <artifactId>sortpom-maven-plugin</artifactId>\\n\"\n+        \"  <version>2.15.0</version>\\n\"\n+        \"  <configuration>\\n\"\n+        \"    <verifyFailOn>strict</verifyFailOn>\\n\"\n+        \"  </configuration>\\n\"\n+        \"    </plugin>\\n\"\n+    )\n+    \n+    assert content == expected_content\n \n @pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n def test_LiteralIncludeReader_tabwidth(testroot):\n",
  "sphinx-doc__sphinx-10449": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 82ec43a..cfcc673 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1023,6 +1023,16 @@ def test_autodoc_typehints_description_no_undoc_doc_rtype(app):\n             '   Return type:\\n'\n             '      None\\n' == context)\n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\"})\n+def test_autodoc_typehints_description_with_no_return_type_for_class(app):\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: target.typehints.Square\\n',\n+        encoding='utf8'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n+    assert 'Return type:' not in context\n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\"})\n",
  "sphinx-doc__sphinx-10466": "diff --git a/tests/test_build_gettext.py b/tests/test_build_gettext.py\nindex a6fc946..c7608e2 100644\n--- a/tests/test_build_gettext.py\n+++ b/tests/test_build_gettext.py\n@@ -1,9 +1,27 @@\n+\n+def test_Catalog_no_duplicate_locations():\n+    catalog = Catalog()\n+    catalog.add('duplicate_test', MsgOrigin('/path/to/duplicate', 1))\n+    catalog.add('duplicate_test', MsgOrigin('/path/to/duplicate', 1))\n+    catalog.add('duplicate_test', MsgOrigin('/path/to/duplicate', 2))\n+    catalog.add('duplicate_test', MsgOrigin('/path/to/another', 1))\n+    \n+    assert len(list(catalog)) == 1\n+    \n+    msg, = list(catalog)\n+    assert msg.text == 'duplicate_test'\n+    assert msg.locations == [('/path/to/duplicate', 1),\n+                             ('/path/to/duplicate', 2),\n+                             ('/path/to/another', 1)]\n+    assert len(msg.locations) == len(set(msg.locations))  # Ensure all locations are unique\n+\n \"\"\"Test the build process with gettext builder with the test root.\"\"\"\n \n import gettext\n import os\n import re\n import subprocess\n+from sphinx.builders.gettext import Catalog, MsgOrigin\n from subprocess import PIPE, CalledProcessError\n \n import pytest\n",
  "sphinx-doc__sphinx-10673": "",
  "sphinx-doc__sphinx-7440": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 975a00f..3533036 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -146,6 +146,33 @@ def test_glossary(app):\n     assert (\"term2\", \"term2\", \"term\", \"index\", \"term-term2\", -1) in objects\n     assert (\"term3\", \"term3\", \"term\", \"index\", \"term-term3\", -1) in objects\n     assert (\"term4\", \"term4\", \"term\", \"index\", \"term-term4\", -1) in objects\n+    \n+    # Additional test for case sensitivity\n+    text_case_sensitive = (\".. glossary::\\n\"\n+                           \"\\n\"\n+                           \"   MySQL\\n\"\n+                           \"       A relational database management system.\\n\"\n+                           \"\\n\"\n+                           \"   mysql\\n\"\n+                           \"       A command-line tool for interacting with MySQL.\\n\")\n+\n+    # doctree\n+    doctree_case_sensitive = restructuredtext.parse(app, text_case_sensitive)\n+    assert_node(doctree_case_sensitive, (\n+        [glossary, definition_list, ([definition_list_item, ([term, (\"MySQL\", index)],\n+                                                             definition)],\n+                                     [definition_list_item, ([term, (\"mysql\", index)],\n+                                                             definition)])],\n+    ))\n+    assert_node(doctree_case_sensitive[0][0][0][0][1],\n+                entries=[(\"single\", \"MySQL\", \"term-MySQL\", \"main\", None)])\n+    assert_node(doctree_case_sensitive[0][0][1][0][1],\n+                entries=[(\"single\", \"mysql\", \"term-mysql\", \"main\", None)])\n+\n+    # index\n+    objects_case_sensitive = list(app.env.get_domain(\"std\").get_objects())\n+    assert (\"MySQL\", \"MySQL\", \"term\", \"index\", \"term-MySQL\", -1) in objects_case_sensitive\n+    assert (\"mysql\", \"mysql\", \"term\", \"index\", \"term-mysql\", -1) in objects_case_sensitive\n \n \n def test_glossary_warning(app, status, warning):\n",
  "sphinx-doc__sphinx-7757": "",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..2a3ac02 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -52,7 +53,20 @@ def test_MockObject():\n     assert isinstance(obj.other_method(), SubClass)\n \n \n-def test_mock():\n+def test_generic_typed_class():\n+    # Define a TypeVar\n+    T = TypeVar('T')\n+\n+    # Create a subclass using a generic type\n+    class SubClass2(mock.SomeClass[T]):\n+        \"\"\"docstring of SubClass2\"\"\"\n+\n+    # Create an instance of the subclass\n+    obj2 = SubClass2()\n+\n+    # Assertions to verify the behavior\n+    assert SubClass2.__doc__ == \"docstring of SubClass2\"\n+    assert isinstance(obj2, SubClass2)\n     modname = 'sphinx.unknown'\n     submodule = modname + '.submodule'\n     assert modname not in sys.modules\n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_napoleon.py b/tests/test_ext_napoleon.py\nindex 0676869..2f5b716 100644\n--- a/tests/test_ext_napoleon.py\n+++ b/tests/test_ext_napoleon.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_napoleon\n     ~~~~~~~~~~~~~\n@@ -185,6 +186,20 @@ class SkipMemberTest(TestCase):\n                         SampleError.__special_doc__, False,\n                         'napoleon_include_special_with_doc')\n \n+    def test_class_decorated_init_doc(self):\n+        \"\"\"\n+        Test that a decorated __init__ method is documented when napoleon_include_init_with_doc is True.\n+        \"\"\"\n+        class SampleClassWithDecoratedInit:\n+            @simple_decorator\n+            def __init__(self):\n+                \"\"\"This is a decorated __init__ method.\"\"\"\n+                pass\n+\n+        self.assertSkip('class', '__init__',\n+                        SampleClassWithDecoratedInit.__init__, False,\n+                        'napoleon_include_init_with_doc')\n+\n     def test_exception_special_undoc(self):\n         self.assertSkip('exception', '__special_undoc__',\n                         SampleError.__special_undoc__, True,\n",
  "sphinx-doc__sphinx-7985": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 5b1b2ed..6f19fbf 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -85,6 +85,19 @@ def test_defaults_json(app, status, warning):\n         rowsby[\"https://www.google.com/image.png\"][\"info\"]\n \n \n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n+def test_local_links(app, status, warning):\n+    app.builder.build_all()\n+\n+    assert (app.outdir / 'output.txt').exists()\n+    content = (app.outdir / 'output.txt').read_text()\n+\n+    print(content)\n+    # looking for local files should work and fail accordingly\n+    assert \"[local] conf.py\" in content\n+    assert \"[broken] path/to/notfound\" in content\n+    assert len(content.splitlines()) == 6\n+\n @pytest.mark.sphinx(\n     'linkcheck', testroot='linkcheck', freshenv=True,\n     confoverrides={'linkcheck_anchors_ignore': [\"^!\", \"^top$\"],\n",
  "sphinx-doc__sphinx-8035": "diff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex ad1d950..ae49ce2 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_private_members\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -11,6 +12,7 @@\n import pytest\n \n from test_ext_autodoc import do_autodoc\n+import pytest\n \n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n",
  "sphinx-doc__sphinx-8120": "diff --git a/tests/test_intl.py b/tests/test_intl.py\nindex 58339b1..cf815ae 100644\n--- a/tests/test_intl.py\n+++ b/tests/test_intl.py\n@@ -1286,6 +1286,39 @@ def test_image_glob_intl_using_figure_language_filename(app):\n                 candidates={'application/pdf': 'subdir/svgimg.pdf',\n                             'image/svg+xml': 'subdir/svgimg.svg'})\n \n+from babel.messages import pofile\n+from sphinx import locale\n+import pytest\n \n-def getwarning(warnings):\n-    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n+@pytest.mark.sphinx('html', testroot='basic', confoverrides={'language': 'da'})\n+def test_override_translation(make_app, app_params, sphinx_test_tempdir):\n+    # This test verifies that custom translations in 'sphinx.po' are used\n+    try:\n+        # Clear translators cache\n+        locale.translators.clear()\n+\n+        # Prepare message catalog (.po)\n+        locale_dir = sphinx_test_tempdir / 'basic' / 'locales' / 'da' / 'LC_MESSAGES'\n+        locale_dir.makedirs()\n+        with (locale_dir / 'sphinx.po').open('wb') as f:\n+            catalog = Catalog()\n+            # Add custom translations for testing\n+            catalog.add('Fig. %s', 'Foobar %s')\n+            catalog.add('Listing %s', 'Whatever %s')\n+            pofile.write_po(f, catalog)\n+\n+        # Construct application and convert .po file to .mo\n+        args, kwargs = app_params\n+        app = make_app(*args, **kwargs)\n+        assert (locale_dir / 'sphinx.mo').exists()\n+        assert app.translator.gettext('Fig. %s') == 'Foobar %s'\n+        assert app.translator.gettext('Listing %s') == 'Whatever %s'\n+\n+        app.build()\n+        content = (app.outdir / 'index.html').read_text()\n+        # Check if the custom translations appear in the output\n+        assert 'Foobar 1' in content\n+        assert 'Whatever 1' in content\n+    finally:\n+        locale.translators.clear()\n+    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n",
  "sphinx-doc__sphinx-8269": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 7842f56..84e0f06 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -107,6 +107,42 @@ def test_anchors_ignored(app, status, warning):\n     assert not content\n \n \n+import pytest\n+import http.server\n+import threading\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n+def test_reports_http_404_error(app, status, warning):\n+    server_thread = HttpServerThread(NotFoundHandler, daemon=True)\n+    server_thread.start()\n+    try:\n+        app.builder.build_all()\n+    finally:\n+        server_thread.terminate()\n+\n+    content = (app.outdir / 'output.txt').read_text()\n+    assert content == (\n+        \"index.rst:1: [broken] http://localhost:7777/#anchor: \"\n+        \"404 Client Error: Not Found for url: http://localhost:7777/\\n\"\n+    )\n+\n+class HttpServerThread(threading.Thread):\n+    def __init__(self, handler, *args, **kwargs):\n+        super().__init__(*args, **kwargs)\n+        self.server = http.server.HTTPServer((\"localhost\", 7777), handler)\n+\n+    def run(self):\n+        self.server.serve_forever(poll_interval=0.01)\n+\n+    def terminate(self):\n+        self.server.shutdown()\n+        self.server.server_close()\n+        self.join()\n+\n+class NotFoundHandler(http.server.BaseHTTPRequestHandler):\n+    def do_GET(self):\n+        self.send_error(404, \"Not Found\")\n+\n @pytest.mark.sphinx(\n     'linkcheck', testroot='linkcheck', freshenv=True,\n     confoverrides={'linkcheck_auth': [\n@@ -159,4 +195,11 @@ def test_linkcheck_request_headers(app, status, warning):\n                 assert headers[\"Accept\"] == \"text/html,application/xhtml+xml;q=0.9,*/*;q=0.8\"\n                 assert headers[\"X-Secret\"] == \"open sesami\"\n             else:\n-                assert headers[\"Accept\"] == \"text/html,application/xhtml+xml;q=0.9,*/*;q=0.8\"\n+                assert headers[\"Accept\"] == \"text/html,application/xhtml+xml;q=0.9,*/*;q=0.8\"\n+\n+\n+\n+\n+\n+\n+\n",
  "sphinx-doc__sphinx-8459": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex d1881df..a5cd9f6 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_configs\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -8,10 +9,51 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+@pytest.mark.skipif(sys.version_info < (3, 7), reason='python 3.7+ is required.')\n+@pytest.mark.sphinx('text', testroot='ext-autodoc', \n+                    srcdir='autodoc_typehints_description_and_type_aliases',\n+                    confoverrides={'autodoc_typehints': \"description\",\n+                                   'autodoc_type_aliases': {'JSONObject': 'types.JSONObject'}})\n+def test_autodoc_with_type_aliases_and_description(app: SphinxTestApp):\n+    (app.srcdir / 'types.py').write_text('''\n+from typing import Any, Dict\n+\n+JSONObject = Dict[str, Any]\n+\n+def sphinx_doc(data: JSONObject) -> JSONObject:\n+    \"\"\"Does it work.\n+\n+    Args:\n+        data: Does it args.\n+\n+    Returns:\n+        Does it work in return.\n+    \"\"\"\n+    return {}\n+''')\n+\n+    (app.srcdir / 'conf.py').write_text('''\n+autodoc_typehints = 'description'\n+autodoc_type_aliases = {\n+    'JSONObject': 'types.JSONObject',\n+}\n+''')\n+\n+    (app.srcdir / 'index.rst').write_text('.. autofunction:: types.sphinx_doc')\n+\n+    app.build()\n+    output = (app.outdir / 'index.txt').read_text()\n+    assert 'types.sphinx_doc(data)' in output\n+    assert 'data (types.JSONObject) -- Does it args.' in output\n+    assert 'Returns\\n   Does it work in return' in output\n+    assert 'Return type\\n   types.JSONObject' in output\n+\n import platform\n import sys\n \n import pytest\n+import sys\n+from sphinx.testing.util import SphinxTestApp\n \n from sphinx.testing import restructuredtext\n \n",
  "sphinx-doc__sphinx-8475": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 41632e7..fcf13a9 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -372,6 +372,55 @@ def test_connect_to_selfsigned_nonexistent_cert_file(app):\n     with https_server(OKHandler):\n         app.builder.build_all()\n \n+import pytest\n+import json\n+import http.server\n+from sphinx.testing.fixtures import app  # noqa: F401\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_TooManyRedirects_on_HEAD(app):\n+    class InfiniteRedirectOnHeadHandler(http.server.BaseHTTPRequestHandler):\n+        def do_HEAD(self):\n+            self.send_response(302, \"Found\")\n+            self.send_header(\"Location\", \"http://localhost:7777/\")\n+            self.end_headers()\n+\n+        def do_GET(self):\n+            self.send_response(200, \"OK\")\n+            self.end_headers()\n+            self.wfile.write(b\"ok\\n\")\n+\n+    with http_server(InfiniteRedirectOnHeadHandler):\n+        app.builder.build_all()\n+\n+    with open(app.outdir / 'output.json') as fp:\n+        content = json.load(fp)\n+    assert content == {\n+        \"code\": 0,\n+        \"status\": \"working\",\n+        \"filename\": \"index.rst\",\n+        \"lineno\": 1,\n+        \"uri\": \"http://localhost:7777/\",\n+        \"info\": \"\",\n+    }\n+\n+# Additional test case for TooManyRedirects without GET fallback\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_TooManyRedirects_no_GET_fallback(app):\n+    class InfiniteRedirectOnHeadHandler(http.server.BaseHTTPRequestHandler):\n+        def do_HEAD(self):\n+            self.send_response(302, \"Found\")\n+            self.send_header(\"Location\", \"http://localhost:7778/\")\n+            self.end_headers()\n+\n+        def do_GET(self):\n+            self.send_response(302, \"Found\")\n+            self.send_header(\"Location\", \"http://localhost:7778/\")\n+            self.end_headers()\n+\n+    with http_server(InfiniteRedirectOnHeadHandler):\n+        app.builder.build_all()\n+\n     with open(app.outdir / 'output.json') as fp:\n         content = json.load(fp)\n     assert content == {\n@@ -379,6 +428,6 @@ def test_connect_to_selfsigned_nonexistent_cert_file(app):\n         \"status\": \"broken\",\n         \"filename\": \"index.rst\",\n         \"lineno\": 1,\n-        \"uri\": \"https://localhost:7777/\",\n-        \"info\": \"Could not find a suitable TLS CA certificate bundle, invalid path: does/not/exist\",\n-    }\n+        \"uri\": \"http://localhost:7778/\",\n+        \"info\": \"Too many redirects\",\n+    }\n",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8721": "",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex 3c31d3d..f9a6e19 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -515,6 +515,15 @@ def test_dict_customtype():\n     # Type is unsortable, just check that it does not crash\n     assert \"<CustomType(2)>: 2\" in description\n \n+import enum\n+\n+def test_object_description_enum():\n+    class MyEnum(enum.Enum):\n+        ValueA = 10\n+        ValueB = 20\n+\n+    # Test that object_description provides a clean representation\n+    assert inspect.object_description(MyEnum.ValueA) == \"MyEnum.ValueA\"\n \n def test_getslots():\n     class Foo:\n",
  "sphinx-doc__sphinx-9320": "",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..285ce81 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -54,6 +54,7 @@ from sphinx.pycode import ast\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n     (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n+    (\"(1,)\", \"(1,)\"),                             # Tuple (single element)\n     (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n",
  "sphinx-doc__sphinx-9591": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 29731ea..bc6d666 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -845,9 +845,53 @@ def test_pyproperty(app):\n     assert domain.objects['Class.prop1'] == ('index', 'Class.prop1', 'property', False)\n     assert 'Class.prop2' in domain.objects\n     assert domain.objects['Class.prop2'] == ('index', 'Class.prop2', 'property', False)\n-\n-\n-def test_pydecorator_signature(app):\n+def test_pyproperty_with_cross_reference(app):\n+    # This test checks if the property's type annotations are correctly cross-referenced, as described in the issue.\n+    text = (\".. py:class:: Square\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: start\\n\"\n+            \"      :type: Point\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: width\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: height\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\"\n+            \"\\n\")\n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                                    [desc_name, \"Square\"])],\n+                                  [desc_content,\n+                                   addnodes.index,\n+                                   desc,\n+                                   addnodes.index,\n+                                   desc,\n+                                   addnodes.index,\n+                                   desc,\n+                                   addnodes.index,\n+                                   desc\n+                                  ])]))\n+    assert_node(doctree[1][1][0], addnodes.index,\n+                entries=[('single', 'start (Square attribute)', 'Square.start', '', None)])\n+    assert_node(doctree[1][1][1], ([desc_signature, ([desc_annotation, \"attribute \"],\n+                                                     [desc_name, \"start\"],\n+                                                     [desc_annotation, \": \",\n+                                                      pending_xref, \"Point\"])],\n+                                   [desc_content, ()]))\n+    assert_node(doctree[1][1][3], ([desc_signature, ([desc_annotation, \"property \"],\n+                                                     [desc_name, \"end\"],\n+                                                     [desc_annotation, \": \",\n+                                                      pending_xref, \"Point\"])],\n+                                   [desc_content, ()]))\n+    assert 'Square.start' in domain.objects\n+    assert domain.objects['Square.start'] == ('index', 'Square.start', 'attribute', False)\n+    assert 'Square.end' in domain.objects\n+    assert domain.objects['Square.end'] == ('index', 'Square.end', 'property', False)\n     text = \".. py:decorator:: deco\"\n     domain = app.env.get_domain('py')\n     doctree = restructuredtext.parse(app, text)\n",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..984f759 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -754,9 +754,10 @@ def test_pymethod_options(app):\n     assert 'Class.meth4' in domain.objects\n     assert domain.objects['Class.meth4'] == ('index', 'Class.meth4', 'method', False)\n \n+    # :property:\n     # :property:\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
  "sphinx-doc__sphinx-9711": "",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..71b67f6 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -236,6 +236,27 @@ def test_Point2D():\n     assert p2.distance(p3) == sqrt(17)/2\n \n \n+from sympy import sqrt\n+from sympy.geometry import Point, Point2D, Point3D\n+\n+def test_issue_11617():\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point2D(2, 0)\n+    assert p1.distance(p2) == sqrt(5)\n+\n+def test_distance_mixed_dimensions():\n+    # Test case where Point3D is (2, 0, 0) and Point2D is (1, 0)\n+    # Expected distance is sqrt((2-1)^2 + (0-0)^2 + (0-0)^2) = 1\n+    p3d = Point3D(2, 0, 0)\n+    p2d = Point2D(1, 0)\n+    assert p3d.distance(p2d) == 1\n+\n+    # Test case where Point2D is (1, 1) and Point3D is (1, 1, 0)\n+    # Expected distance is sqrt((1-1)^2 + (1-1)^2 + (0-0)^2) = 0\n+    p2d = Point2D(1, 1)\n+    p3d = Point3D(1, 1, 0)\n+    assert p2d.distance(p3d) == 0\n+\n def test_issue_9214():\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..3cb327b 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -741,7 +741,16 @@ def test_special_printers():\n     assert isinstance(func1(), mpi)\n     assert isinstance(func2(), mpi)\n \n-def test_true_false():\n+from sympy.utilities.lambdify import implemented_function\n+from sympy import Float\n+\n+def test_issue_12092():\n+    f = implemented_function('f', lambda x: x**2)\n+    g = implemented_function('g', lambda x: 2 * x)\n+    assert f(f(2)).evalf() == Float(16)\n+    assert g(g(2)).evalf() == Float(8)\n+    assert f(g(2)).evalf() == Float(16)\n+    assert g(f(2)).evalf() == Float(8)\n     # We want exact is comparison here, not just ==\n     assert lambdify([], true)() is True\n     assert lambdify([], false)() is False\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..c614140 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,8 +83,14 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n-\n-def test_Identity_doit():\n+def test_Identity_sum_issue():\n+    from sympy import Sum, Symbol, symbols, Identity\n+    n = Symbol('n', integer=True, positive=True)\n+    i, j = symbols('i j', integer=True)\n+    In = Identity(n)\n+    \n+    # Check that the total sum of elements in the n x n identity matrix is n\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..94fdf92 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -351,6 +351,15 @@ def test_args():\n     raises(ValueError, lambda: Permutation([1, 1, 0]))\n     raises(ValueError, lambda: Permutation([[1], [1, 2]]))\n     raises(ValueError, lambda: Permutation([4, 5], size=10))  # where are 0-3?\n+\n+    # Test non-disjoint cycles\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])  # Identity permutation\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([0, 2, 1])\n+    assert Permutation([[1, 2], [0, 1]]) == Permutation([1, 0, 2])\n+    assert Permutation([[0, 1, 2], [2, 0]]) == Permutation([0, 1, 2])\n+    assert Permutation([[1, 2, 3], [3, 1]]) == Permutation([0, 3, 1, 2])\n+    assert Permutation([[0, 1], [2, 3], [0, 1]]) == Permutation([0, 1, 3, 2])\n+    assert Permutation([[0, 1, 2], [0, 2, 1]]) == Permutation([0, 2, 1])\n     # but this is ok because cycles imply that only those listed moved\n     assert Permutation(4, 5) == Permutation([0, 1, 2, 3, 5, 4])\n \n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..0baa05a 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -490,7 +490,20 @@ def test_errors():\n         lambda: SparseMatrix(1, 2, [1, 2]) + SparseMatrix(2, 1, [2, 1]))\n \n \n-def test_len():\n+def test_hstack_vstack_zero_row_sparse():\n+    # Test hstack with zero rows in SparseMatrix\n+    M1 = SparseMatrix.zeros(0, 0)\n+    M2 = SparseMatrix.zeros(0, 1)\n+    M3 = SparseMatrix.zeros(0, 2)\n+    M4 = SparseMatrix.zeros(0, 3)\n+    assert SparseMatrix.hstack(M1, M2, M3, M4).shape == (0, 6)\n+\n+    # Test vstack with zero columns in SparseMatrix\n+    M1 = SparseMatrix.zeros(1, 0)\n+    M2 = SparseMatrix.zeros(2, 0)\n+    M3 = SparseMatrix.zeros(3, 0)\n+    M4 = SparseMatrix.zeros(0, 0)\n+    assert SparseMatrix.vstack(M1, M2, M3, M4).shape == (6, 0)\n     assert not SparseMatrix()\n     assert SparseMatrix() == SparseMatrix([])\n     assert SparseMatrix() == SparseMatrix([[]])\n",
  "sympy__sympy-13372": "diff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\nindex e95146a..28509eb 100644\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -170,8 +170,19 @@ def test_evalf_ramanujan():\n \n # Input that for various reasons have failed at some point\n \n+from sympy import Mul, Max, Symbol, NS\n \n def test_evalf_bugs():\n+    # Test case from issue 13076 to ensure the UnboundLocalError is resolved\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    assert NS(Mul(Max(0, y), x, evaluate=False).evalf()) == 'x*Max(0, y)'\n+    # Additional test cases to ensure different permutations are handled\n+    assert NS(Mul(x, Max(0, y), evaluate=False).evalf()) == 'x*Max(0, y)'\n+    assert NS(Mul(Max(0, y), evaluate=False).evalf()) == 'Max(0, y)'\n+    assert NS(Mul(x, evaluate=False).evalf()) == 'x'\n+    assert NS(Mul(Max(1, y), x, evaluate=False).evalf()) == 'x*Max(1, y)'\n+    assert NS(Mul(x, Max(1, y), evaluate=False).evalf()) == 'x*Max(1, y)'\n     assert NS(sin(1) + exp(-10**10), 10) == NS(sin(1), 10)\n     assert NS(exp(10**10) + sin(1), 10) == NS(exp(10**10), 10)\n     assert NS('log(1+1/10**50)', 20) == '1.0000000000000000000e-50'\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..20bda49 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -273,7 +273,21 @@ def test_coth():\n     assert coth(k*pi*I) == -cot(k*pi)*I\n \n \n-def test_coth_series():\n+def test_issue_coth_log_tan_subs():\n+    from sympy import coth, log, tan, Symbol\n+    \n+    x = Symbol('x')\n+    expr = coth(log(tan(x)))\n+    \n+    # Test cases for the specific integers mentioned in the issue\n+    test_values = [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]\n+    for value in test_values:\n+        try:\n+            result = expr.subs(x, value)\n+            print(f\"coth(log(tan({value}))) = {result}\")\n+        except Exception as e:\n+            print(f\"Failed for x = {value}: {e}\")\n+    assert True  # Ensure the test passes if no exceptions are raised\n     x = Symbol('x')\n     assert coth(x).series(x, 0, 8) == \\\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..d2e9093 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -181,6 +181,21 @@ def test_Complement():\n \n     assert (not 0 in S.Reals.intersect(S.Integers - FiniteSet(0)))\n \n+    # Test for issue described: mixture of symbols and numbers in Complement\n+    from sympy import FiniteSet, Interval, Complement, symbols\n+\n+    x, y = symbols('x y')\n+    assert Complement(FiniteSet(x, y, 2), Interval(-10, 10)) == \\\n+           Complement(FiniteSet(x, y), Interval(-10, 10))\n+    assert Complement(FiniteSet(x, y, -5, 0, 5), Interval(-10, 10)) == \\\n+           Complement(FiniteSet(x, y), Interval(-10, 10))\n+    assert Complement(FiniteSet(x, 1, 2, 3), Interval(0, 2)) == \\\n+           Complement(FiniteSet(x, 3), Interval(0, 2))\n+    assert Complement(FiniteSet(1, 2, 3, x), FiniteSet(1, 2, 3)) == \\\n+           FiniteSet(x)\n+    assert Complement(FiniteSet(1, 2, 3, x), S.EmptySet) == \\\n+           FiniteSet(1, 2, 3, x)\n+\n     assert S.EmptySet - S.Integers == S.EmptySet\n \n     assert (S.Integers - FiniteSet(0)) - FiniteSet(1) == S.Integers - FiniteSet(0, 1)\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..122f46d 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,6 +201,23 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n+def test_issue_13643_col_insert():\n+    from sympy import Matrix, eye, ones\n+\n+    M = eye(6)\n+    V = 2 * ones(6, 2)\n+    result = M.col_insert(3, V)\n+\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert result == expected\n+\n def test_extract():\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..29a17a8 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -677,8 +677,23 @@ def test_Poly_mul():\n     assert Poly(x, x) * 2 == Poly(2*x, x)\n     assert 2 * Poly(x, x) == Poly(2*x, x)\n \n-\n-def test_Poly_sqr():\n+def test_issue_13079():\n+    assert Poly(x)*x == Poly(x**2, x, domain='ZZ')\n+    assert x*Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert -2*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2)*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert Poly(x)*S(-2) == Poly(-2*x, x, domain='ZZ')\n+\n+    # Additional test cases\n+    assert Poly(x)*Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert Poly(x)*2 == Poly(2*x, x, domain='ZZ')\n+    assert 2*Poly(x) == Poly(2*x, x, domain='ZZ')\n+    assert Poly(x)*S(2) == Poly(2*x, x, domain='ZZ')\n+    assert S(2)*Poly(x) == Poly(2*x, x, domain='ZZ')\n+\n+    # Edge cases\n+    assert Poly(0, x)*x == Poly(0, x)\n+    assert x*Poly(0, x) == Poly(0, x)\n     assert Poly(x*y, x, y).sqr() == Poly(x**2*y**2, x, y)\n \n \n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..ce3e28d 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -54,6 +54,24 @@ def test_printmethod():\n             return \"foo\"\n     assert latex(R(x)) == \"foo\"\n \n+def test_latex_mul_symbol_custom():\n+    from sympy import Rational, Integral, symbols\n+    x, y = symbols('x y')\n+    # Verify that custom mul_symbol works as expected\n+    assert latex(3*x**2*y, mul_symbol='\\\\,') == r\"3\\,x^{2}\\,y\"\n+    assert latex(1.5*3**x, mul_symbol='\\\\,') == r\"1.5 \\cdot 3^{x}\"\n+    assert latex(2*x*y, mul_symbol='times') == r\"2 \\times x \\times y\"\n+    assert latex(2*x*y, mul_symbol=None) == r\"2 x y\"  # Default behavior\n+\n+def test_latex_mul_symbol_edge_cases():\n+    from sympy import symbols\n+    x, y, z = symbols('x y z')\n+    # Test with some edge cases\n+    assert latex(x**2*y*z, mul_symbol='*') == r\"x^{2}*y*z\"\n+    assert latex(x**2*y*z, mul_symbol=' ') == r\"x^{2} y z\"\n+    assert latex(x**2*y*z, mul_symbol='') == r\"x^{2}yz\"\n+    assert latex(x*y*z, mul_symbol='-') == r\"x-y-z\"\n+\n \n def test_latex_basic():\n     assert latex(1 + x) == \"x + 1\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..d02442b 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -402,8 +402,19 @@ def test_determinant():\n     assert M.det(method=\"bareiss\") == z**2 - x*y\n     assert M.det(method=\"berkowitz\") == z**2 - x*y\n \n-\n-def test_det_LU_decomposition():\n+def test_issue_13835():\n+    from sympy import symbols, Matrix\n+\n+    a = symbols('a')\n+    M = lambda n: Matrix([[i + a*j for i in range(n)] for j in range(n)])\n+\n+    assert M(1).det() == 0\n+    assert M(2).det() == -a\n+    assert M(3).det() == 2*a*(a + 2) + 2*a*(2*a + 1) - 3*a*(2*a + 2) # Simplified to 0\n+    assert M(4).det() == 0\n+    assert M(5).det() == 0  # Previously NaN, expected fix to return 0\n+    assert M(6).det() == 0  # Previously an exception was raised, expected fix to return 0\n+    assert M(7).det() == 0  # Following the pattern of prior fixes\n \n     for M in [Matrix(), Matrix([[1]])]:\n         assert M.det(method=\"lu\") == 1\n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..45abc17 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -708,8 +708,57 @@ def test_issue_10003():\n     G = Gamma('g', 1, 2)\n     assert P(X < -1) == S.Zero\n     assert P(G < -1) == S.Zero\n-\n def test_precomputed_cdf():\n+    x = symbols(\"x\", real=True, finite=True)\n+    a, b, mu, omega, s, m, p, k, l = symbols(\"a b mu omega s m p k l\", real=True, positive=True)\n+    \n+    # Test Arcsin CDF\n+    X_arcsin = Arcsin(\"X_arcsin\", 0, 3)\n+    assert tn(diff(cdf(X_arcsin)(x), x), density(X_arcsin)(x), x, 0.1)\n+\n+    # Test Dagum CDF\n+    X_dagum = Dagum(\"X_dagum\", S(1)/3, S(1)/5, 2)\n+    assert tn(diff(cdf(X_dagum)(x), x), density(X_dagum)(x), x, 0.1)\n+\n+    # Test Erlang CDF\n+    X_erlang = Erlang(\"X_erlang\", 1, 1)\n+    assert tn(diff(cdf(X_erlang)(x), x), density(X_erlang)(x), x, 0.1)\n+\n+    # Test Frechet CDF\n+    X_frechet = Frechet(\"X_frechet\", S(4)/3, 1, 2)\n+    assert tn(diff(cdf(X_frechet)(x), x), density(X_frechet)(x), x, 2.5)\n+\n+    # Test Gamma CDF\n+    X_gamma = Gamma(\"X_gamma\", 0.1, 2)\n+    assert tn(diff(cdf(X_gamma)(x), x), density(X_gamma)(x), x, 0.1)\n+\n+    # Test GammaInverse CDF\n+    X_gamma_inverse = GammaInverse(\"X_gamma_inverse\", S(5)/7, 2)\n+    assert tn(diff(cdf(X_gamma_inverse)(x), x), density(X_gamma_inverse)(x), x, 0.1)\n+\n+    # Test Kumaraswamy CDF\n+    X_kumaraswamy = Kumaraswamy(\"X_kumaraswamy\", S(1)/123, 5)\n+    assert tn(diff(cdf(X_kumaraswamy)(x), x), density(X_kumaraswamy)(x), x, 0.1)\n+\n+    # Test Laplace CDF\n+    X_laplace = Laplace(\"X_laplace\", 2, 3)\n+    assert tn(diff(cdf(X_laplace)(x), x), density(X_laplace)(x), x, 0.1)\n+\n+    # Test Logistic CDF\n+    X_logistic = Logistic(\"X_logistic\", 1, 0.1)\n+    assert tn(diff(cdf(X_logistic)(x), x), density(X_logistic)(x), x, 0.1)\n+\n+    # Test Nakagami CDF\n+    X_nakagami = Nakagami(\"X_nakagami\", S(7)/3, 1)\n+    assert tn(diff(cdf(X_nakagami)(x), x), density(X_nakagami)(x), x, 0.1)\n+\n+    # Test StudentT CDF\n+    X_student_t = StudentT(\"X_student_t\", 10)\n+    assert tn(diff(cdf(X_student_t)(x), x), density(X_student_t)(x), x, 0.1)\n+\n+    # Test UniformSum CDF\n+    X_uniform_sum = UniformSum(\"X_uniform_sum\", 5)\n+    assert tn(diff(cdf(X_uniform_sum)(x), x), density(X_uniform_sum)(x), x, 0.1)\n     x = symbols(\"x\", real=True, finite=True)\n     mu = symbols(\"mu\", real=True, finite=True)\n     sigma, xm, alpha = symbols(\"sigma xm alpha\", positive=True, finite=True)\n",
  "sympy__sympy-13974": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bd3e825..0eda907 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -48,6 +48,25 @@ def test_tensor_product_commutator():\n def test_tensor_product_simp():\n     assert tensor_product_simp(TP(A, B)*TP(B, C)) == TP(A*B, B*C)\n \n+def test_tensor_product_powers():\n+    # Test simplification of powers of TensorProduct expressions\n+    a, b, c, d = symbols('a b c d', commutative=False)\n+    x = Symbol('x')\n+    \n+    # Test tensor product raised to a symbolic power\n+    assert tensor_product_simp(TP(a, b)**x) == TP(a**x, b**x)\n+    \n+    # Test tensor product raised to a numeric power\n+    assert tensor_product_simp(TP(a, b)**2) == TP(a**2, b**2)\n+    \n+    # Test scalar multiplication with tensor power\n+    assert tensor_product_simp(x * TP(a, b)**2) == x * TP(a**2, b**2)\n+    \n+    # Test multiplication of tensor products involving powers\n+    assert tensor_product_simp(x * (TP(a, b)**2) * TP(c, d)) == x * TP(a**2 * c, b**2 * d)\n+    \n+    # Test subtraction of tensor products involving powers\n+    assert tensor_product_simp(TP(a, b) - TP(c, d)**x) == TP(a, b) - TP(c**x, d**x)\n \n def test_issue_5923():\n     # most of the issue regarding sympification of args has been handled\n",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_python.py b/sympy/printing/tests/test_python.py\nindex 73fc070..0443a45 100644\n--- a/sympy/printing/tests/test_python.py\n+++ b/sympy/printing/tests/test_python.py\n@@ -70,6 +70,15 @@ def test_python_keyword_symbol_name_escaping():\n         5*Symbol(\"lambda\")) == \"lambda_ = Symbol('lambda')\\ne = 5*lambda_\"\n     assert (python(5*Symbol(\"lambda\") + 7*Symbol(\"lambda_\")) ==\n             \"lambda__ = Symbol('lambda')\\nlambda_ = Symbol('lambda_')\\ne = 7*lambda_ + 5*lambda__\")\n+\n+def test_python_issue_cases():\n+    from sympy import Eq, Symbol, Ne, Rational\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    assert python(Eq(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = Eq(x, y)\"\n+    assert python(Ne(x/(y + 1), y**2)) in [\n+        \"x = Symbol('x')\\ny = Symbol('y')\\ne = Ne(x/(1 + y), y**2)\",\n+        \"x = Symbol('x')\\ny = Symbol('y')\\ne = Ne(x/(y + 1), y**2)\"]\n     assert (python(5*Symbol(\"for\") + Function(\"for_\")(8)) ==\n             \"for__ = Symbol('for')\\nfor_ = Function('for_')\\ne = 5*for__ + for_(8)\")\n \n",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..7ded310 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -7,7 +7,23 @@ from sympy.utilities.pytest import raises\n Vector.simp = True\n A = ReferenceFrame('A')\n \n+from sympy.physics.vector import ReferenceFrame, Vector\n \n+def test_vector_add_zero():\n+    A = ReferenceFrame('A')\n+    assert A.x + 0 == A.x  # Original test case\n+\n+    # Test case: Adding zero within a list of vectors\n+    assert sum([A.x, 0 * A.x]) == A.x\n+    assert sum([0 * A.x, A.x]) == A.x\n+\n+    # Test case: Adding zero and multiple vectors\n+    assert sum([A.x, 0, A.y, 0]) == A.x + A.y\n+    assert sum([0, 0, 0, A.z]) == A.z\n+    \n+    # Test case: Completely zero vector addition\n+    assert sum([0 * A.x, 0 * A.y, 0 * A.z]) == Vector(0)\n+    \n def test_Vector():\n     assert A.x != A.y\n     assert A.y != A.z\n",
  "sympy__sympy-14976": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex fbe0d75..644944f 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import (absolute_import, division, print_function)\n \n@@ -38,6 +39,10 @@ def test_PythonCodePrinter():\n \n \n def test_MpmathPrinter():\n+    # Test that MpmathPrinter wraps Rational numbers properly\n+    p = MpmathPrinter()\n+    r = Rational(232, 3)\n+    assert p.doprint(r) == 'mpmath.mpf(232)/mpmath.mpf(3)'\n     p = MpmathPrinter()\n     assert p.doprint(sign(x)) == 'mpmath.sign(x)'\n \n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..f25dcf0 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -73,7 +74,8 @@ def test_ndim_array_initiation():\n \n     from sympy.abc import x\n     rank_zero_array = ImmutableDenseNDimArray(x)\n-    assert len(rank_zero_array) == 0\n+    # Ensure len(rank_zero_array) returns 1 for a rank-0 array\n+    assert len(rank_zero_array) == 1\n     assert rank_zero_array.shape == ()\n     assert rank_zero_array.rank() == 0\n     assert rank_zero_array[()] == x\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..1b1c6f9 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,26 @@\n+\n+def test_Max_Min():\n+    # Test the original issue case\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    # Test with multiple arguments\n+    assert mcode(Max(x, y, z)) == \"Max[x, y, z]\"\n+    # Test with nested Max and Min\n+    assert mcode(Max(x, Min(y, z))) == \"Max[x, Min[y, z]]\"\n+    # Test with only Min\n+    assert mcode(Min(x, y)) == \"Min[x, y]\"\n+    # Test with Max and Min in a product\n+    assert mcode(Max(x, y)*Min(y, z)) == \"Max[x, y]*Min[y, z]\"\n+    # Test if the issue is resolved\n+    assert mcode(Max(3, x, 2)) == \"Max[3, x, 2]\"\n+    # Check if ordering of arguments doesn't affect outcome\n+    assert mcode(Max(2, x)) == \"Max[x, 2]\"\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n",
  "sympy__sympy-15349": "",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..ab1ff8c 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1662,8 +1662,23 @@ def test_Mod():\n     assert Mod(Mod(x + 2, 4)*(x + 4), 4) == Mod(x*(x + 2), 4)\n     assert Mod(Mod(x + 2, 4)*4, 4) == 0\n \n-\n-def test_Mod_is_integer():\n+def test_issue_15493():\n+    # Original test patch cases\n+    i, j = symbols('i j', integer=True, positive=True)\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+    assert Mod(8*i/j, 4) == 4*Mod(2*i/j, 1)\n+    assert Mod(8*i, 4) == 0\n+\n+    # Additional test cases to enhance coverage\n+    k = symbols('k', integer=True)\n+    assert Mod(9*k, 3) == Mod(k, 3)\n+    assert Mod(12*k, 6) == 0\n+    assert Mod(5*k, 5) == 0\n+    assert Mod(15*k, 10) == 5*Mod(k, 2)\n+    assert Mod(30*k, 10) == 0\n+    assert Mod(7*k, 2) == Mod(k, 2)\n+    assert Mod(21*k, 6) == 3*Mod(k, 2)\n+    assert Mod(100*k, 25) == 0\n     p = Symbol('p', integer=True)\n     q1 = Symbol('q1', integer=True)\n     q2 = Symbol('q2', integer=True, nonzero=True)\n",
  "sympy__sympy-15809": "diff --git a/sympy/functions/elementary/tests/test_miscellaneous.py b/sympy/functions/elementary/tests/test_miscellaneous.py\nindex 821fd0c..6257947 100644\n--- a/sympy/functions/elementary/tests/test_miscellaneous.py\n+++ b/sympy/functions/elementary/tests/test_miscellaneous.py\n@@ -76,6 +76,12 @@ def test_Min():\n     assert Min(oo, nn) == nn\n     assert Min(p, p) == p\n     assert Min(p, oo) == p\n+    \n+    # Testing zero-argument Min() and Max()\n+    assert Min() == S.Infinity\n+    assert Min(x) == x\n+    assert Max() == S.NegativeInfinity\n+    assert Max(x) == x\n     assert Min(oo, p) == p\n     assert Min(oo, oo) == oo\n \n",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..28cb9b9 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1982,7 +1982,32 @@ def test_issue_8247_8354():\n     assert z.is_positive is False  # it's 0 (and a single _mexpand isn't enough)\n \n \n+from sympy import I, simplify\n+\n def test_Add_is_zero():\n+    # Issue 15873\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None\n+    assert simplify(e).is_zero is True\n+    \n+    # Additional test cases for complex arithmetic\n+    f = I - I\n+    assert f.is_zero is True\n+\n+    g = 2 + 3*I - 2 - 3*I\n+    assert g.is_zero is True\n+\n+    h = (1 + I)**2 - (1 + I)*(1 + I)\n+    assert h.is_zero is True\n+\n+    i = 0*I\n+    assert i.is_zero is True\n+\n+    j = (1 + 2*I) + (-1 - 2*I)\n+    assert j.is_zero is True\n+\n+    k = (2*I)*3 - 6*I\n+    assert k.is_zero is True\n     x, y = symbols('x y', zero=True)\n     assert (x + y).is_zero\n \n@@ -1993,4 +2018,4 @@ def test_issue_14392():\n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..5f492af 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -477,8 +477,34 @@ def test_logcombine_complex_coeff():\n     assert logcombine(i + 2*log(x), force=True) == \\\n         i + log(x**2)\n \n-\n-def test_issue_5950():\n+def test_posify_preserves_finite():\n+    # issue 16438\n+    k = Symbol('k', finite=True)\n+    eq, _ = posify(k)\n+    assert eq.assumptions0['finite'] == True\n+    assert eq.assumptions0['infinite'] == False\n+\n+def test_posify_preserves_other_assumptions():\n+    # Test other assumptions that should be preserved\n+    m = Symbol('m', integer=True)\n+    eq, _ = posify(m)\n+    assert eq.assumptions0['integer'] == True\n+\n+    n = Symbol('n', rational=True)\n+    eq, _ = posify(n)\n+    assert eq.assumptions0['rational'] == True\n+\n+    p = Symbol('p', prime=True)\n+    eq, _ = posify(p)\n+    assert eq.assumptions0['prime'] == True\n+\n+    e = Symbol('e', even=True)\n+    eq, _ = posify(e)\n+    assert eq.assumptions0['even'] == True\n+\n+    o = Symbol('o', odd=True)\n+    eq, _ = posify(o)\n+    assert eq.assumptions0['odd'] == True\n     x, y = symbols(\"x,y\", positive=True)\n     assert logcombine(log(3) - log(2)) == log(Rational(3,2), evaluate=False)\n     assert logcombine(log(x) - log(y)) == log(x/y)\n",
  "sympy__sympy-16766": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 51a287f..4d07d80 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n \n@@ -12,6 +13,7 @@ from sympy.printing.pycode import (\n     MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter\n )\n from sympy.utilities.pytest import raises\n+from sympy.tensor import IndexedBase\n \n x, y, z = symbols('x y z')\n \n@@ -35,6 +37,13 @@ def test_PythonCodePrinter():\n                                                         ' (3) if (x > 0) else None)'\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n \n+    # Test for IndexedBase usage\n+    p = IndexedBase(\"p\")\n+    assert prntr.doprint(p[0]) == 'p[0]'\n+    assert prntr.doprint(p[x, y]) == 'p[x, y]'\n+    assert prntr.doprint(p[0, 1, 2]) == 'p[0, 1, 2]'\n+    assert prntr.doprint(p[x, 2]) == 'p[x, 2]'\n+\n \n def test_MpmathPrinter():\n     p = MpmathPrinter()\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py\nindex 23fddca..4978e67 100644\n--- a/sympy/utilities/tests/test_autowrap.py\n+++ b/sympy/utilities/tests/test_autowrap.py\n@@ -30,8 +30,17 @@ def get_string(dump_fn, routines, prefix=\"file\", **kwargs):\n     output.close()\n     return source\n \n+from sympy import MatrixSymbol\n+import numpy as np\n \n-def test_cython_wrapper_scalar_function():\n+def test_cython_autowrap_with_unused_array_arg():\n+    # Test case for the issue with unused array arguments in cython autowrap\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0  # x does not appear in the expression\n+    f = autowrap(expr, args=(x,), backend='cython')\n+    \n+    # The function should return 1.0 without errors\n+    assert f(np.array([[1.0], [2.0]])) == 1.0\n     x, y, z = symbols('x,y,z')\n     expr = (x + y)*z\n     routine = make_routine(\"test\", expr)\n",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..48ef002 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -248,8 +248,11 @@ def test_encode_morse():\n     assert encode_morse(' ', sep='``') == '````'\n     assert encode_morse('!@#$%^&*()_+') == '-.-.--|.--.-.|...-..-|-.--.|-.--.-|..--.-|.-.-.'\n \n-\n-def test_decode_morse():\n+    # Test the specific issue with the Morse code for \"1\"\n+    assert encode_morse('1') == '.----'\n+    # From the original test patch\n+    assert encode_morse('12345') == '.----|..---|...--|....-|.....'\n+    assert encode_morse('67890') == '-....|--...|---..|----.|-----'\n     assert decode_morse('-.-|.|-.--') == 'KEY'\n     assert decode_morse('.-.|..-|-.||') == 'RUN'\n     raises(KeyError, lambda: decode_morse('.....----'))\n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..9716058 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -800,8 +800,19 @@ def test_nc_simplify():\n     assert nc_simplify(expr) == (1-c)**-1\n     # commutative expressions should be returned without an error\n     assert nc_simplify(2*x**2) == 2*x**2\n-\n-def test_issue_15965():\n+def test_issue_17137():\n+    from sympy import simplify, cos, I, Symbol\n+    x = Symbol('x')\n+    # Testing the original issue\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+    \n+    # Additional test cases with different expressions\n+    assert simplify(cos(x)**(-I)) == cos(x)**(-I)\n+    assert simplify(cos(x + I)**I) == cos(x + I)**I\n+    assert simplify(cos(x)**(I*x)) == cos(x)**(I*x)\n+    assert simplify(cos(x)**(2*I)) == cos(x)**(2*I)\n+    assert simplify(cos(x)**(1 - I)) == cos(x)**(1 - I)\n     A = Sum(z*x**y, (x, 1, a))\n     anew = z*Sum(x**y, (x, 1, a))\n     B = Integral(x*y, x)\n@@ -814,4 +825,4 @@ def test_issue_15965():\n def test_issue_7971():\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..6cc08a8 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,5 +1,7 @@\n+\n from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n-from sympy.simplify.sqrtdenest import _subsets as subsets\n+from sympy.simplify.sqrtdenest import _subsets as subsets, _sqrt_match\n+from sympy.core.expr import unchanged\n from sympy.utilities.pytest import slow\n \n r2, r3, r5, r6, r7, r10, r15, r29 = [sqrt(x) for x in [2, 3, 5, 6, 7, 10,\n@@ -175,8 +177,25 @@ def test_subsets():\n         [0, 1, 1, 0], [1, 1, 1, 0], [0, 0, 0, 1], [1, 0, 0, 1], [0, 1, 0, 1],\n         [1, 1, 0, 1], [0, 0, 1, 1], [1, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]]\n \n+def test_issue_12420():\n+    I = S.ImaginaryUnit\n+    expr1 = (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2\n+    expr2 = 3 - sqrt(2)*sqrt(4 + I) + 3*I\n+\n+    # Test if sqrtdenest returns unchanged expression when it can't denest further\n+    assert sqrtdenest(expr1) == expr1\n+    assert sqrtdenest(expr2) == expr2\n+\n+    # Additional test to verify _sqrt_match handles cases properly\n+    assert _sqrt_match(4 + I) == []\n+\n+    # Test with simpler expressions\n+    assert sqrtdenest(sqrt(1 + 3*I) + 2*sqrt(1 + I)) == sqrt(1 + 3*I) + 2*sqrt(1 + I)\n+    assert sqrtdenest(sqrt(5 + 2*I)) == sqrt(5 + 2*I)\n \n-def test_issue_5653():\n+    # Edge cases\n+    e = 1 + sqrt(1 + sqrt(1 + sqrt(1 + I)))\n+    assert sqrtdenest(e) == e\n     assert sqrtdenest(\n         sqrt(2 + sqrt(2 + sqrt(2)))) == sqrt(2 + sqrt(2 + sqrt(2)))\n \n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..03ede24 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n@@ -91,6 +92,14 @@ def test_point():\n     assert (-p3).__rsub__(p4) == p3.midpoint(p4).scale(2, 2)\n \n     assert p4 * 5 == Point(5, 5)\n+    # Test multiplication of Point by sympy number in both orders\n+    from sympy import sympify\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+    result1 = point1 + point2 * sympify(2.0)\n+    result2 = point1 + sympify(2.0) * point2\n+    assert result1 == Point(2, 2)\n+    assert result2 == Point(2, 2)\n     assert p4 / 5 == Point(0.2, 0.2)\n \n     raises(ValueError, lambda: Point(0, 0) + 10)\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..95b401d 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -553,8 +553,13 @@ def test_diophantine():\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n     assert diophantine((y**2-x), t) == set([(t**2, -t)])\n \n-\n-def test_general_pythagorean():\n+def test_issue_18186():\n+    from sympy import symbols\n+    x, y = symbols('x y', integer=True)\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True) == \\\n+        {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True) == \\\n+        {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n     from sympy.abc import a, b, c, d, e\n \n     assert check_solutions(a**2 + b**2 + c**2 - d**2)\n",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..b9ee068 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -677,7 +677,22 @@ def test_latex_subs():\n         x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n \n \n-def test_latex_integrals():\n+from sympy import Subs\n+from sympy.abc import x, y\n+\n+def test_latex_subs_parenthesizing():\n+    # Original issue test case\n+    assert latex(3*Subs(-x + y, (x,), (1,))) == r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+    \n+    # Additional test cases\n+    # Test with different substitutions\n+    assert latex(4*Subs(x - y, (x,), (2,))) == r'4 \\left. \\left(x - y\\right) \\right|_{\\substack{ x=2 }}'\n+    \n+    # Test with multiple variables and substitutions\n+    assert latex(5*Subs(x - y, (x, y), (1, 2))) == r'5 \\left. \\left(x - y\\right) \\right|_{\\substack{ x=1\\\\ y=2 }}'\n+    \n+    # Test with nested Subs\n+    assert latex(Subs(3*Subs(x - y, (y,), (2,)), (x,), (1,))) == r'\\left. \\left(3 \\left. \\left(x - y\\right) \\right|_{\\substack{ y=2 }}\\right) \\right|_{\\substack{ x=1 }}'\n     assert latex(Integral(log(x), x)) == r\"\\int \\log{\\left(x \\right)}\\, dx\"\n     assert latex(Integral(x**2, (x, 0, 1))) == \\\n         r\"\\int\\limits_{0}^{1} x^{2}\\, dx\"\n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "diff --git a/sympy/sets/tests/test_conditionset.py b/sympy/sets/tests/test_conditionset.py\nindex 68ee5d6..a766971 100644\n--- a/sympy/sets/tests/test_conditionset.py\n+++ b/sympy/sets/tests/test_conditionset.py\n@@ -1,3 +1,4 @@\n+\n from sympy.sets import (ConditionSet, Intersection, FiniteSet,\n     EmptySet, Union, Contains)\n from sympy import (Symbol, Eq, S, Abs, sin, pi, Interval,\n@@ -110,6 +111,19 @@ def test_subs_CondSet():\n     # to evaluate, that can't be helped from SymPy's end\n     n = Symbol('n', negative=True)\n     assert ConditionSet(n, 0 < n, S.Integers) is S.EmptySet\n+\n+    # Test case for the issue with ConditionSet and ImageSet\n+    k = Symbol('k')\n+    img1 = imageset(Lambda(k, 2*k*pi + asin(y)), S.Integers)\n+    img2 = imageset(Lambda(k, 2*k*pi + asin(S.One/3)), S.Integers)\n+    condset = ConditionSet(x, Contains(y, Interval(-1,1)), img1)\n+\n+    # Ensure substituting y with 1/3 gives the expected ImageSet\n+    assert condset.subs(y, S.One/3) == img2\n+    # Ensure xreplace also gives the expected ImageSet\n+    assert condset.xreplace({y: S.One/3}) == img2\n+    # Check simultaneous substitution behavior\n+    assert condset.subs({y: S.One/3}, simultaneous=True) == img2\n     p = Symbol('p', positive=True)\n     assert ConditionSet(n, n < y, S.Integers\n         ).subs(n, x) == ConditionSet(x, x < y, S.Integers)\n",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..edbf5dd 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -514,7 +514,35 @@ def test_kernS():\n     assert one != 1 and one.expand() == 1\n \n \n-def test_issue_6540_6552():\n+def test_issue_kernS_unbound_local_error():\n+    # Test case to reproduce the issue where 'kern' is referenced before assignment\n+    from sympy.core.sympify import kernS\n+    from sympy.abc import x\n+\n+    # Check with a simple expression to ensure kernS works as expected\n+    result = kernS(\"(2*x)/(x-1)\")\n+    assert result == 2*x/(x-1), \"kernS did not return the expected result.\"\n+\n+    # Check with more complex expressions\n+    result_1 = kernS(\"-(x + 1)\")\n+    assert result_1 == -(x + 1), \"kernS did not handle negation properly.\"\n+\n+    result_2 = kernS(\"2*(x + y)\")\n+    from sympy.abc import y\n+    assert result_2 == 2*(x + y), \"kernS did not prevent distribution in multiplication.\"\n+\n+    result_3 = kernS(\"(1-2**-(4+1)*(1-y)*x)\")\n+    assert result_3 == (1 - x*(1 - y)/32), \"kernS did not handle exponentiation properly.\"\n+\n+    result_4 = kernS(\"E**-(x)\")\n+    from sympy import exp\n+    assert result_4 == exp(-x), \"kernS did not handle exponential expressions properly.\"\n+\n+    # Edge case: Check with unmatched parentheses\n+    try:\n+        kernS(\"(1-2**-(4+1)*(1-y)*x\")\n+    except Exception as e:\n+        assert isinstance(e, ValueError), \"kernS should raise a ValueError for unmatched parentheses.\"\n     assert S('[[1/3,2], (2/5,)]') == [[Rational(1, 3), 2], (Rational(2, 5),)]\n     assert S('[[2/6,2], (2/4,)]') == [[Rational(1, 3), 2], (S.Half,)]\n     assert S('[[[2*(1)]]]') == [[[2]]]\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_operator.py b/sympy/physics/quantum/tests/test_operator.py\nindex 799aaae..696dd09 100644\n--- a/sympy/physics/quantum/tests/test_operator.py\n+++ b/sympy/physics/quantum/tests/test_operator.py\n@@ -1,6 +1,8 @@\n+\n from sympy import (Derivative, diff, Function, Integer, Mul, pi, sin, Symbol,\n                    symbols)\n from sympy.physics.quantum.qexpr import QExpr\n+from sympy.physics.quantum import IdentityOperator\n from sympy.physics.quantum.dagger import Dagger\n from sympy.physics.quantum.hilbert import HilbertSpace\n from sympy.physics.quantum.operator import (Operator, UnitaryOperator,\n@@ -84,6 +86,19 @@ def test_unitary():\n     assert Dagger(U).is_commutative is False\n \n \n+def test_dagger_identity_simplification():\n+    I = IdentityOperator()\n+    A = Operator('A')\n+    B = Dagger(A)\n+    \n+    # Test that B * I simplifies to B\n+    result = B * I\n+    assert result == B, f\"Dagger(A) * IdentityOperator did not simplify correctly. Got: {result}\"\n+\n+    # Test that I * B simplifies to B\n+    result = I * B\n+    assert result == B, f\"IdentityOperator * Dagger(A) did not simplify correctly. Got: {result}\"\n+\n def test_identity():\n     I = IdentityOperator()\n     O = Operator('O')\n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..91f633c 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -895,6 +895,14 @@ def test_sylow_subgroup():\n         else:\n             assert len(ls) == length\n \n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n     G = SymmetricGroup(100)\n     S = G.sylow_subgroup(3)\n     assert G.order() % S.order() == 0\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..78c86a2 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -471,7 +471,25 @@ def test_multiset_permutations():\n         6\\n''')\n \n \n+from sympy.utilities.iterables import partitions\n+\n def test_partitions():\n+    # Test for the reuse of dictionaries without copying\n+    n = 6\n+    expected_wrong_result = [{1: n}] * 4\n+    result_without_copy = [p for p in partitions(n, k=2)]\n+    assert result_without_copy == expected_wrong_result, (\n+        \"Expected wrong results due to reused dictionaries without copying.\"\n+    )\n+\n+    # Test for the correct behavior with copying\n+    expected_correct_result = [\n+        {2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}\n+    ]\n+    result_with_copy = [p.copy() for p in partitions(n, k=2)]\n+    assert result_with_copy == expected_correct_result, (\n+        \"Expected correct results with copying of the dictionaries.\"\n+    )\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n         assert list(partitions(0, size=i)) == ans[i]\n",
  "sympy__sympy-20801": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e1c7e2..5ef554b 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -583,8 +583,13 @@ def test_Float():\n         assert Float(i) is a\n \n \n-\n-@conserve_mpmath_dps\n+def test_zero_not_false():\n+    # https://github.com/sympy/sympy/issues/20796\n+    from sympy import S\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n def test_float_mpf():\n     import mpmath\n     mpmath.mp.dps = 100\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..45ffbfa 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -15,6 +16,21 @@ def test_subs():\n     assert e == Rational(3)\n \n     e = 2*x\n+\n+    # Test for issue with unexpected PolynomialError during subs\n+    # Ensure the error does not occur with the specific case described\n+\n+    from sympy import sinh, Piecewise\n+\n+    # Test case for the specific issue described\n+    x_r, y_r, z_r = symbols('x_r y_r z_r', real=True)\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    try:\n+        expr.subs({1: 1.0})\n+    except PolynomialError:\n+        assert False, \"Unexpected PolynomialError raised\"\n+    else:\n+        assert True, \"subs operation completed without error\"\n     assert e == 2*x\n     e = e.subs(x, n3)\n     assert e == Rational(6)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..78be960 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -161,8 +161,26 @@ def test_monomials():\n                     j**2*k**2, x*j, x**2*k, x**2*j**2*k, j, x**2*j*k,\n                     x*j**2, x*k**2, x*j*k, x**2*j**2*k**2, x*j*k**2, x**2, x**2*j*k**2\n             }\n-\n-def test_monomial_count():\n+def test_itermonomials_min_degrees():\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+\n+    # Test case for the issue described\n+    assert set(itermonomials([x1, x2, x3], 3, 3)) == {\n+        x1**3, x2**3, x3**3,\n+        x1*x2**2, x1*x3**2, x2*x1**2, x2*x3**2, x3*x1**2, x3*x2**2,\n+        x1*x2*x3\n+    }\n+\n+    # Additional test cases\n+    assert set(itermonomials([x1, x2], 2, 2)) == {x1**2, x1*x2, x2**2}\n+    assert set(itermonomials([x1, x2], 3, 3)) == {x1**3, x1**2*x2, x1*x2**2, x2**3}\n+    assert set(itermonomials([x1, x2, x3], 2, 1)) == {x1, x2, x3, x1*x2, x1*x3, x2*x3, x1**2, x2**2, x3**2}\n+\n+    # Check when max_degrees is greater than min_degrees\n+    assert set(itermonomials([x1, x2], 3, 2)) == {\n+        x1**2, x1*x2, x2**2,\n+        x1**3, x1**2*x2, x1*x2**2, x2**3\n+    }\n     assert monomial_count(2, 2) == 6\n     assert monomial_count(2, 3) == 10\n \n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..6acc897 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -261,11 +261,14 @@ def test_none():\n     assert none.func(*none.args) == none\n \n \n+from sympy.codegen.ast import String\n+\n def test_String():\n     st = String('foobar')\n     assert st.is_Atom\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n+    assert st.func(*st.args) == st\n     assert st.func(**st.kwargs()) == st\n \n \n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..e21a3ca 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,20 @@\n+\n+def test_issue_22684():\n+    # Used to give an error with evaluate(False)\n+    with evaluate(False):\n+        assert Point(1, 2) == Point2D(1, 2)\n+\n+def test_point2d_with_evaluate_false():\n+    # Ensure no error is raised and the result is as expected\n+    with evaluate(False):\n+        assert Point2D(1, 2) == Point2D(Integer(1), Integer(2))\n+        assert Point2D(Rational(1, 2), Rational(3, 4)) == Point2D(0.5, 0.75)\n+        \n+def test_point2d_without_evaluate():\n+    # Control test to ensure normal behavior is unaffected\n+    assert Point2D(1, 2) == Point2D(Integer(1), Integer(2))\n+    assert Point2D(0.5, 0.25) == Point2D(Rational(1, 2), Rational(1, 4))\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -9,7 +26,7 @@ from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n-from sympy.testing.pytest import raises, warns\n+from sympy.core.parameters import evaluate\n \n \n def test_point():\n",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..e2b6979 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..a57bb75 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,7 +1175,23 @@ def test_scipy_polys():\n \n \n \n-def test_lambdify_inspect():\n+def test_single_element_tuple():\n+    # Test for single element tuple with lambdify\n+    f2b = lambdify([], (1,))  # Issue: Python code printer not respecting tuple with one element\n+    assert f2b() == (1,)\n+\n+    # Verify the source code to ensure the tuple is correctly represented\n+    source_code = inspect.getsource(f2b)\n+    assert \"return (1,)\" in source_code\n+\n+def test_multi_element_tuple():\n+    # Test for multi-element tuple to ensure existing functionality is not broken\n+    f2c = lambdify([], (1, 2))\n+    assert f2c() == (1, 2)\n+\n+    # Verify the source code for multi-element tuple\n+    source_code = inspect.getsource(f2c)\n+    assert \"return (1, 2)\" in source_code\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n     # details\n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..3eb2cb6 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,8 +1,10 @@\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n from sympy.core.sympify import sympify  # can't import as S yet\n-from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n+from sympy.core.symbol import uniquely_named_symbol, _symbol, Str, symbols\n+from sympy.core.function import Function, UndefinedFunction\n \n from sympy.testing.pytest import raises\n from sympy.core.symbol import disambiguate\n@@ -295,7 +297,13 @@ def test_symbols():\n     assert symbols(('aa:d','x:z')) == ((aa, ab, ac, ad), (x, y, z))\n \n \n-    # issue 6675\n+def test_symbols_with_function_cls_and_extra_parentheses():\n+    # Using an extra layer of parentheses with symbols and cls=Function\n+    q, u = symbols(('q:2', 'u:2'), cls=Function)\n+    assert type(q[0]) == UndefinedFunction\n+    assert type(q[1]) == UndefinedFunction\n+    assert type(u[0]) == UndefinedFunction\n+    assert type(u[1]) == UndefinedFunction\n     def sym(s):\n         return str(symbols(s))\n     assert sym('a0:4') == '(a0, a1, a2, a3)'\n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..1e24a6f 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -262,6 +262,48 @@ def test_kahane_simplify1():\n     assert r.equals(-2*G(sigma)*G(rho)*G(nu))\n \n \n+def test_kahane_leading_gamma_matrix_bug():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n+\n+    # Original test cases illustrating the bug\n+    t = G(mu) * G(-mu) * G(rho) * G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4 * G(rho) * G(sigma))\n+\n+    t = G(rho) * G(sigma) * G(mu) * G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4 * G(rho) * G(sigma))\n+\n+    # Additional test cases for other permutations\n+    t = G(sigma) * G(rho) * G(mu) * G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4 * G(sigma) * G(rho))\n+\n+    t = G(mu) * G(-mu) * G(sigma) * G(rho)\n+    r = kahane_simplify(t)\n+    assert r.equals(4 * G(sigma) * G(rho))\n+\n+    t = G(sigma) * G(mu) * G(-mu) * G(rho)\n+    r = kahane_simplify(t)\n+    assert r.equals(4 * G(sigma) * G(rho))\n+\n+    t = G(rho) * G(mu) * G(-mu) * G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4 * G(rho) * G(sigma))\n+\n+    t = G(mu) * G(-mu) * G(-sigma) * G(rho)\n+    r = kahane_simplify(t)\n+    assert r.equals(4 * G(-sigma) * G(rho))\n+\n+    t = G(mu) * G(-mu) * G(sigma) * G(-rho)\n+    r = kahane_simplify(t)\n+    assert r.equals(4 * G(sigma) * G(-rho))\n+\n+    t = G(-rho) * G(sigma) * G(mu) * G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4 * G(-rho) * G(sigma))\n+\n+\n def test_gamma_matrix_class():\n     i, j, k = tensor_indices('i,j,k', LorentzIndex)\n \n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..ef9a529 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -30,7 +30,24 @@ def test_issue_10326():\n     assert Contains(-oo, Interval(-oo, oo)) == False\n \n \n-def test_binary_symbols():\n+def test_contains_as_set():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    \n+    # Testing the original cases provided\n+    assert Contains(x, FiniteSet(y)).as_set() == FiniteSet(y)\n+    assert Contains(x, Integers).as_set() == Integers\n+    assert Contains(x, Reals).as_set() == Reals\n+    \n+    # Additional cases\n+    # Testing with an empty set\n+    assert Contains(x, FiniteSet()).as_set() == FiniteSet()\n+    \n+    # Testing with a set containing multiple elements\n+    assert Contains(x, FiniteSet(y, 1, 2)).as_set() == FiniteSet(y, 1, 2)\n+    \n+    # Testing with a condition that should raise NotImplementedError\n+    raises(NotImplementedError, lambda: Contains(x, FiniteSet(y)).as_set())\n     x = Symbol('x')\n     y = Symbol('y')\n     z = Symbol('z')\n@@ -48,4 +65,4 @@ def test_as_set():\n \n def test_type_error():\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..ae6cd60 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -541,6 +541,30 @@ def test_issue_20288():\n     assert SI._collect_factor_and_dimension(expr) == (1 + E, Dimension(1))\n \n \n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units import Quantity\n+    from sympy.physics.units.systems.si import SI\n+    from sympy import exp\n+    from sympy.physics.units.dimensions import Dimension\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..f0178bd 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -562,6 +562,47 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n+from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+from sympy.physics.units.systems.si import SI\n+\n+def test_issue_24211():\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+    \n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+    \n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+def test_collect_factor_and_dimension_equivalence():\n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * meter / second)\n+\n+    a1 = Quantity('a1')\n+    SI.set_quantity_dimension(a1, acceleration)\n+    SI.set_quantity_scale_factor(a1, 3 * meter / second**2)\n+\n+    t1 = Quantity('t1')\n+    SI.set_quantity_dimension(t1, time)\n+    SI.set_quantity_scale_factor(t1, 1 * second)\n+\n+    expr1 = a1 * t1 + v1\n+    \n+    # Attempt to collect factor and dimension, expecting no ValueError\n+    factor, dimension = SI._collect_factor_and_dimension(expr1)\n+    \n+    assert dimension == SI.get_dimension_system().get_dimension(acceleration * time)\n+    assert factor == 3 * meter / second\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..233716a 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,3 +1,4 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n@@ -51,7 +52,18 @@ def test_homomorphism():\n     assert not T.is_isomorphism()\n     assert T.invert(p**3) == p**3\n \n-    T2 = homomorphism(F, P, [F.generators[0]], P.generators)\n+    # Test for the issue described where inverted generators cause failure\n+    D3 = DihedralGroup(3)\n+    T = homomorphism(D3, D3, D3.generators, D3.generators)\n+    assert T.is_isomorphism()\n+\n+    # Additional check for inverted generators\n+    a = Permutation(1, 2, 3)\n+    b = Permutation(1, 2)\n+    G = PermutationGroup([a, b])\n+    H = PermutationGroup([a, b**-1])\n+    T_inv = homomorphism(G, H, G.generators, H.generators)\n+    assert T_inv.is_isomorphism()\n     T = T.compose(T2)\n     assert T.domain == F\n     assert T.codomain == D\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..7646c53 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -249,10 +249,51 @@ def test_PolyElement_copy():\n     g[(1, 1, 1)] = 7\n     assert f != g\n \n+from sympy import ring, ZZ, symbols\n+from sympy.utilities.pytest import raises\n+\n def test_PolyElement_as_expr():\n     R, x, y, z = ring(\"x,y,z\", ZZ)\n     f = 3*x**2*y - x*y*z + 7*z**3 + 1\n \n+    # Existing test cases\n+    X, Y, Z = R.symbols\n+    g = 3*X**2*Y - X*Y*Z + 7*Z**3 + 1\n+    assert f != g\n+    assert f.as_expr() == g\n+\n+    X, Y, Z = symbols(\"x,y,z\")\n+    g = 3*X**2*Y - X*Y*Z + 7*Z**3 + 1\n+    assert f != g\n+    assert f.as_expr(X, Y, Z) == g\n+\n+    # New test cases\n+    U, V, W = symbols(\"u,v,w\")\n+    h = 3*U**2*V - U*V*W + 7*W**3 + 1\n+    assert f.as_expr(U, V, W) == h\n+\n+    # Test case with reversed symbols\n+    A, B, C = symbols(\"a,b,c\")\n+    i = 3*A**2*B - A*B*C + 7*C**3 + 1\n+    assert f.as_expr(A, B, C) == i\n+\n+    # Edge case: Incorrect number of symbols\n+    raises(ValueError, lambda: f.as_expr(U, V))\n+    raises(ValueError, lambda: f.as_expr(U, V, W, X))\n+\n+    # Single generator test\n+    R1, x1 = ring(\"x\", ZZ)\n+    f1 = 2*x1**3 + 5*x1 + 7\n+    U1, = symbols(\"u\")\n+    j = 2*U1**3 + 5*U1 + 7\n+    assert f1.as_expr(U1) == j\n+\n+    # Zero polynomial case\n+    f2 = R(0)\n+    assert f2.as_expr(U, V, W) == 0\n+    R, x, y, z = ring(\"x,y,z\", ZZ)\n+    f = 3*x**2*y - x*y*z + 7*z**3 + 1\n+\n     X, Y, Z = R.symbols\n     g = 3*X**2*Y - X*Y*Z + 7*Z**3 + 1\n \n",
  "sympy__sympy-24661": "diff --git a/sympy/parsing/tests/test_sympy_parser.py b/sympy/parsing/tests/test_sympy_parser.py\nindex 3723931..3e14d64 100644\n--- a/sympy/parsing/tests/test_sympy_parser.py\n+++ b/sympy/parsing/tests/test_sympy_parser.py\n@@ -274,6 +274,44 @@ def test_convert_equals_signs():\n         transformations=transformations) == Eq(Eq(2*y, x), False)\n \n \n+from sympy.core import Eq, Lt, Le, Gt, Ge, Ne\n+from sympy.parsing.sympy_parser import parse_expr\n+\n+def test_issue_24288():\n+    inputs = {\n+        \"1 < 2\": Lt(1, 2, evaluate=False),\n+        \"1 <= 2\": Le(1, 2, evaluate=False),\n+        \"1 > 2\": Gt(1, 2, evaluate=False),\n+        \"1 >= 2\": Ge(1, 2, evaluate=False),\n+        \"1 != 2\": Ne(1, 2, evaluate=False),\n+        \"1 == 2\": Eq(1, 2, evaluate=False)\n+    }\n+    for text, result in inputs.items():\n+        assert parse_expr(text, evaluate=False) == result\n+\n+def test_additional_relationals_with_symbols():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    inputs = {\n+        \"x < y\": Lt(x, y, evaluate=False),\n+        \"x <= y\": Le(x, y, evaluate=False),\n+        \"x > y\": Gt(x, y, evaluate=False),\n+        \"x >= y\": Ge(x, y, evaluate=False),\n+        \"x != y\": Ne(x, y, evaluate=False),\n+        \"x == y\": Eq(x, y, evaluate=False)\n+    }\n+    for text, result in inputs.items():\n+        assert parse_expr(text, evaluate=False) == result\n+\n+def test_nested_relationals():\n+    x = Symbol('x')\n+    inputs = {\n+        \"(1 < 2) < x\": Lt(Lt(1, 2, evaluate=False), x, evaluate=False),\n+        \"(x <= 2) == (x >= 1)\": Eq(Le(x, 2, evaluate=False), Ge(x, 1, evaluate=False), evaluate=False)\n+    }\n+    for text, result in inputs.items():\n+        assert parse_expr(text, evaluate=False) == result\n+\n def test_parse_function_issue_3539():\n     x = Symbol('x')\n     f = Function('f')\n",
  "astropy__astropy-14369": "diff --git a/astropy/units/tests/test_format.py b/astropy/units/tests/test_format.py\nindex 062b5f4..35c3ab5 100644\n--- a/astropy/units/tests/test_format.py\n+++ b/astropy/units/tests/test_format.py\n@@ -35,6 +35,16 @@ from astropy.units.utils import is_effectively_unity\n         ([\"mag(ct/s)\"], u.MagUnit(u.ct / u.s)),\n         ([\"dex\"], u.dex),\n         ([\"dex(cm s**-2)\", \"dex(cm/s2)\"], u.DexUnit(u.cm / u.s**2)),\n+        # Additional test cases for verifying composite unit parsing\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.J / (u.m * u.s * u.kpc**2))),\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.J / (u.s * u.kpc**2))),\n+        ([\"km/s/Mpc\"], u.km / u.s / u.Mpc),\n+        ([\"km/(s.Mpc)\"], u.km / u.s / u.Mpc),\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.W / (u.m * u.kpc**2))),\n+        ([\"1.5\u00d710+11/m\"], u.Unit(1.5e11 / u.m)),\n+        ([\"/s\"], u.s**-1),\n+        \"km/s.Mpc-1\",\n+        \"/s.Mpc\",\n     ],\n )\n def test_unit_grammar(strings, unit):\n@@ -90,6 +100,16 @@ def test_unit_grammar_fail(string):\n         ([\"[cm/s2]\"], dex(u.cm / u.s**2)),\n         ([\"[K]\"], dex(u.K)),\n         ([\"[-]\"], dex(u.dimensionless_unscaled)),\n+        # Additional test cases for verifying composite unit parsing\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.J / (u.m * u.s * u.kpc**2))),\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.J / (u.s * u.kpc**2))),\n+        ([\"km/s/Mpc\"], u.km / u.s / u.Mpc),\n+        ([\"km/(s.Mpc)\"], u.km / u.s / u.Mpc),\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.W / (u.m * u.kpc**2))),\n+        ([\"1.5\u00d710+11/m\"], u.Unit(1.5e11 / u.m)),\n+        ([\"/s\"], u.s**-1),\n+        \"km/s.Mpc-1\",\n+        \"/s.Mpc\",\n     ],\n )\n def test_cds_grammar(strings, unit):\n",
  "astropy__astropy-14598": "",
  "django__django-11299": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex b3dc643..3cf601a 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1908,6 +1908,39 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(\n             gt_operation.describe(), \"Remove constraint test_remove_constraint_pony_pink_gt_2 from model Pony\"\n         )\n+\n+    @skipUnlessDBFeature('supports_table_check_constraints')\n+    def test_check_constraint_with_or_and_combination(self):\n+        app_label = 'test_or_and_combination'\n+        constraint_name = 'or_and_combination_constraint'\n+        \n+        # Set up initial state with a test model\n+        from_state = self.set_up_test_model(app_label)\n+        \n+        # Define a complex constraint with an OR and AND combination\n+        check = models.Q(flag__exact=True, field_1__isnull=False) | models.Q(flag__exact=False)\n+        constraint = models.CheckConstraint(check=check, name=constraint_name)\n+        \n+        # Operation to add the constraint\n+        operation = migrations.AddConstraint('TestConstraintModel', constraint)\n+        \n+        # Apply the migration\n+        to_state = from_state.clone()\n+        operation.state_forwards(app_label, to_state)\n+        \n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, from_state, to_state)\n+        \n+        # Fetch the model to verify the constraint\n+        TestModel = to_state.apps.get_model(app_label, 'TestConstraintModel')\n+        \n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            # This should fail due to the constraint\n+            TestModel.objects.create(flag=True, field_1=None)\n+        \n+        # This should pass as it satisfies the constraint\n+        TestModel.objects.create(flag=False, field_1=None)\n+        TestModel.objects.create(flag=True, field_1=1)\n         # Test state alteration\n         new_state = project_state.clone()\n         gt_operation.state_forwards(\"test_removeconstraint\", new_state)\n",
  "django__django-11477": "diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex e4898b6..96e76a5 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -164,6 +164,9 @@ class URLTranslationTests(URLTestCaseBase):\n             self.assertEqual(translation.get_language(), 'nl')\n \n \n+from django.urls import resolve\n+from django.utils import translation\n+\n class URLNamespaceTests(URLTestCaseBase):\n     \"\"\"\n     Tests if the translations are still working within namespaces.\n",
  "django__django-12273": "diff --git a/tests/model_inheritance_regress/tests.py b/tests/model_inheritance_regress/tests.py\nindex d79faca..c9231f0 100644\n--- a/tests/model_inheritance_regress/tests.py\n+++ b/tests/model_inheritance_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Regression tests for Model inheritance behavior.\n \"\"\"\n@@ -14,6 +15,7 @@ from .models import (\n     MessyBachelorParty, ParkingLot, ParkingLot3, ParkingLot4A, ParkingLot4B,\n     Person, Place, Profile, QualityControl, Restaurant, SelfRefChild,\n     SelfRefParent, Senator, Supplier, TrainStation, User, Wholesaler,\n+    Item, Derived,\n )\n \n \n",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..32fff08 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -606,7 +606,12 @@ class DeletionTests(TestCase):\n \n class FastDeleteTests(TestCase):\n \n-    def test_fast_delete_fk(self):\n+    def test_fast_delete_all(self):\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        # No subqueries is used when performing a full delete.\n+        self.assertNotIn('SELECT', sql)\n         u = User.objects.create(\n             avatar=Avatar.objects.create()\n         )\n@@ -702,4 +707,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..60f4f32 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from decimal import Decimal\n \n@@ -24,8 +25,23 @@ class DecimalFieldTests(TestCase):\n         msg = '\u201cabc\u201d value must be a decimal number.'\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n-\n-    def test_default(self):\n+    def test_invalid_value(self):\n+        field = models.DecimalField(max_digits=4, decimal_places=2)\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        tests = [\n+            (),\n+            [],\n+            {},\n+            set(),\n+            object(),\n+            complex(1, 1),\n+            'non-numeric string',\n+            b'non-numeric byte-string',\n+        ]\n+        for value in tests:\n+            with self.subTest(value=value):\n+                with self.assertRaisesMessage(ValidationError, msg % (value,)):\n+                    field.clean(value, None)\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n \n",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..b828880 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,3 +1,23 @@\n+\n+class PickleValuesAndValuesListTestCase(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        Toy.objects.create(name='foo', price=10, material='wood')\n+        Toy.objects.create(name='bar', price=20, material='plastic')\n+        Toy.objects.create(name='baz', price=100, material='wood')\n+\n+    def test_pickle_values(self):\n+        prices = Toy.objects.values('material').annotate(total_price=Sum('price'))\n+        prices2 = Toy.objects.all()\n+        prices2.query = pickle.loads(pickle.dumps(prices.query))\n+        self.assertEqual(list(prices), list(prices2))\n+\n+    def test_pickle_values_list(self):\n+        prices = Toy.objects.values_list('material', flat=True)\n+        prices2 = Toy.objects.all()\n+        prices2.query = pickle.loads(pickle.dumps(prices.query))\n+        self.assertEqual(list(prices), list(prices2))\n+\n import datetime\n import pickle\n \n@@ -5,7 +25,8 @@ import django\n from django.db import models\n from django.test import TestCase\n \n-from .models import Container, Event, Group, Happening, M2MModel, MyEvent\n+from .models import Container, Event, Group, Happening, M2MModel, MyEvent, Toy\n+from django.db.models import Sum\n \n \n class PickleabilityTestCase(TestCase):\n",
  "django__django-13449": "diff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\nindex 3f59cdf..d9c7568 100644\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -11,4 +11,5 @@ class Employee(models.Model):\n     department = models.CharField(max_length=40, blank=False, null=False)\n     hire_date = models.DateField(blank=False, null=False)\n     age = models.IntegerField(blank=False, null=False)\n-    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\n",
  "django__django-13512": "diff --git a/tests/forms_tests/field_tests/test_jsonfield.py b/tests/forms_tests/field_tests/test_jsonfield.py\nindex e31bff4..600be02 100644\n--- a/tests/forms_tests/field_tests/test_jsonfield.py\n+++ b/tests/forms_tests/field_tests/test_jsonfield.py\n@@ -25,6 +25,7 @@ class JSONFieldTest(SimpleTestCase):\n             field.clean('{some badly formed: json}')\n \n     def test_prepare_value(self):\n+        # Original test cases\n         field = JSONField()\n         self.assertEqual(field.prepare_value({'a': 'b'}), '{\"a\": \"b\"}')\n         self.assertEqual(field.prepare_value(None), 'null')\n@@ -34,6 +35,12 @@ class JSONFieldTest(SimpleTestCase):\n         field = JSONField()\n         self.assertIsInstance(field.widget, Textarea)\n \n+        # Additional test cases to verify correct handling of Unicode and emoji characters\n+        self.assertEqual(field.prepare_value({'a': '\u4f60\u597d \u4e16\u754c'}), '{\"a\": \"\u4f60\u597d \u4e16\u754c\"}')\n+        self.assertEqual(field.prepare_value('\u4f60\u597d\uff0c\u4e16\u754c'), '\"\u4f60\u597d\uff0c\u4e16\u754c\"')\n+        self.assertEqual(field.prepare_value({'a': '\ud83d\ude00\ud83d\udc31'}), '{\"a\": \"\ud83d\ude00\ud83d\udc31\"}')\n+        self.assertEqual(field.prepare_value([\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]), '[\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]')\n+\n     def test_custom_widget_kwarg(self):\n         field = JSONField(widget=TextInput)\n         self.assertIsInstance(field.widget, TextInput)\n",
  "django__django-14404": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 8fb91af..bf52bec 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -6602,7 +6602,42 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         response = self.client.get(known_url[:-1])\n         self.assertRedirects(response, known_url, status_code=301, target_status_code=403)\n \n-    @override_settings(APPEND_SLASH=True)\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/prefix/')\n+    def test_catch_all_view_force_script_name_respects_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        # Intentionally omit trailing slash to force a redirect\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/another_prefix/')\n+    def test_catch_all_view_with_different_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/another_prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n         user = User.objects.create_user(\n             username='user',\n@@ -6628,7 +6663,42 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         response = self.client.get(known_url[:-1])\n         self.assertEqual(response.status_code, 404)\n \n-    @override_settings(APPEND_SLASH=True)\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/prefix/')\n+    def test_catch_all_view_force_script_name_respects_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        # Intentionally omit trailing slash to force a redirect\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/another_prefix/')\n+    def test_catch_all_view_with_different_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/another_prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n     def test_single_model_no_append_slash(self):\n         superuser = User.objects.create_user(\n             username='staff',\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..23f813a 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -691,7 +691,32 @@ class WriterTests(SimpleTestCase):\n         result = self.safe_exec(output)\n         self.assertIn(\"Migration\", result)\n \n-    def test_migration_path(self):\n+    def test_migration_imports(self):\n+        \"\"\"\n+        Test that the generated migration file includes necessary imports.\n+        \"\"\"\n+        fields = {\n+            'name': models.TextField(primary_key=True),\n+        }\n+\n+        # Create a dummy migration to test with.\n+        migration = type(\"Migration\", (migrations.Migration,), {\n+            \"operations\": [\n+                migrations.CreateModel(\n+                    name=\"MyModel\",\n+                    fields=tuple(fields.items()),\n+                    bases=(models.Model,),\n+                ),\n+            ],\n+            \"dependencies\": [],\n+        })\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+\n+        # Ensure that necessary imports are present\n+        self.assertIn(\"from django.db import models\", output)\n+        self.assertIn(\"from app.models import MyField, MyMixin\", output)\n+        self.assertIn(\"bases=(app.models.MyMixin, models.Model)\", output)\n         test_apps = [\n             'migrations.migrations_test_apps.normal',\n             'migrations.migrations_test_apps.with_package_model',\n",
  "django__django-15375": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1d4ef56..5fe5953 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1629,8 +1629,21 @@ class AggregateTestCase(TestCase):\n             value=Sum('price', filter=Q(rating__lt=3.0), default=Avg('pages') / 10.0),\n         )\n         self.assertAlmostEqual(result['value'], Decimal('61.72'), places=2)\n-\n-    def test_exists_none_with_aggregate(self):\n+    def test_aggregate_with_default_after_annotation(self):\n+        # This test directly addresses the issue described.\n+        result = Book.objects.annotate(idx=F('id')).aggregate(Sum('id', default=0))\n+        self.assertEqual(result['id__sum'], 4560)\n+\n+    def test_aggregate_with_default_after_annotation_no_results(self):\n+        # This test checks behavior when no rows match the query.\n+        result = Book.objects.filter(id__gt=100).annotate(idx=F('id')).aggregate(Sum('id', default=0))\n+        self.assertEqual(result['id__sum'], 0)\n+\n+    def test_aggregate_with_default_after_annotation_with_existing_filter(self):\n+        # This test checks that filtering works correctly with annotation and default.\n+        result = Book.objects.filter(id__lt=50).annotate(idx=F('id')).aggregate(Sum('id', default=0))\n+        expected_sum = sum(range(1, 50))  # assuming IDs start at 1\n+        self.assertEqual(result['id__sum'], expected_sum)\n         qs = Book.objects.all().annotate(\n             count=Count('id'),\n             exists=Exists(Author.objects.none()),\n@@ -1642,4 +1655,4 @@ class AggregateTestCase(TestCase):\n             count=Count('id'),\n             exists=Exists(Author.objects.extra(where=['1=0'])),\n         )\n-        self.assertEqual(len(qs), 6)\n+        self.assertEqual(len(qs), 6)\n",
  "django__django-15695": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 99db46a..c098463 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -2985,6 +2985,28 @@ class OperationTests(OperationTestBase):\n             operation.database_forwards(app_label, editor, project_state, new_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n         # Reverse is a no-op.\n+        # Test renaming index back and forth with unnamed index\n+        # Initial rename index.\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+\n+        # Reverse rename index (should restore old auto-generated name)\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        self.assertIndexNameDoesNotExist(table_name, \"new_pony_test_idx\")\n+        self.assertIndexNameExists(table_name, \"pony_pink_weight_idx\")\n+\n+        # Re-apply renaming (should not crash)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+        \n+        # Revert again to ensure stability\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        self.assertIndexNameDoesNotExist(table_name, \"new_pony_test_idx\")\n+        self.assertIndexNameExists(table_name, \"pony_pink_weight_idx\")\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             operation.database_backwards(app_label, editor, new_state, project_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n",
  "django__django-15732": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 42e02c2..43981a2 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -604,6 +604,8 @@ class AlterUniqueTogether(AlterTogetherOptionOperation):\n     option_name = \"unique_together\"\n \n     def __init__(self, name, unique_together):\n+        if not isinstance(unique_together, (set, list, tuple)):\n+            raise TypeError(\"unique_together must be a set, list, or tuple.\")\n         super().__init__(name, unique_together)\n \n \n",
  "django__django-15916": "",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..c3bd452 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -9,12 +9,29 @@ from django.core.serializers.json import DjangoJSONEncoder\n from django.db import models\n from django.test import SimpleTestCase, TestCase, TransactionTestCase\n from django.test.utils import isolate_apps\n-from django.utils.translation import gettext_lazy, override\n+from django.db import models, IntegrityError\n+from django.core import serializers\n \n from .models import Score\n from .tests import SerializersTestBase, SerializersTransactionTestBase\n \n \n+class TestTagManager(models.Manager):\n+    def get_queryset(self):\n+        return super().get_queryset().select_related(\"master\")\n+\n+class TestTagMaster(models.Model):\n+    name = models.CharField(max_length=120)\n+\n+class TestTag(models.Model):\n+    objects = TestTagManager()\n+    name = models.CharField(max_length=120)\n+    master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)\n+\n+class Test(models.Model):\n+    name = models.CharField(max_length=120)\n+    tags = models.ManyToManyField(TestTag, blank=True)\n+\n class JsonSerializerTestCase(SerializersTestBase, TestCase):\n     serializer_name = \"json\"\n     pkless_str = \"\"\"[\n@@ -67,7 +84,20 @@ class JsonSerializerTestCase(SerializersTestBase, TestCase):\n             if field_name in obj_dict[\"fields\"]\n         ]\n \n-    def test_indentation_whitespace(self):\n+    def test_m2m_serialization_with_custom_manager(self):\n+        # Set up the models\n+        tag_master = TestTagMaster.objects.create(name=\"master\")\n+        tag = TestTag.objects.create(name=\"tag\", master=tag_master)\n+        test_instance = Test.objects.create(name=\"test\")\n+        test_instance.tags.add(tag)\n+        test_instance.save()\n+        \n+        # Serialize and check for no exceptions\n+        try:\n+            json_data = serializers.serialize(\"json\", [test_instance])\n+            self.assertTrue(json_data)\n+        except Exception as e:\n+            self.fail(f\"Serialization raised an exception: {e}\")\n         s = serializers.json.Serializer()\n         json_data = s.serialize([Score(score=5.0), Score(score=6.0)], indent=2)\n         for line in json_data.splitlines():\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_backend_macosx.py b/lib/matplotlib/tests/test_backend_macosx.py\nindex 06d044f..f629052 100644\n--- a/lib/matplotlib/tests/test_backend_macosx.py\n+++ b/lib/matplotlib/tests/test_backend_macosx.py\n@@ -22,9 +22,21 @@ def test_cached_renderer():\n     fig.draw_without_rendering()\n     assert fig._cachedRenderer is not None\n \n+import pickle\n+from matplotlib.figure import Figure\n \n @pytest.mark.backend('macosx')\n-def test_savefig_rcparam(monkeypatch, tmp_path):\n+def test_unpickle_dpi_on_m1_mac():\n+    # Create a figure with a specific DPI\n+    fig = Figure(dpi=200)\n+    initial_dpi = fig.dpi\n+\n+    # Pickle and unpickle the figure\n+    pickled_fig = pickle.dumps(fig)\n+    unpickled_fig = pickle.loads(pickled_fig)\n+\n+    # Assert that the DPI is unchanged\n+    assert unpickled_fig.dpi == initial_dpi, f\"Expected DPI: {initial_dpi}, but got: {unpickled_fig.dpi}\"\n \n     def new_choose_save_file(title, directory, filename):\n         # Replacement function instead of opening a GUI window\n",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 87375f2..09adf48 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6602,6 +6602,19 @@ def test_integrate(dask):\n \n     with pytest.raises(ValueError):\n         da.integrate(\"x2d\")\n+    \n+    # Test whether using 'dim' raises a FutureWarning and 'coord' works as expected\n+    with pytest.warns(FutureWarning, match=\"dim argument is deprecated\"):\n+        da.integrate(dim=\"x\")\n+    \n+    # Ensure that using coord instead of dim works without warning\n+    actual_coord = da.integrate(coord=\"x\")\n+    expected_coord = xr.DataArray(\n+        np.trapz(da, da[\"x\"], axis=0),\n+        dims=[\"y\"],\n+        coords={k: v for k, v in da.coords.items() if \"x\" not in v.dims},\n+    )\n+    assert_allclose(expected_coord, actual_coord.compute())\n \n \n @pytest.mark.parametrize(\"dask\", [True, False])\n",
  "pydata__xarray-4094": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex a2826fa..10e90ec 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -3045,7 +3045,13 @@ class TestDataset:\n         d0 = D.isel(x=0)\n         assert_identical(d0, x0)\n \n-    def test_to_stacked_array_to_unstacked_dataset_different_dimension(self):\n+    def test_to_unstacked_dataset_single_dim(self):\n+        # single dimension: regression test for GH4049\n+        arr = xr.DataArray(np.arange(3), coords=[(\"x\", [0, 1, 2])])\n+        data = xr.Dataset({\"a\": arr, \"b\": arr})\n+        stacked = data.to_stacked_array(\"y\", sample_dims=[\"x\"])\n+        unstacked = stacked.to_unstacked_dataset(\"y\")\n+        assert_identical(unstacked, data)\n         # test when variables have different dimensionality\n         a, b = create_test_stacked_array()\n         sample_dims = [\"x\"]\n",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..80a52c8 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -130,8 +130,32 @@ def test_regex_error(capsys: CaptureFixture) -> None:\n     )\n     assert assertString in output.err\n \n-\n-def test_csv_regex_error(capsys: CaptureFixture) -> None:\n+import pytest\n+import re\n+from pylint.lint import Run\n+from typing import Any\n+\n+CSV_REGEX_COMMA_CASES = [\n+    (\"foo\", [\"foo\"]),\n+    (\"foo,bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar{1,3}\", [\"foo\", \"bar{1,3}\"]),\n+    (\"(foo{1,3})\", [\"(foo{1,3})\"]),\n+]\n+\n+@pytest.mark.parametrize(\"in_string,expected\", CSV_REGEX_COMMA_CASES)\n+def test_csv_regex_comma_in_quantifier(in_string: str, expected: list[str]) -> None:\n+    \"\"\"Check that we correctly parse a comma-separated regex with quantifiers that include commas.\"\"\"\n+    \n+    def _template_run(in_string: str) -> list[re.Pattern[Any]]:\n+        r = Run(\n+            [str(EMPTY_MODULE), rf\"--bad-name-rgxs={in_string}\"],\n+            exit=False,\n+        )\n+        bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs\n+        return bad_names_rgxs\n+    \n+    assert _template_run(in_string) == [re.compile(regex) for regex in expected]\n     \"\"\"Check that we correctly error when an option is passed and one\n     of its comma-separated regular expressions values is an invalid regular expression.\n     \"\"\"\n",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..65a1fc7 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1156,6 +1156,28 @@ def test_summary_list_after_errors(testdir):\n     )\n \n \n+import pytest\n+from _pytest.main import ExitCode\n+\n+def test_does_not_eagerly_collect_packages(testdir):\n+    testdir.makepyfile(\"def test(): pass\")\n+    pydir = testdir.mkpydir(\"foopkg\")\n+    pydir.join(\"__init__.py\").write(\"assert False\")\n+    result = testdir.runpytest()\n+    assert result.ret == ExitCode.OK\n+\n+def test_does_not_put_src_on_path(testdir):\n+    # `src` is not on sys.path so it should not be importable\n+    testdir.tmpdir.join(\"src/nope/__init__.py\").ensure()\n+    testdir.makepyfile(\n+        \"import pytest\\n\",\n+        \"def test():\\n\",\n+        \"    with pytest.raises(ImportError):\\n\",\n+        \"        import nope\\n\"\n+    )\n+    result = testdir.runpytest()\n+    assert result.ret == ExitCode.OK\n+\n def test_importorskip():\n     with pytest.raises(\n         pytest.skip.Exception,\n@@ -1184,4 +1206,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "",
  "scikit-learn__scikit-learn-25747": "",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex f07be18..e59844f 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -13,7 +13,25 @@ import pytest\n from sphinx import addnodes\n \n \n-@pytest.mark.sphinx('dummy', testroot='ext-autodoc')\n+@pytest.mark.sphinx('html', testroot='ext-autodoc-typehints')\n+def test_autodoc_typehints_none_link_description(app, status, warning):\n+    # Set the configuration to 'description'\n+    app.config.autodoc_typehints = 'description'\n+    app.builder.build_all()\n+    \n+    # Check the generated HTML for the link to None\n+    content = (app.outdir / 'index.html').read_text()\n+    assert 'href=\"https://docs.python.org/3/library/constants.html#None\"' in content\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc-typehints')\n+def test_autodoc_typehints_none_link_signature(app, status, warning):\n+    # Set the configuration to 'signature'\n+    app.config.autodoc_typehints = 'signature'\n+    app.builder.build_all()\n+    \n+    # Check the generated HTML for the link to None\n+    content = (app.outdir / 'index.html').read_text()\n+    assert 'href=\"https://docs.python.org/3/library/constants.html#None\"' not in content\n def test_autodoc(app, status, warning):\n     app.builder.build_all()\n \n@@ -30,4 +48,4 @@ def test_autodoc(app, status, warning):\n my_name\n \n alias of bug2437.autodoc_dummy_foo.Foo\"\"\"\n-    assert warning.getvalue() == ''\n+    assert warning.getvalue() == ''\n",
  "sphinx-doc__sphinx-8056": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 1d6a8cf..bf9591a 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1093,6 +1093,31 @@ Do as you please\n \n :keyword gotham_is_yours: shall interfere.\n :kwtype gotham_is_yours: None\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_on_same_line(self):\n+        # Test for multiple parameters on the same line as described in the issue\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: :class:`array_like`, *optional*\n \"\"\"\n         self.assertEqual(expected, actual)\n \n@@ -1329,6 +1354,31 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         actual = str(NumpyDocstring(docstring, config))\n         expected = \"\"\"\\\n :Parameters: **param1** (:class:`MyClass <name.space.MyClass>` instance)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_on_same_line(self):\n+        # Test for multiple parameters on the same line as described in the issue\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: :class:`array_like`, *optional*\n \"\"\"\n         self.assertEqual(expected, actual)\n \n@@ -1337,6 +1387,31 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         expected = \"\"\"\\\n :param param1:\n :type param1: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_on_same_line(self):\n+        # Test for multiple parameters on the same line as described in the issue\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: :class:`array_like`, *optional*\n \"\"\"\n         self.assertEqual(expected, actual)\n \n@@ -1352,6 +1427,31 @@ param1 : MyClass instance\n         actual = str(NumpyDocstring(docstring, config))\n         expected = \"\"\"\\\n :Parameters: **param1** (:class:`MyClass instance`)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_on_same_line(self):\n+        # Test for multiple parameters on the same line as described in the issue\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: :class:`array_like`, *optional*\n \"\"\"\n         self.assertEqual(expected, actual)\n \n@@ -1360,6 +1460,31 @@ param1 : MyClass instance\n         expected = \"\"\"\\\n :param param1:\n :type param1: :class:`MyClass instance`\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_on_same_line(self):\n+        # Test for multiple parameters on the same line as described in the issue\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: :class:`array_like`, *optional*\n \"\"\"\n         self.assertEqual(expected, actual)\n \n@@ -1388,6 +1513,31 @@ numpy.multivariate_normal(mean, cov, shape=None, spam=None)\n \"\"\"\n         self.assertEqual(expected, actual)\n \n+    def test_multiple_parameters_on_same_line(self):\n+        # Test for multiple parameters on the same line as described in the issue\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: :class:`array_like`, *optional*\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n         docstring = \"\"\"\\\n numpy.multivariate_normal(mean, cov, shape=None, spam=None)\n \n@@ -1411,6 +1561,31 @@ numpy.multivariate_normal(mean, cov, shape=None, spam=None)\n    \\n\\\n    :meth:`otherfunc`\n        relationship\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_on_same_line(self):\n+        # Test for multiple parameters on the same line as described in the issue\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: :class:`array_like`, *optional*\n \"\"\"\n         self.assertEqual(expected, actual)\n \n@@ -1437,6 +1612,31 @@ Summary\n \n         self.assertEqual(expected, actual)\n \n+    def test_multiple_parameters_on_same_line(self):\n+        # Test for multiple parameters on the same line as described in the issue\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: :class:`array_like`, *optional*\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_underscore_in_attribute(self):\n         docstring = \"\"\"\n Attributes\n@@ -1457,6 +1657,31 @@ arg_ : type\n \n         self.assertEqual(expected, actual)\n \n+    def test_multiple_parameters_on_same_line(self):\n+        # Test for multiple parameters on the same line as described in the issue\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: :class:`array_like`, *optional*\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_underscore_in_attribute_strip_signature_backslash(self):\n         docstring = \"\"\"\n Attributes\n@@ -1478,6 +1703,31 @@ arg_ : type\n \n         self.assertEqual(expected, actual)\n \n+    def test_multiple_parameters_on_same_line(self):\n+        # Test for multiple parameters on the same line as described in the issue\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: :class:`array_like`, *optional*\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_raises_types(self):\n         docstrings = [(\"\"\"\n Example Function\n@@ -1681,6 +1931,31 @@ Example Function\n         actual = str(NumpyDocstring(docstring, config, app, \"method\"))\n         self.assertEqual(expected, actual)\n \n+    def test_multiple_parameters_on_same_line(self):\n+        # Test for multiple parameters on the same line as described in the issue\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: :class:`array_like`, *optional*\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_section_header_underline_length(self):\n         docstrings = [(\"\"\"\n Summary line\n@@ -1927,6 +2202,31 @@ definition_after_normal_text : int\n         actual = str(NumpyDocstring(docstring, config))\n         self.assertEqual(expected, actual)\n \n+    def test_multiple_parameters_on_same_line(self):\n+        # Test for multiple parameters on the same line as described in the issue\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: :class:`array_like`, *optional*\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n         expected = \"\"\"One line summary.\n \n :Parameters: * **no_list** (:class:`int`)\n@@ -2019,6 +2319,31 @@ definition_after_normal_text : int\n         actual = str(NumpyDocstring(docstring, config))\n         self.assertEqual(expected, actual)\n \n+    def test_multiple_parameters_on_same_line(self):\n+        # Test for multiple parameters on the same line as described in the issue\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: :class:`array_like`, *optional*\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_token_type(self):\n         tokens = (\n             (\"1\", \"literal\"),\n@@ -2201,6 +2526,31 @@ definition_after_normal_text : int\n         actual = str(NumpyDocstring(docstring, config))\n         self.assertEqual(expected, actual)\n \n+    def test_multiple_parameters_on_same_line(self):\n+        # Test for multiple parameters on the same line as described in the issue\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: :class:`array_like`, *optional*\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n \n @contextmanager\n def warns(warning, match):\n",
  "sphinx-doc__sphinx-8551": "",
  "sphinx-doc__sphinx-8593": "",
  "sphinx-doc__sphinx-9230": "",
  "sphinx-doc__sphinx-9258": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a7d51b6..d68f285 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -1009,6 +1009,61 @@ def test_info_field_list(app):\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n \n+def test_info_field_list_multiple_types(app):\n+    text = (\".. py:function:: foo(text)\\n\"\n+            \"\\n\"\n+            \"   :param text: a text\\n\"\n+            \"   :type text: bytes | str | None\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree, (addnodes.index,\n+                          [desc, (desc_signature,\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree[1][1][0][0], ([nodes.field_name, \"Parameters\"],\n+                                      [nodes.field_body, nodes.paragraph]))\n+    assert_node(doctree[1][1][0][0][1][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"bytes\",\n+                **{\"py:module\": \"example\", \"py:class\": \"foo\"})\n+    assert_node(doctree[1][1][0][0][1][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"foo\"})\n+    assert_node(doctree[1][1][0][0][1][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"None\",\n+                **{\"py:module\": \"example\", \"py:class\": \"foo\"})\n+\n+\n+def test_info_field_list_single_type(app):\n+    text = (\".. py:function:: bar(number)\\n\"\n+            \"\\n\"\n+            \"   :param number: a number\\n\"\n+            \"   :type number: int\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree, (addnodes.index,\n+                          [desc, (desc_signature,\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree[1][1][0][0], ([nodes.field_name, \"Parameters\"],\n+                                      [nodes.field_body, nodes.paragraph]))\n+    assert_node(doctree[1][1][0][0][1][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"int\",\n+                **{\"py:module\": \"example\", \"py:class\": \"bar\"})\n+\n+\n+def test_info_field_list_no_type(app):\n+    text = (\".. py:function:: baz()\\n\"\n+            \"\\n\"\n+            \"   :param value: a value\\n\"\n+            \"   :type value: \\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree, (addnodes.index,\n+                          [desc, (desc_signature,\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree[1][1][0][0], ([nodes.field_name, \"Parameters\"],\n+                                      [nodes.field_body, nodes.paragraph]))\n+    assert_node(doctree[1][1][0][0][1][0][2], nodes.Text, \"\")\n+\n+\n def test_info_field_list_var(app):\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-9673": "",
  "sympy__sympy-18211": "",
  "sympy__sympy-18698": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 38de6f6..010c578 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3275,8 +3275,30 @@ def test_factor_terms():\n     assert factor_list(x*(x + y)) == (1, [(x, 1), (x + y, 1)])\n     assert sqf_list(x*(x + y)) == (1, [(x, 1), (x + y, 1)])\n \n-\n-def test_as_list():\n+from sympy import symbols, sqf_list\n+\n+x, y = symbols('x y')\n+\n+def test_issue_8695():\n+    # Testing the issue example with proper multiplicity for (x - 2) and (x - 3)\n+    p = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3\n+    result = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\n+    assert sqf_list(p) == result\n+\n+    # Additional test case for verifying the multiplicity\n+    p2 = (x - 2)**2 * (x - 3)**3\n+    result2 = (1, [(x - 2, 2), (x - 3, 3)])\n+    assert sqf_list(p2) == result2\n+\n+    # Test case when polynomial is already a square-free polynomial\n+    p3 = x * (x + y)\n+    result3 = (1, [(x, 1), (x + y, 1)])\n+    assert sqf_list(p3) == result3\n+\n+    # Test with a different polynomial to check multiplicity\n+    p4 = (x**2 + 2*x + 1)**4 * (x - 1)**2\n+    result4 = (1, [(x + 1, 4), (x - 1, 2)])\n+    assert sqf_list(p4) == result4\n     # issue 14496\n     assert Poly(x**3 + 2, x, domain='ZZ').as_list() == [1, 0, 0, 2]\n     assert Poly(x**2 + y + 1, x, y, domain='ZZ').as_list() == [[1], [], [1, 1]]\n",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..5297008 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3255,7 +3255,10 @@ def test_issue_5786():\n         (x - I*y)*(z - I*t)), extension=[I])) == -I*t*x - t*y + x*z - I*y*z\n \n \n-def test_noncommutative():\n+def test_issue_18895():\n+    # Test case for issue #18895\n+    z = expand((x - 1)*(y - 1))\n+    assert factor(z, extension=[I]) == (x - 1)*(y - 1)\n     class foo(Expr):\n         is_commutative=False\n     e = x/(x + x*y)\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..c2188b3 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"This tests sympy/core/basic.py with (ideally) no reference to subclasses\n of Basic or Atom.\"\"\"\n \n@@ -7,6 +8,7 @@ from sympy.core.basic import (Basic, Atom, preorder_traversal, as_Basic,\n     _atomic, _aresame)\n from sympy.core.singleton import S\n from sympy.core.symbol import symbols, Symbol, Dummy\n+from sympy.testing.pytest import raises\n from sympy.core.sympify import SympifyError\n from sympy.core.function import Function, Lambda\n from sympy.core.compatibility import default_sort_key\n",
  "sympy__sympy-24562": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..2e38147 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,7 +3202,22 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n-    def test_boundfield_widget_type(self):\n+    def test_boundwidget_id_for_label_custom_id(self):\n+        \"\"\"\n+        Ensure that BoundWidget.id_for_label uses the custom id provided\n+        by the ChoiceWidget's options when rendering the label for \n+        CheckboxSelectMultiple.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+\n+        form = SomeForm(auto_id='prefix_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'prefix_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'prefix_field_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "matplotlib__matplotlib-20676": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex b009975..93a9a3e 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -302,6 +302,36 @@ def test_tool_line_handle():\n     assert tool_line_handle.positions == positions\n \n \n+@pytest.mark.parametrize('direction', (\"horizontal\", \"vertical\"))\n+def test_span_selector_interactive_boundaries(direction):\n+    fig, ax = plt.subplots()\n+    ax.plot([10, 20], [10, 30])\n+    ax.figure.canvas.draw()\n+    \n+    x_bound = ax.get_xbound()\n+    y_bound = ax.get_ybound()\n+\n+    # Test with interactive=True\n+    selector = widgets.SpanSelector(ax, print, direction, interactive=True)\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    if direction == 'horizontal':\n+        # Attempt to move the selector, then check bounds\n+        do_event(selector, 'press', xdata=11, ydata=15, button=1)\n+        do_event(selector, 'onmove', xdata=15, ydata=15, button=1)\n+        do_event(selector, 'release', xdata=15, ydata=15, button=1)\n+        assert ax.get_xbound() == x_bound\n+        assert ax.get_ybound() == y_bound\n+    else:\n+        # Attempt to move the selector, then check bounds\n+        do_event(selector, 'press', xdata=15, ydata=11, button=1)\n+        do_event(selector, 'onmove', xdata=15, ydata=15, button=1)\n+        do_event(selector, 'release', xdata=15, ydata=15, button=1)\n+        assert ax.get_xbound() == x_bound\n+        assert ax.get_ybound() == y_bound\n+\n+\n def check_lasso_selector(**kwargs):\n     ax = get_ax()\n \n",
  "scikit-learn__scikit-learn-12682": "diff --git a/sklearn/decomposition/tests/test_dict_learning.py b/sklearn/decomposition/tests/test_dict_learning.py\nindex 35a43f8..27d1668 100644\n--- a/sklearn/decomposition/tests/test_dict_learning.py\n+++ b/sklearn/decomposition/tests/test_dict_learning.py\n@@ -51,6 +51,70 @@ def test_dict_learning_shapes():\n     assert_equal(dico.transform(X).shape, (X.shape[0], n_components))\n \n \n+import pytest\n+import numpy as np\n+from sklearn.decomposition import SparseCoder\n+from sklearn.exceptions import ConvergenceWarning\n+\n+def test_sparsecoder_max_iter():\n+    def ricker_function(resolution, center, width):\n+        \"\"\"Discrete sub-sampled Ricker (Mexican hat) wavelet\"\"\"\n+        x = np.linspace(0, resolution - 1, resolution)\n+        x = ((2 / (np.sqrt(3 * width) * np.pi ** .25))\n+             * (1 - (x - center) ** 2 / width ** 2)\n+             * np.exp(-(x - center) ** 2 / (2 * width ** 2)))\n+        return x\n+\n+    def ricker_matrix(width, resolution, n_components):\n+        \"\"\"Dictionary of Ricker (Mexican hat) wavelets\"\"\"\n+        centers = np.linspace(0, resolution - 1, n_components)\n+        D = np.empty((n_components, resolution))\n+        for i, center in enumerate(centers):\n+            D[i] = ricker_function(resolution, center, width)\n+        D /= np.sqrt(np.sum(D ** 2, axis=1))[:, np.newaxis]\n+        return D\n+\n+    transform_algorithm = 'lasso_cd'\n+    resolution = 1024\n+    subsampling = 3  # subsampling factor\n+    n_components = resolution // subsampling\n+\n+    # Compute a wavelet dictionary\n+    D_multi = np.r_[tuple(ricker_matrix(width=w, resolution=resolution,\n+                          n_components=n_components // 5)\n+                          for w in (10, 50, 100, 500, 1000))]\n+\n+    X = np.linspace(0, resolution - 1, resolution)\n+    first_quarter = X < resolution / 4\n+    X[first_quarter] = 3.\n+    X[np.logical_not(first_quarter)] = -1.\n+    X = X.reshape(1, -1)\n+\n+    # Check that the underlying model fails to converge\n+    with pytest.warns(ConvergenceWarning):\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=1)\n+        model.fit_transform(X)\n+\n+    # Check that the underlying model converges without warnings\n+    with pytest.warns(None) as record:\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=2000)\n+        model.fit_transform(X)\n+    assert not record.list\n+\n+    # Test with default max_iter to ensure it raises a warning for non-convergence\n+    with pytest.warns(ConvergenceWarning):\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm)\n+        model.fit_transform(X)\n+\n+    # Test with a higher max_iter to ensure the warning is suppressed\n+    with pytest.warns(None) as record:\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=5000)\n+        model.fit_transform(X)\n+    assert not record.list\n+\n def test_dict_learning_overcomplete():\n     n_components = 12\n     dico = DictionaryLearning(n_components, random_state=0).fit(X)\n",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..9bd6076 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -147,8 +147,26 @@ def test_multi_target_sample_weights():\n     X_test = [[1.5, 2.5, 3.5], [3.5, 4.5, 5.5]]\n     assert_almost_equal(rgr.predict(X_test), rgr_w.predict(X_test))\n \n-\n-# Import the data\n+import pytest\n+from sklearn.utils._testing import assert_array_equal\n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+from sklearn.model_selection import cross_val_predict\n+\n+def test_cross_val_predict_predict_proba_with_multioutput_classifier():\n+    # Generate a multilabel classification problem\n+    X, Y = make_multilabel_classification()\n+    \n+    # MultiOutputClassifier with LinearDiscriminantAnalysis\n+    mo_clf = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+    \n+    # Perform cross_val_predict with method='predict_proba'\n+    pred_proba = cross_val_predict(mo_clf, X, Y, cv=5, method='predict_proba')\n+    \n+    # Check if the prediction probabilities are generated without raising an error\n+    assert isinstance(pred_proba, list)\n+    assert len(pred_proba) == Y.shape[1]  # Ensure we have predictions for each output\n iris = datasets.load_iris()\n # create a multiple targets by randomized shuffling and concatenating y.\n X = iris.data\n",
  "sphinx-doc__sphinx-9658": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 072cdc7..c449c6a 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -170,7 +170,21 @@ def test_restify_broken_type_hints():\n     assert restify(BrokenType) == ':py:class:`tests.test_util_typing.BrokenType`'\n \n \n-def test_stringify():\n+def test_restify_inherited_mocked_class():\n+    with mock(['torch.nn']):\n+        import torch.nn as nn\n+        class MockedModule(nn.Module):\n+            pass\n+\n+        assert restify(MockedModule) == ':py:class:`torch.nn.Module`'\n+\n+def test_stringify_inherited_mocked_class():\n+    with mock(['torch.nn']):\n+        import torch.nn as nn\n+        class MockedModule(nn.Module):\n+            pass\n+\n+        assert stringify(MockedModule) == 'torch.nn.Module'\n     assert stringify(int) == \"int\"\n     assert stringify(str) == \"str\"\n     assert stringify(None) == \"None\"\n",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..75251b4 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -348,6 +348,25 @@ def test_reverse_order():\n            Product(x*y, (x, b + 1, a - 1), (y, 6, 1))\n \n \n+def test_issue_13546():\n+    from sympy import Product, Symbol, S\n+    n = Symbol('n')\n+    k = Symbol('k')\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 2).doit() == S(15)/2\n+\n+    # Additional test cases for different values of n\n+    assert p.subs(n, 1).doit() == S(2)\n+    assert p.subs(n, 3).doit() == S(105)/8\n+    assert p.subs(n, 4).doit() == S(1155)/32\n+    assert p.subs(n, 5).doit() == S(45045)/512\n+\n+    # Test for symbolic evaluation in terms of n\n+    from sympy import simplify\n+    expected = Product(n + 1 / 2**k, (k, 0, n-1))\n+    assert simplify(p) != simplify(expected.doit())\n+\n+\n def test_issue_9983():\n     n = Symbol('n', integer=True, positive=True)\n     p = Product(1 + 1/n**(S(2)/3), (n, 1, oo))\n@@ -357,4 +376,4 @@ def test_issue_9983():\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}