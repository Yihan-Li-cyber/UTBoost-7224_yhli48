{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..044b6a1 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -55,6 +55,37 @@ compound_models = {\n             )\n }\n \n+# New test case to check separability of nested compound models\n+def test_separability_matrix_nested_compound():\n+    from astropy.modeling import models as m\n+    from astropy.modeling.separable import separability_matrix\n+    import numpy as np\n+\n+    # Create initial compound models\n+    cm = m.Linear1D(10) & m.Linear1D(5)\n+    complex_model_1 = m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5)\n+    \n+    # Expected matrices for various configurations\n+    expected_cm = np.array([[True, False],\n+                            [False, True]])\n+\n+    expected_complex_model_1 = np.array([[True, True, False, False],\n+                                         [True, True, False, False],\n+                                         [False, False, True, False],\n+                                         [False, False, False, True]])\n+\n+    # Nested model\n+    nested_model = m.Pix2Sky_TAN() & cm\n+    expected_nested_model = np.array([[True, True, False, False],\n+                                      [True, True, False, False],\n+                                      [False, False, True, False],\n+                                      [False, False, False, True]])\n+\n+    # Verifying separability matrices\n+    assert np.array_equal(separability_matrix(cm), expected_cm), \"Simple compound model separability matrix mismatch.\"\n+    assert np.array_equal(separability_matrix(complex_model_1), expected_complex_model_1), \"Complex model separability matrix mismatch.\"\n+    assert np.array_equal(separability_matrix(nested_model), expected_nested_model), \"Nested compound model separability matrix mismatch.\"\n+\n \n def test_coord_matrix():\n     c = _coord_matrix(p2, 'left', 2)\n",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "",
  "astropy__astropy-14508": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex 6bdf92c..e6175e7 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -127,6 +127,38 @@ class TestHeaderFunctions(FitsTestCase):\n         c = fits.Card(\"long_int\", -467374636747637647347374734737437)\n         assert str(c) == _pad(\"LONG_INT= -467374636747637647347374734737437\")\n \n+    def test_floating_point_string_representation_card(self):\n+        \"\"\"Ensures Card formats float values with the correct precision, avoiding comment truncation\"\"\"\n+        k = \"HIERARCH ABC DEF GH IJKLMN\"\n+        com = \"[m] abcdef ghijklm nopqrstu vw xyzab\"\n+\n+        # Test case for a known example triggering precision issue\n+        c = fits.Card(k, 0.009125, com)\n+        expected_str = f\"{k} = 0.009125 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Additional test cases for different float values\n+        c = fits.Card(k, 8.95, com)\n+        expected_str = f\"{k} = 8.95 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, -99.9, com)\n+        expected_str = f\"{k} = -99.9 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Test cases for boundary conditions and other edge cases\n+        c = fits.Card(k, 0.0, com)\n+        expected_str = f\"{k} = 0.0 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, 1e-10, com)\n+        expected_str = f\"{k} = 1E-10 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, 1.23456789012345, com)\n+        expected_str = f\"{k} = 1.23456789012345 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n     def test_floating_point_value_card(self):\n         \"\"\"Test Card constructor with floating point value\"\"\"\n \n",
  "astropy__astropy-14539": "diff --git a/astropy/io/fits/tests/test_diff.py b/astropy/io/fits/tests/test_diff.py\nindex 9bf4897..9865174 100644\n--- a/astropy/io/fits/tests/test_diff.py\n+++ b/astropy/io/fits/tests/test_diff.py\n@@ -601,7 +601,26 @@ class TestDiff(FitsTestCase):\n         assert \"13 different table data element(s) found (65.00% different)\" in report\n         assert report.count(\"more indices\") == 1\n \n-    def test_identical_files_basic(self):\n+    def test_issue_fix_vla_identical(self):\n+        \"\"\"\n+        Test to ensure io.fits.FITSDiff does not report differences between identical files with VLAs.\n+        \"\"\"\n+        # Create a column with variable-length array (VLA) format\n+        col = Column('a', format='QD', array=[[0], [0, 0]])\n+        \n+        # Create a binary table HDU from the column and write to a FITS file\n+        hdu = BinTableHDU.from_columns([col])\n+        hdu.writeto('diffbug.fits', overwrite=True)\n+        \n+        # Use FITSDiff to compare the file to itself\n+        diff = FITSDiff('diffbug.fits', 'diffbug.fits')\n+        \n+        # Assert that the files are found to be identical\n+        assert diff.identical, \"FITSDiff reported differences on identical files with VLAs.\"\n+        \n+        # Clean up the created file\n+        import os\n+        os.remove('diffbug.fits')\n         \"\"\"Test identicality of two simple, extensionless files.\"\"\"\n \n         a = np.arange(100).reshape(10, 10)\n",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..e7868a0 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -197,8 +197,15 @@ def test_unknown_unit3():\n     with pytest.raises(TypeError):\n         unit5 = u.Unit(None)\n \n-\n-@raises(TypeError)\n+import pytest\n+from astropy import units as u\n+\n+def test_unit_equality_with_none():\n+    \"\"\"Test that comparing UnrecognizedUnit with None returns False without TypeError.\"\"\"\n+    unit = u.Unit(\"asdf\", parse_strict='silent')\n+    assert unit != None   # noqa\n+    assert not unit == None  # Explicitly show both ways for clarity\n+    assert unit not in (None, u.m)\n def test_invalid_scale():\n     x = ['a', 'b', 'c'] * u.m\n \n",
  "astropy__astropy-7671": "diff --git a/astropy/utils/tests/test_introspection.py b/astropy/utils/tests/test_introspection.py\nindex 852d721..1eb8c2f 100644\n--- a/astropy/utils/tests/test_introspection.py\n+++ b/astropy/utils/tests/test_introspection.py\n@@ -62,8 +62,28 @@ def test_find_mod_objs():\n     assert 'collections.namedtuple' not in fqns\n     assert namedtuple not in objs\n \n+from astropy.utils import minversion\n+from types import ModuleType\n+from distutils.version import LooseVersion\n \n def test_minversion():\n+    # Create a mock module with a specific version\n+    test_module = ModuleType(str(\"test_module_version\"))\n+    test_module.__version__ = '1.14.3'\n+\n+    # Original good versions test\n+    good_versions = ['0.12', '0.12.1', '0.12.0.dev', '0.12dev']\n+    for version in good_versions:\n+        assert minversion(test_module, version)\n+\n+    # Additional test case for this issue\n+    special_versions = ['1.14dev', '1.14.0.dev', '1.13.9', '1.14', '1.14.2']\n+    for version in special_versions:\n+        assert not minversion(test_module, version), f\"Expected minversion to fail for version {version}\"\n+    \n+    # Edge cases testing\n+    assert minversion(test_module, '1.14.3'), \"Expected minversion to pass for the actual module version\"\n+    assert not minversion(test_module, '1.14.4'), \"Expected minversion to fail for a version higher than the module version\"\n     from types import ModuleType\n     test_module = ModuleType(str(\"test_module\"))\n     test_module.__version__ = '0.12.2'\n@@ -72,4 +92,4 @@ def test_minversion():\n     for version in good_versions:\n         assert minversion(test_module, version)\n     for version in bad_versions:\n-        assert not minversion(test_module, version)\n+        assert not minversion(test_module, version)\n",
  "astropy__astropy-8707": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex a2103c6..69e5bd1 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -79,6 +79,22 @@ class TestHeaderFunctions(FitsTestCase):\n         assert header['B'] == 'B'\n         assert header.comments['B'] == 'C'\n \n+    def test_card_from_unicode_string(self):\n+        \"\"\"Test loading a Card from a unicode string.\"\"\"\n+        c = fits.Card.fromstring(\"DEF     = 'def'\")\n+        assert c.keyword == 'DEF'\n+        assert c.value == 'def'\n+\n+    def test_header_fromstring_unicode(self):\n+        \"\"\"Test reading a Header from a unicode string.\"\"\"\n+        with open(self.data('test0.fits'), 'r') as fobj:\n+            pri_hdr_from_unicode = fits.Header.fromstring(fobj.read())\n+        \n+        pri_hdr = fits.getheader(self.data('test0.fits'))\n+        assert pri_hdr['NAXIS'] == pri_hdr_from_unicode['NAXIS']\n+        assert pri_hdr == pri_hdr_from_unicode\n+        assert pri_hdr.tostring() == pri_hdr_from_unicode.tostring()\n+\n     def test_card_constructor_default_args(self):\n         \"\"\"Test Card constructor with default argument values.\"\"\"\n \n",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..949e98e 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -32,7 +32,9 @@ except ImportError:\n     HAS_MATPLOTLIB = False\n \n \n-\"\"\" The Quantity class will represent a number + unit + uncertainty \"\"\"\n+import numpy as np\n+import astropy.units as u\n+import pytest\n \n \n class TestQuantityCreation:\n@@ -142,7 +144,12 @@ class TestQuantityCreation:\n         a3 = np.array([1., 2.], dtype=np.float32)\n         q3 = u.Quantity(a3, u.yr)\n         assert q3.dtype == a3.dtype\n-        # items stored as objects by numpy should be converted to float\n+        # Test that float16 is preserved\n+        a3_16 = np.array([1., 2.], dtype=np.float16)\n+        q3_16 = u.Quantity(a3_16, u.yr)\n+        assert q3_16.dtype == a3_16.dtype\n+\n+        # but we should preserve any float32 or even float16\n         # by default\n         q4 = u.Quantity(decimal.Decimal('10.25'), u.m)\n         assert q4.dtype == float\n",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..288abda 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -218,7 +218,17 @@ TEST_DATA = [\n     (URLValidator(EXTENDED_SCHEMES), 'git+ssh://git@github.com/example/hg-git.git', None),\n \n     (URLValidator(EXTENDED_SCHEMES), 'git://-invalid.com', ValidationError),\n-    # Trailing newlines not accepted\n+    # URLs with invalid characters in userinfo\n+    (URLValidator(), 'http://foo@bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo/bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar@baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar/baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:passw@/rd@example.com', ValidationError),\n+    (URLValidator(), 'http://user:pa@ss:word@example.com', ValidationError),\n+    (URLValidator(), 'http://user:p@ss/word@example.com', ValidationError),\n+    (URLValidator(), 'http://user:pa:ss/w@ord@example.com', ValidationError),\n+    (URLValidator(), 'http://use:r/p@assword@example.com', ValidationError),\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n     # Trailing junk does not take forever to reject\n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..ba03aa0 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,8 +1,10 @@\n+\n import datetime\n import re\n from decimal import Decimal\n \n from django.core.exceptions import FieldError\n+from django.db.models.expressions import Case, When\n from django.db import connection\n from django.db.models import (\n     Avg, Count, DecimalField, DurationField, F, FloatField, Func, IntegerField,\n@@ -389,7 +391,28 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n-    def test_count_star(self):\n+    def test_count_distinct_with_case_when(self):\n+        \"\"\"\n+        Test to verify that a Count annotation with both Case and distinct=True\n+        produces the correct results without query errors.\n+        \"\"\"\n+\n+        # Assume we have books with the following page settings such that only\n+        # a few of them have pages greater than 300\n+        Book.objects.create(title=\"Book A\", pages=400, rating=3.0)\n+        Book.objects.create(title=\"Book B\", pages=350, rating=4.0)\n+        Book.objects.create(title=\"Book C\", pages=200, rating=4.5)\n+        Book.objects.create(title=\"Book D\", pages=500, rating=4.0)\n+        Book.objects.create(title=\"Book E\", pages=100, rating=3.5)\n+        Book.objects.create(title=\"Book F\", pages=600, rating=3.0)\n+\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(\n+                Case(When(pages__gt=300, then='rating')),\n+                distinct=True\n+            ),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n         sql = ctx.captured_queries[0]['sql']\n",
  "django__django-10914": "diff --git a/tests/file_uploads/tests.py b/tests/file_uploads/tests.py\nindex edc5fba..2fbdd1d 100644\n--- a/tests/file_uploads/tests.py\n+++ b/tests/file_uploads/tests.py\n@@ -15,6 +15,8 @@ from django.http.multipartparser import (\n )\n from django.test import SimpleTestCase, TestCase, client, override_settings\n \n+import os\n+from django.conf import settings\n from . import uploadhandler\n from .models import FileModel\n \n@@ -36,7 +38,25 @@ class FileUploadTests(TestCase):\n         shutil.rmtree(MEDIA_ROOT)\n         super().tearDownClass()\n \n-    def test_simple_upload(self):\n+    def test_default_file_permissions(self):\n+        \"\"\"\n+        Files uploaded without explicit FILE_UPLOAD_PERMISSIONS should have\n+        default permissions of 0o644.\n+        \"\"\"\n+        with tempfile.NamedTemporaryFile(delete=False, dir=MEDIA_ROOT) as temp_file:\n+            temp_file.write(b\"Temporary file content\")\n+            temp_file_name = os.path.basename(temp_file.name)\n+\n+        response = self.client.post('/upload/', {'file_field': open(temp_file.name, 'rb')})\n+        self.assertEqual(response.status_code, 200)\n+\n+        # Check the permissions of the uploaded file\n+        uploaded_file_path = os.path.join(MEDIA_ROOT, temp_file_name)\n+        file_stat = os.stat(uploaded_file_path)\n+        self.assertEqual(oct(file_stat.st_mode & 0o777), oct(0o644))\n+\n+        # Clean up\n+        os.remove(uploaded_file_path)\n         with open(__file__, 'rb') as fp:\n             post_data = {\n                 'name': 'Ringo',\n",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..ddf274a 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,5 +1,7 @@\n+\n import os\n import signal\n+import subprocess\n from unittest import mock\n \n from django.db.backends.postgresql.client import DatabaseClient\n@@ -101,7 +103,27 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n-    def test_sigint_handler(self):\n+    def test_pgpassword_set_via_subprocess_run(self):\n+        \"\"\"\n+        Test that PGPASSWORD is set using subprocess.run environment\n+        when a password is provided.\n+        \"\"\"\n+        dbinfo = {\n+            'database': 'dbname',\n+            'user': 'someuser',\n+            'password': 'somepassword',\n+            'host': 'somehost',\n+            'port': '444',\n+        }\n+        \n+        def _mock_subprocess_run(*args, **kwargs):\n+            env = kwargs.get('env', {})\n+            self.assertIsNotNone(env)\n+            self.assertEqual(env.get('PGPASSWORD'), 'somepassword')\n+            return subprocess.CompletedProcess(args, 0)\n+\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            DatabaseClient.runshell_db(dbinfo)\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n         def _mock_subprocess_call(*args):\n             handler = signal.getsignal(signal.SIGINT)\n@@ -113,4 +135,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..4d6effb 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -3,6 +3,7 @@ from django.conf import settings\n from django.contrib.contenttypes import management as contenttypes_management\n from django.contrib.contenttypes.models import ContentType\n from django.core.management import call_command\n+from django.contrib.contenttypes.models import ContentType\n from django.db import migrations, models\n from django.test import TransactionTestCase, override_settings\n \n@@ -38,7 +39,27 @@ class ContentTypeOperationsTests(TransactionTestCase):\n                     self.assertEqual(next_operation.old_model, operation.old_name_lower)\n                     self.assertEqual(next_operation.new_model, operation.new_name_lower)\n \n-    def test_existing_content_type_rename(self):\n+    class TestRouter:\n+        def db_for_write(self, model, **hints):\n+            return 'default'\n+\n+    @override_settings(DATABASE_ROUTERS=[TestRouter()])\n+    def test_existing_content_type_rename_other_database(self):\n+        # Create the content type in the 'other' database\n+        ContentType.objects.using('other').create(app_label='contenttypes_tests', model='foo')\n+        other_content_types = ContentType.objects.using('other').filter(app_label='contenttypes_tests')\n+\n+        # Run the migration command targeting the 'other' database\n+        call_command('migrate', 'contenttypes_tests', database='other', interactive=False, verbosity=0)\n+\n+        # Ensure that the model name is changed in the 'other' database\n+        self.assertFalse(other_content_types.filter(model='foo').exists())\n+        self.assertTrue(other_content_types.filter(model='renamedfoo').exists())\n+\n+        # Revert the migration to verify rollback\n+        call_command('migrate', 'contenttypes_tests', 'zero', database='other', interactive=False, verbosity=0)\n+        self.assertTrue(other_content_types.filter(model='foo').exists())\n+        self.assertFalse(other_content_types.filter(model='renamedfoo').exists())\n         ContentType.objects.create(app_label='contenttypes_tests', model='foo')\n         call_command('migrate', 'contenttypes_tests', database='default', interactive=False, verbosity=0,)\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n@@ -63,4 +84,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "diff --git a/tests/generic_inline_admin/tests.py b/tests/generic_inline_admin/tests.py\nindex 9dd9fd9..b93e5fb 100644\n--- a/tests/generic_inline_admin/tests.py\n+++ b/tests/generic_inline_admin/tests.py\n@@ -428,4 +428,38 @@ class GenericInlineModelAdminTest(SimpleTestCase):\n         ma = EpisodeAdmin(Episode, self.site)\n         inlines = ma.get_inline_instances(request)\n         for (formset, inline), other_inline in zip(ma.get_formsets_with_inlines(request), inlines):\n-            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+\n+    def test_get_inlines_hook_in_episode_admin(self):\n+        class MediaInline(GenericTabularInline):\n+            model = Media\n+\n+        class AlternateInline(GenericTabularInline):\n+            model = Media\n+\n+        class EpisodeAdmin(admin.ModelAdmin):\n+            inlines = (AlternateInline, MediaInline)\n+\n+            def get_inlines(self, request, obj=None):\n+                if hasattr(request, 'name'):\n+                    if request.name == 'alternate':\n+                        return self.inlines[:1]\n+                    elif request.name == 'media':\n+                        return self.inlines[1:2]\n+                return []\n+\n+        ma = EpisodeAdmin(Episode, self.site)\n+\n+        # Test no name attribute on request\n+        self.assertEqual(ma.get_inlines(request, None), [])\n+        self.assertEqual(ma.get_inline_instances(request), [])\n+\n+        # Test 'alternate' name attribute on request\n+        request.name = 'alternate'\n+        self.assertEqual(ma.get_inlines(request, None), (AlternateInline,))\n+        self.assertEqual(type(ma.get_inline_instances(request)[0]), AlternateInline)\n+\n+        # Test 'media' name attribute on request\n+        request.name = 'media'\n+        self.assertEqual(ma.get_inlines(request, None), (MediaInline,))\n+        self.assertEqual(type(ma.get_inline_instances(request)[0]), MediaInline)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..c7f1dbd 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -238,6 +238,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n             \"en\\u2013dash\",\n+            'trailingnewline\\n',\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -250,7 +251,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n \n     def test_ascii_validator(self):\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n-        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n+        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\", 'trailingnewline\\n']\n         v = validators.ASCIIUsernameValidator()\n         for valid in valid_usernames:\n             with self.subTest(valid=valid):\n@@ -258,4 +259,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..41327c9 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -1,5 +1,6 @@\n import os\n \n+import os\n from django.core.exceptions import ImproperlyConfigured\n from django.template import Context\n from django.template.engine import Engine\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..5da4a94 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -278,6 +278,20 @@ class QueryDictTests(SimpleTestCase):\n         expected['\u028e\u01dd\u029e'] = '\u01ddnl\u0250\u028c'\n         self.assertEqual(q, expected)\n \n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n+    def test_memoryview_content_with_long_text(self):\n+        long_text = memoryview(b'This is a longer content sample for memory view handling')\n+        r = HttpResponse(long_text)\n+        self.assertEqual(r.content, b'This is a longer content sample for memory view handling')\n+\n+    def test_memoryview_empty_content(self):\n+        # Test with empty memoryview\n+        r = HttpResponse(memoryview(b''))\n+        self.assertEqual(r.content, b'')\n+\n     def test_fromkeys_empty_iterable(self):\n         self.assertEqual(QueryDict.fromkeys([]), QueryDict(''))\n \n",
  "django__django-11141": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex b5a87e7..cfc81ae 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -509,6 +509,31 @@ class LoaderTests(TestCase):\n         self.assertEqual(migrations, ['0001_initial'])\n \n \n+class NamespacePackageTests(MigrationTestBase):\n+\n+    @override_settings(\n+        MIGRATION_MODULES={'migrations': 'migrations.test_migrations_namespace_package'},\n+    )\n+    def test_loading_namespace_package(self):\n+        \"\"\"Migration directories without an __init__.py file are loaded.\"\"\"\n+        loader = MigrationLoader(connection)\n+        plan = loader.graph.forwards_plan(('migrations', '0001_initial'))\n+        self.assertEqual(plan, [('migrations', '0001_initial')])\n+\n+    def test_migration_without_init(self):\n+        \"\"\"Test that a directory without __init__.py is treated correctly as implicit namespace package.\"\"\"\n+        with self.temporary_migration_module(module='migrations.test_migrations_no_init') as migration_dir:\n+            loader = MigrationLoader(connection)\n+            loader.load_disk()\n+            # Assert the presence of a migration in the directory\n+            migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n+            self.assertIn('0001_initial', migrations)\n+\n+# Ensure the import of necessary modules\n+from django.test import override_settings\n+from django.db.migrations.loader import MigrationLoader\n+from django.db import connection\n+\n class PycLoaderTests(MigrationTestBase):\n \n     def test_valid(self):\n",
  "django__django-11149": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 296cfba..7a34eee 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -665,7 +665,27 @@ class TestInlinePermissions(TestCase):\n         self.assertNotContains(response, 'id=\"id_Author_books-TOTAL_FORMS\"')\n         self.assertNotContains(response, 'id=\"id_Author_books-0-DELETE\"')\n \n-    def test_inline_change_m2m_change_perm(self):\n+    def test_inline_m2m_view_only_perm(self):\n+        # Grant only view permission for books\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+\n+        # Access the change view with only view permissions\n+        response = self.client.get(self.author_change_url)\n+\n+        # Validate that inline allows view only, with no add, change, or delete options\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+\n+        # View inlines should be visible\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+\n+        # Ensure that the content is displayed as read-only\n+        self.assertContains(response, '<p>%s</p>' % self.book)\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n+        self.assertNotContains(response, '<input type=\"checkbox\" name=\"Author_books-0-DELETE\" id=\"id_Author_books-0-DELETE\">', html=True)\n         permission = Permission.objects.get(codename='change_book', content_type=self.book_ct)\n         self.user.user_permissions.add(permission)\n         response = self.client.get(self.author_change_url)\n",
  "django__django-11163": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex b25d077..303a8ff 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2900,6 +2900,11 @@ class StrictAssignmentTests(SimpleTestCase):\n \n \n class ModelToDictTests(TestCase):\n+    def test_empty_fields_list(self):\n+        \"\"\"model_to_dict should return an empty dict if fields=[] is passed.\"\"\"\n+        writer = BetterWriter.objects.create(name='Test Writer', score=42)\n+        self.assertEqual(model_to_dict(writer, fields=[]), {})\n+\n     def test_many_to_many(self):\n         \"\"\"Data for a ManyToManyField is a list rather than a lazy QuerySet.\"\"\"\n         blue = Colour.objects.create(name='blue')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..894fd09 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,8 +1,9 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n-from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from django.db.models.deletion import Collector\n \n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n@@ -464,7 +465,41 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n-    def test_fast_delete_qs(self):\n+    def test_fast_delete_instance_set_pk_none(self):\n+        u = User.objects.create()\n+        # User can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n+    def test_fast_delete_multiple_instances(self):\n+        u1 = User.objects.create()\n+        u2 = User.objects.create()\n+        \n+        # Collect multiple users and delete them\n+        User.objects.all().delete()\n+        self.assertIsNone(u1.pk)\n+        self.assertIsNone(u2.pk)\n+\n+    def test_fast_delete_instance_with_existing_query(self):\n+        u = User.objects.create()\n+        User.objects.filter(pk=u.pk).delete()  # Deletes the object through a queryset\n+        self.assertIsNone(u.pk)\n+\n+    def test_delete_instance_after_modification(self):\n+        u = User.objects.create()\n+        u.username = \"modified_user\"\n+        u.save()\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n+    def test_collect_for_instance_with_no_dependencies(self):\n+        u = User.objects.create()\n+        collector = Collector(using='default')\n+        collector.collect([u])\n+        collector.delete()\n+        self.assertIsNone(u.pk)\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n         self.assertNumQueries(1, User.objects.filter(pk=u1.pk).delete)\n",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..6116b69 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -95,6 +95,8 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+            ('1e-199', 2, '0.00'),  # New test case to verify issue is fixed\n+            ('1e-200', 2, '0.00'),  # New test case to verify issue is fixed\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-11211": "diff --git a/tests/prefetch_related/models.py b/tests/prefetch_related/models.py\nindex 3ce4b3f..facb496 100644\n--- a/tests/prefetch_related/models.py\n+++ b/tests/prefetch_related/models.py\n@@ -1,3 +1,19 @@\n+\n+import uuid\n+\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=50)\n+\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n+\n import uuid\n \n from django.contrib.contenttypes.fields import (\n",
  "django__django-11239": "",
  "django__django-11265": "",
  "django__django-11276": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 4051a05..b41dc94 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -29,6 +29,15 @@ class TestUtilsHtml(SimpleTestCase):\n             ('\"', '&quot;'),\n             (\"'\", '&#39;'),\n         )\n+        # Test to check the difference in escaping single quotes\n+        django_escaped = escape(\"It's a test\")\n+        standard_escaped = html.escape(\"It's a test\")\n+        \n+        # We're testing for the escape difference highlighted in the issue\n+        self.assertNotEqual(django_escaped, standard_escaped)\n+        \n+        # Assert that the new standard escape method provides the expected output\n+        self.assertEqual(standard_escaped, \"It&#x27;s a test\")\n         # Substitution patterns for testing the above items.\n         patterns = (\"%s\", \"asdf%sfdsa\", \"%s1\", \"1%sb\")\n         for value, output in items:\n",
  "django__django-11292": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex b016284..be74bf2 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -253,8 +253,31 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertNoOutput(err)\n         self.assertEqual(out.strip(), 'Set foo')\n \n+    def test_run_manage_with_checks(self):\n+        \"\"\"\n+        Test running a management command without --skip-checks.\n+        Checks should be performed.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            # (staticfiles.E001) The STATICFILES_DIRS setting is not a tuple or list.\n+            'STATICFILES_DIRS': '\"foo\"',\n+        })\n+        out, err = self.run_manage(['set_option', '--set', 'foo'])\n+        self.assertIn('staticfiles.E001', err)\n+        self.assertNotIn('Set foo', out)\n \n-class UtilsTests(SimpleTestCase):\n+    def test_run_manage_with_skip_checks(self):\n+        \"\"\"\n+        Test running a management command with --skip-checks.\n+        Checks should not be performed.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            # (staticfiles.E001) The STATICFILES_DIRS setting is not a tuple or list.\n+            'STATICFILES_DIRS': '\"foo\"',\n+        })\n+        out, err = self.run_manage(['set_option', '--skip-checks', '--set', 'foo'])\n+        self.assertNoOutput(err)\n+        self.assertEqual(out.strip(), 'Set foo')\n \n     def test_no_existent_external_program(self):\n         msg = 'Error executing a_42_command_that_doesnt_exist_42'\n",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..0d496e4 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,5 +1,7 @@\n+\n from django.test import SimpleTestCase\n-from django.urls.resolvers import RegexPattern, RoutePattern\n+from django.urls.resolvers import RegexPattern, RoutePattern, get_resolver\n+from django.test.utils import override_settings\n from django.utils.translation import gettext_lazy as _\n \n \n@@ -9,7 +11,40 @@ class RegexPatternTests(SimpleTestCase):\n         self.assertEqual(str(RegexPattern(_('^translated/$'))), '^translated/$')\n \n \n+class ResolverCacheTests(SimpleTestCase):\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_default__root_urlconf(self):\n+        # resolver for a default URLconf (passing no argument) and for the\n+        # settings.ROOT_URLCONF is the same cached object.\n+        self.assertIs(get_resolver(), get_resolver('urlpatterns.path_urls'))\n+        self.assertIsNot(get_resolver(), get_resolver('urlpatterns.path_dynamic_urls'))\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_with_different_urlconfs(self):\n+        # Test resolution before and after `set_urlconf` is called\n+        initial_resolver = get_resolver()\n+        self.assertIs(initial_resolver, get_resolver('urlpatterns.path_urls'))\n+\n+        # Simulate a request being handled which would call `set_urlconf`\n+        from django.urls import set_urlconf\n+        set_urlconf('urlpatterns.path_urls')\n+        \n+        # After a request, it should still return the same resolver since it is cached\n+        subsequent_resolver = get_resolver()\n+        self.assertIs(initial_resolver, subsequent_resolver)\n+\n+        # Ensure that a different URLconf produces a different resolver\n+        self.assertIsNot(get_resolver('urlpatterns.path_dynamic_urls'), initial_resolver)\n+\n+    @override_settings(ROOT_URLCONF=None)\n+    def test_resolver_without_explicit_root_urlconf(self):\n+        # If ROOT_URLCONF is None, the behavior should default to using no configuration\n+        resolver = get_resolver()\n+        self.assertIsNotNone(resolver)\n+\n+\n class RoutePatternTests(SimpleTestCase):\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "",
  "django__django-11490": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex e627a0d..f6d283f 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -124,6 +124,21 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.union(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n+    def test_values_list_after_union(self):\n+        ReservedName.objects.create(name='a', order=2)\n+        qs1 = ReservedName.objects.all()\n+        \n+        # Test changing the column list after union\n+        reserved_order = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(reserved_order, (2,))\n+        \n+        reserved_name = qs1.union(qs1).values_list('name').get()\n+        self.assertEqual(reserved_name, ('a',))\n+    \n+        # Test changing to a single column in values_list after union\n+        reserved_id = qs1.union(qs1).values_list('id').get()\n+        self.assertIsInstance(reserved_id[0], int)\n+\n     def test_union_with_two_annotated_values_list(self):\n         qs1 = Number.objects.filter(num=1).annotate(\n             count=Value(0, IntegerField()),\n",
  "django__django-11532": "",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..378e0c6 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,9 +1,10 @@\n+\n from django import forms\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n-from django.db.models import F\n+from django.db.models import F, Field, Model\n from django.db.models.functions import Upper\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..7c14081 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -2,6 +2,8 @@ from datetime import datetime\n from operator import attrgetter\n \n from django.core.exceptions import FieldError\n+from django.db import models\n+from datetime import datetime\n from django.db.models import (\n     CharField, Count, DateTimeField, F, Max, OuterRef, Subquery, Value,\n )\n@@ -462,7 +464,17 @@ class OrderingTests(TestCase):\n             attrgetter('headline')\n         )\n \n-    def test_deprecated_values_annotate(self):\n+    def test_order_by_parent_with_meta_ordering_expression(self):\n+        # This test case is created based on the specific issue mentioned.\n+        # It attempts to order the parent model when Meta.ordering contains expressions.\n+        ParentArticles = OrderedByFArticle.objects.all()\n+\n+        ordered_articles = ParentArticles.order_by('id')\n+        self.assertSequenceEqual(\n+            ordered_articles, \n+            [self.a1, self.a2, self.a3, self.a4], \n+            \"Ordering parent model with expression in Meta.ordering should not fail\"\n+        )\n         msg = (\n             \"Article QuerySet won't use Meta.ordering in Django 3.1. Add \"\n             \".order_by('-pub_date', 'headline', OrderBy(F(author__name), \"\n",
  "django__django-11603": "",
  "django__django-11740": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a98fff5..85fbcca 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2391,12 +2391,25 @@ class AutodetectorTests(TestCase):\n         self.assertOperationTypes(changes, 'testapp', 0, [\"AddField\", \"AddField\"])\n         self.assertOperationAttributes(changes, 'testapp', 0, 0)\n \n-    def test_mti_inheritance_model_removal(self):\n-        Animal = ModelState('app', 'Animal', [\n-            (\"id\", models.AutoField(primary_key=True)),\n+    def test_alter_uuid_to_fk_creates_dependency(self):\n+        \"\"\"\n+        Test that converting a UUIDField to a ForeignKey creates \n+        the correct migration dependency.\n+        \"\"\"\n+        app1_with_uuid = ModelState(\"testapp1\", \"App1\", [\n+            (\"id\", models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)),\n+            (\"another_app\", models.UUIDField(null=True, blank=True)),\n         ])\n-        Dog = ModelState('app', 'Dog', [], bases=('app.Animal',))\n-        changes = self.get_changes([Animal, Dog], [Animal])\n-        self.assertNumberMigrations(changes, 'app', 1)\n-        self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+            (\"id\", models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)),\n+            (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState(\"testapp2\", \"App2\", [\n+            (\"id\", models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)),\n+        ])\n+        \n+        changes = self.get_changes([app1_with_uuid, app2], [app1_with_fk, app2])\n+        \n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n",
  "django__django-11749": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex a0e1530..a0a69a4 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -224,6 +224,35 @@ class CommandTests(SimpleTestCase):\n         management.call_command('subparser_dest', 'foo', bar=12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n \n+    def test_mutually_exclusive_group_required_options(self):\n+        out = StringIO()\n+        management.call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+        \n+        out = StringIO()\n+        management.call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+        \n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            management.call_command('mutually_exclusive_required', stdout=out)\n+\n+    def test_mutually_exclusive_group_kwargs_handling(self):\n+        out = StringIO()\n+        # Test with foo_id passed as a kwarg\n+        management.call_command('mutually_exclusive_required', foo_id=2, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+        \n+        out = StringIO()\n+        # Test with foo_name passed as a kwarg\n+        management.call_command('mutually_exclusive_required', foo_name='bar', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+\n+        out = StringIO()\n+        # Test with neither argument passed, expect error\n+        with self.assertRaisesMessage(CommandError, 'Error: one of the arguments --foo-id --foo-name is required'):\n+            management.call_command('mutually_exclusive_required', stdout=out)\n+\n     def test_subparser_dest_required_args(self):\n         out = StringIO()\n         management.call_command('subparser_required', 'foo_1', 'foo_2', bar=12, stdout=out)\n",
  "django__django-11790": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 440150b..a6f9b5e 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -436,8 +436,27 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         form = AuthenticationForm(None, data)\n         self.assertEqual(form.fields['username'].max_length, 254)\n         self.assertEqual(form.errors, {})\n+    def test_username_field_max_length_rendering(self):\n+        \"\"\"\n+        Confirm that the maxlength HTML attribute is set correctly.\n+        \"\"\"\n+        data = {\n+            'username': 'u' * 255,\n+            'password': 'pwd',\n+        }\n+        # Assuming the default user model is used here:\n+        form = AuthenticationForm(None, data)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 255)\n \n-    def test_username_field_label(self):\n+        # For a custom user model with a default max_length of 254\n+        with override_settings(AUTH_USER_MODEL='auth_tests.IntegerUsernameUser'):\n+            data = {\n+                'username': '0123456',\n+                'password': 'password',\n+            }\n+            IntegerUsernameUser.objects.create_user(**data)\n+            form = AuthenticationForm(None, data)\n+            self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 254)\n \n         class CustomAuthenticationForm(AuthenticationForm):\n             username = CharField(label=\"Name\", max_length=75)\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..6f070fa 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -247,7 +247,26 @@ class WriterTests(SimpleTestCase):\n             (\"[list, tuple, dict, set, frozenset]\", set())\n         )\n \n-    def test_serialize_lazy_objects(self):\n+    def test_serialize_enum_default_value(self):\n+        from django.utils.translation import gettext_lazy as _\n+        from django.db import models\n+\n+        class Status(enum.Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+\n+        field = models.CharField(default=Status.GOOD, choices=[(m.value, m.name) for m in Status])\n+\n+        serialized_string = MigrationWriter.serialize(field)[0]\n+\n+        expected_string = (\n+            \"models.CharField(choices=[\"\n+            \"('Good', 'GOOD'), \"\n+            \"('Bad', 'BAD')], \"\n+            \"default=migrations.test_writer.Status['GOOD'])\"\n+        )\n+\n+        self.assertEqual(serialized_string, expected_string)\n         pattern = re.compile(r'^foo$')\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n         self.assertEqual(self.serialize_round_trip(lazy_pattern), pattern)\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..0b08a9d 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,6 +1,8 @@\n+\n import unittest\n from datetime import datetime\n \n+from unittest import mock\n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n from django.utils.deprecation import RemovedInDjango40Warning\n@@ -324,7 +326,28 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun Nov  6 08:49:37 1994')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_year_less_than_70(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_year_logic(self, mocked_datetime):\n+        # Mock the current time as December 31, 2020\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+        utcnow = datetime(2020, 12, 31, 23, 59, 59)\n+\n+        mocked_datetime.utcnow.return_value = utcnow\n+\n+        # Test cases: these will test if the logic for year determination is corrected\n+        tests = [\n+            ('Tuesday, 31-Dec-69 23:59:59 GMT', datetime(2069, 12, 31, 23, 59, 59)),  # 69 to 2069, as 69 is not >50 years from 2020\n+            ('Wednesday, 31-Dec-70 23:59:59 GMT', datetime(1970, 12, 31, 23, 59, 59)),  # 70 to 1970, as 70 is >50 years from 2020\n+            ('Friday, 31-Dec-71 23:59:59 GMT', datetime(1971, 12, 31, 23, 59, 59)),    # 71 to 1971\n+            ('Sunday, 31-Dec-20 23:59:59 GMT', datetime(2020, 12, 31, 23, 59, 59)),    # 20 to 2020\n+            ('Sunday, 31-Dec-19 23:59:59 GMT', datetime(2019, 12, 31, 23, 59, 59)),    # 19 to 2019\n+        ]\n+\n+        for rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n         parsed = parse_http_date('Sun Nov  6 08:49:37 0037')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(2037, 11, 6, 8, 49, 37))\n \n",
  "django__django-11880": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 95afc0d..777b519 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3672,7 +3672,47 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n             '<input type=\"hidden\" name=\"data\" id=\"id_data\"></td></tr>'\n         )\n \n-    def test_field_named_data(self):\n+    def test_field_deep_copy_error_messages(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+        \n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        self.assertIsInstance(field_copy, CustomCharField)\n+        self.assertIsNot(field_copy.error_messages, field.error_messages)\n+        self.assertEqual(field_copy.error_messages['invalid'], 'Form custom error message.')\n+\n+    def test_deep_copy_modifications_dont_affect_original(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Original error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        field_copy.error_messages['invalid'] = 'New error message.'\n+\n+        # Ensure original field's error message is unchanged\n+        self.assertEqual(field.error_messages['invalid'], 'Original error message.')\n+\n+    def test_multiple_copies_independence(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Initial message.'}\n+                super().__init__(**kwargs)\n+        \n+        field = CustomCharField()\n+        field_copy1 = copy.deepcopy(field)\n+        field_copy2 = copy.deepcopy(field)\n+        field_copy1.error_messages['invalid'] = 'Field copy 1 message.'\n+        field_copy2.error_messages['invalid'] = 'Field copy 2 message.'\n+\n+        # Ensure all copies have their own error message\n+        self.assertEqual(field.error_messages['invalid'], 'Initial message.')\n+        self.assertEqual(field_copy1.error_messages['invalid'], 'Field copy 1 message.')\n+        self.assertEqual(field_copy2.error_messages['invalid'], 'Field copy 2 message.')\n         class DataForm(Form):\n             data = CharField(max_length=10)\n \n",
  "django__django-11951": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex f2f6bbd..f6a2792 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -1,3 +1,5 @@\n+\n+from math import ceil\n from operator import attrgetter\n \n from django.db import IntegrityError, NotSupportedError, connection\n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..5ecda48 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -40,7 +40,18 @@ class Gender(models.TextChoices):\n     __empty__ = '(Undeclared)'\n \n \n-class ChoicesTests(SimpleTestCase):\n+from django.utils.translation import gettext_lazy as _\n+...\n+\n+class MyEnum(models.TextChoices):\n+    FIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n+    SECOND_CHOICE = \"second\", _(\"The second choice, it is\")\n+\n+class MyEnumTests(SimpleTestCase):\n+    def test_enum_str(self):\n+        # Verify the string conversion of the enum is as expected\n+        self.assertEqual(str(MyEnum.FIRST_CHOICE), \"first\")\n+        self.assertEqual(str(MyEnum.SECOND_CHOICE), \"second\")\n     def test_integerchoices(self):\n         self.assertEqual(Suit.choices, [(1, 'Diamond'), (2, 'Spade'), (3, 'Heart'), (4, 'Club')])\n         self.assertEqual(Suit.labels, ['Diamond', 'Spade', 'Heart', 'Club'])\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..96f9d17 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -150,6 +150,16 @@ class ChoicesTests(SimpleTestCase):\n \n class GetFieldDisplayTests(SimpleTestCase):\n \n+    def test_overriding_get_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+    \n     def test_choices_and_field_display(self):\n         \"\"\"\n         get_choices() interacts with get_FIELD_display() to return the expected\n",
  "django__django-12039": "diff --git a/tests/indexes/tests.py b/tests/indexes/tests.py\nindex 700f574..dcee012 100644\n--- a/tests/indexes/tests.py\n+++ b/tests/indexes/tests.py\n@@ -10,7 +10,9 @@ from django.test import (\n     TestCase, TransactionTestCase, skipIfDBFeature, skipUnlessDBFeature,\n )\n from django.test.utils import override_settings\n-from django.utils import timezone\n+from django.db import connection\n+from django.db.models import Index\n+from django.db.models import ForeignKey, CASCADE\n \n from .models import (\n     Article, ArticleTranslation, IndexedArticle2, IndexTogetherSingleList,\n",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..23c8113 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n@@ -7,6 +8,7 @@ from django.db.models.fields.related_lookups import RelatedIsNull\n from django.db.models.functions import Lower\n from django.db.models.lookups import Exact, GreaterThan, IsNull, LessThan\n from django.db.models.sql.query import Query\n+from .models import Item\n from django.db.models.sql.where import OR\n from django.test import SimpleTestCase\n from django.test.utils import register_lookup\n@@ -15,7 +17,12 @@ from .models import Author, Item, ObjectC, Ranking\n \n \n class TestQuery(SimpleTestCase):\n-    def test_simple_query(self):\n+    def test_iterable_lookup_value(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=['a', 'b']))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ['a', 'b'])\n         query = Query(Author)\n         where = query.build_where(Q(num__gt=2))\n         lookup = where.children[0]\n",
  "django__django-12125": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex e62f7b0..4e1d949 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -179,11 +179,53 @@ class OperationWriterTests(SimpleTestCase):\n             '),'\n         )\n \n+from django.db import models\n+from django.db.migrations.writer import MigrationWriter\n+from django.test import SimpleTestCase\n+from enumfields import Enum, EnumField\n+import enum\n \n class WriterTests(SimpleTestCase):\n     \"\"\"\n     Tests the migration writer (makes migration files from Migration instances)\n     \"\"\"\n+\n+    class Outer:\n+        class Inner(models.CharField):\n+            pass\n+\n+    class Thing(models.Model):\n+        @enum.unique\n+        class State(Enum):\n+            on = 'on'\n+            off = 'off'\n+        state = EnumField(enum=State)\n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test if the makemigrations command serializes inner classes correctly.\n+        \"\"\"\n+        field = self.Outer.Inner(max_length=20)\n+        migration_string, imports = MigrationWriter.serialize(field)\n+        expected_string = \"tests.migrations.test_writer.WriterTests.Outer.Inner(max_length=20)\"\n+        self.assertIn(expected_string, migration_string)\n+        self.assertIn('import tests.migrations.test_writer', imports)\n+\n+    def test_serialize_enum_field(self):\n+        \"\"\"\n+        Ensure the enumfields library EnumField serializes with full path including its class.\n+        \"\"\"\n+        field = self.Thing._meta.get_field('state')\n+        migration_string, imports = MigrationWriter.serialize(field)\n+        expected_string = (\n+            \"enumfields.fields.EnumField(enum=\"\n+            \"tests.migrations.test_writer.WriterTests.Thing.State, max_length=10)\"\n+        )\n+        self.assertIn(expected_string, migration_string)\n+        self.assertIn('import tests.migrations.test_writer', imports)\n+    \"\"\"\n+    Tests the migration writer (makes migration files from Migration instances)\n+    \"\"\"\n     class NestedEnum(enum.IntEnum):\n         A = 1\n         B = 2\n@@ -746,4 +788,4 @@ class WriterTests(SimpleTestCase):\n \n     def test_register_non_serializer(self):\n         with self.assertRaisesMessage(ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "django__django-12143": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 2d13234..83c7103 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -844,7 +844,45 @@ class ChangeListTests(TestCase):\n         queryset = m._get_list_editable_queryset(request, prefix='form')\n         self.assertEqual(queryset.count(), 2)\n \n-    def test_changelist_view_list_editable_changed_objects_uses_filter(self):\n+    def test_get_list_editable_queryset_with_regex_chars_in_prefix(self):\n+        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n+        Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n+        data = {\n+            'form*-TOTAL_FORMS': '2',\n+            'form*-INITIAL_FORMS': '2',\n+            'form*-MIN_NUM_FORMS': '0',\n+            'form*-MAX_NUM_FORMS': '1000',\n+            'form*-0-uuid': str(a.pk),\n+            'form*-0-load': '10',\n+            '_save': 'Save',\n+        }\n+        superuser = self._create_superuser('superuser')\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form*')\n+        self.assertEqual(queryset.count(), 1)\n+\n+    def test_get_list_editable_queryset_with_special_and_numeric_chars_in_prefix(self):\n+        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n+        Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n+        data = {\n+            'form123.!#-TOTAL_FORMS': '2',\n+            'form123.!#-INITIAL_FORMS': '2',\n+            'form123.!#-MIN_NUM_FORMS': '0',\n+            'form123.!#-MAX_NUM_FORMS': '1000',\n+            'form123.!#-0-uuid': str(a.pk),\n+            'form123.!#-0-load': '10',\n+            '_save': 'Save',\n+        }\n+        superuser = self._create_superuser('superuser')\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form123.!#')\n+        self.assertEqual(queryset.count(), 1)\n         \"\"\"list_editable edits use a filtered queryset to limit memory usage.\"\"\"\n         a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n         Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n",
  "django__django-12155": "",
  "django__django-12193": "diff --git a/tests/forms_tests/widget_tests/test_checkboxinput.py b/tests/forms_tests/widget_tests/test_checkboxinput.py\nindex 5c5e45d..77b1cf5 100644\n--- a/tests/forms_tests/widget_tests/test_checkboxinput.py\n+++ b/tests/forms_tests/widget_tests/test_checkboxinput.py\n@@ -82,10 +82,30 @@ class CheckboxInputTest(WidgetTest):\n         \"\"\"\n         self.assertFalse(self.widget.value_from_datadict({}, {}, 'testing'))\n \n+    def test_multiple_values(self):\n+        # Test case to ensure that CheckboxInput does not incorrectly mutate the attrs dict\n+        widget = forms.CheckboxInput()\n+        initial_attrs = {'checked': False}\n+        \n+        # First test for Single True value and succeeding False value\n+        context1 = widget.get_context('name', True, initial_attrs.copy())\n+        context2 = widget.get_context('name', False, initial_attrs.copy())\n+        \n+        self.assertEqual(context1['widget']['attrs']['checked'], True)\n+        self.assertNotIn('checked', context2['widget']['attrs'])\n+\n+        # Now test with multiple values to check if any mutation occurs\n+        widget.get_context('name', [True, False, True], initial_attrs.copy())\n+        self.assertEqual(initial_attrs, {'checked': False})\n+\n+        # Ensure that subsequent True values do not cause unchecked ones to become checked\n+        context3 = widget.get_context('name', False, initial_attrs.copy())\n+        self.assertNotIn('checked', context3['widget']['attrs'])\n+\n     def test_value_from_datadict_string_int(self):\n         value = self.widget.value_from_datadict({'testing': '0'}, {}, 'testing')\n         self.assertIs(value, True)\n \n     def test_value_omitted_from_data(self):\n         self.assertIs(self.widget.value_omitted_from_data({'field': 'value'}, {}, 'field'), False)\n-        self.assertIs(self.widget.value_omitted_from_data({}, {}, 'field'), False)\n+        self.assertIs(self.widget.value_omitted_from_data({}, {}, 'field'), False)\n",
  "django__django-12209": "diff --git a/tests/serializers/models/data.py b/tests/serializers/models/data.py\nindex 946715d..5fe05b8 100644\n--- a/tests/serializers/models/data.py\n+++ b/tests/serializers/models/data.py\n@@ -249,6 +249,10 @@ class SmallPKData(models.Model):\n # class TextPKData(models.Model):\n #     data = models.TextField(primary_key=True)\n \n+class Sample(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid4)\n+    name = models.CharField(blank=True, max_length=100)\n+\n # class TimePKData(models.Model):\n #    data = models.TimeField(primary_key=True)\n \n",
  "django__django-12262": "diff --git a/tests/template_tests/test_custom.py b/tests/template_tests/test_custom.py\nindex 8a8c535..1c04beb 100644\n--- a/tests/template_tests/test_custom.py\n+++ b/tests/template_tests/test_custom.py\n@@ -88,7 +88,20 @@ class SimpleTagTests(TagTestCase):\n             self.assertEqual(t.render(c), \"Result: %s\" % entry[1])\n \n     def test_simple_tag_errors(self):\n+        templates.extend([\n+            # Test for keyword-only argument with default value\n+            ('{% load custom %}{% hello %}', 'hello world'),\n+            ('{% load custom %}{% hello greeting=\"hi\" %}', 'hi world'),\n+        ])\n+\n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n         errors = [\n+            # Test for multiple values for the same keyword argument\n+            (\"'hello' received multiple values for keyword argument 'greeting'\",\n+             '{% load custom %}{% hello greeting=\"hi\" greeting=\"hello\" %}'),\n             (\"'simple_one_default' received unexpected keyword argument 'three'\",\n                 '{% load custom %}{% simple_one_default 99 two=\"hello\" three=\"foo\" %}'),\n             (\"'simple_two_params' received too many positional arguments\",\n@@ -197,7 +210,20 @@ class InclusionTagTests(TagTestCase):\n             self.assertEqual(t.render(c), entry[1])\n \n     def test_inclusion_tag_errors(self):\n+        templates.extend([\n+            # Test for keyword-only argument with default value\n+            ('{% load custom %}{% hello %}', 'hello world'),\n+            ('{% load custom %}{% hello greeting=\"hi\" %}', 'hi world'),\n+        ])\n+\n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n         errors = [\n+            # Test for multiple values for the same keyword argument\n+            (\"'hello' received multiple values for keyword argument 'greeting'\",\n+             '{% load custom %}{% hello greeting=\"hi\" greeting=\"hello\" %}'),\n             (\"'inclusion_one_default' received unexpected keyword argument 'three'\",\n                 '{% load inclusion %}{% inclusion_one_default 99 two=\"hello\" three=\"foo\" %}'),\n             (\"'inclusion_two_params' received too many positional arguments\",\n",
  "django__django-12276": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 61f7a13..c14256e 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import copy\n import datetime\n import json\n@@ -2478,6 +2479,29 @@ Password: <input type=\"password\" name=\"password\" required>\n             '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n         )\n \n+    def test_filefield_with_fileinput_required_initial_data(self):\n+        class FileForm(Form):\n+            file1 = FileField(widget=FileInput, required=True)\n+\n+        # Test with no initial data; input should be required.\n+        form_no_initial = FileForm()\n+        self.assertHTMLEqual(\n+            form_no_initial.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n+        )\n+\n+        # Test with initial data; input should not be required.\n+        form_with_initial = FileForm(initial={'file1': 'dummy.txt'})\n+        self.assertHTMLEqual(\n+            form_with_initial.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n+        )\n+\n+        # Test with data provided in files\n+        uploaded_file = SimpleUploadedFile('dummy.txt', b'This is a test file.')\n+        form_with_files = FileForm(files={'file1': uploaded_file})\n+        self.assertEqual(form_with_files.is_valid(), True)\n+\n     def test_filefield_initial_callable(self):\n         class FileForm(forms.Form):\n             file1 = forms.FileField(initial=lambda: 'resume.txt')\n",
  "django__django-12304": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 6cabf01..a7e1115 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import decimal\n import ipaddress\n@@ -6,6 +7,7 @@ import uuid\n from django.db import models\n from django.test import SimpleTestCase\n from django.utils.functional import Promise\n+from django.template import Context, Template\n from django.utils.translation import gettext_lazy as _\n \n \n",
  "django__django-12308": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex acbcf33..2295523 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -176,7 +176,21 @@ class UtilsTests(SimpleTestCase):\n         display_value = display_for_field(None, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, self.empty_value)\n \n-    def test_number_formats_display_for_field(self):\n+    def test_jsonfield_display_for_field(self):\n+        \"\"\"Test JSONField values are correctly displayed as JSON in admin when read-only.\"\"\"\n+        tests = [\n+            ({\"foo\": \"bar\"}, '{\"foo\": \"bar\"}'),  # Correct JSON display\n+            ({\"name\": \"test\", \"value\": [1, 2, 3]}, '{\"name\": \"test\", \"value\": [1, 2, 3]}'),\n+            ([\"one\", \"two\"], '[\"one\", \"two\"]'),  # List as JSON\n+            (123, '123'),  # Number as JSON\n+            (\"simple string\", '\"simple string\"'),  # String as JSON\n+            ({('invalid', 'json'): 'example'}, \"{('invalid', 'json'): 'example'}\"),  # Invalid JSON\n+        ]\n+        \n+        for value, expected_display in tests:\n+            with self.subTest(value=value):\n+                display_value = display_for_field(value, models.JSONField(), self.empty_value)\n+                self.assertEqual(display_value, expected_display)\n         display_value = display_for_field(12345.6789, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, '12345.6789')\n \n",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..d84728a 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1005,8 +1005,26 @@ class OtherModelTests(SimpleTestCase):\n             from_country = models.ForeignKey(Country, models.CASCADE)\n \n         self.assertEqual(ShippingMethod.check(), [])\n+    def test_multiple_onetoone_references_with_parent_link(self):\n+        class Document(models.Model):\n+            pass\n+\n+        class Picking(Document):\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+        \n+        self.assertEqual(Picking.check(), [])\n+\n+    def test_onetoone_order_matters(self):\n+        # Test the order of fields matters\n+        class Document(models.Model):\n+            pass\n+\n+        class PickingOrder(Document):\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n \n-    def test_missing_parent_link(self):\n+        self.assertEqual(PickingOrder.check(), [])\n         msg = 'Add parent_link=True to invalid_models_tests.ParkingLot.parent.'\n         with self.assertRaisesMessage(ImproperlyConfigured, msg):\n             class Place(models.Model):\n",
  "django__django-12419": "diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py\nindex 7af62eb..04b6359 100644\n--- a/tests/middleware/test_security.py\n+++ b/tests/middleware/test_security.py\n@@ -231,7 +231,14 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         \"\"\"\n         self.assertNotIn('Referrer-Policy', self.process_response())\n \n-    def test_referrer_policy_on(self):\n+    @override_settings(SECURE_REFERRER_POLICY=None)\n+    def test_referrer_policy_default(self):\n+        \"\"\"\n+        When SECURE_REFERRER_POLICY is not set, the default \"Referrer-Policy\" \n+        should be \"same-origin\".\n+        \"\"\"\n+        response = self.process_response()\n+        self.assertEqual(response.get('Referrer-Policy'), 'same-origin')\n         \"\"\"\n         With SECURE_REFERRER_POLICY set to a valid value, the middleware adds a\n         \"Referrer-Policy\" header to the response.\n@@ -254,4 +261,4 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         present in the response.\n         \"\"\"\n         response = self.process_response(headers={'Referrer-Policy': 'unsafe-url'})\n-        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n",
  "django__django-12663": "",
  "django__django-12708": "",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..1cdb3b5 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -14,7 +14,8 @@ from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.auth.models import User\n from django.core.files.storage import default_storage\n from django.core.files.uploadedfile import SimpleUploadedFile\n-from django.db.models import CharField, DateField, DateTimeField, UUIDField\n+from django.db.models import CharField, DateField, DateTimeField, UUIDField, ManyToManyField\n+from django import forms  # Import forms to use CheckboxSelectMultiple\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n@@ -138,7 +139,19 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n         self.assertEqual(f2.widget.attrs['maxlength'], '20')\n         self.assertEqual(f2.widget.attrs['size'], '10')\n \n-    def test_formfield_overrides_for_datetime_field(self):\n+    def test_formfield_overrides_m2m_widget(self):\n+        \"\"\"\n+        Ensure that the widget for ManyToManyField can be overridden.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            filter_vertical = ['members']\n+            formfield_overrides = {\n+                ManyToManyField: {'widget': forms.CheckboxSelectMultiple},\n+            }\n+\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, forms.CheckboxSelectMultiple)\n         \"\"\"\n         Overriding the widget for DateTimeField doesn't overrides the default\n         form_class for that field (#26449).\n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..b0ffe95 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,7 +172,7 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n@@ -181,4 +181,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 17e707b..66b2d11 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2444,6 +2444,30 @@ class AutodetectorTests(TestCase):\n         self.assertNumberMigrations(changes, 'testapp', 1)\n         self.assertOperationTypes(changes, 'testapp', 0, [\"AddField\", \"AddField\"])\n         self.assertOperationAttributes(changes, 'testapp', 0, 0)\n+    def test_add_model_with_field_removed_from_base_model(self):\n+        \"\"\"\n+        Removing a base field takes place before adding a new inherited model\n+        that has a field with the same name.\n+        \"\"\"\n+        before = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('title', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        after = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+            ]),\n+            ModelState('app', 'book', [\n+                ('title', models.CharField(max_length=200)),\n+            ], bases=('app.readable',)),\n+        ]\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'app', 1)\n+        self.assertOperationTypes(changes, 'app', 0, ['RemoveField', 'CreateModel'])\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='title', model_name='readable')\n+        self.assertOperationAttributes(changes, 'app', 0, 1, name='book')\n \n     def test_mti_inheritance_model_removal(self):\n         Animal = ModelState('app', 'Animal', [\n@@ -2453,4 +2477,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..413a089 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -8,7 +8,8 @@ from django.db import connection\n from django.db.models import Exists, Max, OuterRef\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n-from django.utils.deprecation import RemovedInDjango40Warning\n+from django.test.utils import isolate_apps\n+from django.db import models\n \n from .models import (\n     Article, Author, Freebie, Game, IsNullWithNoneAsRHS, Player, Season, Tag,\n",
  "django__django-12858": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 3b6974f..23c4d52 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -892,8 +892,36 @@ class OtherModelTests(SimpleTestCase):\n \n         with register_lookup(models.CharField, Lower):\n             self.assertEqual(Model.check(), [])\n+    \n+    def test_ordering_with_nested_nullable_fk_isnull(self):\n+        class Supply(models.Model):\n+            product = models.ForeignKey('Product', models.CASCADE)\n \n-    def test_ordering_pointing_to_related_model_pk(self):\n+        class Product(models.Model):\n+            parent = models.ForeignKey('self', models.CASCADE, null=True)\n+\n+        class Stock(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('supply__product__parent__isnull',)\n+\n+        self.assertEqual(Stock.check(), [])\n+\n+    def test_reverse_ordering_with_nested_nullable_fk_isnull(self):\n+        class Supply(models.Model):\n+            product = models.ForeignKey('Product', models.CASCADE)\n+\n+        class Product(models.Model):\n+            parent = models.ForeignKey('self', models.CASCADE, null=True)\n+\n+        class Stock(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('-supply__product__parent__isnull',)\n+\n+        self.assertEqual(Stock.check(), [])\n         class Parent(models.Model):\n             pass\n \n",
  "django__django-13012": "",
  "django__django-13028": "diff --git a/tests/queries/models.py b/tests/queries/models.py\nindex a43cfb4..5f77a59 100644\n--- a/tests/queries/models.py\n+++ b/tests/queries/models.py\n@@ -67,6 +67,7 @@ class ExtraInfo(models.Model):\n     info = models.CharField(max_length=100)\n     note = models.ForeignKey(Note, models.CASCADE, null=True)\n     value = models.IntegerField(null=True)\n+    filterable = models.BooleanField(default=True)\n     date = models.ForeignKey(DateTimePK, models.SET_NULL, null=True)\n \n     class Meta:\n",
  "django__django-13033": "",
  "django__django-13089": "",
  "django__django-13109": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex d60d822..2324937 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -1645,7 +1645,56 @@ class ModelFormBasicTests(TestCase):\n         obj.full_clean()\n \n \n-class ModelMultipleChoiceFieldTests(TestCase):\n+from django import forms\n+from django.test import TestCase\n+from django.db import models\n+from django.core.exceptions import ValidationError\n+import datetime\n+\n+class ArticleManager(models.Manager):\n+    def get_queryset(self):\n+        qs = super().get_queryset()\n+        return qs.filter(archived=False)\n+\n+class Article(models.Model):\n+    title = models.CharField(max_length=100)\n+    archived = models.BooleanField(default=False)\n+    objects = ArticleManager()\n+\n+class FavoriteArticle(models.Model):\n+    article = models.ForeignKey(Article, on_delete=models.CASCADE)\n+\n+class ForeignKeyValidationTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.article = Article.objects.create(title=\"Archived Article\", archived=True)\n+\n+    def test_foreign_key_using_default_manager_fails_for_archived(self):\n+        class FavoriteArticleForm(forms.ModelForm):\n+            class Meta:\n+                model = FavoriteArticle\n+                fields = '__all__'\n+\n+        data = {'article': self.article.pk}\n+        form = FavoriteArticleForm(data)\n+        self.assertFalse(form.is_valid())\n+        self.assertEqual(form.errors, {'article': ['Select a valid choice. That choice is not one of the available choices.']})\n+\n+    def test_foreign_key_using_base_manager_passes_for_archived(self):\n+        class FavoriteArticleForm(forms.ModelForm):\n+            class Meta:\n+                model = FavoriteArticle\n+                fields = '__all__'\n+\n+            def __init__(self, *args, **kwargs):\n+                super().__init__(*args, **kwargs)\n+                self.fields['article'].queryset = Article._base_manager.all()\n+\n+        data = {'article': self.article.pk}\n+        form = FavoriteArticleForm(data)\n+        self.assertTrue(form.is_valid())\n+        instance = form.save(commit=False)\n+        self.assertEqual(instance.article, self.article)\n     @classmethod\n     def setUpTestData(cls):\n         cls.c1 = Category.objects.create(name='Entertainment', slug='entertainment', url='entertainment')\n",
  "django__django-13112": "",
  "django__django-13121": "",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..152d7da 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1618,7 +1618,24 @@ class FTimeDeltaTests(TestCase):\n         self.assertTrue(queryset.exists())\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n-    def test_datetime_subtraction_microseconds(self):\n+    def test_temporal_subtraction_without_expression_wrapper(self):\n+        # Test direct subtraction of DateTimeFields without ExpressionWrapper\n+        experiments = Experiment.objects.annotate(\n+            direct_delta=F('end') - F('start')\n+        )\n+        for e in experiments:\n+            self.assertEqual(e.direct_delta, e.end - e.start)\n+\n+        # Ensure filtering on the result of direct subtraction is correct\n+        under_estimate_direct = [\n+            e.name for e in Experiment.objects.filter(estimated_time__gt=F('end') - F('start'))\n+        ]\n+        self.assertEqual(under_estimate_direct, ['e2'])\n+\n+        over_estimate_direct = [\n+            e.name for e in Experiment.objects.filter(estimated_time__lt=F('end') - F('start'))\n+        ]\n+        self.assertEqual(over_estimate_direct, ['e4'])\n         delta = datetime.timedelta(microseconds=8999999999999999)\n         Experiment.objects.update(end=F('start') + delta)\n         qs = Experiment.objects.annotate(\n",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..f00fa07 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -38,8 +38,14 @@ class QuerySetSetOperationTests(TestCase):\n         self.assertEqual(reserved_name['order'], 2)\n         reserved_name = qs1.intersection(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n-\n-    @skipUnlessDBFeature('supports_select_difference')\n+    def test_union_none_behavior(self):\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        combined_qs = qs1.union(qs2)\n+        # Check if applying none() on a union queryset works as expected.\n+        self.assertNumbersEqual(combined_qs.none(), [], ordered=False)\n+        # The original combined queryset should be unaffected by the none() call.\n+        self.assertNumbersEqual(combined_qs, [0, 1, 8, 9], ordered=False)\n     def test_simple_difference(self):\n         qs1 = Number.objects.filter(num__lte=5)\n         qs2 = Number.objects.filter(num__lte=4)\n",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..bff4b94 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -35,6 +35,7 @@ from django.test import (\n )\n from django.utils import timezone\n \n+from django.utils.deprecation import RemovedInDjango40Warning\n from .models import SessionStore as CustomDatabaseSession\n \n \n@@ -312,6 +313,13 @@ class SessionTestsMixin:\n         self.assertEqual(self.session.decode(encoded), data)\n \n     @override_settings(SECRET_KEY='django_tests_secret_key')\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    @override_settings(DEFAULT_HASHING_ALGORITHM='sha1')\n+    def test_default_hashing_algorithm_legacy_decode(self):\n+        data = {'a test key': 'a test value'}\n+        encoded = self.session.encode(data)\n+        self.assertEqual(self.session._legacy_decode(encoded), data)\n+\n     def test_decode_legacy(self):\n         # RemovedInDjango40Warning: pre-Django 3.1 sessions will be invalid.\n         legacy_encoded = (\n@@ -323,6 +331,14 @@ class SessionTestsMixin:\n             {'a test key': 'a test value'},\n         )\n \n+    def test_legacy_decode_with_invalid_data(self):\n+        # Test how legacy_decode handles invalid data in its format\n+        invalid_legacy_encoded = (\n+            'OWUzNTNmNWQxNTBj086cZ2Q3NzNhMDRmMjU4NmYwNDUyNGI2NDp7fQ=='\n+        )\n+        output = self.session._legacy_decode(invalid_legacy_encoded)\n+        self.assertEqual(output, {})\n+\n     def test_decode_failure_logged_to_security(self):\n         bad_encode = base64.b64encode(b'flaskdj:alkdjf').decode('ascii')\n         with self.assertLogs('django.security.SuspiciousSession', 'WARNING') as cm:\n",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..4756525 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -1,6 +1,11 @@\n import time\n \n from django.core.exceptions import ImproperlyConfigured\n+from django.shortcuts import get_object_or_404\n+from django.test import TestCase\n+from django.urls import path\n+from .models import Account\n+from .models import Artist\n from django.http import HttpResponse\n from django.test import (\n     RequestFactory, SimpleTestCase, ignore_warnings, override_settings,\n@@ -571,7 +576,25 @@ class SingleObjectTemplateResponseMixinTest(SimpleTestCase):\n \n \n @override_settings(ROOT_URLCONF='generic_views.urls')\n-class DeprecationTests(SimpleTestCase):\n+class DeprecationTests(SimpleTestCase, TestCase):\n+    \n+    rf = RequestFactory()\n+    \n+    def test_get_context_data_with_lazy_object(self):\n+        \"\"\"Test TemplateView with SimpleLazyObject in kwargs.\"\"\"\n+        class OfferView(TemplateView):\n+            template_name = \"offers/offer.html\"\n+\n+            def get_context_data(self, **kwargs):\n+                offer_slug = kwargs.get(\"offer_slug\", \"\")\n+                offer = get_object_or_404(Account, slug=str(offer_slug))\n+                return {\"offer\": offer, \"offer_slug\": offer_slug}\n+\n+        account = Account.objects.create(slug='test-offer')\n+        response = OfferView.as_view()(\n+            self.rf.get('/offers/test-offer/'), offer_slug='test-offer')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.context_data['offer'], account)\n     @ignore_warnings(category=RemovedInDjango40Warning)\n     def test_template_params(self):\n         \"\"\"A generic template view passes kwargs as context.\"\"\"\n",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..052ea2c 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -17,6 +17,7 @@ from django.forms.models import (\n from django.template import Context, Template\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n \n+from django.test.utils import isolate_apps\n from .models import (\n     Article, ArticleStatus, Author, Author1, Award, BetterWriter, BigInt, Book,\n     Category, Character, Colour, ColourfulItem, CustomErrorMessage, CustomFF,\n@@ -2829,6 +2830,74 @@ class LimitChoicesToTests(TestCase):\n             StumpJokeForm()\n             self.assertEqual(today_callable_dict.call_count, 3)\n \n+@isolate_apps('model_forms')\n+class ForeignKeyLimitChoicesTests(TestCase):\n+    def setUp(self):\n+        # Setup some Character instances for testing\n+        self.marley = Character.objects.create(username='Marley', last_action='2023-10-10')\n+        self.threepwood = Character.objects.create(username='Threepwood', last_action='2023-10-10')\n+\n+        # Setup some StumpJoke instances for testing\n+        self.joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.threepwood)\n+        self.joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.threepwood)\n+        self.joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.marley)\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=self.marley)\n+        \n+        # Create relationships for has_fooled_today\n+        self.joke1.has_fooled_today.add(self.marley, self.threepwood)\n+        self.joke2.has_fooled_today.add(self.marley)\n+        self.joke3.has_fooled_today.add(self.marley, self.threepwood)\n+\n+        # Define models to test limit_choices_to\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        # Define form for unit test\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+        \n+        self.form = CharacterDetailsForm()\n+\n+    def test_limit_choices_to_no_duplicates_for_fk_and_m2m(self):\n+        self.assertCountEqual(\n+            self.form.fields['character1'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            self.form.fields['character2'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            self.form.fields['character3'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n \n class FormFieldCallbackTests(SimpleTestCase):\n \n",
  "django__django-13343": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex a5ab3a0..a5b9932 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -29,7 +29,7 @@ from django.test.utils import requires_tz_support\n from django.urls import NoReverseMatch, reverse_lazy\n from django.utils import timezone\n \n-from .models import Storage, temp_storage, temp_storage_location\n+from .models import Storage, callable_storage, temp_storage, temp_storage_location\n \n FILE_SUFFIX_REGEX = '[A-Za-z0-9]{7}'\n \n@@ -912,6 +912,33 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         self.assertEqual(obj.storage_callable.storage.location, temp_storage_location)\n         self.assertIsInstance(obj.storage_callable_class.storage, BaseStorage)\n \n+    def test_callable_storage_deconstruction(self):\n+        \"\"\"\n+        Ensure that a FileField with a callable storage deconstructs correctly,\n+        maintaining a reference to the callable.\n+        \"\"\"\n+        obj = Storage()\n+        # Deconstruct the FileField\n+        *_, kwargs = obj._meta.get_field('storage_callable').deconstruct()\n+        storage = kwargs['storage']\n+        # Assert that the storage in the deconstructed kwargs is still the callable\n+        self.assertIs(storage, callable_storage)\n+\n+    def test_direct_storage_deconstruction(self):\n+        \"\"\"\n+        Direct test to ensure deconstructing a FileField's storage parameter \n+        doesn't evaluate the callable.\n+        \"\"\"\n+        # Construct a FileField with a callable storage\n+        field = FileField(storage=callable_storage)\n+        name, path, args, kwargs = field.deconstruct()\n+        # Assert storage in kwargs is the original callable\n+        self.assertEqual(kwargs['storage'], callable_storage)\n+        obj = Storage()\n+        self.assertEqual(obj.storage_callable.storage, temp_storage)\n+        self.assertEqual(obj.storage_callable.storage.location, temp_storage_location)\n+        self.assertIsInstance(obj.storage_callable_class.storage, BaseStorage)\n+\n \n # Tests for a race condition on file saving (#4948).\n # This is written in such a way that it'll always pass on platforms\n",
  "django__django-13346": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex b918d5c..d3dcf3e 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -632,6 +632,13 @@ class TestQuerying(TestCase):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='ar').exists(), False)\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='bar').exists(), True)\n \n+    def test_key_in_with_zero(self):\n+        \"\"\"Test the __in lookup with JSON key transforms including zero.\"\"\"\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__some_key__in=[0]),\n+            []  # Expect this to fail, as per the issue description. Should be fixed\n+        )\n+\n     def test_key_icontains(self):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__icontains='Ar').exists(), True)\n \n",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..ce21faf 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -19,6 +19,7 @@ from django.test import (\n )\n from django.utils import timezone\n \n+import pytz\n from ..models import Author, DTModel, Fan\n \n \n@@ -1133,7 +1134,31 @@ class DateFunctionWithTimeZoneTests(DateFunctionTests):\n         self.assertEqual(model.melb_year.year, 2016)\n         self.assertEqual(model.pacific_year.year, 2015)\n \n-    def test_trunc_ambiguous_and_invalid_times(self):\n+    def test_truncdate_with_specific_timezone(self):\n+        start_datetime = timezone.make_aware(datetime(2023, 5, 15, 12, 0, 0), timezone.utc)\n+        self.create_model(start_datetime, start_datetime)\n+\n+        ny_tz = pytz.timezone('America/New_York')\n+\n+        model = DTModel.objects.annotate(\n+            ny_date=TruncDate('start_datetime', tzinfo=ny_tz),\n+        ).get()\n+\n+        expected_date = start_datetime.astimezone(ny_tz).date()\n+        self.assertEqual(model.ny_date, expected_date)\n+\n+    def test_trunctime_with_specific_timezone(self):\n+        start_datetime = timezone.make_aware(datetime(2023, 5, 15, 12, 0, 0), timezone.utc)\n+        self.create_model(start_datetime, start_datetime)\n+\n+        london_tz = pytz.timezone('Europe/London')\n+\n+        model = DTModel.objects.annotate(\n+            london_time=TruncTime('start_datetime', tzinfo=london_tz),\n+        ).get()\n+\n+        expected_time = start_datetime.astimezone(london_tz).time()\n+        self.assertEqual(model.london_time, expected_time)\n         sao = pytz.timezone('America/Sao_Paulo')\n         utc = pytz.timezone('UTC')\n         start_datetime = utc.localize(datetime(2016, 10, 16, 13))\n",
  "django__django-13401": "",
  "django__django-13410": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 1285e22..f29b6b5 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -1,3 +1,46 @@\n+\n+class LockTestCase(unittest.TestCase):\n+    def test_exclusive_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'w') as f:\n+            f.write('test')\n+        with open(file_path) as f1, open(file_path) as f2:\n+            self.assertIs(locks.lock(f1, locks.LOCK_EX), True)\n+            self.assertIs(locks.lock(f2, locks.LOCK_EX | locks.LOCK_NB), False)\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), False)\n+            self.assertIs(locks.unlock(f1), True)\n+\n+    def test_shared_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'w') as f:\n+            f.write('test')\n+        with open(file_path) as f1, open(file_path) as f2:\n+            self.assertIs(locks.lock(f1, locks.LOCK_SH), True)\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), True)\n+            self.assertIs(locks.unlock(f1), True)\n+            self.assertIs(locks.unlock(f2), True)\n+\n+    def test_unlock_without_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'w') as f:\n+            f.write('test')\n+        with open(file_path) as f1:\n+            # Attempting to unlock a file that was never locked\n+            self.assertIs(locks.unlock(f1), True)\n+\n+    def test_lock_exception_handling(self):\n+        # Create a dummy file descriptor that is invalid\n+        with self.assertRaises(OSError):\n+            fcntl.flock(-1, locks.LOCK_EX)\n+        \n+        # Ensure our locks method returns False when the exception is caught\n+        file_path = Path(__file__).parent / 'non_existent.png'\n+        try:\n+            with open(file_path) as f:\n+                self.assertIs(locks.lock(f, locks.LOCK_EX), False)\n+        except FileNotFoundError:\n+            pass\n+\n import errno\n import gzip\n import os\n@@ -17,6 +60,8 @@ from django.core.files.uploadedfile import (\n     UploadedFile,\n )\n from django.test import override_settings\n+from django.core.files import File, locks\n+from pathlib import Path\n \n try:\n     from PIL import Image\n",
  "django__django-13417": "",
  "django__django-13516": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 89f7c38..86a0905 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -342,6 +342,33 @@ class CommandTests(SimpleTestCase):\n         self.assertEqual(parser.epilog, epilog)\n \n \n+import sys\n+from io import StringIO\n+from django.core.management import call_command, CommandError\n+from django.test import TestCase\n+from unittest import mock\n+\n+class TestFlushBehavior(TestCase):\n+    def test_flush_stdout(self):\n+        # Test whether stdout.flush() is called.\n+        out = StringIO()\n+        with mock.patch.object(out, 'flush') as mocked_flush:\n+            call_command('myflushcommand', stdout=out)\n+            self.assertIn('Working...', out.getvalue())\n+            self.assertTrue(mocked_flush.called)\n+\n+    def test_flush_stderr_during_migration(self):\n+        # Test flush behavior when applying migrations.\n+        out = StringIO()\n+        stderr = StringIO()\n+        command_name = 'makemigrations'  # Assuming this simulates the migration scenario.\n+        with mock.patch('sys.stdout', out), mock.patch('sys.stderr', stderr):\n+            with mock.patch.object(sys.stderr, 'flush') as mocked_flush:\n+                call_command(command_name, verbosity=2)\n+                self.assertIn('Running migrations:', out.getvalue())\n+                self.assertTrue(mocked_flush.called)\n+                self.assertIn('Applying myapp.0002_auto_20200817_1030...', err.getvalue())\n+\n class CommandRunTests(AdminScriptTestCase):\n     \"\"\"\n     Tests that need to run by simulating the command line, not by call_command.\n",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..c74ecc1 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,10 +1,11 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n-from django.test.utils import ignore_warnings\n+from .models.with_custom_email_field import CustomEmailField\n from django.utils.deprecation import RemovedInDjango40Warning\n \n \n@@ -36,6 +37,19 @@ class TokenGeneratorTest(TestCase):\n         tk1 = p0.make_token(user)\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n+    \n+    def test_token_with_different_email_on_default_user(self):\n+        \"\"\"Updating the default user email address should invalidate the token.\"\"\"\n+        # Create a user using the default User model\n+        user = User.objects.create_user('defaultuser', 'test5@example.com', 'testpw')\n+        p0 = PasswordResetTokenGenerator()\n+        tk1 = p0.make_token(user)\n+        self.assertIs(p0.check_token(user, tk1), True)\n+        \n+        # Change user's email, save and ensure the old token is now invalid\n+        user.email = 'test5new@example.com'\n+        user.save()\n+        self.assertIs(p0.check_token(user, tk1), False)\n \n     def test_timeout(self):\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..796e949 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,9 +1,11 @@\n+\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n from django.contrib.auth.models import AbstractBaseUser\n from django.core import checks\n from django.db import models\n+from django.db.models import Q, UniqueConstraint\n from django.test import (\n     SimpleTestCase, override_settings, override_system_checks,\n )\n@@ -137,8 +139,25 @@ class ModelsPermissionsChecksTests(SimpleTestCase):\n                 id='auth.E005',\n             ),\n         ])\n+    \n+    @override_settings(AUTH_USER_MODEL='auth_tests.UserWithUniqueConstraintOnUsernameField')\n+    def test_skip_auth_E003_with_unique_constraint(self):\n+        \"\"\"\n+        Ensure that `auth.E003` is not triggered if USERNAME_FIELD is part\n+        of UniqueConstraint.\n+        \"\"\"\n+        class UserWithUniqueConstraintOnUsernameField(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n \n-    def test_non_clashing_custom_permissions(self):\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(fields=['username'], name='user_username_unique_constraint'),\n+                ]\n+\n+        # Running the checks should not yield errors since the unique constraint exists.\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [])\n         class Checked(models.Model):\n             class Meta:\n                 permissions = [\n",
  "django__django-13569": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex a44d0b6..4ada793 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1314,4 +1314,46 @@ class AggregateTestCase(TestCase):\n         # non-multivalued JOINs, see Col.possibly_multivalued (refs #31150):\n         # with self.assertNumQueries(1) as ctx:\n         #     self.assertSequenceEqual(books_qs, [book])\n-        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n+        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n+    \n+    def test_aggregation_random_order(self):\n+        # Setting up test models\n+        from .models import Thing, Related\n+        from django.db.models import Count\n+\n+        # Creating instances\n+        t = Thing.objects.create()\n+        [Related.objects.create(thing=t) for _ in range(2)]\n+\n+        # Test aggregation query with order_by('?')\n+        qs = Thing.objects.annotate(rc=Count('related')).order_by('?').values('id', 'rc')\n+        self.assertEqual(qs.count(), 1)\n+        self.assertEqual(qs[0]['rc'], 2)\n+\n+    def test_aggregation_normal_order(self):\n+        # Setting up test models\n+        from .models import Thing, Related\n+        from django.db.models import Count\n+\n+        # Creating instances\n+        t = Thing.objects.create()\n+        [Related.objects.create(thing=t) for _ in range(2)]\n+\n+        # Test aggregation query with order_by('rc')\n+        qs = Thing.objects.annotate(rc=Count('related')).order_by('rc').values('id', 'rc')\n+        self.assertEqual(qs.count(), 1)\n+        self.assertEqual(qs[0]['rc'], 2)\n+\n+    def test_aggregation_order_by_related(self):\n+        # Setting up test models\n+        from .models import Thing, Related\n+        from django.db.models import Count\n+\n+        # Creating instances\n+        t = Thing.objects.create()\n+        [Related.objects.create(thing=t) for _ in range(2)]\n+\n+        # Test aggregation query with order_by('related')\n+        qs = Thing.objects.annotate(rc=Count('related')).order_by('related').values('id', 'rc')\n+        self.assertEqual(qs.count(), 2)\n+        self.assertTrue(all(item['rc'] == 1 for item in qs))\n",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..8b7f492 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,9 +1,11 @@\n+\n import datetime\n import pickle\n import unittest\n import uuid\n from copy import deepcopy\n from decimal import Decimal\n+from collections import namedtuple\n from unittest import mock\n \n from django.core.exceptions import FieldError\n@@ -815,7 +817,32 @@ class IterableLookupInnerExpressionsTests(TestCase):\n         Company.objects.create(name='5060 Ltd', num_employees=50, num_chairs=60, ceo=ceo)\n         Company.objects.create(name='99300 Ltd', num_employees=99, num_chairs=300, ceo=ceo)\n \n-    def test_in_lookup_allows_F_expressions_and_expressions_for_integers(self):\n+    def test_range_lookup_namedtuple(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100)\n+        )\n+        self.assertQuerysetEqual(\n+            qs, ['<Company: 99300 Ltd>'], ordered=False\n+        )\n+\n+    def test_range_lookup_namedtuple_reversed_order(self):\n+        # Ensure namedtuple with reversed order also works correctly\n+        EmployeeRange = namedtuple('EmployeeRange', ['max_val', 'min_val'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(max_val=100, min_val=51)\n+        )\n+        self.assertQuerysetEqual(\n+            qs, ['<Company: 99300 Ltd>'], ordered=False\n+        )\n+\n+    def test_range_lookup_namedtuple_no_match(self):\n+        # Test case where the range should not match any entry\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=101, maximum=200)\n+        )\n+        self.assertQuerysetEqual(qs, [])\n         # __in lookups can use F() expressions for integers.\n         queryset = Company.objects.filter(num_employees__in=([F('num_chairs') - 10]))\n         self.assertQuerysetEqual(queryset, ['<Company: 5060 Ltd>'], ordered=False)\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..f45fdb4 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -16,22 +16,171 @@ from unittest import mock\n \n from django import conf, get_version\n from django.conf import settings\n+from django.test.utils import captured_stderr, captured_stdout\n from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n+    execute_from_command_line,\n )\n+\n+class ExecuteFromCommandLineTests(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with mock.patch('sys.argv', [None] + args):\n+            with captured_stdout() as out, captured_stderr() as err:\n+                execute_from_command_line(['django-admin'] + args)\n+            self.assertIn('usage: django-admin shell', out.getvalue())\n+            self.assertEqual(err.getvalue(), '')\n+\n+    def test_prog_name_with_main(self):\n+        \"\"\"\n+        Correctly handle the case where prog_name is '__main__.py' and replace\n+        it with 'python -m django'.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with mock.patch('sys.argv', ['__main__.py'] + args):\n+            with captured_stdout() as out, captured_stderr() as err:\n+                execute_from_command_line(['python -m django'] + args)\n+        self.assertIn('usage: python -m django shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_sys_argv_invariance(self):\n+        \"\"\"\n+        Ensure sys.argv remains unmodified after call to execute_from_command_line.\n+        \"\"\"\n+        original_sys_argv = ['manage.py', 'runserver']\n+        modified_sys_argv = original_sys_argv[:]\n+        with mock.patch('sys.argv', modified_sys_argv):\n+            execute_from_command_line(['django-admin', 'runserver'])\n+        # Check that sys.argv is still the same after the function call\n+        self.assertEqual(modified_sys_argv, original_sys_argv)\n from django.core.management.commands.loaddata import Command as LoaddataCommand\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n+    execute_from_command_line,\n )\n+\n+class ExecuteFromCommandLineTests(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with mock.patch('sys.argv', [None] + args):\n+            with captured_stdout() as out, captured_stderr() as err:\n+                execute_from_command_line(['django-admin'] + args)\n+            self.assertIn('usage: django-admin shell', out.getvalue())\n+            self.assertEqual(err.getvalue(), '')\n+\n+    def test_prog_name_with_main(self):\n+        \"\"\"\n+        Correctly handle the case where prog_name is '__main__.py' and replace\n+        it with 'python -m django'.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with mock.patch('sys.argv', ['__main__.py'] + args):\n+            with captured_stdout() as out, captured_stderr() as err:\n+                execute_from_command_line(['python -m django'] + args)\n+        self.assertIn('usage: python -m django shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_sys_argv_invariance(self):\n+        \"\"\"\n+        Ensure sys.argv remains unmodified after call to execute_from_command_line.\n+        \"\"\"\n+        original_sys_argv = ['manage.py', 'runserver']\n+        modified_sys_argv = original_sys_argv[:]\n+        with mock.patch('sys.argv', modified_sys_argv):\n+            execute_from_command_line(['django-admin', 'runserver'])\n+        # Check that sys.argv is still the same after the function call\n+        self.assertEqual(modified_sys_argv, original_sys_argv)\n from django.core.management.commands.testserver import (\n     Command as TestserverCommand,\n+    execute_from_command_line,\n )\n+\n+class ExecuteFromCommandLineTests(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with mock.patch('sys.argv', [None] + args):\n+            with captured_stdout() as out, captured_stderr() as err:\n+                execute_from_command_line(['django-admin'] + args)\n+            self.assertIn('usage: django-admin shell', out.getvalue())\n+            self.assertEqual(err.getvalue(), '')\n+\n+    def test_prog_name_with_main(self):\n+        \"\"\"\n+        Correctly handle the case where prog_name is '__main__.py' and replace\n+        it with 'python -m django'.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with mock.patch('sys.argv', ['__main__.py'] + args):\n+            with captured_stdout() as out, captured_stderr() as err:\n+                execute_from_command_line(['python -m django'] + args)\n+        self.assertIn('usage: python -m django shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_sys_argv_invariance(self):\n+        \"\"\"\n+        Ensure sys.argv remains unmodified after call to execute_from_command_line.\n+        \"\"\"\n+        original_sys_argv = ['manage.py', 'runserver']\n+        modified_sys_argv = original_sys_argv[:]\n+        with mock.patch('sys.argv', modified_sys_argv):\n+            execute_from_command_line(['django-admin', 'runserver'])\n+        # Check that sys.argv is still the same after the function call\n+        self.assertEqual(modified_sys_argv, original_sys_argv)\n from django.db import ConnectionHandler, connection\n from django.db.migrations.recorder import MigrationRecorder\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n+    execute_from_command_line,\n )\n \n+class ExecuteFromCommandLineTests(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with mock.patch('sys.argv', [None] + args):\n+            with captured_stdout() as out, captured_stderr() as err:\n+                execute_from_command_line(['django-admin'] + args)\n+            self.assertIn('usage: django-admin shell', out.getvalue())\n+            self.assertEqual(err.getvalue(), '')\n+\n+    def test_prog_name_with_main(self):\n+        \"\"\"\n+        Correctly handle the case where prog_name is '__main__.py' and replace\n+        it with 'python -m django'.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with mock.patch('sys.argv', ['__main__.py'] + args):\n+            with captured_stdout() as out, captured_stderr() as err:\n+                execute_from_command_line(['python -m django'] + args)\n+        self.assertIn('usage: python -m django shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_sys_argv_invariance(self):\n+        \"\"\"\n+        Ensure sys.argv remains unmodified after call to execute_from_command_line.\n+        \"\"\"\n+        original_sys_argv = ['manage.py', 'runserver']\n+        modified_sys_argv = original_sys_argv[:]\n+        with mock.patch('sys.argv', modified_sys_argv):\n+            execute_from_command_line(['django-admin', 'runserver'])\n+        # Check that sys.argv is still the same after the function call\n+        self.assertEqual(modified_sys_argv, original_sys_argv)\n+\n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n \n SYSTEM_CHECK_MSG = 'System check identified no issues'\n",
  "django__django-13670": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 6f0b13f..10f88cd 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -1,3 +1,4 @@\n+\n from datetime import date, datetime\n \n from django.test import SimpleTestCase, override_settings\n@@ -65,8 +66,22 @@ class DateFormatTests(SimpleTestCase):\n         my_birthday = datetime(1979, 7, 8, 22, 00)\n \n         self.assertEqual(dateformat.format(my_birthday, ''), '')\n-\n-    def test_am_pm(self):\n+    def test_year_before_1000(self):\n+        tests = [\n+            (476, '76'),\n+            (42, '42'),\n+            (4, '04'),\n+            (999, '99'),\n+            (100, '00'),\n+            (50, '50'),\n+            (1, '01'),\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n         my_birthday = datetime(1979, 7, 8, 22, 00)\n \n         self.assertEqual(dateformat.format(my_birthday, 'a'), 'p.m.')\n@@ -164,4 +179,4 @@ class DateFormatTests(SimpleTestCase):\n             self.assertEqual(\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+            )\n",
  "django__django-13741": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex ca66cd5..7f45128 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1024,8 +1024,26 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n         field = ReadOnlyPasswordHashField()\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n \n+from django.forms import widgets\n+from django.contrib.auth.forms import ReadOnlyPasswordHashField\n \n-class AdminPasswordChangeFormTest(TestDataMixin, TestCase):\n+class ReadOnlyPasswordHashFieldTest(TestCase):\n+    def test_field_disabled_property(self):\n+        field = ReadOnlyPasswordHashField()\n+        self.assertIs(field.disabled, True)  # Verify the field is disabled\n+\n+    def test_rendered_widget_disabled_attribute(self):\n+        field = ReadOnlyPasswordHashField()\n+        widget = field.widget()\n+        rendered = widget.render('password_hash', None)\n+        self.assertIn('disabled', rendered)  # Check that the rendered widget includes the disabled attribute\n+\n+    def test_field_does_not_accept_changes(self):\n+        field = ReadOnlyPasswordHashField(disabled=True)\n+        initial_value = 'initial_hash_value'\n+        user_input = 'tampered_hash_value'\n+        result = field.clean(user_input, initial_value)\n+        self.assertEqual(result, initial_value)  # Ensure that changes are disregarded and initial value is retained\n \n     @mock.patch('django.contrib.auth.password_validation.password_changed')\n     def test_success(self, password_changed):\n",
  "django__django-13786": "",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..c847403 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,6 +1,9 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n+from django.utils.functional import lazy\n+from django.utils.translation import gettext_lazy\n from django.test import SimpleTestCase\n \n from ..utils import setup\n@@ -46,6 +49,27 @@ class AddTests(SimpleTestCase):\n         output = self.engine.render_to_string('add07', {'d': date(2000, 1, 1), 't': timedelta(10)})\n         self.assertEqual(output, 'Jan. 11, 2000')\n \n+    @setup({'add08': '{{ s1|add:lazy_s2 }}'})\n+    def test_add08(self):\n+        output = self.engine.render_to_string(\n+            'add08',\n+            {'s1': 'string', 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    @setup({'add09': '{{ lazy_s1|add:lazy_s2 }}'})\n+    def test_add09(self):\n+        output = self.engine.render_to_string(\n+            'add09',\n+            {'lazy_s1': gettext_lazy('string'), 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    def test_lazy_add(self):\n+        lazy_4 = lazy(lambda: 4, int)\n+        lazy_5 = lazy(lambda: 5, int)\n+        self.assertEqual(lazy_4() + lazy_5(), 9)\n+\n \n class FunctionTests(SimpleTestCase):\n \n",
  "django__django-13807": "diff --git a/tests/backends/tests.py b/tests/backends/tests.py\nindex 0aee2b6..30930b3 100644\n--- a/tests/backends/tests.py\n+++ b/tests/backends/tests.py\n@@ -11,6 +11,9 @@ from django.db import (\n )\n from django.db.backends.base.base import BaseDatabaseWrapper\n from django.db.backends.signals import connection_created\n+import django\n+from django.db import connection, transaction, IntegrityError\n+from .models import Reporter, SQLKeywordsModel\n from django.db.backends.utils import CursorWrapper\n from django.db.models.sql.constants import CURSOR\n from django.test import (\n",
  "django__django-13809": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex d88ea78..1f563a7 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1314,6 +1314,13 @@ class ManageRunserver(SimpleTestCase):\n         self.assertIn('unapplied migration(s)', self.output.getvalue())\n \n \n+import os\n+from django.core.management import call_command\n+from django.core.management.commands.runserver import Command as RunserverCommand\n+from django.test import TestCase, override_settings\n+from io import StringIO\n+import mock\n+\n class ManageRunserverMigrationWarning(TestCase):\n \n     def setUp(self):\n@@ -1343,7 +1350,23 @@ class ManageRunserverMigrationWarning(TestCase):\n         )\n \n \n-class ManageRunserverEmptyAllowedHosts(AdminScriptTestCase):\n+class TestRunserverSkipChecksOption(TestCase):\n+    def setUp(self):\n+        self.stdout = StringIO()\n+\n+    @mock.patch('django.core.management.commands.runserver.RunserverCommand.check')\n+    def test_runserver_with_skip_checks(self, mocked_check):\n+        call_command('runserver', use_reloader=False, skip_checks=True, stdout=self.stdout)\n+        output = self.stdout.getvalue()\n+        self.assertNotIn('Performing system checks...', output)\n+        mocked_check.assert_not_called()\n+\n+    @mock.patch('django.core.management.commands.runserver.RunserverCommand.check')\n+    def test_runserver_without_skip_checks(self, mocked_check):\n+        call_command('runserver', use_reloader=False, skip_checks=False, stdout=self.stdout)\n+        output = self.stdout.getvalue()\n+        self.assertIn('Performing system checks...', output)\n+        mocked_check.assert_called()\n     def setUp(self):\n         super().setUp()\n         self.write_settings('settings.py', sdict={\n",
  "django__django-13810": "",
  "django__django-13820": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex 594c01e..9e5578b 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -1,3 +1,4 @@\n+\n import compileall\n import os\n \n@@ -7,6 +8,7 @@ from django.db.migrations.exceptions import (\n )\n from django.db.migrations.loader import MigrationLoader\n from django.db.migrations.recorder import MigrationRecorder\n+from importlib import import_module\n from django.test import TestCase, modify_settings, override_settings\n \n from .test_base import MigrationTestBase\n@@ -512,6 +514,35 @@ class LoaderTests(TestCase):\n         migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n         self.assertEqual(migrations, [])\n \n+    @override_settings(\n+        MIGRATION_MODULES={'migrations': 'migrations.test_migrations_no_file'},\n+    )\n+    def test_loading_regular_package_without_file(self):\n+        \"\"\"\n+        To support frozen environments, MigrationLoader loads migrations from\n+        regular packages with no __file__ attribute.\n+        \"\"\"\n+        test_module = import_module('migrations.test_migrations_no_file')\n+        loader = MigrationLoader(connection)\n+        module_file = test_module.__file__\n+        module_origin = test_module.__spec__.origin\n+        module_has_location = test_module.__spec__.has_location\n+        try:\n+            del test_module.__file__\n+            test_module.__spec__.origin = None\n+            test_module.__spec__.has_location = False\n+            loader.load_disk()\n+            migrations = [\n+                name\n+                for app, name in loader.disk_migrations\n+                if app == 'migrations'\n+            ]\n+            self.assertCountEqual(migrations, ['0001_initial', '0002_second'])\n+        finally:\n+            test_module.__file__ = module_file\n+            test_module.__spec__.origin = module_origin\n+            test_module.__spec__.has_location = module_has_location\n+\n \n class PycLoaderTests(MigrationTestBase):\n \n",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..4be677e 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -10,7 +10,10 @@ from unittest import mock\n from django.core.exceptions import ImproperlyConfigured\n from django.db import NotSupportedError, connection, transaction\n from django.db.models import Aggregate, Avg, CharField, StdDev, Sum, Variance\n-from django.db.utils import ConnectionHandler\n+from django.db.utils import ConnectionHandler, ImproperlyConfigured\n+import unittest\n+from unittest import mock\n+from django.db.backends.sqlite3.base import DatabaseWrapper\n from django.test import (\n     TestCase, TransactionTestCase, override_settings, skipIfDBFeature,\n )\n@@ -36,7 +39,22 @@ class Tests(TestCase):\n                 self.assertRaisesMessage(ImproperlyConfigured, msg):\n             check_sqlite_version()\n \n-    def test_aggregation(self):\n+    def test_check_sqlite_version_below_minimum(self):\n+        # Test for an SQLite version that is below the minimum required version.\n+        msg = 'SQLite 3.9.0 or later is required (found 3.8.11.1).'\n+        with mock.patch.object(DatabaseWrapper, 'sqlite_version_info', (3, 8, 11, 1)), \\\n+                mock.patch.object(DatabaseWrapper, 'sqlite_version', '3.8.11.1'), \\\n+                self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            check_sqlite_version()\n+\n+    def test_check_sqlite_version_exact_minimum(self):\n+        # Test for the exact minimum required SQLite version.\n+        with mock.patch.object(DatabaseWrapper, 'sqlite_version_info', (3, 9, 0)), \\\n+                mock.patch.object(DatabaseWrapper, 'sqlite_version', '3.9.0'):\n+            try:\n+                check_sqlite_version()  # Should not raise an error\n+            except ImproperlyConfigured:\n+                self.fail(\"check_sqlite_version() raised ImproperlyConfigured unexpectedly!\")\n         \"\"\"Raise NotSupportedError when aggregating on date/time fields.\"\"\"\n         for aggregate in (Sum, Avg, Variance, StdDev):\n             with self.assertRaises(NotSupportedError):\n",
  "django__django-13837": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 10ffa22..dd91633 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -157,6 +157,26 @@ class TestIterModulesAndFiles(SimpleTestCase):\n \n \n class TestChildArguments(SimpleTestCase):\n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n+        )\n+\n+    @mock.patch('sys.argv', ['-m', 'pkg_other_than_django', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_custom_pkg_module(self):\n+        class CustomMain:\n+            __spec__ = type('spec', (), {'parent': 'pkg_other_than_django'})\n+\n+        with mock.patch.dict(sys.modules, {'__main__': CustomMain}):\n+            self.assertEqual(\n+                autoreload.get_child_arguments(),\n+                [sys.executable, '-m', 'pkg_other_than_django', 'runserver'],\n+            )\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n     def test_run_as_module(self):\n",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..64376cc 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -298,6 +298,19 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['INVALID CHOICE'], f.clean, '4')\n \n+        # Additional test for ModelChoiceField to check the value in the error message\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            'invalid',\n+        )\n+\n         # ModelMultipleChoiceField\n         e = {\n             'required': 'REQUIRED',\n@@ -307,4 +320,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py\nindex 1078928..b77b54a 100644\n--- a/tests/many_to_one/models.py\n+++ b/tests/many_to_one/models.py\n@@ -63,6 +63,14 @@ class Third(models.Model):\n     third = models.ForeignKey('self', models.SET_NULL, null=True, related_name='child_set')\n \n \n+from django.db import models\n+\n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n+\n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n+\n class Parent(models.Model):\n     name = models.CharField(max_length=20, unique=True)\n     bestchild = models.ForeignKey('Child', models.SET_NULL, null=True, related_name='favored_by')\n",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..67cc784 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,5 +1,8 @@\n+\n from django.db import IntegrityError, transaction\n-from django.test import TestCase, skipIfDBFeature\n+from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from .models import CustomAutoFieldModel\n+from .fields import MyWrapper\n \n from .models import Bar, Business, Employee, Foo\n \n@@ -220,7 +223,19 @@ class CustomPKTests(TestCase):\n         self.assertEqual(f, new_foo),\n         self.assertEqual(f.bar, new_bar)\n \n-    # SQLite lets objects be saved with an empty primary key, even though an\n+\n+class AutoFieldSubclassTests(TestCase):\n+    def test_auto_field_subclass_create(self):\n+        obj = CustomAutoFieldModel.objects.create()\n+        self.assertIsInstance(obj.id, MyWrapper)\n+        self.assertTrue(str(obj.id).isalnum())\n+\n+    @skipUnlessDBFeature('can_return_rows_from_bulk_insert')\n+    def test_auto_field_subclass_bulk_create(self):\n+        obj = CustomAutoFieldModel()\n+        CustomAutoFieldModel.objects.bulk_create([obj])\n+        self.assertIsInstance(obj.id, MyWrapper)\n+        self.assertTrue(str(obj.id).isalnum())\n     # integer is expected. So we can't check for an error being raised in that\n     # case for SQLite. Remove it from the suite for this next bit.\n     @skipIfDBFeature('supports_unspecified_pk')\n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..f82d3f6 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -817,6 +817,9 @@ class BasicExpressionsTests(TestCase):\n         )\n \n \n+from django.db.models import Exists, OuterRef, Q, When, Case, BooleanField\n+# Other necessary imports for this test module...\n+\n class IterableLookupInnerExpressionsTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..b86db41 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -205,6 +205,36 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yields_in_post_process(self):\n+        \"\"\"\n+        Test that post_process does not yield the same file multiple times.\n+        \"\"\"\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(post_process=True)\n+\n+        # Collect static files and gather statistics\n+        stats = collectstatic_cmd.collect()\n+\n+        # Ensure no file was yielded more than once\n+        post_processed_files = stats['post_processed']\n+        self.assertEqual(len(post_processed_files), len(set(post_processed_files)))\n+\n+    def test_intermediate_files_not_yielded(self):\n+        \"\"\"\n+        Test that intermediate files are not yielded during post processing.\n+        \"\"\"\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(post_process=True)\n+\n+        # Collect static files and gather statistics\n+        stats = collectstatic_cmd.collect()\n+\n+        # Check post-processed files for any intermediate file names\n+        for file in stats['post_processed']:\n+            # Assuming intermediate files would have a specific hash format,\n+            # add any known intermediate hash strings if applicable\n+            self.assertNotIn('5af66c1b1797', file)\n+\n     def test_css_import_case_insensitive(self):\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n         self.assertEqual(relpath, \"cached/styles_insensitive.3fa427592a53.css\")\n@@ -214,6 +244,36 @@ class TestHashedFiles:\n             self.assertIn(b\"other.d41d8cd98f00.css\", content)\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yields_in_post_process(self):\n+        \"\"\"\n+        Test that post_process does not yield the same file multiple times.\n+        \"\"\"\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(post_process=True)\n+\n+        # Collect static files and gather statistics\n+        stats = collectstatic_cmd.collect()\n+\n+        # Ensure no file was yielded more than once\n+        post_processed_files = stats['post_processed']\n+        self.assertEqual(len(post_processed_files), len(set(post_processed_files)))\n+\n+    def test_intermediate_files_not_yielded(self):\n+        \"\"\"\n+        Test that intermediate files are not yielded during post processing.\n+        \"\"\"\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(post_process=True)\n+\n+        # Collect static files and gather statistics\n+        stats = collectstatic_cmd.collect()\n+\n+        # Check post-processed files for any intermediate file names\n+        for file in stats['post_processed']:\n+            # Assuming intermediate files would have a specific hash format,\n+            # add any known intermediate hash strings if applicable\n+            self.assertNotIn('5af66c1b1797', file)\n+\n     @override_settings(\n         STATICFILES_DIRS=[os.path.join(TEST_ROOT, 'project', 'faulty')],\n         STATICFILES_FINDERS=['django.contrib.staticfiles.finders.FileSystemFinder'],\n",
  "django__django-14089": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 7fb3d83..4daf5f6 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n@@ -6,6 +7,7 @@ import copy\n import pickle\n \n from django.test import SimpleTestCase\n+import collections.abc\n from django.utils.datastructures import (\n     CaseInsensitiveMapping, DictWrapper, ImmutableList, MultiValueDict,\n     MultiValueDictKeyError, OrderedSet,\n@@ -18,7 +20,30 @@ class OrderedSetTests(SimpleTestCase):\n         s = OrderedSet([1, 2, 3])\n         self.assertEqual(list(s.dict.keys()), [1, 2, 3])\n \n-    def test_remove(self):\n+    def test_reversed(self):\n+        # Test that an OrderedSet can be reversed\n+        s = reversed(OrderedSet([1, 2, 3]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [3, 2, 1])\n+\n+    def test_reversed_empty(self):\n+        # Test reversing an empty OrderedSet\n+        s = reversed(OrderedSet([]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [])\n+\n+    def test_reversed_single_element(self):\n+        # Test reversing an OrderedSet with a single element\n+        s = reversed(OrderedSet([42]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [42])\n+\n+    def test_reversed_with_duplicates(self):\n+        # Even though OrderedSet should not have duplicates, test with similar values\n+        # Note: OrderedSet should handle unique items\n+        s = reversed(OrderedSet([1, 1, 2, 3, 3]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [3, 2, 1])\n         s = OrderedSet()\n         self.assertEqual(len(s), 0)\n         s.add(1)\n",
  "django__django-14122": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 83089d9..3a29ae1 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -1,9 +1,11 @@\n+\n from datetime import datetime\n from operator import attrgetter\n \n from django.db.models import (\n     CharField, DateTimeField, F, Max, OuterRef, Subquery, Value,\n )\n+from django.db.models import Count\n from django.db.models.functions import Upper\n from django.test import TestCase\n \n@@ -119,6 +121,15 @@ class OrderingTests(TestCase):\n             [self.a3, self.a4, self.a1, self.a2],\n         )\n \n+    def test_default_ordering_does_not_affect_group_by(self):\n+        Article.objects.exclude(headline='Article 4').update(author=self.author_1)\n+        Article.objects.filter(headline='Article 4').update(author=self.author_2)\n+        articles = Article.objects.values('author').annotate(count=Count('author'))\n+        self.assertCountEqual(articles, [\n+            {'author': self.author_1.pk, 'count': 3},\n+            {'author': self.author_2.pk, 'count': 1},\n+        ])\n+\n     def test_order_by_nulls_first(self):\n         Article.objects.filter(headline=\"Article 3\").update(author=self.author_1)\n         Article.objects.filter(headline=\"Article 4\").update(author=self.author_2)\n@@ -483,4 +494,4 @@ class OrderingTests(TestCase):\n         )\n         ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n         articles = ChildArticle.objects.order_by('article_ptr')\n-        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n",
  "django__django-14140": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex c3db825..b639173 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -824,6 +824,14 @@ class BasicExpressionsTests(TestCase):\n             [self.example_inc.ceo, self.max],\n         )\n \n+    def test_deconstruct_exists_expression(self):\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        q = Q(Exists(is_poc))\n+        path, args, kwargs = q.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Q')\n+        self.assertEqual(args, (Exists(is_poc),))\n+        self.assertEqual(kwargs, {})\n+\n     def test_boolean_expression_combined_with_empty_Q(self):\n         is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n         self.gmbh.point_of_contact = self.max\n",
  "django__django-14238": "diff --git a/tests/model_fields/test_autofield.py b/tests/model_fields/test_autofield.py\nindex bfbf1e8..861464b 100644\n--- a/tests/model_fields/test_autofield.py\n+++ b/tests/model_fields/test_autofield.py\n@@ -24,7 +24,16 @@ class SmallAutoFieldTests(SmallIntegerFieldTests):\n \n class AutoFieldInheritanceTests(SimpleTestCase):\n \n-    def test_isinstance_of_autofield(self):\n+    def test_custom_fields_are_subclass_of_autofield(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        for field in (MyBigAutoField, MySmallAutoField):\n+            with self.subTest(field.__name__):\n+                self.assertTrue(issubclass(field, models.AutoField))\n         for field in (models.BigAutoField, models.SmallAutoField):\n             with self.subTest(field.__name__):\n                 self.assertIsInstance(field(), models.AutoField)\n@@ -32,4 +41,4 @@ class AutoFieldInheritanceTests(SimpleTestCase):\n     def test_issubclass_of_autofield(self):\n         for field in (models.BigAutoField, models.SmallAutoField):\n             with self.subTest(field.__name__):\n-                self.assertTrue(issubclass(field, models.AutoField))\n+                self.assertTrue(issubclass(field, models.AutoField))\n",
  "django__django-14311": "",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..bb5105b 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -229,6 +229,14 @@ TEST_DATA = [\n     # Trailing newlines not accepted\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n+    # Newlines and tabs are not accepted.\n+    (URLValidator(), 'http://www.djangoproject.com/\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://www.django\\rproject.com/', ValidationError),\n+    (URLValidator(), 'http://[::\\rffff:192.9.5.5]', ValidationError),\n+    (URLValidator(), 'http://\\twww.djangoproject.com/', ValidationError),\n+    (URLValidator(), 'http://\\t[::ffff:192.9.5.5]', ValidationError),\n+\n     # Trailing junk does not take forever to reject\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br ', ValidationError),\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br z', ValidationError),\n",
  "django__django-14351": "diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\nindex 79963c3..276fc29 100644\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -1526,6 +1526,48 @@ class AggregationTests(TestCase):\n         DistinctAggregate('foo', distinct=True)\n \n \n+from django.db.models import Count, Q\n+from .models import Author, Book, Alfa, Bravo, Charlie, PropertyGroup, ManagementAgent\n+\n+class SubqueryColumnTests(TestCase):\n+    def test_subquery_multiple_columns(self):\n+        # Setting up the necessary objects for the test\n+        management_agent = ManagementAgent.objects.create(name=\"Agent 1\")\n+        property_groups = PropertyGroup.objects.bulk_create([\n+            PropertyGroup(name=\"Group 1\"),\n+            PropertyGroup(name=\"Group 2\"),\n+        ])\n+\n+        management_agent.property_groups.add(*property_groups)\n+\n+        queryset = ManagementAgent.objects.annotate(property_group_count=Count('property_groups'))\n+\n+        # This should work correctly and not raise the \"subquery must return only one column\" error\n+        result = queryset.filter(\n+            Q(property_groups__in=property_groups) | Q(property_group_count=0)\n+        ).distinct()\n+\n+        self.assertEqual(result.count(), 1)\n+\n+    def test_subquery_single_column(self):\n+        # Verify that queries which should succeed continue to succeed\n+        management_agent = ManagementAgent.objects.create(name=\"Agent 1\")\n+        property_groups = PropertyGroup.objects.bulk_create([\n+            PropertyGroup(name=\"Group 1\"),\n+            PropertyGroup(name=\"Group 2\"),\n+        ])\n+\n+        management_agent.property_groups.add(*property_groups)\n+\n+        queryset = ManagementAgent.objects.annotate(property_group_count=Count('property_groups'))\n+\n+        # This is the original working query\n+        result = queryset.filter(\n+            Q(property_groups__id__in=property_groups.values_list(\"id\", flat=True)) | Q(property_group_count=0)\n+        ).distinct()\n+\n+        self.assertEqual(result.count(), 1)\n+\n class JoinPromotionTests(TestCase):\n     def test_ticket_21150(self):\n         b = Bravo.objects.create()\n",
  "django__django-14373": "",
  "django__django-14376": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\nindex 643c2b6..ad342ff 100644\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -38,6 +38,67 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_options_preferred_keys(self):\n+        \"\"\"Ensure 'database' and 'password' kwargs take precedence over deprecated 'db' and 'passwd'.\"\"\"\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'db': 'deprecatedoptiondbname',\n+                    'password': 'optionpassword',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'user': 'optionuser',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n+    def test_deprecated_keys_still_work(self):\n+        \"\"\"Ensure deprecated 'db' and 'passwd' kwargs still function as expected.\"\"\"\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=555',\n+            'deprecatedoptiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'deprecatedoptionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': 444,\n+                'OPTIONS': {\n+                    'db': 'deprecatedoptiondbname',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'user': 'optionuser',\n+                    'host': 'optionhost',\n+                    'port': 555,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n     def test_options_override_settings_proper_values(self):\n         settings_port = 444\n         options_port = 555\n@@ -68,6 +129,67 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_options_preferred_keys(self):\n+        \"\"\"Ensure 'database' and 'password' kwargs take precedence over deprecated 'db' and 'passwd'.\"\"\"\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'db': 'deprecatedoptiondbname',\n+                    'password': 'optionpassword',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'user': 'optionuser',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n+    def test_deprecated_keys_still_work(self):\n+        \"\"\"Ensure deprecated 'db' and 'passwd' kwargs still function as expected.\"\"\"\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=555',\n+            'deprecatedoptiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'deprecatedoptionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': 444,\n+                'OPTIONS': {\n+                    'db': 'deprecatedoptiondbname',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'user': 'optionuser',\n+                    'host': 'optionhost',\n+                    'port': 555,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n     def test_options_password(self):\n         expected_args = [\n             'mysql',\n@@ -89,6 +211,67 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_options_preferred_keys(self):\n+        \"\"\"Ensure 'database' and 'password' kwargs take precedence over deprecated 'db' and 'passwd'.\"\"\"\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'db': 'deprecatedoptiondbname',\n+                    'password': 'optionpassword',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'user': 'optionuser',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n+    def test_deprecated_keys_still_work(self):\n+        \"\"\"Ensure deprecated 'db' and 'passwd' kwargs still function as expected.\"\"\"\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=555',\n+            'deprecatedoptiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'deprecatedoptionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': 444,\n+                'OPTIONS': {\n+                    'db': 'deprecatedoptiondbname',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'user': 'optionuser',\n+                    'host': 'optionhost',\n+                    'port': 555,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n     def test_options_charset(self):\n         expected_args = [\n             'mysql',\n",
  "django__django-14434": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex 39c82bf..abb8271 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -2193,7 +2193,9 @@ class SchemaTests(TransactionTestCase):\n             if details['columns'] == ['name', 'birthday'] and details['unique'] and name != custom_constraint_name\n         ]\n         self.assertEqual(len(other_constraints), 1)\n-        # Drop the unique constraint\n+        # Verify that references_column correctly identifies column in constraint\n+        self.assertIs(sql.references_column(table, 'id'), False)\n+        self.assertIs(sql.references_column(table, 'non_existent_column'), False)\n         with connection.schema_editor() as editor:\n             AuthorWithUniqueNameAndBirthday._meta.constraints = []\n             editor.remove_constraint(AuthorWithUniqueNameAndBirthday, constraint)\n",
  "django__django-14493": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 17aecdd..c0716a2 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -454,6 +454,26 @@ class TestCollectionManifestStorage(TestHashedFiles, CollectionTestCase):\n         )\n \n \n+from django.core.exceptions import ImproperlyConfigured\n+from django.test import override_settings\n+from django.contrib.staticfiles.storage import ManifestStaticFilesStorage\n+from django.utils.six import StringIO\n+\n+# Define the storage subclass with max_post_process_passes = 0\n+class NoPostProcessReplacedPathStorage(ManifestStaticFilesStorage):\n+    max_post_process_passes = 0\n+\n+@override_settings(\n+    STATICFILES_STORAGE='staticfiles_tests.test_storage.NoPostProcessReplacedPathStorage'\n+)\n+class TestCollectionNoPostProcessReplacedPaths(CollectionTestCase):\n+    run_collectstatic_in_setUp = False\n+\n+    def test_collectstatistic_no_post_process_replaced_paths(self):\n+        stdout = StringIO()\n+        self.run_collectstatic(verbosity=1, stdout=stdout)\n+        self.assertIn('post-processed', stdout.getvalue())\n+\n @override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.NoneHashStorage')\n class TestCollectionNoneHashStorage(CollectionTestCase):\n     hashed_file_path = hashed_file_path\n",
  "django__django-14500": "",
  "django__django-14539": "",
  "django__django-14559": "",
  "django__django-14608": "",
  "django__django-14631": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex a48e4b6..f9eaf15 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -2129,6 +2129,42 @@ Password: <input type=\"password\" name=\"password\" required></li>\n         form = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n         self.assertEqual(form.changed_data, [])\n \n+    def test_clean_fields_uses_bound_field_initial(self):\n+        \"\"\"\n+        Test that the _clean_fields method uses the BoundField's initial value\n+        when a field is disabled.\n+        \"\"\"\n+        now = datetime.datetime(2006, 10, 25, 14, 30, 45)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now, disabled=True)\n+\n+        form = DateTimeForm({})\n+        form._clean_fields()\n+        self.assertEqual(form.cleaned_data['dt'], now)\n+\n+    def test_changed_data_uses_bound_field_initial(self):\n+        \"\"\"\n+        Test that the changed_data method uses the BoundField's initial value\n+        to determine if the data has changed.\n+        \"\"\"\n+        now = datetime.datetime(2006, 10, 25, 14, 30, 45)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now, disabled=False)\n+\n+        # No data provided, should use initial\n+        form = DateTimeForm({})\n+        self.assertEqual(form.changed_data, [])\n+\n+        # Data provided matches initial\n+        form = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n+        self.assertEqual(form.changed_data, [])\n+\n+        # Data provided does not match initial\n+        form = DateTimeForm({'dt': '2006-10-25 14:30:46'})\n+        self.assertEqual(form.changed_data, ['dt'])\n+\n     def test_help_text(self):\n         # You can specify descriptive text for a field by using the 'help_text' argument)\n         class UserRegistration(Form):\n",
  "django__django-14672": "",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..12a1e04 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,3 +1,4 @@\n+\n import json\n from contextlib import contextmanager\n \n@@ -10,6 +11,10 @@ from django.core.exceptions import PermissionDenied\n from django.http import Http404\n from django.test import RequestFactory, override_settings\n from django.urls import reverse, reverse_lazy\n+import datetime\n+from django.contrib.admin.views.autocomplete import AutocompleteJsonView\n+from django.http import JsonResponse\n+from .models import Question  # Assuming Question model is defined in models\n \n from .admin import AnswerAdmin, QuestionAdmin\n from .models import (\n",
  "django__django-14765": "",
  "django__django-14771": "",
  "django__django-14787": "",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..2382633 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5085,6 +5085,43 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         response = self.client.get(reverse('admin2:auth_user_password_change', args=(su.pk,)))\n         self.assertEqual(response.status_code, 404)\n \n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        \"\"\"\n+        Test that the readonly ForeignKey links point to the correct URL in the default admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('admin')\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test that the readonly ForeignKey links point to the correct URL in the custom admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('namespaced_admin')\n+\n+    def _test_readonly_foreignkey_links(self, admin_site):\n+        \"\"\"\n+        Helper function to test readonly ForeignKey links for different admin sites.\n+        \"\"\"\n+        chapter = Chapter.objects.create(\n+            title='Chapter 1',\n+            content='content',\n+            book=Book.objects.create(name='Book 1'),\n+        )\n+        language = Language.objects.create(iso='EN', name='English')\n+        chapter.language = language\n+        chapter.save()\n+        \n+        url = reverse(f'{admin_site}:admin_views_chapter_change', args=(chapter.pk,))\n+        response = self.client.get(url)\n+        self.assertEqual(response.status_code, 200)\n+\n+        # URL expected for 'language' ForeignKey field link\n+        language_url = reverse(f'{admin_site}:admin_views_language_change', args=(quote(language.pk),))\n+        self.assertContains(\n+            response,\n+            '<div class=\"readonly\"><a href=\"%s\">EN</a></div>' % language_url,\n+            html=True,\n+        )\n+\n     def test_change_form_renders_correct_null_choice_value(self):\n         \"\"\"\n         Regression test for #17911.\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..0fdb7c7 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -341,6 +342,17 @@ class ModelChoiceFieldTests(TestCase):\n </div>\"\"\" % (self.c1.pk, self.c2.pk, self.c3.pk),\n         )\n \n+    def test_choice_value_hash(self):\n+        # Create two different ModelChoiceIteratorValue objects\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        \n+        # Ensure the hash is consistent with another object having the same pk but no instance\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(self.c1.pk, None)))\n+        \n+        # Ensure the hash differs for objects with different pks\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+\n     def test_choices_not_fetched_when_not_rendering(self):\n         with self.assertNumQueries(1):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..460d45d 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -785,6 +785,43 @@ class OperationTests(OperationTestBase):\n             migrations.RenameModel(\"Pony\", \"Pony2\"),\n         ], atomic=connection.features.supports_atomic_references_rename)\n         Pony = project_state.apps.get_model(app_label, \"Pony2\")\n+        \n+        self.test_rename_model_with_db_table_noop()\n+\n+    def test_rename_model_with_db_table_noop(self):\n+        app_label = 'test_rmwdbtn'\n+        project_state = self.apply_operations(\n+            app_label, \n+            ProjectState(), \n+            operations=[\n+                migrations.CreateModel('Rider', fields=[\n+                    ('id', models.AutoField(primary_key=True)),\n+                ], options={'db_table': 'rider'}),\n+                migrations.CreateModel('Pony', fields=[\n+                    ('id', models.AutoField(primary_key=True)),\n+                    ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+                ]),\n+            ]\n+        )\n+        \n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+                \n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+        \n+        # Additional test for SQLite (expected recreate but should be noop with db_table)\n+        if connection.vendor == 'sqlite':\n+            with connection.schema_editor() as editor:\n+                with self.assertRaises(NotImplementedError):\n+                    operation.database_forwards(app_label, editor, project_state, new_state)\n+                    operation.database_backwards(app_label, editor, new_state, project_state)\n         Rider = project_state.apps.get_model(app_label, \"Rider\")\n         pony = Pony.objects.create()\n         rider = Rider.objects.create()\n",
  "django__django-15022": "",
  "django__django-15037": "diff --git a/tests/inspectdb/tests.py b/tests/inspectdb/tests.py\nindex 19402bb..ffbc569 100644\n--- a/tests/inspectdb/tests.py\n+++ b/tests/inspectdb/tests.py\n@@ -204,7 +204,18 @@ class InspectDBTestCase(TestCase):\n             output,\n         )\n \n-    def test_digits_column_name_introspection(self):\n+    def test_foreign_key_to_unique_field(self):\n+        \"\"\"\n+        Test that a foreign key to a unique field, which is not the primary key,\n+        is correctly reflected in the generated model using inspectdb.\n+        \"\"\"\n+        out = StringIO()\n+        call_command('inspectdb', 'inspectdb_foreignkeytouniquefield', stdout=out)\n+        output = out.getvalue()\n+        self.assertIn(\n+            \"other_id = models.ForeignKey('InspectdbFoo', models.DO_NOTHING, to_field='other_id')\",\n+            output,\n+        )\n         \"\"\"Introspection of column names consist/start with digits (#16536/#17676)\"\"\"\n         char_field_type = connection.features.introspected_field_types['CharField']\n         out = StringIO()\n",
  "django__django-15103": "diff --git a/tests/template_tests/filter_tests/test_json_script.py b/tests/template_tests/filter_tests/test_json_script.py\nindex 607e24c..9b39a35 100644\n--- a/tests/template_tests/filter_tests/test_json_script.py\n+++ b/tests/template_tests/filter_tests/test_json_script.py\n@@ -1,6 +1,8 @@\n+\n from django.test import SimpleTestCase\n \n from ..utils import setup\n+from django.utils.html import json_script\n \n \n class JsonScriptTests(SimpleTestCase):\n@@ -16,4 +18,4 @@ class JsonScriptTests(SimpleTestCase):\n             '<script id=\"test_id\" type=\"application/json\">'\n             '{\"a\": \"testing\\\\r\\\\njson \\'string\\\\\" \\\\u003Cb\\\\u003Eescaping\\\\u003C/b\\\\u003E\"}'\n             '</script>'\n-        )\n+        )\n",
  "django__django-15104": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 04452fa..0f4fc88 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2835,6 +2835,30 @@ class AutodetectorTests(TestCase):\n                 )\n \n \n+class TestCustomFKFieldMigration(SimpleTestCase):\n+    def test_add_custom_fk_with_hardcoded_to(self):\n+        # A custom ForeignKey with hardcoded 'to' value\n+        class HardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.Author'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']\n+                return name, path, args, kwargs\n+\n+        book_hardcoded_fk_to = ModelState('testapp', 'Book', [\n+            ('author', HardcodedForeignKey(on_delete=models.CASCADE)),\n+        ])\n+        changes = self.get_changes(\n+            [self.author_empty],\n+            [self.author_empty, book_hardcoded_fk_to],\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='Book')\n+\n class MigrationSuggestNameTests(SimpleTestCase):\n     def test_no_operations(self):\n         class Migration(migrations.Migration):\n",
  "django__django-15127": "",
  "django__django-15128": "diff --git a/tests/queries/models.py b/tests/queries/models.py\nindex a7bb7e8..e2b4fdd 100644\n--- a/tests/queries/models.py\n+++ b/tests/queries/models.py\n@@ -613,7 +613,8 @@ class OrderItem(models.Model):\n \n \n class BaseUser(models.Model):\n-    pass\n+    annotation = models.ForeignKey('Annotation', models.CASCADE, null=True, blank=True)\n+    note = models.ForeignKey('Note', on_delete=models.CASCADE, null=True, blank=True)\n \n \n class Task(models.Model):\n",
  "django__django-15161": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 5fdccc5..c61975e 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1755,6 +1755,27 @@ class ValueTests(TestCase):\n         Time.objects.update(time=Value(datetime.time(1), output_field=TimeField()))\n         self.assertEqual(Time.objects.get().time, datetime.time(1))\n \n+    def test_deconstruct_F(self):\n+        f = F('field_name')\n+        path, args, kwargs = f.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, (f.name,))\n+        self.assertEqual(kwargs, {})\n+\n+    def test_deconstruct_OrderBy(self):\n+        order_by = models.OrderBy(F('name').desc())\n+        path, args, kwargs = order_by.deconstruct()\n+        self.assertEqual(path, 'django.db.models.OrderBy')\n+        self.assertEqual(args, (models.F('name').desc(),))\n+        self.assertEqual(kwargs, {})\n+\n+    def test_deconstruct_ExpressionWrapper(self):\n+        wrapper = models.ExpressionWrapper(F('pages'), output_field=models.IntegerField())\n+        path, args, kwargs = wrapper.deconstruct()\n+        self.assertEqual(path, 'django.db.models.ExpressionWrapper')\n+        self.assertEqual(args, (F('pages'),))\n+        self.assertEqual(kwargs, {'output_field': models.IntegerField()})\n+\n     def test_update_UUIDField_using_Value(self):\n         UUID.objects.create()\n         UUID.objects.update(uuid=Value(uuid.UUID('12345678901234567890123456789012'), output_field=UUIDField()))\n",
  "django__django-15268": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a6c0858..de11124 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1731,6 +1731,27 @@ class AutodetectorTests(TestCase):\n             index_together={('name',), ('age',)},\n         )\n \n+    def test_optimize_alter_foo_together(self):\n+        \"\"\"\n+        Test that multiple AlterFooTogether operations can be optimized into one.\n+        \"\"\"\n+        changes = self.get_changes(\n+            [self.author_empty, self.book_foo_together],\n+            [self.author_empty, self.book_foo_together_optimized]\n+        )\n+        # Right number/type of migrations?\n+        self.assertNumberMigrations(changes, \"otherapp\", 1)\n+        self.assertOperationTypes(changes, 'otherapp', 0, [\n+            'AlterUniqueTogether',\n+            'AlterIndexTogether',\n+        ])\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 0, name='book', unique_together={('col',)},\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 1, name='book', index_together={('col',)},\n+        )\n+\n     def test_rename_field_and_foo_together(self):\n         \"\"\"Fields are renamed before updating index/unique_together.\"\"\"\n         changes = self.get_changes(\n",
  "django__django-15277": "",
  "django__django-15278": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex dd02aee..68dd53d 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -618,7 +618,43 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor:\n             editor.add_field(Author, new_field)\n         # Ensure the field is there\n-        columns = self.column_classes(Author)\n+from django.test import TestCase\n+from django.db import connection\n+from django.db.models import CASCADE, OneToOneField, Model\n+from django.db.utils import OperationalError\n+\n+class Author(Model):\n+    pass\n+\n+class Note(Model):\n+    pass\n+\n+class SchemaEditorTests(TestCase):\n+    def column_classes(self, model):\n+        with connection.cursor() as cursor:\n+            cursor.execute(f\"PRAGMA table_info({model._meta.db_table})\")\n+            return {row[1]: (row[2], row) for row in cursor.fetchall()}\n+\n+    def test_add_field_o2o_nullable(self):\n+        \"\"\"\n+        Test adding a nullable OneToOneField does not crash on SQLite.\n+        \"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        \n+        new_field = OneToOneField(Note, CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+\n+        # Attempt to add the OneToOneField to the Author model\n+        try:\n+            with connection.schema_editor() as editor:\n+                editor.add_field(Author, new_field)\n+            columns = self.column_classes(Author)\n+            self.assertIn('note_id', columns)\n+            self.assertTrue(columns['note_id'][1][5])  # Check if nullable\n+        except OperationalError as e:\n+            self.fail(f\"Adding a nullable OneToOneField raised an OperationalError: {e}\")\n         field_type, field_info = columns['thing']\n         self.assertEqual(field_type, connection.features.introspected_field_types['IntegerField'])\n         # Make sure the values were transformed correctly\n@@ -636,7 +672,43 @@ class SchemaTests(TransactionTestCase):\n         new_field.set_attributes_from_name(\"bits\")\n         with connection.schema_editor() as editor:\n             editor.add_field(Author, new_field)\n-        columns = self.column_classes(Author)\n+from django.test import TestCase\n+from django.db import connection\n+from django.db.models import CASCADE, OneToOneField, Model\n+from django.db.utils import OperationalError\n+\n+class Author(Model):\n+    pass\n+\n+class Note(Model):\n+    pass\n+\n+class SchemaEditorTests(TestCase):\n+    def column_classes(self, model):\n+        with connection.cursor() as cursor:\n+            cursor.execute(f\"PRAGMA table_info({model._meta.db_table})\")\n+            return {row[1]: (row[2], row) for row in cursor.fetchall()}\n+\n+    def test_add_field_o2o_nullable(self):\n+        \"\"\"\n+        Test adding a nullable OneToOneField does not crash on SQLite.\n+        \"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        \n+        new_field = OneToOneField(Note, CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+\n+        # Attempt to add the OneToOneField to the Author model\n+        try:\n+            with connection.schema_editor() as editor:\n+                editor.add_field(Author, new_field)\n+            columns = self.column_classes(Author)\n+            self.assertIn('note_id', columns)\n+            self.assertTrue(columns['note_id'][1][5])  # Check if nullable\n+        except OperationalError as e:\n+            self.fail(f\"Adding a nullable OneToOneField raised an OperationalError: {e}\")\n         # MySQL annoyingly uses the same backend, so it'll come back as one of\n         # these two types.\n         self.assertIn(columns['bits'][0], (\"BinaryField\", \"TextField\"))\n",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..aa4fd8f 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -54,7 +54,18 @@ class BasicFieldTests(SimpleTestCase):\n         self.assertTrue(hasattr(instance, 'get_fieldname_display'))\n         self.assertFalse(hasattr(instance, 'get_modelname_display'))\n \n-    def test_field_verbose_name(self):\n+    def test_hash_immutability(self):\n+        # Create a field instance\n+        field = models.CharField(max_length=200)\n+        # Get the hash of the field\n+        field_hash = hash(field)\n+\n+        # Assign the field to a model class\n+        class MyModel(models.Model):\n+            name = field\n+\n+        # Assert that the hash of the field has not changed\n+        self.assertEqual(field_hash, hash(field))\n         m = VerboseNameField\n         for i in range(1, 22):\n             self.assertEqual(m._meta.get_field('field%d' % i).verbose_name, 'verbose field%d' % i)\n",
  "django__django-15368": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex 447c150..71c7b9a 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -204,13 +204,56 @@ class BulkUpdateTests(TestCase):\n             [cat.special_name for cat in special_categories]\n         )\n \n-    def test_field_references(self):\n+from django.db.models import F\n+from .models import Note, Number, Individual, CustomDbColumn\n+\n+class BulkUpdateTests(TestCase):\n+\n+    def test_f_expression(self):\n+        notes = [\n+            Note.objects.create(note='test_note', misc='test_misc')\n+            for _ in range(10)\n+        ]\n+        for note in notes:\n+            note.misc = F('note')\n+        Note.objects.bulk_update(notes, ['misc'])\n+        self.assertCountEqual(Note.objects.filter(misc='test_note'), notes)\n+        numbers = [Number.objects.create(num=0) for _ in range(10)]\n+        for number in numbers:\n+            number.num = F('num') + 1\n+        Number.objects.bulk_update(numbers, ['num'])\n+from django.db.models import F\n+from .models import Note, Number, Individual, CustomDbColumn\n+\n+class BulkUpdateTests(TestCase):\n+\n+    def test_f_expression(self):\n+        notes = [\n+            Note.objects.create(note='test_note', misc='test_misc')\n+            for _ in range(10)\n+        ]\n+        for note in notes:\n+            note.misc = F('note')\n+        Note.objects.bulk_update(notes, ['misc'])\n+        self.assertCountEqual(Note.objects.filter(misc='test_note'), notes)\n         numbers = [Number.objects.create(num=0) for _ in range(10)]\n         for number in numbers:\n             number.num = F('num') + 1\n         Number.objects.bulk_update(numbers, ['num'])\n         self.assertCountEqual(Number.objects.filter(num=1), numbers)\n \n+    def test_f_expression_with_addition(self):\n+        notes = [\n+            Note.objects.create(note='initial_note', misc='another_note')\n+            for _ in range(5)\n+        ]\n+        for note in notes:\n+            note.misc = F('note') + F('misc')\n+        Note.objects.bulk_update(notes, ['misc'])\n+        self.assertCountEqual(\n+            Note.objects.filter(misc='initial_noteanother_note'), notes\n+        )\n+\n     def test_booleanfield(self):\n         individuals = [Individual.objects.create(alive=False) for _ in range(10)]\n         for individual in individuals:\n",
  "django__django-15380": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex e2de333..4c343aa 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1049,6 +1049,47 @@ class AutodetectorTests(TestCase):\n             new_name='renamed_foo',\n         )\n \n+    def test_rename_model_and_field(self):\n+        \"\"\"Tests autodetection of renaming a model and a field simultaneously.\"\"\"\n+        # Initial state with the original model and field names\n+        original_state = [\n+            ModelState('testapp', 'Author', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('name', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        \n+        # New state with both model and field renamed\n+        new_state = [\n+            ModelState('testapp', 'RenamedAuthor', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('renamed_name', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        \n+        # Using the MigrationQuestioner to simulate user confirmation\n+        changes = self.get_changes(\n+            original_state,\n+            new_state,\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        \n+        # Verify that a single migration is created\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        \n+        # Check that both the RenameModel and RenameField operations are detected\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel', 'RenameField'])\n+        \n+        # Validate the attributes of the RenameModel operation\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 0, old_name='Author', new_name='RenamedAuthor',\n+        )\n+        \n+        # Validate the attributes of the RenameField operation\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 1, old_name='name', new_name='renamed_name',\n+        )\n+\n     def test_rename_model(self):\n         \"\"\"Tests autodetection of renamed models.\"\"\"\n         changes = self.get_changes(\n",
  "django__django-15382": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex bd890ac..e25990a 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1906,6 +1906,39 @@ class ExistsTests(TestCase):\n         self.assertNotIn('ORDER BY', captured_sql)\n \n \n+class ExistsTests(TestCase):\n+\n+    def test_negated_empty_exists(self):\n+        manager = Manager.objects.create(name=\"test manager\")\n+        qs = Manager.objects.filter(\n+            ~Exists(Manager.objects.none()) & Q(pk=manager.pk),\n+        )\n+        self.assertSequenceEqual(qs, [manager])\n+\n+    def test_non_negated_empty_exists(self):\n+        manager = Manager.objects.create(name=\"test manager\")\n+        qs = Manager.objects.filter(\n+            Exists(Manager.objects.none()) & Q(pk=manager.pk),\n+        )\n+        self.assertSequenceEqual(qs, [])\n+\n+    def test_negated_non_empty_exists(self):\n+        manager = Manager.objects.create(name=\"test manager\")\n+        other_mgr = Manager.objects.create(name=\"other manager\")\n+        qs = Manager.objects.filter(\n+            ~Exists(Manager.objects.filter(pk=other_mgr.pk)) & Q(pk=manager.pk),\n+        )\n+        self.assertSequenceEqual(qs, [manager])\n+\n+    def test_non_negated_non_empty_exists(self):\n+        manager = Manager.objects.create(name=\"test manager\")\n+        other_mgr = Manager.objects.create(name=\"other manager\")\n+        qs = Manager.objects.filter(\n+            Exists(Manager.objects.filter(pk=other_mgr.pk)) & Q(pk=manager.pk),\n+        )\n+        self.assertSequenceEqual(qs, [])\n+\n+\n class FieldTransformTests(TestCase):\n \n     @classmethod\n",
  "django__django-15467": "",
  "django__django-15499": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 5df1b06..73b54f0 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -128,6 +128,34 @@ class OptimizerTests(SimpleTestCase):\n                 ),\n             ],\n         )\n+        \n+    def test_create_with_multiple_alter_model_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Bar\", fields=[]),\n+                migrations.AlterModelManagers(\n+                    name=\"Bar\",\n+                    managers=[\n+                        (\"default\", models.Manager()),\n+                    ],\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Bar\",\n+                    managers=[\n+                        (\"custom\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    managers=[\n+                        (\"custom\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n \n     def test_create_model_and_remove_model_options(self):\n         self.assertOptimizesTo(\n",
  "django__django-15525": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 3640e99..752162a 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -791,6 +791,33 @@ class NaturalKeyFixtureTests(TestCase):\n         )\n \n \n+from django.test import TestCase\n+from django.core import management\n+from .models import Author, Book\n+\n+class NaturalKeyFixtureOnOtherDatabaseTests(TestCase):\n+    databases = {\"other\"}\n+\n+    def test_natural_key_dependencies(self):\n+        \"\"\"\n+        Test that natural keys with foreign keys work in a multi-database setup.\n+        Ensure data can be loaded into a non-default database using natural keys.\n+        \"\"\"\n+        # Load the fixture data into the 'other' database\n+        management.call_command(\n+            \"loaddata\",\n+            \"nk_with_foreign_key.json\",\n+            database=\"other\",\n+            verbosity=0,\n+        )\n+        \n+        # Fetch the objects from the 'other' database\n+        obj = Book.objects.using(\"other\").get()\n+        \n+        # Check that the book and author names match the expected values\n+        self.assertEqual(obj.title, \"The Ring\")\n+        self.assertEqual(obj.author.name, \"JR Tolkien\")\n+\n class M2MNaturalKeyFixtureTests(TestCase):\n     \"\"\"Tests for ticket #14426.\"\"\"\n \n",
  "django__django-15561": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex b8137da..828a9c5 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -3955,6 +3955,39 @@ class SchemaTests(TransactionTestCase):\n             validators=[lambda x: x],\n             verbose_name=\"verbose name\",\n         )\n+\n+    def test_alter_multiple_field_choices_noop(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        \n+        # Original field\n+        old_field = Author._meta.get_field(\"name\")\n+        \n+        # New field with choices\n+        new_field_1 = CharField(\n+            choices=((\"Alice\", \"Alice\"), (\"Bob\", \"Bob\")),\n+            max_length=255,\n+        )\n+        new_field_1.set_attributes_from_name(\"name\")\n+        \n+        # Another new field with different choices\n+        new_field_2 = CharField(\n+            choices=((\"Charlie\", \"Charlie\"), (\"Dana\", \"Dana\")),\n+            max_length=255,\n+        )\n+        new_field_2.set_attributes_from_name(\"name\")\n+        \n+        # Alter field to new_field_1 and back to old_field to check noop\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field_1, strict=True)\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, new_field_1, old_field, strict=True)\n+\n+        # Alter field to new_field_2 and back to old_field to check noop\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field_2, strict=True)\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, new_field_2, old_field, strict=True)\n         new_field.set_attributes_from_name(\"author\")\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             editor.alter_field(Book, old_field, new_field, strict=True)\n",
  "django__django-15569": "diff --git a/tests/custom_lookups/tests.py b/tests/custom_lookups/tests.py\nindex 74c331a..b6c6203 100644\n--- a/tests/custom_lookups/tests.py\n+++ b/tests/custom_lookups/tests.py\n@@ -312,7 +312,17 @@ class LookupTests(TestCase):\n         with register_lookup(models.Field, Exactly):\n             self.assertIsNone(field.get_lookup(\"exactly\"))\n \n-    def test_lookups_caching(self):\n+    def test_unregister_lookup_clears_cache(self):\n+        field = Article._meta.get_field(\"author\")\n+\n+        # Register custom lookup and ensure it's cached\n+        with register_lookup(models.ForeignObject, Exactly):\n+            self.assertIn(\"exactly\", field.get_lookups())\n+\n+        # Unregister the lookup and check if the cache is cleared\n+        models.ForeignObject._unregister_lookup(Exactly)\n+        field.get_lookups.cache_clear()  # Simulate cache clearing\n+        self.assertNotIn(\"exactly\", field.get_lookups())\n         field = Article._meta.get_field(\"author\")\n \n         # clear and re-cache\n",
  "django__django-15572": "",
  "django__django-15731": "diff --git a/tests/basic/tests.py b/tests/basic/tests.py\nindex 902f114..a8e4a7a 100644\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -1,3 +1,4 @@\n+\n import threading\n from datetime import datetime, timedelta\n from unittest import mock\n@@ -736,8 +737,20 @@ class ManagerTest(SimpleTestCase):\n             sorted(self.QUERYSET_PROXY_METHODS),\n         )\n \n+import inspect\n+\n+class SignatureTest(TestCase):\n+    def test_manager_method_signature(self):\n+        # Test bulk_create to ensure the signature is correctly returned\n+        expected_signature = \"(objs, batch_size=None, ignore_conflicts=False, update_conflicts=False, update_fields=None, unique_fields=None)\"\n+        actual_signature = str(inspect.signature(Article.objects.bulk_create))\n+        self.assertEqual(actual_signature, expected_signature)\n \n-class SelectOnSaveTests(TestCase):\n+    def test_other_manager_method_signature(self):\n+        # Test one more method from the manager to verify the signatures are accurate\n+        expected_signature = \"(id)\"\n+        actual_signature = str(inspect.signature(Article.objects.get))\n+        self.assertEqual(actual_signature, expected_signature)\n     def test_select_on_save(self):\n         a1 = Article.objects.create(pub_date=datetime.now())\n         with self.assertNumQueries(1):\n",
  "django__django-15741": "diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex c6dbc53..c2320be 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -1,6 +1,8 @@\n+\n from datetime import datetime, time\n \n-from django.template.defaultfilters import date\n+from django.template.defaultfilters import date, time as time_filter\n+from django.utils.translation import gettext_lazy as _\n from django.test import SimpleTestCase\n from django.utils import timezone, translation\n \n@@ -9,6 +11,15 @@ from .timezone_utils import TimezoneTestCase\n \n \n class DateTests(TimezoneTestCase):\n+    @setup({\"datelazy_format\": '{{ t|date:_(\"H:i\") }}'})\n+    def test_date_filter_with_lazy_string(self):\n+        output = self.engine.render_to_string(\"datelazy_format\", {\"t\": time(12, 34)})\n+        self.assertEqual(output, \"12:34\")\n+\n+    @setup({\"timelazy\": '{{ t|time:\"H:i\" }}'})\n+    def test_time_filter_with_lazy_string(self):\n+        output = self.engine.render_to_string(\"timelazy\", {\"t\": time(1, 2)})\n+        self.assertEqual(output, \"01:02\")\n     @setup({\"date01\": '{{ d|date:\"m\" }}'})\n     def test_date01(self):\n         output = self.engine.render_to_string(\"date01\", {\"d\": datetime(2008, 1, 1)})\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..de44da2 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -398,6 +398,38 @@ class ProxyModelTests(TestCase):\n     def test_eq(self):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n+    def test_select_related_only_proxy(self):\n+        # Create instances of models\n+        custom_model = CustomModel.objects.create(name=\"Test Custom\")\n+        proxy_custom_model = ProxyCustomModel.objects.create(name=\"Test Proxy\")\n+        another_model = AnotherModel.objects.create(custom=proxy_custom_model)\n+        \n+        # Attempt to use select_related and only on proxy model\n+        try:\n+            objs = list(AnotherModel.objects.select_related(\"custom\").only(\"custom__name\").all())\n+            self.assertEqual(objs[0], another_model)\n+        except Exception as e:\n+            self.fail(f\"select_related and only on proxy model raised an exception: {e}\")\n+\n+    def test_select_related_only_proxy_empty(self):\n+        # Test on an empty queryset\n+        try:\n+            objs = list(AnotherModel.objects.select_related(\"custom\").only(\"custom__name\").all())\n+            self.assertEqual(objs, [])\n+        except Exception as e:\n+            self.fail(f\"select_related and only on empty queryset with proxy model raised an exception: {e}\")\n+\n+    def test_select_related_only_normal(self):\n+        # Test select_related and only on a normal model (not proxy) to ensure standard behavior\n+        custom_model = CustomModel.objects.create(name=\"Test Custom\")\n+        another_model = AnotherModel.objects.create(custom=custom_model)\n+\n+        try:\n+            objs = list(AnotherModel.objects.select_related(\"custom\").only(\"custom__name\").all())\n+            self.assertEqual(objs[0], another_model)\n+        except Exception as e:\n+            self.fail(f\"select_related and only on normal model raised an exception: {e}\")\n+\n \n @override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n class ProxyModelAdminTests(TestCase):\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..9dd6e5e 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -151,12 +151,26 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ),\n         )\n \n+    def test_parameters_order(self):\n+        # Test with additional parameters that should precede the dbname.\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n+        )\n+\n     def test_parameters(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n+    def test_parameters_order(self):\n+        # Test with additional parameters that should precede the dbname.\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n+        )\n+\n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n",
  "django__django-15863": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 08f08e1..5ad2e2c 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -74,6 +74,29 @@ class FunctionTests(SimpleTestCase):\n         self.assertEqual(floatformat(1.5e-15, -20), \"0.00000000000000150000\")\n         self.assertEqual(floatformat(1.00000000000000015, 16), \"1.0000000000000002\")\n \n+    def test_decimal_precision(self):\n+        # Test case to check the precision of Decimal values\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.12345678901234567890\"), 20),\n+            \"42.12345678901234567890\"\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"-42.12345678901234567890\"), 20),\n+            \"-42.12345678901234567890\"\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"0.00000000000000000001\"), 20),\n+            \"0.00000000000000000001\"\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"1.00000000000000000000\"), 20),\n+            \"1.00000000000000000000\"\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"99999999999999999999.99999999999999999999\"), 20),\n+            \"99999999999999999999.99999999999999999999\"\n+        )\n+\n     def test_force_grouping(self):\n         with translation.override(\"en\"):\n             self.assertEqual(floatformat(10000, \"g\"), \"10,000\")\n",
  "django__django-15930": "diff --git a/tests/expressions_case/tests.py b/tests/expressions_case/tests.py\nindex 696f4d0..f11322b 100644\n--- a/tests/expressions_case/tests.py\n+++ b/tests/expressions_case/tests.py\n@@ -415,7 +415,25 @@ class CaseExpressionTests(TestCase):\n         self.assertEqual(len(objects), CaseTestModel.objects.count())\n         self.assertTrue(all(obj.selected == \"not selected\" for obj in objects))\n \n-    def test_combined_expression(self):\n+    def test_annotate_with_full_when(self):\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+            )\n+        )\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n+\n+    def test_annotate_with_inverted_empty_when(self):\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+            )\n+        )\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n         self.assertQuerysetEqual(\n             CaseTestModel.objects.annotate(\n                 test=Case(\n",
  "django__django-15987": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 5ac9ab9..b51b699 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n # Unittests for fixtures.\n import json\n import os\n@@ -575,7 +576,18 @@ class TestFixtures(TestCase):\n             os.path.join(_cur_dir, \"fixtures_2\"),\n         ]\n     )\n-    def test_loaddata_with_valid_fixture_dirs(self):\n+    @override_settings(FIXTURE_DIRS=[Path(_cur_dir) / \"fixtures\", Path(_cur_dir) / \"fixtures\"])\n+    def test_fixture_dirs_duplicates_as_pathlib(self):\n+        \"\"\"\n+        Test that duplicate fixture directories given as Path instances\n+        in FIXTURE_DIRS are detected and raise an ImproperlyConfigured error.\n+        \"\"\"\n+        msg = (\n+            \"'%s' is a duplicate fixture directory in settings.FIXTURE_DIRS.\"\n+            % (os.path.join(_cur_dir, \"fixtures\"))\n+        )\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            management.call_command(\"loaddata\", \"duplicate_fixture.json\", verbosity=0)\n         management.call_command(\n             \"loaddata\",\n             \"absolute.json\",\n",
  "django__django-16032": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex bcf8df9..29c3369 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -988,6 +988,49 @@ class NonAggregateAnnotationTestCase(TestCase):\n         self.assertCountEqual(\n             publisher_books_qs, [{\"name\": \"Sams\"}, {\"name\": \"Morgan Kaufmann\"}]\n         )\n+        \n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        self.assertCountEqual(\n+            publisher_books_qs,\n+            [\n+                {'name': 'Apress'},\n+                {'name': 'Sams'},\n+                {'name': 'Prentice Hall'},\n+                {'name': 'Morgan Kaufmann'}\n+            ]\n+        )\n+        \n+    def test_annotation_and_alias_filter_related_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(pages__gt=400)\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = Publisher.objects.filter(\n+            book__in=long_books_qs,\n+        ).values(\"name\")\n+        self.assertCountEqual(\n+            publisher_books_qs,\n+            [\n+                {\"name\": \"Apress\"},\n+                {\"name\": \"Sams\"},\n+                {\"name\": \"Prentice Hall\"},\n+                {\"name\": \"Morgan Kaufmann\"},\n+            ],\n+        )\n \n     def test_annotation_exists_aggregate_values_chaining(self):\n         qs = (\n",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..bca356c 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2416,7 +2416,13 @@ class CombinedExpressionTests(SimpleTestCase):\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        connectors = [\n+            Combinable.ADD,\n+            Combinable.SUB,\n+            Combinable.MUL,\n+            Combinable.DIV,\n+            Combinable.MOD,  # Add MOD to connectors\n+        ]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..dd5939a 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,62 @@\n+\n+class ListEditableTransactionTests(TestCase):\n+    fixtures = ['admin-views-users.xml']\n+\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.superuser = User.objects.create_superuser(\n+            username='super',\n+            password='secret',\n+            email='super@example.com',\n+        )\n+    \n+    @skipUnlessDBFeature('supports_transactions')\n+    def test_list_editable_atomicity(self):\n+        a = Swallow.objects.create(origin=\"Swallow A\", load=4, speed=1)\n+        b = Swallow.objects.create(origin=\"Swallow B\", load=2, speed=2)\n+\n+        self.client.force_login(self.superuser)\n+        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n+        data = {\n+            \"form-TOTAL_FORMS\": \"2\",\n+            \"form-INITIAL_FORMS\": \"2\",\n+            \"form-MIN_NUM_FORMS\": \"0\",\n+            \"form-MAX_NUM_FORMS\": \"1000\",\n+            \"form-0-uuid\": str(a.pk),\n+            \"form-1-uuid\": str(b.pk),\n+            \"form-0-load\": \"9.0\",\n+            \"form-0-speed\": \"3.0\",\n+            \"form-1-load\": \"5.0\",\n+            \"form-1-speed\": \"1.0\",\n+            \"_save\": \"Save\",\n+        }\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\", side_effect=DatabaseError\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Original values are preserved.\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\",\n+            side_effect=[None, DatabaseError],\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Original values are preserved.\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+\n import datetime\n \n from django.contrib import admin\n@@ -16,7 +75,9 @@ from django.contrib.admin.views.main import (\n from django.contrib.auth.models import User\n from django.contrib.contenttypes.models import ContentType\n from django.contrib.messages.storage.cookie import CookieStorage\n-from django.db import connection, models\n+from unittest import mock\n+from django.db import DatabaseError, connection, models\n+from django.test import TestCase, skipUnlessDBFeature\n from django.db.models import F, Field, IntegerField\n from django.db.models.functions import Upper\n from django.db.models.lookups import Contains, Exact\n",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..bebedd4 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2399,8 +2399,28 @@ class MakeMigrationsTests(MigrationTestBase):\n             module=\"migrations.test_migrations_no_changes\"\n         ):\n             call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n-\n-    def test_makemigrations_migration_path_output(self):\n+    \n+    def test_makemigrations_check_no_migrations_created(self):\n+        \"\"\"\n+        makemigrations --check should not create any migration files and should exit\n+        with a status of 0 if no changes are detected, and with a status of 1 if changes\n+        are detected.\n+        \"\"\"\n+        out = io.StringIO()\n+        # When no changes are detected\n+        with self.temporary_migration_module(module=\"migrations.test_migrations_no_changes\"):\n+            with self.assertRaises(SystemExit) as cm:\n+                call_command(\"makemigrations\", \"--check\", \"migrations\", stdout=out, stderr=out)\n+            self.assertEqual(cm.exception.code, 0)\n+\n+        # When changes are detected\n+        with self.temporary_migration_module() as tmpdir:\n+            # Pretend a change has been made\n+            with open(os.path.join(tmpdir, \"0001_initial.py\"), \"w\") as f:\n+                f.write(\"test content\")\n+            with self.assertRaises(SystemExit) as cm:\n+                call_command(\"makemigrations\", \"--check\", \"migrations\", stdout=out, stderr=out)\n+            self.assertEqual(cm.exception.code, 1)\n         \"\"\"\n         makemigrations should print the relative paths to the migrations unless\n         they are outside of the current tree, in which case the absolute path\n",
  "django__django-16136": "diff --git a/tests/async/tests.py b/tests/async/tests.py\nindex 72e103e..f2ca20a 100644\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -1,3 +1,4 @@\n+\n import asyncio\n import os\n from unittest import mock\n@@ -7,7 +8,9 @@ from asgiref.sync import async_to_sync\n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n from django.http import HttpResponse\n-from django.test import SimpleTestCase\n+import asyncio\n+from django.http import HttpResponseNotAllowed\n+from django.test import RequestFactory, SimpleTestCase\n from django.utils.asyncio import async_unsafe\n from django.views.generic.base import View\n \n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..445ed6a 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,4 +1,6 @@\n+\n import datetime\n+import urllib.parse\n import re\n from unittest import mock\n \n@@ -22,6 +24,7 @@ from django.core.mail import EmailMultiAlternatives\n from django.forms import forms\n from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n+from django.urls import reverse\n from django.utils import translation\n from django.utils.text import capfirst\n from django.utils.translation import gettext as _\n@@ -892,7 +895,36 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n-    def test_custom_form(self):\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_password_reset_link_with_pk(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # Construct the expected password reset link using pk\n+        expected_link = f\"../../{user.pk}/password/\"\n+        self.assertIn(expected_link, matches.group(1))\n         class CustomUserChangeForm(UserChangeForm):\n             class Meta(UserChangeForm.Meta):\n                 model = ExtensionUser\n",
  "django__django-16145": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex 04d2f0e..12bd836 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1600,6 +1600,21 @@ class ManageRunserver(SimpleTestCase):\n             \"2001:0db8:1234:5678::9\", \"7000\", ipv6=True, raw_ipv6=True\n         )\n \n+    @mock.patch(\"django.core.management.commands.runserver.run\")\n+    @mock.patch(\"django.core.management.base.BaseCommand.check_migrations\")\n+    def test_zero_ip_addr(self, *mocked_objects):\n+        call_command(\n+            self.cmd,\n+            addrport=\"0:8000\",\n+            use_reloader=False,\n+            skip_checks=True,\n+            stdout=self.output,\n+        )\n+        self.assertIn(\n+            \"Starting development server at http://0.0.0.0:8000/\",\n+            self.output.getvalue(),\n+        )\n+\n     def test_runner_hostname(self):\n         call_command(self.cmd, addrport=\"localhost:8000\")\n         self.assertServerSettings(\"localhost\", \"8000\")\n",
  "django__django-16255": "",
  "django__django-16315": "diff --git a/tests/bulk_create/models.py b/tests/bulk_create/models.py\nindex c5f5c07..2b5dcf9 100644\n--- a/tests/bulk_create/models.py\n+++ b/tests/bulk_create/models.py\n@@ -59,6 +59,11 @@ class Pizzeria(Restaurant):\n     pass\n \n \n+class FieldsWithDbColumns(models.Model):\n+    rank = models.IntegerField(unique=True, db_column=\"rAnK\")\n+    name = models.CharField(max_length=15, null=True, db_column=\"oTheRNaMe\")\n+\n+\n class State(models.Model):\n     two_letter_code = models.CharField(max_length=2, primary_key=True)\n \n@@ -79,6 +84,11 @@ class NoFields(models.Model):\n     pass\n \n \n+class FieldsWithDbColumns(models.Model):\n+    rank = models.IntegerField(unique=True, db_column=\"rAnK\")\n+    name = models.CharField(max_length=15, null=True, db_column=\"oTheRNaMe\")\n+\n+\n class SmallAutoFieldModel(models.Model):\n     id = models.SmallAutoField(primary_key=True)\n \n",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..ef94907 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n import urllib.parse\n@@ -34,6 +35,7 @@ from .models.custom_user import (\n     ExtensionUser,\n )\n from .models.with_custom_email_field import CustomEmailField\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n from .models.with_integer_username import IntegerUsernameUser\n from .settings import AUTH_TEMPLATES\n \n@@ -252,6 +254,46 @@ class UserCreationFormTest(TestDataMixin, TestCase):\n         form = CustomUserCreationForm(data)\n         self.assertTrue(form.is_valid())\n \n+    def test_custom_user_creation_form_with_m2m_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        # Create an organization instance to associate with the user\n+        organization1 = Organization.objects.create(name=\"organization 1\")\n+        organization2 = Organization.objects.create(name=\"organization 2\")\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization1.pk), str(organization2.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertTrue(form.is_valid())\n+        user = form.save(commit=True)\n+        # Ensure that both organizations are associated with the user\n+        self.assertSequenceEqual(user.orgs.all(), [organization1, organization2])\n+\n+    def test_custom_user_creation_form_invalid_m2m_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        # Create an organization but pass a wrong id\n+        Organization.objects.create(name=\"organization 1\")\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [\"999\"],  # Assuming 999 is an invalid pk\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertFalse(form.is_valid())\n+\n     def test_password_whitespace_not_stripped(self):\n         data = {\n             \"username\": \"testuser\",\n",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..14a06c5 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.test import TestCase\n@@ -236,6 +237,30 @@ class TimesinceTests(TestCase):\n             with self.subTest():\n                 self.assertEqual(timesince(t, value), expected)\n \n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_long_interval_with_tz(self):\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=31)\n+        d = timezone.make_aware(d, timezone.get_default_timezone())\n+        self.assertEqual(timesince(d), \"1\\xa0month\")\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_long_interval_greater_than_one_month_with_tz(self):\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=45)\n+        d = timezone.make_aware(d, timezone.get_default_timezone())\n+        self.assertTrue(\"month\" in timesince(d))  # Check if it calculates months\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_naive_datetime_with_awareness_check(self):\n+        now = timezone.now()\n+        naive = datetime.datetime(2023, 1, 1)\n+        aware_now = timezone.make_aware(now, timezone.get_default_timezone())\n+        self.assertTrue(\"0\\xa0minutes\" in timesince(naive, aware_now))\n+\n     def test_depth_invalid(self):\n         msg = \"depth must be greater than 0.\"\n         with self.assertRaisesMessage(ValueError, msg):\n",
  "django__django-16454": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 8d0729b..b928b53 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -469,6 +469,52 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertEqual(out.strip(), \"Set foo\")\n \n \n+class SubparserErrorFormattingTests(SimpleTestCase):\n+    def test_missing_subparser_argument(self):\n+        \"\"\"\n+        Test that missing required arguments on a subparser are correctly handled.\n+        \"\"\"\n+        from django.core.management import BaseCommand, CommandError\n+\n+        class Command(BaseCommand):\n+            def add_arguments(self, parser):\n+                subparsers = parser.add_subparsers(parser_class=argparse.ArgumentParser)\n+                create_parser = subparsers.add_parser(\"create\")\n+                create_parser.add_argument(\"name\", help=\"Specify the name\")\n+\n+            def handle(self, *args, **options):\n+                pass\n+\n+        command = Command()\n+\n+        with self.assertRaises(CommandError) as cm:\n+            command.run_from_argv(['manage.py', 'mycommand', 'create'])\n+\n+        self.assertIn(\"Error: the following arguments are required: name\", str(cm.exception))\n+\n+    def test_invalid_type_argument(self):\n+        \"\"\"\n+        Test that invalid type argument error is properly formatted in subparsers.\n+        \"\"\"\n+        from django.core.management import BaseCommand, CommandError\n+\n+        class Command(BaseCommand):\n+            def add_arguments(self, parser):\n+                subparsers = parser.add_subparsers(parser_class=argparse.ArgumentParser)\n+                parser_foo = subparsers.add_parser(\"foo\")\n+                parser_foo.add_argument(\"bar\", type=int, help=\"Specify an integer\")\n+\n+            def handle(self, *args, **options):\n+                pass\n+\n+        command = Command()\n+\n+        with self.assertRaises(CommandError) as cm:\n+            command.run_from_argv(['manage.py', 'mycommand', 'foo', 'not_an_int'])\n+\n+        self.assertIn(\"Error: argument bar: invalid int value: 'not_an_int'\", str(cm.exception))\n+\n+\n class UtilsTests(SimpleTestCase):\n     def test_no_existent_external_program(self):\n         msg = \"Error executing a_42_command_that_doesnt_exist_42\"\n",
  "django__django-16485": "",
  "django__django-16493": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex 20567e7..c2b792e 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -1018,6 +1018,15 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         storage = kwargs[\"storage\"]\n         self.assertIs(storage, callable_storage)\n \n+    def test_deconstruction_storage_callable_default(self):\n+        \"\"\"\n+        A callable that returns default_storage is not omitted when\n+        deconstructing.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"storage_callable_default\").deconstruct()\n+        self.assertIs(kwargs[\"storage\"], callable_default_storage)\n+\n \n # Tests for a race condition on file saving (#4948).\n # This is written in such a way that it'll always pass on platforms\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..761166a 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,7 +1,10 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n from django.contrib.admin.templatetags.admin_list import date_hierarchy\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n from django.contrib.admin.templatetags.admin_modify import submit_row\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n",
  "django__django-16560": "",
  "django__django-16569": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 55da562..3b82ea3 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1475,6 +1475,22 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertNotIn(\"DELETE\", formset.forms[0].fields)\n         self.assertNotIn(\"DELETE\", formset.forms[1].fields)\n \n+    def test_formset_empty_form_no_initial(self):\n+        \"\"\"Test that empty_form does not raise an error when index is None\"\"\"\n+        class MyForm(forms.Form):\n+            my_field = forms.CharField()\n+\n+        MyFormSet = forms.formset_factory(\n+            form=MyForm,\n+            can_delete=True,\n+            can_delete_extra=False,\n+        )\n+        my_formset = MyFormSet(initial=None)\n+        \n+        # This should not raise an error\n+        empty_form = my_formset.empty_form\n+        self.assertNotIn(\"DELETE\", empty_form.fields)\n+\n         formset = ChoiceFormFormset(initial=[{\"choice\": \"Zero\", \"votes\": \"1\"}])\n         self.assertEqual(len(formset), 3)\n         self.assertIn(\"DELETE\", formset.forms[0].fields)\n",
  "django__django-16595": "",
  "django__django-16612": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 9120571..738f125 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -8463,6 +8463,24 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             response, known_url, status_code=301, target_status_code=403\n         )\n \n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_with_query(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=42&next=/dashboard\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=42&next=/dashboard\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n     @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_true_script_name(self):\n         superuser = User.objects.create_user(\n@@ -8481,6 +8499,24 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             fetch_redirect_response=False,\n         )\n \n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME=\"/prefix/\")\n+    def test_missing_slash_append_slash_true_force_script_name_with_query(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=42&next=/dashboard\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=42&next=/dashboard\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n     @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME=\"/prefix/\")\n     def test_missing_slash_append_slash_true_force_script_name(self):\n         superuser = User.objects.create_user(\n",
  "django__django-16642": "",
  "django__django-16661": "diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py\nindex 8cb88da..bd9b9ad 100644\n--- a/tests/modeladmin/tests.py\n+++ b/tests/modeladmin/tests.py\n@@ -154,6 +154,61 @@ class ModelAdminTests(TestCase):\n             ma.lookup_allowed(\"employee__department__code\", \"test_value\"), True\n         )\n \n+    @isolate_apps('modeladmin')\n+    def test_lookup_allowed_foreign_primary(self):\n+        class Country(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class Place(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+\n+        class Restaurant(models.Model):\n+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)\n+\n+        class Waiter(models.Model):\n+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n+\n+        class WaiterAdmin(ModelAdmin):\n+            list_filter = [\n+                \"restaurant__place__country\",\n+                \"restaurant__place__country__name\",\n+            ]\n+\n+        ma = WaiterAdmin(Waiter, self.site)\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country\", \"1\"), True)\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__id__exact\", \"1\"), True\n+        )\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__name\", \"test_value\"), True\n+        )\n+\n+    @isolate_apps('modeladmin')\n+    def test_lookup_allowed_missing_filter(self):\n+        class Country(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class City(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+\n+        class Attraction(models.Model):\n+            city = models.OneToOneField(City, models.CASCADE, primary_key=True)\n+\n+        class Visitor(models.Model):\n+            attraction = models.ForeignKey(Attraction, models.CASCADE)\n+\n+        class VisitorAdmin(ModelAdmin):\n+            list_filter = [\n+                \"attraction__city__country__name\",\n+            ]\n+\n+        ma = VisitorAdmin(Visitor, self.site)\n+        # Valid lookups\n+        self.assertIs(ma.lookup_allowed(\"attraction__city__country__name\", \"test_value\"), True)\n+        \n+        # Invalid lookup\n+        self.assertIs(ma.lookup_allowed(\"attraction__city__country\", \"1\"), False)\n+\n     def test_field_arguments(self):\n         # If fields is specified, fieldsets_add and fieldsets_change should\n         # just stick the fields into a formsets structure and return it.\n",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..f622125 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -922,7 +922,63 @@ class WriterTests(SimpleTestCase):\n             output,\n         )\n \n-    def test_migration_file_header_comments(self):\n+    def test_additional_sorted_imports_case(self):\n+        \"\"\"\n+        Additional test to ensure imports are sorted correctly according to Django's style and isort defaults.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield2\",\n+                        models.FloatField(default=time.time),\n+                    ),\n+                    migrations.AddField(\n+                        \"anothermodel\",\n+                        \"anotherfield\",\n+                        models.FloatField(default=time.time),\n+                    ),\n+                ],\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        self.assertIn(\n+            \"import datetime\\nimport time\\nfrom django.db import migrations, models\\n\",\n+            output,\n+        )\n+\n+    def test_mixed_imports(self):\n+        \"\"\"\n+        Test that mixed import styles are handled correctly.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.RunPython(lambda apps, schema_editor: None),\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield3\",\n+                        models.CharField(max_length=255),\n+                    ),\n+                ],\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        self.assertIn(\n+            \"from django.db import migrations, models\\n\",\n+            output,\n+        )\n+        self.assertNotIn(\n+            \"import models\",\n+            output,\n+        )\n         \"\"\"\n         Test comments at top of file.\n         \"\"\"\n",
  "django__django-16801": "diff --git a/tests/model_fields/test_imagefield.py b/tests/model_fields/test_imagefield.py\nindex 9bf7f7d..f00743b 100644\n--- a/tests/model_fields/test_imagefield.py\n+++ b/tests/model_fields/test_imagefield.py\n@@ -328,6 +328,41 @@ class ImageFieldNoDimensionsTests(ImageFieldTwoDimensionsTests):\n \n     PersonModel = Person\n \n+    def test_post_init_not_connected(self):\n+        # Ensures that the post_init signal is not connected if no dimension fields are set\n+        person_model_id = id(self.PersonModel)\n+        self.assertNotIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id), _ in signals.post_init.receivers],\n+        )\n+        \n+    def test_post_init_connected_with_height(self):\n+        # Ensures that the post_init signal is connected if height_field is set\n+        person_with_height_model = PersonWithHeight\n+        person_with_height_model_id = id(person_with_height_model)\n+        self.assertIn(\n+            person_with_height_model_id,\n+            [sender_id for (_, sender_id), _ in signals.post_init.receivers],\n+        )\n+\n+    def test_post_init_connected_with_width(self):\n+        # Ensures that the post_init signal is connected if width_field is set\n+        person_with_width_model = PersonWithWidth\n+        person_with_width_model_id = id(person_with_width_model)\n+        self.assertIn(\n+            person_with_width_model_id,\n+            [sender_id for (_, sender_id), _ in signals.post_init.receivers],\n+        )\n+\n+    def test_post_init_connected_with_both_dimensions(self):\n+        # Ensures that the post_init signal is connected if both width_field and height_field are set\n+        person_with_dimensions_model = PersonWithDimensions\n+        person_with_dimensions_model_id = id(person_with_dimensions_model)\n+        self.assertIn(\n+            person_with_dimensions_model_id,\n+            [sender_id for (_, sender_id), _ in signals.post_init.receivers],\n+        )\n+\n \n @skipIf(Image is None, \"Pillow is required to test ImageField\")\n class ImageFieldOneDimensionTests(ImageFieldTwoDimensionsTests):\n",
  "django__django-16819": "",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..0bdccb1 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -790,8 +790,28 @@ class SystemChecksTestCase(SimpleTestCase):\n \n         errors = SongAdmin(Song, AdminSite()).check()\n         self.assertEqual(errors, [])\n+    def test_readonly_fields_includes_field_name(self):\n+        class SongAdminWithFaultyFields(admin.ModelAdmin):\n+            readonly_fields = (\"some_nonexistent_field\", \"another_missing_field\")\n \n-    def test_nonexistent_field(self):\n+        errors = SongAdminWithFaultyFields(Song, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' refers to 'some_nonexistent_field', \"\n+                \"which is not a callable, an attribute of 'SongAdminWithFaultyFields', \"\n+                \"or an attribute of 'admin_checks.Song'.\",\n+                obj=SongAdminWithFaultyFields,\n+                id=\"admin.E035\",\n+            ),\n+            checks.Error(\n+                \"The value of 'readonly_fields[1]' refers to 'another_missing_field', \"\n+                \"which is not a callable, an attribute of 'SongAdminWithFaultyFields', \"\n+                \"or an attribute of 'admin_checks.Song'.\",\n+                obj=SongAdminWithFaultyFields,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n         class SongAdmin(admin.ModelAdmin):\n             readonly_fields = (\"title\", \"nonexistent\")\n \n",
  "django__django-16901": "",
  "django__django-17029": "diff --git a/tests/apps/tests.py b/tests/apps/tests.py\nindex f7c2c67..ca2b955 100644\n--- a/tests/apps/tests.py\n+++ b/tests/apps/tests.py\n@@ -166,6 +166,21 @@ class AppsTests(SimpleTestCase):\n         with self.assertRaisesMessage(LookupError, msg):\n             apps.get_app_config(\"django.contrib.auth\")\n \n+    @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n+    def test_clear_cache_swappable_settings_name(self):\n+        \"\"\"\n+        Test that apps.clear_cache() also clears the cache for get_swappable_settings_name.\n+        \"\"\"\n+        # Set cache\n+        self.assertIsNone(apps.get_swappable_settings_name(\"auth.User\"))\n+        apps.get_swappable_settings_name.cache_clear()\n+        \n+        # Clear cache\n+        apps.clear_cache()\n+        \n+        # Ensure the cache for get_swappable_settings_name is cleared\n+        self.assertEqual(apps.get_swappable_settings_name.cache_info().currsize, 0)\n+\n     @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n     def test_is_installed(self):\n         \"\"\"\n",
  "django__django-17084": "",
  "django__django-17087": "",
  "django__django-7530": "",
  "django__django-9296": "diff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\nindex b9b5fbc..efdd041 100644\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -298,7 +298,39 @@ class PaginationTests(SimpleTestCase):\n             paginator.get_page(1)\n \n \n-class ModelPaginationTests(TestCase):\n+    def test_paginator_iteration_empty_list(self):\n+        paginator = Paginator([], 2)\n+        page_iterator = iter(paginator)\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_paginator_iteration_single_page(self):\n+        paginator = Paginator([1], 2)\n+        page_iterator = iter(paginator)\n+        self.assertEqual([1], list(next(page_iterator)))\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_paginator_iteration_multiple_full_pages(self):\n+        paginator = Paginator([1, 2, 3, 4], 2)\n+        page_iterator = iter(paginator)\n+\n+        self.assertEqual([1, 2], list(next(page_iterator)))\n+        self.assertEqual([3, 4], list(next(page_iterator)))\n+\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_paginator_iteration_last_page_partial(self):\n+        paginator = Paginator([1, 2, 3, 4, 5], 2)\n+        page_iterator = iter(paginator)\n+\n+        self.assertEqual([1, 2], list(next(page_iterator)))\n+        self.assertEqual([3, 4], list(next(page_iterator)))\n+        self.assertEqual([5], list(next(page_iterator)))\n+\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n     \"\"\"\n     Test pagination with Django model instances\n     \"\"\"\n",
  "matplotlib__matplotlib-13989": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5483eef..acbb5eb 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6359,8 +6359,30 @@ def test_hist_auto_bins():\n \n def test_hist_nan_data():\n     fig, (ax1, ax2) = plt.subplots(2)\n+import matplotlib.pyplot as plt\n+import numpy as np\n \n-    data = [1, 2, 3]\n+def test_hist_range_and_density():\n+    # Test when the data range is entirely within the specified range.\n+    _, bins, _ = plt.hist(np.random.uniform(0.2, 0.8, size=1000), bins='auto', range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+    # Test when the data range is partially outside the specified range.\n+    _, bins, _ = plt.hist(np.random.uniform(-0.2, 1.2, size=1000), bins='auto', range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+    # Test when the data range is entirely outside the specified range.\n+    _, bins, _ = plt.hist(np.random.uniform(-1, -0.5, size=1000), bins='auto', range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+    # Test with multiple different range configurations.\n+    for r in [(-1, 2), (0.2, 0.8), (0.0, 1.0)]:\n+        _, bins, _ = plt.hist(np.random.uniform(-1, 2, size=1000), bins='auto', range=r, density=True)\n+        assert bins[0] == r[0]\n+        assert bins[-1] == r[1]\n     nan_data = data + [np.nan]\n \n     bins, edges, _ = ax1.hist(data)\n@@ -6368,4 +6390,4 @@ def test_hist_nan_data():\n         nanbins, nanedges, _ = ax2.hist(nan_data)\n \n     assert np.allclose(bins, nanbins)\n-    assert np.allclose(edges, nanedges)\n+    assert np.allclose(edges, nanedges)\n",
  "matplotlib__matplotlib-14623": "",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..fa6659b 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6960,6 +6960,37 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[3].hist(np.arange(10), color=color.reshape((1, -1)))\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=[\"png\"])\n+def test_shared_axes_clear_tick_visibility(fig_test, fig_ref):\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    \n+    x = np.arange(0.0, 2 * np.pi, 0.01)\n+    y = np.sin(x)\n+    \n+    # Reference figure setup\n+    axs_ref = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_ref.flat:\n+        ax.plot(x, y)\n+        \n+    # Test figure setup\n+    axs_test = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_test.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n+\n+    # Check that ax.clear() doesn't affect shared axis behavior by ensuring\n+    # only the correct ticks and labels are visible.\n+    for i, ax in enumerate(axs_test.flat):\n+        if i in [0, 1]:  # Top row, x labels not visible\n+            assert not ax.xaxis.get_visible()\n+        if i in [1, 3]:  # Right column, y labels not visible\n+            assert not ax.yaxis.get_visible()\n+        # Check ticks\n+        assert ax.xaxis.get_major_ticks()[0].get_visible()\n+        assert ax.yaxis.get_major_ticks()[0].get_visible()\n \n def test_shared_axes_retick():\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "diff --git a/lib/matplotlib/tests/test_category.py b/lib/matplotlib/tests/test_category.py\nindex 40c4dcf..789a9eb 100644\n--- a/lib/matplotlib/tests/test_category.py\n+++ b/lib/matplotlib/tests/test_category.py\n@@ -307,8 +307,32 @@ def test_overriding_units_in_plot(fig_test, fig_ref):\n         assert y_units is ax.yaxis.units\n \n \n+def test_no_deprecation_on_empty_data():\n+    \"\"\"\n+    Smoke test to check that no deprecation warning is emitted. See #22640.\n+    \"\"\"\n+    import matplotlib.pyplot as plt\n+    import pytest\n+    with pytest.warns(None) as record:\n+        f, ax = plt.subplots()\n+        ax.xaxis.update_units([\"a\", \"b\"])\n+        ax.plot([], [])\n+    assert len(record) == 0, \"No warnings should be raised on empty data with category units\"\n+\n+def test_no_warning_on_empty_conversion():\n+    \"\"\"\n+    Test that convert_xunits with an empty list does not raise warnings.\n+    \"\"\"\n+    import matplotlib.pyplot as plt\n+    import pytest\n+    with pytest.warns(None) as record:\n+        f, ax = plt.subplots()\n+        ax.xaxis.update_units([\"a\", \"b\"])\n+        ax.convert_xunits([])\n+    assert len(record) == 0, \"No warnings should be raised on convert_xunits with empty list\"\n+\n def test_hist():\n     fig, ax = plt.subplots()\n     n, bins, patches = ax.hist(['a', 'b', 'a', 'c', 'ff'])\n     assert n.shape == (10,)\n-    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n+    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n",
  "matplotlib__matplotlib-22865": "",
  "matplotlib__matplotlib-23299": "",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..011afa7 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -12,6 +12,7 @@ from matplotlib.testing.decorators import image_comparison, check_figures_equal\n from matplotlib.testing.widgets import mock_event\n from matplotlib.collections import LineCollection, PolyCollection\n from matplotlib.patches import Circle\n+from matplotlib.testing.decorators import check_figures_equal\n \n import matplotlib.pyplot as plt\n import numpy as np\n@@ -21,7 +22,14 @@ mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n \n-def test_aspect_equal_error():\n+@check_figures_equal(extensions=[\"png\"])\n+def test_set_visible_3d_axes(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot(111, projection='3d')\n+    ax_ref = fig_ref.add_subplot(111, projection='3d')\n+    ax_test.scatter(1, 1, 1)\n+    ax_test.set_visible(False)  # Make the 3D axes invisible\n+    # ax_ref has no content, it should match an invisible ax_test\n+    assert not ax_test.get_visible(), \"3D axis should be invisible after set_visible(False)\"\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n     with pytest.raises(NotImplementedError):\n",
  "matplotlib__matplotlib-23412": "",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..1b9ee37 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2857,6 +2857,34 @@ def test_stackplot():\n     ax = fig.add_subplot(1, 1, 1)\n     ax.stackplot(x, y1, y2, y3)\n     ax.set_xlim((0, 10))\n+\n+def test_stackplot_color_cycler():\n+    import matplotlib.pyplot as plt\n+    import numpy as np\n+    from matplotlib.patches import Rectangle\n+\n+    # Initialize data\n+    x = np.array([1, 2, 3])\n+    y = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+\n+    # Create a figure and axis\n+    fig, ax = plt.subplots()\n+    \n+    # Plot a line and add a rectangle patch using cycle colors\n+    ax.plot([1, 3], [1, 3], color='C0')\n+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))\n+\n+    # Get original color cycle\n+    original_cycle = ax._get_lines.prop_cycler\n+\n+    # Create a stackplot with color references\n+    ax.stackplot(x, y, colors=['C2', 'C3', 'C4'])\n+\n+    # Verify that the color property cycler is unchanged\n+    assert original_cycle == ax._get_lines.prop_cycler\n+\n+    # Ensure no exception is thrown with CN color notation\n+    plt.show()\n     ax.set_ylim((0, 70))\n \n     # Reuse testcase from above for a labeled data test\n@@ -2864,6 +2892,34 @@ def test_stackplot():\n     fig, ax = plt.subplots()\n     ax.stackplot(\"x\", \"y1\", \"y2\", \"y3\", data=data)\n     ax.set_xlim((0, 10))\n+\n+def test_stackplot_color_cycler():\n+    import matplotlib.pyplot as plt\n+    import numpy as np\n+    from matplotlib.patches import Rectangle\n+\n+    # Initialize data\n+    x = np.array([1, 2, 3])\n+    y = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+\n+    # Create a figure and axis\n+    fig, ax = plt.subplots()\n+    \n+    # Plot a line and add a rectangle patch using cycle colors\n+    ax.plot([1, 3], [1, 3], color='C0')\n+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))\n+\n+    # Get original color cycle\n+    original_cycle = ax._get_lines.prop_cycler\n+\n+    # Create a stackplot with color references\n+    ax.stackplot(x, y, colors=['C2', 'C3', 'C4'])\n+\n+    # Verify that the color property cycler is unchanged\n+    assert original_cycle == ax._get_lines.prop_cycler\n+\n+    # Ensure no exception is thrown with CN color notation\n+    plt.show()\n     ax.set_ylim((0, 70))\n \n \n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 45f9c04..5ecf032 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -327,7 +327,32 @@ def test_zorder():\n     assert OffsetBox(zorder=42).zorder == 42\n \n \n-def test_arrowprops_copied():\n+@pytest.mark.parametrize(\"align\", [\"top\", \"bottom\"])\n+def test_hpacker_align_top_bottom(align):\n+    fig = plt.figure(dpi=72)\n+    ax = fig.add_subplot(111)\n+    renderer = fig.canvas.get_renderer()\n+\n+    x1, y1 = 10, 20\n+    x2, y2 = 10, 30\n+    da1 = DrawingArea(x1, y1)\n+    da2 = DrawingArea(x2, y2)\n+\n+    hpacker = HPacker(children=[da1, da2], pad=0, sep=0, align=align)\n+    width, height, xdescent, ydescent, offset_pairs = hpacker.get_extent_offsets(renderer)\n+\n+    expected_height = max(y1, y2)\n+    expected_offsets = (0, y2 - y1) if align == \"top\" else (0, 0)\n+\n+    assert height == expected_height\n+    assert_allclose(offset_pairs, [(0, expected_offsets[0]), (x1, expected_offsets[1])])\n+\n+    # Add to axes and visually inspect if necessary\n+    box = AnchoredOffsetbox(child=hpacker, loc=\"center\")\n+    ax.add_artist(box)\n+    ax.set_xlim(-10, 50)\n+    ax.set_ylim(-10, 50)\n+    fig.canvas.draw()\n     da = DrawingArea(20, 20, 0, 0, clip=True)\n     arrowprops = {\"arrowstyle\": \"->\", \"relpos\": (.3, .7)}\n     ab = AnnotationBbox(da, [.5, .5], xybox=(-0.2, 0.5), xycoords='data',\n",
  "matplotlib__matplotlib-24627": "",
  "matplotlib__matplotlib-24637": "diff --git a/lib/matplotlib/tests/test_backend_svg.py b/lib/matplotlib/tests/test_backend_svg.py\nindex 8817464..6bc43a6 100644\n--- a/lib/matplotlib/tests/test_backend_svg.py\n+++ b/lib/matplotlib/tests/test_backend_svg.py\n@@ -576,7 +576,33 @@ def test_svg_font_string(font_str, include_generic):\n         rest = rest + [generic]\n     plt.rcParams[f\"font.{generic}\"] = rest\n     plt.rcParams[\"font.size\"] = size\n-    plt.rcParams[\"svg.fonttype\"] = \"none\"\n+def test_annotationbbox_gid():\n+    # Test that object gid appears in the AnnotationBbox in output svg.\n+    fig, ax = plt.subplots()\n+    arr_img = np.ones((32, 32))\n+    xy = (0.3, 0.55)\n+\n+    imagebox = OffsetImage(arr_img, zoom=0.1)\n+    imagebox.image.axes = ax\n+\n+    ab = AnnotationBbox(imagebox, xy,\n+                        xybox=(120., -80.),\n+                        xycoords='data',\n+                        boxcoords=\"offset points\",\n+                        pad=0.5,\n+                        arrowprops=dict(\n+                            arrowstyle=\"->\",\n+                            connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                        )\n+    ab.set_gid(\"a test for issue 20044\")\n+    ax.add_artist(ab)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n+\n+    expected = '<g id=\"a test for issue 20044\">'\n+    assert expected in buf\n \n     fig, ax = plt.subplots()\n     if generic == \"sans-serif\":\n@@ -597,6 +623,39 @@ def test_svg_font_string(font_str, include_generic):\n         fig.savefig(fd, format=\"svg\")\n         buf = fd.getvalue()\n \n+\n+def test_annotationbbox_gid_with_multiple_artists():\n+    # Test multiple artists with different gids.\n+    fig, ax = plt.subplots()\n+    arr_img1 = np.ones((32, 32))\n+    arr_img2 = np.ones((32, 32)) * 0.5\n+    xys = [(0.3, 0.55), (0.6, 0.85)]\n+\n+    gids = ['gid_1', 'gid_2']\n+    for i, (arr_img, xy) in enumerate(zip([arr_img1, arr_img2], xys)):\n+        imagebox = OffsetImage(arr_img, zoom=0.1)\n+        imagebox.image.axes = ax\n+\n+        ab = AnnotationBbox(imagebox, xy,\n+                            xybox=(30. + i*50., -80. + i*50.),\n+                            xycoords='data',\n+                            boxcoords=\"offset points\",\n+                            pad=0.5,\n+                            arrowprops=dict(\n+                                arrowstyle=\"->\",\n+                                connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                            )\n+        ab.set_gid(gids[i])\n+        ax.add_artist(ab)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n+\n+    for gid in gids:\n+        expected = f'<g id=\"{gid}\">'\n+        assert expected in buf\n+\n     tree = xml.etree.ElementTree.fromstring(buf)\n     ns = \"http://www.w3.org/2000/svg\"\n     text_count = 0\n",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..140a778 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -20,6 +20,11 @@ import matplotlib.scale as mscale\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n \n \n+import numpy as np\n+import matplotlib as mpl\n+import pytest\n+from numpy.testing import assert_array_equal, assert_array_almost_equal\n+\n @pytest.mark.parametrize('N, result', [\n     (5, [1, .6, .2, .1, 0]),\n     (2, [1, 0]),\n@@ -30,7 +35,23 @@ def test_create_lookup_table(N, result):\n     assert_array_almost_equal(mcolors._create_lookup_table(N, data), result)\n \n \n-def test_resampled():\n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.float16, float])\n+def test_colormap_with_empty_array(dtype):\n+    cm = mpl.colormaps[\"viridis\"]\n+    # Create an empty array of the specified dtype\n+    empty_array = np.empty((0,), dtype=dtype)\n+    # No deprecation warnings should occur here\n+    assert_array_equal(cm(empty_array), np.array([]))\n+\n+@pytest.mark.parametrize(\"value\", [257, 256, 258])\n+def test_colormap_out_of_bounds_handling(value):\n+    cm = mpl.colormaps[\"viridis\"]\n+    with pytest.warns(None) as record:\n+        result = cm(value)\n+    # Ensure no warnings are raised\n+    assert len(record) == 0\n+    # Optionally, check that result is a valid color array\n+    assert result.shape == (4,)  # Default colormap return shape is (RGBA)\n     \"\"\"\n     GitHub issue #6025 pointed to incorrect ListedColormap.resampled;\n     here we test the method for LinearSegmentedColormap as well.\n",
  "matplotlib__matplotlib-25122": "diff --git a/lib/matplotlib/tests/test_mlab.py b/lib/matplotlib/tests/test_mlab.py\nindex 51d0c35..1608fc5 100644\n--- a/lib/matplotlib/tests/test_mlab.py\n+++ b/lib/matplotlib/tests/test_mlab.py\n@@ -581,7 +581,34 @@ class TestSpectral:\n         with pytest.raises(AssertionError):\n             assert_allclose(spec_b, spec_c, atol=1e-08)\n \n-    def test_psd_window_hanning(self):\n+    def test_psd_window_flattop(self):\n+        if self.NFFT_density is None:\n+            return\n+\n+        # Define a flattop window and compute expected correction\n+        window = signal.windows.flattop(self.NFFT_density_real)\n+        expected_correction = window.sum()**2 / (window**2).sum()\n+\n+        # Simulate a signal with the flattop window\n+        ydata = np.random.rand(self.NFFT_density)\n+        ycontrol = ydata * window\n+        spec, fsp = mlab.psd(x=ydata,\n+                             NFFT=self.NFFT_density,\n+                             Fs=self.Fs,\n+                             noverlap=0,\n+                             sides=self.sides,\n+                             window=window,\n+                             scale_by_freq=False)\n+\n+        spec_corrected = spec * window.sum()**2\n+        spec_expected, _ = mlab.psd(x=ycontrol,\n+                                    NFFT=self.NFFT_density,\n+                                    Fs=self.Fs,\n+                                    noverlap=0,\n+                                    sides=self.sides,\n+                                    window=mlab.window_none)\n+\n+        assert_allclose(spec_corrected, spec_expected * expected_correction, atol=1e-08)\n         if self.NFFT_density is None:\n             return\n         ydata = np.arange(self.NFFT_density)\n",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..312172d 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,6 +7801,37 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+def test_xaxis_offsetText_color():\n+    plt.rcParams['xtick.labelcolor'] = 'blue'\n+    ax = plt.axes()\n+    ax.set_xscale('linear')\n+    assert ax.xaxis.offsetText.get_color() == 'blue'\n+\n+    plt.rcParams['xtick.color'] = 'yellow'\n+    plt.rcParams['xtick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.set_xscale('linear')\n+    assert ax.xaxis.offsetText.get_color() == 'yellow'\n+\n+\n+def test_yaxis_offsetText_color():\n+    plt.rcParams['ytick.labelcolor'] = 'green'\n+    ax = plt.axes()\n+    ax.set_yscale('linear')\n+    assert ax.yaxis.offsetText.get_color() == 'green'\n+\n+    plt.rcParams['ytick.color'] = 'red'\n+    plt.rcParams['ytick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.set_yscale('linear')\n+    assert ax.yaxis.offsetText.get_color() == 'red'\n+\n+import matplotlib.pyplot as plt\n+import pytest\n+import matplotlib.font_manager as mfont_manager\n+import matplotlib as mpl\n+import numpy as np\n+\n def test_ytickcolor_is_not_yticklabelcolor():\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..d98fb4e 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,22 @@\n+\n+import pickletools\n+\n+def test_pickle_draggable_legend():\n+    fig, ax = plt.subplots()\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40, 43, 45, 47, 48]\n+    ax.plot(time, speed, label=\"speed\")\n+    leg = ax.legend()\n+    leg.set_draggable(True)  # Test pickling with draggable legend\n+    # Serialize the figure\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+    # Ensure no FigureCanvasQTAgg reference exists in the pickle stream\n+    assert \"FigureCanvasQTAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)], \"Pickle stream contains FigureCanvasQTAgg reference\"\n+    # Deserialize the figure\n+    loaded_fig = pickle.loads(pkl)\n+    # Attempting to draw the loaded figure\n+    loaded_fig.canvas.draw()\n+\n from io import BytesIO\n import ast\n import pickle\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..31f63cc 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -37,6 +37,39 @@ def test_simple():\n     plt.bar(x=np.arange(10), height=np.arange(10))\n     pickle.dump(plt.gca(), BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n+    # Test case for pickling a figure after aligning labels\n+    def test_pickle_fig_with_aligned_labels():\n+        import matplotlib.pyplot as plt\n+        import pickle\n+        from io import BytesIO\n+        \n+        fig = plt.figure()\n+        ax1 = fig.add_subplot(211)\n+        ax2 = fig.add_subplot(212)\n+        time = [0, 1, 2, 3, 4]\n+        speed = [40000, 4300, 4500, 4700, 4800]\n+        acc = [10, 11, 12, 13, 14]\n+        ax1.plot(time, speed)\n+        ax1.set_ylabel('speed')\n+        ax2.plot(time, acc)\n+        ax2.set_ylabel('acc')\n+        \n+        fig.align_labels()\n+        \n+        # Attempt to pickle the figure\n+        pkl = BytesIO()\n+        try:\n+            pickle.dump(fig, pkl, pickle.HIGHEST_PROTOCOL)\n+            print(\"Pickling successful.\")\n+        except Exception as e:\n+            print(\"Pickling failed:\", str(e))\n+        \n+        # Ensure the pickled object can be loaded\n+        pkl.seek(0)\n+        loaded_fig = pickle.load(pkl)\n+        assert loaded_fig is not None\n+    pickle.dump(plt.gca(), BytesIO(), pickle.HIGHEST_PROTOCOL)\n+\n     fig = plt.figure()\n     ax = plt.axes()\n     plt.plot(np.arange(10))\n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..cc73222 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -991,8 +991,63 @@ def test_hexbin_linear():\n     ax.hexbin(x, y, gridsize=(10, 5), marginals=True,\n               reduce_C_function=np.sum)\n \n+from matplotlib.testing.decorators import check_figures_equal\n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_behavior_upon_C_parameter(fig_test, fig_ref):\n+    # see: gh:12926\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # without C parameter\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # with C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=[1] * len(X),\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\") \n \n-def test_hexbin_log_clim():\n+def test_hexbin_mincnt_zero():\n+    # Test that mincnt=0 includes all bins with C parameter\n+    fig, ax = plt.subplots()\n+    X, Y, C = [0, 0], [0, 1], [1, 1]\n+    hexbin = ax.hexbin(X, Y, C=C, mincnt=0, gridsize=(5, 5))\n+    # Expect all bins to be included since mincnt=0\n+    assert not np.isnan(hexbin.get_array()).any()\n+\n+def test_hexbin_mincnt_one():\n+    # Test usual behavior with mincnt=1 and no C parameter\n+    fig, ax = plt.subplots()\n+    X, Y = [0, 1], [0, 1]\n+    hexbin = ax.hexbin(X, Y, mincnt=1, gridsize=(5, 5))\n+    # Should include bins with at least one point\n+    assert not np.isnan(hexbin.get_array()).any()\n     x, y = np.arange(200).reshape((2, 100))\n     fig, ax = plt.subplots()\n     h = ax.hexbin(x, y, bins='log', vmin=2, vmax=100)\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex 700190c..618408a 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -89,6 +89,27 @@ def test_contour_no_valid_levels():\n     ax.contour(np.ones((9, 9)))\n \n \n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths(fig_test, fig_ref):\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+    x = [[0, 1], [1, 2]]\n+    y = [[1, 0], [2, 1]]\n+\n+    # Create two different contour sets\n+    cs_test = ax_test.contour(x)\n+    cs_ref = ax_ref.contour(y)\n+\n+    # Test the new set_paths method\n+    cs_test.set_paths(cs_ref.get_paths())\n+\n+    assert len(cs_test.get_paths()) == len(cs_ref.get_paths())\n+    for p1, p2 in zip(cs_test.get_paths(), cs_ref.get_paths()):\n+        assert np.array_equal(p1.vertices, p2.vertices)\n+        assert np.array_equal(p1.codes, p2.codes)\n+\n def test_contour_Nlevels():\n     # A scalar levels arg or kwarg should trigger auto level generation.\n     # https://github.com/matplotlib/matplotlib/issues/11913\n",
  "mwaskom__seaborn-3069": "",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..de99063 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -244,7 +244,9 @@ def test_default_static_max_age(app):\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n \n-def test_templates_list(test_apps):\n+def test_empty_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"\", __name__)\n     from blueprintapp import app\n \n     templates = sorted(app.jinja_env.list_templates())\n",
  "psf__requests-1142": "",
  "psf__requests-1724": "",
  "psf__requests-1766": "",
  "psf__requests-1921": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex 4ec0f7c..2c8e1c4 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -296,6 +296,42 @@ class Session(SessionRedirectMixin):\n         )\n         return p\n \n+    def test_headers_on_session_with_None_are_not_sent(self):\n+        \"\"\"Do not send headers in Session.headers with None values.\"\"\"\n+        ses = requests.Session()\n+        ses.headers['Accept-Encoding'] = None\n+        req = requests.Request('GET', 'http://httpbin.org/get')\n+        prep = ses.prepare_request(req)\n+        assert 'Accept-Encoding' not in prep.headers\n+\n+    def test_removal_of_default_header_after_setting_to_None(self):\n+        \"\"\"Ensure headers set to None are not in final prepared request.\"\"\"\n+        ses = requests.Session()\n+        ses.headers['User-Agent'] = None  # Assume 'User-Agent' is a default header\n+        req = requests.Request('GET', 'http://httpbin.org/get')\n+        prep = ses.prepare_request(req)\n+        assert 'User-Agent' not in prep.headers\n+\n+    def test_no_side_effects_on_other_headers_when_one_is_set_to_None(self):\n+        \"\"\"Ensure setting a header to None does not affect other headers.\"\"\"\n+        ses = requests.Session()\n+        ses.headers['Accept-Encoding'] = None\n+        ses.headers['Content-Type'] = 'application/json'\n+        req = requests.Request('GET', 'http://httpbin.org/get')\n+        prep = ses.prepare_request(req)\n+        assert 'Accept-Encoding' not in prep.headers\n+        assert 'Content-Type' in prep.headers\n+        assert prep.headers['Content-Type'] == 'application/json'\n+\n+    def test_custom_header_set_to_None_not_sent(self):\n+        \"\"\"Ensure custom header set to None is not sent in request.\"\"\"\n+        ses = requests.Session()\n+        ses.headers['X-Custom-Header'] = None\n+        req = requests.Request('GET', 'http://httpbin.org/get', headers={'X-Custom-Header': 'value'})\n+        prep = ses.prepare_request(req)\n+        assert 'X-Custom-Header' in prep.headers  # This should come from request-specific headers\n+        assert prep.headers['X-Custom-Header'] == 'value'\n+\n     def request(self, method, url,\n         params=None,\n         data=None,\n",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..35b9d91 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,7 +81,19 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://.example.com'),\n+            (InvalidURL, 'http://*example.com'),\n         ))\n+        \n+    @pytest.mark.parametrize(\n+        'exception, url', (\n+            (InvalidURL, 'http://-example.com'),\n+            (InvalidURL, 'http://example..com'),\n+            (InvalidURL, 'http://example.com/../'),\n+        ))\n+    def test_invalid_url_edge_cases(self, exception, url):\n+        with pytest.raises(exception):\n+            requests.get(url)\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n             requests.get(url)\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..7de697e 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2309,7 +2309,28 @@ class TestAsCompatibleData:\n         assert isinstance(orig._data, CustomIndexable)\n \n \n-def test_raise_no_warning_for_nan_in_binary_ops():\n+def test_setitem_with_values_property():\n+    import xarray as xr\n+    import numpy as np\n+\n+    # Test setup\n+    class HasValues:\n+        values = 5\n+\n+    # Create DataArray with dtype object\n+    good_indexed = xr.DataArray([None], dims=\"dim_0\")\n+    bad_indexed = xr.DataArray([None], dims=\"dim_0\")\n+\n+    # Non-coercing assignment\n+    good_indexed.loc[{'dim_0': 0}] = set()\n+    assert good_indexed.values[0] == set()\n+\n+    # Attempt to assign an object with a 'values' property\n+    bad_indexed.loc[{'dim_0': 0}] = HasValues()\n+\n+    # Check if the object is stored correctly without coercion\n+    assert isinstance(bad_indexed.values[0], HasValues)\n+    assert bad_indexed.values[0].values == 5\n     with pytest.warns(None) as record:\n         Variable(\"x\", [1, 2, np.NaN]) > 0\n     assert len(record) == 0\n",
  "pydata__xarray-3095": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex d6a4400..1578398 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -2080,7 +2080,21 @@ class TestDataset:\n             expected[k].data = v\n         assert_identical(expected, actual)\n \n-    @pytest.mark.xfail(raises=AssertionError)\n+    @pytest.mark.parametrize('deep', [True, False])\n+    def test_copy_unicode_indices(self, deep):\n+        # Create a dataset with unicode indices\n+        ds = xr.Dataset(\n+            coords={'x': np.array(['foo'], dtype='<U3'), 'y': ('x', np.array(['bar'], dtype='<U3'))},\n+            data_vars={'z': ('x', np.array(['baz'], dtype='<U3'))}\n+        )\n+        # Perform the copy operation\n+        ds_copy = ds.copy(deep=deep)\n+        \n+        # Check the type of the 'x' index after copying\n+        expected_dtype = np.dtype('<U3')\n+        assert ds_copy.coords['x'].dtype == expected_dtype, f\"Expected dtype {expected_dtype}, but got {ds_copy.coords['x'].dtype}\"\n+        assert ds_copy.coords['y'].dtype == expected_dtype, f\"Expected dtype {expected_dtype}, but got {ds_copy.coords['y'].dtype}\"\n+        assert ds_copy['z'].dtype == expected_dtype, f\"Expected dtype {expected_dtype}, but got {ds_copy['z'].dtype}\"\n     @pytest.mark.parametrize('deep, expected_orig', [\n         [True,\n          xr.DataArray(xr.IndexVariable('a', np.array([1, 2])),\n",
  "pydata__xarray-3151": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 026dec9..e801a3e 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -611,7 +611,48 @@ class TestCombineAuto:\n         expected = Dataset({'x': 0, 'y': 1, 'z': 2})\n         assert_identical(expected, actual)\n \n-    def test_check_for_impossible_ordering(self):\n+    def test_combine_leaving_bystander_dimensions(self):\n+        # Check non-monotonic bystander dimension coord doesn't raise\n+        # ValueError on combine (https://github.com/pydata/xarray/issues/3150)\n+        ycoord = ['a', 'c', 'b']\n+\n+        data = np.random.rand(7, 3)\n+\n+        ds1 = Dataset(data_vars=dict(data=(['x', 'y'], data[:3, :])),\n+                      coords=dict(x=[1, 2, 3], y=ycoord))\n+\n+        ds2 = Dataset(data_vars=dict(data=(['x', 'y'], data[3:, :])),\n+                      coords=dict(x=[4, 5, 6, 7], y=ycoord))\n+\n+        expected = Dataset(data_vars=dict(data=(['x', 'y'], data)),\n+                           coords=dict(x=[1, 2, 3, 4, 5, 6, 7], y=ycoord))\n+\n+        actual = combine_by_coords((ds1, ds2))\n+        assert_identical(expected, actual)\n+\n+    def test_combine_leaving_bystander_dimensions_with_different_order(self):\n+        # Added test for different order in datasets but same non-monotonic coords\n+        ycoord1 = ['a', 'c', 'b']\n+        ycoord2 = ['b', 'a', 'c']\n+\n+        data1 = np.random.rand(3, 3)\n+        data2 = np.random.rand(4, 3)\n+\n+        ds1 = Dataset(data_vars=dict(data=(['x', 'y'], data1)),\n+                      coords=dict(x=[1, 2, 3], y=ycoord1))\n+\n+        ds2 = Dataset(data_vars=dict(data=(['x', 'y'], data2)),\n+                      coords=dict(x=[4, 5, 6, 7], y=ycoord2))\n+\n+        combined_ycoord = ['a', 'c', 'b', 'b', 'a', 'c']\n+\n+        expected_data = np.concatenate((data1, data2), axis=0)\n+        expected = Dataset(data_vars=dict(data=(['x', 'y'], expected_data)),\n+                           coords=dict(x=[1, 2, 3, 4, 5, 6, 7],\n+                                       y=combined_ycoord))\n+\n+        actual = combine_by_coords((ds1, ds2))\n+        assert_identical(expected, actual)\n         ds0 = Dataset({'x': [0, 1, 5]})\n         ds1 = Dataset({'x': [2, 3]})\n         with raises_regex(ValueError, \"does not have monotonic global indexes\"\n",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..920233c 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2310,7 +2310,19 @@ class TestDataArray:\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n \n-    def test_reduce_keep_attrs(self):\n+    def test_quantile_keep_attrs(self):\n+        import xarray as xr\n+        import numpy as np\n+        from collections import OrderedDict\n+\n+        da = xr.DataArray([0, 0], dims=\"x\", attrs={'units': 'K'})\n+        out = da.quantile(.9, dim='x', keep_attrs=True)\n+        # Check if the attributes are preserved\n+        assert out.attrs == OrderedDict([('units', 'K')])\n+\n+        out_no_attrs = da.quantile(.9, dim='x', keep_attrs=False)\n+        # Check if the attributes are dropped\n+        assert out_no_attrs.attrs == OrderedDict()\n         # Test dropped attrs\n         vm = self.va.mean()\n         assert len(vm.attrs) == 0\n",
  "pydata__xarray-3677": "",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..f9d3485 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -109,6 +109,29 @@ class TestMergeFunction:\n             expected.attrs = expected_attrs\n             assert actual.identical(expected)\n \n+    def test_merge_attrs_override_copy(self):\n+        ds1 = xr.Dataset(attrs={\"a\": \"b\", \"foo\": \"bar\"})\n+        ds2 = xr.Dataset(attrs={\"a\": \"c\", \"bar\": \"baz\"})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        \n+        # Check that attrs are initially set correctly\n+        assert ds3.attrs[\"a\"] == \"b\"\n+        assert ds3.attrs[\"foo\"] == \"bar\"\n+\n+        # Modify attrs in the merged dataset\n+        ds3.attrs[\"a\"] = \"d\"\n+        ds3.attrs[\"foo\"] = \"baz\"\n+        \n+        # Ensure that the original datasets are unchanged\n+        assert ds1.attrs[\"a\"] == \"b\"\n+        assert ds1.attrs[\"foo\"] == \"bar\"\n+        assert ds2.attrs[\"a\"] == \"c\"\n+        assert \"bar\" in ds2.attrs\n+        \n+        # Ensure that the changes reflect only in the merged dataset\n+        assert ds3.attrs[\"a\"] == \"d\"\n+        assert ds3.attrs[\"foo\"] == \"baz\"\n+\n     def test_merge_dicts_simple(self):\n         actual = xr.merge([{\"foo\": 0}, {\"bar\": \"one\"}, {\"baz\": 3.5}])\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..08a65f7 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1921,8 +1921,13 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n-\n-@pytest.mark.parametrize(\"use_dask\", [True, False])\n+def test_where_attrs_preserved() -> None:\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"condition_attr\": \"cond_attr_value\"})\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"value_attr\": \"x_attr_value\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"value_attr\": \"y_attr_value\"})\n+    actual = xr.where(cond, x, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"value_attr\": \"x_attr_value\"})\n+    assert_identical(expected, actual)\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n def test_polyval(use_dask, use_datetime) -> None:\n     if use_dask and not has_dask:\n",
  "pydata__xarray-4695": "",
  "pydata__xarray-4966": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex 2dbb0b4..fcc31b4 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -13,6 +13,31 @@ from . import assert_allclose, assert_equal, assert_identical, requires_dask\n with suppress(ImportError):\n     import dask.array as da\n \n+@pytest.mark.parametrize(\"bits\", [1, 2, 4, 8])\n+def test_decode_unsigned_from_signed(bits):\n+    unsigned_dtype = np.dtype(f\"u{bits}\")\n+    signed_dtype = np.dtype(f\"i{bits}\")\n+    original_values = np.array([np.iinfo(unsigned_dtype).max], dtype=unsigned_dtype)\n+    encoded = xr.Variable(\n+        (\"x\",), original_values.astype(signed_dtype), attrs={\"_Unsigned\": \"true\"}\n+    )\n+    coder = variables.UnsignedIntegerCoder()\n+    decoded = coder.decode(encoded)\n+    assert decoded.dtype == unsigned_dtype\n+    assert decoded.values == original_values\n+\n+@pytest.mark.parametrize(\"bits\", [1, 2, 4, 8])\n+def test_decode_signed_from_unsigned(bits):\n+    unsigned_dtype = np.dtype(f\"u{bits}\")\n+    signed_dtype = np.dtype(f\"i{bits}\")\n+    original_values = np.array([-1], dtype=signed_dtype)\n+    encoded = xr.Variable(\n+        (\"x\",), original_values.astype(unsigned_dtype), attrs={\"_Unsigned\": \"false\"}\n+    )\n+    coder = variables.UnsignedIntegerCoder()\n+    decoded = coder.decode(encoded)\n+    assert decoded.dtype == signed_dtype\n+    assert decoded.values == original_values\n \n def test_CFMaskCoder_decode():\n     original = xr.Variable((\"x\",), [0, -1, 1], {\"_FillValue\": -1})\n",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..9957996 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1919,8 +1919,39 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n+import pytest\n+import xarray as xr\n+import numpy as np\n \n-def test_where_attrs() -> None:\n+def test_where_scalar_second_argument_with_keep_attrs() -> None:\n+    # Test where with a scalar second argument and keep_attrs=True\n+    cond = xr.DataArray([True, False, True], dims=\"x\")\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\")\n+    assert_identical(expected, actual)\n+\n+def test_where_with_scalar_conditional_and_keep_attrs() -> None:\n+    # Test where with scalars for all values\n+    cond = xr.DataArray([True, False, True], dims=\"x\")\n+    x = 1\n+    y = 0\n+    actual = xr.where(cond, x, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\")\n+    assert_identical(expected, actual)\n+\n+def test_where_with_scalar_x_and_dataarray_y_with_keep_attrs() -> None:\n+    cond = xr.DataArray([True, False, True], dims=\"x\")\n+    y = xr.DataArray([0, 0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    actual = xr.where(cond, 1, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={\"attr\": \"y\"})\n+    assert_identical(expected, actual)\n+\n+def test_where_with_scalar_y_and_dataarray_x_with_keep_attrs() -> None:\n+    cond = xr.DataArray([True, False, True], dims=\"x\")\n+    x = xr.DataArray([1, 1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    actual = xr.where(cond, x, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected, actual)\n     cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n     x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n     y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n",
  "pydata__xarray-6599": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f1ec005..381ab8f 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -2010,6 +2010,14 @@ def test_where_attrs() -> None:\n             ),\n             id=\"datetime\",\n         ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array([1000, 2000, 3000], dtype=\"timedelta64[ns]\"), dims=\"x\"\n+            ),\n+            xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n+            xr.DataArray([1000.0, 2000.0, 3000.0], dims=\"x\"),\n+            id=\"timedelta\",\n+        ),\n     ],\n )\n def test_polyval(\n",
  "pydata__xarray-6721": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex cab9007..cbf0d14 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -221,7 +221,18 @@ class InaccessibleVariableDataStore(backends.InMemoryDataStore):\n \n \n class TestDataset:\n-    def test_repr(self) -> None:\n+    def test_chunks_does_not_load_data(self) -> None:\n+        # testing that accessing the chunks attribute does not load the data into memory\n+        from xarray.backends import InaccessibleVariableDataStore\n+        from xarray.core.variable import UnexpectedDataAccess\n+        \n+        # setting up a mock that should raise an error on data access\n+        store = InaccessibleVariableDataStore()\n+        ds = open_dataset(store)\n+        \n+        # checking whether accessing `chunks` raises an error (which it should not)\n+        with pytest.raises(UnexpectedDataAccess):\n+            assert ds.chunks == {}\n         data = create_test_data(seed=123)\n         data.attrs[\"foo\"] = \"bar\"\n         # need to insert str dtype at runtime to handle different endianness\n",
  "pydata__xarray-6744": "",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "diff --git a/xarray/tests/test_indexes.py b/xarray/tests/test_indexes.py\nindex fa8bd84..cb3ecee 100644\n--- a/xarray/tests/test_indexes.py\n+++ b/xarray/tests/test_indexes.py\n@@ -689,11 +689,23 @@ def test_safe_cast_to_index_cftimeindex():\n \n \n # Test that datetime.datetime objects are never used in a CFTimeIndex\n-@requires_cftime\n-def test_safe_cast_to_index_datetime_datetime():\n+import pytest\n+import numpy as np\n+import xarray as xr\n+\n+@pytest.mark.parametrize(\"dtype\", [\"int32\", \"float32\"])\n+def test_restore_dtype_on_multiindexes(dtype: str) -> None:\n+    foo = xr.Dataset(coords={\"bar\": (\"bar\", np.array([0, 1], dtype=dtype))})\n+    foo = foo.stack(baz=(\"bar\",))\n+    assert str(foo[\"bar\"].values.dtype) == dtype\n+\n+def test_int32_to_int64_issue():\n+    ds = xr.Dataset(coords={'a': np.array([0], dtype='i4')})\n+    # Test after stacking, the dtype remains the same\n+    assert ds['a'].values.dtype == ds.stack(b=('a',))['a'].values.dtype\n     dates = [datetime(1, 1, day) for day in range(1, 20)]\n \n     expected = pd.Index(dates)\n     actual = safe_cast_to_index(np.array(dates))\n     assert_array_equal(expected, actual)\n-    assert isinstance(actual, pd.Index)\n+    assert isinstance(actual, pd.Index)\n",
  "pylint-dev__pylint-4970": "",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..5abbd64 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -94,9 +94,14 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+import pytest\n+from pylint.lint import Run\n+from pytest import CaptureFixture\n+from pylint.testutils import EMPTY_MODULE\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..213700a 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,26 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_paths_with_recursive(self):\n+        \"\"\"Test that ignore-paths is respected when using --recursive=y.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\"))\n+                create_ignored_directory_with_file()\n+                self._runtest(\n+                    [\n+                        \"directory\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^directory/ignored_subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7277": "",
  "pytest-dev__pytest-10051": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex 26c4c15..55d1a93 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -160,6 +160,34 @@ def logging_during_setup_and_teardown(caplog):\n     assert [x.message for x in caplog.get_records(\"teardown\")] == [\"a_teardown_log\"]\n \n \n+import logging\n+\n+def test_caplog_clear_behavior_with_get_records(caplog):\n+    \"\"\"Test to verify the behavior of caplog.clear with get_records.\"\"\"\n+    \n+    # Initial logging and consistency verification\n+    def verify_consistency():\n+        assert caplog.get_records(\"call\") == caplog.records\n+\n+    verify_consistency()\n+    logging.warning(\"initial_warning\")\n+    verify_consistency()\n+\n+    # Clear caplog and check behavior\n+    caplog.clear()\n+    assert caplog.get_records(\"call\") == []\n+\n+    logging.info(\"after_clear_info\")\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"after_clear_info\"]\n+    verify_consistency()\n+\n+    # Logging in different stage (setup) for more coverage\n+    caplog.set_level(logging.INFO, logger=\"setup_test\")\n+    logger = logging.getLogger(\"setup_test\")\n+    logger.info(\"setup_log\")\n+    assert [x.message for x in caplog.get_records(\"setup\")] == [\"setup_log\"]\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"after_clear_info\"]\n+\n def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardown):\n     assert not caplog.records\n     assert not caplog.get_records(\"call\")\n",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 561df7f..1602ba8 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -1270,6 +1270,35 @@ def test_pdb_teardown_skipped(\n         )\n     )\n     result = pytester.runpytest_inprocess(\"--pdb\")\n+\n+def test_pdb_teardown_class_level_skip(pytester: Pytester, monkeypatch: MonkeyPatch) -> None:\n+    \"\"\"\n+    Test that the tearDown method is not called for unittest.TestCase \n+    classes decorated with unittest.skip at class level when run with --pdb.\n+    \"\"\"\n+    tracked = []\n+    monkeypatch.setattr(pytest, \"track_pdb_teardown_skipped\", tracked, raising=False)\n+\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+        import pytest\n+\n+        @unittest.skip(\"Skip this class\")\n+        class SkippedTestCase(unittest.TestCase):\n+            def setUp(self):\n+                pytest.track_pdb_teardown_skipped.append(\"setup:\" + self.id())\n+\n+            def tearDown(self):\n+                pytest.track_pdb_teardown_skipped.append(\"teardown:\" + self.id())\n+\n+            def test_method(self):\n+                pass\n+        \"\"\"\n+    )\n+    result = pytester.runpytest_inprocess(\"--pdb\")\n+    result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n+    assert pytest.track_pdb_teardown_skipped == []\n     result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n     assert tracked == []\n \n",
  "pytest-dev__pytest-5262": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 1f092b0..abf1f9b 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -1051,8 +1051,34 @@ class TestFDCapture(object):\n             cap.done()\n             pytest.raises(AttributeError, cap.suspend)\n \n+import pytest\n+import sys\n+import io\n \n-@contextlib.contextmanager\n+def test_capfd_sys_stdout_mode(capfd):\n+    # This test ensures that sys.stdout mode does not incorrectly include 'b'.\n+    # capfd captures writes to sys.stdout and sys.stderr. It is a pytest fixture.\n+    out, err = capfd.readouterr()\n+    assert \"b\" not in sys.stdout.mode\n+\n+def test_encoded_file_write_string():\n+    # Create a buffer and an EncodedFile to test writing strings\n+    buffer = io.StringIO()\n+    enc_file = EncodedFile(buffer, encoding=\"utf-8\")\n+    \n+    # Write a string and check if it's correctly written to the buffer\n+    test_str = \"This is a test string.\"\n+    enc_file.write(test_str)\n+    assert buffer.getvalue() == test_str\n+\n+def test_encoded_file_write_bytes_error():\n+    # Create a buffer and an EncodedFile to test writing bytes\n+    buffer = io.StringIO()\n+    enc_file = EncodedFile(buffer, encoding=\"utf-8\")\n+    \n+    # Attempt to write bytes should raise a TypeError\n+    with pytest.raises(TypeError, match=\"write() argument must be str, not bytes\"):\n+        enc_file.write(b\"Byte data should not be accepted.\")\n def saved_fd(fd):\n     new_fd = os.dup(fd)\n     try:\n",
  "pytest-dev__pytest-5631": "diff --git a/testing/python/integration.py b/testing/python/integration.py\nindex 044a31a..f1222ee 100644\n--- a/testing/python/integration.py\n+++ b/testing/python/integration.py\n@@ -175,6 +175,23 @@ class TestMockDecoration:\n                     abspath.assert_any_call(\"hello\")\n         \"\"\"\n         )\n+        \n+    def test_mock_sentinel_with_numpy_array(self, testdir):\n+        \"\"\"Test using patch with a numpy array to ensure no ValueError is raised.\"\"\"\n+        pytest.importorskip(\"numpy\")\n+        testdir.makepyfile(\n+            \"\"\"\n+            import numpy as np\n+            from unittest.mock import patch\n+\n+            class TestNumpyPatch:\n+                @patch(target='dummy.FOO', new=np.array([-5.5, 3.0]))\n+                def test_array_patch(self):\n+                    assert True  # just a dummy test to ensure patching does not raise an error\n+            \"\"\"\n+        )\n+        reprec = testdir.inline_run()\n+        reprec.assertoutcome(passed=1)\n         reprec = testdir.inline_run()\n         reprec.assertoutcome(passed=2)\n \n",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..02efdb5 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -126,8 +126,8 @@ class TestPaste(object):\n         assert len(mocked_urlopen) == 1\n         url, data = mocked_urlopen[0]\n         assert type(data) is bytes\n-        lexer = \"python3\" if sys.version_info[0] >= 3 else \"python\"\n+        lexer = \"text\"\n         assert url == \"https://bpaste.net\"\n         assert \"lexer=%s\" % lexer in data.decode()\n         assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n",
  "pytest-dev__pytest-6202": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex fb6b260..0cb300f 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -703,6 +703,21 @@ class Test_genitems:\n         assert items[2].name == \"testmethod_one\"\n \n         # let's also test getmodpath here\n+\n+    def test_issue_replacement_in_headline(self, testdir):\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+\n+            @pytest.mark.parametrize(\"a\",[\"..[\"])\n+            def test_boo(a):\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest()\n+        result.stdout.fnmatch_lines([\n+            \"*test_boo[..[]*\"\n+        ])\n         assert items[0].getmodpath() == \"testone\"\n         assert items[1].getmodpath() == \"TestX.testmethod_one\"\n         assert items[2].getmodpath() == \"TestY.testmethod_one\"\n",
  "pytest-dev__pytest-7205": "diff --git a/testing/test_setuponly.py b/testing/test_setuponly.py\nindex 8211d39..51c60bf 100644\n--- a/testing/test_setuponly.py\n+++ b/testing/test_setuponly.py\n@@ -1,4 +1,6 @@\n+\n import pytest\n+import sys\n from _pytest.config import ExitCode\n \n \n@@ -291,4 +293,21 @@ def test_setup_show_with_KeyboardInterrupt_in_test(testdir):\n             \"*= no tests ran in *\",\n         ]\n     )\n-    assert result.ret == ExitCode.INTERRUPTED\n+    assert result.ret == ExitCode.INTERRUPTED\n+\n+\n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue 7126, BytesWarning when using --setup-show with bytes parameter\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n+\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..326e078 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -607,6 +607,38 @@ class TestSkip:\n         result = testdir.runpytest(\"-rs\")\n         result.stdout.fnmatch_lines([\"*unconditional skip*\", \"*1 skipped*\"])\n \n+    def test_xfail_skipping_without_runxfail(self, testdir):\n+        \"\"\" Test to ensure skipping gives the correct location without --runxfail \"\"\"\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            def test_func():\n+                pass\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(\"-rs\")\n+        result.stdout.fnmatch_lines([\n+            \"SKIPPED [1] test_xfail_skipping_without_runxfail.py:3: unconditional skip\",\n+            \"*1 skipped*\",\n+        ])\n+\n+    def test_xfail_skipping_with_runxfail(self, testdir):\n+        \"\"\" Test to ensure skipping gives the correct location with --runxfail \"\"\"\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            def test_func():\n+                pass\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(\"-rs\", \"--runxfail\")\n+        result.stdout.fnmatch_lines([\n+            \"SKIPPED [1] test_xfail_skipping_with_runxfail.py:3: unconditional skip\",\n+            \"*1 skipped*\",\n+        ])\n+\n     def test_skip_with_reason(self, testdir):\n         testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..ab19d64 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -315,6 +316,31 @@ class TestXFail:\n             ]\n         )\n \n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Issue #7486: Ensure dynamically adding xfail during a test run results in an xfailed test, not a failure.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_dynamic_xfail(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Ensure dynamically adding a strict xfail that passes results in a failure.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_dynamic_xfail(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n+\n     def test_xfail_not_run_no_setup_run(self, testdir):\n         p = testdir.makepyfile(\n             test_one=\"\"\"\n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..14e588a 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -513,8 +513,11 @@ class TestCaptureFixture:\n             \"\"\"\n         )\n         reprec.assertoutcome(passed=1)\n-\n-    def test_capfdbinary(self, testdir):\n+    @pytest.mark.parametrize(\"nl\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_cafd_preserves_newlines(self, capfd, nl):\n+        print(\"test\", end=nl)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(nl)\n         reprec = testdir.inline_runsource(\n             \"\"\"\\\n             def test_hello(capfdbinary):\n",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..e22ed6c 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import pytest\n@@ -17,6 +18,42 @@ def test_change_level(caplog):\n     logger.debug(\"handler DEBUG level\")\n     logger.info(\"handler INFO level\")\n \n+def test_caplog_resets_logger_level(testdir):\n+    \"\"\"Test to ensure logger levels are reset between tests.\"\"\"\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test_foo(caplog):\n+            caplog.set_level(42)\n+            logger = logging.getLogger(__name__)\n+            assert logger.level == 42\n+\n+        def test_bar(caplog):\n+            logger = logging.getLogger(__name__)\n+            assert logger.level == 0  # Default level for a new logger\n+        \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+def test_caplog_resets_handler_level(testdir):\n+    \"\"\"Test to ensure handler levels are reset between tests.\"\"\"\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test_foo(caplog):\n+            caplog.set_level(42)\n+            assert caplog.handler.level == 42\n+\n+        def test_bar(caplog):\n+            assert caplog.handler.level == 0  # Handler level should reset to default\n+        \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n     caplog.set_level(logging.CRITICAL, logger=sublogger.name)\n     sublogger.warning(\"logger WARNING level\")\n     sublogger.critical(\"logger CRITICAL level\")\n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..a464e8b 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,3 +1,4 @@\n+\n import os\n import pprint\n import sys\n@@ -9,7 +10,7 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n-from _pytest.pytester import Testdir\n+from _pytest.pytester import Testdir, Pytester\n \n \n class TestCollector:\n@@ -1178,6 +1179,20 @@ def test_collect_symlink_out_of_tree(testdir):\n     assert result.ret == 0\n \n \n+def test_collect_symlink_directory(pytester: Pytester) -> None:\n+    \"\"\"Test that a symlinked directory is collected.\"\"\"\n+    # Create a real directory with a test file\n+    dir_path = pytester.mkdir(\"real_dir\")\n+    dir_path.joinpath(\"test_real.py\").write_text(\"def test_real(): pass\", \"utf-8\")\n+\n+    # Create a symlink to the directory\n+    symlink_path = pytester.path.joinpath(\"symlink_dir\")\n+    symlink_path.symlink_to(dir_path)\n+\n+    # Run pytest and verify that tests in the symlinked directory are collected\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n def test_collectignore_via_conftest(testdir):\n     \"\"\"collect_ignore in parent conftest skips importing child (issue #4592).\"\"\"\n     tests = testdir.mkpydir(\"tests\")\n",
  "pytest-dev__pytest-8399": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 2c720b0..2d7ad9a 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -301,8 +301,29 @@ def test_setup_setUpClass(pytester: Pytester) -> None:\n     reprec = pytester.inline_run(testpath)\n     reprec.assertoutcome(passed=3)\n \n+def test_unittest_setUpClass_fixture_visibility(pytester: Pytester) -> None:\n+    testpath = pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+\n+        class MyTestCase(unittest.TestCase):\n+            @classmethod\n+            def setUpClass(cls):\n+                pass\n \n-def test_setup_class(pytester: Pytester) -> None:\n+            def test_example(self):\n+                pass\n+        \"\"\"\n+    )\n+    result = pytester.runpytest(\"--fixtures\")\n+    assert result.ret == 0\n+    # Ensure that the fixture name doesn't appear without verbose flag\n+    result.stdout.no_fnmatch_line(\"*unittest_setUpClass_fixture_MyTestCase*\")\n+\n+    result = pytester.runpytest(\"--fixtures\", \"-v\")\n+    assert result.ret == 0\n+    # Ensure that the fixture appears with the verbose flag\n+    result.stdout.fnmatch_lines([\"*unittest_setUpClass_fixture_MyTestCase*\"])\n     testpath = pytester.makepyfile(\n         \"\"\"\n         import unittest\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..c1cd22b 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -597,6 +597,33 @@ def test_ridgecv_store_cv_values():\n     r.fit(x, y)\n     assert_equal(r.cv_values_.shape, (n_samples, n_responses, n_alphas))\n \n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    rng = np.random.RandomState(42)\n+\n+    # Test with a simple binary classification example\n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-0.8, -1.0],\n+                  [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+\n+    n_samples = x.shape[0]\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+    \n+    # With len(y.shape) == 1\n+    n_targets = 1\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_alphas)\n+\n+    # Test with y having multiple targets\n+    y = np.array([[1, 1, 1, -1, -1],\n+                  [1, -1, 1, -1, 1],\n+                  [-1, -1, 1, -1, -1]]).transpose()\n+    n_targets = y.shape[1]\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n \n def test_ridgecv_sample_weight():\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..c40a5e3 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -172,8 +172,19 @@ def test_expected_mutual_info_overflow():\n     # leading to overflow in np.outer, resulting in EMI > 1\n     assert expected_mutual_information(np.array([[70000]]), 70000) <= 1\n \n+from sklearn.metrics import fowlkes_mallows_score\n+from numpy.testing import assert_all_finite\n \n-def test_int_overflow_mutual_info_score():\n+def test_int_overflow_fowlkes_mallows_score():\n+    # Creating large input arrays that previously caused overflow\n+    x = np.array([1] * (52632 + 2529) + [2] * (14660 + 793) + [3] * (3271 +\n+                 204) + [4] * (814 + 39) + [5] * (316 + 20))\n+    y = np.array([0] * 52632 + [1] * 2529 + [0] * 14660 + [1] * 793 +\n+                 [0] * 3271 + [1] * 204 + [0] * 814 + [1] * 39 + [0] * 316 +\n+                 [1] * 20)\n+\n+    # Ensure the result is finite and doesn't lead to RuntimeWarning or 'nan'\n+    assert_all_finite(fowlkes_mallows_score(x, y))\n     # Test overflow in mutual_info_classif\n     x = np.array([1] * (52632 + 2529) + [2] * (14660 + 793) + [3] * (3271 +\n                  204) + [4] * (814 + 39) + [5] * (316 + 20))\n",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..c8e66c3 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -538,8 +538,18 @@ def test_hashing_vectorizer():\n     for i in range(X.shape[0]):\n         assert_almost_equal(np.linalg.norm(X[0].data, 1), 1.0)\n \n-\n-def test_feature_names():\n+from sklearn.feature_extraction.text import CountVectorizer\n+from numpy.testing import assert_array_equal, assert_raises, assert_equal\n+from nose.tools import assert_true\n+\n+def test_countvectorizer_custom_vocabulary_repeated_indices():\n+    # test for custom vocabulary without fitting\n+    vocab = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    cv = CountVectorizer(vocabulary=vocab)\n+    # get_feature_names should not raise an error\n+    feature_names = cv.get_feature_names()\n+    assert_array_equal(vocab, feature_names)\n+    assert_true(cv.fixed_vocabulary_)\n     cv = CountVectorizer(max_df=0.5)\n \n     # test for Value error on unfitted/empty vocabulary\n",
  "scikit-learn__scikit-learn-11310": "diff --git a/sklearn/model_selection/tests/test_search.py b/sklearn/model_selection/tests/test_search.py\nindex 0b1d5f9..ad44f98 100644\n--- a/sklearn/model_selection/tests/test_search.py\n+++ b/sklearn/model_selection/tests/test_search.py\n@@ -1172,8 +1172,21 @@ def test_search_cv_timing():\n             assert_true(search.cv_results_[key][0] == 0.0)\n             assert_true(np.all(search.cv_results_[key] < 1))\n \n+from sklearn.utils.testing import assert_true, assert_greater_equal\n \n-def test_grid_search_correct_score_results():\n+def test_search_refit_time():\n+    svc = LinearSVC(random_state=0)\n+    X, y = make_blobs(random_state=0, centers=2)\n+\n+    grid_search = GridSearchCV(svc, {'C': [0.1, 1, 10]}, cv=2)\n+    random_search = RandomizedSearchCV(svc, {'C': [0.1, 1, 10]}, cv=2, n_iter=2)\n+\n+    for search in (grid_search, random_search):\n+        search.fit(X, y)\n+        # Check if refit_time_ attribute exists and is a positive float\n+        assert_true(hasattr(search, \"refit_time_\"))\n+        assert_true(isinstance(search.refit_time_, float))\n+        assert_greater_equal(search.refit_time_, 0)\n     # test that correct scores are used\n     n_splits = 3\n     clf = LinearSVC(random_state=0)\n",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..ee4d865 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -21,6 +21,7 @@ from sklearn.utils.testing import assert_true\n from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import ignore_warnings\n from sklearn.utils.testing import assert_warns_message\n+from sklearn.metrics import log_loss\n \n from sklearn.exceptions import ConvergenceWarning\n from sklearn.exceptions import ChangedBehaviorWarning\n@@ -491,8 +492,42 @@ def test_logistic_cv():\n     scores = np.asarray(list(lr_cv.scores_.values()))\n     assert_array_equal(scores.shape, (1, 3, 1))\n \n-\n-def test_multinomial_logistic_regression_string_inputs():\n+def test_logistic_regressioncv_multinomial_scoring_correctness():\n+    # Verify LogisticRegressionCV uses multinomial scoring when requested.\n+    # This tests the fix for issue #8720.\n+    X, y = make_classification(n_samples=200, n_features=5, n_classes=3,\n+                               n_informative=3, random_state=42)\n+    train, test = np.arange(160), np.arange(160, 200)\n+\n+    log_reg_cv = LogisticRegressionCV(\n+        Cs=5, fit_intercept=True, cv=5, solver='lbfgs', multi_class='multinomial'\n+    )\n+    log_reg_cv.fit(X[train], y[train])\n+\n+    scorer = get_scorer('neg_log_loss')\n+    manual_cv_scores = []\n+\n+    for i in range(log_reg_cv.Cs_.size):\n+        log_reg = LogisticRegression(\n+            C=log_reg_cv.Cs_[i], fit_intercept=True, solver='lbfgs',\n+            multi_class='multinomial'\n+        )\n+        log_reg.fit(X[train], y[train])\n+        y_prob = log_reg.predict_proba(X[test])\n+        manual_cv_scores.append(-log_loss(y[test], y_prob))\n+\n+    # Compare scores from LogisticRegressionCV and manual scoring\n+    assert_array_almost_equal(log_reg_cv.scores_[1][:, -1], manual_cv_scores)\n+\n+    # Verify correct probabilities are used: multinomial over OvR\n+    probs_from_cv = log_reg_cv.predict_proba(X[test])\n+    log_reg_manual = LogisticRegression(\n+        C=log_reg_cv.C_, fit_intercept=True, solver='lbfgs',\n+        multi_class='multinomial'\n+    )\n+    log_reg_manual.fit(X[train], y[train])\n+    probs_manual = log_reg_manual.predict_proba(X[test])\n+    assert_array_almost_equal(probs_from_cv, probs_manual)\n     # Test with string labels for LogisticRegression(CV)\n     n_samples, n_features, n_classes = 50, 5, 3\n     X_ref, y = make_classification(n_samples=n_samples, n_features=n_features,\n",
  "scikit-learn__scikit-learn-12585": "",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..8fe58bc 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -5,7 +5,67 @@ from distutils.version import LooseVersion\n import numpy as np\n from scipy import linalg\n \n+@pytest.mark.parametrize('copy_X', [True, False])\n+def test_lasso_lars_copyX_behaviour(copy_X):\n+    \"\"\"\n+    Test that user input regarding copy_X is not being overridden (it was until\n+    at least version 0.21)\n+    \"\"\"\n+    lasso_lars = LassoLarsIC(copy_X=copy_X, precompute=False)\n+    rng = np.random.RandomState(0)\n+    X = rng.normal(0, 1, (100, 5))\n+    X_copy = X.copy()\n+    y = X[:, 2]\n+    lasso_lars.fit(X, y)\n+    assert copy_X == np.array_equal(X, X_copy)\n+\n+\n+@pytest.mark.parametrize('copy_X', [True, False])\n+def test_lasso_lars_fit_copyX_behaviour(copy_X):\n+    \"\"\"\n+    Test that user input to .fit for copy_X overrides default __init__ value\n+    \"\"\"\n+    lasso_lars = LassoLarsIC(precompute=False)\n+    rng = np.random.RandomState(0)\n+    X = rng.normal(0, 1, (100, 5))\n+    X_copy = X.copy()\n+    y = X[:, 2]\n+    lasso_lars.fit(X, y, copy_X=copy_X)\n+    assert copy_X == np.array_equal(X, X_copy)\n+\n+\n+def test_lasso_lars_default_behavior():\n+    \"\"\"\n+    Test the default behavior when no copy_X is explicitly provided\n+    Ensures that copy_X defaults to True if not provided at fit\n+    \"\"\"\n+    lasso_lars = LassoLarsIC(precompute=False)\n+    rng = np.random.RandomState(1)\n+    X = rng.normal(0, 1, (50, 3))\n+    X_copy = X.copy()\n+    y = X[:, 1]\n+    lasso_lars.fit(X, y)\n+    # By default, copy_X should be True, hence X should be unchanged\n+    assert np.array_equal(X, X_copy)\n+\n+\n+def test_lasso_lars_fit_override_initialization():\n+    \"\"\"\n+    Test that providing copy_X during fit overrides the initialized value\n+    \"\"\"\n+    lasso_lars = LassoLarsIC(copy_X=False, precompute=False)\n+    rng = np.random.RandomState(2)\n+    X = rng.normal(0, 1, (80, 4))\n+    X_copy = X.copy()\n+    y = X[:, 0]\n+\n+    # Fit with copy_X=True, should override the initialized False\n+    lasso_lars.fit(X, y, copy_X=True)\n+    assert np.array_equal(X, X_copy)  # should be True since True was provided during fit\n+\n import pytest\n+import numpy as np\n+from sklearn.linear_model.least_angle import LassoLarsIC\n \n from sklearn.model_selection import train_test_split\n from sklearn.utils.testing import assert_equal\n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..9bc7f08 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -493,8 +493,45 @@ def test_shuffle_stratifiedkfold():\n         assert_not_equal(set(test0), set(test1))\n     check_cv_coverage(kf0, X_40, y, groups=None, expected_n_splits=5)\n \n-\n-def test_kfold_can_detect_dependent_samples_on_digits():  # see #2372\n+def test_stratified_kfold_shuffle_behavior():\n+    # Test specifically for the issue with StratifiedKFold shuffling\n+    import numpy as np\n+    from sklearn.model_selection import StratifiedKFold\n+    \n+    # Dataset setup to test shuffling within classes\n+    n_samples_per_class = 10\n+    X = np.arange(n_samples_per_class * 2)\n+    y = np.array([0] * n_samples_per_class + [1] * n_samples_per_class)\n+    \n+    # Without shuffling\n+    skf_no_shuffle = StratifiedKFold(n_splits=5, shuffle=False, random_state=42)\n+    no_shuffle_splits = [test for _, test in skf_no_shuffle.split(X, y)]\n+    \n+    # With shuffling\n+    skf_shuffle_1 = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n+    shuffle_splits_1 = [test for _, test in skf_shuffle_1.split(X, y)]\n+    \n+    skf_shuffle_2 = StratifiedKFold(n_splits=5, shuffle=True, random_state=43)\n+    shuffle_splits_2 = [test for _, test in skf_shuffle_2.split(X, y)]\n+    \n+    # Assert that shuffling changes the splits compared to no shuffling\n+    assert no_shuffle_splits != shuffle_splits_1\n+    \n+    # Assert that different random states produce different shuffles\n+    assert shuffle_splits_1 != shuffle_splits_2\n+\n+    # Assert that shuffle_splits_1 and shuffle_splits_2 are actually shuffled versions of no_shuffle_splits\n+    def are_splits_shuffled(orig_splits, shuffled_splits):\n+        for orig, shuffled in zip(orig_splits, shuffled_splits):\n+            if set(orig) != set(shuffled):\n+                return False\n+            if list(orig) == sorted(orig):\n+                if list(shuffled) == list(orig):\n+                    return False\n+        return True\n+    \n+    assert are_splits_shuffled(no_shuffle_splits, shuffle_splits_1)\n+    assert are_splits_shuffled(no_shuffle_splits, shuffle_splits_2)\n     # The digits samples are dependent: they are apparently grouped by authors\n     # although we don't have any information on the groups segment locations\n     # for this data. We can highlight this fact by computing k-fold cross-\n",
  "scikit-learn__scikit-learn-13135": "diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py\nindex a18a1c5..aa1e6d0 100644\n--- a/sklearn/preprocessing/tests/test_discretization.py\n+++ b/sklearn/preprocessing/tests/test_discretization.py\n@@ -185,11 +185,11 @@ def test_invalid_strategy_option():\n \n \n @pytest.mark.parametrize(\n-    'strategy, expected_2bins, expected_3bins',\n-    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2]),\n-     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2]),\n-     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2])])\n-def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n+    'strategy, expected_2bins, expected_3bins, expected_5bins',\n+    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2], [0, 0, 1, 1, 4, 4]),\n+     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2], [0, 0, 1, 2, 3, 4]),\n+     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2], [0, 1, 2, 3, 4, 4])])\n+def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins, expected_5bins):\n     X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n \n     # with 2 bins\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..58ae85d 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -597,6 +597,24 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_array_equal(Y_pred1, Y_pred2)\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n+def test_gaussian_mixture_fit_predict_n_init_random_state():\n+    # Check fit_predict consistency with n_init > 1 for various random states\n+    for random_seed in [0, 42, 100]:\n+        X = np.random.RandomState(random_seed).randn(1000, 5)\n+        gm = GaussianMixture(n_components=5, n_init=5, random_state=random_seed)\n+        y_pred1 = gm.fit_predict(X)\n+        y_pred2 = gm.predict(X)\n+        assert_array_equal(y_pred1, y_pred2)\n+\n+def test_gaussian_mixture_fit_predict_n_init_covariance_types():\n+    # Check fit_predict consistency with n_init > 1 for different covariance types\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    for covar_type in ['full', 'tied', 'diag', 'spherical']:\n+        gm = GaussianMixture(n_components=5, n_init=5, covariance_type=covar_type, random_state=0)\n+        y_pred1 = gm.fit_predict(X)\n+        y_pred2 = gm.predict(X)\n+        assert_array_equal(y_pred1, y_pred2)\n+\n \n def test_gaussian_mixture_fit():\n     # recover the ground truth\n",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\nindex 318940e..89641e7 100644\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -1070,4 +1070,32 @@ def test_make_pipeline_memory():\n     pipeline = make_pipeline(DummyTransf(), SVC())\n     assert pipeline.memory is None\n \n-    shutil.rmtree(cachedir)\n+    shutil.rmtree(cachedir)\n+\n+\n+def test_pipeline_len():\n+    \"\"\"Test that Pipeline implements __len__ correctly.\"\"\"\n+    from sklearn import svm\n+    from sklearn.datasets import make_classification\n+    from sklearn.feature_selection import SelectKBest, f_regression\n+    from sklearn.pipeline import Pipeline\n+\n+    # Example pipeline setup\n+    anova_filter = SelectKBest(f_regression, k=5)\n+    clf = svm.SVC(kernel='linear')\n+    pipe = Pipeline([('anova', anova_filter), ('svc', clf)])\n+    \n+    # Check length of pipeline\n+    assert len(pipe) == 2\n+\n+    # Test pipeline with no steps\n+    empty_pipe = Pipeline([])\n+    assert len(empty_pipe) == 0\n+\n+    # Test pipeline with passthrough\n+    passthrough_pipe = Pipeline([('anova', 'passthrough'), ('svc', clf)])\n+    assert len(passthrough_pipe) == 2\n+\n+    # Test pipeline with one step\n+    single_step_pipe = Pipeline([('anova', anova_filter)])\n+    assert len(single_step_pipe) == 1\n",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..a7ceba8 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -11,6 +12,8 @@ import pytest\n import numpy as np\n \n from sklearn.utils.testing import assert_array_equal\n+from sklearn.utils import check_random_state\n+from sklearn.ensemble import IsolationForest\n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_raises\n from sklearn.utils.testing import assert_raises_regex\n",
  "scikit-learn__scikit-learn-13779": "",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..b9fbc71 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -396,8 +396,31 @@ def test_export_text():\n     assert export_text(reg, decimals=1) == expected_report\n     assert export_text(reg, decimals=1, show_weights=True) == expected_report\n \n+def test_export_text_single_feature():\n+    # Test export_text for a single feature\n+    X_single = [[-2], [-1], [-1], [1], [1], [2]]\n+    y_single = [-1, -1, -1, 1, 1, 1]\n \n-def test_plot_tree_entropy(pyplot):\n+    clf_single = DecisionTreeClassifier(max_depth=2, random_state=0)\n+    clf_single.fit(X_single, y_single)\n+\n+    expected_report = dedent(\"\"\"\n+    |--- feature_0 <= 0.00\n+    |   |--- class: -1\n+    |--- feature_0 >  0.00\n+    |   |--- class: 1\n+    \"\"\").lstrip()\n+\n+    # Test with default feature name\n+    assert export_text(clf_single, decimals=2) == expected_report\n+    # Test with a specified feature name\n+    expected_report_named = dedent(\"\"\"\n+    |--- single_feature <= 0.00\n+    |   |--- class: -1\n+    |--- single_feature >  0.00\n+    |   |--- class: 1\n+    \"\"\").lstrip()\n+    assert export_text(clf_single, feature_names=['single_feature'], decimals=2) == expected_report_named\n     # mostly smoke tests\n     # Check correctness of export_graphviz for criterion = entropy\n     clf = DecisionTreeClassifier(max_depth=3,\n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..70ee4a8 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1554,7 +1554,34 @@ def test_LogisticRegressionCV_no_refit(multi_class):\n     assert lrcv.coef_.shape == (n_classes, n_features)\n \n \n-def test_LogisticRegressionCV_elasticnet_attribute_shapes():\n+@pytest.mark.parametrize('penalty', ('l2', 'elasticnet'))\n+@pytest.mark.parametrize('solver', ('liblinear', 'saga'))\n+def test_LogisticRegressionCV_refit_false_no_index_error(penalty, solver):\n+    # Test to ensure no IndexError is thrown with refit=False\n+\n+    n_classes = 2  # we use a binary classification for simplicity\n+    n_features = 3\n+    X, y = make_classification(n_samples=1000, n_classes=n_classes,\n+                               n_informative=n_features, n_features=n_features,\n+                               random_state=29)\n+    \n+    l1_ratios = np.linspace(0, 1, 2) if penalty == 'elasticnet' else None\n+\n+    # LogisticRegressionCV with refit=False\n+    lrcv = LogisticRegressionCV(penalty=penalty, solver=solver, refit=False,\n+                                l1_ratios=l1_ratios, random_state=0)\n+    try:\n+        lrcv.fit(X, y)  # This should not raise an IndexError\n+    except IndexError as e:\n+        pytest.fail(f\"IndexError was raised: {e}\")\n+\n+    if penalty == 'elasticnet':\n+        assert hasattr(lrcv, 'l1_ratio_'), \"Expected attribute l1_ratio_ missing.\"\n+        assert lrcv.l1_ratio_.shape[0] == n_classes, (\n+            f\"Unexpected shape for l1_ratio_: {lrcv.l1_ratio_.shape}\")\n+\n+    assert hasattr(lrcv, 'C_'), \"Expected attribute C_ missing.\"\n+    assert lrcv.C_.shape[0] == n_classes, f\"Unexpected shape for C_: {lrcv.C_.shape}\"\n     # Make sure the shapes of scores_ and coefs_paths_ attributes are correct\n     # when using elasticnet (added one dimension for l1_ratios)\n \n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/tests/test_show_versions.py b/sklearn/utils/tests/test_show_versions.py\nindex fa39255..9a2f27a 100644\n--- a/sklearn/utils/tests/test_show_versions.py\n+++ b/sklearn/utils/tests/test_show_versions.py\n@@ -23,6 +23,7 @@ def test_get_deps_info():\n     assert 'Cython' in deps_info\n     assert 'pandas' in deps_info\n     assert 'matplotlib' in deps_info\n+    assert 'joblib' in deps_info  # New test case for joblib presence\n \n \n def test_show_versions_with_blas(capsys):\n@@ -30,4 +31,5 @@ def test_show_versions_with_blas(capsys):\n     out, err = capsys.readouterr()\n     assert 'python' in out\n     assert 'numpy' in out\n-    assert 'BLAS' in out\n+    assert 'BLAS' in out\n+    assert 'joblib' in out  # Ensure joblib is also shown in the output\n",
  "scikit-learn__scikit-learn-14496": "diff --git a/sklearn/cluster/tests/test_optics.py b/sklearn/cluster/tests/test_optics.py\nindex 6c9dac3..b86c5fe 100644\n--- a/sklearn/cluster/tests/test_optics.py\n+++ b/sklearn/cluster/tests/test_optics.py\n@@ -77,8 +77,30 @@ def test_the_extract_xi_labels(ordering, clusters, expected):\n \n     assert_array_equal(labels, expected)\n \n+import numpy as np\n+from sklearn.utils import shuffle\n+from sklearn.cluster import OPTICS\n+from sklearn.utils._testing import assert_array_equal\n \n def test_extract_xi():\n+    # New test case for the float min_samples issue\n+    rng = np.random.RandomState(42)\n+    n_points_per_cluster = 10\n+\n+    C1 = [-5, -2] + .5 * rng.randn(n_points_per_cluster, 2)\n+    C2 = [4, -1] + .1 * rng.randn(n_points_per_cluster, 2)\n+    C3 = [1, -2] + .2 * rng.randn(n_points_per_cluster, 2)\n+\n+    X = np.vstack((C1, C2, C3))\n+    expected_labels = np.r_[[0] * 10, [1] * 10, [2] * 10]\n+    \n+    X, expected_labels = shuffle(X, expected_labels, random_state=rng)\n+    \n+    # Using float min_samples which should be correctly handled by the fix\n+    clust = OPTICS(min_samples=0.1, min_cluster_size=0.08, max_eps=20, cluster_method='xi', xi=0.05).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n+\n+    # Continue with other existing tests\n     # small and easy test (no clusters around other clusters)\n     # but with a clear noise data.\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-14710": "diff --git a/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py b/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\nindex 7e8bccd..0c50afe 100644\n--- a/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\n+++ b/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\n@@ -414,4 +414,25 @@ def test_infinite_values_missing_values():\n                                                learning_rate=1, max_depth=2)\n \n     assert stump_clf.fit(X, y_isinf).score(X, y_isinf) == 1\n-    assert stump_clf.fit(X, y_isnan).score(X, y_isnan) == 1\n+\n+import pytest\n+import numpy as np\n+from sklearn.experimental import enable_hist_gradient_boosting \n+from sklearn.ensemble import HistGradientBoostingClassifier\n+\n+@pytest.mark.parametrize(\"scoring\", [None, 'loss'])\n+def test_string_target_early_stopping(scoring):\n+    # Regression tests for #14709 where the targets need to be encoded before\n+    # to compute the score\n+    rng = np.random.RandomState(42)\n+    X = rng.randn(100, 10)\n+    y = np.array(['x'] * 50 + ['y'] * 50, dtype=object)\n+    \n+    # Test with early stopping based on scoring\n+    gbrt_scoring = HistGradientBoostingClassifier(n_iter_no_change=10, scoring=scoring)\n+    gbrt_scoring.fit(X, y)\n+    \n+    # Test with early stopping based on validation loss\n+    gbrt_loss = HistGradientBoostingClassifier(n_iter_no_change=10, validation_fraction=0.1)\n+    gbrt_loss.fit(X, y)\n+    assert stump_clf.fit(X, y_isnan).score(X, y_isnan) == 1\n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..52f0a7c 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,7 +680,25 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n-def test_sparse_precomputed():\n+import numpy as np\n+from scipy import sparse\n+from sklearn import svm\n+\n+def test_sparse_fit_with_empty_support_vectors_no_zero_division_error():\n+    # Test to ensure no ZeroDivisionError occurs when fitting with sparse data\n+    # and the support_vectors_ is empty\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear', C=316.227766017, max_iter=15000)\n+    \n+    try:\n+        model.fit(X_train, y_train)\n+        assert True, \"No ZeroDivisionError expected\"\n+    except ZeroDivisionError:\n+        assert False, \"ZeroDivisionError was raised, but it should not have been\"\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n     try:\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..c471f69 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -97,6 +97,31 @@ def test_strip_accents():\n     expected = 'this is a test'\n     assert strip_accents_unicode(a) == expected\n \n+def test_strip_accents_nfkd():\n+    # string already in NFKD form: \"LATIN SMALL LETTER N\" followed by \"COMBINING TILDE\"\n+    s2 = chr(110) + chr(771)\n+    expected = 'n'\n+\n+    # Check if strip_accents_unicode correctly strips accents for NFKD form strings\n+    assert strip_accents_unicode(s2) == expected\n+\n+    # More decomposed strings\n+    a = \"a\\u0301\"  # a with acute accent\n+    expected = \"a\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    a = \"e\\u0302\\u0301\"  # e with circumflex followed by acute\n+    expected = \"e\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    a = \"o\\u0308\\u0304\"  # o with diaeresis and macron\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # strings with only combining marks\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n \n def test_to_ascii():\n     # check some classical latin accentuated symbols\n",
  "scikit-learn__scikit-learn-25102": "diff --git a/sklearn/feature_selection/tests/test_base.py b/sklearn/feature_selection/tests/test_base.py\nindex bf2d07e..4f38fd9 100644\n--- a/sklearn/feature_selection/tests/test_base.py\n+++ b/sklearn/feature_selection/tests/test_base.py\n@@ -105,6 +105,33 @@ def test_inverse_transform_sparse():\n     assert np.float32 == sel.inverse_transform(sparse(Xt).astype(np.float32)).dtype\n \n     # Check wrong shape raises error\n+\n+\n+def test_preserve_dtypes_with_selector():\n+    \"\"\"Test that data types of pandas DataFrame columns are preserved\n+    after transformation with SelectKBest when using pandas output.\"\"\"\n+    import pandas as pd\n+    import numpy as np\n+    from sklearn.feature_selection import SelectKBest, chi2\n+    from sklearn.datasets import load_iris\n+\n+    # Load iris dataset\n+    X, y = load_iris(return_X_y=True, as_frame=True)\n+\n+    # Set custom dtypes for testing\n+    X = X.astype({\n+        \"petal length (cm)\": np.float32,\n+        \"petal width (cm)\": np.float16,\n+    })\n+    X[\"target\"] = y.astype(\"category\")\n+\n+    # Initialize and fit SelectKBest with pandas output\n+    selector = SelectKBest(chi2, k=2).set_output(transform=\"pandas\")\n+    X_transformed = selector.fit_transform(X, y)\n+\n+    # Assert dtypes are preserved after transformation\n+    for column in X_transformed.columns:\n+        assert X_transformed[column].dtype == X[column].dtype\n     with pytest.raises(ValueError):\n         sel.inverse_transform(np.array([[1], [2]]))\n \n@@ -113,4 +140,4 @@ def test_get_support():\n     sel = StepSelector()\n     sel.fit(X, y)\n     assert_array_equal(support, sel.get_support())\n-    assert_array_equal(support_inds, sel.get_support(indices=True))\n+    assert_array_equal(support_inds, sel.get_support(indices=True))\n",
  "scikit-learn__scikit-learn-25232": "diff --git a/sklearn/impute/tests/test_impute.py b/sklearn/impute/tests/test_impute.py\nindex ee482a8..e9f285e 100644\n--- a/sklearn/impute/tests/test_impute.py\n+++ b/sklearn/impute/tests/test_impute.py\n@@ -1524,6 +1524,49 @@ def test_iterative_imputer_keep_empty_features(initial_strategy):\n     assert_allclose(X_imputed[:, 1], 0)\n \n \n+def test_iterative_imputer_fill_value_integer():\n+    \"\"\"Test IterativeImputer with fill_value as integer when initial_strategy is 'constant'.\"\"\"\n+    X = np.array([[np.nan, 1], [np.nan, 2], [3, 3], [4, 4]])\n+    fill_value = 10\n+    imputer = IterativeImputer(\n+        missing_values=np.nan,\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+    )\n+    X_imputed = imputer.fit_transform(X)\n+    assert_array_equal(imputer.initial_imputer_.statistics_, [fill_value, 2.5])\n+    assert_array_equal(X_imputed[0, 0], fill_value)\n+\n+def test_iterative_imputer_fill_value_float():\n+    \"\"\"Test IterativeImputer with fill_value as float when initial_strategy is 'constant'.\"\"\"\n+    X = np.array([[np.nan, 1.0], [np.nan, 2.5], [3.0, 3.0], [4.0, 4.0]])\n+    fill_value = 1.5\n+    imputer = IterativeImputer(\n+        missing_values=np.nan,\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+    )\n+    X_imputed = imputer.fit_transform(X)\n+    assert_array_equal(imputer.initial_imputer_.statistics_, [fill_value, 2.625])\n+    assert_array_equal(X_imputed[0, 0], fill_value)\n+\n+def test_iterative_imputer_fill_value_string():\n+    \"\"\"Test IterativeImputer with fill_value as string when initial_strategy is 'constant'.\"\"\"\n+    X = np.array([['missing', 'a'], ['missing', 'b'], ['c', 'c'], ['d', 'd']], dtype=object)\n+    fill_value = 'missing'\n+    imputer = IterativeImputer(\n+        missing_values='missing',\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+    )\n+    X_imputed = imputer.fit_transform(X)\n+    assert_array_equal(imputer.initial_imputer_.statistics_, [fill_value, 'b'])\n+    assert_array_equal(X_imputed[0, 0], fill_value)\n+\n+\n @pytest.mark.parametrize(\"keep_empty_features\", [True, False])\n def test_knn_imputer_keep_empty_features(keep_empty_features):\n     \"\"\"Check the behaviour of `keep_empty_features` for `KNNImputer`.\"\"\"\n",
  "scikit-learn__scikit-learn-25931": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3714d1a..0eb2b87 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -331,6 +331,49 @@ def test_base_estimator_property_deprecated():\n     X = np.array([[1, 2], [3, 4]])\n     y = np.array([1, 0])\n     model = IsolationForest()\n+\n+def test_iforest_preserve_feature_names_with_different_contamination_levels():\n+    \"\"\"Check that feature names are preserved when contamination is not \"auto\".\n+    \n+    This test will verify against several contamination levels to ensure\n+    the issue does not arise with different dataframe configurations.\n+    \"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    rng = np.random.RandomState(42)\n+\n+    for contamination in [0.1, 0.2, 0.3, 0.4, 0.5]:\n+        X = pd.DataFrame(data=rng.randn(100, 5), columns=['a', 'b', 'c', 'd', 'e'])\n+        model = IsolationForest(random_state=0, contamination=contamination)\n+\n+        with warnings.catch_warnings():\n+            warnings.simplefilter(\"error\", UserWarning)\n+            model.fit(X)\n+\n+def test_iforest_preserve_feature_names_large_dataset():\n+    \"\"\"Check that feature names are preserved with larger datasets.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    rng = np.random.RandomState(42)\n+\n+    X = pd.DataFrame(data=rng.randn(1000, 10), columns=[f'col{i}' for i in range(10)])\n+    model = IsolationForest(random_state=0, contamination=0.2)\n+\n+    with warnings.catch_warnings():\n+        warnings.simplefilter(\"error\", UserWarning)\n+        model.fit(X)\n+\n+def test_iforest_preserve_feature_names_sparse_data():\n+    \"\"\"Check that feature names are preserved with sparse matrix input.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    from scipy.sparse import csc_matrix\n+    rng = np.random.RandomState(42)\n+\n+    X = pd.DataFrame(data=rng.randn(100, 5), columns=['a', 'b', 'c', 'd', 'e'])\n+    X_sparse = csc_matrix(X)\n+    model = IsolationForest(random_state=0, contamination=0.2)\n+\n+    with warnings.catch_warnings():\n+        warnings.simplefilter(\"error\", UserWarning)\n+        model.fit(X_sparse)\n     model.fit(X, y)\n \n     warn_msg = (\n@@ -338,4 +381,4 @@ def test_base_estimator_property_deprecated():\n         \"will be removed in 1.4. Use `estimator_` instead.\"\n     )\n     with pytest.warns(FutureWarning, match=warn_msg):\n-        model.base_estimator_\n+        model.base_estimator_\n",
  "scikit-learn__scikit-learn-25973": "diff --git a/sklearn/feature_selection/tests/test_sequential.py b/sklearn/feature_selection/tests/test_sequential.py\nindex 42e1fbb..da77b3e 100644\n--- a/sklearn/feature_selection/tests/test_sequential.py\n+++ b/sklearn/feature_selection/tests/test_sequential.py\n@@ -313,4 +313,23 @@ def test_backward_neg_tol():\n     new_score = lr.fit(Xr, y).score(Xr, y)\n \n     assert 0 < sfs.get_support().sum() < X.shape[1]\n-    assert new_score < initial_score\n+\n+def test_sequential_feature_selector_with_iterable_cv():\n+    \"\"\"Test SequentialFeatureSelector with an iterable of splits for CV parameter\"\"\"\n+    from sklearn.datasets import make_classification\n+    from sklearn.feature_selection import SequentialFeatureSelector\n+    from sklearn.model_selection import LeaveOneGroupOut\n+    from sklearn.neighbors import KNeighborsClassifier\n+    import numpy as np\n+\n+    X, y = make_classification(random_state=0)\n+    groups = np.zeros_like(y, dtype=int)\n+    groups[y.size // 2:] = 1\n+\n+    cv = LeaveOneGroupOut()\n+    splits = cv.split(X, y, groups=groups)\n+    clf = KNeighborsClassifier(n_neighbors=5)\n+\n+    seq = SequentialFeatureSelector(clf, n_features_to_select=5, scoring='accuracy', cv=splits)\n+    seq.fit(X, y)\n+    assert new_score < initial_score\n",
  "scikit-learn__scikit-learn-26323": "",
  "scikit-learn__scikit-learn-9288": "diff --git a/sklearn/cluster/tests/test_k_means.py b/sklearn/cluster/tests/test_k_means.py\nindex abeeff0..3057497 100644\n--- a/sklearn/cluster/tests/test_k_means.py\n+++ b/sklearn/cluster/tests/test_k_means.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for K-means\"\"\"\n import sys\n \n@@ -7,6 +8,7 @@ from scipy import sparse as sp\n import pytest\n \n from sklearn.utils.testing import assert_array_equal\n+from sklearn.utils.testing import assert_almost_equal\n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_allclose\n from sklearn.utils.testing import assert_almost_equal\n",
  "sphinx-doc__sphinx-10323": "diff --git a/tests/test_directive_code.py b/tests/test_directive_code.py\nindex 949c70e..9e92170 100644\n--- a/tests/test_directive_code.py\n+++ b/tests/test_directive_code.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the code-block directive.\"\"\"\n \n import os\n@@ -250,8 +251,33 @@ def test_LiteralIncludeReader_dedent(literal_inc_path):\n                        \"    pass\\n\"\n                        \"\\n\")\n \n+@pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n+def test_LiteralIncludeReader_prepend_with_indent(literal_inc_path):\n+    \"\"\"Test prepend with expected indentation.\n+\n+    This test ensures that the prepended content retains its indentation \n+    consistent with the included code.\n+    \"\"\"\n+    options = {'lines': '17-21', 'prepend': '      <plugin>'}\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    assert content == (\"      <plugin>\\n\"\n+                       \"        <groupId>com.github.ekryd.sortpom</groupId>\\n\"\n+                       \"        <artifactId>sortpom-maven-plugin</artifactId>\\n\"\n+                       \"        <version>2.15.0</version>\\n\"\n+                       \"        <configuration>\\n\")\n \n @pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n+def test_LiteralIncludeReader_dedent_with_prepend(literal_inc_path):\n+    \"\"\"Test dedent with prepend ensuring only included lines are dedented.\"\"\"\n+    options = {'lines': '17-21', 'dedent': 2, 'prepend': '  <plugin>'}\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    assert content == (\"  <plugin>\\n\"\n+                       \"        <groupId>com.github.ekryd.sortpom</groupId>\\n\"\n+                       \"        <artifactId>sortpom-maven-plugin</artifactId>\\n\"\n+                       \"        <version>2.15.0</version>\\n\"\n+                       \"        <configuration>\\n\")\n def test_LiteralIncludeReader_tabwidth(testroot):\n     # tab-width: 4\n     options = {'tab-width': 4, 'pyobject': 'Qux'}\n",
  "sphinx-doc__sphinx-10449": "",
  "sphinx-doc__sphinx-10466": "diff --git a/tests/test_build_gettext.py b/tests/test_build_gettext.py\nindex a6fc946..35c590c 100644\n--- a/tests/test_build_gettext.py\n+++ b/tests/test_build_gettext.py\n@@ -1,3 +1,27 @@\n+\n+def test_catalog_with_duplicate_locations():\n+    # Create a new catalog\n+    catalog = Catalog()\n+\n+    # Add messages with duplicate locations\n+    catalog.add('duplicate_test', MsgOrigin('/path/to/duplicatefile', 10))\n+    catalog.add('duplicate_test', MsgOrigin('/path/to/duplicatefile', 10))\n+    catalog.add('duplicate_test', MsgOrigin('/path/to/duplicatefile', 15))\n+    catalog.add('duplicate_test', MsgOrigin('/path/to/otherfile', 20))\n+    \n+    # Retrieve messages from the catalog\n+    messages = list(catalog)\n+    \n+    # Assert only one message exists\n+    assert len(messages) == 1\n+    \n+    # Check the text and ensure no duplicate locations exist\n+    first_message = messages[0]\n+    assert first_message.text == 'duplicate_test'\n+    assert first_message.locations == [('/path/to/duplicatefile', 10),\n+                                       ('/path/to/duplicatefile', 15),\n+                                       ('/path/to/otherfile', 20)]\n+\n \"\"\"Test the build process with gettext builder with the test root.\"\"\"\n \n import gettext\n@@ -9,6 +33,7 @@ from subprocess import PIPE, CalledProcessError\n import pytest\n \n from sphinx.util.osutil import cd\n+from sphinx.builders.gettext import Catalog, MsgOrigin\n \n \n @pytest.mark.sphinx('gettext', srcdir='root-gettext')\n",
  "sphinx-doc__sphinx-10673": "",
  "sphinx-doc__sphinx-7440": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 975a00f..31d26fa 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -148,7 +148,38 @@ def test_glossary(app):\n     assert (\"term4\", \"term4\", \"term\", \"index\", \"term-term4\", -1) in objects\n \n \n-def test_glossary_warning(app, status, warning):\n+def test_glossary_case_sensitive_terms(app):\n+    text = (\".. glossary::\\n\"\n+            \"\\n\"\n+            \"   MySQL\\n\"\n+            \"       A relational database management system.\\n\"\n+            \"\\n\"\n+            \"   mysql\\n\"\n+            \"       Open-source RDBMS.\\n\")\n+\n+    # doctree\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (\n+        [glossary, definition_list, ([definition_list_item, ([term, (\"MySQL\",\n+                                                                     index)],\n+                                                             definition)],\n+                                     [definition_list_item, ([term, (\"mysql\",\n+                                                                     index)],\n+                                                             definition)])],\n+    ))\n+    assert_node(doctree[0][0][0][0][1],\n+                entries=[(\"single\", \"MySQL\", \"term-MySQL\", \"main\", None)])\n+    assert_node(doctree[0][0][0][1],\n+                [nodes.definition, nodes.paragraph, \"A relational database management system.\"])\n+    assert_node(doctree[0][0][1][0][1],\n+                entries=[(\"single\", \"mysql\", \"term-mysql\", \"main\", None)])\n+    assert_node(doctree[0][0][1][1],\n+                [nodes.definition, nodes.paragraph, \"Open-source RDBMS.\"])\n+\n+    # index\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert (\"MySQL\", \"MySQL\", \"term\", \"index\", \"term-MySQL\", -1) in objects\n+    assert (\"mysql\", \"mysql\", \"term\", \"index\", \"term-mysql\", -1) in objects\n     # empty line between terms\n     text = (\".. glossary::\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-7757": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex b3053d1..fd1fc80 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -331,6 +331,23 @@ def test_signature_from_str_kwonly_args():\n     assert sig.parameters['b'].kind == Parameter.KEYWORD_ONLY\n     assert sig.parameters['b'].default == Parameter.empty\n \n+from sphinx.util.inspect import signature_from_str\n+from inspect import Parameter\n+import pytest\n+import sys\n+\n+@pytest.mark.skipif(sys.version_info < (3, 8),\n+                    reason='python-3.8 or above is required')\n+def test_signature_from_str_positional_only_args_with_defaults():\n+    sig = signature_from_str('(a, b=0, /, c=1)')\n+    assert list(sig.parameters.keys()) == ['a', 'b', 'c']\n+    assert sig.parameters['a'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['a'].default == Parameter.empty\n+    assert sig.parameters['b'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['b'].default == '0'\n+    assert sig.parameters['c'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['c'].default == '1'\n+\n \n @pytest.mark.skipif(sys.version_info < (3, 8),\n                     reason='python-3.8 or above is required')\n",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..b6b727d 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -14,6 +15,7 @@ from importlib import import_module\n \n import pytest\n \n+from typing import TypeVar\n from sphinx.ext.autodoc.mock import _MockModule, _MockObject, mock\n \n \n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_napoleon.py b/tests/test_ext_napoleon.py\nindex 0676869..e778212 100644\n--- a/tests/test_ext_napoleon.py\n+++ b/tests/test_ext_napoleon.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_napoleon\n     ~~~~~~~~~~~~~\n@@ -180,7 +181,18 @@ class SkipMemberTest(TestCase):\n                         SampleError._private_undoc, True,\n                         'napoleon_include_private_with_doc')\n \n-    def test_exception_special_doc(self):\n+    from sphinx.testing.util import simple_decorator\n+\n+    class SampleClassWithDecoratedInit:\n+        @simple_decorator\n+        def __init__(self):\n+            \"\"\"Documented __init__ method.\"\"\"\n+            pass\n+\n+    def test_class_decorated_init_doc(self):\n+        self.assertSkip('class', '__init__',\n+                        SampleClassWithDecoratedInit.__init__, False,\n+                        'napoleon_include_init_with_doc')\n         self.assertSkip('exception', '__special_doc__',\n                         SampleError.__special_doc__, False,\n                         'napoleon_include_special_with_doc')\n",
  "sphinx-doc__sphinx-7985": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 5b1b2ed..1f2f1b1 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -15,12 +15,23 @@ import pytest\n \n \n @pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n-def test_defaults(app, status, warning):\n+def test_local_links(app, status, warning):\n+    # This test assumes that the testroot 'linkcheck' has been set up\n+    # to include a local (internal) link that is both valid and invalid.\n+\n     app.builder.build_all()\n \n     assert (app.outdir / 'output.txt').exists()\n     content = (app.outdir / 'output.txt').read_text()\n \n+    # Check for local link status\n+    assert \"local\" in content\n+    assert \"[broken] doesntexist\" in content\n+    assert \"[local] conf.py\" in content\n+\n+    assert (app.outdir / 'output.txt').exists()\n+    content = (app.outdir / 'output.txt').read_text()\n+\n     print(content)\n     # looking for '#top' and '#does-not-exist' not found should fail\n     assert \"Anchor 'top' not found\" in content\n",
  "sphinx-doc__sphinx-8035": "diff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex ad1d950..c2ea264 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_private_members\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -12,8 +13,27 @@ import pytest\n \n from test_ext_autodoc import do_autodoc\n \n-\n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_specific_private_members(app):\n+    app.config.autoclass_content = 'init'\n+    options = {\n+        \"members\": None,\n+        \"private-members\": \"_private_method\"\n+    }\n+    actual = do_autodoc(app, 'class', 'target.ClassWithPrivateMembers', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: ClassWithPrivateMembers',\n+        '',\n+        '   :members:',\n+        '',\n+        '',\n+        '.. py:method:: ClassWithPrivateMembers._private_method()',\n+        '   :module: target',\n+        '',\n+        '   This is a private method.',\n+        ''\n+    ]\n def test_private_field(app):\n     app.config.autoclass_content = 'class'\n     options = {\"members\": None}\n",
  "sphinx-doc__sphinx-8120": "diff --git a/tests/test_intl.py b/tests/test_intl.py\nindex 58339b1..a7f755b 100644\n--- a/tests/test_intl.py\n+++ b/tests/test_intl.py\n@@ -1281,11 +1281,77 @@ def test_image_glob_intl_using_figure_language_filename(app):\n                 candidates={'application/pdf': 'subdir/svgimg.pdf',\n                             'image/svg+xml': 'subdir/svgimg.svg'})\n \n+\n+from babel.messages import pofile\n+from sphinx.util import locale_dirs\n+\n+@pytest.mark.sphinx('html', testroot='basic', confoverrides={'language': 'da'})\n+def test_custom_da_translation(make_app, app_params, sphinx_test_tempdir):\n+    try:\n+        # clear translators cache\n+        locale.translators.clear()\n+\n+        # prepare message catalog (.po)\n+        locale_dir = sphinx_test_tempdir / 'basic' / 'locale' / 'da' / 'LC_MESSAGES'\n+        locale_dir.makedirs()\n+        with (locale_dir / 'sphinx.po').open('wb') as f:\n+            catalog = Catalog()\n+            catalog.add('Fig. %s', 'Foobar %s')\n+            catalog.add('Listing %s', 'Whatever %s')\n+            pofile.write_po(f, catalog)\n+\n+        # construct application and convert po file to .mo\n+        args, kwargs = app_params\n+        app = make_app(*args, **kwargs)\n+        assert (locale_dir / 'sphinx.mo').exists()\n+        assert app.translator.gettext('Fig. %s') == 'Foobar %s'\n+        assert app.translator.gettext('Listing %s') == 'Whatever %s'\n+\n+        app.build()\n+        content = (app.outdir / 'index.html').read_text()\n+        assert 'Foobar 1' in content\n+        assert 'Whatever 1' in content\n+    finally:\n+        locale.translators.clear()\n+\n     assert isinstance(doctree[0][3], nodes.figure)\n     assert_node(doctree[0][3][0], nodes.image, uri='subdir/svgimg.*',\n                 candidates={'application/pdf': 'subdir/svgimg.pdf',\n                             'image/svg+xml': 'subdir/svgimg.svg'})\n \n \n+from babel.messages import pofile\n+from sphinx.util import locale_dirs\n+\n+@pytest.mark.sphinx('html', testroot='basic', confoverrides={'language': 'da'})\n+def test_custom_da_translation(make_app, app_params, sphinx_test_tempdir):\n+    try:\n+        # clear translators cache\n+        locale.translators.clear()\n+\n+        # prepare message catalog (.po)\n+        locale_dir = sphinx_test_tempdir / 'basic' / 'locale' / 'da' / 'LC_MESSAGES'\n+        locale_dir.makedirs()\n+        with (locale_dir / 'sphinx.po').open('wb') as f:\n+            catalog = Catalog()\n+            catalog.add('Fig. %s', 'Foobar %s')\n+            catalog.add('Listing %s', 'Whatever %s')\n+            pofile.write_po(f, catalog)\n+\n+        # construct application and convert po file to .mo\n+        args, kwargs = app_params\n+        app = make_app(*args, **kwargs)\n+        assert (locale_dir / 'sphinx.mo').exists()\n+        assert app.translator.gettext('Fig. %s') == 'Foobar %s'\n+        assert app.translator.gettext('Listing %s') == 'Whatever %s'\n+\n+        app.build()\n+        content = (app.outdir / 'index.html').read_text()\n+        assert 'Foobar 1' in content\n+        assert 'Whatever 1' in content\n+    finally:\n+        locale.translators.clear()\n+\n+\n def getwarning(warnings):\n-    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n+    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n",
  "sphinx-doc__sphinx-8269": "",
  "sphinx-doc__sphinx-8459": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex d1881df..7e65b4d 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_configs\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -8,6 +9,38 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+import pytest\n+import sys\n+from sphinx.testing.util import SphinxTestApp\n+\n+@pytest.mark.skipif(sys.version_info < (3, 7), reason='python 3.7+ is required.')\n+@pytest.mark.sphinx('text', testroot='ext-autodoc', \n+                    srcdir='autodoc_typehints_description_and_aliases_issue',\n+                    confoverrides={'autodoc_typehints': 'description',\n+                                   'autodoc_type_aliases': {'JSONObject': 'types.JSONObject'}})\n+def test_autodoc_typehints_description_and_type_aliases_issue(app: SphinxTestApp) -> None:\n+    (app.srcdir / 'types.py').write_text(\n+        'from typing import Any, Dict\\n'\n+        '\\n'\n+        'JSONObject = Dict[str, Any]\\n'\n+        '\\n'\n+        'def sphinx_doc(data: JSONObject) -> JSONObject:\\n'\n+        '    \"\"\"Does it work.\\n'\n+        '\\n'\n+        '    Args:\\n'\n+        '        data: Does it args.\\n'\n+        '\\n'\n+        '    Returns:\\n'\n+        '        Does it work in return.\\n'\n+        '    \"\"\"\\n'\n+        '    return {}\\n'\n+    )\n+    app.build()\n+    output = (app.outdir / 'types.txt').read_text()\n+    assert 'types.sphinx_doc(data)' in output\n+    assert 'Parameters\\ndata (types.JSONObject) \u2013 Does it args.' in output\n+    assert 'Return type\\ntypes.JSONObject' in output\n+\n import platform\n import sys\n \n",
  "sphinx-doc__sphinx-8475": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 41632e7..5067def 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -372,6 +372,29 @@ def test_connect_to_selfsigned_nonexistent_cert_file(app):\n     with https_server(OKHandler):\n         app.builder.build_all()\n \n+import pytest\n+import http.server\n+import json\n+import requests\n+from sphinx.testing.util import sphinx\n+from sphinx.testing.fixtures import app\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_TooManyRedirects_on_HEAD(app):\n+    class InfiniteRedirectOnHeadHandler(http.server.BaseHTTPRequestHandler):\n+        def do_HEAD(self):\n+            self.send_response(302, \"Found\")\n+            self.send_header(\"Location\", \"http://localhost:7777/\")\n+            self.end_headers()\n+\n+        def do_GET(self):\n+            self.send_response(200, \"OK\")\n+            self.end_headers()\n+            self.wfile.write(b\"ok\\n\")\n+\n+    with http_server(InfiniteRedirectOnHeadHandler):\n+        app.builder.build_all()\n+\n     with open(app.outdir / 'output.json') as fp:\n         content = json.load(fp)\n     assert content == {\n@@ -381,4 +404,54 @@ def test_connect_to_selfsigned_nonexistent_cert_file(app):\n         \"lineno\": 1,\n         \"uri\": \"https://localhost:7777/\",\n         \"info\": \"Could not find a suitable TLS CA certificate bundle, invalid path: does/not/exist\",\n-    }\n+    }\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_get_fallback_after_too_many_redirects(app):\n+    class RedirectThenGetHandler(http.server.BaseHTTPRequestHandler):\n+        def do_HEAD(self):\n+            self.send_response(302, \"Found\")\n+            self.send_header(\"Location\", \"http://localhost:7778/\")\n+            self.end_headers()\n+\n+        def do_GET(self):\n+            self.send_response(200, \"OK\")\n+            self.end_headers()\n+            self.wfile.write(b\"content\\n\")\n+\n+    with http_server(RedirectThenGetHandler):\n+        app.builder.build_all()\n+\n+import pytest\n+import http.server\n+import json\n+import requests\n+from sphinx.testing.util import sphinx\n+from sphinx.testing.fixtures import app\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_TooManyRedirects_on_HEAD(app):\n+    class InfiniteRedirectOnHeadHandler(http.server.BaseHTTPRequestHandler):\n+        def do_HEAD(self):\n+            self.send_response(302, \"Found\")\n+            self.send_header(\"Location\", \"http://localhost:7777/\")\n+            self.end_headers()\n+\n+        def do_GET(self):\n+            self.send_response(200, \"OK\")\n+            self.end_headers()\n+            self.wfile.write(b\"ok\\n\")\n+\n+    with http_server(InfiniteRedirectOnHeadHandler):\n+        app.builder.build_all()\n+\n+    with open(app.outdir / 'output.json') as fp:\n+        content = json.load(fp)\n+    assert content == {\n+        \"code\": 0,\n+        \"status\": \"working\",\n+        \"filename\": \"index.rst\",\n+        \"lineno\": 1,\n+        \"uri\": \"http://localhost:7778/\",\n+        \"info\": \"\",\n+    }\n",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..0b43403 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -21,6 +21,7 @@ from sphinx.ext.autodoc import ALL, ModuleLevelDocumenter, Options\n from sphinx.ext.autodoc.directive import DocumenterBridge, process_documenter_options\n from sphinx.testing.util import SphinxTestApp, Struct  # NOQA\n from sphinx.util.docutils import LoggingReporter\n+from .test_ext_autodoc import do_autodoc\n \n try:\n     # Enable pyximport to test cython module\n",
  "sphinx-doc__sphinx-8721": "",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex 3c31d3d..1e9a59d 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -515,8 +515,15 @@ def test_dict_customtype():\n     # Type is unsortable, just check that it does not crash\n     assert \"<CustomType(2)>: 2\" in description\n \n+def test_object_description_enum():\n+    import enum\n \n-def test_getslots():\n+    class MyEnum(enum.Enum):\n+        ValueA = 10\n+        ValueB = 20\n+\n+    # Test if object_description correctly describes an Enum value\n+    assert inspect.object_description(MyEnum.ValueA) == \"MyEnum.ValueA\"\n     class Foo:\n         pass\n \n",
  "sphinx-doc__sphinx-9320": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\nindex ff8df08..1e6bf5c 100644\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -10,6 +10,7 @@\n \n import time\n from io import StringIO\n+from sphinx.cmd.quickstart import ask_user\n \n import pytest\n \n@@ -241,7 +242,22 @@ def test_default_filename(tempdir):\n     exec(conffile.read_text(), ns)\n \n \n-def test_extensions(tempdir):\n+def test_exits_on_enter_with_existing_confpy(monkeypatch):\n+    # Mock path.isfile to simulate presence of existing conf.py\n+    def mock_isfile(path):\n+        return True\n+    monkeypatch.setattr(path, 'isfile', mock_isfile)\n+\n+    # Simulate user pressing Enter by providing empty input\n+    qs.term_input = lambda prompt: ''\n+\n+    d = {}\n+    with pytest.raises(SystemExit) as exit_info:\n+        ask_user(d)\n+    \n+    # Verify that the script exits with status code 1\n+    assert exit_info.type == SystemExit\n+    assert exit_info.value.code == 1\n     qs.main(['-q', '-p', 'project_name', '-a', 'author',\n              '--extensions', 'foo,bar,baz', tempdir])\n \n",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..39071f6 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -54,6 +54,7 @@ from sphinx.pycode import ast\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n     (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n+    (\"(1,)\", \"(1,)\"),                             # Tuple (single item)\n     (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n",
  "sphinx-doc__sphinx-9591": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 29731ea..37aa414 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -847,7 +847,27 @@ def test_pyproperty(app):\n     assert domain.objects['Class.prop2'] == ('index', 'Class.prop2', 'property', False)\n \n \n-def test_pydecorator_signature(app):\n+def test_property_type_annotation_crossref(app):\n+    # This test checks if the type annotation of a property is correctly cross-referenced\n+    text = (\".. py:class:: Square\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: start\\n\"\n+            \"      :type: Point\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\")\n+\n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n+    \n+    # Check if the type in property `end` is cross-referenced\n+    assert_node(doctree[1][1][3], ([desc_signature, ([desc_annotation, \"property \"],\n+                                                     [desc_name, \"end\"],\n+                                                     [desc_annotation, \": \",\n+                                                      pending_xref, \"Point\"])]))\n+\n+    assert 'Square.end' in domain.objects\n+    assert domain.objects['Square.end'] == ('index', 'Square.end', 'property', False)\n     text = \".. py:decorator:: deco\"\n     domain = app.env.get_domain('py')\n     doctree = restructuredtext.parse(app, text)\n",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..1f42ae6 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -754,9 +754,9 @@ def test_pymethod_options(app):\n     assert 'Class.meth4' in domain.objects\n     assert domain.objects['Class.meth4'] == ('index', 'Class.meth4', 'method', False)\n \n-    # :property:\n+    # :property: without parens\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
  "sphinx-doc__sphinx-9711": "",
  "sympy__sympy-11618": "",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..b74d964 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -741,7 +741,15 @@ def test_special_printers():\n     assert isinstance(func1(), mpi)\n     assert isinstance(func2(), mpi)\n \n-def test_true_false():\n+from sympy.functions import implemented_function\n+from sympy import Float\n+\n+def test_issue_12092():\n+    f = implemented_function('f', lambda x: x**2)\n+    g = implemented_function('g', lambda x: 2*x)\n+    assert f(f(2)).evalf() == Float(16)\n+    assert f(g(2)).evalf() == Float(16)\n+    assert g(f(2)).evalf() == Float(8)\n     # We want exact is comparison here, not just ==\n     assert lambdify([], true)() is True\n     assert lambdify([], false)() is False\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..7835ae6 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -84,7 +84,14 @@ def test_Identity():\n     assert In.inverse() == In\n     assert In.conjugate() == In\n \n-def test_Identity_doit():\n+from sympy import Sum, symbols\n+\n+def test_identity_matrix_sum():\n+    n = symbols('n', integer=True, positive=True)\n+    In = Identity(n)\n+\n+    # The total sum of elements in an identity matrix should be n.\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..5134e95 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -354,6 +354,25 @@ def test_args():\n     # but this is ok because cycles imply that only those listed moved\n     assert Permutation(4, 5) == Permutation([0, 1, 2, 3, 5, 4])\n \n+    # Test cases for non-disjoint cycles to verify the fix\n+    # Permutation of non-disjoint cycles should not raise an error and should resolve properly\n+\n+    # Test with overlapping elements, expect the cycles to be applied in order (left-to-right)\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([1, 2, 0])\n+    assert Permutation([[0, 1], [0, 1, 2]]) == Permutation([2, 0, 1])\n+\n+    # Identity permutation check\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])  # Identity, as [0, 1] is applied and reversed\n+\n+    # Additional identity verification\n+    assert Permutation([[0, 1, 2], [2, 0, 1]]) == Permutation([0, 1, 2]) # Full cycle leading to identity\n+\n+    # Larger permutation with overlapping cycles\n+    assert Permutation([[0, 2, 3], [1, 3, 2]]) == Permutation([3, 2, 0, 1])  # The final permutation after applying both cycles\n+\n+    # Ensure non-overlapping cycles are handled correctly\n+    assert Permutation([[0, 1], [2, 3]]) == Permutation([1, 0, 3, 2])\n+\n \n def test_Cycle():\n     assert str(Cycle()) == '()'\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..bba3dbe 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -502,6 +502,36 @@ def test_sparse_zeros_sparse_eye():\n     assert SparseMatrix.zeros(3) == zeros(3, cls=SparseMatrix)\n     assert len(SparseMatrix.zeros(3)._smat) == 0\n \n+def test_sparse_stack_zeros():\n+    # Test horizontal stacking with zero-dimension matrices\n+    m1 = SparseMatrix.zeros(0, 0)\n+    m2 = SparseMatrix.zeros(0, 1)\n+    m3 = SparseMatrix.zeros(0, 2)\n+    m4 = SparseMatrix.zeros(0, 3)\n+    assert SparseMatrix.hstack(m1, m2, m3, m4).shape == (0, 6)\n+\n+    m1 = SparseMatrix.zeros(1, 0)\n+    m2 = SparseMatrix.zeros(1, 1)\n+    m3 = SparseMatrix.zeros(1, 2)\n+    m4 = SparseMatrix.zeros(1, 3)\n+    assert SparseMatrix.hstack(m1, m2, m3, m4).shape == (1, 6)\n+\n+    # Test vertical stacking with zero-dimension matrices\n+    mv1 = SparseMatrix.zeros(0, 1)\n+    mv2 = SparseMatrix.zeros(1, 1)\n+    assert SparseMatrix.vstack(mv1, mv2).shape == (1, 1)\n+\n+    mv1 = SparseMatrix.zeros(0, 2)\n+    mv2 = SparseMatrix.zeros(1, 2)\n+    assert SparseMatrix.vstack(mv1, mv2).shape == (1, 2)\n+\n+    mv1 = SparseMatrix.zeros(0, 0)\n+    mv2 = SparseMatrix.zeros(1, 0)\n+    assert SparseMatrix.vstack(mv1, mv2).shape == (1, 0)\n+\n+    # ensure that a mix of these cases keeps working\n+    assert SparseMatrix.hstack(*[SparseMatrix.zeros(6, 0) for n in range(4)]).shape == (6, 0)\n+    assert SparseMatrix.vstack(*[SparseMatrix.zeros(0, 6) for n in range(4)]).shape == (0, 6)\n \n def test_copyin():\n     s = SparseMatrix(3, 3, {})\n",
  "sympy__sympy-13372": "diff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\nindex e95146a..86cc0b0 100644\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -170,8 +170,14 @@ def test_evalf_ramanujan():\n \n # Input that for various reasons have failed at some point\n \n+from sympy import Mul, Max, symbols\n+\n+x, y = symbols('x y')\n \n def test_evalf_bugs():\n+    # issue 13076\n+    assert NS(Mul(Max(0, y), x, evaluate=False).evalf()) == 'x*Max(0, y)'\n+    assert NS(Mul(x, Max(0, y), evaluate=False).evalf()) == 'x*Max(0, y)'\n     assert NS(sin(1) + exp(-10**10), 10) == NS(sin(1), 10)\n     assert NS(exp(10**10) + sin(1), 10) == NS(exp(10**10), 10)\n     assert NS('log(1+1/10**50)', 20) == '1.0000000000000000000e-50'\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..86f7b2d 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -203,6 +203,26 @@ def test_tanh():\n \n     assert tanh(k*pi*I/2) == tan(k*pi/2)*I\n \n+def test_issue_subs_coth_log_tan():\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+    \n+    # Test the specific values mentioned in the issue\n+    assert isinstance(e.subs(x, 2), Expr)  # should not raise an error\n+    assert isinstance(e.subs(x, 3), Expr)  # should not raise an error\n+    assert isinstance(e.subs(x, 5), Expr)  # should not raise an error\n+    assert isinstance(e.subs(x, 6), Expr)  # should not raise an error\n+    assert isinstance(e.subs(x, 8), Expr)  # should not raise an error\n+    assert isinstance(e.subs(x, 9), Expr)  # should not raise an error\n+    assert isinstance(e.subs(x, 11), Expr) # should not raise an error\n+    assert isinstance(e.subs(x, 12), Expr) # should not raise an error\n+    assert isinstance(e.subs(x, 13), Expr) # should not raise an error\n+    assert isinstance(e.subs(x, 15), Expr) # should not raise an error\n+    assert isinstance(e.subs(x, 18), Expr) # should not raise an error\n+\n+    # Test additional values to ensure broad coverage\n+    for val in range(1, 20):\n+        assert isinstance(e.subs(x, val), Expr)  # should not raise an error\n \n def test_tanh_series():\n     x = Symbol('x')\n",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..7b87740 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -165,7 +165,16 @@ def test_difference():\n     assert -1 in S.Reals - S.Naturals\n \n \n+from sympy import FiniteSet, Interval, Complement, Symbol\n+\n def test_Complement():\n+    # Test for issue where complement doesn't work with mixed symbols and numbers\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    assert Complement(FiniteSet(x, y, 2), Interval(-10, 10)) == Complement(FiniteSet(x, y), Interval(-10, 10))\n+    assert Complement(FiniteSet(x, y, -5), Interval(-10, 10)) == Complement(FiniteSet(x, y), Interval(-10, 10))\n+    assert Complement(FiniteSet(x, y, 15), Interval(-10, 10)) == Complement(FiniteSet(x, y, 15), Interval(-10, 10))\n+    assert Complement(FiniteSet(x, 5, 10), Interval(0, 10)) == FiniteSet(x)\n     assert Complement(Interval(1, 3), Interval(1, 2)) == Interval(2, 3, True)\n     assert Complement(FiniteSet(1, 3, 4), FiniteSet(3, 4)) == FiniteSet(1)\n     assert Complement(Union(Interval(0, 2),\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..2e7ffc1 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,20 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643_col_insert():\n+    import sympy as sm\n+    M = sm.eye(6)\n+    V = 2 * sm.ones(6, 2)\n+    result = M.col_insert(3, V)\n+    expected = sm.Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert result == expected\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..3e86be4 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -678,11 +678,19 @@ def test_Poly_mul():\n     assert 2 * Poly(x, x) == Poly(2*x, x)\n \n \n+from sympy import Poly, Symbol, S\n+\n def test_Poly_sqr():\n     assert Poly(x*y, x, y).sqr() == Poly(x**2*y**2, x, y)\n \n \n-def test_Poly_pow():\n+def test_issue_13079():\n+    x = Symbol('x')\n+    assert Poly(x) * x == Poly(x**2, x, domain='ZZ')\n+    assert x * Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert -2 * Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2) * Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert Poly(x) * S(-2) == Poly(-2*x, x, domain='ZZ')\n     assert Poly(x, x).pow(10) == Poly(x**10, x)\n     assert Poly(x, x).pow(Integer(10)) == Poly(x**10, x)\n \n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..d75dfff 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -55,6 +55,29 @@ def test_printmethod():\n     assert latex(R(x)) == \"foo\"\n \n \n+def test_latex_custom_mul_symbol():\n+    from sympy import symbols, Integral, latex\n+    x, y = symbols('x y')\n+\n+    # Test case where mul_symbol is a thin space\n+    assert latex(3*x**2*y, mul_symbol='\\\\,') == r\"3\\,x^{2}\\,y\"\n+\n+    # Ensure default behavior when mul_symbol isn't specified\n+    assert latex(3*x**2*y) == \"3 x^{2} y\"\n+\n+    # Test case with decimal numbers and custom symbol\n+    assert latex(1.5*3**x, mul_symbol='\\\\,') == r\"1.5\\,3^{x}\"\n+\n+    # Ensure standard multiplication still uses default symbol\n+    assert latex(1.5*3**x) == r\"1.5 \\cdot 3^{x}\"\n+\n+    # Test case when using custom mul_symbol for an Integral\n+    assert latex(Integral(2*x**2*y, x), mul_symbol='\\\\,') == r\"\\int 2\\,x^{2}\\,y\\,dx\"\n+\n+    # The standard behavior for Integral when mul_symbol is not modified\n+    assert latex(Integral(2*x**2*y, x)) == r\"\\int 2 x^{2} y\\, dx\"\n+\n+\n def test_latex_basic():\n     assert latex(1 + x) == \"x + 1\"\n     assert latex(x**2) == \"x^{2}\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..882dde2 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -313,9 +313,24 @@ def test_as_mutable():\n     assert zeros(0, 3).as_immutable() == ImmutableMatrix(zeros(0, 3))\n     assert zeros(3, 0).as_immutable() == ImmutableMatrix(zeros(3, 0))\n \n+from sympy import symbols, Matrix\n \n def test_determinant():\n \n+    # Test case for issue 13835: Matrix determinant with symbolic entries\n+    a = symbols('a')\n+    M = lambda n: Matrix([[i + a*j for i in range(n)] for j in range(n)])\n+\n+    # The original issue resulted in incorrect handling of symbolic determinants.\n+    # Confirm that no error occurs and the determinant is symbolic and well-defined.\n+    assert M(1).det() == 0\n+    assert M(2).det() == -a\n+    assert M(3).det() == 0  # Check if symbolic expression is handled correctly\n+    assert M(4).det() == 0  # Verify symbolic computation gives consistent result\n+    assert M(5).det() is not None  # Ensure no NaN or error in larger matrices\n+    assert M(6).det() is not None  # Verify no exception or NaN\n+    assert M(7).det() is not None  # Larger size check\n+\n     for M in [Matrix(), Matrix([[1]])]:\n         assert (\n             M.det() ==\n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..7bf5a52 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -708,8 +708,111 @@ def test_issue_10003():\n     G = Gamma('g', 1, 2)\n     assert P(X < -1) == S.Zero\n     assert P(G < -1) == S.Zero\n+from sympy import Piecewise, beta, hyper, sqrt, erfc, gamma as gamma_fn, diff, simplify\n \n-def test_precomputed_cdf():\n+def test_issue_precomputed_cdf():\n+    x = symbols(\"x\", real=True, finite=True)\n+\n+    # Arcsin distribution\n+    X = Arcsin(\"x\", 0, 3)\n+    expected_cdf_arcsin = Piecewise(\n+        (0, x < 0),\n+        (2*asin(sqrt(x/3))/pi, x <= 3),\n+        (1, True)\n+    )\n+    assert simplify(cdf(X)(x) - expected_cdf_arcsin) == 0\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+    # Dagum distribution\n+    X = Dagum(\"x\", S(1)/3, S(1)/5, 2)\n+    expected_cdf_dagum = Piecewise(\n+        ((1 + (x/2)**(-S(1)/3))**(-S(1)/5), x >= 0),\n+        (0, True)\n+    )\n+    assert simplify(cdf(X)(x) - expected_cdf_dagum) == 0\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+    # Erlang distribution\n+    X = Erlang(\"x\", 1, 1)\n+    expected_cdf_erlang = Piecewise(\n+        (lowergamma(1, x)/gamma_fn(1), x > 0),\n+        (0, True)\n+    )\n+    assert simplify(cdf(X)(x) - expected_cdf_erlang) == 0\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+    # Frechet distribution\n+    X = Frechet(\"x\", S(4)/3, 1, 2)\n+    expected_cdf_frechet = Piecewise(\n+        (exp(-((x - 2)/1)**(-S(4)/3)), x >= 2),\n+        (0, True)\n+    )\n+    assert simplify(cdf(X)(x) - expected_cdf_frechet) == 0\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+    # Gamma distribution\n+    X = Gamma(\"x\", 0.1, 2)\n+    expected_cdf_gamma = Piecewise(\n+        (lowergamma(0.1, x/2)/gamma_fn(0.1), x > 0),\n+        (0, True)\n+    )\n+    assert simplify(cdf(X)(x) - expected_cdf_gamma) == 0\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+    # GammaInverse distribution\n+    X = GammaInverse(\"x\", S(5)/7, 2)\n+    expected_cdf_gamma_inverse = Piecewise(\n+        (uppergamma(S(5)/7, 2/x)/gamma_fn(S(5)/7), x > 0),\n+        (0, True)\n+    )\n+    assert simplify(cdf(X)(x) - expected_cdf_gamma_inverse) == 0\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+    # Kumaraswamy distribution\n+    X = Kumaraswamy(\"x\", S(1)/123, 5)\n+    expected_cdf_kumaraswamy = Piecewise(\n+        (0, x < 0),\n+        (-(-x**(S(1)/123) + 1)**5 + 1, x <= 1),\n+        (1, True)\n+    )\n+    assert simplify(cdf(X)(x) - expected_cdf_kumaraswamy) == 0\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+    # Laplace distribution\n+    X = Laplace(\"x\", 2, 3)\n+    expected_cdf_laplace = Piecewise(\n+        (exp((-x + 2)/3)/2, x < 2),\n+        (-exp((2 - x)/3)/2 + 1, x >= 2),\n+    )\n+    assert simplify(cdf(X)(x) - expected_cdf_laplace) == 0\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+    # Logistic distribution\n+    X = Logistic(\"x\", 1, 0.1)\n+    expected_cdf_logistic = 1/(exp((1 - x)/0.1) + 1)\n+    assert simplify(cdf(X)(x) - expected_cdf_logistic) == 0\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+    # Nakagami distribution\n+    X = Nakagami(\"x\", S(7)/3, 1)\n+    expected_cdf_nakagami = Piecewise(\n+        (lowergamma(S(7)/3, S(7)/3*x**2)/(gamma_fn(S(7)/3)), x > 0),\n+        (0, True)\n+    )\n+    assert simplify(cdf(X)(x) - expected_cdf_nakagami) == 0\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+    # StudentT distribution\n+    X = StudentT(\"x\", 10)\n+    expected_cdf_student_t = S(1)/2 + x*gamma_fn(5.5)*hyper((0.5, 5.5), (1.5,), -x**2/10)/(sqrt(pi)*sqrt(10)*gamma_fn(5))\n+    assert simplify(cdf(X)(x) - expected_cdf_student_t) == 0\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+    # UniformSum distribution\n+    US = UniformSum(\"x\", 5)\n+    pdf01 = density(US)(x).subs(floor(x), 0).doit()   # pdf on (0, 1)\n+    cdf01 = cdf(US, evaluate=False)(x).subs(floor(x), 0).doit()   # cdf on (0, 1)\n+    assert tn(diff(cdf01, x), pdf01, x, a=0, b=0, c=1, d=0)\n     x = symbols(\"x\", real=True, finite=True)\n     mu = symbols(\"mu\", real=True, finite=True)\n     sigma, xm, alpha = symbols(\"sigma xm alpha\", positive=True, finite=True)\n",
  "sympy__sympy-13974": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bd3e825..7d320e0 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -37,6 +37,26 @@ def test_tensor_product_expand():\n     assert TP(A + B, B + C).expand(tensorproduct=True) == \\\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n+def test_tensor_product_powers():\n+    from sympy.physics.quantum import TensorProduct as tp\n+    from sympy.physics.quantum import tensor_product_simp as tps\n+    from sympy.physics.paulialgebra import Pauli\n+    a = Symbol('a', commutative=False)\n+    \n+    # Test the case with tp(1, 1)\n+    t1 = tp(1,1)*tp(1,1)\n+    assert tps(t1) == tp(1, 1)\n+    assert t1.expand(tensorproduct=True) == tp(1, 1)\n+    \n+    assert tps(tp(1, 1)*tp(1, a)).subs(a, 1) == tp(1, 1)\n+    \n+    # Test the case with tp(1, Pauli(3))\n+    t2 = tp(1, Pauli(3))*tp(1, Pauli(3))\n+    assert tps(t2) == tp(1, Pauli(3)*Pauli(3))\n+    assert t2.expand(tensorproduct=True) == tp(1, Pauli(3)*Pauli(3))\n+    \n+    assert tps(tp(1, Pauli(3))*tp(1, a)).subs(a, Pauli(3)) == tp(1, Pauli(3)*Pauli(3))\n+\n \n def test_tensor_product_commutator():\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_python.py b/sympy/printing/tests/test_python.py\nindex 73fc070..0d2de84 100644\n--- a/sympy/printing/tests/test_python.py\n+++ b/sympy/printing/tests/test_python.py\n@@ -79,7 +79,14 @@ def test_python_keyword_function_name_escaping():\n         5*Function(\"for\")(8)) == \"for_ = Function('for')\\ne = 5*for_(8)\"\n \n \n+from sympy import Symbol, Eq, Ne, S, Rational, Limit, sstr\n+\n def test_python_relational():\n+    # Test case for the issue: Check if sympy_integers=True is respected\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    assert sstr(Eq(x, S(1)/2), sympy_integers=True) == \"Eq(x, S(1)/2)\"\n+    assert sstr(Limit(x, x, S(1)/2), sympy_integers=True) == \"Limit(x, x, S(1)/2)\"\n     assert python(Eq(x, y)) == \"e = Eq(x, y)\"\n     assert python(Ge(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x >= y\"\n     assert python(Le(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x <= y\"\n",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..b6a0efa 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -2,13 +2,15 @@ from sympy import symbols, pi, sin, cos, ImmutableMatrix as Matrix\n from sympy.physics.vector import ReferenceFrame, Vector, dynamicsymbols, dot\n from sympy.abc import x, y, z\n from sympy.utilities.pytest import raises\n-\n-\n-Vector.simp = True\n+from sympy.physics.vector import ReferenceFrame, Vector\n A = ReferenceFrame('A')\n \n-\n-def test_Vector():\n+def test_vector_addition_with_zero():\n+    N = ReferenceFrame('N')\n+    assert sum([N.x, 0 * N.x]) == N.x\n+    assert sum([0 * N.x, N.x]) == N.x\n+    assert N.x + 0 * N.x == N.x\n+    assert 0 * N.x + N.x == N.x\n     assert A.x != A.y\n     assert A.y != A.z\n     assert A.z != A.x\n",
  "sympy__sympy-14976": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..891021a 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1,3 +1,4 @@\n+\n from distutils.version import LooseVersion as V\n from itertools import product\n import math\n@@ -144,6 +145,18 @@ def test_mpmath_lambda():\n            # if this succeeds, it can't be a mpmath function\n \n \n+@conserve_mpmath_dps\n+def test_mpmath_lambdify_rationals():\n+    from sympy.functions.combinatorial.numbers import rf\n+    import inspect\n+    from sympy import S\n+    x = symbols('x')\n+    eqn = Eq(rf(18, x), 77 + S(1) / 3)\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    src = inspect.getsource(f)\n+    assert 'mpmath.mpf(232)/mpmath.mpf(3)' in src, f\"Rationals are not wrapped with mpmath: {src}\"\n+\n+\n @conserve_mpmath_dps\n def test_number_precision():\n     mpmath.mp.dps = 50\n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..7a5c2ee 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -73,11 +74,17 @@ def test_ndim_array_initiation():\n \n     from sympy.abc import x\n     rank_zero_array = ImmutableDenseNDimArray(x)\n-    assert len(rank_zero_array) == 0\n+    assert len(rank_zero_array) == 1\n     assert rank_zero_array.shape == ()\n     assert rank_zero_array.rank() == 0\n     assert rank_zero_array[()] == x\n-    raises(ValueError, lambda: rank_zero_array[0])\n+    # Ensure len(list(rank_zero_array)) is 1\n+    assert len(list(rank_zero_array)) == 1\n+    # Test numpy-like behavior\n+    from sympy import Array\n+    rank_zero_array = Array(3)\n+    assert len(rank_zero_array) == 1\n+    assert len(list(rank_zero_array)) == 1\n \n \n def test_reshape():\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..4d4b3e1 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n@@ -23,6 +24,19 @@ def test_Rational():\n     assert mcode(x + Rational(3, 7)) == \"x + 3/7\"\n     assert mcode(Rational(3, 7)*x) == \"(3/7)*x\"\n \n+def test_Max_Min():\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"  # Testing different order\n+    assert mcode(Max(x, y, 2)) == \"Max[x, y, 2]\"\n+    assert mcode(Max(x, y, z)) == \"Max[x, y, z]\"\n+    assert mcode(Max(x, Max(y, z))) == \"Max[x, Max[y, z]]\"\n+    \n+    assert mcode(Min(x, 2)) == \"Min[x, 2]\"\n+    assert mcode(Min(2, x)) == \"Min[2, x]\"  # Testing different order\n+    assert mcode(Min(x, y, 2)) == \"Min[x, y, 2]\"\n+    assert mcode(Min(x, y, z)) == \"Min[x, y, z]\"\n+    assert mcode(Min(x, Min(y, z))) == \"Min[x, Min[y, z]]\"\n+\n \n def test_Function():\n     assert mcode(f(x, y, z)) == \"f[x, y, z]\"\n",
  "sympy__sympy-15349": "",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..56e75da 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1625,7 +1625,16 @@ def test_Mod():\n     assert (3*i*x) % (2*i*y) == i*Mod(3*x, 2*y)\n     assert Mod(4*i, 4) == 0\n \n-    # issue 8677\n+    # issue 15493\n+    i, j = symbols('i j', integer=True, positive=True)\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+    assert Mod(6*i, 4) == 2*Mod(i, 2)\n+    assert Mod(9*i, 6) == 3*Mod(i, 2)\n+    assert Mod(12*i, 6) == 0\n+    assert Mod(15*i, 7) == Mod(i, 7)\n+    assert Mod(3*i + 2, 2) == Mod(i, 2)\n+    assert Mod(3*i + j, 2) == Mod(i + j, 2)\n+    assert Mod(3*i*j, 2) == j*Mod(i, 2)\n     n = Symbol('n', integer=True, positive=True)\n     assert factorial(n) % n == 0\n     assert factorial(n + 2) % n == 0\n",
  "sympy__sympy-15809": "diff --git a/sympy/functions/elementary/tests/test_miscellaneous.py b/sympy/functions/elementary/tests/test_miscellaneous.py\nindex 821fd0c..950d5fe 100644\n--- a/sympy/functions/elementary/tests/test_miscellaneous.py\n+++ b/sympy/functions/elementary/tests/test_miscellaneous.py\n@@ -85,8 +85,10 @@ def test_Min():\n     assert Min(p, p_).func is Min\n \n     # lists\n-    raises(ValueError, lambda: Min())\n+    assert Min() == S.Infinity\n     assert Min(x, y) == Min(y, x)\n+    assert Min(-oo, x) == -oo\n+    assert Min() == S.Infinity\n     assert Min(x, y, z) == Min(z, y, x)\n     assert Min(x, Min(y, z)) == Min(z, y, x)\n     assert Min(x, Max(y, -oo)) == Min(x, y)\n@@ -156,8 +158,10 @@ def test_Max():\n \n     # lists\n \n-    raises(ValueError, lambda: Max())\n+    assert Max() == S.NegativeInfinity\n     assert Max(x, y) == Max(y, x)\n+    assert Max(oo, x) == oo\n+    assert Max() == S.NegativeInfinity\n     assert Max(x, y, z) == Max(z, y, x)\n     assert Max(x, Max(y, z)) == Max(z, y, x)\n     assert Max(x, Min(y, oo)) == Max(x, y)\n",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..e4e08ee 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1987,10 +1987,26 @@ def test_Add_is_zero():\n     assert (x + y).is_zero\n \n \n-def test_issue_14392():\n+def test_issue_15873():\n+    from sympy import I, simplify\n+    # Original test case from the patch\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None\n+\n+    # Additional test cases\n+    e2 = I + 1 - (1 + I)\n+    assert e2.is_zero is None  # This should be none since e2 simplifies to 0\n+    assert simplify(e2).is_zero is True  # After simplifying, it should be zero\n+\n+    e3 = (1 + I)**2 - 2 - 2*I\n+    assert e3.is_zero is None  # It's zero but complex, should be None\n+    assert simplify(e3).is_zero is True  # Simplified, should confirm zero\n+\n+    e4 = (1 + 3*I) + (-1 - 3*I)\n+    assert e4.is_zero is True  # Clearly zero without simplification\n     assert (sin(zoo)**2).as_real_imag() == (nan, nan)\n \n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..edf0e6f 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -512,7 +512,32 @@ def test_posify():\n         'Sum(_x**(-n), (n, 1, 3))'\n \n \n-def test_issue_4194():\n+def test_issue_16438():\n+    from sympy import Symbol, posify\n+\n+    # Test that posify preserves finite assumption\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0['finite'] is True\n+    assert eq.assumptions0['infinite'] is False\n+    assert eq.is_finite is True\n+\n+    # Test that non-finite assumptions are preserved\n+    m = Symbol('m', infinite=True)\n+    eq, rep = posify(m)\n+    assert eq.assumptions0['finite'] is False\n+    assert eq.assumptions0['infinite'] is True\n+    assert eq.is_finite is False\n+\n+    # Complex test: symbol with multiple assumptions\n+    n = Symbol('n', integer=True, prime=True, finite=True)\n+    eq, rep = posify(n)\n+    assert eq.assumptions0['integer'] is True\n+    assert eq.assumptions0['prime'] is True\n+    assert eq.assumptions0['finite'] is True\n+    assert eq.is_integer is True\n+    assert eq.is_prime is True\n+    assert eq.is_finite is True\n     # simplify should call cancel\n     from sympy.abc import x, y\n     f = Function('f')\n",
  "sympy__sympy-16766": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 51a287f..18278fe 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n \n@@ -12,6 +13,7 @@ from sympy.printing.pycode import (\n     MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter\n )\n from sympy.utilities.pytest import raises\n+from sympy.tensor import IndexedBase, Idx\n \n x, y, z = symbols('x y z')\n \n@@ -35,8 +37,18 @@ def test_PythonCodePrinter():\n                                                         ' (3) if (x > 0) else None)'\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n \n-\n-def test_MpmathPrinter():\n+def test_PythonCodePrinter_with_Indexed():\n+    prntr = PythonCodePrinter()\n+    p = IndexedBase('p')\n+    i, j = symbols('i j', integer=True)\n+    assert prntr.doprint(p[0]) == 'p[0]'\n+    assert prntr.doprint(p[i]) == 'p[i]'\n+    assert prntr.doprint(p[i, j]) == 'p[i, j]'\n+    # Test with Idx objects, often used with Indexed\n+    idx1 = Idx('i')\n+    idx2 = Idx('j')\n+    assert prntr.doprint(p[idx1]) == 'p[i]'\n+    assert prntr.doprint(p[idx1, idx2]) == 'p[i, j]'\n     p = MpmathPrinter()\n     assert p.doprint(sign(x)) == 'mpmath.sign(x)'\n     assert p.doprint(Rational(1, 2)) == 'mpmath.mpf(1)/mpmath.mpf(2)'\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py\nindex 23fddca..0f19695 100644\n--- a/sympy/utilities/tests/test_autowrap.py\n+++ b/sympy/utilities/tests/test_autowrap.py\n@@ -21,8 +21,17 @@ def get_string(dump_fn, routines, prefix=\"file\", **kwargs):\n        this wrapper returns the contents of that stream as a string. This\n        auxiliary function is used by many tests below.\n \n-       The header and the empty lines are not generator to facilitate the\n-       testing of the output.\n+def test_cython_autowrap_unused_array_argument():\n+    from sympy.utilities.autowrap import autowrap\n+    from sympy import MatrixSymbol\n+    import numpy as np\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0\n+    f = autowrap(expr, args=(x,), backend='cython')\n+\n+    # Should return 1.0 without any TypeError\n+    assert f(np.array([[1.0], [2.0]])) == 1.0\n     \"\"\"\n     output = StringIO()\n     dump_fn(routines, output, prefix, **kwargs)\n",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..6b4339a 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -248,8 +248,26 @@ def test_encode_morse():\n     assert encode_morse(' ', sep='``') == '````'\n     assert encode_morse('!@#$%^&*()_+') == '-.-.--|.--.-.|...-..-|-.--.|-.--.-|..--.-|.-.-.'\n \n+def test_encode_morse_numbers():\n+    # Test single digit\n+    assert encode_morse('1') == '.----'\n+    # Test mixed sequence\n+    assert encode_morse('1 2 3') == '.----||..---||...--'\n+    # Test sequence with separator\n+    assert encode_morse('1 2 3', sep='/') == '.----//..---//...--'\n+    # Original test for the range 12345\n+    assert encode_morse('12345') == '.----|..---|...--|....-|.....'\n+    # Extended test: Check 67890 to ensure consistency\n+    assert encode_morse('67890') == '-....|--...|---..|----.|-----'\n \n def test_decode_morse():\n+    # Test for accurately decoding individual digits\n+    assert decode_morse('.----') == '1'\n+    # Test sequence of Morse numbers\n+    assert decode_morse('.----|..---') == '12'\n+    # Decoding with proper separation\n+    assert decode_morse('.----|..---|...--') == '123'\n+    # Validate error earlier located in '67890'\n     assert decode_morse('-.-|.|-.--') == 'KEY'\n     assert decode_morse('.-.|..-|-.||') == 'RUN'\n     raises(KeyError, lambda: decode_morse('.....----'))\n",
  "sympy__sympy-17139": "",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..942278e 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,6 +1,8 @@\n+\n from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n from sympy.simplify.sqrtdenest import _subsets as subsets\n-from sympy.utilities.pytest import slow\n+from sympy.simplify.sqrtdenest import _sqrt_match\n+from sympy.core.expr import unchanged\n \n r2, r3, r5, r6, r7, r10, r15, r29 = [sqrt(x) for x in [2, 3, 5, 6, 7, 10,\n                                           15, 29]]\n@@ -180,6 +182,14 @@ def test_issue_5653():\n     assert sqrtdenest(\n         sqrt(2 + sqrt(2 + sqrt(2)))) == sqrt(2 + sqrt(2 + sqrt(2)))\n \n-\n-def test_sqrt_ratcomb():\n+def test_issue_12420():\n+    I = S.ImaginaryUnit\n+    # These tests are based on the issue description\n+    assert _sqrt_match(4 + I) == []\n+    # The fix should return the expression unchanged if it cannot be denested\n+    expr = (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2\n+    assert sqrtdenest(expr) == expr\n+    # Another expression to check if it stays unchanged\n+    e = 3 - sqrt(2)*sqrt(4 + I) + 3*I\n+    assert sqrtdenest(e) == e\n     assert sqrtdenest(sqrt(1 + r3) + sqrt(3 + 3*r3) - sqrt(10 + 6*r3)) == 0\n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..ed3bc92 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,12 +1,24 @@\n-from sympy import I, Rational, Symbol, pi, sqrt, S\n+\n+from sympy import I, Rational, Symbol, pi, sqrt, S, sympify\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.pytest import raises, warns\n \n-\n-def test_point():\n+def test_issue_geometry_point_multiplication():\n+    # Importing necessary classes\n+    from sympy.geometry import Point\n+    \n+    # Create points\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+    \n+    # This operation should work without exceptions\n+    assert point1 + point2 * sympify(2.0) == Point(2, 2)\n+    \n+    # This operation should also work without exceptions and be equal to the above\n+    assert point1 + sympify(2.0) * point2 == Point(2, 2)\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     x1 = Symbol('x1', real=True)\n@@ -21,6 +33,10 @@ def test_point():\n     p5 = Point(0, 1)\n     line = Line(Point(1, 0), slope=1)\n \n+    # Original patch tests for verifying multiplication\n+    assert 5 * p4 == Point(5, 5)\n+    assert 5 * Point3D(1, 1, 1) == Point3D(5, 5, 5)\n+\n     assert p1 in p1\n     assert p1 not in p2\n     assert p2.y == y2\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..af343cf 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -547,7 +547,21 @@ def test_diophantine():\n     assert diophantine(x**2 + y**2 +3*x- 5, permute=True) == \\\n         set([(-1, 1), (-4, -1), (1, -1), (1, 1), (-4, 1), (-1, -1), (4, 1), (4, -1)])\n \n-    # issue 18122\n+    # issue 18186\n+    from sympy import symbols\n+\n+    x, y = symbols('x y', integer=True)\n+    issue_expr = y**4 + x**4 - 2**4 - 3**4\n+\n+    # Test case for syms=(x, y) with permute=True\n+    assert diophantine(issue_expr, syms=(x, y), permute=True) == set([\n+        (-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)\n+    ])\n+\n+    # Test case for syms=(y, x) with permute=True\n+    assert diophantine(issue_expr, syms=(y, x), permute=True) == set([\n+        (-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)\n+    ])\n     assert check_solutions(x**2-y)\n     assert check_solutions(y**2-x)\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..68c7e4e 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -664,6 +664,30 @@ def test_latex_derivatives():\n     x2 = Symbol('x2')\n     assert latex(diff(f(x1, x2), x1)) == r'\\frac{\\partial}{\\partial x_{1}} f{\\left(x_{1},x_{2} \\right)}'\n \n+def test_latex_Subs_parenthesizing():\n+    from sympy import Subs\n+    from sympy.abc import x, y\n+    \n+    # Original issue test case\n+    assert latex(3*Subs(-x+y, (x,), (1,))) == r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+    \n+    # Additional test cases to ensure thorough testing\n+    \n+    # Test with a more complex expression\n+    assert latex(2*Subs(x**2 + y**2, (x,), (1,))) == r'2 \\left. \\left(x^{2} + y^{2}\\right) \\right|_{\\substack{ x=1 }}'\n+    \n+    # Test with an even more nested expression\n+    assert latex(Subs((x + y)*(x - y), (x,), (1,))) == r'\\left. \\left(x + y\\right) \\left(x - y\\right) \\right|_{\\substack{ x=1 }}'\n+    \n+    # Test without any multiplicative factors\n+    assert latex(Subs(-x+y, (x,), (1,))) == r'\\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+    \n+    # Test replacing multiple variables\n+    assert latex(Subs(x*y, (x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n+    \n+    # Test with no replacement\n+    assert latex(Subs(x + y, (), ())) == r'\\left. x + y \\right|_{\\substack{ }}'\n+\n     n1 = Symbol('n1')\n     assert latex(diff(f(x), (x, n1))) ==  r'\\frac{d^{n_{1}}}{d x^{n_{1}}} f{\\left(x \\right)}'\n \n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..ff4be76 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -513,8 +513,26 @@ def test_kernS():\n     one = kernS('x - (x - 1)')\n     assert one != 1 and one.expand() == 1\n \n-\n-def test_issue_6540_6552():\n+def test_issue_fix_for_kernS_reference_error():\n+    # Import necessary components\n+    from sympy import Symbol, Rational, Interval\n+    from sympy.abc import x, y    \n+    # Original test that triggered the issue\n+    assert kernS(\"(2*x)/(x-1)\") == 2*x/(x-1)\n+    # Additional test cases to further challenge the function\n+    assert kernS(\"3*x + 4/(y - 2)\") == 3*x + 4/(y - 2)\n+    assert kernS(\"sin(x) + cos(y)\") == sin(x) + cos(y)\n+    assert kernS(\"Matrix([[x, y], [z, w]])\") == Matrix([[x, y], [z, w]])\n+    # Check with symbols that are likely to cause issues, such as non-standard characters\n+    assert kernS(\"_kern\") != Symbol('_kern')  # Check behavior with underscore prefixes\n+    assert kernS('Interval(-1, -2 - 4*(-3))') == Interval(-1, Add(-2, Mul(12, 1, evaluate=False), evaluate=False))\n+    assert kernS('(1-x)/(1-(1-y)*x)') == kernS('(1-x)/(1-(1-y)*x)')\n+    # More complex expressions\n+    e = 2*(x + y)*y\n+    assert kernS(['2*(x + y)*y', ('2*(x + y)*y',)]) == [e, (e,)]\n+    assert kernS('-(2*sin(x)**2 + 2*sin(x)*cos(x))*y/2') == -y*(2*sin(x)**2 + 2*sin(x)*cos(x))/2\n+    one = kernS('x - (x - 1)')\n+    assert one != 1 and one.expand() == 1\n     assert S('[[1/3,2], (2/5,)]') == [[Rational(1, 3), 2], (Rational(2, 5),)]\n     assert S('[[2/6,2], (2/4,)]') == [[Rational(1, 3), 2], (S.Half,)]\n     assert S('[[[2*(1)]]]') == [[[2]]]\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_operator.py b/sympy/physics/quantum/tests/test_operator.py\nindex 799aaae..9776e4f 100644\n--- a/sympy/physics/quantum/tests/test_operator.py\n+++ b/sympy/physics/quantum/tests/test_operator.py\n@@ -1,5 +1,7 @@\n+\n from sympy import (Derivative, diff, Function, Integer, Mul, pi, sin, Symbol,\n                    symbols)\n+from sympy.physics.quantum import IdentityOperator\n from sympy.physics.quantum.qexpr import QExpr\n from sympy.physics.quantum.dagger import Dagger\n from sympy.physics.quantum.hilbert import HilbertSpace\n@@ -106,7 +108,25 @@ def test_identity():\n         assert represent(IdentityOperator(n)) == eye(n)\n \n \n-def test_outer_product():\n+def test_dagger_identity_mul():\n+    O = Operator('O')\n+    I = IdentityOperator()\n+\n+    # Check multiplication of Dagger(O) with IdentityOperator\n+    D = Dagger(O)\n+    assert D * I == D, \"Dagger should be simplified when multiplied by IdentityOperator\"\n+    assert I * D == D, \"IdentityOperator should be simplified when multiplied by Dagger\"\n+\n+    # Additional tests with nested dags\n+    assert Dagger(Dagger(O)) * I == O, \"Double dagger with Identity should give the original operator\"\n+\n+    # Validate behavior with multiple identity operators\n+    assert D * I * I == D, \"Multiple identity operators should simplify\"\n+    assert I * I * D == D, \"Multiple identity operators should simplify\"\n+\n+    # Confirm using qapply on the combination\n+    assert qapply(D * I) == D, \"qapply should simplify Dagger * IdentityOperator\"\n+    assert qapply(I * D) == D, \"qapply should simplify IdentityOperator * Dagger\"\n     k = Ket('k')\n     b = Bra('b')\n     op = OuterProduct(k, b)\n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..4b1310d 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -905,8 +905,34 @@ def test_sylow_subgroup():\n     assert G.order() % S.order() == 0\n     assert G.order()/S.order() % 2 > 0\n \n+def test_issue_sylow_subgroup_IndexError():\n+    from sympy.combinatorics import DihedralGroup\n \n-@slow\n+    # Test for DihedralGroup(18), expecting a Sylow subgroup of order 4\n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n+    # Test for DihedralGroup(50), expecting a Sylow subgroup of order 4\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n+    # Additional tests\n+    # DihedralGroup(36), expecting a Sylow subgroup of order 4\n+    G = DihedralGroup(36)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n+    # DihedralGroup with a larger parameter to verify it doesn't break\n+    G = DihedralGroup(100)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n+    # Adding a test for a non-standard group size\n+    G = DihedralGroup(40)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 8\n def test_presentation():\n     def _test(P):\n         G = P.presentation()\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..c4bd158 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -512,9 +512,26 @@ def test_partitions():\n             assert  q == RGS_unrank(i, n)\n             i += 1\n         assert i == RGS_enum(n)\n-\n-\n-def test_binary_partitions():\n+def test_partitions_no_reuse():\n+    # Test to ensure that partition dictionaries are not reused\n+    partitions_list = list(partitions(6, k=2))\n+    assert partitions_list[0] is not partitions_list[1]\n+    assert partitions_list[1] is not partitions_list[2]\n+    assert partitions_list[2] is not partitions_list[3]\n+\n+    for i, p in enumerate(partitions_list):\n+        for j, q in enumerate(partitions_list):\n+            if i != j:\n+                assert p is not q\n+                assert p != q\n+\n+    # Testing with size=True, ensuring dictionaries are unique\n+    partitions_list_with_size = list(partitions(6, k=2, size=True))\n+    for i, (M1, p) in enumerate(partitions_list_with_size):\n+        for j, (M2, q) in enumerate(partitions_list_with_size):\n+            if i != j:\n+                assert p is not q\n+                assert p != q\n     assert [i[:] for i in binary_partitions(10)] == [[8, 2], [8, 1, 1],\n         [4, 4, 2], [4, 4, 1, 1], [4, 2, 2, 2], [4, 2, 2, 1, 1],\n         [4, 2, 1, 1, 1, 1], [4, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2],\n",
  "sympy__sympy-20801": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e1c7e2..3410772 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -583,8 +583,15 @@ def test_Float():\n         assert Float(i) is a\n \n \n-\n-@conserve_mpmath_dps\n+def test_zero_not_false():\n+    # https://github.com/sympy/sympy/issues/20796\n+    from sympy import S\n+\n+    # Ensuring that Float zero is not considered False\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n def test_float_mpf():\n     import mpmath\n     mpmath.mp.dps = 100\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..a2d6260 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,32 @@\n+\n+def test_issue_poly_error_with_subs():\n+    # The issue arises with sinh, cosh, tanh, and some other functions\n+    # Test with sinh\n+    x_r, y_r, z_r = symbols('x_r y_r z_r', real=True)\n+    expr_sinh = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    assert expr_sinh.subs({1: 1.0}) is not None\n+\n+    # Test with cosh\n+    expr_cosh = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    assert expr_cosh.subs({1: 1.0}) is not None\n+\n+    # Test with tanh\n+    expr_tanh = exp(tanh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    assert expr_tanh.subs({1: 1.0}) is not None\n+\n+    # Check that removing division by 'z' resolves the issue\n+    expr_no_div = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n+    assert expr_no_div.subs({1: 1.0}) is not None\n+\n+    # Check that removing 'exp' resolves the issue for sinh\n+    expr_no_exp = sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r)\n+    assert expr_no_exp.subs({1: 1.0}) is not None\n+\n+    # Edge case: Make sure the error doesn't occur when symbols are not real\n+    x_nr, y_nr, z_nr = symbols('x_nr y_nr z_nr')\n+    expr_nr = exp(sinh(Piecewise((x_nr, y_nr > x_nr), (y_nr, True)) / z_nr))\n+    assert expr_nr.subs({1: 1.0}) is not None\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -7,6 +36,7 @@ from sympy import (\n from sympy.core.basic import _aresame\n from sympy.testing.pytest import XFAIL\n from sympy.abc import a, x, y, z, t\n+from sympy import sinh, cosh, tanh\n \n def test_subs():\n     n3 = Rational(3)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..579515e 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -36,6 +36,45 @@ def test_monomials():\n     assert set(itermonomials([], 0, 3)) == set()\n \n     raises(ValueError, lambda: set(itermonomials([], -1)))\n+\n+    # Test cases for min_degrees argument issue\n+    # Test case using the issue's example\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    states = [x1, x2, x3]\n+    max_degrees = 3\n+    min_degrees = 3\n+    assert set(itermonomials(states, max_degrees, min_degrees)) == {\n+        x1**3, x2**3, x3**3, x1*x2**2, x1**2*x2, x1*x3**2, x3*x1**2, x2*x3**2, x3*x2**2, x2*x1*x3\n+    }\n+\n+    # Additional test cases for various scenarios with min_degrees\n+    # When max_degrees > min_degrees, check all monomials for degree range\n+    max_degrees = 4\n+    min_degrees = 2\n+    assert set(itermonomials(states, max_degrees, min_degrees)) == {\n+        x1**2, x2**2, x3**2, x1**3, x2**3, x3**3,\n+        x1**2*x2, x1*x2**2, x1**2*x3, x1*x3**2,\n+        x2**2*x3, x2*x3**2, x1*x2*x3,\n+        x1**4, x2**4, x3**4, x1**3*x2, x1**3*x3, x2**3*x1, x2**3*x3, x3**3*x1, x3**3*x2,\n+        x1**2*x2**2, x2**2*x3**2, x1**2*x3**2, x1**2*x2*x3, x2**2*x1*x3, x3**2*x1*x2,\n+        x1**3*x2**2, x1**2*x2**3, x2**3*x3**2, x2**2*x3**3, x1**3*x3**2, x1**2*x3**3,\n+        x1*x2**2*x3, x1*x2*x3**2, x2*x1*x3**2\n+    }\n+\n+    # Edge case testing when min_degrees is zero\n+    max_degrees = 3\n+    min_degrees = 0\n+    assert set(itermonomials([x1, x2], max_degrees, min_degrees)) == {\n+        S.One, x1, x2, x1**2, x2**2, x1*x2,\n+        x1**3, x2**3, x1**2*x2, x1*x2**2\n+    }\n+\n+    # Edge case testing when min_degrees is equal to max_degrees\n+    max_degrees = 2\n+    min_degrees = 2\n+    assert set(itermonomials([x1, x2], max_degrees, min_degrees)) == {\n+        x1**2, x2**2, x1*x2\n+    }\n     raises(ValueError, lambda: set(itermonomials([x], -1)))\n     raises(ValueError, lambda: set(itermonomials([x, y], -1)))\n \n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..63101b0 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -267,6 +267,8 @@ def test_String():\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n+    # Verify argument invariance for String class\n+    assert st.func(*st.args) == st\n \n \n     class Signifier(String):\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..6742667 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,6 @@\n+\n from sympy.core.basic import Basic\n+from sympy.core.parameters import evaluate\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..1d2ee8d 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n@@ -27,7 +28,15 @@ p = IndexedBase(\"p\")\n def test_PythonCodePrinter():\n     prntr = PythonCodePrinter()\n \n-    assert not prntr.module_imports\n+    # Testing Min and Max printing\n+    assert prntr.doprint(Min(x, y)) == \"min(x, y)\"\n+    assert prntr.doprint(Max(x, y)) == \"max(x, y)\"\n+    assert prntr.doprint(Min(x, y, z)) == \"min(x, y, z)\"\n+    assert prntr.doprint(Max(x, y, z)) == \"max(x, y, z)\"\n+    assert prntr.doprint(Min(1, 2, 3)) == \"min(1, 2, 3)\"\n+    assert prntr.doprint(Max(1, 2, 3)) == \"max(1, 2, 3)\"\n+    assert prntr.doprint(Min(x, 0)) == \"min(x, 0)\"\n+    assert prntr.doprint(Max(y, -y)) == \"max(y, -y)\"\n \n     assert prntr.doprint(x**y) == 'x**y'\n     assert prntr.doprint(Mod(x, 2)) == 'x % 2'\n@@ -35,7 +44,15 @@ def test_PythonCodePrinter():\n     assert prntr.doprint(Mod(-x, y)) == '(-x) % y'\n     assert prntr.doprint(And(x, y)) == 'x and y'\n     assert prntr.doprint(Or(x, y)) == 'x or y'\n-    assert not prntr.module_imports\n+    # Testing Min and Max printing\n+    assert prntr.doprint(Min(x, y)) == \"min(x, y)\"\n+    assert prntr.doprint(Max(x, y)) == \"max(x, y)\"\n+    assert prntr.doprint(Min(x, y, z)) == \"min(x, y, z)\"\n+    assert prntr.doprint(Max(x, y, z)) == \"max(x, y, z)\"\n+    assert prntr.doprint(Min(1, 2, 3)) == \"min(1, 2, 3)\"\n+    assert prntr.doprint(Max(1, 2, 3)) == \"max(1, 2, 3)\"\n+    assert prntr.doprint(Min(x, 0)) == \"min(x, 0)\"\n+    assert prntr.doprint(Max(y, -y)) == \"max(y, -y)\"\n \n     assert prntr.doprint(pi) == 'math.pi'\n     assert prntr.module_imports == {'math': {'pi'}}\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..ebe8949 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,10 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+from sympy import lambdify\n+from sympy.core.symbol import Dummy\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n@@ -1198,7 +1202,19 @@ def test_issue_14941():\n     assert f3(2, 3) == [3, 2]\n \n \n-def test_lambdify_Derivative_arg_issue_16468():\n+def test_single_element_tuple_inspect():\n+    # Test for lambdify with a single element tuple in SymPy 1.10 +\n+    f2b = lambdify([], (1,))  # gh-23224\n+    source = inspect.getsource(f2b)\n+    assert 'return (1,)' in source\n+    assert f2b() == (1,)\n+\n+def test_multi_element_tuple_inspect():\n+    # Test for lambdify with multiple elements in the tuple\n+    f2c = lambdify([], (1, 2))\n+    source = inspect.getsource(f2c)\n+    assert 'return (1, 2)' in source\n+    assert f2c() == (1, 2)\n     f = Function('f')(x)\n     fx = f.diff()\n     assert lambdify((f, fx), f + fx)(10, 5) == 15\n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..60c68d0 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,7 +1,24 @@\n+\n+def test_symbols_with_function_cls():\n+    q, u = symbols(('q:2', 'u:2'), cls=Function)\n+    assert type(q[0]) == UndefinedFunction\n+    assert type(u[1]) == UndefinedFunction\n+\n+    # Check additional edge cases\n+    x, y = symbols(('x', 'y'), cls=Function)\n+    assert type(x) == UndefinedFunction\n+    assert type(y) == UndefinedFunction\n+\n+    # Check with no extra parentheses\n+    a, b = symbols('a:2', cls=Function)\n+    assert type(a) == UndefinedFunction\n+    assert type(b) == UndefinedFunction\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n from sympy.core.sympify import sympify  # can't import as S yet\n+from sympy.core.function import Function, UndefinedFunction\n from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n \n from sympy.testing.pytest import raises\n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..34ab120 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -191,8 +191,38 @@ def test_kahane_algorithm():\n \n     execute_gamma_simplify_tests_for_function(tfunc, D=4)\n \n+from sympy.physics.hep.gamma_matrices import kahane_simplify\n+from sympy.physics.hep.gamma_matrices import GammaMatrix as G\n+from sympy.tensor.tensor import tensor_indices, LorentzIndex\n \n-def test_kahane_simplify1():\n+def test_kahane_leading_gamma_matrix_bug():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n+\n+    # Original bug demonstration test cases:\n+    t = G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    t = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    # Additional test cases:\n+    t = G(rho)*G(sigma)*G(-mu)*G(mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    t = G(mu)*G(-mu)*G(-rho)*G(-sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(-rho)*G(-sigma))\n+\n+    t = G(-rho)*G(-sigma)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(-rho)*G(-sigma))\n+    \n+    t = G(rho)*G(-rho)*G(sigma)*G(-sigma)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(16*eye(4))  # Checks proper handling of multiple contractions\n     i0,i1,i2,i3,i4,i5,i6,i7,i8,i9,i10,i11,i12,i13,i14,i15 = tensor_indices('i0:16', LorentzIndex)\n     mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n     D = 4\n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..4323f30 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -46,6 +46,11 @@ def test_as_set():\n     raises(NotImplementedError, lambda:\n            Contains(x, FiniteSet(y)).as_set())\n \n-def test_type_error():\n+    # Test for Contains.as_set()\n+    assert Contains(x, S.Integers).as_set() == S.Integers\n+    assert Contains(x, S.Reals).as_set() == S.Reals\n+ \n+    # Handling Known Sets\n+    assert Contains(x, FiniteSet(y)).as_set() == FiniteSet(y)\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..f70d10c 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,6 +528,10 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n+from sympy.core.numbers import E\n+from sympy.physics.units import impedance, capacitance, time, ohm, farad, second, Quantity\n+from sympy.physics.units.systems.si import SI\n+\n def test_issue_20288():\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n@@ -541,7 +545,23 @@ def test_issue_20288():\n     assert SI._collect_factor_and_dimension(expr) == (1 + E, Dimension(1))\n \n \n-def test_prefixed_property():\n+def test_issue_24062():\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n     assert not day.is_prefixed\n",
  "sympy__sympy-24213": "",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..ed8e39c 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,10 +1,11 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n from sympy.combinatorics.free_groups import free_group\n from sympy.combinatorics.fp_groups import FpGroup\n from sympy.combinatorics.named_groups import AlternatingGroup, DihedralGroup, CyclicGroup\n-from sympy.testing.pytest import raises\n+from sympy.testing.pytest import raises, warns\n \n def test_homomorphism():\n     # FpGroup -> PermutationGroup\n@@ -56,8 +57,16 @@ def test_homomorphism():\n     assert T.domain == F\n     assert T.codomain == D\n     assert T(a*b) == p\n+def test_permutation_group_homomorphism():\n+    # Test case for verifying that homomorphism works for PermutationGroups\n+    D3 = DihedralGroup(3)\n+    T = homomorphism(D3, D3, D3.generators, D3.generators)\n+    assert T.is_isomorphism()\n \n-def test_isomorphisms():\n+    # Additional sanity check for identity\n+    identity_perm = D3.identity\n+    T_identity = homomorphism(D3, D3, [identity_perm], [identity_perm])\n+    assert T_identity.is_isomorphism()\n \n     F, a, b = free_group(\"a, b\")\n     E, c, d = free_group(\"c, d\")\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..9545ce3 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -265,6 +265,10 @@ def test_PolyElement_as_expr():\n     assert f != g\n     assert f.as_expr(X, Y, Z) == g\n \n+    U, V, W = symbols(\"u,v,w\")\n+    g = 3*U**2*V - U*V*W + 7*W**3 + 1\n+    assert f.as_expr(U, V, W) == g\n+\n     raises(ValueError, lambda: f.as_expr(X))\n \n     R, = ring(\"\", ZZ)\n",
  "sympy__sympy-24661": "diff --git a/sympy/parsing/tests/test_sympy_parser.py b/sympy/parsing/tests/test_sympy_parser.py\nindex 3723931..8d8c5b1 100644\n--- a/sympy/parsing/tests/test_sympy_parser.py\n+++ b/sympy/parsing/tests/test_sympy_parser.py\n@@ -274,6 +274,9 @@ def test_convert_equals_signs():\n         transformations=transformations) == Eq(Eq(2*y, x), False)\n \n \n+from sympy.core import Eq, Lt, Le, Gt, Ge, Ne\n+from sympy.parsing.sympy_parser import parse_expr\n+\n def test_parse_function_issue_3539():\n     x = Symbol('x')\n     f = Function('f')\n",
  "astropy__astropy-14369": "diff --git a/astropy/units/tests/test_format.py b/astropy/units/tests/test_format.py\nindex 062b5f4..cf13ce3 100644\n--- a/astropy/units/tests/test_format.py\n+++ b/astropy/units/tests/test_format.py\n@@ -35,6 +35,8 @@ from astropy.units.utils import is_effectively_unity\n         ([\"mag(ct/s)\"], u.MagUnit(u.ct / u.s)),\n         ([\"dex\"], u.dex),\n         ([\"dex(cm s**-2)\", \"dex(cm/s2)\"], u.DexUnit(u.cm / u.s**2)),\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.J / (u.m * u.s * u.kpc**2))),\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.J / (u.s * u.kpc**2))),\n     ],\n )\n def test_unit_grammar(strings, unit):\n@@ -90,6 +92,8 @@ def test_unit_grammar_fail(string):\n         ([\"[cm/s2]\"], dex(u.cm / u.s**2)),\n         ([\"[K]\"], dex(u.K)),\n         ([\"[-]\"], dex(u.dimensionless_unscaled)),\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.J / (u.m * u.s * u.kpc**2))),\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.J / (u.s * u.kpc**2))),\n     ],\n )\n def test_cds_grammar(strings, unit):\n",
  "astropy__astropy-14598": "",
  "django__django-11299": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex b3dc643..1ed3149 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1899,7 +1899,24 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Author.objects.get(), author)\n \n     @skipUnlessDBFeature('supports_table_check_constraints')\n-    def test_remove_constraint(self):\n+    @skipUnlessDBFeature('supports_table_check_constraints')\n+    def test_add_constraint_with_or_and(self):\n+        app_label = 'test_or_and_constraint'\n+        constraint_name = 'or_and_constraint_check'\n+        from_state = self.set_up_test_model(app_label)\n+        check = Q(field_1__isnull=False, flag=True) | Q(flag=False)\n+        constraint = models.CheckConstraint(check=check, name=constraint_name)\n+        operation = migrations.AddConstraint('TestConstraint', constraint)\n+        to_state = from_state.clone()\n+        operation.state_forwards(app_label, to_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, from_state, to_state)\n+        TestConstraint = to_state.apps.get_model(app_label, 'TestConstraint')\n+        # Ensure the constraint is enforced\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            TestConstraint.objects.create(field_1=None, flag=True)\n+        TestConstraint.objects.create(field_1=1, flag=True)\n+        TestConstraint.objects.create(field_1=None, flag=False)\n         project_state = self.set_up_test_model(\"test_removeconstraint\", constraints=[\n             models.CheckConstraint(check=models.Q(pink__gt=2), name=\"test_remove_constraint_pony_pink_gt_2\"),\n             models.CheckConstraint(check=models.Q(pink__lt=100), name=\"test_remove_constraint_pony_pink_lt_100\"),\n",
  "django__django-11477": "",
  "django__django-12273": "diff --git a/tests/model_inheritance_regress/tests.py b/tests/model_inheritance_regress/tests.py\nindex d79faca..afb9cbf 100644\n--- a/tests/model_inheritance_regress/tests.py\n+++ b/tests/model_inheritance_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Regression tests for Model inheritance behavior.\n \"\"\"\n@@ -14,11 +15,30 @@ from .models import (\n     MessyBachelorParty, ParkingLot, ParkingLot3, ParkingLot4A, ParkingLot4B,\n     Person, Place, Profile, QualityControl, Restaurant, SelfRefChild,\n     SelfRefParent, Senator, Supplier, TrainStation, User, Wholesaler,\n+    Item, Derived\n )\n \n \n class ModelInheritanceTest(TestCase):\n-    def test_model_inheritance(self):\n+    def test_reset_primary_key_creates_new_instance(self):\n+        # Initial object creation\n+        obj1 = Derived.objects.create(f=True)\n+        # Validate initial object\n+        self.assertEqual(Derived.objects.count(), 1)\n+        self.assertTrue(Derived.objects.get(pk=obj1.pk).f)\n+\n+        # Reset primary key\n+        obj1.reset()\n+        obj1.save()\n+\n+        # Check that a new instance is created\n+        self.assertEqual(Derived.objects.count(), 2)\n+        self.assertFalse(Derived.objects.get(pk=obj1.pk).f)\n+\n+        # Fetch the new instance\n+        new_obj = Derived.objects.exclude(pk=obj1.pk).first()\n+        self.assertIsNotNone(new_obj)\n+        self.assertFalse(new_obj.f)\n         # Regression for #7350, #7202\n         # When you create a Parent object with a specific reference to an\n         # existent child instance, saving the Parent doesn't duplicate the\n",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..27e9b4d 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -606,7 +606,12 @@ class DeletionTests(TestCase):\n \n class FastDeleteTests(TestCase):\n \n-    def test_fast_delete_fk(self):\n+    def test_fast_delete_all(self):\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        # No subqueries are used when performing a full delete.\n+        self.assertNotIn('SELECT', sql)\n         u = User.objects.create(\n             avatar=Avatar.objects.create()\n         )\n@@ -702,4 +707,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..cf584ea 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from decimal import Decimal\n \n@@ -25,7 +26,23 @@ class DecimalFieldTests(TestCase):\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n \n-    def test_default(self):\n+    def test_invalid_value(self):\n+        field = models.DecimalField(max_digits=4, decimal_places=2)\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        tests = [\n+            (),\n+            [],\n+            {},\n+            set(),\n+            object(),\n+            complex(),\n+            'non-numeric string',\n+            b'non-numeric byte-string',\n+        ]\n+        for value in tests:\n+            with self.subTest(value=value):\n+                with self.assertRaisesMessage(ValidationError, msg % (value,)):\n+                    field.clean(value, None)\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n \n",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..f72d975 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n \n@@ -5,7 +6,8 @@ import django\n from django.db import models\n from django.test import TestCase\n \n-from .models import Container, Event, Group, Happening, M2MModel, MyEvent\n+from .models import Container, Event, Group, Happening, M2MModel, MyEvent, Toy\n+from django.db.models import Sum\n \n \n class PickleabilityTestCase(TestCase):\n@@ -260,7 +262,33 @@ class PickleabilityTestCase(TestCase):\n         self.assert_pickles(event.edition_set.order_by('event'))\n \n \n-class InLookupTests(TestCase):\n+class QuerysetPickleValuesTestCase(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        Toy.objects.create(name='foo', price=10, material='wood')\n+        Toy.objects.create(name='bar', price=20, material='plastic')\n+        Toy.objects.create(name='baz', price=100, material='wood')\n+\n+    def test_pickle_queryset_with_values(self):\n+        prices = Toy.objects.values('material').annotate(total_price=Sum('price'))\n+        reloaded = Toy.objects.all()\n+        reloaded.query = pickle.loads(pickle.dumps(prices.query))\n+        # Verify that the reloaded queryset returns a dictionary as expected\n+        self.assertEqual(list(reloaded), list(prices))\n+        for item in reloaded:\n+            self.assertIsInstance(item, dict)\n+            self.assertIn('material', item)\n+            self.assertIn('total_price', item)\n+\n+    def test_pickle_queryset_with_values_list(self):\n+        prices_list = Toy.objects.values_list('material', Sum('price'))\n+        reloaded = Toy.objects.all()\n+        reloaded.query = pickle.loads(pickle.dumps(prices_list.query))\n+        # Verify that the reloaded queryset returns tuples as expected\n+        self.assertEqual(list(reloaded), list(prices_list))\n+        for item in reloaded:\n+            self.assertIsInstance(item, tuple)\n+            self.assertEqual(len(item), 2)\n \n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-13449": "diff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\nindex 3f59cdf..d9c7568 100644\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -11,4 +11,5 @@ class Employee(models.Model):\n     department = models.CharField(max_length=40, blank=False, null=False)\n     hire_date = models.DateField(blank=False, null=False)\n     age = models.IntegerField(blank=False, null=False)\n-    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\n",
  "django__django-13512": "diff --git a/tests/forms_tests/field_tests/test_jsonfield.py b/tests/forms_tests/field_tests/test_jsonfield.py\nindex e31bff4..3fd15ed 100644\n--- a/tests/forms_tests/field_tests/test_jsonfield.py\n+++ b/tests/forms_tests/field_tests/test_jsonfield.py\n@@ -30,7 +30,19 @@ class JSONFieldTest(SimpleTestCase):\n         self.assertEqual(field.prepare_value(None), 'null')\n         self.assertEqual(field.prepare_value('foo'), '\"foo\"')\n \n-    def test_widget(self):\n+    def test_prepare_value_with_unicode(self):\n+        field = JSONField()\n+        # Test Chinese characters\n+        self.assertEqual(field.prepare_value({'a': '\u4f60\u597d \u4e16\u754c'}), '{\"a\": \"\u4f60\u597d \u4e16\u754c\"}')\n+        self.assertEqual(field.prepare_value('\u4f60\u597d\uff0c\u4e16\u754c'), '\"\u4f60\u597d\uff0c\u4e16\u754c\"')\n+        # Test emoji characters\n+        self.assertEqual(field.prepare_value({'a': '\ud83d\ude00\ud83d\udc31'}), '{\"a\": \"\ud83d\ude00\ud83d\udc31\"}')\n+        # Test mixed language and special characters\n+        self.assertEqual(field.prepare_value([\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]), '[\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]')\n+        # Test Japanese characters\n+        self.assertEqual(field.prepare_value(\"\u3053\u3093\u306b\u3061\u306f\"), '\"\u3053\u3093\u306b\u3061\u306f\"')\n+        # Test a mix of different languages\n+        self.assertEqual(field.prepare_value({\"message\": \"Hello, \u4f60\u597d, \u0645\u0631\u062d\u0628\u0627\"}), '{\"message\": \"Hello, \u4f60\u597d, \u0645\u0631\u062d\u0628\u0627\"}')\n         field = JSONField()\n         self.assertIsInstance(field.widget, Textarea)\n \n",
  "django__django-14404": "",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..b3baae0 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -655,7 +655,38 @@ class WriterTests(SimpleTestCase):\n         self.assertEqual(result.args, value.args)\n         self.assertEqual(result.keywords, value.keywords)\n \n-    def test_serialize_type_none(self):\n+    def test_missing_import_in_migration(self):\n+        \"\"\"\n+        Test that migration serialization correctly imports models when needed.\n+        \"\"\"\n+        fields = {\n+            'name': app.models.MyField(primary_key=True),\n+        }\n+\n+        options = {\n+            'abstract': False,\n+        }\n+\n+        # Create a migration with a model that uses a custom field and a mixin.\n+        migration = type(\"Migration\", (migrations.Migration,), {\n+            \"operations\": [\n+                migrations.CreateModel(\n+                    name=\"MyModel\",\n+                    fields=tuple(fields.items()),\n+                    options=options,\n+                    bases=(app.models.MyMixin, models.Model)\n+                ),\n+            ],\n+            \"dependencies\": [],\n+        })\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        # Execution should not raise a NameError for 'models'\n+        with self.assertRaises(NameError, msg=\"name 'models' is not defined\"):\n+            self.safe_exec(output)\n+        \n+        # Ensure 'from django.db import models' is present in the serialized output\n+        self.assertIn('from django.db import models', output)\n         self.assertSerializedEqual(type(None))\n \n     def test_simple_migration(self):\n",
  "django__django-15375": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1d4ef56..3710d62 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1637,9 +1637,29 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertEqual(len(qs), 6)\n \n+    def test_aggregate_with_default_after_annotate(self):\n+        # Test case specifically for the reported issue where using 'default' in aggregate() after annotate() crashes\n+        result = Book.objects.annotate(idx=F('id')).aggregate(sum_id=Sum('id', default=0))\n+        self.assertEqual(result['sum_id'], Book.objects.aggregate(total=Sum('id'))['total'])\n+\n+    def test_aggregate_with_default_long_form(self):\n+        # Test case to examine the long form that was working correctly\n+        result = Book.objects.annotate(idx=F('id')).aggregate(sum_id=Coalesce(Sum('id'), 0))\n+        self.assertEqual(result['sum_id'], Book.objects.aggregate(total=Sum('id'))['total'])\n+\n     def test_exists_extra_where_with_aggregate(self):\n         qs = Book.objects.all().annotate(\n             count=Count('id'),\n             exists=Exists(Author.objects.extra(where=['1=0'])),\n         )\n-        self.assertEqual(len(qs), 6)\n+        self.assertEqual(len(qs), 6)\n+\n+    def test_aggregate_with_default_after_annotate(self):\n+        # Test case specifically for the reported issue where using 'default' in aggregate() after annotate() crashes\n+        result = Book.objects.annotate(idx=F('id')).aggregate(sum_id=Sum('id', default=0))\n+        self.assertEqual(result['sum_id'], Book.objects.aggregate(total=Sum('id'))['total'])\n+\n+    def test_aggregate_with_default_long_form(self):\n+        # Test case to examine the long form that was working correctly\n+        result = Book.objects.annotate(idx=F('id')).aggregate(sum_id=Coalesce(Sum('id'), 0))\n+        self.assertEqual(result['sum_id'], Book.objects.aggregate(total=Sum('id'))['total'])\n",
  "django__django-15695": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 99db46a..316249e 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -2988,7 +2988,21 @@ class OperationTests(OperationTestBase):\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             operation.database_backwards(app_label, editor, new_state, project_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n-        # Deconstruction.\n+        # Test renaming the index back, ensuring old name is restored if unnamed\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        # Ensure the old auto-generated index name is restored.\n+        self.assertIndexNameExists(table_name, \"pony_pink_weight_idx\")  # Assuming this is the auto-generated name\n+\n+        # Re-apply renaming to check for no crash when toggling forward and backward\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+\n+        # Test that reapplying the renaming operation does not crash\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, new_state, project_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n         definition = operation.deconstruct()\n         self.assertEqual(definition[0], \"RenameIndex\")\n         self.assertEqual(definition[1], [])\n",
  "django__django-15732": "",
  "django__django-15916": "",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..d640b79 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -11,7 +11,9 @@ from django.test import SimpleTestCase, TestCase, TransactionTestCase\n from django.test.utils import isolate_apps\n from django.utils.translation import gettext_lazy, override\n \n-from .models import Score\n+from django.core import serializers\n+from django.db import models\n+from django.core.exceptions import FieldError\n from .tests import SerializersTestBase, SerializersTransactionTestBase\n \n \n@@ -223,7 +225,34 @@ class JsonSerializerTestCase(SerializersTestBase, TestCase):\n             for obj in serializers.deserialize(\"json\", test_string):\n                 obj.save()\n \n-    def test_helpful_error_message_for_many2many_natural2(self):\n+    def test_m2m_serialization_with_custom_manager_and_select_related(self):\n+        class TestTagMaster(models.Model):\n+            name = models.CharField(max_length=120)\n+\n+        class TestTagManager(models.Manager):\n+            def get_queryset(self):\n+                return super().get_queryset().select_related(\"master\")\n+\n+        class TestTag(models.Model):\n+            objects = TestTagManager()\n+            name = models.CharField(max_length=120)\n+            master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)\n+\n+        class Test(models.Model):\n+            name = models.CharField(max_length=120)\n+            tags = models.ManyToManyField(TestTag, blank=True)\n+\n+        # Create instances for serialization test\n+        tag_master = TestTagMaster.objects.create(name=\"master\")\n+        tag = TestTag.objects.create(name=\"tag\", master=tag_master)\n+        test = Test.objects.create(name=\"test\")\n+        test.tags.add(tag)\n+\n+        try:\n+            serialized_data = serializers.serialize(\"json\", [test])\n+            self.assertTrue(serialized_data)\n+        except FieldError:\n+            self.fail(\"FieldError raised during serialization with custom manager using select_related\")\n         \"\"\"\n         Invalid many-to-many keys should throw a helpful error message. This\n         tests the code path where a natural many-to-many key has only a single\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 53fdd55..5b30c47 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -206,6 +206,20 @@ def test_inset_and_secondary():\n def test_cmap(cmap):\n     pickle.dumps(cmap)\n \n+import pytest\n+import pickle\n+from matplotlib.figure import Figure\n+\n+@pytest.mark.skipif(platform.system() != 'Darwin' or 'arm' not in platform.machine(), reason=\"Test specific to M1 Mac\")\n+def test_unpickle_dpi_consistency_on_m1_mac():\n+    initial_dpi = 200\n+    fig = Figure(dpi=initial_dpi)\n+\n+    # Pickle and unpickle the figure\n+    fig2 = pickle.loads(pickle.dumps(fig))\n+\n+    # Check if the DPI is consistent after unpickling\n+    assert fig2.dpi == initial_dpi, f\"DPI doubled after unpickling: expected {initial_dpi}, got {fig2.dpi}\"\n \n def test_unpickle_canvas():\n     fig = mfigure.Figure()\n",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 87375f2..3c1afa1 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6604,6 +6604,11 @@ def test_integrate(dask):\n         da.integrate(\"x2d\")\n \n \n+import pytest\n+import xarray as xr\n+import numpy as np\n+from xarray.testing import assert_allclose, assert_equal\n+\n @pytest.mark.parametrize(\"dask\", [True, False])\n @pytest.mark.parametrize(\"which_datetime\", [\"np\", \"cftime\"])\n def test_trapz_datetime(dask, which_datetime):\n",
  "pydata__xarray-4094": "",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..31cff82 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -131,6 +131,30 @@ def test_regex_error(capsys: CaptureFixture) -> None:\n     assert assertString in output.err\n \n \n+@pytest.mark.parametrize(\"in_string,expected\", [\n+    (\"foo\", [\"foo\"]),\n+    (\"foo,bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar{1,3}\", [\"foo\", \"bar{1,3}\"]),\n+    (r\"(foo{1,3})\", [\"(foo{1,3})\"])\n+])\n+def test_csv_regex_comma_handling(in_string: str, expected: list[str], capsys: CaptureFixture) -> None:\n+    \"\"\"Check that the regular expression with commas in quantifiers is parsed correctly.\"\"\"\n+    try:\n+        r = Run(\n+            [str(EMPTY_MODULE), f\"--bad-names-rgxs={in_string}\"],\n+            exit=False,\n+        )\n+        bad_names_rgxs = r.linter.config.bad_names_rgxs\n+        assert bad_names_rgxs == [re.compile(regex) for regex in expected]\n+    except SystemExit:\n+        if in_string == r\"(foo{1,3})\":\n+            pytest.fail(\"Pylint should not crash on correctly formatted regex with commas in quantifiers.\")\n+        else:\n+            output = capsys.readouterr()\n+            assert \"Error in provided regular expression\" in output.err\n+\n+\n def test_csv_regex_error(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error when an option is passed and one\n     of its comma-separated regular expressions values is an invalid regular expression.\n",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..3bfd2d6 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1156,6 +1156,9 @@ def test_summary_list_after_errors(testdir):\n     )\n \n \n+import pytest\n+from _pytest.main import ExitCode\n+\n def test_importorskip():\n     with pytest.raises(\n         pytest.skip.Exception,\n@@ -1184,4 +1187,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "diff --git a/testing/test_mark_expression.py b/testing/test_mark_expression.py\nindex 10b71e9..83aa325 100644\n--- a/testing/test_mark_expression.py\n+++ b/testing/test_mark_expression.py\n@@ -139,6 +139,19 @@ def test_valid_idents(ident: str) -> None:\n     assert evaluate(ident, {ident: True}.__getitem__)\n \n \n+@pytest.mark.parametrize(\n+    \"input_expr, expected_error\",\n+    [\n+        (\"False\", True),  # Should raise an assertion error in debug build for Python 3.8+\n+    ],\n+)\n+def test_compile_expression_assertion(input_expr: str, expected_error: bool) -> None:\n+    if expected_error:\n+        with pytest.raises(AssertionError):\n+            Expression.compile(input_expr)\n+    else:\n+        assert Expression.compile(input_expr)\n+\n @pytest.mark.parametrize(\n     \"ident\",\n     (\n",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..e4c21d5 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,28 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+def test_feature_union_with_pandas_output():\n+    \"\"\"Test FeatureUnion with a transformer producing a pandas DataFrame.\"\"\"\n+    import pandas as pd\n+    from sklearn.pipeline import FeatureUnion\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y: None = None):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y: None = None) -> pd.DataFrame:\n+            return X[\"value\"].groupby(X[\"date\"]).sum().reset_index(name='value')\n+\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data={\"value\": [10] * len(index), \"date\": index.date})\n+\n+    set_config(transform_output=\"pandas\")\n+    fu = FeatureUnion([(\"my_transform\", MyTransformer())])\n+    \n+    result = fu.fit_transform(data)\n+    \n+    expected = data.groupby(\"date\")[\"value\"].sum().reset_index(name='value')\n+    pd.testing.assert_frame_equal(result, expected)\n",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a32a965..da29313 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -265,9 +265,18 @@ def test_parse_annotation():\n                           [desc_sig_punctuation, \", \"],\n                           [pending_xref, \"int\"],\n                           [desc_sig_punctuation, \"]\"]))\n-\n-\n-def test_pyfunction_signature(app):\n+def test_autodoc_typehints_signature():\n+    # Test that None return type does not produce a link when autodoc_typehints='signature'\n+    doctree = _parse_annotation(\"None\")\n+    assert_node(doctree, ([pending_xref, \"None\"],))\n+    assert_node(doctree[0], pending_xref, refdomain=\"py\", reftype=\"obj\", reftarget=\"None\")\n+\n+\n+def test_autodoc_typehints_description():\n+    # Test that None return type produces a link when autodoc_typehints='description'\n+    doctree = _parse_annotation(\"None\")\n+    assert_node(doctree, ([pending_xref, \"None\"],))\n+    assert_node(doctree[0], pending_xref, refdomain=\"py\", reftype=\"obj\", reftarget=\"None\")\n     text = \".. py:function:: hello(name: str) -> str\"\n     doctree = restructuredtext.parse(app, text)\n     assert_node(doctree, (addnodes.index,\n@@ -742,4 +751,3 @@ def test_modindex_common_prefix(app):\n                 IndexEntry('sphinx_intl', 0, 'index', 'module-sphinx_intl', '', '', '')])],\n         True\n     )\n-\n",
  "sphinx-doc__sphinx-8056": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 1d6a8cf..aa9376f 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1316,8 +1316,59 @@ class NumpyDocstringTest(BaseDocstringTest):\n             actual = str(NumpyDocstring(dedent(docstring), config))\n             expected = dedent(expected)\n             self.assertEqual(expected, actual)\n+    def test_multiple_parameters(self):\n+        # Test multiple parameters in the same line\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like\n+            Input arrays, description of `x1`, `x2`.\n \n-    def test_parameters_with_class_reference(self):\n+        \"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of ``x1``, ``x2``.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of ``x1``, ``x2``.\n+        :type x1: :class:`array_like`\n+        :param x2: Input arrays, description of ``x1``, ``x2``.\n+        :type x2: :class:`array_like`\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_with_optional(self):\n+        # Test multiple parameters in the same line with \"optional\"\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+\n+        \"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of ``x1``, ``x2``.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of ``x1``, ``x2``.\n+        :type x1: :class:`array_like`, *optional*\n+        :param x2: Input arrays, description of ``x1``, ``x2``.\n+        :type x2: :class:`array_like`, *optional*\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n         docstring = \"\"\"\\\n Parameters\n ----------\n",
  "sphinx-doc__sphinx-8551": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex fd4bdc4..dd97ef5 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -769,10 +769,102 @@ def test_pydecoratormethod_signature(app):\n                                   desc_content)]))\n     assert_node(doctree[1], addnodes.desc, desctype=\"method\",\n                 domain=\"py\", objtype=\"method\", noindex=False)\n+import pytest\n+from sphinx.testing import restructuredtext\n+from sphinx import addnodes\n+from docutils import nodes\n+from sphinx.domains.python import PythonModuleIndex\n+from sphinx.testing.util import assert_node\n+\n+@pytest.mark.sphinx(freshenv=True)\n+def test_ambiguous_xref_lookup(app):\n+    text = (\n+        \".. py:class:: mod.A\\n\"\n+        \".. py:class:: mod.submod.A\\n\"\n+        \"\\n\"\n+        \".. py:function:: f()\\n\"\n+        \"   :param mod.A a:\\n\"\n+        \"   :param mod.submod.A b:\\n\"\n+        \"   :rtype: mod.A\\n\"\n+        \"   :rtype: mod.submod.A\\n\"\n+        \"\\n\"\n+        \".. py:currentmodule:: mod\\n\"\n+        \"\\n\"\n+        \".. py:function:: f()\\n\"\n+        \"   :param A a:\\n\"\n+        \"   :param mod.A b:\\n\"\n+        \"   :param mod.submod.A c:\\n\"\n+        \"   :rtype: A\\n\"\n+        \"   :rtype: mod.A\\n\"\n+        \"   :rtype: mod.submod.A\\n\"\n+        \"\\n\"\n+        \".. py:currentmodule:: mod.submod\\n\"\n+        \"\\n\"\n+        \".. py:function:: f()\\n\"\n+        \"   :param A a: BUG: links to mod.A instead of mod.submod.A\\n\"\n+        \"   :param mod.A b:\\n\"\n+        \"   :param mod.submod.A c:\\n\"\n+        \"   :rtype: A\\n\"\n+        \"   :rtype: mod.A\\n\"\n+        \"   :rtype: mod.submod.A\\n\"\n+    )\n+    doctree = restructuredtext.parse(app, text)\n \n+    # Check for the absence of warnings and correct target links for ':param A a:' and ':rtype A'\n+    assert_node(doctree[0], addnodes.desc, desctype=\"class\", domain=\"py\", objtype=\"class\",\n+                noindex=False, names=[\"mod.A\"])\n+    assert_node(doctree[1], addnodes.desc, desctype=\"class\", domain=\"py\", objtype=\"class\",\n+                noindex=False, names=[\"mod.submod.A\"])\n+    # Checking if there are no warnings, which implies that the issue is resolved\n     assert 'deco' in domain.objects\n     assert domain.objects['deco'] == ('index', 'deco', 'method')\n+import pytest\n+from sphinx.testing import restructuredtext\n+from sphinx import addnodes\n+from docutils import nodes\n+from sphinx.domains.python import PythonModuleIndex\n+from sphinx.testing.util import assert_node\n+\n+@pytest.mark.sphinx(freshenv=True)\n+def test_ambiguous_xref_lookup(app):\n+    text = (\n+        \".. py:class:: mod.A\\n\"\n+        \".. py:class:: mod.submod.A\\n\"\n+        \"\\n\"\n+        \".. py:function:: f()\\n\"\n+        \"   :param mod.A a:\\n\"\n+        \"   :param mod.submod.A b:\\n\"\n+        \"   :rtype: mod.A\\n\"\n+        \"   :rtype: mod.submod.A\\n\"\n+        \"\\n\"\n+        \".. py:currentmodule:: mod\\n\"\n+        \"\\n\"\n+        \".. py:function:: f()\\n\"\n+        \"   :param A a:\\n\"\n+        \"   :param mod.A b:\\n\"\n+        \"   :param mod.submod.A c:\\n\"\n+        \"   :rtype: A\\n\"\n+        \"   :rtype: mod.A\\n\"\n+        \"   :rtype: mod.submod.A\\n\"\n+        \"\\n\"\n+        \".. py:currentmodule:: mod.submod\\n\"\n+        \"\\n\"\n+        \".. py:function:: f()\\n\"\n+        \"   :param A a: BUG: links to mod.A instead of mod.submod.A\\n\"\n+        \"   :param mod.A b:\\n\"\n+        \"   :param mod.submod.A c:\\n\"\n+        \"   :rtype: A\\n\"\n+        \"   :rtype: mod.A\\n\"\n+        \"   :rtype: mod.submod.A\\n\"\n+    )\n+    doctree = restructuredtext.parse(app, text)\n \n+    # Check for the absence of warnings and correct target links for ':param A a:' and ':rtype A'\n+    assert_node(doctree[0], addnodes.desc, desctype=\"class\", domain=\"py\", objtype=\"class\",\n+                noindex=False, names=[\"mod.A\"])\n+    assert_node(doctree[1], addnodes.desc, desctype=\"class\", domain=\"py\", objtype=\"class\",\n+                noindex=False, names=[\"mod.submod.A\"])\n+    # Checking if there are no warnings, which implies that the issue is resolved\n \n @pytest.mark.sphinx(freshenv=True)\n def test_module_index(app):\n",
  "sphinx-doc__sphinx-8593": "diff --git a/tests/roots/test-ext-autodoc/target/private.py b/tests/roots/test-ext-autodoc/target/private.py\nindex 677b469..ec4b94e 100644\n--- a/tests/roots/test-ext-autodoc/target/private.py\n+++ b/tests/roots/test-ext-autodoc/target/private.py\n@@ -1,3 +1,6 @@\n+\n+_foo = None  #: :meta public:\n+\n def private_function(name):\n     \"\"\"private_function is a docstring().\n \n@@ -8,4 +11,4 @@ def _public_function(name):\n     \"\"\"public_function is a docstring().\n \n     :meta public:\n-    \"\"\"\n+    \"\"\"\n",
  "sphinx-doc__sphinx-9230": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex e86a758..7281af2 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -963,6 +963,29 @@ def test_info_field_list(app):\n                 refdomain=\"py\", reftype=\"class\", reftarget=\"int\",\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n+    # :param dict(str, str) opc_meta:\n+    assert_node(doctree[3][1][0][0][1][0][3][0],\n+                ([addnodes.literal_strong, \"opc_meta\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"dict\"],\n+                 [addnodes.literal_emphasis, \"(\"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \", \"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \")\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"blah blah\"))\n+    assert_node(doctree[3][1][0][0][1][0][3][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"dict\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][3][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][3][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+\n     # :param items: + :type items:\n     assert_node(doctree[3][1][0][0][1][0][2][0],\n                 ([addnodes.literal_strong, \"items\"],\n",
  "sphinx-doc__sphinx-9258": "",
  "sphinx-doc__sphinx-9673": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex aa0401e..866e09d 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -862,6 +862,27 @@ def test_autodoc_typehints_description_no_undoc(app):\n             '      another tuple\\n'\n             '\\n'\n             '   Return type:\\n'\n+            '      int\\n'\n+            '\\n'\n+            'target.typehints.decr(a, b=1)\\n'\n+            '\\n'\n+            '   Returns:\\n'\n+            '      decremented number\\n'\n+            '\\n'\n+            '   Return type:\\n'\n+            '      int\\n'\n+            '\\n'\n+            'target.typehints.annotated_function(x: int) -> str\\n'\n+            '   Description.\\n'\n+            '\\n'\n+            '   Parameters:\\n'\n+            '      **x** (*int*) -- An integer parameter.\\n'\n+            '\\n'\n+            '   Returns:\\n'\n+            '      A string.\\n'\n+            '\\n'\n+            '   Return type:\\n'\n+            '      str\\n'\n             '      Tuple[int, int]\\n'\n             in context)\n \n",
  "sympy__sympy-18211": "diff --git a/sympy/solvers/tests/test_solveset.py b/sympy/solvers/tests/test_solveset.py\nindex 7bd9e29..5990fe8 100644\n--- a/sympy/solvers/tests/test_solveset.py\n+++ b/sympy/solvers/tests/test_solveset.py\n@@ -1068,7 +1068,29 @@ def test_conditionset():\n         ConditionSet(x, Eq(y**x - z, 0), S.Reals)\n \n \n-@XFAIL\n+def test_issue_18188():\n+    from sympy import Eq, cos, sin, ConditionSet, Reals, Symbol\n+    n = Symbol('n')\n+    # Original issue test case\n+    result1 = Eq(n*cos(n) - 3*sin(n), 0)\n+    assert result1.as_set() == ConditionSet(n, Eq(n*cos(n) - 3*sin(n), 0), Reals)\n+\n+    # Additional test cases\n+    x = Symbol('x')\n+    result2 = Eq(x**2 + x*sin(x), 0).as_set()\n+    assert result2 == ConditionSet(x, Eq(x**2 + x*sin(x), 0), Reals)\n+\n+    y = Symbol('y')\n+    result3 = Eq(y**2 + cos(y), 1).as_set()\n+    assert result3 == ConditionSet(y, Eq(y**2 + cos(y) - 1, 0), Reals)\n+\n+    z = Symbol('z')\n+    result4 = Eq(z + sin(z/2), 2).as_set()\n+    assert result4 == ConditionSet(z, Eq(z + sin(z/2) - 2, 0), Reals)\n+\n+    # Check with inequality - should still return ConditionSet\n+    result5 = (n*cos(n) > 3*sin(n)).as_set()\n+    assert result5 == ConditionSet(n, n*cos(n) > 3*sin(n), Reals)\n def test_conditionset_equality():\n     ''' Checking equality of different representations of ConditionSet'''\n     assert solveset(Eq(tan(x), y), x) == ConditionSet(x, Eq(tan(x), y), S.Complexes)\n",
  "sympy__sympy-18698": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 38de6f6..147845d 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3265,7 +3265,20 @@ def test_noncommutative():\n     assert cancel(e*foo(c)) == c*foo(c)\n \n \n-def test_to_rational_coeffs():\n+from sympy import symbols, sqf_list\n+\n+x, y = symbols('x y')\n+\n+def test_issue_8695():\n+    p = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3\n+    result = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\n+    assert sqf_list(p) == result\n+\n+def test_issue_additional_cases():\n+    # Additional test to ensure consistent behavior for similar polynomials.\n+    p = (x - 2)**3 * (x - 2) * (x - 3)**2 * (x**2 + 4)\n+    result = (1, [(x - 2, 4), (x - 3, 2), (x**2 + 4, 1)])\n+    assert sqf_list(p) == result\n     assert to_rational_coeffs(\n         Poly(x**3 + y*x**2 + sqrt(y), x, domain='EX')) is None\n \n",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..06da8ec 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3248,8 +3248,17 @@ def test_poly_matching_consistency():\n     assert I * Poly(x, x) == Poly(I*x, x)\n     assert Poly(x, x) * I == Poly(I*x, x)\n \n-\n-@XFAIL\n+from sympy import symbols, I, expand, factor\n+\n+def test_factor_with_extension():\n+    x, y, z, t = symbols('x y z t')\n+    \n+    z_expanded = expand((x - 1)*(y - 1))\n+    assert factor(z_expanded) == (x - 1)*(y - 1), \"Failed to factor without extension correctly\"\n+    \n+    # This is the problematic case described in the issue\n+    factor_with_extension = factor(z_expanded, extension=[I])\n+    assert factor_with_extension == (x - 1)*(y - 1), \"Factor with extension dropped (y - 1) factor\"\n def test_issue_5786():\n     assert expand(factor(expand(\n         (x - I*y)*(z - I*t)), extension=[I])) == -I*t*x - t*y + x*z - I*y*z\n",
  "sympy__sympy-20590": "",
  "sympy__sympy-24562": "",
  "django__django-14534": "",
  "matplotlib__matplotlib-20676": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex b009975..69b1919 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -301,8 +301,39 @@ def test_tool_line_handle():\n \n     assert tool_line_handle.positions == positions\n \n-\n-def check_lasso_selector(**kwargs):\n+import pytest\n+from matplotlib import pyplot as plt\n+from matplotlib import widgets\n+from matplotlib.testing.widgets import do_event\n+\n+@pytest.mark.parametrize('direction', (\"horizontal\", \"vertical\"))\n+def test_span_selector_bound_interactive(direction):\n+    fig, ax = plt.subplots(1, 1)\n+    ax.plot([10, 20], [10, 30])\n+    ax.figure.canvas.draw()\n+    x_bound = ax.get_xbound()\n+    y_bound = ax.get_ybound()\n+\n+    tool = widgets.SpanSelector(ax, print, direction, interactive=True)\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    bound = x_bound if direction == 'horizontal' else y_bound\n+    assert tool._edge_handles.positions == list(bound)\n+\n+    press_data = [10.5, 11.5]\n+    move_data = [11, 13]\n+    release_data = move_data\n+    do_event(tool, 'press', xdata=press_data[0], ydata=press_data[1], button=1)\n+    do_event(tool, 'onmove', xdata=move_data[0], ydata=move_data[1], button=1)\n+    do_event(tool, 'release', xdata=release_data[0], ydata=release_data[1], button=1)\n+\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    index = 0 if direction == 'horizontal' else 1\n+    handle_positions = [press_data[index], release_data[index]]\n+    assert tool._edge_handles.positions == handle_positions\n     ax = get_ax()\n \n     def onselect(verts):\n",
  "scikit-learn__scikit-learn-12682": "diff --git a/sklearn/decomposition/tests/test_dict_learning.py b/sklearn/decomposition/tests/test_dict_learning.py\nindex 35a43f8..19d7733 100644\n--- a/sklearn/decomposition/tests/test_dict_learning.py\n+++ b/sklearn/decomposition/tests/test_dict_learning.py\n@@ -56,8 +56,68 @@ def test_dict_learning_overcomplete():\n     dico = DictionaryLearning(n_components, random_state=0).fit(X)\n     assert dico.components_.shape == (n_components, n_features)\n \n-\n-def test_dict_learning_lars_positive_parameter():\n+import numpy as np\n+import pytest\n+from sklearn.decomposition import SparseCoder\n+from sklearn.utils._testing import assert_raises\n+\n+def test_sparse_coder_lasso_max_iter():\n+    def ricker_function(resolution, center, width):\n+        \"\"\"Discrete sub-sampled Ricker (Mexican hat) wavelet\"\"\"\n+        x = np.linspace(0, resolution - 1, resolution)\n+        x = ((2 / (np.sqrt(3 * width) * np.pi ** .25))\n+             * (1 - (x - center) ** 2 / width ** 2)\n+             * np.exp(-(x - center) ** 2 / (2 * width ** 2)))\n+        return x\n+\n+    def ricker_matrix(width, resolution, n_components):\n+        \"\"\"Dictionary of Ricker (Mexican hat) wavelets\"\"\"\n+        centers = np.linspace(0, resolution - 1, n_components)\n+        D = np.empty((n_components, resolution))\n+        for i, center in enumerate(centers):\n+            D[i] = ricker_function(resolution, center, width)\n+        D /= np.sqrt(np.sum(D ** 2, axis=1))[:, np.newaxis]\n+        return D\n+\n+    transform_algorithm = 'lasso_cd'\n+    resolution = 1024\n+    subsampling = 3  # subsampling factor\n+    n_components = resolution // subsampling\n+\n+    # Compute a wavelet dictionary\n+    D_multi = np.r_[tuple(ricker_matrix(width=w, resolution=resolution,\n+                                        n_components=n_components // 5)\n+                          for w in (10, 50, 100, 500, 1000))]\n+\n+    X = np.linspace(0, resolution - 1, resolution)\n+    first_quarter = X < resolution / 4\n+    X[first_quarter] = 3.\n+    X[np.logical_not(first_quarter)] = -1.\n+    X = X.reshape(1, -1)\n+\n+    # Check that the underlying model fails to converge\n+    with pytest.warns(ConvergenceWarning):\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=1)\n+        model.fit_transform(X)\n+\n+    # Check that the underlying model converges without warnings\n+    with pytest.warns(None) as record:\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=2000)\n+        model.fit_transform(X)\n+    assert not record.list\n+\n+    # Additional test: check with max_iter not set explicitly (default)\n+    with pytest.warns(ConvergenceWarning):\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm)\n+        model.fit_transform(X)\n+\n+    # Test invalid transform_max_iter parameter\n+    invalid_max_iter = 'invalid'\n+    with assert_raises(ValueError, match=\"transform_max_iter must be an integer\"):\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=invalid_max_iter)\n     n_components = 5\n     alpha = 1\n     err_msg = \"Positive constraint not supported for 'lars' coding method.\"\n",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..44308f8 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -137,8 +137,53 @@ def test_multi_target_sample_weights():\n     w = [2., 1.]\n     rgr_w = MultiOutputRegressor(GradientBoostingRegressor(random_state=0))\n     rgr_w.fit(Xw, yw, w)\n-\n-    # unweighted, but with repeated samples\n+import pytest\n+from sklearn.ensemble import RandomForestClassifier\n+from sklearn.multioutput import ClassifierChain\n+from sklearn.utils import shuffle\n+from sklearn.metrics import jaccard_score, mean_squared_error\n+from sklearn.utils._testing import assert_almost_equal\n+\n+@pytest.mark.parametrize(\n+    'estimator',\n+    [RandomForestClassifier(n_estimators=2),\n+     MultiOutputClassifier(RandomForestClassifier(n_estimators=2)),\n+     ClassifierChain(RandomForestClassifier(n_estimators=2))]\n+)\n+def test_multi_output_classes_(estimator):\n+    # Tests classes_ attribute of multioutput classifiers\n+    # RandomForestClassifier supports multioutput out-of-the-box\n+    iris = datasets.load_iris()\n+    X = iris.data\n+    y1 = iris.target\n+    y2 = shuffle(y1, random_state=1)\n+    y3 = shuffle(y1, random_state=2)\n+    y = np.column_stack((y1, y2, y3))\n+    n_samples, n_features = X.shape\n+    n_outputs = y.shape[1]\n+    estimator.fit(X, y)\n+    assert isinstance(estimator.classes_, list)\n+    assert len(estimator.classes_) == n_outputs\n+    for estimator_classes, expected_classes in zip(classes,\n+                                                   estimator.classes_):\n+        assert_array_equal(estimator_classes, expected_classes)\n+\n+def test_cross_val_predict_multioutput_predict_proba():\n+    # Test the fix for the AttributeError in cross_val_predict with MultiOutputClassifier and predict_proba\n+    X, Y = make_multilabel_classification()\n+    mo_lda = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+    \n+    # Testing predict method which should work without issues\n+    pred = cross_val_predict(mo_lda, X, Y, cv=5)\n+    assert pred.shape == Y.shape\n+    \n+    # Testing predict_proba method which was previously raising an AttributeError\n+    pred_proba = cross_val_predict(mo_lda, X, Y, cv=5, method='predict_proba')\n+    # The predict_proba should return a list of arrays, each corresponding to the probabilities for one output\n+    assert isinstance(pred_proba, list)\n+    assert len(pred_proba) == Y.shape[1]\n+    for proba in pred_proba:\n+        assert proba.shape == (X.shape[0], 2)  # LDA results in two classes per output\n     X = [[1, 2, 3], [1, 2, 3], [4, 5, 6]]\n     y = [[3.141, 2.718], [3.141, 2.718], [2.718, 3.141]]\n     rgr = MultiOutputRegressor(GradientBoostingRegressor(random_state=0))\n",
  "sphinx-doc__sphinx-9658": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 072cdc7..628fd0c 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -158,6 +158,36 @@ def test_restify_pep_585():\n                                                    \"[:py:class:`int`, ...]]\")\n \n \n+from sphinx.ext.autodoc import mock\n+\n+def test_restify_mock():\n+    with mock(['unknown']):\n+        import unknown\n+        assert restify(unknown.secret.Class) == ':py:class:`unknown.secret.Class`'\n+\n+def test_stringify_mock():\n+    with mock(['unknown']):\n+        import unknown\n+        assert stringify(unknown.secret.Class) == 'unknown.secret.Class'\n+\n+def test_documentation_of_inherited_mock_class():\n+    # Simulating an inherited class from a mocked base class\n+    with mock(['torch.nn']):\n+        import torch\n+        class MockModule:\n+            \"\"\" This is a mocked torch class \"\"\"\n+            pass\n+\n+        torch.nn.Module = MockModule\n+\n+        class InheritedClass(torch.nn.Module):\n+            \"\"\" This class inherits from mocked torch.nn.Module \"\"\"\n+            pass\n+\n+        # Check if the class is correctly referenced in the documentation\n+        assert restify(InheritedClass) == ':py:class:`unknown.InheritedClass`'\n+        assert stringify(InheritedClass) == 'unknown.InheritedClass'\n+\n @pytest.mark.skipif(sys.version_info < (3, 10), reason='python 3.10+ is required.')\n def test_restify_type_union_operator():\n     assert restify(int | None) == \":py:class:`int` | :py:obj:`None`\"  # type: ignore\n",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..377141d 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -347,7 +347,26 @@ def test_reverse_order():\n     assert Product(x*y, (x, a, b), (y, 2, 5)).reverse_order(y, x) == \\\n            Product(x*y, (x, b + 1, a - 1), (y, 6, 1))\n \n-\n+def test_issue_13546():\n+    from sympy import Symbol, Product, S\n+    n = Symbol('n', integer=True, positive=True)\n+    k = Symbol('k', integer=True)\n+    \n+    # Test the specific case mentioned in the issue\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 2).doit() == S(15)/2\n+    \n+    # Additional tests to verify correctness for different values of n\n+    assert p.subs(n, 1).doit() == S(3)\n+    assert p.subs(n, 3).doit() == S(85)/4\n+\n+    # Ensure the result is symbolic when it should be\n+    result_symbolic = p.subs(n, Symbol('m'))\n+    assert result_symbolic.has(Product)\n+    \n+    # Verify with higher n to check symbolic computation\n+    assert p.subs(n, 4).doit() == S(405)/8\n+    \n def test_issue_9983():\n     n = Symbol('n', integer=True, positive=True)\n     p = Product(1 + 1/n**(S(2)/3), (n, 1, oo))\n@@ -357,4 +376,4 @@ def test_issue_9983():\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}